   1               		.file	"Arduino-keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.SetupHardware,"ax",@progbits
  11               	.global	SetupHardware
  13               	SetupHardware:
  14               	.LFB87:
  15               		.file 1 "Arduino-keyboard.c"
   1:Arduino-keyboard.c **** /*
   2:Arduino-keyboard.c ****              LUFA Library
   3:Arduino-keyboard.c ****      Copyright (C) Dean Camera, 2010.
   4:Arduino-keyboard.c ****               
   5:Arduino-keyboard.c ****   dean [at] fourwalledcubicle [dot] com
   6:Arduino-keyboard.c ****       www.fourwalledcubicle.com
   7:Arduino-keyboard.c **** */
   8:Arduino-keyboard.c **** 
   9:Arduino-keyboard.c **** /*
  10:Arduino-keyboard.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Arduino-keyboard.c **** 
  12:Arduino-keyboard.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Arduino-keyboard.c ****   software and its documentation for any purpose is hereby granted
  14:Arduino-keyboard.c ****   without fee, provided that the above copyright notice appear in 
  15:Arduino-keyboard.c ****   all copies and that both that the copyright notice and this
  16:Arduino-keyboard.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Arduino-keyboard.c ****   documentation, and that the name of the author not be used in 
  18:Arduino-keyboard.c ****   advertising or publicity pertaining to distribution of the 
  19:Arduino-keyboard.c ****   software without specific, written prior permission.
  20:Arduino-keyboard.c **** 
  21:Arduino-keyboard.c ****   The author disclaim all warranties with regard to this
  22:Arduino-keyboard.c ****   software, including all implied warranties of merchantability
  23:Arduino-keyboard.c ****   and fitness.  In no event shall the author be liable for any
  24:Arduino-keyboard.c ****   special, indirect or consequential damages or any damages
  25:Arduino-keyboard.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Arduino-keyboard.c ****   in an action of contract, negligence or other tortious action,
  27:Arduino-keyboard.c ****   arising out of or in connection with the use or performance of
  28:Arduino-keyboard.c ****   this software.
  29:Arduino-keyboard.c **** */
  30:Arduino-keyboard.c **** 
  31:Arduino-keyboard.c **** /*-
  32:Arduino-keyboard.c ****  * Copyright (c) 2011 Darran Hunt (darran [at] hunt dot net dot nz)
  33:Arduino-keyboard.c ****  * All rights reserved.
  34:Arduino-keyboard.c ****  *
  35:Arduino-keyboard.c ****  * Redistribution and use in source and binary forms, with or without
  36:Arduino-keyboard.c ****  * modification, are permitted provided that the following conditions
  37:Arduino-keyboard.c ****  * are met:
  38:Arduino-keyboard.c ****  * 1. Redistributions of source code must retain the above copyright
  39:Arduino-keyboard.c ****  *    notice, this list of conditions and the following disclaimer.
  40:Arduino-keyboard.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  41:Arduino-keyboard.c ****  *    notice, this list of conditions and the following disclaimer in the
  42:Arduino-keyboard.c ****  *    documentation and/or other materials provided with the distribution.
  43:Arduino-keyboard.c ****  *
  44:Arduino-keyboard.c ****  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
  45:Arduino-keyboard.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  46:Arduino-keyboard.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
  47:Arduino-keyboard.c ****  * THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  48:Arduino-keyboard.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  49:Arduino-keyboard.c ****  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  50:Arduino-keyboard.c ****  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  51:Arduino-keyboard.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  52:Arduino-keyboard.c ****  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  53:Arduino-keyboard.c ****  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54:Arduino-keyboard.c ****  */
  55:Arduino-keyboard.c **** 
  56:Arduino-keyboard.c **** /*
  57:Arduino-keyboard.c ****  * Date         Rev  Description
  58:Arduino-keyboard.c ****  * 21-Mar-2011  0.1  Initial version.
  59:Arduino-keyboard.c ****  * 23-Mar-2011  0.2  Improved handling of serial reports to ensure that all reports
  60:Arduino-keyboard.c ****  *                   will be sent.
  61:Arduino-keyboard.c ****  * 13-Apr-2011  0.3  Extended range of keys from 101 to 231.
  62:Arduino-keyboard.c ****  */
  63:Arduino-keyboard.c **** 
  64:Arduino-keyboard.c **** /** \file
  65:Arduino-keyboard.c ****  *
  66:Arduino-keyboard.c ****  *  Main source file for the Arduino-keyboard project. This file contains the main tasks of
  67:Arduino-keyboard.c ****  *  the project and is responsible for the initial application hardware configuration.
  68:Arduino-keyboard.c ****  */
  69:Arduino-keyboard.c **** 
  70:Arduino-keyboard.c **** #include "Arduino-keyboard.h"
  71:Arduino-keyboard.c **** 
  72:Arduino-keyboard.c **** /** Buffer to hold the previously generated Keyboard HID report, for comparison purposes inside the
  73:Arduino-keyboard.c **** uint8_t PrevKeyboardHIDReportBuffer[sizeof(USB_KeyboardReport_Data_t)];
  74:Arduino-keyboard.c **** 
  75:Arduino-keyboard.c **** /** LUFA HID Class driver interface configuration and state information. This structure is
  76:Arduino-keyboard.c ****  *  passed to all HID Class driver functions, so that multiple instances of the same class
  77:Arduino-keyboard.c ****  *  within a device can be differentiated from one another.
  78:Arduino-keyboard.c ****  */
  79:Arduino-keyboard.c **** USB_ClassInfo_HID_Device_t Keyboard_HID_Interface =
  80:Arduino-keyboard.c ****  	{
  81:Arduino-keyboard.c **** 		.Config =
  82:Arduino-keyboard.c **** 			{
  83:Arduino-keyboard.c **** 				.InterfaceNumber              = 0,
  84:Arduino-keyboard.c **** 
  85:Arduino-keyboard.c **** 				.ReportINEndpointNumber       = KEYBOARD_EPNUM,
  86:Arduino-keyboard.c **** 				.ReportINEndpointSize         = KEYBOARD_EPSIZE,
  87:Arduino-keyboard.c **** 				.ReportINEndpointDoubleBank   = false,
  88:Arduino-keyboard.c **** 
  89:Arduino-keyboard.c **** 				.PrevReportINBuffer           = PrevKeyboardHIDReportBuffer,
  90:Arduino-keyboard.c **** 				.PrevReportINBufferSize       = sizeof(PrevKeyboardHIDReportBuffer),
  91:Arduino-keyboard.c **** 			},
  92:Arduino-keyboard.c ****     };
  93:Arduino-keyboard.c **** 
  94:Arduino-keyboard.c **** /** Main program entry point. This routine contains the overall program flow, including initial
  95:Arduino-keyboard.c ****  *  setup of all components and the main program loop.
  96:Arduino-keyboard.c ****  */
  97:Arduino-keyboard.c **** 
  98:Arduino-keyboard.c **** /** Circular buffer to hold data from the serial port before it is sent to the host. */
  99:Arduino-keyboard.c **** RingBuff_t USARTtoUSB_Buffer;
 100:Arduino-keyboard.c **** 
 101:Arduino-keyboard.c **** uint8_t keyboardData[8] = { 0 };
 102:Arduino-keyboard.c **** uint8_t ledReport = 0;
 103:Arduino-keyboard.c **** 
 104:Arduino-keyboard.c **** /** Main program entry point. This routine contains the overall program flow, including initial
 105:Arduino-keyboard.c ****  *  setup of all components and the main program loop.
 106:Arduino-keyboard.c ****  */
 107:Arduino-keyboard.c **** int main(void)
 108:Arduino-keyboard.c **** {
 109:Arduino-keyboard.c **** 	init_vars();
 110:Arduino-keyboard.c **** 	SetupHardware();
 111:Arduino-keyboard.c **** 
 112:Arduino-keyboard.c **** 	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);
 113:Arduino-keyboard.c **** 
 114:Arduino-keyboard.c **** 	sei();
 115:Arduino-keyboard.c **** 
 116:Arduino-keyboard.c **** 	for (;;)
 117:Arduino-keyboard.c **** 	{
 118:Arduino-keyboard.c **** 		HID_Device_USBTask(&Keyboard_HID_Interface);
 119:Arduino-keyboard.c **** 		USB_USBTask();
 120:Arduino-keyboard.c **** 	}
 121:Arduino-keyboard.c **** }
 122:Arduino-keyboard.c **** 
 123:Arduino-keyboard.c **** /** Configures the board hardware and chip peripherals for the demo's functionality. */
 124:Arduino-keyboard.c **** void SetupHardware(void)
 125:Arduino-keyboard.c **** {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18 0000 BF92      		push r11
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 11, -2
  22 0002 CF92      		push r12
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 12, -3
  26 0004 DF92      		push r13
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 13, -4
  30 0006 EF92      		push r14
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 14, -5
  34 0008 FF92      		push r15
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 15, -6
  38 000a 0F93      		push r16
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 16, -7
  42 000c 1F93      		push r17
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 17, -8
  46 000e CF93      		push r28
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 28, -9
  50 0010 DF93      		push r29
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 29, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
 126:Arduino-keyboard.c **** 	/* Disable watchdog if enabled by bootloader/fuses */
 127:Arduino-keyboard.c **** 	MCUSR &= ~(1 << WDRF);
  58               		.loc 1 127 0
  59 0012 84B7      		in r24,0x34
  60 0014 877F      		andi r24,lo8(-9)
  61 0016 84BF      		out 0x34,r24
 128:Arduino-keyboard.c **** 	wdt_disable();
  62               		.loc 1 128 0
  63 0018 88E1      		ldi r24,lo8(24)
  64               	/* #APP */
  65               	 ;  128 "Arduino-keyboard.c" 1
  66 001a 0FB6      		in __tmp_reg__, __SREG__
  67 001c F894      		cli
  68 001e 8093 6000 		sts 96, r24
  69 0022 1092 6000 		sts 96, __zero_reg__
  70 0026 0FBE      		out __SREG__,__tmp_reg__
  71               		
  72               	 ;  0 "" 2
  73               	.LVL0:
  74               	/* #NOAPP */
  75               	.LBB55:
  76               	.LBB56:
  77               		.file 2 "../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h"
   1:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** /*
   2:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****              LUFA Library
   3:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****      Copyright (C) Dean Camera, 2010.
   4:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****               
   5:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   dean [at] fourwalledcubicle [dot] com
   6:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****       www.fourwalledcubicle.com
   7:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** */
   8:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
   9:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** /*
  10:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  12:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   software and its documentation for any purpose is hereby granted
  14:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   without fee, provided that the above copyright notice appear in 
  15:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   all copies and that both that the copyright notice and this
  16:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   documentation, and that the name of the author not be used in 
  18:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   advertising or publicity pertaining to distribution of the 
  19:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   software without specific, written prior permission.
  20:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  21:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   The author disclaim all warranties with regard to this
  22:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   software, including all implied warranties of merchantability
  23:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   and fitness.  In no event shall the author be liable for any
  24:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   special, indirect or consequential damages or any damages
  25:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   in an action of contract, negligence or other tortious action,
  27:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   arising out of or in connection with the use or performance of
  28:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****   this software.
  29:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** */
  30:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  31:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** /** \file
  32:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  \brief Master include file for the USART peripheral driver.
  33:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *
  34:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  Driver for the USART subsystem on supported USB AVRs.
  35:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  */
  36:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  
  37:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** /** \ingroup Group_PeripheralDrivers
  38:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  @defgroup Group_Serial Serial USART Driver - LUFA/Drivers/Peripheral/Serial.h
  39:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *
  40:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  \section Sec_Dependencies Module Source Dependencies
  41:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  The following files must be built with any user project that uses this module:
  42:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *    - LUFA/Drivers/Peripheral/Serial.c <i>(Makefile source module name: LUFA_SRC_SERIAL)</i>
  43:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *
  44:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  \section Module Description
  45:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  Hardware serial USART driver. This module provides an easy to use driver for
  46:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  the setup of and transfer of data over the AVR's USART port.
  47:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *
  48:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  *  @{
  49:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  */
  50:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h ****  
  51:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** #ifndef __SERIAL_H__
  52:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** #define __SERIAL_H__
  53:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  54:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 	/* Includes: */
  55:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/io.h>
  56:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#include <avr/pgmspace.h>
  57:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#include <stdbool.h>
  58:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		
  59:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#include "../../Common/Common.h"
  60:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#include "../Misc/TerminalCodes.h"
  61:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  62:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#if defined(__cplusplus)
  64:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			extern "C" {
  65:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		#endif
  66:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  67:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 	/* Public Interface - May be used in end-application: */
  68:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		/* Macros: */
  69:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  70:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  not set.
  71:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
  72:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_UBBRVAL(baud)    ((((F_CPU / 16) + (baud / 2)) / (baud)) - 1)
  73:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  74:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Macro for calculating the baud value from a given baud rate when the U2X (double speed) bit 
  75:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  set.
  76:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
  77:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			#define SERIAL_2X_UBBRVAL(baud) ((((F_CPU / 8) + (baud / 2)) / (baud)) - 1)
  78:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  79:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		/* Function Prototypes: */
  80:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in program space (FLASH) through the USART.
  81:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *
  82:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] FlashStringPtr  Pointer to a string located in program space.
  83:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
  84:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString_P(const char* FlashStringPtr) ATTR_NON_NULL_PTR_ARG(1);
  85:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  86:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given string located in SRAM memory through the USART.
  87:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *
  88:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] StringPtr  Pointer to a string located in SRAM space.
  89:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
  90:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			void Serial_TxString(const char* StringPtr) ATTR_NON_NULL_PTR_ARG(1);
  91:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
  92:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 		/* Inline Functions: */
  93:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Initializes the USART, ready for serial data transmission and reception. This initializes th
  94:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  standard 8-bit, no parity, 1 stop bit settings suitable for most applications.
  95:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *
  96:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] BaudRate     Serial baud rate, in bits per second.
  97:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to doubl
  98:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
  99:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_Init(const uint32_t BaudRate,
 100:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			                               const bool DoubleSpeed)
 101:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			{
 102:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
  78               		.loc 2 102 0
  79 0028 8CEC      		ldi r24,lo8(-52)
  80 002a C82E      		mov r12,r24
  81 002c D12C      		mov r13,__zero_reg__
  82 002e 87E6      		ldi r24,lo8(103)
  83 0030 90E0      		ldi r25,0
  84 0032 F601      		movw r30,r12
  85 0034 9183      		std Z+1,r25
  86 0036 8083      		st Z,r24
 103:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
 104:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
  87               		.loc 2 104 0
  88 0038 9AEC      		ldi r25,lo8(-54)
  89 003a E92E      		mov r14,r25
  90 003c F12C      		mov r15,__zero_reg__
  91 003e 26E0      		ldi r18,lo8(6)
  92 0040 B22E      		mov r11,r18
  93 0042 F701      		movw r30,r14
  94 0044 B082      		st Z,r11
 105:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
  95               		.loc 2 105 0
  96 0046 08EC      		ldi r16,lo8(-56)
  97 0048 10E0      		ldi r17,0
  98 004a F801      		movw r30,r16
  99 004c 1082      		st Z,__zero_reg__
 106:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 100               		.loc 2 106 0
 101 004e C9EC      		ldi r28,lo8(-55)
 102 0050 D0E0      		ldi r29,0
 103 0052 88E1      		ldi r24,lo8(24)
 104 0054 8883      		st Y,r24
 107:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				
 108:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  |= (1 << 3);
 105               		.loc 2 108 0
 106 0056 539A      		sbi 0xa,3
 109:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				PORTD |= (1 << 2);
 107               		.loc 2 109 0
 108 0058 5A9A      		sbi 0xb,2
 109               	.LBE56:
 110               	.LBE55:
 129:Arduino-keyboard.c **** 
 130:Arduino-keyboard.c **** 	/* Hardware Initialization */
 131:Arduino-keyboard.c **** 	Serial_Init(9600, false);
 132:Arduino-keyboard.c **** 	USB_Init();
 111               		.loc 1 132 0
 112 005a 0E94 0000 		call USB_Init
 113               	.LVL1:
 133:Arduino-keyboard.c **** 
 134:Arduino-keyboard.c **** 	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interfa
 135:Arduino-keyboard.c **** 	TCCR0B = (1 << CS02);
 114               		.loc 1 135 0
 115 005e 84E0      		ldi r24,lo8(4)
 116 0060 85BD      		out 0x25,r24
 136:Arduino-keyboard.c **** 	
 137:Arduino-keyboard.c **** 	/* Pull target /RESET line high */
 138:Arduino-keyboard.c **** 	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 117               		.loc 1 138 0
 118 0062 5F9A      		sbi 0xb,7
 139:Arduino-keyboard.c **** 	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
 119               		.loc 1 139 0
 120 0064 579A      		sbi 0xa,7
 140:Arduino-keyboard.c **** 
 141:Arduino-keyboard.c **** 	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
 142:Arduino-keyboard.c **** 	UCSR1B = 0;
 121               		.loc 1 142 0
 122 0066 1882      		st Y,__zero_reg__
 143:Arduino-keyboard.c **** 	UCSR1A = 0;
 123               		.loc 1 143 0
 124 0068 F801      		movw r30,r16
 125 006a 1082      		st Z,__zero_reg__
 144:Arduino-keyboard.c **** 	UCSR1C = 0;
 126               		.loc 1 144 0
 127 006c F701      		movw r30,r14
 128 006e 1082      		st Z,__zero_reg__
 145:Arduino-keyboard.c **** 
 146:Arduino-keyboard.c **** 	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
 147:Arduino-keyboard.c **** 	UBRR1  = SERIAL_2X_UBBRVAL(9600);
 129               		.loc 1 147 0
 130 0070 8FEC      		ldi r24,lo8(-49)
 131 0072 90E0      		ldi r25,0
 132 0074 F601      		movw r30,r12
 133 0076 9183      		std Z+1,r25
 134 0078 8083      		st Z,r24
 148:Arduino-keyboard.c **** 
 149:Arduino-keyboard.c **** 	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 135               		.loc 1 149 0
 136 007a F701      		movw r30,r14
 137 007c B082      		st Z,r11
 150:Arduino-keyboard.c **** 	UCSR1A = (1 << U2X1);
 138               		.loc 1 150 0
 139 007e 82E0      		ldi r24,lo8(2)
 140 0080 F801      		movw r30,r16
 141 0082 8083      		st Z,r24
 151:Arduino-keyboard.c **** 	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 142               		.loc 1 151 0
 143 0084 88E9      		ldi r24,lo8(-104)
 144 0086 8883      		st Y,r24
 145               	/* epilogue start */
 152:Arduino-keyboard.c **** }
 146               		.loc 1 152 0
 147 0088 DF91      		pop r29
 148 008a CF91      		pop r28
 149 008c 1F91      		pop r17
 150 008e 0F91      		pop r16
 151 0090 FF90      		pop r15
 152 0092 EF90      		pop r14
 153 0094 DF90      		pop r13
 154 0096 CF90      		pop r12
 155 0098 BF90      		pop r11
 156 009a 0895      		ret
 157               		.cfi_endproc
 158               	.LFE87:
 160               		.section	.text.startup.main,"ax",@progbits
 161               	.global	main
 163               	main:
 164               	.LFB86:
 108:Arduino-keyboard.c **** {
 165               		.loc 1 108 0
 166               		.cfi_startproc
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 0 */
 170               	.L__stack_usage = 0
 109:Arduino-keyboard.c **** 	init_vars();
 171               		.loc 1 109 0
 172 0000 0E94 0000 		call init_vars
 173               	.LVL2:
 110:Arduino-keyboard.c **** 	SetupHardware();
 174               		.loc 1 110 0
 175 0004 0E94 0000 		call SetupHardware
 176               	.LVL3:
 177               	.LBB64:
 178               	.LBB65:
 179               		.file 3 "Lib/LightweightRingBuff.h"
   1:Lib/LightweightRingBuff.h **** /*
   2:Lib/LightweightRingBuff.h ****              LUFA Library
   3:Lib/LightweightRingBuff.h ****      Copyright (C) Dean Camera, 2010.
   4:Lib/LightweightRingBuff.h ****               
   5:Lib/LightweightRingBuff.h ****   dean [at] fourwalledcubicle [dot] com
   6:Lib/LightweightRingBuff.h ****       www.fourwalledcubicle.com
   7:Lib/LightweightRingBuff.h **** */
   8:Lib/LightweightRingBuff.h **** 
   9:Lib/LightweightRingBuff.h **** /*
  10:Lib/LightweightRingBuff.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Lib/LightweightRingBuff.h **** 
  12:Lib/LightweightRingBuff.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:Lib/LightweightRingBuff.h ****   software and its documentation for any purpose is hereby granted
  14:Lib/LightweightRingBuff.h ****   without fee, provided that the above copyright notice appear in 
  15:Lib/LightweightRingBuff.h ****   all copies and that both that the copyright notice and this
  16:Lib/LightweightRingBuff.h ****   permission notice and warranty disclaimer appear in supporting 
  17:Lib/LightweightRingBuff.h ****   documentation, and that the name of the author not be used in 
  18:Lib/LightweightRingBuff.h ****   advertising or publicity pertaining to distribution of the 
  19:Lib/LightweightRingBuff.h ****   software without specific, written prior permission.
  20:Lib/LightweightRingBuff.h **** 
  21:Lib/LightweightRingBuff.h ****   The author disclaim all warranties with regard to this
  22:Lib/LightweightRingBuff.h ****   software, including all implied warranties of merchantability
  23:Lib/LightweightRingBuff.h ****   and fitness.  In no event shall the author be liable for any
  24:Lib/LightweightRingBuff.h ****   special, indirect or consequential damages or any damages
  25:Lib/LightweightRingBuff.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:Lib/LightweightRingBuff.h ****   in an action of contract, negligence or other tortious action,
  27:Lib/LightweightRingBuff.h ****   arising out of or in connection with the use or performance of
  28:Lib/LightweightRingBuff.h ****   this software.
  29:Lib/LightweightRingBuff.h **** */
  30:Lib/LightweightRingBuff.h **** 
  31:Lib/LightweightRingBuff.h **** /** \file
  32:Lib/LightweightRingBuff.h ****  *
  33:Lib/LightweightRingBuff.h ****  *  Ultra lightweight ring buffer, for fast insertion/deletion.
  34:Lib/LightweightRingBuff.h ****  */
  35:Lib/LightweightRingBuff.h ****  
  36:Lib/LightweightRingBuff.h **** #ifndef _ULW_RING_BUFF_H_
  37:Lib/LightweightRingBuff.h **** #define _ULW_RING_BUFF_H_
  38:Lib/LightweightRingBuff.h **** 
  39:Lib/LightweightRingBuff.h **** 	/* Includes: */
  40:Lib/LightweightRingBuff.h **** 		#include <util/atomic.h>
  41:Lib/LightweightRingBuff.h **** 	
  42:Lib/LightweightRingBuff.h **** 		#include <stdint.h>
  43:Lib/LightweightRingBuff.h **** 		#include <stdbool.h>
  44:Lib/LightweightRingBuff.h **** 
  45:Lib/LightweightRingBuff.h **** 	/* Defines: */
  46:Lib/LightweightRingBuff.h **** 		/** Size of each ring buffer, in data elements - must be between 1 and 255. */
  47:Lib/LightweightRingBuff.h **** 		#define BUFFER_SIZE         128
  48:Lib/LightweightRingBuff.h **** 		
  49:Lib/LightweightRingBuff.h **** 		/** Maximum number of data elements to buffer before forcing a flush. 
  50:Lib/LightweightRingBuff.h **** 		 *  Must be less than BUFFER_SIZE
  51:Lib/LightweightRingBuff.h **** 		 */
  52:Lib/LightweightRingBuff.h **** 		#define BUFFER_NEARLY_FULL	96
  53:Lib/LightweightRingBuff.h **** 		
  54:Lib/LightweightRingBuff.h **** 		/** Type of data to store into the buffer. */
  55:Lib/LightweightRingBuff.h **** 		#define RingBuff_Data_t     uint8_t
  56:Lib/LightweightRingBuff.h **** 
  57:Lib/LightweightRingBuff.h **** 		/** Datatype which may be used to store the count of data stored in a buffer, retrieved
  58:Lib/LightweightRingBuff.h **** 		 *  via a call to \ref RingBuffer_GetCount().
  59:Lib/LightweightRingBuff.h **** 		 */
  60:Lib/LightweightRingBuff.h **** 		#if (BUFFER_SIZE <= 0xFF)
  61:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint8_t
  62:Lib/LightweightRingBuff.h **** 		#else
  63:Lib/LightweightRingBuff.h **** 			#define RingBuff_Count_t   uint16_t
  64:Lib/LightweightRingBuff.h **** 		#endif
  65:Lib/LightweightRingBuff.h **** 
  66:Lib/LightweightRingBuff.h **** 	/* Type Defines: */
  67:Lib/LightweightRingBuff.h **** 		/** Type define for a new ring buffer object. Buffers should be initialized via a call to
  68:Lib/LightweightRingBuff.h **** 		 *  \ref RingBuffer_InitBuffer() before use.
  69:Lib/LightweightRingBuff.h **** 		 */
  70:Lib/LightweightRingBuff.h **** 		typedef struct
  71:Lib/LightweightRingBuff.h **** 		{
  72:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t  Buffer[BUFFER_SIZE]; /**< Internal ring buffer data, referenced by the buffer p
  73:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* In; /**< Current storage location in the circular buffer */
  74:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t* Out; /**< Current retrieval location in the circular buffer */
  75:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
  76:Lib/LightweightRingBuff.h **** 		} RingBuff_t;
  77:Lib/LightweightRingBuff.h **** 	
  78:Lib/LightweightRingBuff.h **** 	/* Inline Functions: */
  79:Lib/LightweightRingBuff.h **** 		/** Initializes a ring buffer ready for use. Buffers must be initialized via this function
  80:Lib/LightweightRingBuff.h **** 		 *  before any operations are called upon them. Already initialized buffers may be reset
  81:Lib/LightweightRingBuff.h **** 		 *  by re-initializing them using this function.
  82:Lib/LightweightRingBuff.h **** 		 *
  83:Lib/LightweightRingBuff.h **** 		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
  84:Lib/LightweightRingBuff.h **** 		 */
  85:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
  86:Lib/LightweightRingBuff.h **** 		{
  87:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 180               		.loc 3 87 0
 181 0008 2FB7      		in r18,__SREG__
 182               	.LVL4:
 183               	.LBB66:
 184               	.LBB67:
 185               		.file 4 "/usr/lib/avr/include/util/atomic.h"
   1:/usr/lib/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/avr/include/util/atomic.h **** 
   4:/usr/lib/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/avr/include/util/atomic.h **** 
   7:/usr/lib/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/avr/include/util/atomic.h **** 
  10:/usr/lib/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/avr/include/util/atomic.h **** 
  15:/usr/lib/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/avr/include/util/atomic.h **** 
  19:/usr/lib/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/avr/include/util/atomic.h **** */
  31:/usr/lib/avr/include/util/atomic.h **** 
  32:/usr/lib/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/lib/avr/include/util/atomic.h **** 
  34:/usr/lib/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/avr/include/util/atomic.h **** 
  37:/usr/lib/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/avr/include/util/atomic.h **** 
  40:/usr/lib/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/avr/include/util/atomic.h **** {
  44:/usr/lib/avr/include/util/atomic.h ****     sei();
  45:/usr/lib/avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/avr/include/util/atomic.h **** }
  47:/usr/lib/avr/include/util/atomic.h **** 
  48:/usr/lib/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/avr/include/util/atomic.h **** {
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 186               		.loc 4 50 0
 187               	/* #APP */
 188               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 189 000a F894      		cli
 190               	 ;  0 "" 2
 191               	.LVL5:
 192               	/* #NOAPP */
 193               	.LBE67:
 194               	.LBE66:
  88:Lib/LightweightRingBuff.h **** 			{
  89:Lib/LightweightRingBuff.h **** 				Buffer->In  = Buffer->Buffer;
 195               		.loc 3 89 0
 196 000c 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 197 000e 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 198 0010 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 199 0014 8093 0000 		sts USARTtoUSB_Buffer+128,r24
  90:Lib/LightweightRingBuff.h **** 				Buffer->Out = Buffer->Buffer;
 200               		.loc 3 90 0
 201 0018 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 202 001c 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 203               	.LVL6:
 204               	.LBB68:
 205               	.LBB69:
  51:/usr/lib/avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/avr/include/util/atomic.h **** }
  53:/usr/lib/avr/include/util/atomic.h **** 
  54:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/avr/include/util/atomic.h **** {
  56:/usr/lib/avr/include/util/atomic.h ****     sei();
  57:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/lib/avr/include/util/atomic.h **** }
  60:/usr/lib/avr/include/util/atomic.h **** 
  61:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/lib/avr/include/util/atomic.h **** {
  63:/usr/lib/avr/include/util/atomic.h ****     cli();
  64:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/lib/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/lib/avr/include/util/atomic.h **** }
  67:/usr/lib/avr/include/util/atomic.h **** 
  68:/usr/lib/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/lib/avr/include/util/atomic.h **** {
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
 206               		.loc 4 70 0
 207 0020 2FBF      		out __SREG__,r18
  71:/usr/lib/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 208               		.loc 4 71 0
 209               	.LBE69:
 210               	.LBE68:
 211               	.LBE65:
 212               	.LBE64:
 114:Arduino-keyboard.c **** 	sei();
 213               		.loc 1 114 0
 214               	/* #APP */
 215               	 ;  114 "Arduino-keyboard.c" 1
 216 0022 7894      		sei
 217               	 ;  0 "" 2
 218               	.LVL7:
 219               	/* #NOAPP */
 220               	.L3:
 118:Arduino-keyboard.c **** 		HID_Device_USBTask(&Keyboard_HID_Interface);
 221               		.loc 1 118 0 discriminator 1
 222 0024 80E0      		ldi r24,lo8(Keyboard_HID_Interface)
 223 0026 90E0      		ldi r25,hi8(Keyboard_HID_Interface)
 224 0028 0E94 0000 		call HID_Device_USBTask
 225               	.LVL8:
 119:Arduino-keyboard.c **** 		USB_USBTask();
 226               		.loc 1 119 0 discriminator 1
 227 002c 0E94 0000 		call USB_USBTask
 228               	.LVL9:
 229 0030 00C0      		rjmp .L3
 230               		.cfi_endproc
 231               	.LFE86:
 233               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 234               	.global	EVENT_USB_Device_Connect
 236               	EVENT_USB_Device_Connect:
 237               	.LFB88:
 153:Arduino-keyboard.c **** 
 154:Arduino-keyboard.c **** /** Event handler for the library USB Connection event. */
 155:Arduino-keyboard.c **** void EVENT_USB_Device_Connect(void)
 156:Arduino-keyboard.c **** {
 238               		.loc 1 156 0
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
 244 0000 0895      		ret
 245               		.cfi_endproc
 246               	.LFE88:
 248               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 249               	.global	EVENT_USB_Device_Disconnect
 251               	EVENT_USB_Device_Disconnect:
 252               	.LFB89:
 157:Arduino-keyboard.c **** 	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 158:Arduino-keyboard.c **** }
 159:Arduino-keyboard.c **** 
 160:Arduino-keyboard.c **** /** Event handler for the library USB Disconnection event. */
 161:Arduino-keyboard.c **** void EVENT_USB_Device_Disconnect(void)
 162:Arduino-keyboard.c **** {
 253               		.loc 1 162 0
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
 259 0000 0895      		ret
 260               		.cfi_endproc
 261               	.LFE89:
 263               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 264               	.global	EVENT_USB_Device_ConfigurationChanged
 266               	EVENT_USB_Device_ConfigurationChanged:
 267               	.LFB90:
 163:Arduino-keyboard.c **** 	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 164:Arduino-keyboard.c **** }
 165:Arduino-keyboard.c **** 
 166:Arduino-keyboard.c **** /** Event handler for the library USB Configuration Changed event. */
 167:Arduino-keyboard.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 168:Arduino-keyboard.c **** {
 268               		.loc 1 168 0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
 169:Arduino-keyboard.c **** 	//LEDs_SetAllLEDs(LEDMASK_USB_READY);
 170:Arduino-keyboard.c **** 
 171:Arduino-keyboard.c **** 	HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 274               		.loc 1 171 0
 275 0000 80E0      		ldi r24,lo8(Keyboard_HID_Interface)
 276 0002 90E0      		ldi r25,hi8(Keyboard_HID_Interface)
 277 0004 0E94 0000 		call HID_Device_ConfigureEndpoints
 278               	.LVL10:
 279               	.LBB70:
 280               	.LBB71:
 281               		.file 5 "../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h"
   1:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
   2:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****              LUFA Library
   3:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****      Copyright (C) Dean Camera, 2010.
   4:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****               
   5:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   dean [at] fourwalledcubicle [dot] com
   6:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****       www.fourwalledcubicle.com
   7:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
   8:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
   9:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /*
  10:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  12:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software and its documentation for any purpose is hereby granted
  14:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   without fee, provided that the above copyright notice appear in 
  15:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   all copies and that both that the copyright notice and this
  16:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   documentation, and that the name of the author not be used in 
  18:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   advertising or publicity pertaining to distribution of the 
  19:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software without specific, written prior permission.
  20:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  21:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   The author disclaim all warranties with regard to this
  22:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   software, including all implied warranties of merchantability
  23:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   and fitness.  In no event shall the author be liable for any
  24:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   special, indirect or consequential damages or any damages
  25:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   in an action of contract, negligence or other tortious action,
  27:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   arising out of or in connection with the use or performance of
  28:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****   this software.
  29:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** */
  30:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  31:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \file
  32:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \brief USB device mode definitions.
  33:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  34:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  This file contains structures, function prototypes and macros related to USB device mode.
  35:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  36:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  38:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  39:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  40:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** /** \ingroup Group_USB
  41:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @defgroup Group_Device Device Management
  42:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  43:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  USB Device mode related macros and enums. This module contains macros and enums which are used 
  44:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  the USB controller is initialized in device mode.
  45:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *
  46:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  *  @{
  47:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h ****  */
  48:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  49:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #ifndef __USBDEVICE_H__
  50:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** #define __USBDEVICE_H__
  51:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  52:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Includes: */
  53:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/io.h>
  54:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/pgmspace.h>
  55:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include <avr/eeprom.h>
  56:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  57:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../../../Common/Common.h"	
  58:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "../HighLevel/StdDescriptors.h"
  59:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "USBInterrupt.h"
  60:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#include "Endpoint.h"
  61:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  62:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Preprocessor Checks: */
  63:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  64:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  65:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  66:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  67:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  68:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  69:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		#endif
  70:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  71:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 	/* Public Interface - May be used in end-application: */
  72:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Macros: */
  73:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  74:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  75:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  76:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  77:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  78:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        \n\n
  79:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *
  80:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  81:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 *        when running in low speed mode -- refer to the USB 2.0 standard.
  82:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				 */
  83:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  84:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#endif
  85:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
  86:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  87:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  88:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
  89:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  90:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 
  91:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Function Prototypes: */
  92:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
  93:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  be taken out of suspended mode, and communications should resume.
  94:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  95:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
  96:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
  97:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
  98:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
  99:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 100:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 101:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_RemoteWakeupEnabled flag is set). When the NO_DEVICE_REMOTE_WAKEUP compil
 102:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        time option is used, this macro is unavailable.
 103:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        \n
 104:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 105:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 106:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 107:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *        before attempting to call this function.
 108:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *
 109:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \see \ref Group_Descriptors for more information on the RMWAKEUP feature and device descript
 110:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 111:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			void USB_Device_SendRemoteWakeup(void);
 112:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 113:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Type Defines: */
 114:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			enum USB_Device_States_t
 115:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 116:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Unattached                   = 0, /**< Internally implemented by the library. This
 117:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is not currently connected 
 118:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 119:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Powered                      = 1, /**< Internally implemented by the library. This
 120:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device is connected to a host, but
 121:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet begun.
 122:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 123:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Default                      = 2, /**< Internally implemented by the library. This
 124:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device's USB bus has been reset by
 125:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   now waiting for the host to begin the enume
 126:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 127:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Addressed                    = 3, /**< Internally implemented by the library. This
 128:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been addressed by the U
 129:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   yet configured.
 130:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 131:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Configured                   = 4, /**< May be implemented by the user project. Thi
 132:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the device has been enumerated by the 
 133:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   for USB communications to begin.
 134:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 135:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				DEVICE_STATE_Suspended                    = 5, /**< May be implemented by the user project. Thi
 136:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   that the USB bus has been suspended by the 
 137:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   should power down to a minimal power level 
 138:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                *   resumed.
 139:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				                                                */
 140:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			};
 141:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			
 142:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 		/* Inline Functions: */
 143:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			/** Enables the device mode Start Of Frame events. When enabled, this causes the
 144:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to the
 145:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 *  at the start of each USB frame when enumerated in device mode.
 146:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			 */
 147:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 148:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			static inline void USB_Device_EnableSOFEvents(void)
 149:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 			{
 150:../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/Device.h **** 				USB_INT_Enable(USB_INT_SOFI);
 282               		.loc 5 150 0
 283 0008 E2EE      		ldi r30,lo8(-30)
 284 000a F0E0      		ldi r31,0
 285 000c 8081      		ld r24,Z
 286 000e 8460      		ori r24,lo8(4)
 287 0010 8083      		st Z,r24
 288 0012 0895      		ret
 289               	.LBE71:
 290               	.LBE70:
 291               		.cfi_endproc
 292               	.LFE90:
 294               		.section	.text.EVENT_USB_Device_UnhandledControlRequest,"ax",@progbits
 295               	.global	EVENT_USB_Device_UnhandledControlRequest
 297               	EVENT_USB_Device_UnhandledControlRequest:
 298               	.LFB91:
 172:Arduino-keyboard.c **** 
 173:Arduino-keyboard.c **** 	USB_Device_EnableSOFEvents();
 174:Arduino-keyboard.c **** }
 175:Arduino-keyboard.c **** 
 176:Arduino-keyboard.c **** /** Event handler for the library USB Unhandled Control Request event. */
 177:Arduino-keyboard.c **** void EVENT_USB_Device_UnhandledControlRequest(void)
 178:Arduino-keyboard.c **** {
 299               		.loc 1 178 0
 300               		.cfi_startproc
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 179:Arduino-keyboard.c **** 	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 305               		.loc 1 179 0
 306 0000 80E0      		ldi r24,lo8(Keyboard_HID_Interface)
 307 0002 90E0      		ldi r25,hi8(Keyboard_HID_Interface)
 308 0004 0C94 0000 		jmp HID_Device_ProcessControlRequest
 309               	.LVL11:
 310               		.cfi_endproc
 311               	.LFE91:
 313               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 314               	.global	EVENT_USB_Device_StartOfFrame
 316               	EVENT_USB_Device_StartOfFrame:
 317               	.LFB92:
 180:Arduino-keyboard.c **** }
 181:Arduino-keyboard.c **** 
 182:Arduino-keyboard.c **** /** Event handler for the USB device Start Of Frame event. */
 183:Arduino-keyboard.c **** void EVENT_USB_Device_StartOfFrame(void)
 184:Arduino-keyboard.c **** {
 318               		.loc 1 184 0
 319               		.cfi_startproc
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 324               	.LVL12:
 325               	.LBB72:
 326               	.LBB73:
 327               		.file 6 "../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h"
   1:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** /*
   2:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****              LUFA Library
   3:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****      Copyright (C) Dean Camera, 2010.
   4:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****               
   5:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   dean [at] fourwalledcubicle [dot] com
   6:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****       www.fourwalledcubicle.com
   7:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** */
   8:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
   9:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** /*
  10:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  12:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   software and its documentation for any purpose is hereby granted
  14:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   without fee, provided that the above copyright notice appear in 
  15:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   all copies and that both that the copyright notice and this
  16:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   documentation, and that the name of the author not be used in 
  18:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   advertising or publicity pertaining to distribution of the 
  19:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   software without specific, written prior permission.
  20:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  21:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   The author disclaim all warranties with regard to this
  22:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   software, including all implied warranties of merchantability
  23:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   and fitness.  In no event shall the author be liable for any
  24:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   special, indirect or consequential damages or any damages
  25:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   in an action of contract, negligence or other tortious action,
  27:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   arising out of or in connection with the use or performance of
  28:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****   this software.
  29:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** */
  30:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  31:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** /** \file
  32:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  \brief Device mode driver for the library USB HID Class driver.
  33:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *
  34:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device mode driver for the library USB HID Class driver.
  35:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *
  36:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  37:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *        dispatch header located in LUFA/Drivers/USB/Class/HID.h.
  38:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  */
  39:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  40:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** /** \ingroup Group_USBClassHID
  41:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  @defgroup Group_USBClassHIDDevice HID Class Device Mode Driver
  42:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *
  43:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Sec_Dependencies Module Source Dependencies
  44:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  The following files must be built with any user project that uses this module:
  45:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *    - LUFA/Drivers/USB/Class/Device/HID.c <i>(Makefile source module name: LUFA_SRC_USBCLASS)</i>
  46:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *
  47:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  \section Module Description
  48:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  Device Mode USB Class driver framework interface, for the HID USB Class driver.
  49:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *
  50:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  *  @{
  51:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  */
  52:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h ****  
  53:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** #ifndef _HID_CLASS_DEVICE_H_
  54:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** #define _HID_CLASS_DEVICE_H_
  55:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  56:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Includes: */
  57:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../../USB.h"
  58:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#include "../Common/HID.h"
  59:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  60:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#include <string.h>
  61:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  62:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Enable C linkage for C++ Compilers: */
  63:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#if defined(__cplusplus)
  64:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			extern "C" {
  65:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  66:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  67:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Preprocessor Checks: */
  68:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#if !defined(__INCLUDE_FROM_HID_DRIVER)
  69:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			#error Do not include this file directly. Include LUFA/Drivers/Class/HID.h instead.
  70:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		#endif
  71:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  72:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 	/* Public Interface - May be used in end-application: */
  73:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Type Defines: */
  74:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** \brief HID Class Device Mode Configuration and State Structure.
  75:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  76:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  Class state structure. An instance of this structure should be made for each HID interface
  77:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  within the user application, and passed to each of the HID class driver functions as the
  78:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HIDInterfaceInfo parameter. This stores each HID interface's configuration and state informa
  79:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
  80:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \note Due to technical limitations, the HID device class driver does not utilize a separate 
  81:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        endpoint for host->device communications. Instead, the host->device data (if any) is s
  82:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *        the device via the control endpoint.
  83:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
  84:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			typedef struct
  85:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			{
  86:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				const struct
  87:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				{
  88:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  InterfaceNumber; /**< Interface number of the HID interface within the device. */
  89:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
  90:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  ReportINEndpointNumber; /**< Endpoint number of the HID interface's IN report endpoin
  91:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t ReportINEndpointSize; /**< Size in bytes of the HID interface's IN report endpoint. *
  92:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     ReportINEndpointDoubleBank; /**< Indicates if the HID interface's IN report endpoint 
  93:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					
  94:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					void*    PrevReportINBuffer; /**< Pointer to a buffer where the previously created HID input r
  95:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  stored by the driver, for comparison purposes to detect repor
  96:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  must be sent immediately to the host. This should point to a 
  97:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                              *  to hold the largest HID input report sent from the HID interf
  98:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  to NULL, it is up to the user to force transfers when needed in the 
  99:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \ref CALLBACK_HID_Device_CreateHIDReport() callback function.
 100:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *
 101:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *  \note Due to the single buffer, the internal driver can only correctly compare
 102:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        subsequent reports with identical report IDs. In multiple report devices,
 103:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        this buffer should be set to NULL and the decision to send reports made
 104:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 												  *        by the user application instead.
 105:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                              */
 106:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint8_t  PrevReportINBufferSize; /**< Size in bytes of the given input report buffer. This is 
 107:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  second buffer of the same size within the driver so that 
 108:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  can be compared. If the user app is to determine when rep
 109:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  *  exclusively (i.e. \ref PrevReportINBuffer is NULL) this v
 110:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 													  *  set to the size of the largest report the device can issue to the host.
 111:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					                                  */
 112:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				} Config; /**< Config data for the USB class interface within the device. All elements in this 
 113:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				           *   <b>must</b> be set or the interface will fail to enumerate and operate correctly
 114:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				           */										 
 115:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				struct
 116:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				{
 117:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					bool     UsingReportProtocol; /**< Indicates if the HID interface is set to Boot or Report pro
 118:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleCount; /**< Report idle period, in milliseconds, set by the host. */
 119:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 					uint16_t IdleMSRemaining; /**< Total number of milliseconds remaining before the idle period e
 120:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 											   *   should be decremented by the user application if non-zero each millisecond. */	
 121:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				} State; /**< State data for the USB class interface within the device. All elements in this se
 122:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				          *   are reset to their defaults when the interface is enumerated.
 123:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				          */
 124:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			} USB_ClassInfo_HID_Device_t;
 125:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 	
 126:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Function Prototypes: */
 127:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Configures the endpoints of a given HID interface, ready for use. This should be linked to t
 128:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref EVENT_USB_Device_ConfigurationChanged() event so that the endpoints are configured when
 129:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  containing the given HID interface is selected.
 130:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 131:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 132:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 133:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true if the endpoints were successfully configured, false otherwise.
 134:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 135:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_
 136:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			
 137:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Processes incoming control requests from the host, that are directed to the given HID class 
 138:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  linked to the library \ref EVENT_USB_Device_UnhandledControlRequest() event.
 139:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 140:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 141:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */		
 142:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_N
 143:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
 144:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** General management task for a given HID class interface, required for the correct operation 
 145:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  be called frequently in the main program loop, before the master USB management task \ref US
 146:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 147:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 148:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 149:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_NON_NULL_PTR_AR
 150:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			
 151:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user creation of a HID IN report. This callback may fire i
 152:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  HID class control requests from the host, or by the normal HID endpoint polling procedure. I
 153:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  user is responsible for the creation of the next HID input report to be sent to the host.
 154:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 155:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 156:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] ReportID          If preset to a non-zero value, this is the report ID being 
 157:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   this should be set to the report ID of the generated HID in
 158:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   reports are not sent via the given HID interface, this para
 159:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of HID report to generate, either \ref REPORT_ITEM_TYP
 160:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportData        Pointer to a buffer where the generated HID report should b
 161:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[out]    ReportSize        Number of bytes in the generated input report, or zero if n
 162:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 163:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \return Boolean true to force the sending of the report even if it is identical to the previ
 164:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *          the idle period (useful for devices which report relative movement), false otherwise
 165:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 166:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 167:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint8_t* const ReportID,
 168:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         const uint8_t ReportType,
 169:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         void* ReportData,
 170:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         uint16_t* const ReportSize) ATTR_NON_NULL_PTR_ARG(1)
 171:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                         ATTR_NON_NULL_PTR_ARG(2) ATTR_NON_NULL_PTR_ARG(4) ATTR_
 172:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			
 173:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** HID class driver callback for the user processing of a received HID OUT report. This callbac
 174:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  either HID class control requests from the host, or by the normal HID endpoint polling proce
 175:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  the user is responsible for the processing of the received HID output report from the host.
 176:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 177:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 178:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportID          Report ID of the received output report. If multiple report
 179:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *                                   interface, this parameter should be ignored.
 180:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportType        Type of received HID report, either \ref REPORT_ITEM_TYPE_O
 181:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportData        Pointer to a buffer where the received HID report is stored
 182:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in]     ReportSize        Size in bytes of the received report from the host.
 183:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 184:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 185:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportID,
 186:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint8_t ReportType,
 187:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const void* ReportData,
 188:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			                                          const uint16_t ReportSize) ATTR_NON_NULL_PTR_ARG(1) AT
 189:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 
 190:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 		/* Inline Functions: */
 191:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			/** Indicates that a millisecond of idle time has elapsed on the given HID interface, and the in
 192:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  decremented. This should be called once per millisecond so that hardware key-repeats functio
 193:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  that this be called by the \ref EVENT_USB_Device_StartOfFrame() event, once SOF events have 
 194:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \ref USB_Device_EnableSOFEvents().
 195:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *
 196:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration
 197:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			 */
 198:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 199:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceI
 200:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 			{
 201:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				if (HIDInterfaceInfo->State.IdleMSRemaining)
 328               		.loc 6 201 0
 329 0000 8091 0000 		lds r24,Keyboard_HID_Interface+11
 330 0004 9091 0000 		lds r25,Keyboard_HID_Interface+11+1
 331 0008 0097      		sbiw r24,0
 332 000a 01F0      		breq .L9
 202:../lufa-LUFA/LUFA/Drivers/USB/Class/Device/HID.h **** 				  HIDInterfaceInfo->State.IdleMSRemaining--;
 333               		.loc 6 202 0
 334 000c 0197      		sbiw r24,1
 335 000e 9093 0000 		sts Keyboard_HID_Interface+11+1,r25
 336 0012 8093 0000 		sts Keyboard_HID_Interface+11,r24
 337               	.L9:
 338 0016 0895      		ret
 339               	.LBE73:
 340               	.LBE72:
 341               		.cfi_endproc
 342               	.LFE92:
 344               		.section	.text.CALLBACK_HID_Device_CreateHIDReport,"ax",@progbits
 345               	.global	CALLBACK_HID_Device_CreateHIDReport
 347               	CALLBACK_HID_Device_CreateHIDReport:
 348               	.LFB93:
 185:Arduino-keyboard.c **** 	HID_Device_MillisecondElapsed(&Keyboard_HID_Interface);
 186:Arduino-keyboard.c **** }
 187:Arduino-keyboard.c **** 
 188:Arduino-keyboard.c **** /** HID class driver callback function for the creation of HID reports to the host.
 189:Arduino-keyboard.c ****  *
 190:Arduino-keyboard.c ****  *  \param[in]     HIDInterfaceInfo  Pointer to the HID class interface configuration structure bei
 191:Arduino-keyboard.c ****  *  \param[in,out] ReportID    Report ID requested by the host if non-zero, otherwise callback shou
 192:Arduino-keyboard.c ****  *  \param[in]     ReportType  Type of the report to create, either REPORT_ITEM_TYPE_In or REPORT_I
 193:Arduino-keyboard.c ****  *  \param[out]    ReportData  Pointer to a buffer where the created report should be stored
 194:Arduino-keyboard.c ****  *  \param[out]    ReportSize  Number of bytes written in the report (or zero if no report is to be
 195:Arduino-keyboard.c ****  *
 196:Arduino-keyboard.c ****  *  \return Boolean true to force the sending of the report, false to let the library determine if 
 197:Arduino-keyboard.c ****  */
 198:Arduino-keyboard.c **** bool CALLBACK_HID_Device_CreateHIDReport(
 199:Arduino-keyboard.c ****     USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 200:Arduino-keyboard.c ****     uint8_t* const ReportID,
 201:Arduino-keyboard.c ****     const uint8_t ReportType,
 202:Arduino-keyboard.c ****     void* ReportData,
 203:Arduino-keyboard.c ****     uint16_t* const ReportSize)
 204:Arduino-keyboard.c **** {
 349               		.loc 1 204 0
 350               		.cfi_startproc
 351               	.LVL13:
 352 0000 0F93      		push r16
 353               	.LCFI9:
 354               		.cfi_def_cfa_offset 3
 355               		.cfi_offset 16, -2
 356 0002 1F93      		push r17
 357               	.LCFI10:
 358               		.cfi_def_cfa_offset 4
 359               		.cfi_offset 17, -3
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 2 */
 363               	.L__stack_usage = 2
 364               	.LVL14:
 365               	.LBB90:
 366               	.LBB91:
 367               	.LBB92:
  91:Lib/LightweightRingBuff.h **** 			}
  92:Lib/LightweightRingBuff.h **** 		}
  93:Lib/LightweightRingBuff.h **** 		
  94:Lib/LightweightRingBuff.h **** 		/** Retrieves the minimum number of bytes stored in a particular buffer. This value is computed
  95:Lib/LightweightRingBuff.h **** 		 *  by entering an atomic lock on the buffer while the IN and OUT locations are fetched, so that
  96:Lib/LightweightRingBuff.h **** 		 *  the buffer cannot be modified while the computation takes place. This value should be cached
  97:Lib/LightweightRingBuff.h **** 		 *  when reading out the contents of the buffer, so that as small a time as possible is spent
  98:Lib/LightweightRingBuff.h **** 		 *  in an atomic lock.
  99:Lib/LightweightRingBuff.h **** 		 *
 100:Lib/LightweightRingBuff.h **** 		 *  \note The value returned by this function is guaranteed to only be the minimum number of byte
 101:Lib/LightweightRingBuff.h **** 		 *        stored in the given buffer; this value may change as other threads write new data and s
 102:Lib/LightweightRingBuff.h **** 		 *        the returned number should be used only to determine how many successive reads may safe
 103:Lib/LightweightRingBuff.h **** 		 *        be performed on the buffer.
 104:Lib/LightweightRingBuff.h **** 		 *
 105:Lib/LightweightRingBuff.h **** 		 *  \param[in] Buffer  Pointer to a ring buffer structure whose count is to be computed
 106:Lib/LightweightRingBuff.h **** 		 */
 107:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
 108:Lib/LightweightRingBuff.h **** 		{
 109:Lib/LightweightRingBuff.h **** 			RingBuff_Count_t Count;
 110:Lib/LightweightRingBuff.h **** 			
 111:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 368               		.loc 3 111 0
 369 0004 9FB7      		in r25,__SREG__
 370               	.LVL15:
 371               	.LBB93:
 372               	.LBB94:
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 373               		.loc 4 50 0
 374               	/* #APP */
 375               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 376 0006 F894      		cli
 377               	 ;  0 "" 2
 378               	.LVL16:
 379               	/* #NOAPP */
 380               	.LBE94:
 381               	.LBE93:
 112:Lib/LightweightRingBuff.h **** 			{
 113:Lib/LightweightRingBuff.h **** 				Count = Buffer->Count;
 382               		.loc 3 113 0
 383 0008 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 384               	.LVL17:
 385               	.LBB95:
 386               	.LBB96:
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
 387               		.loc 4 70 0
 388 000c 9FBF      		out __SREG__,r25
 389               		.loc 4 71 0
 390               	.LBE96:
 391               	.LBE95:
 392               	.LBE92:
 393               	.LBE91:
 394               	.LBE90:
 205:Arduino-keyboard.c **** 	uint8_t *datap = ReportData;
 206:Arduino-keyboard.c **** 	int ind;
 207:Arduino-keyboard.c **** 
 208:Arduino-keyboard.c **** 	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
 209:Arduino-keyboard.c **** 
 210:Arduino-keyboard.c **** 	if (BufferCount >= 8) {
 395               		.loc 1 210 0
 396 000e 8830      		cpi r24,lo8(8)
 397 0010 00F0      		brlo .L15
 398 0012 A0E0      		ldi r26,lo8(keyboardData)
 399 0014 B0E0      		ldi r27,hi8(keyboardData)
 400               	.LBB97:
 401               	.LBB98:
 114:Lib/LightweightRingBuff.h **** 			}
 115:Lib/LightweightRingBuff.h **** 			
 116:Lib/LightweightRingBuff.h **** 			return Count;
 117:Lib/LightweightRingBuff.h **** 		}
 118:Lib/LightweightRingBuff.h **** 		
 119:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any free space. This should
 120:Lib/LightweightRingBuff.h **** 		 *  be tested before storing data to the buffer, to ensure that no data is lost due to a
 121:Lib/LightweightRingBuff.h **** 		 *  buffer overrun.
 122:Lib/LightweightRingBuff.h **** 		 *
 123:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 124:Lib/LightweightRingBuff.h **** 		 *
 125:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 126:Lib/LightweightRingBuff.h **** 		 */		 
 127:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsFull(RingBuff_t* const Buffer)
 128:Lib/LightweightRingBuff.h **** 		{
 129:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == BUFFER_SIZE);
 130:Lib/LightweightRingBuff.h **** 		}
 131:Lib/LightweightRingBuff.h **** 
 132:Lib/LightweightRingBuff.h **** 		/** Atomically determines if the specified ring buffer contains any data. This should
 133:Lib/LightweightRingBuff.h **** 		 *  be tested before removing data from the buffer, to ensure that the buffer does not
 134:Lib/LightweightRingBuff.h **** 		 *  underflow.
 135:Lib/LightweightRingBuff.h **** 		 *
 136:Lib/LightweightRingBuff.h **** 		 *  If the data is to be removed in a loop, store the total number of bytes stored in the
 137:Lib/LightweightRingBuff.h **** 		 *  buffer (via a call to the \ref RingBuffer_GetCount() function) in a temporary variable
 138:Lib/LightweightRingBuff.h **** 		 *  to reduce the time spent in atomicity locks.
 139:Lib/LightweightRingBuff.h **** 		 *
 140:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 141:Lib/LightweightRingBuff.h **** 		 *
 142:Lib/LightweightRingBuff.h **** 		 *  \return Boolean true if the buffer contains no free space, false otherwise
 143:Lib/LightweightRingBuff.h **** 		 */		 
 144:Lib/LightweightRingBuff.h **** 		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
 145:Lib/LightweightRingBuff.h **** 		{
 146:Lib/LightweightRingBuff.h **** 			return (RingBuffer_GetCount(Buffer) == 0);
 147:Lib/LightweightRingBuff.h **** 		}
 148:Lib/LightweightRingBuff.h **** 
 149:Lib/LightweightRingBuff.h **** 		/** Inserts an element into the ring buffer.
 150:Lib/LightweightRingBuff.h **** 		 *
 151:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may insert into a single buff
 152:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 153:Lib/LightweightRingBuff.h **** 		 *        threads.
 154:Lib/LightweightRingBuff.h **** 		 *
 155:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into
 156:Lib/LightweightRingBuff.h **** 		 *  \param[in]     Data    Data element to insert into the buffer
 157:Lib/LightweightRingBuff.h **** 		 */
 158:Lib/LightweightRingBuff.h **** 		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
 159:Lib/LightweightRingBuff.h **** 		                                     const RingBuff_Data_t Data)
 160:Lib/LightweightRingBuff.h **** 		{
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
 162:Lib/LightweightRingBuff.h **** 			
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 165:Lib/LightweightRingBuff.h **** 
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 167:Lib/LightweightRingBuff.h **** 			{
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
 169:Lib/LightweightRingBuff.h **** 			}
 170:Lib/LightweightRingBuff.h **** 		}
 171:Lib/LightweightRingBuff.h **** 
 172:Lib/LightweightRingBuff.h **** 		/** Removes an element from the ring buffer.
 173:Lib/LightweightRingBuff.h **** 		 *
 174:Lib/LightweightRingBuff.h **** 		 *  \note Only one execution thread (main program thread or an ISR) may remove from a single buff
 175:Lib/LightweightRingBuff.h **** 		 *        otherwise data corruption may occur. Insertion and removal may occur from different exe
 176:Lib/LightweightRingBuff.h **** 		 *        threads.
 177:Lib/LightweightRingBuff.h **** 		 *
 178:Lib/LightweightRingBuff.h **** 		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
 179:Lib/LightweightRingBuff.h **** 		 *
 180:Lib/LightweightRingBuff.h **** 		 *  \return Next data element stored in the buffer
 181:Lib/LightweightRingBuff.h **** 		 */
 182:Lib/LightweightRingBuff.h **** 		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
 183:Lib/LightweightRingBuff.h **** 		{
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
 185:Lib/LightweightRingBuff.h **** 			
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 187:Lib/LightweightRingBuff.h **** 			  Buffer->Out = Buffer->Buffer;
 402               		.loc 3 187 0
 403 0016 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 404 0018 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 405               	.LVL18:
 406               	.L18:
 184:Lib/LightweightRingBuff.h **** 			RingBuff_Data_t Data = *Buffer->Out;
 407               		.loc 3 184 0
 408 001a E091 0000 		lds r30,USARTtoUSB_Buffer+130
 409 001e F091 0000 		lds r31,USARTtoUSB_Buffer+130+1
 410 0022 5191      		ld r21,Z+
 411               	.LVL19:
 186:Lib/LightweightRingBuff.h **** 			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 412               		.loc 3 186 0
 413 0024 F093 0000 		sts USARTtoUSB_Buffer+130+1,r31
 414 0028 E093 0000 		sts USARTtoUSB_Buffer+130,r30
 415 002c E050      		subi r30,lo8(USARTtoUSB_Buffer+128)
 416 002e F040      		sbci r31,hi8(USARTtoUSB_Buffer+128)
 417 0030 01F4      		brne .L16
 418               		.loc 3 187 0
 419 0032 9093 0000 		sts USARTtoUSB_Buffer+130+1,r25
 420 0036 8093 0000 		sts USARTtoUSB_Buffer+130,r24
 421               	.L16:
 422               	.LBB99:
 188:Lib/LightweightRingBuff.h **** 
 189:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 423               		.loc 3 189 0
 424 003a 6FB7      		in r22,__SREG__
 425               	.LVL20:
 426               	.LBB100:
 427               	.LBB101:
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 428               		.loc 4 50 0
 429               	/* #APP */
 430               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 431 003c F894      		cli
 432               	 ;  0 "" 2
 433               	.LVL21:
 434               	/* #NOAPP */
 435               	.LBE101:
 436               	.LBE100:
 190:Lib/LightweightRingBuff.h **** 			{
 191:Lib/LightweightRingBuff.h **** 				Buffer->Count--;
 437               		.loc 3 191 0
 438 003e 4091 0000 		lds r20,USARTtoUSB_Buffer+132
 439 0042 4150      		subi r20,lo8(-(-1))
 440 0044 4093 0000 		sts USARTtoUSB_Buffer+132,r20
 441               	.LVL22:
 442               	.LBB102:
 443               	.LBB103:
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
 444               		.loc 4 70 0
 445 0048 6FBF      		out __SREG__,r22
 446               		.loc 4 71 0
 447               	.LBE103:
 448               	.LBE102:
 449               	.LBE99:
 450               	.LBE98:
 451               	.LBE97:
 211:Arduino-keyboard.c **** 	    for (ind=0; ind<8; ind++) {
 212:Arduino-keyboard.c **** 		keyboardData[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 452               		.loc 1 212 0
 453 004a 5D93      		st X+,r21
 454               	.LVL23:
 211:Arduino-keyboard.c **** 	    for (ind=0; ind<8; ind++) {
 455               		.loc 1 211 0
 456 004c E0E0      		ldi r30,hi8(keyboardData+8)
 457 004e A030      		cpi r26,lo8(keyboardData+8)
 458 0050 BE07      		cpc r27,r30
 459 0052 01F4      		brne .L18
 213:Arduino-keyboard.c **** 	    }
 214:Arduino-keyboard.c **** 
 215:Arduino-keyboard.c **** 	    /* Send an led status byte back for every keyboard report received */
 216:Arduino-keyboard.c **** 	    Serial_TxByte(ledReport);
 460               		.loc 1 216 0
 461 0054 8091 0000 		lds r24,ledReport
 462               	.LVL24:
 463               	.L20:
 464               	.LBB104:
 465               	.LBB105:
 110:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			}
 111:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
 112:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Turns off the USART driver, disabling and returning used hardware to their default configura
 113:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_ShutDown(void)
 114:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			{
 115:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1B = 0;
 116:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1A = 0;
 117:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UCSR1C = 0;
 118:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
 119:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UBRR1  = 0;
 120:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				
 121:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				DDRD  &= ~(1 << 3);
 122:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				PORTD &= ~(1 << 2);
 123:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			}
 124:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 
 125:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Indicates whether a character has been received through the USART.
 126:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *
 127:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \return Boolean true if a character has been received, false otherwise.
 128:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
 129:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 130:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline bool Serial_IsCharReceived(void)
 131:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			{
 132:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				return ((UCSR1A & (1 << RXC1)) ? true : false);
 133:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			}
 134:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			
 135:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			/** Transmits a given byte through the USART.
 136:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *
 137:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 *  \param[in] DataByte  Byte to transmit through the USART.
 138:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			 */
 139:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
 140:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			static inline void Serial_TxByte(const char DataByte)
 141:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 			{
 142:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				while (!(UCSR1A & (1 << UDRE1)));
 466               		.loc 2 142 0
 467 0058 9091 C800 		lds r25,200
 468 005c 95FF      		sbrs r25,5
 469 005e 00C0      		rjmp .L20
 143:../lufa-LUFA/LUFA/Drivers/Peripheral/Serial.h **** 				UDR1 = DataByte;
 470               		.loc 2 143 0
 471 0060 8093 CE00 		sts 206,r24
 472               	.LVL25:
 473               	.L15:
 474 0064 A0E0      		ldi r26,lo8(keyboardData)
 475 0066 B0E0      		ldi r27,hi8(keyboardData)
 476 0068 F901      		movw r30,r18
 477               	.LVL26:
 478               	.L22:
 479               	.LBE105:
 480               	.LBE104:
 217:Arduino-keyboard.c **** 	}
 218:Arduino-keyboard.c **** 
 219:Arduino-keyboard.c **** 	for (ind=0; ind<8; ind++) {
 220:Arduino-keyboard.c **** 	    datap[ind] = keyboardData[ind];
 481               		.loc 1 220 0 discriminator 2
 482 006a 8D91      		ld r24,X+
 483               	.LVL27:
 484 006c 8193      		st Z+,r24
 485               	.LVL28:
 219:Arduino-keyboard.c **** 	for (ind=0; ind<8; ind++) {
 486               		.loc 1 219 0 discriminator 2
 487 006e 40E0      		ldi r20,hi8(keyboardData+8)
 488 0070 A030      		cpi r26,lo8(keyboardData+8)
 489 0072 B407      		cpc r27,r20
 490 0074 01F4      		brne .L22
 221:Arduino-keyboard.c **** 	}
 222:Arduino-keyboard.c **** 
 223:Arduino-keyboard.c **** 	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
 491               		.loc 1 223 0
 492 0076 88E0      		ldi r24,lo8(8)
 493 0078 90E0      		ldi r25,0
 494 007a F801      		movw r30,r16
 495 007c 9183      		std Z+1,r25
 496 007e 8083      		st Z,r24
 224:Arduino-keyboard.c **** 	return false;
 225:Arduino-keyboard.c **** }
 497               		.loc 1 225 0
 498 0080 80E0      		ldi r24,0
 499               	/* epilogue start */
 500 0082 1F91      		pop r17
 501 0084 0F91      		pop r16
 502               	.LVL29:
 503 0086 0895      		ret
 504               		.cfi_endproc
 505               	.LFE93:
 507               		.section	.text.CALLBACK_HID_Device_ProcessHIDReport,"ax",@progbits
 508               	.global	CALLBACK_HID_Device_ProcessHIDReport
 510               	CALLBACK_HID_Device_ProcessHIDReport:
 511               	.LFB94:
 226:Arduino-keyboard.c **** 
 227:Arduino-keyboard.c **** /** HID class driver callback function for the processing of HID reports from the host.
 228:Arduino-keyboard.c ****  *
 229:Arduino-keyboard.c ****  *  \param[in] HIDInterfaceInfo  Pointer to the HID class interface configuration structure being r
 230:Arduino-keyboard.c ****  *  \param[in] ReportID    Report ID of the received report from the host
 231:Arduino-keyboard.c ****  *  \param[in] ReportType  The type of report that the host has sent, either REPORT_ITEM_TYPE_Out o
 232:Arduino-keyboard.c ****  *  \param[in] ReportData  Pointer to a buffer where the created report has been stored
 233:Arduino-keyboard.c ****  *  \param[in] ReportSize  Size in bytes of the received HID report
 234:Arduino-keyboard.c ****  */
 235:Arduino-keyboard.c **** void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
 236:Arduino-keyboard.c ****                                           const uint8_t ReportID,
 237:Arduino-keyboard.c ****                                           const uint8_t ReportType,
 238:Arduino-keyboard.c ****                                           const void* ReportData,
 239:Arduino-keyboard.c ****                                           const uint16_t ReportSize)
 240:Arduino-keyboard.c **** {
 512               		.loc 1 240 0
 513               		.cfi_startproc
 514               	.LVL30:
 515               	/* prologue: function */
 516               	/* frame size = 0 */
 517               	/* stack size = 0 */
 518               	.L__stack_usage = 0
 241:Arduino-keyboard.c ****     /* Need to send status back to the Arduino to manage caps, scrolllock, numlock leds */
 242:Arduino-keyboard.c ****   // ledReport = //*((uint8_t *)ReportData);
 243:Arduino-keyboard.c ****    ledReport = check_windows();
 519               		.loc 1 243 0
 520 0000 0E94 0000 		call check_windows
 521               	.LVL31:
 522 0004 8093 0000 		sts ledReport,r24
 523 0008 0895      		ret
 524               		.cfi_endproc
 525               	.LFE94:
 527               		.section	.text.__vector_23,"ax",@progbits
 528               	.global	__vector_23
 530               	__vector_23:
 531               	.LFB95:
 244:Arduino-keyboard.c **** }
 245:Arduino-keyboard.c **** 
 246:Arduino-keyboard.c **** /** ISR to manage the reception of data from the serial port, placing received bytes into a circula
 247:Arduino-keyboard.c ****  *  for later transmission to the host.
 248:Arduino-keyboard.c ****  */
 249:Arduino-keyboard.c **** ISR(USART1_RX_vect, ISR_BLOCK)
 250:Arduino-keyboard.c **** {
 532               		.loc 1 250 0
 533               		.cfi_startproc
 534 0000 1F92      		push r1
 535               	.LCFI11:
 536               		.cfi_def_cfa_offset 3
 537               		.cfi_offset 1, -2
 538 0002 0F92      		push r0
 539               	.LCFI12:
 540               		.cfi_def_cfa_offset 4
 541               		.cfi_offset 0, -3
 542 0004 0FB6      		in r0,__SREG__
 543 0006 0F92      		push r0
 544 0008 1124      		clr __zero_reg__
 545 000a 2F93      		push r18
 546               	.LCFI13:
 547               		.cfi_def_cfa_offset 5
 548               		.cfi_offset 18, -4
 549 000c 8F93      		push r24
 550               	.LCFI14:
 551               		.cfi_def_cfa_offset 6
 552               		.cfi_offset 24, -5
 553 000e 9F93      		push r25
 554               	.LCFI15:
 555               		.cfi_def_cfa_offset 7
 556               		.cfi_offset 25, -6
 557 0010 EF93      		push r30
 558               	.LCFI16:
 559               		.cfi_def_cfa_offset 8
 560               		.cfi_offset 30, -7
 561 0012 FF93      		push r31
 562               	.LCFI17:
 563               		.cfi_def_cfa_offset 9
 564               		.cfi_offset 31, -8
 565               	/* prologue: Signal */
 566               	/* frame size = 0 */
 567               	/* stack size = 8 */
 568               	.L__stack_usage = 8
 251:Arduino-keyboard.c **** 	uint8_t ReceivedByte = UDR1;
 569               		.loc 1 251 0
 570 0014 8091 CE00 		lds r24,206
 571               	.LVL32:
 252:Arduino-keyboard.c **** 
 253:Arduino-keyboard.c **** 	if (USB_DeviceState == DEVICE_STATE_Configured)
 572               		.loc 1 253 0
 573 0018 9EB3      		in r25,0x1e
 574 001a 9430      		cpi r25,lo8(4)
 575 001c 01F4      		brne .L24
 576               	.LVL33:
 577               	.LBB113:
 578               	.LBB114:
 161:Lib/LightweightRingBuff.h **** 			*Buffer->In = Data;
 579               		.loc 3 161 0
 580 001e E091 0000 		lds r30,USARTtoUSB_Buffer+128
 581 0022 F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 582 0026 8083      		st Z,r24
 163:Lib/LightweightRingBuff.h **** 			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 583               		.loc 3 163 0
 584 0028 E091 0000 		lds r30,USARTtoUSB_Buffer+128
 585 002c F091 0000 		lds r31,USARTtoUSB_Buffer+128+1
 586 0030 CF01      		movw r24,r30
 587               	.LVL34:
 588 0032 0196      		adiw r24,1
 589 0034 9093 0000 		sts USARTtoUSB_Buffer+128+1,r25
 590 0038 8093 0000 		sts USARTtoUSB_Buffer+128,r24
 591 003c 8050      		subi r24,lo8(USARTtoUSB_Buffer+128)
 592 003e 9040      		sbci r25,hi8(USARTtoUSB_Buffer+128)
 593 0040 01F4      		brne .L26
 164:Lib/LightweightRingBuff.h **** 			  Buffer->In = Buffer->Buffer;
 594               		.loc 3 164 0
 595 0042 80E0      		ldi r24,lo8(USARTtoUSB_Buffer)
 596 0044 90E0      		ldi r25,hi8(USARTtoUSB_Buffer)
 597 0046 9283      		std Z+2,r25
 598 0048 8183      		std Z+1,r24
 599               	.L26:
 600               	.LBB115:
 166:Lib/LightweightRingBuff.h **** 			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 601               		.loc 3 166 0
 602 004a 9FB7      		in r25,__SREG__
 603               	.LVL35:
 604               	.LBB116:
 605               	.LBB117:
  50:/usr/lib/avr/include/util/atomic.h ****     cli();
 606               		.loc 4 50 0
 607               	/* #APP */
 608               	 ;  50 "/usr/lib/avr/include/util/atomic.h" 1
 609 004c F894      		cli
 610               	 ;  0 "" 2
 611               	.LVL36:
 612               	/* #NOAPP */
 613               	.LBE117:
 614               	.LBE116:
 168:Lib/LightweightRingBuff.h **** 				Buffer->Count++;
 615               		.loc 3 168 0
 616 004e 8091 0000 		lds r24,USARTtoUSB_Buffer+132
 617 0052 8F5F      		subi r24,lo8(-(1))
 618 0054 8093 0000 		sts USARTtoUSB_Buffer+132,r24
 619               	.LVL37:
 620               	.LBB118:
 621               	.LBB119:
  70:/usr/lib/avr/include/util/atomic.h ****     SREG = *__s;
 622               		.loc 4 70 0
 623 0058 9FBF      		out __SREG__,r25
 624               		.loc 4 71 0
 625               	.LVL38:
 626               	.L24:
 627               	/* epilogue start */
 628               	.LBE119:
 629               	.LBE118:
 630               	.LBE115:
 631               	.LBE114:
 632               	.LBE113:
 254:Arduino-keyboard.c **** 	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 255:Arduino-keyboard.c **** }
 633               		.loc 1 255 0
 634 005a FF91      		pop r31
 635 005c EF91      		pop r30
 636 005e 9F91      		pop r25
 637 0060 8F91      		pop r24
 638 0062 2F91      		pop r18
 639 0064 0F90      		pop r0
 640 0066 0FBE      		out __SREG__,r0
 641 0068 0F90      		pop r0
 642 006a 1F90      		pop r1
 643 006c 1895      		reti
 644               		.cfi_endproc
 645               	.LFE95:
 647               	.global	ledReport
 648               		.section .bss
 651               	ledReport:
 652 0000 00        		.zero	1
 653               	.global	keyboardData
 656               	keyboardData:
 657 0001 0000 0000 		.zero	8
 657      0000 0000 
 658               		.comm	USARTtoUSB_Buffer,133,1
 659               	.global	Keyboard_HID_Interface
 660               		.data
 663               	Keyboard_HID_Interface:
 664 0000 00        		.byte	0
 665 0001 01        		.byte	1
 666 0002 0800      		.word	8
 667 0004 00        		.byte	0
 668 0005 0000      		.word	PrevKeyboardHIDReportBuffer
 669 0007 08        		.byte	8
 670 0008 0000 0000 		.zero	5
 670      00
 671               		.comm	PrevKeyboardHIDReportBuffer,8,1
 672               		.text
 673               	.Letext0:
 674               		.file 7 "/usr/lib/avr/include/stdint.h"
 675               		.file 8 "../lufa-LUFA/LUFA/Drivers/USB/HighLevel/../LowLevel/USBController.h"
 676               		.file 9 "../lufa-LUFA/LUFA/Drivers/USB/HighLevel/USBTask.h"
 677               		.file 10 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Arduino-keyboard.c
     /tmp/ccwneA0z.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwneA0z.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwneA0z.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwneA0z.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwneA0z.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwneA0z.s:13     .text.SetupHardware:0000000000000000 SetupHardware
     /tmp/ccwneA0z.s:163    .text.startup.main:0000000000000000 main
                            *COM*:0000000000000085 USARTtoUSB_Buffer
     /tmp/ccwneA0z.s:663    .data:0000000000000000 Keyboard_HID_Interface
     /tmp/ccwneA0z.s:236    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccwneA0z.s:251    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccwneA0z.s:266    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccwneA0z.s:297    .text.EVENT_USB_Device_UnhandledControlRequest:0000000000000000 EVENT_USB_Device_UnhandledControlRequest
     /tmp/ccwneA0z.s:316    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
     /tmp/ccwneA0z.s:347    .text.CALLBACK_HID_Device_CreateHIDReport:0000000000000000 CALLBACK_HID_Device_CreateHIDReport
     /tmp/ccwneA0z.s:656    .bss:0000000000000001 keyboardData
     /tmp/ccwneA0z.s:651    .bss:0000000000000000 ledReport
     /tmp/ccwneA0z.s:510    .text.CALLBACK_HID_Device_ProcessHIDReport:0000000000000000 CALLBACK_HID_Device_ProcessHIDReport
     /tmp/ccwneA0z.s:530    .text.__vector_23:0000000000000000 __vector_23
                            *COM*:0000000000000008 PrevKeyboardHIDReportBuffer

UNDEFINED SYMBOLS
USB_Init
init_vars
HID_Device_USBTask
USB_USBTask
HID_Device_ConfigureEndpoints
HID_Device_ProcessControlRequest
check_windows
__do_copy_data
__do_clear_bss

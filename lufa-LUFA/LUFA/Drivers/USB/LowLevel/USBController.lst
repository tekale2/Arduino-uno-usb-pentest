   1               		.file	"USBController.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_ResetInterface,"ax",@progbits
  11               	.global	USB_ResetInterface
  13               	USB_ResetInterface:
  14               	.LFB66:
  15               		.file 1 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c"
   1:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** /*
   2:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****              LUFA Library
   3:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****      Copyright (C) Dean Camera, 2010.
   4:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****               
   5:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   dean [at] fourwalledcubicle [dot] com
   6:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****       www.fourwalledcubicle.com
   7:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** */
   8:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
   9:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** /*
  10:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  12:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software and its documentation for any purpose is hereby granted
  14:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   without fee, provided that the above copyright notice appear in 
  15:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   all copies and that both that the copyright notice and this
  16:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   permission notice and warranty disclaimer appear in supporting 
  17:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   documentation, and that the name of the author not be used in 
  18:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   advertising or publicity pertaining to distribution of the 
  19:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software without specific, written prior permission.
  20:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  21:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   The author disclaim all warranties with regard to this
  22:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   software, including all implied warranties of merchantability
  23:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   and fitness.  In no event shall the author be liable for any
  24:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   special, indirect or consequential damages or any damages
  25:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   in an action of contract, negligence or other tortious action,
  27:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   arising out of or in connection with the use or performance of
  28:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****   this software.
  29:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** */
  30:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  31:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #include "USBController.h"
  33:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  34:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY))
  35:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_CurrentMode = USB_MODE_NONE;
  36:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  37:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  38:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #if !defined(USE_STATIC_OPTIONS)
  39:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** volatile uint8_t USB_Options;
  40:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** #endif
  41:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  42:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_Init(
  43:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if defined(USB_CAN_BE_BOTH)
  44:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Mode
  45:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  46:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  47:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS))
  48:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                ,
  49:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
  50:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                void
  51:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  52:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			   
  53:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #if !defined(USE_STATIC_OPTIONS)
  54:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                const uint8_t Options
  55:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                #endif
  56:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c ****                )
  57:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
  58:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
  59:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentMode = Mode;
  60:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  61:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  62:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(USE_STATIC_OPTIONS)
  63:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Options = Options;
  64:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  65:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  66:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_HOST)
  67:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
  68:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  69:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
  70:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_DEVICE_ONLY) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  71:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON |= (1 << UIMOD);
  72:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#elif defined(USB_HOST_ONLY)
  73:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIMOD);
  74:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#elif defined(USB_CAN_BE_BOTH)
  75:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (Mode == USB_MODE_UID)
  76:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  77:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |=  (1 << UIDE);
  78:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
  79:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_IDTI);
  80:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
  81:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
  82:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
  83:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  84:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (Mode == USB_MODE_DEVICE)
  85:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  86:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON |=  (1 << UIMOD);
  87:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  88:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else if (Mode == USB_MODE_HOST)			
  89:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  90:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		UHWCON &= ~(1 << UIMOD);
  91:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  92:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
  93:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
  94:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
  95:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		return;
  96:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
  97:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
  98:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
  99:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 100:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 101:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_On();
 103:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 104:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 105:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = true;
 106:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 107:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 108:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ShutDown(void)
 109:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
 110:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 111:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Detach();
 112:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Disable();
 113:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 114:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
 115:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
 116:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 117:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 118:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIMOD);
 119:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 120:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 121:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
 122:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_PLL_Off();
 123:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 124:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_REG_Off();
 125:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 126:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 127:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_OTGPAD_Off();
 128:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 129:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 130:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 131:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	UHWCON &= ~(1 << UIDE);
 132:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 133:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 134:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = false;
 135:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 136:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 137:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentMode = USB_MODE_NONE;
 138:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 139:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** }
 140:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 141:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** void USB_ResetInterface(void)
 142:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
  16               		.loc 1 142 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 143:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
  22               		.loc 1 143 0
  23 0000 0E94 0000 		call USB_INT_DisableAllInterrupts
  24               	.LVL0:
 144:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
  25               		.loc 1 144 0
  26 0004 0E94 0000 		call USB_INT_ClearAllInterrupts
  27               	.LVL1:
 145:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 146:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_HOST)
 147:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_HostState   = HOST_STATE_Unattached;
 148:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 149:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 150:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_DEVICE)
 151:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_DeviceState = DEVICE_STATE_Unattached;
  28               		.loc 1 151 0
  29 0008 1EBA      		out 0x1e,__zero_reg__
 152:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ConfigurationNumber  = 0;
  30               		.loc 1 152 0
  31 000a 1092 0000 		sts USB_ConfigurationNumber,__zero_reg__
  32               	.LBB22:
  33               	.LBB23:
  34               		.file 2 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h"
   1:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
   2:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****              LUFA Library
   3:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****      Copyright (C) Dean Camera, 2010.
   4:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****               
   5:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   dean [at] fourwalledcubicle [dot] com
   6:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****       www.fourwalledcubicle.com
   7:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
   8:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
   9:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /*
  10:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  12:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software and its documentation for any purpose is hereby granted
  14:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   without fee, provided that the above copyright notice appear in 
  15:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   all copies and that both that the copyright notice and this
  16:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   documentation, and that the name of the author not be used in 
  18:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   advertising or publicity pertaining to distribution of the 
  19:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software without specific, written prior permission.
  20:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  21:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   The author disclaim all warranties with regard to this
  22:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   software, including all implied warranties of merchantability
  23:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   and fitness.  In no event shall the author be liable for any
  24:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   special, indirect or consequential damages or any damages
  25:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   in an action of contract, negligence or other tortious action,
  27:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   arising out of or in connection with the use or performance of
  28:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****   this software.
  29:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** */
  30:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  31:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \file
  32:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \brief USB low level USB controller definitions.
  33:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  34:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  This file contains structures, function prototypes and macros related to the low level configur
  35:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  USB controller, to start, stop and reset the USB library core.
  36:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  37:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  40:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  
  41:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** /** \ingroup Group_USB
  42:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @defgroup Group_USBManagement USB Interface Management
  43:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  44:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  Functions, macros, variables, enums and types related to the setup and management of the USB in
  45:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *
  46:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  *  @{
  47:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h ****  */
  48:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  49:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #ifndef __USBCONTROLLER_H__
  50:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** #define __USBCONTROLLER_H__
  51:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  52:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Includes: */
  53:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/io.h>
  54:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <avr/interrupt.h>
  55:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include <stdbool.h>
  56:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  57:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  58:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  59:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../../../Common/Common.h"
  60:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBMode.h"
  61:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/Events.h"
  62:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "../HighLevel/USBTask.h"
  63:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#include "USBInterrupt.h"
  64:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  65:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__)
  66:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Host.h"
  67:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Pipe.h"
  68:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "OTG.h"
  69:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/HostStandardReq.h"
  70:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  71:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
  72:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__)
  73:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Device.h"
  74:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "Endpoint.h"
  75:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#include "../HighLevel/DeviceStandardReq.h"
  76:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  77:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  78:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Enable C linkage for C++ Compilers: */
  79:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if defined(__cplusplus)
  80:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			extern "C" {
  81:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  82:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  83:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Preprocessor Checks and Defines: */
  84:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  85:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  86:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  87:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
  88:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(F_CLOCK)
  89:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error F_CLOCK is not defined. You must define F_CLOCK to the frequency of the unprescaled input
  90:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
  91:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	
  92:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if (F_CLOCK == 8000000)
  93:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
  94:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
  95:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
  96:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  97:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  98:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                0
  99:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__)  || defined(__AVR_AT90USB1286__) || defined(__AVR_ATmega32U6_
 100:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 101:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB647__)  || defined(__AVR_AT90USB1287__))
 102:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP1) | (1 << PLLP0))
 103:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 104:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#elif (F_CLOCK == 16000000)
 105:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__) || \
 106:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega8U2__) || defined(__AVR_ATmega16U2__) || \
 107:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			     defined(__AVR_ATmega32U2__))
 108:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PLLP0)
 109:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
 110:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                (1 << PINDIV)
 111:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_ATmega32U6__)
 112:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP1))
 113:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__))
 114:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_PLL_PSC                ((1 << PLLP2) | (1 << PLLP0))
 115:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 116:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 117:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 118:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#if !defined(USB_PLL_PSC)
 119:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#error No PLL prescale value available for chosen F_CPU value and AVR model.
 120:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		#endif
 121:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 122:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Public Interface - May be used in end-application: */
 123:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Macros: */
 124:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global. This indicates that the USB interface is curr
 125:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  initialized into any mode.
 126:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 127:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_NONE                      0
 128:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 129:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 130:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB device mode.
 131:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 132:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_DEVICE                    1
 133:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 134:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mode mask for the \ref USB_CurrentMode global and the \ref USB_Init() function. This indicat
 135:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB interface is or should be initialized in the USB host mode.
 136:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 137:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_MODE_HOST                      2
 138:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 139:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 140:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Mode mask for the the \ref USB_Init() function. This indicates that the USB interface shoul
 141:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  initialized into whatever mode the UID pin of the USB AVR indicates, and that the device
 142:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  should swap over its mode when the level of the UID pin changes during operation.
 143:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 144:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This token is not available on AVR models which do not support both host and device m
 145:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 146:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_MODE_UID                       3
 147:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 148:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 149:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator disable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB
 150:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be enabled to regulate the data pin voltages to within the USB standard.
 151:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 152:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 153:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 154:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_DISABLED               (1 << 1)
 155:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 156:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Regulator enable option mask for \ref USB_Init(). This indicates that the internal 3.3V USB 
 157:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  regulator should be disabled and the AVR's VCC level used for the data pads.
 158:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 159:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See USB AVR data sheet for more information on the internal pad regulator.
 160:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 161:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_REG_ENABLED                (0 << 1)
 162:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 163:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Manual PLL control option mask for \ref USB_Init(). This indicates to the library that the u
 164:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will take full responsibility for controlling the AVR's PLL (used to generate the high frequ
 165:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 166:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 167:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_MANUAL_PLL                 (1 << 2)
 168:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 169:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Automatic PLL control option mask for \ref USB_Init(). This indicates to the library that th
 170:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  take full responsibility for controlling the AVR's PLL (used to generate the high frequency 
 171:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the USB controller requires) and ensuring that it is locked at the correct frequency fo
 172:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 173:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define USB_OPT_AUTO_PLL                   (0 << 2)
 174:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 175:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a CONTROL type endpoint or pipe.
 176:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 177:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 178:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 179:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_CONTROL                    0x00
 180:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 181:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an ISOCHRONOUS type endpoint or pipe.
 182:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 183:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 184:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 185:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_ISOCHRONOUS                0x01
 186:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 187:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for a BULK type endpoint or pipe.
 188:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 189:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 190:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 191:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_BULK                       0x02
 192:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 193:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Mask for an INTERRUPT type endpoint or pipe.
 194:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 195:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note See \ref Group_EndpointManagement and \ref Group_PipeManagement for endpoint/pipe func
 196:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 197:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#define EP_TYPE_INTERRUPT                  0x03
 198:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 199:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USB_STREAM_TIMEOUT_MS) || defined(__DOXYGEN__)
 200:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Constant for the maximum software timeout period of the USB data stream transfer functions
 201:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  (both control and standard) when in either device or host mode. If the next packet of a str
 202:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  is not received or acknowledged within this time period, the stream function will fail.
 203:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 204:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  This value may be overridden in the user project makefile as the value of the 
 205:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \ref USB_STREAM_TIMEOUT_MS token, and passed to the compiler using the -D switch.
 206:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 207:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_STREAM_TIMEOUT_MS       100
 208:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 209:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		
 210:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 211:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
 212:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Returns boolean true if the VBUS line is currently high (i.e. the USB host is supplying pow
 213:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  otherwise returns false.
 214:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 215:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This function is not available on some AVR models which do not support hardware VBUS 
 216:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 217:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 218:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				static inline bool USB_VBUS_GetStatus(void)
 219:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				{
 220:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 					return ((USBSTA & (1 << VBUS)) ? true : false);
 221:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				}
 222:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 223:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 224:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Detaches the device from the USB bus. This has the effect of removing the device from any
 225:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attached host, ceasing USB communications. If no host is present, this prevents any host fro
 226:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enumerating the device once attached until \ref USB_Attach() is called.
 227:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 228:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
 229:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Detach(void)
 230:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 231:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 232:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 233:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 234:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Attaches the device to the USB bus. This announces the device's presence to any attached
 235:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  USB host, starting the enumeration process. If no host is present, attaching the device
 236:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  will allow for enumeration once a host is connected to the device.
 237:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 238:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  This is inexplicably also required for proper operation while in host mode, to enable the
 239:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  attachment of a device to the host. This is despite the bit being located in the device-mode
 240:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  register and despite the datasheet making no mention of its requirement in host mode.
 241:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 242:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
 243:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Attach(void)
 244:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 245:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
 246:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 247:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 248:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Function Prototypes: */
 249:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Main function to initialize and start the USB interface. Once active, the USB interface will
 250:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  allow for device connection to a host when in device mode, or for device enumeration while i
 251:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  host mode.
 252:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 253:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  As the USB library relies on interrupts for the device and host mode enumeration processes,
 254:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  the user must enable global interrupts before or shortly after this function is called. In
 255:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  device mode, interrupts must be enabled within 500ms of this function being called to ensure
 256:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  that the host does not time out whilst enumerating the device. In host mode, interrupts may 
 257:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  enabled at the application's leisure however enumeration will not begin of an attached devic
 258:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  until after this has occurred.
 259:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 260:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  Calling this function when the USB interface is already initialized will cause a complete US
 261:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  interface reset and re-enumeration.
 262:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 263:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Mode     This is a mask indicating what mode the USB interface is to be initializ
 264:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      Valid mode masks are \ref USB_MODE_DEVICE, \ref USB_MODE_HOST or \ref US
 265:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 266:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \param[in] Options  Mask indicating the options which should be used when initializing the U
 267:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      interface to control the USB interface's behaviour. This should be compr
 268:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      a USB_OPT_REG_* mask to control the regulator, a USB_OPT_*_PLL mask to c
 269:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      PLL, and a USB_DEVICE_OPT_* mask (when the device mode is enabled) to se
 270:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *                      mode speed.
 271:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 272:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only device or host mode is require
 273:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the mode can be statically set in the project makefile by defining the token USB_DEVIC
 274:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        (for device mode) or USB_HOST_ONLY (for host mode), passing the token to the compiler 
 275:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        via the -D switch. If the mode is statically set, this parameter does not exist in the
 276:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        function prototype.
 277:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 278:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 279:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note To reduce the FLASH requirements of the library if only fixed settings are are require
 280:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        the options may be set statically in the same manner as the mode (see the Mode paramet
 281:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        this function). To statically set the USB options, pass in the USE_STATIC_OPTIONS toke
 282:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        defined to the appropriate options masks. When the options are statically set, this
 283:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        parameter does not exist in the function prototype.
 284:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        \n\n
 285:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        
 286:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \note The mode parameter does not exist on devices where only one mode is possible, such as 
 287:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *        AVR models which only implement the USB device mode in hardware.
 288:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *
 289:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  \see Device.h for the USB_DEVICE_OPT_* masks.
 290:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 291:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_Init(
 292:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__)
 293:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Mode
 294:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 295:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 296:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if (defined(USB_CAN_BE_BOTH) && !defined(USE_STATIC_OPTIONS)) || defined(__DOXYG
 297:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               ,
 298:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #elif (!defined(USB_CAN_BE_BOTH) && defined(USE_STATIC_OPTIONS))
 299:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               void
 300:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 301:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 302:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 303:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               const uint8_t Options
 304:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               #endif
 305:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			               );
 306:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 307:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Shuts down the USB interface. This turns off the USB interface after deallocating all USB FI
 308:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  memory, endpoints and pipes. When turned off, no USB functionality can be used until the int
 309:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  is restarted with the \ref USB_Init() function.
 310:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 311:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ShutDown(void);
 312:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 313:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Resets the interface, when already initialized. This will re-enumerate the device if already
 314:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  to a host, or re-enumerate an already attached device when in host mode.
 315:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 316:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			void USB_ResetInterface(void);
 317:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 318:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Enums: */
 319:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			/** Enum for error codes relating to the powering on of the USB interface. These error codes are
 320:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 *  used in the ErrorCode parameter value of the \ref EVENT_USB_InitFailure() event.
 321:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			 */
 322:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			enum USB_InitErrorCodes_t
 323:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 324:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USB_INITERROR_NoUSBModeSpecified       = 0, /**< Indicates that \ref USB_Init() was called with
 325:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             *   invalid or missing Mode parameter.
 326:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				                                             */
 327:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			};
 328:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 329:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Global Variables: */
 330:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if (!defined(USB_HOST_ONLY) && !defined(USB_DEVICE_ONLY)) || defined(__DOXYGEN__)
 331:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the mode that the USB interface is currently initialized to. This value will be
 332:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  one of the USB_MODE_* masks defined elsewhere in this module.
 333:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 334:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 335:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 336:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 337:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_CurrentMode;
 338:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_HOST_ONLY)
 339:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_HOST
 340:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USB_DEVICE_ONLY)
 341:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_CurrentMode USB_MODE_DEVICE
 342:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 343:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 344:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if !defined(USE_STATIC_OPTIONS) || defined(__DOXYGEN__)
 345:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				/** Indicates the current USB options that the USB interface was initialized with when \ref USB
 346:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  was called. This value will be one of the USB_MODE_* masks defined elsewhere in this module
 347:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *
 348:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *  \note This variable should be treated as read-only in the user application, and never manua
 349:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 *        changed in value.
 350:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				 */
 351:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				extern volatile uint8_t USB_Options;
 352:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#elif defined(USE_STATIC_OPTIONS)
 353:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				#define USB_Options USE_STATIC_OPTIONS
 354:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 355:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 356:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	/* Private Interface - For use in library only: */
 357:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 	#if !defined(__DOXYGEN__)
 358:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 		/* Inline Functions: */
 359:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
 360:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_On(void)
 361:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 362:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = USB_PLL_PSC;
  35               		.loc 2 362 0
  36 000e 84E0      		ldi r24,lo8(4)
  37 0010 89BD      		out 0x29,r24
 363:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR |= (1 << PLLE);
  38               		.loc 2 363 0
  39 0012 89B5      		in r24,0x29
  40 0014 8260      		ori r24,lo8(2)
  41 0016 89BD      		out 0x29,r24
  42               	.L3:
  43               	.LBE23:
  44               	.LBE22:
 153:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 154:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 155:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_RemoteWakeupEnabled  = false;
 156:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 157:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 158:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if !defined(NO_DEVICE_SELF_POWER)
 159:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CurrentlySelfPowered = false;
 160:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 161:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 162:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 163:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_MANUAL_PLL))
 164:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 165:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#if defined(USB_SERIES_4_AVR)
 166:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
 167:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		#endif
 168:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 169:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_PLL_On();
 170:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		while (!(USB_PLL_IsReady()));
  45               		.loc 1 170 0 discriminator 1
  46 0018 09B4      		in __tmp_reg__,0x29
  47 001a 00FE      		sbrs __tmp_reg__,0
  48 001c 00C0      		rjmp .L3
  49               	.LBB24:
  50               	.LBB25:
 364:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 365:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 366:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
 367:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_PLL_Off(void)
 368:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 369:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 370:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 371:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 372:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 373:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline bool USB_PLL_IsReady(void)
 374:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 375:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				return ((PLLCSR  &   (1 << PLOCK)) ? true : false);
 376:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 377:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 378:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
 379:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_On(void)
 380:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 381:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 382:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  |=  (1 << UVREGE);
 383:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 384:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
 385:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 386:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 387:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 388:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
 389:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_REG_Off(void)
 390:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 391:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 392:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UHWCON  &= ~(1 << UVREGE);
 393:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#else
 394:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 395:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif			
 396:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 397:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 398:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 399:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
 400:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_On(void)
 401:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 402:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << OTGPADE);
 403:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 404:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 405:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
 406:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_OTGPAD_Off(void)
 407:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 408:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << OTGPADE);
 409:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 410:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			#endif
 411:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 412:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
 413:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Freeze(void)
 414:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 415:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << FRZCLK);
 416:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 417:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 418:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
 419:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_CLK_Unfreeze(void)
 420:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 421:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
 422:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 423:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			
 424:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void) ATTR_ALWAYS_INLINE;
 425:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Enable(void)
 426:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 427:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  |=  (1 << USBE);
 428:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 429:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 430:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
 431:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Disable(void)
 432:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 433:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << USBE);
 434:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			}
 435:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 
 436:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
 437:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			static inline void USB_Controller_Reset(void)
 438:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 			{
 439:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				const uint8_t Temp = USBCON;
  51               		.loc 2 439 0
  52 001e 8091 D800 		lds r24,216
  53               	.LVL2:
 440:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				
 441:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp & ~(1 << USBE));
  54               		.loc 2 441 0
  55 0022 982F      		mov r25,r24
  56 0024 9F77      		andi r25,lo8(127)
  57 0026 9093 D800 		sts 216,r25
 442:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON = (Temp |  (1 << USBE));
  58               		.loc 2 442 0
  59 002a 8068      		ori r24,lo8(-128)
  60               	.LVL3:
  61 002c 8093 D800 		sts 216,r24
  62               	.LBE25:
  63               	.LBE24:
  64               	.LBB26:
  65               	.LBB27:
 384:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   &= ~(1 << REGDIS);
  66               		.loc 2 384 0
  67 0030 8091 6300 		lds r24,99
  68 0034 8E7F      		andi r24,lo8(-2)
  69 0036 8093 6300 		sts 99,r24
  70               	.LBE27:
  71               	.LBE26:
  72               	.LBB28:
  73               	.LBB29:
 421:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << FRZCLK);
  74               		.loc 2 421 0
  75 003a 8091 D800 		lds r24,216
  76 003e 8F7D      		andi r24,lo8(-33)
  77 0040 8093 D800 		sts 216,r24
  78               	.LBE29:
  79               	.LBE28:
  80               	.LBB30:
  81               	.LBB31:
 245:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  &= ~(1 << DETACH);
  82               		.loc 2 245 0
  83 0044 8091 E000 		lds r24,224
  84 0048 8E7F      		andi r24,lo8(-2)
  85 004a 8093 E000 		sts 224,r24
  86               	.LBE31:
  87               	.LBE30:
 171:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 172:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 173:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Controller_Reset();
 174:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 175:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_CAN_BE_BOTH)
 176:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (UHWCON & (1 << UIDE))
 177:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 178:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Clear(USB_INT_IDTI);
 179:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_INT_Enable(USB_INT_IDTI);
 180:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_CurrentMode = USB_GetUSBModeFromUID();
 181:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 182:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 183:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		
 184:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (!(USB_Options & USB_OPT_REG_DISABLED))
 185:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_On();
 186:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	else
 187:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	  USB_REG_Off();
 188:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 189:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_CLK_Unfreeze();
 190:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 191:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_CAN_BE_DEVICE) && (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defi
 192:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_DEVICE)
 193:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 194:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
 195:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		  USB_Device_SetLowSpeed();
 196:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		else
 197:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		  USB_Device_SetFullSpeed();
 198:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 199:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 200:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 201:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if (defined(USB_CAN_BE_DEVICE) && !defined(FIXED_CONTROL_ENDPOINT_SIZE))
 202:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	if (USB_CurrentMode == USB_MODE_DEVICE)
 203:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	{
 204:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		USB_Descriptor_Device_t* DeviceDescriptorPtr;
 205:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 206:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIP
 207:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		{		  
 208:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#if defined(USE_RAM_DESCRIPTORS)
 209:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
 210:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#elif defined(USE_EEPROM_DESCRIPTORS)
 211:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 212:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#else
 213:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
 214:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 			#endif
 215:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 		}
 216:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	}
 217:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#endif
 218:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 
 219:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_Attach();
 220:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	
 221:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	#if defined(USB_DEVICE_ONLY)
 222:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Clear(USB_INT_SUSPEND);
  88               		.loc 1 222 0
  89 004e 8091 E100 		lds r24,225
  90 0052 8E7F      		andi r24,lo8(-2)
  91 0054 8093 E100 		sts 225,r24
 223:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_SUSPEND);
  92               		.loc 1 223 0
  93 0058 8091 E200 		lds r24,226
  94 005c 8160      		ori r24,lo8(1)
  95 005e 8093 E200 		sts 226,r24
 224:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Clear(USB_INT_EORSTI);
  96               		.loc 1 224 0
  97 0062 8091 E100 		lds r24,225
  98 0066 877F      		andi r24,lo8(-9)
  99 0068 8093 E100 		sts 225,r24
 225:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_Enable(USB_INT_EORSTI);
 100               		.loc 1 225 0
 101 006c 8091 E200 		lds r24,226
 102 0070 8860      		ori r24,lo8(8)
 103 0072 8093 E200 		sts 226,r24
 104 0076 0895      		ret
 105               		.cfi_endproc
 106               	.LFE66:
 108               		.section	.text.USB_Init,"ax",@progbits
 109               	.global	USB_Init
 111               	USB_Init:
 112               	.LFB64:
  57:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
 113               		.loc 1 57 0
 114               		.cfi_startproc
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 0 */
 118               	.L__stack_usage = 0
  99:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 119               		.loc 1 99 0
 120 0000 0E94 0000 		call USB_ResetInterface
 121               	.LVL4:
 105:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = true;
 122               		.loc 1 105 0
 123 0004 81E0      		ldi r24,lo8(1)
 124 0006 8093 0000 		sts USB_IsInitialized,r24
 125 000a 0895      		ret
 126               		.cfi_endproc
 127               	.LFE64:
 129               		.section	.text.USB_ShutDown,"ax",@progbits
 130               	.global	USB_ShutDown
 132               	USB_ShutDown:
 133               	.LFB65:
 109:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** {
 134               		.loc 1 109 0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 110:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_ResetInterface();
 140               		.loc 1 110 0
 141 0000 0E94 0000 		call USB_ResetInterface
 142               	.LVL5:
 143               	.LBB32:
 144               	.LBB33:
 231:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				UDCON  |=  (1 << DETACH);
 145               		.loc 2 231 0
 146 0004 E0EE      		ldi r30,lo8(-32)
 147 0006 F0E0      		ldi r31,0
 148 0008 8081      		ld r24,Z
 149 000a 8160      		ori r24,lo8(1)
 150 000c 8083      		st Z,r24
 151               	.LBE33:
 152               	.LBE32:
 153               	.LBB34:
 154               	.LBB35:
 433:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				USBCON  &= ~(1 << USBE);
 155               		.loc 2 433 0
 156 000e E8ED      		ldi r30,lo8(-40)
 157 0010 F0E0      		ldi r31,0
 158 0012 8081      		ld r24,Z
 159 0014 8F77      		andi r24,lo8(127)
 160 0016 8083      		st Z,r24
 161               	.LBE35:
 162               	.LBE34:
 114:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_DisableAllInterrupts();
 163               		.loc 1 114 0
 164 0018 0E94 0000 		call USB_INT_DisableAllInterrupts
 165               	.LVL6:
 115:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_INT_ClearAllInterrupts();
 166               		.loc 1 115 0
 167 001c 0E94 0000 		call USB_INT_ClearAllInterrupts
 168               	.LVL7:
 169               	.LBB36:
 170               	.LBB37:
 369:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				PLLCSR  = 0;
 171               		.loc 2 369 0
 172 0020 19BC      		out 0x29,__zero_reg__
 173               	.LBE37:
 174               	.LBE36:
 175               	.LBB38:
 176               	.LBB39:
 394:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.h **** 				REGCR   |=  (1 << REGDIS);
 177               		.loc 2 394 0
 178 0022 E3E6      		ldi r30,lo8(99)
 179 0024 F0E0      		ldi r31,0
 180 0026 8081      		ld r24,Z
 181 0028 8160      		ori r24,lo8(1)
 182 002a 8083      		st Z,r24
 183               	.LBE39:
 184               	.LBE38:
 134:../lufa-LUFA/LUFA/Drivers/USB/LowLevel/USBController.c **** 	USB_IsInitialized = false;
 185               		.loc 1 134 0
 186 002c 1092 0000 		sts USB_IsInitialized,__zero_reg__
 187 0030 0895      		ret
 188               		.cfi_endproc
 189               	.LFE65:
 191               		.text
 192               	.Letext0:
 193               		.file 3 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/DeviceStandardReq.h"
 194               		.file 4 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/USBTask.h"
 195               		.file 5 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/USBInterrupt.h"
 196               		.file 6 "/usr/lib/avr/include/stdint.h"
 197               		.file 7 "../lufa-LUFA/LUFA/Drivers/USB/LowLevel/../HighLevel/../LowLevel/Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USBController.c
     /tmp/ccuebgod.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccuebgod.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccuebgod.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccuebgod.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccuebgod.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccuebgod.s:13     .text.USB_ResetInterface:0000000000000000 USB_ResetInterface
     /tmp/ccuebgod.s:111    .text.USB_Init:0000000000000000 USB_Init
     /tmp/ccuebgod.s:132    .text.USB_ShutDown:0000000000000000 USB_ShutDown

UNDEFINED SYMBOLS
USB_INT_DisableAllInterrupts
USB_INT_ClearAllInterrupts
USB_ConfigurationNumber
USB_IsInitialized

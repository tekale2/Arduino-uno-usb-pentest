
BootloaderMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  0001f4ca  0000159e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ca  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  0000171e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001744  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  0000175c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000b  00800280  00800280  00001764  2**0
                  ALLOC
  6 .noinit       00000002  0080028b  0080028b  00001764  2**0
                  ALLOC
  7 .stab         00000a98  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      0000016f  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000236b  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000740  00000000  00000000  00002380  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000b8e1  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000308f  00000000  00000000  0000e3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004292  00000000  00000000  00011430  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000115c  00000000  00000000  000156c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004146  00000000  00000000  00016820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000071af  00000000  00000000  0001a966  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000007d8  00000000  00000000  00021b18  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	78 c0       	rjmp	.+240    	; 0x1e0f6 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	76 c0       	rjmp	.+236    	; 0x1e0f6 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	74 c0       	rjmp	.+232    	; 0x1e0f6 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	72 c0       	rjmp	.+228    	; 0x1e0f6 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	70 c0       	rjmp	.+224    	; 0x1e0f6 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	6e c0       	rjmp	.+220    	; 0x1e0f6 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	6c c0       	rjmp	.+216    	; 0x1e0f6 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	6a c0       	rjmp	.+212    	; 0x1e0f6 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	68 c0       	rjmp	.+208    	; 0x1e0f6 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	a8 c6       	rjmp	.+3408   	; 0x1ed7a <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	62 c7       	rjmp	.+3780   	; 0x1eef2 <__vector_11>
   1e02e:	00 00       	nop
   1e030:	62 c0       	rjmp	.+196    	; 0x1e0f6 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	60 c0       	rjmp	.+192    	; 0x1e0f6 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	5e c0       	rjmp	.+188    	; 0x1e0f6 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	5c c0       	rjmp	.+184    	; 0x1e0f6 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	5a c0       	rjmp	.+180    	; 0x1e0f6 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	58 c0       	rjmp	.+176    	; 0x1e0f6 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	56 c0       	rjmp	.+172    	; 0x1e0f6 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	54 c0       	rjmp	.+168    	; 0x1e0f6 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	a9 c0       	rjmp	.+338    	; 0x1e1a4 <__vector_20>
   1e052:	00 00       	nop
   1e054:	50 c0       	rjmp	.+160    	; 0x1e0f6 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	4e c0       	rjmp	.+156    	; 0x1e0f6 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	4c c0       	rjmp	.+152    	; 0x1e0f6 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	4a c0       	rjmp	.+148    	; 0x1e0f6 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	48 c0       	rjmp	.+144    	; 0x1e0f6 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	46 c0       	rjmp	.+140    	; 0x1e0f6 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	44 c0       	rjmp	.+136    	; 0x1e0f6 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	42 c0       	rjmp	.+132    	; 0x1e0f6 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	40 c0       	rjmp	.+128    	; 0x1e0f6 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	3e c0       	rjmp	.+124    	; 0x1e0f6 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	3c c0       	rjmp	.+120    	; 0x1e0f6 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	3a c0       	rjmp	.+116    	; 0x1e0f6 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	38 c0       	rjmp	.+112    	; 0x1e0f6 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	36 c0       	rjmp	.+108    	; 0x1e0f6 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	34 c0       	rjmp	.+104    	; 0x1e0f6 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	32 c0       	rjmp	.+100    	; 0x1e0f6 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	30 c0       	rjmp	.+96     	; 0x1e0f6 <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	0e c0       	rjmp	.+28     	; 0x1e0c6 <__do_copy_data>
   1e0aa:	80 91 8b 02 	lds	r24, 0x028B
   1e0ae:	90 91 8c 02 	lds	r25, 0x028C
   1e0b2:	82 34       	cpi	r24, 0x42	; 66
   1e0b4:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0b6:	39 f4       	brne	.+14     	; 0x1e0c6 <__do_copy_data>
	{
		MagicBootKey      = 0;
   1e0b8:	10 92 8c 02 	sts	0x028C, r1
   1e0bc:	10 92 8b 02 	sts	0x028B, r1
	}

	if (JumpToApplication)
	{
		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0c0:	e0 e0       	ldi	r30, 0x00	; 0
   1e0c2:	f0 e0       	ldi	r31, 0x00	; 0
   1e0c4:	09 95       	icall

0001e0c6 <__do_copy_data>:
   1e0c6:	12 e0       	ldi	r17, 0x02	; 2
   1e0c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e0ca:	b1 e0       	ldi	r27, 0x01	; 1
   1e0cc:	ea ec       	ldi	r30, 0xCA	; 202
   1e0ce:	f4 ef       	ldi	r31, 0xF4	; 244
   1e0d0:	01 e0       	ldi	r16, 0x01	; 1
   1e0d2:	0b bf       	out	0x3b, r16	; 59
   1e0d4:	02 c0       	rjmp	.+4      	; 0x1e0da <__do_copy_data+0x14>
   1e0d6:	07 90       	elpm	r0, Z+
   1e0d8:	0d 92       	st	X+, r0
   1e0da:	a0 38       	cpi	r26, 0x80	; 128
   1e0dc:	b1 07       	cpc	r27, r17
   1e0de:	d9 f7       	brne	.-10     	; 0x1e0d6 <__do_copy_data+0x10>

0001e0e0 <__do_clear_bss>:
   1e0e0:	12 e0       	ldi	r17, 0x02	; 2
   1e0e2:	a0 e8       	ldi	r26, 0x80	; 128
   1e0e4:	b2 e0       	ldi	r27, 0x02	; 2
   1e0e6:	01 c0       	rjmp	.+2      	; 0x1e0ea <.do_clear_bss_start>

0001e0e8 <.do_clear_bss_loop>:
   1e0e8:	1d 92       	st	X+, r1

0001e0ea <.do_clear_bss_start>:
   1e0ea:	ab 38       	cpi	r26, 0x8B	; 139
   1e0ec:	b1 07       	cpc	r27, r17
   1e0ee:	e1 f7       	brne	.-8      	; 0x1e0e8 <.do_clear_bss_loop>
   1e0f0:	08 d0       	rcall	.+16     	; 0x1e102 <main>
   1e0f2:	0c 94 63 fa 	jmp	0x1f4c6	; 0x1f4c6 <_exit>

0001e0f6 <__bad_interrupt>:
   1e0f6:	84 cf       	rjmp	.-248    	; 0x1e000 <__vectors>

0001e0f8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1e0f8:	9b b1       	in	r25, 0x0b	; 11
   1e0fa:	9f 70       	andi	r25, 0x0F	; 15
   1e0fc:	98 2b       	or	r25, r24
   1e0fe:	9b b9       	out	0x0b, r25	; 11
   1e100:	08 95       	ret

0001e102 <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e102:	84 b7       	in	r24, 0x34	; 52
   1e104:	87 7f       	andi	r24, 0xF7	; 247
   1e106:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e108:	88 e1       	ldi	r24, 0x18	; 24
   1e10a:	0f b6       	in	r0, 0x3f	; 63
   1e10c:	f8 94       	cli
   1e10e:	80 93 60 00 	sts	0x0060, r24
   1e112:	10 92 60 00 	sts	0x0060, r1
   1e116:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e118:	90 e0       	ldi	r25, 0x00	; 0
   1e11a:	80 e8       	ldi	r24, 0x80	; 128
   1e11c:	0f b6       	in	r0, 0x3f	; 63
   1e11e:	f8 94       	cli
   1e120:	80 93 61 00 	sts	0x0061, r24
   1e124:	90 93 61 00 	sts	0x0061, r25
   1e128:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e12a:	c1 e0       	ldi	r28, 0x01	; 1
   1e12c:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e12e:	82 e0       	ldi	r24, 0x02	; 2
   1e130:	85 bf       	out	0x35, r24	; 53

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1e132:	8a b1       	in	r24, 0x0a	; 10
   1e134:	80 6f       	ori	r24, 0xF0	; 240
   1e136:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1e138:	8b b1       	in	r24, 0x0b	; 11
   1e13a:	8f 70       	andi	r24, 0x0F	; 15
   1e13c:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
   1e13e:	02 d6       	rcall	.+3076   	; 0x1ed44 <USB_Init>
   1e140:	c0 93 6f 00 	sts	0x006F, r28

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e144:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e146:	80 93 81 00 	sts	0x0081, r24
   1e14a:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
   1e14c:	d5 df       	rcall	.-86     	; 0x1e0f8 <LEDs_SetAllLEDs>
   1e14e:	78 94       	sei
   1e150:	80 91 00 01 	lds	r24, 0x0100
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
   1e154:	88 23       	and	r24, r24
   1e156:	39 f0       	breq	.+14     	; 0x1e166 <main+0x64>
   1e158:	81 e0       	ldi	r24, 0x01	; 1
   1e15a:	91 e0       	ldi	r25, 0x01	; 1
	{
		MS_Device_USBTask(&Disk_MS_Interface);
   1e15c:	0e 94 32 f9 	call	0x1f264	; 0x1f264 <MS_Device_USBTask>
   1e160:	0e 94 bb f8 	call	0x1f176	; 0x1f176 <USB_USBTask>
		USB_USBTask();
   1e164:	f5 cf       	rjmp	.-22     	; 0x1e150 <main+0x4e>
   1e166:	80 91 80 02 	lds	r24, 0x0280
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
   1e16a:	91 e0       	ldi	r25, 0x01	; 1
   1e16c:	98 0f       	add	r25, r24
   1e16e:	90 93 80 02 	sts	0x0280, r25
   1e172:	8f 3f       	cpi	r24, 0xFF	; 255
   1e174:	89 f7       	brne	.-30     	; 0x1e158 <main+0x56>
   1e176:	80 91 e0 00 	lds	r24, 0x00E0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e17a:	81 60       	ori	r24, 0x01	; 1
   1e17c:	80 93 e0 00 	sts	0x00E0, r24
   1e180:	82 e4       	ldi	r24, 0x42	; 66
   1e182:	9c ed       	ldi	r25, 0xDC	; 220

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e184:	90 93 8c 02 	sts	0x028C, r25
   1e188:	80 93 8b 02 	sts	0x028B, r24
   1e18c:	2c e0       	ldi	r18, 0x0C	; 12
   1e18e:	88 e1       	ldi	r24, 0x18	; 24

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e190:	90 e0       	ldi	r25, 0x00	; 0
   1e192:	0f b6       	in	r0, 0x3f	; 63
   1e194:	f8 94       	cli
   1e196:	a8 95       	wdr
   1e198:	80 93 60 00 	sts	0x0060, r24
   1e19c:	0f be       	out	0x3f, r0	; 63
   1e19e:	20 93 60 00 	sts	0x0060, r18
   1e1a2:	ff cf       	rjmp	.-2      	; 0x1e1a2 <main+0xa0>

0001e1a4 <__vector_20>:
   1e1a4:	1f 92       	push	r1
   1e1a6:	0f 92       	push	r0
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e1a8:	0f b6       	in	r0, 0x3f	; 63
   1e1aa:	0f 92       	push	r0
   1e1ac:	11 24       	eor	r1, r1
   1e1ae:	8f 93       	push	r24
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
   1e1b0:	80 e3       	ldi	r24, 0x30	; 48
   1e1b2:	89 b9       	out	0x09, r24	; 9
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e1b4:	8f 91       	pop	r24
   1e1b6:	0f 90       	pop	r0
   1e1b8:	0f be       	out	0x3f, r0	; 63
   1e1ba:	0f 90       	pop	r0
   1e1bc:	1f 90       	pop	r1
   1e1be:	18 95       	reti

0001e1c0 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
   1e1c0:	80 ea       	ldi	r24, 0xA0	; 160
   1e1c2:	9a cf       	rjmp	.-204    	; 0x1e0f8 <LEDs_SetAllLEDs>

0001e1c4 <EVENT_USB_Device_Disconnect>:
   1e1c4:	80 e1       	ldi	r24, 0x10	; 16
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
   1e1c6:	98 cf       	rjmp	.-208    	; 0x1e0f8 <LEDs_SetAllLEDs>

0001e1c8 <EVENT_USB_Device_ConfigurationChanged>:
   1e1c8:	81 e0       	ldi	r24, 0x01	; 1
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
   1e1ca:	91 e0       	ldi	r25, 0x01	; 1
   1e1cc:	0e 94 15 f9 	call	0x1f22a	; 0x1f22a <MS_Device_ConfigureEndpoints>

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
   1e1d0:	88 23       	and	r24, r24
   1e1d2:	11 f0       	breq	.+4      	; 0x1e1d8 <EVENT_USB_Device_ConfigurationChanged+0x10>
   1e1d4:	80 e6       	ldi	r24, 0x60	; 96
   1e1d6:	01 c0       	rjmp	.+2      	; 0x1e1da <EVENT_USB_Device_ConfigurationChanged+0x12>
   1e1d8:	80 e9       	ldi	r24, 0x90	; 144
   1e1da:	8e cf       	rjmp	.-228    	; 0x1e0f8 <LEDs_SetAllLEDs>

0001e1dc <EVENT_USB_Device_ControlRequest>:
   1e1dc:	81 e0       	ldi	r24, 0x01	; 1
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
   1e1de:	91 e0       	ldi	r25, 0x01	; 1
   1e1e0:	e5 c7       	rjmp	.+4042   	; 0x1f1ac <MS_Device_ProcessControlRequest>

0001e1e2 <CALLBACK_MS_Device_SCSICommandReceived>:
   1e1e2:	cf 93       	push	r28
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e1e4:	df 93       	push	r29
   1e1e6:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
   1e1e8:	80 e2       	ldi	r24, 0x20	; 32
   1e1ea:	86 df       	rcall	.-244    	; 0x1e0f8 <LEDs_SetAllLEDs>
   1e1ec:	ce 01       	movw	r24, r28
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
   1e1ee:	ce d0       	rcall	.+412    	; 0x1e38c <SCSI_DecodeSCSICommand>
   1e1f0:	c8 2f       	mov	r28, r24
   1e1f2:	80 e6       	ldi	r24, 0x60	; 96
   1e1f4:	81 df       	rcall	.-254    	; 0x1e0f8 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
   1e1f6:	10 92 80 02 	sts	0x0280, r1
   1e1fa:	8c 2f       	mov	r24, r28

	/* Signal that a command was processed, must not exit bootloader yet */
	TicksSinceLastCommand = 0;
   1e1fc:	df 91       	pop	r29
   1e1fe:	cf 91       	pop	r28

	return CommandSuccess;
}
   1e200:	08 95       	ret

0001e202 <CALLBACK_USB_GetDescriptor>:

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
   1e202:	91 30       	cpi	r25, 0x01	; 1
   1e204:	39 f0       	breq	.+14     	; 0x1e214 <CALLBACK_USB_GetDescriptor+0x12>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
   1e206:	92 30       	cpi	r25, 0x02	; 2
   1e208:	51 f0       	breq	.+20     	; 0x1e21e <CALLBACK_USB_GetDescriptor+0x1c>
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e20a:	80 e0       	ldi	r24, 0x00	; 0
   1e20c:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
   1e20e:	20 e0       	ldi	r18, 0x00	; 0
   1e210:	30 e0       	ldi	r19, 0x00	; 0
   1e212:	09 c0       	rjmp	.+18     	; 0x1e226 <CALLBACK_USB_GetDescriptor+0x24>

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
   1e214:	82 e1       	ldi	r24, 0x12	; 18
   1e216:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
   1e218:	2c e0       	ldi	r18, 0x0C	; 12
   1e21a:	32 e0       	ldi	r19, 0x02	; 2
   1e21c:	04 c0       	rjmp	.+8      	; 0x1e226 <CALLBACK_USB_GetDescriptor+0x24>
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
   1e21e:	80 e2       	ldi	r24, 0x20	; 32
   1e220:	90 e0       	ldi	r25, 0x00	; 0
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
   1e222:	2c ee       	ldi	r18, 0xEC	; 236
   1e224:	31 e0       	ldi	r19, 0x01	; 1
		Size    = sizeof(USB_Descriptor_Configuration_t);
	}

	*DescriptorAddress = Address;
   1e226:	fa 01       	movw	r30, r20
   1e228:	31 83       	std	Z+1, r19	; 0x01
   1e22a:	20 83       	st	Z, r18
	return Size;
}
   1e22c:	08 95       	ret

0001e22e <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e22e:	07 b6       	in	r0, 0x37	; 55
   1e230:	00 fc       	sbrc	r0, 0
   1e232:	fd cf       	rjmp	.-6      	; 0x1e22e <BootloaderAPI_ErasePage>
   1e234:	f9 99       	sbic	0x1f, 1	; 31
   1e236:	fe cf       	rjmp	.-4      	; 0x1e234 <BootloaderAPI_ErasePage+0x6>
   1e238:	23 e0       	ldi	r18, 0x03	; 3
   1e23a:	fb 01       	movw	r30, r22
   1e23c:	80 93 5b 00 	sts	0x005B, r24
   1e240:	20 93 57 00 	sts	0x0057, r18
   1e244:	e8 95       	spm
	boot_spm_busy_wait();
   1e246:	07 b6       	in	r0, 0x37	; 55
   1e248:	00 fc       	sbrc	r0, 0
   1e24a:	fd cf       	rjmp	.-6      	; 0x1e246 <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e24c:	81 e1       	ldi	r24, 0x11	; 17
   1e24e:	80 93 57 00 	sts	0x0057, r24
   1e252:	e8 95       	spm
   1e254:	08 95       	ret

0001e256 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e256:	07 b6       	in	r0, 0x37	; 55
   1e258:	00 fc       	sbrc	r0, 0
   1e25a:	fd cf       	rjmp	.-6      	; 0x1e256 <BootloaderAPI_WritePage>
   1e25c:	f9 99       	sbic	0x1f, 1	; 31
   1e25e:	fe cf       	rjmp	.-4      	; 0x1e25c <BootloaderAPI_WritePage+0x6>
   1e260:	25 e0       	ldi	r18, 0x05	; 5
   1e262:	fb 01       	movw	r30, r22
   1e264:	80 93 5b 00 	sts	0x005B, r24
   1e268:	20 93 57 00 	sts	0x0057, r18
   1e26c:	e8 95       	spm
	boot_spm_busy_wait();
   1e26e:	07 b6       	in	r0, 0x37	; 55
   1e270:	00 fc       	sbrc	r0, 0
   1e272:	fd cf       	rjmp	.-6      	; 0x1e26e <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e274:	81 e1       	ldi	r24, 0x11	; 17
   1e276:	80 93 57 00 	sts	0x0057, r24
   1e27a:	e8 95       	spm
   1e27c:	08 95       	ret

0001e27e <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e27e:	07 b6       	in	r0, 0x37	; 55
   1e280:	00 fc       	sbrc	r0, 0
   1e282:	fd cf       	rjmp	.-6      	; 0x1e27e <BootloaderAPI_FillWord>
   1e284:	f9 99       	sbic	0x1f, 1	; 31
   1e286:	fe cf       	rjmp	.-4      	; 0x1e284 <BootloaderAPI_FillWord+0x6>
   1e288:	21 e0       	ldi	r18, 0x01	; 1
   1e28a:	0a 01       	movw	r0, r20
   1e28c:	fb 01       	movw	r30, r22
   1e28e:	80 93 5b 00 	sts	0x005B, r24
   1e292:	20 93 57 00 	sts	0x0057, r18
   1e296:	e8 95       	spm
   1e298:	11 24       	eor	r1, r1
   1e29a:	08 95       	ret

0001e29c <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e29c:	21 e2       	ldi	r18, 0x21	; 33
   1e29e:	fc 01       	movw	r30, r24
   1e2a0:	20 93 57 00 	sts	0x0057, r18
   1e2a4:	84 91       	lpm	r24, Z
}
   1e2a6:	08 95       	ret

0001e2a8 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e2a8:	29 e0       	ldi	r18, 0x09	; 9
   1e2aa:	fc 01       	movw	r30, r24
   1e2ac:	20 93 57 00 	sts	0x0057, r18
   1e2b0:	84 91       	lpm	r24, Z
}
   1e2b2:	08 95       	ret

0001e2b4 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e2b4:	e1 e0       	ldi	r30, 0x01	; 1
   1e2b6:	f0 e0       	ldi	r31, 0x00	; 0
   1e2b8:	89 e0       	ldi	r24, 0x09	; 9
   1e2ba:	80 93 57 00 	sts	0x0057, r24
   1e2be:	84 91       	lpm	r24, Z
}
   1e2c0:	08 95       	ret

0001e2c2 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e2c2:	07 b6       	in	r0, 0x37	; 55
   1e2c4:	00 fc       	sbrc	r0, 0
   1e2c6:	fd cf       	rjmp	.-6      	; 0x1e2c2 <BootloaderAPI_WriteLock>
   1e2c8:	f9 99       	sbic	0x1f, 1	; 31
   1e2ca:	fe cf       	rjmp	.-4      	; 0x1e2c8 <BootloaderAPI_WriteLock+0x6>
   1e2cc:	80 95       	com	r24
   1e2ce:	99 e0       	ldi	r25, 0x09	; 9
   1e2d0:	e1 e0       	ldi	r30, 0x01	; 1
   1e2d2:	f0 e0       	ldi	r31, 0x00	; 0
   1e2d4:	08 2e       	mov	r0, r24
   1e2d6:	90 93 57 00 	sts	0x0057, r25
   1e2da:	e8 95       	spm
   1e2dc:	08 95       	ret

0001e2de <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
   1e2de:	9f 92       	push	r9
   1e2e0:	af 92       	push	r10
   1e2e2:	bf 92       	push	r11
   1e2e4:	cf 92       	push	r12
   1e2e6:	df 92       	push	r13
   1e2e8:	ef 92       	push	r14
   1e2ea:	ff 92       	push	r15
   1e2ec:	0f 93       	push	r16
   1e2ee:	1f 93       	push	r17
   1e2f0:	cf 93       	push	r28
   1e2f2:	df 93       	push	r29
   1e2f4:	ec 01       	movw	r28, r24
   1e2f6:	96 2e       	mov	r9, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
   1e2f8:	c8 a0       	ldd	r12, Y+32	; 0x20
   1e2fa:	df 8c       	ldd	r13, Y+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
   1e2fc:	ab a0       	ldd	r10, Y+35	; 0x23
   1e2fe:	ba a0       	ldd	r11, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
   1e300:	88 e1       	ldi	r24, 0x18	; 24
   1e302:	c8 16       	cp	r12, r24
   1e304:	81 e0       	ldi	r24, 0x01	; 1
   1e306:	d8 06       	cpc	r13, r24
   1e308:	18 f4       	brcc	.+6      	; 0x1e310 <SCSI_Command_ReadWrite_10+0x32>
   1e30a:	00 e0       	ldi	r16, 0x00	; 0
   1e30c:	10 e0       	ldi	r17, 0x00	; 0
   1e30e:	15 c0       	rjmp	.+42     	; 0x1e33a <SCSI_Command_ReadWrite_10+0x5c>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e310:	80 91 3c 01 	lds	r24, 0x013C
   1e314:	80 7f       	andi	r24, 0xF0	; 240
   1e316:	85 60       	ori	r24, 0x05	; 5
   1e318:	80 93 3c 01 	sts	0x013C, r24
   1e31c:	81 e2       	ldi	r24, 0x21	; 33
   1e31e:	80 93 46 01 	sts	0x0146, r24
   1e322:	10 92 47 01 	sts	0x0147, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
   1e326:	80 e0       	ldi	r24, 0x00	; 0
   1e328:	25 c0       	rjmp	.+74     	; 0x1e374 <SCSI_Command_ReadWrite_10+0x96>
   1e32a:	c8 01       	movw	r24, r16
   1e32c:	8c 0d       	add	r24, r12
   1e32e:	9d 1d       	adc	r25, r13
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
	{
		if (IsDataRead == DATA_READ)
   1e330:	99 20       	and	r9, r9
   1e332:	39 f0       	breq	.+14     	; 0x1e342 <SCSI_Command_ReadWrite_10+0x64>
		  VirtualFAT_ReadBlock(BlockAddress + i);
   1e334:	05 d2       	rcall	.+1034   	; 0x1e740 <VirtualFAT_ReadBlock>
   1e336:	0f 5f       	subi	r16, 0xFF	; 255

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
   1e338:	1f 4f       	sbci	r17, 0xFF	; 255
   1e33a:	0a 15       	cp	r16, r10
   1e33c:	1b 05       	cpc	r17, r11
   1e33e:	a9 f7       	brne	.-22     	; 0x1e32a <SCSI_Command_ReadWrite_10+0x4c>
   1e340:	02 c0       	rjmp	.+4      	; 0x1e346 <SCSI_Command_ReadWrite_10+0x68>
   1e342:	34 d1       	rcall	.+616    	; 0x1e5ac <VirtualFAT_WriteBlock>
	{
		if (IsDataRead == DATA_READ)
		  VirtualFAT_ReadBlock(BlockAddress + i);
		else
		  VirtualFAT_WriteBlock(BlockAddress + i);
   1e344:	f8 cf       	rjmp	.-16     	; 0x1e336 <SCSI_Command_ReadWrite_10+0x58>
   1e346:	68 01       	movw	r12, r16
   1e348:	e1 2c       	mov	r14, r1
	}

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * SECTOR_SIZE_BYTES);
   1e34a:	f1 2c       	mov	r15, r1
   1e34c:	89 e0       	ldi	r24, 0x09	; 9
   1e34e:	cc 0c       	add	r12, r12
   1e350:	dd 1c       	adc	r13, r13
   1e352:	ee 1c       	adc	r14, r14
   1e354:	ff 1c       	adc	r15, r15
   1e356:	8a 95       	dec	r24
   1e358:	d1 f7       	brne	.-12     	; 0x1e34e <SCSI_Command_ReadWrite_10+0x70>
   1e35a:	4c 89       	ldd	r20, Y+20	; 0x14
   1e35c:	5d 89       	ldd	r21, Y+21	; 0x15
   1e35e:	6e 89       	ldd	r22, Y+22	; 0x16
   1e360:	7f 89       	ldd	r23, Y+23	; 0x17
   1e362:	4c 19       	sub	r20, r12
   1e364:	5d 09       	sbc	r21, r13
   1e366:	6e 09       	sbc	r22, r14
   1e368:	7f 09       	sbc	r23, r15
   1e36a:	4c 8b       	std	Y+20, r20	; 0x14
   1e36c:	5d 8b       	std	Y+21, r21	; 0x15
   1e36e:	6e 8b       	std	Y+22, r22	; 0x16
   1e370:	7f 8b       	std	Y+23, r23	; 0x17
   1e372:	81 e0       	ldi	r24, 0x01	; 1
   1e374:	df 91       	pop	r29

	return true;
   1e376:	cf 91       	pop	r28
}
   1e378:	1f 91       	pop	r17
   1e37a:	0f 91       	pop	r16
   1e37c:	ff 90       	pop	r15
   1e37e:	ef 90       	pop	r14
   1e380:	df 90       	pop	r13
   1e382:	cf 90       	pop	r12
   1e384:	bf 90       	pop	r11
   1e386:	af 90       	pop	r10
   1e388:	9f 90       	pop	r9
   1e38a:	08 95       	ret

0001e38c <SCSI_DecodeSCSICommand>:
   1e38c:	ef 92       	push	r14
   1e38e:	ff 92       	push	r15
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e390:	0f 93       	push	r16
   1e392:	1f 93       	push	r17
   1e394:	cf 93       	push	r28
   1e396:	df 93       	push	r29
   1e398:	ec 01       	movw	r28, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
   1e39a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e39c:	8f 31       	cpi	r24, 0x1F	; 31
   1e39e:	a0 f4       	brcc	.+40     	; 0x1e3c8 <SCSI_DecodeSCSICommand+0x3c>
   1e3a0:	8d 31       	cpi	r24, 0x1D	; 29
   1e3a2:	08 f0       	brcs	.+2      	; 0x1e3a6 <SCSI_DecodeSCSICommand+0x1a>
   1e3a4:	c0 c0       	rjmp	.+384    	; 0x1e526 <SCSI_DecodeSCSICommand+0x19a>
   1e3a6:	82 31       	cpi	r24, 0x12	; 18
   1e3a8:	f1 f1       	breq	.+124    	; 0x1e426 <SCSI_DecodeSCSICommand+0x9a>
   1e3aa:	38 f4       	brcc	.+14     	; 0x1e3ba <SCSI_DecodeSCSICommand+0x2e>
   1e3ac:	88 23       	and	r24, r24
   1e3ae:	09 f4       	brne	.+2      	; 0x1e3b2 <SCSI_DecodeSCSICommand+0x26>
   1e3b0:	ba c0       	rjmp	.+372    	; 0x1e526 <SCSI_DecodeSCSICommand+0x19a>
   1e3b2:	83 30       	cpi	r24, 0x03	; 3
   1e3b4:	09 f4       	brne	.+2      	; 0x1e3b8 <SCSI_DecodeSCSICommand+0x2c>
   1e3b6:	68 c0       	rjmp	.+208    	; 0x1e488 <SCSI_DecodeSCSICommand+0xfc>
   1e3b8:	bb c0       	rjmp	.+374    	; 0x1e530 <SCSI_DecodeSCSICommand+0x1a4>
   1e3ba:	8a 31       	cpi	r24, 0x1A	; 26
   1e3bc:	09 f4       	brne	.+2      	; 0x1e3c0 <SCSI_DecodeSCSICommand+0x34>
   1e3be:	91 c0       	rjmp	.+290    	; 0x1e4e2 <SCSI_DecodeSCSICommand+0x156>
   1e3c0:	8b 31       	cpi	r24, 0x1B	; 27
   1e3c2:	09 f4       	brne	.+2      	; 0x1e3c6 <SCSI_DecodeSCSICommand+0x3a>
   1e3c4:	a8 c0       	rjmp	.+336    	; 0x1e516 <SCSI_DecodeSCSICommand+0x18a>
   1e3c6:	b4 c0       	rjmp	.+360    	; 0x1e530 <SCSI_DecodeSCSICommand+0x1a4>
   1e3c8:	88 32       	cpi	r24, 0x28	; 40
   1e3ca:	09 f4       	brne	.+2      	; 0x1e3ce <SCSI_DecodeSCSICommand+0x42>
   1e3cc:	83 c0       	rjmp	.+262    	; 0x1e4d4 <SCSI_DecodeSCSICommand+0x148>
   1e3ce:	20 f5       	brcc	.+72     	; 0x1e418 <SCSI_DecodeSCSICommand+0x8c>
   1e3d0:	85 32       	cpi	r24, 0x25	; 37
   1e3d2:	09 f0       	breq	.+2      	; 0x1e3d6 <SCSI_DecodeSCSICommand+0x4a>
   1e3d4:	ad c0       	rjmp	.+346    	; 0x1e530 <SCSI_DecodeSCSICommand+0x1a4>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e3d6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
   1e3da:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1e3de:	81 e0       	ldi	r24, 0x01	; 1
   1e3e0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
   1e3e4:	87 e1       	ldi	r24, 0x17	; 23
   1e3e6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e3ea:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 16);
   1e3ee:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1e3f2:	82 e0       	ldi	r24, 0x02	; 2
   1e3f4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data &  0xFF);
   1e3f8:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e3fc:	80 91 e8 00 	lds	r24, 0x00E8
   1e400:	8e 77       	andi	r24, 0x7E	; 126
   1e402:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_32_BE(LUN_MEDIA_BLOCKS - 1);
	Endpoint_Write_32_BE(SECTOR_SIZE_BYTES);
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
   1e406:	4c 89       	ldd	r20, Y+20	; 0x14
   1e408:	5d 89       	ldd	r21, Y+21	; 0x15
   1e40a:	6e 89       	ldd	r22, Y+22	; 0x16
   1e40c:	7f 89       	ldd	r23, Y+23	; 0x17
   1e40e:	48 50       	subi	r20, 0x08	; 8
   1e410:	51 09       	sbc	r21, r1
   1e412:	61 09       	sbc	r22, r1
   1e414:	71 09       	sbc	r23, r1
   1e416:	7a c0       	rjmp	.+244    	; 0x1e50c <SCSI_DecodeSCSICommand+0x180>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
   1e418:	8a 32       	cpi	r24, 0x2A	; 42
   1e41a:	09 f4       	brne	.+2      	; 0x1e41e <SCSI_DecodeSCSICommand+0x92>
   1e41c:	59 c0       	rjmp	.+178    	; 0x1e4d0 <SCSI_DecodeSCSICommand+0x144>
   1e41e:	8f 32       	cpi	r24, 0x2F	; 47
   1e420:	09 f4       	brne	.+2      	; 0x1e424 <SCSI_DecodeSCSICommand+0x98>
   1e422:	81 c0       	rjmp	.+258    	; 0x1e526 <SCSI_DecodeSCSICommand+0x19a>
   1e424:	85 c0       	rjmp	.+266    	; 0x1e530 <SCSI_DecodeSCSICommand+0x1a4>
   1e426:	0f 8d       	ldd	r16, Y+31	; 0x1f
   1e428:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
   1e42a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1e42c:	83 70       	andi	r24, 0x03	; 3
   1e42e:	19 f4       	brne	.+6      	; 0x1e436 <SCSI_DecodeSCSICommand+0xaa>
   1e430:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1e432:	88 23       	and	r24, r24
   1e434:	41 f0       	breq	.+16     	; 0x1e446 <SCSI_DecodeSCSICommand+0xba>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e436:	80 91 3c 01 	lds	r24, 0x013C
   1e43a:	80 7f       	andi	r24, 0xF0	; 240
   1e43c:	85 60       	ori	r24, 0x05	; 5
   1e43e:	80 93 3c 01 	sts	0x013C, r24
   1e442:	84 e2       	ldi	r24, 0x24	; 36
   1e444:	7c c0       	rjmp	.+248    	; 0x1e53e <SCSI_DecodeSCSICommand+0x1b2>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
   1e446:	78 01       	movw	r14, r16
   1e448:	05 32       	cpi	r16, 0x25	; 37
   1e44a:	11 05       	cpc	r17, r1
   1e44c:	18 f0       	brcs	.+6      	; 0x1e454 <SCSI_DecodeSCSICommand+0xc8>
   1e44e:	24 e2       	ldi	r18, 0x24	; 36
   1e450:	e2 2e       	mov	r14, r18
   1e452:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
   1e454:	40 e0       	ldi	r20, 0x00	; 0
   1e456:	50 e0       	ldi	r21, 0x00	; 0
   1e458:	b7 01       	movw	r22, r14
   1e45a:	8e e1       	ldi	r24, 0x1E	; 30
   1e45c:	92 e0       	ldi	r25, 0x02	; 2
   1e45e:	aa d2       	rcall	.+1364   	; 0x1e9b4 <Endpoint_Write_Stream_LE>
   1e460:	60 e0       	ldi	r22, 0x00	; 0

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e462:	70 e0       	ldi	r23, 0x00	; 0
   1e464:	c8 01       	movw	r24, r16
   1e466:	8e 19       	sub	r24, r14
   1e468:	9f 09       	sbc	r25, r15
   1e46a:	67 d2       	rcall	.+1230   	; 0x1e93a <Endpoint_Null_Stream>
   1e46c:	80 91 e8 00 	lds	r24, 0x00E8
   1e470:	8e 77       	andi	r24, 0x7E	; 126
   1e472:	80 93 e8 00 	sts	0x00E8, r24
   1e476:	4c 89       	ldd	r20, Y+20	; 0x14
   1e478:	5d 89       	ldd	r21, Y+21	; 0x15

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e47a:	6e 89       	ldd	r22, Y+22	; 0x16
   1e47c:	7f 89       	ldd	r23, Y+23	; 0x17
   1e47e:	4e 19       	sub	r20, r14
   1e480:	5f 09       	sbc	r21, r15
   1e482:	61 09       	sbc	r22, r1
   1e484:	71 09       	sbc	r23, r1
   1e486:	42 c0       	rjmp	.+132    	; 0x1e50c <SCSI_DecodeSCSICommand+0x180>
   1e488:	ef 8c       	ldd	r14, Y+31	; 0x1f
   1e48a:	fe 2c       	mov	r15, r14
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
   1e48c:	82 e1       	ldi	r24, 0x12	; 18
	uint8_t BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
   1e48e:	8e 15       	cp	r24, r14
   1e490:	10 f4       	brcc	.+4      	; 0x1e496 <SCSI_DecodeSCSICommand+0x10a>
   1e492:	92 e1       	ldi	r25, 0x12	; 18
   1e494:	f9 2e       	mov	r15, r25
   1e496:	0f 2d       	mov	r16, r15
   1e498:	10 e0       	ldi	r17, 0x00	; 0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
   1e49a:	40 e0       	ldi	r20, 0x00	; 0
   1e49c:	50 e0       	ldi	r21, 0x00	; 0
   1e49e:	b8 01       	movw	r22, r16
   1e4a0:	8a e3       	ldi	r24, 0x3A	; 58
   1e4a2:	91 e0       	ldi	r25, 0x01	; 1
   1e4a4:	87 d2       	rcall	.+1294   	; 0x1e9b4 <Endpoint_Write_Stream_LE>
   1e4a6:	8e 2d       	mov	r24, r14
   1e4a8:	90 e0       	ldi	r25, 0x00	; 0
   1e4aa:	60 e0       	ldi	r22, 0x00	; 0
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e4ac:	70 e0       	ldi	r23, 0x00	; 0
   1e4ae:	80 1b       	sub	r24, r16
   1e4b0:	91 0b       	sbc	r25, r17
   1e4b2:	43 d2       	rcall	.+1158   	; 0x1e93a <Endpoint_Null_Stream>
   1e4b4:	80 91 e8 00 	lds	r24, 0x00E8
   1e4b8:	8e 77       	andi	r24, 0x7E	; 126
   1e4ba:	80 93 e8 00 	sts	0x00E8, r24
   1e4be:	4c 89       	ldd	r20, Y+20	; 0x14
   1e4c0:	5d 89       	ldd	r21, Y+21	; 0x15
   1e4c2:	6e 89       	ldd	r22, Y+22	; 0x16
   1e4c4:	7f 89       	ldd	r23, Y+23	; 0x17
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e4c6:	4f 19       	sub	r20, r15
   1e4c8:	51 09       	sbc	r21, r1
   1e4ca:	61 09       	sbc	r22, r1
   1e4cc:	71 09       	sbc	r23, r1
   1e4ce:	1e c0       	rjmp	.+60     	; 0x1e50c <SCSI_DecodeSCSICommand+0x180>
   1e4d0:	60 e0       	ldi	r22, 0x00	; 0
   1e4d2:	01 c0       	rjmp	.+2      	; 0x1e4d6 <SCSI_DecodeSCSICommand+0x14a>
   1e4d4:	61 e0       	ldi	r22, 0x01	; 1
   1e4d6:	ce 01       	movw	r24, r28
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
   1e4d8:	02 df       	rcall	.-508    	; 0x1e2de <SCSI_Command_ReadWrite_10>
   1e4da:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
   1e4dc:	09 f4       	brne	.+2      	; 0x1e4e0 <SCSI_DecodeSCSICommand+0x154>
   1e4de:	3f c0       	rjmp	.+126    	; 0x1e55e <SCSI_DecodeSCSICommand+0x1d2>
   1e4e0:	33 c0       	rjmp	.+102    	; 0x1e548 <SCSI_DecodeSCSICommand+0x1bc>
   1e4e2:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
   1e4e6:	10 92 f1 00 	sts	0x00F1, r1
   1e4ea:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
   1e4ee:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1e4f2:	80 91 e8 00 	lds	r24, 0x00E8
				UEDATX = (Data >> 16);
   1e4f6:	8e 77       	andi	r24, 0x7E	; 126
				UEDATX = (Data >> 24);
   1e4f8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e4fc:	4c 89       	ldd	r20, Y+20	; 0x14
   1e4fe:	5d 89       	ldd	r21, Y+21	; 0x15
   1e500:	6e 89       	ldd	r22, Y+22	; 0x16
   1e502:	7f 89       	ldd	r23, Y+23	; 0x17
   1e504:	44 50       	subi	r20, 0x04	; 4
	/* Send an empty header response indicating Write Protect flag is off */
	Endpoint_Write_32_LE(0);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
   1e506:	51 09       	sbc	r21, r1
   1e508:	61 09       	sbc	r22, r1
   1e50a:	71 09       	sbc	r23, r1
   1e50c:	4c 8b       	std	Y+20, r20	; 0x14
   1e50e:	5d 8b       	std	Y+21, r21	; 0x15
   1e510:	6e 8b       	std	Y+22, r22	; 0x16
   1e512:	7f 8b       	std	Y+23, r23	; 0x17
   1e514:	19 c0       	rjmp	.+50     	; 0x1e548 <SCSI_DecodeSCSICommand+0x1bc>
   1e516:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1e518:	83 70       	andi	r24, 0x03	; 3
   1e51a:	91 e0       	ldi	r25, 0x01	; 1
   1e51c:	82 30       	cpi	r24, 0x02	; 2
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
   1e51e:	09 f4       	brne	.+2      	; 0x1e522 <SCSI_DecodeSCSICommand+0x196>
		case SCSI_CMD_START_STOP_UNIT:
#if !defined(NO_APP_START_ON_EJECT)
			/* If the user ejected the volume, signal bootloader exit at next opportunity. */
			RunBootloader = ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[4] & 0x03) != 0x02);
   1e520:	90 e0       	ldi	r25, 0x00	; 0
   1e522:	90 93 00 01 	sts	0x0100, r25
   1e526:	1c 8a       	std	Y+20, r1	; 0x14
   1e528:	1d 8a       	std	Y+21, r1	; 0x15
   1e52a:	1e 8a       	std	Y+22, r1	; 0x16
   1e52c:	1f 8a       	std	Y+23, r1	; 0x17
   1e52e:	0c c0       	rjmp	.+24     	; 0x1e548 <SCSI_DecodeSCSICommand+0x1bc>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
   1e530:	80 91 3c 01 	lds	r24, 0x013C
   1e534:	80 7f       	andi	r24, 0xF0	; 240
   1e536:	85 60       	ori	r24, 0x05	; 5
			break;
   1e538:	80 93 3c 01 	sts	0x013C, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e53c:	80 e2       	ldi	r24, 0x20	; 32
   1e53e:	80 93 46 01 	sts	0x0146, r24
   1e542:	10 92 47 01 	sts	0x0147, r1
   1e546:	0b c0       	rjmp	.+22     	; 0x1e55e <SCSI_DecodeSCSICommand+0x1d2>
   1e548:	80 91 3c 01 	lds	r24, 0x013C
   1e54c:	80 7f       	andi	r24, 0xF0	; 240
   1e54e:	80 93 3c 01 	sts	0x013C, r24
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
   1e552:	10 92 46 01 	sts	0x0146, r1
   1e556:	10 92 47 01 	sts	0x0147, r1
   1e55a:	81 e0       	ldi	r24, 0x01	; 1
   1e55c:	01 c0       	rjmp	.+2      	; 0x1e560 <SCSI_DecodeSCSICommand+0x1d4>
   1e55e:	80 e0       	ldi	r24, 0x00	; 0
   1e560:	df 91       	pop	r29
   1e562:	cf 91       	pop	r28
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
   1e564:	1f 91       	pop	r17
   1e566:	0f 91       	pop	r16
	}

	return false;
   1e568:	ff 90       	pop	r15
}
   1e56a:	ef 90       	pop	r14
   1e56c:	08 95       	ret

0001e56e <UpdateFAT12ClusterEntry>:
static void UpdateFAT12ClusterEntry(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint16_t ChainEntry)
{
	/* Calculate the starting offset of the cluster entry in the FAT12 table */
	uint8_t FATOffset   = (Index + (Index >> 1));
   1e56e:	fb 01       	movw	r30, r22
   1e570:	f6 95       	lsr	r31
   1e572:	e7 95       	ror	r30
   1e574:	e6 0f       	add	r30, r22
   1e576:	f0 e0       	ldi	r31, 0x00	; 0

	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
   1e578:	e8 0f       	add	r30, r24
   1e57a:	f9 1f       	adc	r31, r25
	uint8_t FATOffset   = (Index + (Index >> 1));
	bool    UpperNibble = ((Index & 1) != 0);

	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
   1e57c:	60 ff       	sbrs	r22, 0
   1e57e:	0e c0       	rjmp	.+28     	; 0x1e59c <UpdateFAT12ClusterEntry+0x2e>
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
   1e580:	80 81       	ld	r24, Z
   1e582:	8f 70       	andi	r24, 0x0F	; 15
   1e584:	94 2f       	mov	r25, r20
   1e586:	92 95       	swap	r25
   1e588:	90 7f       	andi	r25, 0xF0	; 240
   1e58a:	89 2b       	or	r24, r25
   1e58c:	80 83       	st	Z, r24
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
   1e58e:	84 e0       	ldi	r24, 0x04	; 4
   1e590:	56 95       	lsr	r21
   1e592:	47 95       	ror	r20
   1e594:	8a 95       	dec	r24
   1e596:	e1 f7       	brne	.-8      	; 0x1e590 <UpdateFAT12ClusterEntry+0x22>
   1e598:	41 83       	std	Z+1, r20	; 0x01
   1e59a:	08 95       	ret
	}
	else
	{
		FATTable[FATOffset]     = ChainEntry;
   1e59c:	40 83       	st	Z, r20
		FATTable[FATOffset + 1] = (FATTable[FATOffset] & 0xF0) | (ChainEntry >> 8);
   1e59e:	84 2f       	mov	r24, r20
   1e5a0:	80 7f       	andi	r24, 0xF0	; 240
   1e5a2:	85 2b       	or	r24, r21
   1e5a4:	81 83       	std	Z+1, r24	; 0x01
   1e5a6:	08 95       	ret

0001e5a8 <ReadEEPROMByte>:
 *
 *  \return Read byte of EEPROM data.
 */
static uint8_t ReadEEPROMByte(const uint8_t* const Address)
{
	return eeprom_read_byte(Address);
   1e5a8:	74 c7       	rjmp	.+3816   	; 0x1f492 <__eerd_byte_usb1287>

0001e5aa <WriteEEPROMByte>:
   1e5aa:	7b c7       	rjmp	.+3830   	; 0x1f4a2 <__eeupd_byte_usb1287>

0001e5ac <VirtualFAT_WriteBlock>:
 *  \param[in]  Data      New data to write to the EEPROM location
 */
static void WriteEEPROMByte(uint8_t* const Address,
                            const uint8_t Data)
{
	 eeprom_update_byte(Address, Data);
   1e5ac:	4f 92       	push	r4
 *  Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to write.
 */
void VirtualFAT_WriteBlock(const uint16_t BlockNumber)
{
   1e5ae:	5f 92       	push	r5
   1e5b0:	6f 92       	push	r6
   1e5b2:	7f 92       	push	r7
   1e5b4:	8f 92       	push	r8
   1e5b6:	9f 92       	push	r9
   1e5b8:	af 92       	push	r10
   1e5ba:	bf 92       	push	r11
   1e5bc:	cf 92       	push	r12
   1e5be:	df 92       	push	r13
   1e5c0:	ef 92       	push	r14
   1e5c2:	ff 92       	push	r15
   1e5c4:	0f 93       	push	r16
   1e5c6:	1f 93       	push	r17
   1e5c8:	cf 93       	push	r28
   1e5ca:	df 93       	push	r29
   1e5cc:	cd b7       	in	r28, 0x3d	; 61
   1e5ce:	de b7       	in	r29, 0x3e	; 62
   1e5d0:	d2 50       	subi	r29, 0x02	; 2
   1e5d2:	0f b6       	in	r0, 0x3f	; 63
   1e5d4:	f8 94       	cli
   1e5d6:	de bf       	out	0x3e, r29	; 62
   1e5d8:	0f be       	out	0x3f, r0	; 63
   1e5da:	cd bf       	out	0x3d, r28	; 61
   1e5dc:	8c 01       	movw	r16, r24
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];

	/* Buffer the entire block to be written from the host */
	Endpoint_Read_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e5de:	40 e0       	ldi	r20, 0x00	; 0
   1e5e0:	50 e0       	ldi	r21, 0x00	; 0
   1e5e2:	60 e0       	ldi	r22, 0x00	; 0
   1e5e4:	72 e0       	ldi	r23, 0x02	; 2
   1e5e6:	ce 01       	movw	r24, r28
   1e5e8:	01 96       	adiw	r24, 0x01	; 1
   1e5ea:	2b d2       	rcall	.+1110   	; 0x1ea42 <Endpoint_Read_Stream_LE>
   1e5ec:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e5f0:	8b 77       	andi	r24, 0x7B	; 123
   1e5f2:	80 93 e8 00 	sts	0x00E8, r24
   1e5f6:	03 30       	cpi	r16, 0x03	; 3
	Endpoint_ClearOUT();

	switch (BlockNumber)
   1e5f8:	11 05       	cpc	r17, r1
   1e5fa:	08 f4       	brcc	.+2      	; 0x1e5fe <VirtualFAT_WriteBlock+0x52>
   1e5fc:	8a c0       	rjmp	.+276    	; 0x1e712 <VirtualFAT_WriteBlock+0x166>
   1e5fe:	03 30       	cpi	r16, 0x03	; 3
   1e600:	11 05       	cpc	r17, r1
   1e602:	51 f4       	brne	.+20     	; 0x1e618 <VirtualFAT_WriteBlock+0x6c>
   1e604:	80 ea       	ldi	r24, 0xA0	; 160

			break;

		case DISK_BLOCK_RootFilesBlock:
			/* Copy over the updated directory entries */
			memcpy(FirmwareFileEntries, BlockBuffer, sizeof(FirmwareFileEntries));
   1e606:	fe 01       	movw	r30, r28
   1e608:	31 96       	adiw	r30, 0x01	; 1
   1e60a:	ac e4       	ldi	r26, 0x4C	; 76
   1e60c:	b1 e0       	ldi	r27, 0x01	; 1
   1e60e:	01 90       	ld	r0, Z+
   1e610:	0d 92       	st	X+, r0
   1e612:	8a 95       	dec	r24
   1e614:	e1 f7       	brne	.-8      	; 0x1e60e <VirtualFAT_WriteBlock+0x62>
   1e616:	7d c0       	rjmp	.+250    	; 0x1e712 <VirtualFAT_WriteBlock+0x166>

			break;
   1e618:	80 91 a6 01 	lds	r24, 0x01A6
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e61c:	90 91 a7 01 	lds	r25, 0x01A7
   1e620:	81 50       	subi	r24, 0x01	; 1
   1e622:	90 4c       	sbci	r25, 0xC0	; 192
   1e624:	88 0f       	add	r24, r24
   1e626:	99 1f       	adc	r25, r25
   1e628:	88 0f       	add	r24, r24
   1e62a:	99 1f       	adc	r25, r25
   1e62c:	08 17       	cp	r16, r24
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e62e:	19 07       	cpc	r17, r25
   1e630:	78 f4       	brcc	.+30     	; 0x1e650 <VirtualFAT_WriteBlock+0xa4>
   1e632:	80 91 e6 01 	lds	r24, 0x01E6
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e636:	90 91 e7 01 	lds	r25, 0x01E7
   1e63a:	81 50       	subi	r24, 0x01	; 1
   1e63c:	90 4c       	sbci	r25, 0xC0	; 192
   1e63e:	88 0f       	add	r24, r24
   1e640:	99 1f       	adc	r25, r25
   1e642:	88 0f       	add	r24, r24
   1e644:	99 1f       	adc	r25, r25
   1e646:	08 17       	cp	r16, r24
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e648:	19 07       	cpc	r17, r25
   1e64a:	08 f0       	brcs	.+2      	; 0x1e64e <VirtualFAT_WriteBlock+0xa2>
   1e64c:	44 c0       	rjmp	.+136    	; 0x1e6d6 <VirtualFAT_WriteBlock+0x12a>
   1e64e:	61 c0       	rjmp	.+194    	; 0x1e712 <VirtualFAT_WriteBlock+0x166>
   1e650:	9c 01       	movw	r18, r24
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);
   1e652:	21 51       	subi	r18, 0x11	; 17
   1e654:	3f 4f       	sbci	r19, 0xFF	; 255
   1e656:	20 17       	cp	r18, r16

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e658:	31 07       	cpc	r19, r17
   1e65a:	58 f3       	brcs	.-42     	; 0x1e632 <VirtualFAT_WriteBlock+0x86>
   1e65c:	68 01       	movw	r12, r16
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e65e:	c8 1a       	sub	r12, r24
   1e660:	d9 0a       	sbc	r13, r25
   1e662:	e1 2c       	mov	r14, r1
   1e664:	f1 2c       	mov	r15, r1
   1e666:	79 e0       	ldi	r23, 0x09	; 9
   1e668:	cc 0c       	add	r12, r12
   1e66a:	dd 1c       	adc	r13, r13
   1e66c:	ee 1c       	adc	r14, r14
   1e66e:	ff 1c       	adc	r15, r15
   1e670:	7a 95       	dec	r23
   1e672:	d1 f7       	brne	.-12     	; 0x1e668 <VirtualFAT_WriteBlock+0xbc>
   1e674:	ce 01       	movw	r24, r28
   1e676:	01 96       	adiw	r24, 0x01	; 1
   1e678:	5c 01       	movw	r10, r24
   1e67a:	4e 01       	movw	r8, r28
   1e67c:	9f ef       	ldi	r25, 0xFF	; 255
   1e67e:	89 1a       	sub	r8, r25
   1e680:	9d ef       	ldi	r25, 0xFD	; 253
   1e682:	99 0a       	sbc	r9, r25
   1e684:	c1 10       	cpse	r12, r1
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
		{
			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e686:	03 c0       	rjmp	.+6      	; 0x1e68e <VirtualFAT_WriteBlock+0xe2>
   1e688:	c7 01       	movw	r24, r14
			{
				/* Erase the given FLASH page, ready to be programmed */
				BootloaderAPI_ErasePage(FlashAddress);
   1e68a:	b6 01       	movw	r22, r12
   1e68c:	d0 dd       	rcall	.-1120   	; 0x1e22e <BootloaderAPI_ErasePage>
   1e68e:	f5 01       	movw	r30, r10
   1e690:	41 81       	ldd	r20, Z+1	; 0x01
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
   1e692:	50 e0       	ldi	r21, 0x00	; 0
   1e694:	54 2f       	mov	r21, r20
   1e696:	44 27       	eor	r20, r20
   1e698:	80 81       	ld	r24, Z
   1e69a:	48 2b       	or	r20, r24
   1e69c:	c7 01       	movw	r24, r14
   1e69e:	b6 01       	movw	r22, r12
   1e6a0:	ee dd       	rcall	.-1060   	; 0x1e27e <BootloaderAPI_FillWord>
   1e6a2:	26 01       	movw	r4, r12
   1e6a4:	37 01       	movw	r6, r14
   1e6a6:	f2 e0       	ldi	r31, 0x02	; 2
			FlashAddress += 2;
   1e6a8:	4f 0e       	add	r4, r31
   1e6aa:	51 1c       	adc	r5, r1
   1e6ac:	61 1c       	adc	r6, r1
   1e6ae:	71 1c       	adc	r7, r1
   1e6b0:	41 10       	cpse	r4, r1
   1e6b2:	07 c0       	rjmp	.+14     	; 0x1e6c2 <VirtualFAT_WriteBlock+0x116>
   1e6b4:	c7 01       	movw	r24, r14

			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e6b6:	b6 01       	movw	r22, r12
   1e6b8:	6e 5f       	subi	r22, 0xFE	; 254
   1e6ba:	71 09       	sbc	r23, r1
   1e6bc:	81 09       	sbc	r24, r1
   1e6be:	91 09       	sbc	r25, r1
   1e6c0:	ca dd       	rcall	.-1132   	; 0x1e256 <BootloaderAPI_WritePage>
   1e6c2:	82 e0       	ldi	r24, 0x02	; 2
   1e6c4:	a8 0e       	add	r10, r24
			{
				/* Write the filled FLASH page to memory */
				BootloaderAPI_WritePage(FlashAddress - SPM_PAGESIZE);
   1e6c6:	b1 1c       	adc	r11, r1
   1e6c8:	a8 14       	cp	r10, r8
   1e6ca:	b9 04       	cpc	r11, r9
   1e6cc:	09 f4       	brne	.+2      	; 0x1e6d0 <VirtualFAT_WriteBlock+0x124>
   1e6ce:	b1 cf       	rjmp	.-158    	; 0x1e632 <VirtualFAT_WriteBlock+0x86>
		}
	}
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
   1e6d0:	73 01       	movw	r14, r6
   1e6d2:	62 01       	movw	r12, r4
   1e6d4:	d7 cf       	rjmp	.-82     	; 0x1e684 <VirtualFAT_WriteBlock+0xd8>
   1e6d6:	9c 01       	movw	r18, r24
				BootloaderAPI_ErasePage(FlashAddress);
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
			FlashAddress += 2;
   1e6d8:	29 5f       	subi	r18, 0xF9	; 249
   1e6da:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6dc:	20 17       	cp	r18, r16
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);
   1e6de:	31 07       	cpc	r19, r17
   1e6e0:	c0 f0       	brcs	.+48     	; 0x1e712 <VirtualFAT_WriteBlock+0x166>
   1e6e2:	08 1b       	sub	r16, r24

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e6e4:	19 0b       	sbc	r17, r25
   1e6e6:	10 2f       	mov	r17, r16
   1e6e8:	00 27       	eor	r16, r16
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e6ea:	11 0f       	add	r17, r17
   1e6ec:	fe 01       	movw	r30, r28
   1e6ee:	31 96       	adiw	r30, 0x01	; 1
   1e6f0:	6f 01       	movw	r12, r30
   1e6f2:	e1 2c       	mov	r14, r1
   1e6f4:	f1 2c       	mov	r15, r1
   1e6f6:	f6 01       	movw	r30, r12
   1e6f8:	61 91       	ld	r22, Z+
   1e6fa:	6f 01       	movw	r12, r30
   1e6fc:	c7 01       	movw	r24, r14
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  WriteEEPROMByte((uint8_t*)EEPROMAddress++, BlockBuffer[i]);
   1e6fe:	80 0f       	add	r24, r16
   1e700:	91 1f       	adc	r25, r17
   1e702:	53 df       	rcall	.-346    	; 0x1e5aa <WriteEEPROMByte>
   1e704:	ff ef       	ldi	r31, 0xFF	; 255
   1e706:	ef 1a       	sub	r14, r31
   1e708:	ff 0a       	sbc	r15, r31
   1e70a:	e1 14       	cp	r14, r1
   1e70c:	82 e0       	ldi	r24, 0x02	; 2
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e70e:	f8 06       	cpc	r15, r24
   1e710:	91 f7       	brne	.-28     	; 0x1e6f6 <VirtualFAT_WriteBlock+0x14a>
   1e712:	de 5f       	subi	r29, 0xFE	; 254
   1e714:	0f b6       	in	r0, 0x3f	; 63
   1e716:	f8 94       	cli
   1e718:	de bf       	out	0x3e, r29	; 62
   1e71a:	0f be       	out	0x3f, r0	; 63
			ReadWriteFLASHFileBlock(BlockNumber, BlockBuffer, false);
			ReadWriteEEPROMFileBlock(BlockNumber, BlockBuffer, false);

			break;
	}
}
   1e71c:	cd bf       	out	0x3d, r28	; 61
   1e71e:	df 91       	pop	r29
   1e720:	cf 91       	pop	r28
   1e722:	1f 91       	pop	r17
   1e724:	0f 91       	pop	r16
   1e726:	ff 90       	pop	r15
   1e728:	ef 90       	pop	r14
   1e72a:	df 90       	pop	r13
   1e72c:	cf 90       	pop	r12
   1e72e:	bf 90       	pop	r11
   1e730:	af 90       	pop	r10
   1e732:	9f 90       	pop	r9
   1e734:	8f 90       	pop	r8
   1e736:	7f 90       	pop	r7
   1e738:	6f 90       	pop	r6
   1e73a:	5f 90       	pop	r5
   1e73c:	4f 90       	pop	r4
   1e73e:	08 95       	ret

0001e740 <VirtualFAT_ReadBlock>:
   1e740:	af 92       	push	r10
   1e742:	bf 92       	push	r11
   1e744:	cf 92       	push	r12
   1e746:	df 92       	push	r13
   1e748:	ef 92       	push	r14
 *  host via the USB Mass Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to read.
 */
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
   1e74a:	ff 92       	push	r15
   1e74c:	0f 93       	push	r16
   1e74e:	1f 93       	push	r17
   1e750:	cf 93       	push	r28
   1e752:	df 93       	push	r29
   1e754:	cd b7       	in	r28, 0x3d	; 61
   1e756:	de b7       	in	r29, 0x3e	; 62
   1e758:	c1 50       	subi	r28, 0x01	; 1
   1e75a:	d2 40       	sbci	r29, 0x02	; 2
   1e75c:	0f b6       	in	r0, 0x3f	; 63
   1e75e:	f8 94       	cli
   1e760:	de bf       	out	0x3e, r29	; 62
   1e762:	0f be       	out	0x3f, r0	; 63
   1e764:	cd bf       	out	0x3d, r28	; 61
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));
   1e766:	8e 01       	movw	r16, r28
   1e768:	0f 5f       	subi	r16, 0xFF	; 255
   1e76a:	1f 4f       	sbci	r17, 0xFF	; 255
   1e76c:	20 e0       	ldi	r18, 0x00	; 0
   1e76e:	32 e0       	ldi	r19, 0x02	; 2
   1e770:	f8 01       	movw	r30, r16
   1e772:	a9 01       	movw	r20, r18
   1e774:	11 92       	st	Z+, r1
   1e776:	41 50       	subi	r20, 0x01	; 1
   1e778:	50 40       	sbci	r21, 0x00	; 0
   1e77a:	e1 f7       	brne	.-8      	; 0x1e774 <VirtualFAT_ReadBlock+0x34>

	switch (BlockNumber)
   1e77c:	83 30       	cpi	r24, 0x03	; 3
   1e77e:	91 05       	cpc	r25, r1
   1e780:	b8 f4       	brcc	.+46     	; 0x1e7b0 <VirtualFAT_ReadBlock+0x70>
   1e782:	01 97       	sbiw	r24, 0x01	; 1
   1e784:	10 f5       	brcc	.+68     	; 0x1e7ca <VirtualFAT_ReadBlock+0x8a>
	{
		case DISK_BLOCK_BootBlock:
			memcpy(BlockBuffer, &BootBlock, sizeof(FATBootBlock_t));
   1e786:	8e e3       	ldi	r24, 0x3E	; 62
   1e788:	e2 e4       	ldi	r30, 0x42	; 66
   1e78a:	f2 e0       	ldi	r31, 0x02	; 2
   1e78c:	d8 01       	movw	r26, r16
   1e78e:	01 90       	ld	r0, Z+
   1e790:	0d 92       	st	X+, r0
   1e792:	8a 95       	dec	r24
   1e794:	e1 f7       	brne	.-8      	; 0x1e78e <VirtualFAT_ReadBlock+0x4e>

			/* Add the magic signature to the end of the block */
			BlockBuffer[SECTOR_SIZE_BYTES - 2] = 0x55;
   1e796:	85 e5       	ldi	r24, 0x55	; 85
   1e798:	c1 50       	subi	r28, 0x01	; 1
   1e79a:	de 4f       	sbci	r29, 0xFE	; 254
   1e79c:	88 83       	st	Y, r24
   1e79e:	cf 5f       	subi	r28, 0xFF	; 255
   1e7a0:	d1 40       	sbci	r29, 0x01	; 1
			BlockBuffer[SECTOR_SIZE_BYTES - 1] = 0xAA;
   1e7a2:	8a ea       	ldi	r24, 0xAA	; 170
   1e7a4:	c0 50       	subi	r28, 0x00	; 0
   1e7a6:	de 4f       	sbci	r29, 0xFE	; 254
   1e7a8:	88 83       	st	Y, r24
   1e7aa:	c0 50       	subi	r28, 0x00	; 0
   1e7ac:	d2 40       	sbci	r29, 0x02	; 2

			break;
   1e7ae:	a8 c0       	rjmp	.+336    	; 0x1e900 <VirtualFAT_ReadBlock+0x1c0>
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));

	switch (BlockNumber)
   1e7b0:	83 30       	cpi	r24, 0x03	; 3
   1e7b2:	91 05       	cpc	r25, r1
   1e7b4:	09 f0       	breq	.+2      	; 0x1e7b8 <VirtualFAT_ReadBlock+0x78>
   1e7b6:	44 c0       	rjmp	.+136    	; 0x1e840 <VirtualFAT_ReadBlock+0x100>
			UpdateFAT12ClusterChain(BlockBuffer, *EEPROMFileStartCluster, FILE_CLUSTERS(EEPROM_FILE_SIZE_BYTES));

			break;

		case DISK_BLOCK_RootFilesBlock:
			memcpy(BlockBuffer, FirmwareFileEntries, sizeof(FirmwareFileEntries));
   1e7b8:	80 ea       	ldi	r24, 0xA0	; 160
   1e7ba:	ec e4       	ldi	r30, 0x4C	; 76
   1e7bc:	f1 e0       	ldi	r31, 0x01	; 1
   1e7be:	d8 01       	movw	r26, r16
   1e7c0:	01 90       	ld	r0, Z+
   1e7c2:	0d 92       	st	X+, r0
   1e7c4:	8a 95       	dec	r24
   1e7c6:	e1 f7       	brne	.-8      	; 0x1e7c0 <VirtualFAT_ReadBlock+0x80>

			break;
   1e7c8:	9b c0       	rjmp	.+310    	; 0x1e900 <VirtualFAT_ReadBlock+0x1c0>
			break;

		case DISK_BLOCK_FATBlock1:
		case DISK_BLOCK_FATBlock2:
			/* Cluster 0: Media type/Reserved */
			UpdateFAT12ClusterEntry(BlockBuffer, 0, 0xF00 | BootBlock.MediaDescriptor);
   1e7ca:	48 ef       	ldi	r20, 0xF8	; 248
   1e7cc:	5f e0       	ldi	r21, 0x0F	; 15
   1e7ce:	60 e0       	ldi	r22, 0x00	; 0
   1e7d0:	70 e0       	ldi	r23, 0x00	; 0
   1e7d2:	c8 01       	movw	r24, r16
   1e7d4:	cc de       	rcall	.-616    	; 0x1e56e <UpdateFAT12ClusterEntry>
   1e7d6:	4f ef       	ldi	r20, 0xFF	; 255

			/* Cluster 1: Reserved */
			UpdateFAT12ClusterEntry(BlockBuffer, 1, 0xFFF);
   1e7d8:	5f e0       	ldi	r21, 0x0F	; 15
   1e7da:	61 e0       	ldi	r22, 0x01	; 1
   1e7dc:	70 e0       	ldi	r23, 0x00	; 0
   1e7de:	c8 01       	movw	r24, r16
   1e7e0:	c6 de       	rcall	.-628    	; 0x1e56e <UpdateFAT12ClusterEntry>
   1e7e2:	60 91 a6 01 	lds	r22, 0x01A6

			/* Cluster 2 onwards: Cluster chain of FLASH.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *FLASHFileStartCluster, FILE_CLUSTERS(FLASH_FILE_SIZE_BYTES));
   1e7e6:	70 91 a7 01 	lds	r23, 0x01A7
   1e7ea:	20 e0       	ldi	r18, 0x00	; 0
   1e7ec:	cb 01       	movw	r24, r22
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
   1e7ee:	01 96       	adiw	r24, 0x01	; 1
   1e7f0:	7c 01       	movw	r14, r24
   1e7f2:	2b 33       	cpi	r18, 0x3B	; 59
   1e7f4:	11 f0       	breq	.+4      	; 0x1e7fa <VirtualFAT_ReadBlock+0xba>
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
   1e7f6:	ac 01       	movw	r20, r24
   1e7f8:	02 c0       	rjmp	.+4      	; 0x1e7fe <VirtualFAT_ReadBlock+0xbe>
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;
   1e7fa:	4f ef       	ldi	r20, 0xFF	; 255
   1e7fc:	5f e0       	ldi	r21, 0x0F	; 15

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;
   1e7fe:	c8 01       	movw	r24, r16
   1e800:	cf 5f       	subi	r28, 0xFF	; 255

		UpdateFAT12ClusterEntry(FATTable, CurrentCluster, NextCluster);
   1e802:	dd 4f       	sbci	r29, 0xFD	; 253
   1e804:	28 83       	st	Y, r18
   1e806:	c1 50       	subi	r28, 0x01	; 1
   1e808:	d2 40       	sbci	r29, 0x02	; 2
   1e80a:	b1 de       	rcall	.-670    	; 0x1e56e <UpdateFAT12ClusterEntry>
   1e80c:	cf 5f       	subi	r28, 0xFF	; 255
   1e80e:	dd 4f       	sbci	r29, 0xFD	; 253
   1e810:	28 81       	ld	r18, Y
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
   1e812:	c1 50       	subi	r28, 0x01	; 1
   1e814:	d2 40       	sbci	r29, 0x02	; 2
   1e816:	2f 5f       	subi	r18, 0xFF	; 255
   1e818:	b7 01       	movw	r22, r14
   1e81a:	2c 33       	cpi	r18, 0x3C	; 60
   1e81c:	39 f7       	brne	.-50     	; 0x1e7ec <VirtualFAT_ReadBlock+0xac>
   1e81e:	60 91 e6 01 	lds	r22, 0x01E6
   1e822:	70 91 e7 01 	lds	r23, 0x01E7

			/* Cluster 2 onwards: Cluster chain of FLASH.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *FLASHFileStartCluster, FILE_CLUSTERS(FLASH_FILE_SIZE_BYTES));

			/* Cluster 2+n onwards: Cluster chain of EEPROM.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *EEPROMFileStartCluster, FILE_CLUSTERS(EEPROM_FILE_SIZE_BYTES));
   1e826:	7b 01       	movw	r14, r22
   1e828:	9f ef       	ldi	r25, 0xFF	; 255
   1e82a:	e9 1a       	sub	r14, r25
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;
   1e82c:	f9 0a       	sbc	r15, r25
   1e82e:	a7 01       	movw	r20, r14
   1e830:	c8 01       	movw	r24, r16
   1e832:	9d de       	rcall	.-710    	; 0x1e56e <UpdateFAT12ClusterEntry>

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;

		UpdateFAT12ClusterEntry(FATTable, CurrentCluster, NextCluster);
   1e834:	4f ef       	ldi	r20, 0xFF	; 255
   1e836:	5f e0       	ldi	r21, 0x0F	; 15
   1e838:	b7 01       	movw	r22, r14
   1e83a:	c8 01       	movw	r24, r16
   1e83c:	98 de       	rcall	.-720    	; 0x1e56e <UpdateFAT12ClusterEntry>
   1e83e:	60 c0       	rjmp	.+192    	; 0x1e900 <VirtualFAT_ReadBlock+0x1c0>
   1e840:	20 91 a6 01 	lds	r18, 0x01A6
   1e844:	30 91 a7 01 	lds	r19, 0x01A7
   1e848:	21 50       	subi	r18, 0x01	; 1
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e84a:	30 4c       	sbci	r19, 0xC0	; 192
   1e84c:	22 0f       	add	r18, r18
   1e84e:	33 1f       	adc	r19, r19
   1e850:	22 0f       	add	r18, r18
   1e852:	33 1f       	adc	r19, r19
   1e854:	82 17       	cp	r24, r18
   1e856:	93 07       	cpc	r25, r19
   1e858:	70 f4       	brcc	.+28     	; 0x1e876 <VirtualFAT_ReadBlock+0x136>
   1e85a:	20 91 e6 01 	lds	r18, 0x01E6
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e85e:	30 91 e7 01 	lds	r19, 0x01E7
   1e862:	21 50       	subi	r18, 0x01	; 1
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e864:	30 4c       	sbci	r19, 0xC0	; 192
   1e866:	22 0f       	add	r18, r18
   1e868:	33 1f       	adc	r19, r19
   1e86a:	22 0f       	add	r18, r18
   1e86c:	33 1f       	adc	r19, r19
   1e86e:	82 17       	cp	r24, r18
   1e870:	93 07       	cpc	r25, r19
   1e872:	40 f5       	brcc	.+80     	; 0x1e8c4 <VirtualFAT_ReadBlock+0x184>
   1e874:	45 c0       	rjmp	.+138    	; 0x1e900 <VirtualFAT_ReadBlock+0x1c0>
   1e876:	a9 01       	movw	r20, r18
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e878:	41 51       	subi	r20, 0x11	; 17
   1e87a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e87c:	48 17       	cp	r20, r24
   1e87e:	59 07       	cpc	r21, r25
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);
   1e880:	60 f3       	brcs	.-40     	; 0x1e85a <VirtualFAT_ReadBlock+0x11a>
   1e882:	ac 01       	movw	r20, r24
   1e884:	42 1b       	sub	r20, r18

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e886:	53 0b       	sbc	r21, r19
   1e888:	60 e0       	ldi	r22, 0x00	; 0
   1e88a:	70 e0       	ldi	r23, 0x00	; 0
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e88c:	b9 e0       	ldi	r27, 0x09	; 9
   1e88e:	44 0f       	add	r20, r20
   1e890:	55 1f       	adc	r21, r21
   1e892:	66 1f       	adc	r22, r22
   1e894:	77 1f       	adc	r23, r23
   1e896:	ba 95       	dec	r27
   1e898:	d1 f7       	brne	.-12     	; 0x1e88e <VirtualFAT_ReadBlock+0x14e>
   1e89a:	d8 01       	movw	r26, r16
   1e89c:	9e 01       	movw	r18, r28
   1e89e:	2f 5f       	subi	r18, 0xFF	; 255
   1e8a0:	3d 4f       	sbci	r19, 0xFD	; 253
   1e8a2:	6a 01       	movw	r12, r20
   1e8a4:	7b 01       	movw	r14, r22
   1e8a6:	ef ef       	ldi	r30, 0xFF	; 255
   1e8a8:	ce 1a       	sub	r12, r30
   1e8aa:	de 0a       	sbc	r13, r30
	{
		/* Read out the mapped block of data from the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		{
			#if (FLASHEND > 0xFFFF)
			  BlockBuffer[i] = pgm_read_byte_far(FlashAddress++);
   1e8ac:	ee 0a       	sbc	r14, r30
   1e8ae:	fe 0a       	sbc	r15, r30
   1e8b0:	6b bf       	out	0x3b, r22	; 59
   1e8b2:	fa 01       	movw	r30, r20
   1e8b4:	47 91       	elpm	r20, Z+
   1e8b6:	4d 93       	st	X+, r20
   1e8b8:	a2 17       	cp	r26, r18
   1e8ba:	b3 07       	cpc	r27, r19
   1e8bc:	71 f2       	breq	.-100    	; 0x1e85a <VirtualFAT_ReadBlock+0x11a>
   1e8be:	b7 01       	movw	r22, r14
   1e8c0:	a6 01       	movw	r20, r12
	#endif

	if (Read)
	{
		/* Read out the mapped block of data from the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e8c2:	ef cf       	rjmp	.-34     	; 0x1e8a2 <VirtualFAT_ReadBlock+0x162>
   1e8c4:	a9 01       	movw	r20, r18
   1e8c6:	49 5f       	subi	r20, 0xF9	; 249
		{
			#if (FLASHEND > 0xFFFF)
			  BlockBuffer[i] = pgm_read_byte_far(FlashAddress++);
   1e8c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1e8ca:	48 17       	cp	r20, r24
   1e8cc:	59 07       	cpc	r21, r25
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);
   1e8ce:	c0 f0       	brcs	.+48     	; 0x1e900 <VirtualFAT_ReadBlock+0x1c0>
   1e8d0:	7c 01       	movw	r14, r24
   1e8d2:	e2 1a       	sub	r14, r18

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e8d4:	f3 0a       	sbc	r15, r19
   1e8d6:	fe 2c       	mov	r15, r14
   1e8d8:	ee 24       	eor	r14, r14
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e8da:	ff 0c       	add	r15, r15
   1e8dc:	5e 01       	movw	r10, r28
   1e8de:	ff ef       	ldi	r31, 0xFF	; 255
   1e8e0:	af 1a       	sub	r10, r31
   1e8e2:	fd ef       	ldi	r31, 0xFD	; 253
   1e8e4:	bf 0a       	sbc	r11, r31
   1e8e6:	68 01       	movw	r12, r16
   1e8e8:	e0 1a       	sub	r14, r16
   1e8ea:	f1 0a       	sbc	r15, r17
   1e8ec:	c7 01       	movw	r24, r14
   1e8ee:	8c 0d       	add	r24, r12
   1e8f0:	9d 1d       	adc	r25, r13
   1e8f2:	5a de       	rcall	.-844    	; 0x1e5a8 <ReadEEPROMByte>
   1e8f4:	f6 01       	movw	r30, r12

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
   1e8f6:	81 93       	st	Z+, r24
   1e8f8:	6f 01       	movw	r12, r30
   1e8fa:	ea 15       	cp	r30, r10
   1e8fc:	fb 05       	cpc	r31, r11
   1e8fe:	b1 f7       	brne	.-20     	; 0x1e8ec <VirtualFAT_ReadBlock+0x1ac>
   1e900:	40 e0       	ldi	r20, 0x00	; 0
   1e902:	50 e0       	ldi	r21, 0x00	; 0
   1e904:	60 e0       	ldi	r22, 0x00	; 0
	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e906:	72 e0       	ldi	r23, 0x02	; 2
   1e908:	c8 01       	movw	r24, r16
   1e90a:	54 d0       	rcall	.+168    	; 0x1e9b4 <Endpoint_Write_Stream_LE>

			break;
	}

	/* Write the entire read block Buffer to the host */
	Endpoint_Write_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e90c:	80 91 e8 00 	lds	r24, 0x00E8
   1e910:	8e 77       	andi	r24, 0x7E	; 126
   1e912:	80 93 e8 00 	sts	0x00E8, r24
   1e916:	cf 5f       	subi	r28, 0xFF	; 255
   1e918:	dd 4f       	sbci	r29, 0xFD	; 253
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e91a:	0f b6       	in	r0, 0x3f	; 63
   1e91c:	f8 94       	cli
   1e91e:	de bf       	out	0x3e, r29	; 62
   1e920:	0f be       	out	0x3f, r0	; 63
   1e922:	cd bf       	out	0x3d, r28	; 61
	Endpoint_ClearIN();
}
   1e924:	df 91       	pop	r29
   1e926:	cf 91       	pop	r28
   1e928:	1f 91       	pop	r17
   1e92a:	0f 91       	pop	r16
   1e92c:	ff 90       	pop	r15
   1e92e:	ef 90       	pop	r14
   1e930:	df 90       	pop	r13
   1e932:	cf 90       	pop	r12
   1e934:	bf 90       	pop	r11
   1e936:	af 90       	pop	r10
   1e938:	08 95       	ret

0001e93a <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
   1e93a:	ef 92       	push	r14
   1e93c:	ff 92       	push	r15
   1e93e:	0f 93       	push	r16
   1e940:	1f 93       	push	r17
   1e942:	cf 93       	push	r28
   1e944:	df 93       	push	r29
   1e946:	8c 01       	movw	r16, r24
   1e948:	eb 01       	movw	r28, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
   1e94a:	8d d1       	rcall	.+794    	; 0x1ec66 <Endpoint_WaitUntilReady>
   1e94c:	81 11       	cpse	r24, r1
   1e94e:	2b c0       	rjmp	.+86     	; 0x1e9a6 <Endpoint_Null_Stream+0x6c>
   1e950:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
   1e952:	21 f0       	breq	.+8      	; 0x1e95c <Endpoint_Null_Stream+0x22>
   1e954:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
   1e956:	99 81       	ldd	r25, Y+1	; 0x01
   1e958:	08 1b       	sub	r16, r24
   1e95a:	19 0b       	sbc	r17, r25
   1e95c:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
   1e95e:	f1 2c       	mov	r15, r1
   1e960:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
   1e962:	11 05       	cpc	r17, r1
   1e964:	f9 f0       	breq	.+62     	; 0x1e9a4 <Endpoint_Null_Stream+0x6a>
   1e966:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e96a:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
   1e96c:	13 c0       	rjmp	.+38     	; 0x1e994 <Endpoint_Null_Stream+0x5a>
   1e96e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e972:	8e 77       	andi	r24, 0x7E	; 126
   1e974:	80 93 e8 00 	sts	0x00E8, r24
   1e978:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
   1e97a:	41 f0       	breq	.+16     	; 0x1e98c <Endpoint_Null_Stream+0x52>
   1e97c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
   1e97e:	99 81       	ldd	r25, Y+1	; 0x01
   1e980:	8e 0d       	add	r24, r14
   1e982:	9f 1d       	adc	r25, r15
   1e984:	99 83       	std	Y+1, r25	; 0x01
   1e986:	88 83       	st	Y, r24
   1e988:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
   1e98a:	0d c0       	rjmp	.+26     	; 0x1e9a6 <Endpoint_Null_Stream+0x6c>
   1e98c:	6c d1       	rcall	.+728    	; 0x1ec66 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
   1e98e:	88 23       	and	r24, r24
   1e990:	39 f3       	breq	.-50     	; 0x1e960 <Endpoint_Null_Stream+0x26>
   1e992:	09 c0       	rjmp	.+18     	; 0x1e9a6 <Endpoint_Null_Stream+0x6c>
   1e994:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e998:	01 50       	subi	r16, 0x01	; 1
   1e99a:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
   1e99c:	8f ef       	ldi	r24, 0xFF	; 255
   1e99e:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
   1e9a0:	f8 0a       	sbc	r15, r24
   1e9a2:	de cf       	rjmp	.-68     	; 0x1e960 <Endpoint_Null_Stream+0x26>
   1e9a4:	80 e0       	ldi	r24, 0x00	; 0
   1e9a6:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
   1e9a8:	cf 91       	pop	r28
}
   1e9aa:	1f 91       	pop	r17
   1e9ac:	0f 91       	pop	r16
   1e9ae:	ff 90       	pop	r15
   1e9b0:	ef 90       	pop	r14
   1e9b2:	08 95       	ret

0001e9b4 <Endpoint_Write_Stream_LE>:
   1e9b4:	cf 92       	push	r12
   1e9b6:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
   1e9b8:	ef 92       	push	r14
   1e9ba:	ff 92       	push	r15
   1e9bc:	0f 93       	push	r16
   1e9be:	1f 93       	push	r17
   1e9c0:	cf 93       	push	r28
   1e9c2:	df 93       	push	r29
   1e9c4:	7c 01       	movw	r14, r24
   1e9c6:	8b 01       	movw	r16, r22
   1e9c8:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
   1e9ca:	4d d1       	rcall	.+666    	; 0x1ec66 <Endpoint_WaitUntilReady>
   1e9cc:	81 11       	cpse	r24, r1
   1e9ce:	30 c0       	rjmp	.+96     	; 0x1ea30 <Endpoint_Write_Stream_LE+0x7c>
   1e9d0:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
   1e9d2:	31 f0       	breq	.+12     	; 0x1e9e0 <Endpoint_Write_Stream_LE+0x2c>
   1e9d4:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
   1e9d6:	99 81       	ldd	r25, Y+1	; 0x01
   1e9d8:	08 1b       	sub	r16, r24
   1e9da:	19 0b       	sbc	r17, r25
   1e9dc:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
   1e9de:	f9 1e       	adc	r15, r25
   1e9e0:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1e9e2:	d1 2c       	mov	r13, r1
   1e9e4:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
   1e9e6:	11 05       	cpc	r17, r1
   1e9e8:	11 f1       	breq	.+68     	; 0x1ea2e <Endpoint_Write_Stream_LE+0x7a>
   1e9ea:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e9ee:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
   1e9f0:	13 c0       	rjmp	.+38     	; 0x1ea18 <Endpoint_Write_Stream_LE+0x64>
   1e9f2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e9f6:	8e 77       	andi	r24, 0x7E	; 126
   1e9f8:	80 93 e8 00 	sts	0x00E8, r24
   1e9fc:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
   1e9fe:	41 f0       	breq	.+16     	; 0x1ea10 <Endpoint_Write_Stream_LE+0x5c>
   1ea00:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
   1ea02:	99 81       	ldd	r25, Y+1	; 0x01
   1ea04:	8c 0d       	add	r24, r12
   1ea06:	9d 1d       	adc	r25, r13
   1ea08:	99 83       	std	Y+1, r25	; 0x01
   1ea0a:	88 83       	st	Y, r24
   1ea0c:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
   1ea0e:	10 c0       	rjmp	.+32     	; 0x1ea30 <Endpoint_Write_Stream_LE+0x7c>
   1ea10:	2a d1       	rcall	.+596    	; 0x1ec66 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
   1ea12:	88 23       	and	r24, r24
   1ea14:	39 f3       	breq	.-50     	; 0x1e9e4 <Endpoint_Write_Stream_LE+0x30>
   1ea16:	0c c0       	rjmp	.+24     	; 0x1ea30 <Endpoint_Write_Stream_LE+0x7c>
   1ea18:	f7 01       	movw	r30, r14
   1ea1a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
   1ea1c:	7f 01       	movw	r14, r30
   1ea1e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ea22:	01 50       	subi	r16, 0x01	; 1
   1ea24:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
   1ea26:	ff ef       	ldi	r31, 0xFF	; 255
   1ea28:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
   1ea2a:	df 0a       	sbc	r13, r31
   1ea2c:	db cf       	rjmp	.-74     	; 0x1e9e4 <Endpoint_Write_Stream_LE+0x30>
   1ea2e:	80 e0       	ldi	r24, 0x00	; 0
   1ea30:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
   1ea32:	cf 91       	pop	r28
}
   1ea34:	1f 91       	pop	r17
   1ea36:	0f 91       	pop	r16
   1ea38:	ff 90       	pop	r15
   1ea3a:	ef 90       	pop	r14
   1ea3c:	df 90       	pop	r13
   1ea3e:	cf 90       	pop	r12
   1ea40:	08 95       	ret

0001ea42 <Endpoint_Read_Stream_LE>:
   1ea42:	cf 92       	push	r12
   1ea44:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
   1ea46:	ef 92       	push	r14
   1ea48:	ff 92       	push	r15
   1ea4a:	0f 93       	push	r16
   1ea4c:	1f 93       	push	r17
   1ea4e:	cf 93       	push	r28
   1ea50:	df 93       	push	r29
   1ea52:	7c 01       	movw	r14, r24
   1ea54:	8b 01       	movw	r16, r22
   1ea56:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
   1ea58:	06 d1       	rcall	.+524    	; 0x1ec66 <Endpoint_WaitUntilReady>
   1ea5a:	81 11       	cpse	r24, r1
   1ea5c:	30 c0       	rjmp	.+96     	; 0x1eabe <Endpoint_Read_Stream_LE+0x7c>
   1ea5e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
   1ea60:	31 f0       	breq	.+12     	; 0x1ea6e <Endpoint_Read_Stream_LE+0x2c>
   1ea62:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
   1ea64:	99 81       	ldd	r25, Y+1	; 0x01
   1ea66:	08 1b       	sub	r16, r24
   1ea68:	19 0b       	sbc	r17, r25
   1ea6a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
   1ea6c:	f9 1e       	adc	r15, r25
   1ea6e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1ea70:	d1 2c       	mov	r13, r1
   1ea72:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
   1ea74:	11 05       	cpc	r17, r1
   1ea76:	11 f1       	breq	.+68     	; 0x1eabc <Endpoint_Read_Stream_LE+0x7a>
   1ea78:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1ea7c:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
   1ea7e:	13 c0       	rjmp	.+38     	; 0x1eaa6 <Endpoint_Read_Stream_LE+0x64>
   1ea80:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ea84:	8b 77       	andi	r24, 0x7B	; 123
   1ea86:	80 93 e8 00 	sts	0x00E8, r24
   1ea8a:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
   1ea8c:	41 f0       	breq	.+16     	; 0x1ea9e <Endpoint_Read_Stream_LE+0x5c>
   1ea8e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
   1ea90:	99 81       	ldd	r25, Y+1	; 0x01
   1ea92:	8c 0d       	add	r24, r12
   1ea94:	9d 1d       	adc	r25, r13
   1ea96:	99 83       	std	Y+1, r25	; 0x01
   1ea98:	88 83       	st	Y, r24
   1ea9a:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
   1ea9c:	10 c0       	rjmp	.+32     	; 0x1eabe <Endpoint_Read_Stream_LE+0x7c>
   1ea9e:	e3 d0       	rcall	.+454    	; 0x1ec66 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
   1eaa0:	88 23       	and	r24, r24
   1eaa2:	39 f3       	breq	.-50     	; 0x1ea72 <Endpoint_Read_Stream_LE+0x30>
   1eaa4:	0c c0       	rjmp	.+24     	; 0x1eabe <Endpoint_Read_Stream_LE+0x7c>
   1eaa6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1eaaa:	f7 01       	movw	r30, r14
   1eaac:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
   1eaae:	7f 01       	movw	r14, r30
   1eab0:	01 50       	subi	r16, 0x01	; 1
   1eab2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
   1eab4:	ff ef       	ldi	r31, 0xFF	; 255
   1eab6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
   1eab8:	df 0a       	sbc	r13, r31
   1eaba:	db cf       	rjmp	.-74     	; 0x1ea72 <Endpoint_Read_Stream_LE+0x30>
   1eabc:	80 e0       	ldi	r24, 0x00	; 0
   1eabe:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
   1eac0:	cf 91       	pop	r28
}
   1eac2:	1f 91       	pop	r17
   1eac4:	0f 91       	pop	r16
   1eac6:	ff 90       	pop	r15
   1eac8:	ef 90       	pop	r14
   1eaca:	df 90       	pop	r13
   1eacc:	cf 90       	pop	r12
   1eace:	08 95       	ret

0001ead0 <Endpoint_Write_Control_Stream_LE>:
   1ead0:	20 91 89 02 	lds	r18, 0x0289
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1ead4:	30 91 8a 02 	lds	r19, 0x028A
   1ead8:	26 17       	cp	r18, r22
   1eada:	37 07       	cpc	r19, r23
   1eadc:	48 f0       	brcs	.+18     	; 0x1eaf0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1eade:	61 15       	cp	r22, r1
   1eae0:	71 05       	cpc	r23, r1
   1eae2:	39 f4       	brne	.+14     	; 0x1eaf2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1eae4:	20 91 e8 00 	lds	r18, 0x00E8
   1eae8:	2e 77       	andi	r18, 0x7E	; 126
   1eaea:	20 93 e8 00 	sts	0x00E8, r18
   1eaee:	01 c0       	rjmp	.+2      	; 0x1eaf2 <Endpoint_Write_Control_Stream_LE+0x22>
   1eaf0:	b9 01       	movw	r22, r18
   1eaf2:	fc 01       	movw	r30, r24
   1eaf4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1eaf6:	61 15       	cp	r22, r1
   1eaf8:	71 05       	cpc	r23, r1
   1eafa:	91 f1       	breq	.+100    	; 0x1eb60 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1eafc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1eafe:	88 23       	and	r24, r24
   1eb00:	e1 f1       	breq	.+120    	; 0x1eb7a <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1eb02:	85 30       	cpi	r24, 0x05	; 5
   1eb04:	e1 f1       	breq	.+120    	; 0x1eb7e <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eb06:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1eb0a:	83 fd       	sbrc	r24, 3
   1eb0c:	3a c0       	rjmp	.+116    	; 0x1eb82 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1eb0e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1eb12:	82 ff       	sbrs	r24, 2
   1eb14:	06 c0       	rjmp	.+12     	; 0x1eb22 <Endpoint_Write_Control_Stream_LE+0x52>
   1eb16:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1eb1a:	82 ff       	sbrs	r24, 2
   1eb1c:	24 c0       	rjmp	.+72     	; 0x1eb66 <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1eb1e:	80 e0       	ldi	r24, 0x00	; 0
   1eb20:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eb22:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
   1eb26:	80 ff       	sbrs	r24, 0
   1eb28:	e6 cf       	rjmp	.-52     	; 0x1eaf6 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1eb2a:	80 91 f2 00 	lds	r24, 0x00F2
   1eb2e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1eb32:	61 15       	cp	r22, r1
   1eb34:	71 05       	cpc	r23, r1
   1eb36:	51 f0       	breq	.+20     	; 0x1eb4c <Endpoint_Write_Control_Stream_LE+0x7c>
   1eb38:	88 30       	cpi	r24, 0x08	; 8
   1eb3a:	91 05       	cpc	r25, r1
   1eb3c:	38 f4       	brcc	.+14     	; 0x1eb4c <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1eb3e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1eb40:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1eb44:	61 50       	subi	r22, 0x01	; 1
   1eb46:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1eb48:	01 96       	adiw	r24, 0x01	; 1
   1eb4a:	f3 cf       	rjmp	.-26     	; 0x1eb32 <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1eb4c:	21 e0       	ldi	r18, 0x01	; 1
   1eb4e:	08 97       	sbiw	r24, 0x08	; 8
   1eb50:	09 f0       	breq	.+2      	; 0x1eb54 <Endpoint_Write_Control_Stream_LE+0x84>
   1eb52:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1eb54:	80 91 e8 00 	lds	r24, 0x00E8
   1eb58:	8e 77       	andi	r24, 0x7E	; 126
   1eb5a:	80 93 e8 00 	sts	0x00E8, r24
   1eb5e:	cb cf       	rjmp	.-106    	; 0x1eaf6 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1eb60:	21 11       	cpse	r18, r1
   1eb62:	cc cf       	rjmp	.-104    	; 0x1eafc <Endpoint_Write_Control_Stream_LE+0x2c>
   1eb64:	d8 cf       	rjmp	.-80     	; 0x1eb16 <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1eb66:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1eb68:	88 23       	and	r24, r24
   1eb6a:	39 f0       	breq	.+14     	; 0x1eb7a <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1eb6c:	85 30       	cpi	r24, 0x05	; 5
   1eb6e:	39 f0       	breq	.+14     	; 0x1eb7e <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eb70:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1eb74:	83 ff       	sbrs	r24, 3
   1eb76:	cf cf       	rjmp	.-98     	; 0x1eb16 <Endpoint_Write_Control_Stream_LE+0x46>
   1eb78:	04 c0       	rjmp	.+8      	; 0x1eb82 <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1eb7a:	82 e0       	ldi	r24, 0x02	; 2
   1eb7c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1eb7e:	83 e0       	ldi	r24, 0x03	; 3
   1eb80:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1eb82:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1eb84:	08 95       	ret

0001eb86 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eb86:	8f 70       	andi	r24, 0x0F	; 15
   1eb88:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1eb8c:	eb ee       	ldi	r30, 0xEB	; 235
   1eb8e:	f0 e0       	ldi	r31, 0x00	; 0
   1eb90:	80 81       	ld	r24, Z
   1eb92:	81 60       	ori	r24, 0x01	; 1
   1eb94:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1eb96:	ed ee       	ldi	r30, 0xED	; 237
   1eb98:	f0 e0       	ldi	r31, 0x00	; 0
   1eb9a:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1eb9c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1eba0:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1eba2:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1eba6:	88 1f       	adc	r24, r24
   1eba8:	88 27       	eor	r24, r24
   1ebaa:	88 1f       	adc	r24, r24
   1ebac:	08 95       	ret

0001ebae <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
   1ebae:	0f 93       	push	r16
   1ebb0:	1f 93       	push	r17
   1ebb2:	cf 93       	push	r28
   1ebb4:	df 93       	push	r29
   1ebb6:	06 2f       	mov	r16, r22
   1ebb8:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
   1ebba:	10 e0       	ldi	r17, 0x00	; 0
   1ebbc:	10 17       	cp	r17, r16
   1ebbe:	71 f1       	breq	.+92     	; 0x1ec1c <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
   1ebc0:	98 81       	ld	r25, Y
   1ebc2:	99 23       	and	r25, r25
   1ebc4:	41 f1       	breq	.+80     	; 0x1ec16 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
   1ebc6:	2c 81       	ldd	r18, Y+4	; 0x04
   1ebc8:	e9 81       	ldd	r30, Y+1	; 0x01
   1ebca:	fa 81       	ldd	r31, Y+2	; 0x02
   1ebcc:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
   1ebce:	89 2f       	mov	r24, r25
   1ebd0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
   1ebd2:	87 30       	cpi	r24, 0x07	; 7
   1ebd4:	10 f0       	brcs	.+4      	; 0x1ebda <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
   1ebd6:	80 e0       	ldi	r24, 0x00	; 0
   1ebd8:	22 c0       	rjmp	.+68     	; 0x1ec1e <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ebda:	22 30       	cpi	r18, 0x02	; 2
   1ebdc:	10 f0       	brcs	.+4      	; 0x1ebe2 <Endpoint_ConfigureEndpointTable+0x34>
   1ebde:	56 e0       	ldi	r21, 0x06	; 6
   1ebe0:	01 c0       	rjmp	.+2      	; 0x1ebe4 <Endpoint_ConfigureEndpointTable+0x36>
   1ebe2:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
   1ebe4:	28 e0       	ldi	r18, 0x08	; 8
   1ebe6:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
   1ebe8:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
   1ebea:	2e 17       	cp	r18, r30
   1ebec:	3f 07       	cpc	r19, r31
   1ebee:	20 f4       	brcc	.+8      	; 0x1ebf8 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
   1ebf0:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
   1ebf2:	22 0f       	add	r18, r18
   1ebf4:	33 1f       	adc	r19, r19
   1ebf6:	f9 cf       	rjmp	.-14     	; 0x1ebea <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
   1ebf8:	42 95       	swap	r20
   1ebfa:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ebfc:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
   1ebfe:	69 2f       	mov	r22, r25
   1ec00:	66 1f       	adc	r22, r22
   1ec02:	66 27       	eor	r22, r22
   1ec04:	66 1f       	adc	r22, r22
   1ec06:	90 e4       	ldi	r25, 0x40	; 64
   1ec08:	79 9f       	mul	r23, r25
   1ec0a:	90 01       	movw	r18, r0
   1ec0c:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ec0e:	62 2b       	or	r22, r18
   1ec10:	ba df       	rcall	.-140    	; 0x1eb86 <Endpoint_ConfigureEndpoint_Prv>
   1ec12:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
   1ec14:	01 f3       	breq	.-64     	; 0x1ebd6 <Endpoint_ConfigureEndpointTable+0x28>
   1ec16:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
   1ec18:	25 96       	adiw	r28, 0x05	; 5
   1ec1a:	d0 cf       	rjmp	.-96     	; 0x1ebbc <Endpoint_ConfigureEndpointTable+0xe>
   1ec1c:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
   1ec1e:	df 91       	pop	r29
}
   1ec20:	cf 91       	pop	r28
   1ec22:	1f 91       	pop	r17
   1ec24:	0f 91       	pop	r16
   1ec26:	08 95       	ret

0001ec28 <Endpoint_ClearStatusStage>:
   1ec28:	80 91 83 02 	lds	r24, 0x0283
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ec2c:	87 fd       	sbrc	r24, 7
   1ec2e:	05 c0       	rjmp	.+10     	; 0x1ec3a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec30:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ec34:	80 ff       	sbrs	r24, 0
   1ec36:	0d c0       	rjmp	.+26     	; 0x1ec52 <Endpoint_ClearStatusStage+0x2a>
   1ec38:	10 c0       	rjmp	.+32     	; 0x1ec5a <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ec3a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ec3e:	82 fd       	sbrc	r24, 2
   1ec40:	04 c0       	rjmp	.+8      	; 0x1ec4a <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ec42:	8e b3       	in	r24, 0x1e	; 30
   1ec44:	81 11       	cpse	r24, r1
   1ec46:	f9 cf       	rjmp	.-14     	; 0x1ec3a <Endpoint_ClearStatusStage+0x12>
   1ec48:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ec4a:	80 91 e8 00 	lds	r24, 0x00E8
   1ec4e:	8b 77       	andi	r24, 0x7B	; 123
   1ec50:	07 c0       	rjmp	.+14     	; 0x1ec60 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ec52:	8e b3       	in	r24, 0x1e	; 30
   1ec54:	81 11       	cpse	r24, r1
   1ec56:	ec cf       	rjmp	.-40     	; 0x1ec30 <Endpoint_ClearStatusStage+0x8>
   1ec58:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ec5a:	80 91 e8 00 	lds	r24, 0x00E8
   1ec5e:	8e 77       	andi	r24, 0x7E	; 126
   1ec60:	80 93 e8 00 	sts	0x00E8, r24
   1ec64:	08 95       	ret

0001ec66 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   1ec66:	80 91 e4 00 	lds	r24, 0x00E4
   1ec6a:	90 91 e5 00 	lds	r25, 0x00E5
   1ec6e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ec70:	20 91 ec 00 	lds	r18, 0x00EC
   1ec74:	20 ff       	sbrs	r18, 0
   1ec76:	20 c0       	rjmp	.+64     	; 0x1ecb8 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec78:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   1ec7c:	20 fd       	sbrc	r18, 0
   1ec7e:	20 c0       	rjmp	.+64     	; 0x1ecc0 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ec80:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ec82:	22 23       	and	r18, r18
   1ec84:	89 f0       	breq	.+34     	; 0x1eca8 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ec86:	25 30       	cpi	r18, 0x05	; 5
   1ec88:	89 f0       	breq	.+34     	; 0x1ecac <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ec8a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   1ec8e:	25 fd       	sbrc	r18, 5
   1ec90:	0f c0       	rjmp	.+30     	; 0x1ecb0 <Endpoint_WaitUntilReady+0x4a>
   1ec92:	20 91 e4 00 	lds	r18, 0x00E4
   1ec96:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   1ec9a:	28 17       	cp	r18, r24
   1ec9c:	39 07       	cpc	r19, r25
   1ec9e:	41 f3       	breq	.-48     	; 0x1ec70 <Endpoint_WaitUntilReady+0xa>
   1eca0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   1eca2:	41 f0       	breq	.+16     	; 0x1ecb4 <Endpoint_WaitUntilReady+0x4e>
   1eca4:	c9 01       	movw	r24, r18
   1eca6:	e4 cf       	rjmp	.-56     	; 0x1ec70 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   1eca8:	82 e0       	ldi	r24, 0x02	; 2
   1ecaa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   1ecac:	83 e0       	ldi	r24, 0x03	; 3
   1ecae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   1ecb0:	81 e0       	ldi	r24, 0x01	; 1
   1ecb2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
   1ecb4:	84 e0       	ldi	r24, 0x04	; 4
   1ecb6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ecb8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   1ecbc:	22 ff       	sbrs	r18, 2
   1ecbe:	e0 cf       	rjmp	.-64     	; 0x1ec80 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   1ecc0:	80 e0       	ldi	r24, 0x00	; 0
   1ecc2:	08 95       	ret

0001ecc4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1ecc4:	0f 93       	push	r16
   1ecc6:	1f 93       	push	r17
   1ecc8:	cf 93       	push	r28
   1ecca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1eccc:	49 d0       	rcall	.+146    	; 0x1ed60 <USB_INT_DisableAllInterrupts>
   1ecce:	50 d0       	rcall	.+160    	; 0x1ed70 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ecd0:	c8 ed       	ldi	r28, 0xD8	; 216
   1ecd2:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1ecd4:	88 81       	ld	r24, Y
   1ecd6:	8f 77       	andi	r24, 0x7F	; 127
   1ecd8:	88 83       	st	Y, r24
   1ecda:	88 81       	ld	r24, Y
   1ecdc:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1ecde:	88 83       	st	Y, r24
   1ece0:	88 81       	ld	r24, Y
   1ece2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ece4:	88 83       	st	Y, r24
   1ece6:	e7 ed       	ldi	r30, 0xD7	; 215
   1ece8:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ecea:	80 81       	ld	r24, Z
   1ecec:	80 68       	ori	r24, 0x80	; 128
   1ecee:	80 83       	st	Z, r24
   1ecf0:	19 bc       	out	0x29, r1	; 41
   1ecf2:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ecf4:	10 92 81 02 	sts	0x0281, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1ecf8:	00 ee       	ldi	r16, 0xE0	; 224
   1ecfa:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ecfc:	f8 01       	movw	r30, r16
   1ecfe:	80 81       	ld	r24, Z
   1ed00:	8b 7f       	andi	r24, 0xFB	; 251
   1ed02:	80 83       	st	Z, r24
   1ed04:	88 81       	ld	r24, Y
   1ed06:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ed08:	88 83       	st	Y, r24
   1ed0a:	42 e0       	ldi	r20, 0x02	; 2
   1ed0c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ed0e:	80 e0       	ldi	r24, 0x00	; 0
   1ed10:	3a df       	rcall	.-396    	; 0x1eb86 <Endpoint_ConfigureEndpoint_Prv>
   1ed12:	e1 ee       	ldi	r30, 0xE1	; 225
   1ed14:	f0 e0       	ldi	r31, 0x00	; 0
   1ed16:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ed18:	8e 7f       	andi	r24, 0xFE	; 254
   1ed1a:	80 83       	st	Z, r24
   1ed1c:	e2 ee       	ldi	r30, 0xE2	; 226
   1ed1e:	f0 e0       	ldi	r31, 0x00	; 0
   1ed20:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ed22:	81 60       	ori	r24, 0x01	; 1
   1ed24:	80 83       	st	Z, r24
   1ed26:	80 81       	ld	r24, Z
   1ed28:	88 60       	ori	r24, 0x08	; 8
   1ed2a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1ed2c:	f8 01       	movw	r30, r16
   1ed2e:	80 81       	ld	r24, Z
   1ed30:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1ed32:	80 83       	st	Z, r24
   1ed34:	88 81       	ld	r24, Y
   1ed36:	80 61       	ori	r24, 0x10	; 16
   1ed38:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1ed3a:	df 91       	pop	r29
   1ed3c:	cf 91       	pop	r28
   1ed3e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1ed40:	0f 91       	pop	r16
   1ed42:	08 95       	ret

0001ed44 <USB_Init>:
   1ed44:	e8 ed       	ldi	r30, 0xD8	; 216
   1ed46:	f0 e0       	ldi	r31, 0x00	; 0
   1ed48:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1ed4a:	8f 7e       	andi	r24, 0xEF	; 239
   1ed4c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1ed4e:	e7 ed       	ldi	r30, 0xD7	; 215
   1ed50:	f0 e0       	ldi	r31, 0x00	; 0
   1ed52:	80 81       	ld	r24, Z
   1ed54:	81 60       	ori	r24, 0x01	; 1
   1ed56:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1ed58:	81 e0       	ldi	r24, 0x01	; 1
   1ed5a:	80 93 82 02 	sts	0x0282, r24

	USB_ResetInterface();
   1ed5e:	b2 cf       	rjmp	.-156    	; 0x1ecc4 <USB_ResetInterface>

0001ed60 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1ed60:	e8 ed       	ldi	r30, 0xD8	; 216
   1ed62:	f0 e0       	ldi	r31, 0x00	; 0
   1ed64:	80 81       	ld	r24, Z
   1ed66:	8c 7f       	andi	r24, 0xFC	; 252
   1ed68:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1ed6a:	10 92 e2 00 	sts	0x00E2, r1
   1ed6e:	08 95       	ret

0001ed70 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1ed70:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1ed74:	10 92 e1 00 	sts	0x00E1, r1
   1ed78:	08 95       	ret

0001ed7a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1ed7a:	1f 92       	push	r1
   1ed7c:	0f 92       	push	r0
   1ed7e:	0f b6       	in	r0, 0x3f	; 63
   1ed80:	0f 92       	push	r0
   1ed82:	11 24       	eor	r1, r1
   1ed84:	0b b6       	in	r0, 0x3b	; 59
   1ed86:	0f 92       	push	r0
   1ed88:	2f 93       	push	r18
   1ed8a:	3f 93       	push	r19
   1ed8c:	4f 93       	push	r20
   1ed8e:	5f 93       	push	r21
   1ed90:	6f 93       	push	r22
   1ed92:	7f 93       	push	r23
   1ed94:	8f 93       	push	r24
   1ed96:	9f 93       	push	r25
   1ed98:	af 93       	push	r26
   1ed9a:	bf 93       	push	r27
   1ed9c:	ef 93       	push	r30
   1ed9e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eda0:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eda4:	80 ff       	sbrs	r24, 0
   1eda6:	1b c0       	rjmp	.+54     	; 0x1edde <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eda8:	80 91 d8 00 	lds	r24, 0x00D8
   1edac:	80 ff       	sbrs	r24, 0
   1edae:	17 c0       	rjmp	.+46     	; 0x1edde <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1edb0:	80 91 da 00 	lds	r24, 0x00DA
   1edb4:	8e 7f       	andi	r24, 0xFE	; 254
   1edb6:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1edba:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1edbe:	80 ff       	sbrs	r24, 0
   1edc0:	0b c0       	rjmp	.+22     	; 0x1edd8 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1edc2:	8c e0       	ldi	r24, 0x0C	; 12
   1edc4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1edc6:	8e e0       	ldi	r24, 0x0E	; 14
   1edc8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1edca:	09 b4       	in	r0, 0x29	; 41
   1edcc:	00 fe       	sbrs	r0, 0
   1edce:	fd cf       	rjmp	.-6      	; 0x1edca <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1edd0:	81 e0       	ldi	r24, 0x01	; 1
   1edd2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1edd4:	f5 d9       	rcall	.-3094   	; 0x1e1c0 <EVENT_USB_Device_Connect>
   1edd6:	03 c0       	rjmp	.+6      	; 0x1edde <__vector_10+0x64>
   1edd8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1edda:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1eddc:	f3 d9       	rcall	.-3098   	; 0x1e1c4 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
   1edde:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1ede2:	80 ff       	sbrs	r24, 0
   1ede4:	17 c0       	rjmp	.+46     	; 0x1ee14 <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1ede6:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1edea:	80 ff       	sbrs	r24, 0
   1edec:	13 c0       	rjmp	.+38     	; 0x1ee14 <__vector_10+0x9a>
   1edee:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1edf2:	8e 7f       	andi	r24, 0xFE	; 254
   1edf4:	80 93 e2 00 	sts	0x00E2, r24
   1edf8:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1edfc:	80 61       	ori	r24, 0x10	; 16
   1edfe:	80 93 e2 00 	sts	0x00E2, r24
   1ee02:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1ee06:	80 62       	ori	r24, 0x20	; 32
   1ee08:	80 93 d8 00 	sts	0x00D8, r24
   1ee0c:	19 bc       	out	0x29, r1	; 41
   1ee0e:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ee10:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1ee12:	b0 d1       	rcall	.+864    	; 0x1f174 <USB_Event_Stub>
   1ee14:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1ee18:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1ee1a:	2e c0       	rjmp	.+92     	; 0x1ee78 <__vector_10+0xfe>
   1ee1c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1ee20:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1ee22:	2a c0       	rjmp	.+84     	; 0x1ee78 <__vector_10+0xfe>
   1ee24:	8c e0       	ldi	r24, 0x0C	; 12
   1ee26:	89 bd       	out	0x29, r24	; 41
   1ee28:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ee2a:	89 bd       	out	0x29, r24	; 41
   1ee2c:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ee2e:	00 fe       	sbrs	r0, 0
   1ee30:	fd cf       	rjmp	.-6      	; 0x1ee2c <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1ee32:	80 91 d8 00 	lds	r24, 0x00D8
   1ee36:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ee38:	80 93 d8 00 	sts	0x00D8, r24
   1ee3c:	80 91 e1 00 	lds	r24, 0x00E1
   1ee40:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1ee42:	80 93 e1 00 	sts	0x00E1, r24
   1ee46:	80 91 e2 00 	lds	r24, 0x00E2
   1ee4a:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ee4c:	80 93 e2 00 	sts	0x00E2, r24
   1ee50:	80 91 e2 00 	lds	r24, 0x00E2
   1ee54:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ee56:	80 93 e2 00 	sts	0x00E2, r24
   1ee5a:	80 91 81 02 	lds	r24, 0x0281
   1ee5e:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ee60:	11 f0       	breq	.+4      	; 0x1ee66 <__vector_10+0xec>
   1ee62:	84 e0       	ldi	r24, 0x04	; 4
   1ee64:	07 c0       	rjmp	.+14     	; 0x1ee74 <__vector_10+0xfa>
   1ee66:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
   1ee6a:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee6c:	02 c0       	rjmp	.+4      	; 0x1ee72 <__vector_10+0xf8>
   1ee6e:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1ee70:	01 c0       	rjmp	.+2      	; 0x1ee74 <__vector_10+0xfa>
   1ee72:	81 e0       	ldi	r24, 0x01	; 1
   1ee74:	8e bb       	out	0x1e, r24	; 30
   1ee76:	7e d1       	rcall	.+764    	; 0x1f174 <USB_Event_Stub>
   1ee78:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ee7c:	83 ff       	sbrs	r24, 3
   1ee7e:	26 c0       	rjmp	.+76     	; 0x1eecc <__vector_10+0x152>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ee80:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ee84:	83 ff       	sbrs	r24, 3
   1ee86:	22 c0       	rjmp	.+68     	; 0x1eecc <__vector_10+0x152>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ee88:	80 91 e1 00 	lds	r24, 0x00E1
   1ee8c:	87 7f       	andi	r24, 0xF7	; 247
   1ee8e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ee92:	82 e0       	ldi	r24, 0x02	; 2
   1ee94:	8e bb       	out	0x1e, r24	; 30
   1ee96:	10 92 81 02 	sts	0x0281, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ee9a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1ee9e:	8e 7f       	andi	r24, 0xFE	; 254
   1eea0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1eea4:	80 91 e2 00 	lds	r24, 0x00E2
   1eea8:	8e 7f       	andi	r24, 0xFE	; 254
   1eeaa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eeae:	80 91 e2 00 	lds	r24, 0x00E2
   1eeb2:	80 61       	ori	r24, 0x10	; 16
   1eeb4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eeb8:	42 e0       	ldi	r20, 0x02	; 2
   1eeba:	60 e0       	ldi	r22, 0x00	; 0
   1eebc:	80 e0       	ldi	r24, 0x00	; 0
   1eebe:	63 de       	rcall	.-826    	; 0x1eb86 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1eec0:	80 91 f0 00 	lds	r24, 0x00F0
   1eec4:	88 60       	ori	r24, 0x08	; 8
   1eec6:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1eeca:	54 d1       	rcall	.+680    	; 0x1f174 <USB_Event_Stub>
   1eecc:	ff 91       	pop	r31
   1eece:	ef 91       	pop	r30
   1eed0:	bf 91       	pop	r27
   1eed2:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1eed4:	9f 91       	pop	r25
   1eed6:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1eed8:	7f 91       	pop	r23
   1eeda:	6f 91       	pop	r22
   1eedc:	5f 91       	pop	r21
   1eede:	4f 91       	pop	r20
   1eee0:	3f 91       	pop	r19
   1eee2:	2f 91       	pop	r18
   1eee4:	0f 90       	pop	r0
   1eee6:	0b be       	out	0x3b, r0	; 59
   1eee8:	0f 90       	pop	r0
   1eeea:	0f be       	out	0x3f, r0	; 63
   1eeec:	0f 90       	pop	r0
   1eeee:	1f 90       	pop	r1
   1eef0:	18 95       	reti

0001eef2 <__vector_11>:
   1eef2:	1f 92       	push	r1
   1eef4:	0f 92       	push	r0
   1eef6:	0f b6       	in	r0, 0x3f	; 63
   1eef8:	0f 92       	push	r0
   1eefa:	11 24       	eor	r1, r1
   1eefc:	0b b6       	in	r0, 0x3b	; 59

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
   1eefe:	0f 92       	push	r0
   1ef00:	2f 93       	push	r18
   1ef02:	3f 93       	push	r19
   1ef04:	4f 93       	push	r20
   1ef06:	5f 93       	push	r21
   1ef08:	6f 93       	push	r22
   1ef0a:	7f 93       	push	r23
   1ef0c:	8f 93       	push	r24
   1ef0e:	9f 93       	push	r25
   1ef10:	af 93       	push	r26
   1ef12:	bf 93       	push	r27
   1ef14:	cf 93       	push	r28
   1ef16:	ef 93       	push	r30
   1ef18:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ef1a:	c0 91 e9 00 	lds	r28, 0x00E9
   1ef1e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ef20:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ef24:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
   1ef28:	80 91 f0 00 	lds	r24, 0x00F0
   1ef2c:	87 7f       	andi	r24, 0xF7	; 247
   1ef2e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1ef32:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
   1ef34:	1d d0       	rcall	.+58     	; 0x1ef70 <USB_Device_ProcessControlRequest>
   1ef36:	10 92 e9 00 	sts	0x00E9, r1
   1ef3a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1ef3e:	88 60       	ori	r24, 0x08	; 8
   1ef40:	80 93 f0 00 	sts	0x00F0, r24
   1ef44:	c0 93 e9 00 	sts	0x00E9, r28
   1ef48:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
   1ef4a:	ef 91       	pop	r30
   1ef4c:	cf 91       	pop	r28
   1ef4e:	bf 91       	pop	r27
   1ef50:	af 91       	pop	r26
   1ef52:	9f 91       	pop	r25
   1ef54:	8f 91       	pop	r24
   1ef56:	7f 91       	pop	r23
   1ef58:	6f 91       	pop	r22
   1ef5a:	5f 91       	pop	r21
   1ef5c:	4f 91       	pop	r20
   1ef5e:	3f 91       	pop	r19
   1ef60:	2f 91       	pop	r18
   1ef62:	0f 90       	pop	r0
   1ef64:	0b be       	out	0x3b, r0	; 59
   1ef66:	0f 90       	pop	r0
   1ef68:	0f be       	out	0x3f, r0	; 63
   1ef6a:	0f 90       	pop	r0
   1ef6c:	1f 90       	pop	r1
   1ef6e:	18 95       	reti

0001ef70 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ef70:	1f 93       	push	r17
   1ef72:	cf 93       	push	r28
   1ef74:	df 93       	push	r29
   1ef76:	00 d0       	rcall	.+0      	; 0x1ef78 <USB_Device_ProcessControlRequest+0x8>
   1ef78:	cd b7       	in	r28, 0x3d	; 61
   1ef7a:	de b7       	in	r29, 0x3e	; 62
   1ef7c:	e3 e8       	ldi	r30, 0x83	; 131
   1ef7e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ef80:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ef84:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ef86:	82 e0       	ldi	r24, 0x02	; 2
   1ef88:	eb 38       	cpi	r30, 0x8B	; 139
   1ef8a:	f8 07       	cpc	r31, r24
   1ef8c:	c9 f7       	brne	.-14     	; 0x1ef80 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ef8e:	26 d9       	rcall	.-3508   	; 0x1e1dc <EVENT_USB_Device_ControlRequest>
   1ef90:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ef94:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1ef96:	da c0       	rjmp	.+436    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1ef98:	90 91 83 02 	lds	r25, 0x0283
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ef9c:	80 91 84 02 	lds	r24, 0x0284

		switch (USB_ControlRequest.bRequest)
   1efa0:	85 30       	cpi	r24, 0x05	; 5
   1efa2:	09 f4       	brne	.+2      	; 0x1efa6 <USB_Device_ProcessControlRequest+0x36>
   1efa4:	65 c0       	rjmp	.+202    	; 0x1f070 <USB_Device_ProcessControlRequest+0x100>
   1efa6:	30 f4       	brcc	.+12     	; 0x1efb4 <USB_Device_ProcessControlRequest+0x44>
   1efa8:	81 30       	cpi	r24, 0x01	; 1
   1efaa:	59 f1       	breq	.+86     	; 0x1f002 <USB_Device_ProcessControlRequest+0x92>
   1efac:	68 f0       	brcs	.+26     	; 0x1efc8 <USB_Device_ProcessControlRequest+0x58>
   1efae:	83 30       	cpi	r24, 0x03	; 3
   1efb0:	41 f1       	breq	.+80     	; 0x1f002 <USB_Device_ProcessControlRequest+0x92>
   1efb2:	cc c0       	rjmp	.+408    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1efb4:	88 30       	cpi	r24, 0x08	; 8
   1efb6:	09 f4       	brne	.+2      	; 0x1efba <USB_Device_ProcessControlRequest+0x4a>
   1efb8:	9c c0       	rjmp	.+312    	; 0x1f0f2 <USB_Device_ProcessControlRequest+0x182>
   1efba:	89 30       	cpi	r24, 0x09	; 9
   1efbc:	09 f4       	brne	.+2      	; 0x1efc0 <USB_Device_ProcessControlRequest+0x50>
   1efbe:	ab c0       	rjmp	.+342    	; 0x1f116 <USB_Device_ProcessControlRequest+0x1a6>
   1efc0:	86 30       	cpi	r24, 0x06	; 6
   1efc2:	09 f0       	breq	.+2      	; 0x1efc6 <USB_Device_ProcessControlRequest+0x56>
   1efc4:	c3 c0       	rjmp	.+390    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1efc6:	75 c0       	rjmp	.+234    	; 0x1f0b2 <USB_Device_ProcessControlRequest+0x142>
   1efc8:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1efca:	81 f0       	breq	.+32     	; 0x1efec <USB_Device_ProcessControlRequest+0x7c>
   1efcc:	92 38       	cpi	r25, 0x82	; 130
   1efce:	09 f0       	breq	.+2      	; 0x1efd2 <USB_Device_ProcessControlRequest+0x62>
   1efd0:	bd c0       	rjmp	.+378    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1efd2:	80 91 87 02 	lds	r24, 0x0287
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1efd6:	8f 70       	andi	r24, 0x0F	; 15
   1efd8:	80 93 e9 00 	sts	0x00E9, r24
   1efdc:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1efe0:	95 fb       	bst	r25, 5
   1efe2:	99 27       	eor	r25, r25
   1efe4:	90 f9       	bld	r25, 0
   1efe6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1efea:	01 c0       	rjmp	.+2      	; 0x1efee <USB_Device_ProcessControlRequest+0x7e>
   1efec:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1efee:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eff2:	87 7f       	andi	r24, 0xF7	; 247
   1eff4:	80 93 e8 00 	sts	0x00E8, r24
   1eff8:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1effc:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1f000:	83 c0       	rjmp	.+262    	; 0x1f108 <USB_Device_ProcessControlRequest+0x198>
   1f002:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f004:	2d 7f       	andi	r18, 0xFD	; 253
   1f006:	09 f0       	breq	.+2      	; 0x1f00a <USB_Device_ProcessControlRequest+0x9a>
   1f008:	a1 c0       	rjmp	.+322    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f00a:	92 30       	cpi	r25, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1f00c:	09 f0       	breq	.+2      	; 0x1f010 <USB_Device_ProcessControlRequest+0xa0>
   1f00e:	9e c0       	rjmp	.+316    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f010:	90 91 85 02 	lds	r25, 0x0285

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1f014:	91 11       	cpse	r25, r1
   1f016:	26 c0       	rjmp	.+76     	; 0x1f064 <USB_Device_ProcessControlRequest+0xf4>
   1f018:	20 91 87 02 	lds	r18, 0x0287
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f01c:	2f 70       	andi	r18, 0x0F	; 15
   1f01e:	09 f4       	brne	.+2      	; 0x1f022 <USB_Device_ProcessControlRequest+0xb2>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1f020:	95 c0       	rjmp	.+298    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f022:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f026:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1f02a:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1f02c:	1b c0       	rjmp	.+54     	; 0x1f064 <USB_Device_ProcessControlRequest+0xf4>
   1f02e:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1f030:	21 f4       	brne	.+8      	; 0x1f03a <USB_Device_ProcessControlRequest+0xca>
   1f032:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f036:	80 62       	ori	r24, 0x20	; 32
   1f038:	13 c0       	rjmp	.+38     	; 0x1f060 <USB_Device_ProcessControlRequest+0xf0>
   1f03a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f03e:	80 61       	ori	r24, 0x10	; 16
   1f040:	80 93 eb 00 	sts	0x00EB, r24
   1f044:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1f046:	90 e0       	ldi	r25, 0x00	; 0
   1f048:	02 2e       	mov	r0, r18
   1f04a:	01 c0       	rjmp	.+2      	; 0x1f04e <USB_Device_ProcessControlRequest+0xde>
   1f04c:	88 0f       	add	r24, r24
   1f04e:	0a 94       	dec	r0
   1f050:	ea f7       	brpl	.-6      	; 0x1f04c <USB_Device_ProcessControlRequest+0xdc>
   1f052:	80 93 ea 00 	sts	0x00EA, r24
   1f056:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1f05a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f05e:	88 60       	ori	r24, 0x08	; 8
   1f060:	80 93 eb 00 	sts	0x00EB, r24
   1f064:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f068:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f06c:	87 7f       	andi	r24, 0xF7	; 247
   1f06e:	4f c0       	rjmp	.+158    	; 0x1f10e <USB_Device_ProcessControlRequest+0x19e>
   1f070:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f072:	6c c0       	rjmp	.+216    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f074:	10 91 85 02 	lds	r17, 0x0285
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1f078:	1f 77       	andi	r17, 0x7F	; 127
   1f07a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1f07e:	80 78       	andi	r24, 0x80	; 128
   1f080:	81 2b       	or	r24, r17
   1f082:	80 93 e3 00 	sts	0x00E3, r24
   1f086:	80 91 e8 00 	lds	r24, 0x00E8
   1f08a:	87 7f       	andi	r24, 0xF7	; 247
   1f08c:	80 93 e8 00 	sts	0x00E8, r24
   1f090:	cb dd       	rcall	.-1130   	; 0x1ec28 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f092:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f096:	80 ff       	sbrs	r24, 0
   1f098:	fc cf       	rjmp	.-8      	; 0x1f092 <USB_Device_ProcessControlRequest+0x122>

	while (!(Endpoint_IsINReady()));
   1f09a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1f09e:	80 68       	ori	r24, 0x80	; 128
   1f0a0:	80 93 e3 00 	sts	0x00E3, r24
   1f0a4:	11 23       	and	r17, r17
   1f0a6:	11 f0       	breq	.+4      	; 0x1f0ac <USB_Device_ProcessControlRequest+0x13c>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1f0a8:	83 e0       	ldi	r24, 0x03	; 3
   1f0aa:	01 c0       	rjmp	.+2      	; 0x1f0ae <USB_Device_ProcessControlRequest+0x13e>
   1f0ac:	82 e0       	ldi	r24, 0x02	; 2
   1f0ae:	8e bb       	out	0x1e, r24	; 30
   1f0b0:	4d c0       	rjmp	.+154    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f0b2:	90 58       	subi	r25, 0x80	; 128
   1f0b4:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f0b6:	08 f0       	brcs	.+2      	; 0x1f0ba <USB_Device_ProcessControlRequest+0x14a>
   1f0b8:	49 c0       	rjmp	.+146    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f0ba:	ae 01       	movw	r20, r28
   1f0bc:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1f0be:	5f 4f       	sbci	r21, 0xFF	; 255
   1f0c0:	60 91 87 02 	lds	r22, 0x0287
   1f0c4:	80 91 85 02 	lds	r24, 0x0285
   1f0c8:	90 91 86 02 	lds	r25, 0x0286
   1f0cc:	9a d8       	rcall	.-3788   	; 0x1e202 <CALLBACK_USB_GetDescriptor>
   1f0ce:	00 97       	sbiw	r24, 0x00	; 0
   1f0d0:	09 f4       	brne	.+2      	; 0x1f0d4 <USB_Device_ProcessControlRequest+0x164>
   1f0d2:	3c c0       	rjmp	.+120    	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f0d4:	20 91 e8 00 	lds	r18, 0x00E8
   1f0d8:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f0da:	20 93 e8 00 	sts	0x00E8, r18
   1f0de:	bc 01       	movw	r22, r24
   1f0e0:	89 81       	ldd	r24, Y+1	; 0x01
   1f0e2:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1f0e4:	f5 dc       	rcall	.-1558   	; 0x1ead0 <Endpoint_Write_Control_Stream_LE>
   1f0e6:	80 91 e8 00 	lds	r24, 0x00E8
   1f0ea:	8b 77       	andi	r24, 0x7B	; 123
   1f0ec:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f0f0:	2d c0       	rjmp	.+90     	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f0f2:	90 38       	cpi	r25, 0x80	; 128
   1f0f4:	59 f5       	brne	.+86     	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f0f6:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1f0fa:	87 7f       	andi	r24, 0xF7	; 247
   1f0fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f100:	80 91 81 02 	lds	r24, 0x0281
   1f104:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1f108:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f10c:	8e 77       	andi	r24, 0x7E	; 126
   1f10e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f112:	8a dd       	rcall	.-1260   	; 0x1ec28 <Endpoint_ClearStatusStage>
   1f114:	1b c0       	rjmp	.+54     	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f116:	91 11       	cpse	r25, r1
   1f118:	19 c0       	rjmp	.+50     	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1f11a:	90 91 85 02 	lds	r25, 0x0285
   1f11e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f120:	a8 f4       	brcc	.+42     	; 0x1f14c <USB_Device_ProcessControlRequest+0x1dc>
   1f122:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1f126:	87 7f       	andi	r24, 0xF7	; 247
   1f128:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f12c:	90 93 81 02 	sts	0x0281, r25
   1f130:	7b dd       	rcall	.-1290   	; 0x1ec28 <Endpoint_ClearStatusStage>
   1f132:	80 91 81 02 	lds	r24, 0x0281
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1f136:	81 11       	cpse	r24, r1
   1f138:	04 c0       	rjmp	.+8      	; 0x1f142 <USB_Device_ProcessControlRequest+0x1d2>

	Endpoint_ClearStatusStage();
   1f13a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1f13e:	87 ff       	sbrs	r24, 7
   1f140:	02 c0       	rjmp	.+4      	; 0x1f146 <USB_Device_ProcessControlRequest+0x1d6>
   1f142:	84 e0       	ldi	r24, 0x04	; 4
   1f144:	01 c0       	rjmp	.+2      	; 0x1f148 <USB_Device_ProcessControlRequest+0x1d8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f146:	81 e0       	ldi	r24, 0x01	; 1
   1f148:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f14a:	3e d8       	rcall	.-3972   	; 0x1e1c8 <EVENT_USB_Device_ConfigurationChanged>
   1f14c:	80 91 e8 00 	lds	r24, 0x00E8
   1f150:	83 ff       	sbrs	r24, 3
   1f152:	0a c0       	rjmp	.+20     	; 0x1f168 <USB_Device_ProcessControlRequest+0x1f8>
   1f154:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1f158:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f15a:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1f15e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f162:	80 62       	ori	r24, 0x20	; 32
   1f164:	80 93 eb 00 	sts	0x00EB, r24
   1f168:	0f 90       	pop	r0
   1f16a:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f16c:	df 91       	pop	r29
   1f16e:	cf 91       	pop	r28
   1f170:	1f 91       	pop	r17
   1f172:	08 95       	ret

0001f174 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1f174:	08 95       	ret

0001f176 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1f176:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f178:	8e b3       	in	r24, 0x1e	; 30
   1f17a:	88 23       	and	r24, r24
   1f17c:	a9 f0       	breq	.+42     	; 0x1f1a8 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f17e:	80 91 e9 00 	lds	r24, 0x00E9
   1f182:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1f184:	90 91 ec 00 	lds	r25, 0x00EC
   1f188:	90 ff       	sbrs	r25, 0
   1f18a:	02 c0       	rjmp	.+4      	; 0x1f190 <USB_USBTask+0x1a>
   1f18c:	90 e8       	ldi	r25, 0x80	; 128
   1f18e:	01 c0       	rjmp	.+2      	; 0x1f192 <USB_USBTask+0x1c>
   1f190:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f192:	c9 2f       	mov	r28, r25
   1f194:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f196:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f19a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1f19e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1f1a0:	e7 de       	rcall	.-562    	; 0x1ef70 <USB_Device_ProcessControlRequest>
   1f1a2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f1a4:	c0 93 e9 00 	sts	0x00E9, r28
   1f1a8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1f1aa:	08 95       	ret

0001f1ac <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1f1ac:	cf 93       	push	r28
   1f1ae:	df 93       	push	r29
   1f1b0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f1b2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
   1f1b6:	83 ff       	sbrs	r24, 3
   1f1b8:	35 c0       	rjmp	.+106    	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
   1f1ba:	88 81       	ld	r24, Y
   1f1bc:	90 e0       	ldi	r25, 0x00	; 0
   1f1be:	20 91 87 02 	lds	r18, 0x0287
   1f1c2:	30 91 88 02 	lds	r19, 0x0288
   1f1c6:	28 17       	cp	r18, r24
   1f1c8:	39 07       	cpc	r19, r25
   1f1ca:	61 f5       	brne	.+88     	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
	  return;

	switch (USB_ControlRequest.bRequest)
   1f1cc:	80 91 84 02 	lds	r24, 0x0284
   1f1d0:	8e 3f       	cpi	r24, 0xFE	; 254
   1f1d2:	79 f0       	breq	.+30     	; 0x1f1f2 <MS_Device_ProcessControlRequest+0x46>
   1f1d4:	8f 3f       	cpi	r24, 0xFF	; 255
   1f1d6:	31 f5       	brne	.+76     	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1f1d8:	80 91 83 02 	lds	r24, 0x0283
   1f1dc:	81 32       	cpi	r24, 0x21	; 33
   1f1de:	11 f5       	brne	.+68     	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f1e0:	80 91 e8 00 	lds	r24, 0x00E8
   1f1e4:	87 7f       	andi	r24, 0xF7	; 247
   1f1e6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1f1ea:	1e dd       	rcall	.-1476   	; 0x1ec28 <Endpoint_ClearStatusStage>
   1f1ec:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
   1f1ee:	88 af       	std	Y+56, r24	; 0x38
   1f1f0:	19 c0       	rjmp	.+50     	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
   1f1f2:	80 91 83 02 	lds	r24, 0x0283
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1f1f6:	81 3a       	cpi	r24, 0xA1	; 161
   1f1f8:	a9 f4       	brne	.+42     	; 0x1f224 <MS_Device_ProcessControlRequest+0x78>
   1f1fa:	80 91 e8 00 	lds	r24, 0x00E8
   1f1fe:	87 7f       	andi	r24, 0xF7	; 247
   1f200:	80 93 e8 00 	sts	0x00E8, r24
   1f204:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f208:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
   1f20a:	fc cf       	rjmp	.-8      	; 0x1f204 <MS_Device_ProcessControlRequest+0x58>
   1f20c:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
   1f20e:	81 50       	subi	r24, 0x01	; 1
   1f210:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f214:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f218:	8e 77       	andi	r24, 0x7E	; 126
   1f21a:	80 93 e8 00 	sts	0x00E8, r24
   1f21e:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
   1f220:	cf 91       	pop	r28
   1f222:	02 cd       	rjmp	.-1532   	; 0x1ec28 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
   1f224:	df 91       	pop	r29
   1f226:	cf 91       	pop	r28
			}

			break;
	}
}
   1f228:	08 95       	ret

0001f22a <MS_Device_ConfigureEndpoints>:
   1f22a:	cf 93       	push	r28
   1f22c:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1f22e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
   1f230:	fc 01       	movw	r30, r24
   1f232:	3c 96       	adiw	r30, 0x0c	; 12
   1f234:	8d e2       	ldi	r24, 0x2D	; 45
   1f236:	df 01       	movw	r26, r30
   1f238:	1d 92       	st	X+, r1
   1f23a:	8a 95       	dec	r24
   1f23c:	e9 f7       	brne	.-6      	; 0x1f238 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
   1f23e:	82 e0       	ldi	r24, 0x02	; 2
   1f240:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
   1f242:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
   1f244:	61 e0       	ldi	r22, 0x01	; 1
   1f246:	ce 01       	movw	r24, r28
   1f248:	01 96       	adiw	r24, 0x01	; 1
   1f24a:	b1 dc       	rcall	.-1694   	; 0x1ebae <Endpoint_ConfigureEndpointTable>
   1f24c:	88 23       	and	r24, r24
   1f24e:	31 f0       	breq	.+12     	; 0x1f25c <MS_Device_ConfigureEndpoints+0x32>
   1f250:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1f252:	ce 01       	movw	r24, r28
   1f254:	06 96       	adiw	r24, 0x06	; 6
   1f256:	df 91       	pop	r29
	  return false;

	return true;
}
   1f258:	cf 91       	pop	r28
   1f25a:	a9 cc       	rjmp	.-1710   	; 0x1ebae <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1f25c:	80 e0       	ldi	r24, 0x00	; 0
   1f25e:	df 91       	pop	r29
	  return false;

	return true;
}
   1f260:	cf 91       	pop	r28
   1f262:	08 95       	ret

0001f264 <MS_Device_USBTask>:
   1f264:	ef 92       	push	r14
   1f266:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1f268:	0f 93       	push	r16
   1f26a:	1f 93       	push	r17
   1f26c:	cf 93       	push	r28
   1f26e:	df 93       	push	r29
   1f270:	00 d0       	rcall	.+0      	; 0x1f272 <MS_Device_USBTask+0xe>
   1f272:	cd b7       	in	r28, 0x3d	; 61
   1f274:	de b7       	in	r29, 0x3e	; 62
   1f276:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1f278:	8e b3       	in	r24, 0x1e	; 30
   1f27a:	84 30       	cpi	r24, 0x04	; 4
   1f27c:	09 f0       	breq	.+2      	; 0x1f280 <MS_Device_USBTask+0x1c>
   1f27e:	00 c1       	rjmp	.+512    	; 0x1f480 <MS_Device_USBTask+0x21c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f280:	f8 01       	movw	r30, r16
   1f282:	86 81       	ldd	r24, Z+6	; 0x06
   1f284:	8f 70       	andi	r24, 0x0F	; 15
   1f286:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f28a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
   1f28e:	82 ff       	sbrs	r24, 2
   1f290:	bd c0       	rjmp	.+378    	; 0x1f40c <MS_Device_USBTask+0x1a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f292:	86 81       	ldd	r24, Z+6	; 0x06
   1f294:	8f 70       	andi	r24, 0x0F	; 15
   1f296:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
   1f29a:	1a 82       	std	Y+2, r1	; 0x02
   1f29c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1f29e:	78 01       	movw	r14, r16
   1f2a0:	fc e0       	ldi	r31, 0x0C	; 12
   1f2a2:	ef 0e       	add	r14, r31
   1f2a4:	f1 1c       	adc	r15, r1
   1f2a6:	ae 01       	movw	r20, r28
   1f2a8:	4f 5f       	subi	r20, 0xFF	; 255
   1f2aa:	5f 4f       	sbci	r21, 0xFF	; 255
   1f2ac:	6f e0       	ldi	r22, 0x0F	; 15
   1f2ae:	70 e0       	ldi	r23, 0x00	; 0
   1f2b0:	c7 01       	movw	r24, r14
   1f2b2:	c7 db       	rcall	.-2162   	; 0x1ea42 <Endpoint_Read_Stream_LE>
   1f2b4:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f2b6:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1f2b8:	21 f4       	brne	.+8      	; 0x1f2c2 <MS_Device_USBTask+0x5e>
   1f2ba:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f2bc:	88 23       	and	r24, r24
   1f2be:	99 f3       	breq	.-26     	; 0x1f2a6 <MS_Device_USBTask+0x42>
   1f2c0:	a5 c0       	rjmp	.+330    	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f2c2:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
   1f2c4:	95 85       	ldd	r25, Z+13	; 0x0d
   1f2c6:	a6 85       	ldd	r26, Z+14	; 0x0e
   1f2c8:	b7 85       	ldd	r27, Z+15	; 0x0f
   1f2ca:	85 35       	cpi	r24, 0x55	; 85
   1f2cc:	93 45       	sbci	r25, 0x53	; 83
   1f2ce:	a2 44       	sbci	r26, 0x42	; 66
   1f2d0:	b3 44       	sbci	r27, 0x43	; 67
   1f2d2:	61 f4       	brne	.+24     	; 0x1f2ec <MS_Device_USBTask+0x88>
   1f2d4:	f8 01       	movw	r30, r16
   1f2d6:	91 8d       	ldd	r25, Z+25	; 0x19
   1f2d8:	83 85       	ldd	r24, Z+11	; 0x0b
   1f2da:	98 17       	cp	r25, r24
   1f2dc:	38 f4       	brcc	.+14     	; 0x1f2ec <MS_Device_USBTask+0x88>
   1f2de:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
   1f2e0:	8f 71       	andi	r24, 0x1F	; 31
   1f2e2:	21 f4       	brne	.+8      	; 0x1f2ec <MS_Device_USBTask+0x88>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
   1f2e4:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
   1f2e6:	81 50       	subi	r24, 0x01	; 1
   1f2e8:	80 31       	cpi	r24, 0x10	; 16
   1f2ea:	80 f0       	brcs	.+32     	; 0x1f30c <MS_Device_USBTask+0xa8>
   1f2ec:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f2f0:	80 62       	ori	r24, 0x20	; 32
   1f2f2:	80 93 eb 00 	sts	0x00EB, r24
   1f2f6:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f2f8:	81 81       	ldd	r24, Z+1	; 0x01
   1f2fa:	8f 70       	andi	r24, 0x0F	; 15
   1f2fc:	80 93 e9 00 	sts	0x00E9, r24
   1f300:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f304:	80 62       	ori	r24, 0x20	; 32
   1f306:	80 93 eb 00 	sts	0x00EB, r24
   1f30a:	80 c0       	rjmp	.+256    	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f30c:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
   1f30e:	19 82       	std	Y+1, r1	; 0x01
   1f310:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
   1f312:	fb e1       	ldi	r31, 0x1B	; 27
   1f314:	ef 0e       	add	r14, r31
   1f316:	f1 1c       	adc	r15, r1
   1f318:	f8 01       	movw	r30, r16
   1f31a:	62 8d       	ldd	r22, Z+26	; 0x1a
   1f31c:	70 e0       	ldi	r23, 0x00	; 0
   1f31e:	ae 01       	movw	r20, r28
   1f320:	4f 5f       	subi	r20, 0xFF	; 255
   1f322:	5f 4f       	sbci	r21, 0xFF	; 255
   1f324:	c7 01       	movw	r24, r14
   1f326:	8d db       	rcall	.-2278   	; 0x1ea42 <Endpoint_Read_Stream_LE>
   1f328:	85 30       	cpi	r24, 0x05	; 5
   1f32a:	29 f4       	brne	.+10     	; 0x1f336 <MS_Device_USBTask+0xd2>
   1f32c:	f8 01       	movw	r30, r16
   1f32e:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f330:	88 23       	and	r24, r24
   1f332:	91 f3       	breq	.-28     	; 0x1f318 <MS_Device_USBTask+0xb4>
   1f334:	6b c0       	rjmp	.+214    	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f336:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f33a:	8b 77       	andi	r24, 0x7B	; 123
   1f33c:	80 93 e8 00 	sts	0x00E8, r24
   1f340:	f8 01       	movw	r30, r16
   1f342:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
   1f344:	87 ff       	sbrs	r24, 7
   1f346:	04 c0       	rjmp	.+8      	; 0x1f350 <MS_Device_USBTask+0xec>
   1f348:	81 81       	ldd	r24, Z+1	; 0x01
   1f34a:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f34c:	80 93 e9 00 	sts	0x00E9, r24
   1f350:	c8 01       	movw	r24, r16
   1f352:	0e 94 f1 f0 	call	0x1e1e2	; 0x1e1e2 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
   1f356:	91 e0       	ldi	r25, 0x01	; 1
   1f358:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
   1f35a:	f8 01       	movw	r30, r16
   1f35c:	97 ab       	std	Z+55, r25	; 0x37
   1f35e:	45 e5       	ldi	r20, 0x55	; 85
   1f360:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
   1f362:	62 e4       	ldi	r22, 0x42	; 66
   1f364:	73 e5       	ldi	r23, 0x53	; 83
   1f366:	43 a7       	std	Z+43, r20	; 0x2b
   1f368:	54 a7       	std	Z+44, r21	; 0x2c
   1f36a:	65 a7       	std	Z+45, r22	; 0x2d
   1f36c:	76 a7       	std	Z+46, r23	; 0x2e
   1f36e:	40 89       	ldd	r20, Z+16	; 0x10
   1f370:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
   1f372:	62 89       	ldd	r22, Z+18	; 0x12
   1f374:	73 89       	ldd	r23, Z+19	; 0x13
   1f376:	47 a7       	std	Z+47, r20	; 0x2f
   1f378:	50 ab       	std	Z+48, r21	; 0x30
   1f37a:	61 ab       	std	Z+49, r22	; 0x31
   1f37c:	72 ab       	std	Z+50, r23	; 0x32
   1f37e:	44 89       	ldd	r20, Z+20	; 0x14
   1f380:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
   1f382:	66 89       	ldd	r22, Z+22	; 0x16
   1f384:	77 89       	ldd	r23, Z+23	; 0x17
   1f386:	43 ab       	std	Z+51, r20	; 0x33
   1f388:	54 ab       	std	Z+52, r21	; 0x34
   1f38a:	65 ab       	std	Z+53, r22	; 0x35
   1f38c:	76 ab       	std	Z+54, r23	; 0x36
   1f38e:	81 11       	cpse	r24, r1
   1f390:	09 c0       	rjmp	.+18     	; 0x1f3a4 <MS_Device_USBTask+0x140>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
   1f392:	45 2b       	or	r20, r21
   1f394:	46 2b       	or	r20, r22
   1f396:	47 2b       	or	r20, r23
   1f398:	29 f0       	breq	.+10     	; 0x1f3a4 <MS_Device_USBTask+0x140>
   1f39a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f39e:	80 62       	ori	r24, 0x20	; 32
   1f3a0:	80 93 eb 00 	sts	0x00EB, r24
   1f3a4:	f8 01       	movw	r30, r16
   1f3a6:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f3a8:	8f 70       	andi	r24, 0x0F	; 15
   1f3aa:	80 93 e9 00 	sts	0x00E9, r24
   1f3ae:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f3b2:	f8 01       	movw	r30, r16
   1f3b4:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f3b6:	04 c0       	rjmp	.+8      	; 0x1f3c0 <MS_Device_USBTask+0x15c>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
   1f3b8:	80 ad       	ldd	r24, Z+56	; 0x38
   1f3ba:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f3bc:	c1 f3       	breq	.-16     	; 0x1f3ae <MS_Device_USBTask+0x14a>
   1f3be:	26 c0       	rjmp	.+76     	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f3c0:	81 81       	ldd	r24, Z+1	; 0x01
   1f3c2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f3c4:	80 93 e9 00 	sts	0x00E9, r24
   1f3c8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f3cc:	85 ff       	sbrs	r24, 5
   1f3ce:	05 c0       	rjmp	.+10     	; 0x1f3da <MS_Device_USBTask+0x176>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
   1f3d0:	f8 01       	movw	r30, r16
   1f3d2:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f3d4:	88 23       	and	r24, r24
   1f3d6:	c1 f3       	breq	.-16     	; 0x1f3c8 <MS_Device_USBTask+0x164>
   1f3d8:	19 c0       	rjmp	.+50     	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f3da:	1a 82       	std	Y+2, r1	; 0x02
   1f3dc:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
   1f3de:	78 01       	movw	r14, r16
   1f3e0:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
   1f3e2:	ef 0e       	add	r14, r31
   1f3e4:	f1 1c       	adc	r15, r1
   1f3e6:	ae 01       	movw	r20, r28
   1f3e8:	4f 5f       	subi	r20, 0xFF	; 255
   1f3ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1f3ec:	6d e0       	ldi	r22, 0x0D	; 13
   1f3ee:	70 e0       	ldi	r23, 0x00	; 0
   1f3f0:	c7 01       	movw	r24, r14
   1f3f2:	e0 da       	rcall	.-2624   	; 0x1e9b4 <Endpoint_Write_Stream_LE>
   1f3f4:	85 30       	cpi	r24, 0x05	; 5
   1f3f6:	29 f4       	brne	.+10     	; 0x1f402 <MS_Device_USBTask+0x19e>
   1f3f8:	f8 01       	movw	r30, r16
   1f3fa:	80 ad       	ldd	r24, Z+56	; 0x38
   1f3fc:	88 23       	and	r24, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1f3fe:	99 f3       	breq	.-26     	; 0x1f3e6 <MS_Device_USBTask+0x182>
   1f400:	05 c0       	rjmp	.+10     	; 0x1f40c <MS_Device_USBTask+0x1a8>
   1f402:	80 91 e8 00 	lds	r24, 0x00E8
   1f406:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f408:	80 93 e8 00 	sts	0x00E8, r24
   1f40c:	f8 01       	movw	r30, r16
   1f40e:	80 ad       	ldd	r24, Z+56	; 0x38
   1f410:	88 23       	and	r24, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
   1f412:	b1 f1       	breq	.+108    	; 0x1f480 <MS_Device_USBTask+0x21c>
   1f414:	26 81       	ldd	r18, Z+6	; 0x06
   1f416:	2f 70       	andi	r18, 0x0F	; 15
   1f418:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1f41a:	90 e0       	ldi	r25, 0x00	; 0
   1f41c:	ac 01       	movw	r20, r24
   1f41e:	02 c0       	rjmp	.+4      	; 0x1f424 <MS_Device_USBTask+0x1c0>
   1f420:	44 0f       	add	r20, r20
   1f422:	55 1f       	adc	r21, r21
   1f424:	2a 95       	dec	r18
   1f426:	e2 f7       	brpl	.-8      	; 0x1f420 <MS_Device_USBTask+0x1bc>
   1f428:	40 93 ea 00 	sts	0x00EA, r20
   1f42c:	10 92 ea 00 	sts	0x00EA, r1
   1f430:	21 81       	ldd	r18, Z+1	; 0x01
				UERST = 0;
   1f432:	2f 70       	andi	r18, 0x0F	; 15
   1f434:	02 2e       	mov	r0, r18
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1f436:	01 c0       	rjmp	.+2      	; 0x1f43a <MS_Device_USBTask+0x1d6>
   1f438:	88 0f       	add	r24, r24
   1f43a:	0a 94       	dec	r0
   1f43c:	ea f7       	brpl	.-6      	; 0x1f438 <MS_Device_USBTask+0x1d4>
   1f43e:	80 93 ea 00 	sts	0x00EA, r24
   1f442:	10 92 ea 00 	sts	0x00EA, r1
   1f446:	86 81       	ldd	r24, Z+6	; 0x06
				UERST = 0;
   1f448:	8f 70       	andi	r24, 0x0F	; 15
   1f44a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f44e:	80 91 eb 00 	lds	r24, 0x00EB
   1f452:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f454:	80 93 eb 00 	sts	0x00EB, r24
   1f458:	80 91 eb 00 	lds	r24, 0x00EB
   1f45c:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f45e:	80 93 eb 00 	sts	0x00EB, r24
   1f462:	81 81       	ldd	r24, Z+1	; 0x01
   1f464:	8f 70       	andi	r24, 0x0F	; 15
   1f466:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f46a:	80 91 eb 00 	lds	r24, 0x00EB
   1f46e:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f470:	80 93 eb 00 	sts	0x00EB, r24
   1f474:	80 91 eb 00 	lds	r24, 0x00EB
   1f478:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f47a:	80 93 eb 00 	sts	0x00EB, r24
   1f47e:	10 ae       	std	Z+56, r1	; 0x38
   1f480:	0f 90       	pop	r0
   1f482:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
   1f484:	df 91       	pop	r29
	}
}
   1f486:	cf 91       	pop	r28
   1f488:	1f 91       	pop	r17
   1f48a:	0f 91       	pop	r16
   1f48c:	ff 90       	pop	r15
   1f48e:	ef 90       	pop	r14
   1f490:	08 95       	ret

0001f492 <__eerd_byte_usb1287>:
   1f492:	f9 99       	sbic	0x1f, 1	; 31
   1f494:	fe cf       	rjmp	.-4      	; 0x1f492 <__eerd_byte_usb1287>
   1f496:	92 bd       	out	0x22, r25	; 34
   1f498:	81 bd       	out	0x21, r24	; 33
   1f49a:	f8 9a       	sbi	0x1f, 0	; 31
   1f49c:	99 27       	eor	r25, r25
   1f49e:	80 b5       	in	r24, 0x20	; 32
   1f4a0:	08 95       	ret

0001f4a2 <__eeupd_byte_usb1287>:
   1f4a2:	26 2f       	mov	r18, r22

0001f4a4 <__eeupd_r18_usb1287>:
   1f4a4:	f9 99       	sbic	0x1f, 1	; 31
   1f4a6:	fe cf       	rjmp	.-4      	; 0x1f4a4 <__eeupd_r18_usb1287>
   1f4a8:	92 bd       	out	0x22, r25	; 34
   1f4aa:	81 bd       	out	0x21, r24	; 33
   1f4ac:	f8 9a       	sbi	0x1f, 0	; 31
   1f4ae:	01 97       	sbiw	r24, 0x01	; 1
   1f4b0:	00 b4       	in	r0, 0x20	; 32
   1f4b2:	02 16       	cp	r0, r18
   1f4b4:	39 f0       	breq	.+14     	; 0x1f4c4 <__eeupd_r18_usb1287+0x20>
   1f4b6:	1f ba       	out	0x1f, r1	; 31
   1f4b8:	20 bd       	out	0x20, r18	; 32
   1f4ba:	0f b6       	in	r0, 0x3f	; 63
   1f4bc:	f8 94       	cli
   1f4be:	fa 9a       	sbi	0x1f, 2	; 31
   1f4c0:	f9 9a       	sbi	0x1f, 1	; 31
   1f4c2:	0f be       	out	0x3f, r0	; 63
   1f4c4:	08 95       	ret

0001f4c6 <_exit>:
   1f4c6:	f8 94       	cli

0001f4c8 <__stop_program>:
   1f4c8:	ff cf       	rjmp	.-2      	; 0x1f4c8 <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 17 f1 	jmp	0x1e22e	; 0x1e22e <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 2b f1 	jmp	0x1e256	; 0x1e256 <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 3f f1 	jmp	0x1e27e	; 0x1e27e <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 4e f1 	jmp	0x1e29c	; 0x1e29c <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 54 f1 	jmp	0x1e2a8	; 0x1e2a8 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 5a f1 	jmp	0x1e2b4	; 0x1e2b4 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 61 f1 	jmp	0x1e2c2	; 0x1e2c2 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	30 df       	rcall	.-416    	; 0x1fe5e <__data_load_end+0x814>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0x3ac>

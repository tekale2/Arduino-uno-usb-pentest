
BootloaderHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0001e828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00000906  2**0
                  ALLOC
  3 .noinit       00000002  00800154  00800154  00000906  2**0
                  ALLOC
  4 .stab         00000870  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000b3  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000122b  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000318  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004a0e  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000142e  00000000  00000000  00005f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000020a9  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000870  00000000  00000000  0000943c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021ce  00000000  00000000  00009cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003772  00000000  00000000  0000be7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000498  00000000  00000000  0000f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	77 c0       	rjmp	.+238    	; 0x1e0f4 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	75 c0       	rjmp	.+234    	; 0x1e0f4 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	73 c0       	rjmp	.+230    	; 0x1e0f4 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	71 c0       	rjmp	.+226    	; 0x1e0f4 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	6f c0       	rjmp	.+222    	; 0x1e0f4 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	6d c0       	rjmp	.+218    	; 0x1e0f4 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	6b c0       	rjmp	.+214    	; 0x1e0f4 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	69 c0       	rjmp	.+210    	; 0x1e0f4 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	67 c0       	rjmp	.+206    	; 0x1e0f4 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	28 c2       	rjmp	.+1104   	; 0x1e47a <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	63 c0       	rjmp	.+198    	; 0x1e0f4 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	61 c0       	rjmp	.+194    	; 0x1e0f4 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	5f c0       	rjmp	.+190    	; 0x1e0f4 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	5d c0       	rjmp	.+186    	; 0x1e0f4 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	5b c0       	rjmp	.+182    	; 0x1e0f4 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	59 c0       	rjmp	.+178    	; 0x1e0f4 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	57 c0       	rjmp	.+174    	; 0x1e0f4 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	55 c0       	rjmp	.+170    	; 0x1e0f4 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	53 c0       	rjmp	.+166    	; 0x1e0f4 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	51 c0       	rjmp	.+162    	; 0x1e0f4 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	4f c0       	rjmp	.+158    	; 0x1e0f4 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	4d c0       	rjmp	.+154    	; 0x1e0f4 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	4b c0       	rjmp	.+150    	; 0x1e0f4 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	49 c0       	rjmp	.+146    	; 0x1e0f4 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	47 c0       	rjmp	.+142    	; 0x1e0f4 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	45 c0       	rjmp	.+138    	; 0x1e0f4 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	43 c0       	rjmp	.+134    	; 0x1e0f4 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	41 c0       	rjmp	.+130    	; 0x1e0f4 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	3f c0       	rjmp	.+126    	; 0x1e0f4 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	3d c0       	rjmp	.+122    	; 0x1e0f4 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	3b c0       	rjmp	.+118    	; 0x1e0f4 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	39 c0       	rjmp	.+114    	; 0x1e0f4 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	37 c0       	rjmp	.+110    	; 0x1e0f4 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	35 c0       	rjmp	.+106    	; 0x1e0f4 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	33 c0       	rjmp	.+102    	; 0x1e0f4 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	31 c0       	rjmp	.+98     	; 0x1e0f4 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	2f c0       	rjmp	.+94     	; 0x1e0f4 <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	0e c0       	rjmp	.+28     	; 0x1e0c6 <__do_copy_data>
   1e0aa:	80 91 54 01 	lds	r24, 0x0154
   1e0ae:	90 91 55 01 	lds	r25, 0x0155
   1e0b2:	82 34       	cpi	r24, 0x42	; 66
   1e0b4:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0b6:	39 f4       	brne	.+14     	; 0x1e0c6 <__do_copy_data>
	{
		MagicBootKey = 0;
   1e0b8:	10 92 55 01 	sts	0x0155, r1
   1e0bc:	10 92 54 01 	sts	0x0154, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0c0:	e0 e0       	ldi	r30, 0x00	; 0
   1e0c2:	f0 e0       	ldi	r31, 0x00	; 0
   1e0c4:	09 95       	icall

0001e0c6 <__do_copy_data>:
   1e0c6:	11 e0       	ldi	r17, 0x01	; 1
   1e0c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e0ca:	b1 e0       	ldi	r27, 0x01	; 1
   1e0cc:	e8 e2       	ldi	r30, 0x28	; 40
   1e0ce:	f8 ee       	ldi	r31, 0xE8	; 232
   1e0d0:	01 e0       	ldi	r16, 0x01	; 1
   1e0d2:	0b bf       	out	0x3b, r16	; 59
   1e0d4:	02 c0       	rjmp	.+4      	; 0x1e0da <__do_copy_data+0x14>
   1e0d6:	07 90       	elpm	r0, Z+
   1e0d8:	0d 92       	st	X+, r0
   1e0da:	aa 34       	cpi	r26, 0x4A	; 74
   1e0dc:	b1 07       	cpc	r27, r17
   1e0de:	d9 f7       	brne	.-10     	; 0x1e0d6 <__do_copy_data+0x10>

0001e0e0 <__do_clear_bss>:
   1e0e0:	11 e0       	ldi	r17, 0x01	; 1
   1e0e2:	aa e4       	ldi	r26, 0x4A	; 74
   1e0e4:	b1 e0       	ldi	r27, 0x01	; 1
   1e0e6:	01 c0       	rjmp	.+2      	; 0x1e0ea <.do_clear_bss_start>

0001e0e8 <.do_clear_bss_loop>:
   1e0e8:	1d 92       	st	X+, r1

0001e0ea <.do_clear_bss_start>:
   1e0ea:	a4 35       	cpi	r26, 0x54	; 84
   1e0ec:	b1 07       	cpc	r27, r17
   1e0ee:	e1 f7       	brne	.-8      	; 0x1e0e8 <.do_clear_bss_loop>
   1e0f0:	02 d0       	rcall	.+4      	; 0x1e0f6 <main>
   1e0f2:	98 c3       	rjmp	.+1840   	; 0x1e824 <_exit>

0001e0f4 <__bad_interrupt>:
   1e0f4:	85 cf       	rjmp	.-246    	; 0x1e000 <__vectors>

0001e0f6 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e0f6:	84 b7       	in	r24, 0x34	; 52
   1e0f8:	87 7f       	andi	r24, 0xF7	; 247
   1e0fa:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e0fc:	88 e1       	ldi	r24, 0x18	; 24
   1e0fe:	0f b6       	in	r0, 0x3f	; 63
   1e100:	f8 94       	cli
   1e102:	80 93 60 00 	sts	0x0060, r24
   1e106:	10 92 60 00 	sts	0x0060, r1
   1e10a:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e10c:	81 e0       	ldi	r24, 0x01	; 1
   1e10e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1e110:	82 e0       	ldi	r24, 0x02	; 2
   1e112:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB subsystem */
	USB_Init();
   1e114:	97 d1       	rcall	.+814    	; 0x1e444 <USB_Init>
   1e116:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e118:	80 91 00 01 	lds	r24, 0x0100
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
   1e11c:	88 23       	and	r24, r24
   1e11e:	11 f0       	breq	.+4      	; 0x1e124 <main+0x2e>
   1e120:	66 d3       	rcall	.+1740   	; 0x1e7ee <USB_USBTask>
	  USB_USBTask();
   1e122:	fa cf       	rjmp	.-12     	; 0x1e118 <main+0x22>
   1e124:	80 91 e0 00 	lds	r24, 0x00E0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e128:	81 60       	ori	r24, 0x01	; 1
   1e12a:	80 93 e0 00 	sts	0x00E0, r24
   1e12e:	82 e4       	ldi	r24, 0x42	; 66
   1e130:	9c ed       	ldi	r25, 0xDC	; 220

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e132:	90 93 55 01 	sts	0x0155, r25
   1e136:	80 93 54 01 	sts	0x0154, r24
   1e13a:	2c e0       	ldi	r18, 0x0C	; 12
   1e13c:	88 e1       	ldi	r24, 0x18	; 24

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e13e:	90 e0       	ldi	r25, 0x00	; 0
   1e140:	0f b6       	in	r0, 0x3f	; 63
   1e142:	f8 94       	cli
   1e144:	a8 95       	wdr
   1e146:	80 93 60 00 	sts	0x0060, r24
   1e14a:	0f be       	out	0x3f, r0	; 63
   1e14c:	20 93 60 00 	sts	0x0060, r18
   1e150:	ff cf       	rjmp	.-2      	; 0x1e150 <main+0x5a>

0001e152 <EVENT_USB_Device_ConfigurationChanged>:
   1e152:	42 e3       	ldi	r20, 0x32	; 50
   1e154:	61 ec       	ldi	r22, 0xC1	; 193
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e156:	81 e0       	ldi	r24, 0x01	; 1
   1e158:	02 c1       	rjmp	.+516    	; 0x1e35e <Endpoint_ConfigureEndpoint_Prv>

0001e15a <EVENT_USB_Device_ControlRequest>:
   1e15a:	cf 92       	push	r12
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1e15c:	df 92       	push	r13
   1e15e:	ef 92       	push	r14
   1e160:	ff 92       	push	r15
   1e162:	1f 93       	push	r17
   1e164:	cf 93       	push	r28
   1e166:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e168:	80 91 4c 01 	lds	r24, 0x014C
   1e16c:	8f 77       	andi	r24, 0x7F	; 127
   1e16e:	81 32       	cpi	r24, 0x21	; 33
   1e170:	09 f0       	breq	.+2      	; 0x1e174 <EVENT_USB_Device_ControlRequest+0x1a>
   1e172:	75 c0       	rjmp	.+234    	; 0x1e25e <EVENT_USB_Device_ControlRequest+0x104>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e174:	80 91 4d 01 	lds	r24, 0x014D
   1e178:	89 30       	cpi	r24, 0x09	; 9
   1e17a:	09 f0       	breq	.+2      	; 0x1e17e <EVENT_USB_Device_ControlRequest+0x24>
   1e17c:	70 c0       	rjmp	.+224    	; 0x1e25e <EVENT_USB_Device_ControlRequest+0x104>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e17e:	80 91 e8 00 	lds	r24, 0x00E8
   1e182:	87 7f       	andi	r24, 0xF7	; 247
   1e184:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e188:	80 91 e8 00 	lds	r24, 0x00E8
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();

			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
   1e18c:	82 ff       	sbrs	r24, 2
   1e18e:	fc cf       	rjmp	.-8      	; 0x1e188 <EVENT_USB_Device_ControlRequest+0x2e>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e190:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
   1e194:	80 91 f1 00 	lds	r24, 0x00F1

				return Data.Value;
   1e198:	49 2f       	mov	r20, r25
   1e19a:	58 2f       	mov	r21, r24

			/* Read in the write destination address */
			#if (FLASHEND > 0xFFFF)
			uint32_t PageAddress = ((uint32_t)Endpoint_Read_16_LE() << 8);
   1e19c:	60 e0       	ldi	r22, 0x00	; 0
   1e19e:	70 e0       	ldi	r23, 0x00	; 0
			uint16_t PageAddress = Endpoint_Read_16_LE();
			#endif

			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
   1e1a0:	b6 2f       	mov	r27, r22
   1e1a2:	a5 2f       	mov	r26, r21
   1e1a4:	94 2f       	mov	r25, r20
   1e1a6:	88 27       	eor	r24, r24
   1e1a8:	4f 3f       	cpi	r20, 0xFF	; 255
   1e1aa:	5f 4f       	sbci	r21, 0xFF	; 255
   1e1ac:	19 f4       	brne	.+6      	; 0x1e1b4 <EVENT_USB_Device_ControlRequest+0x5a>
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
			#endif
			{
				RunBootloader = false;
   1e1ae:	10 92 00 01 	sts	0x0100, r1
   1e1b2:	3e c0       	rjmp	.+124    	; 0x1e230 <EVENT_USB_Device_ControlRequest+0xd6>
			}
			else
			{
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
   1e1b4:	23 e0       	ldi	r18, 0x03	; 3
   1e1b6:	fc 01       	movw	r30, r24
   1e1b8:	a0 93 5b 00 	sts	0x005B, r26
   1e1bc:	20 93 57 00 	sts	0x0057, r18
   1e1c0:	e8 95       	spm
				boot_spm_busy_wait();
   1e1c2:	07 b6       	in	r0, 0x37	; 55
   1e1c4:	00 fc       	sbrc	r0, 0
   1e1c6:	fd cf       	rjmp	.-6      	; 0x1e1c2 <EVENT_USB_Device_ControlRequest+0x68>
   1e1c8:	20 e0       	ldi	r18, 0x00	; 0
   1e1ca:	30 e0       	ldi	r19, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1e1cc:	11 e0       	ldi	r17, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e1ce:	40 91 f2 00 	lds	r20, 0x00F2
   1e1d2:	50 91 f3 00 	lds	r21, 0x00F3

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
   1e1d6:	45 2b       	or	r20, r21
   1e1d8:	09 f4       	brne	.+2      	; 0x1e1dc <EVENT_USB_Device_ControlRequest+0x82>
   1e1da:	37 c0       	rjmp	.+110    	; 0x1e24a <EVENT_USB_Device_ControlRequest+0xf0>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e1dc:	50 91 f1 00 	lds	r21, 0x00F1
				Data.Bytes[1] = UEDATX;
   1e1e0:	40 91 f1 00 	lds	r20, 0x00F1

				return Data.Value;
   1e1e4:	c5 2f       	mov	r28, r21
   1e1e6:	d4 2f       	mov	r29, r20
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1e1e8:	a9 01       	movw	r20, r18
   1e1ea:	44 0f       	add	r20, r20
   1e1ec:	55 1f       	adc	r21, r21
   1e1ee:	6c 01       	movw	r12, r24
   1e1f0:	7d 01       	movw	r14, r26
   1e1f2:	c4 0e       	add	r12, r20
   1e1f4:	d5 1e       	adc	r13, r21
   1e1f6:	e1 1c       	adc	r14, r1
   1e1f8:	f1 1c       	adc	r15, r1
   1e1fa:	0e 01       	movw	r0, r28
   1e1fc:	f6 01       	movw	r30, r12
   1e1fe:	e0 92 5b 00 	sts	0x005B, r14
   1e202:	10 93 57 00 	sts	0x0057, r17
   1e206:	e8 95       	spm
   1e208:	11 24       	eor	r1, r1
   1e20a:	2f 5f       	subi	r18, 0xFF	; 255
   1e20c:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
   1e20e:	20 38       	cpi	r18, 0x80	; 128
   1e210:	31 05       	cpc	r19, r1
   1e212:	e9 f6       	brne	.-70     	; 0x1e1ce <EVENT_USB_Device_ControlRequest+0x74>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
   1e214:	25 e0       	ldi	r18, 0x05	; 5
   1e216:	fc 01       	movw	r30, r24
   1e218:	a0 93 5b 00 	sts	0x005B, r26
   1e21c:	20 93 57 00 	sts	0x0057, r18
   1e220:	e8 95       	spm
				boot_spm_busy_wait();
   1e222:	07 b6       	in	r0, 0x37	; 55
   1e224:	00 fc       	sbrc	r0, 0
   1e226:	fd cf       	rjmp	.-6      	; 0x1e222 <EVENT_USB_Device_ControlRequest+0xc8>

				/* Re-enable RWW section */
				boot_rww_enable();
   1e228:	81 e1       	ldi	r24, 0x11	; 17
   1e22a:	80 93 57 00 	sts	0x0057, r24
   1e22e:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e230:	80 91 e8 00 	lds	r24, 0x00E8
   1e234:	8b 77       	andi	r24, 0x7B	; 123
   1e236:	80 93 e8 00 	sts	0x00E8, r24
			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e23a:	df 91       	pop	r29
   1e23c:	cf 91       	pop	r28
   1e23e:	1f 91       	pop	r17
   1e240:	ff 90       	pop	r15
   1e242:	ef 90       	pop	r14
   1e244:	df 90       	pop	r13
   1e246:	cf 90       	pop	r12
				boot_rww_enable();
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
   1e248:	9e c0       	rjmp	.+316    	; 0x1e386 <Endpoint_ClearStatusStage>
   1e24a:	40 91 e8 00 	lds	r20, 0x00E8
   1e24e:	4b 77       	andi	r20, 0x7B	; 123
   1e250:	40 93 e8 00 	sts	0x00E8, r20
   1e254:	40 91 e8 00 	lds	r20, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e258:	42 ff       	sbrs	r20, 2
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
   1e25a:	fc cf       	rjmp	.-8      	; 0x1e254 <EVENT_USB_Device_ControlRequest+0xfa>
   1e25c:	bf cf       	rjmp	.-130    	; 0x1e1dc <EVENT_USB_Device_ControlRequest+0x82>
   1e25e:	df 91       	pop	r29
			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e260:	cf 91       	pop	r28
   1e262:	1f 91       	pop	r17
   1e264:	ff 90       	pop	r15
   1e266:	ef 90       	pop	r14
   1e268:	df 90       	pop	r13
   1e26a:	cf 90       	pop	r12
   1e26c:	08 95       	ret

0001e26e <CALLBACK_USB_GetDescriptor>:

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
   1e26e:	91 30       	cpi	r25, 0x01	; 1
   1e270:	49 f0       	breq	.+18     	; 0x1e284 <CALLBACK_USB_GetDescriptor+0x16>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
   1e272:	92 30       	cpi	r25, 0x02	; 2
   1e274:	61 f0       	breq	.+24     	; 0x1e28e <CALLBACK_USB_GetDescriptor+0x20>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
	}
	else if (DescriptorType == HID_DTYPE_HID)
   1e276:	91 32       	cpi	r25, 0x21	; 33
   1e278:	79 f4       	brne	.+30     	; 0x1e298 <CALLBACK_USB_GetDescriptor+0x2a>
	{
		Address = &ConfigurationDescriptor.HID_VendorHID;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
   1e27a:	89 e0       	ldi	r24, 0x09	; 9
   1e27c:	90 e0       	ldi	r25, 0x00	; 0
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
	}
	else if (DescriptorType == HID_DTYPE_HID)
	{
		Address = &ConfigurationDescriptor.HID_VendorHID;
   1e27e:	23 e1       	ldi	r18, 0x13	; 19
   1e280:	31 e0       	ldi	r19, 0x01	; 1
   1e282:	0e c0       	rjmp	.+28     	; 0x1e2a0 <CALLBACK_USB_GetDescriptor+0x32>

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
   1e284:	82 e1       	ldi	r24, 0x12	; 18
   1e286:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
   1e288:	23 e2       	ldi	r18, 0x23	; 35
   1e28a:	31 e0       	ldi	r19, 0x01	; 1
   1e28c:	09 c0       	rjmp	.+18     	; 0x1e2a0 <CALLBACK_USB_GetDescriptor+0x32>
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
   1e28e:	82 e2       	ldi	r24, 0x22	; 34
   1e290:	90 e0       	ldi	r25, 0x00	; 0
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
   1e292:	21 e0       	ldi	r18, 0x01	; 1
   1e294:	31 e0       	ldi	r19, 0x01	; 1
   1e296:	04 c0       	rjmp	.+8      	; 0x1e2a0 <CALLBACK_USB_GetDescriptor+0x32>
		Size    = sizeof(USB_HID_Descriptor_HID_t);
	}
	else
	{
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
   1e298:	85 e1       	ldi	r24, 0x15	; 21
   1e29a:	90 e0       	ldi	r25, 0x00	; 0
		Address = &ConfigurationDescriptor.HID_VendorHID;
		Size    = sizeof(USB_HID_Descriptor_HID_t);
	}
	else
	{
		Address = &HIDReport;
   1e29c:	25 e3       	ldi	r18, 0x35	; 53
   1e29e:	31 e0       	ldi	r19, 0x01	; 1
		Size    = sizeof(HIDReport);
	}

	*DescriptorAddress = Address;
   1e2a0:	fa 01       	movw	r30, r20
   1e2a2:	31 83       	std	Z+1, r19	; 0x01
   1e2a4:	20 83       	st	Z, r18
	return Size;
}
   1e2a6:	08 95       	ret

0001e2a8 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e2a8:	20 91 52 01 	lds	r18, 0x0152
   1e2ac:	30 91 53 01 	lds	r19, 0x0153
   1e2b0:	26 17       	cp	r18, r22
   1e2b2:	37 07       	cpc	r19, r23
   1e2b4:	48 f0       	brcs	.+18     	; 0x1e2c8 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e2b6:	61 15       	cp	r22, r1
   1e2b8:	71 05       	cpc	r23, r1
   1e2ba:	39 f4       	brne	.+14     	; 0x1e2ca <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e2bc:	20 91 e8 00 	lds	r18, 0x00E8
   1e2c0:	2e 77       	andi	r18, 0x7E	; 126
   1e2c2:	20 93 e8 00 	sts	0x00E8, r18
   1e2c6:	01 c0       	rjmp	.+2      	; 0x1e2ca <Endpoint_Write_Control_Stream_LE+0x22>
   1e2c8:	b9 01       	movw	r22, r18
   1e2ca:	fc 01       	movw	r30, r24
   1e2cc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e2ce:	61 15       	cp	r22, r1
   1e2d0:	71 05       	cpc	r23, r1
   1e2d2:	91 f1       	breq	.+100    	; 0x1e338 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e2d4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e2d6:	88 23       	and	r24, r24
   1e2d8:	e1 f1       	breq	.+120    	; 0x1e352 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e2da:	85 30       	cpi	r24, 0x05	; 5
   1e2dc:	e1 f1       	breq	.+120    	; 0x1e356 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e2de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e2e2:	83 fd       	sbrc	r24, 3
   1e2e4:	3a c0       	rjmp	.+116    	; 0x1e35a <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e2e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e2ea:	82 ff       	sbrs	r24, 2
   1e2ec:	06 c0       	rjmp	.+12     	; 0x1e2fa <Endpoint_Write_Control_Stream_LE+0x52>
   1e2ee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e2f2:	82 ff       	sbrs	r24, 2
   1e2f4:	24 c0       	rjmp	.+72     	; 0x1e33e <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e2f6:	80 e0       	ldi	r24, 0x00	; 0
   1e2f8:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e2fa:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
   1e2fe:	80 ff       	sbrs	r24, 0
   1e300:	e6 cf       	rjmp	.-52     	; 0x1e2ce <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e302:	80 91 f2 00 	lds	r24, 0x00F2
   1e306:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e30a:	61 15       	cp	r22, r1
   1e30c:	71 05       	cpc	r23, r1
   1e30e:	51 f0       	breq	.+20     	; 0x1e324 <Endpoint_Write_Control_Stream_LE+0x7c>
   1e310:	88 30       	cpi	r24, 0x08	; 8
   1e312:	91 05       	cpc	r25, r1
   1e314:	38 f4       	brcc	.+14     	; 0x1e324 <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e316:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e318:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e31c:	61 50       	subi	r22, 0x01	; 1
   1e31e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1e320:	01 96       	adiw	r24, 0x01	; 1
   1e322:	f3 cf       	rjmp	.-26     	; 0x1e30a <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e324:	21 e0       	ldi	r18, 0x01	; 1
   1e326:	08 97       	sbiw	r24, 0x08	; 8
   1e328:	09 f0       	breq	.+2      	; 0x1e32c <Endpoint_Write_Control_Stream_LE+0x84>
   1e32a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e32c:	80 91 e8 00 	lds	r24, 0x00E8
   1e330:	8e 77       	andi	r24, 0x7E	; 126
   1e332:	80 93 e8 00 	sts	0x00E8, r24
   1e336:	cb cf       	rjmp	.-106    	; 0x1e2ce <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e338:	21 11       	cpse	r18, r1
   1e33a:	cc cf       	rjmp	.-104    	; 0x1e2d4 <Endpoint_Write_Control_Stream_LE+0x2c>
   1e33c:	d8 cf       	rjmp	.-80     	; 0x1e2ee <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e33e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e340:	88 23       	and	r24, r24
   1e342:	39 f0       	breq	.+14     	; 0x1e352 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e344:	85 30       	cpi	r24, 0x05	; 5
   1e346:	39 f0       	breq	.+14     	; 0x1e356 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e348:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e34c:	83 ff       	sbrs	r24, 3
   1e34e:	cf cf       	rjmp	.-98     	; 0x1e2ee <Endpoint_Write_Control_Stream_LE+0x46>
   1e350:	04 c0       	rjmp	.+8      	; 0x1e35a <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e352:	82 e0       	ldi	r24, 0x02	; 2
   1e354:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e356:	83 e0       	ldi	r24, 0x03	; 3
   1e358:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e35a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e35c:	08 95       	ret

0001e35e <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e35e:	8f 70       	andi	r24, 0x0F	; 15
   1e360:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e364:	eb ee       	ldi	r30, 0xEB	; 235
   1e366:	f0 e0       	ldi	r31, 0x00	; 0
   1e368:	80 81       	ld	r24, Z
   1e36a:	81 60       	ori	r24, 0x01	; 1
   1e36c:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e36e:	ed ee       	ldi	r30, 0xED	; 237
   1e370:	f0 e0       	ldi	r31, 0x00	; 0
   1e372:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1e374:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e378:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e37a:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1e37e:	88 1f       	adc	r24, r24
   1e380:	88 27       	eor	r24, r24
   1e382:	88 1f       	adc	r24, r24
   1e384:	08 95       	ret

0001e386 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e386:	80 91 4c 01 	lds	r24, 0x014C
   1e38a:	87 fd       	sbrc	r24, 7
   1e38c:	05 c0       	rjmp	.+10     	; 0x1e398 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e38e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e392:	80 ff       	sbrs	r24, 0
   1e394:	0d c0       	rjmp	.+26     	; 0x1e3b0 <Endpoint_ClearStatusStage+0x2a>
   1e396:	10 c0       	rjmp	.+32     	; 0x1e3b8 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e398:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1e39c:	82 fd       	sbrc	r24, 2
   1e39e:	04 c0       	rjmp	.+8      	; 0x1e3a8 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e3a0:	8e b3       	in	r24, 0x1e	; 30
   1e3a2:	81 11       	cpse	r24, r1
   1e3a4:	f9 cf       	rjmp	.-14     	; 0x1e398 <Endpoint_ClearStatusStage+0x12>
   1e3a6:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e3a8:	80 91 e8 00 	lds	r24, 0x00E8
   1e3ac:	8b 77       	andi	r24, 0x7B	; 123
   1e3ae:	07 c0       	rjmp	.+14     	; 0x1e3be <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e3b0:	8e b3       	in	r24, 0x1e	; 30
   1e3b2:	81 11       	cpse	r24, r1
   1e3b4:	ec cf       	rjmp	.-40     	; 0x1e38e <Endpoint_ClearStatusStage+0x8>
   1e3b6:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e3b8:	80 91 e8 00 	lds	r24, 0x00E8
   1e3bc:	8e 77       	andi	r24, 0x7E	; 126
   1e3be:	80 93 e8 00 	sts	0x00E8, r24
   1e3c2:	08 95       	ret

0001e3c4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1e3c4:	0f 93       	push	r16
   1e3c6:	1f 93       	push	r17
   1e3c8:	cf 93       	push	r28
   1e3ca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1e3cc:	49 d0       	rcall	.+146    	; 0x1e460 <USB_INT_DisableAllInterrupts>
   1e3ce:	50 d0       	rcall	.+160    	; 0x1e470 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e3d0:	c8 ed       	ldi	r28, 0xD8	; 216
   1e3d2:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1e3d4:	88 81       	ld	r24, Y
   1e3d6:	8f 77       	andi	r24, 0x7F	; 127
   1e3d8:	88 83       	st	Y, r24
   1e3da:	88 81       	ld	r24, Y
   1e3dc:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1e3de:	88 83       	st	Y, r24
   1e3e0:	88 81       	ld	r24, Y
   1e3e2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e3e4:	88 83       	st	Y, r24
   1e3e6:	e7 ed       	ldi	r30, 0xD7	; 215
   1e3e8:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e3ea:	80 81       	ld	r24, Z
   1e3ec:	80 68       	ori	r24, 0x80	; 128
   1e3ee:	80 83       	st	Z, r24
   1e3f0:	19 bc       	out	0x29, r1	; 41
   1e3f2:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e3f4:	10 92 4a 01 	sts	0x014A, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1e3f8:	00 ee       	ldi	r16, 0xE0	; 224
   1e3fa:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e3fc:	f8 01       	movw	r30, r16
   1e3fe:	80 81       	ld	r24, Z
   1e400:	8b 7f       	andi	r24, 0xFB	; 251
   1e402:	80 83       	st	Z, r24
   1e404:	88 81       	ld	r24, Y
   1e406:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1e408:	88 83       	st	Y, r24
   1e40a:	42 e0       	ldi	r20, 0x02	; 2
   1e40c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e40e:	80 e0       	ldi	r24, 0x00	; 0
   1e410:	a6 df       	rcall	.-180    	; 0x1e35e <Endpoint_ConfigureEndpoint_Prv>
   1e412:	e1 ee       	ldi	r30, 0xE1	; 225
   1e414:	f0 e0       	ldi	r31, 0x00	; 0
   1e416:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e418:	8e 7f       	andi	r24, 0xFE	; 254
   1e41a:	80 83       	st	Z, r24
   1e41c:	e2 ee       	ldi	r30, 0xE2	; 226
   1e41e:	f0 e0       	ldi	r31, 0x00	; 0
   1e420:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e422:	81 60       	ori	r24, 0x01	; 1
   1e424:	80 83       	st	Z, r24
   1e426:	80 81       	ld	r24, Z
   1e428:	88 60       	ori	r24, 0x08	; 8
   1e42a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1e42c:	f8 01       	movw	r30, r16
   1e42e:	80 81       	ld	r24, Z
   1e430:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1e432:	80 83       	st	Z, r24
   1e434:	88 81       	ld	r24, Y
   1e436:	80 61       	ori	r24, 0x10	; 16
   1e438:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1e43a:	df 91       	pop	r29
   1e43c:	cf 91       	pop	r28
   1e43e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1e440:	0f 91       	pop	r16
   1e442:	08 95       	ret

0001e444 <USB_Init>:
   1e444:	e8 ed       	ldi	r30, 0xD8	; 216
   1e446:	f0 e0       	ldi	r31, 0x00	; 0
   1e448:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1e44a:	8f 7e       	andi	r24, 0xEF	; 239
   1e44c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1e44e:	e7 ed       	ldi	r30, 0xD7	; 215
   1e450:	f0 e0       	ldi	r31, 0x00	; 0
   1e452:	80 81       	ld	r24, Z
   1e454:	81 60       	ori	r24, 0x01	; 1
   1e456:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1e458:	81 e0       	ldi	r24, 0x01	; 1
   1e45a:	80 93 4b 01 	sts	0x014B, r24

	USB_ResetInterface();
   1e45e:	b2 cf       	rjmp	.-156    	; 0x1e3c4 <USB_ResetInterface>

0001e460 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1e460:	e8 ed       	ldi	r30, 0xD8	; 216
   1e462:	f0 e0       	ldi	r31, 0x00	; 0
   1e464:	80 81       	ld	r24, Z
   1e466:	8c 7f       	andi	r24, 0xFC	; 252
   1e468:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1e46a:	10 92 e2 00 	sts	0x00E2, r1
   1e46e:	08 95       	ret

0001e470 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1e470:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1e474:	10 92 e1 00 	sts	0x00E1, r1
   1e478:	08 95       	ret

0001e47a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1e47a:	1f 92       	push	r1
   1e47c:	0f 92       	push	r0
   1e47e:	0f b6       	in	r0, 0x3f	; 63
   1e480:	0f 92       	push	r0
   1e482:	11 24       	eor	r1, r1
   1e484:	0b b6       	in	r0, 0x3b	; 59
   1e486:	0f 92       	push	r0
   1e488:	2f 93       	push	r18
   1e48a:	3f 93       	push	r19
   1e48c:	4f 93       	push	r20
   1e48e:	5f 93       	push	r21
   1e490:	6f 93       	push	r22
   1e492:	7f 93       	push	r23
   1e494:	8f 93       	push	r24
   1e496:	9f 93       	push	r25
   1e498:	af 93       	push	r26
   1e49a:	bf 93       	push	r27
   1e49c:	ef 93       	push	r30
   1e49e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1e4a0:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1e4a4:	80 ff       	sbrs	r24, 0
   1e4a6:	1b c0       	rjmp	.+54     	; 0x1e4de <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1e4a8:	80 91 d8 00 	lds	r24, 0x00D8
   1e4ac:	80 ff       	sbrs	r24, 0
   1e4ae:	17 c0       	rjmp	.+46     	; 0x1e4de <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1e4b0:	80 91 da 00 	lds	r24, 0x00DA
   1e4b4:	8e 7f       	andi	r24, 0xFE	; 254
   1e4b6:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1e4ba:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1e4be:	80 ff       	sbrs	r24, 0
   1e4c0:	0b c0       	rjmp	.+22     	; 0x1e4d8 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e4c2:	8c e0       	ldi	r24, 0x0C	; 12
   1e4c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e4c6:	8e e0       	ldi	r24, 0x0E	; 14
   1e4c8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1e4ca:	09 b4       	in	r0, 0x29	; 41
   1e4cc:	00 fe       	sbrs	r0, 0
   1e4ce:	fd cf       	rjmp	.-6      	; 0x1e4ca <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1e4d0:	81 e0       	ldi	r24, 0x01	; 1
   1e4d2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1e4d4:	8b d1       	rcall	.+790    	; 0x1e7ec <USB_Event_Stub>
   1e4d6:	03 c0       	rjmp	.+6      	; 0x1e4de <__vector_10+0x64>
   1e4d8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e4da:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1e4dc:	87 d1       	rcall	.+782    	; 0x1e7ec <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1e4de:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1e4e2:	80 ff       	sbrs	r24, 0
   1e4e4:	17 c0       	rjmp	.+46     	; 0x1e514 <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1e4e6:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1e4ea:	80 ff       	sbrs	r24, 0
   1e4ec:	13 c0       	rjmp	.+38     	; 0x1e514 <__vector_10+0x9a>
   1e4ee:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e4f2:	8e 7f       	andi	r24, 0xFE	; 254
   1e4f4:	80 93 e2 00 	sts	0x00E2, r24
   1e4f8:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e4fc:	80 61       	ori	r24, 0x10	; 16
   1e4fe:	80 93 e2 00 	sts	0x00E2, r24
   1e502:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1e506:	80 62       	ori	r24, 0x20	; 32
   1e508:	80 93 d8 00 	sts	0x00D8, r24
   1e50c:	19 bc       	out	0x29, r1	; 41
   1e50e:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e510:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1e512:	6c d1       	rcall	.+728    	; 0x1e7ec <USB_Event_Stub>
   1e514:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1e518:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1e51a:	2e c0       	rjmp	.+92     	; 0x1e578 <__vector_10+0xfe>
   1e51c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1e520:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1e522:	2a c0       	rjmp	.+84     	; 0x1e578 <__vector_10+0xfe>
   1e524:	8c e0       	ldi	r24, 0x0C	; 12
   1e526:	89 bd       	out	0x29, r24	; 41
   1e528:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e52a:	89 bd       	out	0x29, r24	; 41
   1e52c:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e52e:	00 fe       	sbrs	r0, 0
   1e530:	fd cf       	rjmp	.-6      	; 0x1e52c <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1e532:	80 91 d8 00 	lds	r24, 0x00D8
   1e536:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e538:	80 93 d8 00 	sts	0x00D8, r24
   1e53c:	80 91 e1 00 	lds	r24, 0x00E1
   1e540:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1e542:	80 93 e1 00 	sts	0x00E1, r24
   1e546:	80 91 e2 00 	lds	r24, 0x00E2
   1e54a:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1e54c:	80 93 e2 00 	sts	0x00E2, r24
   1e550:	80 91 e2 00 	lds	r24, 0x00E2
   1e554:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e556:	80 93 e2 00 	sts	0x00E2, r24
   1e55a:	80 91 4a 01 	lds	r24, 0x014A
   1e55e:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1e560:	11 f0       	breq	.+4      	; 0x1e566 <__vector_10+0xec>
   1e562:	84 e0       	ldi	r24, 0x04	; 4
   1e564:	07 c0       	rjmp	.+14     	; 0x1e574 <__vector_10+0xfa>
   1e566:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
   1e56a:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e56c:	02 c0       	rjmp	.+4      	; 0x1e572 <__vector_10+0xf8>
   1e56e:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1e570:	01 c0       	rjmp	.+2      	; 0x1e574 <__vector_10+0xfa>
   1e572:	81 e0       	ldi	r24, 0x01	; 1
   1e574:	8e bb       	out	0x1e, r24	; 30
   1e576:	3a d1       	rcall	.+628    	; 0x1e7ec <USB_Event_Stub>
   1e578:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1e57c:	83 ff       	sbrs	r24, 3
   1e57e:	21 c0       	rjmp	.+66     	; 0x1e5c2 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1e580:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1e584:	83 ff       	sbrs	r24, 3
   1e586:	1d c0       	rjmp	.+58     	; 0x1e5c2 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1e588:	80 91 e1 00 	lds	r24, 0x00E1
   1e58c:	87 7f       	andi	r24, 0xF7	; 247
   1e58e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1e592:	82 e0       	ldi	r24, 0x02	; 2
   1e594:	8e bb       	out	0x1e, r24	; 30
   1e596:	10 92 4a 01 	sts	0x014A, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1e59a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1e59e:	8e 7f       	andi	r24, 0xFE	; 254
   1e5a0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e5a4:	80 91 e2 00 	lds	r24, 0x00E2
   1e5a8:	8e 7f       	andi	r24, 0xFE	; 254
   1e5aa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e5ae:	80 91 e2 00 	lds	r24, 0x00E2
   1e5b2:	80 61       	ori	r24, 0x10	; 16
   1e5b4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e5b8:	42 e0       	ldi	r20, 0x02	; 2
   1e5ba:	60 e0       	ldi	r22, 0x00	; 0
   1e5bc:	80 e0       	ldi	r24, 0x00	; 0
   1e5be:	cf de       	rcall	.-610    	; 0x1e35e <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e5c0:	15 d1       	rcall	.+554    	; 0x1e7ec <USB_Event_Stub>
   1e5c2:	ff 91       	pop	r31
   1e5c4:	ef 91       	pop	r30
   1e5c6:	bf 91       	pop	r27
   1e5c8:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1e5ca:	9f 91       	pop	r25
   1e5cc:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1e5ce:	7f 91       	pop	r23
   1e5d0:	6f 91       	pop	r22
   1e5d2:	5f 91       	pop	r21
   1e5d4:	4f 91       	pop	r20
   1e5d6:	3f 91       	pop	r19
   1e5d8:	2f 91       	pop	r18
   1e5da:	0f 90       	pop	r0
   1e5dc:	0b be       	out	0x3b, r0	; 59
   1e5de:	0f 90       	pop	r0
   1e5e0:	0f be       	out	0x3f, r0	; 63
   1e5e2:	0f 90       	pop	r0
   1e5e4:	1f 90       	pop	r1
   1e5e6:	18 95       	reti

0001e5e8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1e5e8:	1f 93       	push	r17
   1e5ea:	cf 93       	push	r28
   1e5ec:	df 93       	push	r29
   1e5ee:	00 d0       	rcall	.+0      	; 0x1e5f0 <USB_Device_ProcessControlRequest+0x8>
   1e5f0:	cd b7       	in	r28, 0x3d	; 61
   1e5f2:	de b7       	in	r29, 0x3e	; 62
   1e5f4:	ec e4       	ldi	r30, 0x4C	; 76
   1e5f6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e5f8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1e5fc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1e5fe:	81 e0       	ldi	r24, 0x01	; 1
   1e600:	e4 35       	cpi	r30, 0x54	; 84
   1e602:	f8 07       	cpc	r31, r24
   1e604:	c9 f7       	brne	.-14     	; 0x1e5f8 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1e606:	a9 dd       	rcall	.-1198   	; 0x1e15a <EVENT_USB_Device_ControlRequest>
   1e608:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e60c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1e60e:	da c0       	rjmp	.+436    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e610:	90 91 4c 01 	lds	r25, 0x014C
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1e614:	80 91 4d 01 	lds	r24, 0x014D

		switch (USB_ControlRequest.bRequest)
   1e618:	85 30       	cpi	r24, 0x05	; 5
   1e61a:	09 f4       	brne	.+2      	; 0x1e61e <USB_Device_ProcessControlRequest+0x36>
   1e61c:	65 c0       	rjmp	.+202    	; 0x1e6e8 <USB_Device_ProcessControlRequest+0x100>
   1e61e:	30 f4       	brcc	.+12     	; 0x1e62c <USB_Device_ProcessControlRequest+0x44>
   1e620:	81 30       	cpi	r24, 0x01	; 1
   1e622:	59 f1       	breq	.+86     	; 0x1e67a <USB_Device_ProcessControlRequest+0x92>
   1e624:	68 f0       	brcs	.+26     	; 0x1e640 <USB_Device_ProcessControlRequest+0x58>
   1e626:	83 30       	cpi	r24, 0x03	; 3
   1e628:	41 f1       	breq	.+80     	; 0x1e67a <USB_Device_ProcessControlRequest+0x92>
   1e62a:	cc c0       	rjmp	.+408    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e62c:	88 30       	cpi	r24, 0x08	; 8
   1e62e:	09 f4       	brne	.+2      	; 0x1e632 <USB_Device_ProcessControlRequest+0x4a>
   1e630:	9c c0       	rjmp	.+312    	; 0x1e76a <USB_Device_ProcessControlRequest+0x182>
   1e632:	89 30       	cpi	r24, 0x09	; 9
   1e634:	09 f4       	brne	.+2      	; 0x1e638 <USB_Device_ProcessControlRequest+0x50>
   1e636:	ab c0       	rjmp	.+342    	; 0x1e78e <USB_Device_ProcessControlRequest+0x1a6>
   1e638:	86 30       	cpi	r24, 0x06	; 6
   1e63a:	09 f0       	breq	.+2      	; 0x1e63e <USB_Device_ProcessControlRequest+0x56>
   1e63c:	c3 c0       	rjmp	.+390    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e63e:	75 c0       	rjmp	.+234    	; 0x1e72a <USB_Device_ProcessControlRequest+0x142>
   1e640:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e642:	81 f0       	breq	.+32     	; 0x1e664 <USB_Device_ProcessControlRequest+0x7c>
   1e644:	92 38       	cpi	r25, 0x82	; 130
   1e646:	09 f0       	breq	.+2      	; 0x1e64a <USB_Device_ProcessControlRequest+0x62>
   1e648:	bd c0       	rjmp	.+378    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e64a:	80 91 50 01 	lds	r24, 0x0150
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e64e:	8f 70       	andi	r24, 0x0F	; 15
   1e650:	80 93 e9 00 	sts	0x00E9, r24
   1e654:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e658:	95 fb       	bst	r25, 5
   1e65a:	99 27       	eor	r25, r25
   1e65c:	90 f9       	bld	r25, 0
   1e65e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e662:	01 c0       	rjmp	.+2      	; 0x1e666 <USB_Device_ProcessControlRequest+0x7e>
   1e664:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1e666:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e66a:	87 7f       	andi	r24, 0xF7	; 247
   1e66c:	80 93 e8 00 	sts	0x00E8, r24
   1e670:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e674:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1e678:	83 c0       	rjmp	.+262    	; 0x1e780 <USB_Device_ProcessControlRequest+0x198>
   1e67a:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e67c:	2d 7f       	andi	r18, 0xFD	; 253
   1e67e:	09 f0       	breq	.+2      	; 0x1e682 <USB_Device_ProcessControlRequest+0x9a>
   1e680:	a1 c0       	rjmp	.+322    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e682:	92 30       	cpi	r25, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1e684:	09 f0       	breq	.+2      	; 0x1e688 <USB_Device_ProcessControlRequest+0xa0>
   1e686:	9e c0       	rjmp	.+316    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e688:	90 91 4e 01 	lds	r25, 0x014E

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1e68c:	91 11       	cpse	r25, r1
   1e68e:	26 c0       	rjmp	.+76     	; 0x1e6dc <USB_Device_ProcessControlRequest+0xf4>
   1e690:	20 91 50 01 	lds	r18, 0x0150
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1e694:	2f 70       	andi	r18, 0x0F	; 15
   1e696:	09 f4       	brne	.+2      	; 0x1e69a <USB_Device_ProcessControlRequest+0xb2>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1e698:	95 c0       	rjmp	.+298    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e69a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e69e:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1e6a2:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1e6a4:	1b c0       	rjmp	.+54     	; 0x1e6dc <USB_Device_ProcessControlRequest+0xf4>
   1e6a6:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1e6a8:	21 f4       	brne	.+8      	; 0x1e6b2 <USB_Device_ProcessControlRequest+0xca>
   1e6aa:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e6ae:	80 62       	ori	r24, 0x20	; 32
   1e6b0:	13 c0       	rjmp	.+38     	; 0x1e6d8 <USB_Device_ProcessControlRequest+0xf0>
   1e6b2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1e6b6:	80 61       	ori	r24, 0x10	; 16
   1e6b8:	80 93 eb 00 	sts	0x00EB, r24
   1e6bc:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1e6be:	90 e0       	ldi	r25, 0x00	; 0
   1e6c0:	02 2e       	mov	r0, r18
   1e6c2:	01 c0       	rjmp	.+2      	; 0x1e6c6 <USB_Device_ProcessControlRequest+0xde>
   1e6c4:	88 0f       	add	r24, r24
   1e6c6:	0a 94       	dec	r0
   1e6c8:	ea f7       	brpl	.-6      	; 0x1e6c4 <USB_Device_ProcessControlRequest+0xdc>
   1e6ca:	80 93 ea 00 	sts	0x00EA, r24
   1e6ce:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1e6d2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1e6d6:	88 60       	ori	r24, 0x08	; 8
   1e6d8:	80 93 eb 00 	sts	0x00EB, r24
   1e6dc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e6e0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e6e4:	87 7f       	andi	r24, 0xF7	; 247
   1e6e6:	4f c0       	rjmp	.+158    	; 0x1e786 <USB_Device_ProcessControlRequest+0x19e>
   1e6e8:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1e6ea:	6c c0       	rjmp	.+216    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e6ec:	10 91 4e 01 	lds	r17, 0x014E
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1e6f0:	1f 77       	andi	r17, 0x7F	; 127
   1e6f2:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1e6f6:	80 78       	andi	r24, 0x80	; 128
   1e6f8:	81 2b       	or	r24, r17
   1e6fa:	80 93 e3 00 	sts	0x00E3, r24
   1e6fe:	80 91 e8 00 	lds	r24, 0x00E8
   1e702:	87 7f       	andi	r24, 0xF7	; 247
   1e704:	80 93 e8 00 	sts	0x00E8, r24
   1e708:	3e de       	rcall	.-900    	; 0x1e386 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1e70a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e70e:	80 ff       	sbrs	r24, 0
   1e710:	fc cf       	rjmp	.-8      	; 0x1e70a <USB_Device_ProcessControlRequest+0x122>

	while (!(Endpoint_IsINReady()));
   1e712:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1e716:	80 68       	ori	r24, 0x80	; 128
   1e718:	80 93 e3 00 	sts	0x00E3, r24
   1e71c:	11 23       	and	r17, r17
   1e71e:	11 f0       	breq	.+4      	; 0x1e724 <USB_Device_ProcessControlRequest+0x13c>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1e720:	83 e0       	ldi	r24, 0x03	; 3
   1e722:	01 c0       	rjmp	.+2      	; 0x1e726 <USB_Device_ProcessControlRequest+0x13e>
   1e724:	82 e0       	ldi	r24, 0x02	; 2
   1e726:	8e bb       	out	0x1e, r24	; 30
   1e728:	4d c0       	rjmp	.+154    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e72a:	90 58       	subi	r25, 0x80	; 128
   1e72c:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e72e:	08 f0       	brcs	.+2      	; 0x1e732 <USB_Device_ProcessControlRequest+0x14a>
   1e730:	49 c0       	rjmp	.+146    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e732:	ae 01       	movw	r20, r28
   1e734:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1e736:	5f 4f       	sbci	r21, 0xFF	; 255
   1e738:	60 91 50 01 	lds	r22, 0x0150
   1e73c:	80 91 4e 01 	lds	r24, 0x014E
   1e740:	90 91 4f 01 	lds	r25, 0x014F
   1e744:	94 dd       	rcall	.-1240   	; 0x1e26e <CALLBACK_USB_GetDescriptor>
   1e746:	00 97       	sbiw	r24, 0x00	; 0
   1e748:	09 f4       	brne	.+2      	; 0x1e74c <USB_Device_ProcessControlRequest+0x164>
   1e74a:	3c c0       	rjmp	.+120    	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e74c:	20 91 e8 00 	lds	r18, 0x00E8
   1e750:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e752:	20 93 e8 00 	sts	0x00E8, r18
   1e756:	bc 01       	movw	r22, r24
   1e758:	89 81       	ldd	r24, Y+1	; 0x01
   1e75a:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1e75c:	a5 dd       	rcall	.-1206   	; 0x1e2a8 <Endpoint_Write_Control_Stream_LE>
   1e75e:	80 91 e8 00 	lds	r24, 0x00E8
   1e762:	8b 77       	andi	r24, 0x7B	; 123
   1e764:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e768:	2d c0       	rjmp	.+90     	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e76a:	90 38       	cpi	r25, 0x80	; 128
   1e76c:	59 f5       	brne	.+86     	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e76e:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1e772:	87 7f       	andi	r24, 0xF7	; 247
   1e774:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e778:	80 91 4a 01 	lds	r24, 0x014A
   1e77c:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1e780:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e784:	8e 77       	andi	r24, 0x7E	; 126
   1e786:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e78a:	fd dd       	rcall	.-1030   	; 0x1e386 <Endpoint_ClearStatusStage>
   1e78c:	1b c0       	rjmp	.+54     	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e78e:	91 11       	cpse	r25, r1
   1e790:	19 c0       	rjmp	.+50     	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1e792:	90 91 4e 01 	lds	r25, 0x014E
   1e796:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1e798:	a8 f4       	brcc	.+42     	; 0x1e7c4 <USB_Device_ProcessControlRequest+0x1dc>
   1e79a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1e79e:	87 7f       	andi	r24, 0xF7	; 247
   1e7a0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7a4:	90 93 4a 01 	sts	0x014A, r25
   1e7a8:	ee dd       	rcall	.-1060   	; 0x1e386 <Endpoint_ClearStatusStage>
   1e7aa:	80 91 4a 01 	lds	r24, 0x014A
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1e7ae:	81 11       	cpse	r24, r1
   1e7b0:	04 c0       	rjmp	.+8      	; 0x1e7ba <USB_Device_ProcessControlRequest+0x1d2>

	Endpoint_ClearStatusStage();
   1e7b2:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1e7b6:	87 ff       	sbrs	r24, 7
   1e7b8:	02 c0       	rjmp	.+4      	; 0x1e7be <USB_Device_ProcessControlRequest+0x1d6>
   1e7ba:	84 e0       	ldi	r24, 0x04	; 4
   1e7bc:	01 c0       	rjmp	.+2      	; 0x1e7c0 <USB_Device_ProcessControlRequest+0x1d8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e7be:	81 e0       	ldi	r24, 0x01	; 1
   1e7c0:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1e7c2:	c7 dc       	rcall	.-1650   	; 0x1e152 <EVENT_USB_Device_ConfigurationChanged>
   1e7c4:	80 91 e8 00 	lds	r24, 0x00E8
   1e7c8:	83 ff       	sbrs	r24, 3
   1e7ca:	0a c0       	rjmp	.+20     	; 0x1e7e0 <USB_Device_ProcessControlRequest+0x1f8>
   1e7cc:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1e7d0:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e7d2:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1e7d6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7da:	80 62       	ori	r24, 0x20	; 32
   1e7dc:	80 93 eb 00 	sts	0x00EB, r24
   1e7e0:	0f 90       	pop	r0
   1e7e2:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e7e4:	df 91       	pop	r29
   1e7e6:	cf 91       	pop	r28
   1e7e8:	1f 91       	pop	r17
   1e7ea:	08 95       	ret

0001e7ec <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1e7ec:	08 95       	ret

0001e7ee <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1e7ee:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e7f0:	8e b3       	in	r24, 0x1e	; 30
   1e7f2:	88 23       	and	r24, r24
   1e7f4:	a9 f0       	breq	.+42     	; 0x1e820 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1e7f6:	80 91 e9 00 	lds	r24, 0x00E9
   1e7fa:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1e7fc:	90 91 ec 00 	lds	r25, 0x00EC
   1e800:	90 ff       	sbrs	r25, 0
   1e802:	02 c0       	rjmp	.+4      	; 0x1e808 <USB_USBTask+0x1a>
   1e804:	90 e8       	ldi	r25, 0x80	; 128
   1e806:	01 c0       	rjmp	.+2      	; 0x1e80a <USB_USBTask+0x1c>
   1e808:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1e80a:	c9 2f       	mov	r28, r25
   1e80c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e80e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e812:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1e816:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1e818:	e7 de       	rcall	.-562    	; 0x1e5e8 <USB_Device_ProcessControlRequest>
   1e81a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e81c:	c0 93 e9 00 	sts	0x00E9, r28
   1e820:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1e822:	08 95       	ret

0001e824 <_exit>:
   1e824:	f8 94       	cli

0001e826 <__stop_program>:
   1e826:	ff cf       	rjmp	.-2      	; 0x1e826 <__stop_program>

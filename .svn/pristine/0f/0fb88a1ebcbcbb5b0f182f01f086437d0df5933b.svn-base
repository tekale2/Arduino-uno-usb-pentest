
MissileLauncher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800152  00800152  000010b4  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000110  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000890  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f210  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003647  00000000  00000000  0001164d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000052ff  00000000  00000000  00014c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001800  00000000  00000000  00019f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f30  00000000  00000000  0001b794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000aca6  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  0002b36a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c5       	rjmp	.+2690   	; 0xaac <__vector_10>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
  9a:	1f be       	out	0x3f, r1	; 63

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  aa:	ee ec       	ldi	r30, 0xCE	; 206
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 35       	cpi	r26, 0x52	; 82
  ba:	b1 07       	cpc	r27, r17
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a2 e5       	ldi	r26, 0x52	; 82
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 3a       	cpi	r26, 0xA1	; 161
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	fe d0       	rcall	.+508    	; 0x2cc <main>
  d0:	7c c7       	rjmp	.+3832   	; 0xfca <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <LEDs_SetAllLEDs>:
  d4:	9b b1       	in	r25, 0x0b	; 11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	9f 70       	andi	r25, 0x0F	; 15
  d8:	98 2b       	or	r25, r24
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	08 95       	ret

000000de <SetupHardware>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	84 b7       	in	r24, 0x34	; 52
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	84 bf       	out	0x34, r24	; 52
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	0f b6       	in	r0, 0x3f	; 63
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  e8:	f8 94       	cli
  ea:	80 93 60 00 	sts	0x0060, r24
  ee:	10 92 60 00 	sts	0x0060, r1
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	80 e8       	ldi	r24, 0x80	; 128
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	80 93 61 00 	sts	0x0061, r24
		ReportSize--;
 100:	90 93 61 00 	sts	0x0061, r25
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 104:	0f be       	out	0x3f, r0	; 63
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	80 6f       	ori	r24, 0xF0	; 240
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10a:	8a b9       	out	0x0a, r24	; 10
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	8b b9       	out	0x0b, r24	; 11
 112:	b1 d4       	rcall	.+2402   	; 0xa76 <USB_Init>
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8f 71       	andi	r24, 0x1F	; 31
 118:	84 b9       	out	0x04, r24	; 4
 11a:	8d b1       	in	r24, 0x0d	; 13
 11c:	8f 7c       	andi	r24, 0xCF	; 207
 11e:	8d b9       	out	0x0d, r24	; 13
 120:	85 b1       	in	r24, 0x05	; 5
 122:	80 6e       	ori	r24, 0xE0	; 224
 124:	85 b9       	out	0x05, r24	; 5
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	8e b1       	in	r24, 0x0e	; 14
 128:	80 63       	ori	r24, 0x30	; 48
 12a:	8e b9       	out	0x0e, r24	; 14
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	6a 98       	cbi	0x0d, 2	; 13
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	72 9a       	sbi	0x0e, 2	; 14
 130:	08 95       	ret

00000132 <EVENT_USB_Host_DeviceAttached>:
 132:	80 ea       	ldi	r24, 0xA0	; 160
 134:	cf cf       	rjmp	.-98     	; 0xd4 <LEDs_SetAllLEDs>

00000136 <EVENT_USB_Host_DeviceUnattached>:
 136:	80 e1       	ldi	r24, 0x10	; 16
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	cd cf       	rjmp	.-102    	; 0xd4 <LEDs_SetAllLEDs>

0000013a <EVENT_USB_Host_DeviceEnumerationComplete>:
 13a:	80 ea       	ldi	r24, 0xA0	; 160
 13c:	cb df       	rcall	.-106    	; 0xd4 <LEDs_SetAllLEDs>
 13e:	eb d0       	rcall	.+470    	; 0x316 <ProcessConfigurationDescriptor>
 140:	88 23       	and	r24, r24
 142:	11 f0       	breq	.+4      	; 0x148 <EVENT_USB_Host_DeviceEnumerationComplete+0xe>
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	80 e9       	ldi	r24, 0x90	; 144
 146:	05 c0       	rjmp	.+10     	; 0x152 <EVENT_USB_Host_DeviceEnumerationComplete+0x18>
				ReportData     += 4;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0c d7       	rcall	.+3608   	; 0xf64 <USB_Host_SetDeviceConfiguration>
 14c:	81 11       	cpse	r24, r1
				break;
 14e:	fa cf       	rjmp	.-12     	; 0x144 <EVENT_USB_Host_DeviceEnumerationComplete+0xa>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	c0 cf       	rjmp	.-128    	; 0xd4 <LEDs_SetAllLEDs>

00000154 <EVENT_USB_Host_HostError>:
 154:	29 d4       	rcall	.+2130   	; 0x9a8 <USB_Disable>
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	bd df       	rcall	.-134    	; 0xd4 <LEDs_SetAllLEDs>
 15a:	ff cf       	rjmp	.-2      	; 0x15a <EVENT_USB_Host_HostError+0x6>

0000015c <EVENT_USB_Host_DeviceEnumerationFailed>:
 15c:	80 e9       	ldi	r24, 0x90	; 144
 15e:	ba cf       	rjmp	.-140    	; 0xd4 <LEDs_SetAllLEDs>

00000160 <DiscardNextReport>:
 160:	8e b3       	in	r24, 0x1e	; 30
				ReportSize     -= 2;
 162:	8b 30       	cpi	r24, 0x0B	; 11
 164:	b1 f4       	brne	.+44     	; 0x192 <DiscardNextReport+0x32>
				ReportData     += 2;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 a7 00 	sts	0x00A7, r24
				break;
 16c:	80 91 a9 00 	lds	r24, 0x00A9

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	80 93 a9 00 	sts	0x00A9, r24
 176:	80 91 a6 00 	lds	r24, 0x00A6
				ReportSize     -= 1;
 17a:	80 ff       	sbrs	r24, 0
 17c:	05 c0       	rjmp	.+10     	; 0x188 <DiscardNextReport+0x28>
				ReportData     += 1;
 17e:	80 91 a6 00 	lds	r24, 0x00A6
 182:	8e 77       	andi	r24, 0x7E	; 126
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	80 93 a6 00 	sts	0x00A6, r24
 188:	80 91 a9 00 	lds	r24, 0x00A9
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 93 a9 00 	sts	0x00A9, r24
 192:	08 95       	ret

00000194 <WriteNextReport>:
 194:	2e b3       	in	r18, 0x1e	; 30
 196:	2b 30       	cpi	r18, 0x0B	; 11
 198:	b9 f5       	brne	.+110    	; 0x208 <WriteNextReport+0x74>
 19a:	22 e0       	ldi	r18, 0x02	; 2
 19c:	20 93 a7 00 	sts	0x00A7, r18
 1a0:	20 91 ac 00 	lds	r18, 0x00AC
 1a4:	27 ff       	sbrs	r18, 7
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <WriteNextReport+0x42>
 1a8:	20 91 a9 00 	lds	r18, 0x00A9

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1ac:	2f 7b       	andi	r18, 0xBF	; 191
 1ae:	20 93 a9 00 	sts	0x00A9, r18
 1b2:	20 91 a6 00 	lds	r18, 0x00A6
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	22 ff       	sbrs	r18, 2
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <WriteNextReport+0x36>
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	fe d2       	rcall	.+1532   	; 0x7bc <Pipe_Write_Stream_LE>
 1c0:	80 91 a6 00 	lds	r24, 0x00A6
 1c4:	8b 77       	andi	r24, 0x7B	; 123
 1c6:	80 93 a6 00 	sts	0x00A6, r24
 1ca:	80 91 a9 00 	lds	r24, 0x00A9
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 93 a9 00 	sts	0x00A9, r24
 1d4:	08 95       	ret
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	21 e2       	ldi	r18, 0x21	; 33
 1d8:	20 93 99 01 	sts	0x0199, r18
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	29 e0       	ldi	r18, 0x09	; 9
 1de:	20 93 9a 01 	sts	0x019A, r18
 1e2:	22 e0       	ldi	r18, 0x02	; 2
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	30 93 9c 01 	sts	0x019C, r19
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1ea:	20 93 9b 01 	sts	0x019B, r18
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	30 93 9e 01 	sts	0x019E, r19
 1f6:	20 93 9d 01 	sts	0x019D, r18
 1fa:	70 93 a0 01 	sts	0x01A0, r23
 1fe:	60 93 9f 01 	sts	0x019F, r22
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	10 92 a7 00 	sts	0x00A7, r1
				break;
 206:	b3 c5       	rjmp	.+2918   	; 0xd6e <USB_Host_SendControlRequest>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	08 95       	ret

0000020a <Send_Command_Report>:
 20a:	28 e0       	ldi	r18, 0x08	; 8
 20c:	fc 01       	movw	r30, r24
 20e:	a2 e5       	ldi	r26, 0x52	; 82
 210:	b1 e0       	ldi	r27, 0x01	; 1
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	2a 95       	dec	r18
 218:	e1 f7       	brne	.-8      	; 0x212 <Send_Command_Report+0x8>
 21a:	82 e5       	ldi	r24, 0x52	; 82
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	ba cf       	rjmp	.-140    	; 0x194 <WriteNextReport>

00000220 <Send_Command>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	80 91 92 01 	lds	r24, 0x0192
 22a:	90 91 93 01 	lds	r25, 0x0193
 22e:	89 52       	subi	r24, 0x29	; 41
 230:	91 40       	sbci	r25, 0x01	; 1
 232:	29 f4       	brne	.+10     	; 0x23e <Send_Command+0x1e>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	c9 32       	cpi	r28, 0x29	; 41
 238:	d8 07       	cpc	r29, r24
 23a:	29 f4       	brne	.+10     	; 0x246 <Send_Command+0x26>
 23c:	14 c0       	rjmp	.+40     	; 0x266 <Send_Command+0x46>
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	c9 32       	cpi	r28, 0x29	; 41
 242:	d2 07       	cpc	r29, r18
 244:	81 f4       	brne	.+32     	; 0x266 <Send_Command+0x46>
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	89 b9       	out	0x09, r24	; 9
 24a:	68 e0       	ldi	r22, 0x08	; 8
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	89 e3       	ldi	r24, 0x39	; 57
 250:	91 e0       	ldi	r25, 0x01	; 1
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	db df       	rcall	.-74     	; 0x20a <Send_Command_Report>
 254:	68 e0       	ldi	r22, 0x08	; 8
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	81 e3       	ldi	r24, 0x31	; 49
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	d6 df       	rcall	.-84     	; 0x20a <Send_Command_Report>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	60 e4       	ldi	r22, 0x40	; 64
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	d2 df       	rcall	.-92     	; 0x20a <Send_Command_Report>
 266:	d0 93 93 01 	sts	0x0193, r29
 26a:	c0 93 92 01 	sts	0x0192, r28
 26e:	df 91       	pop	r29
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	cf 91       	pop	r28
				break;
 272:	08 95       	ret

00000274 <Read_Joystick_Status>:

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	93 b1       	in	r25, 0x03	; 3
 276:	8c b1       	in	r24, 0x0c	; 12
 278:	80 95       	com	r24
 27a:	80 73       	andi	r24, 0x30	; 48
 27c:	86 95       	lsr	r24
 27e:	90 95       	com	r25
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	90 7e       	andi	r25, 0xE0	; 224
 282:	89 2b       	or	r24, r25
				break;
 284:	62 99       	sbic	0x0c, 2	; 12

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	03 c0       	rjmp	.+6      	; 0x28e <Read_Joystick_Status+0x1a>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	1d c0       	rjmp	.+58     	; 0x2c8 <Read_Joystick_Status+0x54>
 28e:	87 ff       	sbrs	r24, 7
				break;
 290:	03 c0       	rjmp	.+6      	; 0x298 <Read_Joystick_Status+0x24>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	81 e1       	ldi	r24, 0x11	; 17
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	18 c0       	rjmp	.+48     	; 0x2c8 <Read_Joystick_Status+0x54>
 298:	84 ff       	sbrs	r24, 4
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <Read_Joystick_Status+0x2e>
 29c:	89 e0       	ldi	r24, 0x09	; 9
 29e:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <Read_Joystick_Status+0x54>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	86 ff       	sbrs	r24, 6
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <Read_Joystick_Status+0x38>
 2a6:	81 e2       	ldi	r24, 0x21	; 33
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <Read_Joystick_Status+0x54>
				break;
 2ac:	83 ff       	sbrs	r24, 3

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <Read_Joystick_Status+0x42>
 2b0:	89 e1       	ldi	r24, 0x19	; 25
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <Read_Joystick_Status+0x54>
 2b6:	80 91 92 01 	lds	r24, 0x0192
 2ba:	90 91 93 01 	lds	r25, 0x0193
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	89 52       	subi	r24, 0x29	; 41
 2c0:	91 40       	sbci	r25, 0x01	; 1
 2c2:	19 f0       	breq	.+6      	; 0x2ca <Read_Joystick_Status+0x56>
 2c4:	89 e2       	ldi	r24, 0x29	; 41
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	ab cf       	rjmp	.-170    	; 0x220 <Send_Command>
 2ca:	08 95       	ret

000002cc <main>:
				break;
 2cc:	08 df       	rcall	.-496    	; 0xde <SetupHardware>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	89 e2       	ldi	r24, 0x29	; 41
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	90 93 93 01 	sts	0x0193, r25
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	80 93 92 01 	sts	0x0192, r24
 2da:	80 e1       	ldi	r24, 0x10	; 16

				if (ParserData->UsingReportIDs)
 2dc:	fb de       	rcall	.-522    	; 0xd4 <LEDs_SetAllLEDs>
 2de:	78 94       	sei
 2e0:	c9 df       	rcall	.-110    	; 0x274 <Read_Joystick_Status>
 2e2:	3e df       	rcall	.-388    	; 0x160 <DiscardNextReport>
 2e4:	65 d6       	rcall	.+3274   	; 0xfb0 <USB_USBTask>
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <main+0x14>

000002e8 <DComp_NextHIDInterface>:
 2e8:	fc 01       	movw	r30, r24
 2ea:	21 81       	ldd	r18, Z+1	; 0x01
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	24 30       	cpi	r18, 0x04	; 4
 2ee:	29 f4       	brne	.+10     	; 0x2fa <DComp_NextHIDInterface+0x12>
 2f0:	85 81       	ldd	r24, Z+5	; 0x05
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	11 f4       	brne	.+4      	; 0x2fa <DComp_NextHIDInterface+0x12>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	08 95       	ret

000002fe <DComp_NextHIDInterfaceDataEndpoint>:
 2fe:	fc 01       	movw	r30, r24
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	85 30       	cpi	r24, 0x05	; 5
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	21 f0       	breq	.+8      	; 0x30e <DComp_NextHIDInterfaceDataEndpoint+0x10>
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	21 f4       	brne	.+8      	; 0x312 <DComp_NextHIDInterfaceDataEndpoint+0x14>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	08 95       	ret

00000316 <ProcessConfigurationDescriptor>:
 316:	af 92       	push	r10
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	bf 92       	push	r11
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	c4 50       	subi	r28, 0x04	; 4
 330:	d2 40       	sbci	r29, 0x02	; 2
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	ae 01       	movw	r20, r28
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	4f 5f       	subi	r20, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	cd 5f       	subi	r28, 0xFD	; 253
 344:	dd 4f       	sbci	r29, 0xFD	; 253
 346:	59 83       	std	Y+1, r21	; 0x01
 348:	48 83       	st	Y, r20
 34a:	c3 50       	subi	r28, 0x03	; 3
 34c:	d2 40       	sbci	r29, 0x02	; 2
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	32 e0       	ldi	r19, 0x02	; 2
 352:	be 01       	movw	r22, r28
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7d 4f       	sbci	r23, 0xFD	; 253
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	55 d4       	rcall	.+2218   	; 0xc06 <USB_Host_GetDeviceConfigDescriptor>
 35c:	85 30       	cpi	r24, 0x05	; 5
 35e:	09 f4       	brne	.+2      	; 0x362 <ProcessConfigurationDescriptor+0x4c>
 360:	61 c0       	rjmp	.+194    	; 0x424 <ProcessConfigurationDescriptor+0x10e>
 362:	86 30       	cpi	r24, 0x06	; 6
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	21 f0       	breq	.+8      	; 0x36e <ProcessConfigurationDescriptor+0x58>
 366:	88 23       	and	r24, r24
 368:	21 f0       	breq	.+8      	; 0x372 <ProcessConfigurationDescriptor+0x5c>
 36a:	81 e0       	ldi	r24, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	60 c0       	rjmp	.+192    	; 0x42e <ProcessConfigurationDescriptor+0x118>
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	5e c0       	rjmp	.+188    	; 0x42e <ProcessConfigurationDescriptor+0x118>
 372:	a1 2c       	mov	r10, r1
 374:	b1 2c       	mov	r11, r1
 376:	c1 2c       	mov	r12, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	d1 2c       	mov	r13, r1
 37a:	00 e0       	ldi	r16, 0x00	; 0
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	01 15       	cp	r16, r1
 380:	11 05       	cpc	r17, r1
 382:	21 f4       	brne	.+8      	; 0x38c <ProcessConfigurationDescriptor+0x76>
 384:	c1 14       	cp	r12, r1
 386:	d1 04       	cpc	r13, r1
				break;
 388:	69 f0       	breq	.+26     	; 0x3a4 <ProcessConfigurationDescriptor+0x8e>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	34 c0       	rjmp	.+104    	; 0x3f4 <ProcessConfigurationDescriptor+0xde>
 38c:	4f e7       	ldi	r20, 0x7F	; 127
 38e:	51 e0       	ldi	r21, 0x01	; 1
 390:	be 01       	movw	r22, r28
 392:	6d 5f       	subi	r22, 0xFD	; 253
 394:	7d 4f       	sbci	r23, 0xFD	; 253
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	ce 01       	movw	r24, r28
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	9d 4f       	sbci	r25, 0xFD	; 253
 39c:	8e d4       	rcall	.+2332   	; 0xcba <USB_GetNextDescriptorComp>
 39e:	81 11       	cpse	r24, r1
 3a0:	f1 cf       	rjmp	.-30     	; 0x384 <ProcessConfigurationDescriptor+0x6e>
 3a2:	15 c0       	rjmp	.+42     	; 0x3ce <ProcessConfigurationDescriptor+0xb8>
 3a4:	44 e7       	ldi	r20, 0x74	; 116
 3a6:	51 e0       	ldi	r21, 0x01	; 1
 3a8:	be 01       	movw	r22, r28
 3aa:	6d 5f       	subi	r22, 0xFD	; 253
 3ac:	7d 4f       	sbci	r23, 0xFD	; 253
 3ae:	ce 01       	movw	r24, r28
				break;
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	9d 4f       	sbci	r25, 0xFD	; 253
 3b4:	82 d4       	rcall	.+2308   	; 0xcba <USB_GetNextDescriptorComp>
 3b6:	81 11       	cpse	r24, r1
 3b8:	37 c0       	rjmp	.+110    	; 0x428 <ProcessConfigurationDescriptor+0x112>
 3ba:	cd 5f       	subi	r28, 0xFD	; 253
 3bc:	dd 4f       	sbci	r29, 0xFD	; 253
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	08 81       	ld	r16, Y
 3c0:	19 81       	ldd	r17, Y+1	; 0x01
 3c2:	c3 50       	subi	r28, 0x03	; 3
 3c4:	d2 40       	sbci	r29, 0x02	; 2
 3c6:	e1 2c       	mov	r14, r1
 3c8:	f1 2c       	mov	r15, r1
 3ca:	57 01       	movw	r10, r14
 3cc:	d8 cf       	rjmp	.-80     	; 0x37e <ProcessConfigurationDescriptor+0x68>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	cd 5f       	subi	r28, 0xFD	; 253
 3d0:	dd 4f       	sbci	r29, 0xFD	; 253
 3d2:	e8 80       	ld	r14, Y

					while (CurrCollectionPath->Parent != NULL)
 3d4:	f9 80       	ldd	r15, Y+1	; 0x01
 3d6:	c3 50       	subi	r28, 0x03	; 3
 3d8:	d2 40       	sbci	r29, 0x02	; 2
 3da:	f7 01       	movw	r30, r14
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	87 ff       	sbrs	r24, 7
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <ProcessConfigurationDescriptor+0xd0>
 3e2:	67 01       	movw	r12, r14
 3e4:	75 01       	movw	r14, r10
 3e6:	c1 14       	cp	r12, r1
 3e8:	d1 04       	cpc	r13, r1
 3ea:	79 f3       	breq	.-34     	; 0x3ca <ProcessConfigurationDescriptor+0xb4>
 3ec:	e1 14       	cp	r14, r1
 3ee:	f1 04       	cpc	r15, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	61 f3       	breq	.-40     	; 0x3ca <ProcessConfigurationDescriptor+0xb4>
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <ProcessConfigurationDescriptor+0xe0>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	75 01       	movw	r14, r10
 3f6:	f6 01       	movw	r30, r12
 3f8:	24 81       	ldd	r18, Z+4	; 0x04
 3fa:	35 81       	ldd	r19, Z+5	; 0x05
 3fc:	01 e0       	ldi	r16, 0x01	; 1
 3fe:	42 81       	ldd	r20, Z+2	; 0x02
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	81 e8       	ldi	r24, 0x81	; 129
 404:	28 d2       	rcall	.+1104   	; 0x856 <Pipe_ConfigurePipe>
 406:	f6 01       	movw	r30, r12
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	86 81       	ldd	r24, Z+6	; 0x06
 40a:	80 93 ad 00 	sts	0x00AD, r24
 40e:	e1 14       	cp	r14, r1
 410:	f1 04       	cpc	r15, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	61 f0       	breq	.+24     	; 0x42c <ProcessConfigurationDescriptor+0x116>
 414:	f7 01       	movw	r30, r14
 416:	24 81       	ldd	r18, Z+4	; 0x04
 418:	35 81       	ldd	r19, Z+5	; 0x05
 41a:	42 81       	ldd	r20, Z+2	; 0x02
 41c:	63 e0       	ldi	r22, 0x03	; 3
 41e:	82 e0       	ldi	r24, 0x02	; 2

				if (UsageListSize)
 420:	1a d2       	rcall	.+1076   	; 0x856 <Pipe_ConfigurePipe>
 422:	04 c0       	rjmp	.+8      	; 0x42c <ProcessConfigurationDescriptor+0x116>
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	03 c0       	rjmp	.+6      	; 0x42e <ProcessConfigurationDescriptor+0x118>
 428:	84 e0       	ldi	r24, 0x04	; 4
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	01 c0       	rjmp	.+2      	; 0x42e <ProcessConfigurationDescriptor+0x118>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	cc 5f       	subi	r28, 0xFC	; 252
 430:	dd 4f       	sbci	r29, 0xFD	; 253
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
					  UsageList[i - 1] = UsageList[i];
 44c:	bf 90       	pop	r11
 44e:	af 90       	pop	r10
 450:	08 95       	ret

00000452 <USB_Host_ResetDevice>:
 452:	80 91 9e 00 	lds	r24, 0x009E

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 456:	81 70       	andi	r24, 0x01	; 1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	90 91 a0 00 	lds	r25, 0x00A0
 45c:	9d 7f       	andi	r25, 0xFD	; 253
 45e:	90 93 a0 00 	sts	0x00A0, r25
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	90 91 9e 00 	lds	r25, 0x009E
 466:	92 60       	ori	r25, 0x02	; 2
 468:	90 93 9e 00 	sts	0x009E, r25
 46c:	90 91 9e 00 	lds	r25, 0x009E
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 470:	91 fd       	sbrc	r25, 1
 472:	fc cf       	rjmp	.-8      	; 0x46c <USB_Host_ResetDevice+0x1a>
 474:	90 91 9e 00 	lds	r25, 0x009E
 478:	91 60       	ori	r25, 0x01	; 1
 47a:	90 93 9e 00 	sts	0x009E, r25
 47e:	10 92 97 01 	sts	0x0197, r1
 482:	90 91 a0 00 	lds	r25, 0x00A0
 486:	90 72       	andi	r25, 0x20	; 32
 488:	20 91 a0 00 	lds	r18, 0x00A0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48c:	2f 7d       	andi	r18, 0xDF	; 223
 48e:	20 93 a0 00 	sts	0x00A0, r18
 492:	20 91 9f 00 	lds	r18, 0x009F
 496:	2f 7d       	andi	r18, 0xDF	; 223
 498:	20 93 9f 00 	sts	0x009F, r18
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49c:	2a e0       	ldi	r18, 0x0A	; 10
 49e:	30 91 9f 00 	lds	r19, 0x009F
 4a2:	35 ff       	sbrs	r19, 5
 4a4:	0b c0       	rjmp	.+22     	; 0x4bc <USB_Host_ResetDevice+0x6a>
 4a6:	20 91 9f 00 	lds	r18, 0x009F
 4aa:	2f 7d       	andi	r18, 0xDF	; 223
				break;
 4ac:	20 93 9f 00 	sts	0x009F, r18
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4b0:	20 91 9f 00 	lds	r18, 0x009F
 4b4:	2d 7f       	andi	r18, 0xFD	; 253
 4b6:	20 93 9f 00 	sts	0x009F, r18
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <USB_Host_ResetDevice+0x7a>
 4bc:	ef ec       	ldi	r30, 0xCF	; 207
 4be:	f7 e0       	ldi	r31, 0x07	; 7
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <USB_Host_ResetDevice+0x6e>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <USB_Host_ResetDevice+0x74>
 4c6:	00 00       	nop
 4c8:	21 50       	subi	r18, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	49 f7       	brne	.-46     	; 0x49e <USB_Host_ResetDevice+0x4c>
 4cc:	99 23       	and	r25, r25
 4ce:	29 f0       	breq	.+10     	; 0x4da <USB_Host_ResetDevice+0x88>
 4d0:	90 91 a0 00 	lds	r25, 0x00A0
 4d4:	90 62       	ori	r25, 0x20	; 32
 4d6:	90 93 a0 00 	sts	0x00A0, r25
 4da:	81 11       	cpse	r24, r1
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <USB_Host_ResetDevice+0x96>
 4de:	80 91 9e 00 	lds	r24, 0x009E
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	80 93 9e 00 	sts	0x009E, r24
 4e8:	80 91 a0 00 	lds	r24, 0x00A0
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 93 a0 00 	sts	0x00A0, r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	08 95       	ret

000004f4 <USB_Host_WaitMS>:
 4f4:	20 91 9e 00 	lds	r18, 0x009E
 4f8:	21 70       	andi	r18, 0x01	; 1
 4fa:	90 91 a0 00 	lds	r25, 0x00A0
 4fe:	90 72       	andi	r25, 0x20	; 32
 500:	30 91 a0 00 	lds	r19, 0x00A0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 504:	3f 7d       	andi	r19, 0xDF	; 223
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	30 93 a0 00 	sts	0x00A0, r19
 50a:	30 91 9f 00 	lds	r19, 0x009F
 50e:	3f 7d       	andi	r19, 0xDF	; 223
 510:	30 93 9f 00 	sts	0x009F, r19
 514:	30 91 9e 00 	lds	r19, 0x009E
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 518:	31 60       	ori	r19, 0x01	; 1
 51a:	30 93 9e 00 	sts	0x009E, r19

					if (UsageListSize)
 51e:	88 23       	and	r24, r24
 520:	31 f1       	breq	.+76     	; 0x56e <USB_Host_WaitMS+0x7a>
 522:	30 91 9f 00 	lds	r19, 0x009F
 526:	35 ff       	sbrs	r19, 5
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	06 c0       	rjmp	.+12     	; 0x536 <USB_Host_WaitMS+0x42>
 52a:	30 91 9f 00 	lds	r19, 0x009F
 52e:	3f 7d       	andi	r19, 0xDF	; 223
 530:	30 93 9f 00 	sts	0x009F, r19
 534:	81 50       	subi	r24, 0x01	; 1
 536:	3e b3       	in	r19, 0x1e	; 30
 538:	31 30       	cpi	r19, 0x01	; 1
 53a:	c1 f0       	breq	.+48     	; 0x56c <USB_Host_WaitMS+0x78>
 53c:	30 91 a6 00 	lds	r19, 0x00A6

						for (uint8_t i = 1; i < UsageListSize; i++)
 540:	34 ff       	sbrs	r19, 4
 542:	09 c0       	rjmp	.+18     	; 0x556 <USB_Host_WaitMS+0x62>
 544:	10 92 f5 00 	sts	0x00F5, r1
 548:	80 91 a6 00 	lds	r24, 0x00A6
						  UsageList[i - 1] = UsageList[i];
 54c:	8f 7e       	andi	r24, 0xEF	; 239
 54e:	80 93 a6 00 	sts	0x00A6, r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0c c0       	rjmp	.+24     	; 0x56e <USB_Host_WaitMS+0x7a>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	30 91 a6 00 	lds	r19, 0x00A6
 55a:	31 ff       	sbrs	r19, 1
 55c:	e0 cf       	rjmp	.-64     	; 0x51e <USB_Host_WaitMS+0x2a>
 55e:	80 91 a6 00 	lds	r24, 0x00A6
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 562:	8d 7f       	andi	r24, 0xFD	; 253
 564:	80 93 a6 00 	sts	0x00A6, r24
 568:	83 e0       	ldi	r24, 0x03	; 3
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	01 c0       	rjmp	.+2      	; 0x56e <USB_Host_WaitMS+0x7a>
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	21 11       	cpse	r18, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <USB_Host_WaitMS+0x88>
 572:	20 91 9e 00 	lds	r18, 0x009E
 576:	2e 7f       	andi	r18, 0xFE	; 254
 578:	20 93 9e 00 	sts	0x009E, r18
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	99 23       	and	r25, r25
 57e:	29 f0       	breq	.+10     	; 0x58a <USB_Host_WaitMS+0x96>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	90 91 a0 00 	lds	r25, 0x00A0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	90 62       	ori	r25, 0x20	; 32
 586:	90 93 a0 00 	sts	0x00A0, r25
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 58a:	08 95       	ret

0000058c <USB_Host_ProcessNextHostState>:
 58c:	0f 93       	push	r16
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	28 97       	sbiw	r28, 0x08	; 8
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	8e b3       	in	r24, 0x1e	; 30
 5a6:	85 30       	cpi	r24, 0x05	; 5
 5a8:	09 f4       	brne	.+2      	; 0x5ac <USB_Host_ProcessNextHostState+0x20>
 5aa:	97 c0       	rjmp	.+302    	; 0x6da <USB_Host_ProcessNextHostState+0x14e>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	60 f4       	brcc	.+24     	; 0x5c6 <USB_Host_ProcessNextHostState+0x3a>
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	c9 f1       	breq	.+114    	; 0x624 <USB_Host_ProcessNextHostState+0x98>
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <USB_Host_ProcessNextHostState+0x2e>
 5b4:	88 23       	and	r24, r24
 5b6:	c9 f0       	breq	.+50     	; 0x5ea <USB_Host_ProcessNextHostState+0x5e>
 5b8:	f6 c0       	rjmp	.+492    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 5ba:	83 30       	cpi	r24, 0x03	; 3

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	e1 f1       	breq	.+120    	; 0x636 <USB_Host_ProcessNextHostState+0xaa>
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <USB_Host_ProcessNextHostState+0x38>
 5c2:	64 c0       	rjmp	.+200    	; 0x68c <USB_Host_ProcessNextHostState+0x100>
 5c4:	f0 c0       	rjmp	.+480    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 5c6:	87 30       	cpi	r24, 0x07	; 7
 5c8:	09 f4       	brne	.+2      	; 0x5cc <USB_Host_ProcessNextHostState+0x40>
 5ca:	a1 c0       	rjmp	.+322    	; 0x70e <USB_Host_ProcessNextHostState+0x182>
 5cc:	08 f4       	brcc	.+2      	; 0x5d0 <USB_Host_ProcessNextHostState+0x44>
 5ce:	91 c0       	rjmp	.+290    	; 0x6f2 <USB_Host_ProcessNextHostState+0x166>
 5d0:	88 30       	cpi	r24, 0x08	; 8
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <USB_Host_ProcessNextHostState+0x4a>
 5d4:	b9 c0       	rjmp	.+370    	; 0x748 <USB_Host_ProcessNextHostState+0x1bc>
 5d6:	89 30       	cpi	r24, 0x09	; 9
 5d8:	09 f0       	breq	.+2      	; 0x5dc <USB_Host_ProcessNextHostState+0x50>
 5da:	e5 c0       	rjmp	.+458    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 a1 00 	sts	0x00A1, r24
 5e2:	8a e0       	ldi	r24, 0x0A	; 10
 5e4:	8e bb       	out	0x1e, r24	; 30
 5e6:	a9 dd       	rcall	.-1198   	; 0x13a <EVENT_USB_Host_DeviceEnumerationComplete>
 5e8:	de c0       	rjmp	.+444    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 5ea:	00 91 95 01 	lds	r16, 0x0195
 5ee:	10 91 96 01 	lds	r17, 0x0196
 5f2:	01 15       	cp	r16, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	11 05       	cpc	r17, r1
 5f6:	09 f4       	brne	.+2      	; 0x5fa <USB_Host_ProcessNextHostState+0x6e>
 5f8:	d6 c0       	rjmp	.+428    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	7b df       	rcall	.-266    	; 0x4f4 <USB_Host_WaitMS>
					  return HID_PARSE_InsufficientReportItems;
 5fe:	88 23       	and	r24, r24
 600:	29 f0       	breq	.+10     	; 0x60c <USB_Host_ProcessNextHostState+0x80>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	90 91 94 01 	lds	r25, 0x0194
 606:	9e bb       	out	0x1e, r25	; 30
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	c0 c0       	rjmp	.+384    	; 0x78c <USB_Host_ProcessNextHostState+0x200>
 60c:	01 50       	subi	r16, 0x01	; 1
 60e:	11 09       	sbc	r17, r1
 610:	10 93 96 01 	sts	0x0196, r17
 614:	00 93 95 01 	sts	0x0195, r16
 618:	01 2b       	or	r16, r17
 61a:	09 f0       	breq	.+2      	; 0x61e <USB_Host_ProcessNextHostState+0x92>
 61c:	c4 c0       	rjmp	.+392    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 61e:	80 91 94 01 	lds	r24, 0x0194
 622:	07 c0       	rjmp	.+14     	; 0x632 <USB_Host_ProcessNextHostState+0xa6>
 624:	88 ee       	ldi	r24, 0xE8	; 232
 626:	93 e0       	ldi	r25, 0x03	; 3
 628:	90 93 96 01 	sts	0x0196, r25
 62c:	80 93 95 01 	sts	0x0195, r24
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	8e bb       	out	0x1e, r24	; 30
 634:	b8 c0       	rjmp	.+368    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 636:	80 91 95 01 	lds	r24, 0x0195
 63a:	90 91 96 01 	lds	r25, 0x0196
 63e:	9c 01       	movw	r18, r24
 640:	21 50       	subi	r18, 0x01	; 1
 642:	31 09       	sbc	r19, r1
 644:	30 93 96 01 	sts	0x0196, r19
 648:	20 93 95 01 	sts	0x0195, r18
 64c:	89 2b       	or	r24, r25
 64e:	39 f0       	breq	.+14     	; 0x65e <USB_Host_ProcessNextHostState+0xd2>
 650:	8f ec       	ldi	r24, 0xCF	; 207
 652:	97 e0       	ldi	r25, 0x07	; 7
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <USB_Host_ProcessNextHostState+0xc8>
 658:	00 c0       	rjmp	.+0      	; 0x65a <USB_Host_ProcessNextHostState+0xce>
 65a:	00 00       	nop
 65c:	a4 c0       	rjmp	.+328    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 65e:	77 98       	cbi	0x0e, 7	; 14
 660:	80 91 d8 00 	lds	r24, 0x00D8
 664:	80 61       	ori	r24, 0x10	; 16
 666:	80 93 d8 00 	sts	0x00D8, r24
 66a:	80 91 dd 00 	lds	r24, 0x00DD
 66e:	8b 7f       	andi	r24, 0xFB	; 251
 670:	80 93 dd 00 	sts	0x00DD, r24
 674:	80 91 d7 00 	lds	r24, 0x00D7
 678:	80 61       	ori	r24, 0x10	; 16
 67a:	80 93 d7 00 	sts	0x00D7, r24
 67e:	80 91 dd 00 	lds	r24, 0x00DD
 682:	82 60       	ori	r24, 0x02	; 2
 684:	80 93 dd 00 	sts	0x00DD, r24
					  ParserData->TotalReportItems++;
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	d3 cf       	rjmp	.-90     	; 0x632 <USB_Host_ProcessNextHostState+0xa6>
 68c:	80 91 9f 00 	lds	r24, 0x009F
 690:	80 ff       	sbrs	r24, 0

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	89 c0       	rjmp	.+274    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 694:	80 91 9f 00 	lds	r24, 0x009F
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	80 93 9f 00 	sts	0x009F, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	80 91 9f 00 	lds	r24, 0x009F
 6a2:	8d 7f       	andi	r24, 0xFD	; 253
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	80 93 9f 00 	sts	0x009F, r24
 6a8:	80 91 df 00 	lds	r24, 0x00DF
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6ac:	8d 7f       	andi	r24, 0xFD	; 253
 6ae:	80 93 df 00 	sts	0x00DF, r24
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	80 91 de 00 	lds	r24, 0x00DE
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	80 93 de 00 	sts	0x00DE, r24
	  return HID_PARSE_NoUnfilteredReportItems;
 6bc:	80 91 9e 00 	lds	r24, 0x009E

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6c0:	81 60       	ori	r24, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	80 93 9e 00 	sts	0x009E, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	2f d1       	rcall	.+606    	; 0x926 <Pipe_ClearPipes>
 6c8:	1e ba       	out	0x1e, r1	; 30
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	84 e6       	ldi	r24, 0x64	; 100
 6cc:	90 e0       	ldi	r25, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	90 93 96 01 	sts	0x0196, r25
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	80 93 95 01 	sts	0x0195, r24
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	85 e0       	ldi	r24, 0x05	; 5

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <USB_Host_ProcessNextHostState+0x160>
 6da:	bb de       	rcall	.-650    	; 0x452 <USB_Host_ResetDevice>
 6dc:	1e ba       	out	0x1e, r1	; 30
 6de:	88 ec       	ldi	r24, 0xC8	; 200
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 96 01 	sts	0x0196, r25
 6e6:	80 93 95 01 	sts	0x0195, r24
 6ea:	86 e0       	ldi	r24, 0x06	; 6
 6ec:	80 93 94 01 	sts	0x0194, r24
 6f0:	5a c0       	rjmp	.+180    	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 6f2:	01 e0       	ldi	r16, 0x01	; 1
 6f4:	20 e4       	ldi	r18, 0x40	; 64
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	40 e0       	ldi	r20, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	ab d0       	rcall	.+342    	; 0x856 <Pipe_ConfigurePipe>
 700:	81 11       	cpse	r24, r1
 702:	03 c0       	rjmp	.+6      	; 0x70a <USB_Host_ProcessNextHostState+0x17e>
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	41 c0       	rjmp	.+130    	; 0x78c <USB_Host_ProcessNextHostState+0x200>
 70a:	87 e0       	ldi	r24, 0x07	; 7
			USB_Host_ResetDevice();

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
 70c:	92 cf       	rjmp	.-220    	; 0x632 <USB_Host_ProcessNextHostState+0xa6>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
 70e:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
 710:	e1 e4       	ldi	r30, 0x41	; 65
 712:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
 714:	a9 e9       	ldi	r26, 0x99	; 153
 716:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
 718:	01 90       	ld	r0, Z+
 71a:	0d 92       	st	X+, r0
 71c:	8a 95       	dec	r24
 71e:	e1 f7       	brne	.-8      	; 0x718 <USB_Host_ProcessNextHostState+0x18c>
 720:	10 92 a7 00 	sts	0x00A7, r1
 724:	ce 01       	movw	r24, r28
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	22 d3       	rcall	.+1604   	; 0xd6e <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 72a:	81 11       	cpse	r24, r1
 72c:	2e c0       	rjmp	.+92     	; 0x78a <USB_Host_ProcessNextHostState+0x1fe>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
 72e:	88 85       	ldd	r24, Y+8	; 0x08
 730:	80 93 00 01 	sts	0x0100, r24
 734:	8e de       	rcall	.-740    	; 0x452 <USB_Host_ResetDevice>
 736:	1e ba       	out	0x1e, r1	; 30
 738:	88 ec       	ldi	r24, 0xC8	; 200
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 93 96 01 	sts	0x0196, r25

			USB_Host_ResetDevice();
 740:	80 93 95 01 	sts	0x0195, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
 744:	88 e0       	ldi	r24, 0x08	; 8
 746:	d2 cf       	rjmp	.-92     	; 0x6ec <USB_Host_ProcessNextHostState+0x160>
 748:	20 91 00 01 	lds	r18, 0x0100
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	01 e0       	ldi	r16, 0x01	; 1
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
 756:	7f d0       	rcall	.+254    	; 0x856 <Pipe_ConfigurePipe>
 758:	88 23       	and	r24, r24
 75a:	a1 f2       	breq	.-88     	; 0x704 <USB_Host_ProcessNextHostState+0x178>
 75c:	88 e0       	ldi	r24, 0x08	; 8
 75e:	e9 e4       	ldi	r30, 0x49	; 73
 760:	f1 e0       	ldi	r31, 0x01	; 1
 762:	a9 e9       	ldi	r26, 0x99	; 153
 764:	b1 e0       	ldi	r27, 0x01	; 1
 766:	01 90       	ld	r0, Z+
 768:	0d 92       	st	X+, r0
 76a:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
 76c:	e1 f7       	brne	.-8      	; 0x766 <USB_Host_ProcessNextHostState+0x1da>
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	fd d2       	rcall	.+1530   	; 0xd6e <USB_Host_SendControlRequest>
 774:	81 11       	cpse	r24, r1
 776:	09 c0       	rjmp	.+18     	; 0x78a <USB_Host_ProcessNextHostState+0x1fe>
 778:	1e ba       	out	0x1e, r1	; 30
 77a:	84 e6       	ldi	r24, 0x64	; 100
 77c:	90 e0       	ldi	r25, 0x00	; 0
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
 77e:	90 93 96 01 	sts	0x0196, r25
 782:	80 93 95 01 	sts	0x0195, r24
 786:	89 e0       	ldi	r24, 0x09	; 9
 788:	b1 cf       	rjmp	.-158    	; 0x6ec <USB_Host_ProcessNextHostState+0x160>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
 78a:	93 e0       	ldi	r25, 0x03	; 3
 78c:	2e b3       	in	r18, 0x1e	; 30
 78e:	21 30       	cpi	r18, 0x01	; 1
 790:	51 f0       	breq	.+20     	; 0x7a6 <USB_Host_ProcessNextHostState+0x21a>
 792:	68 2f       	mov	r22, r24
 794:	89 2f       	mov	r24, r25
 796:	e2 dc       	rcall	.-1596   	; 0x15c <EVENT_USB_Host_DeviceEnumerationFailed>
 798:	80 91 dd 00 	lds	r24, 0x00DD
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
 79c:	81 60       	ori	r24, 0x01	; 1

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
 79e:	80 93 dd 00 	sts	0x00DD, r24
 7a2:	c9 dc       	rcall	.-1646   	; 0x136 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
 7a4:	19 d1       	rcall	.+562    	; 0x9d8 <USB_ResetInterface>
 7a6:	28 96       	adiw	r28, 0x08	; 8
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16

		USB_ResetInterface();
 7ba:	08 95       	ret

000007bc <Pipe_Write_Stream_LE>:
 7bc:	cf 92       	push	r12
	}
}
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	7c 01       	movw	r14, r24
 7ce:	8b 01       	movw	r16, r22
 7d0:	ea 01       	movw	r28, r20
 7d2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 7d6:	8f 7c       	andi	r24, 0xCF	; 207
 7d8:	80 62       	ori	r24, 0x20	; 32
 7da:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
 7de:	b7 d0       	rcall	.+366    	; 0x94e <Pipe_WaitUntilReady>
 7e0:	81 11       	cpse	r24, r1
 7e2:	30 c0       	rjmp	.+96     	; 0x844 <Pipe_Write_Stream_LE+0x88>
 7e4:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
 7e6:	31 f0       	breq	.+12     	; 0x7f4 <Pipe_Write_Stream_LE+0x38>
 7e8:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
 7ea:	99 81       	ldd	r25, Y+1	; 0x01
 7ec:	08 1b       	sub	r16, r24
 7ee:	19 0b       	sbc	r17, r25
 7f0:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 7f2:	f9 1e       	adc	r15, r25
 7f4:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7f6:	d1 2c       	mov	r13, r1
 7f8:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 7fa:	11 05       	cpc	r17, r1
 7fc:	11 f1       	breq	.+68     	; 0x842 <Pipe_Write_Stream_LE+0x86>
 7fe:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
 802:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
 804:	13 c0       	rjmp	.+38     	; 0x82c <Pipe_Write_Stream_LE+0x70>
 806:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 80a:	8b 77       	andi	r24, 0x7B	; 123
 80c:	80 93 a6 00 	sts	0x00A6, r24
 810:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
 812:	41 f0       	breq	.+16     	; 0x824 <Pipe_Write_Stream_LE+0x68>
 814:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
 816:	99 81       	ldd	r25, Y+1	; 0x01
 818:	8c 0d       	add	r24, r12
 81a:	9d 1d       	adc	r25, r13
 81c:	99 83       	std	Y+1, r25	; 0x01
 81e:	88 83       	st	Y, r24
 820:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
 822:	10 c0       	rjmp	.+32     	; 0x844 <Pipe_Write_Stream_LE+0x88>
 824:	94 d0       	rcall	.+296    	; 0x94e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
 826:	88 23       	and	r24, r24
 828:	39 f3       	breq	.-50     	; 0x7f8 <Pipe_Write_Stream_LE+0x3c>
 82a:	0c c0       	rjmp	.+24     	; 0x844 <Pipe_Write_Stream_LE+0x88>
 82c:	f7 01       	movw	r30, r14
 82e:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 830:	7f 01       	movw	r14, r30
 832:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 836:	01 50       	subi	r16, 0x01	; 1
 838:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 83a:	ff ef       	ldi	r31, 0xFF	; 255
 83c:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
 83e:	df 0a       	sbc	r13, r31
 840:	db cf       	rjmp	.-74     	; 0x7f8 <Pipe_Write_Stream_LE+0x3c>
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
 846:	cf 91       	pop	r28
}
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	ff 90       	pop	r15
 84e:	ef 90       	pop	r14
 850:	df 90       	pop	r13
 852:	cf 90       	pop	r12
 854:	08 95       	ret

00000856 <Pipe_ConfigurePipe>:
 856:	0f 93       	push	r16
 858:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
 85a:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
 85c:	87 ff       	sbrs	r24, 7
 85e:	02 c0       	rjmp	.+4      	; 0x864 <Pipe_ConfigurePipe+0xe>
 860:	80 e1       	ldi	r24, 0x10	; 16
 862:	01 c0       	rjmp	.+2      	; 0x866 <Pipe_ConfigurePipe+0x10>
 864:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
 866:	e7 30       	cpi	r30, 0x07	; 7
 868:	10 f0       	brcs	.+4      	; 0x86e <Pipe_ConfigurePipe+0x18>
	  return false;
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	5a c0       	rjmp	.+180    	; 0x922 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
 86e:	61 11       	cpse	r22, r1
 870:	01 c0       	rjmp	.+2      	; 0x874 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
 872:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
 874:	90 e4       	ldi	r25, 0x40	; 64
 876:	69 9f       	mul	r22, r25
 878:	b0 01       	movw	r22, r0
 87a:	11 24       	eor	r1, r1
 87c:	4f 70       	andi	r20, 0x0F	; 15
 87e:	46 2b       	or	r20, r22
 880:	48 2b       	or	r20, r24
 882:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 884:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
 888:	5e 13       	cpse	r21, r30
 88a:	19 c0       	rjmp	.+50     	; 0x8be <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
 88c:	02 30       	cpi	r16, 0x02	; 2
 88e:	10 f0       	brcs	.+4      	; 0x894 <Pipe_ConfigurePipe+0x3e>
 890:	76 e0       	ldi	r23, 0x06	; 6
 892:	01 c0       	rjmp	.+2      	; 0x896 <Pipe_ConfigurePipe+0x40>
 894:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 896:	88 e0       	ldi	r24, 0x08	; 8
 898:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 89a:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
 89c:	82 17       	cp	r24, r18
 89e:	93 07       	cpc	r25, r19
 8a0:	40 f0       	brcs	.+16     	; 0x8b2 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 8a2:	86 2f       	mov	r24, r22
 8a4:	82 95       	swap	r24
 8a6:	80 7f       	andi	r24, 0xF0	; 240
 8a8:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
 8aa:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
 8ac:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	0e c0       	rjmp	.+28     	; 0x8ce <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
 8b2:	65 30       	cpi	r22, 0x05	; 5
 8b4:	b1 f3       	breq	.-20     	; 0x8a2 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
 8b6:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	ef cf       	rjmp	.-34     	; 0x89c <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
 8be:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
 8c2:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
 8c6:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
 8ca:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
 8ce:	81 fd       	sbrc	r24, 1
 8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
 8d2:	5f 5f       	subi	r21, 0xFF	; 255
 8d4:	57 30       	cpi	r21, 0x07	; 7
 8d6:	b1 f6       	brne	.-84     	; 0x884 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 8d8:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	21 c0       	rjmp	.+66     	; 0x922 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
 8e0:	90 91 a9 00 	lds	r25, 0x00A9
 8e4:	9e 7f       	andi	r25, 0xFE	; 254
 8e6:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
 8ea:	90 91 ab 00 	lds	r25, 0x00AB
 8ee:	9d 7f       	andi	r25, 0xFD	; 253
 8f0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
 8f4:	90 91 a9 00 	lds	r25, 0x00A9
 8f8:	91 60       	ori	r25, 0x01	; 1
 8fa:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
 8fe:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
 902:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
 906:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
 90a:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
 90e:	80 91 a9 00 	lds	r24, 0x00A9
 912:	80 62       	ori	r24, 0x20	; 32
 914:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
 918:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
 91c:	87 fd       	sbrc	r24, 7
 91e:	d9 cf       	rjmp	.-78     	; 0x8d2 <Pipe_ConfigurePipe+0x7c>
 920:	a4 cf       	rjmp	.-184    	; 0x86a <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
 922:	0f 91       	pop	r16
 924:	08 95       	ret

00000926 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
 926:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
 92a:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 92c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
 930:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
 934:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
 938:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
 93c:	90 91 a9 00 	lds	r25, 0x00A9
 940:	9e 7f       	andi	r25, 0xFE	; 254
 942:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
 946:	8f 5f       	subi	r24, 0xFF	; 255
 948:	87 30       	cpi	r24, 0x07	; 7
 94a:	81 f7       	brne	.-32     	; 0x92c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
 94c:	08 95       	ret

0000094e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
 94e:	80 91 a2 00 	lds	r24, 0x00A2
 952:	90 91 a3 00 	lds	r25, 0x00A3
 956:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
 958:	20 91 aa 00 	lds	r18, 0x00AA
 95c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
 95e:	20 31       	cpi	r18, 0x10	; 16
 960:	29 f4       	brne	.+10     	; 0x96c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
 962:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
 966:	20 ff       	sbrs	r18, 0
 968:	05 c0       	rjmp	.+10     	; 0x974 <Pipe_WaitUntilReady+0x26>
 96a:	16 c0       	rjmp	.+44     	; 0x998 <Pipe_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
 96c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
 970:	22 fd       	sbrc	r18, 2
 972:	12 c0       	rjmp	.+36     	; 0x998 <Pipe_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
 974:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
 978:	21 fd       	sbrc	r18, 1
 97a:	10 c0       	rjmp	.+32     	; 0x99c <Pipe_WaitUntilReady+0x4e>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
 97c:	2e b3       	in	r18, 0x1e	; 30
 97e:	21 30       	cpi	r18, 0x01	; 1
 980:	79 f0       	breq	.+30     	; 0x9a0 <Pipe_WaitUntilReady+0x52>
 982:	20 91 a2 00 	lds	r18, 0x00A2
 986:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 98a:	28 17       	cp	r18, r24
 98c:	39 07       	cpc	r19, r25
 98e:	21 f3       	breq	.-56     	; 0x958 <Pipe_WaitUntilReady+0xa>
 990:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 992:	41 f0       	breq	.+16     	; 0x9a4 <Pipe_WaitUntilReady+0x56>
 994:	c9 01       	movw	r24, r18
 996:	e0 cf       	rjmp	.-64     	; 0x958 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
 9a4:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
 9a6:	08 95       	ret

000009a8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
 9a8:	74 d0       	rcall	.+232    	; 0xa92 <USB_INT_DisableAllInterrupts>
 9aa:	7b d0       	rcall	.+246    	; 0xaa2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 9ac:	e0 ee       	ldi	r30, 0xE0	; 224
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
 9b0:	80 81       	ld	r24, Z
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	80 83       	st	Z, r24
 9b6:	e8 ed       	ldi	r30, 0xD8	; 216
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
 9ba:	80 81       	ld	r24, Z
 9bc:	8f 77       	andi	r24, 0x7F	; 127
 9be:	80 83       	st	Z, r24
 9c0:	19 bc       	out	0x29, r1	; 41
 9c2:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 9c4:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
 9c6:	8c 91       	ld	r24, X
 9c8:	8e 7f       	andi	r24, 0xFE	; 254
 9ca:	8c 93       	st	X, r24
 9cc:	80 81       	ld	r24, Z
 9ce:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 9d0:	80 83       	st	Z, r24
 9d2:	10 92 98 01 	sts	0x0198, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 9d6:	08 95       	ret

000009d8 <USB_ResetInterface>:
 9d8:	5c d0       	rcall	.+184    	; 0xa92 <USB_INT_DisableAllInterrupts>
 9da:	63 d0       	rcall	.+198    	; 0xaa2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 9dc:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9e0:	8f 77       	andi	r24, 0x7F	; 127
 9e2:	80 93 d8 00 	sts	0x00D8, r24
 9e6:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
 9ea:	80 68       	ori	r24, 0x80	; 128
 9ec:	80 93 d8 00 	sts	0x00D8, r24
 9f0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9f4:	8f 7d       	andi	r24, 0xDF	; 223
 9f6:	80 93 d8 00 	sts	0x00D8, r24
 9fa:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
 9fe:	8f 77       	andi	r24, 0x7F	; 127
 a00:	80 93 d7 00 	sts	0x00D7, r24
 a04:	8c e0       	ldi	r24, 0x0C	; 12
 a06:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a08:	8e e0       	ldi	r24, 0x0E	; 14
 a0a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a0c:	09 b4       	in	r0, 0x29	; 41
 a0e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a10:	fd cf       	rjmp	.-6      	; 0xa0c <USB_ResetInterface+0x34>
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	8e bb       	out	0x1e, r24	; 30
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
 a16:	10 92 97 01 	sts	0x0197, r1
	USB_Host_ConfigurationNumber = 0;
 a1a:	80 e4       	ldi	r24, 0x40	; 64
 a1c:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
 a20:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
 a24:	80 64       	ori	r24, 0x40	; 64
 a26:	80 93 d8 00 	sts	0x00D8, r24
 a2a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 a2e:	81 60       	ori	r24, 0x01	; 1
 a30:	80 93 dd 00 	sts	0x00DD, r24
 a34:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
 a38:	84 60       	ori	r24, 0x04	; 4
 a3a:	80 93 dd 00 	sts	0x00DD, r24
 a3e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
 a42:	8f 7e       	andi	r24, 0xEF	; 239
 a44:	80 93 d7 00 	sts	0x00D7, r24
 a48:	6f 9a       	sbi	0x0d, 7	; 13
 a4a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
 a4c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
 a50:	81 60       	ori	r24, 0x01	; 1
 a52:	80 93 de 00 	sts	0x00DE, r24
 a56:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
 a5a:	84 60       	ori	r24, 0x04	; 4
 a5c:	80 93 de 00 	sts	0x00DE, r24
 a60:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 a64:	8e 7f       	andi	r24, 0xFE	; 254
 a66:	80 93 e0 00 	sts	0x00E0, r24
 a6a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 a6e:	80 61       	ori	r24, 0x10	; 16
 a70:	80 93 d8 00 	sts	0x00D8, r24
 a74:	08 95       	ret

00000a76 <USB_Init>:
 a76:	e8 ed       	ldi	r30, 0xD8	; 216
 a78:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 a7a:	80 81       	ld	r24, Z
 a7c:	8f 7e       	andi	r24, 0xEF	; 239
 a7e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 a80:	e7 ed       	ldi	r30, 0xD7	; 215
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	80 81       	ld	r24, Z
 a86:	81 60       	ori	r24, 0x01	; 1
 a88:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	80 93 98 01 	sts	0x0198, r24

	USB_ResetInterface();
 a90:	a3 cf       	rjmp	.-186    	; 0x9d8 <USB_ResetInterface>

00000a92 <USB_INT_DisableAllInterrupts>:
 a92:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	8c 7f       	andi	r24, 0xFC	; 252
 a9a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
 a9c:	10 92 a0 00 	sts	0x00A0, r1
 aa0:	08 95       	ret

00000aa2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 aa2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
 aa6:	10 92 9f 00 	sts	0x009F, r1
 aaa:	08 95       	ret

00000aac <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 aac:	1f 92       	push	r1
 aae:	0f 92       	push	r0
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	0f 92       	push	r0
 ab4:	11 24       	eor	r1, r1
 ab6:	0b b6       	in	r0, 0x3b	; 59
 ab8:	0f 92       	push	r0
 aba:	2f 93       	push	r18
 abc:	3f 93       	push	r19
 abe:	4f 93       	push	r20
 ac0:	5f 93       	push	r21
 ac2:	6f 93       	push	r22
 ac4:	7f 93       	push	r23
 ac6:	8f 93       	push	r24
 ac8:	9f 93       	push	r25
 aca:	af 93       	push	r26
 acc:	bf 93       	push	r27
 ace:	ef 93       	push	r30
 ad0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
 ad2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
 ad6:	85 ff       	sbrs	r24, 5
 ad8:	0a c0       	rjmp	.+20     	; 0xaee <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
 ada:	80 91 a0 00 	lds	r24, 0x00A0
 ade:	85 ff       	sbrs	r24, 5
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
 ae2:	80 91 9f 00 	lds	r24, 0x009F
 ae6:	8f 7d       	andi	r24, 0xDF	; 223
 ae8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
 aec:	18 d1       	rcall	.+560    	; 0xd1e <USB_Event_Stub>
 aee:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
 af2:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
 af4:	15 c0       	rjmp	.+42     	; 0xb20 <__vector_10+0x74>
 af6:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
 afa:	81 ff       	sbrs	r24, 1
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <__vector_10+0x74>
 afe:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
 b02:	8d 7f       	andi	r24, 0xFD	; 253
 b04:	80 93 9f 00 	sts	0x009F, r24
 b08:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
 b0c:	8e 7f       	andi	r24, 0xFE	; 254
 b0e:	80 93 9f 00 	sts	0x009F, r24
 b12:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
 b16:	8d 7f       	andi	r24, 0xFD	; 253
 b18:	80 93 a0 00 	sts	0x00A0, r24
 b1c:	0c db       	rcall	.-2536   	; 0x136 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
 b1e:	5c df       	rcall	.-328    	; 0x9d8 <USB_ResetInterface>
 b20:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
 b24:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
 b26:	14 c0       	rjmp	.+40     	; 0xb50 <__vector_10+0xa4>
 b28:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
 b2c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
 b2e:	10 c0       	rjmp	.+32     	; 0xb50 <__vector_10+0xa4>
 b30:	80 91 df 00 	lds	r24, 0x00DF
 b34:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
 b36:	80 93 df 00 	sts	0x00DF, r24
 b3a:	77 98       	cbi	0x0e, 7	; 14
 b3c:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
 b40:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
 b42:	80 93 dd 00 	sts	0x00DD, r24
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	05 db       	rcall	.-2550   	; 0x154 <EVENT_USB_Host_HostError>
 b4a:	f5 da       	rcall	.-2582   	; 0x136 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	8e bb       	out	0x1e, r24	; 30
 b50:	80 91 df 00 	lds	r24, 0x00DF
		EVENT_USB_Host_DeviceUnattached();
 b54:	80 ff       	sbrs	r24, 0

		USB_HostState = HOST_STATE_Unattached;
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <__vector_10+0xd8>
 b58:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
 b5c:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
 b5e:	12 c0       	rjmp	.+36     	; 0xb84 <__vector_10+0xd8>
 b60:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
 b64:	8e 7f       	andi	r24, 0xFE	; 254
 b66:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
 b6a:	80 91 de 00 	lds	r24, 0x00DE
 b6e:	8e 7f       	andi	r24, 0xFE	; 254
 b70:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
 b74:	de da       	rcall	.-2628   	; 0x132 <EVENT_USB_Host_DeviceAttached>
 b76:	80 91 a0 00 	lds	r24, 0x00A0
 b7a:	82 60       	ori	r24, 0x02	; 2
 b7c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
 b80:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
 b82:	8e bb       	out	0x1e, r24	; 30
 b84:	80 91 df 00 	lds	r24, 0x00DF
 b88:	82 ff       	sbrs	r24, 2
 b8a:	0e c0       	rjmp	.+28     	; 0xba8 <__vector_10+0xfc>

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
 b8c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
 b90:	82 ff       	sbrs	r24, 2
 b92:	0a c0       	rjmp	.+20     	; 0xba8 <__vector_10+0xfc>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
 b94:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
 b98:	8b 7f       	andi	r24, 0xFB	; 251
 b9a:	80 93 df 00 	sts	0x00DF, r24
 b9e:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	dc da       	rcall	.-2632   	; 0x15c <EVENT_USB_Host_DeviceEnumerationFailed>
 ba4:	c8 da       	rcall	.-2672   	; 0x136 <EVENT_USB_Host_DeviceUnattached>
 ba6:	18 df       	rcall	.-464    	; 0x9d8 <USB_ResetInterface>
 ba8:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
 baa:	ef 91       	pop	r30
 bac:	bf 91       	pop	r27
 bae:	af 91       	pop	r26
 bb0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
 bb2:	8f 91       	pop	r24
 bb4:	7f 91       	pop	r23

		USB_ResetInterface();
 bb6:	6f 91       	pop	r22
 bb8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 bba:	4f 91       	pop	r20
 bbc:	3f 91       	pop	r19
 bbe:	2f 91       	pop	r18
 bc0:	0f 90       	pop	r0
 bc2:	0b be       	out	0x3b, r0	; 59
 bc4:	0f 90       	pop	r0
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	0f 90       	pop	r0
 bca:	1f 90       	pop	r1
 bcc:	18 95       	reti

00000bce <USB_GetNextDescriptor>:
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	fc 01       	movw	r30, r24
 bd4:	eb 01       	movw	r28, r22
 bd6:	a8 81       	ld	r26, Y
 bd8:	b9 81       	ldd	r27, Y+1	; 0x01
 bda:	8c 91       	ld	r24, X
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
 be0:	31 81       	ldd	r19, Z+1	; 0x01
 be2:	82 17       	cp	r24, r18
 be4:	93 07       	cpc	r25, r19
 be6:	08 f4       	brcc	.+2      	; 0xbea <USB_GetNextDescriptor+0x1c>
 be8:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
 bea:	a2 0f       	add	r26, r18
 bec:	b3 1f       	adc	r27, r19
 bee:	eb 01       	movw	r28, r22
 bf0:	b9 83       	std	Y+1, r27	; 0x01
 bf2:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
 bf4:	80 81       	ld	r24, Z
 bf6:	91 81       	ldd	r25, Z+1	; 0x01
 bf8:	82 1b       	sub	r24, r18
 bfa:	93 0b       	sbc	r25, r19
 bfc:	91 83       	std	Z+1, r25	; 0x01
 bfe:	80 83       	st	Z, r24
			}
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
 c06:	cf 92       	push	r12
 c08:	df 92       	push	r13
 c0a:	ef 92       	push	r14
 c0c:	ff 92       	push	r15
 c0e:	0f 93       	push	r16
 c10:	1f 93       	push	r17
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	cd b7       	in	r28, 0x3d	; 61
 c18:	de b7       	in	r29, 0x3e	; 62
 c1a:	29 97       	sbiw	r28, 0x09	; 9
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	7b 01       	movw	r14, r22
 c28:	8a 01       	movw	r16, r20
 c2a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
 c2c:	90 e8       	ldi	r25, 0x80	; 128
 c2e:	90 93 99 01 	sts	0x0199, r25
 c32:	96 e0       	ldi	r25, 0x06	; 6
 c34:	90 93 9a 01 	sts	0x019A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
 c38:	e8 2f       	mov	r30, r24
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	31 97       	sbiw	r30, 0x01	; 1
 c3e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
 c40:	f0 93 9c 01 	sts	0x019C, r31
 c44:	e0 93 9b 01 	sts	0x019B, r30
 c48:	10 92 9e 01 	sts	0x019E, r1
 c4c:	10 92 9d 01 	sts	0x019D, r1
 c50:	89 e0       	ldi	r24, 0x09	; 9
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	90 93 a0 01 	sts	0x01A0, r25
 c58:	80 93 9f 01 	sts	0x019F, r24
 c5c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
 c60:	ce 01       	movw	r24, r28
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	84 d0       	rcall	.+264    	; 0xd6e <USB_Host_SendControlRequest>
 c66:	81 11       	cpse	r24, r1
 c68:	19 c0       	rjmp	.+50     	; 0xc9c <USB_Host_GetDeviceConfigDescriptor+0x96>
 c6a:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
 c6c:	fc 81       	ldd	r31, Y+4	; 0x04
 c6e:	d7 01       	movw	r26, r14
 c70:	ed 93       	st	X+, r30
 c72:	fc 93       	st	X, r31
 c74:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
 c76:	df 06       	cpc	r13, r31
 c78:	70 f0       	brcs	.+28     	; 0xc96 <USB_Host_GetDeviceConfigDescriptor+0x90>
 c7a:	f0 93 a0 01 	sts	0x01A0, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
 c7e:	e0 93 9f 01 	sts	0x019F, r30
 c82:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
 c84:	74 d0       	rcall	.+232    	; 0xd6e <USB_Host_SendControlRequest>
 c86:	81 11       	cpse	r24, r1
 c88:	09 c0       	rjmp	.+18     	; 0xc9c <USB_Host_GetDeviceConfigDescriptor+0x96>
 c8a:	f8 01       	movw	r30, r16
 c8c:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
 c8e:	82 30       	cpi	r24, 0x02	; 2
 c90:	21 f0       	breq	.+8      	; 0xc9a <USB_Host_GetDeviceConfigDescriptor+0x94>
 c92:	86 e0       	ldi	r24, 0x06	; 6
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
 c96:	85 e0       	ldi	r24, 0x05	; 5
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
 c9e:	0f b6       	in	r0, 0x3f	; 63
}
 ca0:	f8 94       	cli
 ca2:	de bf       	out	0x3e, r29	; 62
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	cd bf       	out	0x3d, r28	; 61
 ca8:	df 91       	pop	r29
 caa:	cf 91       	pop	r28
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	ff 90       	pop	r15
 cb2:	ef 90       	pop	r14
 cb4:	df 90       	pop	r13
 cb6:	cf 90       	pop	r12
 cb8:	08 95       	ret

00000cba <USB_GetNextDescriptorComp>:
 cba:	af 92       	push	r10
 cbc:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 cbe:	cf 92       	push	r12
 cc0:	df 92       	push	r13
 cc2:	ef 92       	push	r14
 cc4:	ff 92       	push	r15
 cc6:	0f 93       	push	r16
 cc8:	1f 93       	push	r17
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	8c 01       	movw	r16, r24
 cd0:	eb 01       	movw	r28, r22
 cd2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
 cd4:	f8 01       	movw	r30, r16
 cd6:	e0 80       	ld	r14, Z
 cd8:	f1 80       	ldd	r15, Z+1	; 0x01
 cda:	e1 14       	cp	r14, r1
 cdc:	f1 04       	cpc	r15, r1
 cde:	99 f0       	breq	.+38     	; 0xd06 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
 ce0:	a8 80       	ld	r10, Y
 ce2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 ce4:	be 01       	movw	r22, r28
 ce6:	c8 01       	movw	r24, r16
 ce8:	72 df       	rcall	.-284    	; 0xbce <USB_GetNextDescriptor>
 cea:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 cec:	99 81       	ldd	r25, Y+1	; 0x01
 cee:	f6 01       	movw	r30, r12
 cf0:	09 95       	icall
 cf2:	82 30       	cpi	r24, 0x02	; 2
 cf4:	79 f3       	breq	.-34     	; 0xcd4 <USB_GetNextDescriptorComp+0x1a>
 cf6:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 cf8:	39 f4       	brne	.+14     	; 0xd08 <USB_GetNextDescriptorComp+0x4e>
 cfa:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
 cfc:	a8 82       	st	Y, r10
 cfe:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
 d00:	f1 82       	std	Z+1, r15	; 0x01
 d02:	e0 82       	st	Z, r14
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <USB_GetNextDescriptorComp+0x4e>
 d06:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 d08:	df 91       	pop	r29
}
 d0a:	cf 91       	pop	r28
 d0c:	1f 91       	pop	r17
 d0e:	0f 91       	pop	r16
 d10:	ff 90       	pop	r15
 d12:	ef 90       	pop	r14
 d14:	df 90       	pop	r13
 d16:	cf 90       	pop	r12
 d18:	bf 90       	pop	r11
 d1a:	af 90       	pop	r10
 d1c:	08 95       	ret

00000d1e <USB_Event_Stub>:
 d1e:	08 95       	ret

00000d20 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
 d20:	1f 93       	push	r17
 d22:	cf 93       	push	r28
 d24:	df 93       	push	r29
 d26:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 d28:	c9 ee       	ldi	r28, 0xE9	; 233
 d2a:	d3 e0       	ldi	r29, 0x03	; 3
 d2c:	11 11       	cpse	r17, r1
 d2e:	0d c0       	rjmp	.+26     	; 0xd4a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
 d30:	80 91 a6 00 	lds	r24, 0x00A6
 d34:	83 fd       	sbrc	r24, 3
 d36:	16 c0       	rjmp	.+44     	; 0xd64 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	dc db       	rcall	.-2120   	; 0x4f4 <USB_Host_WaitMS>
 d3c:	81 11       	cpse	r24, r1
 d3e:	13 c0       	rjmp	.+38     	; 0xd66 <USB_Host_WaitForIOS+0x46>
 d40:	21 97       	sbiw	r28, 0x01	; 1
 d42:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
 d44:	99 f7       	brne	.-26     	; 0xd2c <USB_Host_WaitForIOS+0xc>
 d46:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
 d48:	0e c0       	rjmp	.+28     	; 0xd66 <USB_Host_WaitForIOS+0x46>
 d4a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 d4c:	29 f4       	brne	.+10     	; 0xd58 <USB_Host_WaitForIOS+0x38>
 d4e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
 d52:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
 d54:	f1 cf       	rjmp	.-30     	; 0xd38 <USB_Host_WaitForIOS+0x18>
 d56:	06 c0       	rjmp	.+12     	; 0xd64 <USB_Host_WaitForIOS+0x44>
 d58:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
 d5a:	71 f7       	brne	.-36     	; 0xd38 <USB_Host_WaitForIOS+0x18>
 d5c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
 d60:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
 d62:	ea cf       	rjmp	.-44     	; 0xd38 <USB_Host_WaitForIOS+0x18>
 d64:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
 d66:	df 91       	pop	r29
}
 d68:	cf 91       	pop	r28
 d6a:	1f 91       	pop	r17
 d6c:	08 95       	ret

00000d6e <USB_Host_SendControlRequest>:
 d6e:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
 d70:	0f 93       	push	r16
 d72:	1f 93       	push	r17
 d74:	cf 93       	push	r28
 d76:	df 93       	push	r29
 d78:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
 d7a:	f0 90 9e 00 	lds	r15, 0x009E
 d7e:	8f 2d       	mov	r24, r15
 d80:	81 70       	andi	r24, 0x01	; 1
 d82:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
 d84:	c0 91 9f 01 	lds	r28, 0x019F
 d88:	d0 91 a0 01 	lds	r29, 0x01A0
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
 d8c:	80 91 9e 00 	lds	r24, 0x009E
 d90:	81 60       	ori	r24, 0x01	; 1
 d92:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 d96:	81 e0       	ldi	r24, 0x01	; 1
 d98:	ad db       	rcall	.-2214   	; 0x4f4 <USB_Host_WaitMS>
 d9a:	81 11       	cpse	r24, r1
 d9c:	cc c0       	rjmp	.+408    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 d9e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 da2:	8f 7c       	andi	r24, 0xCF	; 207
 da4:	80 93 aa 00 	sts	0x00AA, r24
 da8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
 dac:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
 db0:	8f 7e       	andi	r24, 0xEF	; 239
 db2:	80 93 a6 00 	sts	0x00A6, r24
 db6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 dba:	8f 7b       	andi	r24, 0xBF	; 191
 dbc:	80 93 a9 00 	sts	0x00A9, r24
 dc0:	e9 e9       	ldi	r30, 0x99	; 153
 dc2:	f1 e0       	ldi	r31, 0x01	; 1
 dc4:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
 dc6:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 dca:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
 dcc:	e1 3a       	cpi	r30, 0xA1	; 161
 dce:	f8 07       	cpc	r31, r24
 dd0:	c9 f7       	brne	.-14     	; 0xdc4 <USB_Host_SendControlRequest+0x56>
 dd2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
 dd6:	87 77       	andi	r24, 0x77	; 119
 dd8:	80 93 a6 00 	sts	0x00A6, r24
 ddc:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
 dde:	a0 df       	rcall	.-192    	; 0xd20 <USB_Host_WaitForIOS>
 de0:	81 11       	cpse	r24, r1
 de2:	a9 c0       	rjmp	.+338    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 de4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 de8:	80 64       	ori	r24, 0x40	; 64
 dea:	80 93 a9 00 	sts	0x00A9, r24
 dee:	81 e0       	ldi	r24, 0x01	; 1
 df0:	81 db       	rcall	.-2302   	; 0x4f4 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
 df2:	81 11       	cpse	r24, r1
 df4:	a0 c0       	rjmp	.+320    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 df6:	80 91 99 01 	lds	r24, 0x0199
 dfa:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
 dfc:	4e c0       	rjmp	.+156    	; 0xe9a <USB_Host_SendControlRequest+0x12c>
 dfe:	80 91 aa 00 	lds	r24, 0x00AA
 e02:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 e04:	80 61       	ori	r24, 0x10	; 16
 e06:	80 93 aa 00 	sts	0x00AA, r24
 e0a:	01 15       	cp	r16, r1
 e0c:	11 05       	cpc	r17, r1
 e0e:	09 f0       	breq	.+2      	; 0xe12 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
 e10:	3a c0       	rjmp	.+116    	; 0xe86 <USB_Host_SendControlRequest+0x118>
 e12:	80 91 aa 00 	lds	r24, 0x00AA
 e16:	8f 7c       	andi	r24, 0xCF	; 207
 e18:	80 62       	ori	r24, 0x20	; 32
 e1a:	80 93 aa 00 	sts	0x00AA, r24
 e1e:	80 91 a9 00 	lds	r24, 0x00A9
 e22:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 e24:	80 93 a9 00 	sts	0x00A9, r24
 e28:	82 e0       	ldi	r24, 0x02	; 2
 e2a:	7a df       	rcall	.-268    	; 0xd20 <USB_Host_WaitForIOS>
 e2c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 e2e:	83 c0       	rjmp	.+262    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 e30:	80 91 a6 00 	lds	r24, 0x00A6
 e34:	8b 77       	andi	r24, 0x7B	; 123
 e36:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 e3a:	82 e0       	ldi	r24, 0x02	; 2
 e3c:	71 df       	rcall	.-286    	; 0xd20 <USB_Host_WaitForIOS>
 e3e:	7b c0       	rjmp	.+246    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 e40:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 e44:	8f 7b       	andi	r24, 0xBF	; 191
 e46:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 e4a:	81 e0       	ldi	r24, 0x01	; 1
 e4c:	69 df       	rcall	.-302    	; 0xd20 <USB_Host_WaitForIOS>
 e4e:	81 11       	cpse	r24, r1
 e50:	72 c0       	rjmp	.+228    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 e52:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
 e56:	90 91 f7 00 	lds	r25, 0x00F7
 e5a:	89 2b       	or	r24, r25
 e5c:	11 f4       	brne	.+4      	; 0xe62 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
 e5e:	c0 e0       	ldi	r28, 0x00	; 0
 e60:	d0 e0       	ldi	r29, 0x00	; 0
 e62:	f8 01       	movw	r30, r16
 e64:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
 e66:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
 e6a:	90 91 f7 00 	lds	r25, 0x00F7
 e6e:	89 2b       	or	r24, r25
 e70:	69 f4       	brne	.+26     	; 0xe8c <USB_Host_SendControlRequest+0x11e>
 e72:	80 91 a9 00 	lds	r24, 0x00A9
 e76:	80 64       	ori	r24, 0x40	; 64
 e78:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
 e7c:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 e80:	8e 77       	andi	r24, 0x7E	; 126
 e82:	80 93 a6 00 	sts	0x00A6, r24
 e86:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
 e88:	d9 f6       	brne	.-74     	; 0xe40 <USB_Host_SendControlRequest+0xd2>
 e8a:	c3 cf       	rjmp	.-122    	; 0xe12 <USB_Host_SendControlRequest+0xa4>
 e8c:	20 97       	sbiw	r28, 0x00	; 0
 e8e:	89 f3       	breq	.-30     	; 0xe72 <USB_Host_SendControlRequest+0x104>
 e90:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
 e94:	81 93       	st	Z+, r24
 e96:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
 e98:	e5 cf       	rjmp	.-54     	; 0xe64 <USB_Host_SendControlRequest+0xf6>
 e9a:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
 e9c:	11 05       	cpc	r17, r1
 e9e:	b1 f1       	breq	.+108    	; 0xf0c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
 ea0:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
 ea4:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
 ea6:	80 62       	ori	r24, 0x20	; 32
 ea8:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 eac:	80 91 a9 00 	lds	r24, 0x00A9
 eb0:	8f 7b       	andi	r24, 0xBF	; 191
 eb2:	80 93 a9 00 	sts	0x00A9, r24
 eb6:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 eb8:	20 97       	sbiw	r28, 0x00	; 0
 eba:	01 f1       	breq	.+64     	; 0xefc <USB_Host_SendControlRequest+0x18e>
 ebc:	31 df       	rcall	.-414    	; 0xd20 <USB_Host_WaitForIOS>
 ebe:	81 11       	cpse	r24, r1
 ec0:	3a c0       	rjmp	.+116    	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 ec2:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
 ec4:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 ec8:	30 91 f7 00 	lds	r19, 0x00F7
 ecc:	80 91 00 01 	lds	r24, 0x0100
 ed0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
 ed2:	28 17       	cp	r18, r24
 ed4:	39 07       	cpc	r19, r25
 ed6:	58 f4       	brcc	.+22     	; 0xeee <USB_Host_SendControlRequest+0x180>
 ed8:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
 eda:	01 96       	adiw	r24, 0x01	; 1
 edc:	8c 01       	movw	r16, r24
 ede:	20 81       	ld	r18, Z
 ee0:	20 93 af 00 	sts	0x00AF, r18
 ee4:	21 97       	sbiw	r28, 0x01	; 1
 ee6:	20 97       	sbiw	r28, 0x00	; 0
 ee8:	19 f0       	breq	.+6      	; 0xef0 <USB_Host_SendControlRequest+0x182>
 eea:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
 eec:	eb cf       	rjmp	.-42     	; 0xec4 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
 eee:	8f 01       	movw	r16, r30
 ef0:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
 ef4:	8b 77       	andi	r24, 0x7B	; 123
 ef6:	80 93 a6 00 	sts	0x00A6, r24
 efa:	dd cf       	rjmp	.-70     	; 0xeb6 <USB_Host_SendControlRequest+0x148>
 efc:	11 df       	rcall	.-478    	; 0xd20 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
 efe:	81 11       	cpse	r24, r1
 f00:	1a c0       	rjmp	.+52     	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 f02:	80 91 a9 00 	lds	r24, 0x00A9
 f06:	80 64       	ori	r24, 0x40	; 64
 f08:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
 f0c:	80 91 aa 00 	lds	r24, 0x00AA
 f10:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 f12:	80 61       	ori	r24, 0x10	; 16
 f14:	80 93 aa 00 	sts	0x00AA, r24
 f18:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
 f1c:	8f 7b       	andi	r24, 0xBF	; 191
 f1e:	80 93 a9 00 	sts	0x00A9, r24
 f22:	81 e0       	ldi	r24, 0x01	; 1
 f24:	fd de       	rcall	.-518    	; 0xd20 <USB_Host_WaitForIOS>
 f26:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
 f28:	06 c0       	rjmp	.+12     	; 0xf36 <USB_Host_SendControlRequest+0x1c8>
 f2a:	80 91 a6 00 	lds	r24, 0x00A6
 f2e:	8e 77       	andi	r24, 0x7E	; 126
 f30:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
 f34:	80 e0       	ldi	r24, 0x00	; 0
 f36:	90 91 a9 00 	lds	r25, 0x00A9
 f3a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
 f3c:	90 93 a9 00 	sts	0x00A9, r25
 f40:	f1 10       	cpse	r15, r1
 f42:	05 c0       	rjmp	.+10     	; 0xf4e <USB_Host_SendControlRequest+0x1e0>
 f44:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
 f48:	9e 7f       	andi	r25, 0xFE	; 254
 f4a:	90 93 9e 00 	sts	0x009E, r25
 f4e:	91 e0       	ldi	r25, 0x01	; 1
 f50:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
 f54:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
 f58:	df 91       	pop	r29
 f5a:	cf 91       	pop	r28
 f5c:	1f 91       	pop	r17
 f5e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
 f60:	ff 90       	pop	r15
 f62:	08 95       	ret

00000f64 <USB_Host_SetDeviceConfiguration>:
 f64:	cf 93       	push	r28
				UPRST = 0;
 f66:	c8 2f       	mov	r28, r24
 f68:	10 92 99 01 	sts	0x0199, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
 f6c:	89 e0       	ldi	r24, 0x09	; 9
 f6e:	80 93 9a 01 	sts	0x019A, r24
 f72:	2c 2f       	mov	r18, r28
 f74:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
 f76:	30 93 9c 01 	sts	0x019C, r19
 f7a:	20 93 9b 01 	sts	0x019B, r18
 f7e:	10 92 9e 01 	sts	0x019E, r1
 f82:	10 92 9d 01 	sts	0x019D, r1
 f86:	10 92 a0 01 	sts	0x01A0, r1
 f8a:	10 92 9f 01 	sts	0x019F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 f8e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
 f92:	80 e0       	ldi	r24, 0x00	; 0
 f94:	90 e0       	ldi	r25, 0x00	; 0
 f96:	eb de       	rcall	.-554    	; 0xd6e <USB_Host_SendControlRequest>
 f98:	81 11       	cpse	r24, r1
 f9a:	08 c0       	rjmp	.+16     	; 0xfac <USB_Host_SetDeviceConfiguration+0x48>
 f9c:	c0 93 97 01 	sts	0x0197, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
 fa0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
 fa2:	11 f0       	breq	.+4      	; 0xfa8 <USB_Host_SetDeviceConfiguration+0x44>
 fa4:	9b e0       	ldi	r25, 0x0B	; 11
 fa6:	01 c0       	rjmp	.+2      	; 0xfaa <USB_Host_SetDeviceConfiguration+0x46>
 fa8:	9a e0       	ldi	r25, 0x0A	; 10
 faa:	9e bb       	out	0x1e, r25	; 30
 fac:	cf 91       	pop	r28
	}

	return ErrorCode;
}
 fae:	08 95       	ret

00000fb0 <USB_USBTask>:
 fb0:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
 fb2:	c0 91 a7 00 	lds	r28, 0x00A7
 fb6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
 fb8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
 fbc:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
 fc0:	e5 da       	rcall	.-2614   	; 0x58c <USB_Host_ProcessNextHostState>
 fc2:	c0 93 a7 00 	sts	0x00A7, r28
 fc6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>

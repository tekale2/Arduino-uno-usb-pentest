
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001064  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  00001108  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a3f9  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ad1  00000000  00000000  0000c779  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f92  00000000  00000000  0000f24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef8  00000000  00000000  000131dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003c7d  00000000  00000000  000140d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006715  00000000  00000000  00017d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001e466  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	c4 c3       	rjmp	.+1928   	; 0x7b2 <__vector_10>
      2a:	00 00       	nop
      2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000c6 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
      e4:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f4:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     104:	00 05                                               ..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	00 01                                               ..

00000118 <GenericReport>:
     118:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

00000138 <__ctors_end>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	d0 e2       	ldi	r29, 0x20	; 32
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
				ReportData     += 4;
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e4 e6       	ldi	r30, 0x64	; 100
     14c:	f0 e1       	ldi	r31, 0x10	; 16
				break;
     14e:	00 e0       	ldi	r16, 0x00	; 0

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a0 31       	cpi	r26, 0x10	; 16
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e1       	ldi	r26, 0x10	; 16
				ReportSize     -= 2;
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
				ReportData     += 2;
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 32       	cpi	r26, 0x25	; 37
     16a:	b1 07       	cpc	r27, r17
				break;
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	22 d0       	rcall	.+68     	; 0x1b4 <main>
     170:	77 c7       	rjmp	.+3822   	; 0x1060 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <LEDs_SetAllLEDs>:
     174:	9b b1       	in	r25, 0x0b	; 11
     176:	9f 70       	andi	r25, 0x0F	; 15
     178:	98 2b       	or	r25, r24
				ReportSize     -= 1;
     17a:	9b b9       	out	0x0b, r25	; 11
     17c:	08 95       	ret

0000017e <SetupHardware>:
				ReportData     += 1;
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	88 e1       	ldi	r24, 0x18	; 24
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	80 93 60 00 	sts	0x0060, r24
     18e:	10 92 60 00 	sts	0x0060, r1
     192:	0f be       	out	0x3f, r0	; 63
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	80 e8       	ldi	r24, 0x80	; 128
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	80 93 61 00 	sts	0x0061, r24
     1a0:	90 93 61 00 	sts	0x0061, r25
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	8a b1       	in	r24, 0x0a	; 10
     1a8:	80 6f       	ori	r24, 0xF0	; 240

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	8a b9       	out	0x0a, r24	; 10
     1ac:	8b b1       	in	r24, 0x0b	; 11
     1ae:	8f 70       	andi	r24, 0x0F	; 15
     1b0:	8b b9       	out	0x0b, r24	; 11
     1b2:	e4 c2       	rjmp	.+1480   	; 0x77c <USB_Init>

000001b4 <main>:
				break;
     1b4:	e4 df       	rcall	.-56     	; 0x17e <SetupHardware>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	80 e1       	ldi	r24, 0x10	; 16
     1b8:	dd df       	rcall	.-70     	; 0x174 <LEDs_SetAllLEDs>
     1ba:	78 94       	sei
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	75 d6       	rcall	.+3306   	; 0xeac <HID_Device_USBTask>
     1c2:	13 d5       	rcall	.+2598   	; 0xbea <USB_USBTask>
     1c4:	fb cf       	rjmp	.-10     	; 0x1bc <main+0x8>

000001c6 <EVENT_USB_Device_Connect>:
     1c6:	80 ea       	ldi	r24, 0xA0	; 160
     1c8:	d5 cf       	rjmp	.-86     	; 0x174 <LEDs_SetAllLEDs>

000001ca <EVENT_USB_Device_Disconnect>:
     1ca:	80 e1       	ldi	r24, 0x10	; 16
     1cc:	d3 cf       	rjmp	.-90     	; 0x174 <LEDs_SetAllLEDs>

000001ce <EVENT_USB_Device_ConfigurationChanged>:
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	59 d6       	rcall	.+3250   	; 0xe86 <HID_Device_ConfigureEndpoints>
     1d4:	90 91 e2 00 	lds	r25, 0x00E2
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d8:	94 60       	ori	r25, 0x04	; 4
     1da:	90 93 e2 00 	sts	0x00E2, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1de:	88 23       	and	r24, r24
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged+0x18>
     1e2:	80 e6       	ldi	r24, 0x60	; 96
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     1e6:	80 e9       	ldi	r24, 0x90	; 144
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	c5 cf       	rjmp	.-118    	; 0x174 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_ControlRequest>:
     1ea:	80 e0       	ldi	r24, 0x00	; 0
				break;
     1ec:	91 e0       	ldi	r25, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	19 c5       	rjmp	.+2610   	; 0xc22 <HID_Device_ProcessControlRequest>

000001f0 <EVENT_USB_Device_StartOfFrame>:
     1f0:	80 91 0e 01 	lds	r24, 0x010E
     1f4:	90 91 0f 01 	lds	r25, 0x010F
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	29 f0       	breq	.+10     	; 0x206 <EVENT_USB_Device_StartOfFrame+0x16>
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	90 93 0f 01 	sts	0x010F, r25
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	80 93 0e 01 	sts	0x010E, r24
				break;
     206:	08 95       	ret

00000208 <CALLBACK_HID_Device_CreateHIDReport>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	f9 01       	movw	r30, r18
     20e:	8b b1       	in	r24, 0x0b	; 11
     210:	84 fb       	bst	r24, 4
     212:	99 27       	eor	r25, r25
     214:	90 f9       	bld	r25, 0
     216:	90 83       	st	Z, r25
     218:	85 fb       	bst	r24, 5
     21a:	99 27       	eor	r25, r25
     21c:	90 f9       	bld	r25, 0
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	98 2f       	mov	r25, r24
     222:	99 1f       	adc	r25, r25
     224:	99 27       	eor	r25, r25
     226:	99 1f       	adc	r25, r25
     228:	92 83       	std	Z+2, r25	; 0x02
     22a:	86 fb       	bst	r24, 6
     22c:	88 27       	eor	r24, r24
     22e:	80 f9       	bld	r24, 0
     230:	83 83       	std	Z+3, r24	; 0x03
     232:	88 e0       	ldi	r24, 0x08	; 8
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	f8 01       	movw	r30, r16
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	80 83       	st	Z, r24
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	08 95       	ret

00000244 <CALLBACK_HID_Device_ProcessHIDReport>:
     244:	f9 01       	movw	r30, r18
     246:	80 81       	ld	r24, Z
     248:	81 11       	cpse	r24, r1
     24a:	80 e1       	ldi	r24, 0x10	; 16
     24c:	91 81       	ldd	r25, Z+1	; 0x01
     24e:	91 11       	cpse	r25, r1
     250:	80 62       	ori	r24, 0x20	; 32
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	92 81       	ldd	r25, Z+2	; 0x02
     254:	91 11       	cpse	r25, r1
     256:	80 68       	ori	r24, 0x80	; 128
     258:	93 81       	ldd	r25, Z+3	; 0x03
     25a:	91 11       	cpse	r25, r1
     25c:	80 64       	ori	r24, 0x40	; 64
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	8a cf       	rjmp	.-236    	; 0x174 <LEDs_SetAllLEDs>

00000260 <CALLBACK_USB_GetDescriptor>:
     260:	29 2f       	mov	r18, r25
     262:	33 27       	eor	r19, r19
     264:	23 30       	cpi	r18, 0x03	; 3
     266:	31 05       	cpc	r19, r1
     268:	b9 f0       	breq	.+46     	; 0x298 <CALLBACK_USB_GetDescriptor+0x38>
     26a:	5c f4       	brge	.+22     	; 0x282 <CALLBACK_USB_GetDescriptor+0x22>
     26c:	21 30       	cpi	r18, 0x01	; 1
     26e:	31 05       	cpc	r19, r1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	69 f1       	breq	.+90     	; 0x2cc <CALLBACK_USB_GetDescriptor+0x6c>
				break;
     272:	22 30       	cpi	r18, 0x02	; 2

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	31 05       	cpc	r19, r1
     276:	79 f5       	brne	.+94     	; 0x2d6 <CALLBACK_USB_GetDescriptor+0x76>
     278:	82 e2       	ldi	r24, 0x22	; 34
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	24 ee       	ldi	r18, 0xE4	; 228
     27e:	30 e0       	ldi	r19, 0x00	; 0
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	2e c0       	rjmp	.+92     	; 0x2de <CALLBACK_USB_GetDescriptor+0x7e>
     282:	21 32       	cpi	r18, 0x21	; 33
				break;
     284:	31 05       	cpc	r19, r1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	e9 f0       	breq	.+58     	; 0x2c2 <CALLBACK_USB_GetDescriptor+0x62>
     288:	22 32       	cpi	r18, 0x22	; 34
     28a:	31 05       	cpc	r19, r1
     28c:	21 f5       	brne	.+72     	; 0x2d6 <CALLBACK_USB_GetDescriptor+0x76>
     28e:	80 e2       	ldi	r24, 0x20	; 32
				break;
     290:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	28 e1       	ldi	r18, 0x18	; 24
     294:	31 e0       	ldi	r19, 0x01	; 1
     296:	23 c0       	rjmp	.+70     	; 0x2de <CALLBACK_USB_GetDescriptor+0x7e>
     298:	99 27       	eor	r25, r25
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 05       	cpc	r25, r1
     29e:	41 f0       	breq	.+16     	; 0x2b0 <CALLBACK_USB_GetDescriptor+0x50>
				break;
     2a0:	82 30       	cpi	r24, 0x02	; 2

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	91 05       	cpc	r25, r1
     2a4:	41 f0       	breq	.+16     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x56>
     2a6:	89 2b       	or	r24, r25
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <CALLBACK_USB_GetDescriptor+0x76>
     2aa:	e0 ee       	ldi	r30, 0xE0	; 224
				break;
     2ac:	f0 e0       	ldi	r31, 0x00	; 0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x5a>
     2b0:	e6 ec       	ldi	r30, 0xC6	; 198
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <CALLBACK_USB_GetDescriptor+0x5a>
     2b6:	e8 e9       	ldi	r30, 0x98	; 152
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	84 91       	lpm	r24, Z
				break;
     2bc:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	9f 01       	movw	r18, r30
     2c0:	0e c0       	rjmp	.+28     	; 0x2de <CALLBACK_USB_GetDescriptor+0x7e>
     2c2:	89 e0       	ldi	r24, 0x09	; 9
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	26 ef       	ldi	r18, 0xF6	; 246
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <CALLBACK_USB_GetDescriptor+0x7e>
				break;
     2cc:	82 e1       	ldi	r24, 0x12	; 18
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	26 e0       	ldi	r18, 0x06	; 6
     2d2:	31 e0       	ldi	r19, 0x01	; 1
				break;
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <CALLBACK_USB_GetDescriptor+0x7e>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	20 e0       	ldi	r18, 0x00	; 0

				if (ParserData->UsingReportIDs)
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	fa 01       	movw	r30, r20
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
     2e4:	08 95       	ret

000002e6 <Endpoint_Write_Stream_LE>:
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	7c 01       	movw	r14, r24
     2f8:	8b 01       	movw	r16, r22
     2fa:	ea 01       	movw	r28, r20
     2fc:	ca d1       	rcall	.+916    	; 0x692 <Endpoint_WaitUntilReady>
     2fe:	81 11       	cpse	r24, r1
     300:	31 c0       	rjmp	.+98     	; 0x364 <Endpoint_Write_Stream_LE+0x7e>
     302:	20 97       	sbiw	r28, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	31 f0       	breq	.+12     	; 0x312 <Endpoint_Write_Stream_LE+0x2c>
     306:	88 81       	ld	r24, Y
     308:	99 81       	ldd	r25, Y+1	; 0x01
     30a:	08 1b       	sub	r16, r24
     30c:	19 0b       	sbc	r17, r25
     30e:	e8 0e       	add	r14, r24
     310:	f9 1e       	adc	r15, r25
     312:	c1 2c       	mov	r12, r1
     314:	d1 2c       	mov	r13, r1
     316:	01 15       	cp	r16, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	11 05       	cpc	r17, r1
     31a:	19 f1       	breq	.+70     	; 0x362 <Endpoint_Write_Stream_LE+0x7c>
     31c:	80 91 e8 00 	lds	r24, 0x00E8
     320:	85 fd       	sbrc	r24, 5
     322:	14 c0       	rjmp	.+40     	; 0x34c <Endpoint_Write_Stream_LE+0x66>
     324:	80 91 e8 00 	lds	r24, 0x00E8
     328:	8e 77       	andi	r24, 0x7E	; 126
     32a:	80 93 e8 00 	sts	0x00E8, r24
     32e:	5d d4       	rcall	.+2234   	; 0xbea <USB_USBTask>
     330:	20 97       	sbiw	r28, 0x00	; 0
     332:	41 f0       	breq	.+16     	; 0x344 <Endpoint_Write_Stream_LE+0x5e>
     334:	88 81       	ld	r24, Y
     336:	99 81       	ldd	r25, Y+1	; 0x01
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	8c 0d       	add	r24, r12
     33a:	9d 1d       	adc	r25, r13
     33c:	99 83       	std	Y+1, r25	; 0x01
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	88 83       	st	Y, r24
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	10 c0       	rjmp	.+32     	; 0x364 <Endpoint_Write_Stream_LE+0x7e>
     344:	a6 d1       	rcall	.+844    	; 0x692 <Endpoint_WaitUntilReady>
     346:	88 23       	and	r24, r24
     348:	31 f3       	breq	.-52     	; 0x316 <Endpoint_Write_Stream_LE+0x30>
     34a:	0c c0       	rjmp	.+24     	; 0x364 <Endpoint_Write_Stream_LE+0x7e>
     34c:	f7 01       	movw	r30, r14
     34e:	81 91       	ld	r24, Z+
     350:	7f 01       	movw	r14, r30
     352:	80 93 f1 00 	sts	0x00F1, r24
     356:	01 50       	subi	r16, 0x01	; 1
     358:	11 09       	sbc	r17, r1
     35a:	ff ef       	ldi	r31, 0xFF	; 255
     35c:	cf 1a       	sub	r12, r31
     35e:	df 0a       	sbc	r13, r31
     360:	da cf       	rjmp	.-76     	; 0x316 <Endpoint_Write_Stream_LE+0x30>
     362:	80 e0       	ldi	r24, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <Endpoint_Write_Control_Stream_LE>:
     376:	20 91 23 01 	lds	r18, 0x0123

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37a:	30 91 24 01 	lds	r19, 0x0124
     37e:	26 17       	cp	r18, r22
     380:	37 07       	cpc	r19, r23
     382:	48 f0       	brcs	.+18     	; 0x396 <Endpoint_Write_Control_Stream_LE+0x20>
     384:	61 15       	cp	r22, r1
     386:	71 05       	cpc	r23, r1
				break;
     388:	39 f4       	brne	.+14     	; 0x398 <Endpoint_Write_Control_Stream_LE+0x22>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	20 91 e8 00 	lds	r18, 0x00E8
     38e:	2e 77       	andi	r18, 0x7E	; 126
     390:	20 93 e8 00 	sts	0x00E8, r18
     394:	01 c0       	rjmp	.+2      	; 0x398 <Endpoint_Write_Control_Stream_LE+0x22>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	b9 01       	movw	r22, r18
     398:	fc 01       	movw	r30, r24
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	61 15       	cp	r22, r1
     39e:	71 05       	cpc	r23, r1
     3a0:	99 f1       	breq	.+102    	; 0x408 <Endpoint_Write_Control_Stream_LE+0x92>
     3a2:	80 91 1c 01 	lds	r24, 0x011C
     3a6:	88 23       	and	r24, r24
     3a8:	e9 f1       	breq	.+122    	; 0x424 <Endpoint_Write_Control_Stream_LE+0xae>
     3aa:	85 30       	cpi	r24, 0x05	; 5
     3ac:	e9 f1       	breq	.+122    	; 0x428 <Endpoint_Write_Control_Stream_LE+0xb2>
     3ae:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	83 fd       	sbrc	r24, 3
     3b4:	3b c0       	rjmp	.+118    	; 0x42c <Endpoint_Write_Control_Stream_LE+0xb6>
     3b6:	80 91 e8 00 	lds	r24, 0x00E8
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <Endpoint_Write_Control_Stream_LE+0x54>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	80 91 e8 00 	lds	r24, 0x00E8
     3c2:	82 ff       	sbrs	r24, 2
     3c4:	24 c0       	rjmp	.+72     	; 0x40e <Endpoint_Write_Control_Stream_LE+0x98>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	08 95       	ret
     3ca:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	80 ff       	sbrs	r24, 0
     3d0:	e5 cf       	rjmp	.-54     	; 0x39c <Endpoint_Write_Control_Stream_LE+0x26>
     3d2:	80 91 f2 00 	lds	r24, 0x00F2

					while (CurrCollectionPath->Parent != NULL)
     3d6:	90 91 f3 00 	lds	r25, 0x00F3
     3da:	61 15       	cp	r22, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	71 05       	cpc	r23, r1
     3de:	51 f0       	breq	.+20     	; 0x3f4 <Endpoint_Write_Control_Stream_LE+0x7e>
     3e0:	88 30       	cpi	r24, 0x08	; 8
     3e2:	91 05       	cpc	r25, r1
     3e4:	38 f4       	brcc	.+14     	; 0x3f4 <Endpoint_Write_Control_Stream_LE+0x7e>
     3e6:	21 91       	ld	r18, Z+
     3e8:	20 93 f1 00 	sts	0x00F1, r18
     3ec:	61 50       	subi	r22, 0x01	; 1
     3ee:	71 09       	sbc	r23, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	f3 cf       	rjmp	.-26     	; 0x3da <Endpoint_Write_Control_Stream_LE+0x64>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	08 97       	sbiw	r24, 0x08	; 8
     3f8:	09 f0       	breq	.+2      	; 0x3fc <Endpoint_Write_Control_Stream_LE+0x86>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	80 91 e8 00 	lds	r24, 0x00E8
     400:	8e 77       	andi	r24, 0x7E	; 126
     402:	80 93 e8 00 	sts	0x00E8, r24
     406:	ca cf       	rjmp	.-108    	; 0x39c <Endpoint_Write_Control_Stream_LE+0x26>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	21 11       	cpse	r18, r1
     40a:	cb cf       	rjmp	.-106    	; 0x3a2 <Endpoint_Write_Control_Stream_LE+0x2c>
     40c:	d8 cf       	rjmp	.-80     	; 0x3be <Endpoint_Write_Control_Stream_LE+0x48>
     40e:	80 91 1c 01 	lds	r24, 0x011C
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	88 23       	and	r24, r24
     414:	39 f0       	breq	.+14     	; 0x424 <Endpoint_Write_Control_Stream_LE+0xae>
     416:	85 30       	cpi	r24, 0x05	; 5
     418:	39 f0       	breq	.+14     	; 0x428 <Endpoint_Write_Control_Stream_LE+0xb2>
     41a:	80 91 e8 00 	lds	r24, 0x00E8
     41e:	83 ff       	sbrs	r24, 3

				if (UsageListSize)
     420:	ce cf       	rjmp	.-100    	; 0x3be <Endpoint_Write_Control_Stream_LE+0x48>
     422:	04 c0       	rjmp	.+8      	; 0x42c <Endpoint_Write_Control_Stream_LE+0xb6>
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	08 95       	ret
     428:	83 e0       	ldi	r24, 0x03	; 3
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	08 95       	ret
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	08 95       	ret

00000430 <Endpoint_Read_Control_Stream_LE>:
     430:	61 15       	cp	r22, r1
     432:	71 05       	cpc	r23, r1
     434:	29 f4       	brne	.+10     	; 0x440 <Endpoint_Read_Control_Stream_LE+0x10>
     436:	20 91 e8 00 	lds	r18, 0x00E8
     43a:	2b 77       	andi	r18, 0x7B	; 123
     43c:	20 93 e8 00 	sts	0x00E8, r18

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	61 15       	cp	r22, r1
     442:	71 05       	cpc	r23, r1
     444:	31 f1       	breq	.+76     	; 0x492 <Endpoint_Read_Control_Stream_LE+0x62>
     446:	20 91 1c 01 	lds	r18, 0x011C
     44a:	22 23       	and	r18, r18
					  UsageList[i - 1] = UsageList[i];
     44c:	59 f1       	breq	.+86     	; 0x4a4 <Endpoint_Read_Control_Stream_LE+0x74>
     44e:	25 30       	cpi	r18, 0x05	; 5
     450:	59 f1       	breq	.+86     	; 0x4a8 <Endpoint_Read_Control_Stream_LE+0x78>
     452:	20 91 e8 00 	lds	r18, 0x00E8

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     456:	23 fd       	sbrc	r18, 3
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	21 c0       	rjmp	.+66     	; 0x49c <Endpoint_Read_Control_Stream_LE+0x6c>
     45a:	20 91 e8 00 	lds	r18, 0x00E8
     45e:	22 ff       	sbrs	r18, 2
     460:	f2 cf       	rjmp	.-28     	; 0x446 <Endpoint_Read_Control_Stream_LE+0x16>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	fc 01       	movw	r30, r24
     464:	cf 01       	movw	r24, r30
     466:	20 91 f2 00 	lds	r18, 0x00F2
     46a:	30 91 f3 00 	lds	r19, 0x00F3
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	23 2b       	or	r18, r19
     470:	11 f3       	breq	.-60     	; 0x436 <Endpoint_Read_Control_Stream_LE+0x6>
     472:	80 91 f1 00 	lds	r24, 0x00F1
     476:	81 93       	st	Z+, r24
     478:	cf 01       	movw	r24, r30
     47a:	61 50       	subi	r22, 0x01	; 1
     47c:	71 09       	sbc	r23, r1
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	81 f7       	brne	.-32     	; 0x464 <Endpoint_Read_Control_Stream_LE+0x34>
     484:	d8 cf       	rjmp	.-80     	; 0x436 <Endpoint_Read_Control_Stream_LE+0x6>
     486:	80 91 1c 01 	lds	r24, 0x011C
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	88 23       	and	r24, r24
     48c:	59 f0       	breq	.+22     	; 0x4a4 <Endpoint_Read_Control_Stream_LE+0x74>
     48e:	85 30       	cpi	r24, 0x05	; 5
     490:	59 f0       	breq	.+22     	; 0x4a8 <Endpoint_Read_Control_Stream_LE+0x78>
     492:	80 91 e8 00 	lds	r24, 0x00E8
     496:	80 ff       	sbrs	r24, 0
     498:	f6 cf       	rjmp	.-20     	; 0x486 <Endpoint_Read_Control_Stream_LE+0x56>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Endpoint_Read_Control_Stream_LE+0x70>
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	08 95       	ret
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	08 95       	ret
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	08 95       	ret

000004ac <Endpoint_Write_Control_PStream_LE>:
				break;
     4ac:	20 91 23 01 	lds	r18, 0x0123
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b0:	30 91 24 01 	lds	r19, 0x0124
     4b4:	26 17       	cp	r18, r22
     4b6:	37 07       	cpc	r19, r23
     4b8:	48 f0       	brcs	.+18     	; 0x4cc <Endpoint_Write_Control_PStream_LE+0x20>
     4ba:	61 15       	cp	r22, r1
     4bc:	71 05       	cpc	r23, r1
     4be:	39 f4       	brne	.+14     	; 0x4ce <Endpoint_Write_Control_PStream_LE+0x22>
     4c0:	20 91 e8 00 	lds	r18, 0x00E8
     4c4:	2e 77       	andi	r18, 0x7E	; 126
     4c6:	20 93 e8 00 	sts	0x00E8, r18
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <Endpoint_Write_Control_PStream_LE+0x22>
     4cc:	b9 01       	movw	r22, r18
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	61 15       	cp	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	b1 f1       	breq	.+108    	; 0x544 <Endpoint_Write_Control_PStream_LE+0x98>
     4d8:	80 91 1c 01 	lds	r24, 0x011C
     4dc:	88 23       	and	r24, r24
     4de:	09 f4       	brne	.+2      	; 0x4e2 <Endpoint_Write_Control_PStream_LE+0x36>
     4e0:	3f c0       	rjmp	.+126    	; 0x560 <Endpoint_Write_Control_PStream_LE+0xb4>
     4e2:	85 30       	cpi	r24, 0x05	; 5
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x3c>
     4e6:	3e c0       	rjmp	.+124    	; 0x564 <Endpoint_Write_Control_PStream_LE+0xb8>
     4e8:	80 91 e8 00 	lds	r24, 0x00E8
     4ec:	83 fd       	sbrc	r24, 3
     4ee:	3c c0       	rjmp	.+120    	; 0x568 <Endpoint_Write_Control_PStream_LE+0xbc>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	80 91 e8 00 	lds	r24, 0x00E8
     4f4:	82 ff       	sbrs	r24, 2
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <Endpoint_Write_Control_PStream_LE+0x58>
     4f8:	80 91 e8 00 	lds	r24, 0x00E8
     4fc:	82 ff       	sbrs	r24, 2
     4fe:	25 c0       	rjmp	.+74     	; 0x54a <Endpoint_Write_Control_PStream_LE+0x9e>
     500:	80 e0       	ldi	r24, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	08 95       	ret
     504:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
     508:	80 ff       	sbrs	r24, 0
     50a:	e3 cf       	rjmp	.-58     	; 0x4d2 <Endpoint_Write_Control_PStream_LE+0x26>
     50c:	80 91 f2 00 	lds	r24, 0x00F2
     510:	90 91 f3 00 	lds	r25, 0x00F3
     514:	61 15       	cp	r22, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	71 05       	cpc	r23, r1
     518:	59 f0       	breq	.+22     	; 0x530 <Endpoint_Write_Control_PStream_LE+0x84>
     51a:	88 30       	cpi	r24, 0x08	; 8
     51c:	91 05       	cpc	r25, r1

					if (UsageListSize)
     51e:	40 f4       	brcc	.+16     	; 0x530 <Endpoint_Write_Control_PStream_LE+0x84>
     520:	24 91       	lpm	r18, Z
     522:	20 93 f1 00 	sts	0x00F1, r18
     526:	31 96       	adiw	r30, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	61 50       	subi	r22, 0x01	; 1
     52a:	71 09       	sbc	r23, r1
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	f2 cf       	rjmp	.-28     	; 0x514 <Endpoint_Write_Control_PStream_LE+0x68>
     530:	21 e0       	ldi	r18, 0x01	; 1
     532:	08 97       	sbiw	r24, 0x08	; 8
     534:	09 f0       	breq	.+2      	; 0x538 <Endpoint_Write_Control_PStream_LE+0x8c>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	80 91 e8 00 	lds	r24, 0x00E8
     53c:	8e 77       	andi	r24, 0x7E	; 126

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	80 93 e8 00 	sts	0x00E8, r24
     542:	c7 cf       	rjmp	.-114    	; 0x4d2 <Endpoint_Write_Control_PStream_LE+0x26>
     544:	21 11       	cpse	r18, r1
     546:	c8 cf       	rjmp	.-112    	; 0x4d8 <Endpoint_Write_Control_PStream_LE+0x2c>
     548:	d7 cf       	rjmp	.-82     	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x4c>
						  UsageList[i - 1] = UsageList[i];
     54a:	80 91 1c 01 	lds	r24, 0x011C
     54e:	88 23       	and	r24, r24
     550:	39 f0       	breq	.+14     	; 0x560 <Endpoint_Write_Control_PStream_LE+0xb4>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	85 30       	cpi	r24, 0x05	; 5
     554:	39 f0       	breq	.+14     	; 0x564 <Endpoint_Write_Control_PStream_LE+0xb8>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	80 91 e8 00 	lds	r24, 0x00E8
     55a:	83 ff       	sbrs	r24, 3
     55c:	cd cf       	rjmp	.-102    	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x4c>
     55e:	04 c0       	rjmp	.+8      	; 0x568 <Endpoint_Write_Control_PStream_LE+0xbc>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	08 95       	ret
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	08 95       	ret
     568:	81 e0       	ldi	r24, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	08 95       	ret

0000056c <Endpoint_ConfigureEndpoint_Prv>:
     56c:	98 2f       	mov	r25, r24
     56e:	97 30       	cpi	r25, 0x07	; 7
     570:	58 f5       	brcc	.+86     	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     572:	90 93 e9 00 	sts	0x00E9, r25
     576:	98 17       	cp	r25, r24
     578:	39 f0       	breq	.+14     	; 0x588 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     57a:	70 91 ec 00 	lds	r23, 0x00EC
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	20 91 ed 00 	lds	r18, 0x00ED
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	50 91 f0 00 	lds	r21, 0x00F0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     586:	03 c0       	rjmp	.+6      	; 0x58e <Endpoint_ConfigureEndpoint_Prv+0x22>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	24 2f       	mov	r18, r20
     58a:	76 2f       	mov	r23, r22
     58c:	50 e0       	ldi	r21, 0x00	; 0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	21 ff       	sbrs	r18, 1
     590:	19 c0       	rjmp	.+50     	; 0x5c4 <Endpoint_ConfigureEndpoint_Prv+0x58>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	30 91 eb 00 	lds	r19, 0x00EB
     596:	3e 7f       	andi	r19, 0xFE	; 254
     598:	30 93 eb 00 	sts	0x00EB, r19
     59c:	30 91 ed 00 	lds	r19, 0x00ED
     5a0:	3d 7f       	andi	r19, 0xFD	; 253
     5a2:	30 93 ed 00 	sts	0x00ED, r19
     5a6:	30 91 eb 00 	lds	r19, 0x00EB
     5aa:	31 60       	ori	r19, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	30 93 eb 00 	sts	0x00EB, r19
     5b0:	70 93 ec 00 	sts	0x00EC, r23
     5b4:	20 93 ed 00 	sts	0x00ED, r18
     5b8:	50 93 f0 00 	sts	0x00F0, r21

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	20 91 ee 00 	lds	r18, 0x00EE
     5c0:	27 ff       	sbrs	r18, 7
     5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <Endpoint_ConfigureEndpoint_Prv+0x66>
     5c4:	9f 5f       	subi	r25, 0xFF	; 255
     5c6:	d3 cf       	rjmp	.-90     	; 0x56e <Endpoint_ConfigureEndpoint_Prv+0x2>
     5c8:	8f 70       	andi	r24, 0x0F	; 15
     5ca:	80 93 e9 00 	sts	0x00E9, r24
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret

000005d6 <Endpoint_ConfigureEndpointTable>:
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	06 2f       	mov	r16, r22
     5e0:	ec 01       	movw	r28, r24
     5e2:	10 e0       	ldi	r17, 0x00	; 0
     5e4:	10 17       	cp	r17, r16
     5e6:	71 f1       	breq	.+92     	; 0x644 <Endpoint_ConfigureEndpointTable+0x6e>
     5e8:	98 81       	ld	r25, Y
     5ea:	99 23       	and	r25, r25
     5ec:	41 f1       	breq	.+80     	; 0x63e <Endpoint_ConfigureEndpointTable+0x68>
     5ee:	2c 81       	ldd	r18, Y+4	; 0x04
     5f0:	e9 81       	ldd	r30, Y+1	; 0x01
     5f2:	fa 81       	ldd	r31, Y+2	; 0x02

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	7b 81       	ldd	r23, Y+3	; 0x03
     5f6:	89 2f       	mov	r24, r25
     5f8:	8f 70       	andi	r24, 0x0F	; 15
     5fa:	87 30       	cpi	r24, 0x07	; 7
     5fc:	10 f0       	brcs	.+4      	; 0x602 <Endpoint_ConfigureEndpointTable+0x2c>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	22 c0       	rjmp	.+68     	; 0x646 <Endpoint_ConfigureEndpointTable+0x70>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	22 30       	cpi	r18, 0x02	; 2
     604:	10 f0       	brcs	.+4      	; 0x60a <Endpoint_ConfigureEndpointTable+0x34>
     606:	56 e0       	ldi	r21, 0x06	; 6
     608:	01 c0       	rjmp	.+2      	; 0x60c <Endpoint_ConfigureEndpointTable+0x36>
     60a:	52 e0       	ldi	r21, 0x02	; 2
     60c:	28 e0       	ldi	r18, 0x08	; 8
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	2e 17       	cp	r18, r30
     614:	3f 07       	cpc	r19, r31
     616:	20 f4       	brcc	.+8      	; 0x620 <Endpoint_ConfigureEndpointTable+0x4a>
     618:	4f 5f       	subi	r20, 0xFF	; 255
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	f9 cf       	rjmp	.-14     	; 0x612 <Endpoint_ConfigureEndpointTable+0x3c>
     620:	42 95       	swap	r20
     622:	40 7f       	andi	r20, 0xF0	; 240
     624:	45 2b       	or	r20, r21
     626:	69 2f       	mov	r22, r25
     628:	66 1f       	adc	r22, r22
     62a:	66 27       	eor	r22, r22
     62c:	66 1f       	adc	r22, r22
     62e:	90 e4       	ldi	r25, 0x40	; 64
     630:	79 9f       	mul	r23, r25
     632:	90 01       	movw	r18, r0
     634:	11 24       	eor	r1, r1
     636:	62 2b       	or	r22, r18
     638:	99 df       	rcall	.-206    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     63a:	88 23       	and	r24, r24
     63c:	01 f3       	breq	.-64     	; 0x5fe <Endpoint_ConfigureEndpointTable+0x28>
     63e:	1f 5f       	subi	r17, 0xFF	; 255
     640:	25 96       	adiw	r28, 0x05	; 5
     642:	d0 cf       	rjmp	.-96     	; 0x5e4 <Endpoint_ConfigureEndpointTable+0xe>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <Endpoint_ClearStatusStage>:
     650:	80 91 1d 01 	lds	r24, 0x011D
     654:	87 fd       	sbrc	r24, 7
     656:	05 c0       	rjmp	.+10     	; 0x662 <Endpoint_ClearStatusStage+0x12>
     658:	80 91 e8 00 	lds	r24, 0x00E8
     65c:	80 ff       	sbrs	r24, 0
     65e:	0e c0       	rjmp	.+28     	; 0x67c <Endpoint_ClearStatusStage+0x2c>
     660:	12 c0       	rjmp	.+36     	; 0x686 <Endpoint_ClearStatusStage+0x36>
     662:	80 91 e8 00 	lds	r24, 0x00E8
     666:	82 fd       	sbrc	r24, 2
     668:	05 c0       	rjmp	.+10     	; 0x674 <Endpoint_ClearStatusStage+0x24>
     66a:	80 91 1c 01 	lds	r24, 0x011C
     66e:	81 11       	cpse	r24, r1
     670:	f8 cf       	rjmp	.-16     	; 0x662 <Endpoint_ClearStatusStage+0x12>
     672:	08 95       	ret
     674:	80 91 e8 00 	lds	r24, 0x00E8
     678:	8b 77       	andi	r24, 0x7B	; 123
     67a:	08 c0       	rjmp	.+16     	; 0x68c <Endpoint_ClearStatusStage+0x3c>
     67c:	80 91 1c 01 	lds	r24, 0x011C
     680:	81 11       	cpse	r24, r1
     682:	ea cf       	rjmp	.-44     	; 0x658 <Endpoint_ClearStatusStage+0x8>
     684:	08 95       	ret
     686:	80 91 e8 00 	lds	r24, 0x00E8
					  ParserData->TotalReportItems++;
     68a:	8e 77       	andi	r24, 0x7E	; 126
     68c:	80 93 e8 00 	sts	0x00E8, r24
     690:	08 95       	ret

00000692 <Endpoint_WaitUntilReady>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	80 91 e4 00 	lds	r24, 0x00E4
     696:	90 91 e5 00 	lds	r25, 0x00E5
     69a:	45 e6       	ldi	r20, 0x65	; 101
     69c:	20 91 ec 00 	lds	r18, 0x00EC
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	20 ff       	sbrs	r18, 0
     6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <Endpoint_WaitUntilReady+0x54>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	20 91 e8 00 	lds	r18, 0x00E8
     6a8:	20 fd       	sbrc	r18, 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	21 c0       	rjmp	.+66     	; 0x6ee <Endpoint_WaitUntilReady+0x5c>
     6ac:	20 91 1c 01 	lds	r18, 0x011C
     6b0:	22 23       	and	r18, r18
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	89 f0       	breq	.+34     	; 0x6d6 <Endpoint_WaitUntilReady+0x44>
     6b4:	25 30       	cpi	r18, 0x05	; 5
     6b6:	89 f0       	breq	.+34     	; 0x6da <Endpoint_WaitUntilReady+0x48>
     6b8:	20 91 eb 00 	lds	r18, 0x00EB
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	25 fd       	sbrc	r18, 5

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	0f c0       	rjmp	.+30     	; 0x6de <Endpoint_WaitUntilReady+0x4c>
     6c0:	20 91 e4 00 	lds	r18, 0x00E4
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	30 91 e5 00 	lds	r19, 0x00E5
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c8:	28 17       	cp	r18, r24
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	39 07       	cpc	r19, r25
     6cc:	39 f3       	breq	.-50     	; 0x69c <Endpoint_WaitUntilReady+0xa>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	41 50       	subi	r20, 0x01	; 1
     6d0:	41 f0       	breq	.+16     	; 0x6e2 <Endpoint_WaitUntilReady+0x50>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	c9 01       	movw	r24, r18
     6d4:	e3 cf       	rjmp	.-58     	; 0x69c <Endpoint_WaitUntilReady+0xa>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	82 e0       	ldi	r24, 0x02	; 2

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	08 95       	ret
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	08 95       	ret
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	08 95       	ret
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	08 95       	ret
     6e6:	20 91 e8 00 	lds	r18, 0x00E8
     6ea:	22 ff       	sbrs	r18, 2
     6ec:	df cf       	rjmp	.-66     	; 0x6ac <Endpoint_WaitUntilReady+0x1a>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <USB_ResetInterface>:
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	4e d0       	rcall	.+156    	; 0x798 <USB_INT_DisableAllInterrupts>
     6fc:	55 d0       	rcall	.+170    	; 0x7a8 <USB_INT_ClearAllInterrupts>
     6fe:	c8 ed       	ldi	r28, 0xD8	; 216
     700:	d0 e0       	ldi	r29, 0x00	; 0
     702:	88 81       	ld	r24, Y
     704:	8f 77       	andi	r24, 0x7F	; 127
     706:	88 83       	st	Y, r24
     708:	88 81       	ld	r24, Y
     70a:	80 68       	ori	r24, 0x80	; 128

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
				USBCON |=  (1 << USBE);
     70c:	88 83       	st	Y, r24
     70e:	88 81       	ld	r24, Y
     710:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     712:	88 83       	st	Y, r24
     714:	e7 ed       	ldi	r30, 0xD7	; 215
     716:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     718:	80 81       	ld	r24, Z
     71a:	80 68       	ori	r24, 0x80	; 128
     71c:	80 83       	st	Z, r24
     71e:	19 bc       	out	0x29, r1	; 41
     720:	10 92 1c 01 	sts	0x011C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     724:	10 92 18 01 	sts	0x0118, r1
	USB_Device_ConfigurationNumber  = 0;
     728:	10 92 1a 01 	sts	0x011A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     72c:	10 92 19 01 	sts	0x0119, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     730:	00 ee       	ldi	r16, 0xE0	; 224
     732:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     734:	f8 01       	movw	r30, r16
     736:	80 81       	ld	r24, Z
     738:	8b 7f       	andi	r24, 0xFB	; 251
     73a:	80 83       	st	Z, r24
     73c:	88 81       	ld	r24, Y
     73e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     740:	88 83       	st	Y, r24
     742:	42 e0       	ldi	r20, 0x02	; 2
     744:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	11 df       	rcall	.-478    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     74a:	e1 ee       	ldi	r30, 0xE1	; 225
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     750:	8e 7f       	andi	r24, 0xFE	; 254
     752:	80 83       	st	Z, r24
     754:	e2 ee       	ldi	r30, 0xE2	; 226
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	80 83       	st	Z, r24
     75e:	80 81       	ld	r24, Z
     760:	88 60       	ori	r24, 0x08	; 8
     762:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     764:	f8 01       	movw	r30, r16
     766:	80 81       	ld	r24, Z
     768:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     76a:	80 83       	st	Z, r24
     76c:	88 81       	ld	r24, Y
     76e:	80 61       	ori	r24, 0x10	; 16
     770:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <USB_Init>:
     77c:	e8 ed       	ldi	r30, 0xD8	; 216
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     782:	8f 7e       	andi	r24, 0xEF	; 239
     784:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     786:	e7 ed       	ldi	r30, 0xD7	; 215
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	81 60       	ori	r24, 0x01	; 1
     78e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	80 93 1b 01 	sts	0x011B, r24

	USB_ResetInterface();
     796:	ad cf       	rjmp	.-166    	; 0x6f2 <USB_ResetInterface>

00000798 <USB_INT_DisableAllInterrupts>:
     798:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8c 7f       	andi	r24, 0xFC	; 252
     7a0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7a2:	10 92 e2 00 	sts	0x00E2, r1
     7a6:	08 95       	ret

000007a8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     7a8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7ac:	10 92 e1 00 	sts	0x00E1, r1
     7b0:	08 95       	ret

000007b2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	0b b6       	in	r0, 0x3b	; 59
     7be:	0f 92       	push	r0
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     7d8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     7dc:	82 ff       	sbrs	r24, 2
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     7e0:	80 91 e2 00 	lds	r24, 0x00E2
     7e4:	82 ff       	sbrs	r24, 2
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     7e8:	80 91 e1 00 	lds	r24, 0x00E1
     7ec:	8b 7f       	andi	r24, 0xFB	; 251
     7ee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     7f2:	fe dc       	rcall	.-1540   	; 0x1f0 <EVENT_USB_Device_StartOfFrame>
     7f4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     7f8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     7fa:	1d c0       	rjmp	.+58     	; 0x836 <__vector_10+0x84>
     7fc:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     800:	80 ff       	sbrs	r24, 0
     802:	19 c0       	rjmp	.+50     	; 0x836 <__vector_10+0x84>
     804:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     808:	8e 7f       	andi	r24, 0xFE	; 254
     80a:	80 93 da 00 	sts	0x00DA, r24
     80e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     812:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     814:	0c c0       	rjmp	.+24     	; 0x82e <__vector_10+0x7c>
     816:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     818:	89 bd       	out	0x29, r24	; 41
     81a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     81c:	89 bd       	out	0x29, r24	; 41
     81e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     820:	00 fe       	sbrs	r0, 0
     822:	fd cf       	rjmp	.-6      	; 0x81e <__vector_10+0x6c>
     824:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     826:	80 93 1c 01 	sts	0x011C, r24
     82a:	cd dc       	rcall	.-1638   	; 0x1c6 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     82c:	04 c0       	rjmp	.+8      	; 0x836 <__vector_10+0x84>
     82e:	19 bc       	out	0x29, r1	; 41
     830:	10 92 1c 01 	sts	0x011C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     834:	ca dc       	rcall	.-1644   	; 0x1ca <EVENT_USB_Device_Disconnect>
     836:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     83a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     83c:	18 c0       	rjmp	.+48     	; 0x86e <__vector_10+0xbc>
     83e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     842:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     844:	14 c0       	rjmp	.+40     	; 0x86e <__vector_10+0xbc>
     846:	80 91 e2 00 	lds	r24, 0x00E2
     84a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     84c:	80 93 e2 00 	sts	0x00E2, r24
     850:	80 91 e2 00 	lds	r24, 0x00E2
     854:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     856:	80 93 e2 00 	sts	0x00E2, r24
     85a:	80 91 d8 00 	lds	r24, 0x00D8
     85e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     860:	80 93 d8 00 	sts	0x00D8, r24
     864:	19 bc       	out	0x29, r1	; 41
     866:	85 e0       	ldi	r24, 0x05	; 5
     868:	80 93 1c 01 	sts	0x011C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     86c:	bd d1       	rcall	.+890    	; 0xbe8 <USB_Event_Stub>
     86e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     872:	84 ff       	sbrs	r24, 4
     874:	2f c0       	rjmp	.+94     	; 0x8d4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     876:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     87a:	84 ff       	sbrs	r24, 4
     87c:	2b c0       	rjmp	.+86     	; 0x8d4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     87e:	8c e0       	ldi	r24, 0x0C	; 12
     880:	89 bd       	out	0x29, r24	; 41
     882:	8e e0       	ldi	r24, 0x0E	; 14
     884:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     886:	09 b4       	in	r0, 0x29	; 41
     888:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     88a:	fd cf       	rjmp	.-6      	; 0x886 <__vector_10+0xd4>
     88c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     890:	8f 7d       	andi	r24, 0xDF	; 223
     892:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     896:	80 91 e1 00 	lds	r24, 0x00E1
     89a:	8f 7e       	andi	r24, 0xEF	; 239
     89c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     8a0:	80 91 e2 00 	lds	r24, 0x00E2
     8a4:	8f 7e       	andi	r24, 0xEF	; 239
     8a6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8aa:	80 91 e2 00 	lds	r24, 0x00E2
     8ae:	81 60       	ori	r24, 0x01	; 1
     8b0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8b4:	80 91 18 01 	lds	r24, 0x0118
     8b8:	88 23       	and	r24, r24
     8ba:	11 f0       	breq	.+4      	; 0x8c0 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <__vector_10+0x11c>
     8c0:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     8c4:	87 ff       	sbrs	r24, 7
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 1c 01 	sts	0x011C, r24
     8d2:	8a d1       	rcall	.+788    	; 0xbe8 <USB_Event_Stub>
     8d4:	80 91 e1 00 	lds	r24, 0x00E1
     8d8:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     8da:	22 c0       	rjmp	.+68     	; 0x920 <__vector_10+0x16e>
     8dc:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8e0:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8e2:	1e c0       	rjmp	.+60     	; 0x920 <__vector_10+0x16e>
     8e4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8e8:	87 7f       	andi	r24, 0xF7	; 247
     8ea:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 93 1c 01 	sts	0x011C, r24
     8f4:	10 92 18 01 	sts	0x0118, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8f8:	80 91 e1 00 	lds	r24, 0x00E1
     8fc:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     8fe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     902:	80 91 e2 00 	lds	r24, 0x00E2
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     90c:	80 91 e2 00 	lds	r24, 0x00E2
     910:	80 61       	ori	r24, 0x10	; 16
     912:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     916:	42 e0       	ldi	r20, 0x02	; 2
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	27 de       	rcall	.-946    	; 0x56c <Endpoint_ConfigureEndpoint_Prv>
     91e:	64 d1       	rcall	.+712    	; 0xbe8 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0b be       	out	0x3b, r0	; 59
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <USB_Device_ProcessControlRequest>:
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	aa 97       	sbiw	r28, 0x2a	; 42
     952:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	ed e1       	ldi	r30, 0x1D	; 29
     95e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     960:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     964:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	e5 32       	cpi	r30, 0x25	; 37
     96a:	f2 07       	cpc	r31, r18
     96c:	c9 f7       	brne	.-14     	; 0x960 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     96e:	3d dc       	rcall	.-1926   	; 0x1ea <EVENT_USB_Device_ControlRequest>
     970:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     974:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     976:	20 c1       	rjmp	.+576    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     978:	90 91 1d 01 	lds	r25, 0x011D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     97c:	80 91 1e 01 	lds	r24, 0x011E

		switch (USB_ControlRequest.bRequest)
     980:	85 30       	cpi	r24, 0x05	; 5
     982:	09 f4       	brne	.+2      	; 0x986 <USB_Device_ProcessControlRequest+0x40>
     984:	77 c0       	rjmp	.+238    	; 0xa74 <USB_Device_ProcessControlRequest+0x12e>
     986:	30 f4       	brcc	.+12     	; 0x994 <USB_Device_ProcessControlRequest+0x4e>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	81 f1       	breq	.+96     	; 0x9ec <USB_Device_ProcessControlRequest+0xa6>
     98c:	68 f0       	brcs	.+26     	; 0x9a8 <USB_Device_ProcessControlRequest+0x62>
     98e:	83 30       	cpi	r24, 0x03	; 3
     990:	69 f1       	breq	.+90     	; 0x9ec <USB_Device_ProcessControlRequest+0xa6>
     992:	12 c1       	rjmp	.+548    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	09 f4       	brne	.+2      	; 0x99a <USB_Device_ProcessControlRequest+0x54>
     998:	e1 c0       	rjmp	.+450    	; 0xb5c <USB_Device_ProcessControlRequest+0x216>
     99a:	89 30       	cpi	r24, 0x09	; 9
     99c:	09 f4       	brne	.+2      	; 0x9a0 <USB_Device_ProcessControlRequest+0x5a>
     99e:	f0 c0       	rjmp	.+480    	; 0xb80 <USB_Device_ProcessControlRequest+0x23a>
     9a0:	86 30       	cpi	r24, 0x06	; 6
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0x60>
     9a4:	09 c1       	rjmp	.+530    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     9a6:	88 c0       	rjmp	.+272    	; 0xab8 <USB_Device_ProcessControlRequest+0x172>
     9a8:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9aa:	81 f0       	breq	.+32     	; 0x9cc <USB_Device_ProcessControlRequest+0x86>
     9ac:	92 38       	cpi	r25, 0x82	; 130
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <USB_Device_ProcessControlRequest+0x6c>
     9b0:	03 c1       	rjmp	.+518    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     9b2:	80 91 21 01 	lds	r24, 0x0121
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9b6:	8f 70       	andi	r24, 0x0F	; 15
     9b8:	80 93 e9 00 	sts	0x00E9, r24
     9bc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9c0:	85 fb       	bst	r24, 5
     9c2:	88 27       	eor	r24, r24
     9c4:	80 f9       	bld	r24, 0
     9c6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <USB_Device_ProcessControlRequest+0x92>
     9cc:	80 91 19 01 	lds	r24, 0x0119
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     9d0:	90 91 1a 01 	lds	r25, 0x011A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9d4:	91 11       	cpse	r25, r1
     9d6:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9d8:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9dc:	97 7f       	andi	r25, 0xF7	; 247
     9de:	90 93 e8 00 	sts	0x00E8, r25
     9e2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9e6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     9ea:	c3 c0       	rjmp	.+390    	; 0xb72 <USB_Device_ProcessControlRequest+0x22c>
     9ec:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9ee:	2d 7f       	andi	r18, 0xFD	; 253
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0xae>
     9f2:	e2 c0       	rjmp	.+452    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     9f4:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     9f6:	19 f0       	breq	.+6      	; 0x9fe <USB_Device_ProcessControlRequest+0xb8>
     9f8:	92 30       	cpi	r25, 0x02	; 2
     9fa:	61 f0       	breq	.+24     	; 0xa14 <USB_Device_ProcessControlRequest+0xce>
     9fc:	dd c0       	rjmp	.+442    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     9fe:	90 91 1f 01 	lds	r25, 0x011F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a02:	91 30       	cpi	r25, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <USB_Device_ProcessControlRequest+0xc2>
     a06:	d8 c0       	rjmp	.+432    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     a08:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a0a:	09 f0       	breq	.+2      	; 0xa0e <USB_Device_ProcessControlRequest+0xc8>
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	90 93 1a 01 	sts	0x011A, r25
     a12:	2a c0       	rjmp	.+84     	; 0xa68 <USB_Device_ProcessControlRequest+0x122>
     a14:	90 91 1f 01 	lds	r25, 0x011F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a18:	91 11       	cpse	r25, r1
     a1a:	26 c0       	rjmp	.+76     	; 0xa68 <USB_Device_ProcessControlRequest+0x122>
     a1c:	20 91 21 01 	lds	r18, 0x0121
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a20:	2f 70       	andi	r18, 0x0F	; 15
     a22:	09 f4       	brne	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a24:	c9 c0       	rjmp	.+402    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     a26:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a2a:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a2e:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a30:	1b c0       	rjmp	.+54     	; 0xa68 <USB_Device_ProcessControlRequest+0x122>
     a32:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a34:	21 f4       	brne	.+8      	; 0xa3e <USB_Device_ProcessControlRequest+0xf8>
     a36:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a3a:	80 62       	ori	r24, 0x20	; 32
     a3c:	13 c0       	rjmp	.+38     	; 0xa64 <USB_Device_ProcessControlRequest+0x11e>
     a3e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a42:	80 61       	ori	r24, 0x10	; 16
     a44:	80 93 eb 00 	sts	0x00EB, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	02 2e       	mov	r0, r18
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <USB_Device_ProcessControlRequest+0x10c>
     a50:	88 0f       	add	r24, r24
     a52:	0a 94       	dec	r0
     a54:	ea f7       	brpl	.-6      	; 0xa50 <USB_Device_ProcessControlRequest+0x10a>
     a56:	80 93 ea 00 	sts	0x00EA, r24
     a5a:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     a5e:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a62:	88 60       	ori	r24, 0x08	; 8
     a64:	80 93 eb 00 	sts	0x00EB, r24
     a68:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a6c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	82 c0       	rjmp	.+260    	; 0xb78 <USB_Device_ProcessControlRequest+0x232>
     a74:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a76:	a0 c0       	rjmp	.+320    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     a78:	10 91 1f 01 	lds	r17, 0x011F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a7c:	1f 77       	andi	r17, 0x7F	; 127
     a7e:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a82:	80 78       	andi	r24, 0x80	; 128
     a84:	81 2b       	or	r24, r17
     a86:	80 93 e3 00 	sts	0x00E3, r24
     a8a:	80 91 e8 00 	lds	r24, 0x00E8
     a8e:	87 7f       	andi	r24, 0xF7	; 247
     a90:	80 93 e8 00 	sts	0x00E8, r24
     a94:	dd dd       	rcall	.-1094   	; 0x650 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a96:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a9a:	80 ff       	sbrs	r24, 0
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     a9e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 93 e3 00 	sts	0x00E3, r24
     aa8:	11 23       	and	r17, r17
     aaa:	11 f0       	breq	.+4      	; 0xab0 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x16c>
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	80 93 1c 01 	sts	0x011C, r24
     ab6:	80 c0       	rjmp	.+256    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     ab8:	90 58       	subi	r25, 0x80	; 128
     aba:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     abc:	08 f0       	brcs	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x17a>
     abe:	7c c0       	rjmp	.+248    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     ac0:	80 91 1f 01 	lds	r24, 0x011F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ac4:	90 91 20 01 	lds	r25, 0x0120
     ac8:	8c 3d       	cpi	r24, 0xDC	; 220
     aca:	23 e0       	ldi	r18, 0x03	; 3
     acc:	92 07       	cpc	r25, r18
     ace:	71 f5       	brne	.+92     	; 0xb2c <USB_Device_ProcessControlRequest+0x1e6>
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ad4:	8a e2       	ldi	r24, 0x2A	; 42
     ad6:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ad8:	4f b7       	in	r20, 0x3f	; 63
     ada:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     adc:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ade:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ae4:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ae6:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	50 93 57 00 	sts	0x0057, r21
     aee:	e4 91       	lpm	r30, Z
     af0:	20 ff       	sbrs	r18, 0
     af2:	03 c0       	rjmp	.+6      	; 0xafa <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     af4:	e2 95       	swap	r30
     af6:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     af8:	3f 5f       	subi	r19, 0xFF	; 255
     afa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     afc:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	ea 30       	cpi	r30, 0x0A	; 10
     b02:	10 f0       	brcs	.+4      	; 0xb08 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b04:	c7 96       	adiw	r24, 0x37	; 55
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0x1c4>
     b08:	c0 96       	adiw	r24, 0x30	; 48
     b0a:	8d 93       	st	X+, r24
     b0c:	9d 93       	st	X+, r25
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b12:	49 f7       	brne	.-46     	; 0xae6 <USB_Device_ProcessControlRequest+0x1a0>
     b14:	4f bf       	out	0x3f, r20	; 63
     b16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b1a:	87 7f       	andi	r24, 0xF7	; 247
     b1c:	80 93 e8 00 	sts	0x00E8, r24
     b20:	6a e2       	ldi	r22, 0x2A	; 42
     b22:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	26 dc       	rcall	.-1972   	; 0x376 <Endpoint_Write_Control_Stream_LE>
     b2a:	12 c0       	rjmp	.+36     	; 0xb50 <USB_Device_ProcessControlRequest+0x20a>
     b2c:	ae 01       	movw	r20, r28
     b2e:	4f 5f       	subi	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b32:	60 91 21 01 	lds	r22, 0x0121
     b36:	94 db       	rcall	.-2264   	; 0x260 <CALLBACK_USB_GetDescriptor>
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	09 f4       	brne	.+2      	; 0xb3e <USB_Device_ProcessControlRequest+0x1f8>
     b3c:	3d c0       	rjmp	.+122    	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     b3e:	20 91 e8 00 	lds	r18, 0x00E8
     b42:	27 7f       	andi	r18, 0xF7	; 247
     b44:	20 93 e8 00 	sts	0x00E8, r18
     b48:	bc 01       	movw	r22, r24
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	ae dc       	rcall	.-1700   	; 0x4ac <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b50:	80 91 e8 00 	lds	r24, 0x00E8
     b54:	8b 77       	andi	r24, 0x7B	; 123
     b56:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b5a:	2e c0       	rjmp	.+92     	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     b5c:	90 38       	cpi	r25, 0x80	; 128
     b5e:	61 f5       	brne	.+88     	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     b60:	80 91 e8 00 	lds	r24, 0x00E8
     b64:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b66:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b6a:	80 91 18 01 	lds	r24, 0x0118
     b6e:	80 93 f1 00 	sts	0x00F1, r24
     b72:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b76:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b78:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b7c:	69 dd       	rcall	.-1326   	; 0x650 <Endpoint_ClearStatusStage>
     b7e:	1c c0       	rjmp	.+56     	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     b80:	91 11       	cpse	r25, r1
     b82:	1a c0       	rjmp	.+52     	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
     b84:	90 91 1f 01 	lds	r25, 0x011F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     b88:	92 30       	cpi	r25, 0x02	; 2
     b8a:	b0 f4       	brcc	.+44     	; 0xbb8 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b8c:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	80 93 e8 00 	sts	0x00E8, r24
     b96:	90 93 18 01 	sts	0x0118, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b9a:	5a dd       	rcall	.-1356   	; 0x650 <Endpoint_ClearStatusStage>
     b9c:	80 91 18 01 	lds	r24, 0x0118
     ba0:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <USB_Device_ProcessControlRequest+0x266>
     ba4:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     ba8:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <USB_Device_ProcessControlRequest+0x26a>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x26c>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bb2:	80 93 1c 01 	sts	0x011C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bb6:	0b db       	rcall	.-2538   	; 0x1ce <EVENT_USB_Device_ConfigurationChanged>
     bb8:	80 91 e8 00 	lds	r24, 0x00E8
     bbc:	83 ff       	sbrs	r24, 3
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <USB_Device_ProcessControlRequest+0x28e>
     bc0:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     bc4:	87 7f       	andi	r24, 0xF7	; 247
     bc6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bca:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bce:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bd0:	80 93 eb 00 	sts	0x00EB, r24
     bd4:	aa 96       	adiw	r28, 0x2a	; 42
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     be4:	1f 91       	pop	r17
     be6:	08 95       	ret

00000be8 <USB_Event_Stub>:
     be8:	08 95       	ret

00000bea <USB_USBTask>:
     bea:	cf 93       	push	r28
     bec:	80 91 1c 01 	lds	r24, 0x011C
     bf0:	88 23       	and	r24, r24
     bf2:	a9 f0       	breq	.+42     	; 0xc1e <USB_USBTask+0x34>
     bf4:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bf8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bfa:	90 91 ec 00 	lds	r25, 0x00EC
     bfe:	90 ff       	sbrs	r25, 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <USB_USBTask+0x1c>
     c02:	90 e8       	ldi	r25, 0x80	; 128
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <USB_USBTask+0x1e>
     c06:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c08:	c9 2f       	mov	r28, r25
     c0a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c0c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c10:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c14:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c16:	97 de       	rcall	.-722    	; 0x946 <USB_Device_ProcessControlRequest>
     c18:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c1a:	c0 93 e9 00 	sts	0x00E9, r28
     c1e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c20:	08 95       	ret

00000c22 <HID_Device_ProcessControlRequest>:
     c22:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c24:	7f 92       	push	r7
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <HID_Device_ProcessControlRequest+0x1e>
     c40:	1f 92       	push	r1
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c48:	ad b6       	in	r10, 0x3d	; 61
     c4a:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c4c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c50:	83 ff       	sbrs	r24, 3
     c52:	02 c1       	rjmp	.+516    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c54:	f7 01       	movw	r30, r14
     c56:	80 81       	ld	r24, Z
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	20 91 21 01 	lds	r18, 0x0121
     c5e:	30 91 22 01 	lds	r19, 0x0122
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	09 f0       	breq	.+2      	; 0xc6a <HID_Device_ProcessControlRequest+0x48>
     c68:	f7 c0       	rjmp	.+494    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     c6a:	80 91 1e 01 	lds	r24, 0x011E
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	09 f4       	brne	.+2      	; 0xc74 <HID_Device_ProcessControlRequest+0x52>
     c72:	99 c0       	rjmp	.+306    	; 0xda6 <HID_Device_ProcessControlRequest+0x184>
     c74:	30 f4       	brcc	.+12     	; 0xc82 <HID_Device_ProcessControlRequest+0x60>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	71 f0       	breq	.+28     	; 0xc96 <HID_Device_ProcessControlRequest+0x74>
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	09 f4       	brne	.+2      	; 0xc80 <HID_Device_ProcessControlRequest+0x5e>
     c7e:	d0 c0       	rjmp	.+416    	; 0xe20 <HID_Device_ProcessControlRequest+0x1fe>
     c80:	eb c0       	rjmp	.+470    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     c82:	8a 30       	cpi	r24, 0x0A	; 10
     c84:	09 f4       	brne	.+2      	; 0xc88 <HID_Device_ProcessControlRequest+0x66>
     c86:	b4 c0       	rjmp	.+360    	; 0xdf0 <HID_Device_ProcessControlRequest+0x1ce>
     c88:	8b 30       	cpi	r24, 0x0B	; 11
     c8a:	09 f4       	brne	.+2      	; 0xc8e <HID_Device_ProcessControlRequest+0x6c>
     c8c:	9d c0       	rjmp	.+314    	; 0xdc8 <HID_Device_ProcessControlRequest+0x1a6>
     c8e:	89 30       	cpi	r24, 0x09	; 9
     c90:	09 f0       	breq	.+2      	; 0xc94 <HID_Device_ProcessControlRequest+0x72>
     c92:	e2 c0       	rjmp	.+452    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     c94:	4b c0       	rjmp	.+150    	; 0xd2c <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     c96:	80 91 1d 01 	lds	r24, 0x011D
     c9a:	81 3a       	cpi	r24, 0xA1	; 161
     c9c:	09 f0       	breq	.+2      	; 0xca0 <HID_Device_ProcessControlRequest+0x7e>
     c9e:	dc c0       	rjmp	.+440    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     ca0:	8d b6       	in	r8, 0x3d	; 61
     ca2:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     ca4:	1a 82       	std	Y+2, r1	; 0x02
     ca6:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     ca8:	80 91 1f 01 	lds	r24, 0x011F
     cac:	10 91 20 01 	lds	r17, 0x0120
     cb0:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     cb2:	f7 01       	movw	r30, r14
     cb4:	40 85       	ldd	r20, Z+8	; 0x08
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	8d b7       	in	r24, 0x3d	; 61
     cba:	9e b7       	in	r25, 0x3e	; 62
     cbc:	84 1b       	sub	r24, r20
     cbe:	95 0b       	sbc	r25, r21
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	9e bf       	out	0x3e, r25	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	8d bf       	out	0x3d, r24	; 61
     cca:	ed b7       	in	r30, 0x3d	; 61
     ccc:	fe b7       	in	r31, 0x3e	; 62
     cce:	31 96       	adiw	r30, 0x01	; 1
     cd0:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	cf 01       	movw	r24, r30
     cd8:	bc d1       	rcall	.+888    	; 0x1052 <memset>
     cda:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     cdc:	41 0f       	add	r20, r17
     cde:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     ce0:	0f 5f       	subi	r16, 0xFF	; 255
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	96 01       	movw	r18, r12
     ce6:	be 01       	movw	r22, r28
     ce8:	6d 5f       	subi	r22, 0xFD	; 253
     cea:	7f 4f       	sbci	r23, 0xFF	; 255
     cec:	c7 01       	movw	r24, r14
     cee:	8c da       	rcall	.-2792   	; 0x208 <CALLBACK_HID_Device_CreateHIDReport>
     cf0:	f7 01       	movw	r30, r14
     cf2:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     cf4:	97 81       	ldd	r25, Z+7	; 0x07
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	21 f0       	breq	.+8      	; 0xd02 <HID_Device_ProcessControlRequest+0xe0>
     cfa:	40 85       	ldd	r20, Z+8	; 0x08
     cfc:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     cfe:	b6 01       	movw	r22, r12
     d00:	9f d1       	rcall	.+830    	; 0x1040 <memcpy>
     d02:	10 92 e9 00 	sts	0x00E9, r1
     d06:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d0a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d0c:	80 93 e8 00 	sts	0x00E8, r24
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	81 11       	cpse	r24, r1
     d14:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     d18:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d1a:	7a 81       	ldd	r23, Y+2	; 0x02
     d1c:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d1e:	2b db       	rcall	.-2474   	; 0x376 <Endpoint_Write_Control_Stream_LE>
     d20:	80 91 e8 00 	lds	r24, 0x00E8
     d24:	8b 77       	andi	r24, 0x7B	; 123
     d26:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d2a:	37 c0       	rjmp	.+110    	; 0xd9a <HID_Device_ProcessControlRequest+0x178>
     d2c:	80 91 1d 01 	lds	r24, 0x011D
     d30:	81 32       	cpi	r24, 0x21	; 33
     d32:	09 f0       	breq	.+2      	; 0xd36 <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d34:	91 c0       	rjmp	.+290    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     d36:	8d b6       	in	r8, 0x3d	; 61
     d38:	9e b6       	in	r9, 0x3e	; 62
     d3a:	00 91 23 01 	lds	r16, 0x0123
     d3e:	10 91 24 01 	lds	r17, 0x0124
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d42:	70 90 1f 01 	lds	r7, 0x011F
     d46:	60 90 20 01 	lds	r6, 0x0120
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d4a:	8d b7       	in	r24, 0x3d	; 61
     d4c:	9e b7       	in	r25, 0x3e	; 62
     d4e:	80 1b       	sub	r24, r16
     d50:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	9e bf       	out	0x3e, r25	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	8d bf       	out	0x3d, r24	; 61
     d5c:	ed b7       	in	r30, 0x3d	; 61
     d5e:	fe b7       	in	r31, 0x3e	; 62
     d60:	31 96       	adiw	r30, 0x01	; 1
     d62:	6f 01       	movw	r12, r30
     d64:	80 91 e8 00 	lds	r24, 0x00E8
     d68:	87 7f       	andi	r24, 0xF7	; 247
     d6a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d6e:	b8 01       	movw	r22, r16
     d70:	cf 01       	movw	r24, r30
     d72:	5e db       	rcall	.-2372   	; 0x430 <Endpoint_Read_Control_Stream_LE>
     d74:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     d78:	8e 77       	andi	r24, 0x7E	; 126
     d7a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	71 10       	cpse	r7, r1
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <HID_Device_ProcessControlRequest+0x164>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d88:	02 1b       	sub	r16, r18
     d8a:	13 0b       	sbc	r17, r19
     d8c:	2c 0d       	add	r18, r12
     d8e:	3d 1d       	adc	r19, r13
     d90:	4f ef       	ldi	r20, 0xFF	; 255
     d92:	46 0d       	add	r20, r6
     d94:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     d96:	c7 01       	movw	r24, r14
     d98:	55 da       	rcall	.-2902   	; 0x244 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     d9e:	9e be       	out	0x3e, r9	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d be       	out	0x3d, r8	; 61
     da4:	59 c0       	rjmp	.+178    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     da6:	80 91 1d 01 	lds	r24, 0x011D
     daa:	81 3a       	cpi	r24, 0xA1	; 161
     dac:	09 f0       	breq	.+2      	; 0xdb0 <HID_Device_ProcessControlRequest+0x18e>
     dae:	54 c0       	rjmp	.+168    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     db0:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     db4:	87 7f       	andi	r24, 0xF7	; 247
     db6:	80 93 e8 00 	sts	0x00E8, r24
     dba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dbe:	80 ff       	sbrs	r24, 0
     dc0:	fc cf       	rjmp	.-8      	; 0xdba <HID_Device_ProcessControlRequest+0x198>
     dc2:	f7 01       	movw	r30, r14
     dc4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dc6:	40 c0       	rjmp	.+128    	; 0xe48 <HID_Device_ProcessControlRequest+0x226>
     dc8:	80 91 1d 01 	lds	r24, 0x011D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     dcc:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     dce:	09 f0       	breq	.+2      	; 0xdd2 <HID_Device_ProcessControlRequest+0x1b0>
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dd6:	87 7f       	andi	r24, 0xF7	; 247
     dd8:	80 93 e8 00 	sts	0x00E8, r24
     ddc:	39 dc       	rcall	.-1934   	; 0x650 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dde:	90 91 1f 01 	lds	r25, 0x011F
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	91 11       	cpse	r25, r1
     de6:	01 c0       	rjmp	.+2      	; 0xdea <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     dec:	81 87       	std	Z+9, r24	; 0x09
     dee:	34 c0       	rjmp	.+104    	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     df0:	80 91 1d 01 	lds	r24, 0x011D
     df4:	81 32       	cpi	r24, 0x21	; 33
     df6:	81 f5       	brne	.+96     	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     df8:	80 91 e8 00 	lds	r24, 0x00E8
     dfc:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dfe:	80 93 e8 00 	sts	0x00E8, r24
     e02:	26 dc       	rcall	.-1972   	; 0x650 <Endpoint_ClearStatusStage>
     e04:	80 91 1f 01 	lds	r24, 0x011F
     e08:	90 91 20 01 	lds	r25, 0x0120
     e0c:	88 27       	eor	r24, r24
     e0e:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e14:	3a 95       	dec	r19
     e16:	e1 f7       	brne	.-8      	; 0xe10 <HID_Device_ProcessControlRequest+0x1ee>
     e18:	f7 01       	movw	r30, r14
     e1a:	95 87       	std	Z+13, r25	; 0x0d
     e1c:	84 87       	std	Z+12, r24	; 0x0c
     e1e:	1c c0       	rjmp	.+56     	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     e20:	80 91 1d 01 	lds	r24, 0x011D
     e24:	81 3a       	cpi	r24, 0xA1	; 161
     e26:	c1 f4       	brne	.+48     	; 0xe58 <HID_Device_ProcessControlRequest+0x236>
     e28:	80 91 e8 00 	lds	r24, 0x00E8
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e32:	80 91 e8 00 	lds	r24, 0x00E8
     e36:	80 ff       	sbrs	r24, 0
     e38:	fc cf       	rjmp	.-8      	; 0xe32 <HID_Device_ProcessControlRequest+0x210>
     e3a:	f7 01       	movw	r30, r14
     e3c:	84 85       	ldd	r24, Z+12	; 0x0c
     e3e:	95 85       	ldd	r25, Z+13	; 0x0d
     e40:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e42:	87 95       	ror	r24
     e44:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e46:	87 95       	ror	r24
     e48:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
     e50:	8e 77       	andi	r24, 0x7E	; 126
     e52:	80 93 e8 00 	sts	0x00E8, r24
     e56:	fc db       	rcall	.-2056   	; 0x650 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5c:	be be       	out	0x3e, r11	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	ad be       	out	0x3d, r10	; 61
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e66:	0f 90       	pop	r0
     e68:	df 91       	pop	r29
			}

			break;
	}
}
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	08 95       	ret

00000e86 <HID_Device_ConfigureEndpoints>:
     e86:	fc 01       	movw	r30, r24
     e88:	39 96       	adiw	r30, 0x09	; 9
     e8a:	27 e0       	ldi	r18, 0x07	; 7
     e8c:	df 01       	movw	r26, r30
     e8e:	1d 92       	st	X+, r1
     e90:	2a 95       	dec	r18
     e92:	e9 f7       	brne	.-6      	; 0xe8e <HID_Device_ConfigureEndpoints+0x8>
     e94:	21 e0       	ldi	r18, 0x01	; 1
     e96:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e98:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     e9a:	24 ef       	ldi	r18, 0xF4	; 244
     e9c:	31 e0       	ldi	r19, 0x01	; 1
     e9e:	35 87       	std	Z+13, r19	; 0x0d
     ea0:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     ea2:	23 e0       	ldi	r18, 0x03	; 3
     ea4:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	95 cb       	rjmp	.-2262   	; 0x5d6 <Endpoint_ConfigureEndpointTable>

00000eac <HID_Device_USBTask>:
     eac:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     eae:	6f 92       	push	r6
     eb0:	7f 92       	push	r7
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	00 d0       	rcall	.+0      	; 0xecc <HID_Device_USBTask+0x20>
     ecc:	1f 92       	push	r1
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ed4:	ad b6       	in	r10, 0x3d	; 61
     ed6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ed8:	80 91 1c 01 	lds	r24, 0x011C
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	09 f0       	breq	.+2      	; 0xee2 <HID_Device_USBTask+0x36>
     ee0:	8a c0       	rjmp	.+276    	; 0xff6 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ee2:	80 91 e4 00 	lds	r24, 0x00E4
     ee6:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     eea:	f7 01       	movw	r30, r14
     eec:	22 85       	ldd	r18, Z+10	; 0x0a
     eee:	33 85       	ldd	r19, Z+11	; 0x0b
     ef0:	28 17       	cp	r18, r24
     ef2:	39 07       	cpc	r19, r25
     ef4:	09 f4       	brne	.+2      	; 0xef8 <HID_Device_USBTask+0x4c>
     ef6:	7f c0       	rjmp	.+254    	; 0xff6 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8f 70       	andi	r24, 0x0F	; 15
     efc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f00:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     f04:	85 ff       	sbrs	r24, 5
     f06:	77 c0       	rjmp	.+238    	; 0xff6 <HID_Device_USBTask+0x14a>
     f08:	8d b6       	in	r8, 0x3d	; 61
     f0a:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f0c:	40 85       	ldd	r20, Z+8	; 0x08
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	8d b7       	in	r24, 0x3d	; 61
     f12:	9e b7       	in	r25, 0x3e	; 62
     f14:	84 1b       	sub	r24, r20
     f16:	95 0b       	sbc	r25, r21
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	9e bf       	out	0x3e, r25	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	8d bf       	out	0x3d, r24	; 61
     f22:	ed b7       	in	r30, 0x3d	; 61
     f24:	fe b7       	in	r31, 0x3e	; 62
     f26:	31 96       	adiw	r30, 0x01	; 1
     f28:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     f2a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f2c:	1a 82       	std	Y+2, r1	; 0x02
     f2e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	cf 01       	movw	r24, r30
     f36:	8d d0       	rcall	.+282    	; 0x1052 <memset>
     f38:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	96 01       	movw	r18, r12
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	be 01       	movw	r22, r28
     f44:	6d 5f       	subi	r22, 0xFD	; 253
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	c7 01       	movw	r24, r14
     f4a:	5e d9       	rcall	.-3396   	; 0x208 <CALLBACK_HID_Device_CreateHIDReport>
     f4c:	68 2e       	mov	r6, r24
     f4e:	f7 01       	movw	r30, r14
     f50:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f52:	95 85       	ldd	r25, Z+13	; 0x0d
     f54:	89 2b       	or	r24, r25
     f56:	41 f0       	breq	.+16     	; 0xf68 <HID_Device_USBTask+0xbc>
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	86 85       	ldd	r24, Z+14	; 0x0e
     f5c:	97 85       	ldd	r25, Z+15	; 0x0f
     f5e:	89 2b       	or	r24, r25
     f60:	09 f0       	breq	.+2      	; 0xf64 <HID_Device_USBTask+0xb8>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	72 2e       	mov	r7, r18
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <HID_Device_USBTask+0xbe>
     f68:	71 2c       	mov	r7, r1
     f6a:	f7 01       	movw	r30, r14
     f6c:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f6e:	17 81       	ldd	r17, Z+7	; 0x07
     f70:	01 15       	cp	r16, r1
     f72:	11 05       	cpc	r17, r1
     f74:	89 f0       	breq	.+34     	; 0xf98 <HID_Device_USBTask+0xec>
     f76:	49 81       	ldd	r20, Y+1	; 0x01
     f78:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f7a:	b8 01       	movw	r22, r16
     f7c:	c6 01       	movw	r24, r12
     f7e:	53 d0       	rcall	.+166    	; 0x1026 <memcmp>
     f80:	55 24       	eor	r5, r5
     f82:	53 94       	inc	r5
     f84:	89 2b       	or	r24, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <HID_Device_USBTask+0xde>
     f88:	51 2c       	mov	r5, r1
     f8a:	f7 01       	movw	r30, r14
     f8c:	40 85       	ldd	r20, Z+8	; 0x08
     f8e:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     f90:	b6 01       	movw	r22, r12
     f92:	c8 01       	movw	r24, r16
     f94:	55 d0       	rcall	.+170    	; 0x1040 <memcpy>
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <HID_Device_USBTask+0xee>
     f98:	51 2c       	mov	r5, r1
     f9a:	29 81       	ldd	r18, Y+1	; 0x01
     f9c:	3a 81       	ldd	r19, Y+2	; 0x02
     f9e:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     fa0:	f1 f0       	breq	.+60     	; 0xfde <HID_Device_USBTask+0x132>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     fa2:	61 10       	cpse	r6, r1
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <HID_Device_USBTask+0x102>
     fa6:	51 10       	cpse	r5, r1
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <HID_Device_USBTask+0x102>
     faa:	70 fe       	sbrs	r7, 0
     fac:	18 c0       	rjmp	.+48     	; 0xfde <HID_Device_USBTask+0x132>
     fae:	f7 01       	movw	r30, r14
     fb0:	84 85       	ldd	r24, Z+12	; 0x0c
     fb2:	95 85       	ldd	r25, Z+13	; 0x0d
     fb4:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     fb6:	86 87       	std	Z+14, r24	; 0x0e
     fb8:	81 81       	ldd	r24, Z+1	; 0x01
     fba:	8f 70       	andi	r24, 0x0F	; 15
     fbc:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 11       	cpse	r24, r1
     fc4:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     fc8:	69 81       	ldd	r22, Y+1	; 0x01
     fca:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fd0:	c6 01       	movw	r24, r12
     fd2:	89 d9       	rcall	.-3310   	; 0x2e6 <Endpoint_Write_Stream_LE>
     fd4:	80 91 e8 00 	lds	r24, 0x00E8
     fd8:	8e 77       	andi	r24, 0x7E	; 126
     fda:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fde:	80 91 e4 00 	lds	r24, 0x00E4
     fe2:	90 91 e5 00 	lds	r25, 0x00E5
     fe6:	f7 01       	movw	r30, r14
     fe8:	93 87       	std	Z+11, r25	; 0x0b
     fea:	82 87       	std	Z+10, r24	; 0x0a
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     ff0:	9e be       	out	0x3e, r9	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	8d be       	out	0x3d, r8	; 61
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	be be       	out	0x3e, r11	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	ad be       	out	0x3d, r10	; 61
	}
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	bf 90       	pop	r11
    1018:	af 90       	pop	r10
    101a:	9f 90       	pop	r9
    101c:	8f 90       	pop	r8
    101e:	7f 90       	pop	r7
    1020:	6f 90       	pop	r6
    1022:	5f 90       	pop	r5
    1024:	08 95       	ret

00001026 <memcmp>:
    1026:	fb 01       	movw	r30, r22
    1028:	dc 01       	movw	r26, r24
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <memcmp+0xe>
    102c:	8d 91       	ld	r24, X+
    102e:	01 90       	ld	r0, Z+
    1030:	80 19       	sub	r24, r0
    1032:	21 f4       	brne	.+8      	; 0x103c <memcmp+0x16>
    1034:	41 50       	subi	r20, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	c8 f7       	brcc	.-14     	; 0x102c <memcmp+0x6>
    103a:	88 1b       	sub	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	08 95       	ret

00001040 <memcpy>:
    1040:	fb 01       	movw	r30, r22
    1042:	dc 01       	movw	r26, r24
    1044:	02 c0       	rjmp	.+4      	; 0x104a <memcpy+0xa>
    1046:	01 90       	ld	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	41 50       	subi	r20, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	d8 f7       	brcc	.-10     	; 0x1046 <memcpy+0x6>
    1050:	08 95       	ret

00001052 <memset>:
    1052:	dc 01       	movw	r26, r24
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <memset+0x6>
    1056:	6d 93       	st	X+, r22
    1058:	41 50       	subi	r20, 0x01	; 1
    105a:	50 40       	sbci	r21, 0x00	; 0
    105c:	e0 f7       	brcc	.-8      	; 0x1056 <memset+0x4>
    105e:	08 95       	ret

00001060 <_exit>:
    1060:	f8 94       	cli

00001062 <__stop_program>:
    1062:	ff cf       	rjmp	.-2      	; 0x1062 <__stop_program>

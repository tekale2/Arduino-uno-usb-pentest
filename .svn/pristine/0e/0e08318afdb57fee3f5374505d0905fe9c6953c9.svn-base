
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002476  0000250a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  0000252e  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000116a  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000611e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  0000612f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f90c  00000000  00000000  000069c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037a3  00000000  00000000  000162d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005619  00000000  00000000  00019a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001868  00000000  00000000  0001f090  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f82  00000000  00000000  000208f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ae76  00000000  00000000  0002587a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_10>
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c2       	rjmp	.+1044   	; 0x44a <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	08 c2       	rjmp	.+1040   	; 0x44a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c2       	rjmp	.+1036   	; 0x44a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c2       	rjmp	.+1032   	; 0x44a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c2       	rjmp	.+1028   	; 0x44a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	00 c2       	rjmp	.+1024   	; 0x44a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c1       	rjmp	.+1020   	; 0x44a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	fa c1       	rjmp	.+1012   	; 0x44a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c1       	rjmp	.+1008   	; 0x44a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c1       	rjmp	.+1004   	; 0x44a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4640>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4633>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4628>:
     11d:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     12d:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     13d:	0a 00                                               ..

0000013f <__c.4626>:
     13f:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     14f:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15f:	00                                                  .

00000160 <__c.4624>:
     160:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
				ReportSize     -= 1;
				ReportData     += 1;
     180:	64 61 74 61 2e 0d 0a 00                             data....

00000188 <__c.4621>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     198:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     1a8:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

000001b4 <__c.4619>:
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
     1b4:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c4:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     1d4:	00                                                  .

000001d5 <__c.4616>:
     1d5:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     1e5:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     1f5:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

000001ff <__c.4614>:
     1ff:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     20f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     21f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000022d <__c.4612>:
     22d:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23d:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     24d:	0a 00                                               ..

0000024f <__c.4609>:
     24f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     26f:	6f 6e 2e 0d 0a 00                                   on....

00000275 <__c.4607>:

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     275:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
				break;
     285:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     295:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a5:	0d 0a 00                                            ...

000002a8 <__c.4605>:
     2a8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002d5 <__c.4598>:
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
     2d5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2e5:	68 65 64 2e 0d 0a 00                                hed....

000002ec <__c.4593>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     2fc:	0d 0a 00                                            ...

000002ff <__c.4585>:
     2ff:	0d 0a 00                                            ...

00000302 <__c.4578>:
     302:	20 20 20 20 00                                          .

00000307 <__c.4573>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     307:	25 2e 32 58 20 00                                   %.2X .

0000030d <__c.4567>:
     30d:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31d:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000032a <__c.4565>:
     32a:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     33a:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

00000348 <__c.4562>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     348:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     358:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

00000363 <__c.4560>:
     363:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     373:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     383:	2e 0d 0a 00                                         ....

00000387 <__c.4557>:
     387:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     397:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

000003a0 <__c.4554>:
     3a0:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
				break;
     3b0:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	65 61 64 79 2e 0d 0a 00                             eady....

000003c8 <__c.4550>:
     3c8:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d8:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

000003e1 <__c.4541>:
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e1:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f1:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     401:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000040e <__ctors_end>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d0 e2       	ldi	r29, 0x20	; 32
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61

0000041a <__do_copy_data>:
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b1 e0       	ldi	r27, 0x01	; 1

				if (UsageListSize)
     420:	e6 e7       	ldi	r30, 0x76	; 118
     422:	f4 e2       	ldi	r31, 0x24	; 36
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a4 32       	cpi	r26, 0x24	; 36
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a4 e2       	ldi	r26, 0x24	; 36
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a6 34       	cpi	r26, 0x46	; 70

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	b1 07       	cpc	r27, r17
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	54 d1       	rcall	.+680    	; 0x6ee <main>
     446:	0c 94 39 12 	jmp	0x2472	; 0x2472 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <LEDs_SetAllLEDs>:
					  UsageList[i - 1] = UsageList[i];
     44c:	9b b1       	in	r25, 0x0b	; 11
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	98 2b       	or	r25, r24
     452:	9b b9       	out	0x0b, r25	; 11

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	08 95       	ret

00000456 <SetupHardware>:
     456:	84 b7       	in	r24, 0x34	; 52
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	87 7f       	andi	r24, 0xF7	; 247
     45a:	84 bf       	out	0x34, r24	; 52
     45c:	88 e1       	ldi	r24, 0x18	; 24
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 93 60 00 	sts	0x0060, r24
     466:	10 92 60 00 	sts	0x0060, r1
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	80 93 61 00 	sts	0x0061, r24
     478:	90 93 61 00 	sts	0x0061, r25
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	83 e3       	ldi	r24, 0x33	; 51
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 cd 00 	sts	0x00CD, r25
     486:	80 93 cc 00 	sts	0x00CC, r24
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	86 e0       	ldi	r24, 0x06	; 6
     48c:	80 93 ca 00 	sts	0x00CA, r24
     490:	10 92 c8 00 	sts	0x00C8, r1
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	80 93 c9 00 	sts	0x00C9, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	53 9a       	sbi	0x0a, 3	; 10
     49c:	5a 9a       	sbi	0x0b, 2	; 11
     49e:	8a b1       	in	r24, 0x0a	; 10
     4a0:	80 6f       	ori	r24, 0xF0	; 240
     4a2:	8a b9       	out	0x0a, r24	; 10
     4a4:	8b b1       	in	r24, 0x0b	; 11
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	8b b9       	out	0x0b, r24	; 11
     4aa:	d4 d5       	rcall	.+2984   	; 0x1054 <USB_Init>
				break;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <Serial_CreateStream>

000004b4 <MassStorageHost_Task>:
     4b4:	2f 92       	push	r2
     4b6:	3f 92       	push	r3
     4b8:	4f 92       	push	r4
     4ba:	5f 92       	push	r5
     4bc:	6f 92       	push	r6
     4be:	7f 92       	push	r7
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	29 97       	sbiw	r28, 0x09	; 9
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	8d b6       	in	r8, 0x3d	; 61
     4ea:	9e b6       	in	r9, 0x3e	; 62
     4ec:	80 91 31 01 	lds	r24, 0x0131
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	8b 30       	cpi	r24, 0x0B	; 11
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <MassStorageHost_Task+0x42>
     4f4:	de c0       	rjmp	.+444    	; 0x6b2 <MassStorageHost_Task+0x1fe>
     4f6:	80 e2       	ldi	r24, 0x20	; 32
     4f8:	a9 df       	rcall	.-174    	; 0x44c <LEDs_SetAllLEDs>
     4fa:	88 ec       	ldi	r24, 0xC8	; 200
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <MS_Host_TestUnitReady>
     50c:	88 23       	and	r24, r24
     50e:	29 f0       	breq	.+10     	; 0x51a <MassStorageHost_Task+0x66>
     510:	80 38       	cpi	r24, 0x80	; 128
     512:	b9 f3       	breq	.-18     	; 0x502 <MassStorageHost_Task+0x4e>
     514:	80 ea       	ldi	r24, 0xA0	; 160
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	10 c0       	rjmp	.+32     	; 0x53a <MassStorageHost_Task+0x86>
     51a:	87 e8       	ldi	r24, 0x87	; 135
     51c:	93 e0       	ldi	r25, 0x03	; 3

					if (UsageListSize)
     51e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     522:	ae 01       	movw	r20, r28
     524:	4f 5f       	subi	r20, 0xFF	; 255
     526:	5f 4f       	sbci	r21, 0xFF	; 255
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <MS_Host_ReadDeviceCapacity>
     532:	88 23       	and	r24, r24
     534:	51 f0       	breq	.+20     	; 0x54a <MassStorageHost_Task+0x96>
     536:	83 e6       	ldi	r24, 0x63	; 99
     538:	93 e0       	ldi	r25, 0x03	; 3
     53a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	80 e9       	ldi	r24, 0x90	; 144
     540:	85 df       	rcall	.-246    	; 0x44c <LEDs_SetAllLEDs>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 a3 0a 	call	0x1546	; 0x1546 <USB_Host_SetDeviceConfiguration>
     548:	b4 c0       	rjmp	.+360    	; 0x6b2 <MassStorageHost_Task+0x1fe>
						  UsageList[i - 1] = UsageList[i];
     54a:	88 85       	ldd	r24, Y+8	; 0x08
     54c:	8f 93       	push	r24
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	8f 93       	push	r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8e 81       	ldd	r24, Y+6	; 0x06
     554:	8f 93       	push	r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	8f 93       	push	r24
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	8f 93       	push	r24
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	8f 93       	push	r24
     562:	8a 81       	ldd	r24, Y+2	; 0x02
     564:	8f 93       	push	r24
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	8f 93       	push	r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	88 e4       	ldi	r24, 0x48	; 72
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     576:	ed 80       	ldd	r14, Y+5	; 0x05
     578:	fe 80       	ldd	r15, Y+6	; 0x06
     57a:	0f 81       	ldd	r16, Y+7	; 0x07
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	18 85       	ldd	r17, Y+8	; 0x08
     57e:	8d b7       	in	r24, 0x3d	; 61
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	9e b7       	in	r25, 0x3e	; 62
     582:	0a 96       	adiw	r24, 0x0a	; 10
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	9e bf       	out	0x3e, r25	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	8d bf       	out	0x3d, r24	; 61
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	ad b6       	in	r10, 0x3d	; 61
     590:	be b6       	in	r11, 0x3e	; 62

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	ad b7       	in	r26, 0x3d	; 61
     594:	be b7       	in	r27, 0x3e	; 62
     596:	ae 19       	sub	r26, r14
     598:	bf 09       	sbc	r27, r15
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	be bf       	out	0x3e, r27	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	ad bf       	out	0x3d, r26	; 61
     5a4:	ed b7       	in	r30, 0x3d	; 61
     5a6:	fe b7       	in	r31, 0x3e	; 62
     5a8:	31 96       	adiw	r30, 0x01	; 1
     5aa:	1f 01       	movw	r2, r30

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	6f 01       	movw	r12, r30
     5ae:	01 e0       	ldi	r16, 0x01	; 1
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	a9 01       	movw	r20, r18
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	91 e0       	ldi	r25, 0x01	; 1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <MS_Host_ReadDeviceBlocks>
     5c0:	88 23       	and	r24, r24
     5c2:	31 f0       	breq	.+12     	; 0x5d0 <MassStorageHost_Task+0x11c>
     5c4:	8a e2       	ldi	r24, 0x2A	; 42
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     5cc:	80 e9       	ldi	r24, 0x90	; 144
     5ce:	69 c0       	rjmp	.+210    	; 0x6a2 <MassStorageHost_Task+0x1ee>
     5d0:	8d e0       	ldi	r24, 0x0D	; 13
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	42 e0       	ldi	r20, 0x02	; 2
     5de:	c4 2e       	mov	r12, r20
     5e0:	43 e0       	ldi	r20, 0x03	; 3
     5e2:	d4 2e       	mov	r13, r20
     5e4:	a8 01       	movw	r20, r16
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	8d 81       	ldd	r24, Y+5	; 0x05
     5ec:	9e 81       	ldd	r25, Y+6	; 0x06
     5ee:	af 81       	ldd	r26, Y+7	; 0x07
     5f0:	b8 85       	ldd	r27, Y+8	; 0x08
     5f2:	24 e0       	ldi	r18, 0x04	; 4

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	b6 95       	lsr	r27
     5f6:	a7 95       	ror	r26
     5f8:	97 95       	ror	r25
     5fa:	87 95       	ror	r24
     5fc:	2a 95       	dec	r18
					  return HID_PARSE_InsufficientReportItems;
     5fe:	d1 f7       	brne	.-12     	; 0x5f4 <MassStorageHost_Task+0x140>
     600:	48 17       	cp	r20, r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	59 07       	cpc	r21, r25
     604:	6a 07       	cpc	r22, r26
     606:	7b 07       	cpc	r23, r27
     608:	08 f0       	brcs	.+2      	; 0x60c <MassStorageHost_Task+0x158>
     60a:	4a c0       	rjmp	.+148    	; 0x6a0 <MassStorageHost_Task+0x1ec>
     60c:	78 01       	movw	r14, r16
     60e:	34 e0       	ldi	r19, 0x04	; 4
     610:	ee 0c       	add	r14, r14
     612:	ff 1c       	adc	r15, r15
     614:	3a 95       	dec	r19
     616:	e1 f7       	brne	.-8      	; 0x610 <MassStorageHost_Task+0x15c>
     618:	e2 0c       	add	r14, r2
     61a:	f3 1c       	adc	r15, r3
     61c:	37 01       	movw	r6, r14
     61e:	51 2c       	mov	r5, r1
     620:	d3 01       	movw	r26, r6
     622:	8d 91       	ld	r24, X+
     624:	3d 01       	movw	r6, r26
     626:	1f 92       	push	r1
     628:	8f 93       	push	r24
     62a:	a7 e0       	ldi	r26, 0x07	; 7
     62c:	b3 e0       	ldi	r27, 0x03	; 3
     62e:	bf 93       	push	r27
     630:	af 93       	push	r26
     632:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     636:	53 94       	inc	r5
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	f0 e1       	ldi	r31, 0x10	; 16
     642:	5f 12       	cpse	r5, r31
     644:	ed cf       	rjmp	.-38     	; 0x620 <MassStorageHost_Task+0x16c>
     646:	df 92       	push	r13
     648:	cf 92       	push	r12
     64a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	d7 01       	movw	r26, r14
     656:	4d 90       	ld	r4, X+
     658:	7d 01       	movw	r14, r26
     65a:	60 90 42 01 	lds	r6, 0x0142
     65e:	70 90 43 01 	lds	r7, 0x0143
     662:	51 2c       	mov	r5, r1
     664:	c2 01       	movw	r24, r4
     666:	29 87       	std	Y+9, r18	; 0x09
     668:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <isprint>
     66c:	29 85       	ldd	r18, Y+9	; 0x09
     66e:	89 2b       	or	r24, r25
     670:	19 f4       	brne	.+6      	; 0x678 <MassStorageHost_Task+0x1c4>
     672:	8e e2       	ldi	r24, 0x2E	; 46
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	01 c0       	rjmp	.+2      	; 0x67a <MassStorageHost_Task+0x1c6>
     678:	c2 01       	movw	r24, r4
     67a:	b3 01       	movw	r22, r6
     67c:	29 87       	std	Y+9, r18	; 0x09
     67e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <fputc>
     682:	29 85       	ldd	r18, Y+9	; 0x09
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	20 31       	cpi	r18, 0x10	; 16
					  ParserData->TotalReportItems++;
     688:	29 f7       	brne	.-54     	; 0x654 <MassStorageHost_Task+0x1a0>
     68a:	af ef       	ldi	r26, 0xFF	; 255
     68c:	b2 e0       	ldi	r27, 0x02	; 2
     68e:	bf 93       	push	r27
     690:	af 93       	push	r26

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	a2 cf       	rjmp	.-188    	; 0x5e4 <MassStorageHost_Task+0x130>
     6a0:	80 e6       	ldi	r24, 0x60	; 96
     6a2:	d4 de       	rcall	.-600    	; 0x44c <LEDs_SetAllLEDs>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	4f d7       	rcall	.+3742   	; 0x1546 <USB_Host_SetDeviceConfiguration>
     6a8:	0f b6       	in	r0, 0x3f	; 63
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	f8 94       	cli
     6ac:	be be       	out	0x3e, r11	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	ad be       	out	0x3d, r10	; 61
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	9e be       	out	0x3e, r9	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	8d be       	out	0x3d, r8	; 61
     6bc:	29 96       	adiw	r28, 0x09	; 9

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	df 91       	pop	r29
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	cf 90       	pop	r12

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	9f 90       	pop	r9
     6de:	8f 90       	pop	r8
     6e0:	7f 90       	pop	r7
     6e2:	6f 90       	pop	r6
     6e4:	5f 90       	pop	r5
     6e6:	4f 90       	pop	r4
     6e8:	3f 90       	pop	r3
     6ea:	2f 90       	pop	r2
     6ec:	08 95       	ret

000006ee <main>:
     6ee:	b3 de       	rcall	.-666    	; 0x456 <SetupHardware>
     6f0:	81 ee       	ldi	r24, 0xE1	; 225
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     6f8:	80 e1       	ldi	r24, 0x10	; 16
     6fa:	a8 de       	rcall	.-688    	; 0x44c <LEDs_SetAllLEDs>
     6fc:	78 94       	sei
     6fe:	da de       	rcall	.-588    	; 0x4b4 <MassStorageHost_Task>
     700:	61 d7       	rcall	.+3778   	; 0x15c4 <USB_USBTask>
     702:	fd cf       	rjmp	.-6      	; 0x6fe <main+0x10>

00000704 <EVENT_USB_Host_DeviceAttached>:
     704:	8c ee       	ldi	r24, 0xEC	; 236
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	9e ce       	rjmp	.-708    	; 0x44c <LEDs_SetAllLEDs>

00000710 <EVENT_USB_Host_DeviceUnattached>:
     710:	85 ed       	ldi	r24, 0xD5	; 213
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	98 ce       	rjmp	.-720    	; 0x44c <LEDs_SetAllLEDs>

0000071c <EVENT_USB_Host_DeviceEnumerationComplete>:
     71c:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	c9 53       	subi	r28, 0x39	; 57
     726:	d2 40       	sbci	r29, 0x02	; 2
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     732:	80 ea       	ldi	r24, 0xA0	; 160
     734:	8b de       	rcall	.-746    	; 0x44c <LEDs_SetAllLEDs>
     736:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     738:	32 e0       	ldi	r19, 0x02	; 2
     73a:	ae 01       	movw	r20, r28
     73c:	4f 5f       	subi	r20, 0xFF	; 255
     73e:	5f 4f       	sbci	r21, 0xFF	; 255
     740:	be 01       	movw	r22, r28
     742:	69 5c       	subi	r22, 0xC9	; 201
     744:	7d 4f       	sbci	r23, 0xFD	; 253
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	4f d5       	rcall	.+2718   	; 0x11e8 <USB_Host_GetDeviceConfigDescriptor>
     74a:	88 23       	and	r24, r24
     74c:	19 f0       	breq	.+6      	; 0x754 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     74e:	88 ea       	ldi	r24, 0xA8	; 168
     750:	92 e0       	ldi	r25, 0x02	; 2
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     752:	11 c0       	rjmp	.+34     	; 0x776 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     754:	c9 5c       	subi	r28, 0xC9	; 201
     756:	dd 4f       	sbci	r29, 0xFD	; 253
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     758:	68 81       	ld	r22, Y
     75a:	79 81       	ldd	r23, Y+1	; 0x01
     75c:	c7 53       	subi	r28, 0x37	; 55
     75e:	d2 40       	sbci	r29, 0x02	; 2
     760:	ae 01       	movw	r20, r28
     762:	4f 5f       	subi	r20, 0xFF	; 255
     764:	5f 4f       	sbci	r21, 0xFF	; 255
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MS_Host_ConfigurePipes>
     76e:	88 23       	and	r24, r24
     770:	39 f0       	breq	.+14     	; 0x780 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     772:	85 e7       	ldi	r24, 0x75	; 117
     774:	92 e0       	ldi	r25, 0x02	; 2
	                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     776:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     77a:	80 e9       	ldi	r24, 0x90	; 144
     77c:	67 de       	rcall	.-818    	; 0x44c <LEDs_SetAllLEDs>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     77e:	7a c0       	rjmp	.+244    	; 0x874 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	e1 d6       	rcall	.+3522   	; 0x1546 <USB_Host_SetDeviceConfiguration>
		return;
     784:	88 23       	and	r24, r24
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     786:	19 f0       	breq	.+6      	; 0x78e <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
     788:	8f e4       	ldi	r24, 0x4F	; 79
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	f4 cf       	rjmp	.-24     	; 0x776 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     78e:	be 01       	movw	r22, r28
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     790:	67 5c       	subi	r22, 0xC7	; 199
     792:	7d 4f       	sbci	r23, 0xFD	; 253
     794:	80 e0       	ldi	r24, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint8_t MaxLUNIndex;
	if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <MS_Host_GetMaxLUN>
     79c:	88 23       	and	r24, r24
     79e:	19 f0       	breq	.+6      	; 0x7a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     7a0:	8d e2       	ldi	r24, 0x2D	; 45
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	40 c0       	rjmp	.+128    	; 0x826 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     7a6:	c7 5c       	subi	r28, 0xC7	; 199
	{
		puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     7a8:	dd 4f       	sbci	r29, 0xFD	; 253
     7aa:	88 81       	ld	r24, Y
     7ac:	c9 53       	subi	r28, 0x39	; 57
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     7ae:	d2 40       	sbci	r29, 0x02	; 2
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	9f 93       	push	r25
     7be:	8f 93       	push	r24
     7c0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MS_Host_ResetMSInterface>

	if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	88 23       	and	r24, r24
     7d6:	19 f0       	breq	.+6      	; 0x7de <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
     7d8:	85 ed       	ldi	r24, 0xD5	; 213
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	24 c0       	rjmp	.+72     	; 0x826 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     7de:	ae 01       	movw	r20, r28
	{
		puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     7e0:	4b 5d       	subi	r20, 0xDB	; 219
     7e2:	5d 4f       	sbci	r21, 0xFD	; 253
     7e4:	60 e0       	ldi	r22, 0x00	; 0
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Request_Sense_Response_t SenseData;
	if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <MS_Host_RequestSense>
     7ee:	88 23       	and	r24, r24
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
     7f2:	84 eb       	ldi	r24, 0xB4	; 180
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	17 c0       	rjmp	.+46     	; 0x826 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     7f8:	41 e0       	ldi	r20, 0x01	; 1
	{
		puts_P(PSTR("Error retrieving device sense.\r\n"));
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     800:	0e 94 76 0e 	call	0x1cec	; 0x1cec <MS_Host_PreventAllowMediumRemoval>
     804:	88 23       	and	r24, r24
     806:	19 f0       	breq	.+6      	; 0x80e <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
     808:	88 e8       	ldi	r24, 0x88	; 136
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0c c0       	rjmp	.+24     	; 0x826 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     80e:	ae 01       	movw	r20, r28
	{
		puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     810:	4f 5f       	subi	r20, 0xFF	; 255
     812:	5d 4f       	sbci	r21, 0xFD	; 253
     814:	60 e0       	ldi	r22, 0x00	; 0
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Inquiry_Response_t InquiryData;
	if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <MS_Host_GetInquiryData>
     81e:	88 23       	and	r24, r24
     820:	49 f0       	breq	.+18     	; 0x834 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
     822:	80 e6       	ldi	r24, 0x60	; 96
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
	{
		puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     82a:	80 e9       	ldi	r24, 0x90	; 144
     82c:	0f de       	rcall	.-994    	; 0x44c <LEDs_SetAllLEDs>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	8a d6       	rcall	.+3348   	; 0x1546 <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     832:	20 c0       	rjmp	.+64     	; 0x874 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	92 e0       	ldi	r25, 0x02	; 2
		USB_Host_SetDeviceConfiguration(0);
     838:	8c 0f       	add	r24, r28
     83a:	9d 1f       	adc	r25, r29
     83c:	40 96       	adiw	r24, 0x10	; 16
		return;
     83e:	9f 93       	push	r25
	}

	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     840:	8f 93       	push	r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	8c 0f       	add	r24, r28
     848:	9d 1f       	adc	r25, r29
     84a:	08 96       	adiw	r24, 0x08	; 8
     84c:	9f 93       	push	r25
     84e:	8f 93       	push	r24
     850:	8f e3       	ldi	r24, 0x3F	; 63
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     85c:	8d e1       	ldi	r24, 0x1D	; 29
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <puts_P>
     864:	80 e6       	ldi	r24, 0x60	; 96
     866:	f2 dd       	rcall	.-1052   	; 0x44c <LEDs_SetAllLEDs>

	puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	c7 5c       	subi	r28, 0xC7	; 199
     876:	dd 4f       	sbci	r29, 0xFD	; 253
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <EVENT_USB_Host_HostError>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	77 d3       	rcall	.+1774   	; 0xf84 <USB_Disable>

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     896:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	8f 93       	push	r24
     89c:	8e ee       	ldi	r24, 0xEE	; 238
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
     8a8:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     8aa:	d0 dd       	rcall	.-1120   	; 0x44c <LEDs_SetAllLEDs>
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	ff cf       	rjmp	.-2      	; 0x8b4 <EVENT_USB_Host_HostError+0x2c>

000008b6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     8b6:	90 91 31 01 	lds	r25, 0x0131
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     8ba:	1f 92       	push	r1
     8bc:	9f 93       	push	r25
     8be:	1f 92       	push	r1
     8c0:	6f 93       	push	r22
     8c2:	1f 92       	push	r1
     8c4:	8f 93       	push	r24
     8c6:	88 e9       	ldi	r24, 0x98	; 152
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     8d2:	8d b7       	in	r24, 0x3d	; 61
     8d4:	9e b7       	in	r25, 0x3e	; 62
     8d6:	08 96       	adiw	r24, 0x08	; 8
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	9e bf       	out	0x3e, r25	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	8d bf       	out	0x3d, r24	; 61
     8e2:	80 e9       	ldi	r24, 0x90	; 144
     8e4:	b3 cd       	rjmp	.-1178   	; 0x44c <LEDs_SetAllLEDs>

000008e6 <USB_Host_ResetDevice>:
     8e6:	80 91 9e 00 	lds	r24, 0x009E
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8ea:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     8ec:	90 91 a0 00 	lds	r25, 0x00A0
     8f0:	9d 7f       	andi	r25, 0xFD	; 253
     8f2:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8f6:	90 91 9e 00 	lds	r25, 0x009E
     8fa:	92 60       	ori	r25, 0x02	; 2
     8fc:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     900:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     904:	91 fd       	sbrc	r25, 1
     906:	fc cf       	rjmp	.-8      	; 0x900 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     908:	90 91 9e 00 	lds	r25, 0x009E
     90c:	91 60       	ori	r25, 0x01	; 1
     90e:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     912:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     916:	90 91 a0 00 	lds	r25, 0x00A0
     91a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     91c:	20 91 a0 00 	lds	r18, 0x00A0
     920:	2f 7d       	andi	r18, 0xDF	; 223
     922:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     926:	20 91 9f 00 	lds	r18, 0x009F
     92a:	2f 7d       	andi	r18, 0xDF	; 223
     92c:	20 93 9f 00 	sts	0x009F, r18
     930:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     932:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     936:	35 ff       	sbrs	r19, 5
     938:	0b c0       	rjmp	.+22     	; 0x950 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     93a:	20 91 9f 00 	lds	r18, 0x009F
     93e:	2f 7d       	andi	r18, 0xDF	; 223
     940:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     944:	20 91 9f 00 	lds	r18, 0x009F
     948:	2d 7f       	andi	r18, 0xFD	; 253
     94a:	20 93 9f 00 	sts	0x009F, r18
     94e:	08 c0       	rjmp	.+16     	; 0x960 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     950:	ef ec       	ldi	r30, 0xCF	; 207
     952:	f7 e0       	ldi	r31, 0x07	; 7
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <USB_Host_ResetDevice+0x6e>
     958:	00 c0       	rjmp	.+0      	; 0x95a <USB_Host_ResetDevice+0x74>
     95a:	00 00       	nop
     95c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     95e:	49 f7       	brne	.-46     	; 0x932 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     960:	99 23       	and	r25, r25
     962:	29 f0       	breq	.+10     	; 0x96e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     964:	90 91 a0 00 	lds	r25, 0x00A0
     968:	90 62       	ori	r25, 0x20	; 32
     96a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     96e:	81 11       	cpse	r24, r1
     970:	05 c0       	rjmp	.+10     	; 0x97c <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     972:	80 91 9e 00 	lds	r24, 0x009E
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     97c:	80 91 a0 00 	lds	r24, 0x00A0
     980:	82 60       	ori	r24, 0x02	; 2
     982:	80 93 a0 00 	sts	0x00A0, r24
     986:	08 95       	ret

00000988 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     988:	20 91 9e 00 	lds	r18, 0x009E
     98c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     98e:	90 91 a0 00 	lds	r25, 0x00A0
     992:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     994:	30 91 a0 00 	lds	r19, 0x00A0
     998:	3f 7d       	andi	r19, 0xDF	; 223
     99a:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     99e:	30 91 9f 00 	lds	r19, 0x009F
     9a2:	3f 7d       	andi	r19, 0xDF	; 223
     9a4:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9a8:	30 91 9e 00 	lds	r19, 0x009E
     9ac:	31 60       	ori	r19, 0x01	; 1
     9ae:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9b2:	88 23       	and	r24, r24
     9b4:	39 f1       	breq	.+78     	; 0xa04 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9b6:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9ba:	35 ff       	sbrs	r19, 5
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9be:	30 91 9f 00 	lds	r19, 0x009F
     9c2:	3f 7d       	andi	r19, 0xDF	; 223
     9c4:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9c8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9ca:	30 91 31 01 	lds	r19, 0x0131
     9ce:	31 30       	cpi	r19, 0x01	; 1
     9d0:	c1 f0       	breq	.+48     	; 0xa02 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9d2:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     9d6:	34 ff       	sbrs	r19, 4
     9d8:	09 c0       	rjmp	.+18     	; 0x9ec <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9da:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     9de:	80 91 a6 00 	lds	r24, 0x00A6
     9e2:	8f 7e       	andi	r24, 0xEF	; 239
     9e4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9e8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9ea:	0c c0       	rjmp	.+24     	; 0xa04 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9ec:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     9f0:	31 ff       	sbrs	r19, 1
     9f2:	df cf       	rjmp	.-66     	; 0x9b2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9f4:	80 91 a6 00 	lds	r24, 0x00A6
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     9fe:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a02:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a04:	21 11       	cpse	r18, r1
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a08:	20 91 9e 00 	lds	r18, 0x009E
     a0c:	2e 7f       	andi	r18, 0xFE	; 254
     a0e:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a12:	99 23       	and	r25, r25
     a14:	29 f0       	breq	.+10     	; 0xa20 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a16:	90 91 a0 00 	lds	r25, 0x00A0
     a1a:	90 62       	ori	r25, 0x20	; 32
     a1c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a20:	08 95       	ret

00000a22 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	28 97       	sbiw	r28, 0x08	; 8
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     a3a:	80 91 31 01 	lds	r24, 0x0131
     a3e:	85 30       	cpi	r24, 0x05	; 5
     a40:	09 f4       	brne	.+2      	; 0xa44 <USB_Host_ProcessNextHostState+0x22>
     a42:	9c c0       	rjmp	.+312    	; 0xb7c <USB_Host_ProcessNextHostState+0x15a>
     a44:	68 f4       	brcc	.+26     	; 0xa60 <USB_Host_ProcessNextHostState+0x3e>
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	e1 f1       	breq	.+120    	; 0xac2 <USB_Host_ProcessNextHostState+0xa0>
     a4a:	18 f4       	brcc	.+6      	; 0xa52 <USB_Host_ProcessNextHostState+0x30>
     a4c:	88 23       	and	r24, r24
     a4e:	d9 f0       	breq	.+54     	; 0xa86 <USB_Host_ProcessNextHostState+0x64>
     a50:	ff c0       	rjmp	.+510    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     a52:	83 30       	cpi	r24, 0x03	; 3
     a54:	09 f4       	brne	.+2      	; 0xa58 <USB_Host_ProcessNextHostState+0x36>
     a56:	3f c0       	rjmp	.+126    	; 0xad6 <USB_Host_ProcessNextHostState+0xb4>
     a58:	84 30       	cpi	r24, 0x04	; 4
     a5a:	09 f4       	brne	.+2      	; 0xa5e <USB_Host_ProcessNextHostState+0x3c>
     a5c:	67 c0       	rjmp	.+206    	; 0xb2c <USB_Host_ProcessNextHostState+0x10a>
     a5e:	f8 c0       	rjmp	.+496    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     a60:	87 30       	cpi	r24, 0x07	; 7
     a62:	09 f4       	brne	.+2      	; 0xa66 <USB_Host_ProcessNextHostState+0x44>
     a64:	a6 c0       	rjmp	.+332    	; 0xbb2 <USB_Host_ProcessNextHostState+0x190>
     a66:	08 f4       	brcc	.+2      	; 0xa6a <USB_Host_ProcessNextHostState+0x48>
     a68:	96 c0       	rjmp	.+300    	; 0xb96 <USB_Host_ProcessNextHostState+0x174>
     a6a:	88 30       	cpi	r24, 0x08	; 8
     a6c:	09 f4       	brne	.+2      	; 0xa70 <USB_Host_ProcessNextHostState+0x4e>
     a6e:	bf c0       	rjmp	.+382    	; 0xbee <USB_Host_ProcessNextHostState+0x1cc>
     a70:	89 30       	cpi	r24, 0x09	; 9
     a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Host_ProcessNextHostState+0x54>
     a74:	ed c0       	rjmp	.+474    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a7c:	8a e0       	ldi	r24, 0x0A	; 10
     a7e:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a82:	4c de       	rcall	.-872    	; 0x71c <EVENT_USB_Host_DeviceEnumerationComplete>
     a84:	e5 c0       	rjmp	.+458    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
			break;
     a86:	00 91 25 01 	lds	r16, 0x0125
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a8a:	10 91 26 01 	lds	r17, 0x0126
     a8e:	01 15       	cp	r16, r1
     a90:	11 05       	cpc	r17, r1
     a92:	09 f4       	brne	.+2      	; 0xa96 <USB_Host_ProcessNextHostState+0x74>
     a94:	dd c0       	rjmp	.+442    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     a96:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a98:	77 df       	rcall	.-274    	; 0x988 <USB_Host_WaitMS>
     a9a:	88 23       	and	r24, r24
     a9c:	31 f0       	breq	.+12     	; 0xaaa <USB_Host_ProcessNextHostState+0x88>
     a9e:	90 91 24 01 	lds	r25, 0x0124
				{
					USB_HostState = PostWaitState;
     aa2:	90 93 31 01 	sts	0x0131, r25
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	c5 c0       	rjmp	.+394    	; 0xc34 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     aaa:	01 50       	subi	r16, 0x01	; 1
					break;
     aac:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     aae:	10 93 26 01 	sts	0x0126, r17
     ab2:	00 93 25 01 	sts	0x0125, r16
     ab6:	01 2b       	or	r16, r17
     ab8:	09 f0       	breq	.+2      	; 0xabc <USB_Host_ProcessNextHostState+0x9a>
     aba:	ca c0       	rjmp	.+404    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     abc:	80 91 24 01 	lds	r24, 0x0124
				  USB_HostState = PostWaitState;
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <USB_Host_ProcessNextHostState+0xae>
     ac2:	88 ee       	ldi	r24, 0xE8	; 232
     ac4:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     ac6:	90 93 26 01 	sts	0x0126, r25
     aca:	80 93 25 01 	sts	0x0125, r24
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	80 93 31 01 	sts	0x0131, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ad4:	bd c0       	rjmp	.+378    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     ad6:	80 91 25 01 	lds	r24, 0x0125
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ada:	90 91 26 01 	lds	r25, 0x0126
     ade:	9c 01       	movw	r18, r24
     ae0:	21 50       	subi	r18, 0x01	; 1
     ae2:	31 09       	sbc	r19, r1
     ae4:	30 93 26 01 	sts	0x0126, r19
     ae8:	20 93 25 01 	sts	0x0125, r18
     aec:	89 2b       	or	r24, r25
     aee:	39 f0       	breq	.+14     	; 0xafe <USB_Host_ProcessNextHostState+0xdc>
     af0:	8f ec       	ldi	r24, 0xCF	; 207
     af2:	97 e0       	ldi	r25, 0x07	; 7
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <USB_Host_ProcessNextHostState+0xd2>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <USB_Host_ProcessNextHostState+0xd8>
     afa:	00 00       	nop
     afc:	a9 c0       	rjmp	.+338    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     afe:	77 98       	cbi	0x0e, 7	; 14
     b00:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b04:	80 61       	ori	r24, 0x10	; 16
     b06:	80 93 d8 00 	sts	0x00D8, r24
     b0a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b0e:	8b 7f       	andi	r24, 0xFB	; 251
     b10:	80 93 dd 00 	sts	0x00DD, r24
     b14:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     b18:	80 61       	ori	r24, 0x10	; 16
     b1a:	80 93 d7 00 	sts	0x00D7, r24
     b1e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b22:	82 60       	ori	r24, 0x02	; 2
     b24:	80 93 dd 00 	sts	0x00DD, r24
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	d2 cf       	rjmp	.-92     	; 0xad0 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b2c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b30:	80 ff       	sbrs	r24, 0
     b32:	8e c0       	rjmp	.+284    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b34:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	80 93 9f 00 	sts	0x009F, r24
     b3e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b42:	8d 7f       	andi	r24, 0xFD	; 253
     b44:	80 93 9f 00 	sts	0x009F, r24
     b48:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b4c:	8d 7f       	andi	r24, 0xFD	; 253
     b4e:	80 93 df 00 	sts	0x00DF, r24
     b52:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	80 93 de 00 	sts	0x00DE, r24
     b5c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	80 93 9e 00 	sts	0x009E, r24
     b66:	a0 d1       	rcall	.+832    	; 0xea8 <Pipe_ClearPipes>
     b68:	10 92 31 01 	sts	0x0131, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b6c:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 26 01 	sts	0x0126, r25
     b74:	80 93 25 01 	sts	0x0125, r24
     b78:	85 e0       	ldi	r24, 0x05	; 5
     b7a:	0a c0       	rjmp	.+20     	; 0xb90 <USB_Host_ProcessNextHostState+0x16e>
     b7c:	b4 de       	rcall	.-664    	; 0x8e6 <USB_Host_ResetDevice>
     b7e:	10 92 31 01 	sts	0x0131, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b82:	88 ec       	ldi	r24, 0xC8	; 200
     b84:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b86:	90 93 26 01 	sts	0x0126, r25
     b8a:	80 93 25 01 	sts	0x0125, r24
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	80 93 24 01 	sts	0x0124, r24
     b94:	5d c0       	rjmp	.+186    	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     b96:	01 e0       	ldi	r16, 0x01	; 1
     b98:	20 e4       	ldi	r18, 0x40	; 64
     b9a:	30 e0       	ldi	r19, 0x00	; 0
			break;
     b9c:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	fb d0       	rcall	.+502    	; 0xd9a <Pipe_ConfigurePipe>
     ba4:	81 11       	cpse	r24, r1
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <USB_Host_ProcessNextHostState+0x18c>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	43 c0       	rjmp	.+134    	; 0xc34 <USB_Host_ProcessNextHostState+0x212>
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	8f cf       	rjmp	.-226    	; 0xad0 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     bb2:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     bb4:	e3 e1       	ldi	r30, 0x13	; 19
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     bb8:	a9 e2       	ldi	r26, 0x29	; 41
     bba:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     bbc:	01 90       	ld	r0, Z+
     bbe:	0d 92       	st	X+, r0
     bc0:	8a 95       	dec	r24
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <USB_Host_ProcessNextHostState+0x19a>
     bc4:	10 92 a7 00 	sts	0x00A7, r1
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	c1 d3       	rcall	.+1922   	; 0x1350 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bce:	81 11       	cpse	r24, r1
     bd0:	30 c0       	rjmp	.+96     	; 0xc32 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     bd2:	88 85       	ldd	r24, Y+8	; 0x08
     bd4:	80 93 12 01 	sts	0x0112, r24
     bd8:	86 de       	rcall	.-756    	; 0x8e6 <USB_Host_ResetDevice>
     bda:	10 92 31 01 	sts	0x0131, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 26 01 	sts	0x0126, r25

			USB_Host_ResetDevice();
     be6:	80 93 25 01 	sts	0x0125, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	d1 cf       	rjmp	.-94     	; 0xb90 <USB_Host_ProcessNextHostState+0x16e>
     bee:	20 91 12 01 	lds	r18, 0x0112
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	01 e0       	ldi	r16, 0x01	; 1
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     bfc:	ce d0       	rcall	.+412    	; 0xd9a <Pipe_ConfigurePipe>
     bfe:	88 23       	and	r24, r24
     c00:	99 f2       	breq	.-90     	; 0xba8 <USB_Host_ProcessNextHostState+0x186>
     c02:	88 e0       	ldi	r24, 0x08	; 8
     c04:	eb e1       	ldi	r30, 0x1B	; 27
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	a9 e2       	ldi	r26, 0x29	; 41
     c0a:	b1 e0       	ldi	r27, 0x01	; 1
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c12:	e1 f7       	brne	.-8      	; 0xc0c <USB_Host_ProcessNextHostState+0x1ea>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9b d3       	rcall	.+1846   	; 0x1350 <USB_Host_SendControlRequest>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0a c0       	rjmp	.+20     	; 0xc32 <USB_Host_ProcessNextHostState+0x210>
     c1e:	10 92 31 01 	sts	0x0131, r1
     c22:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	90 93 26 01 	sts	0x0126, r25
     c2a:	80 93 25 01 	sts	0x0125, r24
     c2e:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c30:	af cf       	rjmp	.-162    	; 0xb90 <USB_Host_ProcessNextHostState+0x16e>
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	20 91 31 01 	lds	r18, 0x0131
     c38:	21 30       	cpi	r18, 0x01	; 1
     c3a:	51 f0       	breq	.+20     	; 0xc50 <USB_Host_ProcessNextHostState+0x22e>
     c3c:	68 2f       	mov	r22, r24
     c3e:	89 2f       	mov	r24, r25
     c40:	3a de       	rcall	.-908    	; 0x8b6 <EVENT_USB_Host_DeviceEnumerationFailed>
     c42:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	80 93 dd 00 	sts	0x00DD, r24
     c4c:	61 dd       	rcall	.-1342   	; 0x710 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c4e:	b2 d1       	rcall	.+868    	; 0xfb4 <USB_ResetInterface>
     c50:	28 96       	adiw	r28, 0x08	; 8
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16

		USB_ResetInterface();
     c64:	08 95       	ret

00000c66 <Pipe_Write_Stream_LE>:
     c66:	cf 92       	push	r12
	}
}
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	7c 01       	movw	r14, r24
     c78:	8b 01       	movw	r16, r22
     c7a:	ea 01       	movw	r28, r20
     c7c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     c80:	8f 7c       	andi	r24, 0xCF	; 207
     c82:	80 62       	ori	r24, 0x20	; 32
     c84:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c88:	4d d1       	rcall	.+666    	; 0xf24 <Pipe_WaitUntilReady>
     c8a:	81 11       	cpse	r24, r1
     c8c:	30 c0       	rjmp	.+96     	; 0xcee <Pipe_Write_Stream_LE+0x88>
     c8e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c90:	31 f0       	breq	.+12     	; 0xc9e <Pipe_Write_Stream_LE+0x38>
     c92:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     c94:	99 81       	ldd	r25, Y+1	; 0x01
     c96:	08 1b       	sub	r16, r24
     c98:	19 0b       	sbc	r17, r25
     c9a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c9c:	f9 1e       	adc	r15, r25
     c9e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ca0:	d1 2c       	mov	r13, r1
     ca2:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ca4:	11 05       	cpc	r17, r1
     ca6:	11 f1       	breq	.+68     	; 0xcec <Pipe_Write_Stream_LE+0x86>
     ca8:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     cac:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <Pipe_Write_Stream_LE+0x70>
     cb0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     cb4:	8b 77       	andi	r24, 0x7B	; 123
     cb6:	80 93 a6 00 	sts	0x00A6, r24
     cba:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     cbc:	41 f0       	breq	.+16     	; 0xcce <Pipe_Write_Stream_LE+0x68>
     cbe:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     cc0:	99 81       	ldd	r25, Y+1	; 0x01
     cc2:	8c 0d       	add	r24, r12
     cc4:	9d 1d       	adc	r25, r13
     cc6:	99 83       	std	Y+1, r25	; 0x01
     cc8:	88 83       	st	Y, r24
     cca:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     ccc:	10 c0       	rjmp	.+32     	; 0xcee <Pipe_Write_Stream_LE+0x88>
     cce:	2a d1       	rcall	.+596    	; 0xf24 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     cd0:	88 23       	and	r24, r24
     cd2:	39 f3       	breq	.-50     	; 0xca2 <Pipe_Write_Stream_LE+0x3c>
     cd4:	0c c0       	rjmp	.+24     	; 0xcee <Pipe_Write_Stream_LE+0x88>
     cd6:	f7 01       	movw	r30, r14
     cd8:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     cda:	7f 01       	movw	r14, r30
     cdc:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ce0:	01 50       	subi	r16, 0x01	; 1
     ce2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ce4:	ff ef       	ldi	r31, 0xFF	; 255
     ce6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ce8:	df 0a       	sbc	r13, r31
     cea:	db cf       	rjmp	.-74     	; 0xca2 <Pipe_Write_Stream_LE+0x3c>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     cf0:	cf 91       	pop	r28
}
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <Pipe_Read_Stream_LE>:
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	7c 01       	movw	r14, r24
     d12:	8b 01       	movw	r16, r22
     d14:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d16:	80 91 aa 00 	lds	r24, 0x00AA
     d1a:	8f 7c       	andi	r24, 0xCF	; 207
     d1c:	80 61       	ori	r24, 0x10	; 16
     d1e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d22:	00 d1       	rcall	.+512    	; 0xf24 <Pipe_WaitUntilReady>
     d24:	81 11       	cpse	r24, r1
     d26:	30 c0       	rjmp	.+96     	; 0xd88 <Pipe_Read_Stream_LE+0x88>
     d28:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d2a:	31 f0       	breq	.+12     	; 0xd38 <Pipe_Read_Stream_LE+0x38>
     d2c:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     d2e:	99 81       	ldd	r25, Y+1	; 0x01
     d30:	08 1b       	sub	r16, r24
     d32:	19 0b       	sbc	r17, r25
     d34:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d36:	f9 1e       	adc	r15, r25
     d38:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d3a:	d1 2c       	mov	r13, r1
     d3c:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d3e:	11 05       	cpc	r17, r1
     d40:	11 f1       	breq	.+68     	; 0xd86 <Pipe_Read_Stream_LE+0x86>
     d42:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d46:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d48:	13 c0       	rjmp	.+38     	; 0xd70 <Pipe_Read_Stream_LE+0x70>
     d4a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d4e:	8e 77       	andi	r24, 0x7E	; 126
     d50:	80 93 a6 00 	sts	0x00A6, r24
     d54:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d56:	41 f0       	breq	.+16     	; 0xd68 <Pipe_Read_Stream_LE+0x68>
     d58:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	8c 0d       	add	r24, r12
     d5e:	9d 1d       	adc	r25, r13
     d60:	99 83       	std	Y+1, r25	; 0x01
     d62:	88 83       	st	Y, r24
     d64:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <Pipe_Read_Stream_LE+0x88>
     d68:	dd d0       	rcall	.+442    	; 0xf24 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d6a:	88 23       	and	r24, r24
     d6c:	39 f3       	breq	.-50     	; 0xd3c <Pipe_Read_Stream_LE+0x3c>
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <Pipe_Read_Stream_LE+0x88>
     d70:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d74:	f7 01       	movw	r30, r14
     d76:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d78:	7f 01       	movw	r14, r30
     d7a:	01 50       	subi	r16, 0x01	; 1
     d7c:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d7e:	ff ef       	ldi	r31, 0xFF	; 255
     d80:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     d82:	df 0a       	sbc	r13, r31
     d84:	db cf       	rjmp	.-74     	; 0xd3c <Pipe_Read_Stream_LE+0x3c>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     d8a:	cf 91       	pop	r28
}
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	08 95       	ret

00000d9a <Pipe_ConfigurePipe>:
     d9a:	0f 93       	push	r16
     d9c:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     d9e:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     da0:	87 ff       	sbrs	r24, 7
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <Pipe_ConfigurePipe+0xe>
     da4:	80 e1       	ldi	r24, 0x10	; 16
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <Pipe_ConfigurePipe+0x10>
     da8:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     daa:	e7 30       	cpi	r30, 0x07	; 7
     dac:	10 f0       	brcs	.+4      	; 0xdb2 <Pipe_ConfigurePipe+0x18>
	  return false;
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	5a c0       	rjmp	.+180    	; 0xe66 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     db2:	61 11       	cpse	r22, r1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     db6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     db8:	90 e4       	ldi	r25, 0x40	; 64
     dba:	69 9f       	mul	r22, r25
     dbc:	b0 01       	movw	r22, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	4f 70       	andi	r20, 0x0F	; 15
     dc2:	46 2b       	or	r20, r22
     dc4:	48 2b       	or	r20, r24
     dc6:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dc8:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     dcc:	5e 13       	cpse	r21, r30
     dce:	19 c0       	rjmp	.+50     	; 0xe02 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     dd0:	02 30       	cpi	r16, 0x02	; 2
     dd2:	10 f0       	brcs	.+4      	; 0xdd8 <Pipe_ConfigurePipe+0x3e>
     dd4:	76 e0       	ldi	r23, 0x06	; 6
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <Pipe_ConfigurePipe+0x40>
     dd8:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     dda:	88 e0       	ldi	r24, 0x08	; 8
     ddc:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     dde:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     de0:	82 17       	cp	r24, r18
     de2:	93 07       	cpc	r25, r19
     de4:	40 f0       	brcs	.+16     	; 0xdf6 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     de6:	86 2f       	mov	r24, r22
     de8:	82 95       	swap	r24
     dea:	80 7f       	andi	r24, 0xF0	; 240
     dec:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     dee:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     df0:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	0e c0       	rjmp	.+28     	; 0xe12 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     df6:	65 30       	cpi	r22, 0x05	; 5
     df8:	b1 f3       	breq	.-20     	; 0xde6 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	ef cf       	rjmp	.-34     	; 0xde0 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     e02:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     e06:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     e0a:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     e0e:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     e12:	81 fd       	sbrc	r24, 1
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e16:	5f 5f       	subi	r21, 0xFF	; 255
     e18:	57 30       	cpi	r21, 0x07	; 7
     e1a:	b1 f6       	brne	.-84     	; 0xdc8 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e1c:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	21 c0       	rjmp	.+66     	; 0xe66 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e24:	90 91 a9 00 	lds	r25, 0x00A9
     e28:	9e 7f       	andi	r25, 0xFE	; 254
     e2a:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     e2e:	90 91 ab 00 	lds	r25, 0x00AB
     e32:	9d 7f       	andi	r25, 0xFD	; 253
     e34:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     e38:	90 91 a9 00 	lds	r25, 0x00A9
     e3c:	91 60       	ori	r25, 0x01	; 1
     e3e:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     e42:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     e46:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     e4a:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     e4e:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     e52:	80 91 a9 00 	lds	r24, 0x00A9
     e56:	80 62       	ori	r24, 0x20	; 32
     e58:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e5c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     e60:	87 fd       	sbrc	r24, 7
     e62:	d9 cf       	rjmp	.-78     	; 0xe16 <Pipe_ConfigurePipe+0x7c>
     e64:	a4 cf       	rjmp	.-184    	; 0xdae <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	f6 2e       	mov	r15, r22
     e76:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	1f 15       	cp	r17, r15
     e7c:	71 f0       	breq	.+28     	; 0xe9a <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     e7e:	88 81       	ld	r24, Y
     e80:	88 23       	and	r24, r24
     e82:	41 f0       	breq	.+16     	; 0xe94 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     e84:	29 81       	ldd	r18, Y+1	; 0x01
     e86:	3a 81       	ldd	r19, Y+2	; 0x02
     e88:	0d 81       	ldd	r16, Y+5	; 0x05
     e8a:	4b 81       	ldd	r20, Y+3	; 0x03
     e8c:	6c 81       	ldd	r22, Y+4	; 0x04
     e8e:	85 df       	rcall	.-246    	; 0xd9a <Pipe_ConfigurePipe>
     e90:	88 23       	and	r24, r24
     e92:	21 f0       	breq	.+8      	; 0xe9c <Pipe_ConfigurePipeTable+0x32>
     e94:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     e96:	26 96       	adiw	r28, 0x06	; 6
     e98:	f0 cf       	rjmp	.-32     	; 0xe7a <Pipe_ConfigurePipeTable+0x10>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     e9c:	df 91       	pop	r29
}
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	08 95       	ret

00000ea8 <Pipe_ClearPipes>:
     ea8:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     eac:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     eae:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     eb2:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     eb6:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     eba:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ebe:	90 91 a9 00 	lds	r25, 0x00A9
     ec2:	9e 7f       	andi	r25, 0xFE	; 254
     ec4:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	87 30       	cpi	r24, 0x07	; 7
     ecc:	81 f7       	brne	.-32     	; 0xeae <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ece:	08 95       	ret

00000ed0 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     ed0:	90 91 a7 00 	lds	r25, 0x00A7
     ed4:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     ed6:	20 91 aa 00 	lds	r18, 0x00AA
     eda:	20 ff       	sbrs	r18, 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <Pipe_IsEndpointBound+0x12>
     ede:	20 e8       	ldi	r18, 0x80	; 128
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <Pipe_IsEndpointBound+0x14>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     ee4:	42 2f       	mov	r20, r18
     ee6:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ee8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     eea:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     eee:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     ef2:	27 ff       	sbrs	r18, 7
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     ef6:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     efa:	53 2f       	mov	r21, r19
     efc:	5f 70       	andi	r21, 0x0F	; 15
     efe:	35 ff       	sbrs	r19, 5
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <Pipe_IsEndpointBound+0x36>
     f02:	20 e8       	ldi	r18, 0x80	; 128
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <Pipe_IsEndpointBound+0x38>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     f0a:	28 17       	cp	r18, r24
     f0c:	49 f0       	breq	.+18     	; 0xf20 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f0e:	9f 5f       	subi	r25, 0xFF	; 255
     f10:	97 30       	cpi	r25, 0x07	; 7
     f12:	59 f7       	brne	.-42     	; 0xeea <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f14:	94 2f       	mov	r25, r20
     f16:	9f 70       	andi	r25, 0x0F	; 15
     f18:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     f22:	08 95       	ret

00000f24 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     f24:	20 91 a2 00 	lds	r18, 0x00A2
     f28:	30 91 a3 00 	lds	r19, 0x00A3
     f2c:	89 e8       	ldi	r24, 0x89	; 137
     f2e:	93 e1       	ldi	r25, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     f30:	40 91 aa 00 	lds	r20, 0x00AA
     f34:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     f36:	40 31       	cpi	r20, 0x10	; 16
     f38:	29 f4       	brne	.+10     	; 0xf44 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f3a:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
     f3e:	40 ff       	sbrs	r20, 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <Pipe_WaitUntilReady+0x28>
     f42:	18 c0       	rjmp	.+48     	; 0xf74 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f44:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     f48:	42 fd       	sbrc	r20, 2
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f4c:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     f50:	41 fd       	sbrc	r20, 1
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     f54:	40 91 31 01 	lds	r20, 0x0131
     f58:	41 30       	cpi	r20, 0x01	; 1
     f5a:	81 f0       	breq	.+32     	; 0xf7c <Pipe_WaitUntilReady+0x58>
     f5c:	40 91 a2 00 	lds	r20, 0x00A2
     f60:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     f64:	42 17       	cp	r20, r18
     f66:	53 07       	cpc	r21, r19
     f68:	19 f3       	breq	.-58     	; 0xf30 <Pipe_WaitUntilReady+0xc>
     f6a:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	41 f0       	breq	.+16     	; 0xf80 <Pipe_WaitUntilReady+0x5c>
     f70:	9a 01       	movw	r18, r20
     f72:	de cf       	rjmp	.-68     	; 0xf30 <Pipe_WaitUntilReady+0xc>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     f80:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     f82:	08 95       	ret

00000f84 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f84:	75 d0       	rcall	.+234    	; 0x1070 <USB_INT_DisableAllInterrupts>
     f86:	7c d0       	rcall	.+248    	; 0x1080 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f88:	e0 ee       	ldi	r30, 0xE0	; 224
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f8c:	80 81       	ld	r24, Z
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	80 83       	st	Z, r24
     f92:	e8 ed       	ldi	r30, 0xD8	; 216
     f94:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     f96:	80 81       	ld	r24, Z
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	80 83       	st	Z, r24
     f9c:	19 bc       	out	0x29, r1	; 41
     f9e:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fa0:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     fa2:	8c 91       	ld	r24, X
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	8c 93       	st	X, r24
     fa8:	80 81       	ld	r24, Z
     faa:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     fac:	80 83       	st	Z, r24
     fae:	10 92 28 01 	sts	0x0128, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     fb2:	08 95       	ret

00000fb4 <USB_ResetInterface>:
     fb4:	5d d0       	rcall	.+186    	; 0x1070 <USB_INT_DisableAllInterrupts>
     fb6:	64 d0       	rcall	.+200    	; 0x1080 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     fb8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     fbc:	8f 77       	andi	r24, 0x7F	; 127
     fbe:	80 93 d8 00 	sts	0x00D8, r24
     fc2:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	80 93 d8 00 	sts	0x00D8, r24
     fcc:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     fd0:	8f 7d       	andi	r24, 0xDF	; 223
     fd2:	80 93 d8 00 	sts	0x00D8, r24
     fd6:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     fda:	8f 77       	andi	r24, 0x7F	; 127
     fdc:	80 93 d7 00 	sts	0x00D7, r24
     fe0:	8c e0       	ldi	r24, 0x0C	; 12
     fe2:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     fe4:	8e e0       	ldi	r24, 0x0E	; 14
     fe6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     fe8:	09 b4       	in	r0, 0x29	; 41
     fea:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     fec:	fd cf       	rjmp	.-6      	; 0xfe8 <USB_ResetInterface+0x34>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 31 01 	sts	0x0131, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ff4:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ConfigurationNumber = 0;
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	80 93 12 01 	sts	0x0112, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ffe:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	80 93 d8 00 	sts	0x00D8, r24
    1008:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	80 93 dd 00 	sts	0x00DD, r24
    1012:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	80 93 dd 00 	sts	0x00DD, r24
    101c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	80 93 d7 00 	sts	0x00D7, r24
    1026:	6f 9a       	sbi	0x0d, 7	; 13
    1028:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    102a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 93 de 00 	sts	0x00DE, r24
    1034:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	80 93 de 00 	sts	0x00DE, r24
    103e:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1042:	8e 7f       	andi	r24, 0xFE	; 254
    1044:	80 93 e0 00 	sts	0x00E0, r24
    1048:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    104c:	80 61       	ori	r24, 0x10	; 16
    104e:	80 93 d8 00 	sts	0x00D8, r24
    1052:	08 95       	ret

00001054 <USB_Init>:
    1054:	e8 ed       	ldi	r30, 0xD8	; 216
    1056:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1058:	80 81       	ld	r24, Z
    105a:	8f 7e       	andi	r24, 0xEF	; 239
    105c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    105e:	e7 ed       	ldi	r30, 0xD7	; 215
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
    106e:	a2 cf       	rjmp	.-188    	; 0xfb4 <USB_ResetInterface>

00001070 <USB_INT_DisableAllInterrupts>:
    1070:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8c 7f       	andi	r24, 0xFC	; 252
    1078:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    107a:	10 92 a0 00 	sts	0x00A0, r1
    107e:	08 95       	ret

00001080 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1080:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1084:	10 92 9f 00 	sts	0x009F, r1
    1088:	08 95       	ret

0000108a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	0b b6       	in	r0, 0x3b	; 59
    1096:	0f 92       	push	r0
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    10b0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    10b4:	85 ff       	sbrs	r24, 5
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    10b8:	80 91 a0 00 	lds	r24, 0x00A0
    10bc:	85 ff       	sbrs	r24, 5
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10c0:	80 91 9f 00 	lds	r24, 0x009F
    10c4:	8f 7d       	andi	r24, 0xDF	; 223
    10c6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    10ca:	1a d1       	rcall	.+564    	; 0x1300 <USB_Event_Stub>
    10cc:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    10d0:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    10d2:	15 c0       	rjmp	.+42     	; 0x10fe <__vector_10+0x74>
    10d4:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    10d8:	81 ff       	sbrs	r24, 1
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <__vector_10+0x74>
    10dc:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10e0:	8d 7f       	andi	r24, 0xFD	; 253
    10e2:	80 93 9f 00 	sts	0x009F, r24
    10e6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	80 93 9f 00 	sts	0x009F, r24
    10f0:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    10f4:	8d 7f       	andi	r24, 0xFD	; 253
    10f6:	80 93 a0 00 	sts	0x00A0, r24
    10fa:	0a db       	rcall	.-2540   	; 0x710 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    10fc:	5b df       	rcall	.-330    	; 0xfb4 <USB_ResetInterface>
    10fe:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    1102:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1104:	15 c0       	rjmp	.+42     	; 0x1130 <__vector_10+0xa6>
    1106:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    110a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    110c:	11 c0       	rjmp	.+34     	; 0x1130 <__vector_10+0xa6>
    110e:	80 91 df 00 	lds	r24, 0x00DF
    1112:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1114:	80 93 df 00 	sts	0x00DF, r24
    1118:	77 98       	cbi	0x0e, 7	; 14
    111a:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    111e:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1120:	80 93 dd 00 	sts	0x00DD, r24
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	b0 db       	rcall	.-2208   	; 0x888 <EVENT_USB_Host_HostError>
    1128:	f3 da       	rcall	.-2586   	; 0x710 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 31 01 	sts	0x0131, r24
		EVENT_USB_Host_DeviceUnattached();
    1130:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    1134:	80 ff       	sbrs	r24, 0
    1136:	17 c0       	rjmp	.+46     	; 0x1166 <__vector_10+0xdc>
    1138:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    113c:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    113e:	13 c0       	rjmp	.+38     	; 0x1166 <__vector_10+0xdc>
    1140:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    114a:	80 91 de 00 	lds	r24, 0x00DE
    114e:	8e 7f       	andi	r24, 0xFE	; 254
    1150:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1154:	d7 da       	rcall	.-2642   	; 0x704 <EVENT_USB_Host_DeviceAttached>
    1156:	80 91 a0 00 	lds	r24, 0x00A0
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1160:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1162:	80 93 31 01 	sts	0x0131, r24
    1166:	80 91 df 00 	lds	r24, 0x00DF
    116a:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    116c:	0e c0       	rjmp	.+28     	; 0x118a <__vector_10+0x100>
    116e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1172:	82 ff       	sbrs	r24, 2
    1174:	0a c0       	rjmp	.+20     	; 0x118a <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1176:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    117a:	8b 7f       	andi	r24, 0xFB	; 251
    117c:	80 93 df 00 	sts	0x00DF, r24
    1180:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	98 db       	rcall	.-2256   	; 0x8b6 <EVENT_USB_Host_DeviceEnumerationFailed>
    1186:	c4 da       	rcall	.-2680   	; 0x710 <EVENT_USB_Host_DeviceUnattached>
    1188:	15 df       	rcall	.-470    	; 0xfb4 <USB_ResetInterface>
    118a:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23

		USB_ResetInterface();
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	0b be       	out	0x3b, r0	; 59
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <USB_GetNextDescriptor>:
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	fc 01       	movw	r30, r24
    11b6:	eb 01       	movw	r28, r22
    11b8:	a8 81       	ld	r26, Y
    11ba:	b9 81       	ldd	r27, Y+1	; 0x01
    11bc:	8c 91       	ld	r24, X
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
    11c2:	31 81       	ldd	r19, Z+1	; 0x01
    11c4:	82 17       	cp	r24, r18
    11c6:	93 07       	cpc	r25, r19
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <USB_GetNextDescriptor+0x1c>
    11ca:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    11cc:	a2 0f       	add	r26, r18
    11ce:	b3 1f       	adc	r27, r19
    11d0:	eb 01       	movw	r28, r22
    11d2:	b9 83       	std	Y+1, r27	; 0x01
    11d4:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	82 1b       	sub	r24, r18
    11dc:	93 0b       	sbc	r25, r19
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
			}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	29 97       	sbiw	r28, 0x09	; 9
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	7b 01       	movw	r14, r22
    120a:	8a 01       	movw	r16, r20
    120c:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    120e:	90 e8       	ldi	r25, 0x80	; 128
    1210:	90 93 29 01 	sts	0x0129, r25
    1214:	96 e0       	ldi	r25, 0x06	; 6
    1216:	90 93 2a 01 	sts	0x012A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    121a:	e8 2f       	mov	r30, r24
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1222:	f0 93 2c 01 	sts	0x012C, r31
    1226:	e0 93 2b 01 	sts	0x012B, r30
    122a:	10 92 2e 01 	sts	0x012E, r1
    122e:	10 92 2d 01 	sts	0x012D, r1
    1232:	89 e0       	ldi	r24, 0x09	; 9
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 30 01 	sts	0x0130, r25
    123a:	80 93 2f 01 	sts	0x012F, r24
    123e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	84 d0       	rcall	.+264    	; 0x1350 <USB_Host_SendControlRequest>
    1248:	81 11       	cpse	r24, r1
    124a:	19 c0       	rjmp	.+50     	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x96>
    124c:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    124e:	fc 81       	ldd	r31, Y+4	; 0x04
    1250:	d7 01       	movw	r26, r14
    1252:	ed 93       	st	X+, r30
    1254:	fc 93       	st	X, r31
    1256:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    1258:	df 06       	cpc	r13, r31
    125a:	70 f0       	brcs	.+28     	; 0x1278 <USB_Host_GetDeviceConfigDescriptor+0x90>
    125c:	f0 93 30 01 	sts	0x0130, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1260:	e0 93 2f 01 	sts	0x012F, r30
    1264:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1266:	74 d0       	rcall	.+232    	; 0x1350 <USB_Host_SendControlRequest>
    1268:	81 11       	cpse	r24, r1
    126a:	09 c0       	rjmp	.+18     	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x96>
    126c:	f8 01       	movw	r30, r16
    126e:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	21 f0       	breq	.+8      	; 0x127c <USB_Host_GetDeviceConfigDescriptor+0x94>
    1274:	86 e0       	ldi	r24, 0x06	; 6
    1276:	03 c0       	rjmp	.+6      	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1278:	85 e0       	ldi	r24, 0x05	; 5
    127a:	01 c0       	rjmp	.+2      	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1280:	0f b6       	in	r0, 0x3f	; 63
}
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	08 95       	ret

0000129c <USB_GetNextDescriptorComp>:
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	8c 01       	movw	r16, r24
    12b2:	eb 01       	movw	r28, r22
    12b4:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    12b6:	f8 01       	movw	r30, r16
    12b8:	e0 80       	ld	r14, Z
    12ba:	f1 80       	ldd	r15, Z+1	; 0x01
    12bc:	e1 14       	cp	r14, r1
    12be:	f1 04       	cpc	r15, r1
    12c0:	99 f0       	breq	.+38     	; 0x12e8 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    12c2:	a8 80       	ld	r10, Y
    12c4:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    12c6:	be 01       	movw	r22, r28
    12c8:	c8 01       	movw	r24, r16
    12ca:	72 df       	rcall	.-284    	; 0x11b0 <USB_GetNextDescriptor>
    12cc:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    12ce:	99 81       	ldd	r25, Y+1	; 0x01
    12d0:	f6 01       	movw	r30, r12
    12d2:	09 95       	icall
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	79 f3       	breq	.-34     	; 0x12b6 <USB_GetNextDescriptorComp+0x1a>
    12d8:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    12da:	39 f4       	brne	.+14     	; 0x12ea <USB_GetNextDescriptorComp+0x4e>
    12dc:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    12de:	a8 82       	st	Y, r10
    12e0:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    12e2:	f1 82       	std	Z+1, r15	; 0x01
    12e4:	e0 82       	st	Z, r14
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <USB_GetNextDescriptorComp+0x4e>
    12e8:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    12ea:	df 91       	pop	r29
}
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	08 95       	ret

00001300 <USB_Event_Stub>:
    1300:	08 95       	ret

00001302 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    130a:	c9 ee       	ldi	r28, 0xE9	; 233
    130c:	d3 e0       	ldi	r29, 0x03	; 3
    130e:	11 11       	cpse	r17, r1
    1310:	0d c0       	rjmp	.+26     	; 0x132c <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1312:	80 91 a6 00 	lds	r24, 0x00A6
    1316:	83 fd       	sbrc	r24, 3
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	35 db       	rcall	.-2454   	; 0x988 <USB_Host_WaitMS>
    131e:	81 11       	cpse	r24, r1
    1320:	13 c0       	rjmp	.+38     	; 0x1348 <USB_Host_WaitForIOS+0x46>
    1322:	21 97       	sbiw	r28, 0x01	; 1
    1324:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1326:	99 f7       	brne	.-26     	; 0x130e <USB_Host_WaitForIOS+0xc>
    1328:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <USB_Host_WaitForIOS+0x46>
    132c:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    132e:	29 f4       	brne	.+10     	; 0x133a <USB_Host_WaitForIOS+0x38>
    1330:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1334:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1336:	f1 cf       	rjmp	.-30     	; 0x131a <USB_Host_WaitForIOS+0x18>
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <USB_Host_WaitForIOS+0x44>
    133a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    133c:	71 f7       	brne	.-36     	; 0x131a <USB_Host_WaitForIOS+0x18>
    133e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1342:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1344:	ea cf       	rjmp	.-44     	; 0x131a <USB_Host_WaitForIOS+0x18>
    1346:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1348:	df 91       	pop	r29
}
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	08 95       	ret

00001350 <USB_Host_SendControlRequest>:
    1350:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    135c:	f0 90 9e 00 	lds	r15, 0x009E
    1360:	8f 2d       	mov	r24, r15
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1366:	c0 91 2f 01 	lds	r28, 0x012F
    136a:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    136e:	80 91 9e 00 	lds	r24, 0x009E
    1372:	81 60       	ori	r24, 0x01	; 1
    1374:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	06 db       	rcall	.-2548   	; 0x988 <USB_Host_WaitMS>
    137c:	81 11       	cpse	r24, r1
    137e:	cc c0       	rjmp	.+408    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    1380:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1384:	8f 7c       	andi	r24, 0xCF	; 207
    1386:	80 93 aa 00 	sts	0x00AA, r24
    138a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    138e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1392:	8f 7e       	andi	r24, 0xEF	; 239
    1394:	80 93 a6 00 	sts	0x00A6, r24
    1398:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    139c:	8f 7b       	andi	r24, 0xBF	; 191
    139e:	80 93 a9 00 	sts	0x00A9, r24
    13a2:	e9 e2       	ldi	r30, 0x29	; 41
    13a4:	f1 e0       	ldi	r31, 0x01	; 1
    13a6:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    13a8:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    13ae:	e1 33       	cpi	r30, 0x31	; 49
    13b0:	f8 07       	cpc	r31, r24
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <USB_Host_SendControlRequest+0x56>
    13b4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    13b8:	87 77       	andi	r24, 0x77	; 119
    13ba:	80 93 a6 00 	sts	0x00A6, r24
    13be:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    13c0:	a0 df       	rcall	.-192    	; 0x1302 <USB_Host_WaitForIOS>
    13c2:	81 11       	cpse	r24, r1
    13c4:	a9 c0       	rjmp	.+338    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    13c6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	80 93 a9 00 	sts	0x00A9, r24
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	da da       	rcall	.-2636   	; 0x988 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13d4:	81 11       	cpse	r24, r1
    13d6:	a0 c0       	rjmp	.+320    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    13d8:	80 91 29 01 	lds	r24, 0x0129
    13dc:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    13de:	4e c0       	rjmp	.+156    	; 0x147c <USB_Host_SendControlRequest+0x12c>
    13e0:	80 91 aa 00 	lds	r24, 0x00AA
    13e4:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e6:	80 61       	ori	r24, 0x10	; 16
    13e8:	80 93 aa 00 	sts	0x00AA, r24
    13ec:	01 15       	cp	r16, r1
    13ee:	11 05       	cpc	r17, r1
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    13f2:	3a c0       	rjmp	.+116    	; 0x1468 <USB_Host_SendControlRequest+0x118>
    13f4:	80 91 aa 00 	lds	r24, 0x00AA
    13f8:	8f 7c       	andi	r24, 0xCF	; 207
    13fa:	80 62       	ori	r24, 0x20	; 32
    13fc:	80 93 aa 00 	sts	0x00AA, r24
    1400:	80 91 a9 00 	lds	r24, 0x00A9
    1404:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1406:	80 93 a9 00 	sts	0x00A9, r24
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	7a df       	rcall	.-268    	; 0x1302 <USB_Host_WaitForIOS>
    140e:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1410:	83 c0       	rjmp	.+262    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    1412:	80 91 a6 00 	lds	r24, 0x00A6
    1416:	8b 77       	andi	r24, 0x7B	; 123
    1418:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	71 df       	rcall	.-286    	; 0x1302 <USB_Host_WaitForIOS>
    1420:	7b c0       	rjmp	.+246    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    1422:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	69 df       	rcall	.-302    	; 0x1302 <USB_Host_WaitForIOS>
    1430:	81 11       	cpse	r24, r1
    1432:	72 c0       	rjmp	.+228    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    1434:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1438:	90 91 f7 00 	lds	r25, 0x00F7
    143c:	89 2b       	or	r24, r25
    143e:	11 f4       	brne	.+4      	; 0x1444 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1440:	c0 e0       	ldi	r28, 0x00	; 0
    1442:	d0 e0       	ldi	r29, 0x00	; 0
    1444:	f8 01       	movw	r30, r16
    1446:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1448:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    144c:	90 91 f7 00 	lds	r25, 0x00F7
    1450:	89 2b       	or	r24, r25
    1452:	69 f4       	brne	.+26     	; 0x146e <USB_Host_SendControlRequest+0x11e>
    1454:	80 91 a9 00 	lds	r24, 0x00A9
    1458:	80 64       	ori	r24, 0x40	; 64
    145a:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    145e:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1462:	8e 77       	andi	r24, 0x7E	; 126
    1464:	80 93 a6 00 	sts	0x00A6, r24
    1468:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    146a:	d9 f6       	brne	.-74     	; 0x1422 <USB_Host_SendControlRequest+0xd2>
    146c:	c3 cf       	rjmp	.-122    	; 0x13f4 <USB_Host_SendControlRequest+0xa4>
    146e:	20 97       	sbiw	r28, 0x00	; 0
    1470:	89 f3       	breq	.-30     	; 0x1454 <USB_Host_SendControlRequest+0x104>
    1472:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1476:	81 93       	st	Z+, r24
    1478:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    147a:	e5 cf       	rjmp	.-54     	; 0x1446 <USB_Host_SendControlRequest+0xf6>
    147c:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    147e:	11 05       	cpc	r17, r1
    1480:	b1 f1       	breq	.+108    	; 0x14ee <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1482:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1486:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1488:	80 62       	ori	r24, 0x20	; 32
    148a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    148e:	80 91 a9 00 	lds	r24, 0x00A9
    1492:	8f 7b       	andi	r24, 0xBF	; 191
    1494:	80 93 a9 00 	sts	0x00A9, r24
    1498:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    149a:	20 97       	sbiw	r28, 0x00	; 0
    149c:	01 f1       	breq	.+64     	; 0x14de <USB_Host_SendControlRequest+0x18e>
    149e:	31 df       	rcall	.-414    	; 0x1302 <USB_Host_WaitForIOS>
    14a0:	81 11       	cpse	r24, r1
    14a2:	3a c0       	rjmp	.+116    	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14a4:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    14a6:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14aa:	30 91 f7 00 	lds	r19, 0x00F7
    14ae:	80 91 12 01 	lds	r24, 0x0112
    14b2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14b4:	28 17       	cp	r18, r24
    14b6:	39 07       	cpc	r19, r25
    14b8:	58 f4       	brcc	.+22     	; 0x14d0 <USB_Host_SendControlRequest+0x180>
    14ba:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	8c 01       	movw	r16, r24
    14c0:	20 81       	ld	r18, Z
    14c2:	20 93 af 00 	sts	0x00AF, r18
    14c6:	21 97       	sbiw	r28, 0x01	; 1
    14c8:	20 97       	sbiw	r28, 0x00	; 0
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <USB_Host_SendControlRequest+0x182>
    14cc:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    14ce:	eb cf       	rjmp	.-42     	; 0x14a6 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    14d0:	8f 01       	movw	r16, r30
    14d2:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    14d6:	8b 77       	andi	r24, 0x7B	; 123
    14d8:	80 93 a6 00 	sts	0x00A6, r24
    14dc:	dd cf       	rjmp	.-70     	; 0x1498 <USB_Host_SendControlRequest+0x148>
    14de:	11 df       	rcall	.-478    	; 0x1302 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14e0:	81 11       	cpse	r24, r1
    14e2:	1a c0       	rjmp	.+52     	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    14e4:	80 91 a9 00 	lds	r24, 0x00A9
    14e8:	80 64       	ori	r24, 0x40	; 64
    14ea:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14ee:	80 91 aa 00 	lds	r24, 0x00AA
    14f2:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	80 93 aa 00 	sts	0x00AA, r24
    14fa:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14fe:	8f 7b       	andi	r24, 0xBF	; 191
    1500:	80 93 a9 00 	sts	0x00A9, r24
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	fd de       	rcall	.-518    	; 0x1302 <USB_Host_WaitForIOS>
    1508:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <USB_Host_SendControlRequest+0x1c8>
    150c:	80 91 a6 00 	lds	r24, 0x00A6
    1510:	8e 77       	andi	r24, 0x7E	; 126
    1512:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 91 a9 00 	lds	r25, 0x00A9
    151c:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    151e:	90 93 a9 00 	sts	0x00A9, r25
    1522:	f1 10       	cpse	r15, r1
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <USB_Host_SendControlRequest+0x1e0>
    1526:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    152a:	9e 7f       	andi	r25, 0xFE	; 254
    152c:	90 93 9e 00 	sts	0x009E, r25
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1536:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1542:	ff 90       	pop	r15
    1544:	08 95       	ret

00001546 <USB_Host_SetDeviceConfiguration>:
    1546:	cf 93       	push	r28
				UPRST = 0;
    1548:	c8 2f       	mov	r28, r24
    154a:	10 92 29 01 	sts	0x0129, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    154e:	89 e0       	ldi	r24, 0x09	; 9
    1550:	80 93 2a 01 	sts	0x012A, r24
    1554:	2c 2f       	mov	r18, r28
    1556:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1558:	30 93 2c 01 	sts	0x012C, r19
    155c:	20 93 2b 01 	sts	0x012B, r18
    1560:	10 92 2e 01 	sts	0x012E, r1
    1564:	10 92 2d 01 	sts	0x012D, r1
    1568:	10 92 30 01 	sts	0x0130, r1
    156c:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1570:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	eb de       	rcall	.-554    	; 0x1350 <USB_Host_SendControlRequest>
    157a:	81 11       	cpse	r24, r1
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <USB_Host_SetDeviceConfiguration+0x4a>
    157e:	c0 93 27 01 	sts	0x0127, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1582:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1584:	11 f0       	breq	.+4      	; 0x158a <USB_Host_SetDeviceConfiguration+0x44>
    1586:	9b e0       	ldi	r25, 0x0B	; 11
    1588:	01 c0       	rjmp	.+2      	; 0x158c <USB_Host_SetDeviceConfiguration+0x46>
    158a:	9a e0       	ldi	r25, 0x0A	; 10
    158c:	90 93 31 01 	sts	0x0131, r25
    1590:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1592:	08 95       	ret

00001594 <USB_Host_ClearEndpointStall>:
    1594:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1596:	90 93 29 01 	sts	0x0129, r25
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	90 93 2a 01 	sts	0x012A, r25
    15a0:	10 92 2c 01 	sts	0x012C, r1
    15a4:	10 92 2b 01 	sts	0x012B, r1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 93 2e 01 	sts	0x012E, r25
    15ae:	80 93 2d 01 	sts	0x012D, r24
    15b2:	10 92 30 01 	sts	0x0130, r1
    15b6:	10 92 2f 01 	sts	0x012F, r1
    15ba:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	c6 ce       	rjmp	.-628    	; 0x1350 <USB_Host_SendControlRequest>

000015c4 <USB_USBTask>:
    15c4:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    15c6:	c0 91 a7 00 	lds	r28, 0x00A7
    15ca:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    15cc:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    15d0:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    15d4:	26 da       	rcall	.-2996   	; 0xa22 <USB_Host_ProcessNextHostState>
    15d6:	c0 93 a7 00 	sts	0x00A7, r28
    15da:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    15dc:	08 95       	ret

000015de <DCOMP_MS_Host_NextMSInterface>:
    15de:	fc 01       	movw	r30, r24

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    15e0:	81 81       	ldd	r24, Z+1	; 0x01
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	59 f4       	brne	.+22     	; 0x15fc <DCOMP_MS_Host_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    15e6:	85 81       	ldd	r24, Z+5	; 0x05
    15e8:	88 30       	cpi	r24, 0x08	; 8
    15ea:	41 f4       	brne	.+16     	; 0x15fc <DCOMP_MS_Host_NextMSInterface+0x1e>
    15ec:	86 81       	ldd	r24, Z+6	; 0x06
    15ee:	86 30       	cpi	r24, 0x06	; 6
    15f0:	29 f4       	brne	.+10     	; 0x15fc <DCOMP_MS_Host_NextMSInterface+0x1e>
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
    15f2:	87 81       	ldd	r24, Z+7	; 0x07
    15f4:	80 35       	cpi	r24, 0x50	; 80
    15f6:	11 f4       	brne	.+4      	; 0x15fc <DCOMP_MS_Host_NextMSInterface+0x1e>
		    (Interface->Protocol == MS_CSCP_BulkOnlyTransportProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    15fc:	82 e0       	ldi	r24, 0x02	; 2
}
    15fe:	08 95       	ret

00001600 <DCOMP_MS_Host_NextMSInterfaceEndpoint>:

static uint8_t DCOMP_MS_Host_NextMSInterfaceEndpoint(void* const CurrentDescriptor)
{
    1600:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	85 30       	cpi	r24, 0x05	; 5
    1606:	49 f4       	brne	.+18     	; 0x161a <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1608:	83 81       	ldd	r24, Z+3	; 0x03
    160a:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	49 f4       	brne	.+18     	; 0x1622 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x22>
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	5e dc       	rcall	.-1860   	; 0xed0 <Pipe_IsEndpointBound>
    1614:	81 11       	cpse	r24, r1
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x22>
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x26>
    161a:	84 30       	cpi	r24, 0x04	; 4
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    161c:	11 f4       	brne	.+4      	; 0x1622 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x22>
    161e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1620:	08 95       	ret
    1622:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1624:	08 95       	ret
    1626:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    1628:	08 95       	ret

0000162a <MS_Host_WaitForDataReceived>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    162a:	fc 01       	movw	r30, r24
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    162c:	20 91 a2 00 	lds	r18, 0x00A2
    1630:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1634:	80 81       	ld	r24, Z
    1636:	8f 70       	andi	r24, 0x0F	; 15
    1638:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    163c:	80 91 a9 00 	lds	r24, 0x00A9
    1640:	8f 7b       	andi	r24, 0xBF	; 191
    1642:	80 93 a9 00 	sts	0x00A9, r24
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
    1646:	80 e1       	ldi	r24, 0x10	; 16
    1648:	97 e2       	ldi	r25, 0x27	; 39
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    164a:	40 91 a6 00 	lds	r20, 0x00A6
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    164e:	40 fd       	sbrc	r20, 0
    1650:	47 c0       	rjmp	.+142    	; 0x16e0 <MS_Host_WaitForDataReceived+0xb6>
    1652:	40 91 a2 00 	lds	r20, 0x00A2
    1656:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    165a:	42 17       	cp	r20, r18
    165c:	53 07       	cpc	r21, r19
    165e:	41 f0       	breq	.+16     	; 0x1670 <MS_Host_WaitForDataReceived+0x46>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1660:	bc 01       	movw	r22, r24
    1662:	61 50       	subi	r22, 0x01	; 1
    1664:	71 09       	sbc	r23, r1
    1666:	89 2b       	or	r24, r25
    1668:	09 f4       	brne	.+2      	; 0x166c <MS_Host_WaitForDataReceived+0x42>
    166a:	4e c0       	rjmp	.+156    	; 0x1708 <MS_Host_WaitForDataReceived+0xde>
    166c:	9a 01       	movw	r18, r20
    166e:	cb 01       	movw	r24, r22

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1670:	40 91 a9 00 	lds	r20, 0x00A9
    1674:	40 64       	ori	r20, 0x40	; 64
    1676:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    167a:	46 81       	ldd	r20, Z+6	; 0x06
    167c:	4f 70       	andi	r20, 0x0F	; 15
    167e:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1682:	40 91 a9 00 	lds	r20, 0x00A9
    1686:	4f 7b       	andi	r20, 0xBF	; 191
    1688:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    168c:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1690:	41 fd       	sbrc	r20, 1
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <MS_Host_WaitForDataReceived+0x8e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1694:	40 91 a9 00 	lds	r20, 0x00A9
    1698:	40 64       	ori	r20, 0x40	; 64
    169a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    169e:	40 81       	ld	r20, Z
    16a0:	4f 70       	andi	r20, 0x0F	; 15
    16a2:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16a6:	40 91 a9 00 	lds	r20, 0x00A9
    16aa:	4f 7b       	andi	r20, 0xBF	; 191
    16ac:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    16b0:	40 91 a6 00 	lds	r20, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    16b4:	41 ff       	sbrs	r20, 1
    16b6:	0d c0       	rjmp	.+26     	; 0x16d2 <MS_Host_WaitForDataReceived+0xa8>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    16b8:	90 91 aa 00 	lds	r25, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    16bc:	29 2f       	mov	r18, r25
    16be:	2f 70       	andi	r18, 0x0F	; 15
    16c0:	95 ff       	sbrs	r25, 5
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MS_Host_WaitForDataReceived+0x9e>
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <MS_Host_WaitForDataReceived+0xa0>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    16ca:	82 2b       	or	r24, r18
    16cc:	63 df       	rcall	.-314    	; 0x1594 <USB_Host_ClearEndpointStall>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
			return PIPE_RWSTREAM_PipeStalled;
    16d0:	08 95       	ret
    16d2:	40 91 31 01 	lds	r20, 0x0131
		}

		if (USB_HostState == HOST_STATE_Unattached)
    16d6:	41 30       	cpi	r20, 0x01	; 1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <MS_Host_WaitForDataReceived+0xb2>
    16da:	b7 cf       	rjmp	.-146    	; 0x164a <MS_Host_WaitForDataReceived+0x20>
    16dc:	82 e0       	ldi	r24, 0x02	; 2
		  return PIPE_RWSTREAM_DeviceDisconnected;
    16de:	08 95       	ret

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    16e0:	80 81       	ld	r24, Z
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16e2:	8f 70       	andi	r24, 0x0F	; 15
    16e4:	80 93 a7 00 	sts	0x00A7, r24
    16e8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16ec:	80 64       	ori	r24, 0x40	; 64
    16ee:	80 93 a9 00 	sts	0x00A9, r24
    16f2:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16f4:	8f 70       	andi	r24, 0x0F	; 15
    16f6:	80 93 a7 00 	sts	0x00A7, r24
    16fa:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16fe:	80 64       	ori	r24, 0x40	; 64
    1700:	80 93 a9 00 	sts	0x00A9, r24
    1704:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1706:	08 95       	ret
    1708:	83 e0       	ldi	r24, 0x03	; 3
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    170a:	08 95       	ret

0000170c <MS_Host_SendCommand>:
    170c:	af 92       	push	r10
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2f 97       	sbiw	r28, 0x0f	; 15
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	7c 01       	movw	r14, r24
    1732:	6b 01       	movw	r12, r22
    1734:	5a 01       	movw	r10, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if (++MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    1736:	fc 01       	movw	r30, r24
    1738:	06 85       	ldd	r16, Z+14	; 0x0e
    173a:	17 85       	ldd	r17, Z+15	; 0x0f
    173c:	20 89       	ldd	r18, Z+16	; 0x10
    173e:	31 89       	ldd	r19, Z+17	; 0x11
    1740:	0f 5f       	subi	r16, 0xFF	; 255
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	2f 4f       	sbci	r18, 0xFF	; 255
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	0f 3f       	cpi	r16, 0xFF	; 255
    174a:	ff ef       	ldi	r31, 0xFF	; 255
    174c:	1f 07       	cpc	r17, r31
    174e:	2f 07       	cpc	r18, r31
    1750:	3f 07       	cpc	r19, r31
    1752:	31 f0       	breq	.+12     	; 0x1760 <MS_Host_SendCommand+0x54>
    1754:	fc 01       	movw	r30, r24
    1756:	06 87       	std	Z+14, r16	; 0x0e
    1758:	17 87       	std	Z+15, r17	; 0x0f
    175a:	20 8b       	std	Z+16, r18	; 0x10
    175c:	31 8b       	std	Z+17, r19	; 0x11
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <MS_Host_SendCommand+0x66>
	  MSInterfaceInfo->State.TransactionTag = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	f7 01       	movw	r30, r14
    176a:	86 87       	std	Z+14, r24	; 0x0e
    176c:	97 87       	std	Z+15, r25	; 0x0f
    176e:	a0 8b       	std	Z+16, r26	; 0x10
    1770:	b1 8b       	std	Z+17, r27	; 0x11

	SCSICommandBlock->Signature = CPU_TO_LE32(MS_CBW_SIGNATURE);
    1772:	85 e5       	ldi	r24, 0x55	; 85
    1774:	93 e5       	ldi	r25, 0x53	; 83
    1776:	a2 e4       	ldi	r26, 0x42	; 66
    1778:	b3 e4       	ldi	r27, 0x43	; 67
    177a:	f6 01       	movw	r30, r12
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = cpu_to_le32(MSInterfaceInfo->State.TransactionTag);
    1784:	f7 01       	movw	r30, r14
    1786:	86 85       	ldd	r24, Z+14	; 0x0e
    1788:	97 85       	ldd	r25, Z+15	; 0x0f
    178a:	a0 89       	ldd	r26, Z+16	; 0x10
    178c:	b1 89       	ldd	r27, Z+17	; 0x11
    178e:	f6 01       	movw	r30, r12
    1790:	84 83       	std	Z+4, r24	; 0x04
    1792:	95 83       	std	Z+5, r25	; 0x05
    1794:	a6 83       	std	Z+6, r26	; 0x06
    1796:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1798:	f7 01       	movw	r30, r14
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	8f 70       	andi	r24, 0x0F	; 15
    179e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17a2:	80 91 a9 00 	lds	r24, 0x00A9
    17a6:	8f 7b       	andi	r24, 0xBF	; 191
    17a8:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	6f e1       	ldi	r22, 0x1F	; 31
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	c6 01       	movw	r24, r12
    17b6:	57 da       	rcall	.-2898   	; 0xc66 <Pipe_Write_Stream_LE>
    17b8:	81 11       	cpse	r24, r1
    17ba:	8a c0       	rjmp	.+276    	; 0x18d0 <MS_Host_SendCommand+0x1c4>
    17bc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    17c0:	8b 77       	andi	r24, 0x7B	; 123
    17c2:	80 93 a6 00 	sts	0x00A6, r24
    17c6:	ae db       	rcall	.-2212   	; 0xf24 <Pipe_WaitUntilReady>
	{
		return ErrorCode;
	}

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    17c8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17cc:	80 64       	ori	r24, 0x40	; 64
    17ce:	80 93 a9 00 	sts	0x00A9, r24
    17d2:	a1 14       	cp	r10, r1
    17d4:	b1 04       	cpc	r11, r1

	Pipe_Freeze();

	if (BufferPtr != NULL)
    17d6:	09 f4       	brne	.+2      	; 0x17da <MS_Host_SendCommand+0xce>
    17d8:	57 c0       	rjmp	.+174    	; 0x1888 <MS_Host_SendCommand+0x17c>
    17da:	f6 01       	movw	r30, r12
    17dc:	60 85       	ldd	r22, Z+8	; 0x08
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = le32_to_cpu(SCSICommandBlock->DataTransferLength);
    17de:	71 85       	ldd	r23, Z+9	; 0x09
    17e0:	84 85       	ldd	r24, Z+12	; 0x0c
    17e2:	87 ff       	sbrs	r24, 7

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    17e4:	24 c0       	rjmp	.+72     	; 0x182e <MS_Host_SendCommand+0x122>
    17e6:	c7 01       	movw	r24, r14
    17e8:	6e 87       	std	Y+14, r22	; 0x0e
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    17ea:	7f 87       	std	Y+15, r23	; 0x0f
    17ec:	1e df       	rcall	.-452    	; 0x162a <MS_Host_WaitForDataReceived>
    17ee:	6e 85       	ldd	r22, Y+14	; 0x0e
    17f0:	7f 85       	ldd	r23, Y+15	; 0x0f
    17f2:	88 23       	and	r24, r24
    17f4:	31 f0       	breq	.+12     	; 0x1802 <MS_Host_SendCommand+0xf6>
    17f6:	90 91 a9 00 	lds	r25, 0x00A9
    17fa:	90 64       	ori	r25, 0x40	; 64
    17fc:	90 93 a9 00 	sts	0x00A9, r25
    1800:	3b c0       	rjmp	.+118    	; 0x1878 <MS_Host_SendCommand+0x16c>
    1802:	f7 01       	movw	r30, r14
    1804:	80 81       	ld	r24, Z
    1806:	8f 70       	andi	r24, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1808:	80 93 a7 00 	sts	0x00A7, r24
    180c:	80 91 a9 00 	lds	r24, 0x00A9
    1810:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1812:	80 93 a9 00 	sts	0x00A9, r24
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	c5 01       	movw	r24, r10
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    181c:	71 da       	rcall	.-2846   	; 0xd00 <Pipe_Read_Stream_LE>
    181e:	81 11       	cpse	r24, r1
    1820:	2b c0       	rjmp	.+86     	; 0x1878 <MS_Host_SendCommand+0x16c>
    1822:	80 91 a6 00 	lds	r24, 0x00A6
    1826:	8e 77       	andi	r24, 0x7E	; 126
    1828:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    182c:	1f c0       	rjmp	.+62     	; 0x186c <MS_Host_SendCommand+0x160>
    182e:	f7 01       	movw	r30, r14
    1830:	86 81       	ldd	r24, Z+6	; 0x06
    1832:	8f 70       	andi	r24, 0x0F	; 15
    1834:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1838:	80 91 a9 00 	lds	r24, 0x00A9
    183c:	8f 7b       	andi	r24, 0xBF	; 191
    183e:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	c5 01       	movw	r24, r10
    1848:	0e da       	rcall	.-3044   	; 0xc66 <Pipe_Write_Stream_LE>
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    184a:	81 11       	cpse	r24, r1
    184c:	15 c0       	rjmp	.+42     	; 0x1878 <MS_Host_SendCommand+0x16c>
    184e:	80 91 a6 00 	lds	r24, 0x00A6
    1852:	8b 77       	andi	r24, 0x7B	; 123
    1854:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1858:	80 91 a6 00 	lds	r24, 0x00A6
    185c:	82 fd       	sbrc	r24, 2
    185e:	06 c0       	rjmp	.+12     	; 0x186c <MS_Host_SendCommand+0x160>
    1860:	80 91 31 01 	lds	r24, 0x0131
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1864:	81 30       	cpi	r24, 0x01	; 1
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    1866:	c1 f7       	brne	.-16     	; 0x1858 <MS_Host_SendCommand+0x14c>
    1868:	82 e0       	ldi	r24, 0x02	; 2
		{
			if (USB_HostState == HOST_STATE_Unattached)
    186a:	08 c0       	rjmp	.+16     	; 0x187c <MS_Host_SendCommand+0x170>
    186c:	80 91 a9 00 	lds	r24, 0x00A9
    1870:	80 64       	ori	r24, 0x40	; 64
			  return PIPE_RWSTREAM_DeviceDisconnected;
    1872:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <MS_Host_SendCommand+0x17c>
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	30 f0       	brcs	.+12     	; 0x1888 <MS_Host_SendCommand+0x17c>
    187c:	90 91 a9 00 	lds	r25, 0x00A9
    1880:	90 64       	ori	r25, 0x40	; 64

	if (BufferPtr != NULL)
	{
		ErrorCode = MS_Host_SendReceiveData(MSInterfaceInfo, SCSICommandBlock, (void*)BufferPtr);

		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
    1882:	90 93 a9 00 	sts	0x00A9, r25
    1886:	24 c0       	rjmp	.+72     	; 0x18d0 <MS_Host_SendCommand+0x1c4>
    1888:	c7 01       	movw	r24, r14
    188a:	cf de       	rcall	.-610    	; 0x162a <MS_Host_WaitForDataReceived>
    188c:	81 11       	cpse	r24, r1
    188e:	20 c0       	rjmp	.+64     	; 0x18d0 <MS_Host_SendCommand+0x1c4>
		{
			Pipe_Freeze();
			return ErrorCode;
    1890:	f7 01       	movw	r30, r14
static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1892:	80 81       	ld	r24, Z
    1894:	8f 70       	andi	r24, 0x0F	; 15
    1896:	80 93 a7 00 	sts	0x00A7, r24
    189a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    189e:	8f 7b       	andi	r24, 0xBF	; 191
    18a0:	80 93 a9 00 	sts	0x00A9, r24
    18a4:	40 e0       	ldi	r20, 0x00	; 0

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	6d e0       	ldi	r22, 0x0D	; 13
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	ce 01       	movw	r24, r28
    18ae:	01 96       	adiw	r24, 0x01	; 1
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    18b0:	27 da       	rcall	.-2994   	; 0xd00 <Pipe_Read_Stream_LE>
    18b2:	81 11       	cpse	r24, r1
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <MS_Host_SendCommand+0x1c4>
    18b6:	80 91 a6 00 	lds	r24, 0x00A6
    18ba:	8e 77       	andi	r24, 0x7E	; 126
    18bc:	80 93 a6 00 	sts	0x00A6, r24
    18c0:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18c4:	80 64       	ori	r24, 0x40	; 64
    18c6:	80 93 a9 00 	sts	0x00A9, r24
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	81 11       	cpse	r24, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	2f 96       	adiw	r28, 0x0f	; 15
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
    18dc:	df 91       	pop	r29
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	08 95       	ret

000018f2 <MS_Host_ConfigurePipes>:
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
#include "MassStorageClassHost.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	00 d0       	rcall	.+0      	; 0x1908 <MS_Host_ConfigurePipes+0x16>
    1908:	00 d0       	rcall	.+0      	; 0x190a <MS_Host_ConfigurePipes+0x18>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	8c 01       	movw	r16, r24
    1910:	7a 83       	std	Y+2, r23	; 0x02
    1912:	69 83       	std	Y+1, r22	; 0x01
    1914:	5c 83       	std	Y+4, r21	; 0x04
    1916:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1918:	fc 01       	movw	r30, r24
    191a:	3c 96       	adiw	r30, 0x0c	; 12
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	df 01       	movw	r26, r30
    1920:	1d 92       	st	X+, r1
    1922:	8a 95       	dec	r24
    1924:	e9 f7       	brne	.-6      	; 0x1920 <MS_Host_ConfigurePipes+0x2e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1926:	eb 81       	ldd	r30, Y+3	; 0x03
    1928:	fc 81       	ldd	r31, Y+4	; 0x04
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	09 f0       	breq	.+2      	; 0x1932 <MS_Host_ConfigurePipes+0x40>
    1930:	6a c0       	rjmp	.+212    	; 0x1a06 <MS_Host_ConfigurePipes+0x114>
    1932:	c1 2c       	mov	r12, r1
    1934:	d1 2c       	mov	r13, r1
    1936:	a1 2c       	mov	r10, r1
    1938:	b1 2c       	mov	r11, r1
    193a:	e1 2c       	mov	r14, r1
    193c:	f1 2c       	mov	r15, r1
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    193e:	c1 14       	cp	r12, r1
    1940:	d1 04       	cpc	r13, r1
    1942:	91 f4       	brne	.+36     	; 0x1968 <MS_Host_ConfigurePipes+0x76>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1944:	4f ee       	ldi	r20, 0xEF	; 239
    1946:	5a e0       	ldi	r21, 0x0A	; 10
    1948:	be 01       	movw	r22, r28
    194a:	6d 5f       	subi	r22, 0xFD	; 253
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	a4 dc       	rcall	.-1720   	; 0x129c <USB_GetNextDescriptorComp>
    1954:	81 11       	cpse	r24, r1
    1956:	59 c0       	rjmp	.+178    	; 0x1a0a <MS_Host_ConfigurePipes+0x118>
    1958:	cb 80       	ldd	r12, Y+3	; 0x03
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    195a:	dc 80       	ldd	r13, Y+4	; 0x04
    195c:	e1 2c       	mov	r14, r1

			DataINEndpoint  = NULL;
    195e:	f1 2c       	mov	r15, r1
    1960:	e0 e0       	ldi	r30, 0x00	; 0
			DataOUTEndpoint = NULL;
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	5f 01       	movw	r10, r30
    1966:	eb cf       	rjmp	.-42     	; 0x193e <MS_Host_ConfigurePipes+0x4c>
    1968:	40 e0       	ldi	r20, 0x00	; 0
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    196a:	5b e0       	ldi	r21, 0x0B	; 11
    196c:	be 01       	movw	r22, r28
    196e:	6d 5f       	subi	r22, 0xFD	; 253
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	92 dc       	rcall	.-1756   	; 0x129c <USB_GetNextDescriptorComp>
    1978:	81 11       	cpse	r24, r1
    197a:	e4 cf       	rjmp	.-56     	; 0x1944 <MS_Host_ConfigurePipes+0x52>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    197c:	eb 81       	ldd	r30, Y+3	; 0x03
    197e:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1984:	02 c0       	rjmp	.+4      	; 0x198a <MS_Host_ConfigurePipes+0x98>
    1986:	7f 01       	movw	r14, r30
    1988:	f5 01       	movw	r30, r10
		  DataINEndpoint  = EndpointData;
    198a:	e1 14       	cp	r14, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    198c:	f1 04       	cpc	r15, r1
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    198e:	51 f3       	breq	.-44     	; 0x1964 <MS_Host_ConfigurePipes+0x72>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	41 f3       	breq	.-48     	; 0x1964 <MS_Host_ConfigurePipes+0x72>
    1994:	d7 01       	movw	r26, r14
    1996:	14 96       	adiw	r26, 0x04	; 4
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MSInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1998:	8d 91       	ld	r24, X+
    199a:	9c 91       	ld	r25, X
    199c:	15 97       	sbiw	r26, 0x05	; 5
    199e:	d8 01       	movw	r26, r16
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	9c 93       	st	X, r25
    19a4:	8e 93       	st	-X, r24
    19a6:	11 97       	sbiw	r26, 0x01	; 1
    19a8:	d7 01       	movw	r26, r14
    19aa:	12 96       	adiw	r26, 0x02	; 2
	MSInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    19ac:	8c 91       	ld	r24, X
    19ae:	d8 01       	movw	r26, r16
    19b0:	13 96       	adiw	r26, 0x03	; 3
    19b2:	8c 93       	st	X, r24
    19b4:	13 97       	sbiw	r26, 0x03	; 3
    19b6:	22 e0       	ldi	r18, 0x02	; 2
    19b8:	14 96       	adiw	r26, 0x04	; 4
	MSInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    19ba:	2c 93       	st	X, r18
    19bc:	14 97       	sbiw	r26, 0x04	; 4
    19be:	84 81       	ldd	r24, Z+4	; 0x04
    19c0:	95 81       	ldd	r25, Z+5	; 0x05

	MSInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    19c2:	18 96       	adiw	r26, 0x08	; 8
    19c4:	9c 93       	st	X, r25
    19c6:	8e 93       	st	-X, r24
    19c8:	17 97       	sbiw	r26, 0x07	; 7
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	19 96       	adiw	r26, 0x09	; 9
	MSInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    19ce:	8c 93       	st	X, r24
    19d0:	19 97       	sbiw	r26, 0x09	; 9
    19d2:	1a 96       	adiw	r26, 0x0a	; 10
    19d4:	2c 93       	st	X, r18
	MSInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	c8 01       	movw	r24, r16

	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataINPipe, 1)))
    19da:	47 da       	rcall	.-2930   	; 0xe6a <Pipe_ConfigurePipeTable>
    19dc:	81 11       	cpse	r24, r1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <MS_Host_ConfigurePipes+0xf2>
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <MS_Host_ConfigurePipes+0x11a>
    19e4:	61 e0       	ldi	r22, 0x01	; 1
	  return MS_ENUMERROR_PipeConfigurationFailed;
    19e6:	c8 01       	movw	r24, r16
    19e8:	06 96       	adiw	r24, 0x06	; 6

	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataOUTPipe, 1)))
    19ea:	3f da       	rcall	.-2946   	; 0xe6a <Pipe_ConfigurePipeTable>
    19ec:	88 23       	and	r24, r24
    19ee:	c1 f3       	breq	.-16     	; 0x19e0 <MS_Host_ConfigurePipes+0xee>
    19f0:	f6 01       	movw	r30, r12
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	d8 01       	movw	r26, r16
    19f6:	1d 96       	adiw	r26, 0x0d	; 13
	  return MS_ENUMERROR_PipeConfigurationFailed;

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    19f8:	8c 93       	st	X, r24
    19fa:	1d 97       	sbiw	r26, 0x0d	; 13
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	1c 96       	adiw	r26, 0x0c	; 12
    1a00:	8c 93       	st	X, r24
    1a02:	80 e0       	ldi	r24, 0x00	; 0
	MSInterfaceInfo->State.IsActive = true;
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <MS_Host_ConfigurePipes+0x11a>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <MS_Host_ConfigurePipes+0x11a>

	return MS_ENUMERROR_NoError;
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
    1a12:	0f 90       	pop	r0

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
	MSInterfaceInfo->State.IsActive = true;

	return MS_ENUMERROR_NoError;
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	08 95       	ret

00001a2a <MS_Host_ResetMSInterface>:
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	ec 01       	movw	r28, r24
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	21 e2       	ldi	r18, 0x21	; 33
    1a36:	20 93 29 01 	sts	0x0129, r18
    1a3a:	2f ef       	ldi	r18, 0xFF	; 255
    1a3c:	20 93 2a 01 	sts	0x012A, r18
    1a40:	10 92 2c 01 	sts	0x012C, r1
    1a44:	10 92 2b 01 	sts	0x012B, r1
    1a48:	90 93 2e 01 	sts	0x012E, r25
    1a4c:	80 93 2d 01 	sts	0x012D, r24
    1a50:	10 92 30 01 	sts	0x0130, r1
    1a54:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a58:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	77 dc       	rcall	.-1810   	; 0x1350 <USB_Host_SendControlRequest>
    1a62:	81 11       	cpse	r24, r1
    1a64:	22 c0       	rjmp	.+68     	; 0x1aaa <MS_Host_ResetMSInterface+0x80>
    1a66:	88 81       	ld	r24, Y
    1a68:	8f 70       	andi	r24, 0x0F	; 15
    1a6a:	80 93 a7 00 	sts	0x00A7, r24
    1a6e:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1a72:	29 2f       	mov	r18, r25

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1a74:	2f 70       	andi	r18, 0x0F	; 15
    1a76:	95 ff       	sbrs	r25, 5
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <MS_Host_ResetMSInterface+0x54>
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <MS_Host_ResetMSInterface+0x56>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	82 2b       	or	r24, r18
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1a82:	88 dd       	rcall	.-1264   	; 0x1594 <USB_Host_ClearEndpointStall>
    1a84:	81 11       	cpse	r24, r1
    1a86:	11 c0       	rjmp	.+34     	; 0x1aaa <MS_Host_ResetMSInterface+0x80>
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a8c:	80 93 a7 00 	sts	0x00A7, r24
    1a90:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1a94:	29 2f       	mov	r18, r25
    1a96:	2f 70       	andi	r18, 0x0F	; 15

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1a98:	95 ff       	sbrs	r25, 5
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <MS_Host_ResetMSInterface+0x76>
    1a9c:	80 e8       	ldi	r24, 0x80	; 128
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <MS_Host_ResetMSInterface+0x78>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	82 2b       	or	r24, r18
    1aa4:	df 91       	pop	r29
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1aa6:	cf 91       	pop	r28
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1aa8:	75 cd       	rjmp	.-1302   	; 0x1594 <USB_Host_ClearEndpointStall>
    1aaa:	df 91       	pop	r29
	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <MS_Host_GetMaxLUN>:
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	eb 01       	movw	r28, r22
uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	85 85       	ldd	r24, Z+13	; 0x0d
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	21 ea       	ldi	r18, 0xA1	; 161
    1abe:	20 93 29 01 	sts	0x0129, r18
    1ac2:	2e ef       	ldi	r18, 0xFE	; 254
    1ac4:	20 93 2a 01 	sts	0x012A, r18
    1ac8:	10 92 2c 01 	sts	0x012C, r1
    1acc:	10 92 2b 01 	sts	0x012B, r1
    1ad0:	90 93 2e 01 	sts	0x012E, r25
    1ad4:	80 93 2d 01 	sts	0x012D, r24
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	90 93 30 01 	sts	0x0130, r25
    1ae0:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ae4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1ae8:	cb 01       	movw	r24, r22
    1aea:	32 dc       	rcall	.-1948   	; 0x1350 <USB_Host_SendControlRequest>
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <MS_Host_GetMaxLUN+0x44>
    1af0:	18 82       	st	Y, r1
	{
		*MaxLUNIndex = 0;
    1af2:	80 e0       	ldi	r24, 0x00	; 0
		ErrorCode    = HOST_SENDCONTROL_Successful;
    1af4:	df 91       	pop	r29
	}

	return ErrorCode;
}
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <MS_Host_GetInquiryData>:
    1afa:	0f 93       	push	r16

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	6f 97       	sbiw	r28, 0x1f	; 31
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1b12:	20 91 31 01 	lds	r18, 0x0131
    1b16:	2b 30       	cpi	r18, 0x0B	; 11
    1b18:	01 f5       	brne	.+64     	; 0x1b5a <MS_Host_GetInquiryData+0x60>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	1c 96       	adiw	r26, 0x0c	; 12
    1b1e:	2c 91       	ld	r18, X
    1b20:	22 23       	and	r18, r18
    1b22:	d9 f0       	breq	.+54     	; 0x1b5a <MS_Host_GetInquiryData+0x60>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1b24:	fe 01       	movw	r30, r28
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	2f e1       	ldi	r18, 0x1F	; 31
    1b2a:	df 01       	movw	r26, r30
    1b2c:	1d 92       	st	X+, r1
    1b2e:	2a 95       	dec	r18
    1b30:	e9 f7       	brne	.-6      	; 0x1b2c <MS_Host_GetInquiryData+0x32>
    1b32:	04 e2       	ldi	r16, 0x24	; 36
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	09 87       	std	Y+9, r16	; 0x09
    1b3c:	1a 87       	std	Y+10, r17	; 0x0a
    1b3e:	2b 87       	std	Y+11, r18	; 0x0b
    1b40:	3c 87       	std	Y+12, r19	; 0x0c
    1b42:	20 e8       	ldi	r18, 0x80	; 128
    1b44:	2d 87       	std	Y+13, r18	; 0x0d
    1b46:	6e 87       	std	Y+14, r22	; 0x0e
    1b48:	26 e0       	ldi	r18, 0x06	; 6
    1b4a:	2f 87       	std	Y+15, r18	; 0x0f
    1b4c:	22 e1       	ldi	r18, 0x12	; 18
    1b4e:	28 8b       	std	Y+16, r18	; 0x10
    1b50:	24 e2       	ldi	r18, 0x24	; 36
    1b52:	2c 8b       	std	Y+20, r18	; 0x14
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
    1b54:	bf 01       	movw	r22, r30
    1b56:	da dd       	rcall	.-1100   	; 0x170c <MS_Host_SendCommand>
    1b58:	01 c0       	rjmp	.+2      	; 0x1b5c <MS_Host_GetInquiryData+0x62>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1b5c:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
}
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <MS_Host_TestUnitReady>:
    1b72:	cf 93       	push	r28

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1b74:	df 93       	push	r29
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	6f 97       	sbiw	r28, 0x1f	; 31
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1b86:	20 91 31 01 	lds	r18, 0x0131
    1b8a:	2b 30       	cpi	r18, 0x0B	; 11
    1b8c:	b1 f4       	brne	.+44     	; 0x1bba <MS_Host_TestUnitReady+0x48>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	1c 96       	adiw	r26, 0x0c	; 12
    1b92:	2c 91       	ld	r18, X
    1b94:	22 23       	and	r18, r18
    1b96:	89 f0       	breq	.+34     	; 0x1bba <MS_Host_TestUnitReady+0x48>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	31 96       	adiw	r30, 0x01	; 1
    1b9c:	2f e1       	ldi	r18, 0x1F	; 31
    1b9e:	df 01       	movw	r26, r30
    1ba0:	1d 92       	st	X+, r1
    1ba2:	2a 95       	dec	r18
    1ba4:	e9 f7       	brne	.-6      	; 0x1ba0 <MS_Host_TestUnitReady+0x2e>
    1ba6:	20 e8       	ldi	r18, 0x80	; 128
    1ba8:	2d 87       	std	Y+13, r18	; 0x0d
    1baa:	6e 87       	std	Y+14, r22	; 0x0e
    1bac:	26 e0       	ldi	r18, 0x06	; 6
    1bae:	2f 87       	std	Y+15, r18	; 0x0f
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	bf 01       	movw	r22, r30
    1bb6:	aa dd       	rcall	.-1196   	; 0x170c <MS_Host_SendCommand>
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <MS_Host_TestUnitReady+0x4a>
    1bba:	81 e0       	ldi	r24, 0x01	; 1

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1bbc:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <MS_Host_ReadDeviceCapacity>:
    1bce:	0f 93       	push	r16

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	6f 97       	sbiw	r28, 0x1f	; 31
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	26 2f       	mov	r18, r22
    1be8:	8a 01       	movw	r16, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1bea:	30 91 31 01 	lds	r19, 0x0131
    1bee:	3b 30       	cpi	r19, 0x0B	; 11
    1bf0:	a9 f5       	brne	.+106    	; 0x1c5c <MS_Host_ReadDeviceCapacity+0x8e>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	1c 96       	adiw	r26, 0x0c	; 12
    1bf6:	3c 91       	ld	r19, X
    1bf8:	33 23       	and	r19, r19
    1bfa:	81 f1       	breq	.+96     	; 0x1c5c <MS_Host_ReadDeviceCapacity+0x8e>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	3f e1       	ldi	r19, 0x1F	; 31
    1c02:	df 01       	movw	r26, r30
    1c04:	1d 92       	st	X+, r1
    1c06:	3a 95       	dec	r19
    1c08:	e9 f7       	brne	.-6      	; 0x1c04 <MS_Host_ReadDeviceCapacity+0x36>
    1c0a:	48 e0       	ldi	r20, 0x08	; 8
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	49 87       	std	Y+9, r20	; 0x09
    1c14:	5a 87       	std	Y+10, r21	; 0x0a
    1c16:	6b 87       	std	Y+11, r22	; 0x0b
    1c18:	7c 87       	std	Y+12, r23	; 0x0c
    1c1a:	30 e8       	ldi	r19, 0x80	; 128
    1c1c:	3d 87       	std	Y+13, r19	; 0x0d
    1c1e:	2e 87       	std	Y+14, r18	; 0x0e
    1c20:	2a e0       	ldi	r18, 0x0A	; 10
    1c22:	2f 87       	std	Y+15, r18	; 0x0f
    1c24:	25 e2       	ldi	r18, 0x25	; 37
    1c26:	28 8b       	std	Y+16, r18	; 0x10
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1c28:	a8 01       	movw	r20, r16
    1c2a:	bf 01       	movw	r22, r30
    1c2c:	6f dd       	rcall	.-1314   	; 0x170c <MS_Host_SendCommand>
    1c2e:	81 11       	cpse	r24, r1
    1c30:	16 c0       	rjmp	.+44     	; 0x1c5e <MS_Host_ReadDeviceCapacity+0x90>
    1c32:	f8 01       	movw	r30, r16
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	22 d1       	rcall	.+580    	; 0x1e82 <__bswapsi2>
    1c3e:	60 83       	st	Z, r22
    1c40:	71 83       	std	Z+1, r23	; 0x01
	  return ErrorCode;

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
    1c42:	82 83       	std	Z+2, r24	; 0x02
    1c44:	93 83       	std	Z+3, r25	; 0x03
    1c46:	64 81       	ldd	r22, Z+4	; 0x04
    1c48:	75 81       	ldd	r23, Z+5	; 0x05
    1c4a:	86 81       	ldd	r24, Z+6	; 0x06
    1c4c:	97 81       	ldd	r25, Z+7	; 0x07
    1c4e:	19 d1       	rcall	.+562    	; 0x1e82 <__bswapsi2>
    1c50:	64 83       	std	Z+4, r22	; 0x04
    1c52:	75 83       	std	Z+5, r23	; 0x05
    1c54:	86 83       	std	Z+6, r24	; 0x06
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);
    1c56:	97 83       	std	Z+7, r25	; 0x07
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <MS_Host_ReadDeviceCapacity+0x90>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1

	return PIPE_RWSTREAM_NoError;
    1c5e:	6f 96       	adiw	r28, 0x1f	; 31
    1c60:	0f b6       	in	r0, 0x3f	; 63
uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1c62:	f8 94       	cli

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);

	return PIPE_RWSTREAM_NoError;
}
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	08 95       	ret

00001c74 <MS_Host_RequestSense>:
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	6f 97       	sbiw	r28, 0x1f	; 31
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c8c:	20 91 31 01 	lds	r18, 0x0131
    1c90:	2b 30       	cpi	r18, 0x0B	; 11
    1c92:	01 f5       	brne	.+64     	; 0x1cd4 <MS_Host_RequestSense+0x60>
    1c94:	dc 01       	movw	r26, r24
    1c96:	1c 96       	adiw	r26, 0x0c	; 12
    1c98:	2c 91       	ld	r18, X
    1c9a:	22 23       	and	r18, r18
    1c9c:	d9 f0       	breq	.+54     	; 0x1cd4 <MS_Host_RequestSense+0x60>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	31 96       	adiw	r30, 0x01	; 1
    1ca2:	2f e1       	ldi	r18, 0x1F	; 31
    1ca4:	df 01       	movw	r26, r30
    1ca6:	1d 92       	st	X+, r1
    1ca8:	2a 95       	dec	r18
    1caa:	e9 f7       	brne	.-6      	; 0x1ca6 <MS_Host_RequestSense+0x32>
    1cac:	02 e1       	ldi	r16, 0x12	; 18
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	09 87       	std	Y+9, r16	; 0x09
    1cb6:	1a 87       	std	Y+10, r17	; 0x0a
    1cb8:	2b 87       	std	Y+11, r18	; 0x0b
    1cba:	3c 87       	std	Y+12, r19	; 0x0c
    1cbc:	20 e8       	ldi	r18, 0x80	; 128
    1cbe:	2d 87       	std	Y+13, r18	; 0x0d
    1cc0:	6e 87       	std	Y+14, r22	; 0x0e
    1cc2:	26 e0       	ldi	r18, 0x06	; 6
    1cc4:	2f 87       	std	Y+15, r18	; 0x0f
    1cc6:	23 e0       	ldi	r18, 0x03	; 3
    1cc8:	28 8b       	std	Y+16, r18	; 0x10
    1cca:	22 e1       	ldi	r18, 0x12	; 18
    1ccc:	2c 8b       	std	Y+20, r18	; 0x14
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
    1cce:	bf 01       	movw	r22, r30
    1cd0:	1d dd       	rcall	.-1478   	; 0x170c <MS_Host_SendCommand>
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <MS_Host_RequestSense+0x62>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1cd6:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
}
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <MS_Host_PreventAllowMediumRemoval>:
    1cec:	cf 93       	push	r28

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    1cee:	df 93       	push	r29
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	6f 97       	sbiw	r28, 0x1f	; 31
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d00:	20 91 31 01 	lds	r18, 0x0131
    1d04:	2b 30       	cpi	r18, 0x0B	; 11
    1d06:	b9 f4       	brne	.+46     	; 0x1d36 <MS_Host_PreventAllowMediumRemoval+0x4a>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	1c 96       	adiw	r26, 0x0c	; 12
    1d0c:	2c 91       	ld	r18, X
    1d0e:	22 23       	and	r18, r18
    1d10:	91 f0       	breq	.+36     	; 0x1d36 <MS_Host_PreventAllowMediumRemoval+0x4a>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1d12:	fe 01       	movw	r30, r28
    1d14:	31 96       	adiw	r30, 0x01	; 1
    1d16:	2f e1       	ldi	r18, 0x1F	; 31
    1d18:	df 01       	movw	r26, r30
    1d1a:	1d 92       	st	X+, r1
    1d1c:	2a 95       	dec	r18
    1d1e:	e9 f7       	brne	.-6      	; 0x1d1a <MS_Host_PreventAllowMediumRemoval+0x2e>
    1d20:	6e 87       	std	Y+14, r22	; 0x0e
    1d22:	26 e0       	ldi	r18, 0x06	; 6
    1d24:	2f 87       	std	Y+15, r18	; 0x0f
    1d26:	2e e1       	ldi	r18, 0x1E	; 30
    1d28:	28 8b       	std	Y+16, r18	; 0x10
    1d2a:	4b 8b       	std	Y+19, r20	; 0x13
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	bf 01       	movw	r22, r30
    1d32:	ec dc       	rcall	.-1576   	; 0x170c <MS_Host_SendCommand>
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <MS_Host_PreventAllowMediumRemoval+0x4c>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1d38:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <MS_Host_ReadDeviceBlocks>:
    1d4a:	8f 92       	push	r8
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    1d4c:	9f 92       	push	r9
    1d4e:	af 92       	push	r10
    1d50:	bf 92       	push	r11
    1d52:	cf 92       	push	r12
    1d54:	df 92       	push	r13
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	6f 97       	sbiw	r28, 0x1f	; 31
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	fc 01       	movw	r30, r24
    1d74:	86 2e       	mov	r8, r22
    1d76:	12 2f       	mov	r17, r18
    1d78:	93 2e       	mov	r9, r19
    1d7a:	97 01       	movw	r18, r14
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d7c:	80 91 31 01 	lds	r24, 0x0131
    1d80:	8b 30       	cpi	r24, 0x0B	; 11
    1d82:	19 f5       	brne	.+70     	; 0x1dca <MS_Host_ReadDeviceBlocks+0x80>
    1d84:	84 85       	ldd	r24, Z+12	; 0x0c
    1d86:	88 23       	and	r24, r24
    1d88:	01 f1       	breq	.+64     	; 0x1dca <MS_Host_ReadDeviceBlocks+0x80>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	5c 01       	movw	r10, r24
    1d90:	8f e1       	ldi	r24, 0x1F	; 31
    1d92:	d5 01       	movw	r26, r10
    1d94:	1d 92       	st	X+, r1
    1d96:	8a 95       	dec	r24
    1d98:	e9 f7       	brne	.-6      	; 0x1d94 <MS_Host_ReadDeviceBlocks+0x4a>
		{
			.DataTransferLength = cpu_to_le32((uint32_t)Blocks * BlockSize),
    1d9a:	a0 2f       	mov	r26, r16
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	62 d0       	rcall	.+196    	; 0x1e64 <__umulhisi3>
    1da0:	69 87       	std	Y+9, r22	; 0x09
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1da2:	7a 87       	std	Y+10, r23	; 0x0a
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	8d 87       	std	Y+13, r24	; 0x0d
    1dac:	8e 86       	std	Y+14, r8	; 0x0e
    1dae:	8a e0       	ldi	r24, 0x0A	; 10
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
    1db2:	88 e2       	ldi	r24, 0x28	; 40
    1db4:	88 8b       	std	Y+16, r24	; 0x10
    1db6:	5a 8b       	std	Y+18, r21	; 0x12
    1db8:	4b 8b       	std	Y+19, r20	; 0x13
    1dba:	9c 8a       	std	Y+20, r9	; 0x14
    1dbc:	1d 8b       	std	Y+21, r17	; 0x15
    1dbe:	08 8f       	std	Y+24, r16	; 0x18
    1dc0:	a6 01       	movw	r20, r12
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
    1dc2:	b5 01       	movw	r22, r10
    1dc4:	cf 01       	movw	r24, r30
    1dc6:	a2 dc       	rcall	.-1724   	; 0x170c <MS_Host_SendCommand>
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <MS_Host_ReadDeviceBlocks+0x82>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	6f 96       	adiw	r28, 0x1f	; 31
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1dce:	0f b6       	in	r0, 0x3f	; 63
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
}
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	bf 90       	pop	r11
    1dea:	af 90       	pop	r10
    1dec:	9f 90       	pop	r9
    1dee:	8f 90       	pop	r8
    1df0:	08 95       	ret

00001df2 <Serial_putchar>:
    1df2:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1df6:	95 ff       	sbrs	r25, 5
    1df8:	fc cf       	rjmp	.-8      	; 0x1df2 <Serial_putchar>
				UDR1 = DataByte;
    1dfa:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	08 95       	ret

00001e04 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e04:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e08:	87 ff       	sbrs	r24, 7
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <Serial_getchar+0x18>
    1e0c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e10:	87 ff       	sbrs	r24, 7
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1e14:	80 91 ce 00 	lds	r24, 0x00CE
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	08 95       	ret
	  return _FDEV_EOF;
    1e1c:	8e ef       	ldi	r24, 0xFE	; 254
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e26:	08 95       	ret

00001e28 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1e28:	fc 01       	movw	r30, r24
	if (!(Stream))
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	59 f4       	brne	.+22     	; 0x1e44 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1e2e:	82 e3       	ldi	r24, 0x32	; 50
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	90 93 41 01 	sts	0x0141, r25
    1e36:	80 93 40 01 	sts	0x0140, r24
		stdout = Stream;
    1e3a:	90 93 43 01 	sts	0x0143, r25
    1e3e:	80 93 42 01 	sts	0x0142, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1e42:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e44:	8e e0       	ldi	r24, 0x0E	; 14
    1e46:	df 01       	movw	r26, r30
    1e48:	1d 92       	st	X+, r1
    1e4a:	8a 95       	dec	r24
    1e4c:	e9 f7       	brne	.-6      	; 0x1e48 <Serial_CreateStream+0x20>
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	83 83       	std	Z+3, r24	; 0x03
    1e52:	89 ef       	ldi	r24, 0xF9	; 249
    1e54:	9e e0       	ldi	r25, 0x0E	; 14
    1e56:	91 87       	std	Z+9, r25	; 0x09
    1e58:	80 87       	std	Z+8, r24	; 0x08
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	9f e0       	ldi	r25, 0x0F	; 15
    1e5e:	93 87       	std	Z+11, r25	; 0x0b
    1e60:	82 87       	std	Z+10, r24	; 0x0a
    1e62:	08 95       	ret

00001e64 <__umulhisi3>:
    1e64:	a2 9f       	mul	r26, r18
    1e66:	b0 01       	movw	r22, r0
    1e68:	b3 9f       	mul	r27, r19
    1e6a:	c0 01       	movw	r24, r0
    1e6c:	a3 9f       	mul	r26, r19
    1e6e:	70 0d       	add	r23, r0
    1e70:	81 1d       	adc	r24, r1
    1e72:	11 24       	eor	r1, r1
    1e74:	91 1d       	adc	r25, r1
    1e76:	b2 9f       	mul	r27, r18
    1e78:	70 0d       	add	r23, r0
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	11 24       	eor	r1, r1
    1e7e:	91 1d       	adc	r25, r1
    1e80:	08 95       	ret

00001e82 <__bswapsi2>:
    1e82:	69 27       	eor	r22, r25
    1e84:	96 27       	eor	r25, r22
    1e86:	69 27       	eor	r22, r25
    1e88:	78 27       	eor	r23, r24
    1e8a:	87 27       	eor	r24, r23
    1e8c:	78 27       	eor	r23, r24
    1e8e:	08 95       	ret

00001e90 <isgraph>:
    1e90:	80 32       	cpi	r24, 0x20	; 32
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <isprint+0x2>

00001e94 <isprint>:
    1e94:	91 11       	cpse	r25, r1
    1e96:	76 c2       	rjmp	.+1260   	; 0x2384 <__ctype_isfalse>
    1e98:	80 52       	subi	r24, 0x20	; 32
    1e9a:	8f 55       	subi	r24, 0x5F	; 95
    1e9c:	e0 f7       	brcc	.-8      	; 0x1e96 <isprint+0x2>
    1e9e:	08 95       	ret

00001ea0 <fputc>:
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	18 2f       	mov	r17, r24
    1eaa:	09 2f       	mov	r16, r25
    1eac:	eb 01       	movw	r28, r22
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	81 fd       	sbrc	r24, 1
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <fputc+0x1a>
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	9f ef       	ldi	r25, 0xFF	; 255
    1eb8:	20 c0       	rjmp	.+64     	; 0x1efa <fputc+0x5a>
    1eba:	82 ff       	sbrs	r24, 2
    1ebc:	10 c0       	rjmp	.+32     	; 0x1ede <fputc+0x3e>
    1ebe:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	42 17       	cp	r20, r18
    1ec8:	53 07       	cpc	r21, r19
    1eca:	7c f4       	brge	.+30     	; 0x1eea <fputc+0x4a>
    1ecc:	e8 81       	ld	r30, Y
    1ece:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed0:	9f 01       	movw	r18, r30
    1ed2:	2f 5f       	subi	r18, 0xFF	; 255
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	39 83       	std	Y+1, r19	; 0x01
    1ed8:	28 83       	st	Y, r18
    1eda:	10 83       	st	Z, r17
    1edc:	06 c0       	rjmp	.+12     	; 0x1eea <fputc+0x4a>
    1ede:	e8 85       	ldd	r30, Y+8	; 0x08
    1ee0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ee2:	81 2f       	mov	r24, r17
    1ee4:	09 95       	icall
    1ee6:	89 2b       	or	r24, r25
    1ee8:	29 f7       	brne	.-54     	; 0x1eb4 <fputc+0x14>
    1eea:	2e 81       	ldd	r18, Y+6	; 0x06
    1eec:	3f 81       	ldd	r19, Y+7	; 0x07
    1eee:	2f 5f       	subi	r18, 0xFF	; 255
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	3f 83       	std	Y+7, r19	; 0x07
    1ef4:	2e 83       	std	Y+6, r18	; 0x06
    1ef6:	81 2f       	mov	r24, r17
    1ef8:	90 2f       	mov	r25, r16
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	08 95       	ret

00001f04 <printf_P>:
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	fe 01       	movw	r30, r28
    1f12:	37 96       	adiw	r30, 0x07	; 7
    1f14:	61 91       	ld	r22, Z+
    1f16:	71 91       	ld	r23, Z+
    1f18:	02 e4       	ldi	r16, 0x42	; 66
    1f1a:	11 e0       	ldi	r17, 0x01	; 1
    1f1c:	d8 01       	movw	r26, r16
    1f1e:	8d 91       	ld	r24, X+
    1f20:	9c 91       	ld	r25, X
    1f22:	dc 01       	movw	r26, r24
    1f24:	13 96       	adiw	r26, 0x03	; 3
    1f26:	2c 91       	ld	r18, X
    1f28:	13 97       	sbiw	r26, 0x03	; 3
    1f2a:	28 60       	ori	r18, 0x08	; 8
    1f2c:	13 96       	adiw	r26, 0x03	; 3
    1f2e:	2c 93       	st	X, r18
    1f30:	af 01       	movw	r20, r30
    1f32:	3a d0       	rcall	.+116    	; 0x1fa8 <vfprintf>
    1f34:	d8 01       	movw	r26, r16
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	23 81       	ldd	r18, Z+3	; 0x03
    1f3c:	27 7f       	andi	r18, 0xF7	; 247
    1f3e:	23 83       	std	Z+3, r18	; 0x03
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <puts_P>:
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	e0 91 42 01 	lds	r30, 0x0142
    1f58:	f0 91 43 01 	lds	r31, 0x0143
    1f5c:	83 81       	ldd	r24, Z+3	; 0x03
    1f5e:	81 ff       	sbrs	r24, 1
    1f60:	1c c0       	rjmp	.+56     	; 0x1f9a <puts_P+0x50>
    1f62:	00 e0       	ldi	r16, 0x00	; 0
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	fe 01       	movw	r30, r28
    1f68:	84 91       	lpm	r24, Z
    1f6a:	60 91 42 01 	lds	r22, 0x0142
    1f6e:	70 91 43 01 	lds	r23, 0x0143
    1f72:	db 01       	movw	r26, r22
    1f74:	18 96       	adiw	r26, 0x08	; 8
    1f76:	ed 91       	ld	r30, X+
    1f78:	fc 91       	ld	r31, X
    1f7a:	19 97       	sbiw	r26, 0x09	; 9
    1f7c:	88 23       	and	r24, r24
    1f7e:	39 f0       	breq	.+14     	; 0x1f8e <puts_P+0x44>
    1f80:	09 95       	icall
    1f82:	89 2b       	or	r24, r25
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <puts_P+0x40>
    1f86:	0f ef       	ldi	r16, 0xFF	; 255
    1f88:	1f ef       	ldi	r17, 0xFF	; 255
    1f8a:	21 96       	adiw	r28, 0x01	; 1
    1f8c:	ec cf       	rjmp	.-40     	; 0x1f66 <puts_P+0x1c>
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	09 95       	icall
    1f92:	89 2b       	or	r24, r25
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <puts_P+0x50>
    1f96:	c8 01       	movw	r24, r16
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <puts_P+0x54>
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	9f ef       	ldi	r25, 0xFF	; 255
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	08 95       	ret

00001fa8 <vfprintf>:
    1fa8:	2f 92       	push	r2
    1faa:	3f 92       	push	r3
    1fac:	4f 92       	push	r4
    1fae:	5f 92       	push	r5
    1fb0:	6f 92       	push	r6
    1fb2:	7f 92       	push	r7
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	2c 97       	sbiw	r28, 0x0c	; 12
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	7c 01       	movw	r14, r24
    1fde:	6b 01       	movw	r12, r22
    1fe0:	8a 01       	movw	r16, r20
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	17 82       	std	Z+7, r1	; 0x07
    1fe6:	16 82       	std	Z+6, r1	; 0x06
    1fe8:	83 81       	ldd	r24, Z+3	; 0x03
    1fea:	81 ff       	sbrs	r24, 1
    1fec:	b0 c1       	rjmp	.+864    	; 0x234e <__stack+0x24f>
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	4c 01       	movw	r8, r24
    1ff4:	f7 01       	movw	r30, r14
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	f6 01       	movw	r30, r12
    1ffa:	93 fd       	sbrc	r25, 3
    1ffc:	85 91       	lpm	r24, Z+
    1ffe:	93 ff       	sbrs	r25, 3
    2000:	81 91       	ld	r24, Z+
    2002:	6f 01       	movw	r12, r30
    2004:	88 23       	and	r24, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <vfprintf+0x62>
    2008:	9e c1       	rjmp	.+828    	; 0x2346 <__stack+0x247>
    200a:	85 32       	cpi	r24, 0x25	; 37
    200c:	39 f4       	brne	.+14     	; 0x201c <vfprintf+0x74>
    200e:	93 fd       	sbrc	r25, 3
    2010:	85 91       	lpm	r24, Z+
    2012:	93 ff       	sbrs	r25, 3
    2014:	81 91       	ld	r24, Z+
    2016:	6f 01       	movw	r12, r30
    2018:	85 32       	cpi	r24, 0x25	; 37
    201a:	21 f4       	brne	.+8      	; 0x2024 <vfprintf+0x7c>
    201c:	b7 01       	movw	r22, r14
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	3f df       	rcall	.-386    	; 0x1ea0 <fputc>
    2022:	e8 cf       	rjmp	.-48     	; 0x1ff4 <vfprintf+0x4c>
    2024:	51 2c       	mov	r5, r1
    2026:	31 2c       	mov	r3, r1
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	20 32       	cpi	r18, 0x20	; 32
    202c:	a0 f4       	brcc	.+40     	; 0x2056 <vfprintf+0xae>
    202e:	8b 32       	cpi	r24, 0x2B	; 43
    2030:	69 f0       	breq	.+26     	; 0x204c <vfprintf+0xa4>
    2032:	30 f4       	brcc	.+12     	; 0x2040 <vfprintf+0x98>
    2034:	80 32       	cpi	r24, 0x20	; 32
    2036:	59 f0       	breq	.+22     	; 0x204e <vfprintf+0xa6>
    2038:	83 32       	cpi	r24, 0x23	; 35
    203a:	69 f4       	brne	.+26     	; 0x2056 <vfprintf+0xae>
    203c:	20 61       	ori	r18, 0x10	; 16
    203e:	2c c0       	rjmp	.+88     	; 0x2098 <vfprintf+0xf0>
    2040:	8d 32       	cpi	r24, 0x2D	; 45
    2042:	39 f0       	breq	.+14     	; 0x2052 <vfprintf+0xaa>
    2044:	80 33       	cpi	r24, 0x30	; 48
    2046:	39 f4       	brne	.+14     	; 0x2056 <vfprintf+0xae>
    2048:	21 60       	ori	r18, 0x01	; 1
    204a:	26 c0       	rjmp	.+76     	; 0x2098 <vfprintf+0xf0>
    204c:	22 60       	ori	r18, 0x02	; 2
    204e:	24 60       	ori	r18, 0x04	; 4
    2050:	23 c0       	rjmp	.+70     	; 0x2098 <vfprintf+0xf0>
    2052:	28 60       	ori	r18, 0x08	; 8
    2054:	21 c0       	rjmp	.+66     	; 0x2098 <vfprintf+0xf0>
    2056:	27 fd       	sbrc	r18, 7
    2058:	27 c0       	rjmp	.+78     	; 0x20a8 <vfprintf+0x100>
    205a:	30 ed       	ldi	r19, 0xD0	; 208
    205c:	38 0f       	add	r19, r24
    205e:	3a 30       	cpi	r19, 0x0A	; 10
    2060:	78 f4       	brcc	.+30     	; 0x2080 <vfprintf+0xd8>
    2062:	26 ff       	sbrs	r18, 6
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <vfprintf+0xca>
    2066:	fa e0       	ldi	r31, 0x0A	; 10
    2068:	5f 9e       	mul	r5, r31
    206a:	30 0d       	add	r19, r0
    206c:	11 24       	eor	r1, r1
    206e:	53 2e       	mov	r5, r19
    2070:	13 c0       	rjmp	.+38     	; 0x2098 <vfprintf+0xf0>
    2072:	8a e0       	ldi	r24, 0x0A	; 10
    2074:	38 9e       	mul	r3, r24
    2076:	30 0d       	add	r19, r0
    2078:	11 24       	eor	r1, r1
    207a:	33 2e       	mov	r3, r19
    207c:	20 62       	ori	r18, 0x20	; 32
    207e:	0c c0       	rjmp	.+24     	; 0x2098 <vfprintf+0xf0>
    2080:	8e 32       	cpi	r24, 0x2E	; 46
    2082:	21 f4       	brne	.+8      	; 0x208c <vfprintf+0xe4>
    2084:	26 fd       	sbrc	r18, 6
    2086:	5f c1       	rjmp	.+702    	; 0x2346 <__stack+0x247>
    2088:	20 64       	ori	r18, 0x40	; 64
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0xf0>
    208c:	8c 36       	cpi	r24, 0x6C	; 108
    208e:	11 f4       	brne	.+4      	; 0x2094 <vfprintf+0xec>
    2090:	20 68       	ori	r18, 0x80	; 128
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <vfprintf+0xf0>
    2094:	88 36       	cpi	r24, 0x68	; 104
    2096:	41 f4       	brne	.+16     	; 0x20a8 <vfprintf+0x100>
    2098:	f6 01       	movw	r30, r12
    209a:	93 fd       	sbrc	r25, 3
    209c:	85 91       	lpm	r24, Z+
    209e:	93 ff       	sbrs	r25, 3
    20a0:	81 91       	ld	r24, Z+
    20a2:	6f 01       	movw	r12, r30
    20a4:	81 11       	cpse	r24, r1
    20a6:	c1 cf       	rjmp	.-126    	; 0x202a <vfprintf+0x82>
    20a8:	98 2f       	mov	r25, r24
    20aa:	9f 7d       	andi	r25, 0xDF	; 223
    20ac:	95 54       	subi	r25, 0x45	; 69
    20ae:	93 30       	cpi	r25, 0x03	; 3
    20b0:	28 f4       	brcc	.+10     	; 0x20bc <vfprintf+0x114>
    20b2:	0c 5f       	subi	r16, 0xFC	; 252
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	ff e3       	ldi	r31, 0x3F	; 63
    20b8:	f9 83       	std	Y+1, r31	; 0x01
    20ba:	0d c0       	rjmp	.+26     	; 0x20d6 <vfprintf+0x12e>
    20bc:	83 36       	cpi	r24, 0x63	; 99
    20be:	31 f0       	breq	.+12     	; 0x20cc <vfprintf+0x124>
    20c0:	83 37       	cpi	r24, 0x73	; 115
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <vfprintf+0x138>
    20c4:	83 35       	cpi	r24, 0x53	; 83
    20c6:	09 f0       	breq	.+2      	; 0x20ca <vfprintf+0x122>
    20c8:	57 c0       	rjmp	.+174    	; 0x2178 <__stack+0x79>
    20ca:	21 c0       	rjmp	.+66     	; 0x210e <__stack+0xf>
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 81       	ld	r24, Z
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	0e 5f       	subi	r16, 0xFE	; 254
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	44 24       	eor	r4, r4
    20d8:	43 94       	inc	r4
    20da:	51 2c       	mov	r5, r1
    20dc:	54 01       	movw	r10, r8
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <__stack+0x9>
    20e0:	38 01       	movw	r6, r16
    20e2:	f2 e0       	ldi	r31, 0x02	; 2
    20e4:	6f 0e       	add	r6, r31
    20e6:	71 1c       	adc	r7, r1
    20e8:	f8 01       	movw	r30, r16
    20ea:	a0 80       	ld	r10, Z
    20ec:	b1 80       	ldd	r11, Z+1	; 0x01
    20ee:	26 ff       	sbrs	r18, 6
    20f0:	03 c0       	rjmp	.+6      	; 0x20f8 <vfprintf+0x150>
    20f2:	65 2d       	mov	r22, r5
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <vfprintf+0x154>
    20f8:	6f ef       	ldi	r22, 0xFF	; 255
    20fa:	7f ef       	ldi	r23, 0xFF	; 255
    20fc:	c5 01       	movw	r24, r10
    20fe:	2c 87       	std	Y+12, r18	; 0x0c
    2100:	4f d1       	rcall	.+670    	; 0x23a0 <strnlen>
    2102:	2c 01       	movw	r4, r24
    2104:	83 01       	movw	r16, r6
    2106:	2c 85       	ldd	r18, Y+12	; 0x0c
    2108:	2f 77       	andi	r18, 0x7F	; 127
    210a:	22 2e       	mov	r2, r18
    210c:	16 c0       	rjmp	.+44     	; 0x213a <__stack+0x3b>
    210e:	38 01       	movw	r6, r16
    2110:	f2 e0       	ldi	r31, 0x02	; 2
    2112:	6f 0e       	add	r6, r31
    2114:	71 1c       	adc	r7, r1
    2116:	f8 01       	movw	r30, r16
    2118:	a0 80       	ld	r10, Z
    211a:	b1 80       	ldd	r11, Z+1	; 0x01
    211c:	26 ff       	sbrs	r18, 6
    211e:	03 c0       	rjmp	.+6      	; 0x2126 <__stack+0x27>
    2120:	65 2d       	mov	r22, r5
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	02 c0       	rjmp	.+4      	; 0x212a <__stack+0x2b>
    2126:	6f ef       	ldi	r22, 0xFF	; 255
    2128:	7f ef       	ldi	r23, 0xFF	; 255
    212a:	c5 01       	movw	r24, r10
    212c:	2c 87       	std	Y+12, r18	; 0x0c
    212e:	2d d1       	rcall	.+602    	; 0x238a <strnlen_P>
    2130:	2c 01       	movw	r4, r24
    2132:	2c 85       	ldd	r18, Y+12	; 0x0c
    2134:	20 68       	ori	r18, 0x80	; 128
    2136:	22 2e       	mov	r2, r18
    2138:	83 01       	movw	r16, r6
    213a:	23 fc       	sbrc	r2, 3
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <__stack+0x71>
    213e:	83 2d       	mov	r24, r3
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	48 16       	cp	r4, r24
    2144:	59 06       	cpc	r5, r25
    2146:	a0 f4       	brcc	.+40     	; 0x2170 <__stack+0x71>
    2148:	b7 01       	movw	r22, r14
    214a:	80 e2       	ldi	r24, 0x20	; 32
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a8 de       	rcall	.-688    	; 0x1ea0 <fputc>
    2150:	3a 94       	dec	r3
    2152:	f5 cf       	rjmp	.-22     	; 0x213e <__stack+0x3f>
    2154:	f5 01       	movw	r30, r10
    2156:	27 fc       	sbrc	r2, 7
    2158:	85 91       	lpm	r24, Z+
    215a:	27 fe       	sbrs	r2, 7
    215c:	81 91       	ld	r24, Z+
    215e:	5f 01       	movw	r10, r30
    2160:	b7 01       	movw	r22, r14
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9d de       	rcall	.-710    	; 0x1ea0 <fputc>
    2166:	31 10       	cpse	r3, r1
    2168:	3a 94       	dec	r3
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	4f 1a       	sub	r4, r31
    216e:	51 08       	sbc	r5, r1
    2170:	41 14       	cp	r4, r1
    2172:	51 04       	cpc	r5, r1
    2174:	79 f7       	brne	.-34     	; 0x2154 <__stack+0x55>
    2176:	de c0       	rjmp	.+444    	; 0x2334 <__stack+0x235>
    2178:	84 36       	cpi	r24, 0x64	; 100
    217a:	11 f0       	breq	.+4      	; 0x2180 <__stack+0x81>
    217c:	89 36       	cpi	r24, 0x69	; 105
    217e:	31 f5       	brne	.+76     	; 0x21cc <__stack+0xcd>
    2180:	f8 01       	movw	r30, r16
    2182:	27 ff       	sbrs	r18, 7
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <__stack+0x95>
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	0c 5f       	subi	r16, 0xFC	; 252
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	08 c0       	rjmp	.+16     	; 0x21a4 <__stack+0xa5>
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	88 27       	eor	r24, r24
    219a:	77 fd       	sbrc	r23, 7
    219c:	80 95       	com	r24
    219e:	98 2f       	mov	r25, r24
    21a0:	0e 5f       	subi	r16, 0xFE	; 254
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	2f 76       	andi	r18, 0x6F	; 111
    21a6:	b2 2e       	mov	r11, r18
    21a8:	97 ff       	sbrs	r25, 7
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <__stack+0xbf>
    21ac:	90 95       	com	r25
    21ae:	80 95       	com	r24
    21b0:	70 95       	com	r23
    21b2:	61 95       	neg	r22
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	8f 4f       	sbci	r24, 0xFF	; 255
    21b8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ba:	20 68       	ori	r18, 0x80	; 128
    21bc:	b2 2e       	mov	r11, r18
    21be:	2a e0       	ldi	r18, 0x0A	; 10
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	a4 01       	movw	r20, r8
    21c4:	f8 d0       	rcall	.+496    	; 0x23b6 <__ultoa_invert>
    21c6:	a8 2e       	mov	r10, r24
    21c8:	a8 18       	sub	r10, r8
    21ca:	43 c0       	rjmp	.+134    	; 0x2252 <__stack+0x153>
    21cc:	85 37       	cpi	r24, 0x75	; 117
    21ce:	29 f4       	brne	.+10     	; 0x21da <__stack+0xdb>
    21d0:	2f 7e       	andi	r18, 0xEF	; 239
    21d2:	b2 2e       	mov	r11, r18
    21d4:	2a e0       	ldi	r18, 0x0A	; 10
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	25 c0       	rjmp	.+74     	; 0x2224 <__stack+0x125>
    21da:	f2 2f       	mov	r31, r18
    21dc:	f9 7f       	andi	r31, 0xF9	; 249
    21de:	bf 2e       	mov	r11, r31
    21e0:	8f 36       	cpi	r24, 0x6F	; 111
    21e2:	c1 f0       	breq	.+48     	; 0x2214 <__stack+0x115>
    21e4:	18 f4       	brcc	.+6      	; 0x21ec <__stack+0xed>
    21e6:	88 35       	cpi	r24, 0x58	; 88
    21e8:	79 f0       	breq	.+30     	; 0x2208 <__stack+0x109>
    21ea:	ad c0       	rjmp	.+346    	; 0x2346 <__stack+0x247>
    21ec:	80 37       	cpi	r24, 0x70	; 112
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <__stack+0xf7>
    21f0:	88 37       	cpi	r24, 0x78	; 120
    21f2:	21 f0       	breq	.+8      	; 0x21fc <__stack+0xfd>
    21f4:	a8 c0       	rjmp	.+336    	; 0x2346 <__stack+0x247>
    21f6:	2f 2f       	mov	r18, r31
    21f8:	20 61       	ori	r18, 0x10	; 16
    21fa:	b2 2e       	mov	r11, r18
    21fc:	b4 fe       	sbrs	r11, 4
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <__stack+0x11b>
    2200:	8b 2d       	mov	r24, r11
    2202:	84 60       	ori	r24, 0x04	; 4
    2204:	b8 2e       	mov	r11, r24
    2206:	09 c0       	rjmp	.+18     	; 0x221a <__stack+0x11b>
    2208:	24 ff       	sbrs	r18, 4
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <__stack+0x121>
    220c:	9f 2f       	mov	r25, r31
    220e:	96 60       	ori	r25, 0x06	; 6
    2210:	b9 2e       	mov	r11, r25
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <__stack+0x121>
    2214:	28 e0       	ldi	r18, 0x08	; 8
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <__stack+0x125>
    221a:	20 e1       	ldi	r18, 0x10	; 16
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <__stack+0x125>
    2220:	20 e1       	ldi	r18, 0x10	; 16
    2222:	32 e0       	ldi	r19, 0x02	; 2
    2224:	f8 01       	movw	r30, r16
    2226:	b7 fe       	sbrs	r11, 7
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <__stack+0x139>
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0c 5f       	subi	r16, 0xFC	; 252
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	06 c0       	rjmp	.+12     	; 0x2244 <__stack+0x145>
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 5f       	subi	r16, 0xFE	; 254
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	a4 01       	movw	r20, r8
    2246:	b7 d0       	rcall	.+366    	; 0x23b6 <__ultoa_invert>
    2248:	a8 2e       	mov	r10, r24
    224a:	a8 18       	sub	r10, r8
    224c:	fb 2d       	mov	r31, r11
    224e:	ff 77       	andi	r31, 0x7F	; 127
    2250:	bf 2e       	mov	r11, r31
    2252:	b6 fe       	sbrs	r11, 6
    2254:	0b c0       	rjmp	.+22     	; 0x226c <__stack+0x16d>
    2256:	2b 2d       	mov	r18, r11
    2258:	2e 7f       	andi	r18, 0xFE	; 254
    225a:	a5 14       	cp	r10, r5
    225c:	50 f4       	brcc	.+20     	; 0x2272 <__stack+0x173>
    225e:	b4 fe       	sbrs	r11, 4
    2260:	0a c0       	rjmp	.+20     	; 0x2276 <__stack+0x177>
    2262:	b2 fc       	sbrc	r11, 2
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <__stack+0x177>
    2266:	2b 2d       	mov	r18, r11
    2268:	2e 7e       	andi	r18, 0xEE	; 238
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <__stack+0x177>
    226c:	7a 2c       	mov	r7, r10
    226e:	2b 2d       	mov	r18, r11
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <__stack+0x179>
    2272:	7a 2c       	mov	r7, r10
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <__stack+0x179>
    2276:	75 2c       	mov	r7, r5
    2278:	24 ff       	sbrs	r18, 4
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__stack+0x197>
    227c:	fe 01       	movw	r30, r28
    227e:	ea 0d       	add	r30, r10
    2280:	f1 1d       	adc	r31, r1
    2282:	80 81       	ld	r24, Z
    2284:	80 33       	cpi	r24, 0x30	; 48
    2286:	11 f4       	brne	.+4      	; 0x228c <__stack+0x18d>
    2288:	29 7e       	andi	r18, 0xE9	; 233
    228a:	09 c0       	rjmp	.+18     	; 0x229e <__stack+0x19f>
    228c:	22 ff       	sbrs	r18, 2
    228e:	06 c0       	rjmp	.+12     	; 0x229c <__stack+0x19d>
    2290:	73 94       	inc	r7
    2292:	73 94       	inc	r7
    2294:	04 c0       	rjmp	.+8      	; 0x229e <__stack+0x19f>
    2296:	82 2f       	mov	r24, r18
    2298:	86 78       	andi	r24, 0x86	; 134
    229a:	09 f0       	breq	.+2      	; 0x229e <__stack+0x19f>
    229c:	73 94       	inc	r7
    229e:	23 fd       	sbrc	r18, 3
    22a0:	12 c0       	rjmp	.+36     	; 0x22c6 <__stack+0x1c7>
    22a2:	20 ff       	sbrs	r18, 0
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <__stack+0x1b3>
    22a6:	5a 2c       	mov	r5, r10
    22a8:	73 14       	cp	r7, r3
    22aa:	18 f4       	brcc	.+6      	; 0x22b2 <__stack+0x1b3>
    22ac:	53 0c       	add	r5, r3
    22ae:	57 18       	sub	r5, r7
    22b0:	73 2c       	mov	r7, r3
    22b2:	73 14       	cp	r7, r3
    22b4:	60 f4       	brcc	.+24     	; 0x22ce <__stack+0x1cf>
    22b6:	b7 01       	movw	r22, r14
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	2c 87       	std	Y+12, r18	; 0x0c
    22be:	f0 dd       	rcall	.-1056   	; 0x1ea0 <fputc>
    22c0:	73 94       	inc	r7
    22c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c4:	f6 cf       	rjmp	.-20     	; 0x22b2 <__stack+0x1b3>
    22c6:	73 14       	cp	r7, r3
    22c8:	10 f4       	brcc	.+4      	; 0x22ce <__stack+0x1cf>
    22ca:	37 18       	sub	r3, r7
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <__stack+0x1d1>
    22ce:	31 2c       	mov	r3, r1
    22d0:	24 ff       	sbrs	r18, 4
    22d2:	11 c0       	rjmp	.+34     	; 0x22f6 <__stack+0x1f7>
    22d4:	b7 01       	movw	r22, r14
    22d6:	80 e3       	ldi	r24, 0x30	; 48
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	2c 87       	std	Y+12, r18	; 0x0c
    22dc:	e1 dd       	rcall	.-1086   	; 0x1ea0 <fputc>
    22de:	2c 85       	ldd	r18, Y+12	; 0x0c
    22e0:	22 ff       	sbrs	r18, 2
    22e2:	16 c0       	rjmp	.+44     	; 0x2310 <__stack+0x211>
    22e4:	21 ff       	sbrs	r18, 1
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <__stack+0x1ef>
    22e8:	88 e5       	ldi	r24, 0x58	; 88
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <__stack+0x1f3>
    22ee:	88 e7       	ldi	r24, 0x78	; 120
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	b7 01       	movw	r22, r14
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <__stack+0x20f>
    22f6:	82 2f       	mov	r24, r18
    22f8:	86 78       	andi	r24, 0x86	; 134
    22fa:	51 f0       	breq	.+20     	; 0x2310 <__stack+0x211>
    22fc:	21 fd       	sbrc	r18, 1
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <__stack+0x205>
    2300:	80 e2       	ldi	r24, 0x20	; 32
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <__stack+0x207>
    2304:	8b e2       	ldi	r24, 0x2B	; 43
    2306:	27 fd       	sbrc	r18, 7
    2308:	8d e2       	ldi	r24, 0x2D	; 45
    230a:	b7 01       	movw	r22, r14
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	c8 dd       	rcall	.-1136   	; 0x1ea0 <fputc>
    2310:	a5 14       	cp	r10, r5
    2312:	30 f4       	brcc	.+12     	; 0x2320 <__stack+0x221>
    2314:	b7 01       	movw	r22, r14
    2316:	80 e3       	ldi	r24, 0x30	; 48
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	c2 dd       	rcall	.-1148   	; 0x1ea0 <fputc>
    231c:	5a 94       	dec	r5
    231e:	f8 cf       	rjmp	.-16     	; 0x2310 <__stack+0x211>
    2320:	aa 94       	dec	r10
    2322:	f4 01       	movw	r30, r8
    2324:	ea 0d       	add	r30, r10
    2326:	f1 1d       	adc	r31, r1
    2328:	80 81       	ld	r24, Z
    232a:	b7 01       	movw	r22, r14
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b8 dd       	rcall	.-1168   	; 0x1ea0 <fputc>
    2330:	a1 10       	cpse	r10, r1
    2332:	f6 cf       	rjmp	.-20     	; 0x2320 <__stack+0x221>
    2334:	33 20       	and	r3, r3
    2336:	09 f4       	brne	.+2      	; 0x233a <__stack+0x23b>
    2338:	5d ce       	rjmp	.-838    	; 0x1ff4 <vfprintf+0x4c>
    233a:	b7 01       	movw	r22, r14
    233c:	80 e2       	ldi	r24, 0x20	; 32
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	af dd       	rcall	.-1186   	; 0x1ea0 <fputc>
    2342:	3a 94       	dec	r3
    2344:	f7 cf       	rjmp	.-18     	; 0x2334 <__stack+0x235>
    2346:	f7 01       	movw	r30, r14
    2348:	86 81       	ldd	r24, Z+6	; 0x06
    234a:	97 81       	ldd	r25, Z+7	; 0x07
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <__stack+0x253>
    234e:	8f ef       	ldi	r24, 0xFF	; 255
    2350:	9f ef       	ldi	r25, 0xFF	; 255
    2352:	2c 96       	adiw	r28, 0x0c	; 12
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	df 90       	pop	r13
    236c:	cf 90       	pop	r12
    236e:	bf 90       	pop	r11
    2370:	af 90       	pop	r10
    2372:	9f 90       	pop	r9
    2374:	8f 90       	pop	r8
    2376:	7f 90       	pop	r7
    2378:	6f 90       	pop	r6
    237a:	5f 90       	pop	r5
    237c:	4f 90       	pop	r4
    237e:	3f 90       	pop	r3
    2380:	2f 90       	pop	r2
    2382:	08 95       	ret

00002384 <__ctype_isfalse>:
    2384:	99 27       	eor	r25, r25
    2386:	88 27       	eor	r24, r24

00002388 <__ctype_istrue>:
    2388:	08 95       	ret

0000238a <strnlen_P>:
    238a:	fc 01       	movw	r30, r24
    238c:	05 90       	lpm	r0, Z+
    238e:	61 50       	subi	r22, 0x01	; 1
    2390:	70 40       	sbci	r23, 0x00	; 0
    2392:	01 10       	cpse	r0, r1
    2394:	d8 f7       	brcc	.-10     	; 0x238c <strnlen_P+0x2>
    2396:	80 95       	com	r24
    2398:	90 95       	com	r25
    239a:	8e 0f       	add	r24, r30
    239c:	9f 1f       	adc	r25, r31
    239e:	08 95       	ret

000023a0 <strnlen>:
    23a0:	fc 01       	movw	r30, r24
    23a2:	61 50       	subi	r22, 0x01	; 1
    23a4:	70 40       	sbci	r23, 0x00	; 0
    23a6:	01 90       	ld	r0, Z+
    23a8:	01 10       	cpse	r0, r1
    23aa:	d8 f7       	brcc	.-10     	; 0x23a2 <strnlen+0x2>
    23ac:	80 95       	com	r24
    23ae:	90 95       	com	r25
    23b0:	8e 0f       	add	r24, r30
    23b2:	9f 1f       	adc	r25, r31
    23b4:	08 95       	ret

000023b6 <__ultoa_invert>:
    23b6:	fa 01       	movw	r30, r20
    23b8:	aa 27       	eor	r26, r26
    23ba:	28 30       	cpi	r18, 0x08	; 8
    23bc:	51 f1       	breq	.+84     	; 0x2412 <__ultoa_invert+0x5c>
    23be:	20 31       	cpi	r18, 0x10	; 16
    23c0:	81 f1       	breq	.+96     	; 0x2422 <__ultoa_invert+0x6c>
    23c2:	e8 94       	clt
    23c4:	6f 93       	push	r22
    23c6:	6e 7f       	andi	r22, 0xFE	; 254
    23c8:	6e 5f       	subi	r22, 0xFE	; 254
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	8f 4f       	sbci	r24, 0xFF	; 255
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	af 4f       	sbci	r26, 0xFF	; 255
    23d2:	b1 e0       	ldi	r27, 0x01	; 1
    23d4:	3e d0       	rcall	.+124    	; 0x2452 <__ultoa_invert+0x9c>
    23d6:	b4 e0       	ldi	r27, 0x04	; 4
    23d8:	3c d0       	rcall	.+120    	; 0x2452 <__ultoa_invert+0x9c>
    23da:	67 0f       	add	r22, r23
    23dc:	78 1f       	adc	r23, r24
    23de:	89 1f       	adc	r24, r25
    23e0:	9a 1f       	adc	r25, r26
    23e2:	a1 1d       	adc	r26, r1
    23e4:	68 0f       	add	r22, r24
    23e6:	79 1f       	adc	r23, r25
    23e8:	8a 1f       	adc	r24, r26
    23ea:	91 1d       	adc	r25, r1
    23ec:	a1 1d       	adc	r26, r1
    23ee:	6a 0f       	add	r22, r26
    23f0:	71 1d       	adc	r23, r1
    23f2:	81 1d       	adc	r24, r1
    23f4:	91 1d       	adc	r25, r1
    23f6:	a1 1d       	adc	r26, r1
    23f8:	20 d0       	rcall	.+64     	; 0x243a <__ultoa_invert+0x84>
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__ultoa_invert+0x48>
    23fc:	68 94       	set
    23fe:	3f 91       	pop	r19
    2400:	2a e0       	ldi	r18, 0x0A	; 10
    2402:	26 9f       	mul	r18, r22
    2404:	11 24       	eor	r1, r1
    2406:	30 19       	sub	r19, r0
    2408:	30 5d       	subi	r19, 0xD0	; 208
    240a:	31 93       	st	Z+, r19
    240c:	de f6       	brtc	.-74     	; 0x23c4 <__ultoa_invert+0xe>
    240e:	cf 01       	movw	r24, r30
    2410:	08 95       	ret
    2412:	46 2f       	mov	r20, r22
    2414:	47 70       	andi	r20, 0x07	; 7
    2416:	40 5d       	subi	r20, 0xD0	; 208
    2418:	41 93       	st	Z+, r20
    241a:	b3 e0       	ldi	r27, 0x03	; 3
    241c:	0f d0       	rcall	.+30     	; 0x243c <__ultoa_invert+0x86>
    241e:	c9 f7       	brne	.-14     	; 0x2412 <__ultoa_invert+0x5c>
    2420:	f6 cf       	rjmp	.-20     	; 0x240e <__ultoa_invert+0x58>
    2422:	46 2f       	mov	r20, r22
    2424:	4f 70       	andi	r20, 0x0F	; 15
    2426:	40 5d       	subi	r20, 0xD0	; 208
    2428:	4a 33       	cpi	r20, 0x3A	; 58
    242a:	18 f0       	brcs	.+6      	; 0x2432 <__ultoa_invert+0x7c>
    242c:	49 5d       	subi	r20, 0xD9	; 217
    242e:	31 fd       	sbrc	r19, 1
    2430:	40 52       	subi	r20, 0x20	; 32
    2432:	41 93       	st	Z+, r20
    2434:	02 d0       	rcall	.+4      	; 0x243a <__ultoa_invert+0x84>
    2436:	a9 f7       	brne	.-22     	; 0x2422 <__ultoa_invert+0x6c>
    2438:	ea cf       	rjmp	.-44     	; 0x240e <__ultoa_invert+0x58>
    243a:	b4 e0       	ldi	r27, 0x04	; 4
    243c:	a6 95       	lsr	r26
    243e:	97 95       	ror	r25
    2440:	87 95       	ror	r24
    2442:	77 95       	ror	r23
    2444:	67 95       	ror	r22
    2446:	ba 95       	dec	r27
    2448:	c9 f7       	brne	.-14     	; 0x243c <__ultoa_invert+0x86>
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	61 05       	cpc	r22, r1
    244e:	71 05       	cpc	r23, r1
    2450:	08 95       	ret
    2452:	9b 01       	movw	r18, r22
    2454:	ac 01       	movw	r20, r24
    2456:	0a 2e       	mov	r0, r26
    2458:	06 94       	lsr	r0
    245a:	57 95       	ror	r21
    245c:	47 95       	ror	r20
    245e:	37 95       	ror	r19
    2460:	27 95       	ror	r18
    2462:	ba 95       	dec	r27
    2464:	c9 f7       	brne	.-14     	; 0x2458 <__ultoa_invert+0xa2>
    2466:	62 0f       	add	r22, r18
    2468:	73 1f       	adc	r23, r19
    246a:	84 1f       	adc	r24, r20
    246c:	95 1f       	adc	r25, r21
    246e:	a0 1d       	adc	r26, r0
    2470:	08 95       	ret

00002472 <_exit>:
    2472:	f8 94       	cli

00002474 <__stop_program>:
    2474:	ff cf       	rjmp	.-2      	; 0x2474 <__stop_program>


TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00004a62  00004b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a62  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026f  008001da  008001da  00004bf0  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00004bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002730  00000000  00000000  00004bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001134  00000000  00000000  00007324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008458  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008e8  00000000  00000000  00008469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010adc  00000000  00000000  00008d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003c08  00000000  00000000  0001982d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000576f  00000000  00000000  0001d435  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001960  00000000  00000000  00022ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004bef  00000000  00000000  00024504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bd3c  00000000  00000000  000290f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b10  00000000  00000000  00034e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__vector_10>
      2c:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__vector_11>
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c1       	rjmp	.+580    	; 0x28a <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000c8 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	20 00 07 05 81 03 10 00 05                           ........

0000011f <DeviceDescriptor>:
     11f:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12f:	dc 01                                               ..

00000131 <GenericReport>:
     131:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     141:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

00000151 <Temperature_Lookup>:
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     151:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     161:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     171:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
				ReportSize     -= 1;
				ReportData     += 1;
     181:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     191:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1a1:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b1:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c1:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1d1:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1e1:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     1f1:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     201:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     211:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     221:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     231:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     241:	00                                                  .

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d0 e2       	ldi	r29, 0x20	; 32
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	e2 e6       	ldi	r30, 0x62	; 98
     256:	fa e4       	ldi	r31, 0x4A	; 74
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0b bf       	out	0x3b, r16	; 59
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x14>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	07 90       	elpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	aa 3d       	cpi	r26, 0xDA	; 218
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0x10>

00000268 <__do_clear_bss>:
     268:	14 e0       	ldi	r17, 0x04	; 4
     26a:	aa ed       	ldi	r26, 0xDA	; 218
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
				break;
     272:	a9 34       	cpi	r26, 0x49	; 73

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	5a d1       	rcall	.+692    	; 0x52e <main>
     27a:	0c 94 2f 25 	jmp	0x4a5e	; 0x4a5e <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <LEDs_SetAllLEDs>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
				break;
     284:	98 2b       	or	r25, r24

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	9b b9       	out	0x0b, r25	; 11
     288:	08 95       	ret

0000028a <__vector_17>:
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
				break;
     290:	0f 92       	push	r0

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	11 24       	eor	r1, r1
     294:	0b b6       	in	r0, 0x3b	; 59
     296:	0f 92       	push	r0
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	2f 93       	push	r18
				break;
     2a0:	3f 93       	push	r19

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
				break;
     2ac:	9f 93       	push	r25

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
				break;
     2bc:	de b7       	in	r29, 0x3e	; 62
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	cc 56       	subi	r28, 0x6C	; 108
     2c0:	d1 09       	sbc	r29, r1
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	78 d6       	rcall	.+3312   	; 0xfb8 <RTC_Tick500ms>
     2c8:	80 91 28 04 	lds	r24, 0x0428
				break;
     2cc:	90 91 29 04 	lds	r25, 0x0429
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	90 93 29 04 	sts	0x0429, r25
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 93 28 04 	sts	0x0428, r24
     2da:	20 91 2a 04 	lds	r18, 0x042A

				if (ParserData->UsingReportIDs)
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	82 17       	cp	r24, r18
     2e2:	93 07       	cpc	r25, r19
     2e4:	08 f4       	brcc	.+2      	; 0x2e8 <__vector_17+0x5e>
     2e6:	5a c0       	rjmp	.+180    	; 0x39c <__vector_17+0x112>
     2e8:	10 92 29 04 	sts	0x0429, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	10 92 28 04 	sts	0x0428, r1
     2f0:	fb b0       	in	r15, 0x0b	; 11
     2f2:	8f 2d       	mov	r24, r15
     2f4:	80 7f       	andi	r24, 0xF0	; 240
     2f6:	f8 2e       	mov	r15, r24
     2f8:	80 e2       	ldi	r24, 0x20	; 32
     2fa:	c2 df       	rcall	.-124    	; 0x280 <LEDs_SetAllLEDs>
     2fc:	8e b3       	in	r24, 0x1e	; 30
     2fe:	81 11       	cpse	r24, r1
     300:	4b c0       	rjmp	.+150    	; 0x398 <__vector_17+0x10e>
     302:	ce 01       	movw	r24, r28
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	8b 59       	subi	r24, 0x9B	; 155
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	c1 d6       	rcall	.+3458   	; 0x108c <RTC_GetTimeDate>
     30a:	0e 94 96 21 	call	0x432c	; 0x432c <Temperature_GetTemperature>
     30e:	28 2f       	mov	r18, r24
     310:	33 27       	eor	r19, r19
     312:	27 fd       	sbrc	r18, 7
     314:	30 95       	com	r19
     316:	3f 93       	push	r19
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	8f 93       	push	r24
     31a:	a8 96       	adiw	r28, 0x28	; 40
     31c:	8f ad       	ldd	r24, Y+63	; 0x3f
     31e:	a8 97       	sbiw	r28, 0x28	; 40
     320:	1f 92       	push	r1
     322:	8f 93       	push	r24
     324:	a7 96       	adiw	r28, 0x27	; 39
     326:	8f ad       	ldd	r24, Y+63	; 0x3f
     328:	a7 97       	sbiw	r28, 0x27	; 39
     32a:	1f 92       	push	r1
     32c:	8f 93       	push	r24
     32e:	a6 96       	adiw	r28, 0x26	; 38
     330:	8f ad       	ldd	r24, Y+63	; 0x3f
     332:	a6 97       	sbiw	r28, 0x26	; 38
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	ab 96       	adiw	r28, 0x2b	; 43
     33a:	8f ad       	ldd	r24, Y+63	; 0x3f
     33c:	ab 97       	sbiw	r28, 0x2b	; 43
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	1f 92       	push	r1
     340:	8f 93       	push	r24
     342:	aa 96       	adiw	r28, 0x2a	; 42
     344:	8f ad       	ldd	r24, Y+63	; 0x3f
     346:	aa 97       	sbiw	r28, 0x2a	; 42
     348:	1f 92       	push	r1
     34a:	8f 93       	push	r24
     34c:	a9 96       	adiw	r28, 0x29	; 41
     34e:	8f ad       	ldd	r24, Y+63	; 0x3f
     350:	a9 97       	sbiw	r28, 0x29	; 41
     352:	1f 92       	push	r1
     354:	8f 93       	push	r24
     356:	2b e8       	ldi	r18, 0x8B	; 139
     358:	31 e0       	ldi	r19, 0x01	; 1
     35a:	3f 93       	push	r19
     35c:	2f 93       	push	r18
     35e:	8e 01       	movw	r16, r28
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	1f 93       	push	r17
     366:	0f 93       	push	r16
     368:	0e 94 53 22 	call	0x44a6	; 0x44a6 <sprintf>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	ac 01       	movw	r20, r24
     36e:	ad 96       	adiw	r28, 0x2d	; 45
     370:	9f af       	std	Y+63, r25	; 0x3f
     372:	8e af       	std	Y+62, r24	; 0x3e
     374:	ad 97       	sbiw	r28, 0x2d	; 45
     376:	9e 01       	movw	r18, r28

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	25 59       	subi	r18, 0x95	; 149
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	b8 01       	movw	r22, r16
     37e:	8a ed       	ldi	r24, 0xDA	; 218
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 96 14 	call	0x292c	; 0x292c <f_write>
     386:	8a ed       	ldi	r24, 0xDA	; 218
				break;
     388:	91 e0       	ldi	r25, 0x01	; 1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	0e 94 24 16 	call	0x2c48	; 0x2c48 <f_sync>
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	cd bf       	out	0x3d, r28	; 61
     398:	8f 2d       	mov	r24, r15
     39a:	72 df       	rcall	.-284    	; 0x280 <LEDs_SetAllLEDs>
     39c:	c4 59       	subi	r28, 0x94	; 148
     39e:	df 4f       	sbci	r29, 0xFF	; 255
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	ff 91       	pop	r31
				break;
     3b0:	ef 91       	pop	r30
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	0f 90       	pop	r0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0b be       	out	0x3b, r0	; 59
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63

					while (CurrCollectionPath->Parent != NULL)
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <OpenLogFile>:
     3da:	0f 93       	push	r16
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	62 97       	sbiw	r28, 0x12	; 18
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	ce 01       	movw	r24, r28
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	0d 96       	adiw	r24, 0x0d	; 13
     3f6:	4a d6       	rcall	.+3220   	; 0x108c <RTC_GetTimeDate>
     3f8:	8a 89       	ldd	r24, Y+18	; 0x12
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	89 89       	ldd	r24, Y+17	; 0x11
     400:	1f 92       	push	r1
     402:	8f 93       	push	r24
     404:	88 89       	ldd	r24, Y+16	; 0x10
     406:	1f 92       	push	r1
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	8f 93       	push	r24
     40a:	8a eb       	ldi	r24, 0xBA	; 186
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	8e 01       	movw	r16, r28
     414:	0f 5f       	subi	r16, 0xFF	; 255
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	1f 93       	push	r17
     41a:	0f 93       	push	r16
     41c:	0e 94 53 22 	call	0x44a6	; 0x44a6 <sprintf>

				if (UsageListSize)
     420:	6a ef       	ldi	r22, 0xFA	; 250
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <f_mount>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	42 e1       	ldi	r20, 0x12	; 18
     42c:	b8 01       	movw	r22, r16
     42e:	8a ed       	ldi	r24, 0xDA	; 218
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <f_open>
     436:	40 91 e4 01 	lds	r20, 0x01E4
     43a:	50 91 e5 01 	lds	r21, 0x01E5
     43e:	60 91 e6 01 	lds	r22, 0x01E6

					for (uint8_t i = 1; i < UsageListSize; i++)
     442:	70 91 e7 01 	lds	r23, 0x01E7
     446:	8a ed       	ldi	r24, 0xDA	; 218
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <f_lseek>
					  UsageList[i - 1] = UsageList[i];
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	62 96       	adiw	r28, 0x12	; 18
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	cd bf       	out	0x3d, r28	; 61
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	08 95       	ret

0000046e <CloseLogFile>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	8a ed       	ldi	r24, 0xDA	; 218
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 24 16 	call	0x2c48	; 0x2c48 <f_sync>
     476:	8a ed       	ldi	r24, 0xDA	; 218
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <f_close>

0000047e <SetupHardware>:
     47e:	cf 93       	push	r28
     480:	84 b7       	in	r24, 0x34	; 52
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	84 bf       	out	0x34, r24	; 52
     486:	88 e1       	ldi	r24, 0x18	; 24
     488:	0f b6       	in	r0, 0x3f	; 63
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	f8 94       	cli
     48c:	80 93 60 00 	sts	0x0060, r24
     490:	10 92 60 00 	sts	0x0060, r1
     494:	0f be       	out	0x3f, r0	; 63
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	80 e8       	ldi	r24, 0x80	; 128
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	80 93 61 00 	sts	0x0061, r24
     4a2:	90 93 61 00 	sts	0x0061, r25
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	8a b1       	in	r24, 0x0a	; 10
     4aa:	80 6f       	ori	r24, 0xF0	; 240
				break;
     4ac:	8a b9       	out	0x0a, r24	; 10
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	8b b1       	in	r24, 0x0b	; 11
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	8b b9       	out	0x0b, r24	; 11
     4b4:	87 ea       	ldi	r24, 0xA7	; 167
     4b6:	80 93 7a 00 	sts	0x007A, r24
     4ba:	80 98       	cbi	0x10, 0	; 16
     4bc:	80 91 7e 00 	lds	r24, 0x007E
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	80 93 7e 00 	sts	0x007E, r24
     4c6:	8d b1       	in	r24, 0x0d	; 13
     4c8:	83 60       	ori	r24, 0x03	; 3
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	8d b9       	out	0x0d, r24	; 13
     4cc:	8e b1       	in	r24, 0x0e	; 14
     4ce:	83 60       	ori	r24, 0x03	; 3
     4d0:	8e b9       	out	0x0e, r24	; 14
     4d2:	20 9a       	sbi	0x04, 0	; 4
     4d4:	28 9a       	sbi	0x05, 0	; 5
     4d6:	84 b1       	in	r24, 0x04	; 4
     4d8:	86 60       	ori	r24, 0x06	; 6
     4da:	84 b9       	out	0x04, r24	; 4
     4dc:	23 98       	cbi	0x04, 3	; 4
     4de:	2b 9a       	sbi	0x05, 3	; 5
     4e0:	8d b5       	in	r24, 0x2d	; 45
     4e2:	81 60       	ori	r24, 0x01	; 1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	8d bd       	out	0x2d, r24	; 45
     4e6:	20 98       	cbi	0x04, 0	; 4
     4e8:	8c e5       	ldi	r24, 0x5C	; 92
     4ea:	8c bd       	out	0x2c, r24	; 44
     4ec:	0e 94 8a 1b 	call	0x3714	; 0x3714 <USB_Init>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	80 91 bc 00 	lds	r24, 0x00BC
     4f4:	84 60       	ori	r24, 0x04	; 4
     4f6:	80 93 bc 00 	sts	0x00BC, r24
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 b9 00 	sts	0x00B9, r24
     500:	cc e0       	ldi	r28, 0x0C	; 12
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	c0 93 b8 00 	sts	0x00B8, r28
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	4a d5       	rcall	.+2708   	; 0xf9c <RTC_Init>
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	9d e3       	ldi	r25, 0x3D	; 61
     50c:	90 93 89 00 	sts	0x0089, r25
     510:	80 93 88 00 	sts	0x0088, r24
     514:	c0 93 81 00 	sts	0x0081, r28
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	80 93 6f 00 	sts	0x006F, r24

					if (UsageListSize)
     51e:	15 d5       	rcall	.+2602   	; 0xf4a <DataflashManager_CheckDataflashOperation>
     520:	81 11       	cpse	r24, r1
     522:	03 c0       	rjmp	.+6      	; 0x52a <SetupHardware+0xac>
     524:	80 e9       	ldi	r24, 0x90	; 144
     526:	ac de       	rcall	.-680    	; 0x280 <LEDs_SetAllLEDs>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	ff cf       	rjmp	.-2      	; 0x528 <SetupHardware+0xaa>
     52a:	cf 91       	pop	r28
     52c:	bd c4       	rjmp	.+2426   	; 0xea8 <DataflashManager_ResetDataflashProtections>

0000052e <main>:
     52e:	a7 df       	rcall	.-178    	; 0x47e <SetupHardware>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 6f 24 	call	0x48de	; 0x48de <__eerd_byte_usb1287>
     538:	80 93 2a 04 	sts	0x042A, r24
     53c:	8f 3f       	cpi	r24, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	19 f4       	brne	.+6      	; 0x546 <main+0x18>
     540:	8a e0       	ldi	r24, 0x0A	; 10
     542:	80 93 2a 04 	sts	0x042A, r24
     546:	49 df       	rcall	.-366    	; 0x3da <OpenLogFile>
     548:	80 e1       	ldi	r24, 0x10	; 16
						  UsageList[i - 1] = UsageList[i];
     54a:	9a de       	rcall	.-716    	; 0x280 <LEDs_SetAllLEDs>
     54c:	78 94       	sei
     54e:	80 e1       	ldi	r24, 0x10	; 16
     550:	91 e0       	ldi	r25, 0x01	; 1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	0e 94 7e 20 	call	0x40fc	; 0x40fc <MS_Device_USBTask>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <HID_Device_USBTask>
     55e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <USB_USBTask>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     562:	f5 cf       	rjmp	.-22     	; 0x54e <main+0x20>

00000564 <EVENT_USB_Device_Connect>:
     564:	80 ea       	ldi	r24, 0xA0	; 160
     566:	8c de       	rcall	.-744    	; 0x280 <LEDs_SetAllLEDs>
     568:	82 cf       	rjmp	.-252    	; 0x46e <CloseLogFile>

0000056a <EVENT_USB_Device_Disconnect>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	80 e1       	ldi	r24, 0x10	; 16
     56c:	89 de       	rcall	.-750    	; 0x280 <LEDs_SetAllLEDs>
     56e:	35 cf       	rjmp	.-406    	; 0x3da <OpenLogFile>

00000570 <EVENT_USB_Device_ConfigurationChanged>:
     570:	cf 93       	push	r28
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <HID_Device_ConfigureEndpoints>
     57a:	c8 2f       	mov	r28, r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	91 e0       	ldi	r25, 0x01	; 1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	0e 94 61 20 	call	0x40c2	; 0x40c2 <MS_Device_ConfigureEndpoints>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	88 23       	and	r24, r24
     586:	21 f0       	breq	.+8      	; 0x590 <EVENT_USB_Device_ConfigurationChanged+0x20>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	cc 23       	and	r28, r28
     58a:	11 f0       	breq	.+4      	; 0x590 <EVENT_USB_Device_ConfigurationChanged+0x20>
     58c:	80 e6       	ldi	r24, 0x60	; 96
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	01 c0       	rjmp	.+2      	; 0x592 <EVENT_USB_Device_ConfigurationChanged+0x22>
     590:	80 e9       	ldi	r24, 0x90	; 144

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	cf 91       	pop	r28
     594:	75 ce       	rjmp	.-790    	; 0x280 <LEDs_SetAllLEDs>

00000596 <EVENT_USB_Device_ControlRequest>:
     596:	80 e1       	ldi	r24, 0x10	; 16
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 22 20 	call	0x4044	; 0x4044 <MS_Device_ProcessControlRequest>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0c 94 1e 1e 	jmp	0x3c3c	; 0x3c3c <HID_Device_ProcessControlRequest>

000005a6 <CALLBACK_MS_Device_SCSICommandReceived>:
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ec 01       	movw	r28, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	68 de       	rcall	.-816    	; 0x280 <LEDs_SetAllLEDs>
     5b0:	ce 01       	movw	r24, r28
     5b2:	ba d5       	rcall	.+2932   	; 0x1128 <SCSI_DecodeSCSICommand>
     5b4:	c8 2f       	mov	r28, r24
     5b6:	80 e6       	ldi	r24, 0x60	; 96
     5b8:	63 de       	rcall	.-826    	; 0x280 <LEDs_SetAllLEDs>
     5ba:	8c 2f       	mov	r24, r28

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <CALLBACK_HID_Device_CreateHIDReport>:
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	e9 01       	movw	r28, r18
     5cc:	c9 01       	movw	r24, r18
     5ce:	5e d5       	rcall	.+2748   	; 0x108c <RTC_GetTimeDate>
     5d0:	80 91 2a 04 	lds	r24, 0x042A
     5d4:	8e 83       	std	Y+6, r24	; 0x06
     5d6:	87 e0       	ldi	r24, 0x07	; 7
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	f8 01       	movw	r30, r16
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <CALLBACK_HID_Device_ProcessHIDReport>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	e9 01       	movw	r28, r18
     5f2:	c9 01       	movw	r24, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	3f d5       	rcall	.+2686   	; 0x1074 <RTC_SetTimeDate>
     5f6:	6e 81       	ldd	r22, Y+6	; 0x06
     5f8:	80 91 2a 04 	lds	r24, 0x042A
     5fc:	86 17       	cp	r24, r22
					  return HID_PARSE_InsufficientReportItems;
     5fe:	41 f0       	breq	.+16     	; 0x610 <CALLBACK_HID_Device_ProcessHIDReport+0x24>
     600:	60 93 2a 04 	sts	0x042A, r22

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	0c 94 77 24 	jmp	0x48ee	; 0x48ee <__eeupd_byte_usb1287>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <CALLBACK_USB_GetDescriptor>:
     616:	29 2f       	mov	r18, r25
     618:	33 27       	eor	r19, r19
     61a:	23 30       	cpi	r18, 0x03	; 3
     61c:	31 05       	cpc	r19, r1
     61e:	b9 f0       	breq	.+46     	; 0x64e <CALLBACK_USB_GetDescriptor+0x38>
     620:	5c f4       	brge	.+22     	; 0x638 <CALLBACK_USB_GetDescriptor+0x22>
     622:	21 30       	cpi	r18, 0x01	; 1
     624:	31 05       	cpc	r19, r1
     626:	69 f1       	breq	.+90     	; 0x682 <CALLBACK_USB_GetDescriptor+0x6c>
     628:	22 30       	cpi	r18, 0x02	; 2
     62a:	31 05       	cpc	r19, r1
     62c:	79 f5       	brne	.+94     	; 0x68c <CALLBACK_USB_GetDescriptor+0x76>
     62e:	89 e3       	ldi	r24, 0x39	; 57
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	26 ee       	ldi	r18, 0xE6	; 230
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	2e c0       	rjmp	.+92     	; 0x694 <CALLBACK_USB_GetDescriptor+0x7e>
     638:	21 32       	cpi	r18, 0x21	; 33
     63a:	31 05       	cpc	r19, r1
     63c:	e9 f0       	breq	.+58     	; 0x678 <CALLBACK_USB_GetDescriptor+0x62>
     63e:	22 32       	cpi	r18, 0x22	; 34
     640:	31 05       	cpc	r19, r1
     642:	21 f5       	brne	.+72     	; 0x68c <CALLBACK_USB_GetDescriptor+0x76>
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	21 e3       	ldi	r18, 0x31	; 49
     64a:	31 e0       	ldi	r19, 0x01	; 1
     64c:	23 c0       	rjmp	.+70     	; 0x694 <CALLBACK_USB_GetDescriptor+0x7e>
     64e:	99 27       	eor	r25, r25
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	91 05       	cpc	r25, r1
     654:	41 f0       	breq	.+16     	; 0x666 <CALLBACK_USB_GetDescriptor+0x50>
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	91 05       	cpc	r25, r1
     65a:	41 f0       	breq	.+16     	; 0x66c <CALLBACK_USB_GetDescriptor+0x56>
     65c:	89 2b       	or	r24, r25
     65e:	b1 f4       	brne	.+44     	; 0x68c <CALLBACK_USB_GetDescriptor+0x76>
     660:	e2 ee       	ldi	r30, 0xE2	; 226
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	05 c0       	rjmp	.+10     	; 0x670 <CALLBACK_USB_GetDescriptor+0x5a>
     666:	e8 ec       	ldi	r30, 0xC8	; 200
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	02 c0       	rjmp	.+4      	; 0x670 <CALLBACK_USB_GetDescriptor+0x5a>
     66c:	e8 e9       	ldi	r30, 0x98	; 152
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	84 91       	lpm	r24, Z
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9f 01       	movw	r18, r30
     676:	0e c0       	rjmp	.+28     	; 0x694 <CALLBACK_USB_GetDescriptor+0x7e>
     678:	89 e0       	ldi	r24, 0x09	; 9
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2f e0       	ldi	r18, 0x0F	; 15
     67e:	31 e0       	ldi	r19, 0x01	; 1
     680:	09 c0       	rjmp	.+18     	; 0x694 <CALLBACK_USB_GetDescriptor+0x7e>
     682:	82 e1       	ldi	r24, 0x12	; 18
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	2f e1       	ldi	r18, 0x1F	; 31
					  ParserData->TotalReportItems++;
     688:	31 e0       	ldi	r19, 0x01	; 1
     68a:	04 c0       	rjmp	.+8      	; 0x694 <CALLBACK_USB_GetDescriptor+0x7e>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	20 e0       	ldi	r18, 0x00	; 0

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	fa 01       	movw	r30, r20
     696:	31 83       	std	Z+1, r19	; 0x01
     698:	20 83       	st	Z, r18
     69a:	08 95       	ret

0000069c <Dataflash_ToggleSelectedChipCS>:
     69c:	8e b1       	in	r24, 0x0e	; 14
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	9e b1       	in	r25, 0x0e	; 14
     6a0:	93 60       	ori	r25, 0x03	; 3
     6a2:	9e b9       	out	0x0e, r25	; 14
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	9e b1       	in	r25, 0x0e	; 14
     6a6:	8c 6f       	ori	r24, 0xFC	; 252
     6a8:	93 60       	ori	r25, 0x03	; 3
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	89 23       	and	r24, r25
     6ac:	8e b9       	out	0x0e, r24	; 14
     6ae:	08 95       	ret

000006b0 <Dataflash_WaitWhileBusy>:
     6b0:	f5 df       	rcall	.-22     	; 0x69c <Dataflash_ToggleSelectedChipCS>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	87 ed       	ldi	r24, 0xD7	; 215
     6b4:	8e bd       	out	0x2e, r24	; 46
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <Dataflash_WaitWhileBusy+0x6>
     6bc:	1e bc       	out	0x2e, r1	; 46

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	0d b4       	in	r0, 0x2d	; 45
     6c0:	07 fe       	sbrs	r0, 7
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <Dataflash_WaitWhileBusy+0xe>
     6c4:	0e b4       	in	r0, 0x2e	; 46
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	f9 cf       	rjmp	.-14     	; 0x6bc <Dataflash_WaitWhileBusy+0xc>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	e8 cf       	rjmp	.-48     	; 0x69c <Dataflash_ToggleSelectedChipCS>

000006cc <Dataflash_SendAddressBytes>:
     6cc:	9c 01       	movw	r18, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	56 e0       	ldi	r21, 0x06	; 6
     6d4:	96 95       	lsr	r25
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	87 95       	ror	r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	5a 95       	dec	r21
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <Dataflash_SendAddressBytes+0x8>
     6dc:	8e bd       	out	0x2e, r24	; 46
     6de:	0d b4       	in	r0, 0x2d	; 45
     6e0:	07 fe       	sbrs	r0, 7
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <Dataflash_SendAddressBytes+0x12>
     6e4:	22 0f       	add	r18, r18
     6e6:	22 0f       	add	r18, r18
     6e8:	22 0f       	add	r18, r18
     6ea:	27 2b       	or	r18, r23
     6ec:	2e bd       	out	0x2e, r18	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <Dataflash_SendAddressBytes+0x22>
     6f4:	6e bd       	out	0x2e, r22	; 46
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <Dataflash_SendAddressBytes+0x2a>
     6fc:	08 95       	ret

000006fe <Dataflash_SelectChipFromPage>:
     6fe:	2e b1       	in	r18, 0x0e	; 14
     700:	23 60       	ori	r18, 0x03	; 3
     702:	2e b9       	out	0x0e, r18	; 14
     704:	81 15       	cp	r24, r1
     706:	20 e4       	ldi	r18, 0x40	; 64
     708:	92 07       	cpc	r25, r18
     70a:	50 f4       	brcc	.+20     	; 0x720 <Dataflash_SelectChipFromPage+0x22>

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     70c:	80 ff       	sbrs	r24, 0
     70e:	04 c0       	rjmp	.+8      	; 0x718 <Dataflash_SelectChipFromPage+0x1a>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     710:	8e b1       	in	r24, 0x0e	; 14
     712:	83 60       	ori	r24, 0x03	; 3
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	03 c0       	rjmp	.+6      	; 0x71e <Dataflash_SelectChipFromPage+0x20>
     718:	8e b1       	in	r24, 0x0e	; 14
     71a:	83 60       	ori	r24, 0x03	; 3
     71c:	8e 7f       	andi	r24, 0xFE	; 254
     71e:	8e b9       	out	0x0e, r24	; 14
     720:	08 95       	ret

00000722 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     722:	4f 92       	push	r4
     724:	5f 92       	push	r5
     726:	6f 92       	push	r6
     728:	7f 92       	push	r7
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	6c 01       	movw	r12, r24
     744:	89 01       	movw	r16, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     746:	4a 01       	movw	r8, r20
     748:	5b 01       	movw	r10, r22
     74a:	f9 e0       	ldi	r31, 0x09	; 9
     74c:	88 0c       	add	r8, r8
     74e:	99 1c       	adc	r9, r9
     750:	aa 1c       	adc	r10, r10
     752:	bb 1c       	adc	r11, r11
     754:	fa 95       	dec	r31
     756:	d1 f7       	brne	.-12     	; 0x74c <DataflashManager_WriteBlocks+0x2a>
     758:	aa e0       	ldi	r26, 0x0A	; 10
     75a:	b6 94       	lsr	r11
     75c:	a7 94       	ror	r10
     75e:	97 94       	ror	r9
     760:	87 94       	ror	r8
     762:	aa 95       	dec	r26
     764:	d1 f7       	brne	.-12     	; 0x75a <DataflashManager_WriteBlocks+0x38>
     766:	e4 01       	movw	r28, r8
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     768:	7a 01       	movw	r14, r20
     76a:	fe 2c       	mov	r15, r14
     76c:	ee 24       	eor	r14, r14
     76e:	ff 0c       	add	r15, r15
     770:	ee 24       	eor	r14, r14
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	f8 22       	and	r15, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     776:	c4 01       	movw	r24, r8
     778:	c2 df       	rcall	.-124    	; 0x6fe <Dataflash_SelectChipFromPage>
     77a:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	8e bd       	out	0x2e, r24	; 46
     77e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_WriteBlocks+0x5c>
     784:	60 e0       	ldi	r22, 0x00	; 0

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	c4 01       	movw	r24, r8
     78a:	a0 df       	rcall	.-192    	; 0x6cc <Dataflash_SendAddressBytes>
     78c:	91 df       	rcall	.-222    	; 0x6b0 <Dataflash_WaitWhileBusy>
     78e:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     790:	8e bd       	out	0x2e, r24	; 46
     792:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     794:	07 fe       	sbrs	r0, 7
     796:	fd cf       	rjmp	.-6      	; 0x792 <DataflashManager_WriteBlocks+0x70>
				while (!(SPSR & (1 << SPIF)));
     798:	b7 01       	movw	r22, r14
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     79e:	96 df       	rcall	.-212    	; 0x6cc <Dataflash_SendAddressBytes>
     7a0:	0e 94 17 1b 	call	0x362e	; 0x362e <Endpoint_WaitUntilReady>
     7a4:	81 11       	cpse	r24, r1
     7a6:	ed c0       	rjmp	.+474    	; 0x982 <DataflashManager_WriteBlocks+0x260>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a8:	74 e0       	ldi	r23, 0x04	; 4
     7aa:	f6 94       	lsr	r15
     7ac:	e7 94       	ror	r14
     7ae:	7a 95       	dec	r23
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <DataflashManager_WriteBlocks+0x88>
     7b2:	38 01       	movw	r6, r16
     7b4:	e5 e0       	ldi	r30, 0x05	; 5
     7b6:	66 0c       	add	r6, r6
     7b8:	77 1c       	adc	r7, r7
     7ba:	ea 95       	dec	r30
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <DataflashManager_WriteBlocks+0x94>
     7be:	a1 2c       	mov	r10, r1
     7c0:	b1 2c       	mov	r11, r1
     7c2:	f1 2c       	mov	r15, r1
     7c4:	44 24       	eor	r4, r4
     7c6:	43 94       	inc	r4
     7c8:	01 15       	cp	r16, r1
     7ca:	11 05       	cpc	r17, r1
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <DataflashManager_WriteBlocks+0xae>
     7ce:	be c0       	rjmp	.+380    	; 0x94c <DataflashManager_WriteBlocks+0x22a>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     7d0:	45 01       	movw	r8, r10
     7d2:	86 0c       	add	r8, r6
     7d4:	97 1c       	adc	r9, r7
     7d6:	60 e2       	ldi	r22, 0x20	; 32
     7d8:	56 2e       	mov	r5, r22
     7da:	80 91 e8 00 	lds	r24, 0x00E8
     7de:	85 ff       	sbrs	r24, 5
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <DataflashManager_WriteBlocks+0xc8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7e2:	e0 e4       	ldi	r30, 0x40	; 64
     7e4:	ee 12       	cpse	r14, r30

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     7e6:	44 c0       	rjmp	.+136    	; 0x870 <DataflashManager_WriteBlocks+0x14e>
     7e8:	0a c0       	rjmp	.+20     	; 0x7fe <DataflashManager_WriteBlocks+0xdc>
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7ea:	80 91 e8 00 	lds	r24, 0x00E8
     7ee:	8b 77       	andi	r24, 0x7B	; 123
     7f0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7f4:	0e 94 17 1b 	call	0x362e	; 0x362e <Endpoint_WaitUntilReady>
     7f8:	88 23       	and	r24, r24
     7fa:	99 f3       	breq	.-26     	; 0x7e2 <DataflashManager_WriteBlocks+0xc0>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     7fc:	c2 c0       	rjmp	.+388    	; 0x982 <DataflashManager_WriteBlocks+0x260>
     7fe:	58 df       	rcall	.-336    	; 0x6b0 <Dataflash_WaitWhileBusy>
     800:	ff 20       	and	r15, r15
     802:	11 f0       	breq	.+4      	; 0x808 <DataflashManager_WriteBlocks+0xe6>
     804:	86 e8       	ldi	r24, 0x86	; 134

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     806:	01 c0       	rjmp	.+2      	; 0x80a <DataflashManager_WriteBlocks+0xe8>
     808:	83 e8       	ldi	r24, 0x83	; 131
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     80a:	8e bd       	out	0x2e, r24	; 46
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <DataflashManager_WriteBlocks+0xea>
     812:	60 e0       	ldi	r22, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     814:	70 e0       	ldi	r23, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     816:	ce 01       	movw	r24, r28
     818:	59 df       	rcall	.-334    	; 0x6cc <Dataflash_SendAddressBytes>
     81a:	21 96       	adiw	r28, 0x01	; 1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     81c:	8e b1       	in	r24, 0x0e	; 14
     81e:	80 95       	com	r24
     820:	83 70       	andi	r24, 0x03	; 3
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	09 f4       	brne	.+2      	; 0x828 <DataflashManager_WriteBlocks+0x106>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     826:	f4 24       	eor	r15, r4
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     828:	ce 01       	movw	r24, r28
     82a:	69 df       	rcall	.-302    	; 0x6fe <Dataflash_SelectChipFromPage>
     82c:	f0 e4       	ldi	r31, 0x40	; 64

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     82e:	8f 16       	cp	r8, r31
     830:	91 04       	cpc	r9, r1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     832:	78 f4       	brcc	.+30     	; 0x852 <DataflashManager_WriteBlocks+0x130>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     834:	3d df       	rcall	.-390    	; 0x6b0 <Dataflash_WaitWhileBusy>
     836:	ff 20       	and	r15, r15
     838:	11 f0       	breq	.+4      	; 0x83e <DataflashManager_WriteBlocks+0x11c>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     83a:	85 e5       	ldi	r24, 0x55	; 85
     83c:	01 c0       	rjmp	.+2      	; 0x840 <DataflashManager_WriteBlocks+0x11e>
     83e:	83 e5       	ldi	r24, 0x53	; 83
     840:	8e bd       	out	0x2e, r24	; 46
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     842:	0d b4       	in	r0, 0x2d	; 45
     844:	07 fe       	sbrs	r0, 7
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     846:	fd cf       	rjmp	.-6      	; 0x842 <DataflashManager_WriteBlocks+0x120>
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	ce 01       	movw	r24, r28
     84e:	3e df       	rcall	.-388    	; 0x6cc <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     850:	2f df       	rcall	.-418    	; 0x6b0 <Dataflash_WaitWhileBusy>
				while (!(SPSR & (1 << SPIF)));
     852:	ff 20       	and	r15, r15
     854:	11 f0       	breq	.+4      	; 0x85a <DataflashManager_WriteBlocks+0x138>
     856:	87 e8       	ldi	r24, 0x87	; 135
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     858:	01 c0       	rjmp	.+2      	; 0x85c <DataflashManager_WriteBlocks+0x13a>
     85a:	84 e8       	ldi	r24, 0x84	; 132
     85c:	8e bd       	out	0x2e, r24	; 46
     85e:	0d b4       	in	r0, 0x2d	; 45
     860:	07 fe       	sbrs	r0, 7
					Dataflash_WaitWhileBusy();
     862:	fd cf       	rjmp	.-6      	; 0x85e <DataflashManager_WriteBlocks+0x13c>
     864:	60 e0       	ldi	r22, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	2f df       	rcall	.-418    	; 0x6cc <Dataflash_SendAddressBytes>
     86e:	e1 2c       	mov	r14, r1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     870:	80 91 f1 00 	lds	r24, 0x00F1
				while (!(SPSR & (1 << SPIF)));
     874:	8e bd       	out	0x2e, r24	; 46
     876:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendAddressBytes(0, 0);
     878:	07 fe       	sbrs	r0, 7
     87a:	fd cf       	rjmp	.-6      	; 0x876 <DataflashManager_WriteBlocks+0x154>
     87c:	80 91 f1 00 	lds	r24, 0x00F1
     880:	8e bd       	out	0x2e, r24	; 46
     882:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     884:	07 fe       	sbrs	r0, 7
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     886:	fd cf       	rjmp	.-6      	; 0x882 <DataflashManager_WriteBlocks+0x160>
     888:	80 91 f1 00 	lds	r24, 0x00F1
     88c:	8e bd       	out	0x2e, r24	; 46
     88e:	0d b4       	in	r0, 0x2d	; 45
     890:	07 fe       	sbrs	r0, 7
     892:	fd cf       	rjmp	.-6      	; 0x88e <DataflashManager_WriteBlocks+0x16c>
     894:	80 91 f1 00 	lds	r24, 0x00F1
     898:	8e bd       	out	0x2e, r24	; 46
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fe       	sbrs	r0, 7
     89e:	fd cf       	rjmp	.-6      	; 0x89a <DataflashManager_WriteBlocks+0x178>
     8a0:	80 91 f1 00 	lds	r24, 0x00F1
     8a4:	8e bd       	out	0x2e, r24	; 46
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_WriteBlocks+0x184>
     8ac:	80 91 f1 00 	lds	r24, 0x00F1
     8b0:	8e bd       	out	0x2e, r24	; 46
     8b2:	0d b4       	in	r0, 0x2d	; 45
     8b4:	07 fe       	sbrs	r0, 7
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <DataflashManager_WriteBlocks+0x190>
     8b8:	80 91 f1 00 	lds	r24, 0x00F1
     8bc:	8e bd       	out	0x2e, r24	; 46
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <DataflashManager_WriteBlocks+0x19c>
     8c4:	80 91 f1 00 	lds	r24, 0x00F1
     8c8:	8e bd       	out	0x2e, r24	; 46
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <DataflashManager_WriteBlocks+0x1a8>
     8d0:	80 91 f1 00 	lds	r24, 0x00F1
     8d4:	8e bd       	out	0x2e, r24	; 46
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <DataflashManager_WriteBlocks+0x1b4>
     8dc:	80 91 f1 00 	lds	r24, 0x00F1
     8e0:	8e bd       	out	0x2e, r24	; 46
     8e2:	0d b4       	in	r0, 0x2d	; 45
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <DataflashManager_WriteBlocks+0x1c0>
     8e8:	80 91 f1 00 	lds	r24, 0x00F1
     8ec:	8e bd       	out	0x2e, r24	; 46
     8ee:	0d b4       	in	r0, 0x2d	; 45
     8f0:	07 fe       	sbrs	r0, 7
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <DataflashManager_WriteBlocks+0x1cc>
     8f4:	80 91 f1 00 	lds	r24, 0x00F1
     8f8:	8e bd       	out	0x2e, r24	; 46
     8fa:	0d b4       	in	r0, 0x2d	; 45
     8fc:	07 fe       	sbrs	r0, 7
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <DataflashManager_WriteBlocks+0x1d8>
     900:	80 91 f1 00 	lds	r24, 0x00F1
     904:	8e bd       	out	0x2e, r24	; 46
     906:	0d b4       	in	r0, 0x2d	; 45
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <DataflashManager_WriteBlocks+0x1e4>
     90c:	80 91 f1 00 	lds	r24, 0x00F1
     910:	8e bd       	out	0x2e, r24	; 46
     912:	0d b4       	in	r0, 0x2d	; 45
     914:	07 fe       	sbrs	r0, 7
     916:	fd cf       	rjmp	.-6      	; 0x912 <DataflashManager_WriteBlocks+0x1f0>
     918:	80 91 f1 00 	lds	r24, 0x00F1
     91c:	8e bd       	out	0x2e, r24	; 46
     91e:	0d b4       	in	r0, 0x2d	; 45
     920:	07 fe       	sbrs	r0, 7
     922:	fd cf       	rjmp	.-6      	; 0x91e <DataflashManager_WriteBlocks+0x1fc>
     924:	80 91 f1 00 	lds	r24, 0x00F1
     928:	8e bd       	out	0x2e, r24	; 46
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <DataflashManager_WriteBlocks+0x208>
     930:	e3 94       	inc	r14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     932:	f6 01       	movw	r30, r12
				while (!(SPSR & (1 << SPIF)));
     934:	80 ad       	ldd	r24, Z+56	; 0x38
     936:	81 11       	cpse	r24, r1
     938:	24 c0       	rjmp	.+72     	; 0x982 <DataflashManager_WriteBlocks+0x260>
     93a:	5a 94       	dec	r5
     93c:	09 f0       	breq	.+2      	; 0x940 <DataflashManager_WriteBlocks+0x21e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93e:	4d cf       	rjmp	.-358    	; 0x7da <DataflashManager_WriteBlocks+0xb8>
				while (!(SPSR & (1 << SPIF)));
     940:	01 50       	subi	r16, 0x01	; 1
     942:	11 09       	sbc	r17, r1
     944:	f0 e2       	ldi	r31, 0x20	; 32
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     946:	af 1a       	sub	r10, r31

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     948:	b1 08       	sbc	r11, r1
     94a:	3e cf       	rjmp	.-388    	; 0x7c8 <DataflashManager_WriteBlocks+0xa6>
     94c:	b1 de       	rcall	.-670    	; 0x6b0 <Dataflash_WaitWhileBusy>
     94e:	ff 20       	and	r15, r15
     950:	11 f0       	breq	.+4      	; 0x956 <DataflashManager_WriteBlocks+0x234>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     952:	86 e8       	ldi	r24, 0x86	; 134
     954:	01 c0       	rjmp	.+2      	; 0x958 <DataflashManager_WriteBlocks+0x236>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     956:	83 e8       	ldi	r24, 0x83	; 131
     958:	8e bd       	out	0x2e, r24	; 46
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_WriteBlocks+0x238>
     960:	60 e0       	ldi	r22, 0x00	; 0
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	ce 01       	movw	r24, r28
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     966:	b2 de       	rcall	.-668    	; 0x6cc <Dataflash_SendAddressBytes>
     968:	a3 de       	rcall	.-698    	; 0x6b0 <Dataflash_WaitWhileBusy>
     96a:	80 91 e8 00 	lds	r24, 0x00E8
     96e:	85 fd       	sbrc	r24, 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     970:	05 c0       	rjmp	.+10     	; 0x97c <DataflashManager_WriteBlocks+0x25a>
				while (!(SPSR & (1 << SPIF)));
     972:	80 91 e8 00 	lds	r24, 0x00E8
     976:	8b 77       	andi	r24, 0x7B	; 123
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     978:	80 93 e8 00 	sts	0x00E8, r24
     97c:	8e b1       	in	r24, 0x0e	; 14
     97e:	83 60       	ori	r24, 0x03	; 3
     980:	8e b9       	out	0x0e, r24	; 14
	Dataflash_WaitWhileBusy();
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	08 95       	ret

000009a4 <DataflashManager_ReadBlocks>:
     9a4:	8f 92       	push	r8
     9a6:	9f 92       	push	r9
     9a8:	af 92       	push	r10
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	6c 01       	movw	r12, r24
     9be:	79 01       	movw	r14, r18
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     9c0:	4a 01       	movw	r8, r20
     9c2:	5b 01       	movw	r10, r22
     9c4:	29 e0       	ldi	r18, 0x09	; 9
     9c6:	88 0c       	add	r8, r8
     9c8:	99 1c       	adc	r9, r9
     9ca:	aa 1c       	adc	r10, r10
     9cc:	bb 1c       	adc	r11, r11
     9ce:	2a 95       	dec	r18
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <DataflashManager_ReadBlocks+0x22>
     9d2:	3a e0       	ldi	r19, 0x0A	; 10
     9d4:	b6 94       	lsr	r11
     9d6:	a7 94       	ror	r10
     9d8:	97 94       	ror	r9
     9da:	87 94       	ror	r8
     9dc:	3a 95       	dec	r19
     9de:	d1 f7       	brne	.-12     	; 0x9d4 <DataflashManager_ReadBlocks+0x30>
     9e0:	e4 01       	movw	r28, r8
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     9e2:	8a 01       	movw	r16, r20
     9e4:	10 2f       	mov	r17, r16
     9e6:	00 27       	eor	r16, r16
     9e8:	11 0f       	add	r17, r17
     9ea:	00 27       	eor	r16, r16
     9ec:	12 70       	andi	r17, 0x02	; 2
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     9ee:	c4 01       	movw	r24, r8
     9f0:	86 de       	rcall	.-756    	; 0x6fe <Dataflash_SelectChipFromPage>
     9f2:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f4:	8e bd       	out	0x2e, r24	; 46
     9f6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     9f8:	07 fe       	sbrs	r0, 7
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <DataflashManager_ReadBlocks+0x52>
     9fc:	b8 01       	movw	r22, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     9fe:	c4 01       	movw	r24, r8
     a00:	65 de       	rcall	.-822    	; 0x6cc <Dataflash_SendAddressBytes>
     a02:	1e bc       	out	0x2e, r1	; 46
     a04:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a06:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <DataflashManager_ReadBlocks+0x60>
     a0a:	1e bc       	out	0x2e, r1	; 46
     a0c:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a0e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <DataflashManager_ReadBlocks+0x68>
     a12:	1e bc       	out	0x2e, r1	; 46
     a14:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a16:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <DataflashManager_ReadBlocks+0x70>
     a1a:	1e bc       	out	0x2e, r1	; 46
     a1c:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a1e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a20:	fd cf       	rjmp	.-6      	; 0xa1c <DataflashManager_ReadBlocks+0x78>
     a22:	0e 94 17 1b 	call	0x362e	; 0x362e <Endpoint_WaitUntilReady>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     a26:	81 11       	cpse	r24, r1
     a28:	c1 c0       	rjmp	.+386    	; 0xbac <DataflashManager_ReadBlocks+0x208>
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	16 95       	lsr	r17
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a2e:	07 95       	ror	r16
     a30:	8a 95       	dec	r24
     a32:	e1 f7       	brne	.-8      	; 0xa2c <DataflashManager_ReadBlocks+0x88>
     a34:	92 ed       	ldi	r25, 0xD2	; 210
     a36:	b9 2e       	mov	r11, r25
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a38:	e1 14       	cp	r14, r1
     a3a:	f1 04       	cpc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     a3c:	09 f4       	brne	.+2      	; 0xa40 <DataflashManager_ReadBlocks+0x9c>
     a3e:	aa c0       	rjmp	.+340    	; 0xb94 <DataflashManager_ReadBlocks+0x1f0>
     a40:	10 e2       	ldi	r17, 0x20	; 32
     a42:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a46:	85 ff       	sbrs	r24, 5
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <DataflashManager_ReadBlocks+0xb4>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     a4a:	00 34       	cpi	r16, 0x40	; 64
     a4c:	39 f5       	brne	.+78     	; 0xa9c <DataflashManager_ReadBlocks+0xf8>
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	ce 01       	movw	r24, r28
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     a52:	55 de       	rcall	.-854    	; 0x6fe <Dataflash_SelectChipFromPage>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     a54:	be bc       	out	0x2e, r11	; 46
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <DataflashManager_ReadBlocks+0xc8>
     a58:	80 91 e8 00 	lds	r24, 0x00E8
     a5c:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a5e:	80 93 e8 00 	sts	0x00E8, r24
     a62:	0e 94 17 1b 	call	0x362e	; 0x362e <Endpoint_WaitUntilReady>
     a66:	88 23       	and	r24, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     a68:	81 f3       	breq	.-32     	; 0xa4a <DataflashManager_ReadBlocks+0xa6>
     a6a:	a0 c0       	rjmp	.+320    	; 0xbac <DataflashManager_ReadBlocks+0x208>
     a6c:	0d b4       	in	r0, 0x2d	; 45
     a6e:	07 fe       	sbrs	r0, 7
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <DataflashManager_ReadBlocks+0xc8>
				while (!(SPSR & (1 << SPIF)));
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	ce 01       	movw	r24, r28
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     a78:	29 de       	rcall	.-942    	; 0x6cc <Dataflash_SendAddressBytes>
     a7a:	1e bc       	out	0x2e, r1	; 46
     a7c:	0d b4       	in	r0, 0x2d	; 45
     a7e:	07 fe       	sbrs	r0, 7
     a80:	fd cf       	rjmp	.-6      	; 0xa7c <DataflashManager_ReadBlocks+0xd8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a82:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a84:	0d b4       	in	r0, 0x2d	; 45
     a86:	07 fe       	sbrs	r0, 7
     a88:	fd cf       	rjmp	.-6      	; 0xa84 <DataflashManager_ReadBlocks+0xe0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a8a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a8c:	0d b4       	in	r0, 0x2d	; 45
     a8e:	07 fe       	sbrs	r0, 7
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <DataflashManager_ReadBlocks+0xe8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a92:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a94:	0d b4       	in	r0, 0x2d	; 45
     a96:	07 fe       	sbrs	r0, 7
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <DataflashManager_ReadBlocks+0xf0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a9a:	00 e0       	ldi	r16, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     a9c:	1e bc       	out	0x2e, r1	; 46
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <DataflashManager_ReadBlocks+0xfa>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aa4:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     aa6:	80 93 f1 00 	sts	0x00F1, r24
     aaa:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     aac:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <DataflashManager_ReadBlocks+0x108>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ab2:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ab4:	80 93 f1 00 	sts	0x00F1, r24
     ab8:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     aba:	0d b4       	in	r0, 0x2d	; 45
     abc:	07 fe       	sbrs	r0, 7
     abe:	fd cf       	rjmp	.-6      	; 0xaba <DataflashManager_ReadBlocks+0x116>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ac0:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ac2:	80 93 f1 00 	sts	0x00F1, r24
     ac6:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     ac8:	0d b4       	in	r0, 0x2d	; 45
     aca:	07 fe       	sbrs	r0, 7
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <DataflashManager_ReadBlocks+0x124>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ace:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ad0:	80 93 f1 00 	sts	0x00F1, r24
     ad4:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     ad6:	0d b4       	in	r0, 0x2d	; 45
     ad8:	07 fe       	sbrs	r0, 7
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <DataflashManager_ReadBlocks+0x132>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     adc:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ade:	80 93 f1 00 	sts	0x00F1, r24
     ae2:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     ae4:	0d b4       	in	r0, 0x2d	; 45
     ae6:	07 fe       	sbrs	r0, 7
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <DataflashManager_ReadBlocks+0x140>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aea:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     aec:	80 93 f1 00 	sts	0x00F1, r24
     af0:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     af2:	0d b4       	in	r0, 0x2d	; 45
     af4:	07 fe       	sbrs	r0, 7
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <DataflashManager_ReadBlocks+0x14e>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     af8:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     afa:	80 93 f1 00 	sts	0x00F1, r24
     afe:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b00:	0d b4       	in	r0, 0x2d	; 45
     b02:	07 fe       	sbrs	r0, 7
     b04:	fd cf       	rjmp	.-6      	; 0xb00 <DataflashManager_ReadBlocks+0x15c>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b06:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b08:	80 93 f1 00 	sts	0x00F1, r24
     b0c:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <DataflashManager_ReadBlocks+0x16a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b14:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b16:	80 93 f1 00 	sts	0x00F1, r24
     b1a:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b1c:	0d b4       	in	r0, 0x2d	; 45
     b1e:	07 fe       	sbrs	r0, 7
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <DataflashManager_ReadBlocks+0x178>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b22:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b24:	80 93 f1 00 	sts	0x00F1, r24
     b28:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b2a:	0d b4       	in	r0, 0x2d	; 45
     b2c:	07 fe       	sbrs	r0, 7
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <DataflashManager_ReadBlocks+0x186>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b30:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b32:	80 93 f1 00 	sts	0x00F1, r24
     b36:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b38:	0d b4       	in	r0, 0x2d	; 45
     b3a:	07 fe       	sbrs	r0, 7
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <DataflashManager_ReadBlocks+0x194>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b3e:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b40:	80 93 f1 00 	sts	0x00F1, r24
     b44:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b46:	0d b4       	in	r0, 0x2d	; 45
     b48:	07 fe       	sbrs	r0, 7
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <DataflashManager_ReadBlocks+0x1a2>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b4c:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b4e:	80 93 f1 00 	sts	0x00F1, r24
     b52:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b54:	0d b4       	in	r0, 0x2d	; 45
     b56:	07 fe       	sbrs	r0, 7
     b58:	fd cf       	rjmp	.-6      	; 0xb54 <DataflashManager_ReadBlocks+0x1b0>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b5a:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b5c:	80 93 f1 00 	sts	0x00F1, r24
     b60:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b62:	0d b4       	in	r0, 0x2d	; 45
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <DataflashManager_ReadBlocks+0x1be>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b68:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b6a:	80 93 f1 00 	sts	0x00F1, r24
     b6e:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b70:	0d b4       	in	r0, 0x2d	; 45
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <DataflashManager_ReadBlocks+0x1cc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b76:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b78:	80 93 f1 00 	sts	0x00F1, r24
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
				return SPDR;
     b7e:	f6 01       	movw	r30, r12
     b80:	80 ad       	ldd	r24, Z+56	; 0x38
     b82:	81 11       	cpse	r24, r1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     b84:	13 c0       	rjmp	.+38     	; 0xbac <DataflashManager_ReadBlocks+0x208>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     b86:	11 50       	subi	r17, 0x01	; 1
     b88:	09 f0       	breq	.+2      	; 0xb8c <DataflashManager_ReadBlocks+0x1e8>
     b8a:	5b cf       	rjmp	.-330    	; 0xa42 <DataflashManager_ReadBlocks+0x9e>
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	ef 1a       	sub	r14, r31
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     b90:	f1 08       	sbc	r15, r1
     b92:	52 cf       	rjmp	.-348    	; 0xa38 <DataflashManager_ReadBlocks+0x94>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     b94:	80 91 e8 00 	lds	r24, 0x00E8
     b98:	85 fd       	sbrc	r24, 5
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <DataflashManager_ReadBlocks+0x202>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b9c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     ba0:	8e 77       	andi	r24, 0x7E	; 126
     ba2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba6:	8e b1       	in	r24, 0x0e	; 14
     ba8:	83 60       	ori	r24, 0x03	; 3
     baa:	8e b9       	out	0x0e, r24	; 14
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	9f 90       	pop	r9
     bc2:	8f 90       	pop	r8
     bc4:	08 95       	ret

00000bc6 <DataflashManager_WriteBlocks_RAM>:
     bc6:	2f 92       	push	r2
     bc8:	3f 92       	push	r3
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     bce:	6f 92       	push	r6
     bd0:	7f 92       	push	r7
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7a 01       	movw	r14, r20
     bec:	89 01       	movw	r16, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     bee:	4b 01       	movw	r8, r22
     bf0:	5c 01       	movw	r10, r24
     bf2:	e9 e0       	ldi	r30, 0x09	; 9
     bf4:	88 0c       	add	r8, r8
     bf6:	99 1c       	adc	r9, r9
     bf8:	aa 1c       	adc	r10, r10
     bfa:	bb 1c       	adc	r11, r11
     bfc:	ea 95       	dec	r30
     bfe:	d1 f7       	brne	.-12     	; 0xbf4 <DataflashManager_WriteBlocks_RAM+0x2e>
     c00:	fa e0       	ldi	r31, 0x0A	; 10
     c02:	b6 94       	lsr	r11
     c04:	a7 94       	ror	r10
     c06:	97 94       	ror	r9
     c08:	87 94       	ror	r8
     c0a:	fa 95       	dec	r31
     c0c:	d1 f7       	brne	.-12     	; 0xc02 <DataflashManager_WriteBlocks_RAM+0x3c>
     c0e:	e4 01       	movw	r28, r8
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     c10:	6b 01       	movw	r12, r22
     c12:	dc 2c       	mov	r13, r12
     c14:	cc 24       	eor	r12, r12
     c16:	dd 0c       	add	r13, r13
     c18:	cc 24       	eor	r12, r12
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	d8 22       	and	r13, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     c1e:	c6 01       	movw	r24, r12
     c20:	b4 e0       	ldi	r27, 0x04	; 4
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	ba 95       	dec	r27
     c28:	e1 f7       	brne	.-8      	; 0xc22 <DataflashManager_WriteBlocks_RAM+0x5c>
     c2a:	58 2e       	mov	r5, r24
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     c2c:	c4 01       	movw	r24, r8
     c2e:	67 dd       	rcall	.-1330   	; 0x6fe <Dataflash_SelectChipFromPage>
     c30:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c32:	8e bd       	out	0x2e, r24	; 46
     c34:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     c36:	07 fe       	sbrs	r0, 7
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <DataflashManager_WriteBlocks_RAM+0x6e>
     c3a:	60 e0       	ldi	r22, 0x00	; 0

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	c4 01       	movw	r24, r8
     c40:	45 dd       	rcall	.-1398   	; 0x6cc <Dataflash_SendAddressBytes>
     c42:	36 dd       	rcall	.-1428   	; 0x6b0 <Dataflash_WaitWhileBusy>
     c44:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     c46:	8e bd       	out	0x2e, r24	; 46
     c48:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c4a:	07 fe       	sbrs	r0, 7
     c4c:	fd cf       	rjmp	.-6      	; 0xc48 <DataflashManager_WriteBlocks_RAM+0x82>
				while (!(SPSR & (1 << SPIF)));
     c4e:	b6 01       	movw	r22, r12
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     c54:	3b dd       	rcall	.-1418   	; 0x6cc <Dataflash_SendAddressBytes>
     c56:	57 01       	movw	r10, r14
     c58:	55 e0       	ldi	r21, 0x05	; 5
     c5a:	aa 0c       	add	r10, r10
     c5c:	bb 1c       	adc	r11, r11
     c5e:	5a 95       	dec	r21
     c60:	e1 f7       	brne	.-8      	; 0xc5a <DataflashManager_WriteBlocks_RAM+0x94>
     c62:	c1 2c       	mov	r12, r1
     c64:	d1 2c       	mov	r13, r1
     c66:	41 2c       	mov	r4, r1
     c68:	33 24       	eor	r3, r3

	while (TotalBlocks)
     c6a:	33 94       	inc	r3
     c6c:	e1 14       	cp	r14, r1
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;
     c6e:	f1 04       	cpc	r15, r1
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     c70:	09 f4       	brne	.+2      	; 0xc74 <DataflashManager_WriteBlocks_RAM+0xae>
     c72:	5f c0       	rjmp	.+190    	; 0xd32 <DataflashManager_WriteBlocks_RAM+0x16c>

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     c74:	48 01       	movw	r8, r16
     c76:	8e ef       	ldi	r24, 0xFE	; 254
     c78:	98 1a       	sub	r9, r24
     c7a:	36 01       	movw	r6, r12
     c7c:	6a 0c       	add	r6, r10
     c7e:	7b 1c       	adc	r7, r11
     c80:	20 2e       	mov	r2, r16
     c82:	80 e4       	ldi	r24, 0x40	; 64
     c84:	58 12       	cpse	r5, r24
     c86:	3a c0       	rjmp	.+116    	; 0xcfc <DataflashManager_WriteBlocks_RAM+0x136>
     c88:	13 dd       	rcall	.-1498   	; 0x6b0 <Dataflash_WaitWhileBusy>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     c8a:	44 20       	and	r4, r4
     c8c:	11 f0       	breq	.+4      	; 0xc92 <DataflashManager_WriteBlocks_RAM+0xcc>
     c8e:	86 e8       	ldi	r24, 0x86	; 134
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <DataflashManager_WriteBlocks_RAM+0xce>
     c92:	83 e8       	ldi	r24, 0x83	; 131
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     c94:	8e bd       	out	0x2e, r24	; 46
     c96:	0d b4       	in	r0, 0x2d	; 45
     c98:	07 fe       	sbrs	r0, 7
     c9a:	fd cf       	rjmp	.-6      	; 0xc96 <DataflashManager_WriteBlocks_RAM+0xd0>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c9e:	70 e0       	ldi	r23, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     ca0:	ce 01       	movw	r24, r28
     ca2:	14 dd       	rcall	.-1496   	; 0x6cc <Dataflash_SendAddressBytes>
     ca4:	21 96       	adiw	r28, 0x01	; 1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     ca6:	8e b1       	in	r24, 0x0e	; 14
     ca8:	80 95       	com	r24
     caa:	83 70       	andi	r24, 0x03	; 3
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	09 f4       	brne	.+2      	; 0xcb2 <DataflashManager_WriteBlocks_RAM+0xec>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     cb0:	43 24       	eor	r4, r3
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     cb2:	ce 01       	movw	r24, r28
     cb4:	24 dd       	rcall	.-1464   	; 0x6fe <Dataflash_SelectChipFromPage>
     cb6:	80 e4       	ldi	r24, 0x40	; 64

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     cb8:	68 16       	cp	r6, r24
     cba:	71 04       	cpc	r7, r1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     cbc:	78 f4       	brcc	.+30     	; 0xcdc <DataflashManager_WriteBlocks_RAM+0x116>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     cbe:	f8 dc       	rcall	.-1552   	; 0x6b0 <Dataflash_WaitWhileBusy>
     cc0:	44 20       	and	r4, r4
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <DataflashManager_WriteBlocks_RAM+0x102>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     cc4:	85 e5       	ldi	r24, 0x55	; 85
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <DataflashManager_WriteBlocks_RAM+0x104>
     cc8:	83 e5       	ldi	r24, 0x53	; 83
     cca:	8e bd       	out	0x2e, r24	; 46
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     ccc:	0d b4       	in	r0, 0x2d	; 45
     cce:	07 fe       	sbrs	r0, 7
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <DataflashManager_WriteBlocks_RAM+0x106>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	ce 01       	movw	r24, r28
     cd8:	f9 dc       	rcall	.-1550   	; 0x6cc <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cda:	ea dc       	rcall	.-1580   	; 0x6b0 <Dataflash_WaitWhileBusy>
				while (!(SPSR & (1 << SPIF)));
     cdc:	df dc       	rcall	.-1602   	; 0x69c <Dataflash_ToggleSelectedChipCS>
     cde:	44 20       	and	r4, r4
     ce0:	11 f0       	breq	.+4      	; 0xce6 <DataflashManager_WriteBlocks_RAM+0x120>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     ce2:	87 e8       	ldi	r24, 0x87	; 135
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <DataflashManager_WriteBlocks_RAM+0x122>
     ce6:	84 e8       	ldi	r24, 0x84	; 132
     ce8:	8e bd       	out	0x2e, r24	; 46
     cea:	0d b4       	in	r0, 0x2d	; 45
					Dataflash_WaitWhileBusy();
     cec:	07 fe       	sbrs	r0, 7
     cee:	fd cf       	rjmp	.-6      	; 0xcea <DataflashManager_WriteBlocks_RAM+0x124>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	e9 dc       	rcall	.-1582   	; 0x6cc <Dataflash_SendAddressBytes>
     cfa:	51 2c       	mov	r5, r1
     cfc:	e2 2d       	mov	r30, r2
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cfe:	f1 2f       	mov	r31, r17
				while (!(SPSR & (1 << SPIF)));
     d00:	cf 01       	movw	r24, r30
     d02:	40 96       	adiw	r24, 0x10	; 16
     d04:	21 91       	ld	r18, Z+
				Dataflash_SendAddressBytes(0, 0);
     d06:	2e bd       	out	0x2e, r18	; 46
     d08:	0d b4       	in	r0, 0x2d	; 45
     d0a:	07 fe       	sbrs	r0, 7
     d0c:	fd cf       	rjmp	.-6      	; 0xd08 <DataflashManager_WriteBlocks_RAM+0x142>
     d0e:	e8 17       	cp	r30, r24
     d10:	f9 07       	cpc	r31, r25
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     d12:	c1 f7       	brne	.-16     	; 0xd04 <DataflashManager_WriteBlocks_RAM+0x13e>
     d14:	2e 2e       	mov	r2, r30
     d16:	1f 2f       	mov	r17, r31
     d18:	53 94       	inc	r5
     d1a:	e8 15       	cp	r30, r8
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     d1c:	f9 05       	cpc	r31, r9
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DataflashManager_WriteBlocks_RAM+0x15c>
				while (!(SPSR & (1 << SPIF)));
     d20:	b0 cf       	rjmp	.-160    	; 0xc82 <DataflashManager_WriteBlocks_RAM+0xbc>
     d22:	8f 01       	movw	r16, r30
     d24:	81 e0       	ldi	r24, 0x01	; 1
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     d26:	e8 1a       	sub	r14, r24
     d28:	f1 08       	sbc	r15, r1
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	c8 1a       	sub	r12, r24
     d2e:	d1 08       	sbc	r13, r1
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     d30:	9d cf       	rjmp	.-198    	; 0xc6c <DataflashManager_WriteBlocks_RAM+0xa6>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     d32:	be dc       	rcall	.-1668   	; 0x6b0 <Dataflash_WaitWhileBusy>
     d34:	44 20       	and	r4, r4
     d36:	11 f0       	breq	.+4      	; 0xd3c <DataflashManager_WriteBlocks_RAM+0x176>
     d38:	86 e8       	ldi	r24, 0x86	; 134
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <DataflashManager_WriteBlocks_RAM+0x178>
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     d3c:	83 e8       	ldi	r24, 0x83	; 131
     d3e:	8e bd       	out	0x2e, r24	; 46
     d40:	0d b4       	in	r0, 0x2d	; 45
     d42:	07 fe       	sbrs	r0, 7
     d44:	fd cf       	rjmp	.-6      	; 0xd40 <DataflashManager_WriteBlocks_RAM+0x17a>
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     d4a:	ce 01       	movw	r24, r28
     d4c:	bf dc       	rcall	.-1666   	; 0x6cc <Dataflash_SendAddressBytes>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     d4e:	b0 dc       	rcall	.-1696   	; 0x6b0 <Dataflash_WaitWhileBusy>
     d50:	8e b1       	in	r24, 0x0e	; 14
     d52:	83 60       	ori	r24, 0x03	; 3
     d54:	8e b9       	out	0x0e, r24	; 14
     d56:	df 91       	pop	r29
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d58:	cf 91       	pop	r28
				while (!(SPSR & (1 << SPIF)));
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
	Dataflash_WaitWhileBusy();
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     d6e:	7f 90       	pop	r7
     d70:	6f 90       	pop	r6
     d72:	5f 90       	pop	r5

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     d74:	4f 90       	pop	r4
     d76:	3f 90       	pop	r3
     d78:	2f 90       	pop	r2
     d7a:	08 95       	ret

00000d7c <DataflashManager_ReadBlocks_RAM>:
     d7c:	6f 92       	push	r6
     d7e:	7f 92       	push	r7
     d80:	9f 92       	push	r9
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 92       	push	r12
     d88:	df 92       	push	r13
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	5a 01       	movw	r10, r20
     d98:	89 01       	movw	r16, r18
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	99 e0       	ldi	r25, 0x09	; 9
     da0:	cc 0c       	add	r12, r12
     da2:	dd 1c       	adc	r13, r13
     da4:	ee 1c       	adc	r14, r14
     da6:	ff 1c       	adc	r15, r15
     da8:	9a 95       	dec	r25
     daa:	d1 f7       	brne	.-12     	; 0xda0 <DataflashManager_ReadBlocks_RAM+0x24>
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	f6 94       	lsr	r15
     db0:	e7 94       	ror	r14
     db2:	d7 94       	ror	r13
     db4:	c7 94       	ror	r12
     db6:	2a 95       	dec	r18
     db8:	d1 f7       	brne	.-12     	; 0xdae <DataflashManager_ReadBlocks_RAM+0x32>
     dba:	e6 01       	movw	r28, r12
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     dbc:	3b 01       	movw	r6, r22
     dbe:	76 2c       	mov	r7, r6
     dc0:	66 24       	eor	r6, r6
     dc2:	77 0c       	add	r7, r7
     dc4:	66 24       	eor	r6, r6
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	78 22       	and	r7, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     dca:	c3 01       	movw	r24, r6
     dcc:	44 e0       	ldi	r20, 0x04	; 4
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	4a 95       	dec	r20
     dd4:	e1 f7       	brne	.-8      	; 0xdce <DataflashManager_ReadBlocks_RAM+0x52>
     dd6:	98 2e       	mov	r9, r24

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     dd8:	c6 01       	movw	r24, r12
     dda:	91 dc       	rcall	.-1758   	; 0x6fe <Dataflash_SelectChipFromPage>
     ddc:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dde:	8e bd       	out	0x2e, r24	; 46
     de0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     de2:	07 fe       	sbrs	r0, 7
     de4:	fd cf       	rjmp	.-6      	; 0xde0 <DataflashManager_ReadBlocks_RAM+0x64>
     de6:	b3 01       	movw	r22, r6

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     de8:	c6 01       	movw	r24, r12
     dea:	70 dc       	rcall	.-1824   	; 0x6cc <Dataflash_SendAddressBytes>
     dec:	1e bc       	out	0x2e, r1	; 46
     dee:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     df0:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     df2:	fd cf       	rjmp	.-6      	; 0xdee <DataflashManager_ReadBlocks_RAM+0x72>
     df4:	1e bc       	out	0x2e, r1	; 46
     df6:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     df8:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <DataflashManager_ReadBlocks_RAM+0x7a>
     dfc:	1e bc       	out	0x2e, r1	; 46
     dfe:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e00:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <DataflashManager_ReadBlocks_RAM+0x82>
     e04:	1e bc       	out	0x2e, r1	; 46
     e06:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e08:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e0a:	fd cf       	rjmp	.-6      	; 0xe06 <DataflashManager_ReadBlocks_RAM+0x8a>
     e0c:	82 ed       	ldi	r24, 0xD2	; 210
     e0e:	d8 2e       	mov	r13, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e10:	a1 14       	cp	r10, r1
     e12:	b1 04       	cpc	r11, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     e14:	c1 f1       	breq	.+112    	; 0xe86 <DataflashManager_ReadBlocks_RAM+0x10a>
     e16:	78 01       	movw	r14, r16
     e18:	8e ef       	ldi	r24, 0xFE	; 254
     e1a:	f8 1a       	sub	r15, r24
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	98 12       	cpse	r9, r24

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     e20:	1c c0       	rjmp	.+56     	; 0xe5a <DataflashManager_ReadBlocks_RAM+0xde>
     e22:	21 96       	adiw	r28, 0x01	; 1
     e24:	ce 01       	movw	r24, r28
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e26:	6b dc       	rcall	.-1834   	; 0x6fe <Dataflash_SelectChipFromPage>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e28:	de bc       	out	0x2e, r13	; 46
     e2a:	0d b4       	in	r0, 0x2d	; 45
     e2c:	07 fe       	sbrs	r0, 7
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <DataflashManager_ReadBlocks_RAM+0xae>
				while (!(SPSR & (1 << SPIF)));
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	ce 01       	movw	r24, r28

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e36:	4a dc       	rcall	.-1900   	; 0x6cc <Dataflash_SendAddressBytes>
     e38:	1e bc       	out	0x2e, r1	; 46
     e3a:	0d b4       	in	r0, 0x2d	; 45
     e3c:	07 fe       	sbrs	r0, 7
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <DataflashManager_ReadBlocks_RAM+0xbe>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e40:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e42:	0d b4       	in	r0, 0x2d	; 45
     e44:	07 fe       	sbrs	r0, 7
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <DataflashManager_ReadBlocks_RAM+0xc6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e48:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <DataflashManager_ReadBlocks_RAM+0xce>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e50:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e52:	0d b4       	in	r0, 0x2d	; 45
     e54:	07 fe       	sbrs	r0, 7
     e56:	fd cf       	rjmp	.-6      	; 0xe52 <DataflashManager_ReadBlocks_RAM+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e58:	91 2c       	mov	r9, r1
				while (!(SPSR & (1 << SPIF)));
     e5a:	f8 01       	movw	r30, r16
     e5c:	c8 01       	movw	r24, r16
     e5e:	40 96       	adiw	r24, 0x10	; 16
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     e60:	1e bc       	out	0x2e, r1	; 46
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <DataflashManager_ReadBlocks_RAM+0xe6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     e68:	2e b5       	in	r18, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     e6a:	21 93       	st	Z+, r18
     e6c:	e8 17       	cp	r30, r24
     e6e:	f9 07       	cpc	r31, r25
				return SPDR;
     e70:	b9 f7       	brne	.-18     	; 0xe60 <DataflashManager_ReadBlocks_RAM+0xe4>
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     e72:	8f 01       	movw	r16, r30
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     e74:	93 94       	inc	r9
     e76:	ee 15       	cp	r30, r14
     e78:	ff 05       	cpc	r31, r15
     e7a:	81 f6       	brne	.-96     	; 0xe1c <DataflashManager_ReadBlocks_RAM+0xa0>
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     e7c:	8f 01       	movw	r16, r30
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	a8 1a       	sub	r10, r24
     e82:	b1 08       	sbc	r11, r1
     e84:	c5 cf       	rjmp	.-118    	; 0xe10 <DataflashManager_ReadBlocks_RAM+0x94>
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     e86:	8e b1       	in	r24, 0x0e	; 14
     e88:	83 60       	ori	r24, 0x03	; 3
     e8a:	8e b9       	out	0x0e, r24	; 14
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	08 95       	ret

00000ea8 <DataflashManager_ResetDataflashProtections>:
     ea8:	8e b1       	in	r24, 0x0e	; 14
     eaa:	83 60       	ori	r24, 0x03	; 3
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eb0:	87 ed       	ldi	r24, 0xD7	; 215
     eb2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eb4:	0d b4       	in	r0, 0x2d	; 45
     eb6:	07 fe       	sbrs	r0, 7
     eb8:	fd cf       	rjmp	.-6      	; 0xeb4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     eba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ebc:	0d b4       	in	r0, 0x2d	; 45
     ebe:	07 fe       	sbrs	r0, 7
     ec0:	fd cf       	rjmp	.-6      	; 0xebc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     ec2:	0e b4       	in	r0, 0x2e	; 46
     ec4:	01 fc       	sbrc	r0, 1
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <DataflashManager_ResetDataflashProtections+0x2e>
     ec8:	8e b1       	in	r24, 0x0e	; 14
     eca:	83 60       	ori	r24, 0x03	; 3
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ed0:	87 ed       	ldi	r24, 0xD7	; 215
     ed2:	8e bd       	out	0x2e, r24	; 46
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     ed6:	e2 db       	rcall	.-2108   	; 0x69c <Dataflash_ToggleSelectedChipCS>
     ed8:	8d e3       	ldi	r24, 0x3D	; 61
     eda:	8e bd       	out	0x2e, r24	; 46
     edc:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     ede:	07 fe       	sbrs	r0, 7
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <DataflashManager_ResetDataflashProtections+0x34>
     ee2:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ee4:	8e bd       	out	0x2e, r24	; 46
     ee6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <DataflashManager_ResetDataflashProtections+0x3e>
     eec:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eee:	8e bd       	out	0x2e, r24	; 46
     ef0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     ef2:	07 fe       	sbrs	r0, 7
     ef4:	fd cf       	rjmp	.-6      	; 0xef0 <DataflashManager_ResetDataflashProtections+0x48>
     ef6:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ef8:	8e bd       	out	0x2e, r24	; 46
     efa:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <DataflashManager_ResetDataflashProtections+0x52>
     f00:	e3 cf       	rjmp	.-58     	; 0xec8 <DataflashManager_ResetDataflashProtections+0x20>
     f02:	0d b4       	in	r0, 0x2d	; 45
     f04:	07 fe       	sbrs	r0, 7
     f06:	fd cf       	rjmp	.-6      	; 0xf02 <DataflashManager_ResetDataflashProtections+0x5a>
     f08:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f0a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <DataflashManager_ResetDataflashProtections+0x62>
     f10:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     f12:	01 fc       	sbrc	r0, 1
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <DataflashManager_ResetDataflashProtections+0x76>
     f16:	8e b1       	in	r24, 0x0e	; 14
     f18:	83 60       	ori	r24, 0x03	; 3
     f1a:	8e b9       	out	0x0e, r24	; 14
     f1c:	08 95       	ret
     f1e:	be db       	rcall	.-2180   	; 0x69c <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     f20:	8d e3       	ldi	r24, 0x3D	; 61
     f22:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f24:	0d b4       	in	r0, 0x2d	; 45
     f26:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f28:	fd cf       	rjmp	.-6      	; 0xf24 <DataflashManager_ResetDataflashProtections+0x7c>
     f2a:	8a e2       	ldi	r24, 0x2A	; 42
     f2c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f2e:	0d b4       	in	r0, 0x2d	; 45
     f30:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <DataflashManager_ResetDataflashProtections+0x86>
     f34:	8f e7       	ldi	r24, 0x7F	; 127
     f36:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f38:	0d b4       	in	r0, 0x2d	; 45
     f3a:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <DataflashManager_ResetDataflashProtections+0x90>
     f3e:	8a e9       	ldi	r24, 0x9A	; 154
     f40:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f42:	0d b4       	in	r0, 0x2d	; 45
     f44:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f46:	fd cf       	rjmp	.-6      	; 0xf42 <DataflashManager_ResetDataflashProtections+0x9a>
     f48:	e6 cf       	rjmp	.-52     	; 0xf16 <DataflashManager_ResetDataflashProtections+0x6e>

00000f4a <DataflashManager_CheckDataflashOperation>:
     f4a:	8e b1       	in	r24, 0x0e	; 14
     f4c:	83 60       	ori	r24, 0x03	; 3
     f4e:	8e 7f       	andi	r24, 0xFE	; 254
     f50:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f52:	8f e9       	ldi	r24, 0x9F	; 159
     f54:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f56:	0d b4       	in	r0, 0x2d	; 45
     f58:	07 fe       	sbrs	r0, 7
     f5a:	fd cf       	rjmp	.-6      	; 0xf56 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f5c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f5e:	0d b4       	in	r0, 0x2d	; 45
     f60:	07 fe       	sbrs	r0, 7
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     f64:	9e b5       	in	r25, 0x2e	; 46
     f66:	8e b1       	in	r24, 0x0e	; 14
     f68:	83 60       	ori	r24, 0x03	; 3
     f6a:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     f6c:	9f 31       	cpi	r25, 0x1F	; 31
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <DataflashManager_CheckDataflashOperation+0x4e>
     f70:	8e b1       	in	r24, 0x0e	; 14
     f72:	83 60       	ori	r24, 0x03	; 3
     f74:	8d 7f       	andi	r24, 0xFD	; 253
     f76:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f78:	8f e9       	ldi	r24, 0x9F	; 159
     f7a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f7c:	0d b4       	in	r0, 0x2d	; 45
     f7e:	07 fe       	sbrs	r0, 7
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f82:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f84:	0d b4       	in	r0, 0x2d	; 45
     f86:	07 fe       	sbrs	r0, 7
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     f8a:	9e b5       	in	r25, 0x2e	; 46
     f8c:	8e b1       	in	r24, 0x0e	; 14
     f8e:	83 60       	ori	r24, 0x03	; 3
     f90:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	9f 31       	cpi	r25, 0x1F	; 31
     f96:	09 f0       	breq	.+2      	; 0xf9a <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     f98:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     f9a:	08 95       	ret

00000f9c <RTC_Init>:
/** Current dummy RTC time and date */
static volatile TimeDate_t DummyRTC_Count;

void RTC_Init(void)
{
	DummyRTC_Count.Hour   = 0;
     f9c:	10 92 33 04 	sts	0x0433, r1
	DummyRTC_Count.Minute = 0;
     fa0:	10 92 34 04 	sts	0x0434, r1
	DummyRTC_Count.Second = 0;
     fa4:	10 92 35 04 	sts	0x0435, r1
	DummyRTC_Count.Day    = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 36 04 	sts	0x0436, r24
	DummyRTC_Count.Month  = 1;
     fae:	80 93 37 04 	sts	0x0437, r24
	DummyRTC_Count.Year   = 00;
     fb2:	10 92 38 04 	sts	0x0438, r1
     fb6:	08 95       	ret

00000fb8 <RTC_Tick500ms>:

void RTC_Tick500ms(void)
{
	static bool HalfSecondElapsed = false;

	HalfSecondElapsed = !HalfSecondElapsed;
     fb8:	80 91 32 04 	lds	r24, 0x0432
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	89 27       	eor	r24, r25
     fc0:	80 93 32 04 	sts	0x0432, r24
	if (HalfSecondElapsed == false)
     fc4:	88 23       	and	r24, r24
     fc6:	09 f4       	brne	.+2      	; 0xfca <RTC_Tick500ms+0x12>
     fc8:	54 c0       	rjmp	.+168    	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	if (++DummyRTC_Count.Second < 60)
     fca:	80 91 35 04 	lds	r24, 0x0435
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 35 04 	sts	0x0435, r24
     fd4:	8c 33       	cpi	r24, 0x3C	; 60
     fd6:	08 f4       	brcc	.+2      	; 0xfda <RTC_Tick500ms+0x22>
     fd8:	4c c0       	rjmp	.+152    	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	DummyRTC_Count.Second = 0;
     fda:	10 92 35 04 	sts	0x0435, r1

	if (++DummyRTC_Count.Minute < 60)
     fde:	80 91 34 04 	lds	r24, 0x0434
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 34 04 	sts	0x0434, r24
     fe8:	8c 33       	cpi	r24, 0x3C	; 60
     fea:	08 f4       	brcc	.+2      	; 0xfee <RTC_Tick500ms+0x36>
     fec:	42 c0       	rjmp	.+132    	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	DummyRTC_Count.Minute = 0;
     fee:	10 92 34 04 	sts	0x0434, r1

	if (++DummyRTC_Count.Hour < 24)
     ff2:	80 91 33 04 	lds	r24, 0x0433
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	80 93 33 04 	sts	0x0433, r24
     ffc:	88 31       	cpi	r24, 0x18	; 24
     ffe:	c8 f1       	brcs	.+114    	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	DummyRTC_Count.Hour = 0;
    1000:	10 92 33 04 	sts	0x0433, r1

	static const char MonthLength[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	uint8_t DaysInMonth = MonthLength[DummyRTC_Count.Month - 1];
    1004:	e0 91 37 04 	lds	r30, 0x0437
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	e6 5a       	subi	r30, 0xA6	; 166
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	20 81       	ld	r18, Z

	/* Check if we need to account for a leap year */
	if ((DummyRTC_Count.Month == 2) &&
    1010:	80 91 37 04 	lds	r24, 0x0437
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	a9 f4       	brne	.+42     	; 0x1042 <RTC_Tick500ms+0x8a>
	    ((!(DummyRTC_Count.Year % 400)) || ((DummyRTC_Count.Year % 100) && !(DummyRTC_Count.Year % 4))))
    1018:	80 91 38 04 	lds	r24, 0x0438
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	60 e9       	ldi	r22, 0x90	; 144
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	0e 94 de 21 	call	0x43bc	; 0x43bc <__divmodhi4>

	static const char MonthLength[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	uint8_t DaysInMonth = MonthLength[DummyRTC_Count.Month - 1];

	/* Check if we need to account for a leap year */
	if ((DummyRTC_Count.Month == 2) &&
    1026:	89 2b       	or	r24, r25
    1028:	59 f0       	breq	.+22     	; 0x1040 <RTC_Tick500ms+0x88>
	    ((!(DummyRTC_Count.Year % 400)) || ((DummyRTC_Count.Year % 100) && !(DummyRTC_Count.Year % 4))))
    102a:	80 91 38 04 	lds	r24, 0x0438
    102e:	64 e6       	ldi	r22, 0x64	; 100
    1030:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__udivmodqi4>
    1034:	99 23       	and	r25, r25
    1036:	29 f0       	breq	.+10     	; 0x1042 <RTC_Tick500ms+0x8a>
    1038:	80 91 38 04 	lds	r24, 0x0438
    103c:	83 70       	andi	r24, 0x03	; 3
    103e:	09 f4       	brne	.+2      	; 0x1042 <RTC_Tick500ms+0x8a>
	{
		DaysInMonth++;
    1040:	2f 5f       	subi	r18, 0xFF	; 255
	}

	if (++DummyRTC_Count.Day <= DaysInMonth)
    1042:	80 91 36 04 	lds	r24, 0x0436
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 36 04 	sts	0x0436, r24
    104c:	28 17       	cp	r18, r24
    104e:	88 f4       	brcc	.+34     	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	DummyRTC_Count.Day = 1;
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	90 93 36 04 	sts	0x0436, r25

	if (++DummyRTC_Count.Month <= 12)
    1056:	80 91 37 04 	lds	r24, 0x0437
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	80 93 37 04 	sts	0x0437, r24
    1060:	8d 30       	cpi	r24, 0x0D	; 13
    1062:	38 f0       	brcs	.+14     	; 0x1072 <RTC_Tick500ms+0xba>
	  return;

	DummyRTC_Count.Month = 1;
    1064:	90 93 37 04 	sts	0x0437, r25
	DummyRTC_Count.Year++;
    1068:	80 91 38 04 	lds	r24, 0x0438
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 93 38 04 	sts	0x0438, r24
    1072:	08 95       	ret

00001074 <RTC_SetTimeDate>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1074:	f8 94       	cli
}

bool RTC_SetTimeDate(const TimeDate_t* NewTimeDate)
{
	GlobalInterruptDisable();
	DummyRTC_Count = *NewTimeDate;
    1076:	26 e0       	ldi	r18, 0x06	; 6
    1078:	fc 01       	movw	r30, r24
    107a:	a3 e3       	ldi	r26, 0x33	; 51
    107c:	b4 e0       	ldi	r27, 0x04	; 4
    107e:	01 90       	ld	r0, Z+
    1080:	0d 92       	st	X+, r0
    1082:	2a 95       	dec	r18
    1084:	e1 f7       	brne	.-8      	; 0x107e <RTC_SetTimeDate+0xa>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1086:	78 94       	sei
	GlobalInterruptEnable();

	return true;
}
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret

0000108c <RTC_GetTimeDate>:
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    108c:	f8 94       	cli

bool RTC_GetTimeDate(TimeDate_t* const TimeDate)
{
	GlobalInterruptDisable();
	*TimeDate = DummyRTC_Count;
    108e:	26 e0       	ldi	r18, 0x06	; 6
    1090:	e3 e3       	ldi	r30, 0x33	; 51
    1092:	f4 e0       	ldi	r31, 0x04	; 4
    1094:	dc 01       	movw	r26, r24
    1096:	01 90       	ld	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	2a 95       	dec	r18
    109c:	e1 f7       	brne	.-8      	; 0x1096 <RTC_GetTimeDate+0xa>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    109e:	78 94       	sei
	GlobalInterruptEnable();

	return true;
}
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret

000010a4 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
    10ae:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    10b0:	48 a1       	ldd	r20, Y+32	; 0x20
    10b2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    10b4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    10b6:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    10b8:	0b a1       	ldd	r16, Y+35	; 0x23
    10ba:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
    10bc:	41 15       	cp	r20, r1
    10be:	90 e8       	ldi	r25, 0x80	; 128
    10c0:	59 07       	cpc	r21, r25
    10c2:	61 05       	cpc	r22, r1
    10c4:	71 05       	cpc	r23, r1
    10c6:	68 f0       	brcs	.+26     	; 0x10e2 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    10c8:	80 91 4b 01 	lds	r24, 0x014B
    10cc:	80 7f       	andi	r24, 0xF0	; 240
    10ce:	85 60       	ori	r24, 0x05	; 5
    10d0:	80 93 4b 01 	sts	0x014B, r24
    10d4:	81 e2       	ldi	r24, 0x21	; 33
    10d6:	80 93 55 01 	sts	0x0155, r24
    10da:	10 92 56 01 	sts	0x0156, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	1e c0       	rjmp	.+60     	; 0x111e <SCSI_Command_ReadWrite_10+0x7a>
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    10e2:	98 01       	movw	r18, r16

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    10e4:	88 23       	and	r24, r24
    10e6:	19 f0       	breq	.+6      	; 0x10ee <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    10e8:	ce 01       	movw	r24, r28
    10ea:	5c dc       	rcall	.-1864   	; 0x9a4 <DataflashManager_ReadBlocks>
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <SCSI_Command_ReadWrite_10+0x4e>
    10ee:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    10f0:	18 db       	rcall	.-2512   	; 0x722 <DataflashManager_WriteBlocks>
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    10f6:	89 e0       	ldi	r24, 0x09	; 9
    10f8:	00 0f       	add	r16, r16
    10fa:	11 1f       	adc	r17, r17
    10fc:	22 1f       	adc	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	8a 95       	dec	r24
    1102:	d1 f7       	brne	.-12     	; 0x10f8 <SCSI_Command_ReadWrite_10+0x54>
    1104:	4c 89       	ldd	r20, Y+20	; 0x14
    1106:	5d 89       	ldd	r21, Y+21	; 0x15
    1108:	6e 89       	ldd	r22, Y+22	; 0x16
    110a:	7f 89       	ldd	r23, Y+23	; 0x17
    110c:	40 1b       	sub	r20, r16
    110e:	51 0b       	sbc	r21, r17
    1110:	62 0b       	sbc	r22, r18
    1112:	73 0b       	sbc	r23, r19
    1114:	4c 8b       	std	Y+20, r20	; 0x14
    1116:	5d 8b       	std	Y+21, r21	; 0x15
    1118:	6e 8b       	std	Y+22, r22	; 0x16
    111a:	7f 8b       	std	Y+23, r23	; 0x17
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	df 91       	pop	r29

	return true;
    1120:	cf 91       	pop	r28
}
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <SCSI_DecodeSCSICommand>:
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	28 97       	sbiw	r28, 0x08	; 8
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    114a:	fc 01       	movw	r30, r24
    114c:	83 8d       	ldd	r24, Z+27	; 0x1b
    114e:	8d 31       	cpi	r24, 0x1D	; 29
    1150:	09 f4       	brne	.+2      	; 0x1154 <SCSI_DecodeSCSICommand+0x2c>
    1152:	ad c0       	rjmp	.+346    	; 0x12ae <SCSI_DecodeSCSICommand+0x186>
    1154:	90 f4       	brcc	.+36     	; 0x117a <SCSI_DecodeSCSICommand+0x52>
    1156:	82 31       	cpi	r24, 0x12	; 18
    1158:	09 f4       	brne	.+2      	; 0x115c <SCSI_DecodeSCSICommand+0x34>
    115a:	4e c0       	rjmp	.+156    	; 0x11f8 <SCSI_DecodeSCSICommand+0xd0>
    115c:	38 f4       	brcc	.+14     	; 0x116c <SCSI_DecodeSCSICommand+0x44>
    115e:	88 23       	and	r24, r24
    1160:	09 f4       	brne	.+2      	; 0x1164 <SCSI_DecodeSCSICommand+0x3c>
    1162:	e2 c0       	rjmp	.+452    	; 0x1328 <SCSI_DecodeSCSICommand+0x200>
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	09 f4       	brne	.+2      	; 0x116a <SCSI_DecodeSCSICommand+0x42>
    1168:	76 c0       	rjmp	.+236    	; 0x1256 <SCSI_DecodeSCSICommand+0x12e>
    116a:	e4 c0       	rjmp	.+456    	; 0x1334 <SCSI_DecodeSCSICommand+0x20c>
    116c:	8a 31       	cpi	r24, 0x1A	; 26
    116e:	09 f4       	brne	.+2      	; 0x1172 <SCSI_DecodeSCSICommand+0x4a>
    1170:	c0 c0       	rjmp	.+384    	; 0x12f2 <SCSI_DecodeSCSICommand+0x1ca>
    1172:	8b 31       	cpi	r24, 0x1B	; 27
    1174:	09 f4       	brne	.+2      	; 0x1178 <SCSI_DecodeSCSICommand+0x50>
    1176:	d8 c0       	rjmp	.+432    	; 0x1328 <SCSI_DecodeSCSICommand+0x200>
    1178:	dd c0       	rjmp	.+442    	; 0x1334 <SCSI_DecodeSCSICommand+0x20c>
    117a:	88 32       	cpi	r24, 0x28	; 40
    117c:	09 f4       	brne	.+2      	; 0x1180 <SCSI_DecodeSCSICommand+0x58>
    117e:	b3 c0       	rjmp	.+358    	; 0x12e6 <SCSI_DecodeSCSICommand+0x1be>
    1180:	a0 f5       	brcc	.+104    	; 0x11ea <SCSI_DecodeSCSICommand+0xc2>
    1182:	8e 31       	cpi	r24, 0x1E	; 30
    1184:	09 f4       	brne	.+2      	; 0x1188 <SCSI_DecodeSCSICommand+0x60>
    1186:	d0 c0       	rjmp	.+416    	; 0x1328 <SCSI_DecodeSCSICommand+0x200>
    1188:	85 32       	cpi	r24, 0x25	; 37
    118a:	09 f0       	breq	.+2      	; 0x118e <SCSI_DecodeSCSICommand+0x66>
    118c:	d3 c0       	rjmp	.+422    	; 0x1334 <SCSI_DecodeSCSICommand+0x20c>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f e7       	ldi	r25, 0x7F	; 127
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	af 83       	std	Y+7, r26	; 0x07
    119c:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	ab 83       	std	Y+3, r26	; 0x03
    11ac:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	64 e0       	ldi	r22, 0x04	; 4
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	ce 01       	movw	r24, r28
    11b8:	05 96       	adiw	r24, 0x05	; 5
    11ba:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <Endpoint_Write_Stream_BE>
    11ce:	80 91 e8 00 	lds	r24, 0x00E8
    11d2:	8e 77       	andi	r24, 0x7E	; 126
    11d4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    11d8:	f8 01       	movw	r30, r16
    11da:	84 89       	ldd	r24, Z+20	; 0x14
    11dc:	95 89       	ldd	r25, Z+21	; 0x15
    11de:	a6 89       	ldd	r26, Z+22	; 0x16
    11e0:	b7 89       	ldd	r27, Z+23	; 0x17
    11e2:	08 97       	sbiw	r24, 0x08	; 8
    11e4:	a1 09       	sbc	r26, r1
    11e6:	b1 09       	sbc	r27, r1
    11e8:	5d c0       	rjmp	.+186    	; 0x12a4 <SCSI_DecodeSCSICommand+0x17c>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    11ea:	8a 32       	cpi	r24, 0x2A	; 42
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <SCSI_DecodeSCSICommand+0xc8>
    11ee:	79 c0       	rjmp	.+242    	; 0x12e2 <SCSI_DecodeSCSICommand+0x1ba>
    11f0:	8f 32       	cpi	r24, 0x2F	; 47
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <SCSI_DecodeSCSICommand+0xce>
    11f4:	99 c0       	rjmp	.+306    	; 0x1328 <SCSI_DecodeSCSICommand+0x200>
    11f6:	9e c0       	rjmp	.+316    	; 0x1334 <SCSI_DecodeSCSICommand+0x20c>
    11f8:	f8 01       	movw	r30, r16
    11fa:	e7 8c       	ldd	r14, Z+31	; 0x1f
    11fc:	f6 8c       	ldd	r15, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    11fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    1200:	83 70       	andi	r24, 0x03	; 3
    1202:	09 f0       	breq	.+2      	; 0x1206 <SCSI_DecodeSCSICommand+0xde>
    1204:	58 c0       	rjmp	.+176    	; 0x12b6 <SCSI_DecodeSCSICommand+0x18e>
    1206:	85 8d       	ldd	r24, Z+29	; 0x1d
    1208:	81 11       	cpse	r24, r1
    120a:	55 c0       	rjmp	.+170    	; 0x12b6 <SCSI_DecodeSCSICommand+0x18e>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    120c:	67 01       	movw	r12, r14
    120e:	f5 e2       	ldi	r31, 0x25	; 37
    1210:	ef 16       	cp	r14, r31
    1212:	f1 04       	cpc	r15, r1
    1214:	18 f0       	brcs	.+6      	; 0x121c <SCSI_DecodeSCSICommand+0xf4>
    1216:	24 e2       	ldi	r18, 0x24	; 36
    1218:	c2 2e       	mov	r12, r18
    121a:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	b6 01       	movw	r22, r12
    1222:	87 e6       	ldi	r24, 0x67	; 103
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 b5 18 	call	0x316a	; 0x316a <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	c7 01       	movw	r24, r14
    1230:	8c 19       	sub	r24, r12
    1232:	9d 09       	sbc	r25, r13
    1234:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Endpoint_Null_Stream>
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	8e 77       	andi	r24, 0x7E	; 126
    123e:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1242:	f8 01       	movw	r30, r16
    1244:	84 89       	ldd	r24, Z+20	; 0x14
    1246:	95 89       	ldd	r25, Z+21	; 0x15
    1248:	a6 89       	ldd	r26, Z+22	; 0x16
    124a:	b7 89       	ldd	r27, Z+23	; 0x17
    124c:	8c 19       	sub	r24, r12
    124e:	9d 09       	sbc	r25, r13
    1250:	a1 09       	sbc	r26, r1
    1252:	b1 09       	sbc	r27, r1
    1254:	27 c0       	rjmp	.+78     	; 0x12a4 <SCSI_DecodeSCSICommand+0x17c>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    1256:	f8 01       	movw	r30, r16
    1258:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    125a:	dc 2c       	mov	r13, r12
    125c:	f2 e1       	ldi	r31, 0x12	; 18
    125e:	fc 15       	cp	r31, r12
    1260:	10 f4       	brcc	.+4      	; 0x1266 <SCSI_DecodeSCSICommand+0x13e>
    1262:	92 e1       	ldi	r25, 0x12	; 18
    1264:	d9 2e       	mov	r13, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    1266:	ed 2c       	mov	r14, r13
    1268:	f1 2c       	mov	r15, r1
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	b7 01       	movw	r22, r14
    1270:	89 e4       	ldi	r24, 0x49	; 73
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	0e 94 b5 18 	call	0x316a	; 0x316a <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    1278:	8c 2d       	mov	r24, r12
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	8e 19       	sub	r24, r14
    1282:	9f 09       	sbc	r25, r15
    1284:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Endpoint_Null_Stream>
    1288:	80 91 e8 00 	lds	r24, 0x00E8
    128c:	8e 77       	andi	r24, 0x7E	; 126
    128e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1292:	f8 01       	movw	r30, r16
    1294:	84 89       	ldd	r24, Z+20	; 0x14
    1296:	95 89       	ldd	r25, Z+21	; 0x15
    1298:	a6 89       	ldd	r26, Z+22	; 0x16
    129a:	b7 89       	ldd	r27, Z+23	; 0x17
    129c:	8d 19       	sub	r24, r13
    129e:	91 09       	sbc	r25, r1
    12a0:	a1 09       	sbc	r26, r1
    12a2:	b1 09       	sbc	r27, r1
    12a4:	84 8b       	std	Z+20, r24	; 0x14
    12a6:	95 8b       	std	Z+21, r25	; 0x15
    12a8:	a6 8b       	std	Z+22, r26	; 0x16
    12aa:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
    12ac:	4d c0       	rjmp	.+154    	; 0x1348 <SCSI_DecodeSCSICommand+0x220>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    12ae:	f8 01       	movw	r30, r16
    12b0:	84 8d       	ldd	r24, Z+28	; 0x1c
    12b2:	82 fd       	sbrc	r24, 2
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <SCSI_DecodeSCSICommand+0x19e>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    12b6:	80 91 4b 01 	lds	r24, 0x014B
    12ba:	80 7f       	andi	r24, 0xF0	; 240
    12bc:	85 60       	ori	r24, 0x05	; 5
    12be:	80 93 4b 01 	sts	0x014B, r24
    12c2:	84 e2       	ldi	r24, 0x24	; 36
    12c4:	3e c0       	rjmp	.+124    	; 0x1342 <SCSI_DecodeSCSICommand+0x21a>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    12c6:	41 de       	rcall	.-894    	; 0xf4a <DataflashManager_CheckDataflashOperation>
    12c8:	81 11       	cpse	r24, r1
    12ca:	2e c0       	rjmp	.+92     	; 0x1328 <SCSI_DecodeSCSICommand+0x200>
    12cc:	80 91 4b 01 	lds	r24, 0x014B
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    12d0:	80 7f       	andi	r24, 0xF0	; 240
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	80 93 4b 01 	sts	0x014B, r24
    12d8:	10 92 55 01 	sts	0x0155, r1
    12dc:	10 92 56 01 	sts	0x0156, r1
    12e0:	3e c0       	rjmp	.+124    	; 0x135e <SCSI_DecodeSCSICommand+0x236>
    12e2:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <SCSI_DecodeSCSICommand+0x1c0>
    12e6:	61 e0       	ldi	r22, 0x01	; 1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    12e8:	c8 01       	movw	r24, r16
    12ea:	dc de       	rcall	.-584    	; 0x10a4 <SCSI_Command_ReadWrite_10>
    12ec:	88 23       	and	r24, r24
    12ee:	b9 f1       	breq	.+110    	; 0x135e <SCSI_DecodeSCSICommand+0x236>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    12f0:	2b c0       	rjmp	.+86     	; 0x1348 <SCSI_DecodeSCSICommand+0x220>
    12f2:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12f6:	10 92 f1 00 	sts	0x00F1, r1
    12fa:	10 92 f1 00 	sts	0x00F1, r1
    12fe:	10 92 f1 00 	sts	0x00F1, r1
    1302:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1306:	8e 77       	andi	r24, 0x7E	; 126
    1308:	80 93 e8 00 	sts	0x00E8, r24
    130c:	f8 01       	movw	r30, r16
    130e:	44 89       	ldd	r20, Z+20	; 0x14
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    1310:	55 89       	ldd	r21, Z+21	; 0x15
    1312:	66 89       	ldd	r22, Z+22	; 0x16
    1314:	77 89       	ldd	r23, Z+23	; 0x17
    1316:	44 50       	subi	r20, 0x04	; 4
    1318:	51 09       	sbc	r21, r1
    131a:	61 09       	sbc	r22, r1
    131c:	71 09       	sbc	r23, r1
    131e:	44 8b       	std	Z+20, r20	; 0x14
    1320:	55 8b       	std	Z+21, r21	; 0x15
    1322:	66 8b       	std	Z+22, r22	; 0x16
    1324:	77 8b       	std	Z+23, r23	; 0x17
    1326:	10 c0       	rjmp	.+32     	; 0x1348 <SCSI_DecodeSCSICommand+0x220>
    1328:	f8 01       	movw	r30, r16
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    132a:	14 8a       	std	Z+20, r1	; 0x14
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    132c:	15 8a       	std	Z+21, r1	; 0x15
    132e:	16 8a       	std	Z+22, r1	; 0x16
    1330:	17 8a       	std	Z+23, r1	; 0x17
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <SCSI_DecodeSCSICommand+0x220>
    1334:	80 91 4b 01 	lds	r24, 0x014B
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1338:	80 7f       	andi	r24, 0xF0	; 240
    133a:	85 60       	ori	r24, 0x05	; 5
    133c:	80 93 4b 01 	sts	0x014B, r24
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	80 93 55 01 	sts	0x0155, r24
    1346:	ca cf       	rjmp	.-108    	; 0x12dc <SCSI_DecodeSCSICommand+0x1b4>
    1348:	80 91 4b 01 	lds	r24, 0x014B
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    134c:	80 7f       	andi	r24, 0xF0	; 240
    134e:	80 93 4b 01 	sts	0x014B, r24
    1352:	10 92 55 01 	sts	0x0155, r1
    1356:	10 92 56 01 	sts	0x0156, r1
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <SCSI_DecodeSCSICommand+0x238>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	28 96       	adiw	r28, 0x08	; 8
	}

	return false;
    1362:	0f b6       	in	r0, 0x3f	; 63
}
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	08 95       	ret

0000137e <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	08 95       	ret

00001382 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret

00001386 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..128) */
)
{
    1386:	0f 93       	push	r16
    1388:	fb 01       	movw	r30, r22
    138a:	ca 01       	movw	r24, r20
    138c:	b9 01       	movw	r22, r18
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    138e:	40 2f       	mov	r20, r16
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	9f 01       	movw	r18, r30
    1394:	f3 dc       	rcall	.-1562   	; 0xd7c <DataflashManager_ReadBlocks_RAM>
    1396:	80 e0       	ldi	r24, 0x00	; 0
	return RES_OK;
}
    1398:	0f 91       	pop	r16
    139a:	08 95       	ret

0000139c <disk_write>:
    139c:	0f 93       	push	r16
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..128) */
)
{
    139e:	fb 01       	movw	r30, r22
    13a0:	ca 01       	movw	r24, r20
    13a2:	b9 01       	movw	r22, r18
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    13a4:	40 2f       	mov	r20, r16
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	9f 01       	movw	r18, r30
    13aa:	0d dc       	rcall	.-2022   	; 0xbc6 <DataflashManager_WriteBlocks_RAM>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
	return RES_OK;
}
    13ae:	0f 91       	pop	r16
    13b0:	08 95       	ret

000013b2 <disk_ioctl>:
    13b2:	61 11       	cpse	r22, r1
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <disk_ioctl+0x8>
	  return RES_OK;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret
	else
	  return RES_PARERR;
    13ba:	84 e0       	ldi	r24, 0x04	; 4
}
    13bc:	08 95       	ret

000013be <get_fattime>:


DWORD get_fattime (void)
{
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <get_fattime+0xa>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <get_fattime+0xc>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <get_fattime+0xe>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	RTC_GetTimeDate(&CurrTimeDate);
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	5b de       	rcall	.-842    	; 0x108c <RTC_GetTimeDate>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    13d8:	6d 81       	ldd	r22, Y+5	; 0x05

	RTC_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	35 e1       	ldi	r19, 0x15	; 21
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	3a 95       	dec	r19
    13ec:	d1 f7       	brne	.-12     	; 0x13e2 <get_fattime+0x24>
    13ee:	82 2b       	or	r24, r18
	TimeDate_t CurrTimeDate;

	RTC_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    13f0:	09 81       	ldd	r16, Y+1	; 0x01
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4b e0       	ldi	r20, 0x0B	; 11
    13fa:	00 0f       	add	r16, r16
    13fc:	11 1f       	adc	r17, r17
    13fe:	22 1f       	adc	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	4a 95       	dec	r20
    1404:	d1 f7       	brne	.-12     	; 0x13fa <get_fattime+0x3c>
    1406:	60 2b       	or	r22, r16

	RTC_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    1408:	71 2b       	or	r23, r17
    140a:	82 2b       	or	r24, r18
    140c:	93 2b       	or	r25, r19
    140e:	0a 81       	ldd	r16, Y+2	; 0x02
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
    1410:	10 e0       	ldi	r17, 0x00	; 0
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	55 e0       	ldi	r21, 0x05	; 5
    1418:	00 0f       	add	r16, r16
    141a:	11 1f       	adc	r17, r17
    141c:	22 1f       	adc	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	5a 95       	dec	r21
    1422:	d1 f7       	brne	.-12     	; 0x1418 <get_fattime+0x5a>
    1424:	60 2b       	or	r22, r16
	RTC_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    1426:	71 2b       	or	r23, r17
    1428:	82 2b       	or	r24, r18
    142a:	93 2b       	or	r25, r19
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
    142e:	26 95       	lsr	r18
    1430:	62 2b       	or	r22, r18


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    1432:	0e 81       	ldd	r16, Y+6	; 0x06
	TimeDate_t CurrTimeDate;

	RTC_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	0c 5e       	subi	r16, 0xEC	; 236
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	22 27       	eor	r18, r18
    143c:	17 fd       	sbrc	r17, 7
    143e:	20 95       	com	r18
    1440:	32 2f       	mov	r19, r18
    1442:	e9 e1       	ldi	r30, 0x19	; 25
    1444:	00 0f       	add	r16, r16
    1446:	11 1f       	adc	r17, r17
    1448:	22 1f       	adc	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	ea 95       	dec	r30
    144e:	d1 f7       	brne	.-12     	; 0x1444 <get_fattime+0x86>
    1450:	60 2b       	or	r22, r16
    1452:	71 2b       	or	r23, r17
    1454:	82 2b       	or	r24, r18
    1456:	93 2b       	or	r25, r19
    1458:	26 96       	adiw	r28, 0x06	; 6
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	db 01       	movw	r26, r22
	BYTE *d = (BYTE*)dst;
    1474:	fc 01       	movw	r30, r24
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    1476:	9a 01       	movw	r18, r20
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	38 f0       	brcs	.+14     	; 0x148c <mem_cpy+0x1e>
		*(int*)d = *(int*)s;
    147e:	cd 91       	ld	r28, X+
    1480:	dd 91       	ld	r29, X+
    1482:	c1 93       	st	Z+, r28
    1484:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    1486:	22 50       	subi	r18, 0x02	; 2
    1488:	31 09       	sbc	r19, r1
    148a:	f6 cf       	rjmp	.-20     	; 0x1478 <mem_cpy+0xa>
    148c:	da 01       	movw	r26, r20
    148e:	ae 7f       	andi	r26, 0xFE	; 254
    1490:	fb 01       	movw	r30, r22
    1492:	ea 0f       	add	r30, r26
    1494:	fb 1f       	adc	r31, r27
    1496:	a8 0f       	add	r26, r24
    1498:	b9 1f       	adc	r27, r25
    149a:	41 70       	andi	r20, 0x01	; 1
    149c:	55 27       	eor	r21, r21
    149e:	4e 0f       	add	r20, r30
    14a0:	5f 1f       	adc	r21, r31
	}
#endif
	while (cnt--)
    14a2:	e4 17       	cp	r30, r20
    14a4:	f5 07       	cpc	r31, r21
    14a6:	19 f0       	breq	.+6      	; 0x14ae <mem_cpy+0x40>
		*d++ = *s++;
    14a8:	81 91       	ld	r24, Z+
    14aa:	8d 93       	st	X+, r24
    14ac:	fa cf       	rjmp	.-12     	; 0x14a2 <mem_cpy+0x34>
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    14b4:	4f 92       	push	r4
    14b6:	5f 92       	push	r5
    14b8:	6f 92       	push	r6
    14ba:	7f 92       	push	r7
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	2a 01       	movw	r4, r20
    14d4:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    14d6:	ca a4       	ldd	r12, Y+42	; 0x2a
    14d8:	db a4       	ldd	r13, Y+43	; 0x2b
    14da:	ec a4       	ldd	r14, Y+44	; 0x2c
    14dc:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    14de:	c4 16       	cp	r12, r20
    14e0:	d5 06       	cpc	r13, r21
    14e2:	e6 06       	cpc	r14, r22
    14e4:	f7 06       	cpc	r15, r23
    14e6:	11 f4       	brne	.+4      	; 0x14ec <move_window+0x38>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	4a c0       	rjmp	.+148    	; 0x1580 <move_window+0xcc>


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	81 11       	cpse	r24, r1
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <move_window+0x4a>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    14f2:	41 14       	cp	r4, r1
    14f4:	51 04       	cpc	r5, r1
    14f6:	61 04       	cpc	r6, r1
    14f8:	71 04       	cpc	r7, r1
    14fa:	b1 f3       	breq	.-20     	; 0x14e8 <move_window+0x34>
    14fc:	33 c0       	rjmp	.+102    	; 0x1564 <move_window+0xb0>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    14fe:	5e 01       	movw	r10, r28
    1500:	8e e2       	ldi	r24, 0x2E	; 46
    1502:	a8 0e       	add	r10, r24
    1504:	b1 1c       	adc	r11, r1
    1506:	01 e0       	ldi	r16, 0x01	; 1
    1508:	a7 01       	movw	r20, r14
    150a:	96 01       	movw	r18, r12
    150c:	b5 01       	movw	r22, r10
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	45 df       	rcall	.-374    	; 0x139c <disk_write>
    1512:	88 23       	and	r24, r24
    1514:	11 f0       	breq	.+4      	; 0x151a <move_window+0x66>
    1516:	81 e0       	ldi	r24, 0x01	; 1
				return FR_DISK_ERR;
    1518:	33 c0       	rjmp	.+102    	; 0x1580 <move_window+0xcc>
    151a:	1c 82       	std	Y+4, r1	; 0x04
			fs->wflag = 0;
    151c:	8a 8d       	ldd	r24, Y+26	; 0x1a
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    151e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1520:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1522:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1524:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1526:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1528:	68 a1       	ldd	r22, Y+32	; 0x20
    152a:	79 a1       	ldd	r23, Y+33	; 0x21
    152c:	84 0f       	add	r24, r20
    152e:	95 1f       	adc	r25, r21
    1530:	a6 1f       	adc	r26, r22
    1532:	b7 1f       	adc	r27, r23
    1534:	c8 16       	cp	r12, r24
    1536:	d9 06       	cpc	r13, r25
    1538:	ea 06       	cpc	r14, r26
    153a:	fb 06       	cpc	r15, r27
    153c:	d0 f6       	brcc	.-76     	; 0x14f2 <move_window+0x3e>
    153e:	1b 81       	ldd	r17, Y+3	; 0x03
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1540:	12 30       	cpi	r17, 0x02	; 2
    1542:	b8 f2       	brcs	.-82     	; 0x14f2 <move_window+0x3e>
    1544:	8a 8d       	ldd	r24, Y+26	; 0x1a
					wsect += fs->fsize;
    1546:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1548:	ac 8d       	ldd	r26, Y+28	; 0x1c
    154a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    154c:	c8 0e       	add	r12, r24
    154e:	d9 1e       	adc	r13, r25
    1550:	ea 1e       	adc	r14, r26
    1552:	fb 1e       	adc	r15, r27
    1554:	01 e0       	ldi	r16, 0x01	; 1
					disk_write(fs->drv, fs->win, wsect, 1);
    1556:	a7 01       	movw	r20, r14
    1558:	96 01       	movw	r18, r12
    155a:	b5 01       	movw	r22, r10
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	1e df       	rcall	.-452    	; 0x139c <disk_write>
    1560:	11 50       	subi	r17, 0x01	; 1
    1562:	ee cf       	rjmp	.-36     	; 0x1540 <move_window+0x8c>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1564:	01 e0       	ldi	r16, 0x01	; 1
    1566:	a3 01       	movw	r20, r6
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1568:	92 01       	movw	r18, r4
    156a:	be 01       	movw	r22, r28
    156c:	62 5d       	subi	r22, 0xD2	; 210
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	09 df       	rcall	.-494    	; 0x1386 <disk_read>
    1574:	81 11       	cpse	r24, r1
    1576:	cf cf       	rjmp	.-98     	; 0x1516 <move_window+0x62>
    1578:	4a a6       	std	Y+42, r4	; 0x2a
    157a:	5b a6       	std	Y+43, r5	; 0x2b
    157c:	6c a6       	std	Y+44, r6	; 0x2c
				return FR_DISK_ERR;
			fs->winsect = sector;
    157e:	7d a6       	std	Y+45, r7	; 0x2d
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
		}
	}

	return FR_OK;
}
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	08 95       	ret

0000159e <check_fs>:
    159e:	0f 93       	push	r16
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    15a4:	ec 01       	movw	r28, r24
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    15a6:	8e 96       	adiw	r24, 0x2e	; 46
    15a8:	01 e0       	ldi	r16, 0x01	; 1
    15aa:	9a 01       	movw	r18, r20
    15ac:	ab 01       	movw	r20, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	e9 de       	rcall	.-558    	; 0x1386 <disk_read>
    15b4:	81 11       	cpse	r24, r1
    15b6:	23 c0       	rjmp	.+70     	; 0x15fe <check_fs+0x60>
    15b8:	fe 01       	movw	r30, r28
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    15ba:	e4 5d       	subi	r30, 0xD4	; 212
    15bc:	fd 4f       	sbci	r31, 0xFD	; 253
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	85 35       	cpi	r24, 0x55	; 85
    15c4:	9a 4a       	sbci	r25, 0xAA	; 170
    15c6:	e9 f4       	brne	.+58     	; 0x1602 <check_fs+0x64>
    15c8:	fe 01       	movw	r30, r28
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    15ca:	ec 59       	subi	r30, 0x9C	; 156
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	40 81       	ld	r20, Z
    15d0:	51 81       	ldd	r21, Z+1	; 0x01
    15d2:	62 81       	ldd	r22, Z+2	; 0x02
    15d4:	73 81       	ldd	r23, Z+3	; 0x03
    15d6:	77 27       	eor	r23, r23
    15d8:	46 34       	cpi	r20, 0x46	; 70
    15da:	51 44       	sbci	r21, 0x41	; 65
    15dc:	64 45       	sbci	r22, 0x54	; 84
    15de:	71 05       	cpc	r23, r1
    15e0:	91 f0       	breq	.+36     	; 0x1606 <check_fs+0x68>
    15e2:	c0 58       	subi	r28, 0x80	; 128
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    15e4:	df 4f       	sbci	r29, 0xFF	; 255
    15e6:	48 81       	ld	r20, Y
    15e8:	59 81       	ldd	r21, Y+1	; 0x01
    15ea:	6a 81       	ldd	r22, Y+2	; 0x02
    15ec:	7b 81       	ldd	r23, Y+3	; 0x03
    15ee:	77 27       	eor	r23, r23
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	46 34       	cpi	r20, 0x46	; 70
    15f4:	51 44       	sbci	r21, 0x41	; 65
    15f6:	64 45       	sbci	r22, 0x54	; 84
    15f8:	71 05       	cpc	r23, r1
    15fa:	31 f4       	brne	.+12     	; 0x1608 <check_fs+0x6a>
    15fc:	04 c0       	rjmp	.+8      	; 0x1606 <check_fs+0x68>
    15fe:	83 e0       	ldi	r24, 0x03	; 3
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <check_fs+0x6a>
    1602:	82 e0       	ldi	r24, 0x02	; 2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <check_fs+0x6a>
    1606:	80 e0       	ldi	r24, 0x00	; 0

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    1608:	df 91       	pop	r29
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    160a:	cf 91       	pop	r28
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <validate>:
    1610:	dc 01       	movw	r26, r24
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    1612:	ed 91       	ld	r30, X+
    1614:	fc 91       	ld	r31, X
    1616:	11 97       	sbiw	r26, 0x01	; 1
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	91 f0       	breq	.+36     	; 0x1640 <validate+0x30>
    161c:	20 81       	ld	r18, Z
    161e:	22 23       	and	r18, r18
    1620:	79 f0       	breq	.+30     	; 0x1640 <validate+0x30>
    1622:	26 81       	ldd	r18, Z+6	; 0x06
    1624:	37 81       	ldd	r19, Z+7	; 0x07
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	13 97       	sbiw	r26, 0x03	; 3
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	31 f4       	brne	.+12     	; 0x1640 <validate+0x30>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    1634:	81 81       	ldd	r24, Z+1	; 0x01
    1636:	a5 de       	rcall	.-694    	; 0x1382 <disk_status>
    1638:	80 ff       	sbrs	r24, 0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <validate+0x34>
    163c:	83 e0       	ldi	r24, 0x03	; 3
		return FR_NOT_READY;
    163e:	08 95       	ret
    1640:	89 e0       	ldi	r24, 0x09	; 9
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    1642:	08 95       	ret
    1644:	80 e0       	ldi	r24, 0x00	; 0
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    1646:	08 95       	ret

00001648 <clust2sect>:
}
    1648:	0f 93       	push	r16

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    164a:	1f 93       	push	r17
    164c:	fc 01       	movw	r30, r24
	clst -= 2;
    164e:	42 50       	subi	r20, 0x02	; 2
    1650:	51 09       	sbc	r21, r1
    1652:	61 09       	sbc	r22, r1
    1654:	71 09       	sbc	r23, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1656:	06 89       	ldd	r16, Z+22	; 0x16
    1658:	17 89       	ldd	r17, Z+23	; 0x17
    165a:	20 8d       	ldd	r18, Z+24	; 0x18
    165c:	31 8d       	ldd	r19, Z+25	; 0x19
    165e:	02 50       	subi	r16, 0x02	; 2
    1660:	11 09       	sbc	r17, r1
    1662:	21 09       	sbc	r18, r1
    1664:	31 09       	sbc	r19, r1
    1666:	40 17       	cp	r20, r16
    1668:	51 07       	cpc	r21, r17
    166a:	62 07       	cpc	r22, r18
    166c:	73 07       	cpc	r23, r19
    166e:	78 f4       	brcc	.+30     	; 0x168e <clust2sect+0x46>
	return clst * fs->csize + fs->database;
    1670:	a2 81       	ldd	r26, Z+2	; 0x02
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	9a 01       	movw	r18, r20
    1676:	ab 01       	movw	r20, r22
    1678:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
    167c:	06 a1       	ldd	r16, Z+38	; 0x26
    167e:	17 a1       	ldd	r17, Z+39	; 0x27
    1680:	20 a5       	ldd	r18, Z+40	; 0x28
    1682:	31 a5       	ldd	r19, Z+41	; 0x29
    1684:	60 0f       	add	r22, r16
    1686:	71 1f       	adc	r23, r17
    1688:	82 1f       	adc	r24, r18
    168a:	93 1f       	adc	r25, r19
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <clust2sect+0x4c>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
    16ae:	6a 01       	movw	r12, r20
    16b0:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    16b2:	42 30       	cpi	r20, 0x02	; 2
    16b4:	51 05       	cpc	r21, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	71 05       	cpc	r23, r1
    16ba:	08 f4       	brcc	.+2      	; 0x16be <get_fat+0x24>
    16bc:	9d c0       	rjmp	.+314    	; 0x17f8 <get_fat+0x15e>
    16be:	8e 89       	ldd	r24, Y+22	; 0x16
    16c0:	9f 89       	ldd	r25, Y+23	; 0x17
    16c2:	a8 8d       	ldd	r26, Y+24	; 0x18
    16c4:	b9 8d       	ldd	r27, Y+25	; 0x19
    16c6:	48 17       	cp	r20, r24
    16c8:	59 07       	cpc	r21, r25
    16ca:	6a 07       	cpc	r22, r26
    16cc:	7b 07       	cpc	r23, r27
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <get_fat+0x38>
    16d0:	93 c0       	rjmp	.+294    	; 0x17f8 <get_fat+0x15e>
		return 1;

	switch (fs->fs_type) {
    16d2:	88 81       	ld	r24, Y
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	09 f4       	brne	.+2      	; 0x16da <get_fat+0x40>
    16d8:	46 c0       	rjmp	.+140    	; 0x1766 <get_fat+0xcc>
    16da:	83 30       	cpi	r24, 0x03	; 3
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <get_fat+0x46>
    16de:	63 c0       	rjmp	.+198    	; 0x17a6 <get_fat+0x10c>
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <get_fat+0x4c>
    16e4:	8e c0       	rjmp	.+284    	; 0x1802 <get_fat+0x168>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    16e6:	8a 01       	movw	r16, r20
    16e8:	16 95       	lsr	r17
    16ea:	07 95       	ror	r16
    16ec:	0c 0d       	add	r16, r12
    16ee:	1d 1d       	adc	r17, r13
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    16f0:	c8 01       	movw	r24, r16
    16f2:	89 2f       	mov	r24, r25
    16f4:	99 27       	eor	r25, r25
    16f6:	86 95       	lsr	r24
    16f8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    16fa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    16fc:	68 a1       	ldd	r22, Y+32	; 0x20
    16fe:	79 a1       	ldd	r23, Y+33	; 0x21
    1700:	48 0f       	add	r20, r24
    1702:	59 1f       	adc	r21, r25
    1704:	61 1d       	adc	r22, r1
    1706:	71 1d       	adc	r23, r1
    1708:	ce 01       	movw	r24, r28
    170a:	d4 de       	rcall	.-600    	; 0x14b4 <move_window>
    170c:	81 11       	cpse	r24, r1
    170e:	79 c0       	rjmp	.+242    	; 0x1802 <get_fat+0x168>
    1710:	f8 01       	movw	r30, r16
		wc = fs->win[bc % SS(fs)]; bc++;
    1712:	f1 70       	andi	r31, 0x01	; 1
    1714:	ec 0f       	add	r30, r28
    1716:	fd 1f       	adc	r31, r29
    1718:	b6 a4       	ldd	r11, Z+46	; 0x2e
    171a:	0f 5f       	subi	r16, 0xFF	; 255
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	c8 01       	movw	r24, r16
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1720:	89 2f       	mov	r24, r25
    1722:	99 27       	eor	r25, r25
    1724:	86 95       	lsr	r24
    1726:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1728:	5f 8d       	ldd	r21, Y+31	; 0x1f
    172a:	68 a1       	ldd	r22, Y+32	; 0x20
    172c:	79 a1       	ldd	r23, Y+33	; 0x21
    172e:	48 0f       	add	r20, r24
    1730:	59 1f       	adc	r21, r25
    1732:	61 1d       	adc	r22, r1
    1734:	71 1d       	adc	r23, r1
    1736:	ce 01       	movw	r24, r28
    1738:	bd de       	rcall	.-646    	; 0x14b4 <move_window>
    173a:	81 11       	cpse	r24, r1
    173c:	62 c0       	rjmp	.+196    	; 0x1802 <get_fat+0x168>
    173e:	f8 01       	movw	r30, r16
    1740:	f1 70       	andi	r31, 0x01	; 1
		wc |= fs->win[bc % SS(fs)] << 8;
    1742:	ec 0f       	add	r30, r28
    1744:	fd 1f       	adc	r31, r29
    1746:	86 a5       	ldd	r24, Z+46	; 0x2e
    1748:	6b 2d       	mov	r22, r11
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	78 2b       	or	r23, r24
    174e:	c0 fe       	sbrs	r12, 0
    1750:	06 c0       	rjmp	.+12     	; 0x175e <get_fat+0xc4>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1752:	44 e0       	ldi	r20, 0x04	; 4
    1754:	76 95       	lsr	r23
    1756:	67 95       	ror	r22
    1758:	4a 95       	dec	r20
    175a:	e1 f7       	brne	.-8      	; 0x1754 <get_fat+0xba>
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <get_fat+0xc6>
    175e:	7f 70       	andi	r23, 0x0F	; 15
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	51 c0       	rjmp	.+162    	; 0x1808 <get_fat+0x16e>
    1766:	45 2f       	mov	r20, r21
    1768:	56 2f       	mov	r21, r22

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    176a:	67 2f       	mov	r22, r23
    176c:	77 27       	eor	r23, r23
    176e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1770:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1772:	a8 a1       	ldd	r26, Y+32	; 0x20
    1774:	b9 a1       	ldd	r27, Y+33	; 0x21
    1776:	48 0f       	add	r20, r24
    1778:	59 1f       	adc	r21, r25
    177a:	6a 1f       	adc	r22, r26
    177c:	7b 1f       	adc	r23, r27
    177e:	ce 01       	movw	r24, r28
    1780:	99 de       	rcall	.-718    	; 0x14b4 <move_window>
    1782:	81 11       	cpse	r24, r1
    1784:	3e c0       	rjmp	.+124    	; 0x1802 <get_fat+0x168>
    1786:	cc 0c       	add	r12, r12
    1788:	dd 1c       	adc	r13, r13
    178a:	ee 1c       	adc	r14, r14
		p = &fs->win[clst * 2 % SS(fs)];
    178c:	ff 1c       	adc	r15, r15
    178e:	e8 94       	clt
    1790:	c0 f8       	bld	r12, 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	d8 22       	and	r13, r24
    1796:	ee 24       	eor	r14, r14
    1798:	ff 24       	eor	r15, r15
    179a:	fe 01       	movw	r30, r28
    179c:	ec 0d       	add	r30, r12
    179e:	fd 1d       	adc	r31, r13
		return LD_WORD(p);
    17a0:	66 a5       	ldd	r22, Z+46	; 0x2e
    17a2:	77 a5       	ldd	r23, Z+47	; 0x2f
    17a4:	dd cf       	rjmp	.-70     	; 0x1760 <get_fat+0xc6>
    17a6:	97 e0       	ldi	r25, 0x07	; 7
    17a8:	76 95       	lsr	r23
    17aa:	67 95       	ror	r22

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    17ac:	57 95       	ror	r21
    17ae:	47 95       	ror	r20
    17b0:	9a 95       	dec	r25
    17b2:	d1 f7       	brne	.-12     	; 0x17a8 <get_fat+0x10e>
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b8:	a8 a1       	ldd	r26, Y+32	; 0x20
    17ba:	b9 a1       	ldd	r27, Y+33	; 0x21
    17bc:	48 0f       	add	r20, r24
    17be:	59 1f       	adc	r21, r25
    17c0:	6a 1f       	adc	r22, r26
    17c2:	7b 1f       	adc	r23, r27
    17c4:	ce 01       	movw	r24, r28
    17c6:	76 de       	rcall	.-788    	; 0x14b4 <move_window>
    17c8:	81 11       	cpse	r24, r1
    17ca:	1b c0       	rjmp	.+54     	; 0x1802 <get_fat+0x168>
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	cc 0c       	add	r12, r12
    17d0:	dd 1c       	adc	r13, r13
    17d2:	ee 1c       	adc	r14, r14
		p = &fs->win[clst * 4 % SS(fs)];
    17d4:	ff 1c       	adc	r15, r15
    17d6:	8a 95       	dec	r24
    17d8:	d1 f7       	brne	.-12     	; 0x17ce <get_fat+0x134>
    17da:	8c ef       	ldi	r24, 0xFC	; 252
    17dc:	c8 22       	and	r12, r24
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	d8 22       	and	r13, r24
    17e2:	ee 24       	eor	r14, r14
    17e4:	ff 24       	eor	r15, r15
    17e6:	fe 01       	movw	r30, r28
    17e8:	ec 0d       	add	r30, r12
    17ea:	fd 1d       	adc	r31, r13
    17ec:	66 a5       	ldd	r22, Z+46	; 0x2e
		return LD_DWORD(p) & 0x0FFFFFFF;
    17ee:	77 a5       	ldd	r23, Z+47	; 0x2f
    17f0:	80 a9       	ldd	r24, Z+48	; 0x30
    17f2:	91 a9       	ldd	r25, Z+49	; 0x31
    17f4:	9f 70       	andi	r25, 0x0F	; 15
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <get_fat+0x16e>
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <get_fat+0x16e>
    1802:	6f ef       	ldi	r22, 0xFF	; 255
    1804:	7f ef       	ldi	r23, 0xFF	; 255
    1806:	cb 01       	movw	r24, r22
    1808:	df 91       	pop	r29
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
}
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	08 95       	ret

0000181c <dir_sdi.constprop.2>:
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
    1824:	ec 01       	movw	r28, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1826:	1d 82       	std	Y+5, r1	; 0x05
    1828:	1c 82       	std	Y+4, r1	; 0x04
	clst = dj->sclust;
    182a:	4e 81       	ldd	r20, Y+6	; 0x06
    182c:	5f 81       	ldd	r21, Y+7	; 0x07
    182e:	68 85       	ldd	r22, Y+8	; 0x08
    1830:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1832:	41 30       	cpi	r20, 0x01	; 1
    1834:	51 05       	cpc	r21, r1
    1836:	61 05       	cpc	r22, r1
    1838:	71 05       	cpc	r23, r1
    183a:	11 f4       	brne	.+4      	; 0x1840 <dir_sdi.constprop.2+0x24>
		return FR_INT_ERR;
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	61 c0       	rjmp	.+194    	; 0x1902 <dir_sdi.constprop.2+0xe6>
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1840:	08 81       	ld	r16, Y
    1842:	19 81       	ldd	r17, Y+1	; 0x01
    1844:	f8 01       	movw	r30, r16
    1846:	86 89       	ldd	r24, Z+22	; 0x16
    1848:	97 89       	ldd	r25, Z+23	; 0x17
    184a:	a0 8d       	ldd	r26, Z+24	; 0x18
    184c:	b1 8d       	ldd	r27, Z+25	; 0x19
    184e:	48 17       	cp	r20, r24
    1850:	59 07       	cpc	r21, r25
    1852:	6a 07       	cpc	r22, r26
    1854:	7b 07       	cpc	r23, r27
    1856:	90 f7       	brcc	.-28     	; 0x183c <dir_sdi.constprop.2+0x20>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1858:	41 15       	cp	r20, r1
    185a:	51 05       	cpc	r21, r1
    185c:	61 05       	cpc	r22, r1
    185e:	71 05       	cpc	r23, r1
    1860:	f1 f4       	brne	.+60     	; 0x189e <dir_sdi.constprop.2+0x82>
    1862:	80 81       	ld	r24, Z
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	49 f4       	brne	.+18     	; 0x187a <dir_sdi.constprop.2+0x5e>
		clst = dj->fs->dirbase;
    1868:	42 a1       	ldd	r20, Z+34	; 0x22
    186a:	53 a1       	ldd	r21, Z+35	; 0x23
    186c:	64 a1       	ldd	r22, Z+36	; 0x24
    186e:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1870:	41 15       	cp	r20, r1
    1872:	51 05       	cpc	r21, r1
    1874:	61 05       	cpc	r22, r1
    1876:	71 05       	cpc	r23, r1
    1878:	91 f4       	brne	.+36     	; 0x189e <dir_sdi.constprop.2+0x82>
		dj->clust = clst;
    187a:	1a 86       	std	Y+10, r1	; 0x0a
    187c:	1b 86       	std	Y+11, r1	; 0x0b
    187e:	1c 86       	std	Y+12, r1	; 0x0c
    1880:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1882:	f8 01       	movw	r30, r16
    1884:	80 85       	ldd	r24, Z+8	; 0x08
    1886:	91 85       	ldd	r25, Z+9	; 0x09
    1888:	89 2b       	or	r24, r25
    188a:	c1 f2       	breq	.-80     	; 0x183c <dir_sdi.constprop.2+0x20>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    188c:	82 a1       	ldd	r24, Z+34	; 0x22
    188e:	93 a1       	ldd	r25, Z+35	; 0x23
    1890:	a4 a1       	ldd	r26, Z+36	; 0x24
    1892:	b5 a1       	ldd	r27, Z+37	; 0x25
    1894:	8e 87       	std	Y+14, r24	; 0x0e
    1896:	9f 87       	std	Y+15, r25	; 0x0f
    1898:	a8 8b       	std	Y+16, r26	; 0x10
    189a:	b9 8b       	std	Y+17, r27	; 0x11
    189c:	2b c0       	rjmp	.+86     	; 0x18f4 <dir_sdi.constprop.2+0xd8>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    189e:	f8 01       	movw	r30, r16
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    18a2:	81 11       	cpse	r24, r1
    18a4:	1d c0       	rjmp	.+58     	; 0x18e0 <dir_sdi.constprop.2+0xc4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    18a6:	88 81       	ld	r24, Y
    18a8:	99 81       	ldd	r25, Y+1	; 0x01
    18aa:	f7 de       	rcall	.-530    	; 0x169a <get_fat>
    18ac:	ab 01       	movw	r20, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	4f 3f       	cpi	r20, 0xFF	; 255
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    18b2:	ff ef       	ldi	r31, 0xFF	; 255
    18b4:	5f 07       	cpc	r21, r31
    18b6:	6f 07       	cpc	r22, r31
    18b8:	7f 07       	cpc	r23, r31
    18ba:	11 f1       	breq	.+68     	; 0x1900 <dir_sdi.constprop.2+0xe4>
    18bc:	42 30       	cpi	r20, 0x02	; 2
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    18be:	51 05       	cpc	r21, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	71 05       	cpc	r23, r1
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <dir_sdi.constprop.2+0xac>
    18c6:	ba cf       	rjmp	.-140    	; 0x183c <dir_sdi.constprop.2+0x20>
    18c8:	e8 81       	ld	r30, Y
    18ca:	f9 81       	ldd	r31, Y+1	; 0x01
    18cc:	86 89       	ldd	r24, Z+22	; 0x16
    18ce:	97 89       	ldd	r25, Z+23	; 0x17
    18d0:	a0 8d       	ldd	r26, Z+24	; 0x18
    18d2:	b1 8d       	ldd	r27, Z+25	; 0x19
    18d4:	48 17       	cp	r20, r24
    18d6:	59 07       	cpc	r21, r25
    18d8:	6a 07       	cpc	r22, r26
    18da:	7b 07       	cpc	r23, r27
    18dc:	20 f3       	brcs	.-56     	; 0x18a6 <dir_sdi.constprop.2+0x8a>
    18de:	ae cf       	rjmp	.-164    	; 0x183c <dir_sdi.constprop.2+0x20>
    18e0:	4a 87       	std	Y+10, r20	; 0x0a
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    18e2:	5b 87       	std	Y+11, r21	; 0x0b
    18e4:	6c 87       	std	Y+12, r22	; 0x0c
    18e6:	7d 87       	std	Y+13, r23	; 0x0d
    18e8:	c8 01       	movw	r24, r16
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    18ea:	ae de       	rcall	.-676    	; 0x1648 <clust2sect>
    18ec:	6e 87       	std	Y+14, r22	; 0x0e
    18ee:	7f 87       	std	Y+15, r23	; 0x0f
    18f0:	88 8b       	std	Y+16, r24	; 0x10
    18f2:	99 8b       	std	Y+17, r25	; 0x11
    18f4:	02 5d       	subi	r16, 0xD2	; 210
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    18f8:	1b 8b       	std	Y+19, r17	; 0x13
    18fa:	0a 8b       	std	Y+18, r16	; 0x12
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <dir_sdi.constprop.2+0xe6>

	return FR_OK;	/* Seek succeeded */
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	df 91       	pop	r29
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1904:	cf 91       	pop	r28
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <put_fat>:
    190c:	4f 92       	push	r4
    190e:	5f 92       	push	r5
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1910:	6f 92       	push	r6
    1912:	7f 92       	push	r7
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	cf 92       	push	r12
    191e:	df 92       	push	r13
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	00 d0       	rcall	.+0      	; 0x192e <put_fat+0x22>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <put_fat+0x24>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	4c 01       	movw	r8, r24
    1936:	6a 01       	movw	r12, r20
    1938:	7b 01       	movw	r14, r22
    193a:	28 01       	movw	r4, r16
    193c:	39 01       	movw	r6, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    193e:	42 30       	cpi	r20, 0x02	; 2
    1940:	51 05       	cpc	r21, r1
    1942:	61 05       	cpc	r22, r1
    1944:	71 05       	cpc	r23, r1
    1946:	08 f4       	brcc	.+2      	; 0x194a <put_fat+0x3e>
    1948:	db c0       	rjmp	.+438    	; 0x1b00 <put_fat+0x1f4>
    194a:	fc 01       	movw	r30, r24
    194c:	86 89       	ldd	r24, Z+22	; 0x16
    194e:	97 89       	ldd	r25, Z+23	; 0x17
    1950:	a0 8d       	ldd	r26, Z+24	; 0x18
    1952:	b1 8d       	ldd	r27, Z+25	; 0x19
    1954:	48 17       	cp	r20, r24
    1956:	59 07       	cpc	r21, r25
    1958:	6a 07       	cpc	r22, r26
    195a:	7b 07       	cpc	r23, r27
    195c:	08 f0       	brcs	.+2      	; 0x1960 <put_fat+0x54>
    195e:	d0 c0       	rjmp	.+416    	; 0x1b00 <put_fat+0x1f4>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1960:	80 81       	ld	r24, Z
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	09 f4       	brne	.+2      	; 0x1968 <put_fat+0x5c>
    1966:	6e c0       	rjmp	.+220    	; 0x1a44 <put_fat+0x138>
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	09 f4       	brne	.+2      	; 0x196e <put_fat+0x62>
    196c:	8d c0       	rjmp	.+282    	; 0x1a88 <put_fat+0x17c>
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	09 f0       	breq	.+2      	; 0x1974 <put_fat+0x68>
    1972:	c0 c0       	rjmp	.+384    	; 0x1af4 <put_fat+0x1e8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1974:	5a 01       	movw	r10, r20
    1976:	b6 94       	lsr	r11
    1978:	a7 94       	ror	r10
    197a:	a4 0e       	add	r10, r20
    197c:	b5 1e       	adc	r11, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    197e:	c5 01       	movw	r24, r10
    1980:	89 2f       	mov	r24, r25
    1982:	99 27       	eor	r25, r25
    1984:	86 95       	lsr	r24
    1986:	46 8d       	ldd	r20, Z+30	; 0x1e
    1988:	57 8d       	ldd	r21, Z+31	; 0x1f
    198a:	60 a1       	ldd	r22, Z+32	; 0x20
    198c:	71 a1       	ldd	r23, Z+33	; 0x21
    198e:	48 0f       	add	r20, r24
    1990:	59 1f       	adc	r21, r25
    1992:	61 1d       	adc	r22, r1
    1994:	71 1d       	adc	r23, r1
    1996:	c4 01       	movw	r24, r8
    1998:	8d dd       	rcall	.-1254   	; 0x14b4 <move_window>
    199a:	81 11       	cpse	r24, r1
			if (res != FR_OK) break;
    199c:	ac c0       	rjmp	.+344    	; 0x1af6 <put_fat+0x1ea>
    199e:	a5 01       	movw	r20, r10
			p = &fs->win[bc % SS(fs)];
    19a0:	51 70       	andi	r21, 0x01	; 1
    19a2:	48 0d       	add	r20, r8
    19a4:	59 1d       	adc	r21, r9
    19a6:	d7 01       	movw	r26, r14
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    19a8:	c6 01       	movw	r24, r12
    19aa:	81 70       	andi	r24, 0x01	; 1
    19ac:	99 27       	eor	r25, r25
    19ae:	aa 27       	eor	r26, r26
    19b0:	bb 27       	eor	r27, r27
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	ab 83       	std	Y+3, r26	; 0x03
    19b8:	bc 83       	std	Y+4, r27	; 0x04
    19ba:	c0 fe       	sbrs	r12, 0
    19bc:	0a c0       	rjmp	.+20     	; 0x19d2 <put_fat+0xc6>
    19be:	da 01       	movw	r26, r20
    19c0:	9e 96       	adiw	r26, 0x2e	; 46
    19c2:	2c 91       	ld	r18, X
    19c4:	2f 70       	andi	r18, 0x0F	; 15
    19c6:	b0 e1       	ldi	r27, 0x10	; 16
    19c8:	4b 9e       	mul	r4, r27
    19ca:	c0 01       	movw	r24, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	28 2b       	or	r18, r24
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <put_fat+0xc8>
    19d2:	24 2d       	mov	r18, r4
    19d4:	fa 01       	movw	r30, r20
    19d6:	26 a7       	std	Z+46, r18	; 0x2e
    19d8:	ff ef       	ldi	r31, 0xFF	; 255
			bc++;
    19da:	af 1a       	sub	r10, r31
    19dc:	bf 0a       	sbc	r11, r31
    19de:	81 e0       	ldi	r24, 0x01	; 1
			fs->wflag = 1;
    19e0:	d4 01       	movw	r26, r8
    19e2:	14 96       	adiw	r26, 0x04	; 4
    19e4:	8c 93       	st	X, r24
    19e6:	14 97       	sbiw	r26, 0x04	; 4
    19e8:	c5 01       	movw	r24, r10
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    19ea:	89 2f       	mov	r24, r25
    19ec:	99 27       	eor	r25, r25
    19ee:	86 95       	lsr	r24
    19f0:	5e 96       	adiw	r26, 0x1e	; 30
    19f2:	4d 91       	ld	r20, X+
    19f4:	5d 91       	ld	r21, X+
    19f6:	6d 91       	ld	r22, X+
    19f8:	7c 91       	ld	r23, X
    19fa:	91 97       	sbiw	r26, 0x21	; 33
    19fc:	48 0f       	add	r20, r24
    19fe:	59 1f       	adc	r21, r25
    1a00:	61 1d       	adc	r22, r1
    1a02:	71 1d       	adc	r23, r1
    1a04:	c4 01       	movw	r24, r8
    1a06:	56 dd       	rcall	.-1364   	; 0x14b4 <move_window>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	75 c0       	rjmp	.+234    	; 0x1af6 <put_fat+0x1ea>
			if (res != FR_OK) break;
    1a0c:	f5 01       	movw	r30, r10
    1a0e:	f1 70       	andi	r31, 0x01	; 1
			p = &fs->win[bc % SS(fs)];
    1a10:	e8 0d       	add	r30, r8
    1a12:	f9 1d       	adc	r31, r9
    1a14:	29 81       	ldd	r18, Y+1	; 0x01
    1a16:	3a 81       	ldd	r19, Y+2	; 0x02
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1a18:	4b 81       	ldd	r20, Y+3	; 0x03
    1a1a:	5c 81       	ldd	r21, Y+4	; 0x04
    1a1c:	23 2b       	or	r18, r19
    1a1e:	24 2b       	or	r18, r20
    1a20:	25 2b       	or	r18, r21
    1a22:	49 f0       	breq	.+18     	; 0x1a36 <put_fat+0x12a>
    1a24:	14 e0       	ldi	r17, 0x04	; 4
    1a26:	76 94       	lsr	r7
    1a28:	67 94       	ror	r6
    1a2a:	57 94       	ror	r5
    1a2c:	47 94       	ror	r4
    1a2e:	1a 95       	dec	r17
    1a30:	d1 f7       	brne	.-12     	; 0x1a26 <put_fat+0x11a>
    1a32:	94 2d       	mov	r25, r4
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <put_fat+0x134>
    1a36:	96 a5       	ldd	r25, Z+46	; 0x2e
    1a38:	90 7f       	andi	r25, 0xF0	; 240
    1a3a:	25 2d       	mov	r18, r5
    1a3c:	2f 70       	andi	r18, 0x0F	; 15
    1a3e:	92 2b       	or	r25, r18
    1a40:	96 a7       	std	Z+46, r25	; 0x2e
    1a42:	59 c0       	rjmp	.+178    	; 0x1af6 <put_fat+0x1ea>
    1a44:	45 2f       	mov	r20, r21
			break;
    1a46:	56 2f       	mov	r21, r22

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1a48:	67 2f       	mov	r22, r23
    1a4a:	77 27       	eor	r23, r23
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a50:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a52:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a54:	b1 a1       	ldd	r27, Z+33	; 0x21
    1a56:	48 0f       	add	r20, r24
    1a58:	59 1f       	adc	r21, r25
    1a5a:	6a 1f       	adc	r22, r26
    1a5c:	7b 1f       	adc	r23, r27
    1a5e:	c4 01       	movw	r24, r8
    1a60:	29 dd       	rcall	.-1454   	; 0x14b4 <move_window>
    1a62:	81 11       	cpse	r24, r1
    1a64:	48 c0       	rjmp	.+144    	; 0x1af6 <put_fat+0x1ea>
    1a66:	cc 0c       	add	r12, r12
			if (res != FR_OK) break;
    1a68:	dd 1c       	adc	r13, r13
    1a6a:	ee 1c       	adc	r14, r14
			p = &fs->win[clst * 2 % SS(fs)];
    1a6c:	ff 1c       	adc	r15, r15
    1a6e:	e8 94       	clt
    1a70:	c0 f8       	bld	r12, 0
    1a72:	f1 e0       	ldi	r31, 0x01	; 1
    1a74:	df 22       	and	r13, r31
    1a76:	ee 24       	eor	r14, r14
    1a78:	ff 24       	eor	r15, r15
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	be 96       	adiw	r30, 0x2e	; 46
    1a7e:	e8 0d       	add	r30, r8
    1a80:	f9 1d       	adc	r31, r9
    1a82:	51 82       	std	Z+1, r5	; 0x01
			ST_WORD(p, (WORD)val);
    1a84:	40 82       	st	Z, r4
    1a86:	37 c0       	rjmp	.+110    	; 0x1af6 <put_fat+0x1ea>
    1a88:	f7 e0       	ldi	r31, 0x07	; 7
    1a8a:	76 95       	lsr	r23
			break;
    1a8c:	67 95       	ror	r22

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1a8e:	57 95       	ror	r21
    1a90:	47 95       	ror	r20
    1a92:	fa 95       	dec	r31
    1a94:	d1 f7       	brne	.-12     	; 0x1a8a <put_fat+0x17e>
    1a96:	f4 01       	movw	r30, r8
    1a98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a9a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a9c:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a9e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1aa0:	48 0f       	add	r20, r24
    1aa2:	59 1f       	adc	r21, r25
    1aa4:	6a 1f       	adc	r22, r26
    1aa6:	7b 1f       	adc	r23, r27
    1aa8:	c4 01       	movw	r24, r8
    1aaa:	04 dd       	rcall	.-1528   	; 0x14b4 <move_window>
    1aac:	81 11       	cpse	r24, r1
    1aae:	23 c0       	rjmp	.+70     	; 0x1af6 <put_fat+0x1ea>
    1ab0:	e2 e0       	ldi	r30, 0x02	; 2
    1ab2:	cc 0c       	add	r12, r12
			if (res != FR_OK) break;
    1ab4:	dd 1c       	adc	r13, r13
    1ab6:	ee 1c       	adc	r14, r14
			p = &fs->win[clst * 4 % SS(fs)];
    1ab8:	ff 1c       	adc	r15, r15
    1aba:	ea 95       	dec	r30
    1abc:	d1 f7       	brne	.-12     	; 0x1ab2 <put_fat+0x1a6>
    1abe:	fc ef       	ldi	r31, 0xFC	; 252
    1ac0:	cf 22       	and	r12, r31
    1ac2:	f1 e0       	ldi	r31, 0x01	; 1
    1ac4:	df 22       	and	r13, r31
    1ac6:	ee 24       	eor	r14, r14
    1ac8:	ff 24       	eor	r15, r15
    1aca:	f6 01       	movw	r30, r12
    1acc:	be 96       	adiw	r30, 0x2e	; 46
    1ace:	e8 0d       	add	r30, r8
    1ad0:	f9 1d       	adc	r31, r9
    1ad2:	40 81       	ld	r20, Z
    1ad4:	51 81       	ldd	r21, Z+1	; 0x01
    1ad6:	62 81       	ldd	r22, Z+2	; 0x02
    1ad8:	73 81       	ldd	r23, Z+3	; 0x03
			val |= LD_DWORD(p) & 0xF0000000;
    1ada:	44 27       	eor	r20, r20
    1adc:	55 27       	eor	r21, r21
    1ade:	66 27       	eor	r22, r22
    1ae0:	70 7f       	andi	r23, 0xF0	; 240
    1ae2:	44 29       	or	r20, r4
    1ae4:	55 29       	or	r21, r5
    1ae6:	66 29       	or	r22, r6
    1ae8:	77 29       	or	r23, r7
    1aea:	40 83       	st	Z, r20
    1aec:	51 83       	std	Z+1, r21	; 0x01
    1aee:	62 83       	std	Z+2, r22	; 0x02
    1af0:	73 83       	std	Z+3, r23	; 0x03
			ST_DWORD(p, val);
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <put_fat+0x1ea>
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	d4 01       	movw	r26, r8
			break;
    1afa:	14 96       	adiw	r26, 0x04	; 4

		default :
			res = FR_INT_ERR;
    1afc:	9c 93       	st	X, r25
		}
		fs->wflag = 1;
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <put_fat+0x1f6>
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1b08:	0f 90       	pop	r0
		}
		fs->wflag = 1;
	}

	return res;
}
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	9f 90       	pop	r9
    1b20:	8f 90       	pop	r8
    1b22:	7f 90       	pop	r7
    1b24:	6f 90       	pop	r6
    1b26:	5f 90       	pop	r5
    1b28:	4f 90       	pop	r4
    1b2a:	08 95       	ret

00001b2c <create_chain>:
    1b2c:	4f 92       	push	r4
    1b2e:	5f 92       	push	r5
    1b30:	6f 92       	push	r6
    1b32:	7f 92       	push	r7
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1b34:	8f 92       	push	r8
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	2a 01       	movw	r4, r20
    1b50:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1b52:	41 15       	cp	r20, r1
    1b54:	51 05       	cpc	r21, r1
    1b56:	61 05       	cpc	r22, r1
    1b58:	71 05       	cpc	r23, r1
    1b5a:	99 f4       	brne	.+38     	; 0x1b82 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1b5c:	8a 84       	ldd	r8, Y+10	; 0x0a
    1b5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b60:	ac 84       	ldd	r10, Y+12	; 0x0c
    1b62:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1b64:	81 14       	cp	r8, r1
    1b66:	91 04       	cpc	r9, r1
    1b68:	a1 04       	cpc	r10, r1
    1b6a:	b1 04       	cpc	r11, r1
    1b6c:	f1 f0       	breq	.+60     	; 0x1baa <create_chain+0x7e>
    1b6e:	4e 89       	ldd	r20, Y+22	; 0x16
    1b70:	5f 89       	ldd	r21, Y+23	; 0x17
    1b72:	68 8d       	ldd	r22, Y+24	; 0x18
    1b74:	79 8d       	ldd	r23, Y+25	; 0x19
    1b76:	84 16       	cp	r8, r20
    1b78:	95 06       	cpc	r9, r21
    1b7a:	a6 06       	cpc	r10, r22
    1b7c:	b7 06       	cpc	r11, r23
    1b7e:	a8 f4       	brcc	.+42     	; 0x1baa <create_chain+0x7e>
    1b80:	18 c0       	rjmp	.+48     	; 0x1bb2 <create_chain+0x86>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1b82:	8b dd       	rcall	.-1258   	; 0x169a <get_fat>
    1b84:	62 30       	cpi	r22, 0x02	; 2
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1b86:	71 05       	cpc	r23, r1
    1b88:	81 05       	cpc	r24, r1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <create_chain+0x64>
    1b8e:	8a c0       	rjmp	.+276    	; 0x1ca4 <create_chain+0x178>
    1b90:	ce 88       	ldd	r12, Y+22	; 0x16
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1b92:	df 88       	ldd	r13, Y+23	; 0x17
    1b94:	e8 8c       	ldd	r14, Y+24	; 0x18
    1b96:	f9 8c       	ldd	r15, Y+25	; 0x19
    1b98:	6c 15       	cp	r22, r12
    1b9a:	7d 05       	cpc	r23, r13
    1b9c:	8e 05       	cpc	r24, r14
    1b9e:	9f 05       	cpc	r25, r15
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <create_chain+0x78>
    1ba2:	82 c0       	rjmp	.+260    	; 0x1ca8 <create_chain+0x17c>
    1ba4:	53 01       	movw	r10, r6
    1ba6:	42 01       	movw	r8, r4
    1ba8:	04 c0       	rjmp	.+8      	; 0x1bb2 <create_chain+0x86>
    1baa:	81 2c       	mov	r8, r1
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1bac:	91 2c       	mov	r9, r1
    1bae:	54 01       	movw	r10, r8
    1bb0:	83 94       	inc	r8
    1bb2:	75 01       	movw	r14, r10
    1bb4:	64 01       	movw	r12, r8
    1bb6:	2f ef       	ldi	r18, 0xFF	; 255
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1bb8:	c2 1a       	sub	r12, r18
    1bba:	d2 0a       	sbc	r13, r18
    1bbc:	e2 0a       	sbc	r14, r18
    1bbe:	f2 0a       	sbc	r15, r18
    1bc0:	4e 89       	ldd	r20, Y+22	; 0x16
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1bc2:	5f 89       	ldd	r21, Y+23	; 0x17
    1bc4:	68 8d       	ldd	r22, Y+24	; 0x18
    1bc6:	79 8d       	ldd	r23, Y+25	; 0x19
    1bc8:	c4 16       	cp	r12, r20
    1bca:	d5 06       	cpc	r13, r21
    1bcc:	e6 06       	cpc	r14, r22
    1bce:	f7 06       	cpc	r15, r23
    1bd0:	80 f0       	brcs	.+32     	; 0x1bf2 <create_chain+0xc6>
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1bd4:	88 16       	cp	r8, r24
    1bd6:	91 04       	cpc	r9, r1
    1bd8:	a1 04       	cpc	r10, r1
    1bda:	b1 04       	cpc	r11, r1
    1bdc:	28 f4       	brcc	.+10     	; 0x1be8 <create_chain+0xbc>
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	63 c0       	rjmp	.+198    	; 0x1cae <create_chain+0x182>
    1be8:	32 e0       	ldi	r19, 0x02	; 2

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1bea:	c3 2e       	mov	r12, r19
    1bec:	d1 2c       	mov	r13, r1
    1bee:	e1 2c       	mov	r14, r1
    1bf0:	f1 2c       	mov	r15, r1
    1bf2:	b7 01       	movw	r22, r14
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1bf4:	a6 01       	movw	r20, r12
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	50 dd       	rcall	.-1376   	; 0x169a <get_fat>
    1bfa:	61 15       	cp	r22, r1
    1bfc:	71 05       	cpc	r23, r1
		if (cs == 0) break;				/* Found a free cluster */
    1bfe:	81 05       	cpc	r24, r1
    1c00:	91 05       	cpc	r25, r1
    1c02:	b9 f0       	breq	.+46     	; 0x1c32 <create_chain+0x106>
    1c04:	6f 3f       	cpi	r22, 0xFF	; 255
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1c08:	72 07       	cpc	r23, r18
    1c0a:	82 07       	cpc	r24, r18
    1c0c:	92 07       	cpc	r25, r18
    1c0e:	29 f4       	brne	.+10     	; 0x1c1a <create_chain+0xee>
    1c10:	4f ef       	ldi	r20, 0xFF	; 255
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1c14:	2f ef       	ldi	r18, 0xFF	; 255
    1c16:	9f ef       	ldi	r25, 0xFF	; 255
    1c18:	4a c0       	rjmp	.+148    	; 0x1cae <create_chain+0x182>
    1c1a:	61 30       	cpi	r22, 0x01	; 1
    1c1c:	71 05       	cpc	r23, r1
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1c1e:	81 05       	cpc	r24, r1
    1c20:	91 05       	cpc	r25, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <create_chain+0xfa>
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <create_chain+0x178>
    1c26:	c8 14       	cp	r12, r8
    1c28:	d9 04       	cpc	r13, r9
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1c2a:	ea 04       	cpc	r14, r10
    1c2c:	fb 04       	cpc	r15, r11
    1c2e:	19 f6       	brne	.-122    	; 0x1bb6 <create_chain+0x8a>
    1c30:	d6 cf       	rjmp	.-84     	; 0x1bde <create_chain+0xb2>
    1c32:	0f ef       	ldi	r16, 0xFF	; 255
    1c34:	1f ef       	ldi	r17, 0xFF	; 255
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1c36:	2f ef       	ldi	r18, 0xFF	; 255
    1c38:	3f e0       	ldi	r19, 0x0F	; 15
    1c3a:	b7 01       	movw	r22, r14
    1c3c:	a6 01       	movw	r20, r12
    1c3e:	ce 01       	movw	r24, r28
    1c40:	65 de       	rcall	.-822    	; 0x190c <put_fat>
    1c42:	81 11       	cpse	r24, r1
    1c44:	2c c0       	rjmp	.+88     	; 0x1c9e <create_chain+0x172>
    1c46:	41 14       	cp	r4, r1
	if (res == FR_OK && clst != 0) {
    1c48:	51 04       	cpc	r5, r1
    1c4a:	61 04       	cpc	r6, r1
    1c4c:	71 04       	cpc	r7, r1
    1c4e:	c9 f4       	brne	.+50     	; 0x1c82 <create_chain+0x156>
    1c50:	ca 86       	std	Y+10, r12	; 0x0a
    1c52:	db 86       	std	Y+11, r13	; 0x0b
    1c54:	ec 86       	std	Y+12, r14	; 0x0c
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
    1c56:	fd 86       	std	Y+13, r15	; 0x0d
    1c58:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c5a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c5c:	68 89       	ldd	r22, Y+16	; 0x10
		if (fs->free_clust != 0xFFFFFFFF) {
    1c5e:	79 89       	ldd	r23, Y+17	; 0x11
    1c60:	4f 3f       	cpi	r20, 0xFF	; 255
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	58 07       	cpc	r21, r24
    1c66:	68 07       	cpc	r22, r24
    1c68:	78 07       	cpc	r23, r24
    1c6a:	a1 f0       	breq	.+40     	; 0x1c94 <create_chain+0x168>
    1c6c:	41 50       	subi	r20, 0x01	; 1
    1c6e:	51 09       	sbc	r21, r1
    1c70:	61 09       	sbc	r22, r1
			fs->free_clust--;
    1c72:	71 09       	sbc	r23, r1
    1c74:	4e 87       	std	Y+14, r20	; 0x0e
    1c76:	5f 87       	std	Y+15, r21	; 0x0f
    1c78:	68 8b       	std	Y+16, r22	; 0x10
    1c7a:	79 8b       	std	Y+17, r23	; 0x11
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <create_chain+0x168>
			fs->fsi_flag = 1;
    1c82:	97 01       	movw	r18, r14
    1c84:	86 01       	movw	r16, r12
    1c86:	b3 01       	movw	r22, r6
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1c88:	a2 01       	movw	r20, r4
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	3f de       	rcall	.-898    	; 0x190c <put_fat>
    1c8e:	88 23       	and	r24, r24
    1c90:	f9 f2       	breq	.-66     	; 0x1c50 <create_chain+0x124>
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <create_chain+0x172>
    1c94:	4c 2d       	mov	r20, r12
	}
	if (res == FR_OK) {
    1c96:	3d 2d       	mov	r19, r13
    1c98:	2e 2d       	mov	r18, r14
    1c9a:	9f 2d       	mov	r25, r15
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
    1c9c:	08 c0       	rjmp	.+16     	; 0x1cae <create_chain+0x182>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <create_chain+0x178>
    1ca2:	b6 cf       	rjmp	.-148    	; 0x1c10 <create_chain+0xe4>
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1ca6:	9c cf       	rjmp	.-200    	; 0x1be0 <create_chain+0xb4>
    1ca8:	46 2f       	mov	r20, r22
    1caa:	37 2f       	mov	r19, r23
    1cac:	28 2f       	mov	r18, r24
    1cae:	64 2f       	mov	r22, r20
    1cb0:	73 2f       	mov	r23, r19
    1cb2:	82 2f       	mov	r24, r18
    1cb4:	df 91       	pop	r29
	}

	return ncl;		/* Return new cluster number or error code */
}
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	df 90       	pop	r13
    1cc2:	cf 90       	pop	r12
    1cc4:	bf 90       	pop	r11
    1cc6:	af 90       	pop	r10
    1cc8:	9f 90       	pop	r9
    1cca:	8f 90       	pop	r8
    1ccc:	7f 90       	pop	r7
    1cce:	6f 90       	pop	r6
    1cd0:	5f 90       	pop	r5
    1cd2:	4f 90       	pop	r4
    1cd4:	08 95       	ret

00001cd6 <dir_next>:
    1cd6:	8f 92       	push	r8
    1cd8:	9f 92       	push	r9
    1cda:	af 92       	push	r10
    1cdc:	bf 92       	push	r11
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1cde:	cf 92       	push	r12
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	ec 01       	movw	r28, r24
    1cf0:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1cf2:	0c 81       	ldd	r16, Y+4	; 0x04
    1cf4:	1d 81       	ldd	r17, Y+5	; 0x05
    1cf6:	0f 5f       	subi	r16, 0xFF	; 255
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1cfa:	01 15       	cp	r16, r1
    1cfc:	11 05       	cpc	r17, r1
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <dir_next+0x2e>
		return FR_NO_FILE;
    1d00:	84 e0       	ldi	r24, 0x04	; 4
    1d02:	dc c0       	rjmp	.+440    	; 0x1ebc <dir_next+0x1e6>
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1d04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d08:	a8 89       	ldd	r26, Y+16	; 0x10
    1d0a:	b9 89       	ldd	r27, Y+17	; 0x11
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	a1 05       	cpc	r26, r1
    1d10:	b1 05       	cpc	r27, r1
    1d12:	b1 f3       	breq	.-20     	; 0x1d00 <dir_next+0x2a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    1d14:	78 01       	movw	r14, r16
    1d16:	2f e0       	ldi	r18, 0x0F	; 15
    1d18:	e2 22       	and	r14, r18
    1d1a:	ff 24       	eor	r15, r15
    1d1c:	e1 14       	cp	r14, r1
    1d1e:	f1 04       	cpc	r15, r1
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <dir_next+0x4e>
    1d22:	b9 c0       	rjmp	.+370    	; 0x1e96 <dir_next+0x1c0>
		dj->sect++;					/* Next sector */
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	a1 1d       	adc	r26, r1
    1d28:	b1 1d       	adc	r27, r1
    1d2a:	8e 87       	std	Y+14, r24	; 0x0e
    1d2c:	9f 87       	std	Y+15, r25	; 0x0f
    1d2e:	a8 8b       	std	Y+16, r26	; 0x10
    1d30:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1d32:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d34:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d36:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d38:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d3a:	88 81       	ld	r24, Y
    1d3c:	99 81       	ldd	r25, Y+1	; 0x01
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1d3e:	fc 01       	movw	r30, r24
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
    1d40:	41 15       	cp	r20, r1
    1d42:	51 05       	cpc	r21, r1
    1d44:	61 05       	cpc	r22, r1
    1d46:	71 05       	cpc	r23, r1
    1d48:	31 f4       	brne	.+12     	; 0x1d56 <dir_next+0x80>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1d4a:	80 85       	ldd	r24, Z+8	; 0x08
    1d4c:	91 85       	ldd	r25, Z+9	; 0x09
    1d4e:	08 17       	cp	r16, r24
    1d50:	19 07       	cpc	r17, r25
    1d52:	b0 f6       	brcc	.-84     	; 0x1d00 <dir_next+0x2a>
    1d54:	a0 c0       	rjmp	.+320    	; 0x1e96 <dir_next+0x1c0>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1d56:	22 81       	ldd	r18, Z+2	; 0x02
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	21 50       	subi	r18, 0x01	; 1
    1d5c:	31 09       	sbc	r19, r1
    1d5e:	f8 01       	movw	r30, r16
    1d60:	a4 e0       	ldi	r26, 0x04	; 4
    1d62:	f6 95       	lsr	r31
    1d64:	e7 95       	ror	r30
    1d66:	aa 95       	dec	r26
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <dir_next+0x8c>
    1d6a:	2e 23       	and	r18, r30
    1d6c:	3f 23       	and	r19, r31
    1d6e:	23 2b       	or	r18, r19
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <dir_next+0x9e>
    1d72:	91 c0       	rjmp	.+290    	; 0x1e96 <dir_next+0x1c0>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1d74:	92 dc       	rcall	.-1756   	; 0x169a <get_fat>
    1d76:	4b 01       	movw	r8, r22
    1d78:	5c 01       	movw	r10, r24
    1d7a:	62 30       	cpi	r22, 0x02	; 2
				if (clst <= 1) return FR_INT_ERR;
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	81 05       	cpc	r24, r1
    1d80:	91 05       	cpc	r25, r1
    1d82:	10 f4       	brcc	.+4      	; 0x1d88 <dir_next+0xb2>
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	9a c0       	rjmp	.+308    	; 0x1ebc <dir_next+0x1e6>
    1d88:	6f 3f       	cpi	r22, 0xFF	; 255
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1d8a:	2f ef       	ldi	r18, 0xFF	; 255
    1d8c:	72 07       	cpc	r23, r18
    1d8e:	82 07       	cpc	r24, r18
    1d90:	92 07       	cpc	r25, r18
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <dir_next+0xc2>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	92 c0       	rjmp	.+292    	; 0x1ebc <dir_next+0x1e6>
    1d98:	88 81       	ld	r24, Y
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1d9a:	99 81       	ldd	r25, Y+1	; 0x01
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	46 89       	ldd	r20, Z+22	; 0x16
    1da0:	57 89       	ldd	r21, Z+23	; 0x17
    1da2:	60 8d       	ldd	r22, Z+24	; 0x18
    1da4:	71 8d       	ldd	r23, Z+25	; 0x19
    1da6:	84 16       	cp	r8, r20
    1da8:	95 06       	cpc	r9, r21
    1daa:	a6 06       	cpc	r10, r22
    1dac:	b7 06       	cpc	r11, r23
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <dir_next+0xdc>
    1db0:	65 c0       	rjmp	.+202    	; 0x1e7c <dir_next+0x1a6>
    1db2:	cd 28       	or	r12, r13
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <dir_next+0xe2>
    1db6:	a4 cf       	rjmp	.-184    	; 0x1d00 <dir_next+0x2a>
    1db8:	4a 85       	ldd	r20, Y+10	; 0x0a
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1dba:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dc0:	b5 de       	rcall	.-662    	; 0x1b2c <create_chain>
    1dc2:	4b 01       	movw	r8, r22
    1dc4:	5c 01       	movw	r10, r24
    1dc6:	61 15       	cp	r22, r1
    1dc8:	71 05       	cpc	r23, r1
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1dca:	81 05       	cpc	r24, r1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <dir_next+0xfc>
    1dd0:	74 c0       	rjmp	.+232    	; 0x1eba <dir_next+0x1e4>
    1dd2:	61 30       	cpi	r22, 0x01	; 1
    1dd4:	71 05       	cpc	r23, r1
					if (clst == 1) return FR_INT_ERR;
    1dd6:	81 05       	cpc	r24, r1
    1dd8:	91 05       	cpc	r25, r1
    1dda:	a1 f2       	breq	.-88     	; 0x1d84 <dir_next+0xae>
    1ddc:	6f 3f       	cpi	r22, 0xFF	; 255
    1dde:	2f ef       	ldi	r18, 0xFF	; 255
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1de0:	72 07       	cpc	r23, r18
    1de2:	82 07       	cpc	r24, r18
    1de4:	92 07       	cpc	r25, r18
    1de6:	b1 f2       	breq	.-84     	; 0x1d94 <dir_next+0xbe>
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	50 e0       	ldi	r21, 0x00	; 0
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1dec:	ba 01       	movw	r22, r20
    1dee:	88 81       	ld	r24, Y
    1df0:	99 81       	ldd	r25, Y+1	; 0x01
    1df2:	60 db       	rcall	.-2368   	; 0x14b4 <move_window>
    1df4:	81 11       	cpse	r24, r1
    1df6:	ce cf       	rjmp	.-100    	; 0x1d94 <dir_next+0xbe>
    1df8:	88 81       	ld	r24, Y
    1dfa:	99 81       	ldd	r25, Y+1	; 0x01
    1dfc:	fc 01       	movw	r30, r24
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    1dfe:	be 96       	adiw	r30, 0x2e	; 46
    1e00:	82 5d       	subi	r24, 0xD2	; 210
    1e02:	9d 4f       	sbci	r25, 0xFD	; 253
    1e04:	e8 17       	cp	r30, r24
    1e06:	f9 07       	cpc	r31, r25
    1e08:	11 f0       	breq	.+4      	; 0x1e0e <dir_next+0x138>
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1e0a:	11 92       	st	Z+, r1
    1e0c:	fb cf       	rjmp	.-10     	; 0x1e04 <dir_next+0x12e>
    1e0e:	c8 80       	ld	r12, Y
		*d++ = (BYTE)val;
    1e10:	d9 80       	ldd	r13, Y+1	; 0x01
    1e12:	b5 01       	movw	r22, r10
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1e14:	a4 01       	movw	r20, r8
    1e16:	c6 01       	movw	r24, r12
    1e18:	17 dc       	rcall	.-2002   	; 0x1648 <clust2sect>
    1e1a:	f6 01       	movw	r30, r12
    1e1c:	62 a7       	std	Z+42, r22	; 0x2a
    1e1e:	73 a7       	std	Z+43, r23	; 0x2b
    1e20:	84 a7       	std	Z+44, r24	; 0x2c
    1e22:	95 a7       	std	Z+45, r25	; 0x2d
    1e24:	d1 2c       	mov	r13, r1
    1e26:	cc 24       	eor	r12, r12
    1e28:	c3 94       	inc	r12
    1e2a:	e8 81       	ld	r30, Y
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1e2c:	f9 81       	ldd	r31, Y+1	; 0x01
						dj->fs->wflag = 1;
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	d8 16       	cp	r13, r24
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1e32:	c0 f4       	brcc	.+48     	; 0x1e64 <dir_next+0x18e>
    1e34:	c4 82       	std	Z+4, r12	; 0x04
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	ba 01       	movw	r22, r20
						dj->fs->wflag = 1;
    1e3c:	88 81       	ld	r24, Y
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1e3e:	99 81       	ldd	r25, Y+1	; 0x01
    1e40:	39 db       	rcall	.-2446   	; 0x14b4 <move_window>
    1e42:	81 11       	cpse	r24, r1
    1e44:	a7 cf       	rjmp	.-178    	; 0x1d94 <dir_next+0xbe>
    1e46:	e8 81       	ld	r30, Y
    1e48:	f9 81       	ldd	r31, Y+1	; 0x01
    1e4a:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e4c:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e4e:	a4 a5       	ldd	r26, Z+44	; 0x2c
						dj->fs->winsect++;
    1e50:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	b1 1d       	adc	r27, r1
    1e58:	82 a7       	std	Z+42, r24	; 0x2a
    1e5a:	93 a7       	std	Z+43, r25	; 0x2b
    1e5c:	a4 a7       	std	Z+44, r26	; 0x2c
    1e5e:	b5 a7       	std	Z+45, r27	; 0x2d
    1e60:	d3 94       	inc	r13
    1e62:	e3 cf       	rjmp	.-58     	; 0x1e2a <dir_next+0x154>
    1e64:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e66:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e68:	a4 a5       	ldd	r26, Z+44	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1e6a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e6c:	8d 19       	sub	r24, r13
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1e6e:	91 09       	sbc	r25, r1
    1e70:	a1 09       	sbc	r26, r1
    1e72:	b1 09       	sbc	r27, r1
    1e74:	82 a7       	std	Z+42, r24	; 0x2a
    1e76:	93 a7       	std	Z+43, r25	; 0x2b
    1e78:	a4 a7       	std	Z+44, r26	; 0x2c
    1e7a:	b5 a7       	std	Z+45, r27	; 0x2d
    1e7c:	8a 86       	std	Y+10, r8	; 0x0a
    1e7e:	9b 86       	std	Y+11, r9	; 0x0b
    1e80:	ac 86       	std	Y+12, r10	; 0x0c
    1e82:	bd 86       	std	Y+13, r11	; 0x0d
    1e84:	b5 01       	movw	r22, r10
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1e86:	a4 01       	movw	r20, r8
    1e88:	88 81       	ld	r24, Y
    1e8a:	99 81       	ldd	r25, Y+1	; 0x01
    1e8c:	dd db       	rcall	.-2118   	; 0x1648 <clust2sect>
				dj->sect = clust2sect(dj->fs, clst);
    1e8e:	6e 87       	std	Y+14, r22	; 0x0e
    1e90:	7f 87       	std	Y+15, r23	; 0x0f
    1e92:	88 8b       	std	Y+16, r24	; 0x10
    1e94:	99 8b       	std	Y+17, r25	; 0x11
    1e96:	1d 83       	std	Y+5, r17	; 0x05
    1e98:	0c 83       	std	Y+4, r16	; 0x04
    1e9a:	55 e0       	ldi	r21, 0x05	; 5
    1e9c:	ee 0c       	add	r14, r14
    1e9e:	ff 1c       	adc	r15, r15
    1ea0:	5a 95       	dec	r21
			}
		}
	}

	dj->index = i;
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <dir_next+0x1c6>
    1ea4:	fe e2       	ldi	r31, 0x2E	; 46
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    1ea6:	ef 0e       	add	r14, r31
    1ea8:	f1 1c       	adc	r15, r1
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	8e 0d       	add	r24, r14
    1eb0:	9f 1d       	adc	r25, r15
    1eb2:	9b 8b       	std	Y+19, r25	; 0x13
    1eb4:	8a 8b       	std	Y+18, r24	; 0x12
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <dir_next+0x1e6>
    1eba:	87 e0       	ldi	r24, 0x07	; 7
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17

	return FR_OK;
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1ec6:	ef 90       	pop	r14

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    1ec8:	df 90       	pop	r13
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	9f 90       	pop	r9
    1ed2:	8f 90       	pop	r8
    1ed4:	08 95       	ret

00001ed6 <f_mount>:
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	12 c0       	rjmp	.+36     	; 0x1efe <f_mount+0x28>
    1eda:	e0 91 3b 04 	lds	r30, 0x043B
    1ede:	f0 91 3c 04 	lds	r31, 0x043C

	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */

	if (rfs) {
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    1ee6:	10 82       	st	Z, r1
	}

	if (fs) {
    1ee8:	61 15       	cp	r22, r1
    1eea:	71 05       	cpc	r23, r1
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    1eee:	fb 01       	movw	r30, r22
    1ef0:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    1ef2:	70 93 3c 04 	sts	0x043C, r23
    1ef6:	60 93 3b 04 	sts	0x043B, r22

	return FR_OK;
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1efe:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    1f00:	08 95       	ret

00001f02 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1f02:	2f 92       	push	r2
    1f04:	3f 92       	push	r3
    1f06:	4f 92       	push	r4
    1f08:	5f 92       	push	r5
    1f0a:	6f 92       	push	r6
    1f0c:	7f 92       	push	r7
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	e9 97       	sbiw	r28, 0x39	; 57
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
    1f3a:	1b 01       	movw	r2, r22
    1f3c:	4d a7       	std	Y+45, r20	; 0x2d
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <f_open+0x42>
    1f42:	0c c2       	rjmp	.+1048   	; 0x235c <__stack+0x25d>
	fp->fs = 0;			/* Clear file object */
    1f44:	dc 01       	movw	r26, r24
    1f46:	1d 92       	st	X+, r1
    1f48:	1c 92       	st	X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    1f4a:	fb 01       	movw	r30, r22
    1f4c:	80 81       	ld	r24, Z
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    1f52:	8a 30       	cpi	r24, 0x0A	; 10
    1f54:	91 05       	cpc	r25, r1
    1f56:	38 f4       	brcc	.+14     	; 0x1f66 <f_open+0x64>
    1f58:	21 81       	ldd	r18, Z+1	; 0x01
    1f5a:	2a 33       	cpi	r18, 0x3A	; 58
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <f_open+0x64>
		p += 2; *path = p;				/* Return pointer to the path name */
    1f5e:	f2 e0       	ldi	r31, 0x02	; 2
    1f60:	2f 0e       	add	r2, r31
    1f62:	31 1c       	adc	r3, r1
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <f_open+0x68>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    1f6a:	89 2b       	or	r24, r25
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <f_open+0x6e>
    1f6e:	f8 c1       	rjmp	.+1008   	; 0x2360 <__stack+0x261>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    1f70:	80 90 3b 04 	lds	r8, 0x043B
    1f74:	90 90 3c 04 	lds	r9, 0x043C
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1f78:	81 14       	cp	r8, r1
    1f7a:	91 04       	cpc	r9, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <f_open+0x7e>
    1f7e:	f2 c1       	rjmp	.+996    	; 0x2364 <__stack+0x265>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1f80:	1d a5       	ldd	r17, Y+45	; 0x2d
    1f82:	1e 71       	andi	r17, 0x1E	; 30
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    1f84:	9a 82       	std	Y+2, r9	; 0x02
    1f86:	89 82       	std	Y+1, r8	; 0x01
	if (fs->fs_type) {					/* If the volume has been mounted */
    1f88:	d4 01       	movw	r26, r8
    1f8a:	8c 91       	ld	r24, X
    1f8c:	88 23       	and	r24, r24
    1f8e:	61 f0       	breq	.+24     	; 0x1fa8 <f_open+0xa6>
		stat = disk_status(fs->drv);
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	8c 91       	ld	r24, X
    1f94:	f6 d9       	rcall	.-3092   	; 0x1382 <disk_status>
    1f96:	80 fd       	sbrc	r24, 0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <f_open+0xa6>
    1f9a:	11 23       	and	r17, r17
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <f_open+0x9e>
    1f9e:	e8 c1       	rjmp	.+976    	; 0x2370 <__stack+0x271>
    1fa0:	82 ff       	sbrs	r24, 2
    1fa2:	e6 c1       	rjmp	.+972    	; 0x2370 <__stack+0x271>
    1fa4:	8a e0       	ldi	r24, 0x0A	; 10
				return FR_WRITE_PROTECTED;
    1fa6:	a9 c4       	rjmp	.+2386   	; 0x28fa <__stack+0x7fb>
    1fa8:	f4 01       	movw	r30, r8
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    1faa:	10 82       	st	Z, r1
    1fac:	11 82       	std	Z+1, r1	; 0x01
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1fae:	80 e0       	ldi	r24, 0x00	; 0
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    1fb0:	e6 d9       	rcall	.-3124   	; 0x137e <disk_initialize>
    1fb2:	80 fd       	sbrc	r24, 0
    1fb4:	d9 c1       	rjmp	.+946    	; 0x2368 <__stack+0x269>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    1fb6:	11 23       	and	r17, r17
    1fb8:	11 f0       	breq	.+4      	; 0x1fbe <f_open+0xbc>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1fba:	82 fd       	sbrc	r24, 2
    1fbc:	f3 cf       	rjmp	.-26     	; 0x1fa4 <f_open+0xa2>
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    1fc2:	ba 01       	movw	r22, r20
    1fc4:	c4 01       	movw	r24, r8
    1fc6:	eb da       	rcall	.-2602   	; 0x159e <check_fs>
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	c1 f4       	brne	.+48     	; 0x1ffc <f_open+0xfa>
    1fcc:	f4 01       	movw	r30, r8
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    1fce:	e0 51       	subi	r30, 0x10	; 16
    1fd0:	fe 4f       	sbci	r31, 0xFE	; 254
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    1fd2:	80 81       	ld	r24, Z
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <f_open+0xda>
    1fd8:	8d e0       	ldi	r24, 0x0D	; 13
    1fda:	8f c4       	rjmp	.+2334   	; 0x28fa <__stack+0x7fb>
    1fdc:	f4 01       	movw	r30, r8
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1fde:	ec 50       	subi	r30, 0x0C	; 12
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    1fe2:	00 81       	ld	r16, Z
    1fe4:	11 81       	ldd	r17, Z+1	; 0x01
    1fe6:	22 81       	ldd	r18, Z+2	; 0x02
    1fe8:	33 81       	ldd	r19, Z+3	; 0x03
    1fea:	0b a3       	std	Y+35, r16	; 0x23
    1fec:	1c a3       	std	Y+36, r17	; 0x24
    1fee:	2d a3       	std	Y+37, r18	; 0x25
    1ff0:	3e a3       	std	Y+38, r19	; 0x26
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	a8 01       	movw	r20, r16
    1ff6:	c4 01       	movw	r24, r8
			fmt = check_fs(fs, bsect);		/* Check the partition */
    1ff8:	d2 da       	rcall	.-2652   	; 0x159e <check_fs>
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <f_open+0x102>
    1ffc:	1b a2       	std	Y+35, r1	; 0x23
    1ffe:	1c a2       	std	Y+36, r1	; 0x24
    2000:	1d a2       	std	Y+37, r1	; 0x25
    2002:	1e a2       	std	Y+38, r1	; 0x26
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    2004:	83 30       	cpi	r24, 0x03	; 3
    2006:	09 f4       	brne	.+2      	; 0x200a <f_open+0x108>
    2008:	b1 c1       	rjmp	.+866    	; 0x236c <__stack+0x26d>
    200a:	81 11       	cpse	r24, r1
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    200c:	e5 cf       	rjmp	.-54     	; 0x1fd8 <f_open+0xd6>
    200e:	d4 01       	movw	r26, r8
    2010:	d9 96       	adiw	r26, 0x39	; 57
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2012:	8d 91       	ld	r24, X+
    2014:	9c 91       	ld	r25, X

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2016:	da 97       	sbiw	r26, 0x3a	; 58
    2018:	81 15       	cp	r24, r1
    201a:	92 40       	sbci	r25, 0x02	; 2
    201c:	e9 f6       	brne	.-70     	; 0x1fd8 <f_open+0xd6>
    201e:	f4 01       	movw	r30, r8
    2020:	ec 5b       	subi	r30, 0xBC	; 188
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	c0 80       	ld	r12, Z
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2026:	d1 80       	ldd	r13, Z+1	; 0x01
    2028:	e1 2c       	mov	r14, r1
    202a:	f1 2c       	mov	r15, r1
    202c:	c1 14       	cp	r12, r1
    202e:	d1 04       	cpc	r13, r1
    2030:	e1 04       	cpc	r14, r1
    2032:	f1 04       	cpc	r15, r1
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2034:	39 f4       	brne	.+14     	; 0x2044 <f_open+0x142>
    2036:	f4 01       	movw	r30, r8
    2038:	ee 5a       	subi	r30, 0xAE	; 174
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	c0 80       	ld	r12, Z
    203e:	d1 80       	ldd	r13, Z+1	; 0x01
    2040:	e2 80       	ldd	r14, Z+2	; 0x02
    2042:	f3 80       	ldd	r15, Z+3	; 0x03
    2044:	f4 01       	movw	r30, r8
    2046:	c2 8e       	std	Z+26, r12	; 0x1a
    2048:	d3 8e       	std	Z+27, r13	; 0x1b
    204a:	e4 8e       	std	Z+28, r14	; 0x1c
	fs->fsize = fasize;
    204c:	f5 8e       	std	Z+29, r15	; 0x1d
    204e:	a6 ad       	ldd	r26, Z+62	; 0x3e
    2050:	a3 83       	std	Z+3, r26	; 0x03
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	8a 0f       	add	r24, r26

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	08 f0       	brcs	.+2      	; 0x205c <f_open+0x15a>
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    205a:	be cf       	rjmp	.-132    	; 0x1fd8 <f_open+0xd6>
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	a7 01       	movw	r20, r14
    2060:	96 01       	movw	r18, r12
    2062:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
	fasize *= b;										/* Number of sectors for FAT area */
    2066:	69 ab       	std	Y+49, r22	; 0x31
    2068:	7a ab       	std	Y+50, r23	; 0x32
    206a:	8b ab       	std	Y+51, r24	; 0x33
    206c:	9c ab       	std	Y+52, r25	; 0x34
    206e:	e3 ad       	ldd	r30, Z+59	; 0x3b
    2070:	d4 01       	movw	r26, r8
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	ec 93       	st	X, r30

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2076:	12 97       	sbiw	r26, 0x02	; 2
    2078:	ee 23       	and	r30, r30
    207a:	09 f4       	brne	.+2      	; 0x207e <f_open+0x17c>
    207c:	ad cf       	rjmp	.-166    	; 0x1fd8 <f_open+0xd6>
    207e:	2e 2f       	mov	r18, r30
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	c9 01       	movw	r24, r18
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	82 23       	and	r24, r18
    2088:	93 23       	and	r25, r19
    208a:	89 2b       	or	r24, r25
    208c:	09 f0       	breq	.+2      	; 0x2090 <f_open+0x18e>
    208e:	a4 cf       	rjmp	.-184    	; 0x1fd8 <f_open+0xd6>
    2090:	df 96       	adiw	r26, 0x3f	; 63
    2092:	ad 90       	ld	r10, X+
    2094:	bc 90       	ld	r11, X
    2096:	d4 01       	movw	r26, r8

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2098:	19 96       	adiw	r26, 0x09	; 9
    209a:	bc 92       	st	X, r11
    209c:	ae 92       	st	-X, r10
    209e:	18 97       	sbiw	r26, 0x08	; 8
    20a0:	c5 01       	movw	r24, r10
    20a2:	8f 70       	andi	r24, 0x0F	; 15
    20a4:	99 27       	eor	r25, r25
    20a6:	89 2b       	or	r24, r25
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    20a8:	09 f0       	breq	.+2      	; 0x20ac <f_open+0x1aa>
    20aa:	96 cf       	rjmp	.-212    	; 0x1fd8 <f_open+0xd6>
    20ac:	af 5b       	subi	r26, 0xBF	; 191
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	2d 91       	ld	r18, X+
    20b2:	3c 91       	ld	r19, X

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    20b4:	a9 01       	movw	r20, r18
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	41 15       	cp	r20, r1
    20bc:	51 05       	cpc	r21, r1
    20be:	61 05       	cpc	r22, r1
    20c0:	71 05       	cpc	r23, r1
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    20c2:	39 f4       	brne	.+14     	; 0x20d2 <f_open+0x1d0>
    20c4:	d4 01       	movw	r26, r8
    20c6:	a2 5b       	subi	r26, 0xB2	; 178
    20c8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ca:	4d 91       	ld	r20, X+
    20cc:	5d 91       	ld	r21, X+
    20ce:	6d 91       	ld	r22, X+
    20d0:	7c 91       	ld	r23, X
    20d2:	d4 01       	movw	r26, r8
    20d4:	dc 96       	adiw	r26, 0x3c	; 60
    20d6:	8d 91       	ld	r24, X+
    20d8:	9c 91       	ld	r25, X

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    20da:	dd 97       	sbiw	r26, 0x3d	; 61
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	09 f4       	brne	.+2      	; 0x20e2 <f_open+0x1e0>
    20e0:	7b cf       	rjmp	.-266    	; 0x1fd8 <f_open+0xd6>
    20e2:	8c 01       	movw	r16, r24
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	0d ab       	std	Y+53, r16	; 0x35

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    20ea:	1e ab       	std	Y+54, r17	; 0x36
    20ec:	2f ab       	std	Y+55, r18	; 0x37
    20ee:	38 af       	std	Y+56, r19	; 0x38
    20f0:	c5 01       	movw	r24, r10
    20f2:	f4 e0       	ldi	r31, 0x04	; 4
    20f4:	96 95       	lsr	r25
    20f6:	87 95       	ror	r24
    20f8:	fa 95       	dec	r31
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <f_open+0x1f2>
    20fc:	08 0f       	add	r16, r24
    20fe:	19 1f       	adc	r17, r25
    2100:	21 1d       	adc	r18, r1
    2102:	31 1d       	adc	r19, r1
    2104:	89 a9       	ldd	r24, Y+49	; 0x31
    2106:	9a a9       	ldd	r25, Y+50	; 0x32
    2108:	ab a9       	ldd	r26, Y+51	; 0x33
    210a:	bc a9       	ldd	r27, Y+52	; 0x34
    210c:	08 0f       	add	r16, r24
    210e:	19 1f       	adc	r17, r25
    2110:	2a 1f       	adc	r18, r26
    2112:	3b 1f       	adc	r19, r27
    2114:	0f a3       	std	Y+39, r16	; 0x27
    2116:	18 a7       	std	Y+40, r17	; 0x28
    2118:	29 a7       	std	Y+41, r18	; 0x29
    211a:	3a a7       	std	Y+42, r19	; 0x2a
    211c:	40 17       	cp	r20, r16
    211e:	51 07       	cpc	r21, r17
    2120:	62 07       	cpc	r22, r18
    2122:	73 07       	cpc	r23, r19
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2124:	08 f4       	brcc	.+2      	; 0x2128 <__stack+0x29>
    2126:	58 cf       	rjmp	.-336    	; 0x1fd8 <f_open+0xd6>
    2128:	cb 01       	movw	r24, r22
    212a:	ba 01       	movw	r22, r20
    212c:	60 1b       	sub	r22, r16
    212e:	71 0b       	sbc	r23, r17
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2130:	82 0b       	sbc	r24, r18
    2132:	93 0b       	sbc	r25, r19
    2134:	2e 2f       	mov	r18, r30
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__udivmodsi4>
    2140:	21 15       	cp	r18, r1
    2142:	31 05       	cpc	r19, r1
    2144:	41 05       	cpc	r20, r1
    2146:	51 05       	cpc	r21, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2148:	09 f4       	brne	.+2      	; 0x214c <__stack+0x4d>
    214a:	46 cf       	rjmp	.-372    	; 0x1fd8 <f_open+0xd6>
    214c:	26 3f       	cpi	r18, 0xF6	; 246
    214e:	9f e0       	ldi	r25, 0x0F	; 15
    2150:	39 07       	cpc	r19, r25
    2152:	41 05       	cpc	r20, r1
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2154:	51 05       	cpc	r21, r1
    2156:	40 f0       	brcs	.+16     	; 0x2168 <__stack+0x69>
    2158:	26 3f       	cpi	r18, 0xF6	; 246
    215a:	af ef       	ldi	r26, 0xFF	; 255
    215c:	3a 07       	cpc	r19, r26
    215e:	41 05       	cpc	r20, r1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2160:	51 05       	cpc	r21, r1
    2162:	20 f4       	brcc	.+8      	; 0x216c <__stack+0x6d>
    2164:	12 e0       	ldi	r17, 0x02	; 2
    2166:	03 c0       	rjmp	.+6      	; 0x216e <__stack+0x6f>
    2168:	11 e0       	ldi	r17, 0x01	; 1
    216a:	01 c0       	rjmp	.+2      	; 0x216e <__stack+0x6f>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    216c:	13 e0       	ldi	r17, 0x03	; 3
    216e:	29 01       	movw	r4, r18
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    2170:	3a 01       	movw	r6, r20
    2172:	b2 e0       	ldi	r27, 0x02	; 2
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2174:	4b 0e       	add	r4, r27

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2176:	51 1c       	adc	r5, r1
    2178:	61 1c       	adc	r6, r1
    217a:	71 1c       	adc	r7, r1
    217c:	f4 01       	movw	r30, r8
    217e:	46 8a       	std	Z+22, r4	; 0x16
    2180:	57 8a       	std	Z+23, r5	; 0x17
    2182:	60 8e       	std	Z+24, r6	; 0x18
    2184:	71 8e       	std	Z+25, r7	; 0x19
    2186:	8f a1       	ldd	r24, Y+39	; 0x27
    2188:	98 a5       	ldd	r25, Y+40	; 0x28
    218a:	a9 a5       	ldd	r26, Y+41	; 0x29
    218c:	ba a5       	ldd	r27, Y+42	; 0x2a
	fs->database = bsect + sysect;						/* Data start sector */
    218e:	2b a1       	ldd	r18, Y+35	; 0x23
    2190:	3c a1       	ldd	r19, Y+36	; 0x24
    2192:	4d a1       	ldd	r20, Y+37	; 0x25
    2194:	5e a1       	ldd	r21, Y+38	; 0x26
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	a4 1f       	adc	r26, r20
    219c:	b5 1f       	adc	r27, r21
    219e:	86 a3       	std	Z+38, r24	; 0x26
    21a0:	97 a3       	std	Z+39, r25	; 0x27
    21a2:	a0 a7       	std	Z+40, r26	; 0x28
    21a4:	b1 a7       	std	Z+41, r27	; 0x29
    21a6:	da 01       	movw	r26, r20
    21a8:	c9 01       	movw	r24, r18
    21aa:	2d a9       	ldd	r18, Y+53	; 0x35
    21ac:	3e a9       	ldd	r19, Y+54	; 0x36
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    21ae:	4f a9       	ldd	r20, Y+55	; 0x37
    21b0:	58 ad       	ldd	r21, Y+56	; 0x38
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	a4 1f       	adc	r26, r20
    21b8:	b5 1f       	adc	r27, r21
    21ba:	86 8f       	std	Z+30, r24	; 0x1e
    21bc:	97 8f       	std	Z+31, r25	; 0x1f
    21be:	a0 a3       	std	Z+32, r26	; 0x20
    21c0:	b1 a3       	std	Z+33, r27	; 0x21
    21c2:	13 30       	cpi	r17, 0x03	; 3
    21c4:	c1 f4       	brne	.+48     	; 0x21f6 <__stack+0xf7>
    21c6:	ab 28       	or	r10, r11
    21c8:	09 f0       	breq	.+2      	; 0x21cc <__stack+0xcd>
	if (fmt == FS_FAT32) {
    21ca:	06 cf       	rjmp	.-500    	; 0x1fd8 <f_open+0xd6>
    21cc:	e6 5a       	subi	r30, 0xA6	; 166
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    21d4:	a2 81       	ldd	r26, Z+2	; 0x02
    21d6:	b3 81       	ldd	r27, Z+3	; 0x03
    21d8:	f4 01       	movw	r30, r8
    21da:	82 a3       	std	Z+34, r24	; 0x22
    21dc:	93 a3       	std	Z+35, r25	; 0x23
    21de:	a4 a3       	std	Z+36, r26	; 0x24
    21e0:	b5 a3       	std	Z+37, r27	; 0x25
    21e2:	c3 01       	movw	r24, r6
    21e4:	b2 01       	movw	r22, r4
    21e6:	52 e0       	ldi	r21, 0x02	; 2
    21e8:	66 0f       	add	r22, r22
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    21ea:	77 1f       	adc	r23, r23
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	5a 95       	dec	r21
    21f2:	d1 f7       	brne	.-12     	; 0x21e8 <__stack+0xe9>
    21f4:	2c c0       	rjmp	.+88     	; 0x224e <__stack+0x14f>
    21f6:	ab 28       	or	r10, r11
    21f8:	09 f4       	brne	.+2      	; 0x21fc <__stack+0xfd>
    21fa:	ee ce       	rjmp	.-548    	; 0x1fd8 <f_open+0xd6>
    21fc:	29 a9       	ldd	r18, Y+49	; 0x31
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    21fe:	3a a9       	ldd	r19, Y+50	; 0x32
    2200:	4b a9       	ldd	r20, Y+51	; 0x33
    2202:	5c a9       	ldd	r21, Y+52	; 0x34
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2204:	82 0f       	add	r24, r18
    2206:	93 1f       	adc	r25, r19
    2208:	a4 1f       	adc	r26, r20
    220a:	b5 1f       	adc	r27, r21
    220c:	f4 01       	movw	r30, r8
    220e:	82 a3       	std	Z+34, r24	; 0x22
    2210:	93 a3       	std	Z+35, r25	; 0x23
    2212:	a4 a3       	std	Z+36, r26	; 0x24
    2214:	b5 a3       	std	Z+37, r27	; 0x25
    2216:	12 30       	cpi	r17, 0x02	; 2
    2218:	39 f4       	brne	.+14     	; 0x2228 <__stack+0x129>
    221a:	c3 01       	movw	r24, r6
    221c:	b2 01       	movw	r22, r4
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    221e:	66 0f       	add	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	88 1f       	adc	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	13 c0       	rjmp	.+38     	; 0x224e <__stack+0x14f>
    2228:	a3 e0       	ldi	r26, 0x03	; 3
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	a3 01       	movw	r20, r6
    222e:	92 01       	movw	r18, r4
    2230:	0e 94 c8 21 	call	0x4390	; 0x4390 <__muluhisi3>
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	77 95       	ror	r23
    223a:	67 95       	ror	r22
    223c:	f1 e0       	ldi	r31, 0x01	; 1
    223e:	4f 22       	and	r4, r31
    2240:	55 24       	eor	r5, r5
    2242:	66 24       	eor	r6, r6
    2244:	77 24       	eor	r7, r7
    2246:	64 0d       	add	r22, r4
    2248:	75 1d       	adc	r23, r5
    224a:	86 1d       	adc	r24, r6
    224c:	97 1d       	adc	r25, r7
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	81 50       	subi	r24, 0x01	; 1
    2254:	9e 4f       	sbci	r25, 0xFE	; 254
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2256:	af 4f       	sbci	r26, 0xFF	; 255
    2258:	bf 4f       	sbci	r27, 0xFF	; 255
    225a:	29 e0       	ldi	r18, 0x09	; 9
    225c:	b6 95       	lsr	r27
    225e:	a7 95       	ror	r26
    2260:	97 95       	ror	r25
    2262:	87 95       	ror	r24
    2264:	2a 95       	dec	r18
    2266:	d1 f7       	brne	.-12     	; 0x225c <__stack+0x15d>
    2268:	c8 16       	cp	r12, r24
    226a:	d9 06       	cpc	r13, r25
    226c:	ea 06       	cpc	r14, r26
    226e:	fb 06       	cpc	r15, r27
    2270:	08 f4       	brcc	.+2      	; 0x2274 <__stack+0x175>
    2272:	b2 ce       	rjmp	.-668    	; 0x1fd8 <f_open+0xd6>
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	9f ef       	ldi	r25, 0xFF	; 255
    2278:	dc 01       	movw	r26, r24
    227a:	f4 01       	movw	r30, r8
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    227c:	86 87       	std	Z+14, r24	; 0x0e
    227e:	97 87       	std	Z+15, r25	; 0x0f
    2280:	a0 8b       	std	Z+16, r26	; 0x10
    2282:	b1 8b       	std	Z+17, r27	; 0x11
    2284:	12 86       	std	Z+10, r1	; 0x0a
    2286:	13 86       	std	Z+11, r1	; 0x0b
    2288:	14 86       	std	Z+12, r1	; 0x0c
    228a:	15 86       	std	Z+13, r1	; 0x0d
	fs->last_clust = 0;
    228c:	13 30       	cpi	r17, 0x03	; 3
    228e:	09 f0       	breq	.+2      	; 0x2292 <__stack+0x193>
    2290:	4f c0       	rjmp	.+158    	; 0x2330 <__stack+0x231>
    2292:	15 82       	std	Z+5, r1	; 0x05

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2294:	e2 5a       	subi	r30, 0xA2	; 162
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
	 	fs->fsi_flag = 0;
    229a:	91 81       	ldd	r25, Z+1	; 0x01
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    229c:	2b a1       	ldd	r18, Y+35	; 0x23
    229e:	3c a1       	ldd	r19, Y+36	; 0x24
    22a0:	4d a1       	ldd	r20, Y+37	; 0x25
    22a2:	5e a1       	ldd	r21, Y+38	; 0x26
    22a4:	28 0f       	add	r18, r24
    22a6:	39 1f       	adc	r19, r25
    22a8:	41 1d       	adc	r20, r1
    22aa:	51 1d       	adc	r21, r1
    22ac:	f4 01       	movw	r30, r8
    22ae:	22 8b       	std	Z+18, r18	; 0x12
    22b0:	33 8b       	std	Z+19, r19	; 0x13
    22b2:	44 8b       	std	Z+20, r20	; 0x14
    22b4:	55 8b       	std	Z+21, r21	; 0x15
    22b6:	01 e0       	ldi	r16, 0x01	; 1
    22b8:	b4 01       	movw	r22, r8
    22ba:	62 5d       	subi	r22, 0xD2	; 210
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    22be:	81 81       	ldd	r24, Z+1	; 0x01
    22c0:	62 d8       	rcall	.-3900   	; 0x1386 <disk_read>
    22c2:	81 11       	cpse	r24, r1
    22c4:	35 c0       	rjmp	.+106    	; 0x2330 <__stack+0x231>
    22c6:	f4 01       	movw	r30, r8
    22c8:	e4 5d       	subi	r30, 0xD4	; 212
    22ca:	fd 4f       	sbci	r31, 0xFD	; 253
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    22d0:	85 35       	cpi	r24, 0x55	; 85
    22d2:	9a 4a       	sbci	r25, 0xAA	; 170
    22d4:	69 f5       	brne	.+90     	; 0x2330 <__stack+0x231>

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    22d6:	f4 01       	movw	r30, r8
    22d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    22da:	97 a5       	ldd	r25, Z+47	; 0x2f
    22dc:	a0 a9       	ldd	r26, Z+48	; 0x30
    22de:	b1 a9       	ldd	r27, Z+49	; 0x31
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    22e0:	82 35       	cpi	r24, 0x52	; 82
    22e2:	92 45       	sbci	r25, 0x52	; 82
    22e4:	a1 46       	sbci	r26, 0x61	; 97
    22e6:	b1 44       	sbci	r27, 0x41	; 65
    22e8:	19 f5       	brne	.+70     	; 0x2330 <__stack+0x231>
    22ea:	f4 01       	movw	r30, r8
    22ec:	ee 5e       	subi	r30, 0xEE	; 238
    22ee:	fd 4f       	sbci	r31, 0xFD	; 253
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    22f4:	a2 81       	ldd	r26, Z+2	; 0x02
    22f6:	b3 81       	ldd	r27, Z+3	; 0x03
    22f8:	82 37       	cpi	r24, 0x72	; 114
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    22fa:	92 47       	sbci	r25, 0x72	; 114
    22fc:	a1 44       	sbci	r26, 0x41	; 65
    22fe:	b1 46       	sbci	r27, 0x61	; 97
    2300:	b9 f4       	brne	.+46     	; 0x2330 <__stack+0x231>
    2302:	f4 01       	movw	r30, r8
    2304:	e6 5e       	subi	r30, 0xE6	; 230
    2306:	fd 4f       	sbci	r31, 0xFD	; 253
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    230c:	a2 81       	ldd	r26, Z+2	; 0x02
    230e:	b3 81       	ldd	r27, Z+3	; 0x03
    2310:	f4 01       	movw	r30, r8
    2312:	82 87       	std	Z+10, r24	; 0x0a
    2314:	93 87       	std	Z+11, r25	; 0x0b
    2316:	a4 87       	std	Z+12, r26	; 0x0c
    2318:	b5 87       	std	Z+13, r27	; 0x0d
    231a:	ea 5e       	subi	r30, 0xEA	; 234
    231c:	fd 4f       	sbci	r31, 0xFD	; 253
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	a2 81       	ldd	r26, Z+2	; 0x02
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2324:	b3 81       	ldd	r27, Z+3	; 0x03
    2326:	f4 01       	movw	r30, r8
    2328:	86 87       	std	Z+14, r24	; 0x0e
    232a:	97 87       	std	Z+15, r25	; 0x0f
    232c:	a0 8b       	std	Z+16, r26	; 0x10
    232e:	b1 8b       	std	Z+17, r27	; 0x11
    2330:	d4 01       	movw	r26, r8
    2332:	1c 93       	st	X, r17
    2334:	80 91 39 04 	lds	r24, 0x0439
    2338:	90 91 3a 04 	lds	r25, 0x043A
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    233c:	01 96       	adiw	r24, 0x01	; 1
	fs->id = ++Fsid;		/* File system mount ID */
    233e:	90 93 3a 04 	sts	0x043A, r25
    2342:	80 93 39 04 	sts	0x0439, r24
    2346:	17 96       	adiw	r26, 0x07	; 7
    2348:	9c 93       	st	X, r25
    234a:	8e 93       	st	-X, r24
    234c:	16 97       	sbiw	r26, 0x06	; 6
    234e:	f4 01       	movw	r30, r8
    2350:	12 a6       	std	Z+42, r1	; 0x2a
    2352:	13 a6       	std	Z+43, r1	; 0x2b
    2354:	14 a6       	std	Z+44, r1	; 0x2c
    2356:	15 a6       	std	Z+45, r1	; 0x2d
	fs->winsect = 0;		/* Invalidate sector cache */
    2358:	14 82       	std	Z+4, r1	; 0x04
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <__stack+0x271>
    235c:	89 e0       	ldi	r24, 0x09	; 9
    235e:	cd c2       	rjmp	.+1434   	; 0x28fa <__stack+0x7fb>
    2360:	8b e0       	ldi	r24, 0x0B	; 11
	fs->wflag = 0;
    2362:	cb c2       	rjmp	.+1430   	; 0x28fa <__stack+0x7fb>
    2364:	8c e0       	ldi	r24, 0x0C	; 12
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2366:	c9 c2       	rjmp	.+1426   	; 0x28fa <__stack+0x7fb>
    2368:	83 e0       	ldi	r24, 0x03	; 3
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    236a:	c7 c2       	rjmp	.+1422   	; 0x28fa <__stack+0x7fb>
    236c:	81 e0       	ldi	r24, 0x01	; 1
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    236e:	c5 c2       	rjmp	.+1418   	; 0x28fa <__stack+0x7fb>
    2370:	ce 01       	movw	r24, r28

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    2372:	47 96       	adiw	r24, 0x17	; 23
    2374:	9e 8b       	std	Y+22, r25	; 0x16
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2376:	8d 8b       	std	Y+21, r24	; 0x15
    2378:	f1 01       	movw	r30, r2
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    237a:	80 81       	ld	r24, Z
    237c:	8f 32       	cpi	r24, 0x2F	; 47
    237e:	11 f0       	breq	.+4      	; 0x2384 <__stack+0x285>
    2380:	8c 35       	cpi	r24, 0x5C	; 92
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2382:	19 f4       	brne	.+6      	; 0x238a <__stack+0x28b>
    2384:	ff ef       	ldi	r31, 0xFF	; 255
    2386:	2f 1a       	sub	r2, r31
    2388:	3f 0a       	sbc	r3, r31
    238a:	1f 82       	std	Y+7, r1	; 0x07
    238c:	18 86       	std	Y+8, r1	; 0x08
		path++;
    238e:	19 86       	std	Y+9, r1	; 0x09
    2390:	1a 86       	std	Y+10, r1	; 0x0a
    2392:	d1 01       	movw	r26, r2
	dj->sclust = 0;						/* Start from the root dir */
    2394:	8c 91       	ld	r24, X
    2396:	80 32       	cpi	r24, 0x20	; 32
    2398:	38 f4       	brcc	.+14     	; 0x23a8 <__stack+0x2a9>
    239a:	ce 01       	movw	r24, r28
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	3e da       	rcall	.-2948   	; 0x181c <dir_sdi.constprop.2>
    23a0:	28 2f       	mov	r18, r24
    23a2:	1c 8a       	std	Y+20, r1	; 0x14
		res = dir_sdi(dj, 0);
    23a4:	1b 8a       	std	Y+19, r1	; 0x13
    23a6:	f9 c0       	rjmp	.+498    	; 0x259a <__stack+0x49b>
    23a8:	10 e2       	ldi	r17, 0x20	; 32
    23aa:	b1 2e       	mov	r11, r17
    23ac:	05 e0       	ldi	r16, 0x05	; 5
		dj->dir = 0;
    23ae:	a0 2e       	mov	r10, r16
    23b0:	41 01       	movw	r8, r2
    23b2:	f1 01       	movw	r30, r2
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    23b4:	80 81       	ld	r24, Z
    23b6:	ff ef       	ldi	r31, 0xFF	; 255
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    23b8:	2f 1a       	sub	r2, r31
    23ba:	3f 0a       	sbc	r3, r31
    23bc:	8f 32       	cpi	r24, 0x2F	; 47
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    23be:	c1 f3       	breq	.-16     	; 0x23b0 <__stack+0x2b1>
    23c0:	8c 35       	cpi	r24, 0x5C	; 92
    23c2:	b1 f3       	breq	.-20     	; 0x23b0 <__stack+0x2b1>
    23c4:	ed 89       	ldd	r30, Y+21	; 0x15
    23c6:	fe 89       	ldd	r31, Y+22	; 0x16
    23c8:	cf 01       	movw	r24, r30
    23ca:	9f 01       	movw	r18, r30
    23cc:	25 5f       	subi	r18, 0xF5	; 245
    23ce:	3f 4f       	sbci	r19, 0xFF	; 255
	sfn = dj->fn;
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	21 f0       	breq	.+8      	; 0x23de <__stack+0x2df>
    23d6:	dc 01       	movw	r26, r24
    23d8:	bd 92       	st	X+, r11
    23da:	cd 01       	movw	r24, r26
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    23dc:	f9 cf       	rjmp	.-14     	; 0x23d0 <__stack+0x2d1>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
		*d++ = (BYTE)val;
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	28 e0       	ldi	r18, 0x08	; 8
    23e8:	30 e0       	ldi	r19, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    23ea:	10 e0       	ldi	r17, 0x00	; 0
    23ec:	ab 01       	movw	r20, r22
    23ee:	4f 5f       	subi	r20, 0xFF	; 255
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255
    23f2:	74 01       	movw	r14, r8
    23f4:	e6 0e       	add	r14, r22
    23f6:	f7 1e       	adc	r15, r23
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    23f8:	d7 01       	movw	r26, r14
    23fa:	0c 91       	ld	r16, X
    23fc:	01 32       	cpi	r16, 0x21	; 33
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <__stack+0x303>
    2400:	50 c0       	rjmp	.+160    	; 0x24a2 <__stack+0x3a3>
    2402:	0f 32       	cpi	r16, 0x2F	; 47
    2404:	09 f4       	brne	.+2      	; 0x2408 <__stack+0x309>
    2406:	4d c0       	rjmp	.+154    	; 0x24a2 <__stack+0x3a3>
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    2408:	0c 35       	cpi	r16, 0x5C	; 92
    240a:	09 f4       	brne	.+2      	; 0x240e <__stack+0x30f>
    240c:	4a c0       	rjmp	.+148    	; 0x24a2 <__stack+0x3a3>
    240e:	0e 32       	cpi	r16, 0x2E	; 46
    2410:	09 f4       	brne	.+2      	; 0x2414 <__stack+0x315>
    2412:	4a c2       	rjmp	.+1172   	; 0x28a8 <__stack+0x7a9>
    2414:	82 17       	cp	r24, r18
    2416:	93 07       	cpc	r25, r19
    2418:	08 f0       	brcs	.+2      	; 0x241c <__stack+0x31d>
		if (c == '.' || i >= ni) {
    241a:	be c0       	rjmp	.+380    	; 0x2598 <__stack+0x499>
    241c:	07 fd       	sbrc	r16, 7
    241e:	13 60       	ori	r17, 0x03	; 3
    2420:	bf e7       	ldi	r27, 0x7F	; 127
    2422:	fb 2e       	mov	r15, r27
    2424:	f0 0e       	add	r15, r16
    2426:	be e1       	ldi	r27, 0x1E	; 30
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    2428:	bf 15       	cp	r27, r15
			b |= 3;						/* Eliminate NT flag */
    242a:	30 f4       	brcc	.+12     	; 0x2438 <__stack+0x339>
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    242c:	a0 e2       	ldi	r26, 0x20	; 32
    242e:	fa 2e       	mov	r15, r26
    2430:	f0 0e       	add	r15, r16
    2432:	ac e1       	ldi	r26, 0x1C	; 28
    2434:	af 15       	cp	r26, r15
    2436:	30 f1       	brcs	.+76     	; 0x2484 <__stack+0x385>
    2438:	6e 5f       	subi	r22, 0xFE	; 254
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	48 0d       	add	r20, r8
    243e:	59 1d       	adc	r21, r9
    2440:	da 01       	movw	r26, r20
    2442:	dc 90       	ld	r13, X
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2444:	40 ec       	ldi	r20, 0xC0	; 192
    2446:	4d 0d       	add	r20, r13
    2448:	4f 33       	cpi	r20, 0x3F	; 63
    244a:	28 f0       	brcs	.+10     	; 0x2456 <__stack+0x357>
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	4d 0d       	add	r20, r13
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2450:	4d 37       	cpi	r20, 0x7D	; 125
    2452:	08 f0       	brcs	.+2      	; 0x2456 <__stack+0x357>
    2454:	a1 c0       	rjmp	.+322    	; 0x2598 <__stack+0x499>
    2456:	a9 01       	movw	r20, r18
    2458:	41 50       	subi	r20, 0x01	; 1
    245a:	51 09       	sbc	r21, r1
    245c:	84 17       	cp	r24, r20
    245e:	95 07       	cpc	r25, r21
    2460:	08 f0       	brcs	.+2      	; 0x2464 <__stack+0x365>
    2462:	9a c0       	rjmp	.+308    	; 0x2598 <__stack+0x499>
    2464:	ac 01       	movw	r20, r24
    2466:	4f 5f       	subi	r20, 0xFF	; 255
    2468:	5f 4f       	sbci	r21, 0xFF	; 255
    246a:	7f 01       	movw	r14, r30
    246c:	e8 0e       	add	r14, r24
    246e:	f9 1e       	adc	r15, r25
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2470:	d7 01       	movw	r26, r14
    2472:	0c 93       	st	X, r16
    2474:	02 96       	adiw	r24, 0x02	; 2
    2476:	4e 0f       	add	r20, r30
    2478:	5f 1f       	adc	r21, r31
    247a:	da 01       	movw	r26, r20
    247c:	dc 92       	st	X, r13
    247e:	ab 01       	movw	r20, r22
			sfn[i++] = d;
    2480:	ba 01       	movw	r22, r20
    2482:	b4 cf       	rjmp	.-152    	; 0x23ec <__stack+0x2ed>
    2484:	e0 2e       	mov	r14, r16
    2486:	f1 2c       	mov	r15, r1
    2488:	6b ec       	ldi	r22, 0xCB	; 203
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    248a:	71 e0       	ldi	r23, 0x01	; 1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    248c:	db 01       	movw	r26, r22
    248e:	cd 90       	ld	r12, X+
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    2490:	bd 01       	movw	r22, r26
    2492:	cc 20       	and	r12, r12
    2494:	09 f4       	brne	.+2      	; 0x2498 <__stack+0x399>
    2496:	d7 c1       	rjmp	.+942    	; 0x2846 <__stack+0x747>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    2498:	d1 2c       	mov	r13, r1
    249a:	ce 14       	cp	r12, r14
    249c:	df 04       	cpc	r13, r15
    249e:	b1 f7       	brne	.-20     	; 0x248c <__stack+0x38d>
    24a0:	7b c0       	rjmp	.+246    	; 0x2598 <__stack+0x499>
    24a2:	14 01       	movw	r2, r8
    24a4:	24 0e       	add	r2, r20
    24a6:	35 1e       	adc	r3, r21
    24a8:	01 32       	cpi	r16, 0x21	; 33
    24aa:	10 f4       	brcc	.+4      	; 0x24b0 <__stack+0x3b1>
    24ac:	44 e0       	ldi	r20, 0x04	; 4
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <__stack+0x3b3>
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	89 2b       	or	r24, r25
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <__stack+0x3b9>
    24b6:	70 c0       	rjmp	.+224    	; 0x2598 <__stack+0x499>
    24b8:	80 81       	ld	r24, Z
    24ba:	85 3e       	cpi	r24, 0xE5	; 229
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <__stack+0x3c1>

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    24be:	a0 82       	st	Z, r10
    24c0:	28 30       	cpi	r18, 0x08	; 8
    24c2:	31 05       	cpc	r19, r1
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    24c4:	11 f4       	brne	.+4      	; 0x24ca <__stack+0x3cb>
    24c6:	11 0f       	add	r17, r17
    24c8:	11 0f       	add	r17, r17
    24ca:	81 2f       	mov	r24, r17

	if (ni == 8) b <<= 2;
    24cc:	83 70       	andi	r24, 0x03	; 3
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <__stack+0x3d5>
    24d2:	40 61       	ori	r20, 0x10	; 16
    24d4:	81 2f       	mov	r24, r17
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    24d6:	8c 70       	andi	r24, 0x0C	; 12
    24d8:	84 30       	cpi	r24, 0x04	; 4
    24da:	09 f4       	brne	.+2      	; 0x24de <__stack+0x3df>
    24dc:	48 60       	ori	r20, 0x08	; 8
    24de:	43 87       	std	Z+11, r20	; 0x0b
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    24e0:	ce 01       	movw	r24, r28
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	9b d9       	rcall	.-3274   	; 0x181c <dir_sdi.constprop.2>
    24e6:	81 11       	cpse	r24, r1
    24e8:	27 c0       	rjmp	.+78     	; 0x2538 <__stack+0x439>

	sfn[NS] = c;		/* Store NT flag, File name is created */
    24ea:	4f 85       	ldd	r20, Y+15	; 0x0f
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    24ec:	58 89       	ldd	r21, Y+16	; 0x10
    24ee:	69 89       	ldd	r22, Y+17	; 0x11
    24f0:	7a 89       	ldd	r23, Y+18	; 0x12
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
	if (res != FR_OK) return res;
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    24fa:	81 11       	cpse	r24, r1
    24fc:	1d c0       	rjmp	.+58     	; 0x2538 <__stack+0x439>
    24fe:	eb 89       	ldd	r30, Y+19	; 0x13
    2500:	fc 89       	ldd	r31, Y+20	; 0x14
    2502:	80 81       	ld	r24, Z
    2504:	88 23       	and	r24, r24
    2506:	a1 f0       	breq	.+40     	; 0x2530 <__stack+0x431>
		if (res != FR_OK) break;
    2508:	83 85       	ldd	r24, Z+11	; 0x0b
    250a:	83 fd       	sbrc	r24, 3
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    250c:	0b c0       	rjmp	.+22     	; 0x2524 <__stack+0x425>
    250e:	ad 89       	ldd	r26, Y+21	; 0x15
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2510:	be 89       	ldd	r27, Y+22	; 0x16
    2512:	cf 01       	movw	r24, r30
    2514:	0b 96       	adiw	r24, 0x0b	; 11
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2516:	e8 17       	cp	r30, r24
    2518:	f9 07       	cpc	r31, r25
    251a:	61 f0       	breq	.+24     	; 0x2534 <__stack+0x435>
    251c:	31 91       	ld	r19, Z+
    251e:	2d 91       	ld	r18, X+
    2520:	32 17       	cp	r19, r18
    2522:	c9 f3       	breq	.-14     	; 0x2516 <__stack+0x417>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	d4 db       	rcall	.-2136   	; 0x1cd6 <dir_next>
    252e:	db cf       	rjmp	.-74     	; 0x24e6 <__stack+0x3e7>
    2530:	24 e0       	ldi	r18, 0x04	; 4
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    2532:	03 c0       	rjmp	.+6      	; 0x253a <__stack+0x43b>
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	01 c0       	rjmp	.+2      	; 0x253a <__stack+0x43b>
    2538:	28 2f       	mov	r18, r24
    253a:	ed 89       	ldd	r30, Y+21	; 0x15
    253c:	fe 89       	ldd	r31, Y+22	; 0x16
    253e:	83 85       	ldd	r24, Z+11	; 0x0b
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2540:	22 23       	and	r18, r18
    2542:	29 f0       	breq	.+10     	; 0x254e <__stack+0x44f>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2544:	24 30       	cpi	r18, 0x04	; 4
    2546:	49 f5       	brne	.+82     	; 0x259a <__stack+0x49b>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    2548:	82 ff       	sbrs	r24, 2
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    254a:	24 c0       	rjmp	.+72     	; 0x2594 <__stack+0x495>
    254c:	26 c0       	rjmp	.+76     	; 0x259a <__stack+0x49b>
    254e:	82 fd       	sbrc	r24, 2
			if (res != FR_OK) {				/* Failed to find the object */
    2550:	24 c0       	rjmp	.+72     	; 0x259a <__stack+0x49b>
    2552:	4b 89       	ldd	r20, Y+19	; 0x13
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    2554:	5c 89       	ldd	r21, Y+20	; 0x14
    2556:	fa 01       	movw	r30, r20
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2558:	83 85       	ldd	r24, Z+11	; 0x0b
    255a:	84 ff       	sbrs	r24, 4
    255c:	1b c0       	rjmp	.+54     	; 0x2594 <__stack+0x495>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    255e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2560:	93 8d       	ldd	r25, Z+27	; 0x1b
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    2562:	a0 e0       	ldi	r26, 0x00	; 0
    2564:	b0 e0       	ldi	r27, 0x00	; 0
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2566:	29 81       	ldd	r18, Y+1	; 0x01
    2568:	3a 81       	ldd	r19, Y+2	; 0x02
    256a:	f9 01       	movw	r30, r18
    256c:	20 81       	ld	r18, Z
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    256e:	23 30       	cpi	r18, 0x03	; 3
    2570:	61 f4       	brne	.+24     	; 0x258a <__stack+0x48b>
    2572:	fa 01       	movw	r30, r20
    2574:	44 89       	ldd	r20, Z+20	; 0x14
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2576:	55 89       	ldd	r21, Z+21	; 0x15
    2578:	60 e0       	ldi	r22, 0x00	; 0
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32)
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	ba 01       	movw	r22, r20
    257e:	55 27       	eor	r21, r21
    2580:	44 27       	eor	r20, r20
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    2582:	84 2b       	or	r24, r20
    2584:	95 2b       	or	r25, r21
    2586:	a6 2b       	or	r26, r22
    2588:	b7 2b       	or	r27, r23
    258a:	8f 83       	std	Y+7, r24	; 0x07
    258c:	98 87       	std	Y+8, r25	; 0x08
    258e:	a9 87       	std	Y+9, r26	; 0x09
    2590:	ba 87       	std	Y+10, r27	; 0x0a
    2592:	0e cf       	rjmp	.-484    	; 0x23b0 <__stack+0x2b1>
    2594:	25 e0       	ldi	r18, 0x05	; 5
    2596:	01 c0       	rjmp	.+2      	; 0x259a <__stack+0x49b>
    2598:	26 e0       	ldi	r18, 0x06	; 6
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    259a:	2b 88       	ldd	r2, Y+19	; 0x13
    259c:	3c 88       	ldd	r3, Y+20	; 0x14
    259e:	21 11       	cpse	r18, r1
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <__stack+0x4ab>
    25a2:	21 14       	cp	r2, r1
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    25a4:	31 04       	cpc	r3, r1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <__stack+0x4ab>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    25a8:	26 e0       	ldi	r18, 0x06	; 6
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    25aa:	fd a5       	ldd	r31, Y+45	; 0x2d
    25ac:	ff 71       	andi	r31, 0x1F	; 31
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    25ae:	ff a3       	std	Y+39, r31	; 0x27
    25b0:	8d a5       	ldd	r24, Y+45	; 0x2d
			if (!dir)	/* Current dir itself */
    25b2:	8c 71       	andi	r24, 0x1C	; 28
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <__stack+0x4b9>
    25b6:	e8 c0       	rjmp	.+464    	; 0x2788 <__stack+0x689>
				res = FR_INVALID_NAME;
    25b8:	22 23       	and	r18, r18

	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    25ba:	b1 f1       	breq	.+108    	; 0x2628 <__stack+0x529>
    25bc:	24 30       	cpi	r18, 0x04	; 4
    25be:	61 f5       	brne	.+88     	; 0x2618 <__stack+0x519>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    25c0:	ce 01       	movw	r24, r28
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	2b d9       	rcall	.-3498   	; 0x181c <dir_sdi.constprop.2>
    25c6:	28 2f       	mov	r18, r24
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    25c8:	81 11       	cpse	r24, r1
    25ca:	26 c0       	rjmp	.+76     	; 0x2618 <__stack+0x519>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    25cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    25ce:	58 89       	ldd	r21, Y+16	; 0x10
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    25d0:	69 89       	ldd	r22, Y+17	; 0x11
    25d2:	7a 89       	ldd	r23, Y+18	; 0x12
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
	if (res == FR_OK) {
    25dc:	28 2f       	mov	r18, r24
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    25de:	81 11       	cpse	r24, r1
    25e0:	1b c0       	rjmp	.+54     	; 0x2618 <__stack+0x519>
    25e2:	eb 89       	ldd	r30, Y+19	; 0x13
    25e4:	fc 89       	ldd	r31, Y+20	; 0x14
    25e6:	80 81       	ld	r24, Z
    25e8:	85 3e       	cpi	r24, 0xE5	; 229
    25ea:	09 f4       	brne	.+2      	; 0x25ee <__stack+0x4ef>
    25ec:	3f c1       	rjmp	.+638    	; 0x286c <__stack+0x76d>
    25ee:	88 23       	and	r24, r24
			if (res != FR_OK) break;
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <__stack+0x4f5>
    25f2:	3c c1       	rjmp	.+632    	; 0x286c <__stack+0x76d>
			c = *dj->dir;
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	ce 01       	movw	r24, r28
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	6c db       	rcall	.-2344   	; 0x1cd6 <dir_next>
    25fe:	e3 cf       	rjmp	.-58     	; 0x25c6 <__stack+0x4c7>
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	4b e0       	ldi	r20, 0x0B	; 11
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	29 af       	std	Y+57, r18	; 0x39
    260a:	0e 94 37 0a 	call	0x146e	; 0x146e <mem_cpy>
    260e:	e9 81       	ldd	r30, Y+1	; 0x01
    2610:	fa 81       	ldd	r31, Y+2	; 0x02
    2612:	81 e0       	ldi	r24, 0x01	; 1
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2614:	84 83       	std	Z+4, r24	; 0x04
    2616:	29 ad       	ldd	r18, Y+57	; 0x39
    2618:	0f a1       	ldd	r16, Y+39	; 0x27
    261a:	08 60       	ori	r16, 0x08	; 8
    261c:	0f a3       	std	Y+39, r16	; 0x27
    261e:	2b 88       	ldd	r2, Y+19	; 0x13
    2620:	3c 88       	ldd	r3, Y+20	; 0x14
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    2622:	22 23       	and	r18, r18
    2624:	51 f0       	breq	.+20     	; 0x263a <__stack+0x53b>
    2626:	3e c1       	rjmp	.+636    	; 0x28a4 <__stack+0x7a5>
    2628:	d1 01       	movw	r26, r2
    262a:	1b 96       	adiw	r26, 0x0b	; 11
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    262c:	8c 91       	ld	r24, X
    262e:	81 71       	andi	r24, 0x11	; 17
    2630:	09 f0       	breq	.+2      	; 0x2634 <__stack+0x535>
				dir = dj.dir;					/* New entry */
    2632:	37 c1       	rjmp	.+622    	; 0x28a2 <__stack+0x7a3>
    2634:	1d a5       	ldd	r17, Y+45	; 0x2d
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2636:	12 fd       	sbrc	r17, 2
    2638:	30 c1       	rjmp	.+608    	; 0x289a <__stack+0x79b>
    263a:	2f a1       	ldd	r18, Y+39	; 0x27
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    263c:	23 ff       	sbrs	r18, 3
    263e:	b0 c0       	rjmp	.+352    	; 0x27a0 <__stack+0x6a1>
    2640:	0e 94 df 09 	call	0x13be	; 0x13be <get_fattime>
    2644:	d1 01       	movw	r26, r2
    2646:	1e 96       	adiw	r26, 0x0e	; 14
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    2648:	6d 93       	st	X+, r22
    264a:	7d 93       	st	X+, r23
    264c:	8d 93       	st	X+, r24
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    264e:	9c 93       	st	X, r25
    2650:	51 97       	sbiw	r26, 0x11	; 17
    2652:	1b 96       	adiw	r26, 0x0b	; 11
				dw = get_fattime();					/* Created time */
    2654:	1c 92       	st	X, r1
    2656:	f1 01       	movw	r30, r2
				ST_DWORD(dir+DIR_CrtTime, dw);
    2658:	14 8e       	std	Z+28, r1	; 0x1c
    265a:	15 8e       	std	Z+29, r1	; 0x1d
    265c:	16 8e       	std	Z+30, r1	; 0x1e
    265e:	17 8e       	std	Z+31, r1	; 0x1f
    2660:	09 81       	ldd	r16, Y+1	; 0x01
    2662:	1a 81       	ldd	r17, Y+2	; 0x02
    2664:	1c a3       	std	Y+36, r17	; 0x24
				dir[DIR_Attr] = 0;					/* Reset attribute */
    2666:	0b a3       	std	Y+35, r16	; 0x23
    2668:	82 8d       	ldd	r24, Z+26	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    266a:	93 8d       	ldd	r25, Z+27	; 0x1b
    266c:	2c 01       	movw	r4, r24
    266e:	61 2c       	mov	r6, r1
    2670:	71 2c       	mov	r7, r1
    2672:	d8 01       	movw	r26, r16
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    2674:	8c 91       	ld	r24, X
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	59 f4       	brne	.+22     	; 0x2690 <__stack+0x591>
    267a:	84 89       	ldd	r24, Z+20	; 0x14
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    267c:	95 89       	ldd	r25, Z+21	; 0x15
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	dc 01       	movw	r26, r24
    2684:	99 27       	eor	r25, r25
	if (fs->fs_type == FS_FAT32)
    2686:	88 27       	eor	r24, r24
    2688:	48 2a       	or	r4, r24
    268a:	59 2a       	or	r5, r25
    268c:	6a 2a       	or	r6, r26
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    268e:	7b 2a       	or	r7, r27
    2690:	f1 01       	movw	r30, r2
    2692:	13 8e       	std	Z+27, r1	; 0x1b
    2694:	12 8e       	std	Z+26, r1	; 0x1a
    2696:	15 8a       	std	Z+21, r1	; 0x15
    2698:	14 8a       	std	Z+20, r1	; 0x14
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	ab a1       	ldd	r26, Y+35	; 0x23
    269e:	bc a1       	ldd	r27, Y+36	; 0x24
    26a0:	14 96       	adiw	r26, 0x04	; 4
    26a2:	8c 93       	st	X, r24
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    26a4:	14 97       	sbiw	r26, 0x04	; 4
    26a6:	41 14       	cp	r4, r1
    26a8:	51 04       	cpc	r5, r1
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    26aa:	61 04       	cpc	r6, r1
    26ac:	71 04       	cpc	r7, r1
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;					/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
				st_clust(dir, 0);					/* cluster = 0 */
				dj.fs->wflag = 1;
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <__stack+0x5b3>
    26b0:	77 c0       	rjmp	.+238    	; 0x27a0 <__stack+0x6a1>
    26b2:	9a 96       	adiw	r26, 0x2a	; 42
    26b4:	0d 91       	ld	r16, X+
    26b6:	1d 91       	ld	r17, X+
    26b8:	2d 91       	ld	r18, X+
				if (cl) {							/* Remove the cluster chain if exist */
    26ba:	3c 91       	ld	r19, X
    26bc:	9d 97       	sbiw	r26, 0x2d	; 45
    26be:	0d a7       	std	Y+45, r16	; 0x2d
    26c0:	1e a7       	std	Y+46, r17	; 0x2e
    26c2:	2f a7       	std	Y+47, r18	; 0x2f
    26c4:	38 ab       	std	Y+48, r19	; 0x30
					dw = dj.fs->winsect;
    26c6:	b2 e0       	ldi	r27, 0x02	; 2
    26c8:	4b 16       	cp	r4, r27
    26ca:	51 04       	cpc	r5, r1
    26cc:	61 04       	cpc	r6, r1
    26ce:	71 04       	cpc	r7, r1
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <__stack+0x5d5>
    26d2:	f5 c0       	rjmp	.+490    	; 0x28be <__stack+0x7bf>
    26d4:	eb a1       	ldd	r30, Y+35	; 0x23
    26d6:	fc a1       	ldd	r31, Y+36	; 0x24
    26d8:	86 89       	ldd	r24, Z+22	; 0x16
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    26da:	97 89       	ldd	r25, Z+23	; 0x17
    26dc:	a0 8d       	ldd	r26, Z+24	; 0x18
    26de:	b1 8d       	ldd	r27, Z+25	; 0x19
    26e0:	48 16       	cp	r4, r24
    26e2:	59 06       	cpc	r5, r25
    26e4:	6a 06       	cpc	r6, r26
    26e6:	7b 06       	cpc	r7, r27
    26e8:	08 f0       	brcs	.+2      	; 0x26ec <__stack+0x5ed>
    26ea:	e9 c0       	rjmp	.+466    	; 0x28be <__stack+0x7bf>
    26ec:	73 01       	movw	r14, r6
    26ee:	62 01       	movw	r12, r4
    26f0:	eb a1       	ldd	r30, Y+35	; 0x23
    26f2:	fc a1       	ldd	r31, Y+36	; 0x24
    26f4:	86 89       	ldd	r24, Z+22	; 0x16
    26f6:	97 89       	ldd	r25, Z+23	; 0x17
    26f8:	a0 8d       	ldd	r26, Z+24	; 0x18
    26fa:	b1 8d       	ldd	r27, Z+25	; 0x19
    26fc:	c8 16       	cp	r12, r24
    26fe:	d9 06       	cpc	r13, r25
    2700:	ea 06       	cpc	r14, r26
    2702:	fb 06       	cpc	r15, r27
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2704:	08 f0       	brcs	.+2      	; 0x2708 <__stack+0x609>
    2706:	df c0       	rjmp	.+446    	; 0x28c6 <__stack+0x7c7>
    2708:	b7 01       	movw	r22, r14
    270a:	a6 01       	movw	r20, r12
    270c:	8b a1       	ldd	r24, Y+35	; 0x23
    270e:	9c a1       	ldd	r25, Y+36	; 0x24
    2710:	0e 94 4d 0b 	call	0x169a	; 0x169a <get_fat>
    2714:	4b 01       	movw	r8, r22
    2716:	5c 01       	movw	r10, r24
    2718:	61 15       	cp	r22, r1
    271a:	71 05       	cpc	r23, r1
			nxt = get_fat(fs, clst);			/* Get cluster status */
    271c:	81 05       	cpc	r24, r1
    271e:	91 05       	cpc	r25, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <__stack+0x625>
    2722:	d1 c0       	rjmp	.+418    	; 0x28c6 <__stack+0x7c7>
    2724:	61 30       	cpi	r22, 0x01	; 1
    2726:	71 05       	cpc	r23, r1
    2728:	81 05       	cpc	r24, r1
    272a:	91 05       	cpc	r25, r1
			if (nxt == 0) break;				/* Empty cluster? */
    272c:	09 f4       	brne	.+2      	; 0x2730 <__stack+0x631>
    272e:	c7 c0       	rjmp	.+398    	; 0x28be <__stack+0x7bf>
    2730:	6f 3f       	cpi	r22, 0xFF	; 255
    2732:	0f ef       	ldi	r16, 0xFF	; 255
    2734:	70 07       	cpc	r23, r16
    2736:	80 07       	cpc	r24, r16
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2738:	90 07       	cpc	r25, r16
    273a:	09 f4       	brne	.+2      	; 0x273e <__stack+0x63f>
    273c:	c2 c0       	rjmp	.+388    	; 0x28c2 <__stack+0x7c3>
    273e:	00 e0       	ldi	r16, 0x00	; 0
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	98 01       	movw	r18, r16
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2744:	b7 01       	movw	r22, r14
    2746:	a6 01       	movw	r20, r12
    2748:	8b a1       	ldd	r24, Y+35	; 0x23
    274a:	9c a1       	ldd	r25, Y+36	; 0x24
    274c:	df d8       	rcall	.-3650   	; 0x190c <put_fat>
    274e:	28 2f       	mov	r18, r24
    2750:	81 11       	cpse	r24, r1
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2752:	a8 c0       	rjmp	.+336    	; 0x28a4 <__stack+0x7a5>
    2754:	eb a1       	ldd	r30, Y+35	; 0x23
    2756:	fc a1       	ldd	r31, Y+36	; 0x24
    2758:	86 85       	ldd	r24, Z+14	; 0x0e
    275a:	97 85       	ldd	r25, Z+15	; 0x0f
    275c:	a0 89       	ldd	r26, Z+16	; 0x10
    275e:	b1 89       	ldd	r27, Z+17	; 0x11
    2760:	8f 3f       	cpi	r24, 0xFF	; 255
    2762:	ff ef       	ldi	r31, 0xFF	; 255
    2764:	9f 07       	cpc	r25, r31
			if (res != FR_OK) break;
    2766:	af 07       	cpc	r26, r31
    2768:	bf 07       	cpc	r27, r31
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    276a:	59 f0       	breq	.+22     	; 0x2782 <__stack+0x683>
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	a1 1d       	adc	r26, r1
    2770:	b1 1d       	adc	r27, r1
    2772:	eb a1       	ldd	r30, Y+35	; 0x23
    2774:	fc a1       	ldd	r31, Y+36	; 0x24
    2776:	86 87       	std	Z+14, r24	; 0x0e
    2778:	97 87       	std	Z+15, r25	; 0x0f
    277a:	a0 8b       	std	Z+16, r26	; 0x10
    277c:	b1 8b       	std	Z+17, r27	; 0x11
    277e:	01 e0       	ldi	r16, 0x01	; 1
    2780:	05 83       	std	Z+5, r16	; 0x05
				fs->free_clust++;
    2782:	75 01       	movw	r14, r10
    2784:	64 01       	movw	r12, r8
    2786:	b4 cf       	rjmp	.-152    	; 0x26f0 <__stack+0x5f1>
    2788:	21 11       	cpse	r18, r1
    278a:	8c c0       	rjmp	.+280    	; 0x28a4 <__stack+0x7a5>
    278c:	d1 01       	movw	r26, r2
    278e:	1b 96       	adiw	r26, 0x0b	; 11
    2790:	8c 91       	ld	r24, X
    2792:	84 fd       	sbrc	r24, 4
				fs->fsi_flag = 1;
    2794:	84 c0       	rjmp	.+264    	; 0x289e <__stack+0x79f>
    2796:	1d a5       	ldd	r17, Y+45	; 0x2d
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2798:	11 ff       	sbrs	r17, 1
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <__stack+0x6a1>
    279c:	80 fd       	sbrc	r24, 0
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    279e:	81 c0       	rjmp	.+258    	; 0x28a2 <__stack+0x7a3>
    27a0:	2f a1       	ldd	r18, Y+39	; 0x27
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    27a2:	23 ff       	sbrs	r18, 3
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <__stack+0x6ab>
    27a6:	20 62       	ori	r18, 0x20	; 32
    27a8:	2f a3       	std	Y+39, r18	; 0x27
    27aa:	09 81       	ldd	r16, Y+1	; 0x01
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    27ac:	1a 81       	ldd	r17, Y+2	; 0x02
    27ae:	d8 01       	movw	r26, r16
    27b0:	9a 96       	adiw	r26, 0x2a	; 42
    27b2:	4d 91       	ld	r20, X+
    27b4:	5d 91       	ld	r21, X+
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    27b6:	6d 91       	ld	r22, X+
    27b8:	7c 91       	ld	r23, X
    27ba:	9d 97       	sbiw	r26, 0x2d	; 45
				mode |= FA__WRITTEN;
    27bc:	eb a5       	ldd	r30, Y+43	; 0x2b
    27be:	fc a5       	ldd	r31, Y+44	; 0x2c
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    27c0:	42 8f       	std	Z+26, r20	; 0x1a
    27c2:	53 8f       	std	Z+27, r21	; 0x1b
    27c4:	64 8f       	std	Z+28, r22	; 0x1c
    27c6:	75 8f       	std	Z+29, r23	; 0x1d
    27c8:	37 8e       	std	Z+31, r3	; 0x1f
    27ca:	26 8e       	std	Z+30, r2	; 0x1e
    27cc:	2f a1       	ldd	r18, Y+39	; 0x27
    27ce:	24 83       	std	Z+4, r18	; 0x04
    27d0:	d1 01       	movw	r26, r2
    27d2:	5a 96       	adiw	r26, 0x1a	; 26
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	5b 97       	sbiw	r26, 0x1b	; 27
    27da:	a0 e0       	ldi	r26, 0x00	; 0
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
			fp->dir_ptr = dir;
    27de:	f8 01       	movw	r30, r16
    27e0:	20 81       	ld	r18, Z
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    27e2:	23 30       	cpi	r18, 0x03	; 3
    27e4:	61 f4       	brne	.+24     	; 0x27fe <__stack+0x6ff>
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    27e6:	f1 01       	movw	r30, r2
    27e8:	44 89       	ldd	r20, Z+20	; 0x14
    27ea:	55 89       	ldd	r21, Z+21	; 0x15
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	ba 01       	movw	r22, r20
    27f2:	55 27       	eor	r21, r21
	if (fs->fs_type == FS_FAT32)
    27f4:	44 27       	eor	r20, r20
    27f6:	84 2b       	or	r24, r20
    27f8:	95 2b       	or	r25, r21
    27fa:	a6 2b       	or	r26, r22
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    27fc:	b7 2b       	or	r27, r23
    27fe:	eb a5       	ldd	r30, Y+43	; 0x2b
    2800:	fc a5       	ldd	r31, Y+44	; 0x2c
    2802:	86 87       	std	Z+14, r24	; 0x0e
    2804:	97 87       	std	Z+15, r25	; 0x0f
    2806:	a0 8b       	std	Z+16, r26	; 0x10
    2808:	b1 8b       	std	Z+17, r27	; 0x11
    280a:	f1 01       	movw	r30, r2
    280c:	84 8d       	ldd	r24, Z+28	; 0x1c
    280e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2810:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2812:	b7 8d       	ldd	r27, Z+31	; 0x1f
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2814:	eb a5       	ldd	r30, Y+43	; 0x2b
    2816:	fc a5       	ldd	r31, Y+44	; 0x2c
    2818:	82 87       	std	Z+10, r24	; 0x0a
    281a:	93 87       	std	Z+11, r25	; 0x0b
    281c:	a4 87       	std	Z+12, r26	; 0x0c
    281e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2820:	16 82       	std	Z+6, r1	; 0x06
    2822:	17 82       	std	Z+7, r1	; 0x07
    2824:	10 86       	std	Z+8, r1	; 0x08
    2826:	11 86       	std	Z+9, r1	; 0x09
    2828:	16 8a       	std	Z+22, r1	; 0x16
    282a:	17 8a       	std	Z+23, r1	; 0x17
    282c:	10 8e       	std	Z+24, r1	; 0x18
    282e:	11 8e       	std	Z+25, r1	; 0x19
    2830:	11 83       	std	Z+1, r17	; 0x01
    2832:	00 83       	st	Z, r16
    2834:	d8 01       	movw	r26, r16
			fp->fptr = 0;						/* File pointer */
    2836:	16 96       	adiw	r26, 0x06	; 6
    2838:	8d 91       	ld	r24, X+
    283a:	9c 91       	ld	r25, X
    283c:	17 97       	sbiw	r26, 0x07	; 7
			fp->dsect = 0;
    283e:	93 83       	std	Z+3, r25	; 0x03
    2840:	82 83       	std	Z+2, r24	; 0x02
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	5a c0       	rjmp	.+180    	; 0x28fa <__stack+0x7fb>
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2846:	6f eb       	ldi	r22, 0xBF	; 191
    2848:	60 0f       	add	r22, r16
    284a:	6a 31       	cpi	r22, 0x1A	; 26
    284c:	10 f4       	brcc	.+4      	; 0x2852 <__stack+0x753>
    284e:	12 60       	ori	r17, 0x02	; 2
    2850:	06 c0       	rjmp	.+12     	; 0x285e <__stack+0x75f>
    2852:	6f e9       	ldi	r22, 0x9F	; 159
    2854:	60 0f       	add	r22, r16
    2856:	6a 31       	cpi	r22, 0x1A	; 26
    2858:	10 f4       	brcc	.+4      	; 0x285e <__stack+0x75f>
    285a:	11 60       	ori	r17, 0x01	; 1
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    285c:	00 52       	subi	r16, 0x20	; 32
    285e:	bf 01       	movw	r22, r30
    2860:	68 0f       	add	r22, r24
    2862:	79 1f       	adc	r23, r25
				b |= 2;
    2864:	db 01       	movw	r26, r22
    2866:	0c 93       	st	X, r16
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	0a ce       	rjmp	.-1004   	; 0x2480 <__stack+0x381>
    286c:	4f 85       	ldd	r20, Y+15	; 0x0f
    286e:	58 89       	ldd	r21, Y+16	; 0x10
					b |= 1; c -= 0x20;
    2870:	69 89       	ldd	r22, Y+17	; 0x11
    2872:	7a 89       	ldd	r23, Y+18	; 0x12
				}
			}
			sfn[i++] = c;
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    287c:	28 2f       	mov	r18, r24
    287e:	81 11       	cpse	r24, r1
    2880:	cb ce       	rjmp	.-618    	; 0x2618 <__stack+0x519>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	fc 01       	movw	r30, r24
    2888:	ac 01       	movw	r20, r24
    288a:	40 5e       	subi	r20, 0xE0	; 224
    288c:	5f 4f       	sbci	r21, 0xFF	; 255
    288e:	e4 17       	cp	r30, r20
    2890:	f5 07       	cpc	r31, r21
    2892:	09 f4       	brne	.+2      	; 0x2896 <__stack+0x797>
		if (res == FR_OK) {
    2894:	b5 ce       	rjmp	.-662    	; 0x2600 <__stack+0x501>
    2896:	11 92       	st	Z+, r1
			dir = dj->dir;
    2898:	fa cf       	rjmp	.-12     	; 0x288e <__stack+0x78f>
    289a:	28 e0       	ldi	r18, 0x08	; 8
    289c:	03 c0       	rjmp	.+6      	; 0x28a4 <__stack+0x7a5>
    289e:	24 e0       	ldi	r18, 0x04	; 4
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <__stack+0x7a5>
    28a2:	27 e0       	ldi	r18, 0x07	; 7
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    28a4:	82 2f       	mov	r24, r18
    28a6:	29 c0       	rjmp	.+82     	; 0x28fa <__stack+0x7fb>
    28a8:	28 30       	cpi	r18, 0x08	; 8
    28aa:	31 05       	cpc	r19, r1
		*d++ = (BYTE)val;
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <__stack+0x7b1>
    28ae:	74 ce       	rjmp	.-792    	; 0x2598 <__stack+0x499>
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    28b0:	11 0f       	add	r17, r17
    28b2:	11 0f       	add	r17, r17
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    28b4:	88 e0       	ldi	r24, 0x08	; 8
    28b6:	90 e0       	ldi	r25, 0x00	; 0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    28b8:	2b e0       	ldi	r18, 0x0B	; 11
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	e1 cd       	rjmp	.-1086   	; 0x2480 <__stack+0x381>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    28be:	22 e0       	ldi	r18, 0x02	; 2
    28c0:	f1 cf       	rjmp	.-30     	; 0x28a4 <__stack+0x7a5>
    28c2:	21 e0       	ldi	r18, 0x01	; 1
    28c4:	ef cf       	rjmp	.-34     	; 0x28a4 <__stack+0x7a5>
			i = 8; ni = 11;
			b <<= 2; continue;
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    28ca:	b3 01       	movw	r22, r6
    28cc:	a2 01       	movw	r20, r4
    28ce:	41 50       	subi	r20, 0x01	; 1
    28d0:	51 09       	sbc	r21, r1
    28d2:	61 09       	sbc	r22, r1
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    28d4:	71 09       	sbc	r23, r1
    28d6:	dc 01       	movw	r26, r24
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    28d8:	1a 96       	adiw	r26, 0x0a	; 10
    28da:	4d 93       	st	X+, r20
				dj.fs->wflag = 1;
				if (cl) {							/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    28dc:	5d 93       	st	X+, r21
    28de:	6d 93       	st	X+, r22
    28e0:	7c 93       	st	X, r23
    28e2:	1d 97       	sbiw	r26, 0x0d	; 13
    28e4:	4d a5       	ldd	r20, Y+45	; 0x2d
    28e6:	5e a5       	ldd	r21, Y+46	; 0x2e
    28e8:	6f a5       	ldd	r22, Y+47	; 0x2f
    28ea:	78 a9       	ldd	r23, Y+48	; 0x30
    28ec:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    28f0:	28 2f       	mov	r18, r24
    28f2:	88 23       	and	r24, r24
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__stack+0x7f9>
    28f6:	54 cf       	rjmp	.-344    	; 0x27a0 <__stack+0x6a1>
    28f8:	d5 cf       	rjmp	.-86     	; 0x28a4 <__stack+0x7a5>
						res = move_window(dj.fs, dw);
    28fa:	e9 96       	adiw	r28, 0x39	; 57
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	df 91       	pop	r29
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	bf 90       	pop	r11
    2918:	af 90       	pop	r10
    291a:	9f 90       	pop	r9
    291c:	8f 90       	pop	r8
    291e:	7f 90       	pop	r7
    2920:	6f 90       	pop	r6
    2922:	5f 90       	pop	r5
    2924:	4f 90       	pop	r4
    2926:	3f 90       	pop	r3
    2928:	2f 90       	pop	r2
    292a:	08 95       	ret

0000292c <f_write>:
    292c:	2f 92       	push	r2
    292e:	3f 92       	push	r3
    2930:	4f 92       	push	r4
    2932:	5f 92       	push	r5
    2934:	6f 92       	push	r6
    2936:	7f 92       	push	r7
    2938:	8f 92       	push	r8
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	ec 01       	movw	r28, r24
    2952:	5b 01       	movw	r10, r22
    2954:	7a 01       	movw	r14, r20
    2956:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2958:	f9 01       	movw	r30, r18
    295a:	11 82       	std	Z+1, r1	; 0x01
    295c:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    295e:	0e 94 08 0b 	call	0x1610	; 0x1610 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2962:	81 11       	cpse	r24, r1
    2964:	5e c1       	rjmp	.+700    	; 0x2c22 <f_write+0x2f6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2966:	8c 81       	ldd	r24, Y+4	; 0x04
    2968:	87 fd       	sbrc	r24, 7
    296a:	58 c1       	rjmp	.+688    	; 0x2c1c <f_write+0x2f0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    296c:	81 ff       	sbrs	r24, 1
    296e:	58 c1       	rjmp	.+688    	; 0x2c20 <f_write+0x2f4>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2970:	8a 85       	ldd	r24, Y+10	; 0x0a
    2972:	9b 85       	ldd	r25, Y+11	; 0x0b
    2974:	ac 85       	ldd	r26, Y+12	; 0x0c
    2976:	bd 85       	ldd	r27, Y+13	; 0x0d
    2978:	ac 01       	movw	r20, r24
    297a:	bd 01       	movw	r22, r26
    297c:	4e 0d       	add	r20, r14
    297e:	5f 1d       	adc	r21, r15
    2980:	61 1d       	adc	r22, r1
    2982:	71 1d       	adc	r23, r1
    2984:	48 17       	cp	r20, r24
    2986:	59 07       	cpc	r21, r25
    2988:	6a 07       	cpc	r22, r26
    298a:	7b 07       	cpc	r23, r27
    298c:	10 f4       	brcc	.+4      	; 0x2992 <f_write+0x66>
    298e:	e1 2c       	mov	r14, r1
    2990:	f1 2c       	mov	r15, r1
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2992:	11 e0       	ldi	r17, 0x01	; 1
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2994:	e1 14       	cp	r14, r1
    2996:	f1 04       	cpc	r15, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <f_write+0x70>
    299a:	40 c0       	rjmp	.+128    	; 0x2a1c <f_write+0xf0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    299c:	4e 81       	ldd	r20, Y+6	; 0x06
    299e:	5f 81       	ldd	r21, Y+7	; 0x07
    29a0:	68 85       	ldd	r22, Y+8	; 0x08
    29a2:	79 85       	ldd	r23, Y+9	; 0x09
    29a4:	db 01       	movw	r26, r22
    29a6:	ca 01       	movw	r24, r20
    29a8:	91 70       	andi	r25, 0x01	; 1
    29aa:	aa 27       	eor	r26, r26
    29ac:	bb 27       	eor	r27, r27
    29ae:	89 2b       	or	r24, r25
    29b0:	8a 2b       	or	r24, r26
    29b2:	8b 2b       	or	r24, r27
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <f_write+0x8c>
    29b6:	e7 c0       	rjmp	.+462    	; 0x2b86 <f_write+0x25a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    29b8:	e8 81       	ld	r30, Y
    29ba:	f9 81       	ldd	r31, Y+1	; 0x01
    29bc:	02 81       	ldd	r16, Z+2	; 0x02
    29be:	01 50       	subi	r16, 0x01	; 1
    29c0:	2a 01       	movw	r4, r20
    29c2:	3b 01       	movw	r6, r22
    29c4:	a9 e0       	ldi	r26, 0x09	; 9
    29c6:	76 94       	lsr	r7
    29c8:	67 94       	ror	r6
    29ca:	57 94       	ror	r5
    29cc:	47 94       	ror	r4
    29ce:	aa 95       	dec	r26
    29d0:	d1 f7       	brne	.-12     	; 0x29c6 <f_write+0x9a>
    29d2:	04 21       	and	r16, r4
			if (!csect) {					/* On the cluster boundary? */
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <f_write+0xac>
    29d6:	45 c0       	rjmp	.+138    	; 0x2a62 <f_write+0x136>
				if (fp->fptr == 0) {		/* On the top of the file? */
    29d8:	45 2b       	or	r20, r21
    29da:	46 2b       	or	r20, r22
    29dc:	47 2b       	or	r20, r23
    29de:	99 f4       	brne	.+38     	; 0x2a06 <f_write+0xda>
					clst = fp->sclust;		/* Follow from the origin */
    29e0:	6e 85       	ldd	r22, Y+14	; 0x0e
    29e2:	7f 85       	ldd	r23, Y+15	; 0x0f
    29e4:	88 89       	ldd	r24, Y+16	; 0x10
    29e6:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    29e8:	61 15       	cp	r22, r1
    29ea:	71 05       	cpc	r23, r1
    29ec:	81 05       	cpc	r24, r1
    29ee:	91 05       	cpc	r25, r1
    29f0:	41 f5       	brne	.+80     	; 0x2a42 <f_write+0x116>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	ba 01       	movw	r22, r20
    29f8:	cf 01       	movw	r24, r30
    29fa:	98 d8       	rcall	.-3792   	; 0x1b2c <create_chain>
    29fc:	6e 87       	std	Y+14, r22	; 0x0e
    29fe:	7f 87       	std	Y+15, r23	; 0x0f
    2a00:	88 8b       	std	Y+16, r24	; 0x10
    2a02:	99 8b       	std	Y+17, r25	; 0x11
    2a04:	06 c0       	rjmp	.+12     	; 0x2a12 <f_write+0xe6>
    2a06:	4a 89       	ldd	r20, Y+18	; 0x12
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2a08:	5b 89       	ldd	r21, Y+19	; 0x13
    2a0a:	6c 89       	ldd	r22, Y+20	; 0x14
    2a0c:	7d 89       	ldd	r23, Y+21	; 0x15
    2a0e:	cf 01       	movw	r24, r30
    2a10:	8d d8       	rcall	.-3814   	; 0x1b2c <create_chain>
    2a12:	61 15       	cp	r22, r1
    2a14:	71 05       	cpc	r23, r1
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2a16:	81 05       	cpc	r24, r1
    2a18:	91 05       	cpc	r25, r1
    2a1a:	99 f4       	brne	.+38     	; 0x2a42 <f_write+0x116>
    2a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1e:	9f 81       	ldd	r25, Y+7	; 0x07
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2a20:	a8 85       	ldd	r26, Y+8	; 0x08
    2a22:	b9 85       	ldd	r27, Y+9	; 0x09
    2a24:	4a 85       	ldd	r20, Y+10	; 0x0a
    2a26:	5b 85       	ldd	r21, Y+11	; 0x0b
    2a28:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a2c:	48 17       	cp	r20, r24
    2a2e:	59 07       	cpc	r21, r25
    2a30:	6a 07       	cpc	r22, r26
    2a32:	7b 07       	cpc	r23, r27
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <f_write+0x10c>
    2a36:	ed c0       	rjmp	.+474    	; 0x2c12 <f_write+0x2e6>
    2a38:	8a 87       	std	Y+10, r24	; 0x0a
    2a3a:	9b 87       	std	Y+11, r25	; 0x0b
    2a3c:	ac 87       	std	Y+12, r26	; 0x0c
    2a3e:	bd 87       	std	Y+13, r27	; 0x0d
    2a40:	e8 c0       	rjmp	.+464    	; 0x2c12 <f_write+0x2e6>
    2a42:	61 30       	cpi	r22, 0x01	; 1
    2a44:	71 05       	cpc	r23, r1
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2a46:	81 05       	cpc	r24, r1
    2a48:	91 05       	cpc	r25, r1
    2a4a:	81 f1       	breq	.+96     	; 0x2aac <f_write+0x180>
    2a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    2a4e:	ff ef       	ldi	r31, 0xFF	; 255
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a50:	7f 07       	cpc	r23, r31
    2a52:	8f 07       	cpc	r24, r31
    2a54:	9f 07       	cpc	r25, r31
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <f_write+0x12e>
    2a58:	ac c0       	rjmp	.+344    	; 0x2bb2 <f_write+0x286>
    2a5a:	6a 8b       	std	Y+18, r22	; 0x12
    2a5c:	7b 8b       	std	Y+19, r23	; 0x13
				fp->clust = clst;			/* Update current cluster */
    2a5e:	8c 8b       	std	Y+20, r24	; 0x14
    2a60:	9d 8b       	std	Y+21, r25	; 0x15
    2a62:	88 81       	ld	r24, Y
    2a64:	99 81       	ldd	r25, Y+1	; 0x01
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2a66:	fc 01       	movw	r30, r24
    2a68:	42 a4       	ldd	r4, Z+42	; 0x2a
    2a6a:	53 a4       	ldd	r5, Z+43	; 0x2b
    2a6c:	64 a4       	ldd	r6, Z+44	; 0x2c
    2a6e:	75 a4       	ldd	r7, Z+45	; 0x2d
    2a70:	4e 89       	ldd	r20, Y+22	; 0x16
    2a72:	5f 89       	ldd	r21, Y+23	; 0x17
    2a74:	68 8d       	ldd	r22, Y+24	; 0x18
    2a76:	79 8d       	ldd	r23, Y+25	; 0x19
    2a78:	44 16       	cp	r4, r20
    2a7a:	55 06       	cpc	r5, r21
    2a7c:	66 06       	cpc	r6, r22
    2a7e:	77 06       	cpc	r7, r23
    2a80:	39 f4       	brne	.+14     	; 0x2a90 <f_write+0x164>
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	ba 01       	movw	r22, r20
    2a88:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	91 c0       	rjmp	.+290    	; 0x2bb2 <f_write+0x286>
    2a90:	88 80       	ld	r8, Y
    2a92:	99 80       	ldd	r9, Y+1	; 0x01
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2a94:	4a 89       	ldd	r20, Y+18	; 0x12
    2a96:	5b 89       	ldd	r21, Y+19	; 0x13
    2a98:	6c 89       	ldd	r22, Y+20	; 0x14
    2a9a:	7d 89       	ldd	r23, Y+21	; 0x15
    2a9c:	c4 01       	movw	r24, r8
    2a9e:	0e 94 24 0b 	call	0x1648	; 0x1648 <clust2sect>
    2aa2:	61 15       	cp	r22, r1
    2aa4:	71 05       	cpc	r23, r1
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2aa6:	81 05       	cpc	r24, r1
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	21 f4       	brne	.+8      	; 0x2ab4 <f_write+0x188>
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	80 68       	ori	r24, 0x80	; 128
    2ab0:	8c 83       	std	Y+4, r24	; 0x04
    2ab2:	b4 c0       	rjmp	.+360    	; 0x2c1c <f_write+0x2f0>
    2ab4:	2b 01       	movw	r4, r22
    2ab6:	3c 01       	movw	r6, r24
			sect += csect;
    2ab8:	40 0e       	add	r4, r16
    2aba:	51 1c       	adc	r5, r1
    2abc:	61 1c       	adc	r6, r1
    2abe:	71 1c       	adc	r7, r1
    2ac0:	67 01       	movw	r12, r14
    2ac2:	cd 2c       	mov	r12, r13
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2ac4:	dd 24       	eor	r13, r13
    2ac6:	c6 94       	lsr	r12
    2ac8:	c1 14       	cp	r12, r1
    2aca:	d1 04       	cpc	r13, r1
			if (cc) {						/* Write maximum contiguous sectors directly */
    2acc:	e9 f1       	breq	.+122    	; 0x2b48 <f_write+0x21c>
    2ace:	f4 01       	movw	r30, r8
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2ad2:	20 2f       	mov	r18, r16
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	a6 01       	movw	r20, r12
    2ad8:	42 0f       	add	r20, r18
    2ada:	53 1f       	adc	r21, r19
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	84 17       	cp	r24, r20
    2ae0:	95 07       	cpc	r25, r21
    2ae2:	18 f4       	brcc	.+6      	; 0x2aea <f_write+0x1be>
    2ae4:	6c 01       	movw	r12, r24
    2ae6:	c2 1a       	sub	r12, r18
					cc = fp->fs->csize - csect;
    2ae8:	d3 0a       	sbc	r13, r19
    2aea:	0c 2d       	mov	r16, r12
    2aec:	a3 01       	movw	r20, r6
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2aee:	92 01       	movw	r18, r4
    2af0:	b5 01       	movw	r22, r10
    2af2:	f4 01       	movw	r30, r8
    2af4:	81 81       	ldd	r24, Z+1	; 0x01
    2af6:	0e 94 ce 09 	call	0x139c	; 0x139c <disk_write>
    2afa:	81 11       	cpse	r24, r1
    2afc:	5a c0       	rjmp	.+180    	; 0x2bb2 <f_write+0x286>
    2afe:	88 81       	ld	r24, Y
    2b00:	99 81       	ldd	r25, Y+1	; 0x01
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2b02:	fc 01       	movw	r30, r24
    2b04:	42 a5       	ldd	r20, Z+42	; 0x2a
    2b06:	53 a5       	ldd	r21, Z+43	; 0x2b
    2b08:	64 a5       	ldd	r22, Z+44	; 0x2c
    2b0a:	75 a5       	ldd	r23, Z+45	; 0x2d
    2b0c:	44 19       	sub	r20, r4
    2b0e:	55 09       	sbc	r21, r5
    2b10:	66 09       	sbc	r22, r6
    2b12:	77 09       	sbc	r23, r7
    2b14:	26 01       	movw	r4, r12
    2b16:	61 2c       	mov	r6, r1
    2b18:	71 2c       	mov	r7, r1
    2b1a:	44 15       	cp	r20, r4
    2b1c:	55 05       	cpc	r21, r5
    2b1e:	66 05       	cpc	r22, r6
    2b20:	77 05       	cpc	r23, r7
    2b22:	70 f4       	brcc	.+28     	; 0x2b40 <f_write+0x214>
    2b24:	ba 01       	movw	r22, r20
    2b26:	76 2f       	mov	r23, r22
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2b28:	66 27       	eor	r22, r22
    2b2a:	77 0f       	add	r23, r23
    2b2c:	6a 0d       	add	r22, r10
    2b2e:	7b 1d       	adc	r23, r11
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	52 e0       	ldi	r21, 0x02	; 2
    2b34:	8e 96       	adiw	r24, 0x2e	; 46
    2b36:	0e 94 37 0a 	call	0x146e	; 0x146e <mem_cpy>
    2b3a:	e8 81       	ld	r30, Y
    2b3c:	f9 81       	ldd	r31, Y+1	; 0x01
					fp->fs->wflag = 0;
    2b3e:	14 82       	std	Z+4, r1	; 0x04
    2b40:	dc 2c       	mov	r13, r12
    2b42:	cc 24       	eor	r12, r12
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2b44:	dd 0c       	add	r13, r13
    2b46:	4d c0       	rjmp	.+154    	; 0x2be2 <f_write+0x2b6>
    2b48:	4e 81       	ldd	r20, Y+6	; 0x06
				continue;
    2b4a:	5f 81       	ldd	r21, Y+7	; 0x07
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2b4c:	68 85       	ldd	r22, Y+8	; 0x08
    2b4e:	79 85       	ldd	r23, Y+9	; 0x09
    2b50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b54:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b56:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b58:	48 17       	cp	r20, r24
    2b5a:	59 07       	cpc	r21, r25
    2b5c:	6a 07       	cpc	r22, r26
    2b5e:	7b 07       	cpc	r23, r27
    2b60:	70 f0       	brcs	.+28     	; 0x2b7e <f_write+0x252>
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	50 e0       	ldi	r21, 0x00	; 0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2b66:	ba 01       	movw	r22, r20
    2b68:	c4 01       	movw	r24, r8
    2b6a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    2b6e:	81 11       	cpse	r24, r1
    2b70:	20 c0       	rjmp	.+64     	; 0x2bb2 <f_write+0x286>
    2b72:	e8 81       	ld	r30, Y
    2b74:	f9 81       	ldd	r31, Y+1	; 0x01
				fp->fs->winsect = sect;
    2b76:	42 a6       	std	Z+42, r4	; 0x2a
    2b78:	53 a6       	std	Z+43, r5	; 0x2b
    2b7a:	64 a6       	std	Z+44, r6	; 0x2c
    2b7c:	75 a6       	std	Z+45, r7	; 0x2d
    2b7e:	4e 8a       	std	Y+22, r4	; 0x16
    2b80:	5f 8a       	std	Y+23, r5	; 0x17
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2b82:	68 8e       	std	Y+24, r6	; 0x18
    2b84:	79 8e       	std	Y+25, r7	; 0x19
    2b86:	8e 81       	ldd	r24, Y+6	; 0x06
    2b88:	9f 81       	ldd	r25, Y+7	; 0x07
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2b8a:	91 70       	andi	r25, 0x01	; 1
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	32 e0       	ldi	r19, 0x02	; 2
    2b90:	28 1b       	sub	r18, r24
    2b92:	39 0b       	sbc	r19, r25
    2b94:	67 01       	movw	r12, r14
    2b96:	2e 15       	cp	r18, r14
    2b98:	3f 05       	cpc	r19, r15
    2b9a:	08 f4       	brcc	.+2      	; 0x2b9e <f_write+0x272>
    2b9c:	69 01       	movw	r12, r18
    2b9e:	4e 89       	ldd	r20, Y+22	; 0x16
    2ba0:	5f 89       	ldd	r21, Y+23	; 0x17
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2ba2:	68 8d       	ldd	r22, Y+24	; 0x18
    2ba4:	79 8d       	ldd	r23, Y+25	; 0x19
    2ba6:	88 81       	ld	r24, Y
    2ba8:	99 81       	ldd	r25, Y+1	; 0x01
    2baa:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    2bae:	88 23       	and	r24, r24
    2bb0:	29 f0       	breq	.+10     	; 0x2bbc <f_write+0x290>
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	80 68       	ori	r24, 0x80	; 128
			ABORT(fp->fs, FR_DISK_ERR);
    2bb6:	8c 83       	std	Y+4, r24	; 0x04
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	33 c0       	rjmp	.+102    	; 0x2c22 <f_write+0x2f6>
    2bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bbe:	9f 81       	ldd	r25, Y+7	; 0x07
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2bc0:	a8 85       	ldd	r26, Y+8	; 0x08
    2bc2:	b9 85       	ldd	r27, Y+9	; 0x09
    2bc4:	91 70       	andi	r25, 0x01	; 1
    2bc6:	aa 27       	eor	r26, r26
    2bc8:	bb 27       	eor	r27, r27
    2bca:	8e 96       	adiw	r24, 0x2e	; 46
    2bcc:	28 81       	ld	r18, Y
    2bce:	39 81       	ldd	r19, Y+1	; 0x01
    2bd0:	a6 01       	movw	r20, r12
    2bd2:	b5 01       	movw	r22, r10
    2bd4:	82 0f       	add	r24, r18
    2bd6:	93 1f       	adc	r25, r19
    2bd8:	0e 94 37 0a 	call	0x146e	; 0x146e <mem_cpy>
    2bdc:	e8 81       	ld	r30, Y
    2bde:	f9 81       	ldd	r31, Y+1	; 0x01
		fp->fs->wflag = 1;
    2be0:	14 83       	std	Z+4, r17	; 0x04
    2be2:	ac 0c       	add	r10, r12
    2be4:	bd 1c       	adc	r11, r13
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2be6:	8e 81       	ldd	r24, Y+6	; 0x06
    2be8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bea:	a8 85       	ldd	r26, Y+8	; 0x08
    2bec:	b9 85       	ldd	r27, Y+9	; 0x09
    2bee:	8c 0d       	add	r24, r12
    2bf0:	9d 1d       	adc	r25, r13
    2bf2:	a1 1d       	adc	r26, r1
    2bf4:	b1 1d       	adc	r27, r1
    2bf6:	8e 83       	std	Y+6, r24	; 0x06
    2bf8:	9f 83       	std	Y+7, r25	; 0x07
    2bfa:	a8 87       	std	Y+8, r26	; 0x08
    2bfc:	b9 87       	std	Y+9, r27	; 0x09
    2bfe:	f1 01       	movw	r30, r2
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	8c 0d       	add	r24, r12
    2c06:	9d 1d       	adc	r25, r13
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
    2c0c:	ec 18       	sub	r14, r12
    2c0e:	fd 08       	sbc	r15, r13
    2c10:	c1 ce       	rjmp	.-638    	; 0x2994 <f_write+0x68>
    2c12:	8c 81       	ldd	r24, Y+4	; 0x04
    2c14:	80 62       	ori	r24, 0x20	; 32
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2c16:	8c 83       	std	Y+4, r24	; 0x04
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <f_write+0x2f6>

	LEAVE_FF(fp->fs, FR_OK);
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	01 c0       	rjmp	.+2      	; 0x2c22 <f_write+0x2f6>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2c20:	87 e0       	ldi	r24, 0x07	; 7
    2c22:	df 91       	pop	r29
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2c24:	cf 91       	pop	r28

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	8f 90       	pop	r8
    2c3a:	7f 90       	pop	r7
    2c3c:	6f 90       	pop	r6
    2c3e:	5f 90       	pop	r5
    2c40:	4f 90       	pop	r4
    2c42:	3f 90       	pop	r3
    2c44:	2f 90       	pop	r2
    2c46:	08 95       	ret

00002c48 <f_sync>:
    2c48:	0f 93       	push	r16
    2c4a:	1f 93       	push	r17
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2c52:	0e 94 08 0b 	call	0x1610	; 0x1610 <validate>
    2c56:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2c58:	81 11       	cpse	r24, r1
    2c5a:	9b c0       	rjmp	.+310    	; 0x2d92 <f_sync+0x14a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5e:	85 ff       	sbrs	r24, 5
    2c60:	98 c0       	rjmp	.+304    	; 0x2d92 <f_sync+0x14a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2c62:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2c64:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2c66:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2c68:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2c6a:	88 81       	ld	r24, Y
    2c6c:	99 81       	ldd	r25, Y+1	; 0x01
    2c6e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    2c72:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2c74:	81 11       	cpse	r24, r1
    2c76:	8d c0       	rjmp	.+282    	; 0x2d92 <f_sync+0x14a>
				dir = fp->dir_ptr;
    2c78:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2c7a:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	83 85       	ldd	r24, Z+11	; 0x0b
    2c80:	80 62       	ori	r24, 0x20	; 32
    2c82:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2c84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c88:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c8a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c8c:	84 8f       	std	Z+28, r24	; 0x1c
    2c8e:	95 8f       	std	Z+29, r25	; 0x1d
    2c90:	a6 8f       	std	Z+30, r26	; 0x1e
    2c92:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2c94:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c96:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c98:	68 89       	ldd	r22, Y+16	; 0x10
    2c9a:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    2c9c:	53 8f       	std	Z+27, r21	; 0x1b
    2c9e:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    2ca0:	75 8b       	std	Z+21, r23	; 0x15
    2ca2:	64 8b       	std	Z+20, r22	; 0x14
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
    2ca4:	0e 94 df 09 	call	0x13be	; 0x13be <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2ca8:	f8 01       	movw	r30, r16
    2caa:	66 8b       	std	Z+22, r22	; 0x16
    2cac:	77 8b       	std	Z+23, r23	; 0x17
    2cae:	80 8f       	std	Z+24, r24	; 0x18
    2cb0:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    2cb2:	13 8a       	std	Z+19, r1	; 0x13
    2cb4:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    2cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb8:	8f 7d       	andi	r24, 0xDF	; 223
    2cba:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2cbc:	e8 81       	ld	r30, Y
    2cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2cc4:	09 90       	ld	r0, Y+
    2cc6:	d8 81       	ld	r29, Y
    2cc8:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	ba 01       	movw	r22, r20
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <move_window>
    2cd6:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2cd8:	81 11       	cpse	r24, r1
    2cda:	5b c0       	rjmp	.+182    	; 0x2d92 <f_sync+0x14a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2cdc:	88 81       	ld	r24, Y
    2cde:	83 30       	cpi	r24, 0x03	; 3
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <f_sync+0x9c>
    2ce2:	4d c0       	rjmp	.+154    	; 0x2d7e <f_sync+0x136>
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	88 23       	and	r24, r24
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <f_sync+0xa4>
    2cea:	49 c0       	rjmp	.+146    	; 0x2d7e <f_sync+0x136>
			fs->winsect = 0;
    2cec:	1a a6       	std	Y+42, r1	; 0x2a
    2cee:	1b a6       	std	Y+43, r1	; 0x2b
    2cf0:	1c a6       	std	Y+44, r1	; 0x2c
    2cf2:	1d a6       	std	Y+45, r1	; 0x2d
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	8e 96       	adiw	r24, 0x2e	; 46
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	9e 01       	movw	r18, r28
    2cfc:	22 5d       	subi	r18, 0xD2	; 210
    2cfe:	3d 4f       	sbci	r19, 0xFD	; 253
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    2d00:	e2 17       	cp	r30, r18
    2d02:	f3 07       	cpc	r31, r19
    2d04:	11 f0       	breq	.+4      	; 0x2d0a <f_sync+0xc2>
		*d++ = (BYTE)val;
    2d06:	11 92       	st	Z+, r1
    2d08:	fb cf       	rjmp	.-10     	; 0x2d00 <f_sync+0xb8>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2d0a:	25 e5       	ldi	r18, 0x55	; 85
    2d0c:	3a ea       	ldi	r19, 0xAA	; 170
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e4 5d       	subi	r30, 0xD4	; 212
    2d12:	fd 4f       	sbci	r31, 0xFD	; 253
    2d14:	31 83       	std	Z+1, r19	; 0x01
    2d16:	20 83       	st	Z, r18
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2d18:	42 e5       	ldi	r20, 0x52	; 82
    2d1a:	52 e5       	ldi	r21, 0x52	; 82
    2d1c:	61 e6       	ldi	r22, 0x61	; 97
    2d1e:	71 e4       	ldi	r23, 0x41	; 65
    2d20:	4e a7       	std	Y+46, r20	; 0x2e
    2d22:	5f a7       	std	Y+47, r21	; 0x2f
    2d24:	68 ab       	std	Y+48, r22	; 0x30
    2d26:	79 ab       	std	Y+49, r23	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2d28:	42 e7       	ldi	r20, 0x72	; 114
    2d2a:	52 e7       	ldi	r21, 0x72	; 114
    2d2c:	61 e4       	ldi	r22, 0x41	; 65
    2d2e:	71 e6       	ldi	r23, 0x61	; 97
    2d30:	fe 01       	movw	r30, r28
    2d32:	ee 5e       	subi	r30, 0xEE	; 238
    2d34:	fd 4f       	sbci	r31, 0xFD	; 253
    2d36:	40 83       	st	Z, r20
    2d38:	51 83       	std	Z+1, r21	; 0x01
    2d3a:	62 83       	std	Z+2, r22	; 0x02
    2d3c:	73 83       	std	Z+3, r23	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2d3e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d40:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d42:	68 89       	ldd	r22, Y+16	; 0x10
    2d44:	79 89       	ldd	r23, Y+17	; 0x11
    2d46:	fe 01       	movw	r30, r28
    2d48:	ea 5e       	subi	r30, 0xEA	; 234
    2d4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4c:	40 83       	st	Z, r20
    2d4e:	51 83       	std	Z+1, r21	; 0x01
    2d50:	62 83       	std	Z+2, r22	; 0x02
    2d52:	73 83       	std	Z+3, r23	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2d54:	4a 85       	ldd	r20, Y+10	; 0x0a
    2d56:	5b 85       	ldd	r21, Y+11	; 0x0b
    2d58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e6 5e       	subi	r30, 0xE6	; 230
    2d60:	fd 4f       	sbci	r31, 0xFD	; 253
    2d62:	40 83       	st	Z, r20
    2d64:	51 83       	std	Z+1, r21	; 0x01
    2d66:	62 83       	std	Z+2, r22	; 0x02
    2d68:	73 83       	std	Z+3, r23	; 0x03
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2d6a:	2a 89       	ldd	r18, Y+18	; 0x12
    2d6c:	3b 89       	ldd	r19, Y+19	; 0x13
    2d6e:	4c 89       	ldd	r20, Y+20	; 0x14
    2d70:	5d 89       	ldd	r21, Y+21	; 0x15
    2d72:	01 e0       	ldi	r16, 0x01	; 1
    2d74:	bc 01       	movw	r22, r24
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	0e 94 ce 09 	call	0x139c	; 0x139c <disk_write>
			fs->fsi_flag = 0;
    2d7c:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <disk_ioctl>
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	81 11       	cpse	r24, r1
    2d8e:	01 c0       	rjmp	.+2      	; 0x2d92 <f_sync+0x14a>
    2d90:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2d92:	89 2f       	mov	r24, r25
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	08 95       	ret

00002d9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    2da4:	51 df       	rcall	.-350    	; 0x2c48 <f_sync>
    2da6:	81 11       	cpse	r24, r1
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <f_close+0x10>
    2daa:	19 82       	std	Y+1, r1	; 0x01
    2dac:	18 82       	st	Y, r1
    2dae:	df 91       	pop	r29
	return res;
#endif
}
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

00002db4 <f_lseek>:
    2db4:	2f 92       	push	r2

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2db6:	3f 92       	push	r3
    2db8:	4f 92       	push	r4
    2dba:	5f 92       	push	r5
    2dbc:	6f 92       	push	r6
    2dbe:	7f 92       	push	r7
    2dc0:	8f 92       	push	r8
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <f_lseek+0x26>
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <f_lseek+0x28>
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	1c 01       	movw	r2, r24
    2de2:	6a 01       	movw	r12, r20
    2de4:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    2de6:	0e 94 08 0b 	call	0x1610	; 0x1610 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2dea:	81 11       	cpse	r24, r1
    2dec:	6a c1       	rjmp	.+724    	; 0x30c2 <f_lseek+0x30e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2dee:	d1 01       	movw	r26, r2
    2df0:	14 96       	adiw	r26, 0x04	; 4
    2df2:	2c 91       	ld	r18, X
    2df4:	14 97       	sbiw	r26, 0x04	; 4
    2df6:	27 fd       	sbrc	r18, 7
    2df8:	61 c1       	rjmp	.+706    	; 0x30bc <f_lseek+0x308>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2dfa:	1a 96       	adiw	r26, 0x0a	; 10
    2dfc:	8d 91       	ld	r24, X+
    2dfe:	9d 91       	ld	r25, X+
    2e00:	0d 90       	ld	r0, X+
    2e02:	bc 91       	ld	r27, X
    2e04:	a0 2d       	mov	r26, r0
    2e06:	8c 15       	cp	r24, r12
    2e08:	9d 05       	cpc	r25, r13
    2e0a:	ae 05       	cpc	r26, r14
    2e0c:	bf 05       	cpc	r27, r15
    2e0e:	20 f4       	brcc	.+8      	; 0x2e18 <f_lseek+0x64>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2e10:	21 fd       	sbrc	r18, 1
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <f_lseek+0x64>
    2e14:	6c 01       	movw	r12, r24
    2e16:	7d 01       	movw	r14, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2e18:	f1 01       	movw	r30, r2
    2e1a:	46 80       	ldd	r4, Z+6	; 0x06
    2e1c:	57 80       	ldd	r5, Z+7	; 0x07
    2e1e:	60 84       	ldd	r6, Z+8	; 0x08
    2e20:	71 84       	ldd	r7, Z+9	; 0x09
		fp->fptr = nsect = 0;
    2e22:	16 82       	std	Z+6, r1	; 0x06
    2e24:	17 82       	std	Z+7, r1	; 0x07
    2e26:	10 86       	std	Z+8, r1	; 0x08
    2e28:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2e2a:	c1 14       	cp	r12, r1
    2e2c:	d1 04       	cpc	r13, r1
    2e2e:	e1 04       	cpc	r14, r1
    2e30:	f1 04       	cpc	r15, r1
    2e32:	21 f4       	brne	.+8      	; 0x2e3c <f_lseek+0x88>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2e34:	c1 2c       	mov	r12, r1
    2e36:	d1 2c       	mov	r13, r1
    2e38:	76 01       	movw	r14, r12
    2e3a:	13 c1       	rjmp	.+550    	; 0x3062 <f_lseek+0x2ae>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2e3c:	f1 01       	movw	r30, r2
    2e3e:	00 81       	ld	r16, Z
    2e40:	11 81       	ldd	r17, Z+1	; 0x01
    2e42:	d8 01       	movw	r26, r16
    2e44:	12 96       	adiw	r26, 0x02	; 2
    2e46:	8c 90       	ld	r8, X
    2e48:	91 2c       	mov	r9, r1
    2e4a:	a1 2c       	mov	r10, r1
    2e4c:	b1 2c       	mov	r11, r1
    2e4e:	89 e0       	ldi	r24, 0x09	; 9
    2e50:	88 0c       	add	r8, r8
    2e52:	99 1c       	adc	r9, r9
    2e54:	aa 1c       	adc	r10, r10
    2e56:	bb 1c       	adc	r11, r11
    2e58:	8a 95       	dec	r24
    2e5a:	d1 f7       	brne	.-12     	; 0x2e50 <f_lseek+0x9c>
			if (ifptr > 0 &&
    2e5c:	41 14       	cp	r4, r1
    2e5e:	51 04       	cpc	r5, r1
    2e60:	61 04       	cpc	r6, r1
    2e62:	71 04       	cpc	r7, r1
    2e64:	d9 f1       	breq	.+118    	; 0x2edc <f_lseek+0x128>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2e66:	b1 e0       	ldi	r27, 0x01	; 1
    2e68:	4b 1a       	sub	r4, r27
    2e6a:	51 08       	sbc	r5, r1
    2e6c:	61 08       	sbc	r6, r1
    2e6e:	71 08       	sbc	r7, r1
    2e70:	c7 01       	movw	r24, r14
    2e72:	b6 01       	movw	r22, r12
    2e74:	61 50       	subi	r22, 0x01	; 1
    2e76:	71 09       	sbc	r23, r1
    2e78:	81 09       	sbc	r24, r1
    2e7a:	91 09       	sbc	r25, r1
    2e7c:	a5 01       	movw	r20, r10
    2e7e:	94 01       	movw	r18, r8
    2e80:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__udivmodsi4>
    2e84:	29 83       	std	Y+1, r18	; 0x01
    2e86:	3a 83       	std	Y+2, r19	; 0x02
    2e88:	4b 83       	std	Y+3, r20	; 0x03
    2e8a:	5c 83       	std	Y+4, r21	; 0x04
    2e8c:	c3 01       	movw	r24, r6
    2e8e:	b2 01       	movw	r22, r4
    2e90:	a5 01       	movw	r20, r10
    2e92:	94 01       	movw	r18, r8
    2e94:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e9e:	bc 81       	ldd	r27, Y+4	; 0x04
    2ea0:	82 17       	cp	r24, r18
    2ea2:	93 07       	cpc	r25, r19
    2ea4:	a4 07       	cpc	r26, r20
    2ea6:	b5 07       	cpc	r27, r21
    2ea8:	c8 f0       	brcs	.+50     	; 0x2edc <f_lseek+0x128>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2eaa:	88 27       	eor	r24, r24
    2eac:	99 27       	eor	r25, r25
    2eae:	dc 01       	movw	r26, r24
    2eb0:	88 19       	sub	r24, r8
    2eb2:	99 09       	sbc	r25, r9
    2eb4:	aa 09       	sbc	r26, r10
    2eb6:	bb 09       	sbc	r27, r11
    2eb8:	84 21       	and	r24, r4
    2eba:	95 21       	and	r25, r5
    2ebc:	a6 21       	and	r26, r6
    2ebe:	b7 21       	and	r27, r7
    2ec0:	f1 01       	movw	r30, r2
    2ec2:	86 83       	std	Z+6, r24	; 0x06
    2ec4:	97 83       	std	Z+7, r25	; 0x07
    2ec6:	a0 87       	std	Z+8, r26	; 0x08
    2ec8:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    2eca:	c8 1a       	sub	r12, r24
    2ecc:	d9 0a       	sbc	r13, r25
    2ece:	ea 0a       	sbc	r14, r26
    2ed0:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2ed2:	42 89       	ldd	r20, Z+18	; 0x12
    2ed4:	53 89       	ldd	r21, Z+19	; 0x13
    2ed6:	64 89       	ldd	r22, Z+20	; 0x14
    2ed8:	75 89       	ldd	r23, Z+21	; 0x15
    2eda:	2d c0       	rjmp	.+90     	; 0x2f36 <f_lseek+0x182>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2edc:	d1 01       	movw	r26, r2
    2ede:	1e 96       	adiw	r26, 0x0e	; 14
    2ee0:	4d 91       	ld	r20, X+
    2ee2:	5d 91       	ld	r21, X+
    2ee4:	6d 91       	ld	r22, X+
    2ee6:	7c 91       	ld	r23, X
    2ee8:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2eea:	41 15       	cp	r20, r1
    2eec:	51 05       	cpc	r21, r1
    2eee:	61 05       	cpc	r22, r1
    2ef0:	71 05       	cpc	r23, r1
    2ef2:	d1 f4       	brne	.+52     	; 0x2f28 <f_lseek+0x174>
					clst = create_chain(fp->fs, 0);
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	ba 01       	movw	r22, r20
    2efa:	c8 01       	movw	r24, r16
    2efc:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <create_chain>
    2f00:	ab 01       	movw	r20, r22
    2f02:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2f04:	41 30       	cpi	r20, 0x01	; 1
    2f06:	51 05       	cpc	r21, r1
    2f08:	61 05       	cpc	r22, r1
    2f0a:	71 05       	cpc	r23, r1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <f_lseek+0x15c>
    2f0e:	6a c0       	rjmp	.+212    	; 0x2fe4 <f_lseek+0x230>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2f10:	4f 3f       	cpi	r20, 0xFF	; 255
    2f12:	ff ef       	ldi	r31, 0xFF	; 255
    2f14:	5f 07       	cpc	r21, r31
    2f16:	6f 07       	cpc	r22, r31
    2f18:	7f 07       	cpc	r23, r31
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <f_lseek+0x16a>
    2f1c:	5a c0       	rjmp	.+180    	; 0x2fd2 <f_lseek+0x21e>
					fp->sclust = clst;
    2f1e:	f1 01       	movw	r30, r2
    2f20:	46 87       	std	Z+14, r20	; 0x0e
    2f22:	57 87       	std	Z+15, r21	; 0x0f
    2f24:	60 8b       	std	Z+16, r22	; 0x10
    2f26:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    2f28:	d1 01       	movw	r26, r2
    2f2a:	52 96       	adiw	r26, 0x12	; 18
    2f2c:	4d 93       	st	X+, r20
    2f2e:	5d 93       	st	X+, r21
    2f30:	6d 93       	st	X+, r22
    2f32:	7c 93       	st	X, r23
    2f34:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2f36:	41 15       	cp	r20, r1
    2f38:	51 05       	cpc	r21, r1
    2f3a:	61 05       	cpc	r22, r1
    2f3c:	71 05       	cpc	r23, r1
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <f_lseek+0x18e>
    2f40:	79 cf       	rjmp	.-270    	; 0x2e34 <f_lseek+0x80>
    2f42:	2c c0       	rjmp	.+88     	; 0x2f9c <f_lseek+0x1e8>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2f44:	42 30       	cpi	r20, 0x02	; 2
    2f46:	51 05       	cpc	r21, r1
    2f48:	61 05       	cpc	r22, r1
    2f4a:	71 05       	cpc	r23, r1
    2f4c:	08 f4       	brcc	.+2      	; 0x2f50 <f_lseek+0x19c>
    2f4e:	4a c0       	rjmp	.+148    	; 0x2fe4 <f_lseek+0x230>
    2f50:	d1 01       	movw	r26, r2
    2f52:	ed 91       	ld	r30, X+
    2f54:	fc 91       	ld	r31, X
    2f56:	86 89       	ldd	r24, Z+22	; 0x16
    2f58:	97 89       	ldd	r25, Z+23	; 0x17
    2f5a:	a0 8d       	ldd	r26, Z+24	; 0x18
    2f5c:	b1 8d       	ldd	r27, Z+25	; 0x19
    2f5e:	48 17       	cp	r20, r24
    2f60:	59 07       	cpc	r21, r25
    2f62:	6a 07       	cpc	r22, r26
    2f64:	7b 07       	cpc	r23, r27
    2f66:	f0 f5       	brcc	.+124    	; 0x2fe4 <f_lseek+0x230>
					fp->clust = clst;
    2f68:	d1 01       	movw	r26, r2
    2f6a:	52 96       	adiw	r26, 0x12	; 18
    2f6c:	4d 93       	st	X+, r20
    2f6e:	5d 93       	st	X+, r21
    2f70:	6d 93       	st	X+, r22
    2f72:	7c 93       	st	X, r23
    2f74:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2f76:	16 96       	adiw	r26, 0x06	; 6
    2f78:	8d 91       	ld	r24, X+
    2f7a:	9d 91       	ld	r25, X+
    2f7c:	0d 90       	ld	r0, X+
    2f7e:	bc 91       	ld	r27, X
    2f80:	a0 2d       	mov	r26, r0
    2f82:	88 0d       	add	r24, r8
    2f84:	99 1d       	adc	r25, r9
    2f86:	aa 1d       	adc	r26, r10
    2f88:	bb 1d       	adc	r27, r11
    2f8a:	f1 01       	movw	r30, r2
    2f8c:	86 83       	std	Z+6, r24	; 0x06
    2f8e:	97 83       	std	Z+7, r25	; 0x07
    2f90:	a0 87       	std	Z+8, r26	; 0x08
    2f92:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2f94:	c8 18       	sub	r12, r8
    2f96:	d9 08       	sbc	r13, r9
    2f98:	ea 08       	sbc	r14, r10
    2f9a:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2f9c:	8c 14       	cp	r8, r12
    2f9e:	9d 04       	cpc	r9, r13
    2fa0:	ae 04       	cpc	r10, r14
    2fa2:	bf 04       	cpc	r11, r15
    2fa4:	58 f5       	brcc	.+86     	; 0x2ffc <f_lseek+0x248>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2fa6:	f1 01       	movw	r30, r2
    2fa8:	24 81       	ldd	r18, Z+4	; 0x04
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	21 ff       	sbrs	r18, 1
    2fb0:	1e c0       	rjmp	.+60     	; 0x2fee <f_lseek+0x23a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2fb2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <create_chain>
    2fb6:	ab 01       	movw	r20, r22
    2fb8:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2fba:	41 15       	cp	r20, r1
    2fbc:	51 05       	cpc	r21, r1
    2fbe:	61 05       	cpc	r22, r1
    2fc0:	71 05       	cpc	r23, r1
    2fc2:	d1 f0       	breq	.+52     	; 0x2ff8 <f_lseek+0x244>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2fc4:	4f 3f       	cpi	r20, 0xFF	; 255
    2fc6:	ff ef       	ldi	r31, 0xFF	; 255
    2fc8:	5f 07       	cpc	r21, r31
    2fca:	6f 07       	cpc	r22, r31
    2fcc:	7f 07       	cpc	r23, r31
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <f_lseek+0x21e>
    2fd0:	b9 cf       	rjmp	.-142    	; 0x2f44 <f_lseek+0x190>
    2fd2:	d1 01       	movw	r26, r2
    2fd4:	14 96       	adiw	r26, 0x04	; 4
    2fd6:	8c 91       	ld	r24, X
    2fd8:	14 97       	sbiw	r26, 0x04	; 4
    2fda:	80 68       	ori	r24, 0x80	; 128
    2fdc:	14 96       	adiw	r26, 0x04	; 4
    2fde:	8c 93       	st	X, r24
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	6f c0       	rjmp	.+222    	; 0x30c2 <f_lseek+0x30e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2fe4:	f1 01       	movw	r30, r2
    2fe6:	84 81       	ldd	r24, Z+4	; 0x04
    2fe8:	80 68       	ori	r24, 0x80	; 128
    2fea:	84 83       	std	Z+4, r24	; 0x04
    2fec:	67 c0       	rjmp	.+206    	; 0x30bc <f_lseek+0x308>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2fee:	0e 94 4d 0b 	call	0x169a	; 0x169a <get_fat>
    2ff2:	ab 01       	movw	r20, r22
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	e6 cf       	rjmp	.-52     	; 0x2fc4 <f_lseek+0x210>
    2ff8:	75 01       	movw	r14, r10
    2ffa:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2ffc:	f1 01       	movw	r30, r2
    2ffe:	86 81       	ldd	r24, Z+6	; 0x06
    3000:	97 81       	ldd	r25, Z+7	; 0x07
    3002:	a0 85       	ldd	r26, Z+8	; 0x08
    3004:	b1 85       	ldd	r27, Z+9	; 0x09
    3006:	8c 0d       	add	r24, r12
    3008:	9d 1d       	adc	r25, r13
    300a:	ae 1d       	adc	r26, r14
    300c:	bf 1d       	adc	r27, r15
    300e:	86 83       	std	Z+6, r24	; 0x06
    3010:	97 83       	std	Z+7, r25	; 0x07
    3012:	a0 87       	std	Z+8, r26	; 0x08
    3014:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3016:	d7 01       	movw	r26, r14
    3018:	c6 01       	movw	r24, r12
    301a:	91 70       	andi	r25, 0x01	; 1
    301c:	aa 27       	eor	r26, r26
    301e:	bb 27       	eor	r27, r27
    3020:	89 2b       	or	r24, r25
    3022:	8a 2b       	or	r24, r26
    3024:	8b 2b       	or	r24, r27
    3026:	09 f4       	brne	.+2      	; 0x302a <f_lseek+0x276>
    3028:	05 cf       	rjmp	.-502    	; 0x2e34 <f_lseek+0x80>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	0e 94 24 0b 	call	0x1648	; 0x1648 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3032:	61 15       	cp	r22, r1
    3034:	71 05       	cpc	r23, r1
    3036:	81 05       	cpc	r24, r1
    3038:	91 05       	cpc	r25, r1
    303a:	41 f4       	brne	.+16     	; 0x304c <f_lseek+0x298>
    303c:	d1 01       	movw	r26, r2
    303e:	14 96       	adiw	r26, 0x04	; 4
    3040:	8c 91       	ld	r24, X
    3042:	14 97       	sbiw	r26, 0x04	; 4
    3044:	80 68       	ori	r24, 0x80	; 128
    3046:	14 96       	adiw	r26, 0x04	; 4
    3048:	8c 93       	st	X, r24
    304a:	38 c0       	rjmp	.+112    	; 0x30bc <f_lseek+0x308>
					nsect += ofs / SS(fp->fs);
    304c:	b9 e0       	ldi	r27, 0x09	; 9
    304e:	f6 94       	lsr	r15
    3050:	e7 94       	ror	r14
    3052:	d7 94       	ror	r13
    3054:	c7 94       	ror	r12
    3056:	ba 95       	dec	r27
    3058:	d1 f7       	brne	.-12     	; 0x304e <f_lseek+0x29a>
    305a:	c6 0e       	add	r12, r22
    305c:	d7 1e       	adc	r13, r23
    305e:	e8 1e       	adc	r14, r24
    3060:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3062:	f1 01       	movw	r30, r2
    3064:	86 81       	ldd	r24, Z+6	; 0x06
    3066:	97 81       	ldd	r25, Z+7	; 0x07
    3068:	a0 85       	ldd	r26, Z+8	; 0x08
    306a:	b1 85       	ldd	r27, Z+9	; 0x09
    306c:	ac 01       	movw	r20, r24
    306e:	bd 01       	movw	r22, r26
    3070:	51 70       	andi	r21, 0x01	; 1
    3072:	66 27       	eor	r22, r22
    3074:	77 27       	eor	r23, r23
    3076:	45 2b       	or	r20, r21
    3078:	46 2b       	or	r20, r22
    307a:	47 2b       	or	r20, r23
    307c:	69 f0       	breq	.+26     	; 0x3098 <f_lseek+0x2e4>
    307e:	46 89       	ldd	r20, Z+22	; 0x16
    3080:	57 89       	ldd	r21, Z+23	; 0x17
    3082:	60 8d       	ldd	r22, Z+24	; 0x18
    3084:	71 8d       	ldd	r23, Z+25	; 0x19
    3086:	c4 16       	cp	r12, r20
    3088:	d5 06       	cpc	r13, r21
    308a:	e6 06       	cpc	r14, r22
    308c:	f7 06       	cpc	r15, r23
    308e:	21 f0       	breq	.+8      	; 0x3098 <f_lseek+0x2e4>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3090:	c6 8a       	std	Z+22, r12	; 0x16
    3092:	d7 8a       	std	Z+23, r13	; 0x17
    3094:	e0 8e       	std	Z+24, r14	; 0x18
    3096:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    3098:	f1 01       	movw	r30, r2
    309a:	42 85       	ldd	r20, Z+10	; 0x0a
    309c:	53 85       	ldd	r21, Z+11	; 0x0b
    309e:	64 85       	ldd	r22, Z+12	; 0x0c
    30a0:	75 85       	ldd	r23, Z+13	; 0x0d
    30a2:	48 17       	cp	r20, r24
    30a4:	59 07       	cpc	r21, r25
    30a6:	6a 07       	cpc	r22, r26
    30a8:	7b 07       	cpc	r23, r27
    30aa:	50 f4       	brcc	.+20     	; 0x30c0 <f_lseek+0x30c>
			fp->fsize = fp->fptr;
    30ac:	82 87       	std	Z+10, r24	; 0x0a
    30ae:	93 87       	std	Z+11, r25	; 0x0b
    30b0:	a4 87       	std	Z+12, r26	; 0x0c
    30b2:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    30b4:	84 81       	ldd	r24, Z+4	; 0x04
    30b6:	80 62       	ori	r24, 0x20	; 32
    30b8:	84 83       	std	Z+4, r24	; 0x04
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <f_lseek+0x30c>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <f_lseek+0x30e>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	9f 90       	pop	r9
    30e0:	8f 90       	pop	r8
    30e2:	7f 90       	pop	r7
    30e4:	6f 90       	pop	r6
    30e6:	5f 90       	pop	r5
    30e8:	4f 90       	pop	r4
    30ea:	3f 90       	pop	r3
    30ec:	2f 90       	pop	r2
    30ee:	08 95       	ret

000030f0 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	8c 01       	movw	r16, r24
    30fe:	eb 01       	movw	r28, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3100:	96 d2       	rcall	.+1324   	; 0x362e <Endpoint_WaitUntilReady>
    3102:	81 11       	cpse	r24, r1
    3104:	2b c0       	rjmp	.+86     	; 0x315c <Endpoint_Null_Stream+0x6c>
    3106:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3108:	21 f0       	breq	.+8      	; 0x3112 <Endpoint_Null_Stream+0x22>
    310a:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
    310c:	99 81       	ldd	r25, Y+1	; 0x01
    310e:	08 1b       	sub	r16, r24
    3110:	19 0b       	sbc	r17, r25
    3112:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    3114:	f1 2c       	mov	r15, r1
    3116:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    3118:	11 05       	cpc	r17, r1
    311a:	f9 f0       	breq	.+62     	; 0x315a <Endpoint_Null_Stream+0x6a>
    311c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3120:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3122:	13 c0       	rjmp	.+38     	; 0x314a <Endpoint_Null_Stream+0x5a>
    3124:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3128:	8e 77       	andi	r24, 0x7E	; 126
    312a:	80 93 e8 00 	sts	0x00E8, r24
    312e:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    3130:	41 f0       	breq	.+16     	; 0x3142 <Endpoint_Null_Stream+0x52>
    3132:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    3134:	99 81       	ldd	r25, Y+1	; 0x01
    3136:	8e 0d       	add	r24, r14
    3138:	9f 1d       	adc	r25, r15
    313a:	99 83       	std	Y+1, r25	; 0x01
    313c:	88 83       	st	Y, r24
    313e:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    3140:	0d c0       	rjmp	.+26     	; 0x315c <Endpoint_Null_Stream+0x6c>
    3142:	75 d2       	rcall	.+1258   	; 0x362e <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3144:	88 23       	and	r24, r24
    3146:	39 f3       	breq	.-50     	; 0x3116 <Endpoint_Null_Stream+0x26>
    3148:	09 c0       	rjmp	.+18     	; 0x315c <Endpoint_Null_Stream+0x6c>
    314a:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    314e:	01 50       	subi	r16, 0x01	; 1
    3150:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    3152:	8f ef       	ldi	r24, 0xFF	; 255
    3154:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
    3156:	f8 0a       	sbc	r15, r24
    3158:	de cf       	rjmp	.-68     	; 0x3116 <Endpoint_Null_Stream+0x26>
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    315e:	cf 91       	pop	r28
}
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	08 95       	ret

0000316a <Endpoint_Write_Stream_LE>:
    316a:	cf 92       	push	r12
    316c:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	7c 01       	movw	r14, r24
    317c:	8b 01       	movw	r16, r22
    317e:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3180:	56 d2       	rcall	.+1196   	; 0x362e <Endpoint_WaitUntilReady>
    3182:	81 11       	cpse	r24, r1
    3184:	30 c0       	rjmp	.+96     	; 0x31e6 <Endpoint_Write_Stream_LE+0x7c>
    3186:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3188:	31 f0       	breq	.+12     	; 0x3196 <Endpoint_Write_Stream_LE+0x2c>
    318a:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    318c:	99 81       	ldd	r25, Y+1	; 0x01
    318e:	08 1b       	sub	r16, r24
    3190:	19 0b       	sbc	r17, r25
    3192:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3194:	f9 1e       	adc	r15, r25
    3196:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3198:	d1 2c       	mov	r13, r1
    319a:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    319c:	11 05       	cpc	r17, r1
    319e:	11 f1       	breq	.+68     	; 0x31e4 <Endpoint_Write_Stream_LE+0x7a>
    31a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    31a4:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    31a6:	13 c0       	rjmp	.+38     	; 0x31ce <Endpoint_Write_Stream_LE+0x64>
    31a8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    31ac:	8e 77       	andi	r24, 0x7E	; 126
    31ae:	80 93 e8 00 	sts	0x00E8, r24
    31b2:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    31b4:	41 f0       	breq	.+16     	; 0x31c6 <Endpoint_Write_Stream_LE+0x5c>
    31b6:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    31b8:	99 81       	ldd	r25, Y+1	; 0x01
    31ba:	8c 0d       	add	r24, r12
    31bc:	9d 1d       	adc	r25, r13
    31be:	99 83       	std	Y+1, r25	; 0x01
    31c0:	88 83       	st	Y, r24
    31c2:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    31c4:	10 c0       	rjmp	.+32     	; 0x31e6 <Endpoint_Write_Stream_LE+0x7c>
    31c6:	33 d2       	rcall	.+1126   	; 0x362e <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    31c8:	88 23       	and	r24, r24
    31ca:	39 f3       	breq	.-50     	; 0x319a <Endpoint_Write_Stream_LE+0x30>
    31cc:	0c c0       	rjmp	.+24     	; 0x31e6 <Endpoint_Write_Stream_LE+0x7c>
    31ce:	f7 01       	movw	r30, r14
    31d0:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    31d2:	7f 01       	movw	r14, r30
    31d4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    31d8:	01 50       	subi	r16, 0x01	; 1
    31da:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    31dc:	ff ef       	ldi	r31, 0xFF	; 255
    31de:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    31e0:	df 0a       	sbc	r13, r31
    31e2:	db cf       	rjmp	.-74     	; 0x319a <Endpoint_Write_Stream_LE+0x30>
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    31e8:	cf 91       	pop	r28
}
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	08 95       	ret

000031f8 <Endpoint_Write_Stream_BE>:
    31f8:	cf 92       	push	r12
    31fa:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	6c 01       	movw	r12, r24
    320a:	8b 01       	movw	r16, r22
    320c:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    320e:	0f d2       	rcall	.+1054   	; 0x362e <Endpoint_WaitUntilReady>
    3210:	81 11       	cpse	r24, r1
    3212:	37 c0       	rjmp	.+110    	; 0x3282 <Endpoint_Write_Stream_BE+0x8a>
    3214:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3216:	21 97       	sbiw	r28, 0x01	; 1
    3218:	cc 0d       	add	r28, r12
    321a:	dd 1d       	adc	r29, r13
    321c:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    321e:	f1 04       	cpc	r15, r1
    3220:	39 f0       	breq	.+14     	; 0x3230 <Endpoint_Write_Stream_BE+0x38>
    3222:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	08 1b       	sub	r16, r24
    322a:	19 0b       	sbc	r17, r25
    322c:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    322e:	d9 0b       	sbc	r29, r25
    3230:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3232:	d1 2c       	mov	r13, r1
    3234:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3236:	11 05       	cpc	r17, r1
    3238:	19 f1       	breq	.+70     	; 0x3280 <Endpoint_Write_Stream_BE+0x88>
    323a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    323e:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3240:	15 c0       	rjmp	.+42     	; 0x326c <Endpoint_Write_Stream_BE+0x74>
    3242:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3246:	8e 77       	andi	r24, 0x7E	; 126
    3248:	80 93 e8 00 	sts	0x00E8, r24
    324c:	e1 14       	cp	r14, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    324e:	f1 04       	cpc	r15, r1
    3250:	49 f0       	breq	.+18     	; 0x3264 <Endpoint_Write_Stream_BE+0x6c>
    3252:	f7 01       	movw	r30, r14
			{
				*BytesProcessed += BytesInTransfer;
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	8c 0d       	add	r24, r12
    325a:	9d 1d       	adc	r25, r13
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <Endpoint_Write_Stream_BE+0x8a>
    3264:	e4 d1       	rcall	.+968    	; 0x362e <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3266:	88 23       	and	r24, r24
    3268:	29 f3       	breq	.-54     	; 0x3234 <Endpoint_Write_Stream_BE+0x3c>
    326a:	0b c0       	rjmp	.+22     	; 0x3282 <Endpoint_Write_Stream_BE+0x8a>
    326c:	88 81       	ld	r24, Y
    326e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3272:	21 97       	sbiw	r28, 0x01	; 1
    3274:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3276:	11 09       	sbc	r17, r1
			Length--;
    3278:	ff ef       	ldi	r31, 0xFF	; 255
    327a:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    327c:	df 0a       	sbc	r13, r31
    327e:	da cf       	rjmp	.-76     	; 0x3234 <Endpoint_Write_Stream_BE+0x3c>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    3284:	cf 91       	pop	r28
}
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	ff 90       	pop	r15
    328c:	ef 90       	pop	r14
    328e:	df 90       	pop	r13
    3290:	cf 90       	pop	r12
    3292:	08 95       	ret

00003294 <Endpoint_Read_Stream_LE>:
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	7c 01       	movw	r14, r24
    32a6:	8b 01       	movw	r16, r22
    32a8:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    32aa:	c1 d1       	rcall	.+898    	; 0x362e <Endpoint_WaitUntilReady>
    32ac:	81 11       	cpse	r24, r1
    32ae:	30 c0       	rjmp	.+96     	; 0x3310 <Endpoint_Read_Stream_LE+0x7c>
    32b0:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    32b2:	31 f0       	breq	.+12     	; 0x32c0 <Endpoint_Read_Stream_LE+0x2c>
    32b4:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    32b6:	99 81       	ldd	r25, Y+1	; 0x01
    32b8:	08 1b       	sub	r16, r24
    32ba:	19 0b       	sbc	r17, r25
    32bc:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    32be:	f9 1e       	adc	r15, r25
    32c0:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    32c2:	d1 2c       	mov	r13, r1
    32c4:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    32c6:	11 05       	cpc	r17, r1
    32c8:	11 f1       	breq	.+68     	; 0x330e <Endpoint_Read_Stream_LE+0x7a>
    32ca:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    32ce:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    32d0:	13 c0       	rjmp	.+38     	; 0x32f8 <Endpoint_Read_Stream_LE+0x64>
    32d2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    32d6:	8b 77       	andi	r24, 0x7B	; 123
    32d8:	80 93 e8 00 	sts	0x00E8, r24
    32dc:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    32de:	41 f0       	breq	.+16     	; 0x32f0 <Endpoint_Read_Stream_LE+0x5c>
    32e0:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    32e2:	99 81       	ldd	r25, Y+1	; 0x01
    32e4:	8c 0d       	add	r24, r12
    32e6:	9d 1d       	adc	r25, r13
    32e8:	99 83       	std	Y+1, r25	; 0x01
    32ea:	88 83       	st	Y, r24
    32ec:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    32ee:	10 c0       	rjmp	.+32     	; 0x3310 <Endpoint_Read_Stream_LE+0x7c>
    32f0:	9e d1       	rcall	.+828    	; 0x362e <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    32f2:	88 23       	and	r24, r24
    32f4:	39 f3       	breq	.-50     	; 0x32c4 <Endpoint_Read_Stream_LE+0x30>
    32f6:	0c c0       	rjmp	.+24     	; 0x3310 <Endpoint_Read_Stream_LE+0x7c>
    32f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    32fc:	f7 01       	movw	r30, r14
    32fe:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3300:	7f 01       	movw	r14, r30
    3302:	01 50       	subi	r16, 0x01	; 1
    3304:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3306:	ff ef       	ldi	r31, 0xFF	; 255
    3308:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    330a:	df 0a       	sbc	r13, r31
    330c:	db cf       	rjmp	.-74     	; 0x32c4 <Endpoint_Read_Stream_LE+0x30>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    3312:	cf 91       	pop	r28
}
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	08 95       	ret

00003322 <Endpoint_Write_Control_Stream_LE>:
    3322:	20 91 47 04 	lds	r18, 0x0447
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3326:	30 91 48 04 	lds	r19, 0x0448
    332a:	26 17       	cp	r18, r22
    332c:	37 07       	cpc	r19, r23
    332e:	48 f0       	brcs	.+18     	; 0x3342 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3330:	61 15       	cp	r22, r1
    3332:	71 05       	cpc	r23, r1
    3334:	39 f4       	brne	.+14     	; 0x3344 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3336:	20 91 e8 00 	lds	r18, 0x00E8
    333a:	2e 77       	andi	r18, 0x7E	; 126
    333c:	20 93 e8 00 	sts	0x00E8, r18
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <Endpoint_Write_Control_Stream_LE+0x22>
    3342:	b9 01       	movw	r22, r18
    3344:	fc 01       	movw	r30, r24
    3346:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3348:	61 15       	cp	r22, r1
    334a:	71 05       	cpc	r23, r1
    334c:	91 f1       	breq	.+100    	; 0x33b2 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    334e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3350:	88 23       	and	r24, r24
    3352:	e1 f1       	breq	.+120    	; 0x33cc <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3354:	85 30       	cpi	r24, 0x05	; 5
    3356:	e1 f1       	breq	.+120    	; 0x33d0 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3358:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    335c:	83 fd       	sbrc	r24, 3
    335e:	3a c0       	rjmp	.+116    	; 0x33d4 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3360:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3364:	82 ff       	sbrs	r24, 2
    3366:	06 c0       	rjmp	.+12     	; 0x3374 <Endpoint_Write_Control_Stream_LE+0x52>
    3368:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    336c:	82 ff       	sbrs	r24, 2
    336e:	24 c0       	rjmp	.+72     	; 0x33b8 <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3374:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    3378:	80 ff       	sbrs	r24, 0
    337a:	e6 cf       	rjmp	.-52     	; 0x3348 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    337c:	80 91 f2 00 	lds	r24, 0x00F2
    3380:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3384:	61 15       	cp	r22, r1
    3386:	71 05       	cpc	r23, r1
    3388:	51 f0       	breq	.+20     	; 0x339e <Endpoint_Write_Control_Stream_LE+0x7c>
    338a:	88 30       	cpi	r24, 0x08	; 8
    338c:	91 05       	cpc	r25, r1
    338e:	38 f4       	brcc	.+14     	; 0x339e <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3390:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3392:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3396:	61 50       	subi	r22, 0x01	; 1
    3398:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    339a:	01 96       	adiw	r24, 0x01	; 1
    339c:	f3 cf       	rjmp	.-26     	; 0x3384 <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    339e:	21 e0       	ldi	r18, 0x01	; 1
    33a0:	08 97       	sbiw	r24, 0x08	; 8
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <Endpoint_Write_Control_Stream_LE+0x84>
    33a4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    33a6:	80 91 e8 00 	lds	r24, 0x00E8
    33aa:	8e 77       	andi	r24, 0x7E	; 126
    33ac:	80 93 e8 00 	sts	0x00E8, r24
    33b0:	cb cf       	rjmp	.-106    	; 0x3348 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    33b2:	21 11       	cpse	r18, r1
    33b4:	cc cf       	rjmp	.-104    	; 0x334e <Endpoint_Write_Control_Stream_LE+0x2c>
    33b6:	d8 cf       	rjmp	.-80     	; 0x3368 <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    33b8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    33ba:	88 23       	and	r24, r24
    33bc:	39 f0       	breq	.+14     	; 0x33cc <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    33be:	85 30       	cpi	r24, 0x05	; 5
    33c0:	39 f0       	breq	.+14     	; 0x33d0 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    33c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    33c6:	83 ff       	sbrs	r24, 3
    33c8:	cf cf       	rjmp	.-98     	; 0x3368 <Endpoint_Write_Control_Stream_LE+0x46>
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    33cc:	82 e0       	ldi	r24, 0x02	; 2
    33ce:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    33d6:	08 95       	ret

000033d8 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    33d8:	61 15       	cp	r22, r1
    33da:	71 05       	cpc	r23, r1
    33dc:	29 f4       	brne	.+10     	; 0x33e8 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    33de:	20 91 e8 00 	lds	r18, 0x00E8
    33e2:	2b 77       	andi	r18, 0x7B	; 123
    33e4:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    33e8:	61 15       	cp	r22, r1
    33ea:	71 05       	cpc	r23, r1
    33ec:	21 f1       	breq	.+72     	; 0x3436 <Endpoint_Read_Control_Stream_LE+0x5e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    33ee:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    33f0:	22 23       	and	r18, r18
    33f2:	51 f1       	breq	.+84     	; 0x3448 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    33f4:	25 30       	cpi	r18, 0x05	; 5
    33f6:	51 f1       	breq	.+84     	; 0x344c <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    33f8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    33fc:	23 fd       	sbrc	r18, 3
    33fe:	20 c0       	rjmp	.+64     	; 0x3440 <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3400:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    3404:	22 ff       	sbrs	r18, 2
    3406:	f3 cf       	rjmp	.-26     	; 0x33ee <Endpoint_Read_Control_Stream_LE+0x16>
    3408:	fc 01       	movw	r30, r24
    340a:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    340c:	20 91 f2 00 	lds	r18, 0x00F2
    3410:	30 91 f3 00 	lds	r19, 0x00F3
		{
			while (Length && Endpoint_BytesInEndpoint())
    3414:	23 2b       	or	r18, r19
    3416:	19 f3       	breq	.-58     	; 0x33de <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3418:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    341c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    341e:	cf 01       	movw	r24, r30
				Length--;
    3420:	61 50       	subi	r22, 0x01	; 1
    3422:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    3424:	61 15       	cp	r22, r1
    3426:	71 05       	cpc	r23, r1
    3428:	81 f7       	brne	.-32     	; 0x340a <Endpoint_Read_Control_Stream_LE+0x32>
    342a:	d9 cf       	rjmp	.-78     	; 0x33de <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    342c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    342e:	88 23       	and	r24, r24
    3430:	59 f0       	breq	.+22     	; 0x3448 <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3432:	85 30       	cpi	r24, 0x05	; 5
    3434:	59 f0       	breq	.+22     	; 0x344c <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3436:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    343a:	80 ff       	sbrs	r24, 0
    343c:	f7 cf       	rjmp	.-18     	; 0x342c <Endpoint_Read_Control_Stream_LE+0x54>
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <Endpoint_Read_Control_Stream_LE+0x6c>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    344c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    344e:	08 95       	ret

00003450 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3450:	20 91 47 04 	lds	r18, 0x0447
    3454:	30 91 48 04 	lds	r19, 0x0448
    3458:	26 17       	cp	r18, r22
    345a:	37 07       	cpc	r19, r23
    345c:	48 f0       	brcs	.+18     	; 0x3470 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    345e:	61 15       	cp	r22, r1
    3460:	71 05       	cpc	r23, r1
    3462:	39 f4       	brne	.+14     	; 0x3472 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3464:	20 91 e8 00 	lds	r18, 0x00E8
    3468:	2e 77       	andi	r18, 0x7E	; 126
    346a:	20 93 e8 00 	sts	0x00E8, r18
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <Endpoint_Write_Control_PStream_LE+0x22>
    3470:	b9 01       	movw	r22, r18
    3472:	fc 01       	movw	r30, r24
    3474:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3476:	61 15       	cp	r22, r1
    3478:	71 05       	cpc	r23, r1
    347a:	a9 f1       	breq	.+106    	; 0x34e6 <Endpoint_Write_Control_PStream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    347c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    347e:	88 23       	and	r24, r24
    3480:	09 f4       	brne	.+2      	; 0x3484 <Endpoint_Write_Control_PStream_LE+0x34>
    3482:	3e c0       	rjmp	.+124    	; 0x3500 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3484:	85 30       	cpi	r24, 0x05	; 5
    3486:	09 f4       	brne	.+2      	; 0x348a <Endpoint_Write_Control_PStream_LE+0x3a>
    3488:	3d c0       	rjmp	.+122    	; 0x3504 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    348a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    348e:	83 fd       	sbrc	r24, 3
    3490:	3b c0       	rjmp	.+118    	; 0x3508 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3492:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3496:	82 ff       	sbrs	r24, 2
    3498:	06 c0       	rjmp	.+12     	; 0x34a6 <Endpoint_Write_Control_PStream_LE+0x56>
    349a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    349e:	82 ff       	sbrs	r24, 2
    34a0:	25 c0       	rjmp	.+74     	; 0x34ec <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    34a6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    34aa:	80 ff       	sbrs	r24, 0
    34ac:	e4 cf       	rjmp	.-56     	; 0x3476 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    34ae:	80 91 f2 00 	lds	r24, 0x00F2
    34b2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    34b6:	61 15       	cp	r22, r1
    34b8:	71 05       	cpc	r23, r1
    34ba:	59 f0       	breq	.+22     	; 0x34d2 <Endpoint_Write_Control_PStream_LE+0x82>
    34bc:	88 30       	cpi	r24, 0x08	; 8
    34be:	91 05       	cpc	r25, r1
    34c0:	40 f4       	brcc	.+16     	; 0x34d2 <Endpoint_Write_Control_PStream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    34c2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    34c4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    34c8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    34ca:	61 50       	subi	r22, 0x01	; 1
    34cc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	f2 cf       	rjmp	.-28     	; 0x34b6 <Endpoint_Write_Control_PStream_LE+0x66>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    34d2:	21 e0       	ldi	r18, 0x01	; 1
    34d4:	08 97       	sbiw	r24, 0x08	; 8
    34d6:	09 f0       	breq	.+2      	; 0x34da <Endpoint_Write_Control_PStream_LE+0x8a>
    34d8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    34da:	80 91 e8 00 	lds	r24, 0x00E8
    34de:	8e 77       	andi	r24, 0x7E	; 126
    34e0:	80 93 e8 00 	sts	0x00E8, r24
    34e4:	c8 cf       	rjmp	.-112    	; 0x3476 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    34e6:	21 11       	cpse	r18, r1
    34e8:	c9 cf       	rjmp	.-110    	; 0x347c <Endpoint_Write_Control_PStream_LE+0x2c>
    34ea:	d7 cf       	rjmp	.-82     	; 0x349a <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    34ec:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    34ee:	88 23       	and	r24, r24
    34f0:	39 f0       	breq	.+14     	; 0x3500 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    34f2:	85 30       	cpi	r24, 0x05	; 5
    34f4:	39 f0       	breq	.+14     	; 0x3504 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    34fa:	83 ff       	sbrs	r24, 3
    34fc:	ce cf       	rjmp	.-100    	; 0x349a <Endpoint_Write_Control_PStream_LE+0x4a>
    34fe:	04 c0       	rjmp	.+8      	; 0x3508 <Endpoint_Write_Control_PStream_LE+0xb8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3504:	83 e0       	ldi	r24, 0x03	; 3
    3506:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3508:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    350a:	08 95       	ret

0000350c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    350c:	98 2f       	mov	r25, r24
    350e:	97 30       	cpi	r25, 0x07	; 7
    3510:	58 f5       	brcc	.+86     	; 0x3568 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3512:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    3516:	98 17       	cp	r25, r24
    3518:	39 f0       	breq	.+14     	; 0x3528 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    351a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    351e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    3522:	50 91 f0 00 	lds	r21, 0x00F0
    3526:	03 c0       	rjmp	.+6      	; 0x352e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    3528:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    352a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    352c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    352e:	21 ff       	sbrs	r18, 1
    3530:	19 c0       	rjmp	.+50     	; 0x3564 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3532:	30 91 eb 00 	lds	r19, 0x00EB
    3536:	3e 7f       	andi	r19, 0xFE	; 254
    3538:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    353c:	30 91 ed 00 	lds	r19, 0x00ED
    3540:	3d 7f       	andi	r19, 0xFD	; 253
    3542:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    3546:	30 91 eb 00 	lds	r19, 0x00EB
    354a:	31 60       	ori	r19, 0x01	; 1
    354c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    3550:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    3554:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    3558:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    355c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    3560:	27 ff       	sbrs	r18, 7
    3562:	07 c0       	rjmp	.+14     	; 0x3572 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3564:	9f 5f       	subi	r25, 0xFF	; 255
    3566:	d3 cf       	rjmp	.-90     	; 0x350e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3568:	8f 70       	andi	r24, 0x0F	; 15
    356a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    3572:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3574:	08 95       	ret

00003576 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	06 2f       	mov	r16, r22
    3580:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    3582:	10 e0       	ldi	r17, 0x00	; 0
    3584:	10 17       	cp	r17, r16
    3586:	71 f1       	breq	.+92     	; 0x35e4 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    3588:	98 81       	ld	r25, Y
    358a:	99 23       	and	r25, r25
    358c:	41 f1       	breq	.+80     	; 0x35de <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    358e:	2c 81       	ldd	r18, Y+4	; 0x04
    3590:	e9 81       	ldd	r30, Y+1	; 0x01
    3592:	fa 81       	ldd	r31, Y+2	; 0x02
    3594:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    3596:	89 2f       	mov	r24, r25
    3598:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    359a:	87 30       	cpi	r24, 0x07	; 7
    359c:	10 f0       	brcs	.+4      	; 0x35a2 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	22 c0       	rjmp	.+68     	; 0x35e6 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    35a2:	22 30       	cpi	r18, 0x02	; 2
    35a4:	10 f0       	brcs	.+4      	; 0x35aa <Endpoint_ConfigureEndpointTable+0x34>
    35a6:	56 e0       	ldi	r21, 0x06	; 6
    35a8:	01 c0       	rjmp	.+2      	; 0x35ac <Endpoint_ConfigureEndpointTable+0x36>
    35aa:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    35ac:	28 e0       	ldi	r18, 0x08	; 8
    35ae:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    35b0:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    35b2:	2e 17       	cp	r18, r30
    35b4:	3f 07       	cpc	r19, r31
    35b6:	20 f4       	brcc	.+8      	; 0x35c0 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    35b8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    35ba:	22 0f       	add	r18, r18
    35bc:	33 1f       	adc	r19, r19
    35be:	f9 cf       	rjmp	.-14     	; 0x35b2 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    35c0:	42 95       	swap	r20
    35c2:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    35c4:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    35c6:	69 2f       	mov	r22, r25
    35c8:	66 1f       	adc	r22, r22
    35ca:	66 27       	eor	r22, r22
    35cc:	66 1f       	adc	r22, r22
    35ce:	90 e4       	ldi	r25, 0x40	; 64
    35d0:	79 9f       	mul	r23, r25
    35d2:	90 01       	movw	r18, r0
    35d4:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    35d6:	62 2b       	or	r22, r18
    35d8:	99 df       	rcall	.-206    	; 0x350c <Endpoint_ConfigureEndpoint_Prv>
    35da:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    35dc:	01 f3       	breq	.-64     	; 0x359e <Endpoint_ConfigureEndpointTable+0x28>
    35de:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    35e0:	25 96       	adiw	r28, 0x05	; 5
    35e2:	d0 cf       	rjmp	.-96     	; 0x3584 <Endpoint_ConfigureEndpointTable+0xe>
    35e4:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    35e6:	df 91       	pop	r29
}
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	08 95       	ret

000035f0 <Endpoint_ClearStatusStage>:
    35f0:	80 91 41 04 	lds	r24, 0x0441
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    35f4:	87 fd       	sbrc	r24, 7
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    35f8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    35fc:	80 ff       	sbrs	r24, 0
    35fe:	0d c0       	rjmp	.+26     	; 0x361a <Endpoint_ClearStatusStage+0x2a>
    3600:	10 c0       	rjmp	.+32     	; 0x3622 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3602:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3606:	82 fd       	sbrc	r24, 2
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    360a:	8e b3       	in	r24, 0x1e	; 30
    360c:	81 11       	cpse	r24, r1
    360e:	f9 cf       	rjmp	.-14     	; 0x3602 <Endpoint_ClearStatusStage+0x12>
    3610:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3612:	80 91 e8 00 	lds	r24, 0x00E8
    3616:	8b 77       	andi	r24, 0x7B	; 123
    3618:	07 c0       	rjmp	.+14     	; 0x3628 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    361a:	8e b3       	in	r24, 0x1e	; 30
    361c:	81 11       	cpse	r24, r1
    361e:	ec cf       	rjmp	.-40     	; 0x35f8 <Endpoint_ClearStatusStage+0x8>
    3620:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3622:	80 91 e8 00 	lds	r24, 0x00E8
    3626:	8e 77       	andi	r24, 0x7E	; 126
    3628:	80 93 e8 00 	sts	0x00E8, r24
    362c:	08 95       	ret

0000362e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    362e:	80 91 e4 00 	lds	r24, 0x00E4
    3632:	90 91 e5 00 	lds	r25, 0x00E5
    3636:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3638:	20 91 ec 00 	lds	r18, 0x00EC
    363c:	20 ff       	sbrs	r18, 0
    363e:	20 c0       	rjmp	.+64     	; 0x3680 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3640:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3644:	20 fd       	sbrc	r18, 0
    3646:	20 c0       	rjmp	.+64     	; 0x3688 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3648:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    364a:	22 23       	and	r18, r18
    364c:	89 f0       	breq	.+34     	; 0x3670 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    364e:	25 30       	cpi	r18, 0x05	; 5
    3650:	89 f0       	breq	.+34     	; 0x3674 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3652:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3656:	25 fd       	sbrc	r18, 5
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <Endpoint_WaitUntilReady+0x4a>
    365a:	20 91 e4 00 	lds	r18, 0x00E4
    365e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3662:	28 17       	cp	r18, r24
    3664:	39 07       	cpc	r19, r25
    3666:	41 f3       	breq	.-48     	; 0x3638 <Endpoint_WaitUntilReady+0xa>
    3668:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    366a:	41 f0       	breq	.+16     	; 0x367c <Endpoint_WaitUntilReady+0x4e>
    366c:	c9 01       	movw	r24, r18
    366e:	e4 cf       	rjmp	.-56     	; 0x3638 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3674:	83 e0       	ldi	r24, 0x03	; 3
    3676:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    367c:	84 e0       	ldi	r24, 0x04	; 4
    367e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3680:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3684:	22 ff       	sbrs	r18, 2
    3686:	e0 cf       	rjmp	.-64     	; 0x3648 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	08 95       	ret

0000368c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3694:	4d d0       	rcall	.+154    	; 0x3730 <USB_INT_DisableAllInterrupts>
    3696:	54 d0       	rcall	.+168    	; 0x3740 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3698:	c8 ed       	ldi	r28, 0xD8	; 216
    369a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    369c:	88 81       	ld	r24, Y
    369e:	8f 77       	andi	r24, 0x7F	; 127
    36a0:	88 83       	st	Y, r24
    36a2:	88 81       	ld	r24, Y
    36a4:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    36a6:	88 83       	st	Y, r24
    36a8:	88 81       	ld	r24, Y
    36aa:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    36ac:	88 83       	st	Y, r24
    36ae:	e7 ed       	ldi	r30, 0xD7	; 215
    36b0:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    36b2:	80 81       	ld	r24, Z
    36b4:	80 68       	ori	r24, 0x80	; 128
    36b6:	80 83       	st	Z, r24
    36b8:	19 bc       	out	0x29, r1	; 41
    36ba:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    36bc:	10 92 3d 04 	sts	0x043D, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    36c0:	10 92 3f 04 	sts	0x043F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    36c4:	10 92 3e 04 	sts	0x043E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    36c8:	00 ee       	ldi	r16, 0xE0	; 224
    36ca:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    36cc:	f8 01       	movw	r30, r16
    36ce:	80 81       	ld	r24, Z
    36d0:	8b 7f       	andi	r24, 0xFB	; 251
    36d2:	80 83       	st	Z, r24
    36d4:	88 81       	ld	r24, Y
    36d6:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    36d8:	88 83       	st	Y, r24
    36da:	42 e0       	ldi	r20, 0x02	; 2
    36dc:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	15 df       	rcall	.-470    	; 0x350c <Endpoint_ConfigureEndpoint_Prv>
    36e2:	e1 ee       	ldi	r30, 0xE1	; 225
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    36e8:	8e 7f       	andi	r24, 0xFE	; 254
    36ea:	80 83       	st	Z, r24
    36ec:	e2 ee       	ldi	r30, 0xE2	; 226
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    36f2:	81 60       	ori	r24, 0x01	; 1
    36f4:	80 83       	st	Z, r24
    36f6:	80 81       	ld	r24, Z
    36f8:	88 60       	ori	r24, 0x08	; 8
    36fa:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    36fc:	f8 01       	movw	r30, r16
    36fe:	80 81       	ld	r24, Z
    3700:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3702:	80 83       	st	Z, r24
    3704:	88 81       	ld	r24, Y
    3706:	80 61       	ori	r24, 0x10	; 16
    3708:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <USB_Init>:
    3714:	e8 ed       	ldi	r30, 0xD8	; 216
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    371a:	8f 7e       	andi	r24, 0xEF	; 239
    371c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    371e:	e7 ed       	ldi	r30, 0xD7	; 215
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	81 60       	ori	r24, 0x01	; 1
    3726:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	80 93 40 04 	sts	0x0440, r24

	USB_ResetInterface();
    372e:	ae cf       	rjmp	.-164    	; 0x368c <USB_ResetInterface>

00003730 <USB_INT_DisableAllInterrupts>:
    3730:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	8c 7f       	andi	r24, 0xFC	; 252
    3738:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    373a:	10 92 e2 00 	sts	0x00E2, r1
    373e:	08 95       	ret

00003740 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3740:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3744:	10 92 e1 00 	sts	0x00E1, r1
    3748:	08 95       	ret

0000374a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    374a:	1f 92       	push	r1
    374c:	0f 92       	push	r0
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	0f 92       	push	r0
    3752:	11 24       	eor	r1, r1
    3754:	0b b6       	in	r0, 0x3b	; 59
    3756:	0f 92       	push	r0
    3758:	2f 93       	push	r18
    375a:	3f 93       	push	r19
    375c:	4f 93       	push	r20
    375e:	5f 93       	push	r21
    3760:	6f 93       	push	r22
    3762:	7f 93       	push	r23
    3764:	8f 93       	push	r24
    3766:	9f 93       	push	r25
    3768:	af 93       	push	r26
    376a:	bf 93       	push	r27
    376c:	ef 93       	push	r30
    376e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3770:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3774:	82 ff       	sbrs	r24, 2
    3776:	0a c0       	rjmp	.+20     	; 0x378c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3778:	80 91 e2 00 	lds	r24, 0x00E2
    377c:	82 ff       	sbrs	r24, 2
    377e:	06 c0       	rjmp	.+12     	; 0x378c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3780:	80 91 e1 00 	lds	r24, 0x00E1
    3784:	8b 7f       	andi	r24, 0xFB	; 251
    3786:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    378a:	3c d2       	rcall	.+1144   	; 0x3c04 <USB_Event_Stub>
    378c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3790:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3792:	1d c0       	rjmp	.+58     	; 0x37ce <__vector_10+0x84>
    3794:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3798:	80 ff       	sbrs	r24, 0
    379a:	19 c0       	rjmp	.+50     	; 0x37ce <__vector_10+0x84>
    379c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    37a0:	8e 7f       	andi	r24, 0xFE	; 254
    37a2:	80 93 da 00 	sts	0x00DA, r24
    37a6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    37aa:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    37ac:	0c c0       	rjmp	.+24     	; 0x37c6 <__vector_10+0x7c>
    37ae:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    37b0:	89 bd       	out	0x29, r24	; 41
    37b2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    37b4:	89 bd       	out	0x29, r24	; 41
    37b6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    37b8:	00 fe       	sbrs	r0, 0
    37ba:	fd cf       	rjmp	.-6      	; 0x37b6 <__vector_10+0x6c>
    37bc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    37be:	8e bb       	out	0x1e, r24	; 30
    37c0:	0e 94 b2 02 	call	0x564	; 0x564 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    37c4:	04 c0       	rjmp	.+8      	; 0x37ce <__vector_10+0x84>
    37c6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    37c8:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    37ca:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    37ce:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    37d2:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    37d4:	17 c0       	rjmp	.+46     	; 0x3804 <__vector_10+0xba>
    37d6:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    37da:	80 ff       	sbrs	r24, 0
    37dc:	13 c0       	rjmp	.+38     	; 0x3804 <__vector_10+0xba>
    37de:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    37e2:	8e 7f       	andi	r24, 0xFE	; 254
    37e4:	80 93 e2 00 	sts	0x00E2, r24
    37e8:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    37ec:	80 61       	ori	r24, 0x10	; 16
    37ee:	80 93 e2 00 	sts	0x00E2, r24
    37f2:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    37f6:	80 62       	ori	r24, 0x20	; 32
    37f8:	80 93 d8 00 	sts	0x00D8, r24
    37fc:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    37fe:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3800:	8e bb       	out	0x1e, r24	; 30
    3802:	00 d2       	rcall	.+1024   	; 0x3c04 <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    3804:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3808:	84 ff       	sbrs	r24, 4
    380a:	2e c0       	rjmp	.+92     	; 0x3868 <__vector_10+0x11e>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    380c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3810:	84 ff       	sbrs	r24, 4
    3812:	2a c0       	rjmp	.+84     	; 0x3868 <__vector_10+0x11e>
    3814:	8c e0       	ldi	r24, 0x0C	; 12
    3816:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3818:	8e e0       	ldi	r24, 0x0E	; 14
    381a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    381c:	09 b4       	in	r0, 0x29	; 41
    381e:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3820:	fd cf       	rjmp	.-6      	; 0x381c <__vector_10+0xd2>
    3822:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3826:	8f 7d       	andi	r24, 0xDF	; 223
    3828:	80 93 d8 00 	sts	0x00D8, r24
    382c:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3830:	8f 7e       	andi	r24, 0xEF	; 239
    3832:	80 93 e1 00 	sts	0x00E1, r24
    3836:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    383a:	8f 7e       	andi	r24, 0xEF	; 239
    383c:	80 93 e2 00 	sts	0x00E2, r24
    3840:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3844:	81 60       	ori	r24, 0x01	; 1
    3846:	80 93 e2 00 	sts	0x00E2, r24
    384a:	80 91 3d 04 	lds	r24, 0x043D
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    384e:	88 23       	and	r24, r24
    3850:	11 f0       	breq	.+4      	; 0x3856 <__vector_10+0x10c>
    3852:	84 e0       	ldi	r24, 0x04	; 4
    3854:	07 c0       	rjmp	.+14     	; 0x3864 <__vector_10+0x11a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3856:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    385a:	87 ff       	sbrs	r24, 7
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <__vector_10+0x118>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    385e:	83 e0       	ldi	r24, 0x03	; 3
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <__vector_10+0x11a>
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	8e bb       	out	0x1e, r24	; 30
    3866:	ce d1       	rcall	.+924    	; 0x3c04 <USB_Event_Stub>
    3868:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    386c:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    386e:	26 c0       	rjmp	.+76     	; 0x38bc <__vector_10+0x172>
    3870:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3874:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3876:	22 c0       	rjmp	.+68     	; 0x38bc <__vector_10+0x172>
    3878:	80 91 e1 00 	lds	r24, 0x00E1
    387c:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    387e:	80 93 e1 00 	sts	0x00E1, r24
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	8e bb       	out	0x1e, r24	; 30
    3886:	10 92 3d 04 	sts	0x043D, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    388a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    388e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3890:	80 93 e1 00 	sts	0x00E1, r24
    3894:	80 91 e2 00 	lds	r24, 0x00E2
    3898:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    389a:	80 93 e2 00 	sts	0x00E2, r24
    389e:	80 91 e2 00 	lds	r24, 0x00E2
    38a2:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    38a4:	80 93 e2 00 	sts	0x00E2, r24
    38a8:	42 e0       	ldi	r20, 0x02	; 2
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    38ae:	2e de       	rcall	.-932    	; 0x350c <Endpoint_ConfigureEndpoint_Prv>
    38b0:	80 91 f0 00 	lds	r24, 0x00F0
    38b4:	88 60       	ori	r24, 0x08	; 8
    38b6:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    38ba:	a4 d1       	rcall	.+840    	; 0x3c04 <USB_Event_Stub>
    38bc:	ff 91       	pop	r31
    38be:	ef 91       	pop	r30
    38c0:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    38c2:	af 91       	pop	r26
    38c4:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    38c6:	8f 91       	pop	r24
    38c8:	7f 91       	pop	r23
    38ca:	6f 91       	pop	r22
    38cc:	5f 91       	pop	r21
    38ce:	4f 91       	pop	r20
    38d0:	3f 91       	pop	r19
    38d2:	2f 91       	pop	r18
    38d4:	0f 90       	pop	r0
    38d6:	0b be       	out	0x3b, r0	; 59
    38d8:	0f 90       	pop	r0
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	0f 90       	pop	r0
    38de:	1f 90       	pop	r1
    38e0:	18 95       	reti

000038e2 <__vector_11>:
    38e2:	1f 92       	push	r1
    38e4:	0f 92       	push	r0
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	0f 92       	push	r0
    38ea:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    38ec:	0b b6       	in	r0, 0x3b	; 59
    38ee:	0f 92       	push	r0
    38f0:	2f 93       	push	r18
    38f2:	3f 93       	push	r19
    38f4:	4f 93       	push	r20
    38f6:	5f 93       	push	r21
    38f8:	6f 93       	push	r22
    38fa:	7f 93       	push	r23
    38fc:	8f 93       	push	r24
    38fe:	9f 93       	push	r25
    3900:	af 93       	push	r26
    3902:	bf 93       	push	r27
    3904:	cf 93       	push	r28
    3906:	ef 93       	push	r30
    3908:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    390a:	c0 91 e9 00 	lds	r28, 0x00E9
    390e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3910:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3914:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3918:	80 91 f0 00 	lds	r24, 0x00F0
    391c:	87 7f       	andi	r24, 0xF7	; 247
    391e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3922:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3924:	1d d0       	rcall	.+58     	; 0x3960 <USB_Device_ProcessControlRequest>
    3926:	10 92 e9 00 	sts	0x00E9, r1
    392a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    392e:	88 60       	ori	r24, 0x08	; 8
    3930:	80 93 f0 00 	sts	0x00F0, r24
    3934:	c0 93 e9 00 	sts	0x00E9, r28
    3938:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    393a:	ef 91       	pop	r30
    393c:	cf 91       	pop	r28
    393e:	bf 91       	pop	r27
    3940:	af 91       	pop	r26
    3942:	9f 91       	pop	r25
    3944:	8f 91       	pop	r24
    3946:	7f 91       	pop	r23
    3948:	6f 91       	pop	r22
    394a:	5f 91       	pop	r21
    394c:	4f 91       	pop	r20
    394e:	3f 91       	pop	r19
    3950:	2f 91       	pop	r18
    3952:	0f 90       	pop	r0
    3954:	0b be       	out	0x3b, r0	; 59
    3956:	0f 90       	pop	r0
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	0f 90       	pop	r0
    395c:	1f 90       	pop	r1
    395e:	18 95       	reti

00003960 <USB_Device_ProcessControlRequest>:
    3960:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	aa 97       	sbiw	r28, 0x2a	; 42
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	e1 e4       	ldi	r30, 0x41	; 65
    3978:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    397a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    397e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3980:	24 e0       	ldi	r18, 0x04	; 4
    3982:	e9 34       	cpi	r30, 0x49	; 73
    3984:	f2 07       	cpc	r31, r18
    3986:	c9 f7       	brne	.-14     	; 0x397a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3988:	0e 94 cb 02 	call	0x596	; 0x596 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    398c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3990:	83 ff       	sbrs	r24, 3
    3992:	20 c1       	rjmp	.+576    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3994:	90 91 41 04 	lds	r25, 0x0441

		switch (USB_ControlRequest.bRequest)
    3998:	80 91 42 04 	lds	r24, 0x0442
    399c:	85 30       	cpi	r24, 0x05	; 5
    399e:	09 f4       	brne	.+2      	; 0x39a2 <USB_Device_ProcessControlRequest+0x42>
    39a0:	77 c0       	rjmp	.+238    	; 0x3a90 <USB_Device_ProcessControlRequest+0x130>
    39a2:	30 f4       	brcc	.+12     	; 0x39b0 <USB_Device_ProcessControlRequest+0x50>
    39a4:	81 30       	cpi	r24, 0x01	; 1
    39a6:	81 f1       	breq	.+96     	; 0x3a08 <USB_Device_ProcessControlRequest+0xa8>
    39a8:	68 f0       	brcs	.+26     	; 0x39c4 <USB_Device_ProcessControlRequest+0x64>
    39aa:	83 30       	cpi	r24, 0x03	; 3
    39ac:	69 f1       	breq	.+90     	; 0x3a08 <USB_Device_ProcessControlRequest+0xa8>
    39ae:	12 c1       	rjmp	.+548    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    39b0:	88 30       	cpi	r24, 0x08	; 8
    39b2:	09 f4       	brne	.+2      	; 0x39b6 <USB_Device_ProcessControlRequest+0x56>
    39b4:	e1 c0       	rjmp	.+450    	; 0x3b78 <USB_Device_ProcessControlRequest+0x218>
    39b6:	89 30       	cpi	r24, 0x09	; 9
    39b8:	09 f4       	brne	.+2      	; 0x39bc <USB_Device_ProcessControlRequest+0x5c>
    39ba:	f0 c0       	rjmp	.+480    	; 0x3b9c <USB_Device_ProcessControlRequest+0x23c>
    39bc:	86 30       	cpi	r24, 0x06	; 6
    39be:	09 f0       	breq	.+2      	; 0x39c2 <USB_Device_ProcessControlRequest+0x62>
    39c0:	09 c1       	rjmp	.+530    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    39c2:	87 c0       	rjmp	.+270    	; 0x3ad2 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    39c4:	90 38       	cpi	r25, 0x80	; 128
    39c6:	81 f0       	breq	.+32     	; 0x39e8 <USB_Device_ProcessControlRequest+0x88>
    39c8:	92 38       	cpi	r25, 0x82	; 130
    39ca:	09 f0       	breq	.+2      	; 0x39ce <USB_Device_ProcessControlRequest+0x6e>
    39cc:	03 c1       	rjmp	.+518    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    39ce:	80 91 45 04 	lds	r24, 0x0445
    39d2:	8f 70       	andi	r24, 0x0F	; 15
    39d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    39d8:	80 91 eb 00 	lds	r24, 0x00EB
    39dc:	85 fb       	bst	r24, 5
    39de:	88 27       	eor	r24, r24
    39e0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    39e2:	10 92 e9 00 	sts	0x00E9, r1
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    39e8:	80 91 3e 04 	lds	r24, 0x043E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    39ec:	90 91 3f 04 	lds	r25, 0x043F
    39f0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    39f2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    39f4:	90 91 e8 00 	lds	r25, 0x00E8
    39f8:	97 7f       	andi	r25, 0xF7	; 247
    39fa:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    39fe:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    3a02:	10 92 f1 00 	sts	0x00F1, r1
    3a06:	c3 c0       	rjmp	.+390    	; 0x3b8e <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a08:	29 2f       	mov	r18, r25
    3a0a:	2d 7f       	andi	r18, 0xFD	; 253
    3a0c:	09 f0       	breq	.+2      	; 0x3a10 <USB_Device_ProcessControlRequest+0xb0>
    3a0e:	e2 c0       	rjmp	.+452    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3a10:	99 23       	and	r25, r25
    3a12:	19 f0       	breq	.+6      	; 0x3a1a <USB_Device_ProcessControlRequest+0xba>
    3a14:	92 30       	cpi	r25, 0x02	; 2
    3a16:	61 f0       	breq	.+24     	; 0x3a30 <USB_Device_ProcessControlRequest+0xd0>
    3a18:	dd c0       	rjmp	.+442    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3a1a:	90 91 43 04 	lds	r25, 0x0443
    3a1e:	91 30       	cpi	r25, 0x01	; 1
    3a20:	09 f0       	breq	.+2      	; 0x3a24 <USB_Device_ProcessControlRequest+0xc4>
    3a22:	d8 c0       	rjmp	.+432    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3a24:	83 30       	cpi	r24, 0x03	; 3
    3a26:	09 f0       	breq	.+2      	; 0x3a2a <USB_Device_ProcessControlRequest+0xca>
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	90 93 3f 04 	sts	0x043F, r25
    3a2e:	2a c0       	rjmp	.+84     	; 0x3a84 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3a30:	90 91 43 04 	lds	r25, 0x0443
    3a34:	91 11       	cpse	r25, r1
    3a36:	26 c0       	rjmp	.+76     	; 0x3a84 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3a38:	20 91 45 04 	lds	r18, 0x0445
    3a3c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3a3e:	09 f4       	brne	.+2      	; 0x3a42 <USB_Device_ProcessControlRequest+0xe2>
    3a40:	c9 c0       	rjmp	.+402    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3a42:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3a46:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3a4a:	90 ff       	sbrs	r25, 0
    3a4c:	1b c0       	rjmp	.+54     	; 0x3a84 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3a4e:	83 30       	cpi	r24, 0x03	; 3
    3a50:	21 f4       	brne	.+8      	; 0x3a5a <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3a52:	80 91 eb 00 	lds	r24, 0x00EB
    3a56:	80 62       	ori	r24, 0x20	; 32
    3a58:	13 c0       	rjmp	.+38     	; 0x3a80 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3a5a:	80 91 eb 00 	lds	r24, 0x00EB
    3a5e:	80 61       	ori	r24, 0x10	; 16
    3a60:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	02 2e       	mov	r0, r18
    3a6a:	01 c0       	rjmp	.+2      	; 0x3a6e <USB_Device_ProcessControlRequest+0x10e>
    3a6c:	88 0f       	add	r24, r24
    3a6e:	0a 94       	dec	r0
    3a70:	ea f7       	brpl	.-6      	; 0x3a6c <USB_Device_ProcessControlRequest+0x10c>
    3a72:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3a76:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3a7a:	80 91 eb 00 	lds	r24, 0x00EB
    3a7e:	88 60       	ori	r24, 0x08	; 8
    3a80:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3a84:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3a88:	80 91 e8 00 	lds	r24, 0x00E8
    3a8c:	87 7f       	andi	r24, 0xF7	; 247
    3a8e:	82 c0       	rjmp	.+260    	; 0x3b94 <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3a90:	91 11       	cpse	r25, r1
    3a92:	a0 c0       	rjmp	.+320    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3a94:	10 91 43 04 	lds	r17, 0x0443
    3a98:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3a9a:	80 91 e3 00 	lds	r24, 0x00E3
    3a9e:	80 78       	andi	r24, 0x80	; 128
    3aa0:	81 2b       	or	r24, r17
    3aa2:	80 93 e3 00 	sts	0x00E3, r24
    3aa6:	80 91 e8 00 	lds	r24, 0x00E8
    3aaa:	87 7f       	andi	r24, 0xF7	; 247
    3aac:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3ab0:	9f dd       	rcall	.-1218   	; 0x35f0 <Endpoint_ClearStatusStage>
    3ab2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3ab6:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    3ab8:	fc cf       	rjmp	.-8      	; 0x3ab2 <USB_Device_ProcessControlRequest+0x152>
    3aba:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3abe:	80 68       	ori	r24, 0x80	; 128
    3ac0:	80 93 e3 00 	sts	0x00E3, r24
    3ac4:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3ac6:	11 f0       	breq	.+4      	; 0x3acc <USB_Device_ProcessControlRequest+0x16c>
    3ac8:	83 e0       	ldi	r24, 0x03	; 3
    3aca:	01 c0       	rjmp	.+2      	; 0x3ace <USB_Device_ProcessControlRequest+0x16e>
    3acc:	82 e0       	ldi	r24, 0x02	; 2
    3ace:	8e bb       	out	0x1e, r24	; 30
    3ad0:	81 c0       	rjmp	.+258    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3ad2:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3ad4:	92 30       	cpi	r25, 0x02	; 2
    3ad6:	08 f0       	brcs	.+2      	; 0x3ada <USB_Device_ProcessControlRequest+0x17a>
    3ad8:	7d c0       	rjmp	.+250    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3ada:	80 91 43 04 	lds	r24, 0x0443
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3ade:	90 91 44 04 	lds	r25, 0x0444
    3ae2:	8c 3d       	cpi	r24, 0xDC	; 220
    3ae4:	23 e0       	ldi	r18, 0x03	; 3
    3ae6:	92 07       	cpc	r25, r18
    3ae8:	71 f5       	brne	.+92     	; 0x3b46 <USB_Device_ProcessControlRequest+0x1e6>
    3aea:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3aec:	8a 83       	std	Y+2, r24	; 0x02
    3aee:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3af4:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3af6:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3af8:	13 96       	adiw	r26, 0x03	; 3
    3afa:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3afc:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3afe:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3b00:	e3 2f       	mov	r30, r19
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	50 93 57 00 	sts	0x0057, r21
    3b08:	e4 91       	lpm	r30, Z
    3b0a:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    3b0c:	03 c0       	rjmp	.+6      	; 0x3b14 <USB_Device_ProcessControlRequest+0x1b4>
    3b0e:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    3b10:	ef 70       	andi	r30, 0x0F	; 15
    3b12:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    3b14:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    3b16:	8e 2f       	mov	r24, r30
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3b1c:	10 f0       	brcs	.+4      	; 0x3b22 <USB_Device_ProcessControlRequest+0x1c2>
    3b1e:	c7 96       	adiw	r24, 0x37	; 55
    3b20:	01 c0       	rjmp	.+2      	; 0x3b24 <USB_Device_ProcessControlRequest+0x1c4>
    3b22:	c0 96       	adiw	r24, 0x30	; 48
    3b24:	8d 93       	st	X+, r24
    3b26:	9d 93       	st	X+, r25
    3b28:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3b2a:	24 31       	cpi	r18, 0x14	; 20
    3b2c:	49 f7       	brne	.-46     	; 0x3b00 <USB_Device_ProcessControlRequest+0x1a0>
    3b2e:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3b30:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3b34:	87 7f       	andi	r24, 0xF7	; 247
    3b36:	80 93 e8 00 	sts	0x00E8, r24
    3b3a:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	ce 01       	movw	r24, r28
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	ef db       	rcall	.-2082   	; 0x3322 <Endpoint_Write_Control_Stream_LE>
    3b44:	13 c0       	rjmp	.+38     	; 0x3b6c <USB_Device_ProcessControlRequest+0x20c>
    3b46:	ae 01       	movw	r20, r28
    3b48:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4c:	60 91 45 04 	lds	r22, 0x0445
    3b50:	0e 94 0b 03 	call	0x616	; 0x616 <CALLBACK_USB_GetDescriptor>
    3b54:	00 97       	sbiw	r24, 0x00	; 0
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <USB_Device_ProcessControlRequest+0x1fa>
    3b58:	3d c0       	rjmp	.+122    	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3b5a:	20 91 e8 00 	lds	r18, 0x00E8
    3b5e:	27 7f       	andi	r18, 0xF7	; 247
    3b60:	20 93 e8 00 	sts	0x00E8, r18
    3b64:	bc 01       	movw	r22, r24
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	72 dc       	rcall	.-1820   	; 0x3450 <Endpoint_Write_Control_PStream_LE>
    3b6c:	80 91 e8 00 	lds	r24, 0x00E8
    3b70:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3b72:	80 93 e8 00 	sts	0x00E8, r24
    3b76:	2e c0       	rjmp	.+92     	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3b78:	90 38       	cpi	r25, 0x80	; 128
    3b7a:	61 f5       	brne	.+88     	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3b7c:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3b80:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3b82:	80 93 e8 00 	sts	0x00E8, r24
    3b86:	80 91 3d 04 	lds	r24, 0x043D
    3b8a:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3b8e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3b92:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b94:	80 93 e8 00 	sts	0x00E8, r24
    3b98:	2b dd       	rcall	.-1450   	; 0x35f0 <Endpoint_ClearStatusStage>
    3b9a:	1c c0       	rjmp	.+56     	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3b9c:	91 11       	cpse	r25, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3b9e:	1a c0       	rjmp	.+52     	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
    3ba0:	90 91 43 04 	lds	r25, 0x0443
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3ba4:	92 30       	cpi	r25, 0x02	; 2
    3ba6:	b0 f4       	brcc	.+44     	; 0x3bd4 <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3ba8:	80 91 e8 00 	lds	r24, 0x00E8
    3bac:	87 7f       	andi	r24, 0xF7	; 247
    3bae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3bb2:	90 93 3d 04 	sts	0x043D, r25
    3bb6:	1c dd       	rcall	.-1480   	; 0x35f0 <Endpoint_ClearStatusStage>
    3bb8:	80 91 3d 04 	lds	r24, 0x043D
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3bbc:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    3bbe:	04 c0       	rjmp	.+8      	; 0x3bc8 <USB_Device_ProcessControlRequest+0x268>
    3bc0:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    3bc4:	87 ff       	sbrs	r24, 7
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <USB_Device_ProcessControlRequest+0x26c>
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3bca:	01 c0       	rjmp	.+2      	; 0x3bce <USB_Device_ProcessControlRequest+0x26e>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3bce:	8e bb       	out	0x1e, r24	; 30
    3bd0:	0e 94 b8 02 	call	0x570	; 0x570 <EVENT_USB_Device_ConfigurationChanged>
    3bd4:	80 91 e8 00 	lds	r24, 0x00E8
    3bd8:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    3bda:	0a c0       	rjmp	.+20     	; 0x3bf0 <USB_Device_ProcessControlRequest+0x290>
    3bdc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3be0:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3be2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3be6:	80 91 eb 00 	lds	r24, 0x00EB
    3bea:	80 62       	ori	r24, 0x20	; 32
    3bec:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3bf0:	aa 96       	adiw	r28, 0x2a	; 42
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	08 95       	ret

00003c04 <USB_Event_Stub>:
    3c04:	08 95       	ret

00003c06 <USB_USBTask>:
    3c06:	cf 93       	push	r28
    3c08:	8e b3       	in	r24, 0x1e	; 30
    3c0a:	88 23       	and	r24, r24
    3c0c:	a9 f0       	breq	.+42     	; 0x3c38 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3c0e:	80 91 e9 00 	lds	r24, 0x00E9
    3c12:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3c14:	90 91 ec 00 	lds	r25, 0x00EC
    3c18:	90 ff       	sbrs	r25, 0
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <USB_USBTask+0x1a>
    3c1c:	90 e8       	ldi	r25, 0x80	; 128
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <USB_USBTask+0x1c>
    3c20:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3c22:	c9 2f       	mov	r28, r25
    3c24:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c26:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c2a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3c2e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3c30:	97 de       	rcall	.-722    	; 0x3960 <USB_Device_ProcessControlRequest>
    3c32:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c34:	c0 93 e9 00 	sts	0x00E9, r28
    3c38:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3c3a:	08 95       	ret

00003c3c <HID_Device_ProcessControlRequest>:
    3c3c:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3c3e:	7f 92       	push	r7
    3c40:	8f 92       	push	r8
    3c42:	9f 92       	push	r9
    3c44:	af 92       	push	r10
    3c46:	bf 92       	push	r11
    3c48:	cf 92       	push	r12
    3c4a:	df 92       	push	r13
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	00 d0       	rcall	.+0      	; 0x3c5a <HID_Device_ProcessControlRequest+0x1e>
    3c5a:	1f 92       	push	r1
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    3c62:	ad b6       	in	r10, 0x3d	; 61
    3c64:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c66:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    3c6a:	83 ff       	sbrs	r24, 3
    3c6c:	04 c1       	rjmp	.+520    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    3c6e:	f7 01       	movw	r30, r14
    3c70:	80 81       	ld	r24, Z
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	20 91 45 04 	lds	r18, 0x0445
    3c78:	30 91 46 04 	lds	r19, 0x0446
    3c7c:	28 17       	cp	r18, r24
    3c7e:	39 07       	cpc	r19, r25
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <HID_Device_ProcessControlRequest+0x48>
    3c82:	f9 c0       	rjmp	.+498    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
	  return;

	switch (USB_ControlRequest.bRequest)
    3c84:	80 91 42 04 	lds	r24, 0x0442
    3c88:	83 30       	cpi	r24, 0x03	; 3
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <HID_Device_ProcessControlRequest+0x52>
    3c8c:	9b c0       	rjmp	.+310    	; 0x3dc4 <HID_Device_ProcessControlRequest+0x188>
    3c8e:	30 f4       	brcc	.+12     	; 0x3c9c <HID_Device_ProcessControlRequest+0x60>
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	71 f0       	breq	.+28     	; 0x3cb0 <HID_Device_ProcessControlRequest+0x74>
    3c94:	82 30       	cpi	r24, 0x02	; 2
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <HID_Device_ProcessControlRequest+0x5e>
    3c98:	d2 c0       	rjmp	.+420    	; 0x3e3e <HID_Device_ProcessControlRequest+0x202>
    3c9a:	ed c0       	rjmp	.+474    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3c9c:	8a 30       	cpi	r24, 0x0A	; 10
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <HID_Device_ProcessControlRequest+0x66>
    3ca0:	b6 c0       	rjmp	.+364    	; 0x3e0e <HID_Device_ProcessControlRequest+0x1d2>
    3ca2:	8b 30       	cpi	r24, 0x0B	; 11
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <HID_Device_ProcessControlRequest+0x6c>
    3ca6:	9f c0       	rjmp	.+318    	; 0x3de6 <HID_Device_ProcessControlRequest+0x1aa>
    3ca8:	89 30       	cpi	r24, 0x09	; 9
    3caa:	09 f0       	breq	.+2      	; 0x3cae <HID_Device_ProcessControlRequest+0x72>
    3cac:	e4 c0       	rjmp	.+456    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3cae:	4c c0       	rjmp	.+152    	; 0x3d48 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3cb0:	80 91 41 04 	lds	r24, 0x0441
    3cb4:	81 3a       	cpi	r24, 0xA1	; 161
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <HID_Device_ProcessControlRequest+0x7e>
    3cb8:	de c0       	rjmp	.+444    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3cba:	8d b6       	in	r8, 0x3d	; 61
    3cbc:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    3cbe:	1a 82       	std	Y+2, r1	; 0x02
    3cc0:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    3cc2:	80 91 43 04 	lds	r24, 0x0443
    3cc6:	10 91 44 04 	lds	r17, 0x0444
    3cca:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3ccc:	f7 01       	movw	r30, r14
    3cce:	40 85       	ldd	r20, Z+8	; 0x08
    3cd0:	50 e0       	ldi	r21, 0x00	; 0
    3cd2:	8d b7       	in	r24, 0x3d	; 61
    3cd4:	9e b7       	in	r25, 0x3e	; 62
    3cd6:	84 1b       	sub	r24, r20
    3cd8:	95 0b       	sbc	r25, r21
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	9e bf       	out	0x3e, r25	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	8d bf       	out	0x3d, r24	; 61
    3ce4:	ed b7       	in	r30, 0x3d	; 61
    3ce6:	fe b7       	in	r31, 0x3e	; 62
    3ce8:	31 96       	adiw	r30, 0x01	; 1
    3cea:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	70 e0       	ldi	r23, 0x00	; 0
    3cf0:	cf 01       	movw	r24, r30
    3cf2:	d2 d3       	rcall	.+1956   	; 0x4498 <memset>
    3cf4:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    3cf6:	41 0f       	add	r20, r17
    3cf8:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    3cfa:	0f 5f       	subi	r16, 0xFF	; 255
    3cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfe:	96 01       	movw	r18, r12
    3d00:	be 01       	movw	r22, r28
    3d02:	6d 5f       	subi	r22, 0xFD	; 253
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	c7 01       	movw	r24, r14
    3d08:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <CALLBACK_HID_Device_CreateHIDReport>
    3d0c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    3d0e:	86 81       	ldd	r24, Z+6	; 0x06
    3d10:	97 81       	ldd	r25, Z+7	; 0x07
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	21 f0       	breq	.+8      	; 0x3d1e <HID_Device_ProcessControlRequest+0xe2>
    3d16:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	b6 01       	movw	r22, r12
    3d1c:	b4 d3       	rcall	.+1896   	; 0x4486 <memcpy>
    3d1e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d22:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d26:	87 7f       	andi	r24, 0xF7	; 247
    3d28:	80 93 e8 00 	sts	0x00E8, r24
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	81 11       	cpse	r24, r1

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    3d30:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3d34:	69 81       	ldd	r22, Y+1	; 0x01
    3d36:	7a 81       	ldd	r23, Y+2	; 0x02
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    3d38:	c6 01       	movw	r24, r12
    3d3a:	f3 da       	rcall	.-2586   	; 0x3322 <Endpoint_Write_Control_Stream_LE>
    3d3c:	80 91 e8 00 	lds	r24, 0x00E8
    3d40:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3d42:	80 93 e8 00 	sts	0x00E8, r24
    3d46:	38 c0       	rjmp	.+112    	; 0x3db8 <HID_Device_ProcessControlRequest+0x17c>
    3d48:	80 91 41 04 	lds	r24, 0x0441
    3d4c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3d4e:	09 f0       	breq	.+2      	; 0x3d52 <HID_Device_ProcessControlRequest+0x116>
    3d50:	92 c0       	rjmp	.+292    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3d52:	8d b6       	in	r8, 0x3d	; 61
    3d54:	9e b6       	in	r9, 0x3e	; 62
    3d56:	00 91 47 04 	lds	r16, 0x0447
    3d5a:	10 91 48 04 	lds	r17, 0x0448
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    3d5e:	70 90 43 04 	lds	r7, 0x0443
    3d62:	60 90 44 04 	lds	r6, 0x0444
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    3d66:	8d b7       	in	r24, 0x3d	; 61
    3d68:	9e b7       	in	r25, 0x3e	; 62
    3d6a:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    3d6c:	91 0b       	sbc	r25, r17
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	9e bf       	out	0x3e, r25	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	8d bf       	out	0x3d, r24	; 61
    3d78:	ed b7       	in	r30, 0x3d	; 61
    3d7a:	fe b7       	in	r31, 0x3e	; 62
    3d7c:	31 96       	adiw	r30, 0x01	; 1
    3d7e:	6f 01       	movw	r12, r30
    3d80:	80 91 e8 00 	lds	r24, 0x00E8
    3d84:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d86:	80 93 e8 00 	sts	0x00E8, r24
    3d8a:	b8 01       	movw	r22, r16
    3d8c:	cf 01       	movw	r24, r30
    3d8e:	24 db       	rcall	.-2488   	; 0x33d8 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    3d90:	80 91 e8 00 	lds	r24, 0x00E8
    3d94:	8e 77       	andi	r24, 0x7E	; 126
    3d96:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3d9a:	21 e0       	ldi	r18, 0x01	; 1
    3d9c:	71 10       	cpse	r7, r1
    3d9e:	01 c0       	rjmp	.+2      	; 0x3da2 <HID_Device_ProcessControlRequest+0x166>
    3da0:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	02 1b       	sub	r16, r18
    3da6:	13 0b       	sbc	r17, r19
    3da8:	2c 0d       	add	r18, r12
    3daa:	3d 1d       	adc	r19, r13
    3dac:	4f ef       	ldi	r20, 0xFF	; 255
    3dae:	46 0d       	add	r20, r6
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    3db0:	67 2d       	mov	r22, r7
    3db2:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    3db4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	9e be       	out	0x3e, r9	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	8d be       	out	0x3d, r8	; 61
    3dc2:	59 c0       	rjmp	.+178    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3dc4:	80 91 41 04 	lds	r24, 0x0441
    3dc8:	81 3a       	cpi	r24, 0xA1	; 161
    3dca:	09 f0       	breq	.+2      	; 0x3dce <HID_Device_ProcessControlRequest+0x192>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3dcc:	54 c0       	rjmp	.+168    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3dce:	80 91 e8 00 	lds	r24, 0x00E8
    3dd2:	87 7f       	andi	r24, 0xF7	; 247
    3dd4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dd8:	80 91 e8 00 	lds	r24, 0x00E8
    3ddc:	80 ff       	sbrs	r24, 0
    3dde:	fc cf       	rjmp	.-8      	; 0x3dd8 <HID_Device_ProcessControlRequest+0x19c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3de0:	f7 01       	movw	r30, r14
    3de2:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    3de4:	40 c0       	rjmp	.+128    	; 0x3e66 <HID_Device_ProcessControlRequest+0x22a>
    3de6:	80 91 41 04 	lds	r24, 0x0441
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    3dea:	81 32       	cpi	r24, 0x21	; 33
    3dec:	09 f0       	breq	.+2      	; 0x3df0 <HID_Device_ProcessControlRequest+0x1b4>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3dee:	43 c0       	rjmp	.+134    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3df0:	80 91 e8 00 	lds	r24, 0x00E8
    3df4:	87 7f       	andi	r24, 0xF7	; 247
    3df6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dfa:	fa db       	rcall	.-2060   	; 0x35f0 <Endpoint_ClearStatusStage>
    3dfc:	90 91 43 04 	lds	r25, 0x0443
    3e00:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3e02:	91 11       	cpse	r25, r1
    3e04:	01 c0       	rjmp	.+2      	; 0x3e08 <HID_Device_ProcessControlRequest+0x1cc>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	f7 01       	movw	r30, r14
    3e0a:	81 87       	std	Z+9, r24	; 0x09
    3e0c:	34 c0       	rjmp	.+104    	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3e0e:	80 91 41 04 	lds	r24, 0x0441
    3e12:	81 32       	cpi	r24, 0x21	; 33
    3e14:	81 f5       	brne	.+96     	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3e16:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3e1a:	87 7f       	andi	r24, 0xF7	; 247
    3e1c:	80 93 e8 00 	sts	0x00E8, r24
    3e20:	e7 db       	rcall	.-2098   	; 0x35f0 <Endpoint_ClearStatusStage>
    3e22:	80 91 43 04 	lds	r24, 0x0443
    3e26:	90 91 44 04 	lds	r25, 0x0444
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3e2a:	88 27       	eor	r24, r24
    3e2c:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    3e2e:	96 95       	lsr	r25
    3e30:	87 95       	ror	r24
    3e32:	3a 95       	dec	r19
    3e34:	e1 f7       	brne	.-8      	; 0x3e2e <HID_Device_ProcessControlRequest+0x1f2>
    3e36:	f7 01       	movw	r30, r14
    3e38:	95 87       	std	Z+13, r25	; 0x0d
    3e3a:	84 87       	std	Z+12, r24	; 0x0c
    3e3c:	1c c0       	rjmp	.+56     	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3e3e:	80 91 41 04 	lds	r24, 0x0441
    3e42:	81 3a       	cpi	r24, 0xA1	; 161
    3e44:	c1 f4       	brne	.+48     	; 0x3e76 <HID_Device_ProcessControlRequest+0x23a>
    3e46:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3e4a:	87 7f       	andi	r24, 0xF7	; 247
    3e4c:	80 93 e8 00 	sts	0x00E8, r24
    3e50:	80 91 e8 00 	lds	r24, 0x00E8
    3e54:	80 ff       	sbrs	r24, 0
    3e56:	fc cf       	rjmp	.-8      	; 0x3e50 <HID_Device_ProcessControlRequest+0x214>
    3e58:	f7 01       	movw	r30, r14
    3e5a:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3e5c:	95 85       	ldd	r25, Z+13	; 0x0d
    3e5e:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    3e60:	87 95       	ror	r24
    3e62:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    3e64:	87 95       	ror	r24
    3e66:	80 93 f1 00 	sts	0x00F1, r24
    3e6a:	80 91 e8 00 	lds	r24, 0x00E8
    3e6e:	8e 77       	andi	r24, 0x7E	; 126
    3e70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3e74:	bd db       	rcall	.-2182   	; 0x35f0 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	be be       	out	0x3e, r11	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
			}

			break;
	}
}
    3e84:	0f 90       	pop	r0
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	1f 91       	pop	r17
    3e8c:	0f 91       	pop	r16
    3e8e:	ff 90       	pop	r15
    3e90:	ef 90       	pop	r14
    3e92:	df 90       	pop	r13
    3e94:	cf 90       	pop	r12
    3e96:	bf 90       	pop	r11
    3e98:	af 90       	pop	r10
    3e9a:	9f 90       	pop	r9
    3e9c:	8f 90       	pop	r8
    3e9e:	7f 90       	pop	r7
    3ea0:	6f 90       	pop	r6
    3ea2:	08 95       	ret

00003ea4 <HID_Device_ConfigureEndpoints>:
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	39 96       	adiw	r30, 0x09	; 9
    3ea8:	27 e0       	ldi	r18, 0x07	; 7
    3eaa:	df 01       	movw	r26, r30
    3eac:	1d 92       	st	X+, r1
    3eae:	2a 95       	dec	r18
    3eb0:	e9 f7       	brne	.-6      	; 0x3eac <HID_Device_ConfigureEndpoints+0x8>

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    3eb2:	21 e0       	ldi	r18, 0x01	; 1
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    3eb8:	24 ef       	ldi	r18, 0xF4	; 244
    3eba:	31 e0       	ldi	r19, 0x01	; 1
    3ebc:	35 87       	std	Z+13, r19	; 0x0d
    3ebe:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    3ec0:	23 e0       	ldi	r18, 0x03	; 3
    3ec2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	56 cb       	rjmp	.-2388   	; 0x3576 <Endpoint_ConfigureEndpointTable>

00003eca <HID_Device_USBTask>:
    3eca:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3ecc:	6f 92       	push	r6
    3ece:	7f 92       	push	r7
    3ed0:	8f 92       	push	r8
    3ed2:	9f 92       	push	r9
    3ed4:	af 92       	push	r10
    3ed6:	bf 92       	push	r11
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <HID_Device_USBTask+0x20>
    3eea:	1f 92       	push	r1
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    3ef2:	ad b6       	in	r10, 0x3d	; 61
    3ef4:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3ef6:	8e b3       	in	r24, 0x1e	; 30
    3ef8:	84 30       	cpi	r24, 0x04	; 4
    3efa:	09 f0       	breq	.+2      	; 0x3efe <HID_Device_USBTask+0x34>
    3efc:	8b c0       	rjmp	.+278    	; 0x4014 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3efe:	80 91 e4 00 	lds	r24, 0x00E4
    3f02:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    3f06:	f7 01       	movw	r30, r14
    3f08:	22 85       	ldd	r18, Z+10	; 0x0a
    3f0a:	33 85       	ldd	r19, Z+11	; 0x0b
    3f0c:	28 17       	cp	r18, r24
    3f0e:	39 07       	cpc	r19, r25
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <HID_Device_USBTask+0x4a>
    3f12:	80 c0       	rjmp	.+256    	; 0x4014 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3f14:	81 81       	ldd	r24, Z+1	; 0x01
    3f16:	8f 70       	andi	r24, 0x0F	; 15
    3f18:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3f1c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    3f20:	85 ff       	sbrs	r24, 5
    3f22:	78 c0       	rjmp	.+240    	; 0x4014 <HID_Device_USBTask+0x14a>
    3f24:	8d b6       	in	r8, 0x3d	; 61
    3f26:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3f28:	40 85       	ldd	r20, Z+8	; 0x08
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	8d b7       	in	r24, 0x3d	; 61
    3f2e:	9e b7       	in	r25, 0x3e	; 62
    3f30:	84 1b       	sub	r24, r20
    3f32:	95 0b       	sbc	r25, r21
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	9e bf       	out	0x3e, r25	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	8d bf       	out	0x3d, r24	; 61
    3f3e:	ed b7       	in	r30, 0x3d	; 61
    3f40:	fe b7       	in	r31, 0x3e	; 62
    3f42:	31 96       	adiw	r30, 0x01	; 1
    3f44:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    3f46:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    3f48:	1a 82       	std	Y+2, r1	; 0x02
    3f4a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	cf 01       	movw	r24, r30
    3f52:	a2 d2       	rcall	.+1348   	; 0x4498 <memset>
    3f54:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    3f56:	0f 5f       	subi	r16, 0xFF	; 255
    3f58:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5a:	96 01       	movw	r18, r12
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	be 01       	movw	r22, r28
    3f60:	6d 5f       	subi	r22, 0xFD	; 253
    3f62:	7f 4f       	sbci	r23, 0xFF	; 255
    3f64:	c7 01       	movw	r24, r14
    3f66:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <CALLBACK_HID_Device_CreateHIDReport>
    3f6a:	68 2e       	mov	r6, r24
    3f6c:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    3f6e:	84 85       	ldd	r24, Z+12	; 0x0c
    3f70:	95 85       	ldd	r25, Z+13	; 0x0d
    3f72:	89 2b       	or	r24, r25
    3f74:	41 f0       	breq	.+16     	; 0x3f86 <HID_Device_USBTask+0xbc>
    3f76:	21 e0       	ldi	r18, 0x01	; 1
    3f78:	86 85       	ldd	r24, Z+14	; 0x0e
    3f7a:	97 85       	ldd	r25, Z+15	; 0x0f
    3f7c:	89 2b       	or	r24, r25
    3f7e:	09 f0       	breq	.+2      	; 0x3f82 <HID_Device_USBTask+0xb8>
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	72 2e       	mov	r7, r18
    3f84:	01 c0       	rjmp	.+2      	; 0x3f88 <HID_Device_USBTask+0xbe>
    3f86:	71 2c       	mov	r7, r1
    3f88:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    3f8a:	06 81       	ldd	r16, Z+6	; 0x06
    3f8c:	17 81       	ldd	r17, Z+7	; 0x07
    3f8e:	01 15       	cp	r16, r1
    3f90:	11 05       	cpc	r17, r1
    3f92:	89 f0       	breq	.+34     	; 0x3fb6 <HID_Device_USBTask+0xec>
    3f94:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    3f96:	5a 81       	ldd	r21, Y+2	; 0x02
    3f98:	b8 01       	movw	r22, r16
    3f9a:	c6 01       	movw	r24, r12
    3f9c:	67 d2       	rcall	.+1230   	; 0x446c <memcmp>
    3f9e:	55 24       	eor	r5, r5
    3fa0:	53 94       	inc	r5
    3fa2:	89 2b       	or	r24, r25
    3fa4:	09 f4       	brne	.+2      	; 0x3fa8 <HID_Device_USBTask+0xde>
    3fa6:	51 2c       	mov	r5, r1
    3fa8:	f7 01       	movw	r30, r14
    3faa:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	b6 01       	movw	r22, r12
    3fb0:	c8 01       	movw	r24, r16
    3fb2:	69 d2       	rcall	.+1234   	; 0x4486 <memcpy>
    3fb4:	01 c0       	rjmp	.+2      	; 0x3fb8 <HID_Device_USBTask+0xee>
    3fb6:	51 2c       	mov	r5, r1
    3fb8:	29 81       	ldd	r18, Y+1	; 0x01
    3fba:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    3fbc:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    3fbe:	f1 f0       	breq	.+60     	; 0x3ffc <HID_Device_USBTask+0x132>
    3fc0:	61 10       	cpse	r6, r1
    3fc2:	04 c0       	rjmp	.+8      	; 0x3fcc <HID_Device_USBTask+0x102>
    3fc4:	51 10       	cpse	r5, r1
    3fc6:	02 c0       	rjmp	.+4      	; 0x3fcc <HID_Device_USBTask+0x102>
    3fc8:	70 fe       	sbrs	r7, 0
    3fca:	18 c0       	rjmp	.+48     	; 0x3ffc <HID_Device_USBTask+0x132>
    3fcc:	f7 01       	movw	r30, r14
    3fce:	84 85       	ldd	r24, Z+12	; 0x0c
    3fd0:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    3fd2:	97 87       	std	Z+15, r25	; 0x0f
    3fd4:	86 87       	std	Z+14, r24	; 0x0e
    3fd6:	81 81       	ldd	r24, Z+1	; 0x01
    3fd8:	8f 70       	andi	r24, 0x0F	; 15
    3fda:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fde:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe0:	81 11       	cpse	r24, r1
    3fe2:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    3fe6:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3fe8:	7a 81       	ldd	r23, Y+2	; 0x02
    3fea:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    3fec:	50 e0       	ldi	r21, 0x00	; 0
    3fee:	c6 01       	movw	r24, r12
    3ff0:	bc d8       	rcall	.-3720   	; 0x316a <Endpoint_Write_Stream_LE>
    3ff2:	80 91 e8 00 	lds	r24, 0x00E8
    3ff6:	8e 77       	andi	r24, 0x7E	; 126
    3ff8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ffc:	80 91 e4 00 	lds	r24, 0x00E4
    4000:	90 91 e5 00 	lds	r25, 0x00E5
    4004:	f7 01       	movw	r30, r14
    4006:	93 87       	std	Z+11, r25	; 0x0b
    4008:	82 87       	std	Z+10, r24	; 0x0a
    400a:	0f b6       	in	r0, 0x3f	; 63

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    400c:	f8 94       	cli
    400e:	9e be       	out	0x3e, r9	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	8d be       	out	0x3d, r8	; 61
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	f8 94       	cli
    4018:	be be       	out	0x3e, r11	; 62
    401a:	0f be       	out	0x3f, r0	; 63
	}
}
    401c:	ad be       	out	0x3d, r10	; 61
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	df 91       	pop	r29
    4026:	cf 91       	pop	r28
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	ff 90       	pop	r15
    402e:	ef 90       	pop	r14
    4030:	df 90       	pop	r13
    4032:	cf 90       	pop	r12
    4034:	bf 90       	pop	r11
    4036:	af 90       	pop	r10
    4038:	9f 90       	pop	r9
    403a:	8f 90       	pop	r8
    403c:	7f 90       	pop	r7
    403e:	6f 90       	pop	r6
    4040:	5f 90       	pop	r5
    4042:	08 95       	ret

00004044 <MS_Device_ProcessControlRequest>:
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	ec 01       	movw	r28, r24
    404a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    404e:	83 ff       	sbrs	r24, 3
    4050:	35 c0       	rjmp	.+106    	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    4052:	88 81       	ld	r24, Y
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	20 91 45 04 	lds	r18, 0x0445
    405a:	30 91 46 04 	lds	r19, 0x0446
    405e:	28 17       	cp	r18, r24
    4060:	39 07       	cpc	r19, r25
    4062:	61 f5       	brne	.+88     	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
	  return;

	switch (USB_ControlRequest.bRequest)
    4064:	80 91 42 04 	lds	r24, 0x0442
    4068:	8e 3f       	cpi	r24, 0xFE	; 254
    406a:	79 f0       	breq	.+30     	; 0x408a <MS_Device_ProcessControlRequest+0x46>
    406c:	8f 3f       	cpi	r24, 0xFF	; 255
    406e:	31 f5       	brne	.+76     	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4070:	80 91 41 04 	lds	r24, 0x0441
    4074:	81 32       	cpi	r24, 0x21	; 33
    4076:	11 f5       	brne	.+68     	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4078:	80 91 e8 00 	lds	r24, 0x00E8
    407c:	87 7f       	andi	r24, 0xF7	; 247
    407e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4082:	b6 da       	rcall	.-2708   	; 0x35f0 <Endpoint_ClearStatusStage>
    4084:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4086:	88 af       	std	Y+56, r24	; 0x38
    4088:	19 c0       	rjmp	.+50     	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
    408a:	80 91 41 04 	lds	r24, 0x0441
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    408e:	81 3a       	cpi	r24, 0xA1	; 161
    4090:	a9 f4       	brne	.+42     	; 0x40bc <MS_Device_ProcessControlRequest+0x78>
    4092:	80 91 e8 00 	lds	r24, 0x00E8
    4096:	87 7f       	andi	r24, 0xF7	; 247
    4098:	80 93 e8 00 	sts	0x00E8, r24
    409c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    40a0:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    40a2:	fc cf       	rjmp	.-8      	; 0x409c <MS_Device_ProcessControlRequest+0x58>
    40a4:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    40a6:	81 50       	subi	r24, 0x01	; 1
    40a8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    40ac:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    40b0:	8e 77       	andi	r24, 0x7E	; 126
    40b2:	80 93 e8 00 	sts	0x00E8, r24
    40b6:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    40b8:	cf 91       	pop	r28
    40ba:	9a ca       	rjmp	.-2764   	; 0x35f0 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
			}

			break;
	}
}
    40c0:	08 95       	ret

000040c2 <MS_Device_ConfigureEndpoints>:
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    40c6:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    40c8:	fc 01       	movw	r30, r24
    40ca:	3c 96       	adiw	r30, 0x0c	; 12
    40cc:	8d e2       	ldi	r24, 0x2D	; 45
    40ce:	df 01       	movw	r26, r30
    40d0:	1d 92       	st	X+, r1
    40d2:	8a 95       	dec	r24
    40d4:	e9 f7       	brne	.-6      	; 0x40d0 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    40d6:	82 e0       	ldi	r24, 0x02	; 2
    40d8:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    40da:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    40dc:	61 e0       	ldi	r22, 0x01	; 1
    40de:	ce 01       	movw	r24, r28
    40e0:	01 96       	adiw	r24, 0x01	; 1
    40e2:	49 da       	rcall	.-2926   	; 0x3576 <Endpoint_ConfigureEndpointTable>
    40e4:	88 23       	and	r24, r24
    40e6:	31 f0       	breq	.+12     	; 0x40f4 <MS_Device_ConfigureEndpoints+0x32>
    40e8:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    40ea:	ce 01       	movw	r24, r28
    40ec:	06 96       	adiw	r24, 0x06	; 6
    40ee:	df 91       	pop	r29
	  return false;

	return true;
}
    40f0:	cf 91       	pop	r28
    40f2:	41 ca       	rjmp	.-2942   	; 0x3576 <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	df 91       	pop	r29
	  return false;

	return true;
}
    40f8:	cf 91       	pop	r28
    40fa:	08 95       	ret

000040fc <MS_Device_USBTask>:
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4100:	0f 93       	push	r16
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	00 d0       	rcall	.+0      	; 0x410a <MS_Device_USBTask+0xe>
    410a:	cd b7       	in	r28, 0x3d	; 61
    410c:	de b7       	in	r29, 0x3e	; 62
    410e:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    4110:	8e b3       	in	r24, 0x1e	; 30
    4112:	84 30       	cpi	r24, 0x04	; 4
    4114:	09 f0       	breq	.+2      	; 0x4118 <MS_Device_USBTask+0x1c>
    4116:	01 c1       	rjmp	.+514    	; 0x431a <MS_Device_USBTask+0x21e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4118:	f8 01       	movw	r30, r16
    411a:	86 81       	ldd	r24, Z+6	; 0x06
    411c:	8f 70       	andi	r24, 0x0F	; 15
    411e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4122:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    4126:	82 ff       	sbrs	r24, 2
    4128:	be c0       	rjmp	.+380    	; 0x42a6 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    412a:	86 81       	ldd	r24, Z+6	; 0x06
    412c:	8f 70       	andi	r24, 0x0F	; 15
    412e:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    4132:	1a 82       	std	Y+2, r1	; 0x02
    4134:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4136:	78 01       	movw	r14, r16
    4138:	fc e0       	ldi	r31, 0x0C	; 12
    413a:	ef 0e       	add	r14, r31
    413c:	f1 1c       	adc	r15, r1
    413e:	ae 01       	movw	r20, r28
    4140:	4f 5f       	subi	r20, 0xFF	; 255
    4142:	5f 4f       	sbci	r21, 0xFF	; 255
    4144:	6f e0       	ldi	r22, 0x0F	; 15
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	c7 01       	movw	r24, r14
    414a:	a4 d8       	rcall	.-3768   	; 0x3294 <Endpoint_Read_Stream_LE>
    414c:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    414e:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4150:	21 f4       	brne	.+8      	; 0x415a <MS_Device_USBTask+0x5e>
    4152:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4154:	88 23       	and	r24, r24
    4156:	99 f3       	breq	.-26     	; 0x413e <MS_Device_USBTask+0x42>
    4158:	a6 c0       	rjmp	.+332    	; 0x42a6 <MS_Device_USBTask+0x1aa>
    415a:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    415c:	95 85       	ldd	r25, Z+13	; 0x0d
    415e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4160:	b7 85       	ldd	r27, Z+15	; 0x0f
    4162:	85 35       	cpi	r24, 0x55	; 85
    4164:	93 45       	sbci	r25, 0x53	; 83
    4166:	a2 44       	sbci	r26, 0x42	; 66
    4168:	b3 44       	sbci	r27, 0x43	; 67
    416a:	61 f4       	brne	.+24     	; 0x4184 <MS_Device_USBTask+0x88>
    416c:	f8 01       	movw	r30, r16
    416e:	91 8d       	ldd	r25, Z+25	; 0x19
    4170:	83 85       	ldd	r24, Z+11	; 0x0b
    4172:	98 17       	cp	r25, r24
    4174:	38 f4       	brcc	.+14     	; 0x4184 <MS_Device_USBTask+0x88>
    4176:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4178:	8f 71       	andi	r24, 0x1F	; 31
    417a:	21 f4       	brne	.+8      	; 0x4184 <MS_Device_USBTask+0x88>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    417c:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    417e:	81 50       	subi	r24, 0x01	; 1
    4180:	80 31       	cpi	r24, 0x10	; 16
    4182:	80 f0       	brcs	.+32     	; 0x41a4 <MS_Device_USBTask+0xa8>
    4184:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4188:	80 62       	ori	r24, 0x20	; 32
    418a:	80 93 eb 00 	sts	0x00EB, r24
    418e:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4190:	81 81       	ldd	r24, Z+1	; 0x01
    4192:	8f 70       	andi	r24, 0x0F	; 15
    4194:	80 93 e9 00 	sts	0x00E9, r24
    4198:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    419c:	80 62       	ori	r24, 0x20	; 32
    419e:	80 93 eb 00 	sts	0x00EB, r24
    41a2:	81 c0       	rjmp	.+258    	; 0x42a6 <MS_Device_USBTask+0x1aa>
    41a4:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    41a6:	19 82       	std	Y+1, r1	; 0x01
    41a8:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    41aa:	fb e1       	ldi	r31, 0x1B	; 27
    41ac:	ef 0e       	add	r14, r31
    41ae:	f1 1c       	adc	r15, r1
    41b0:	f8 01       	movw	r30, r16
    41b2:	62 8d       	ldd	r22, Z+26	; 0x1a
    41b4:	70 e0       	ldi	r23, 0x00	; 0
    41b6:	ae 01       	movw	r20, r28
    41b8:	4f 5f       	subi	r20, 0xFF	; 255
    41ba:	5f 4f       	sbci	r21, 0xFF	; 255
    41bc:	c7 01       	movw	r24, r14
    41be:	6a d8       	rcall	.-3884   	; 0x3294 <Endpoint_Read_Stream_LE>
    41c0:	85 30       	cpi	r24, 0x05	; 5
    41c2:	29 f4       	brne	.+10     	; 0x41ce <MS_Device_USBTask+0xd2>
    41c4:	f8 01       	movw	r30, r16
    41c6:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    41c8:	88 23       	and	r24, r24
    41ca:	91 f3       	breq	.-28     	; 0x41b0 <MS_Device_USBTask+0xb4>
    41cc:	6c c0       	rjmp	.+216    	; 0x42a6 <MS_Device_USBTask+0x1aa>
    41ce:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    41d2:	8b 77       	andi	r24, 0x7B	; 123
    41d4:	80 93 e8 00 	sts	0x00E8, r24
    41d8:	f8 01       	movw	r30, r16
    41da:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    41dc:	87 ff       	sbrs	r24, 7
    41de:	04 c0       	rjmp	.+8      	; 0x41e8 <MS_Device_USBTask+0xec>
    41e0:	81 81       	ldd	r24, Z+1	; 0x01
    41e2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    41e4:	80 93 e9 00 	sts	0x00E9, r24
    41e8:	c8 01       	movw	r24, r16
    41ea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    41ee:	91 e0       	ldi	r25, 0x01	; 1
    41f0:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    41f2:	f8 01       	movw	r30, r16
    41f4:	97 ab       	std	Z+55, r25	; 0x37
    41f6:	45 e5       	ldi	r20, 0x55	; 85
    41f8:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    41fa:	62 e4       	ldi	r22, 0x42	; 66
    41fc:	73 e5       	ldi	r23, 0x53	; 83
    41fe:	43 a7       	std	Z+43, r20	; 0x2b
    4200:	54 a7       	std	Z+44, r21	; 0x2c
    4202:	65 a7       	std	Z+45, r22	; 0x2d
    4204:	76 a7       	std	Z+46, r23	; 0x2e
    4206:	40 89       	ldd	r20, Z+16	; 0x10
    4208:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    420a:	62 89       	ldd	r22, Z+18	; 0x12
    420c:	73 89       	ldd	r23, Z+19	; 0x13
    420e:	47 a7       	std	Z+47, r20	; 0x2f
    4210:	50 ab       	std	Z+48, r21	; 0x30
    4212:	61 ab       	std	Z+49, r22	; 0x31
    4214:	72 ab       	std	Z+50, r23	; 0x32
    4216:	44 89       	ldd	r20, Z+20	; 0x14
    4218:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    421a:	66 89       	ldd	r22, Z+22	; 0x16
    421c:	77 89       	ldd	r23, Z+23	; 0x17
    421e:	43 ab       	std	Z+51, r20	; 0x33
    4220:	54 ab       	std	Z+52, r21	; 0x34
    4222:	65 ab       	std	Z+53, r22	; 0x35
    4224:	76 ab       	std	Z+54, r23	; 0x36
    4226:	81 11       	cpse	r24, r1
    4228:	09 c0       	rjmp	.+18     	; 0x423c <MS_Device_USBTask+0x140>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    422a:	45 2b       	or	r20, r21
    422c:	46 2b       	or	r20, r22
    422e:	47 2b       	or	r20, r23
    4230:	29 f0       	breq	.+10     	; 0x423c <MS_Device_USBTask+0x140>
    4232:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4236:	80 62       	ori	r24, 0x20	; 32
    4238:	80 93 eb 00 	sts	0x00EB, r24
    423c:	f8 01       	movw	r30, r16
    423e:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4240:	8f 70       	andi	r24, 0x0F	; 15
    4242:	80 93 e9 00 	sts	0x00E9, r24
    4246:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    424a:	f8 01       	movw	r30, r16
    424c:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    424e:	04 c0       	rjmp	.+8      	; 0x4258 <MS_Device_USBTask+0x15c>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    4250:	80 ad       	ldd	r24, Z+56	; 0x38
    4252:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4254:	c1 f3       	breq	.-16     	; 0x4246 <MS_Device_USBTask+0x14a>
    4256:	27 c0       	rjmp	.+78     	; 0x42a6 <MS_Device_USBTask+0x1aa>
    4258:	81 81       	ldd	r24, Z+1	; 0x01
    425a:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    425c:	80 93 e9 00 	sts	0x00E9, r24
    4260:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4264:	85 ff       	sbrs	r24, 5
    4266:	05 c0       	rjmp	.+10     	; 0x4272 <MS_Device_USBTask+0x176>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    4268:	f8 01       	movw	r30, r16
    426a:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    426c:	88 23       	and	r24, r24
    426e:	c1 f3       	breq	.-16     	; 0x4260 <MS_Device_USBTask+0x164>
    4270:	1a c0       	rjmp	.+52     	; 0x42a6 <MS_Device_USBTask+0x1aa>
    4272:	1a 82       	std	Y+2, r1	; 0x02
    4274:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
    4276:	78 01       	movw	r14, r16
    4278:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    427a:	ef 0e       	add	r14, r31
    427c:	f1 1c       	adc	r15, r1
    427e:	ae 01       	movw	r20, r28
    4280:	4f 5f       	subi	r20, 0xFF	; 255
    4282:	5f 4f       	sbci	r21, 0xFF	; 255
    4284:	6d e0       	ldi	r22, 0x0D	; 13
    4286:	70 e0       	ldi	r23, 0x00	; 0
    4288:	c7 01       	movw	r24, r14
    428a:	0e 94 b5 18 	call	0x316a	; 0x316a <Endpoint_Write_Stream_LE>
    428e:	85 30       	cpi	r24, 0x05	; 5
    4290:	29 f4       	brne	.+10     	; 0x429c <MS_Device_USBTask+0x1a0>
    4292:	f8 01       	movw	r30, r16
    4294:	80 ad       	ldd	r24, Z+56	; 0x38
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4296:	88 23       	and	r24, r24
    4298:	91 f3       	breq	.-28     	; 0x427e <MS_Device_USBTask+0x182>
    429a:	05 c0       	rjmp	.+10     	; 0x42a6 <MS_Device_USBTask+0x1aa>
    429c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    42a0:	8e 77       	andi	r24, 0x7E	; 126
    42a2:	80 93 e8 00 	sts	0x00E8, r24
    42a6:	f8 01       	movw	r30, r16
    42a8:	80 ad       	ldd	r24, Z+56	; 0x38

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    42aa:	88 23       	and	r24, r24
    42ac:	b1 f1       	breq	.+108    	; 0x431a <MS_Device_USBTask+0x21e>
    42ae:	26 81       	ldd	r18, Z+6	; 0x06
    42b0:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	ac 01       	movw	r20, r24
    42b8:	02 c0       	rjmp	.+4      	; 0x42be <MS_Device_USBTask+0x1c2>
    42ba:	44 0f       	add	r20, r20
    42bc:	55 1f       	adc	r21, r21
    42be:	2a 95       	dec	r18
    42c0:	e2 f7       	brpl	.-8      	; 0x42ba <MS_Device_USBTask+0x1be>
    42c2:	40 93 ea 00 	sts	0x00EA, r20
    42c6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    42ca:	21 81       	ldd	r18, Z+1	; 0x01
    42cc:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    42ce:	02 2e       	mov	r0, r18
    42d0:	01 c0       	rjmp	.+2      	; 0x42d4 <MS_Device_USBTask+0x1d8>
    42d2:	88 0f       	add	r24, r24
    42d4:	0a 94       	dec	r0
    42d6:	ea f7       	brpl	.-6      	; 0x42d2 <MS_Device_USBTask+0x1d6>
    42d8:	80 93 ea 00 	sts	0x00EA, r24
    42dc:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    42e0:	86 81       	ldd	r24, Z+6	; 0x06
    42e2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    42e4:	80 93 e9 00 	sts	0x00E9, r24
    42e8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    42ec:	80 61       	ori	r24, 0x10	; 16
    42ee:	80 93 eb 00 	sts	0x00EB, r24
    42f2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    42f6:	88 60       	ori	r24, 0x08	; 8
    42f8:	80 93 eb 00 	sts	0x00EB, r24
    42fc:	81 81       	ldd	r24, Z+1	; 0x01
    42fe:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4300:	80 93 e9 00 	sts	0x00E9, r24
    4304:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4308:	80 61       	ori	r24, 0x10	; 16
    430a:	80 93 eb 00 	sts	0x00EB, r24
    430e:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4312:	88 60       	ori	r24, 0x08	; 8
    4314:	80 93 eb 00 	sts	0x00EB, r24
    4318:	10 ae       	std	Z+56, r1	; 0x38
    431a:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    431c:	0f 90       	pop	r0
	}
}
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	1f 91       	pop	r17
    4324:	0f 91       	pop	r16
    4326:	ff 90       	pop	r15
    4328:	ef 90       	pop	r14
    432a:	08 95       	ret

0000432c <Temperature_GetTemperature>:
    432c:	80 e4       	ldi	r24, 0x40	; 64
    432e:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    4332:	80 91 7a 00 	lds	r24, 0x007A
    4336:	80 64       	ori	r24, 0x40	; 64
    4338:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    433c:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    4340:	84 ff       	sbrs	r24, 4
    4342:	fc cf       	rjmp	.-8      	; 0x433c <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    4344:	80 91 7a 00 	lds	r24, 0x007A
    4348:	80 61       	ori	r24, 0x10	; 16
    434a:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    434e:	40 91 78 00 	lds	r20, 0x0078
    4352:	50 91 79 00 	lds	r21, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    4356:	e1 e5       	ldi	r30, 0x51	; 81
    4358:	f1 e0       	ldi	r31, 0x01	; 1
    435a:	85 91       	lpm	r24, Z+
    435c:	94 91       	lpm	r25, Z
    435e:	84 17       	cp	r24, r20
    4360:	95 07       	cpc	r25, r21
    4362:	a0 f0       	brcs	.+40     	; 0x438c <Temperature_GetTemperature+0x60>
    4364:	21 e5       	ldi	r18, 0x51	; 81
    4366:	31 e0       	ldi	r19, 0x01	; 1
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	90 e0       	ldi	r25, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    436c:	f9 01       	movw	r30, r18
    436e:	65 91       	lpm	r22, Z+
    4370:	74 91       	lpm	r23, Z
    4372:	64 17       	cp	r22, r20
    4374:	75 07       	cpc	r23, r21
    4376:	10 f4       	brcc	.+4      	; 0x437c <Temperature_GetTemperature+0x50>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    4378:	85 51       	subi	r24, 0x15	; 21
    437a:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    437c:	01 96       	adiw	r24, 0x01	; 1
    437e:	2e 5f       	subi	r18, 0xFE	; 254
    4380:	3f 4f       	sbci	r19, 0xFF	; 255
    4382:	88 37       	cpi	r24, 0x78	; 120
    4384:	91 05       	cpc	r25, r1
    4386:	91 f7       	brne	.-28     	; 0x436c <Temperature_GetTemperature+0x40>
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
    4388:	82 e6       	ldi	r24, 0x62	; 98
}
    438a:	08 95       	ret
int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;
    438c:	8b ee       	ldi	r24, 0xEB	; 235
    438e:	08 95       	ret

00004390 <__muluhisi3>:
    4390:	4a d0       	rcall	.+148    	; 0x4426 <__umulhisi3>
    4392:	a5 9f       	mul	r26, r21
    4394:	90 0d       	add	r25, r0
    4396:	b4 9f       	mul	r27, r20
    4398:	90 0d       	add	r25, r0
    439a:	a4 9f       	mul	r26, r20
    439c:	80 0d       	add	r24, r0
    439e:	91 1d       	adc	r25, r1
    43a0:	11 24       	eor	r1, r1
    43a2:	08 95       	ret

000043a4 <__udivmodqi4>:
    43a4:	99 1b       	sub	r25, r25
    43a6:	79 e0       	ldi	r23, 0x09	; 9
    43a8:	04 c0       	rjmp	.+8      	; 0x43b2 <__udivmodqi4_ep>

000043aa <__udivmodqi4_loop>:
    43aa:	99 1f       	adc	r25, r25
    43ac:	96 17       	cp	r25, r22
    43ae:	08 f0       	brcs	.+2      	; 0x43b2 <__udivmodqi4_ep>
    43b0:	96 1b       	sub	r25, r22

000043b2 <__udivmodqi4_ep>:
    43b2:	88 1f       	adc	r24, r24
    43b4:	7a 95       	dec	r23
    43b6:	c9 f7       	brne	.-14     	; 0x43aa <__udivmodqi4_loop>
    43b8:	80 95       	com	r24
    43ba:	08 95       	ret

000043bc <__divmodhi4>:
    43bc:	97 fb       	bst	r25, 7
    43be:	07 2e       	mov	r0, r23
    43c0:	16 f4       	brtc	.+4      	; 0x43c6 <__divmodhi4+0xa>
    43c2:	00 94       	com	r0
    43c4:	06 d0       	rcall	.+12     	; 0x43d2 <__divmodhi4_neg1>
    43c6:	77 fd       	sbrc	r23, 7
    43c8:	08 d0       	rcall	.+16     	; 0x43da <__divmodhi4_neg2>
    43ca:	3c d0       	rcall	.+120    	; 0x4444 <__udivmodhi4>
    43cc:	07 fc       	sbrc	r0, 7
    43ce:	05 d0       	rcall	.+10     	; 0x43da <__divmodhi4_neg2>
    43d0:	3e f4       	brtc	.+14     	; 0x43e0 <__divmodhi4_exit>

000043d2 <__divmodhi4_neg1>:
    43d2:	90 95       	com	r25
    43d4:	81 95       	neg	r24
    43d6:	9f 4f       	sbci	r25, 0xFF	; 255
    43d8:	08 95       	ret

000043da <__divmodhi4_neg2>:
    43da:	70 95       	com	r23
    43dc:	61 95       	neg	r22
    43de:	7f 4f       	sbci	r23, 0xFF	; 255

000043e0 <__divmodhi4_exit>:
    43e0:	08 95       	ret

000043e2 <__udivmodsi4>:
    43e2:	a1 e2       	ldi	r26, 0x21	; 33
    43e4:	1a 2e       	mov	r1, r26
    43e6:	aa 1b       	sub	r26, r26
    43e8:	bb 1b       	sub	r27, r27
    43ea:	fd 01       	movw	r30, r26
    43ec:	0d c0       	rjmp	.+26     	; 0x4408 <__udivmodsi4_ep>

000043ee <__udivmodsi4_loop>:
    43ee:	aa 1f       	adc	r26, r26
    43f0:	bb 1f       	adc	r27, r27
    43f2:	ee 1f       	adc	r30, r30
    43f4:	ff 1f       	adc	r31, r31
    43f6:	a2 17       	cp	r26, r18
    43f8:	b3 07       	cpc	r27, r19
    43fa:	e4 07       	cpc	r30, r20
    43fc:	f5 07       	cpc	r31, r21
    43fe:	20 f0       	brcs	.+8      	; 0x4408 <__udivmodsi4_ep>
    4400:	a2 1b       	sub	r26, r18
    4402:	b3 0b       	sbc	r27, r19
    4404:	e4 0b       	sbc	r30, r20
    4406:	f5 0b       	sbc	r31, r21

00004408 <__udivmodsi4_ep>:
    4408:	66 1f       	adc	r22, r22
    440a:	77 1f       	adc	r23, r23
    440c:	88 1f       	adc	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	1a 94       	dec	r1
    4412:	69 f7       	brne	.-38     	; 0x43ee <__udivmodsi4_loop>
    4414:	60 95       	com	r22
    4416:	70 95       	com	r23
    4418:	80 95       	com	r24
    441a:	90 95       	com	r25
    441c:	9b 01       	movw	r18, r22
    441e:	ac 01       	movw	r20, r24
    4420:	bd 01       	movw	r22, r26
    4422:	cf 01       	movw	r24, r30
    4424:	08 95       	ret

00004426 <__umulhisi3>:
    4426:	a2 9f       	mul	r26, r18
    4428:	b0 01       	movw	r22, r0
    442a:	b3 9f       	mul	r27, r19
    442c:	c0 01       	movw	r24, r0
    442e:	a3 9f       	mul	r26, r19
    4430:	70 0d       	add	r23, r0
    4432:	81 1d       	adc	r24, r1
    4434:	11 24       	eor	r1, r1
    4436:	91 1d       	adc	r25, r1
    4438:	b2 9f       	mul	r27, r18
    443a:	70 0d       	add	r23, r0
    443c:	81 1d       	adc	r24, r1
    443e:	11 24       	eor	r1, r1
    4440:	91 1d       	adc	r25, r1
    4442:	08 95       	ret

00004444 <__udivmodhi4>:
    4444:	aa 1b       	sub	r26, r26
    4446:	bb 1b       	sub	r27, r27
    4448:	51 e1       	ldi	r21, 0x11	; 17
    444a:	07 c0       	rjmp	.+14     	; 0x445a <__udivmodhi4_ep>

0000444c <__udivmodhi4_loop>:
    444c:	aa 1f       	adc	r26, r26
    444e:	bb 1f       	adc	r27, r27
    4450:	a6 17       	cp	r26, r22
    4452:	b7 07       	cpc	r27, r23
    4454:	10 f0       	brcs	.+4      	; 0x445a <__udivmodhi4_ep>
    4456:	a6 1b       	sub	r26, r22
    4458:	b7 0b       	sbc	r27, r23

0000445a <__udivmodhi4_ep>:
    445a:	88 1f       	adc	r24, r24
    445c:	99 1f       	adc	r25, r25
    445e:	5a 95       	dec	r21
    4460:	a9 f7       	brne	.-22     	; 0x444c <__udivmodhi4_loop>
    4462:	80 95       	com	r24
    4464:	90 95       	com	r25
    4466:	bc 01       	movw	r22, r24
    4468:	cd 01       	movw	r24, r26
    446a:	08 95       	ret

0000446c <memcmp>:
    446c:	fb 01       	movw	r30, r22
    446e:	dc 01       	movw	r26, r24
    4470:	04 c0       	rjmp	.+8      	; 0x447a <memcmp+0xe>
    4472:	8d 91       	ld	r24, X+
    4474:	01 90       	ld	r0, Z+
    4476:	80 19       	sub	r24, r0
    4478:	21 f4       	brne	.+8      	; 0x4482 <memcmp+0x16>
    447a:	41 50       	subi	r20, 0x01	; 1
    447c:	50 40       	sbci	r21, 0x00	; 0
    447e:	c8 f7       	brcc	.-14     	; 0x4472 <memcmp+0x6>
    4480:	88 1b       	sub	r24, r24
    4482:	99 0b       	sbc	r25, r25
    4484:	08 95       	ret

00004486 <memcpy>:
    4486:	fb 01       	movw	r30, r22
    4488:	dc 01       	movw	r26, r24
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <memcpy+0xa>
    448c:	01 90       	ld	r0, Z+
    448e:	0d 92       	st	X+, r0
    4490:	41 50       	subi	r20, 0x01	; 1
    4492:	50 40       	sbci	r21, 0x00	; 0
    4494:	d8 f7       	brcc	.-10     	; 0x448c <memcpy+0x6>
    4496:	08 95       	ret

00004498 <memset>:
    4498:	dc 01       	movw	r26, r24
    449a:	01 c0       	rjmp	.+2      	; 0x449e <memset+0x6>
    449c:	6d 93       	st	X+, r22
    449e:	41 50       	subi	r20, 0x01	; 1
    44a0:	50 40       	sbci	r21, 0x00	; 0
    44a2:	e0 f7       	brcc	.-8      	; 0x449c <memset+0x4>
    44a4:	08 95       	ret

000044a6 <sprintf>:
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	2e 97       	sbiw	r28, 0x0e	; 14
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	0d 89       	ldd	r16, Y+21	; 0x15
    44c0:	1e 89       	ldd	r17, Y+22	; 0x16
    44c2:	86 e0       	ldi	r24, 0x06	; 6
    44c4:	8c 83       	std	Y+4, r24	; 0x04
    44c6:	1a 83       	std	Y+2, r17	; 0x02
    44c8:	09 83       	std	Y+1, r16	; 0x01
    44ca:	8f ef       	ldi	r24, 0xFF	; 255
    44cc:	9f e7       	ldi	r25, 0x7F	; 127
    44ce:	9e 83       	std	Y+6, r25	; 0x06
    44d0:	8d 83       	std	Y+5, r24	; 0x05
    44d2:	ae 01       	movw	r20, r28
    44d4:	47 5e       	subi	r20, 0xE7	; 231
    44d6:	5f 4f       	sbci	r21, 0xFF	; 255
    44d8:	6f 89       	ldd	r22, Y+23	; 0x17
    44da:	78 8d       	ldd	r23, Y+24	; 0x18
    44dc:	ce 01       	movw	r24, r28
    44de:	01 96       	adiw	r24, 0x01	; 1
    44e0:	10 d0       	rcall	.+32     	; 0x4502 <vfprintf>
    44e2:	ef 81       	ldd	r30, Y+7	; 0x07
    44e4:	f8 85       	ldd	r31, Y+8	; 0x08
    44e6:	e0 0f       	add	r30, r16
    44e8:	f1 1f       	adc	r31, r17
    44ea:	10 82       	st	Z, r1
    44ec:	2e 96       	adiw	r28, 0x0e	; 14
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	1f 91       	pop	r17
    44fe:	0f 91       	pop	r16
    4500:	08 95       	ret

00004502 <vfprintf>:
    4502:	2f 92       	push	r2
    4504:	3f 92       	push	r3
    4506:	4f 92       	push	r4
    4508:	5f 92       	push	r5
    450a:	6f 92       	push	r6
    450c:	7f 92       	push	r7
    450e:	8f 92       	push	r8
    4510:	9f 92       	push	r9
    4512:	af 92       	push	r10
    4514:	bf 92       	push	r11
    4516:	cf 92       	push	r12
    4518:	df 92       	push	r13
    451a:	ef 92       	push	r14
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	2c 97       	sbiw	r28, 0x0c	; 12
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	7c 01       	movw	r14, r24
    4538:	6b 01       	movw	r12, r22
    453a:	8a 01       	movw	r16, r20
    453c:	fc 01       	movw	r30, r24
    453e:	17 82       	std	Z+7, r1	; 0x07
    4540:	16 82       	std	Z+6, r1	; 0x06
    4542:	83 81       	ldd	r24, Z+3	; 0x03
    4544:	81 ff       	sbrs	r24, 1
    4546:	b0 c1       	rjmp	.+864    	; 0x48a8 <vfprintf+0x3a6>
    4548:	ce 01       	movw	r24, r28
    454a:	01 96       	adiw	r24, 0x01	; 1
    454c:	4c 01       	movw	r8, r24
    454e:	f7 01       	movw	r30, r14
    4550:	93 81       	ldd	r25, Z+3	; 0x03
    4552:	f6 01       	movw	r30, r12
    4554:	93 fd       	sbrc	r25, 3
    4556:	85 91       	lpm	r24, Z+
    4558:	93 ff       	sbrs	r25, 3
    455a:	81 91       	ld	r24, Z+
    455c:	6f 01       	movw	r12, r30
    455e:	88 23       	and	r24, r24
    4560:	09 f4       	brne	.+2      	; 0x4564 <vfprintf+0x62>
    4562:	9e c1       	rjmp	.+828    	; 0x48a0 <vfprintf+0x39e>
    4564:	85 32       	cpi	r24, 0x25	; 37
    4566:	39 f4       	brne	.+14     	; 0x4576 <vfprintf+0x74>
    4568:	93 fd       	sbrc	r25, 3
    456a:	85 91       	lpm	r24, Z+
    456c:	93 ff       	sbrs	r25, 3
    456e:	81 91       	ld	r24, Z+
    4570:	6f 01       	movw	r12, r30
    4572:	85 32       	cpi	r24, 0x25	; 37
    4574:	21 f4       	brne	.+8      	; 0x457e <vfprintf+0x7c>
    4576:	b7 01       	movw	r22, r14
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	e1 d1       	rcall	.+962    	; 0x493e <fputc>
    457c:	e8 cf       	rjmp	.-48     	; 0x454e <vfprintf+0x4c>
    457e:	51 2c       	mov	r5, r1
    4580:	31 2c       	mov	r3, r1
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	20 32       	cpi	r18, 0x20	; 32
    4586:	a0 f4       	brcc	.+40     	; 0x45b0 <vfprintf+0xae>
    4588:	8b 32       	cpi	r24, 0x2B	; 43
    458a:	69 f0       	breq	.+26     	; 0x45a6 <vfprintf+0xa4>
    458c:	30 f4       	brcc	.+12     	; 0x459a <vfprintf+0x98>
    458e:	80 32       	cpi	r24, 0x20	; 32
    4590:	59 f0       	breq	.+22     	; 0x45a8 <vfprintf+0xa6>
    4592:	83 32       	cpi	r24, 0x23	; 35
    4594:	69 f4       	brne	.+26     	; 0x45b0 <vfprintf+0xae>
    4596:	20 61       	ori	r18, 0x10	; 16
    4598:	2c c0       	rjmp	.+88     	; 0x45f2 <vfprintf+0xf0>
    459a:	8d 32       	cpi	r24, 0x2D	; 45
    459c:	39 f0       	breq	.+14     	; 0x45ac <vfprintf+0xaa>
    459e:	80 33       	cpi	r24, 0x30	; 48
    45a0:	39 f4       	brne	.+14     	; 0x45b0 <vfprintf+0xae>
    45a2:	21 60       	ori	r18, 0x01	; 1
    45a4:	26 c0       	rjmp	.+76     	; 0x45f2 <vfprintf+0xf0>
    45a6:	22 60       	ori	r18, 0x02	; 2
    45a8:	24 60       	ori	r18, 0x04	; 4
    45aa:	23 c0       	rjmp	.+70     	; 0x45f2 <vfprintf+0xf0>
    45ac:	28 60       	ori	r18, 0x08	; 8
    45ae:	21 c0       	rjmp	.+66     	; 0x45f2 <vfprintf+0xf0>
    45b0:	27 fd       	sbrc	r18, 7
    45b2:	27 c0       	rjmp	.+78     	; 0x4602 <vfprintf+0x100>
    45b4:	30 ed       	ldi	r19, 0xD0	; 208
    45b6:	38 0f       	add	r19, r24
    45b8:	3a 30       	cpi	r19, 0x0A	; 10
    45ba:	78 f4       	brcc	.+30     	; 0x45da <vfprintf+0xd8>
    45bc:	26 ff       	sbrs	r18, 6
    45be:	06 c0       	rjmp	.+12     	; 0x45cc <vfprintf+0xca>
    45c0:	fa e0       	ldi	r31, 0x0A	; 10
    45c2:	5f 9e       	mul	r5, r31
    45c4:	30 0d       	add	r19, r0
    45c6:	11 24       	eor	r1, r1
    45c8:	53 2e       	mov	r5, r19
    45ca:	13 c0       	rjmp	.+38     	; 0x45f2 <vfprintf+0xf0>
    45cc:	8a e0       	ldi	r24, 0x0A	; 10
    45ce:	38 9e       	mul	r3, r24
    45d0:	30 0d       	add	r19, r0
    45d2:	11 24       	eor	r1, r1
    45d4:	33 2e       	mov	r3, r19
    45d6:	20 62       	ori	r18, 0x20	; 32
    45d8:	0c c0       	rjmp	.+24     	; 0x45f2 <vfprintf+0xf0>
    45da:	8e 32       	cpi	r24, 0x2E	; 46
    45dc:	21 f4       	brne	.+8      	; 0x45e6 <vfprintf+0xe4>
    45de:	26 fd       	sbrc	r18, 6
    45e0:	5f c1       	rjmp	.+702    	; 0x48a0 <vfprintf+0x39e>
    45e2:	20 64       	ori	r18, 0x40	; 64
    45e4:	06 c0       	rjmp	.+12     	; 0x45f2 <vfprintf+0xf0>
    45e6:	8c 36       	cpi	r24, 0x6C	; 108
    45e8:	11 f4       	brne	.+4      	; 0x45ee <vfprintf+0xec>
    45ea:	20 68       	ori	r18, 0x80	; 128
    45ec:	02 c0       	rjmp	.+4      	; 0x45f2 <vfprintf+0xf0>
    45ee:	88 36       	cpi	r24, 0x68	; 104
    45f0:	41 f4       	brne	.+16     	; 0x4602 <vfprintf+0x100>
    45f2:	f6 01       	movw	r30, r12
    45f4:	93 fd       	sbrc	r25, 3
    45f6:	85 91       	lpm	r24, Z+
    45f8:	93 ff       	sbrs	r25, 3
    45fa:	81 91       	ld	r24, Z+
    45fc:	6f 01       	movw	r12, r30
    45fe:	81 11       	cpse	r24, r1
    4600:	c1 cf       	rjmp	.-126    	; 0x4584 <vfprintf+0x82>
    4602:	98 2f       	mov	r25, r24
    4604:	9f 7d       	andi	r25, 0xDF	; 223
    4606:	95 54       	subi	r25, 0x45	; 69
    4608:	93 30       	cpi	r25, 0x03	; 3
    460a:	28 f4       	brcc	.+10     	; 0x4616 <vfprintf+0x114>
    460c:	0c 5f       	subi	r16, 0xFC	; 252
    460e:	1f 4f       	sbci	r17, 0xFF	; 255
    4610:	ff e3       	ldi	r31, 0x3F	; 63
    4612:	f9 83       	std	Y+1, r31	; 0x01
    4614:	0d c0       	rjmp	.+26     	; 0x4630 <vfprintf+0x12e>
    4616:	83 36       	cpi	r24, 0x63	; 99
    4618:	31 f0       	breq	.+12     	; 0x4626 <vfprintf+0x124>
    461a:	83 37       	cpi	r24, 0x73	; 115
    461c:	71 f0       	breq	.+28     	; 0x463a <vfprintf+0x138>
    461e:	83 35       	cpi	r24, 0x53	; 83
    4620:	09 f0       	breq	.+2      	; 0x4624 <vfprintf+0x122>
    4622:	57 c0       	rjmp	.+174    	; 0x46d2 <vfprintf+0x1d0>
    4624:	21 c0       	rjmp	.+66     	; 0x4668 <vfprintf+0x166>
    4626:	f8 01       	movw	r30, r16
    4628:	80 81       	ld	r24, Z
    462a:	89 83       	std	Y+1, r24	; 0x01
    462c:	0e 5f       	subi	r16, 0xFE	; 254
    462e:	1f 4f       	sbci	r17, 0xFF	; 255
    4630:	44 24       	eor	r4, r4
    4632:	43 94       	inc	r4
    4634:	51 2c       	mov	r5, r1
    4636:	54 01       	movw	r10, r8
    4638:	14 c0       	rjmp	.+40     	; 0x4662 <vfprintf+0x160>
    463a:	38 01       	movw	r6, r16
    463c:	f2 e0       	ldi	r31, 0x02	; 2
    463e:	6f 0e       	add	r6, r31
    4640:	71 1c       	adc	r7, r1
    4642:	f8 01       	movw	r30, r16
    4644:	a0 80       	ld	r10, Z
    4646:	b1 80       	ldd	r11, Z+1	; 0x01
    4648:	26 ff       	sbrs	r18, 6
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <vfprintf+0x150>
    464c:	65 2d       	mov	r22, r5
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <vfprintf+0x154>
    4652:	6f ef       	ldi	r22, 0xFF	; 255
    4654:	7f ef       	ldi	r23, 0xFF	; 255
    4656:	c5 01       	movw	r24, r10
    4658:	2c 87       	std	Y+12, r18	; 0x0c
    465a:	66 d1       	rcall	.+716    	; 0x4928 <strnlen>
    465c:	2c 01       	movw	r4, r24
    465e:	83 01       	movw	r16, r6
    4660:	2c 85       	ldd	r18, Y+12	; 0x0c
    4662:	2f 77       	andi	r18, 0x7F	; 127
    4664:	22 2e       	mov	r2, r18
    4666:	16 c0       	rjmp	.+44     	; 0x4694 <vfprintf+0x192>
    4668:	38 01       	movw	r6, r16
    466a:	f2 e0       	ldi	r31, 0x02	; 2
    466c:	6f 0e       	add	r6, r31
    466e:	71 1c       	adc	r7, r1
    4670:	f8 01       	movw	r30, r16
    4672:	a0 80       	ld	r10, Z
    4674:	b1 80       	ldd	r11, Z+1	; 0x01
    4676:	26 ff       	sbrs	r18, 6
    4678:	03 c0       	rjmp	.+6      	; 0x4680 <vfprintf+0x17e>
    467a:	65 2d       	mov	r22, r5
    467c:	70 e0       	ldi	r23, 0x00	; 0
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <vfprintf+0x182>
    4680:	6f ef       	ldi	r22, 0xFF	; 255
    4682:	7f ef       	ldi	r23, 0xFF	; 255
    4684:	c5 01       	movw	r24, r10
    4686:	2c 87       	std	Y+12, r18	; 0x0c
    4688:	44 d1       	rcall	.+648    	; 0x4912 <strnlen_P>
    468a:	2c 01       	movw	r4, r24
    468c:	2c 85       	ldd	r18, Y+12	; 0x0c
    468e:	20 68       	ori	r18, 0x80	; 128
    4690:	22 2e       	mov	r2, r18
    4692:	83 01       	movw	r16, r6
    4694:	23 fc       	sbrc	r2, 3
    4696:	19 c0       	rjmp	.+50     	; 0x46ca <vfprintf+0x1c8>
    4698:	83 2d       	mov	r24, r3
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	48 16       	cp	r4, r24
    469e:	59 06       	cpc	r5, r25
    46a0:	a0 f4       	brcc	.+40     	; 0x46ca <vfprintf+0x1c8>
    46a2:	b7 01       	movw	r22, r14
    46a4:	80 e2       	ldi	r24, 0x20	; 32
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	4a d1       	rcall	.+660    	; 0x493e <fputc>
    46aa:	3a 94       	dec	r3
    46ac:	f5 cf       	rjmp	.-22     	; 0x4698 <vfprintf+0x196>
    46ae:	f5 01       	movw	r30, r10
    46b0:	27 fc       	sbrc	r2, 7
    46b2:	85 91       	lpm	r24, Z+
    46b4:	27 fe       	sbrs	r2, 7
    46b6:	81 91       	ld	r24, Z+
    46b8:	5f 01       	movw	r10, r30
    46ba:	b7 01       	movw	r22, r14
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	3f d1       	rcall	.+638    	; 0x493e <fputc>
    46c0:	31 10       	cpse	r3, r1
    46c2:	3a 94       	dec	r3
    46c4:	f1 e0       	ldi	r31, 0x01	; 1
    46c6:	4f 1a       	sub	r4, r31
    46c8:	51 08       	sbc	r5, r1
    46ca:	41 14       	cp	r4, r1
    46cc:	51 04       	cpc	r5, r1
    46ce:	79 f7       	brne	.-34     	; 0x46ae <vfprintf+0x1ac>
    46d0:	de c0       	rjmp	.+444    	; 0x488e <vfprintf+0x38c>
    46d2:	84 36       	cpi	r24, 0x64	; 100
    46d4:	11 f0       	breq	.+4      	; 0x46da <vfprintf+0x1d8>
    46d6:	89 36       	cpi	r24, 0x69	; 105
    46d8:	31 f5       	brne	.+76     	; 0x4726 <vfprintf+0x224>
    46da:	f8 01       	movw	r30, r16
    46dc:	27 ff       	sbrs	r18, 7
    46de:	07 c0       	rjmp	.+14     	; 0x46ee <vfprintf+0x1ec>
    46e0:	60 81       	ld	r22, Z
    46e2:	71 81       	ldd	r23, Z+1	; 0x01
    46e4:	82 81       	ldd	r24, Z+2	; 0x02
    46e6:	93 81       	ldd	r25, Z+3	; 0x03
    46e8:	0c 5f       	subi	r16, 0xFC	; 252
    46ea:	1f 4f       	sbci	r17, 0xFF	; 255
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <vfprintf+0x1fc>
    46ee:	60 81       	ld	r22, Z
    46f0:	71 81       	ldd	r23, Z+1	; 0x01
    46f2:	88 27       	eor	r24, r24
    46f4:	77 fd       	sbrc	r23, 7
    46f6:	80 95       	com	r24
    46f8:	98 2f       	mov	r25, r24
    46fa:	0e 5f       	subi	r16, 0xFE	; 254
    46fc:	1f 4f       	sbci	r17, 0xFF	; 255
    46fe:	2f 76       	andi	r18, 0x6F	; 111
    4700:	b2 2e       	mov	r11, r18
    4702:	97 ff       	sbrs	r25, 7
    4704:	09 c0       	rjmp	.+18     	; 0x4718 <vfprintf+0x216>
    4706:	90 95       	com	r25
    4708:	80 95       	com	r24
    470a:	70 95       	com	r23
    470c:	61 95       	neg	r22
    470e:	7f 4f       	sbci	r23, 0xFF	; 255
    4710:	8f 4f       	sbci	r24, 0xFF	; 255
    4712:	9f 4f       	sbci	r25, 0xFF	; 255
    4714:	20 68       	ori	r18, 0x80	; 128
    4716:	b2 2e       	mov	r11, r18
    4718:	2a e0       	ldi	r18, 0x0A	; 10
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	a4 01       	movw	r20, r8
    471e:	41 d1       	rcall	.+642    	; 0x49a2 <__ultoa_invert>
    4720:	a8 2e       	mov	r10, r24
    4722:	a8 18       	sub	r10, r8
    4724:	43 c0       	rjmp	.+134    	; 0x47ac <vfprintf+0x2aa>
    4726:	85 37       	cpi	r24, 0x75	; 117
    4728:	29 f4       	brne	.+10     	; 0x4734 <vfprintf+0x232>
    472a:	2f 7e       	andi	r18, 0xEF	; 239
    472c:	b2 2e       	mov	r11, r18
    472e:	2a e0       	ldi	r18, 0x0A	; 10
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	25 c0       	rjmp	.+74     	; 0x477e <vfprintf+0x27c>
    4734:	f2 2f       	mov	r31, r18
    4736:	f9 7f       	andi	r31, 0xF9	; 249
    4738:	bf 2e       	mov	r11, r31
    473a:	8f 36       	cpi	r24, 0x6F	; 111
    473c:	c1 f0       	breq	.+48     	; 0x476e <vfprintf+0x26c>
    473e:	18 f4       	brcc	.+6      	; 0x4746 <vfprintf+0x244>
    4740:	88 35       	cpi	r24, 0x58	; 88
    4742:	79 f0       	breq	.+30     	; 0x4762 <vfprintf+0x260>
    4744:	ad c0       	rjmp	.+346    	; 0x48a0 <vfprintf+0x39e>
    4746:	80 37       	cpi	r24, 0x70	; 112
    4748:	19 f0       	breq	.+6      	; 0x4750 <vfprintf+0x24e>
    474a:	88 37       	cpi	r24, 0x78	; 120
    474c:	21 f0       	breq	.+8      	; 0x4756 <vfprintf+0x254>
    474e:	a8 c0       	rjmp	.+336    	; 0x48a0 <vfprintf+0x39e>
    4750:	2f 2f       	mov	r18, r31
    4752:	20 61       	ori	r18, 0x10	; 16
    4754:	b2 2e       	mov	r11, r18
    4756:	b4 fe       	sbrs	r11, 4
    4758:	0d c0       	rjmp	.+26     	; 0x4774 <vfprintf+0x272>
    475a:	8b 2d       	mov	r24, r11
    475c:	84 60       	ori	r24, 0x04	; 4
    475e:	b8 2e       	mov	r11, r24
    4760:	09 c0       	rjmp	.+18     	; 0x4774 <vfprintf+0x272>
    4762:	24 ff       	sbrs	r18, 4
    4764:	0a c0       	rjmp	.+20     	; 0x477a <vfprintf+0x278>
    4766:	9f 2f       	mov	r25, r31
    4768:	96 60       	ori	r25, 0x06	; 6
    476a:	b9 2e       	mov	r11, r25
    476c:	06 c0       	rjmp	.+12     	; 0x477a <vfprintf+0x278>
    476e:	28 e0       	ldi	r18, 0x08	; 8
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	05 c0       	rjmp	.+10     	; 0x477e <vfprintf+0x27c>
    4774:	20 e1       	ldi	r18, 0x10	; 16
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	02 c0       	rjmp	.+4      	; 0x477e <vfprintf+0x27c>
    477a:	20 e1       	ldi	r18, 0x10	; 16
    477c:	32 e0       	ldi	r19, 0x02	; 2
    477e:	f8 01       	movw	r30, r16
    4780:	b7 fe       	sbrs	r11, 7
    4782:	07 c0       	rjmp	.+14     	; 0x4792 <vfprintf+0x290>
    4784:	60 81       	ld	r22, Z
    4786:	71 81       	ldd	r23, Z+1	; 0x01
    4788:	82 81       	ldd	r24, Z+2	; 0x02
    478a:	93 81       	ldd	r25, Z+3	; 0x03
    478c:	0c 5f       	subi	r16, 0xFC	; 252
    478e:	1f 4f       	sbci	r17, 0xFF	; 255
    4790:	06 c0       	rjmp	.+12     	; 0x479e <vfprintf+0x29c>
    4792:	60 81       	ld	r22, Z
    4794:	71 81       	ldd	r23, Z+1	; 0x01
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	0e 5f       	subi	r16, 0xFE	; 254
    479c:	1f 4f       	sbci	r17, 0xFF	; 255
    479e:	a4 01       	movw	r20, r8
    47a0:	00 d1       	rcall	.+512    	; 0x49a2 <__ultoa_invert>
    47a2:	a8 2e       	mov	r10, r24
    47a4:	a8 18       	sub	r10, r8
    47a6:	fb 2d       	mov	r31, r11
    47a8:	ff 77       	andi	r31, 0x7F	; 127
    47aa:	bf 2e       	mov	r11, r31
    47ac:	b6 fe       	sbrs	r11, 6
    47ae:	0b c0       	rjmp	.+22     	; 0x47c6 <vfprintf+0x2c4>
    47b0:	2b 2d       	mov	r18, r11
    47b2:	2e 7f       	andi	r18, 0xFE	; 254
    47b4:	a5 14       	cp	r10, r5
    47b6:	50 f4       	brcc	.+20     	; 0x47cc <vfprintf+0x2ca>
    47b8:	b4 fe       	sbrs	r11, 4
    47ba:	0a c0       	rjmp	.+20     	; 0x47d0 <vfprintf+0x2ce>
    47bc:	b2 fc       	sbrc	r11, 2
    47be:	08 c0       	rjmp	.+16     	; 0x47d0 <vfprintf+0x2ce>
    47c0:	2b 2d       	mov	r18, r11
    47c2:	2e 7e       	andi	r18, 0xEE	; 238
    47c4:	05 c0       	rjmp	.+10     	; 0x47d0 <vfprintf+0x2ce>
    47c6:	7a 2c       	mov	r7, r10
    47c8:	2b 2d       	mov	r18, r11
    47ca:	03 c0       	rjmp	.+6      	; 0x47d2 <vfprintf+0x2d0>
    47cc:	7a 2c       	mov	r7, r10
    47ce:	01 c0       	rjmp	.+2      	; 0x47d2 <vfprintf+0x2d0>
    47d0:	75 2c       	mov	r7, r5
    47d2:	24 ff       	sbrs	r18, 4
    47d4:	0d c0       	rjmp	.+26     	; 0x47f0 <vfprintf+0x2ee>
    47d6:	fe 01       	movw	r30, r28
    47d8:	ea 0d       	add	r30, r10
    47da:	f1 1d       	adc	r31, r1
    47dc:	80 81       	ld	r24, Z
    47de:	80 33       	cpi	r24, 0x30	; 48
    47e0:	11 f4       	brne	.+4      	; 0x47e6 <vfprintf+0x2e4>
    47e2:	29 7e       	andi	r18, 0xE9	; 233
    47e4:	09 c0       	rjmp	.+18     	; 0x47f8 <vfprintf+0x2f6>
    47e6:	22 ff       	sbrs	r18, 2
    47e8:	06 c0       	rjmp	.+12     	; 0x47f6 <vfprintf+0x2f4>
    47ea:	73 94       	inc	r7
    47ec:	73 94       	inc	r7
    47ee:	04 c0       	rjmp	.+8      	; 0x47f8 <vfprintf+0x2f6>
    47f0:	82 2f       	mov	r24, r18
    47f2:	86 78       	andi	r24, 0x86	; 134
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <vfprintf+0x2f6>
    47f6:	73 94       	inc	r7
    47f8:	23 fd       	sbrc	r18, 3
    47fa:	12 c0       	rjmp	.+36     	; 0x4820 <vfprintf+0x31e>
    47fc:	20 ff       	sbrs	r18, 0
    47fe:	06 c0       	rjmp	.+12     	; 0x480c <vfprintf+0x30a>
    4800:	5a 2c       	mov	r5, r10
    4802:	73 14       	cp	r7, r3
    4804:	18 f4       	brcc	.+6      	; 0x480c <vfprintf+0x30a>
    4806:	53 0c       	add	r5, r3
    4808:	57 18       	sub	r5, r7
    480a:	73 2c       	mov	r7, r3
    480c:	73 14       	cp	r7, r3
    480e:	60 f4       	brcc	.+24     	; 0x4828 <vfprintf+0x326>
    4810:	b7 01       	movw	r22, r14
    4812:	80 e2       	ldi	r24, 0x20	; 32
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	2c 87       	std	Y+12, r18	; 0x0c
    4818:	92 d0       	rcall	.+292    	; 0x493e <fputc>
    481a:	73 94       	inc	r7
    481c:	2c 85       	ldd	r18, Y+12	; 0x0c
    481e:	f6 cf       	rjmp	.-20     	; 0x480c <vfprintf+0x30a>
    4820:	73 14       	cp	r7, r3
    4822:	10 f4       	brcc	.+4      	; 0x4828 <vfprintf+0x326>
    4824:	37 18       	sub	r3, r7
    4826:	01 c0       	rjmp	.+2      	; 0x482a <vfprintf+0x328>
    4828:	31 2c       	mov	r3, r1
    482a:	24 ff       	sbrs	r18, 4
    482c:	11 c0       	rjmp	.+34     	; 0x4850 <vfprintf+0x34e>
    482e:	b7 01       	movw	r22, r14
    4830:	80 e3       	ldi	r24, 0x30	; 48
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	2c 87       	std	Y+12, r18	; 0x0c
    4836:	83 d0       	rcall	.+262    	; 0x493e <fputc>
    4838:	2c 85       	ldd	r18, Y+12	; 0x0c
    483a:	22 ff       	sbrs	r18, 2
    483c:	16 c0       	rjmp	.+44     	; 0x486a <vfprintf+0x368>
    483e:	21 ff       	sbrs	r18, 1
    4840:	03 c0       	rjmp	.+6      	; 0x4848 <vfprintf+0x346>
    4842:	88 e5       	ldi	r24, 0x58	; 88
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	02 c0       	rjmp	.+4      	; 0x484c <vfprintf+0x34a>
    4848:	88 e7       	ldi	r24, 0x78	; 120
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	b7 01       	movw	r22, r14
    484e:	0c c0       	rjmp	.+24     	; 0x4868 <vfprintf+0x366>
    4850:	82 2f       	mov	r24, r18
    4852:	86 78       	andi	r24, 0x86	; 134
    4854:	51 f0       	breq	.+20     	; 0x486a <vfprintf+0x368>
    4856:	21 fd       	sbrc	r18, 1
    4858:	02 c0       	rjmp	.+4      	; 0x485e <vfprintf+0x35c>
    485a:	80 e2       	ldi	r24, 0x20	; 32
    485c:	01 c0       	rjmp	.+2      	; 0x4860 <vfprintf+0x35e>
    485e:	8b e2       	ldi	r24, 0x2B	; 43
    4860:	27 fd       	sbrc	r18, 7
    4862:	8d e2       	ldi	r24, 0x2D	; 45
    4864:	b7 01       	movw	r22, r14
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	6a d0       	rcall	.+212    	; 0x493e <fputc>
    486a:	a5 14       	cp	r10, r5
    486c:	30 f4       	brcc	.+12     	; 0x487a <vfprintf+0x378>
    486e:	b7 01       	movw	r22, r14
    4870:	80 e3       	ldi	r24, 0x30	; 48
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	64 d0       	rcall	.+200    	; 0x493e <fputc>
    4876:	5a 94       	dec	r5
    4878:	f8 cf       	rjmp	.-16     	; 0x486a <vfprintf+0x368>
    487a:	aa 94       	dec	r10
    487c:	f4 01       	movw	r30, r8
    487e:	ea 0d       	add	r30, r10
    4880:	f1 1d       	adc	r31, r1
    4882:	80 81       	ld	r24, Z
    4884:	b7 01       	movw	r22, r14
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	5a d0       	rcall	.+180    	; 0x493e <fputc>
    488a:	a1 10       	cpse	r10, r1
    488c:	f6 cf       	rjmp	.-20     	; 0x487a <vfprintf+0x378>
    488e:	33 20       	and	r3, r3
    4890:	09 f4       	brne	.+2      	; 0x4894 <vfprintf+0x392>
    4892:	5d ce       	rjmp	.-838    	; 0x454e <vfprintf+0x4c>
    4894:	b7 01       	movw	r22, r14
    4896:	80 e2       	ldi	r24, 0x20	; 32
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	51 d0       	rcall	.+162    	; 0x493e <fputc>
    489c:	3a 94       	dec	r3
    489e:	f7 cf       	rjmp	.-18     	; 0x488e <vfprintf+0x38c>
    48a0:	f7 01       	movw	r30, r14
    48a2:	86 81       	ldd	r24, Z+6	; 0x06
    48a4:	97 81       	ldd	r25, Z+7	; 0x07
    48a6:	02 c0       	rjmp	.+4      	; 0x48ac <vfprintf+0x3aa>
    48a8:	8f ef       	ldi	r24, 0xFF	; 255
    48aa:	9f ef       	ldi	r25, 0xFF	; 255
    48ac:	2c 96       	adiw	r28, 0x0c	; 12
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	de bf       	out	0x3e, r29	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	df 91       	pop	r29
    48ba:	cf 91       	pop	r28
    48bc:	1f 91       	pop	r17
    48be:	0f 91       	pop	r16
    48c0:	ff 90       	pop	r15
    48c2:	ef 90       	pop	r14
    48c4:	df 90       	pop	r13
    48c6:	cf 90       	pop	r12
    48c8:	bf 90       	pop	r11
    48ca:	af 90       	pop	r10
    48cc:	9f 90       	pop	r9
    48ce:	8f 90       	pop	r8
    48d0:	7f 90       	pop	r7
    48d2:	6f 90       	pop	r6
    48d4:	5f 90       	pop	r5
    48d6:	4f 90       	pop	r4
    48d8:	3f 90       	pop	r3
    48da:	2f 90       	pop	r2
    48dc:	08 95       	ret

000048de <__eerd_byte_usb1287>:
    48de:	f9 99       	sbic	0x1f, 1	; 31
    48e0:	fe cf       	rjmp	.-4      	; 0x48de <__eerd_byte_usb1287>
    48e2:	92 bd       	out	0x22, r25	; 34
    48e4:	81 bd       	out	0x21, r24	; 33
    48e6:	f8 9a       	sbi	0x1f, 0	; 31
    48e8:	99 27       	eor	r25, r25
    48ea:	80 b5       	in	r24, 0x20	; 32
    48ec:	08 95       	ret

000048ee <__eeupd_byte_usb1287>:
    48ee:	26 2f       	mov	r18, r22

000048f0 <__eeupd_r18_usb1287>:
    48f0:	f9 99       	sbic	0x1f, 1	; 31
    48f2:	fe cf       	rjmp	.-4      	; 0x48f0 <__eeupd_r18_usb1287>
    48f4:	92 bd       	out	0x22, r25	; 34
    48f6:	81 bd       	out	0x21, r24	; 33
    48f8:	f8 9a       	sbi	0x1f, 0	; 31
    48fa:	01 97       	sbiw	r24, 0x01	; 1
    48fc:	00 b4       	in	r0, 0x20	; 32
    48fe:	02 16       	cp	r0, r18
    4900:	39 f0       	breq	.+14     	; 0x4910 <__eeupd_r18_usb1287+0x20>
    4902:	1f ba       	out	0x1f, r1	; 31
    4904:	20 bd       	out	0x20, r18	; 32
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	fa 9a       	sbi	0x1f, 2	; 31
    490c:	f9 9a       	sbi	0x1f, 1	; 31
    490e:	0f be       	out	0x3f, r0	; 63
    4910:	08 95       	ret

00004912 <strnlen_P>:
    4912:	fc 01       	movw	r30, r24
    4914:	05 90       	lpm	r0, Z+
    4916:	61 50       	subi	r22, 0x01	; 1
    4918:	70 40       	sbci	r23, 0x00	; 0
    491a:	01 10       	cpse	r0, r1
    491c:	d8 f7       	brcc	.-10     	; 0x4914 <strnlen_P+0x2>
    491e:	80 95       	com	r24
    4920:	90 95       	com	r25
    4922:	8e 0f       	add	r24, r30
    4924:	9f 1f       	adc	r25, r31
    4926:	08 95       	ret

00004928 <strnlen>:
    4928:	fc 01       	movw	r30, r24
    492a:	61 50       	subi	r22, 0x01	; 1
    492c:	70 40       	sbci	r23, 0x00	; 0
    492e:	01 90       	ld	r0, Z+
    4930:	01 10       	cpse	r0, r1
    4932:	d8 f7       	brcc	.-10     	; 0x492a <strnlen+0x2>
    4934:	80 95       	com	r24
    4936:	90 95       	com	r25
    4938:	8e 0f       	add	r24, r30
    493a:	9f 1f       	adc	r25, r31
    493c:	08 95       	ret

0000493e <fputc>:
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	cf 93       	push	r28
    4944:	df 93       	push	r29
    4946:	18 2f       	mov	r17, r24
    4948:	09 2f       	mov	r16, r25
    494a:	eb 01       	movw	r28, r22
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	81 fd       	sbrc	r24, 1
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <fputc+0x1a>
    4952:	8f ef       	ldi	r24, 0xFF	; 255
    4954:	9f ef       	ldi	r25, 0xFF	; 255
    4956:	20 c0       	rjmp	.+64     	; 0x4998 <fputc+0x5a>
    4958:	82 ff       	sbrs	r24, 2
    495a:	10 c0       	rjmp	.+32     	; 0x497c <fputc+0x3e>
    495c:	4e 81       	ldd	r20, Y+6	; 0x06
    495e:	5f 81       	ldd	r21, Y+7	; 0x07
    4960:	2c 81       	ldd	r18, Y+4	; 0x04
    4962:	3d 81       	ldd	r19, Y+5	; 0x05
    4964:	42 17       	cp	r20, r18
    4966:	53 07       	cpc	r21, r19
    4968:	7c f4       	brge	.+30     	; 0x4988 <fputc+0x4a>
    496a:	e8 81       	ld	r30, Y
    496c:	f9 81       	ldd	r31, Y+1	; 0x01
    496e:	9f 01       	movw	r18, r30
    4970:	2f 5f       	subi	r18, 0xFF	; 255
    4972:	3f 4f       	sbci	r19, 0xFF	; 255
    4974:	39 83       	std	Y+1, r19	; 0x01
    4976:	28 83       	st	Y, r18
    4978:	10 83       	st	Z, r17
    497a:	06 c0       	rjmp	.+12     	; 0x4988 <fputc+0x4a>
    497c:	e8 85       	ldd	r30, Y+8	; 0x08
    497e:	f9 85       	ldd	r31, Y+9	; 0x09
    4980:	81 2f       	mov	r24, r17
    4982:	09 95       	icall
    4984:	89 2b       	or	r24, r25
    4986:	29 f7       	brne	.-54     	; 0x4952 <fputc+0x14>
    4988:	2e 81       	ldd	r18, Y+6	; 0x06
    498a:	3f 81       	ldd	r19, Y+7	; 0x07
    498c:	2f 5f       	subi	r18, 0xFF	; 255
    498e:	3f 4f       	sbci	r19, 0xFF	; 255
    4990:	3f 83       	std	Y+7, r19	; 0x07
    4992:	2e 83       	std	Y+6, r18	; 0x06
    4994:	81 2f       	mov	r24, r17
    4996:	90 2f       	mov	r25, r16
    4998:	df 91       	pop	r29
    499a:	cf 91       	pop	r28
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	08 95       	ret

000049a2 <__ultoa_invert>:
    49a2:	fa 01       	movw	r30, r20
    49a4:	aa 27       	eor	r26, r26
    49a6:	28 30       	cpi	r18, 0x08	; 8
    49a8:	51 f1       	breq	.+84     	; 0x49fe <__ultoa_invert+0x5c>
    49aa:	20 31       	cpi	r18, 0x10	; 16
    49ac:	81 f1       	breq	.+96     	; 0x4a0e <__ultoa_invert+0x6c>
    49ae:	e8 94       	clt
    49b0:	6f 93       	push	r22
    49b2:	6e 7f       	andi	r22, 0xFE	; 254
    49b4:	6e 5f       	subi	r22, 0xFE	; 254
    49b6:	7f 4f       	sbci	r23, 0xFF	; 255
    49b8:	8f 4f       	sbci	r24, 0xFF	; 255
    49ba:	9f 4f       	sbci	r25, 0xFF	; 255
    49bc:	af 4f       	sbci	r26, 0xFF	; 255
    49be:	b1 e0       	ldi	r27, 0x01	; 1
    49c0:	3e d0       	rcall	.+124    	; 0x4a3e <__ultoa_invert+0x9c>
    49c2:	b4 e0       	ldi	r27, 0x04	; 4
    49c4:	3c d0       	rcall	.+120    	; 0x4a3e <__ultoa_invert+0x9c>
    49c6:	67 0f       	add	r22, r23
    49c8:	78 1f       	adc	r23, r24
    49ca:	89 1f       	adc	r24, r25
    49cc:	9a 1f       	adc	r25, r26
    49ce:	a1 1d       	adc	r26, r1
    49d0:	68 0f       	add	r22, r24
    49d2:	79 1f       	adc	r23, r25
    49d4:	8a 1f       	adc	r24, r26
    49d6:	91 1d       	adc	r25, r1
    49d8:	a1 1d       	adc	r26, r1
    49da:	6a 0f       	add	r22, r26
    49dc:	71 1d       	adc	r23, r1
    49de:	81 1d       	adc	r24, r1
    49e0:	91 1d       	adc	r25, r1
    49e2:	a1 1d       	adc	r26, r1
    49e4:	20 d0       	rcall	.+64     	; 0x4a26 <__ultoa_invert+0x84>
    49e6:	09 f4       	brne	.+2      	; 0x49ea <__ultoa_invert+0x48>
    49e8:	68 94       	set
    49ea:	3f 91       	pop	r19
    49ec:	2a e0       	ldi	r18, 0x0A	; 10
    49ee:	26 9f       	mul	r18, r22
    49f0:	11 24       	eor	r1, r1
    49f2:	30 19       	sub	r19, r0
    49f4:	30 5d       	subi	r19, 0xD0	; 208
    49f6:	31 93       	st	Z+, r19
    49f8:	de f6       	brtc	.-74     	; 0x49b0 <__ultoa_invert+0xe>
    49fa:	cf 01       	movw	r24, r30
    49fc:	08 95       	ret
    49fe:	46 2f       	mov	r20, r22
    4a00:	47 70       	andi	r20, 0x07	; 7
    4a02:	40 5d       	subi	r20, 0xD0	; 208
    4a04:	41 93       	st	Z+, r20
    4a06:	b3 e0       	ldi	r27, 0x03	; 3
    4a08:	0f d0       	rcall	.+30     	; 0x4a28 <__ultoa_invert+0x86>
    4a0a:	c9 f7       	brne	.-14     	; 0x49fe <__ultoa_invert+0x5c>
    4a0c:	f6 cf       	rjmp	.-20     	; 0x49fa <__ultoa_invert+0x58>
    4a0e:	46 2f       	mov	r20, r22
    4a10:	4f 70       	andi	r20, 0x0F	; 15
    4a12:	40 5d       	subi	r20, 0xD0	; 208
    4a14:	4a 33       	cpi	r20, 0x3A	; 58
    4a16:	18 f0       	brcs	.+6      	; 0x4a1e <__ultoa_invert+0x7c>
    4a18:	49 5d       	subi	r20, 0xD9	; 217
    4a1a:	31 fd       	sbrc	r19, 1
    4a1c:	40 52       	subi	r20, 0x20	; 32
    4a1e:	41 93       	st	Z+, r20
    4a20:	02 d0       	rcall	.+4      	; 0x4a26 <__ultoa_invert+0x84>
    4a22:	a9 f7       	brne	.-22     	; 0x4a0e <__ultoa_invert+0x6c>
    4a24:	ea cf       	rjmp	.-44     	; 0x49fa <__ultoa_invert+0x58>
    4a26:	b4 e0       	ldi	r27, 0x04	; 4
    4a28:	a6 95       	lsr	r26
    4a2a:	97 95       	ror	r25
    4a2c:	87 95       	ror	r24
    4a2e:	77 95       	ror	r23
    4a30:	67 95       	ror	r22
    4a32:	ba 95       	dec	r27
    4a34:	c9 f7       	brne	.-14     	; 0x4a28 <__ultoa_invert+0x86>
    4a36:	00 97       	sbiw	r24, 0x00	; 0
    4a38:	61 05       	cpc	r22, r1
    4a3a:	71 05       	cpc	r23, r1
    4a3c:	08 95       	ret
    4a3e:	9b 01       	movw	r18, r22
    4a40:	ac 01       	movw	r20, r24
    4a42:	0a 2e       	mov	r0, r26
    4a44:	06 94       	lsr	r0
    4a46:	57 95       	ror	r21
    4a48:	47 95       	ror	r20
    4a4a:	37 95       	ror	r19
    4a4c:	27 95       	ror	r18
    4a4e:	ba 95       	dec	r27
    4a50:	c9 f7       	brne	.-14     	; 0x4a44 <__ultoa_invert+0xa2>
    4a52:	62 0f       	add	r22, r18
    4a54:	73 1f       	adc	r23, r19
    4a56:	84 1f       	adc	r24, r20
    4a58:	95 1f       	adc	r25, r21
    4a5a:	a0 1d       	adc	r26, r0
    4a5c:	08 95       	ret

00004a5e <_exit>:
    4a5e:	f8 94       	cli

00004a60 <__stop_program>:
    4a60:	ff cf       	rjmp	.-2      	; 0x4a60 <__stop_program>

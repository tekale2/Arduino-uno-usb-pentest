
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000c80  00000d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  00000d6e  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005417  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001554  00000000  00000000  00006df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000242f  00000000  00000000  00008347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000894  00000000  00000000  0000a778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028ba  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003a0a  00000000  00000000  0000d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e8  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
   2:	00 00       	nop
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	f1 c3       	rjmp	.+2018   	; 0x80c <__vector_10>
  2a:	00 00       	nop
  2c:	98 c0       	rjmp	.+304    	; 0x15e <__bad_interrupt>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop
  74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
  76:	00 00       	nop
  78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
  82:	00 00       	nop
  84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
  86:	00 00       	nop
  88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	68 c0       	rjmp	.+208    	; 0x15e <__bad_interrupt>
  8e:	00 00       	nop
  90:	66 c0       	rjmp	.+204    	; 0x15e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	64 c0       	rjmp	.+200    	; 0x15e <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000b6 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d0 <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	04 03 09 04                                         ....

000000d4 <ConfigurationDescriptor>:
  d4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  e4:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 104:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000112 <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 112:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 122:	dc 01                                               ..

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	de bf       	out	0x3e, r29	; 62
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	e0 e8       	ldi	r30, 0x80	; 128
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	fc e0       	ldi	r31, 0x0C	; 12
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	aa 35       	cpi	r26, 0x5A	; 90
 146:	b1 07       	cpc	r27, r17
				ReportData     += 4;
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	aa e5       	ldi	r26, 0x5A	; 90
				break;
 14e:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	a8 36       	cpi	r26, 0x68	; 104
 156:	b1 07       	cpc	r27, r17
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	f6 d0       	rcall	.+492    	; 0x348 <main>
 15c:	8f c5       	rjmp	.+2846   	; 0xc7c <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <LEDs_SetAllLEDs>:
 160:	9b b1       	in	r25, 0x0b	; 11
				ReportSize     -= 2;
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	98 2b       	or	r25, r24
				ReportData     += 2;
 166:	9b b9       	out	0x0b, r25	; 11
 168:	08 95       	ret

0000016a <SetupHardware>:
 16a:	84 b7       	in	r24, 0x34	; 52
				break;
 16c:	87 7f       	andi	r24, 0xF7	; 247

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	84 bf       	out	0x34, r24	; 52
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	80 93 60 00 	sts	0x0060, r24
				ReportSize     -= 1;
 17a:	10 92 60 00 	sts	0x0060, r1
				ReportData     += 1;
 17e:	0f be       	out	0x3f, r0	; 63
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	80 e8       	ldi	r24, 0x80	; 128
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	80 93 61 00 	sts	0x0061, r24
 18c:	90 93 61 00 	sts	0x0061, r25
 190:	0f be       	out	0x3f, r0	; 63
 192:	84 b1       	in	r24, 0x04	; 4
 194:	8f 71       	andi	r24, 0x1F	; 31
 196:	84 b9       	out	0x04, r24	; 4
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	8f 7c       	andi	r24, 0xCF	; 207
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 6e       	ori	r24, 0xE0	; 224
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8e b1       	in	r24, 0x0e	; 14
 1a6:	80 63       	ori	r24, 0x30	; 48
 1a8:	8e b9       	out	0x0e, r24	; 14

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	80 6f       	ori	r24, 0xF0	; 240
 1ae:	8a b9       	out	0x0a, r24	; 10
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
				break;
 1b4:	8b b9       	out	0x0b, r24	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	0f c3       	rjmp	.+1566   	; 0x7d6 <USB_Init>

000001b8 <EVENT_USB_Device_Connect>:
 1b8:	80 ea       	ldi	r24, 0xA0	; 160
 1ba:	d2 cf       	rjmp	.-92     	; 0x160 <LEDs_SetAllLEDs>

000001bc <EVENT_USB_Device_Disconnect>:
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	d0 cf       	rjmp	.-96     	; 0x160 <LEDs_SetAllLEDs>

000001c0 <EVENT_USB_Device_ConfigurationChanged>:
 1c0:	cf 93       	push	r28
 1c2:	42 e0       	ldi	r20, 0x02	; 2
 1c4:	61 ec       	ldi	r22, 0xC1	; 193
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	3b d2       	rcall	.+1142   	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
 1ca:	c8 2f       	mov	r28, r24
 1cc:	42 e1       	ldi	r20, 0x12	; 18
 1ce:	61 e8       	ldi	r22, 0x81	; 129
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	36 d2       	rcall	.+1132   	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
 1d4:	c8 23       	and	r28, r24
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	42 e1       	ldi	r20, 0x12	; 18
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	84 e0       	ldi	r24, 0x04	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	31 d2       	rcall	.+1122   	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
 1de:	10 92 00 01 	sts	0x0100, r1
 1e2:	10 92 01 01 	sts	0x0101, r1
 1e6:	10 92 02 01 	sts	0x0102, r1
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1ea:	10 92 03 01 	sts	0x0103, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	cc 23       	and	r28, r28
 1f0:	21 f0       	breq	.+8      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x3a>
 1f2:	88 23       	and	r24, r24
 1f4:	11 f0       	breq	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x3a>
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x3c>
 1fa:	80 e9       	ldi	r24, 0x90	; 144
 1fc:	cf 91       	pop	r28
 1fe:	b0 cf       	rjmp	.-160    	; 0x160 <LEDs_SetAllLEDs>

00000200 <EVENT_USB_Device_ControlRequest>:
 200:	80 91 61 01 	lds	r24, 0x0161
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 204:	81 32       	cpi	r24, 0x21	; 33
				break;
 206:	29 f0       	breq	.+10     	; 0x212 <EVENT_USB_Device_ControlRequest+0x12>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	82 32       	cpi	r24, 0x22	; 34
 20a:	49 f1       	breq	.+82     	; 0x25e <EVENT_USB_Device_ControlRequest+0x5e>
 20c:	80 32       	cpi	r24, 0x20	; 32
 20e:	89 f5       	brne	.+98     	; 0x272 <EVENT_USB_Device_ControlRequest+0x72>
 210:	12 c0       	rjmp	.+36     	; 0x236 <EVENT_USB_Device_ControlRequest+0x36>
 212:	80 91 60 01 	lds	r24, 0x0160
 216:	81 3a       	cpi	r24, 0xA1	; 161
 218:	61 f5       	brne	.+88     	; 0x272 <EVENT_USB_Device_ControlRequest+0x72>
 21a:	80 91 e8 00 	lds	r24, 0x00E8
 21e:	87 7f       	andi	r24, 0xF7	; 247
 220:	80 93 e8 00 	sts	0x00E8, r24
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e d1       	rcall	.+540    	; 0x44a <Endpoint_Write_Control_Stream_LE>
 22e:	80 91 e8 00 	lds	r24, 0x00E8
 232:	8b 77       	andi	r24, 0x7B	; 123
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	11 c0       	rjmp	.+34     	; 0x258 <EVENT_USB_Device_ControlRequest+0x58>
 236:	80 91 60 01 	lds	r24, 0x0160
 23a:	81 32       	cpi	r24, 0x21	; 33
 23c:	d1 f4       	brne	.+52     	; 0x272 <EVENT_USB_Device_ControlRequest+0x72>
 23e:	80 91 e8 00 	lds	r24, 0x00E8
 242:	87 7f       	andi	r24, 0xF7	; 247
 244:	80 93 e8 00 	sts	0x00E8, r24
 248:	67 e0       	ldi	r22, 0x07	; 7
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	59 d1       	rcall	.+690    	; 0x504 <Endpoint_Read_Control_Stream_LE>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	80 91 e8 00 	lds	r24, 0x00E8
 256:	8e 77       	andi	r24, 0x7E	; 126
 258:	80 93 e8 00 	sts	0x00E8, r24
 25c:	08 95       	ret
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	80 91 60 01 	lds	r24, 0x0160
 262:	81 32       	cpi	r24, 0x21	; 33
 264:	31 f4       	brne	.+12     	; 0x272 <EVENT_USB_Device_ControlRequest+0x72>
 266:	80 91 e8 00 	lds	r24, 0x00E8
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	80 93 e8 00 	sts	0x00E8, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	1c c2       	rjmp	.+1080   	; 0x6aa <Endpoint_ClearStatusStage>
				break;
 272:	08 95       	ret

00000274 <CDC_Task>:

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	93 b1       	in	r25, 0x03	; 3
 276:	8c b1       	in	r24, 0x0c	; 12
 278:	20 91 5f 01 	lds	r18, 0x015F
 27c:	24 30       	cpi	r18, 0x04	; 4
 27e:	09 f0       	breq	.+2      	; 0x282 <CDC_Task+0xe>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	62 c0       	rjmp	.+196    	; 0x346 <CDC_Task+0xd2>
 282:	80 95       	com	r24
				break;
 284:	80 73       	andi	r24, 0x30	; 48

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	86 95       	lsr	r24
 288:	90 95       	com	r25
 28a:	90 7e       	andi	r25, 0xE0	; 224
 28c:	89 2b       	or	r24, r25
 28e:	87 fd       	sbrc	r24, 7
				break;
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <CDC_Task+0x34>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	84 fd       	sbrc	r24, 4
 294:	28 c0       	rjmp	.+80     	; 0x2e6 <CDC_Task+0x72>
 296:	86 fd       	sbrc	r24, 6
 298:	29 c0       	rjmp	.+82     	; 0x2ec <CDC_Task+0x78>
 29a:	83 fd       	sbrc	r24, 3
 29c:	2a c0       	rjmp	.+84     	; 0x2f2 <CDC_Task+0x7e>
 29e:	85 fd       	sbrc	r24, 5
				break;
 2a0:	2b c0       	rjmp	.+86     	; 0x2f8 <CDC_Task+0x84>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	10 92 5a 01 	sts	0x015A, r1
 2a6:	12 c0       	rjmp	.+36     	; 0x2cc <CDC_Task+0x58>
 2a8:	8b e4       	ldi	r24, 0x4B	; 75
 2aa:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2ac:	20 91 5a 01 	lds	r18, 0x015A

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2b0:	21 11       	cpse	r18, r1
 2b2:	0c c0       	rjmp	.+24     	; 0x2cc <CDC_Task+0x58>
 2b4:	40 91 00 01 	lds	r20, 0x0100
 2b8:	50 91 01 01 	lds	r21, 0x0101
				break;
 2bc:	60 91 02 01 	lds	r22, 0x0102
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	70 91 03 01 	lds	r23, 0x0103
 2c4:	45 2b       	or	r20, r21
 2c6:	46 2b       	or	r20, r22
 2c8:	47 2b       	or	r20, r23
 2ca:	c9 f4       	brne	.+50     	; 0x2fe <CDC_Task+0x8a>
				break;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	80 93 e9 00 	sts	0x00E9, r24
 2d2:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	82 ff       	sbrs	r24, 2
 2d8:	36 c0       	rjmp	.+108    	; 0x346 <CDC_Task+0xd2>
 2da:	80 91 e8 00 	lds	r24, 0x00E8

				if (ParserData->UsingReportIDs)
 2de:	8b 77       	andi	r24, 0x7B	; 123
 2e0:	80 93 e8 00 	sts	0x00E8, r24
 2e4:	08 95       	ret
 2e6:	8b e3       	ldi	r24, 0x3B	; 59
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	e0 cf       	rjmp	.-64     	; 0x2ac <CDC_Task+0x38>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	8b e2       	ldi	r24, 0x2B	; 43
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	dd cf       	rjmp	.-70     	; 0x2ac <CDC_Task+0x38>
 2f2:	8a e1       	ldi	r24, 0x1A	; 26
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	da cf       	rjmp	.-76     	; 0x2ac <CDC_Task+0x38>
 2f8:	87 e0       	ldi	r24, 0x07	; 7
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	d7 cf       	rjmp	.-82     	; 0x2ac <CDC_Task+0x38>
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	20 93 5a 01 	sts	0x015A, r18
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	23 e0       	ldi	r18, 0x03	; 3
 306:	20 93 e9 00 	sts	0x00E9, r18
 30a:	fc 01       	movw	r30, r24
 30c:	01 90       	ld	r0, Z+
 30e:	00 20       	and	r0, r0
 310:	e9 f7       	brne	.-6      	; 0x30c <CDC_Task+0x98>
 312:	bf 01       	movw	r22, r30
 314:	61 50       	subi	r22, 0x01	; 1
 316:	71 09       	sbc	r23, r1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	68 1b       	sub	r22, r24
 31a:	79 0b       	sbc	r23, r25
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	4c d0       	rcall	.+152    	; 0x3ba <Endpoint_Write_Stream_LE>
 322:	80 91 f2 00 	lds	r24, 0x00F2
 326:	90 91 f3 00 	lds	r25, 0x00F3
 32a:	20 91 e8 00 	lds	r18, 0x00E8
 32e:	2e 77       	andi	r18, 0x7E	; 126
 330:	20 93 e8 00 	sts	0x00E8, r18
 334:	40 97       	sbiw	r24, 0x10	; 16
 336:	51 f6       	brne	.-108    	; 0x2cc <CDC_Task+0x58>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	d9 d1       	rcall	.+946    	; 0x6ec <Endpoint_WaitUntilReady>
 33a:	80 91 e8 00 	lds	r24, 0x00E8
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	8e 77       	andi	r24, 0x7E	; 126
 340:	80 93 e8 00 	sts	0x00E8, r24
 344:	c3 cf       	rjmp	.-122    	; 0x2cc <CDC_Task+0x58>
 346:	08 95       	ret

00000348 <main>:
 348:	10 df       	rcall	.-480    	; 0x16a <SetupHardware>
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	09 df       	rcall	.-494    	; 0x160 <LEDs_SetAllLEDs>
 34e:	78 94       	sei
 350:	91 df       	rcall	.-222    	; 0x274 <CDC_Task>
 352:	78 d4       	rcall	.+2288   	; 0xc44 <USB_USBTask>
 354:	fd cf       	rjmp	.-6      	; 0x350 <main+0x8>

00000356 <CALLBACK_USB_GetDescriptor>:
 356:	29 2f       	mov	r18, r25
 358:	33 27       	eor	r19, r19
 35a:	22 30       	cpi	r18, 0x02	; 2
 35c:	31 05       	cpc	r19, r1
 35e:	59 f0       	breq	.+22     	; 0x376 <CALLBACK_USB_GetDescriptor+0x20>
 360:	23 30       	cpi	r18, 0x03	; 3
 362:	31 05       	cpc	r19, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	69 f0       	breq	.+26     	; 0x380 <CALLBACK_USB_GetDescriptor+0x2a>
 366:	21 30       	cpi	r18, 0x01	; 1
 368:	31 05       	cpc	r19, r1
 36a:	f9 f4       	brne	.+62     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x54>
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	82 e1       	ldi	r24, 0x12	; 18
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	22 e1       	ldi	r18, 0x12	; 18
 372:	31 e0       	ldi	r19, 0x01	; 1
 374:	1e c0       	rjmp	.+60     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x5c>
 376:	8e e3       	ldi	r24, 0x3E	; 62

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	24 ed       	ldi	r18, 0xD4	; 212
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x5c>
 380:	99 27       	eor	r25, r25
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 05       	cpc	r25, r1
 386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x42>
				break;
 388:	82 30       	cpi	r24, 0x02	; 2

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	91 05       	cpc	r25, r1
 38c:	41 f0       	breq	.+16     	; 0x39e <CALLBACK_USB_GetDescriptor+0x48>
 38e:	89 2b       	or	r24, r25
 390:	61 f4       	brne	.+24     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x54>
 392:	e0 ed       	ldi	r30, 0xD0	; 208
 394:	f0 e0       	ldi	r31, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x4c>
 398:	e6 eb       	ldi	r30, 0xB6	; 182
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x4c>
 39e:	e8 e9       	ldi	r30, 0x98	; 152
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	84 91       	lpm	r24, Z
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	9f 01       	movw	r18, r30
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x5c>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	20 e0       	ldi	r18, 0x00	; 0
				break;
 3b0:	30 e0       	ldi	r19, 0x00	; 0
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	fa 01       	movw	r30, r20
 3b4:	31 83       	std	Z+1, r19	; 0x01
 3b6:	20 83       	st	Z, r18
 3b8:	08 95       	ret

000003ba <Endpoint_Write_Stream_LE>:
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	7c 01       	movw	r14, r24
 3cc:	8b 01       	movw	r16, r22
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	ea 01       	movw	r28, r20
 3d0:	8d d1       	rcall	.+794    	; 0x6ec <Endpoint_WaitUntilReady>
 3d2:	81 11       	cpse	r24, r1

					while (CurrCollectionPath->Parent != NULL)
 3d4:	31 c0       	rjmp	.+98     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>
 3d6:	20 97       	sbiw	r28, 0x00	; 0
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <Endpoint_Write_Stream_LE+0x2c>
 3da:	88 81       	ld	r24, Y
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	99 81       	ldd	r25, Y+1	; 0x01
 3de:	08 1b       	sub	r16, r24
 3e0:	19 0b       	sbc	r17, r25
 3e2:	e8 0e       	add	r14, r24
 3e4:	f9 1e       	adc	r15, r25
 3e6:	c1 2c       	mov	r12, r1
 3e8:	d1 2c       	mov	r13, r1
 3ea:	01 15       	cp	r16, r1
 3ec:	11 05       	cpc	r17, r1
 3ee:	19 f1       	breq	.+70     	; 0x436 <Endpoint_Write_Stream_LE+0x7c>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	80 91 e8 00 	lds	r24, 0x00E8
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	85 fd       	sbrc	r24, 5
 3f6:	14 c0       	rjmp	.+40     	; 0x420 <Endpoint_Write_Stream_LE+0x66>
 3f8:	80 91 e8 00 	lds	r24, 0x00E8
 3fc:	8e 77       	andi	r24, 0x7E	; 126
 3fe:	80 93 e8 00 	sts	0x00E8, r24
 402:	20 d4       	rcall	.+2112   	; 0xc44 <USB_USBTask>
 404:	20 97       	sbiw	r28, 0x00	; 0
 406:	41 f0       	breq	.+16     	; 0x418 <Endpoint_Write_Stream_LE+0x5e>
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	88 81       	ld	r24, Y
 40a:	99 81       	ldd	r25, Y+1	; 0x01
 40c:	8c 0d       	add	r24, r12
 40e:	9d 1d       	adc	r25, r13
 410:	99 83       	std	Y+1, r25	; 0x01
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	88 83       	st	Y, r24
 414:	85 e0       	ldi	r24, 0x05	; 5
 416:	10 c0       	rjmp	.+32     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>
 418:	69 d1       	rcall	.+722    	; 0x6ec <Endpoint_WaitUntilReady>
 41a:	88 23       	and	r24, r24
 41c:	31 f3       	breq	.-52     	; 0x3ea <Endpoint_Write_Stream_LE+0x30>
 41e:	0c c0       	rjmp	.+24     	; 0x438 <Endpoint_Write_Stream_LE+0x7e>

				if (UsageListSize)
 420:	f7 01       	movw	r30, r14
 422:	81 91       	ld	r24, Z+
 424:	7f 01       	movw	r14, r30
 426:	80 93 f1 00 	sts	0x00F1, r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	01 50       	subi	r16, 0x01	; 1
 42c:	11 09       	sbc	r17, r1
 42e:	ff ef       	ldi	r31, 0xFF	; 255
 430:	cf 1a       	sub	r12, r31
 432:	df 0a       	sbc	r13, r31
 434:	da cf       	rjmp	.-76     	; 0x3ea <Endpoint_Write_Stream_LE+0x30>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	08 95       	ret

0000044a <Endpoint_Write_Control_Stream_LE>:
 44a:	20 91 66 01 	lds	r18, 0x0166
					  UsageList[i - 1] = UsageList[i];
 44e:	30 91 67 01 	lds	r19, 0x0167
 452:	26 17       	cp	r18, r22

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	37 07       	cpc	r19, r23
 456:	48 f0       	brcs	.+18     	; 0x46a <Endpoint_Write_Control_Stream_LE+0x20>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	61 15       	cp	r22, r1
 45a:	71 05       	cpc	r23, r1
 45c:	39 f4       	brne	.+14     	; 0x46c <Endpoint_Write_Control_Stream_LE+0x22>
 45e:	20 91 e8 00 	lds	r18, 0x00E8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	2e 77       	andi	r18, 0x7E	; 126
 464:	20 93 e8 00 	sts	0x00E8, r18
 468:	01 c0       	rjmp	.+2      	; 0x46c <Endpoint_Write_Control_Stream_LE+0x22>
 46a:	b9 01       	movw	r22, r18
 46c:	fc 01       	movw	r30, r24
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	61 15       	cp	r22, r1
 472:	71 05       	cpc	r23, r1
 474:	99 f1       	breq	.+102    	; 0x4dc <Endpoint_Write_Control_Stream_LE+0x92>
 476:	80 91 5f 01 	lds	r24, 0x015F
 47a:	88 23       	and	r24, r24
 47c:	e9 f1       	breq	.+122    	; 0x4f8 <Endpoint_Write_Control_Stream_LE+0xae>
 47e:	85 30       	cpi	r24, 0x05	; 5
 480:	e9 f1       	breq	.+122    	; 0x4fc <Endpoint_Write_Control_Stream_LE+0xb2>
 482:	80 91 e8 00 	lds	r24, 0x00E8
 486:	83 fd       	sbrc	r24, 3
 488:	3b c0       	rjmp	.+118    	; 0x500 <Endpoint_Write_Control_Stream_LE+0xb6>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	80 91 e8 00 	lds	r24, 0x00E8
 48e:	82 ff       	sbrs	r24, 2
 490:	06 c0       	rjmp	.+12     	; 0x49e <Endpoint_Write_Control_Stream_LE+0x54>
 492:	80 91 e8 00 	lds	r24, 0x00E8
 496:	82 ff       	sbrs	r24, 2
 498:	24 c0       	rjmp	.+72     	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x98>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	08 95       	ret
 49e:	80 91 e8 00 	lds	r24, 0x00E8
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	e5 cf       	rjmp	.-54     	; 0x470 <Endpoint_Write_Control_Stream_LE+0x26>
 4a6:	80 91 f2 00 	lds	r24, 0x00F2
 4aa:	90 91 f3 00 	lds	r25, 0x00F3
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	61 15       	cp	r22, r1
 4b0:	71 05       	cpc	r23, r1
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <Endpoint_Write_Control_Stream_LE+0x7e>
 4b4:	88 30       	cpi	r24, 0x08	; 8
 4b6:	91 05       	cpc	r25, r1
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <Endpoint_Write_Control_Stream_LE+0x7e>
 4ba:	21 91       	ld	r18, Z+
 4bc:	20 93 f1 00 	sts	0x00F1, r18
 4c0:	61 50       	subi	r22, 0x01	; 1
 4c2:	71 09       	sbc	r23, r1
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	f3 cf       	rjmp	.-26     	; 0x4ae <Endpoint_Write_Control_Stream_LE+0x64>
 4c8:	21 e0       	ldi	r18, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	08 97       	sbiw	r24, 0x08	; 8
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x86>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	80 91 e8 00 	lds	r24, 0x00E8
 4d4:	8e 77       	andi	r24, 0x7E	; 126
 4d6:	80 93 e8 00 	sts	0x00E8, r24
 4da:	ca cf       	rjmp	.-108    	; 0x470 <Endpoint_Write_Control_Stream_LE+0x26>
 4dc:	21 11       	cpse	r18, r1
 4de:	cb cf       	rjmp	.-106    	; 0x476 <Endpoint_Write_Control_Stream_LE+0x2c>
 4e0:	d8 cf       	rjmp	.-80     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x48>
 4e2:	80 91 5f 01 	lds	r24, 0x015F
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e6:	88 23       	and	r24, r24
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <Endpoint_Write_Control_Stream_LE+0xae>
 4ea:	85 30       	cpi	r24, 0x05	; 5
 4ec:	39 f0       	breq	.+14     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0xb2>
 4ee:	80 91 e8 00 	lds	r24, 0x00E8
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	83 ff       	sbrs	r24, 3
 4f4:	ce cf       	rjmp	.-100    	; 0x492 <Endpoint_Write_Control_Stream_LE+0x48>
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <Endpoint_Write_Control_Stream_LE+0xb6>
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	08 95       	ret
 4fc:	83 e0       	ldi	r24, 0x03	; 3
 4fe:	08 95       	ret
 500:	81 e0       	ldi	r24, 0x01	; 1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	08 95       	ret

00000504 <Endpoint_Read_Control_Stream_LE>:
 504:	61 15       	cp	r22, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	71 05       	cpc	r23, r1
 508:	29 f4       	brne	.+10     	; 0x514 <Endpoint_Read_Control_Stream_LE+0x10>
 50a:	20 91 e8 00 	lds	r18, 0x00E8
 50e:	2b 77       	andi	r18, 0x7B	; 123
 510:	20 93 e8 00 	sts	0x00E8, r18
 514:	61 15       	cp	r22, r1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	71 05       	cpc	r23, r1
 518:	31 f1       	breq	.+76     	; 0x566 <Endpoint_Read_Control_Stream_LE+0x62>
 51a:	20 91 5f 01 	lds	r18, 0x015F

					if (UsageListSize)
 51e:	22 23       	and	r18, r18
 520:	59 f1       	breq	.+86     	; 0x578 <Endpoint_Read_Control_Stream_LE+0x74>
 522:	25 30       	cpi	r18, 0x05	; 5
 524:	59 f1       	breq	.+86     	; 0x57c <Endpoint_Read_Control_Stream_LE+0x78>
 526:	20 91 e8 00 	lds	r18, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 52a:	23 fd       	sbrc	r18, 3
 52c:	21 c0       	rjmp	.+66     	; 0x570 <Endpoint_Read_Control_Stream_LE+0x6c>
 52e:	20 91 e8 00 	lds	r18, 0x00E8
 532:	22 ff       	sbrs	r18, 2
 534:	f2 cf       	rjmp	.-28     	; 0x51a <Endpoint_Read_Control_Stream_LE+0x16>
 536:	fc 01       	movw	r30, r24
 538:	cf 01       	movw	r24, r30
 53a:	20 91 f2 00 	lds	r18, 0x00F2

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	30 91 f3 00 	lds	r19, 0x00F3
 542:	23 2b       	or	r18, r19
 544:	11 f3       	breq	.-60     	; 0x50a <Endpoint_Read_Control_Stream_LE+0x6>
 546:	80 91 f1 00 	lds	r24, 0x00F1
						  UsageList[i - 1] = UsageList[i];
 54a:	81 93       	st	Z+, r24
 54c:	cf 01       	movw	r24, r30
 54e:	61 50       	subi	r22, 0x01	; 1
 550:	71 09       	sbc	r23, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	81 f7       	brne	.-32     	; 0x538 <Endpoint_Read_Control_Stream_LE+0x34>
 558:	d8 cf       	rjmp	.-80     	; 0x50a <Endpoint_Read_Control_Stream_LE+0x6>
 55a:	80 91 5f 01 	lds	r24, 0x015F
 55e:	88 23       	and	r24, r24
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	59 f0       	breq	.+22     	; 0x578 <Endpoint_Read_Control_Stream_LE+0x74>
 562:	85 30       	cpi	r24, 0x05	; 5
 564:	59 f0       	breq	.+22     	; 0x57c <Endpoint_Read_Control_Stream_LE+0x78>
 566:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	80 ff       	sbrs	r24, 0
 56c:	f6 cf       	rjmp	.-20     	; 0x55a <Endpoint_Read_Control_Stream_LE+0x56>
 56e:	02 c0       	rjmp	.+4      	; 0x574 <Endpoint_Read_Control_Stream_LE+0x70>
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	08 95       	ret
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	08 95       	ret

00000580 <Endpoint_Write_Control_PStream_LE>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	20 91 66 01 	lds	r18, 0x0166
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	30 91 67 01 	lds	r19, 0x0167
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	26 17       	cp	r18, r22
 58a:	37 07       	cpc	r19, r23
 58c:	48 f0       	brcs	.+18     	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0x20>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	61 15       	cp	r22, r1
 590:	71 05       	cpc	r23, r1

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	39 f4       	brne	.+14     	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x22>
 594:	20 91 e8 00 	lds	r18, 0x00E8
 598:	2e 77       	andi	r18, 0x7E	; 126
 59a:	20 93 e8 00 	sts	0x00E8, r18
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x22>
 5a0:	b9 01       	movw	r22, r18
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	61 15       	cp	r22, r1
 5a8:	71 05       	cpc	r23, r1
 5aa:	b1 f1       	breq	.+108    	; 0x618 <Endpoint_Write_Control_PStream_LE+0x98>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	80 91 5f 01 	lds	r24, 0x015F
 5b0:	88 23       	and	r24, r24
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x36>
 5b4:	3f c0       	rjmp	.+126    	; 0x634 <Endpoint_Write_Control_PStream_LE+0xb4>
 5b6:	85 30       	cpi	r24, 0x05	; 5
 5b8:	09 f4       	brne	.+2      	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x3c>
 5ba:	3e c0       	rjmp	.+124    	; 0x638 <Endpoint_Write_Control_PStream_LE+0xb8>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	80 91 e8 00 	lds	r24, 0x00E8
 5c0:	83 fd       	sbrc	r24, 3
 5c2:	3c c0       	rjmp	.+120    	; 0x63c <Endpoint_Write_Control_PStream_LE+0xbc>
 5c4:	80 91 e8 00 	lds	r24, 0x00E8
 5c8:	82 ff       	sbrs	r24, 2
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x58>
 5cc:	80 91 e8 00 	lds	r24, 0x00E8
 5d0:	82 ff       	sbrs	r24, 2
 5d2:	25 c0       	rjmp	.+74     	; 0x61e <Endpoint_Write_Control_PStream_LE+0x9e>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	80 91 e8 00 	lds	r24, 0x00E8
 5dc:	80 ff       	sbrs	r24, 0
 5de:	e3 cf       	rjmp	.-58     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x26>
 5e0:	80 91 f2 00 	lds	r24, 0x00F2
 5e4:	90 91 f3 00 	lds	r25, 0x00F3
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	59 f0       	breq	.+22     	; 0x604 <Endpoint_Write_Control_PStream_LE+0x84>
 5ee:	88 30       	cpi	r24, 0x08	; 8
 5f0:	91 05       	cpc	r25, r1
 5f2:	40 f4       	brcc	.+16     	; 0x604 <Endpoint_Write_Control_PStream_LE+0x84>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	24 91       	lpm	r18, Z
 5f6:	20 93 f1 00 	sts	0x00F1, r18
 5fa:	31 96       	adiw	r30, 0x01	; 1
 5fc:	61 50       	subi	r22, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;
 5fe:	71 09       	sbc	r23, r1
 600:	01 96       	adiw	r24, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	f2 cf       	rjmp	.-28     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x68>
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	08 97       	sbiw	r24, 0x08	; 8
 608:	09 f0       	breq	.+2      	; 0x60c <Endpoint_Write_Control_PStream_LE+0x8c>
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	80 91 e8 00 	lds	r24, 0x00E8
 610:	8e 77       	andi	r24, 0x7E	; 126
 612:	80 93 e8 00 	sts	0x00E8, r24
 616:	c7 cf       	rjmp	.-114    	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x26>
 618:	21 11       	cpse	r18, r1
 61a:	c8 cf       	rjmp	.-112    	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x2c>
 61c:	d7 cf       	rjmp	.-82     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x4c>
 61e:	80 91 5f 01 	lds	r24, 0x015F
 622:	88 23       	and	r24, r24
 624:	39 f0       	breq	.+14     	; 0x634 <Endpoint_Write_Control_PStream_LE+0xb4>
 626:	85 30       	cpi	r24, 0x05	; 5
 628:	39 f0       	breq	.+14     	; 0x638 <Endpoint_Write_Control_PStream_LE+0xb8>
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	83 ff       	sbrs	r24, 3
 630:	cd cf       	rjmp	.-102    	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x4c>
 632:	04 c0       	rjmp	.+8      	; 0x63c <Endpoint_Write_Control_PStream_LE+0xbc>
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	08 95       	ret
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	08 95       	ret
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <Endpoint_ConfigureEndpoint_Prv>:
 640:	98 2f       	mov	r25, r24
 642:	97 30       	cpi	r25, 0x07	; 7
 644:	58 f5       	brcc	.+86     	; 0x69c <Endpoint_ConfigureEndpoint_Prv+0x5c>
 646:	90 93 e9 00 	sts	0x00E9, r25
 64a:	98 17       	cp	r25, r24
 64c:	39 f0       	breq	.+14     	; 0x65c <Endpoint_ConfigureEndpoint_Prv+0x1c>
 64e:	70 91 ec 00 	lds	r23, 0x00EC
 652:	20 91 ed 00 	lds	r18, 0x00ED
 656:	50 91 f0 00 	lds	r21, 0x00F0
 65a:	03 c0       	rjmp	.+6      	; 0x662 <Endpoint_ConfigureEndpoint_Prv+0x22>
 65c:	24 2f       	mov	r18, r20
 65e:	76 2f       	mov	r23, r22
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	21 ff       	sbrs	r18, 1
 664:	19 c0       	rjmp	.+50     	; 0x698 <Endpoint_ConfigureEndpoint_Prv+0x58>
 666:	30 91 eb 00 	lds	r19, 0x00EB
 66a:	3e 7f       	andi	r19, 0xFE	; 254
 66c:	30 93 eb 00 	sts	0x00EB, r19
 670:	30 91 ed 00 	lds	r19, 0x00ED
 674:	3d 7f       	andi	r19, 0xFD	; 253
 676:	30 93 ed 00 	sts	0x00ED, r19
 67a:	30 91 eb 00 	lds	r19, 0x00EB
 67e:	31 60       	ori	r19, 0x01	; 1
 680:	30 93 eb 00 	sts	0x00EB, r19
 684:	70 93 ec 00 	sts	0x00EC, r23
					  ParserData->TotalReportItems++;
 688:	20 93 ed 00 	sts	0x00ED, r18
 68c:	50 93 f0 00 	sts	0x00F0, r21
 690:	20 91 ee 00 	lds	r18, 0x00EE

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 694:	27 ff       	sbrs	r18, 7
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <Endpoint_ConfigureEndpoint_Prv+0x66>
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	d3 cf       	rjmp	.-90     	; 0x642 <Endpoint_ConfigureEndpoint_Prv+0x2>
 69c:	8f 70       	andi	r24, 0x0F	; 15
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	80 93 e9 00 	sts	0x00E9, r24
 6a2:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	08 95       	ret
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	08 95       	ret

000006aa <Endpoint_ClearStatusStage>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	80 91 60 01 	lds	r24, 0x0160
 6ae:	87 fd       	sbrc	r24, 7
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <Endpoint_ClearStatusStage+0x12>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	80 91 e8 00 	lds	r24, 0x00E8
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <Endpoint_ClearStatusStage+0x2c>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	12 c0       	rjmp	.+36     	; 0x6e0 <Endpoint_ClearStatusStage+0x36>
 6bc:	80 91 e8 00 	lds	r24, 0x00E8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6c0:	82 fd       	sbrc	r24, 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <Endpoint_ClearStatusStage+0x24>
 6c4:	80 91 5f 01 	lds	r24, 0x015F
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c8:	81 11       	cpse	r24, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	f8 cf       	rjmp	.-16     	; 0x6bc <Endpoint_ClearStatusStage+0x12>
 6cc:	08 95       	ret

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	8b 77       	andi	r24, 0x7B	; 123
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <Endpoint_ClearStatusStage+0x3c>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	80 91 5f 01 	lds	r24, 0x015F

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6da:	81 11       	cpse	r24, r1
 6dc:	ea cf       	rjmp	.-44     	; 0x6b2 <Endpoint_ClearStatusStage+0x8>
 6de:	08 95       	ret
 6e0:	80 91 e8 00 	lds	r24, 0x00E8
 6e4:	8e 77       	andi	r24, 0x7E	; 126
 6e6:	80 93 e8 00 	sts	0x00E8, r24
 6ea:	08 95       	ret

000006ec <Endpoint_WaitUntilReady>:
 6ec:	80 91 e4 00 	lds	r24, 0x00E4
 6f0:	90 91 e5 00 	lds	r25, 0x00E5
 6f4:	45 e6       	ldi	r20, 0x65	; 101
 6f6:	20 91 ec 00 	lds	r18, 0x00EC
 6fa:	20 ff       	sbrs	r18, 0
 6fc:	21 c0       	rjmp	.+66     	; 0x740 <Endpoint_WaitUntilReady+0x54>
 6fe:	20 91 e8 00 	lds	r18, 0x00E8
 702:	20 fd       	sbrc	r18, 0
 704:	21 c0       	rjmp	.+66     	; 0x748 <Endpoint_WaitUntilReady+0x5c>
 706:	20 91 5f 01 	lds	r18, 0x015F
 70a:	22 23       	and	r18, r18
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 70c:	89 f0       	breq	.+34     	; 0x730 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 70e:	25 30       	cpi	r18, 0x05	; 5
 710:	89 f0       	breq	.+34     	; 0x734 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 712:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 716:	25 fd       	sbrc	r18, 5
 718:	0f c0       	rjmp	.+30     	; 0x738 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 71a:	20 91 e4 00 	lds	r18, 0x00E4
 71e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 722:	28 17       	cp	r18, r24
 724:	39 07       	cpc	r19, r25
 726:	39 f3       	breq	.-50     	; 0x6f6 <Endpoint_WaitUntilReady+0xa>
 728:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 72a:	41 f0       	breq	.+16     	; 0x73c <Endpoint_WaitUntilReady+0x50>
 72c:	c9 01       	movw	r24, r18
 72e:	e3 cf       	rjmp	.-58     	; 0x6f6 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 734:	83 e0       	ldi	r24, 0x03	; 3
 736:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 73c:	84 e0       	ldi	r24, 0x04	; 4
 73e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 740:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 744:	22 ff       	sbrs	r18, 2
 746:	df cf       	rjmp	.-66     	; 0x706 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	08 95       	ret

0000074c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 754:	4e d0       	rcall	.+156    	; 0x7f2 <USB_INT_DisableAllInterrupts>
 756:	55 d0       	rcall	.+170    	; 0x802 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 758:	c8 ed       	ldi	r28, 0xD8	; 216
 75a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 75c:	88 81       	ld	r24, Y
 75e:	8f 77       	andi	r24, 0x7F	; 127
 760:	88 83       	st	Y, r24
 762:	88 81       	ld	r24, Y
 764:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 766:	88 83       	st	Y, r24
 768:	88 81       	ld	r24, Y
 76a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 76c:	88 83       	st	Y, r24
 76e:	e7 ed       	ldi	r30, 0xD7	; 215
 770:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 772:	80 81       	ld	r24, Z
 774:	80 68       	ori	r24, 0x80	; 128
 776:	80 83       	st	Z, r24
 778:	19 bc       	out	0x29, r1	; 41
 77a:	10 92 5f 01 	sts	0x015F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 77e:	10 92 5b 01 	sts	0x015B, r1
	USB_Device_ConfigurationNumber  = 0;
 782:	10 92 5d 01 	sts	0x015D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 786:	10 92 5c 01 	sts	0x015C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 78a:	00 ee       	ldi	r16, 0xE0	; 224
 78c:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 78e:	f8 01       	movw	r30, r16
 790:	80 81       	ld	r24, Z
 792:	8b 7f       	andi	r24, 0xFB	; 251
 794:	80 83       	st	Z, r24
 796:	88 81       	ld	r24, Y
 798:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 79a:	88 83       	st	Y, r24
 79c:	42 e0       	ldi	r20, 0x02	; 2
 79e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	4e df       	rcall	.-356    	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
 7a4:	e1 ee       	ldi	r30, 0xE1	; 225
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7aa:	8e 7f       	andi	r24, 0xFE	; 254
 7ac:	80 83       	st	Z, r24
 7ae:	e2 ee       	ldi	r30, 0xE2	; 226
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7b4:	81 60       	ori	r24, 0x01	; 1
 7b6:	80 83       	st	Z, r24
 7b8:	80 81       	ld	r24, Z
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7be:	f8 01       	movw	r30, r16
 7c0:	80 81       	ld	r24, Z
 7c2:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7c4:	80 83       	st	Z, r24
 7c6:	88 81       	ld	r24, Y
 7c8:	80 61       	ori	r24, 0x10	; 16
 7ca:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <USB_Init>:
 7d6:	e8 ed       	ldi	r30, 0xD8	; 216
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 7dc:	8f 7e       	andi	r24, 0xEF	; 239
 7de:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 7e0:	e7 ed       	ldi	r30, 0xD7	; 215
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	81 60       	ori	r24, 0x01	; 1
 7e8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
 7f0:	ad cf       	rjmp	.-166    	; 0x74c <USB_ResetInterface>

000007f2 <USB_INT_DisableAllInterrupts>:
 7f2:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	80 81       	ld	r24, Z
 7f8:	8c 7f       	andi	r24, 0xFC	; 252
 7fa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7fc:	10 92 e2 00 	sts	0x00E2, r1
 800:	08 95       	ret

00000802 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 802:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 806:	10 92 e1 00 	sts	0x00E1, r1
 80a:	08 95       	ret

0000080c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	0b b6       	in	r0, 0x3b	; 59
 818:	0f 92       	push	r0
 81a:	2f 93       	push	r18
 81c:	3f 93       	push	r19
 81e:	4f 93       	push	r20
 820:	5f 93       	push	r21
 822:	6f 93       	push	r22
 824:	7f 93       	push	r23
 826:	8f 93       	push	r24
 828:	9f 93       	push	r25
 82a:	af 93       	push	r26
 82c:	bf 93       	push	r27
 82e:	ef 93       	push	r30
 830:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 832:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 836:	82 ff       	sbrs	r24, 2
 838:	0a c0       	rjmp	.+20     	; 0x84e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 83a:	80 91 e2 00 	lds	r24, 0x00E2
 83e:	82 ff       	sbrs	r24, 2
 840:	06 c0       	rjmp	.+12     	; 0x84e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 842:	80 91 e1 00 	lds	r24, 0x00E1
 846:	8b 7f       	andi	r24, 0xFB	; 251
 848:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 84c:	fa d1       	rcall	.+1012   	; 0xc42 <USB_Event_Stub>
 84e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 852:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 854:	1d c0       	rjmp	.+58     	; 0x890 <__vector_10+0x84>
 856:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 85a:	80 ff       	sbrs	r24, 0
 85c:	19 c0       	rjmp	.+50     	; 0x890 <__vector_10+0x84>
 85e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 862:	8e 7f       	andi	r24, 0xFE	; 254
 864:	80 93 da 00 	sts	0x00DA, r24
 868:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 86c:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 86e:	0c c0       	rjmp	.+24     	; 0x888 <__vector_10+0x7c>
 870:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 872:	89 bd       	out	0x29, r24	; 41
 874:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 876:	89 bd       	out	0x29, r24	; 41
 878:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 87a:	00 fe       	sbrs	r0, 0
 87c:	fd cf       	rjmp	.-6      	; 0x878 <__vector_10+0x6c>
 87e:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 880:	80 93 5f 01 	sts	0x015F, r24
 884:	99 dc       	rcall	.-1742   	; 0x1b8 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 886:	04 c0       	rjmp	.+8      	; 0x890 <__vector_10+0x84>
 888:	19 bc       	out	0x29, r1	; 41
 88a:	10 92 5f 01 	sts	0x015F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 88e:	96 dc       	rcall	.-1748   	; 0x1bc <EVENT_USB_Device_Disconnect>
 890:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 894:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 896:	18 c0       	rjmp	.+48     	; 0x8c8 <__vector_10+0xbc>
 898:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 89c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 89e:	14 c0       	rjmp	.+40     	; 0x8c8 <__vector_10+0xbc>
 8a0:	80 91 e2 00 	lds	r24, 0x00E2
 8a4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8a6:	80 93 e2 00 	sts	0x00E2, r24
 8aa:	80 91 e2 00 	lds	r24, 0x00E2
 8ae:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8b0:	80 93 e2 00 	sts	0x00E2, r24
 8b4:	80 91 d8 00 	lds	r24, 0x00D8
 8b8:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8ba:	80 93 d8 00 	sts	0x00D8, r24
 8be:	19 bc       	out	0x29, r1	; 41
 8c0:	85 e0       	ldi	r24, 0x05	; 5
 8c2:	80 93 5f 01 	sts	0x015F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8c6:	bd d1       	rcall	.+890    	; 0xc42 <USB_Event_Stub>
 8c8:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 8cc:	84 ff       	sbrs	r24, 4
 8ce:	2f c0       	rjmp	.+94     	; 0x92e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8d0:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8d4:	84 ff       	sbrs	r24, 4
 8d6:	2b c0       	rjmp	.+86     	; 0x92e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 8d8:	8c e0       	ldi	r24, 0x0C	; 12
 8da:	89 bd       	out	0x29, r24	; 41
 8dc:	8e e0       	ldi	r24, 0x0E	; 14
 8de:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8e0:	09 b4       	in	r0, 0x29	; 41
 8e2:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <__vector_10+0xd4>
 8e6:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8ea:	8f 7d       	andi	r24, 0xDF	; 223
 8ec:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8f0:	80 91 e1 00 	lds	r24, 0x00E1
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 8fa:	80 91 e2 00 	lds	r24, 0x00E2
 8fe:	8f 7e       	andi	r24, 0xEF	; 239
 900:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 904:	80 91 e2 00 	lds	r24, 0x00E2
 908:	81 60       	ori	r24, 0x01	; 1
 90a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 90e:	80 91 5b 01 	lds	r24, 0x015B
 912:	88 23       	and	r24, r24
 914:	11 f0       	breq	.+4      	; 0x91a <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 916:	84 e0       	ldi	r24, 0x04	; 4
 918:	07 c0       	rjmp	.+14     	; 0x928 <__vector_10+0x11c>
 91a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 91e:	87 ff       	sbrs	r24, 7
 920:	02 c0       	rjmp	.+4      	; 0x926 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 922:	83 e0       	ldi	r24, 0x03	; 3
 924:	01 c0       	rjmp	.+2      	; 0x928 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	80 93 5f 01 	sts	0x015F, r24
 92c:	8a d1       	rcall	.+788    	; 0xc42 <USB_Event_Stub>
 92e:	80 91 e1 00 	lds	r24, 0x00E1
 932:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 934:	22 c0       	rjmp	.+68     	; 0x97a <__vector_10+0x16e>
 936:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 93a:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 93c:	1e c0       	rjmp	.+60     	; 0x97a <__vector_10+0x16e>
 93e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 942:	87 7f       	andi	r24, 0xF7	; 247
 944:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	80 93 5f 01 	sts	0x015F, r24
 94e:	10 92 5b 01 	sts	0x015B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 952:	80 91 e1 00 	lds	r24, 0x00E1
 956:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 958:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 95c:	80 91 e2 00 	lds	r24, 0x00E2
 960:	8e 7f       	andi	r24, 0xFE	; 254
 962:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 966:	80 91 e2 00 	lds	r24, 0x00E2
 96a:	80 61       	ori	r24, 0x10	; 16
 96c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 970:	42 e0       	ldi	r20, 0x02	; 2
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	64 de       	rcall	.-824    	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
 978:	64 d1       	rcall	.+712    	; 0xc42 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 97a:	ff 91       	pop	r31
 97c:	ef 91       	pop	r30
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 984:	8f 91       	pop	r24
 986:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 988:	6f 91       	pop	r22
 98a:	5f 91       	pop	r21
 98c:	4f 91       	pop	r20
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0b be       	out	0x3b, r0	; 59
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	1f 90       	pop	r1
 99e:	18 95       	reti

000009a0 <USB_Device_ProcessControlRequest>:
 9a0:	1f 93       	push	r17
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
 9aa:	aa 97       	sbiw	r28, 0x2a	; 42
 9ac:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9ae:	f8 94       	cli
 9b0:	de bf       	out	0x3e, r29	; 62
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	cd bf       	out	0x3d, r28	; 61
 9b6:	e0 e6       	ldi	r30, 0x60	; 96
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9ba:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9be:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9c0:	21 e0       	ldi	r18, 0x01	; 1
 9c2:	e8 36       	cpi	r30, 0x68	; 104
 9c4:	f2 07       	cpc	r31, r18
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9c8:	1b dc       	rcall	.-1994   	; 0x200 <EVENT_USB_Device_ControlRequest>
 9ca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ce:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9d0:	20 c1       	rjmp	.+576    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 9d2:	90 91 60 01 	lds	r25, 0x0160
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9d6:	80 91 61 01 	lds	r24, 0x0161

		switch (USB_ControlRequest.bRequest)
 9da:	85 30       	cpi	r24, 0x05	; 5
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0x40>
 9de:	77 c0       	rjmp	.+238    	; 0xace <USB_Device_ProcessControlRequest+0x12e>
 9e0:	30 f4       	brcc	.+12     	; 0x9ee <USB_Device_ProcessControlRequest+0x4e>
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	81 f1       	breq	.+96     	; 0xa46 <USB_Device_ProcessControlRequest+0xa6>
 9e6:	68 f0       	brcs	.+26     	; 0xa02 <USB_Device_ProcessControlRequest+0x62>
 9e8:	83 30       	cpi	r24, 0x03	; 3
 9ea:	69 f1       	breq	.+90     	; 0xa46 <USB_Device_ProcessControlRequest+0xa6>
 9ec:	12 c1       	rjmp	.+548    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 9ee:	88 30       	cpi	r24, 0x08	; 8
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0x54>
 9f2:	e1 c0       	rjmp	.+450    	; 0xbb6 <USB_Device_ProcessControlRequest+0x216>
 9f4:	89 30       	cpi	r24, 0x09	; 9
 9f6:	09 f4       	brne	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x5a>
 9f8:	f0 c0       	rjmp	.+480    	; 0xbda <USB_Device_ProcessControlRequest+0x23a>
 9fa:	86 30       	cpi	r24, 0x06	; 6
 9fc:	09 f0       	breq	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x60>
 9fe:	09 c1       	rjmp	.+530    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a00:	88 c0       	rjmp	.+272    	; 0xb12 <USB_Device_ProcessControlRequest+0x172>
 a02:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a04:	81 f0       	breq	.+32     	; 0xa26 <USB_Device_ProcessControlRequest+0x86>
 a06:	92 38       	cpi	r25, 0x82	; 130
 a08:	09 f0       	breq	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x6c>
 a0a:	03 c1       	rjmp	.+518    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a0c:	80 91 64 01 	lds	r24, 0x0164
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a10:	8f 70       	andi	r24, 0x0F	; 15
 a12:	80 93 e9 00 	sts	0x00E9, r24
 a16:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a1a:	85 fb       	bst	r24, 5
 a1c:	88 27       	eor	r24, r24
 a1e:	80 f9       	bld	r24, 0
 a20:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <USB_Device_ProcessControlRequest+0x92>
 a26:	80 91 5c 01 	lds	r24, 0x015C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a2a:	90 91 5d 01 	lds	r25, 0x015D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a2e:	91 11       	cpse	r25, r1
 a30:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a32:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a36:	97 7f       	andi	r25, 0xF7	; 247
 a38:	90 93 e8 00 	sts	0x00E8, r25
 a3c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a40:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a44:	c3 c0       	rjmp	.+390    	; 0xbcc <USB_Device_ProcessControlRequest+0x22c>
 a46:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a48:	2d 7f       	andi	r18, 0xFD	; 253
 a4a:	09 f0       	breq	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0xae>
 a4c:	e2 c0       	rjmp	.+452    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a4e:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a50:	19 f0       	breq	.+6      	; 0xa58 <USB_Device_ProcessControlRequest+0xb8>
 a52:	92 30       	cpi	r25, 0x02	; 2
 a54:	61 f0       	breq	.+24     	; 0xa6e <USB_Device_ProcessControlRequest+0xce>
 a56:	dd c0       	rjmp	.+442    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a58:	90 91 62 01 	lds	r25, 0x0162
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a5c:	91 30       	cpi	r25, 0x01	; 1
 a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0xc2>
 a60:	d8 c0       	rjmp	.+432    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a62:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a64:	09 f0       	breq	.+2      	; 0xa68 <USB_Device_ProcessControlRequest+0xc8>
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	90 93 5d 01 	sts	0x015D, r25
 a6c:	2a c0       	rjmp	.+84     	; 0xac2 <USB_Device_ProcessControlRequest+0x122>
 a6e:	90 91 62 01 	lds	r25, 0x0162

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a72:	91 11       	cpse	r25, r1
 a74:	26 c0       	rjmp	.+76     	; 0xac2 <USB_Device_ProcessControlRequest+0x122>
 a76:	20 91 64 01 	lds	r18, 0x0164
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a7a:	2f 70       	andi	r18, 0x0F	; 15
 a7c:	09 f4       	brne	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a7e:	c9 c0       	rjmp	.+402    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 a80:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a84:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a88:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a8a:	1b c0       	rjmp	.+54     	; 0xac2 <USB_Device_ProcessControlRequest+0x122>
 a8c:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a8e:	21 f4       	brne	.+8      	; 0xa98 <USB_Device_ProcessControlRequest+0xf8>
 a90:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a94:	80 62       	ori	r24, 0x20	; 32
 a96:	13 c0       	rjmp	.+38     	; 0xabe <USB_Device_ProcessControlRequest+0x11e>
 a98:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a9c:	80 61       	ori	r24, 0x10	; 16
 a9e:	80 93 eb 00 	sts	0x00EB, r24
 aa2:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	02 2e       	mov	r0, r18
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <USB_Device_ProcessControlRequest+0x10c>
 aaa:	88 0f       	add	r24, r24
 aac:	0a 94       	dec	r0
 aae:	ea f7       	brpl	.-6      	; 0xaaa <USB_Device_ProcessControlRequest+0x10a>
 ab0:	80 93 ea 00 	sts	0x00EA, r24
 ab4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 ab8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 abc:	88 60       	ori	r24, 0x08	; 8
 abe:	80 93 eb 00 	sts	0x00EB, r24
 ac2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ac6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aca:	87 7f       	andi	r24, 0xF7	; 247
 acc:	82 c0       	rjmp	.+260    	; 0xbd2 <USB_Device_ProcessControlRequest+0x232>
 ace:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ad0:	a0 c0       	rjmp	.+320    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 ad2:	10 91 62 01 	lds	r17, 0x0162
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 ad6:	1f 77       	andi	r17, 0x7F	; 127
 ad8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 adc:	80 78       	andi	r24, 0x80	; 128
 ade:	81 2b       	or	r24, r17
 ae0:	80 93 e3 00 	sts	0x00E3, r24
 ae4:	80 91 e8 00 	lds	r24, 0x00E8
 ae8:	87 7f       	andi	r24, 0xF7	; 247
 aea:	80 93 e8 00 	sts	0x00E8, r24
 aee:	dd dd       	rcall	.-1094   	; 0x6aa <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 af0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 af4:	80 ff       	sbrs	r24, 0
 af6:	fc cf       	rjmp	.-8      	; 0xaf0 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 af8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 afc:	80 68       	ori	r24, 0x80	; 128
 afe:	80 93 e3 00 	sts	0x00E3, r24
 b02:	11 23       	and	r17, r17
 b04:	11 f0       	breq	.+4      	; 0xb0a <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b06:	83 e0       	ldi	r24, 0x03	; 3
 b08:	01 c0       	rjmp	.+2      	; 0xb0c <USB_Device_ProcessControlRequest+0x16c>
 b0a:	82 e0       	ldi	r24, 0x02	; 2
 b0c:	80 93 5f 01 	sts	0x015F, r24
 b10:	80 c0       	rjmp	.+256    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b16:	08 f0       	brcs	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0x17a>
 b18:	7c c0       	rjmp	.+248    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 b1a:	80 91 62 01 	lds	r24, 0x0162
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b1e:	90 91 63 01 	lds	r25, 0x0163
 b22:	8c 3d       	cpi	r24, 0xDC	; 220
 b24:	23 e0       	ldi	r18, 0x03	; 3
 b26:	92 07       	cpc	r25, r18
 b28:	71 f5       	brne	.+92     	; 0xb86 <USB_Device_ProcessControlRequest+0x1e6>
 b2a:	83 e0       	ldi	r24, 0x03	; 3
 b2c:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b2e:	8a e2       	ldi	r24, 0x2A	; 42
 b30:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b32:	4f b7       	in	r20, 0x3f	; 63
 b34:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b36:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b38:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b3a:	20 e0       	ldi	r18, 0x00	; 0
 b3c:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b3e:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b40:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	50 93 57 00 	sts	0x0057, r21
 b48:	e4 91       	lpm	r30, Z
 b4a:	20 ff       	sbrs	r18, 0
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b4e:	e2 95       	swap	r30
 b50:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b52:	3f 5f       	subi	r19, 0xFF	; 255
 b54:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b56:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	ea 30       	cpi	r30, 0x0A	; 10
 b5c:	10 f0       	brcs	.+4      	; 0xb62 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b5e:	c7 96       	adiw	r24, 0x37	; 55
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x1c4>
 b62:	c0 96       	adiw	r24, 0x30	; 48
 b64:	8d 93       	st	X+, r24
 b66:	9d 93       	st	X+, r25
 b68:	2f 5f       	subi	r18, 0xFF	; 255
 b6a:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b6c:	49 f7       	brne	.-46     	; 0xb40 <USB_Device_ProcessControlRequest+0x1a0>
 b6e:	4f bf       	out	0x3f, r20	; 63
 b70:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b74:	87 7f       	andi	r24, 0xF7	; 247
 b76:	80 93 e8 00 	sts	0x00E8, r24
 b7a:	6a e2       	ldi	r22, 0x2A	; 42
 b7c:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b7e:	ce 01       	movw	r24, r28
 b80:	01 96       	adiw	r24, 0x01	; 1
 b82:	63 dc       	rcall	.-1850   	; 0x44a <Endpoint_Write_Control_Stream_LE>
 b84:	12 c0       	rjmp	.+36     	; 0xbaa <USB_Device_ProcessControlRequest+0x20a>
 b86:	ae 01       	movw	r20, r28
 b88:	4f 5f       	subi	r20, 0xFF	; 255
 b8a:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b8c:	60 91 64 01 	lds	r22, 0x0164
 b90:	e2 db       	rcall	.-2108   	; 0x356 <CALLBACK_USB_GetDescriptor>
 b92:	00 97       	sbiw	r24, 0x00	; 0
 b94:	09 f4       	brne	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x1f8>
 b96:	3d c0       	rjmp	.+122    	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 b98:	20 91 e8 00 	lds	r18, 0x00E8
 b9c:	27 7f       	andi	r18, 0xF7	; 247
 b9e:	20 93 e8 00 	sts	0x00E8, r18
 ba2:	bc 01       	movw	r22, r24
 ba4:	89 81       	ldd	r24, Y+1	; 0x01
 ba6:	9a 81       	ldd	r25, Y+2	; 0x02
 ba8:	eb dc       	rcall	.-1578   	; 0x580 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 baa:	80 91 e8 00 	lds	r24, 0x00E8
 bae:	8b 77       	andi	r24, 0x7B	; 123
 bb0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bb4:	2e c0       	rjmp	.+92     	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 bb6:	90 38       	cpi	r25, 0x80	; 128
 bb8:	61 f5       	brne	.+88     	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 bba:	80 91 e8 00 	lds	r24, 0x00E8
 bbe:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bc0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc4:	80 91 5b 01 	lds	r24, 0x015B
 bc8:	80 93 f1 00 	sts	0x00F1, r24
 bcc:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bd0:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bd2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bd6:	69 dd       	rcall	.-1326   	; 0x6aa <Endpoint_ClearStatusStage>
 bd8:	1c c0       	rjmp	.+56     	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 bda:	91 11       	cpse	r25, r1
 bdc:	1a c0       	rjmp	.+52     	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
 bde:	90 91 62 01 	lds	r25, 0x0162
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 be2:	92 30       	cpi	r25, 0x02	; 2
 be4:	b0 f4       	brcc	.+44     	; 0xc12 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 be6:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bea:	87 7f       	andi	r24, 0xF7	; 247
 bec:	80 93 e8 00 	sts	0x00E8, r24
 bf0:	90 93 5b 01 	sts	0x015B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf4:	5a dd       	rcall	.-1356   	; 0x6aa <Endpoint_ClearStatusStage>
 bf6:	80 91 5b 01 	lds	r24, 0x015B
 bfa:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bfc:	04 c0       	rjmp	.+8      	; 0xc06 <USB_Device_ProcessControlRequest+0x266>
 bfe:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c02:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <USB_Device_ProcessControlRequest+0x26a>
 c06:	84 e0       	ldi	r24, 0x04	; 4
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <USB_Device_ProcessControlRequest+0x26c>
 c0a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c0c:	80 93 5f 01 	sts	0x015F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c10:	d7 da       	rcall	.-2642   	; 0x1c0 <EVENT_USB_Device_ConfigurationChanged>
 c12:	80 91 e8 00 	lds	r24, 0x00E8
 c16:	83 ff       	sbrs	r24, 3
 c18:	0a c0       	rjmp	.+20     	; 0xc2e <USB_Device_ProcessControlRequest+0x28e>
 c1a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c1e:	87 7f       	andi	r24, 0xF7	; 247
 c20:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c24:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c28:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c2a:	80 93 eb 00 	sts	0x00EB, r24
 c2e:	aa 96       	adiw	r28, 0x2a	; 42
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c34:	de bf       	out	0x3e, r29	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	cd bf       	out	0x3d, r28	; 61
 c3a:	df 91       	pop	r29
 c3c:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c3e:	1f 91       	pop	r17
 c40:	08 95       	ret

00000c42 <USB_Event_Stub>:
 c42:	08 95       	ret

00000c44 <USB_USBTask>:
 c44:	cf 93       	push	r28
 c46:	80 91 5f 01 	lds	r24, 0x015F
 c4a:	88 23       	and	r24, r24
 c4c:	a9 f0       	breq	.+42     	; 0xc78 <USB_USBTask+0x34>
 c4e:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c52:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c54:	90 91 ec 00 	lds	r25, 0x00EC
 c58:	90 ff       	sbrs	r25, 0
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <USB_USBTask+0x1c>
 c5c:	90 e8       	ldi	r25, 0x80	; 128
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <USB_USBTask+0x1e>
 c60:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c62:	c9 2f       	mov	r28, r25
 c64:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c66:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c6a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c6e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c70:	97 de       	rcall	.-722    	; 0x9a0 <USB_Device_ProcessControlRequest>
 c72:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c74:	c0 93 e9 00 	sts	0x00E9, r28
 c78:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c7a:	08 95       	ret

00000c7c <_exit>:
 c7c:	f8 94       	cli

00000c7e <__stop_program>:
 c7e:	ff cf       	rjmp	.-2      	; 0xc7e <__stop_program>

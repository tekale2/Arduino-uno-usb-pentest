
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001b22  00001bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080014a  0080014a  00001c00  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005697  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f2a6  00000000  00000000  00005f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036ff  00000000  00000000  000151e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055b0  00000000  00000000  000188e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001830  00000000  00000000  0001de98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f4d  00000000  00000000  0001f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000acc8  00000000  00000000  00024615  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f2dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c6       	rjmp	.+3104   	; 0xc4a <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4568>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4561>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4556>:
     11d:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4554>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     14a:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15a:	2e 0d 0a 00                                         ....

0000015e <__c.4552>:
     15e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
				ReportSize     -= 1;
				ReportData     += 1;
     17e:	6f 6e 2e 0d 0a 00                                   on....

00000184 <__c.4550>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     194:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1a4:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
     1b4:	2e 0d 0a 00                                         ....

000001b8 <__c.4548>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e5 <__c.4541>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f5:	68 65 64 2e 0d 0a 00                                hed....

000001fc <__c.4536>:
     1fc:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20c:	0d 0a 00                                            ...

0000020f <__c.4531>:
     20f:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     21f:	0a 00                                               ..

00000221 <__c.4529>:
     221:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     231:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

0000023c <__c.4527>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23c:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     24c:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     25c:	0a 00                                               ..

0000025e <__c.4523>:
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     26e:	00                                                  .

0000026f <__c.4521>:
     26f:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27f:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

0000028a <__c.4518>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28a:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29a:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000002a4 <__c.4509>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a4:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b4:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c4:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002cc <__ctors_end>:
				break;
     2cc:	11 24       	eor	r1, r1
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
				break;
     2d4:	de bf       	out	0x3e, r29	; 62

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0

				if (ParserData->UsingReportIDs)
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e2 e2       	ldi	r30, 0x22	; 34
     2e0:	fb e1       	ldi	r31, 0x1B	; 27
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	aa 34       	cpi	r26, 0x4A	; 74
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	aa e4       	ldi	r26, 0x4A	; 74
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ac 36       	cpi	r26, 0x6C	; 108
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	ae d0       	rcall	.+348    	; 0x460 <main>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <LEDs_SetAllLEDs>:
     30a:	9b b1       	in	r25, 0x0b	; 11
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 2b       	or	r25, r24
     310:	9b b9       	out	0x0b, r25	; 11
     312:	08 95       	ret

00000314 <SetupHardware>:
     314:	84 b7       	in	r24, 0x34	; 52
     316:	87 7f       	andi	r24, 0xF7	; 247
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	84 bf       	out	0x34, r24	; 52
     31a:	88 e1       	ldi	r24, 0x18	; 24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	80 93 60 00 	sts	0x0060, r24
     324:	10 92 60 00 	sts	0x0060, r1
     328:	0f be       	out	0x3f, r0	; 63
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	80 93 61 00 	sts	0x0061, r24
     336:	90 93 61 00 	sts	0x0061, r25
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	83 e3       	ldi	r24, 0x33	; 51
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25
     344:	80 93 cc 00 	sts	0x00CC, r24
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 ca 00 	sts	0x00CA, r24
     34e:	10 92 c8 00 	sts	0x00C8, r1
     352:	88 e1       	ldi	r24, 0x18	; 24
     354:	80 93 c9 00 	sts	0x00C9, r24
     358:	53 9a       	sbi	0x0a, 3	; 10
     35a:	5a 9a       	sbi	0x0b, 2	; 11
     35c:	8a b1       	in	r24, 0x0a	; 10
     35e:	80 6f       	ori	r24, 0xF0	; 240
     360:	8a b9       	out	0x0a, r24	; 10
     362:	8b b1       	in	r24, 0x0b	; 11
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	8b b9       	out	0x0b, r24	; 11
     368:	55 d4       	rcall	.+2218   	; 0xc14 <USB_Init>
     36a:	80 e0       	ldi	r24, 0x00	; 0
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <Serial_CreateStream>

00000372 <PrinterHost_Task>:
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	c5 55       	subi	r28, 0x55	; 85
     384:	d1 40       	sbci	r29, 0x01	; 1
     386:	0f b6       	in	r0, 0x3f	; 63
				break;
     388:	f8 94       	cli

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	80 91 57 01 	lds	r24, 0x0157
     394:	8b 30       	cpi	r24, 0x0B	; 11
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	09 f0       	breq	.+2      	; 0x39a <PrinterHost_Task+0x28>
     398:	55 c0       	rjmp	.+170    	; 0x444 <PrinterHost_Task+0xd2>
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	b6 df       	rcall	.-148    	; 0x30a <LEDs_SetAllLEDs>
     39e:	8a e8       	ldi	r24, 0x8A	; 138
     3a0:	92 e0       	ldi	r25, 0x02	; 2
     3a2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     3a6:	4c e2       	ldi	r20, 0x2C	; 44
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	8e 01       	movw	r16, r28
     3ac:	0f 5f       	subi	r16, 0xFF	; 255
     3ae:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
     3b0:	b8 01       	movw	r22, r16
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <PRNT_Host_GetDeviceID>
     3ba:	88 23       	and	r24, r24
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <PrinterHost_Task+0x52>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	8f e6       	ldi	r24, 0x6F	; 111
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	34 c0       	rjmp	.+104    	; 0x42c <PrinterHost_Task+0xba>
     3c4:	1f 93       	push	r17
     3c6:	0f 93       	push	r16
     3c8:	8e e5       	ldi	r24, 0x5E	; 94
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	9f 93       	push	r25
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	8f 93       	push	r24
     3d0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <printf_P>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	7e 01       	movw	r14, r28
     3d6:	23 ed       	ldi	r18, 0xD3	; 211
     3d8:	e2 1a       	sub	r14, r18
     3da:	2e ef       	ldi	r18, 0xFE	; 254
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	f2 0a       	sbc	r15, r18
     3de:	89 e2       	ldi	r24, 0x29	; 41
     3e0:	e0 e2       	ldi	r30, 0x20	; 32
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	d7 01       	movw	r26, r14
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	8a 95       	dec	r24
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <PrinterHost_Task+0x74>
     3ee:	f7 01       	movw	r30, r14
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	01 90       	ld	r0, Z+
     3f2:	00 20       	and	r0, r0
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	e9 f7       	brne	.-6      	; 0x3f0 <PrinterHost_Task+0x7e>
     3f6:	8f 01       	movw	r16, r30
     3f8:	01 50       	subi	r16, 0x01	; 1
     3fa:	11 09       	sbc	r17, r1
     3fc:	0e 19       	sub	r16, r14
     3fe:	1f 09       	sbc	r17, r15
     400:	1f 93       	push	r17
     402:	0f 93       	push	r16
     404:	8c e3       	ldi	r24, 0x3C	; 60
     406:	92 e0       	ldi	r25, 0x02	; 2
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <printf_P>
     410:	a8 01       	movw	r20, r16
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	b7 01       	movw	r22, r14
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	c4 d7       	rcall	.+3976   	; 0x13a2 <PRNT_Host_SendData>
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62

				if (UsageListSize)
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	88 23       	and	r24, r24
     426:	31 f0       	breq	.+12     	; 0x434 <PrinterHost_Task+0xc2>
     428:	81 e2       	ldi	r24, 0x21	; 33
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     430:	80 e9       	ldi	r24, 0x90	; 144
     432:	05 c0       	rjmp	.+10     	; 0x43e <PrinterHost_Task+0xcc>
     434:	8f e0       	ldi	r24, 0x0F	; 15
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     43c:	80 e6       	ldi	r24, 0x60	; 96
     43e:	65 df       	rcall	.-310    	; 0x30a <LEDs_SetAllLEDs>

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	61 d6       	rcall	.+3266   	; 0x1106 <USB_Host_SetDeviceConfiguration>
     444:	cb 5a       	subi	r28, 0xAB	; 171
     446:	de 4f       	sbci	r29, 0xFE	; 254
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
					  UsageList[i - 1] = UsageList[i];
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	df 91       	pop	r29

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	0f 91       	pop	r16
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	08 95       	ret

00000460 <main>:
     460:	59 df       	rcall	.-334    	; 0x314 <SetupHardware>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	84 ea       	ldi	r24, 0xA4	; 164
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     46a:	80 e1       	ldi	r24, 0x10	; 16
     46c:	4e df       	rcall	.-356    	; 0x30a <LEDs_SetAllLEDs>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	78 94       	sei
     470:	80 df       	rcall	.-256    	; 0x372 <PrinterHost_Task>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	8c d7       	rcall	.+3864   	; 0x1390 <PRNT_Host_USBTask>
     478:	86 d6       	rcall	.+3340   	; 0x1186 <USB_USBTask>
     47a:	fa cf       	rjmp	.-12     	; 0x470 <main+0x10>

0000047c <EVENT_USB_Host_DeviceAttached>:
     47c:	8c ef       	ldi	r24, 0xFC	; 252
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	41 cf       	rjmp	.-382    	; 0x30a <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceUnattached>:
     488:	85 ee       	ldi	r24, 0xE5	; 229
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     490:	80 e1       	ldi	r24, 0x10	; 16
     492:	3b cf       	rjmp	.-394    	; 0x30a <LEDs_SetAllLEDs>

00000494 <EVENT_USB_Host_DeviceEnumerationComplete>:
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	c2 50       	subi	r28, 0x02	; 2
     49e:	d2 40       	sbci	r29, 0x02	; 2
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
				break;
     4ac:	2e df       	rcall	.-420    	; 0x30a <LEDs_SetAllLEDs>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	ae 01       	movw	r20, r28
     4b4:	4f 5f       	subi	r20, 0xFF	; 255
     4b6:	5f 4f       	sbci	r21, 0xFF	; 255
     4b8:	be 01       	movw	r22, r28
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7d 4f       	sbci	r23, 0xFD	; 253
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	73 d4       	rcall	.+2278   	; 0xda8 <USB_Host_GetDeviceConfigDescriptor>
     4c2:	88 23       	and	r24, r24
     4c4:	19 f0       	breq	.+6      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     4c6:	88 eb       	ldi	r24, 0xB8	; 184
     4c8:	91 e0       	ldi	r25, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	17 c0       	rjmp	.+46     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4cc:	cf 5f       	subi	r28, 0xFF	; 255
     4ce:	dd 4f       	sbci	r29, 0xFD	; 253
     4d0:	68 81       	ld	r22, Y
     4d2:	79 81       	ldd	r23, Y+1	; 0x01
     4d4:	c1 50       	subi	r28, 0x01	; 1
     4d6:	d2 40       	sbci	r29, 0x02	; 2
     4d8:	ae 01       	movw	r20, r28
     4da:	4f 5f       	subi	r20, 0xFF	; 255
     4dc:	5f 4f       	sbci	r21, 0xFF	; 255
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	7f d6       	rcall	.+3326   	; 0x11e2 <PRNT_Host_ConfigurePipes>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	88 23       	and	r24, r24
     4e6:	19 f0       	breq	.+6      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     4e8:	84 e8       	ldi	r24, 0x84	; 132
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	0a d6       	rcall	.+3092   	; 0x1106 <USB_Host_SetDeviceConfiguration>
     4f2:	88 23       	and	r24, r24
     4f4:	31 f0       	breq	.+12     	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     4f6:	8e e5       	ldi	r24, 0x5E	; 94
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     4fe:	80 e9       	ldi	r24, 0x90	; 144
     500:	13 c0       	rjmp	.+38     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	91 e0       	ldi	r25, 0x01	; 1
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	0a d7       	rcall	.+3604   	; 0x131c <PRNT_Host_SetBidirectionalMode>
     508:	88 23       	and	r24, r24
     50a:	49 f0       	breq	.+18     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     50c:	8a e3       	ldi	r24, 0x3A	; 58
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     514:	80 e9       	ldi	r24, 0x90	; 144
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	f9 de       	rcall	.-526    	; 0x30a <LEDs_SetAllLEDs>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	f5 d5       	rcall	.+3050   	; 0x1106 <USB_Host_SetDeviceConfiguration>
     51c:	06 c0       	rjmp	.+12     	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x96>

					if (UsageListSize)
     51e:	8d e1       	ldi	r24, 0x1D	; 29
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 cc 0a 	call	0x1598	; 0x1598 <puts_P>
     526:	80 e6       	ldi	r24, 0x60	; 96
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	f0 de       	rcall	.-544    	; 0x30a <LEDs_SetAllLEDs>
     52a:	ce 5f       	subi	r28, 0xFE	; 254
     52c:	dd 4f       	sbci	r29, 0xFD	; 253
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <EVENT_USB_Host_HostError>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	89 83       	std	Y+1, r24	; 0x01
						  UsageList[i - 1] = UsageList[i];
     54a:	fc d2       	rcall	.+1528   	; 0xb44 <USB_Disable>
     54c:	1f 92       	push	r1
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	8f 93       	push	r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8e ee       	ldi	r24, 0xEE	; 238
     554:	90 e0       	ldi	r25, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	fb d7       	rcall	.+4086   	; 0x1552 <printf_P>
     55c:	80 e9       	ldi	r24, 0x90	; 144
     55e:	d5 de       	rcall	.-598    	; 0x30a <LEDs_SetAllLEDs>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	ff cf       	rjmp	.-2      	; 0x568 <EVENT_USB_Host_HostError+0x2a>

0000056a <EVENT_USB_Host_DeviceEnumerationFailed>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	90 91 57 01 	lds	r25, 0x0157
     56e:	1f 92       	push	r1
     570:	9f 93       	push	r25
     572:	1f 92       	push	r1
     574:	6f 93       	push	r22
     576:	1f 92       	push	r1
     578:	8f 93       	push	r24
     57a:	88 e9       	ldi	r24, 0x98	; 152
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9f 93       	push	r25
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	8f 93       	push	r24
     582:	e7 d7       	rcall	.+4046   	; 0x1552 <printf_P>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	8d b7       	in	r24, 0x3d	; 61
     586:	9e b7       	in	r25, 0x3e	; 62
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	08 96       	adiw	r24, 0x08	; 8
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	9e bf       	out	0x3e, r25	; 62
     590:	0f be       	out	0x3f, r0	; 63

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	8d bf       	out	0x3d, r24	; 61
     594:	80 e9       	ldi	r24, 0x90	; 144
     596:	b9 ce       	rjmp	.-654    	; 0x30a <LEDs_SetAllLEDs>

00000598 <USB_Host_ResetDevice>:
     598:	80 91 9e 00 	lds	r24, 0x009E
     59c:	81 70       	andi	r24, 0x01	; 1
     59e:	90 91 a0 00 	lds	r25, 0x00A0
     5a2:	9d 7f       	andi	r25, 0xFD	; 253
     5a4:	90 93 a0 00 	sts	0x00A0, r25
     5a8:	90 91 9e 00 	lds	r25, 0x009E

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	92 60       	ori	r25, 0x02	; 2
     5ae:	90 93 9e 00 	sts	0x009E, r25
     5b2:	90 91 9e 00 	lds	r25, 0x009E
     5b6:	91 fd       	sbrc	r25, 1
     5b8:	fc cf       	rjmp	.-8      	; 0x5b2 <USB_Host_ResetDevice+0x1a>
     5ba:	90 91 9e 00 	lds	r25, 0x009E

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	91 60       	ori	r25, 0x01	; 1
     5c0:	90 93 9e 00 	sts	0x009E, r25
     5c4:	10 92 4d 01 	sts	0x014D, r1
     5c8:	90 91 a0 00 	lds	r25, 0x00A0
     5cc:	90 72       	andi	r25, 0x20	; 32
     5ce:	20 91 a0 00 	lds	r18, 0x00A0
     5d2:	2f 7d       	andi	r18, 0xDF	; 223
     5d4:	20 93 a0 00 	sts	0x00A0, r18
     5d8:	20 91 9f 00 	lds	r18, 0x009F
     5dc:	2f 7d       	andi	r18, 0xDF	; 223
     5de:	20 93 9f 00 	sts	0x009F, r18
     5e2:	2a e0       	ldi	r18, 0x0A	; 10
     5e4:	30 91 9f 00 	lds	r19, 0x009F
     5e8:	35 ff       	sbrs	r19, 5
     5ea:	0b c0       	rjmp	.+22     	; 0x602 <USB_Host_ResetDevice+0x6a>
     5ec:	20 91 9f 00 	lds	r18, 0x009F
     5f0:	2f 7d       	andi	r18, 0xDF	; 223
     5f2:	20 93 9f 00 	sts	0x009F, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f6:	20 91 9f 00 	lds	r18, 0x009F
     5fa:	2d 7f       	andi	r18, 0xFD	; 253
     5fc:	20 93 9f 00 	sts	0x009F, r18
					  return HID_PARSE_InsufficientReportItems;
     600:	08 c0       	rjmp	.+16     	; 0x612 <USB_Host_ResetDevice+0x7a>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	ef ec       	ldi	r30, 0xCF	; 207
     604:	f7 e0       	ldi	r31, 0x07	; 7
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <USB_Host_ResetDevice+0x6e>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <USB_Host_ResetDevice+0x74>
     60c:	00 00       	nop
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	49 f7       	brne	.-46     	; 0x5e4 <USB_Host_ResetDevice+0x4c>
     612:	99 23       	and	r25, r25
     614:	29 f0       	breq	.+10     	; 0x620 <USB_Host_ResetDevice+0x88>
     616:	90 91 a0 00 	lds	r25, 0x00A0
     61a:	90 62       	ori	r25, 0x20	; 32
     61c:	90 93 a0 00 	sts	0x00A0, r25
     620:	81 11       	cpse	r24, r1
     622:	05 c0       	rjmp	.+10     	; 0x62e <USB_Host_ResetDevice+0x96>
     624:	80 91 9e 00 	lds	r24, 0x009E
     628:	8e 7f       	andi	r24, 0xFE	; 254
     62a:	80 93 9e 00 	sts	0x009E, r24
     62e:	80 91 a0 00 	lds	r24, 0x00A0
     632:	82 60       	ori	r24, 0x02	; 2
     634:	80 93 a0 00 	sts	0x00A0, r24
     638:	08 95       	ret

0000063a <USB_Host_WaitMS>:
     63a:	20 91 9e 00 	lds	r18, 0x009E
     63e:	21 70       	andi	r18, 0x01	; 1
     640:	90 91 a0 00 	lds	r25, 0x00A0
     644:	90 72       	andi	r25, 0x20	; 32
     646:	30 91 a0 00 	lds	r19, 0x00A0
     64a:	3f 7d       	andi	r19, 0xDF	; 223
     64c:	30 93 a0 00 	sts	0x00A0, r19
     650:	30 91 9f 00 	lds	r19, 0x009F
     654:	3f 7d       	andi	r19, 0xDF	; 223
     656:	30 93 9f 00 	sts	0x009F, r19
     65a:	30 91 9e 00 	lds	r19, 0x009E
     65e:	31 60       	ori	r19, 0x01	; 1
     660:	30 93 9e 00 	sts	0x009E, r19
     664:	88 23       	and	r24, r24
     666:	39 f1       	breq	.+78     	; 0x6b6 <USB_Host_WaitMS+0x7c>
     668:	30 91 9f 00 	lds	r19, 0x009F
     66c:	35 ff       	sbrs	r19, 5
     66e:	06 c0       	rjmp	.+12     	; 0x67c <USB_Host_WaitMS+0x42>
     670:	30 91 9f 00 	lds	r19, 0x009F
     674:	3f 7d       	andi	r19, 0xDF	; 223
     676:	30 93 9f 00 	sts	0x009F, r19
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	30 91 57 01 	lds	r19, 0x0157
     680:	31 30       	cpi	r19, 0x01	; 1
     682:	c1 f0       	breq	.+48     	; 0x6b4 <USB_Host_WaitMS+0x7a>
     684:	30 91 a6 00 	lds	r19, 0x00A6
					  ParserData->TotalReportItems++;
     688:	34 ff       	sbrs	r19, 4
     68a:	09 c0       	rjmp	.+18     	; 0x69e <USB_Host_WaitMS+0x64>
     68c:	10 92 f5 00 	sts	0x00F5, r1
     690:	80 91 a6 00 	lds	r24, 0x00A6

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     694:	8f 7e       	andi	r24, 0xEF	; 239
     696:	80 93 a6 00 	sts	0x00A6, r24
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0c c0       	rjmp	.+24     	; 0x6b6 <USB_Host_WaitMS+0x7c>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	30 91 a6 00 	lds	r19, 0x00A6
     6a2:	31 ff       	sbrs	r19, 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	df cf       	rjmp	.-66     	; 0x664 <USB_Host_WaitMS+0x2a>
     6a6:	80 91 a6 00 	lds	r24, 0x00A6
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	8d 7f       	andi	r24, 0xFD	; 253
     6ac:	80 93 a6 00 	sts	0x00A6, r24
     6b0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <USB_Host_WaitMS+0x7c>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	21 11       	cpse	r18, r1
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <USB_Host_WaitMS+0x8a>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	20 91 9e 00 	lds	r18, 0x009E

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	2e 7f       	andi	r18, 0xFE	; 254
     6c0:	20 93 9e 00 	sts	0x009E, r18
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	99 23       	and	r25, r25
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	29 f0       	breq	.+10     	; 0x6d2 <USB_Host_WaitMS+0x98>
     6c8:	90 91 a0 00 	lds	r25, 0x00A0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6cc:	90 62       	ori	r25, 0x20	; 32

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	90 93 a0 00 	sts	0x00A0, r25
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	08 95       	ret

000006d4 <USB_Host_ProcessNextHostState>:
     6d4:	0f 93       	push	r16
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	1f 93       	push	r17

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	28 97       	sbiw	r28, 0x08	; 8
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	80 91 57 01 	lds	r24, 0x0157
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <USB_Host_ProcessNextHostState+0x22>
     6f4:	9c c0       	rjmp	.+312    	; 0x82e <USB_Host_ProcessNextHostState+0x15a>
     6f6:	68 f4       	brcc	.+26     	; 0x712 <USB_Host_ProcessNextHostState+0x3e>
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	e1 f1       	breq	.+120    	; 0x774 <USB_Host_ProcessNextHostState+0xa0>
     6fc:	18 f4       	brcc	.+6      	; 0x704 <USB_Host_ProcessNextHostState+0x30>
     6fe:	88 23       	and	r24, r24
     700:	d9 f0       	breq	.+54     	; 0x738 <USB_Host_ProcessNextHostState+0x64>
     702:	ff c0       	rjmp	.+510    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     704:	83 30       	cpi	r24, 0x03	; 3
     706:	09 f4       	brne	.+2      	; 0x70a <USB_Host_ProcessNextHostState+0x36>
     708:	3f c0       	rjmp	.+126    	; 0x788 <USB_Host_ProcessNextHostState+0xb4>
     70a:	84 30       	cpi	r24, 0x04	; 4
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     70c:	09 f4       	brne	.+2      	; 0x710 <USB_Host_ProcessNextHostState+0x3c>
     70e:	67 c0       	rjmp	.+206    	; 0x7de <USB_Host_ProcessNextHostState+0x10a>
     710:	f8 c0       	rjmp	.+496    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     712:	87 30       	cpi	r24, 0x07	; 7
     714:	09 f4       	brne	.+2      	; 0x718 <USB_Host_ProcessNextHostState+0x44>
     716:	a6 c0       	rjmp	.+332    	; 0x864 <USB_Host_ProcessNextHostState+0x190>
     718:	08 f4       	brcc	.+2      	; 0x71c <USB_Host_ProcessNextHostState+0x48>
     71a:	96 c0       	rjmp	.+300    	; 0x848 <USB_Host_ProcessNextHostState+0x174>
     71c:	88 30       	cpi	r24, 0x08	; 8
     71e:	09 f4       	brne	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x4e>
     720:	bf c0       	rjmp	.+382    	; 0x8a0 <USB_Host_ProcessNextHostState+0x1cc>
     722:	89 30       	cpi	r24, 0x09	; 9
     724:	09 f0       	breq	.+2      	; 0x728 <USB_Host_ProcessNextHostState+0x54>
     726:	ed c0       	rjmp	.+474    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     72e:	8a e0       	ldi	r24, 0x0A	; 10
     730:	80 93 57 01 	sts	0x0157, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     734:	af de       	rcall	.-674    	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete>
     736:	e5 c0       	rjmp	.+458    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
			break;
     738:	00 91 4b 01 	lds	r16, 0x014B
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     73c:	10 91 4c 01 	lds	r17, 0x014C
     740:	01 15       	cp	r16, r1
     742:	11 05       	cpc	r17, r1
     744:	09 f4       	brne	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x74>
     746:	dd c0       	rjmp	.+442    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     748:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     74a:	77 df       	rcall	.-274    	; 0x63a <USB_Host_WaitMS>
     74c:	88 23       	and	r24, r24
     74e:	31 f0       	breq	.+12     	; 0x75c <USB_Host_ProcessNextHostState+0x88>
     750:	90 91 4a 01 	lds	r25, 0x014A
				{
					USB_HostState = PostWaitState;
     754:	90 93 57 01 	sts	0x0157, r25
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	c5 c0       	rjmp	.+394    	; 0x8e6 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     75c:	01 50       	subi	r16, 0x01	; 1
					break;
     75e:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     760:	10 93 4c 01 	sts	0x014C, r17
     764:	00 93 4b 01 	sts	0x014B, r16
     768:	01 2b       	or	r16, r17
     76a:	09 f0       	breq	.+2      	; 0x76e <USB_Host_ProcessNextHostState+0x9a>
     76c:	ca c0       	rjmp	.+404    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     76e:	80 91 4a 01 	lds	r24, 0x014A
				  USB_HostState = PostWaitState;
     772:	07 c0       	rjmp	.+14     	; 0x782 <USB_Host_ProcessNextHostState+0xae>
     774:	88 ee       	ldi	r24, 0xE8	; 232
     776:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     778:	90 93 4c 01 	sts	0x014C, r25
     77c:	80 93 4b 01 	sts	0x014B, r24
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	80 93 57 01 	sts	0x0157, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     786:	bd c0       	rjmp	.+378    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     788:	80 91 4b 01 	lds	r24, 0x014B
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     78c:	90 91 4c 01 	lds	r25, 0x014C
     790:	9c 01       	movw	r18, r24
     792:	21 50       	subi	r18, 0x01	; 1
     794:	31 09       	sbc	r19, r1
     796:	30 93 4c 01 	sts	0x014C, r19
     79a:	20 93 4b 01 	sts	0x014B, r18
     79e:	89 2b       	or	r24, r25
     7a0:	39 f0       	breq	.+14     	; 0x7b0 <USB_Host_ProcessNextHostState+0xdc>
     7a2:	8f ec       	ldi	r24, 0xCF	; 207
     7a4:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <USB_Host_ProcessNextHostState+0xd2>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <USB_Host_ProcessNextHostState+0xd8>
     7ac:	00 00       	nop
     7ae:	a9 c0       	rjmp	.+338    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     7b0:	77 98       	cbi	0x0e, 7	; 14
     7b2:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7b6:	80 61       	ori	r24, 0x10	; 16
     7b8:	80 93 d8 00 	sts	0x00D8, r24
     7bc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7c0:	8b 7f       	andi	r24, 0xFB	; 251
     7c2:	80 93 dd 00 	sts	0x00DD, r24
     7c6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     7ca:	80 61       	ori	r24, 0x10	; 16
     7cc:	80 93 d7 00 	sts	0x00D7, r24
     7d0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7d4:	82 60       	ori	r24, 0x02	; 2
     7d6:	80 93 dd 00 	sts	0x00DD, r24
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	d2 cf       	rjmp	.-92     	; 0x782 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7de:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7e2:	80 ff       	sbrs	r24, 0
     7e4:	8e c0       	rjmp	.+284    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7e6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	80 93 9f 00 	sts	0x009F, r24
     7f0:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7f4:	8d 7f       	andi	r24, 0xFD	; 253
     7f6:	80 93 9f 00 	sts	0x009F, r24
     7fa:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7fe:	8d 7f       	andi	r24, 0xFD	; 253
     800:	80 93 df 00 	sts	0x00DF, r24
     804:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     808:	82 60       	ori	r24, 0x02	; 2
     80a:	80 93 de 00 	sts	0x00DE, r24
     80e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     812:	81 60       	ori	r24, 0x01	; 1
     814:	80 93 9e 00 	sts	0x009E, r24
     818:	53 d1       	rcall	.+678    	; 0xac0 <Pipe_ClearPipes>
     81a:	10 92 57 01 	sts	0x0157, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     81e:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 4c 01 	sts	0x014C, r25
     826:	80 93 4b 01 	sts	0x014B, r24
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	0a c0       	rjmp	.+20     	; 0x842 <USB_Host_ProcessNextHostState+0x16e>
     82e:	b4 de       	rcall	.-664    	; 0x598 <USB_Host_ResetDevice>
     830:	10 92 57 01 	sts	0x0157, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     834:	88 ec       	ldi	r24, 0xC8	; 200
     836:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     838:	90 93 4c 01 	sts	0x014C, r25
     83c:	80 93 4b 01 	sts	0x014B, r24
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	80 93 4a 01 	sts	0x014A, r24
     846:	5d c0       	rjmp	.+186    	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     848:	01 e0       	ldi	r16, 0x01	; 1
     84a:	20 e4       	ldi	r18, 0x40	; 64
     84c:	30 e0       	ldi	r19, 0x00	; 0
			break;
     84e:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	ae d0       	rcall	.+348    	; 0x9b2 <Pipe_ConfigurePipe>
     856:	81 11       	cpse	r24, r1
     858:	03 c0       	rjmp	.+6      	; 0x860 <USB_Host_ProcessNextHostState+0x18c>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	94 e0       	ldi	r25, 0x04	; 4
     85e:	43 c0       	rjmp	.+134    	; 0x8e6 <USB_Host_ProcessNextHostState+0x212>
     860:	87 e0       	ldi	r24, 0x07	; 7
     862:	8f cf       	rjmp	.-226    	; 0x782 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     864:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     866:	e0 e1       	ldi	r30, 0x10	; 16
     868:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     86a:	af e4       	ldi	r26, 0x4F	; 79
     86c:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     86e:	01 90       	ld	r0, Z+
     870:	0d 92       	st	X+, r0
     872:	8a 95       	dec	r24
     874:	e1 f7       	brne	.-8      	; 0x86e <USB_Host_ProcessNextHostState+0x19a>
     876:	10 92 a7 00 	sts	0x00A7, r1
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	48 d3       	rcall	.+1680   	; 0xf10 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     880:	81 11       	cpse	r24, r1
     882:	30 c0       	rjmp	.+96     	; 0x8e4 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     884:	88 85       	ldd	r24, Y+8	; 0x08
     886:	80 93 0f 01 	sts	0x010F, r24
     88a:	86 de       	rcall	.-756    	; 0x598 <USB_Host_ResetDevice>
     88c:	10 92 57 01 	sts	0x0157, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     890:	88 ec       	ldi	r24, 0xC8	; 200
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	90 93 4c 01 	sts	0x014C, r25

			USB_Host_ResetDevice();
     898:	80 93 4b 01 	sts	0x014B, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     89c:	88 e0       	ldi	r24, 0x08	; 8
     89e:	d1 cf       	rjmp	.-94     	; 0x842 <USB_Host_ProcessNextHostState+0x16e>
     8a0:	20 91 0f 01 	lds	r18, 0x010F
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	01 e0       	ldi	r16, 0x01	; 1
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8ae:	81 d0       	rcall	.+258    	; 0x9b2 <Pipe_ConfigurePipe>
     8b0:	88 23       	and	r24, r24
     8b2:	99 f2       	breq	.-90     	; 0x85a <USB_Host_ProcessNextHostState+0x186>
     8b4:	88 e0       	ldi	r24, 0x08	; 8
     8b6:	e8 e1       	ldi	r30, 0x18	; 24
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	af e4       	ldi	r26, 0x4F	; 79
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	01 90       	ld	r0, Z+
     8c0:	0d 92       	st	X+, r0
     8c2:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8c4:	e1 f7       	brne	.-8      	; 0x8be <USB_Host_ProcessNextHostState+0x1ea>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	22 d3       	rcall	.+1604   	; 0xf10 <USB_Host_SendControlRequest>
     8cc:	81 11       	cpse	r24, r1
     8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <USB_Host_ProcessNextHostState+0x210>
     8d0:	10 92 57 01 	sts	0x0157, r1
     8d4:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 4c 01 	sts	0x014C, r25
     8dc:	80 93 4b 01 	sts	0x014B, r24
     8e0:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8e2:	af cf       	rjmp	.-162    	; 0x842 <USB_Host_ProcessNextHostState+0x16e>
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	20 91 57 01 	lds	r18, 0x0157
     8ea:	21 30       	cpi	r18, 0x01	; 1
     8ec:	51 f0       	breq	.+20     	; 0x902 <USB_Host_ProcessNextHostState+0x22e>
     8ee:	68 2f       	mov	r22, r24
     8f0:	89 2f       	mov	r24, r25
     8f2:	3b de       	rcall	.-906    	; 0x56a <EVENT_USB_Host_DeviceEnumerationFailed>
     8f4:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8f8:	81 60       	ori	r24, 0x01	; 1
     8fa:	80 93 dd 00 	sts	0x00DD, r24
     8fe:	c4 dd       	rcall	.-1144   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     900:	39 d1       	rcall	.+626    	; 0xb74 <USB_ResetInterface>
     902:	28 96       	adiw	r28, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16

		USB_ResetInterface();
     916:	08 95       	ret

00000918 <Pipe_Write_Stream_LE>:
     918:	cf 92       	push	r12
	}
}
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	7c 01       	movw	r14, r24
     92a:	8b 01       	movw	r16, r22
     92c:	ea 01       	movw	r28, r20
     92e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     932:	8f 7c       	andi	r24, 0xCF	; 207
     934:	80 62       	ori	r24, 0x20	; 32
     936:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     93a:	d6 d0       	rcall	.+428    	; 0xae8 <Pipe_WaitUntilReady>
     93c:	81 11       	cpse	r24, r1
     93e:	30 c0       	rjmp	.+96     	; 0x9a0 <Pipe_Write_Stream_LE+0x88>
     940:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     942:	31 f0       	breq	.+12     	; 0x950 <Pipe_Write_Stream_LE+0x38>
     944:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     946:	99 81       	ldd	r25, Y+1	; 0x01
     948:	08 1b       	sub	r16, r24
     94a:	19 0b       	sbc	r17, r25
     94c:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     94e:	f9 1e       	adc	r15, r25
     950:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     952:	d1 2c       	mov	r13, r1
     954:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     956:	11 05       	cpc	r17, r1
     958:	11 f1       	breq	.+68     	; 0x99e <Pipe_Write_Stream_LE+0x86>
     95a:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     95e:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     960:	13 c0       	rjmp	.+38     	; 0x988 <Pipe_Write_Stream_LE+0x70>
     962:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     966:	8b 77       	andi	r24, 0x7B	; 123
     968:	80 93 a6 00 	sts	0x00A6, r24
     96c:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     96e:	41 f0       	breq	.+16     	; 0x980 <Pipe_Write_Stream_LE+0x68>
     970:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     972:	99 81       	ldd	r25, Y+1	; 0x01
     974:	8c 0d       	add	r24, r12
     976:	9d 1d       	adc	r25, r13
     978:	99 83       	std	Y+1, r25	; 0x01
     97a:	88 83       	st	Y, r24
     97c:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     97e:	10 c0       	rjmp	.+32     	; 0x9a0 <Pipe_Write_Stream_LE+0x88>
     980:	b3 d0       	rcall	.+358    	; 0xae8 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     982:	88 23       	and	r24, r24
     984:	39 f3       	breq	.-50     	; 0x954 <Pipe_Write_Stream_LE+0x3c>
     986:	0c c0       	rjmp	.+24     	; 0x9a0 <Pipe_Write_Stream_LE+0x88>
     988:	f7 01       	movw	r30, r14
     98a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     98c:	7f 01       	movw	r14, r30
     98e:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     992:	01 50       	subi	r16, 0x01	; 1
     994:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     996:	ff ef       	ldi	r31, 0xFF	; 255
     998:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     99a:	df 0a       	sbc	r13, r31
     99c:	db cf       	rjmp	.-74     	; 0x954 <Pipe_Write_Stream_LE+0x3c>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     9a2:	cf 91       	pop	r28
}
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <Pipe_ConfigurePipe>:
     9b2:	0f 93       	push	r16
     9b4:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9b6:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9b8:	87 ff       	sbrs	r24, 7
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <Pipe_ConfigurePipe+0xe>
     9bc:	80 e1       	ldi	r24, 0x10	; 16
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <Pipe_ConfigurePipe+0x10>
     9c0:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     9c2:	e7 30       	cpi	r30, 0x07	; 7
     9c4:	10 f0       	brcs	.+4      	; 0x9ca <Pipe_ConfigurePipe+0x18>
	  return false;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	5a c0       	rjmp	.+180    	; 0xa7e <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     9ca:	61 11       	cpse	r22, r1
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     9ce:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9d0:	90 e4       	ldi	r25, 0x40	; 64
     9d2:	69 9f       	mul	r22, r25
     9d4:	b0 01       	movw	r22, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	4f 70       	andi	r20, 0x0F	; 15
     9da:	46 2b       	or	r20, r22
     9dc:	48 2b       	or	r20, r24
     9de:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9e0:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9e4:	5e 13       	cpse	r21, r30
     9e6:	19 c0       	rjmp	.+50     	; 0xa1a <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     9e8:	02 30       	cpi	r16, 0x02	; 2
     9ea:	10 f0       	brcs	.+4      	; 0x9f0 <Pipe_ConfigurePipe+0x3e>
     9ec:	76 e0       	ldi	r23, 0x06	; 6
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <Pipe_ConfigurePipe+0x40>
     9f0:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     9f6:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9f8:	82 17       	cp	r24, r18
     9fa:	93 07       	cpc	r25, r19
     9fc:	40 f0       	brcs	.+16     	; 0xa0e <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9fe:	86 2f       	mov	r24, r22
     a00:	82 95       	swap	r24
     a02:	80 7f       	andi	r24, 0xF0	; 240
     a04:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a06:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a08:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e c0       	rjmp	.+28     	; 0xa2a <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a0e:	65 30       	cpi	r22, 0x05	; 5
     a10:	b1 f3       	breq	.-20     	; 0x9fe <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     a12:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	ef cf       	rjmp	.-34     	; 0x9f8 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a1a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a1e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a22:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     a26:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a2a:	81 fd       	sbrc	r24, 1
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a2e:	5f 5f       	subi	r21, 0xFF	; 255
     a30:	57 30       	cpi	r21, 0x07	; 7
     a32:	b1 f6       	brne	.-84     	; 0x9e0 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a34:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	21 c0       	rjmp	.+66     	; 0xa7e <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a3c:	90 91 a9 00 	lds	r25, 0x00A9
     a40:	9e 7f       	andi	r25, 0xFE	; 254
     a42:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a46:	90 91 ab 00 	lds	r25, 0x00AB
     a4a:	9d 7f       	andi	r25, 0xFD	; 253
     a4c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a50:	90 91 a9 00 	lds	r25, 0x00A9
     a54:	91 60       	ori	r25, 0x01	; 1
     a56:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a5a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a5e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a62:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     a66:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a6a:	80 91 a9 00 	lds	r24, 0x00A9
     a6e:	80 62       	ori	r24, 0x20	; 32
     a70:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a74:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a78:	87 fd       	sbrc	r24, 7
     a7a:	d9 cf       	rjmp	.-78     	; 0xa2e <Pipe_ConfigurePipe+0x7c>
     a7c:	a4 cf       	rjmp	.-184    	; 0x9c6 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	f6 2e       	mov	r15, r22
     a8e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	1f 15       	cp	r17, r15
     a94:	71 f0       	breq	.+28     	; 0xab2 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     a96:	88 81       	ld	r24, Y
     a98:	88 23       	and	r24, r24
     a9a:	41 f0       	breq	.+16     	; 0xaac <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a9c:	29 81       	ldd	r18, Y+1	; 0x01
     a9e:	3a 81       	ldd	r19, Y+2	; 0x02
     aa0:	0d 81       	ldd	r16, Y+5	; 0x05
     aa2:	4b 81       	ldd	r20, Y+3	; 0x03
     aa4:	6c 81       	ldd	r22, Y+4	; 0x04
     aa6:	85 df       	rcall	.-246    	; 0x9b2 <Pipe_ConfigurePipe>
     aa8:	88 23       	and	r24, r24
     aaa:	21 f0       	breq	.+8      	; 0xab4 <Pipe_ConfigurePipeTable+0x32>
     aac:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aae:	26 96       	adiw	r28, 0x06	; 6
     ab0:	f0 cf       	rjmp	.-32     	; 0xa92 <Pipe_ConfigurePipeTable+0x10>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     ab4:	df 91       	pop	r29
}
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	08 95       	ret

00000ac0 <Pipe_ClearPipes>:
     ac0:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac4:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ac6:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     aca:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ace:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ad2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ad6:	90 91 a9 00 	lds	r25, 0x00A9
     ada:	9e 7f       	andi	r25, 0xFE	; 254
     adc:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	87 30       	cpi	r24, 0x07	; 7
     ae4:	81 f7       	brne	.-32     	; 0xac6 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ae6:	08 95       	ret

00000ae8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ae8:	80 91 a2 00 	lds	r24, 0x00A2
     aec:	90 91 a3 00 	lds	r25, 0x00A3
     af0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     af2:	20 91 aa 00 	lds	r18, 0x00AA
     af6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     af8:	20 31       	cpi	r18, 0x10	; 16
     afa:	29 f4       	brne	.+10     	; 0xb06 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     afc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b00:	20 ff       	sbrs	r18, 0
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <Pipe_WaitUntilReady+0x26>
     b04:	17 c0       	rjmp	.+46     	; 0xb34 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b06:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b0a:	22 fd       	sbrc	r18, 2
     b0c:	13 c0       	rjmp	.+38     	; 0xb34 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b0e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b12:	21 fd       	sbrc	r18, 1
     b14:	11 c0       	rjmp	.+34     	; 0xb38 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b16:	20 91 57 01 	lds	r18, 0x0157
     b1a:	21 30       	cpi	r18, 0x01	; 1
     b1c:	79 f0       	breq	.+30     	; 0xb3c <Pipe_WaitUntilReady+0x54>
     b1e:	20 91 a2 00 	lds	r18, 0x00A2
     b22:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b26:	28 17       	cp	r18, r24
     b28:	39 07       	cpc	r19, r25
     b2a:	19 f3       	breq	.-58     	; 0xaf2 <Pipe_WaitUntilReady+0xa>
     b2c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b2e:	41 f0       	breq	.+16     	; 0xb40 <Pipe_WaitUntilReady+0x58>
     b30:	c9 01       	movw	r24, r18
     b32:	df cf       	rjmp	.-66     	; 0xaf2 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b40:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     b42:	08 95       	ret

00000b44 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b44:	75 d0       	rcall	.+234    	; 0xc30 <USB_INT_DisableAllInterrupts>
     b46:	7c d0       	rcall	.+248    	; 0xc40 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b48:	e0 ee       	ldi	r30, 0xE0	; 224
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b4c:	80 81       	ld	r24, Z
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	80 83       	st	Z, r24
     b52:	e8 ed       	ldi	r30, 0xD8	; 216
     b54:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	80 83       	st	Z, r24
     b5c:	19 bc       	out	0x29, r1	; 41
     b5e:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b60:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b62:	8c 91       	ld	r24, X
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	8c 93       	st	X, r24
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b6c:	80 83       	st	Z, r24
     b6e:	10 92 4e 01 	sts	0x014E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b72:	08 95       	ret

00000b74 <USB_ResetInterface>:
     b74:	5d d0       	rcall	.+186    	; 0xc30 <USB_INT_DisableAllInterrupts>
     b76:	64 d0       	rcall	.+200    	; 0xc40 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b78:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b7c:	8f 77       	andi	r24, 0x7F	; 127
     b7e:	80 93 d8 00 	sts	0x00D8, r24
     b82:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     b86:	80 68       	ori	r24, 0x80	; 128
     b88:	80 93 d8 00 	sts	0x00D8, r24
     b8c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b90:	8f 7d       	andi	r24, 0xDF	; 223
     b92:	80 93 d8 00 	sts	0x00D8, r24
     b96:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b9a:	8f 77       	andi	r24, 0x7F	; 127
     b9c:	80 93 d7 00 	sts	0x00D7, r24
     ba0:	8c e0       	ldi	r24, 0x0C	; 12
     ba2:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ba4:	8e e0       	ldi	r24, 0x0E	; 14
     ba6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ba8:	09 b4       	in	r0, 0x29	; 41
     baa:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <USB_ResetInterface+0x34>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 57 01 	sts	0x0157, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bb4:	10 92 4d 01 	sts	0x014D, r1
	USB_Host_ConfigurationNumber = 0;
     bb8:	80 e4       	ldi	r24, 0x40	; 64
     bba:	80 93 0f 01 	sts	0x010F, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bbe:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	80 93 d8 00 	sts	0x00D8, r24
     bc8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	80 93 dd 00 	sts	0x00DD, r24
     bd2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	80 93 dd 00 	sts	0x00DD, r24
     bdc:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	80 93 d7 00 	sts	0x00D7, r24
     be6:	6f 9a       	sbi	0x0d, 7	; 13
     be8:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     bea:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 93 de 00 	sts	0x00DE, r24
     bf4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	80 93 de 00 	sts	0x00DE, r24
     bfe:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 93 e0 00 	sts	0x00E0, r24
     c08:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c0c:	80 61       	ori	r24, 0x10	; 16
     c0e:	80 93 d8 00 	sts	0x00D8, r24
     c12:	08 95       	ret

00000c14 <USB_Init>:
     c14:	e8 ed       	ldi	r30, 0xD8	; 216
     c16:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c18:	80 81       	ld	r24, Z
     c1a:	8f 7e       	andi	r24, 0xEF	; 239
     c1c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c1e:	e7 ed       	ldi	r30, 0xD7	; 215
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	81 60       	ori	r24, 0x01	; 1
     c26:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 4e 01 	sts	0x014E, r24

	USB_ResetInterface();
     c2e:	a2 cf       	rjmp	.-188    	; 0xb74 <USB_ResetInterface>

00000c30 <USB_INT_DisableAllInterrupts>:
     c30:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8c 7f       	andi	r24, 0xFC	; 252
     c38:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c3a:	10 92 a0 00 	sts	0x00A0, r1
     c3e:	08 95       	ret

00000c40 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c40:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c44:	10 92 9f 00 	sts	0x009F, r1
     c48:	08 95       	ret

00000c4a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	0b b6       	in	r0, 0x3b	; 59
     c56:	0f 92       	push	r0
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c70:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c74:	85 ff       	sbrs	r24, 5
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c78:	80 91 a0 00 	lds	r24, 0x00A0
     c7c:	85 ff       	sbrs	r24, 5
     c7e:	06 c0       	rjmp	.+12     	; 0xc8c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c80:	80 91 9f 00 	lds	r24, 0x009F
     c84:	8f 7d       	andi	r24, 0xDF	; 223
     c86:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c8a:	1a d1       	rcall	.+564    	; 0xec0 <USB_Event_Stub>
     c8c:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c90:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c92:	15 c0       	rjmp	.+42     	; 0xcbe <__vector_10+0x74>
     c94:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c98:	81 ff       	sbrs	r24, 1
     c9a:	11 c0       	rjmp	.+34     	; 0xcbe <__vector_10+0x74>
     c9c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	80 93 9f 00 	sts	0x009F, r24
     ca6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	80 93 9f 00 	sts	0x009F, r24
     cb0:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cb4:	8d 7f       	andi	r24, 0xFD	; 253
     cb6:	80 93 a0 00 	sts	0x00A0, r24
     cba:	e6 db       	rcall	.-2100   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     cbc:	5b df       	rcall	.-330    	; 0xb74 <USB_ResetInterface>
     cbe:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     cc2:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     cc4:	15 c0       	rjmp	.+42     	; 0xcf0 <__vector_10+0xa6>
     cc6:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cca:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ccc:	11 c0       	rjmp	.+34     	; 0xcf0 <__vector_10+0xa6>
     cce:	80 91 df 00 	lds	r24, 0x00DF
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cd4:	80 93 df 00 	sts	0x00DF, r24
     cd8:	77 98       	cbi	0x0e, 7	; 14
     cda:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     cde:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ce0:	80 93 dd 00 	sts	0x00DD, r24
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	2b dc       	rcall	.-1962   	; 0x53e <EVENT_USB_Host_HostError>
     ce8:	cf db       	rcall	.-2146   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 57 01 	sts	0x0157, r24
		EVENT_USB_Host_DeviceUnattached();
     cf0:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     cf4:	80 ff       	sbrs	r24, 0
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <__vector_10+0xdc>
     cf8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cfc:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cfe:	13 c0       	rjmp	.+38     	; 0xd26 <__vector_10+0xdc>
     d00:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d0a:	80 91 de 00 	lds	r24, 0x00DE
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d14:	b3 db       	rcall	.-2202   	; 0x47c <EVENT_USB_Host_DeviceAttached>
     d16:	80 91 a0 00 	lds	r24, 0x00A0
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d20:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d22:	80 93 57 01 	sts	0x0157, r24
     d26:	80 91 df 00 	lds	r24, 0x00DF
     d2a:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <__vector_10+0x100>
     d2e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d32:	82 ff       	sbrs	r24, 2
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d36:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
     d3c:	80 93 df 00 	sts	0x00DF, r24
     d40:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	12 dc       	rcall	.-2012   	; 0x56a <EVENT_USB_Host_DeviceEnumerationFailed>
     d46:	a0 db       	rcall	.-2240   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     d48:	15 df       	rcall	.-470    	; 0xb74 <USB_ResetInterface>
     d4a:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23

		USB_ResetInterface();
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <USB_GetNextDescriptor>:
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	fc 01       	movw	r30, r24
     d76:	eb 01       	movw	r28, r22
     d78:	a8 81       	ld	r26, Y
     d7a:	b9 81       	ldd	r27, Y+1	; 0x01
     d7c:	8c 91       	ld	r24, X
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     d82:	31 81       	ldd	r19, Z+1	; 0x01
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	08 f4       	brcc	.+2      	; 0xd8c <USB_GetNextDescriptor+0x1c>
     d8a:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d8c:	a2 0f       	add	r26, r18
     d8e:	b3 1f       	adc	r27, r19
     d90:	eb 01       	movw	r28, r22
     d92:	b9 83       	std	Y+1, r27	; 0x01
     d94:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	82 1b       	sub	r24, r18
     d9c:	93 0b       	sbc	r25, r19
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
			}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	29 97       	sbiw	r28, 0x09	; 9
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	7b 01       	movw	r14, r22
     dca:	8a 01       	movw	r16, r20
     dcc:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dce:	90 e8       	ldi	r25, 0x80	; 128
     dd0:	90 93 4f 01 	sts	0x014F, r25
     dd4:	96 e0       	ldi	r25, 0x06	; 6
     dd6:	90 93 50 01 	sts	0x0150, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     dda:	e8 2f       	mov	r30, r24
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     de2:	f0 93 52 01 	sts	0x0152, r31
     de6:	e0 93 51 01 	sts	0x0151, r30
     dea:	10 92 54 01 	sts	0x0154, r1
     dee:	10 92 53 01 	sts	0x0153, r1
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 56 01 	sts	0x0156, r25
     dfa:	80 93 55 01 	sts	0x0155, r24
     dfe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	84 d0       	rcall	.+264    	; 0xf10 <USB_Host_SendControlRequest>
     e08:	81 11       	cpse	r24, r1
     e0a:	19 c0       	rjmp	.+50     	; 0xe3e <USB_Host_GetDeviceConfigDescriptor+0x96>
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	d7 01       	movw	r26, r14
     e12:	ed 93       	st	X+, r30
     e14:	fc 93       	st	X, r31
     e16:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     e18:	df 06       	cpc	r13, r31
     e1a:	70 f0       	brcs	.+28     	; 0xe38 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e1c:	f0 93 56 01 	sts	0x0156, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e20:	e0 93 55 01 	sts	0x0155, r30
     e24:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e26:	74 d0       	rcall	.+232    	; 0xf10 <USB_Host_SendControlRequest>
     e28:	81 11       	cpse	r24, r1
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <USB_Host_GetDeviceConfigDescriptor+0x96>
     e2c:	f8 01       	movw	r30, r16
     e2e:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	21 f0       	breq	.+8      	; 0xe3c <USB_Host_GetDeviceConfigDescriptor+0x94>
     e34:	86 e0       	ldi	r24, 0x06	; 6
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     e38:	85 e0       	ldi	r24, 0x05	; 5
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     e40:	0f b6       	in	r0, 0x3f	; 63
}
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	08 95       	ret

00000e5c <USB_GetNextDescriptorComp>:
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	8c 01       	movw	r16, r24
     e72:	eb 01       	movw	r28, r22
     e74:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e76:	f8 01       	movw	r30, r16
     e78:	e0 80       	ld	r14, Z
     e7a:	f1 80       	ldd	r15, Z+1	; 0x01
     e7c:	e1 14       	cp	r14, r1
     e7e:	f1 04       	cpc	r15, r1
     e80:	99 f0       	breq	.+38     	; 0xea8 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e82:	a8 80       	ld	r10, Y
     e84:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     e86:	be 01       	movw	r22, r28
     e88:	c8 01       	movw	r24, r16
     e8a:	72 df       	rcall	.-284    	; 0xd70 <USB_GetNextDescriptor>
     e8c:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e8e:	99 81       	ldd	r25, Y+1	; 0x01
     e90:	f6 01       	movw	r30, r12
     e92:	09 95       	icall
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	79 f3       	breq	.-34     	; 0xe76 <USB_GetNextDescriptorComp+0x1a>
     e98:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e9a:	39 f4       	brne	.+14     	; 0xeaa <USB_GetNextDescriptorComp+0x4e>
     e9c:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     e9e:	a8 82       	st	Y, r10
     ea0:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     ea2:	f1 82       	std	Z+1, r15	; 0x01
     ea4:	e0 82       	st	Z, r14
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <USB_GetNextDescriptorComp+0x4e>
     ea8:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     eaa:	df 91       	pop	r29
}
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	08 95       	ret

00000ec0 <USB_Event_Stub>:
     ec0:	08 95       	ret

00000ec2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     eca:	c9 ee       	ldi	r28, 0xE9	; 233
     ecc:	d3 e0       	ldi	r29, 0x03	; 3
     ece:	11 11       	cpse	r17, r1
     ed0:	0d c0       	rjmp	.+26     	; 0xeec <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ed2:	80 91 a6 00 	lds	r24, 0x00A6
     ed6:	83 fd       	sbrc	r24, 3
     ed8:	16 c0       	rjmp	.+44     	; 0xf06 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	ae db       	rcall	.-2212   	; 0x63a <USB_Host_WaitMS>
     ede:	81 11       	cpse	r24, r1
     ee0:	13 c0       	rjmp	.+38     	; 0xf08 <USB_Host_WaitForIOS+0x46>
     ee2:	21 97       	sbiw	r28, 0x01	; 1
     ee4:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ee6:	99 f7       	brne	.-26     	; 0xece <USB_Host_WaitForIOS+0xc>
     ee8:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <USB_Host_WaitForIOS+0x46>
     eec:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     eee:	29 f4       	brne	.+10     	; 0xefa <USB_Host_WaitForIOS+0x38>
     ef0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ef4:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ef6:	f1 cf       	rjmp	.-30     	; 0xeda <USB_Host_WaitForIOS+0x18>
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <USB_Host_WaitForIOS+0x44>
     efa:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     efc:	71 f7       	brne	.-36     	; 0xeda <USB_Host_WaitForIOS+0x18>
     efe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f02:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f04:	ea cf       	rjmp	.-44     	; 0xeda <USB_Host_WaitForIOS+0x18>
     f06:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f08:	df 91       	pop	r29
}
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	08 95       	ret

00000f10 <USB_Host_SendControlRequest>:
     f10:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f1c:	f0 90 9e 00 	lds	r15, 0x009E
     f20:	8f 2d       	mov	r24, r15
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f26:	c0 91 55 01 	lds	r28, 0x0155
     f2a:	d0 91 56 01 	lds	r29, 0x0156
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f2e:	80 91 9e 00 	lds	r24, 0x009E
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	7f db       	rcall	.-2306   	; 0x63a <USB_Host_WaitMS>
     f3c:	81 11       	cpse	r24, r1
     f3e:	cc c0       	rjmp	.+408    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     f40:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f44:	8f 7c       	andi	r24, 0xCF	; 207
     f46:	80 93 aa 00 	sts	0x00AA, r24
     f4a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f4e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f52:	8f 7e       	andi	r24, 0xEF	; 239
     f54:	80 93 a6 00 	sts	0x00A6, r24
     f58:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f5c:	8f 7b       	andi	r24, 0xBF	; 191
     f5e:	80 93 a9 00 	sts	0x00A9, r24
     f62:	ef e4       	ldi	r30, 0x4F	; 79
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f68:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f6e:	e7 35       	cpi	r30, 0x57	; 87
     f70:	f8 07       	cpc	r31, r24
     f72:	c9 f7       	brne	.-14     	; 0xf66 <USB_Host_SendControlRequest+0x56>
     f74:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f78:	87 77       	andi	r24, 0x77	; 119
     f7a:	80 93 a6 00 	sts	0x00A6, r24
     f7e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f80:	a0 df       	rcall	.-192    	; 0xec2 <USB_Host_WaitForIOS>
     f82:	81 11       	cpse	r24, r1
     f84:	a9 c0       	rjmp	.+338    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     f86:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	80 93 a9 00 	sts	0x00A9, r24
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	53 db       	rcall	.-2394   	; 0x63a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f94:	81 11       	cpse	r24, r1
     f96:	a0 c0       	rjmp	.+320    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     f98:	80 91 4f 01 	lds	r24, 0x014F
     f9c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f9e:	4e c0       	rjmp	.+156    	; 0x103c <USB_Host_SendControlRequest+0x12c>
     fa0:	80 91 aa 00 	lds	r24, 0x00AA
     fa4:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	80 93 aa 00 	sts	0x00AA, r24
     fac:	01 15       	cp	r16, r1
     fae:	11 05       	cpc	r17, r1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fb2:	3a c0       	rjmp	.+116    	; 0x1028 <USB_Host_SendControlRequest+0x118>
     fb4:	80 91 aa 00 	lds	r24, 0x00AA
     fb8:	8f 7c       	andi	r24, 0xCF	; 207
     fba:	80 62       	ori	r24, 0x20	; 32
     fbc:	80 93 aa 00 	sts	0x00AA, r24
     fc0:	80 91 a9 00 	lds	r24, 0x00A9
     fc4:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc6:	80 93 a9 00 	sts	0x00A9, r24
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	7a df       	rcall	.-268    	; 0xec2 <USB_Host_WaitForIOS>
     fce:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fd0:	83 c0       	rjmp	.+262    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     fd2:	80 91 a6 00 	lds	r24, 0x00A6
     fd6:	8b 77       	andi	r24, 0x7B	; 123
     fd8:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	71 df       	rcall	.-286    	; 0xec2 <USB_Host_WaitForIOS>
     fe0:	7b c0       	rjmp	.+246    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     fe2:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	69 df       	rcall	.-302    	; 0xec2 <USB_Host_WaitForIOS>
     ff0:	81 11       	cpse	r24, r1
     ff2:	72 c0       	rjmp	.+228    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
     ff4:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ff8:	90 91 f7 00 	lds	r25, 0x00F7
     ffc:	89 2b       	or	r24, r25
     ffe:	11 f4       	brne	.+4      	; 0x1004 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1000:	c0 e0       	ldi	r28, 0x00	; 0
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	f8 01       	movw	r30, r16
    1006:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1008:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    100c:	90 91 f7 00 	lds	r25, 0x00F7
    1010:	89 2b       	or	r24, r25
    1012:	69 f4       	brne	.+26     	; 0x102e <USB_Host_SendControlRequest+0x11e>
    1014:	80 91 a9 00 	lds	r24, 0x00A9
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    101e:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1022:	8e 77       	andi	r24, 0x7E	; 126
    1024:	80 93 a6 00 	sts	0x00A6, r24
    1028:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    102a:	d9 f6       	brne	.-74     	; 0xfe2 <USB_Host_SendControlRequest+0xd2>
    102c:	c3 cf       	rjmp	.-122    	; 0xfb4 <USB_Host_SendControlRequest+0xa4>
    102e:	20 97       	sbiw	r28, 0x00	; 0
    1030:	89 f3       	breq	.-30     	; 0x1014 <USB_Host_SendControlRequest+0x104>
    1032:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1036:	81 93       	st	Z+, r24
    1038:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    103a:	e5 cf       	rjmp	.-54     	; 0x1006 <USB_Host_SendControlRequest+0xf6>
    103c:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    103e:	11 05       	cpc	r17, r1
    1040:	b1 f1       	breq	.+108    	; 0x10ae <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1042:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1046:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1048:	80 62       	ori	r24, 0x20	; 32
    104a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    104e:	80 91 a9 00 	lds	r24, 0x00A9
    1052:	8f 7b       	andi	r24, 0xBF	; 191
    1054:	80 93 a9 00 	sts	0x00A9, r24
    1058:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    105a:	20 97       	sbiw	r28, 0x00	; 0
    105c:	01 f1       	breq	.+64     	; 0x109e <USB_Host_SendControlRequest+0x18e>
    105e:	31 df       	rcall	.-414    	; 0xec2 <USB_Host_WaitForIOS>
    1060:	81 11       	cpse	r24, r1
    1062:	3a c0       	rjmp	.+116    	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1064:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1066:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    106a:	30 91 f7 00 	lds	r19, 0x00F7
    106e:	80 91 0f 01 	lds	r24, 0x010F
    1072:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1074:	28 17       	cp	r18, r24
    1076:	39 07       	cpc	r19, r25
    1078:	58 f4       	brcc	.+22     	; 0x1090 <USB_Host_SendControlRequest+0x180>
    107a:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	8c 01       	movw	r16, r24
    1080:	20 81       	ld	r18, Z
    1082:	20 93 af 00 	sts	0x00AF, r18
    1086:	21 97       	sbiw	r28, 0x01	; 1
    1088:	20 97       	sbiw	r28, 0x00	; 0
    108a:	19 f0       	breq	.+6      	; 0x1092 <USB_Host_SendControlRequest+0x182>
    108c:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    108e:	eb cf       	rjmp	.-42     	; 0x1066 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1090:	8f 01       	movw	r16, r30
    1092:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1096:	8b 77       	andi	r24, 0x7B	; 123
    1098:	80 93 a6 00 	sts	0x00A6, r24
    109c:	dd cf       	rjmp	.-70     	; 0x1058 <USB_Host_SendControlRequest+0x148>
    109e:	11 df       	rcall	.-478    	; 0xec2 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10a0:	81 11       	cpse	r24, r1
    10a2:	1a c0       	rjmp	.+52     	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
    10a4:	80 91 a9 00 	lds	r24, 0x00A9
    10a8:	80 64       	ori	r24, 0x40	; 64
    10aa:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ae:	80 91 aa 00 	lds	r24, 0x00AA
    10b2:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	80 93 aa 00 	sts	0x00AA, r24
    10ba:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	80 93 a9 00 	sts	0x00A9, r24
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	fd de       	rcall	.-518    	; 0xec2 <USB_Host_WaitForIOS>
    10c8:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <USB_Host_SendControlRequest+0x1c8>
    10cc:	80 91 a6 00 	lds	r24, 0x00A6
    10d0:	8e 77       	andi	r24, 0x7E	; 126
    10d2:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 91 a9 00 	lds	r25, 0x00A9
    10dc:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10de:	90 93 a9 00 	sts	0x00A9, r25
    10e2:	f1 10       	cpse	r15, r1
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <USB_Host_SendControlRequest+0x1e0>
    10e6:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ea:	9e 7f       	andi	r25, 0xFE	; 254
    10ec:	90 93 9e 00 	sts	0x009E, r25
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10f6:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1102:	ff 90       	pop	r15
    1104:	08 95       	ret

00001106 <USB_Host_SetDeviceConfiguration>:
    1106:	cf 93       	push	r28
				UPRST = 0;
    1108:	c8 2f       	mov	r28, r24
    110a:	10 92 4f 01 	sts	0x014F, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    110e:	89 e0       	ldi	r24, 0x09	; 9
    1110:	80 93 50 01 	sts	0x0150, r24
    1114:	2c 2f       	mov	r18, r28
    1116:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1118:	30 93 52 01 	sts	0x0152, r19
    111c:	20 93 51 01 	sts	0x0151, r18
    1120:	10 92 54 01 	sts	0x0154, r1
    1124:	10 92 53 01 	sts	0x0153, r1
    1128:	10 92 56 01 	sts	0x0156, r1
    112c:	10 92 55 01 	sts	0x0155, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1130:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	eb de       	rcall	.-554    	; 0xf10 <USB_Host_SendControlRequest>
    113a:	81 11       	cpse	r24, r1
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <USB_Host_SetDeviceConfiguration+0x4a>
    113e:	c0 93 4d 01 	sts	0x014D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1142:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1144:	11 f0       	breq	.+4      	; 0x114a <USB_Host_SetDeviceConfiguration+0x44>
    1146:	9b e0       	ldi	r25, 0x0B	; 11
    1148:	01 c0       	rjmp	.+2      	; 0x114c <USB_Host_SetDeviceConfiguration+0x46>
    114a:	9a e0       	ldi	r25, 0x0A	; 10
    114c:	90 93 57 01 	sts	0x0157, r25
    1150:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1152:	08 95       	ret

00001154 <USB_Host_SetInterfaceAltSetting>:
    1154:	91 e0       	ldi	r25, 0x01	; 1
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1156:	90 93 4f 01 	sts	0x014F, r25
    115a:	9b e0       	ldi	r25, 0x0B	; 11
    115c:	90 93 50 01 	sts	0x0150, r25
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	70 93 52 01 	sts	0x0152, r23
    1166:	60 93 51 01 	sts	0x0151, r22
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	90 93 54 01 	sts	0x0154, r25
    1170:	80 93 53 01 	sts	0x0153, r24
    1174:	10 92 56 01 	sts	0x0156, r1
    1178:	10 92 55 01 	sts	0x0155, r1
    117c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	c5 ce       	rjmp	.-630    	; 0xf10 <USB_Host_SendControlRequest>

00001186 <USB_USBTask>:
    1186:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1188:	c0 91 a7 00 	lds	r28, 0x00A7
    118c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    118e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1192:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1196:	9e da       	rcall	.-2756   	; 0x6d4 <USB_Host_ProcessNextHostState>
    1198:	c0 93 a7 00 	sts	0x00A7, r28
    119c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    119e:	08 95       	ret

000011a0 <DCOMP_PRNT_Host_NextPRNTInterface>:
    11a0:	fc 01       	movw	r30, r24

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	59 f4       	brne	.+22     	; 0x11be <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    11a8:	85 81       	ldd	r24, Z+5	; 0x05
    11aa:	87 30       	cpi	r24, 0x07	; 7
    11ac:	41 f4       	brne	.+16     	; 0x11be <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    11ae:	86 81       	ldd	r24, Z+6	; 0x06
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	29 f4       	brne	.+10     	; 0x11be <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
    11b4:	87 81       	ldd	r24, Z+7	; 0x07
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	11 f4       	brne	.+4      	; 0x11be <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
		    (Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11be:	82 e0       	ldi	r24, 0x02	; 2
}
    11c0:	08 95       	ret

000011c2 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11c2:	fc 01       	movw	r30, r24
    11c4:	21 81       	ldd	r18, Z+1	; 0x01
    11c6:	25 30       	cpi	r18, 0x05	; 5
    11c8:	31 f4       	brne	.+12     	; 0x11d6 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	83 70       	andi	r24, 0x03	; 3

		if (EndpointType == EP_TYPE_BULK)
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	31 f0       	breq	.+12     	; 0x11de <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11d6:	24 30       	cpi	r18, 0x04	; 4
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x10>
	{
		return DESCRIPTOR_SEARCH_Fail;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
    11de:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11e0:	08 95       	ret

000011e2 <PRNT_Host_ConfigurePipes>:
#include "PrinterClassHost.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <PRNT_Host_ConfigurePipes+0x16>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <PRNT_Host_ConfigurePipes+0x18>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	8c 01       	movw	r16, r24
    1200:	7a 83       	std	Y+2, r23	; 0x02
    1202:	69 83       	std	Y+1, r22	; 0x01
    1204:	fa 01       	movw	r30, r20
    1206:	5c 83       	std	Y+4, r21	; 0x04
    1208:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    120a:	dc 01       	movw	r26, r24
    120c:	1c 96       	adiw	r26, 0x0c	; 12
    120e:	1d 92       	st	X+, r1
    1210:	1d 92       	st	X+, r1
    1212:	1c 92       	st	X, r1

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1214:	81 81       	ldd	r24, Z+1	; 0x01
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	09 f0       	breq	.+2      	; 0x121c <PRNT_Host_ConfigurePipes+0x3a>
    121a:	6e c0       	rjmp	.+220    	; 0x12f8 <PRNT_Host_ConfigurePipes+0x116>
    121c:	c1 2c       	mov	r12, r1
    121e:	d1 2c       	mov	r13, r1
    1220:	a1 2c       	mov	r10, r1
    1222:	b1 2c       	mov	r11, r1
    1224:	e1 2c       	mov	r14, r1
    1226:	f1 2c       	mov	r15, r1
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    1228:	c1 14       	cp	r12, r1
    122a:	d1 04       	cpc	r13, r1
    122c:	91 f4       	brne	.+36     	; 0x1252 <PRNT_Host_ConfigurePipes+0x70>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    122e:	40 ed       	ldi	r20, 0xD0	; 208
    1230:	58 e0       	ldi	r21, 0x08	; 8
    1232:	be 01       	movw	r22, r28
    1234:	6d 5f       	subi	r22, 0xFD	; 253
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0f de       	rcall	.-994    	; 0xe5c <USB_GetNextDescriptorComp>
    123e:	81 11       	cpse	r24, r1
    1240:	5d c0       	rjmp	.+186    	; 0x12fc <PRNT_Host_ConfigurePipes+0x11a>
    1242:	cb 80       	ldd	r12, Y+3	; 0x03
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1244:	dc 80       	ldd	r13, Y+4	; 0x04
    1246:	e1 2c       	mov	r14, r1

			DataINEndpoint  = NULL;
    1248:	f1 2c       	mov	r15, r1
    124a:	e0 e0       	ldi	r30, 0x00	; 0
			DataOUTEndpoint = NULL;
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	5f 01       	movw	r10, r30
    1250:	eb cf       	rjmp	.-42     	; 0x1228 <PRNT_Host_ConfigurePipes+0x46>
    1252:	41 ee       	ldi	r20, 0xE1	; 225
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1254:	58 e0       	ldi	r21, 0x08	; 8
    1256:	be 01       	movw	r22, r28
    1258:	6d 5f       	subi	r22, 0xFD	; 253
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	fd dd       	rcall	.-1030   	; 0xe5c <USB_GetNextDescriptorComp>
    1262:	81 11       	cpse	r24, r1
    1264:	e4 cf       	rjmp	.-56     	; 0x122e <PRNT_Host_ConfigurePipes+0x4c>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <PRNT_Host_ConfigurePipes+0x92>
    1270:	7f 01       	movw	r14, r30
    1272:	f5 01       	movw	r30, r10
		  DataINEndpoint  = EndpointData;
    1274:	e1 14       	cp	r14, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1276:	f1 04       	cpc	r15, r1
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1278:	51 f3       	breq	.-44     	; 0x124e <PRNT_Host_ConfigurePipes+0x6c>
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	41 f3       	breq	.-48     	; 0x124e <PRNT_Host_ConfigurePipes+0x6c>
    127e:	d7 01       	movw	r26, r14
    1280:	14 96       	adiw	r26, 0x04	; 4
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	PRNTInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	15 97       	sbiw	r26, 0x05	; 5
    1288:	d8 01       	movw	r26, r16
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	9c 93       	st	X, r25
    128e:	8e 93       	st	-X, r24
    1290:	11 97       	sbiw	r26, 0x01	; 1
    1292:	d7 01       	movw	r26, r14
    1294:	12 96       	adiw	r26, 0x02	; 2
	PRNTInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1296:	8c 91       	ld	r24, X
    1298:	d8 01       	movw	r26, r16
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	8c 93       	st	X, r24
    129e:	13 97       	sbiw	r26, 0x03	; 3
    12a0:	22 e0       	ldi	r18, 0x02	; 2
    12a2:	14 96       	adiw	r26, 0x04	; 4
	PRNTInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    12a4:	2c 93       	st	X, r18
    12a6:	14 97       	sbiw	r26, 0x04	; 4
    12a8:	84 81       	ldd	r24, Z+4	; 0x04
    12aa:	95 81       	ldd	r25, Z+5	; 0x05

	PRNTInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12ac:	18 96       	adiw	r26, 0x08	; 8
    12ae:	9c 93       	st	X, r25
    12b0:	8e 93       	st	-X, r24
    12b2:	17 97       	sbiw	r26, 0x07	; 7
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	19 96       	adiw	r26, 0x09	; 9
	PRNTInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    12b8:	8c 93       	st	X, r24
    12ba:	19 97       	sbiw	r26, 0x09	; 9
    12bc:	1a 96       	adiw	r26, 0x0a	; 10
    12be:	2c 93       	st	X, r18
	PRNTInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	c8 01       	movw	r24, r16

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataINPipe, 1)))
    12c4:	de db       	rcall	.-2116   	; 0xa82 <Pipe_ConfigurePipeTable>
    12c6:	81 11       	cpse	r24, r1
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <PRNT_Host_ConfigurePipes+0xec>
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	18 c0       	rjmp	.+48     	; 0x12fe <PRNT_Host_ConfigurePipes+0x11c>
    12ce:	61 e0       	ldi	r22, 0x01	; 1
	  return PRNT_ENUMERROR_PipeConfigurationFailed;
    12d0:	c8 01       	movw	r24, r16
    12d2:	06 96       	adiw	r24, 0x06	; 6

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataOUTPipe, 1)))
    12d4:	d6 db       	rcall	.-2132   	; 0xa82 <Pipe_ConfigurePipeTable>
    12d6:	88 23       	and	r24, r24
    12d8:	c1 f3       	breq	.-16     	; 0x12ca <PRNT_Host_ConfigurePipes+0xe8>
    12da:	f6 01       	movw	r30, r12
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	d8 01       	movw	r26, r16
    12e0:	1d 96       	adiw	r26, 0x0d	; 13
	  return PRNT_ENUMERROR_PipeConfigurationFailed;

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    12e2:	8c 93       	st	X, r24
    12e4:	1d 97       	sbiw	r26, 0x0d	; 13
    12e6:	83 81       	ldd	r24, Z+3	; 0x03
    12e8:	1e 96       	adiw	r26, 0x0e	; 14
    12ea:	8c 93       	st	X, r24
    12ec:	1e 97       	sbiw	r26, 0x0e	; 14
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	1c 96       	adiw	r26, 0x0c	; 12
    12f2:	8c 93       	st	X, r24
    12f4:	80 e0       	ldi	r24, 0x00	; 0
	PRNTInterfaceInfo->State.IsActive = true;
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <PRNT_Host_ConfigurePipes+0x11c>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <PRNT_Host_ConfigurePipes+0x11c>

	return PRNT_ENUMERROR_NoError;
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
    1304:	0f 90       	pop	r0
	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
	PRNTInterfaceInfo->State.IsActive = true;

	return PRNT_ENUMERROR_NoError;
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	08 95       	ret

0000131c <PRNT_Host_SetBidirectionalMode>:
    131c:	fc 01       	movw	r30, r24
    131e:	66 85       	ldd	r22, Z+14	; 0x0e
    1320:	66 23       	and	r22, r22
    1322:	11 f0       	breq	.+4      	; 0x1328 <PRNT_Host_SetBidirectionalMode+0xc>
{
	if (PRNTInterfaceInfo->State.AlternateSetting)
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PRNTInterfaceInfo->State.InterfaceNumber,
    1324:	85 85       	ldd	r24, Z+13	; 0x0d
    1326:	16 cf       	rjmp	.-468    	; 0x1154 <USB_Host_SetInterfaceAltSetting>
    1328:	80 e0       	ldi	r24, 0x00	; 0
			return ErrorCode;
		}
	}

	return HOST_SENDCONTROL_Successful;
}
    132a:	08 95       	ret

0000132c <PRNT_Host_Flush>:
    132c:	20 91 57 01 	lds	r18, 0x0157
	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1330:	2b 30       	cpi	r18, 0x0B	; 11
    1332:	51 f5       	brne	.+84     	; 0x1388 <PRNT_Host_Flush+0x5c>
    1334:	fc 01       	movw	r30, r24
    1336:	24 85       	ldd	r18, Z+12	; 0x0c
    1338:	22 23       	and	r18, r18
    133a:	31 f1       	breq	.+76     	; 0x1388 <PRNT_Host_Flush+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    133c:	86 81       	ldd	r24, Z+6	; 0x06
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1344:	80 91 a9 00 	lds	r24, 0x00A9
    1348:	8f 7b       	andi	r24, 0xBF	; 191
    134a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    134e:	80 91 f6 00 	lds	r24, 0x00F6
    1352:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1356:	89 2b       	or	r24, r25
    1358:	c9 f0       	breq	.+50     	; 0x138c <PRNT_Host_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    135a:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    135e:	80 91 a6 00 	lds	r24, 0x00A6
    1362:	8b 77       	andi	r24, 0x7B	; 123
    1364:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1368:	95 fd       	sbrc	r25, 5
    136a:	08 c0       	rjmp	.+16     	; 0x137c <PRNT_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    136c:	bd db       	rcall	.-2182   	; 0xae8 <Pipe_WaitUntilReady>
    136e:	81 11       	cpse	r24, r1
    1370:	0e c0       	rjmp	.+28     	; 0x138e <PRNT_Host_Flush+0x62>
    1372:	80 91 a6 00 	lds	r24, 0x00A6
    1376:	8b 77       	andi	r24, 0x7B	; 123
    1378:	80 93 a6 00 	sts	0x00A6, r24
    137c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	80 93 a9 00 	sts	0x00A9, r24
    1386:	02 c0       	rjmp	.+4      	; 0x138c <PRNT_Host_Flush+0x60>
    1388:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    138a:	08 95       	ret
    138c:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    138e:	08 95       	ret

00001390 <PRNT_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    1390:	20 91 57 01 	lds	r18, 0x0157
	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1394:	2b 30       	cpi	r18, 0x0B	; 11
    1396:	21 f4       	brne	.+8      	; 0x13a0 <PRNT_Host_USBTask+0x10>
    1398:	fc 01       	movw	r30, r24
    139a:	24 85       	ldd	r18, Z+12	; 0x0c
    139c:	21 11       	cpse	r18, r1
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    139e:	c6 cf       	rjmp	.-116    	; 0x132c <PRNT_Host_Flush>
    13a0:	08 95       	ret

000013a2 <PRNT_Host_SendData>:
    13a2:	fc 01       	movw	r30, r24
}

uint8_t PRNT_Host_SendData(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                           const void* Buffer,
                           const uint16_t Length)
{
    13a4:	cb 01       	movw	r24, r22
    13a6:	ba 01       	movw	r22, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    13a8:	20 91 57 01 	lds	r18, 0x0157
    13ac:	2b 30       	cpi	r18, 0x0B	; 11
    13ae:	e9 f4       	brne	.+58     	; 0x13ea <PRNT_Host_SendData+0x48>
    13b0:	24 85       	ldd	r18, Z+12	; 0x0c
    13b2:	22 23       	and	r18, r18
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <PRNT_Host_SendData+0x48>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13b6:	26 81       	ldd	r18, Z+6	; 0x06
    13b8:	2f 70       	andi	r18, 0x0F	; 15
    13ba:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13be:	20 91 a9 00 	lds	r18, 0x00A9
    13c2:	2f 7b       	andi	r18, 0xBF	; 191
    13c4:	20 93 a9 00 	sts	0x00A9, r18
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NULL)) != PIPE_RWSTREAM_NoError)
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	a5 da       	rcall	.-2742   	; 0x918 <Pipe_Write_Stream_LE>
    13ce:	81 11       	cpse	r24, r1
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <PRNT_Host_SendData+0x4a>
    13d2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13d6:	8b 77       	andi	r24, 0x7B	; 123
    13d8:	80 93 a6 00 	sts	0x00A6, r24
    13dc:	85 db       	rcall	.-2294   	; 0xae8 <Pipe_WaitUntilReady>
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    13de:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13e2:	90 64       	ori	r25, 0x40	; 64
    13e4:	90 93 a9 00 	sts	0x00A9, r25
    13e8:	08 95       	ret
    13ea:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_Freeze();

	return ErrorCode;
    13ec:	08 95       	ret

000013ee <PRNT_Host_GetDeviceID>:
                           const uint16_t Length)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    13ee:	ef 92       	push	r14
	ErrorCode = Pipe_WaitUntilReady();

	Pipe_Freeze();

	return ErrorCode;
}
    13f0:	ff 92       	push	r15
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <PRNT_Host_GetDeviceID+0xe>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	8b 01       	movw	r16, r22
    1402:	7a 01       	movw	r14, r20
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
    1404:	1a 82       	std	Y+2, r1	; 0x02
    1406:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    1408:	fc 01       	movw	r30, r24
    140a:	85 85       	ldd	r24, Z+13	; 0x0d
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	21 ea       	ldi	r18, 0xA1	; 161
    1410:	20 93 4f 01 	sts	0x014F, r18
    1414:	10 92 50 01 	sts	0x0150, r1
    1418:	10 92 52 01 	sts	0x0152, r1
    141c:	10 92 51 01 	sts	0x0151, r1
    1420:	90 93 54 01 	sts	0x0154, r25
    1424:	80 93 53 01 	sts	0x0153, r24
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 56 01 	sts	0x0156, r25
    1430:	80 93 55 01 	sts	0x0155, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1434:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	69 dd       	rcall	.-1326   	; 0xf10 <USB_Host_SendControlRequest>
    143e:	81 11       	cpse	r24, r1
    1440:	2c c0       	rjmp	.+88     	; 0x149a <PRNT_Host_GetDeviceID+0xac>
    1442:	29 81       	ldd	r18, Y+1	; 0x01
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    1444:	3a 81       	ldd	r19, Y+2	; 0x02
    1446:	21 15       	cp	r18, r1
    1448:	31 05       	cpc	r19, r1
    144a:	19 f4       	brne	.+6      	; 0x1452 <PRNT_Host_GetDeviceID+0x64>
    144c:	f8 01       	movw	r30, r16
	{
		DeviceIDString[0] = 0x00;
    144e:	10 82       	st	Z, r1
    1450:	24 c0       	rjmp	.+72     	; 0x149a <PRNT_Host_GetDeviceID+0xac>
		return HOST_SENDCONTROL_Successful;
    1452:	83 2f       	mov	r24, r19

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1454:	92 2f       	mov	r25, r18
    1456:	e8 16       	cp	r14, r24
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);

	if (DeviceIDStringLength > BufferSize)
    1458:	f9 06       	cpc	r15, r25
    145a:	18 f0       	brcs	.+6      	; 0x1462 <PRNT_Host_GetDeviceID+0x74>
    145c:	9a 83       	std	Y+2, r25	; 0x02
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <PRNT_Host_GetDeviceID+0x78>
    1462:	fa 82       	std	Y+2, r15	; 0x02

	if (DeviceIDStringLength > BufferSize)
	  DeviceIDStringLength = BufferSize;
    1464:	e9 82       	std	Y+1, r14	; 0x01
    1466:	89 81       	ldd	r24, Y+1	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	90 93 56 01 	sts	0x0156, r25
    146e:	80 93 55 01 	sts	0x0155, r24
    1472:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    1474:	4d dd       	rcall	.-1382   	; 0xf10 <USB_Host_SendControlRequest>
    1476:	81 11       	cpse	r24, r1
    1478:	10 c0       	rjmp	.+32     	; 0x149a <PRNT_Host_GetDeviceID+0xac>
    147a:	e9 80       	ldd	r14, Y+1	; 0x01
    147c:	fa 80       	ldd	r15, Y+2	; 0x02
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    147e:	f2 e0       	ldi	r31, 0x02	; 2
    1480:	ef 1a       	sub	r14, r31
    1482:	f1 08       	sbc	r15, r1
    1484:	b8 01       	movw	r22, r16
    1486:	6e 5f       	subi	r22, 0xFE	; 254
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	a7 01       	movw	r20, r14
    148c:	c8 01       	movw	r24, r16
    148e:	50 d0       	rcall	.+160    	; 0x1530 <memmove>
    1490:	f8 01       	movw	r30, r16
    1492:	ee 0d       	add	r30, r14
    1494:	ff 1d       	adc	r31, r15

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    1496:	10 82       	st	Z, r1
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0

	return HOST_SENDCONTROL_Successful;
    149e:	df 91       	pop	r29
}
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	08 95       	ret

000014ac <Serial_putchar>:
    14ac:	90 91 c8 00 	lds	r25, 0x00C8
    14b0:	95 ff       	sbrs	r25, 5
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <Serial_putchar>
				UDR1 = DataByte;
    14b4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	08 95       	ret

000014be <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14be:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14c2:	87 ff       	sbrs	r24, 7
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <Serial_getchar+0x18>
    14c6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14ca:	87 ff       	sbrs	r24, 7
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14ce:	80 91 ce 00 	lds	r24, 0x00CE
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	08 95       	ret
	  return _FDEV_EOF;
    14d6:	8e ef       	ldi	r24, 0xFE	; 254
    14d8:	9f ef       	ldi	r25, 0xFF	; 255
    14da:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14e0:	08 95       	ret

000014e2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14e2:	fc 01       	movw	r30, r24
	if (!(Stream))
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	59 f4       	brne	.+22     	; 0x14fe <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14e8:	88 e5       	ldi	r24, 0x58	; 88
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	90 93 67 01 	sts	0x0167, r25
    14f0:	80 93 66 01 	sts	0x0166, r24
		stdout = Stream;
    14f4:	90 93 69 01 	sts	0x0169, r25
    14f8:	80 93 68 01 	sts	0x0168, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    14fc:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    14fe:	8e e0       	ldi	r24, 0x0E	; 14
    1500:	df 01       	movw	r26, r30
    1502:	1d 92       	st	X+, r1
    1504:	8a 95       	dec	r24
    1506:	e9 f7       	brne	.-6      	; 0x1502 <Serial_CreateStream+0x20>
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	83 83       	std	Z+3, r24	; 0x03
    150c:	86 e5       	ldi	r24, 0x56	; 86
    150e:	9a e0       	ldi	r25, 0x0A	; 10
    1510:	91 87       	std	Z+9, r25	; 0x09
    1512:	80 87       	std	Z+8, r24	; 0x08
    1514:	8f e5       	ldi	r24, 0x5F	; 95
    1516:	9a e0       	ldi	r25, 0x0A	; 10
    1518:	93 87       	std	Z+11, r25	; 0x0b
    151a:	82 87       	std	Z+10, r24	; 0x0a
    151c:	08 95       	ret

0000151e <memcpy>:
    151e:	fb 01       	movw	r30, r22
    1520:	dc 01       	movw	r26, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <memcpy+0xa>
    1524:	01 90       	ld	r0, Z+
    1526:	0d 92       	st	X+, r0
    1528:	41 50       	subi	r20, 0x01	; 1
    152a:	50 40       	sbci	r21, 0x00	; 0
    152c:	d8 f7       	brcc	.-10     	; 0x1524 <memcpy+0x6>
    152e:	08 95       	ret

00001530 <memmove>:
    1530:	68 17       	cp	r22, r24
    1532:	79 07       	cpc	r23, r25
    1534:	68 f4       	brcc	.+26     	; 0x1550 <memmove+0x20>
    1536:	fb 01       	movw	r30, r22
    1538:	dc 01       	movw	r26, r24
    153a:	e4 0f       	add	r30, r20
    153c:	f5 1f       	adc	r31, r21
    153e:	a4 0f       	add	r26, r20
    1540:	b5 1f       	adc	r27, r21
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <memmove+0x18>
    1544:	02 90       	ld	r0, -Z
    1546:	0e 92       	st	-X, r0
    1548:	41 50       	subi	r20, 0x01	; 1
    154a:	50 40       	sbci	r21, 0x00	; 0
    154c:	d8 f7       	brcc	.-10     	; 0x1544 <memmove+0x14>
    154e:	08 95       	ret
    1550:	e6 cf       	rjmp	.-52     	; 0x151e <memcpy>

00001552 <printf_P>:
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	fe 01       	movw	r30, r28
    1560:	37 96       	adiw	r30, 0x07	; 7
    1562:	61 91       	ld	r22, Z+
    1564:	71 91       	ld	r23, Z+
    1566:	08 e6       	ldi	r16, 0x68	; 104
    1568:	11 e0       	ldi	r17, 0x01	; 1
    156a:	d8 01       	movw	r26, r16
    156c:	8d 91       	ld	r24, X+
    156e:	9c 91       	ld	r25, X
    1570:	dc 01       	movw	r26, r24
    1572:	13 96       	adiw	r26, 0x03	; 3
    1574:	2c 91       	ld	r18, X
    1576:	13 97       	sbiw	r26, 0x03	; 3
    1578:	28 60       	ori	r18, 0x08	; 8
    157a:	13 96       	adiw	r26, 0x03	; 3
    157c:	2c 93       	st	X, r18
    157e:	af 01       	movw	r20, r30
    1580:	3a d0       	rcall	.+116    	; 0x15f6 <vfprintf>
    1582:	d8 01       	movw	r26, r16
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	23 81       	ldd	r18, Z+3	; 0x03
    158a:	27 7f       	andi	r18, 0xF7	; 247
    158c:	23 83       	std	Z+3, r18	; 0x03
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <puts_P>:
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ec 01       	movw	r28, r24
    15a2:	e0 91 68 01 	lds	r30, 0x0168
    15a6:	f0 91 69 01 	lds	r31, 0x0169
    15aa:	83 81       	ldd	r24, Z+3	; 0x03
    15ac:	81 ff       	sbrs	r24, 1
    15ae:	1c c0       	rjmp	.+56     	; 0x15e8 <puts_P+0x50>
    15b0:	00 e0       	ldi	r16, 0x00	; 0
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	fe 01       	movw	r30, r28
    15b6:	84 91       	lpm	r24, Z
    15b8:	60 91 68 01 	lds	r22, 0x0168
    15bc:	70 91 69 01 	lds	r23, 0x0169
    15c0:	db 01       	movw	r26, r22
    15c2:	18 96       	adiw	r26, 0x08	; 8
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	19 97       	sbiw	r26, 0x09	; 9
    15ca:	88 23       	and	r24, r24
    15cc:	39 f0       	breq	.+14     	; 0x15dc <puts_P+0x44>
    15ce:	09 95       	icall
    15d0:	89 2b       	or	r24, r25
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <puts_P+0x40>
    15d4:	0f ef       	ldi	r16, 0xFF	; 255
    15d6:	1f ef       	ldi	r17, 0xFF	; 255
    15d8:	21 96       	adiw	r28, 0x01	; 1
    15da:	ec cf       	rjmp	.-40     	; 0x15b4 <puts_P+0x1c>
    15dc:	8a e0       	ldi	r24, 0x0A	; 10
    15de:	09 95       	icall
    15e0:	89 2b       	or	r24, r25
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <puts_P+0x50>
    15e4:	c8 01       	movw	r24, r16
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <puts_P+0x54>
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f ef       	ldi	r25, 0xFF	; 255
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <vfprintf>:
    15f6:	2f 92       	push	r2
    15f8:	3f 92       	push	r3
    15fa:	4f 92       	push	r4
    15fc:	5f 92       	push	r5
    15fe:	6f 92       	push	r6
    1600:	7f 92       	push	r7
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	2c 97       	sbiw	r28, 0x0c	; 12
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	7c 01       	movw	r14, r24
    162c:	6b 01       	movw	r12, r22
    162e:	8a 01       	movw	r16, r20
    1630:	fc 01       	movw	r30, r24
    1632:	17 82       	std	Z+7, r1	; 0x07
    1634:	16 82       	std	Z+6, r1	; 0x06
    1636:	83 81       	ldd	r24, Z+3	; 0x03
    1638:	81 ff       	sbrs	r24, 1
    163a:	b0 c1       	rjmp	.+864    	; 0x199c <vfprintf+0x3a6>
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	4c 01       	movw	r8, r24
    1642:	f7 01       	movw	r30, r14
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	f6 01       	movw	r30, r12
    1648:	93 fd       	sbrc	r25, 3
    164a:	85 91       	lpm	r24, Z+
    164c:	93 ff       	sbrs	r25, 3
    164e:	81 91       	ld	r24, Z+
    1650:	6f 01       	movw	r12, r30
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <vfprintf+0x62>
    1656:	9e c1       	rjmp	.+828    	; 0x1994 <vfprintf+0x39e>
    1658:	85 32       	cpi	r24, 0x25	; 37
    165a:	39 f4       	brne	.+14     	; 0x166a <vfprintf+0x74>
    165c:	93 fd       	sbrc	r25, 3
    165e:	85 91       	lpm	r24, Z+
    1660:	93 ff       	sbrs	r25, 3
    1662:	81 91       	ld	r24, Z+
    1664:	6f 01       	movw	r12, r30
    1666:	85 32       	cpi	r24, 0x25	; 37
    1668:	21 f4       	brne	.+8      	; 0x1672 <vfprintf+0x7c>
    166a:	b7 01       	movw	r22, r14
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	c7 d1       	rcall	.+910    	; 0x19fe <fputc>
    1670:	e8 cf       	rjmp	.-48     	; 0x1642 <vfprintf+0x4c>
    1672:	51 2c       	mov	r5, r1
    1674:	31 2c       	mov	r3, r1
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	20 32       	cpi	r18, 0x20	; 32
    167a:	a0 f4       	brcc	.+40     	; 0x16a4 <vfprintf+0xae>
    167c:	8b 32       	cpi	r24, 0x2B	; 43
    167e:	69 f0       	breq	.+26     	; 0x169a <vfprintf+0xa4>
    1680:	30 f4       	brcc	.+12     	; 0x168e <vfprintf+0x98>
    1682:	80 32       	cpi	r24, 0x20	; 32
    1684:	59 f0       	breq	.+22     	; 0x169c <vfprintf+0xa6>
    1686:	83 32       	cpi	r24, 0x23	; 35
    1688:	69 f4       	brne	.+26     	; 0x16a4 <vfprintf+0xae>
    168a:	20 61       	ori	r18, 0x10	; 16
    168c:	2c c0       	rjmp	.+88     	; 0x16e6 <vfprintf+0xf0>
    168e:	8d 32       	cpi	r24, 0x2D	; 45
    1690:	39 f0       	breq	.+14     	; 0x16a0 <vfprintf+0xaa>
    1692:	80 33       	cpi	r24, 0x30	; 48
    1694:	39 f4       	brne	.+14     	; 0x16a4 <vfprintf+0xae>
    1696:	21 60       	ori	r18, 0x01	; 1
    1698:	26 c0       	rjmp	.+76     	; 0x16e6 <vfprintf+0xf0>
    169a:	22 60       	ori	r18, 0x02	; 2
    169c:	24 60       	ori	r18, 0x04	; 4
    169e:	23 c0       	rjmp	.+70     	; 0x16e6 <vfprintf+0xf0>
    16a0:	28 60       	ori	r18, 0x08	; 8
    16a2:	21 c0       	rjmp	.+66     	; 0x16e6 <vfprintf+0xf0>
    16a4:	27 fd       	sbrc	r18, 7
    16a6:	27 c0       	rjmp	.+78     	; 0x16f6 <vfprintf+0x100>
    16a8:	30 ed       	ldi	r19, 0xD0	; 208
    16aa:	38 0f       	add	r19, r24
    16ac:	3a 30       	cpi	r19, 0x0A	; 10
    16ae:	78 f4       	brcc	.+30     	; 0x16ce <vfprintf+0xd8>
    16b0:	26 ff       	sbrs	r18, 6
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0xca>
    16b4:	fa e0       	ldi	r31, 0x0A	; 10
    16b6:	5f 9e       	mul	r5, r31
    16b8:	30 0d       	add	r19, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	53 2e       	mov	r5, r19
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <vfprintf+0xf0>
    16c0:	8a e0       	ldi	r24, 0x0A	; 10
    16c2:	38 9e       	mul	r3, r24
    16c4:	30 0d       	add	r19, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	33 2e       	mov	r3, r19
    16ca:	20 62       	ori	r18, 0x20	; 32
    16cc:	0c c0       	rjmp	.+24     	; 0x16e6 <vfprintf+0xf0>
    16ce:	8e 32       	cpi	r24, 0x2E	; 46
    16d0:	21 f4       	brne	.+8      	; 0x16da <vfprintf+0xe4>
    16d2:	26 fd       	sbrc	r18, 6
    16d4:	5f c1       	rjmp	.+702    	; 0x1994 <vfprintf+0x39e>
    16d6:	20 64       	ori	r18, 0x40	; 64
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0xf0>
    16da:	8c 36       	cpi	r24, 0x6C	; 108
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <vfprintf+0xec>
    16de:	20 68       	ori	r18, 0x80	; 128
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0xf0>
    16e2:	88 36       	cpi	r24, 0x68	; 104
    16e4:	41 f4       	brne	.+16     	; 0x16f6 <vfprintf+0x100>
    16e6:	f6 01       	movw	r30, r12
    16e8:	93 fd       	sbrc	r25, 3
    16ea:	85 91       	lpm	r24, Z+
    16ec:	93 ff       	sbrs	r25, 3
    16ee:	81 91       	ld	r24, Z+
    16f0:	6f 01       	movw	r12, r30
    16f2:	81 11       	cpse	r24, r1
    16f4:	c1 cf       	rjmp	.-126    	; 0x1678 <vfprintf+0x82>
    16f6:	98 2f       	mov	r25, r24
    16f8:	9f 7d       	andi	r25, 0xDF	; 223
    16fa:	95 54       	subi	r25, 0x45	; 69
    16fc:	93 30       	cpi	r25, 0x03	; 3
    16fe:	28 f4       	brcc	.+10     	; 0x170a <vfprintf+0x114>
    1700:	0c 5f       	subi	r16, 0xFC	; 252
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	ff e3       	ldi	r31, 0x3F	; 63
    1706:	f9 83       	std	Y+1, r31	; 0x01
    1708:	0d c0       	rjmp	.+26     	; 0x1724 <vfprintf+0x12e>
    170a:	83 36       	cpi	r24, 0x63	; 99
    170c:	31 f0       	breq	.+12     	; 0x171a <vfprintf+0x124>
    170e:	83 37       	cpi	r24, 0x73	; 115
    1710:	71 f0       	breq	.+28     	; 0x172e <vfprintf+0x138>
    1712:	83 35       	cpi	r24, 0x53	; 83
    1714:	09 f0       	breq	.+2      	; 0x1718 <vfprintf+0x122>
    1716:	57 c0       	rjmp	.+174    	; 0x17c6 <vfprintf+0x1d0>
    1718:	21 c0       	rjmp	.+66     	; 0x175c <vfprintf+0x166>
    171a:	f8 01       	movw	r30, r16
    171c:	80 81       	ld	r24, Z
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	0e 5f       	subi	r16, 0xFE	; 254
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	44 24       	eor	r4, r4
    1726:	43 94       	inc	r4
    1728:	51 2c       	mov	r5, r1
    172a:	54 01       	movw	r10, r8
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <vfprintf+0x160>
    172e:	38 01       	movw	r6, r16
    1730:	f2 e0       	ldi	r31, 0x02	; 2
    1732:	6f 0e       	add	r6, r31
    1734:	71 1c       	adc	r7, r1
    1736:	f8 01       	movw	r30, r16
    1738:	a0 80       	ld	r10, Z
    173a:	b1 80       	ldd	r11, Z+1	; 0x01
    173c:	26 ff       	sbrs	r18, 6
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <vfprintf+0x150>
    1740:	65 2d       	mov	r22, r5
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x154>
    1746:	6f ef       	ldi	r22, 0xFF	; 255
    1748:	7f ef       	ldi	r23, 0xFF	; 255
    174a:	c5 01       	movw	r24, r10
    174c:	2c 87       	std	Y+12, r18	; 0x0c
    174e:	4c d1       	rcall	.+664    	; 0x19e8 <strnlen>
    1750:	2c 01       	movw	r4, r24
    1752:	83 01       	movw	r16, r6
    1754:	2c 85       	ldd	r18, Y+12	; 0x0c
    1756:	2f 77       	andi	r18, 0x7F	; 127
    1758:	22 2e       	mov	r2, r18
    175a:	16 c0       	rjmp	.+44     	; 0x1788 <vfprintf+0x192>
    175c:	38 01       	movw	r6, r16
    175e:	f2 e0       	ldi	r31, 0x02	; 2
    1760:	6f 0e       	add	r6, r31
    1762:	71 1c       	adc	r7, r1
    1764:	f8 01       	movw	r30, r16
    1766:	a0 80       	ld	r10, Z
    1768:	b1 80       	ldd	r11, Z+1	; 0x01
    176a:	26 ff       	sbrs	r18, 6
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <vfprintf+0x17e>
    176e:	65 2d       	mov	r22, r5
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x182>
    1774:	6f ef       	ldi	r22, 0xFF	; 255
    1776:	7f ef       	ldi	r23, 0xFF	; 255
    1778:	c5 01       	movw	r24, r10
    177a:	2c 87       	std	Y+12, r18	; 0x0c
    177c:	2a d1       	rcall	.+596    	; 0x19d2 <strnlen_P>
    177e:	2c 01       	movw	r4, r24
    1780:	2c 85       	ldd	r18, Y+12	; 0x0c
    1782:	20 68       	ori	r18, 0x80	; 128
    1784:	22 2e       	mov	r2, r18
    1786:	83 01       	movw	r16, r6
    1788:	23 fc       	sbrc	r2, 3
    178a:	19 c0       	rjmp	.+50     	; 0x17be <vfprintf+0x1c8>
    178c:	83 2d       	mov	r24, r3
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	48 16       	cp	r4, r24
    1792:	59 06       	cpc	r5, r25
    1794:	a0 f4       	brcc	.+40     	; 0x17be <vfprintf+0x1c8>
    1796:	b7 01       	movw	r22, r14
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	30 d1       	rcall	.+608    	; 0x19fe <fputc>
    179e:	3a 94       	dec	r3
    17a0:	f5 cf       	rjmp	.-22     	; 0x178c <vfprintf+0x196>
    17a2:	f5 01       	movw	r30, r10
    17a4:	27 fc       	sbrc	r2, 7
    17a6:	85 91       	lpm	r24, Z+
    17a8:	27 fe       	sbrs	r2, 7
    17aa:	81 91       	ld	r24, Z+
    17ac:	5f 01       	movw	r10, r30
    17ae:	b7 01       	movw	r22, r14
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	25 d1       	rcall	.+586    	; 0x19fe <fputc>
    17b4:	31 10       	cpse	r3, r1
    17b6:	3a 94       	dec	r3
    17b8:	f1 e0       	ldi	r31, 0x01	; 1
    17ba:	4f 1a       	sub	r4, r31
    17bc:	51 08       	sbc	r5, r1
    17be:	41 14       	cp	r4, r1
    17c0:	51 04       	cpc	r5, r1
    17c2:	79 f7       	brne	.-34     	; 0x17a2 <vfprintf+0x1ac>
    17c4:	de c0       	rjmp	.+444    	; 0x1982 <vfprintf+0x38c>
    17c6:	84 36       	cpi	r24, 0x64	; 100
    17c8:	11 f0       	breq	.+4      	; 0x17ce <vfprintf+0x1d8>
    17ca:	89 36       	cpi	r24, 0x69	; 105
    17cc:	31 f5       	brne	.+76     	; 0x181a <vfprintf+0x224>
    17ce:	f8 01       	movw	r30, r16
    17d0:	27 ff       	sbrs	r18, 7
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <vfprintf+0x1ec>
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	0c 5f       	subi	r16, 0xFC	; 252
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <vfprintf+0x1fc>
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	88 27       	eor	r24, r24
    17e8:	77 fd       	sbrc	r23, 7
    17ea:	80 95       	com	r24
    17ec:	98 2f       	mov	r25, r24
    17ee:	0e 5f       	subi	r16, 0xFE	; 254
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	2f 76       	andi	r18, 0x6F	; 111
    17f4:	b2 2e       	mov	r11, r18
    17f6:	97 ff       	sbrs	r25, 7
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <vfprintf+0x216>
    17fa:	90 95       	com	r25
    17fc:	80 95       	com	r24
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	20 68       	ori	r18, 0x80	; 128
    180a:	b2 2e       	mov	r11, r18
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	a4 01       	movw	r20, r8
    1812:	27 d1       	rcall	.+590    	; 0x1a62 <__ultoa_invert>
    1814:	a8 2e       	mov	r10, r24
    1816:	a8 18       	sub	r10, r8
    1818:	43 c0       	rjmp	.+134    	; 0x18a0 <vfprintf+0x2aa>
    181a:	85 37       	cpi	r24, 0x75	; 117
    181c:	29 f4       	brne	.+10     	; 0x1828 <vfprintf+0x232>
    181e:	2f 7e       	andi	r18, 0xEF	; 239
    1820:	b2 2e       	mov	r11, r18
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	25 c0       	rjmp	.+74     	; 0x1872 <vfprintf+0x27c>
    1828:	f2 2f       	mov	r31, r18
    182a:	f9 7f       	andi	r31, 0xF9	; 249
    182c:	bf 2e       	mov	r11, r31
    182e:	8f 36       	cpi	r24, 0x6F	; 111
    1830:	c1 f0       	breq	.+48     	; 0x1862 <vfprintf+0x26c>
    1832:	18 f4       	brcc	.+6      	; 0x183a <vfprintf+0x244>
    1834:	88 35       	cpi	r24, 0x58	; 88
    1836:	79 f0       	breq	.+30     	; 0x1856 <vfprintf+0x260>
    1838:	ad c0       	rjmp	.+346    	; 0x1994 <vfprintf+0x39e>
    183a:	80 37       	cpi	r24, 0x70	; 112
    183c:	19 f0       	breq	.+6      	; 0x1844 <vfprintf+0x24e>
    183e:	88 37       	cpi	r24, 0x78	; 120
    1840:	21 f0       	breq	.+8      	; 0x184a <vfprintf+0x254>
    1842:	a8 c0       	rjmp	.+336    	; 0x1994 <vfprintf+0x39e>
    1844:	2f 2f       	mov	r18, r31
    1846:	20 61       	ori	r18, 0x10	; 16
    1848:	b2 2e       	mov	r11, r18
    184a:	b4 fe       	sbrs	r11, 4
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <vfprintf+0x272>
    184e:	8b 2d       	mov	r24, r11
    1850:	84 60       	ori	r24, 0x04	; 4
    1852:	b8 2e       	mov	r11, r24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <vfprintf+0x272>
    1856:	24 ff       	sbrs	r18, 4
    1858:	0a c0       	rjmp	.+20     	; 0x186e <vfprintf+0x278>
    185a:	9f 2f       	mov	r25, r31
    185c:	96 60       	ori	r25, 0x06	; 6
    185e:	b9 2e       	mov	r11, r25
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x278>
    1862:	28 e0       	ldi	r18, 0x08	; 8
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <vfprintf+0x27c>
    1868:	20 e1       	ldi	r18, 0x10	; 16
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <vfprintf+0x27c>
    186e:	20 e1       	ldi	r18, 0x10	; 16
    1870:	32 e0       	ldi	r19, 0x02	; 2
    1872:	f8 01       	movw	r30, r16
    1874:	b7 fe       	sbrs	r11, 7
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <vfprintf+0x290>
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	0c 5f       	subi	r16, 0xFC	; 252
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <vfprintf+0x29c>
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 5f       	subi	r16, 0xFE	; 254
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	a4 01       	movw	r20, r8
    1894:	e6 d0       	rcall	.+460    	; 0x1a62 <__ultoa_invert>
    1896:	a8 2e       	mov	r10, r24
    1898:	a8 18       	sub	r10, r8
    189a:	fb 2d       	mov	r31, r11
    189c:	ff 77       	andi	r31, 0x7F	; 127
    189e:	bf 2e       	mov	r11, r31
    18a0:	b6 fe       	sbrs	r11, 6
    18a2:	0b c0       	rjmp	.+22     	; 0x18ba <vfprintf+0x2c4>
    18a4:	2b 2d       	mov	r18, r11
    18a6:	2e 7f       	andi	r18, 0xFE	; 254
    18a8:	a5 14       	cp	r10, r5
    18aa:	50 f4       	brcc	.+20     	; 0x18c0 <vfprintf+0x2ca>
    18ac:	b4 fe       	sbrs	r11, 4
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <vfprintf+0x2ce>
    18b0:	b2 fc       	sbrc	r11, 2
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <vfprintf+0x2ce>
    18b4:	2b 2d       	mov	r18, r11
    18b6:	2e 7e       	andi	r18, 0xEE	; 238
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <vfprintf+0x2ce>
    18ba:	7a 2c       	mov	r7, r10
    18bc:	2b 2d       	mov	r18, r11
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <vfprintf+0x2d0>
    18c0:	7a 2c       	mov	r7, r10
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x2d0>
    18c4:	75 2c       	mov	r7, r5
    18c6:	24 ff       	sbrs	r18, 4
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <vfprintf+0x2ee>
    18ca:	fe 01       	movw	r30, r28
    18cc:	ea 0d       	add	r30, r10
    18ce:	f1 1d       	adc	r31, r1
    18d0:	80 81       	ld	r24, Z
    18d2:	80 33       	cpi	r24, 0x30	; 48
    18d4:	11 f4       	brne	.+4      	; 0x18da <vfprintf+0x2e4>
    18d6:	29 7e       	andi	r18, 0xE9	; 233
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <vfprintf+0x2f6>
    18da:	22 ff       	sbrs	r18, 2
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0x2f4>
    18de:	73 94       	inc	r7
    18e0:	73 94       	inc	r7
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <vfprintf+0x2f6>
    18e4:	82 2f       	mov	r24, r18
    18e6:	86 78       	andi	r24, 0x86	; 134
    18e8:	09 f0       	breq	.+2      	; 0x18ec <vfprintf+0x2f6>
    18ea:	73 94       	inc	r7
    18ec:	23 fd       	sbrc	r18, 3
    18ee:	12 c0       	rjmp	.+36     	; 0x1914 <vfprintf+0x31e>
    18f0:	20 ff       	sbrs	r18, 0
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x30a>
    18f4:	5a 2c       	mov	r5, r10
    18f6:	73 14       	cp	r7, r3
    18f8:	18 f4       	brcc	.+6      	; 0x1900 <vfprintf+0x30a>
    18fa:	53 0c       	add	r5, r3
    18fc:	57 18       	sub	r5, r7
    18fe:	73 2c       	mov	r7, r3
    1900:	73 14       	cp	r7, r3
    1902:	60 f4       	brcc	.+24     	; 0x191c <vfprintf+0x326>
    1904:	b7 01       	movw	r22, r14
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	2c 87       	std	Y+12, r18	; 0x0c
    190c:	78 d0       	rcall	.+240    	; 0x19fe <fputc>
    190e:	73 94       	inc	r7
    1910:	2c 85       	ldd	r18, Y+12	; 0x0c
    1912:	f6 cf       	rjmp	.-20     	; 0x1900 <vfprintf+0x30a>
    1914:	73 14       	cp	r7, r3
    1916:	10 f4       	brcc	.+4      	; 0x191c <vfprintf+0x326>
    1918:	37 18       	sub	r3, r7
    191a:	01 c0       	rjmp	.+2      	; 0x191e <vfprintf+0x328>
    191c:	31 2c       	mov	r3, r1
    191e:	24 ff       	sbrs	r18, 4
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <vfprintf+0x34e>
    1922:	b7 01       	movw	r22, r14
    1924:	80 e3       	ldi	r24, 0x30	; 48
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	2c 87       	std	Y+12, r18	; 0x0c
    192a:	69 d0       	rcall	.+210    	; 0x19fe <fputc>
    192c:	2c 85       	ldd	r18, Y+12	; 0x0c
    192e:	22 ff       	sbrs	r18, 2
    1930:	16 c0       	rjmp	.+44     	; 0x195e <vfprintf+0x368>
    1932:	21 ff       	sbrs	r18, 1
    1934:	03 c0       	rjmp	.+6      	; 0x193c <vfprintf+0x346>
    1936:	88 e5       	ldi	r24, 0x58	; 88
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x34a>
    193c:	88 e7       	ldi	r24, 0x78	; 120
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b7 01       	movw	r22, r14
    1942:	0c c0       	rjmp	.+24     	; 0x195c <vfprintf+0x366>
    1944:	82 2f       	mov	r24, r18
    1946:	86 78       	andi	r24, 0x86	; 134
    1948:	51 f0       	breq	.+20     	; 0x195e <vfprintf+0x368>
    194a:	21 fd       	sbrc	r18, 1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0x35c>
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <vfprintf+0x35e>
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	27 fd       	sbrc	r18, 7
    1956:	8d e2       	ldi	r24, 0x2D	; 45
    1958:	b7 01       	movw	r22, r14
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	50 d0       	rcall	.+160    	; 0x19fe <fputc>
    195e:	a5 14       	cp	r10, r5
    1960:	30 f4       	brcc	.+12     	; 0x196e <vfprintf+0x378>
    1962:	b7 01       	movw	r22, r14
    1964:	80 e3       	ldi	r24, 0x30	; 48
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	4a d0       	rcall	.+148    	; 0x19fe <fputc>
    196a:	5a 94       	dec	r5
    196c:	f8 cf       	rjmp	.-16     	; 0x195e <vfprintf+0x368>
    196e:	aa 94       	dec	r10
    1970:	f4 01       	movw	r30, r8
    1972:	ea 0d       	add	r30, r10
    1974:	f1 1d       	adc	r31, r1
    1976:	80 81       	ld	r24, Z
    1978:	b7 01       	movw	r22, r14
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	40 d0       	rcall	.+128    	; 0x19fe <fputc>
    197e:	a1 10       	cpse	r10, r1
    1980:	f6 cf       	rjmp	.-20     	; 0x196e <vfprintf+0x378>
    1982:	33 20       	and	r3, r3
    1984:	09 f4       	brne	.+2      	; 0x1988 <vfprintf+0x392>
    1986:	5d ce       	rjmp	.-838    	; 0x1642 <vfprintf+0x4c>
    1988:	b7 01       	movw	r22, r14
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	37 d0       	rcall	.+110    	; 0x19fe <fputc>
    1990:	3a 94       	dec	r3
    1992:	f7 cf       	rjmp	.-18     	; 0x1982 <vfprintf+0x38c>
    1994:	f7 01       	movw	r30, r14
    1996:	86 81       	ldd	r24, Z+6	; 0x06
    1998:	97 81       	ldd	r25, Z+7	; 0x07
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0x3aa>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	2c 96       	adiw	r28, 0x0c	; 12
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	bf 90       	pop	r11
    19be:	af 90       	pop	r10
    19c0:	9f 90       	pop	r9
    19c2:	8f 90       	pop	r8
    19c4:	7f 90       	pop	r7
    19c6:	6f 90       	pop	r6
    19c8:	5f 90       	pop	r5
    19ca:	4f 90       	pop	r4
    19cc:	3f 90       	pop	r3
    19ce:	2f 90       	pop	r2
    19d0:	08 95       	ret

000019d2 <strnlen_P>:
    19d2:	fc 01       	movw	r30, r24
    19d4:	05 90       	lpm	r0, Z+
    19d6:	61 50       	subi	r22, 0x01	; 1
    19d8:	70 40       	sbci	r23, 0x00	; 0
    19da:	01 10       	cpse	r0, r1
    19dc:	d8 f7       	brcc	.-10     	; 0x19d4 <strnlen_P+0x2>
    19de:	80 95       	com	r24
    19e0:	90 95       	com	r25
    19e2:	8e 0f       	add	r24, r30
    19e4:	9f 1f       	adc	r25, r31
    19e6:	08 95       	ret

000019e8 <strnlen>:
    19e8:	fc 01       	movw	r30, r24
    19ea:	61 50       	subi	r22, 0x01	; 1
    19ec:	70 40       	sbci	r23, 0x00	; 0
    19ee:	01 90       	ld	r0, Z+
    19f0:	01 10       	cpse	r0, r1
    19f2:	d8 f7       	brcc	.-10     	; 0x19ea <strnlen+0x2>
    19f4:	80 95       	com	r24
    19f6:	90 95       	com	r25
    19f8:	8e 0f       	add	r24, r30
    19fa:	9f 1f       	adc	r25, r31
    19fc:	08 95       	ret

000019fe <fputc>:
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	18 2f       	mov	r17, r24
    1a08:	09 2f       	mov	r16, r25
    1a0a:	eb 01       	movw	r28, r22
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	81 fd       	sbrc	r24, 1
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <fputc+0x1a>
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	20 c0       	rjmp	.+64     	; 0x1a58 <fputc+0x5a>
    1a18:	82 ff       	sbrs	r24, 2
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <fputc+0x3e>
    1a1c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a1e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	42 17       	cp	r20, r18
    1a26:	53 07       	cpc	r21, r19
    1a28:	7c f4       	brge	.+30     	; 0x1a48 <fputc+0x4a>
    1a2a:	e8 81       	ld	r30, Y
    1a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a2e:	9f 01       	movw	r18, r30
    1a30:	2f 5f       	subi	r18, 0xFF	; 255
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	39 83       	std	Y+1, r19	; 0x01
    1a36:	28 83       	st	Y, r18
    1a38:	10 83       	st	Z, r17
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <fputc+0x4a>
    1a3c:	e8 85       	ldd	r30, Y+8	; 0x08
    1a3e:	f9 85       	ldd	r31, Y+9	; 0x09
    1a40:	81 2f       	mov	r24, r17
    1a42:	09 95       	icall
    1a44:	89 2b       	or	r24, r25
    1a46:	29 f7       	brne	.-54     	; 0x1a12 <fputc+0x14>
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	2f 5f       	subi	r18, 0xFF	; 255
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	3f 83       	std	Y+7, r19	; 0x07
    1a52:	2e 83       	std	Y+6, r18	; 0x06
    1a54:	81 2f       	mov	r24, r17
    1a56:	90 2f       	mov	r25, r16
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <__ultoa_invert>:
    1a62:	fa 01       	movw	r30, r20
    1a64:	aa 27       	eor	r26, r26
    1a66:	28 30       	cpi	r18, 0x08	; 8
    1a68:	51 f1       	breq	.+84     	; 0x1abe <__ultoa_invert+0x5c>
    1a6a:	20 31       	cpi	r18, 0x10	; 16
    1a6c:	81 f1       	breq	.+96     	; 0x1ace <__ultoa_invert+0x6c>
    1a6e:	e8 94       	clt
    1a70:	6f 93       	push	r22
    1a72:	6e 7f       	andi	r22, 0xFE	; 254
    1a74:	6e 5f       	subi	r22, 0xFE	; 254
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	af 4f       	sbci	r26, 0xFF	; 255
    1a7e:	b1 e0       	ldi	r27, 0x01	; 1
    1a80:	3e d0       	rcall	.+124    	; 0x1afe <__ultoa_invert+0x9c>
    1a82:	b4 e0       	ldi	r27, 0x04	; 4
    1a84:	3c d0       	rcall	.+120    	; 0x1afe <__ultoa_invert+0x9c>
    1a86:	67 0f       	add	r22, r23
    1a88:	78 1f       	adc	r23, r24
    1a8a:	89 1f       	adc	r24, r25
    1a8c:	9a 1f       	adc	r25, r26
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	68 0f       	add	r22, r24
    1a92:	79 1f       	adc	r23, r25
    1a94:	8a 1f       	adc	r24, r26
    1a96:	91 1d       	adc	r25, r1
    1a98:	a1 1d       	adc	r26, r1
    1a9a:	6a 0f       	add	r22, r26
    1a9c:	71 1d       	adc	r23, r1
    1a9e:	81 1d       	adc	r24, r1
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	20 d0       	rcall	.+64     	; 0x1ae6 <__ultoa_invert+0x84>
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <__ultoa_invert+0x48>
    1aa8:	68 94       	set
    1aaa:	3f 91       	pop	r19
    1aac:	2a e0       	ldi	r18, 0x0A	; 10
    1aae:	26 9f       	mul	r18, r22
    1ab0:	11 24       	eor	r1, r1
    1ab2:	30 19       	sub	r19, r0
    1ab4:	30 5d       	subi	r19, 0xD0	; 208
    1ab6:	31 93       	st	Z+, r19
    1ab8:	de f6       	brtc	.-74     	; 0x1a70 <__ultoa_invert+0xe>
    1aba:	cf 01       	movw	r24, r30
    1abc:	08 95       	ret
    1abe:	46 2f       	mov	r20, r22
    1ac0:	47 70       	andi	r20, 0x07	; 7
    1ac2:	40 5d       	subi	r20, 0xD0	; 208
    1ac4:	41 93       	st	Z+, r20
    1ac6:	b3 e0       	ldi	r27, 0x03	; 3
    1ac8:	0f d0       	rcall	.+30     	; 0x1ae8 <__ultoa_invert+0x86>
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__ultoa_invert+0x5c>
    1acc:	f6 cf       	rjmp	.-20     	; 0x1aba <__ultoa_invert+0x58>
    1ace:	46 2f       	mov	r20, r22
    1ad0:	4f 70       	andi	r20, 0x0F	; 15
    1ad2:	40 5d       	subi	r20, 0xD0	; 208
    1ad4:	4a 33       	cpi	r20, 0x3A	; 58
    1ad6:	18 f0       	brcs	.+6      	; 0x1ade <__ultoa_invert+0x7c>
    1ad8:	49 5d       	subi	r20, 0xD9	; 217
    1ada:	31 fd       	sbrc	r19, 1
    1adc:	40 52       	subi	r20, 0x20	; 32
    1ade:	41 93       	st	Z+, r20
    1ae0:	02 d0       	rcall	.+4      	; 0x1ae6 <__ultoa_invert+0x84>
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__ultoa_invert+0x6c>
    1ae4:	ea cf       	rjmp	.-44     	; 0x1aba <__ultoa_invert+0x58>
    1ae6:	b4 e0       	ldi	r27, 0x04	; 4
    1ae8:	a6 95       	lsr	r26
    1aea:	97 95       	ror	r25
    1aec:	87 95       	ror	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	ba 95       	dec	r27
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__ultoa_invert+0x86>
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	61 05       	cpc	r22, r1
    1afa:	71 05       	cpc	r23, r1
    1afc:	08 95       	ret
    1afe:	9b 01       	movw	r18, r22
    1b00:	ac 01       	movw	r20, r24
    1b02:	0a 2e       	mov	r0, r26
    1b04:	06 94       	lsr	r0
    1b06:	57 95       	ror	r21
    1b08:	47 95       	ror	r20
    1b0a:	37 95       	ror	r19
    1b0c:	27 95       	ror	r18
    1b0e:	ba 95       	dec	r27
    1b10:	c9 f7       	brne	.-14     	; 0x1b04 <__ultoa_invert+0xa2>
    1b12:	62 0f       	add	r22, r18
    1b14:	73 1f       	adc	r23, r19
    1b16:	84 1f       	adc	r24, r20
    1b18:	95 1f       	adc	r25, r21
    1b1a:	a0 1d       	adc	r26, r0
    1b1c:	08 95       	ret

00001b1e <_exit>:
    1b1e:	f8 94       	cli

00001b20 <__stop_program>:
    1b20:	ff cf       	rjmp	.-2      	; 0x1b20 <__stop_program>


MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000d0c  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000548b  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001537  00000000  00000000  00006dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023f1  00000000  00000000  00008332  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000089c  00000000  00000000  0000a724  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000295c  00000000  00000000  0000afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003af9  00000000  00000000  0000d91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  00011415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	ed c3       	rjmp	.+2010   	; 0x804 <__vector_10>
  2a:	00 00       	nop
  2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
  8e:	00 00       	nop
  90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000b8 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
	{
		uint8_t  HIDReportItem  = *ReportData;
  e6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 106:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 116:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 136:	05 25 01 01 03                                      .%...

0000013b <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
 14b:	00 01 00                                            ...

0000014e <__ctors_end>:
				break;
 14e:	11 24       	eor	r1, r1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_clear_bss>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
				ReportSize     -= 2;
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	ae 30       	cpi	r26, 0x0E	; 14
				ReportData     += 2;
 166:	b1 07       	cpc	r27, r17
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	e0 d0       	rcall	.+448    	; 0x32c <main>
				break;
 16c:	83 c5       	rjmp	.+2822   	; 0xc74 <_exit>

0000016e <__bad_interrupt>:

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <LEDs_SetAllLEDs>:
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	9f 70       	andi	r25, 0x0F	; 15
 174:	98 2b       	or	r25, r24
 176:	9b b9       	out	0x0b, r25	; 11
 178:	08 95       	ret

0000017a <SetupHardware>:
				ReportSize     -= 1;
 17a:	84 b7       	in	r24, 0x34	; 52
 17c:	87 7f       	andi	r24, 0xF7	; 247
				ReportData     += 1;
 17e:	84 bf       	out	0x34, r24	; 52
 180:	88 e1       	ldi	r24, 0x18	; 24
 182:	0f b6       	in	r0, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	f8 94       	cli
 186:	80 93 60 00 	sts	0x0060, r24
 18a:	10 92 60 00 	sts	0x0060, r1
 18e:	0f be       	out	0x3f, r0	; 63
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	80 93 61 00 	sts	0x0061, r24
 19c:	90 93 61 00 	sts	0x0061, r25
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	8f 71       	andi	r24, 0x1F	; 31
 1a6:	84 b9       	out	0x04, r24	; 4
 1a8:	8d b1       	in	r24, 0x0d	; 13

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	8f 7c       	andi	r24, 0xCF	; 207
 1ac:	8d b9       	out	0x0d, r24	; 13
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 6e       	ori	r24, 0xE0	; 224
 1b2:	85 b9       	out	0x05, r24	; 5
				break;
 1b4:	8e b1       	in	r24, 0x0e	; 14
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	80 63       	ori	r24, 0x30	; 48
 1b8:	8e b9       	out	0x0e, r24	; 14
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 6f       	ori	r24, 0xF0	; 240
 1be:	8a b9       	out	0x0a, r24	; 10
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	6a 98       	cbi	0x0d, 2	; 13
 1c8:	72 9a       	sbi	0x0e, 2	; 14
 1ca:	01 c3       	rjmp	.+1538   	; 0x7ce <USB_Init>

000001cc <EVENT_USB_Device_Connect>:
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	d0 cf       	rjmp	.-96     	; 0x170 <LEDs_SetAllLEDs>

000001d0 <EVENT_USB_Device_Disconnect>:
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	ce cf       	rjmp	.-100    	; 0x170 <LEDs_SetAllLEDs>

000001d4 <EVENT_USB_Device_ConfigurationChanged>:
 1d4:	cf 93       	push	r28
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	42 e3       	ldi	r20, 0x32	; 50
 1d8:	61 e8       	ldi	r22, 0x81	; 129
 1da:	81 e0       	ldi	r24, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	2d d2       	rcall	.+1114   	; 0x638 <Endpoint_ConfigureEndpoint_Prv>
 1de:	c8 2f       	mov	r28, r24
 1e0:	42 e3       	ldi	r20, 0x32	; 50
 1e2:	60 e8       	ldi	r22, 0x80	; 128
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	28 d2       	rcall	.+1104   	; 0x638 <Endpoint_ConfigureEndpoint_Prv>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	88 23       	and	r24, r24
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <EVENT_USB_Device_ConfigurationChanged+0x20>
				break;
 1ec:	cc 23       	and	r28, r28
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <EVENT_USB_Device_ConfigurationChanged+0x20>
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <EVENT_USB_Device_ConfigurationChanged+0x22>
 1f4:	80 e9       	ldi	r24, 0x90	; 144
 1f6:	cf 91       	pop	r28
 1f8:	bb cf       	rjmp	.-138    	; 0x170 <LEDs_SetAllLEDs>

000001fa <MIDI_Task>:
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <MIDI_Task+0x8>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	00 d0       	rcall	.+0      	; 0x204 <MIDI_Task+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
				break;
 206:	de b7       	in	r29, 0x3e	; 62
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	80 91 05 01 	lds	r24, 0x0105
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	09 f0       	breq	.+2      	; 0x212 <MIDI_Task+0x18>
 210:	85 c0       	rjmp	.+266    	; 0x31c <MIDI_Task+0x122>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 e9 00 	sts	0x00E9, r24
 218:	80 91 e8 00 	lds	r24, 0x00E8
 21c:	80 ff       	sbrs	r24, 0
 21e:	52 c0       	rjmp	.+164    	; 0x2c4 <MIDI_Task+0xca>
 220:	83 b1       	in	r24, 0x03	; 3
 222:	1c b1       	in	r17, 0x0c	; 12
 224:	10 95       	com	r17
 226:	10 73       	andi	r17, 0x30	; 48
 228:	16 95       	lsr	r17
 22a:	80 95       	com	r24
 22c:	80 7e       	andi	r24, 0xE0	; 224
 22e:	18 2b       	or	r17, r24
 230:	20 91 00 01 	lds	r18, 0x0100
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	21 27       	eor	r18, r17
 236:	62 99       	sbic	0x0c, 2	; 12
 238:	02 c0       	rjmp	.+4      	; 0x23e <MIDI_Task+0x44>
 23a:	39 e0       	ldi	r19, 0x09	; 9
 23c:	01 c0       	rjmp	.+2      	; 0x240 <MIDI_Task+0x46>
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	26 ff       	sbrs	r18, 6
 242:	04 c0       	rjmp	.+8      	; 0x24c <MIDI_Task+0x52>
 244:	16 ff       	sbrs	r17, 6
 246:	04 c0       	rjmp	.+8      	; 0x250 <MIDI_Task+0x56>
 248:	80 e9       	ldi	r24, 0x90	; 144
 24a:	03 c0       	rjmp	.+6      	; 0x252 <MIDI_Task+0x58>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <MIDI_Task+0x58>
 250:	80 e8       	ldi	r24, 0x80	; 128
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	27 ff       	sbrs	r18, 7
 254:	05 c0       	rjmp	.+10     	; 0x260 <MIDI_Task+0x66>
 256:	9d e3       	ldi	r25, 0x3D	; 61
 258:	17 ff       	sbrs	r17, 7
 25a:	04 c0       	rjmp	.+8      	; 0x264 <MIDI_Task+0x6a>
 25c:	80 e9       	ldi	r24, 0x90	; 144
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	03 c0       	rjmp	.+6      	; 0x266 <MIDI_Task+0x6c>
 260:	9c e3       	ldi	r25, 0x3C	; 60
 262:	01 c0       	rjmp	.+2      	; 0x266 <MIDI_Task+0x6c>
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	23 ff       	sbrs	r18, 3
 268:	06 c0       	rjmp	.+12     	; 0x276 <MIDI_Task+0x7c>
 26a:	9e e3       	ldi	r25, 0x3E	; 62
 26c:	13 ff       	sbrs	r17, 3
 26e:	02 c0       	rjmp	.+4      	; 0x274 <MIDI_Task+0x7a>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	80 e9       	ldi	r24, 0x90	; 144
				break;
 272:	01 c0       	rjmp	.+2      	; 0x276 <MIDI_Task+0x7c>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	24 ff       	sbrs	r18, 4
 278:	06 c0       	rjmp	.+12     	; 0x286 <MIDI_Task+0x8c>
 27a:	9f e3       	ldi	r25, 0x3F	; 63
 27c:	14 ff       	sbrs	r17, 4
 27e:	02 c0       	rjmp	.+4      	; 0x284 <MIDI_Task+0x8a>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	80 e9       	ldi	r24, 0x90	; 144
 282:	01 c0       	rjmp	.+2      	; 0x286 <MIDI_Task+0x8c>
				break;
 284:	80 e8       	ldi	r24, 0x80	; 128

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	25 ff       	sbrs	r18, 5
 288:	04 c0       	rjmp	.+8      	; 0x292 <MIDI_Task+0x98>
 28a:	15 ff       	sbrs	r17, 5
 28c:	44 c0       	rjmp	.+136    	; 0x316 <MIDI_Task+0x11c>
 28e:	80 e9       	ldi	r24, 0x90	; 144
				break;
 290:	43 c0       	rjmp	.+134    	; 0x318 <MIDI_Task+0x11e>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	88 23       	and	r24, r24
 294:	a9 f0       	breq	.+42     	; 0x2c0 <MIDI_Task+0xc6>
 296:	28 2f       	mov	r18, r24
 298:	22 95       	swap	r18
 29a:	2f 70       	andi	r18, 0x0F	; 15
 29c:	29 83       	std	Y+1, r18	; 0x01
 29e:	83 2b       	or	r24, r19
				break;
 2a0:	8a 83       	std	Y+2, r24	; 0x02

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	9b 83       	std	Y+3, r25	; 0x03
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	8c 83       	std	Y+4, r24	; 0x04
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	50 e0       	ldi	r21, 0x00	; 0
				break;
 2ac:	64 e0       	ldi	r22, 0x04	; 4

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	74 d0       	rcall	.+232    	; 0x39e <Endpoint_Write_Stream_LE>
 2b6:	80 91 e8 00 	lds	r24, 0x00E8
 2ba:	8e 77       	andi	r24, 0x7E	; 126
				break;
 2bc:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	10 93 00 01 	sts	0x0100, r17
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 e9 00 	sts	0x00E9, r24
 2ca:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	82 ff       	sbrs	r24, 2
 2d0:	25 c0       	rjmp	.+74     	; 0x31c <MIDI_Task+0x122>
 2d2:	40 e0       	ldi	r20, 0x00	; 0
				break;
 2d4:	50 e0       	ldi	r21, 0x00	; 0

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	ce 01       	movw	r24, r28

				if (ParserData->UsingReportIDs)
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	a7 d0       	rcall	.+334    	; 0x42e <Endpoint_Read_Stream_LE>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	89 30       	cpi	r24, 0x09	; 9
 2e4:	51 f4       	brne	.+20     	; 0x2fa <MIDI_Task+0x100>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	88 23       	and	r24, r24
 2ea:	39 f0       	breq	.+14     	; 0x2fa <MIDI_Task+0x100>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	81 34       	cpi	r24, 0x41	; 65
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <MIDI_Task+0xfc>
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <MIDI_Task+0x102>
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <MIDI_Task+0x102>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	39 df       	rcall	.-398    	; 0x170 <LEDs_SetAllLEDs>
 2fe:	80 91 f2 00 	lds	r24, 0x00F2
 302:	90 91 f3 00 	lds	r25, 0x00F3
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 306:	89 2b       	or	r24, r25
 308:	49 f4       	brne	.+18     	; 0x31c <MIDI_Task+0x122>
 30a:	80 91 e8 00 	lds	r24, 0x00E8
 30e:	8b 77       	andi	r24, 0x7B	; 123
 310:	80 93 e8 00 	sts	0x00E8, r24
 314:	03 c0       	rjmp	.+6      	; 0x31c <MIDI_Task+0x122>
 316:	80 e8       	ldi	r24, 0x80	; 128
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	9b e3       	ldi	r25, 0x3B	; 59
 31a:	bd cf       	rjmp	.-134    	; 0x296 <MIDI_Task+0x9c>
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	08 95       	ret

0000032c <main>:
 32c:	26 df       	rcall	.-436    	; 0x17a <SetupHardware>
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	1f df       	rcall	.-450    	; 0x170 <LEDs_SetAllLEDs>
 332:	78 94       	sei
 334:	62 df       	rcall	.-316    	; 0x1fa <MIDI_Task>
 336:	82 d4       	rcall	.+2308   	; 0xc3c <USB_USBTask>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	fd cf       	rjmp	.-6      	; 0x334 <main+0x8>

0000033a <CALLBACK_USB_GetDescriptor>:
 33a:	29 2f       	mov	r18, r25
 33c:	33 27       	eor	r19, r19
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	22 30       	cpi	r18, 0x02	; 2
 340:	31 05       	cpc	r19, r1
 342:	59 f0       	breq	.+22     	; 0x35a <CALLBACK_USB_GetDescriptor+0x20>
 344:	23 30       	cpi	r18, 0x03	; 3
 346:	31 05       	cpc	r19, r1
 348:	69 f0       	breq	.+26     	; 0x364 <CALLBACK_USB_GetDescriptor+0x2a>
 34a:	21 30       	cpi	r18, 0x01	; 1
 34c:	31 05       	cpc	r19, r1
 34e:	f9 f4       	brne	.+62     	; 0x38e <CALLBACK_USB_GetDescriptor+0x54>
 350:	82 e1       	ldi	r24, 0x12	; 18
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	2b e3       	ldi	r18, 0x3B	; 59
 356:	31 e0       	ldi	r19, 0x01	; 1
 358:	1e c0       	rjmp	.+60     	; 0x396 <CALLBACK_USB_GetDescriptor+0x5c>
 35a:	85 e6       	ldi	r24, 0x65	; 101
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	26 ed       	ldi	r18, 0xD6	; 214
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	19 c0       	rjmp	.+50     	; 0x396 <CALLBACK_USB_GetDescriptor+0x5c>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	99 27       	eor	r25, r25
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	91 05       	cpc	r25, r1
 36a:	41 f0       	breq	.+16     	; 0x37c <CALLBACK_USB_GetDescriptor+0x42>
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	41 f0       	breq	.+16     	; 0x382 <CALLBACK_USB_GetDescriptor+0x48>
 372:	89 2b       	or	r24, r25
 374:	61 f4       	brne	.+24     	; 0x38e <CALLBACK_USB_GetDescriptor+0x54>
 376:	e2 ed       	ldi	r30, 0xD2	; 210

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	05 c0       	rjmp	.+10     	; 0x386 <CALLBACK_USB_GetDescriptor+0x4c>
 37c:	e8 eb       	ldi	r30, 0xB8	; 184
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <CALLBACK_USB_GetDescriptor+0x4c>
 382:	e8 e9       	ldi	r30, 0x98	; 152
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	84 91       	lpm	r24, Z
				break;
 388:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	9f 01       	movw	r18, r30
 38c:	04 c0       	rjmp	.+8      	; 0x396 <CALLBACK_USB_GetDescriptor+0x5c>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	fa 01       	movw	r30, r20
 398:	31 83       	std	Z+1, r19	; 0x01
 39a:	20 83       	st	Z, r18
 39c:	08 95       	ret

0000039e <Endpoint_Write_Stream_LE>:
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	7c 01       	movw	r14, r24
				break;
 3b0:	8b 01       	movw	r16, r22
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	ea 01       	movw	r28, r20
 3b4:	97 d1       	rcall	.+814    	; 0x6e4 <Endpoint_WaitUntilReady>
 3b6:	81 11       	cpse	r24, r1
 3b8:	31 c0       	rjmp	.+98     	; 0x41c <Endpoint_Write_Stream_LE+0x7e>
 3ba:	20 97       	sbiw	r28, 0x00	; 0
 3bc:	31 f0       	breq	.+12     	; 0x3ca <Endpoint_Write_Stream_LE+0x2c>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	88 81       	ld	r24, Y
 3c0:	99 81       	ldd	r25, Y+1	; 0x01
 3c2:	08 1b       	sub	r16, r24
 3c4:	19 0b       	sbc	r17, r25
 3c6:	e8 0e       	add	r14, r24
 3c8:	f9 1e       	adc	r15, r25
 3ca:	c1 2c       	mov	r12, r1
 3cc:	d1 2c       	mov	r13, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	01 15       	cp	r16, r1
 3d0:	11 05       	cpc	r17, r1
 3d2:	19 f1       	breq	.+70     	; 0x41a <Endpoint_Write_Stream_LE+0x7c>

					while (CurrCollectionPath->Parent != NULL)
 3d4:	80 91 e8 00 	lds	r24, 0x00E8
 3d8:	85 fd       	sbrc	r24, 5
 3da:	14 c0       	rjmp	.+40     	; 0x404 <Endpoint_Write_Stream_LE+0x66>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	80 91 e8 00 	lds	r24, 0x00E8
 3e0:	8e 77       	andi	r24, 0x7E	; 126
 3e2:	80 93 e8 00 	sts	0x00E8, r24
 3e6:	2a d4       	rcall	.+2132   	; 0xc3c <USB_USBTask>
 3e8:	20 97       	sbiw	r28, 0x00	; 0
 3ea:	41 f0       	breq	.+16     	; 0x3fc <Endpoint_Write_Stream_LE+0x5e>
 3ec:	88 81       	ld	r24, Y
 3ee:	99 81       	ldd	r25, Y+1	; 0x01
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	8c 0d       	add	r24, r12
 3f2:	9d 1d       	adc	r25, r13
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	99 83       	std	Y+1, r25	; 0x01
 3f6:	88 83       	st	Y, r24
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	10 c0       	rjmp	.+32     	; 0x41c <Endpoint_Write_Stream_LE+0x7e>
 3fc:	73 d1       	rcall	.+742    	; 0x6e4 <Endpoint_WaitUntilReady>
 3fe:	88 23       	and	r24, r24
 400:	31 f3       	breq	.-52     	; 0x3ce <Endpoint_Write_Stream_LE+0x30>
 402:	0c c0       	rjmp	.+24     	; 0x41c <Endpoint_Write_Stream_LE+0x7e>
 404:	f7 01       	movw	r30, r14
 406:	81 91       	ld	r24, Z+
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	7f 01       	movw	r14, r30
 40a:	80 93 f1 00 	sts	0x00F1, r24
 40e:	01 50       	subi	r16, 0x01	; 1
 410:	11 09       	sbc	r17, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	ff ef       	ldi	r31, 0xFF	; 255
 414:	cf 1a       	sub	r12, r31
 416:	df 0a       	sbc	r13, r31
 418:	da cf       	rjmp	.-76     	; 0x3ce <Endpoint_Write_Stream_LE+0x30>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28

				if (UsageListSize)
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	cf 90       	pop	r12
 42c:	08 95       	ret

0000042e <Endpoint_Read_Stream_LE>:
 42e:	cf 92       	push	r12
 430:	df 92       	push	r13
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	7c 01       	movw	r14, r24

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	8b 01       	movw	r16, r22
 442:	ea 01       	movw	r28, r20
 444:	4f d1       	rcall	.+670    	; 0x6e4 <Endpoint_WaitUntilReady>
 446:	81 11       	cpse	r24, r1
 448:	31 c0       	rjmp	.+98     	; 0x4ac <Endpoint_Read_Stream_LE+0x7e>
 44a:	20 97       	sbiw	r28, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
 44c:	31 f0       	breq	.+12     	; 0x45a <Endpoint_Read_Stream_LE+0x2c>
 44e:	88 81       	ld	r24, Y
 450:	99 81       	ldd	r25, Y+1	; 0x01
 452:	08 1b       	sub	r16, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	19 0b       	sbc	r17, r25
 456:	e8 0e       	add	r14, r24
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	f9 1e       	adc	r15, r25
 45a:	c1 2c       	mov	r12, r1
 45c:	d1 2c       	mov	r13, r1
 45e:	01 15       	cp	r16, r1
 460:	11 05       	cpc	r17, r1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	19 f1       	breq	.+70     	; 0x4aa <Endpoint_Read_Stream_LE+0x7c>
 464:	80 91 e8 00 	lds	r24, 0x00E8
 468:	85 fd       	sbrc	r24, 5
 46a:	14 c0       	rjmp	.+40     	; 0x494 <Endpoint_Read_Stream_LE+0x66>
 46c:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 470:	8b 77       	andi	r24, 0x7B	; 123
 472:	80 93 e8 00 	sts	0x00E8, r24
 476:	e2 d3       	rcall	.+1988   	; 0xc3c <USB_USBTask>
 478:	20 97       	sbiw	r28, 0x00	; 0
 47a:	41 f0       	breq	.+16     	; 0x48c <Endpoint_Read_Stream_LE+0x5e>
 47c:	88 81       	ld	r24, Y
 47e:	99 81       	ldd	r25, Y+1	; 0x01
 480:	8c 0d       	add	r24, r12
 482:	9d 1d       	adc	r25, r13
 484:	99 83       	std	Y+1, r25	; 0x01
 486:	88 83       	st	Y, r24
 488:	85 e0       	ldi	r24, 0x05	; 5
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	10 c0       	rjmp	.+32     	; 0x4ac <Endpoint_Read_Stream_LE+0x7e>
 48c:	2b d1       	rcall	.+598    	; 0x6e4 <Endpoint_WaitUntilReady>
 48e:	88 23       	and	r24, r24
 490:	31 f3       	breq	.-52     	; 0x45e <Endpoint_Read_Stream_LE+0x30>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <Endpoint_Read_Stream_LE+0x7e>
 494:	80 91 f1 00 	lds	r24, 0x00F1
 498:	f7 01       	movw	r30, r14
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	81 93       	st	Z+, r24
 49c:	7f 01       	movw	r14, r30
 49e:	01 50       	subi	r16, 0x01	; 1
 4a0:	11 09       	sbc	r17, r1
 4a2:	ff ef       	ldi	r31, 0xFF	; 255
 4a4:	cf 1a       	sub	r12, r31
 4a6:	df 0a       	sbc	r13, r31
 4a8:	da cf       	rjmp	.-76     	; 0x45e <Endpoint_Read_Stream_LE+0x30>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
				break;
 4ac:	df 91       	pop	r29
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	08 95       	ret

000004be <Endpoint_Write_Control_Stream_LE>:
 4be:	20 91 0c 01 	lds	r18, 0x010C
 4c2:	30 91 0d 01 	lds	r19, 0x010D
 4c6:	26 17       	cp	r18, r22
 4c8:	37 07       	cpc	r19, r23
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	48 f0       	brcs	.+18     	; 0x4de <Endpoint_Write_Control_Stream_LE+0x20>
 4cc:	61 15       	cp	r22, r1
 4ce:	71 05       	cpc	r23, r1
 4d0:	39 f4       	brne	.+14     	; 0x4e0 <Endpoint_Write_Control_Stream_LE+0x22>
 4d2:	20 91 e8 00 	lds	r18, 0x00E8
 4d6:	2e 77       	andi	r18, 0x7E	; 126
 4d8:	20 93 e8 00 	sts	0x00E8, r18
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <Endpoint_Write_Control_Stream_LE+0x22>
 4de:	b9 01       	movw	r22, r18
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 e0       	ldi	r18, 0x00	; 0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	61 15       	cp	r22, r1
 4e6:	71 05       	cpc	r23, r1
 4e8:	99 f1       	breq	.+102    	; 0x550 <Endpoint_Write_Control_Stream_LE+0x92>
 4ea:	80 91 05 01 	lds	r24, 0x0105
 4ee:	88 23       	and	r24, r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	e9 f1       	breq	.+122    	; 0x56c <Endpoint_Write_Control_Stream_LE+0xae>
 4f2:	85 30       	cpi	r24, 0x05	; 5
 4f4:	e9 f1       	breq	.+122    	; 0x570 <Endpoint_Write_Control_Stream_LE+0xb2>
 4f6:	80 91 e8 00 	lds	r24, 0x00E8
 4fa:	83 fd       	sbrc	r24, 3
 4fc:	3b c0       	rjmp	.+118    	; 0x574 <Endpoint_Write_Control_Stream_LE+0xb6>
 4fe:	80 91 e8 00 	lds	r24, 0x00E8
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	82 ff       	sbrs	r24, 2
 504:	06 c0       	rjmp	.+12     	; 0x512 <Endpoint_Write_Control_Stream_LE+0x54>
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	80 91 e8 00 	lds	r24, 0x00E8
 50a:	82 ff       	sbrs	r24, 2
 50c:	24 c0       	rjmp	.+72     	; 0x556 <Endpoint_Write_Control_Stream_LE+0x98>
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
 512:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	80 ff       	sbrs	r24, 0
 518:	e5 cf       	rjmp	.-54     	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x26>
 51a:	80 91 f2 00 	lds	r24, 0x00F2

					if (UsageListSize)
 51e:	90 91 f3 00 	lds	r25, 0x00F3
 522:	61 15       	cp	r22, r1
 524:	71 05       	cpc	r23, r1
 526:	51 f0       	breq	.+20     	; 0x53c <Endpoint_Write_Control_Stream_LE+0x7e>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	88 30       	cpi	r24, 0x08	; 8
 52a:	91 05       	cpc	r25, r1
 52c:	38 f4       	brcc	.+14     	; 0x53c <Endpoint_Write_Control_Stream_LE+0x7e>
 52e:	21 91       	ld	r18, Z+
 530:	20 93 f1 00 	sts	0x00F1, r18
 534:	61 50       	subi	r22, 0x01	; 1
 536:	71 09       	sbc	r23, r1
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	f3 cf       	rjmp	.-26     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x64>
 53c:	21 e0       	ldi	r18, 0x01	; 1

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	08 97       	sbiw	r24, 0x08	; 8
 540:	09 f0       	breq	.+2      	; 0x544 <Endpoint_Write_Control_Stream_LE+0x86>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	80 91 e8 00 	lds	r24, 0x00E8
 548:	8e 77       	andi	r24, 0x7E	; 126
						  UsageList[i - 1] = UsageList[i];
 54a:	80 93 e8 00 	sts	0x00E8, r24
 54e:	ca cf       	rjmp	.-108    	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x26>
 550:	21 11       	cpse	r18, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	cb cf       	rjmp	.-106    	; 0x4ea <Endpoint_Write_Control_Stream_LE+0x2c>
 554:	d8 cf       	rjmp	.-80     	; 0x506 <Endpoint_Write_Control_Stream_LE+0x48>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	80 91 05 01 	lds	r24, 0x0105
 55a:	88 23       	and	r24, r24
 55c:	39 f0       	breq	.+14     	; 0x56c <Endpoint_Write_Control_Stream_LE+0xae>
 55e:	85 30       	cpi	r24, 0x05	; 5
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	39 f0       	breq	.+14     	; 0x570 <Endpoint_Write_Control_Stream_LE+0xb2>
 562:	80 91 e8 00 	lds	r24, 0x00E8
 566:	83 ff       	sbrs	r24, 3
 568:	ce cf       	rjmp	.-100    	; 0x506 <Endpoint_Write_Control_Stream_LE+0x48>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	04 c0       	rjmp	.+8      	; 0x574 <Endpoint_Write_Control_Stream_LE+0xb6>
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	08 95       	ret
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	08 95       	ret
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret

00000578 <Endpoint_Write_Control_PStream_LE>:
 578:	20 91 0c 01 	lds	r18, 0x010C
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	30 91 0d 01 	lds	r19, 0x010D
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	26 17       	cp	r18, r22
 582:	37 07       	cpc	r19, r23
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	48 f0       	brcs	.+18     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x20>
 586:	61 15       	cp	r22, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	71 05       	cpc	r23, r1
 58a:	39 f4       	brne	.+14     	; 0x59a <Endpoint_Write_Control_PStream_LE+0x22>
 58c:	20 91 e8 00 	lds	r18, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 590:	2e 77       	andi	r18, 0x7E	; 126

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	20 93 e8 00 	sts	0x00E8, r18
 596:	01 c0       	rjmp	.+2      	; 0x59a <Endpoint_Write_Control_PStream_LE+0x22>
 598:	b9 01       	movw	r22, r18
 59a:	fc 01       	movw	r30, r24
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	61 15       	cp	r22, r1
 5a0:	71 05       	cpc	r23, r1
 5a2:	b1 f1       	breq	.+108    	; 0x610 <Endpoint_Write_Control_PStream_LE+0x98>
 5a4:	80 91 05 01 	lds	r24, 0x0105
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x36>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	3f c0       	rjmp	.+126    	; 0x62c <Endpoint_Write_Control_PStream_LE+0xb4>
 5ae:	85 30       	cpi	r24, 0x05	; 5
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x3c>
 5b2:	3e c0       	rjmp	.+124    	; 0x630 <Endpoint_Write_Control_PStream_LE+0xb8>
 5b4:	80 91 e8 00 	lds	r24, 0x00E8
 5b8:	83 fd       	sbrc	r24, 3
 5ba:	3c c0       	rjmp	.+120    	; 0x634 <Endpoint_Write_Control_PStream_LE+0xbc>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	80 91 e8 00 	lds	r24, 0x00E8
 5c0:	82 ff       	sbrs	r24, 2
 5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <Endpoint_Write_Control_PStream_LE+0x58>
 5c4:	80 91 e8 00 	lds	r24, 0x00E8
 5c8:	82 ff       	sbrs	r24, 2
 5ca:	25 c0       	rjmp	.+74     	; 0x616 <Endpoint_Write_Control_PStream_LE+0x9e>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret
 5d0:	80 91 e8 00 	lds	r24, 0x00E8
 5d4:	80 ff       	sbrs	r24, 0
 5d6:	e3 cf       	rjmp	.-58     	; 0x59e <Endpoint_Write_Control_PStream_LE+0x26>
 5d8:	80 91 f2 00 	lds	r24, 0x00F2
 5dc:	90 91 f3 00 	lds	r25, 0x00F3
 5e0:	61 15       	cp	r22, r1
 5e2:	71 05       	cpc	r23, r1
 5e4:	59 f0       	breq	.+22     	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x84>
 5e6:	88 30       	cpi	r24, 0x08	; 8
 5e8:	91 05       	cpc	r25, r1
 5ea:	40 f4       	brcc	.+16     	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x84>
 5ec:	24 91       	lpm	r18, Z
 5ee:	20 93 f1 00 	sts	0x00F1, r18
 5f2:	31 96       	adiw	r30, 0x01	; 1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	61 50       	subi	r22, 0x01	; 1
 5f6:	71 09       	sbc	r23, r1
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	f2 cf       	rjmp	.-28     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x68>
 5fc:	21 e0       	ldi	r18, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;
 5fe:	08 97       	sbiw	r24, 0x08	; 8
 600:	09 f0       	breq	.+2      	; 0x604 <Endpoint_Write_Control_PStream_LE+0x8c>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	80 91 e8 00 	lds	r24, 0x00E8
 608:	8e 77       	andi	r24, 0x7E	; 126
 60a:	80 93 e8 00 	sts	0x00E8, r24
 60e:	c7 cf       	rjmp	.-114    	; 0x59e <Endpoint_Write_Control_PStream_LE+0x26>
 610:	21 11       	cpse	r18, r1
 612:	c8 cf       	rjmp	.-112    	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x2c>
 614:	d7 cf       	rjmp	.-82     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x4c>
 616:	80 91 05 01 	lds	r24, 0x0105
 61a:	88 23       	and	r24, r24
 61c:	39 f0       	breq	.+14     	; 0x62c <Endpoint_Write_Control_PStream_LE+0xb4>
 61e:	85 30       	cpi	r24, 0x05	; 5
 620:	39 f0       	breq	.+14     	; 0x630 <Endpoint_Write_Control_PStream_LE+0xb8>
 622:	80 91 e8 00 	lds	r24, 0x00E8
 626:	83 ff       	sbrs	r24, 3
 628:	cd cf       	rjmp	.-102    	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x4c>
 62a:	04 c0       	rjmp	.+8      	; 0x634 <Endpoint_Write_Control_PStream_LE+0xbc>
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	08 95       	ret
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	08 95       	ret
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	08 95       	ret

00000638 <Endpoint_ConfigureEndpoint_Prv>:
 638:	98 2f       	mov	r25, r24
 63a:	97 30       	cpi	r25, 0x07	; 7
 63c:	58 f5       	brcc	.+86     	; 0x694 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 63e:	90 93 e9 00 	sts	0x00E9, r25
 642:	98 17       	cp	r25, r24
 644:	39 f0       	breq	.+14     	; 0x654 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 646:	70 91 ec 00 	lds	r23, 0x00EC
 64a:	20 91 ed 00 	lds	r18, 0x00ED
 64e:	50 91 f0 00 	lds	r21, 0x00F0
 652:	03 c0       	rjmp	.+6      	; 0x65a <Endpoint_ConfigureEndpoint_Prv+0x22>
 654:	24 2f       	mov	r18, r20
 656:	76 2f       	mov	r23, r22
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	21 ff       	sbrs	r18, 1
 65c:	19 c0       	rjmp	.+50     	; 0x690 <Endpoint_ConfigureEndpoint_Prv+0x58>
 65e:	30 91 eb 00 	lds	r19, 0x00EB
 662:	3e 7f       	andi	r19, 0xFE	; 254
 664:	30 93 eb 00 	sts	0x00EB, r19
 668:	30 91 ed 00 	lds	r19, 0x00ED
 66c:	3d 7f       	andi	r19, 0xFD	; 253
 66e:	30 93 ed 00 	sts	0x00ED, r19
 672:	30 91 eb 00 	lds	r19, 0x00EB
 676:	31 60       	ori	r19, 0x01	; 1
 678:	30 93 eb 00 	sts	0x00EB, r19
 67c:	70 93 ec 00 	sts	0x00EC, r23
 680:	20 93 ed 00 	sts	0x00ED, r18
 684:	50 93 f0 00 	sts	0x00F0, r21
					  ParserData->TotalReportItems++;
 688:	20 91 ee 00 	lds	r18, 0x00EE
 68c:	27 ff       	sbrs	r18, 7
 68e:	07 c0       	rjmp	.+14     	; 0x69e <Endpoint_ConfigureEndpoint_Prv+0x66>
 690:	9f 5f       	subi	r25, 0xFF	; 255

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	d3 cf       	rjmp	.-90     	; 0x63a <Endpoint_ConfigureEndpoint_Prv+0x2>
 694:	8f 70       	andi	r24, 0x0F	; 15
 696:	80 93 e9 00 	sts	0x00E9, r24
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <Endpoint_ClearStatusStage>:
 6a2:	80 91 06 01 	lds	r24, 0x0106
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	87 fd       	sbrc	r24, 7
 6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <Endpoint_ClearStatusStage+0x12>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	80 91 e8 00 	lds	r24, 0x00E8
 6ae:	80 ff       	sbrs	r24, 0
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <Endpoint_ClearStatusStage+0x2c>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <Endpoint_ClearStatusStage+0x36>
 6b4:	80 91 e8 00 	lds	r24, 0x00E8
 6b8:	82 fd       	sbrc	r24, 2
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <Endpoint_ClearStatusStage+0x24>
 6bc:	80 91 05 01 	lds	r24, 0x0105

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6c0:	81 11       	cpse	r24, r1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	f8 cf       	rjmp	.-16     	; 0x6b4 <Endpoint_ClearStatusStage+0x12>
 6c4:	08 95       	ret
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	80 91 e8 00 	lds	r24, 0x00E8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	8b 77       	andi	r24, 0x7B	; 123
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <Endpoint_ClearStatusStage+0x3c>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	80 91 05 01 	lds	r24, 0x0105
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	81 11       	cpse	r24, r1
 6d4:	ea cf       	rjmp	.-44     	; 0x6aa <Endpoint_ClearStatusStage+0x8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	08 95       	ret

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	80 91 e8 00 	lds	r24, 0x00E8
 6dc:	8e 77       	andi	r24, 0x7E	; 126
 6de:	80 93 e8 00 	sts	0x00E8, r24
 6e2:	08 95       	ret

000006e4 <Endpoint_WaitUntilReady>:
 6e4:	80 91 e4 00 	lds	r24, 0x00E4
 6e8:	90 91 e5 00 	lds	r25, 0x00E5
 6ec:	45 e6       	ldi	r20, 0x65	; 101
 6ee:	20 91 ec 00 	lds	r18, 0x00EC
 6f2:	20 ff       	sbrs	r18, 0
 6f4:	21 c0       	rjmp	.+66     	; 0x738 <Endpoint_WaitUntilReady+0x54>
 6f6:	20 91 e8 00 	lds	r18, 0x00E8
 6fa:	20 fd       	sbrc	r18, 0
 6fc:	21 c0       	rjmp	.+66     	; 0x740 <Endpoint_WaitUntilReady+0x5c>
 6fe:	20 91 05 01 	lds	r18, 0x0105
 702:	22 23       	and	r18, r18
 704:	89 f0       	breq	.+34     	; 0x728 <Endpoint_WaitUntilReady+0x44>
 706:	25 30       	cpi	r18, 0x05	; 5
 708:	89 f0       	breq	.+34     	; 0x72c <Endpoint_WaitUntilReady+0x48>
 70a:	20 91 eb 00 	lds	r18, 0x00EB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 70e:	25 fd       	sbrc	r18, 5
 710:	0f c0       	rjmp	.+30     	; 0x730 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 712:	20 91 e4 00 	lds	r18, 0x00E4
 716:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	39 f3       	breq	.-50     	; 0x6ee <Endpoint_WaitUntilReady+0xa>
 720:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 722:	41 f0       	breq	.+16     	; 0x734 <Endpoint_WaitUntilReady+0x50>
 724:	c9 01       	movw	r24, r18
 726:	e3 cf       	rjmp	.-58     	; 0x6ee <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 728:	82 e0       	ldi	r24, 0x02	; 2
 72a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 72c:	83 e0       	ldi	r24, 0x03	; 3
 72e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 738:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 73c:	22 ff       	sbrs	r18, 2
 73e:	df cf       	rjmp	.-66     	; 0x6fe <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret

00000744 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 74c:	4e d0       	rcall	.+156    	; 0x7ea <USB_INT_DisableAllInterrupts>
 74e:	55 d0       	rcall	.+170    	; 0x7fa <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 750:	c8 ed       	ldi	r28, 0xD8	; 216
 752:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 754:	88 81       	ld	r24, Y
 756:	8f 77       	andi	r24, 0x7F	; 127
 758:	88 83       	st	Y, r24
 75a:	88 81       	ld	r24, Y
 75c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 75e:	88 83       	st	Y, r24
 760:	88 81       	ld	r24, Y
 762:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 764:	88 83       	st	Y, r24
 766:	e7 ed       	ldi	r30, 0xD7	; 215
 768:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 76a:	80 81       	ld	r24, Z
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	80 83       	st	Z, r24
 770:	19 bc       	out	0x29, r1	; 41
 772:	10 92 05 01 	sts	0x0105, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 776:	10 92 01 01 	sts	0x0101, r1
	USB_Device_ConfigurationNumber  = 0;
 77a:	10 92 03 01 	sts	0x0103, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 77e:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 782:	00 ee       	ldi	r16, 0xE0	; 224
 784:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 786:	f8 01       	movw	r30, r16
 788:	80 81       	ld	r24, Z
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	80 83       	st	Z, r24
 78e:	88 81       	ld	r24, Y
 790:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 792:	88 83       	st	Y, r24
 794:	42 e0       	ldi	r20, 0x02	; 2
 796:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	4e df       	rcall	.-356    	; 0x638 <Endpoint_ConfigureEndpoint_Prv>
 79c:	e1 ee       	ldi	r30, 0xE1	; 225
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7a2:	8e 7f       	andi	r24, 0xFE	; 254
 7a4:	80 83       	st	Z, r24
 7a6:	e2 ee       	ldi	r30, 0xE2	; 226
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7ac:	81 60       	ori	r24, 0x01	; 1
 7ae:	80 83       	st	Z, r24
 7b0:	80 81       	ld	r24, Z
 7b2:	88 60       	ori	r24, 0x08	; 8
 7b4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 81       	ld	r24, Z
 7ba:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7bc:	80 83       	st	Z, r24
 7be:	88 81       	ld	r24, Y
 7c0:	80 61       	ori	r24, 0x10	; 16
 7c2:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 7ca:	0f 91       	pop	r16
 7cc:	08 95       	ret

000007ce <USB_Init>:
 7ce:	e8 ed       	ldi	r30, 0xD8	; 216
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 7d4:	8f 7e       	andi	r24, 0xEF	; 239
 7d6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 7d8:	e7 ed       	ldi	r30, 0xD7	; 215
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	81 60       	ori	r24, 0x01	; 1
 7e0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	80 93 04 01 	sts	0x0104, r24

	USB_ResetInterface();
 7e8:	ad cf       	rjmp	.-166    	; 0x744 <USB_ResetInterface>

000007ea <USB_INT_DisableAllInterrupts>:
 7ea:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	8c 7f       	andi	r24, 0xFC	; 252
 7f2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7f4:	10 92 e2 00 	sts	0x00E2, r1
 7f8:	08 95       	ret

000007fa <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 7fa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7fe:	10 92 e1 00 	sts	0x00E1, r1
 802:	08 95       	ret

00000804 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	0b b6       	in	r0, 0x3b	; 59
 810:	0f 92       	push	r0
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	4f 93       	push	r20
 818:	5f 93       	push	r21
 81a:	6f 93       	push	r22
 81c:	7f 93       	push	r23
 81e:	8f 93       	push	r24
 820:	9f 93       	push	r25
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 82a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 82e:	82 ff       	sbrs	r24, 2
 830:	0a c0       	rjmp	.+20     	; 0x846 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 832:	80 91 e2 00 	lds	r24, 0x00E2
 836:	82 ff       	sbrs	r24, 2
 838:	06 c0       	rjmp	.+12     	; 0x846 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 83a:	80 91 e1 00 	lds	r24, 0x00E1
 83e:	8b 7f       	andi	r24, 0xFB	; 251
 840:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 844:	fa d1       	rcall	.+1012   	; 0xc3a <USB_Event_Stub>
 846:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 84a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 84c:	1d c0       	rjmp	.+58     	; 0x888 <__vector_10+0x84>
 84e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 852:	80 ff       	sbrs	r24, 0
 854:	19 c0       	rjmp	.+50     	; 0x888 <__vector_10+0x84>
 856:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 85a:	8e 7f       	andi	r24, 0xFE	; 254
 85c:	80 93 da 00 	sts	0x00DA, r24
 860:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 864:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 866:	0c c0       	rjmp	.+24     	; 0x880 <__vector_10+0x7c>
 868:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 86a:	89 bd       	out	0x29, r24	; 41
 86c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 86e:	89 bd       	out	0x29, r24	; 41
 870:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 872:	00 fe       	sbrs	r0, 0
 874:	fd cf       	rjmp	.-6      	; 0x870 <__vector_10+0x6c>
 876:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 878:	80 93 05 01 	sts	0x0105, r24
 87c:	a7 dc       	rcall	.-1714   	; 0x1cc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__vector_10+0x84>
 880:	19 bc       	out	0x29, r1	; 41
 882:	10 92 05 01 	sts	0x0105, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 886:	a4 dc       	rcall	.-1720   	; 0x1d0 <EVENT_USB_Device_Disconnect>
 888:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 88c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 88e:	18 c0       	rjmp	.+48     	; 0x8c0 <__vector_10+0xbc>
 890:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 894:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 896:	14 c0       	rjmp	.+40     	; 0x8c0 <__vector_10+0xbc>
 898:	80 91 e2 00 	lds	r24, 0x00E2
 89c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 89e:	80 93 e2 00 	sts	0x00E2, r24
 8a2:	80 91 e2 00 	lds	r24, 0x00E2
 8a6:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8a8:	80 93 e2 00 	sts	0x00E2, r24
 8ac:	80 91 d8 00 	lds	r24, 0x00D8
 8b0:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8b2:	80 93 d8 00 	sts	0x00D8, r24
 8b6:	19 bc       	out	0x29, r1	; 41
 8b8:	85 e0       	ldi	r24, 0x05	; 5
 8ba:	80 93 05 01 	sts	0x0105, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8be:	bd d1       	rcall	.+890    	; 0xc3a <USB_Event_Stub>
 8c0:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 8c4:	84 ff       	sbrs	r24, 4
 8c6:	2f c0       	rjmp	.+94     	; 0x926 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8c8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8cc:	84 ff       	sbrs	r24, 4
 8ce:	2b c0       	rjmp	.+86     	; 0x926 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 8d0:	8c e0       	ldi	r24, 0x0C	; 12
 8d2:	89 bd       	out	0x29, r24	; 41
 8d4:	8e e0       	ldi	r24, 0x0E	; 14
 8d6:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8d8:	09 b4       	in	r0, 0x29	; 41
 8da:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <__vector_10+0xd4>
 8de:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8e2:	8f 7d       	andi	r24, 0xDF	; 223
 8e4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8e8:	80 91 e1 00 	lds	r24, 0x00E1
 8ec:	8f 7e       	andi	r24, 0xEF	; 239
 8ee:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 8f2:	80 91 e2 00 	lds	r24, 0x00E2
 8f6:	8f 7e       	andi	r24, 0xEF	; 239
 8f8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 8fc:	80 91 e2 00 	lds	r24, 0x00E2
 900:	81 60       	ori	r24, 0x01	; 1
 902:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 906:	80 91 01 01 	lds	r24, 0x0101
 90a:	88 23       	and	r24, r24
 90c:	11 f0       	breq	.+4      	; 0x912 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	07 c0       	rjmp	.+14     	; 0x920 <__vector_10+0x11c>
 912:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 916:	87 ff       	sbrs	r24, 7
 918:	02 c0       	rjmp	.+4      	; 0x91e <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 91a:	83 e0       	ldi	r24, 0x03	; 3
 91c:	01 c0       	rjmp	.+2      	; 0x920 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	80 93 05 01 	sts	0x0105, r24
 924:	8a d1       	rcall	.+788    	; 0xc3a <USB_Event_Stub>
 926:	80 91 e1 00 	lds	r24, 0x00E1
 92a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 92c:	22 c0       	rjmp	.+68     	; 0x972 <__vector_10+0x16e>
 92e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 932:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 934:	1e c0       	rjmp	.+60     	; 0x972 <__vector_10+0x16e>
 936:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 93a:	87 7f       	andi	r24, 0xF7	; 247
 93c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	80 93 05 01 	sts	0x0105, r24
 946:	10 92 01 01 	sts	0x0101, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 94a:	80 91 e1 00 	lds	r24, 0x00E1
 94e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 950:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 954:	80 91 e2 00 	lds	r24, 0x00E2
 958:	8e 7f       	andi	r24, 0xFE	; 254
 95a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 95e:	80 91 e2 00 	lds	r24, 0x00E2
 962:	80 61       	ori	r24, 0x10	; 16
 964:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 968:	42 e0       	ldi	r20, 0x02	; 2
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	64 de       	rcall	.-824    	; 0x638 <Endpoint_ConfigureEndpoint_Prv>
 970:	64 d1       	rcall	.+712    	; 0xc3a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	0f 90       	pop	r0
 98c:	0b be       	out	0x3b, r0	; 59
 98e:	0f 90       	pop	r0
 990:	0f be       	out	0x3f, r0	; 63
 992:	0f 90       	pop	r0
 994:	1f 90       	pop	r1
 996:	18 95       	reti

00000998 <USB_Device_ProcessControlRequest>:
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	aa 97       	sbiw	r28, 0x2a	; 42
 9a4:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61
 9ae:	e6 e0       	ldi	r30, 0x06	; 6
 9b0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9b2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9b8:	21 e0       	ldi	r18, 0x01	; 1
 9ba:	ee 30       	cpi	r30, 0x0E	; 14
 9bc:	f2 07       	cpc	r31, r18
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9c0:	3c d1       	rcall	.+632    	; 0xc3a <USB_Event_Stub>
 9c2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9c8:	20 c1       	rjmp	.+576    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 9ca:	90 91 06 01 	lds	r25, 0x0106
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ce:	80 91 07 01 	lds	r24, 0x0107

		switch (USB_ControlRequest.bRequest)
 9d2:	85 30       	cpi	r24, 0x05	; 5
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x40>
 9d6:	77 c0       	rjmp	.+238    	; 0xac6 <USB_Device_ProcessControlRequest+0x12e>
 9d8:	30 f4       	brcc	.+12     	; 0x9e6 <USB_Device_ProcessControlRequest+0x4e>
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	81 f1       	breq	.+96     	; 0xa3e <USB_Device_ProcessControlRequest+0xa6>
 9de:	68 f0       	brcs	.+26     	; 0x9fa <USB_Device_ProcessControlRequest+0x62>
 9e0:	83 30       	cpi	r24, 0x03	; 3
 9e2:	69 f1       	breq	.+90     	; 0xa3e <USB_Device_ProcessControlRequest+0xa6>
 9e4:	12 c1       	rjmp	.+548    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 9e6:	88 30       	cpi	r24, 0x08	; 8
 9e8:	09 f4       	brne	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x54>
 9ea:	e1 c0       	rjmp	.+450    	; 0xbae <USB_Device_ProcessControlRequest+0x216>
 9ec:	89 30       	cpi	r24, 0x09	; 9
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <USB_Device_ProcessControlRequest+0x5a>
 9f0:	f0 c0       	rjmp	.+480    	; 0xbd2 <USB_Device_ProcessControlRequest+0x23a>
 9f2:	86 30       	cpi	r24, 0x06	; 6
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x60>
 9f6:	09 c1       	rjmp	.+530    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 9f8:	88 c0       	rjmp	.+272    	; 0xb0a <USB_Device_ProcessControlRequest+0x172>
 9fa:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9fc:	81 f0       	breq	.+32     	; 0xa1e <USB_Device_ProcessControlRequest+0x86>
 9fe:	92 38       	cpi	r25, 0x82	; 130
 a00:	09 f0       	breq	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x6c>
 a02:	03 c1       	rjmp	.+518    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 a04:	80 91 0a 01 	lds	r24, 0x010A
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a08:	8f 70       	andi	r24, 0x0F	; 15
 a0a:	80 93 e9 00 	sts	0x00E9, r24
 a0e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a12:	85 fb       	bst	r24, 5
 a14:	88 27       	eor	r24, r24
 a16:	80 f9       	bld	r24, 0
 a18:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1c:	06 c0       	rjmp	.+12     	; 0xa2a <USB_Device_ProcessControlRequest+0x92>
 a1e:	80 91 02 01 	lds	r24, 0x0102
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a22:	90 91 03 01 	lds	r25, 0x0103
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a26:	91 11       	cpse	r25, r1
 a28:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a2a:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2e:	97 7f       	andi	r25, 0xF7	; 247
 a30:	90 93 e8 00 	sts	0x00E8, r25
 a34:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a38:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a3c:	c3 c0       	rjmp	.+390    	; 0xbc4 <USB_Device_ProcessControlRequest+0x22c>
 a3e:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a40:	2d 7f       	andi	r18, 0xFD	; 253
 a42:	09 f0       	breq	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0xae>
 a44:	e2 c0       	rjmp	.+452    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 a46:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a48:	19 f0       	breq	.+6      	; 0xa50 <USB_Device_ProcessControlRequest+0xb8>
 a4a:	92 30       	cpi	r25, 0x02	; 2
 a4c:	61 f0       	breq	.+24     	; 0xa66 <USB_Device_ProcessControlRequest+0xce>
 a4e:	dd c0       	rjmp	.+442    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 a50:	90 91 08 01 	lds	r25, 0x0108
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a54:	91 30       	cpi	r25, 0x01	; 1
 a56:	09 f0       	breq	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0xc2>
 a58:	d8 c0       	rjmp	.+432    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 a5a:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a5c:	09 f0       	breq	.+2      	; 0xa60 <USB_Device_ProcessControlRequest+0xc8>
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	90 93 03 01 	sts	0x0103, r25
 a64:	2a c0       	rjmp	.+84     	; 0xaba <USB_Device_ProcessControlRequest+0x122>
 a66:	90 91 08 01 	lds	r25, 0x0108

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a6a:	91 11       	cpse	r25, r1
 a6c:	26 c0       	rjmp	.+76     	; 0xaba <USB_Device_ProcessControlRequest+0x122>
 a6e:	20 91 0a 01 	lds	r18, 0x010A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a72:	2f 70       	andi	r18, 0x0F	; 15
 a74:	09 f4       	brne	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a76:	c9 c0       	rjmp	.+402    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 a78:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a7c:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a80:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a82:	1b c0       	rjmp	.+54     	; 0xaba <USB_Device_ProcessControlRequest+0x122>
 a84:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a86:	21 f4       	brne	.+8      	; 0xa90 <USB_Device_ProcessControlRequest+0xf8>
 a88:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a8c:	80 62       	ori	r24, 0x20	; 32
 a8e:	13 c0       	rjmp	.+38     	; 0xab6 <USB_Device_ProcessControlRequest+0x11e>
 a90:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a94:	80 61       	ori	r24, 0x10	; 16
 a96:	80 93 eb 00 	sts	0x00EB, r24
 a9a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 2e       	mov	r0, r18
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x10c>
 aa2:	88 0f       	add	r24, r24
 aa4:	0a 94       	dec	r0
 aa6:	ea f7       	brpl	.-6      	; 0xaa2 <USB_Device_ProcessControlRequest+0x10a>
 aa8:	80 93 ea 00 	sts	0x00EA, r24
 aac:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 ab0:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ab4:	88 60       	ori	r24, 0x08	; 8
 ab6:	80 93 eb 00 	sts	0x00EB, r24
 aba:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 abe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac2:	87 7f       	andi	r24, 0xF7	; 247
 ac4:	82 c0       	rjmp	.+260    	; 0xbca <USB_Device_ProcessControlRequest+0x232>
 ac6:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ac8:	a0 c0       	rjmp	.+320    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 aca:	10 91 08 01 	lds	r17, 0x0108
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 ace:	1f 77       	andi	r17, 0x7F	; 127
 ad0:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ad4:	80 78       	andi	r24, 0x80	; 128
 ad6:	81 2b       	or	r24, r17
 ad8:	80 93 e3 00 	sts	0x00E3, r24
 adc:	80 91 e8 00 	lds	r24, 0x00E8
 ae0:	87 7f       	andi	r24, 0xF7	; 247
 ae2:	80 93 e8 00 	sts	0x00E8, r24
 ae6:	dd dd       	rcall	.-1094   	; 0x6a2 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ae8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aec:	80 ff       	sbrs	r24, 0
 aee:	fc cf       	rjmp	.-8      	; 0xae8 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 af0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 af4:	80 68       	ori	r24, 0x80	; 128
 af6:	80 93 e3 00 	sts	0x00E3, r24
 afa:	11 23       	and	r17, r17
 afc:	11 f0       	breq	.+4      	; 0xb02 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 afe:	83 e0       	ldi	r24, 0x03	; 3
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0x16c>
 b02:	82 e0       	ldi	r24, 0x02	; 2
 b04:	80 93 05 01 	sts	0x0105, r24
 b08:	80 c0       	rjmp	.+256    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 b0a:	90 58       	subi	r25, 0x80	; 128
 b0c:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b0e:	08 f0       	brcs	.+2      	; 0xb12 <USB_Device_ProcessControlRequest+0x17a>
 b10:	7c c0       	rjmp	.+248    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 b12:	80 91 08 01 	lds	r24, 0x0108
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b16:	90 91 09 01 	lds	r25, 0x0109
 b1a:	8c 3d       	cpi	r24, 0xDC	; 220
 b1c:	23 e0       	ldi	r18, 0x03	; 3
 b1e:	92 07       	cpc	r25, r18
 b20:	71 f5       	brne	.+92     	; 0xb7e <USB_Device_ProcessControlRequest+0x1e6>
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b26:	8a e2       	ldi	r24, 0x2A	; 42
 b28:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b2a:	4f b7       	in	r20, 0x3f	; 63
 b2c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b2e:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b30:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b32:	20 e0       	ldi	r18, 0x00	; 0
 b34:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b36:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b38:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	50 93 57 00 	sts	0x0057, r21
 b40:	e4 91       	lpm	r30, Z
 b42:	20 ff       	sbrs	r18, 0
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b46:	e2 95       	swap	r30
 b48:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b4a:	3f 5f       	subi	r19, 0xFF	; 255
 b4c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b4e:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	ea 30       	cpi	r30, 0x0A	; 10
 b54:	10 f0       	brcs	.+4      	; 0xb5a <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b56:	c7 96       	adiw	r24, 0x37	; 55
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x1c4>
 b5a:	c0 96       	adiw	r24, 0x30	; 48
 b5c:	8d 93       	st	X+, r24
 b5e:	9d 93       	st	X+, r25
 b60:	2f 5f       	subi	r18, 0xFF	; 255
 b62:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b64:	49 f7       	brne	.-46     	; 0xb38 <USB_Device_ProcessControlRequest+0x1a0>
 b66:	4f bf       	out	0x3f, r20	; 63
 b68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b6c:	87 7f       	andi	r24, 0xF7	; 247
 b6e:	80 93 e8 00 	sts	0x00E8, r24
 b72:	6a e2       	ldi	r22, 0x2A	; 42
 b74:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b76:	ce 01       	movw	r24, r28
 b78:	01 96       	adiw	r24, 0x01	; 1
 b7a:	a1 dc       	rcall	.-1726   	; 0x4be <Endpoint_Write_Control_Stream_LE>
 b7c:	12 c0       	rjmp	.+36     	; 0xba2 <USB_Device_ProcessControlRequest+0x20a>
 b7e:	ae 01       	movw	r20, r28
 b80:	4f 5f       	subi	r20, 0xFF	; 255
 b82:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b84:	60 91 0a 01 	lds	r22, 0x010A
 b88:	d8 db       	rcall	.-2128   	; 0x33a <CALLBACK_USB_GetDescriptor>
 b8a:	00 97       	sbiw	r24, 0x00	; 0
 b8c:	09 f4       	brne	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0x1f8>
 b8e:	3d c0       	rjmp	.+122    	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 b90:	20 91 e8 00 	lds	r18, 0x00E8
 b94:	27 7f       	andi	r18, 0xF7	; 247
 b96:	20 93 e8 00 	sts	0x00E8, r18
 b9a:	bc 01       	movw	r22, r24
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ba0:	eb dc       	rcall	.-1578   	; 0x578 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ba2:	80 91 e8 00 	lds	r24, 0x00E8
 ba6:	8b 77       	andi	r24, 0x7B	; 123
 ba8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bac:	2e c0       	rjmp	.+92     	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 bae:	90 38       	cpi	r25, 0x80	; 128
 bb0:	61 f5       	brne	.+88     	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 bb2:	80 91 e8 00 	lds	r24, 0x00E8
 bb6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bb8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bbc:	80 91 01 01 	lds	r24, 0x0101
 bc0:	80 93 f1 00 	sts	0x00F1, r24
 bc4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bc8:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bca:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bce:	69 dd       	rcall	.-1326   	; 0x6a2 <Endpoint_ClearStatusStage>
 bd0:	1c c0       	rjmp	.+56     	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 bd2:	91 11       	cpse	r25, r1
 bd4:	1a c0       	rjmp	.+52     	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
 bd6:	90 91 08 01 	lds	r25, 0x0108
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bda:	92 30       	cpi	r25, 0x02	; 2
 bdc:	b0 f4       	brcc	.+44     	; 0xc0a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bde:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 be2:	87 7f       	andi	r24, 0xF7	; 247
 be4:	80 93 e8 00 	sts	0x00E8, r24
 be8:	90 93 01 01 	sts	0x0101, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bec:	5a dd       	rcall	.-1356   	; 0x6a2 <Endpoint_ClearStatusStage>
 bee:	80 91 01 01 	lds	r24, 0x0101
 bf2:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bf4:	04 c0       	rjmp	.+8      	; 0xbfe <USB_Device_ProcessControlRequest+0x266>
 bf6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 bfa:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <USB_Device_ProcessControlRequest+0x26a>
 bfe:	84 e0       	ldi	r24, 0x04	; 4
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <USB_Device_ProcessControlRequest+0x26c>
 c02:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c04:	80 93 05 01 	sts	0x0105, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c08:	e5 da       	rcall	.-2614   	; 0x1d4 <EVENT_USB_Device_ConfigurationChanged>
 c0a:	80 91 e8 00 	lds	r24, 0x00E8
 c0e:	83 ff       	sbrs	r24, 3
 c10:	0a c0       	rjmp	.+20     	; 0xc26 <USB_Device_ProcessControlRequest+0x28e>
 c12:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c16:	87 7f       	andi	r24, 0xF7	; 247
 c18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c1c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c20:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c22:	80 93 eb 00 	sts	0x00EB, r24
 c26:	aa 96       	adiw	r28, 0x2a	; 42
 c28:	0f b6       	in	r0, 0x3f	; 63
 c2a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c2c:	de bf       	out	0x3e, r29	; 62
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	cd bf       	out	0x3d, r28	; 61
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c36:	1f 91       	pop	r17
 c38:	08 95       	ret

00000c3a <USB_Event_Stub>:
 c3a:	08 95       	ret

00000c3c <USB_USBTask>:
 c3c:	cf 93       	push	r28
 c3e:	80 91 05 01 	lds	r24, 0x0105
 c42:	88 23       	and	r24, r24
 c44:	a9 f0       	breq	.+42     	; 0xc70 <USB_USBTask+0x34>
 c46:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c4a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c4c:	90 91 ec 00 	lds	r25, 0x00EC
 c50:	90 ff       	sbrs	r25, 0
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <USB_USBTask+0x1c>
 c54:	90 e8       	ldi	r25, 0x80	; 128
 c56:	01 c0       	rjmp	.+2      	; 0xc5a <USB_USBTask+0x1e>
 c58:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c5a:	c9 2f       	mov	r28, r25
 c5c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c62:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c66:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c68:	97 de       	rcall	.-722    	; 0x998 <USB_Device_ProcessControlRequest>
 c6a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6c:	c0 93 e9 00 	sts	0x00E9, r28
 c70:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>

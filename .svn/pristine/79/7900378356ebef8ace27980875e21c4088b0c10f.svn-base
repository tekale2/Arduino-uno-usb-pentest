
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001a7e  00001b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001b3a  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000055d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  000055e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f5e6  00000000  00000000  00005e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000376d  00000000  00000000  00015462  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055d5  00000000  00000000  00018bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001818  00000000  00000000  0001e1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004fbb  00000000  00000000  0001f9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ad4d  00000000  00000000  00024977  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f6c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
      28:	f0 c5       	rjmp	.+3040   	; 0xc0a <__vector_10>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
		  DataINEndpoint  = EndpointData;
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      82:	00 00       	nop
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4556>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4549>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

	return AOA_ENUMERROR_NoError;
}
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4544>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4542>:
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
     134:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
     144:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
     154:	2e 0d 0a 00                                         ....

00000158 <__c.4540>:
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;
     158:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
     168:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
     178:	6f 6e 2e 0d 0a 00                                   on....

0000017e <__c.4538>:
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
     17e:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
     18e:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     19e:	6f 61 72 64 2e 0d 0a 00                             oard....

000001a6 <__c.4536>:
     1a6:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
     1b6:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     1c6:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d3 <__c.4529>:
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
     1d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e3:	68 65 64 2e 0d 0a 00                                hed....

000001ea <__c.4524>:
     1ea:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1fa:	0d 0a 00                                            ...

000001fd <__c.4509>:
     1fd:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     20d:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     21d:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e2       	ldi	r29, 0x20	; 32
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	ee e7       	ldi	r30, 0x7E	; 126
     23a:	fa e1       	ldi	r31, 0x1A	; 26
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a8 32       	cpi	r26, 0x28	; 40
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a8 e2       	ldi	r26, 0x28	; 40
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	aa 34       	cpi	r26, 0x4A	; 74
     258:	b1 07       	cpc	r27, r17
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	88 d0       	rcall	.+272    	; 0x36e <main>
     25e:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     264:	9b b1       	in	r25, 0x0b	; 11
     266:	9f 70       	andi	r25, 0x0F	; 15
     268:	98 2b       	or	r25, r24
     26a:	9b b9       	out	0x0b, r25	; 11
     26c:	08 95       	ret

0000026e <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     26e:	84 b7       	in	r24, 0x34	; 52
     270:	87 7f       	andi	r24, 0xF7	; 247
     272:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     274:	88 e1       	ldi	r24, 0x18	; 24
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	80 93 60 00 	sts	0x0060, r24
     27e:	10 92 60 00 	sts	0x0060, r1
     282:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	80 93 61 00 	sts	0x0061, r24
     290:	90 93 61 00 	sts	0x0061, r25
     294:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     296:	83 e3       	ldi	r24, 0x33	; 51
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 cd 00 	sts	0x00CD, r25
     29e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2a2:	86 e0       	ldi	r24, 0x06	; 6
     2a4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2a8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2ac:	88 e1       	ldi	r24, 0x18	; 24
     2ae:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     2b2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2b4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2b6:	8a b1       	in	r24, 0x0a	; 10
     2b8:	80 6f       	ori	r24, 0xF0	; 240
     2ba:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2bc:	8b b1       	in	r24, 0x0b	; 11
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2c2:	88 d4       	rcall	.+2320   	; 0xbd4 <USB_Init>
     2c4:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <Serial_CreateStream>

000002cc <KeyboardHost_Task>:
     2cc:	cf 93       	push	r28

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	28 97       	sbiw	r28, 0x08	; 8
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     2e0:	80 91 35 01 	lds	r24, 0x0135
     2e4:	8b 30       	cpi	r24, 0x0B	; 11
     2e6:	d1 f5       	brne	.+116    	; 0x35c <KeyboardHost_Task+0x90>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 d7 09 	call	0x13ae	; 0x13ae <HID_Host_IsReportReceived>
     2f0:	88 23       	and	r24, r24
     2f2:	a1 f1       	breq	.+104    	; 0x35c <KeyboardHost_Task+0x90>
	{
		USB_KeyboardReport_Data_t KeyboardReport;
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5f       	subi	r22, 0xFF	; 255
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 93 09 	call	0x1326	; 0x1326 <HID_Host_ReceiveReport>

		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	88 23       	and	r24, r24
     306:	11 f0       	breq	.+4      	; 0x30c <KeyboardHost_Task+0x40>
     308:	90 e1       	ldi	r25, 0x10	; 16
     30a:	01 c0       	rjmp	.+2      	; 0x30e <KeyboardHost_Task+0x42>
     30c:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	8f 7e       	andi	r24, 0xEF	; 239
     312:	89 2b       	or	r24, r25
     314:	8b b9       	out	0x0b, r24	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     316:	8b 81       	ldd	r24, Y+3	; 0x03

		if (KeyCode)
     318:	88 23       	and	r24, r24
     31a:	01 f1       	breq	.+64     	; 0x35c <KeyboardHost_Task+0x90>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     31c:	90 e2       	ldi	r25, 0x20	; 32
     31e:	99 b9       	out	0x09, r25	; 9
			char PressedKey = 0;

			LEDs_ToggleLEDs(LEDS_LED2);

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     320:	9c ef       	ldi	r25, 0xFC	; 252
     322:	98 0f       	add	r25, r24
     324:	9a 31       	cpi	r25, 0x1A	; 26
     326:	10 f4       	brcc	.+4      	; 0x32c <KeyboardHost_Task+0x60>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     328:	83 5c       	subi	r24, 0xC3	; 195
     32a:	11 c0       	rjmp	.+34     	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     32c:	92 ee       	ldi	r25, 0xE2	; 226
     32e:	98 0f       	add	r25, r24
     330:	99 30       	cpi	r25, 0x09	; 9
     332:	10 f4       	brcc	.+4      	; 0x338 <KeyboardHost_Task+0x6c>
			         (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     334:	8d 5e       	subi	r24, 0xED	; 237
     336:	0b c0       	rjmp	.+22     	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     338:	87 32       	cpi	r24, 0x27	; 39
     33a:	31 f0       	breq	.+12     	; 0x348 <KeyboardHost_Task+0x7c>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     33c:	8c 32       	cpi	r24, 0x2C	; 44
     33e:	31 f0       	breq	.+12     	; 0x34c <KeyboardHost_Task+0x80>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     340:	88 32       	cpi	r24, 0x28	; 40
     342:	61 f4       	brne	.+24     	; 0x35c <KeyboardHost_Task+0x90>
			{
				PressedKey = '\n';
     344:	8a e0       	ldi	r24, 0x0A	; 10
     346:	03 c0       	rjmp	.+6      	; 0x34e <KeyboardHost_Task+0x82>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
			{
				PressedKey = '0';
     348:	80 e3       	ldi	r24, 0x30	; 48
     34a:	01 c0       	rjmp	.+2      	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
			{
				PressedKey = ' ';
     34c:	80 e2       	ldi	r24, 0x20	; 32
			{
				PressedKey = '\n';
			}

			if (PressedKey)
			  putchar(PressedKey);
     34e:	60 91 46 01 	lds	r22, 0x0146
     352:	70 91 47 01 	lds	r23, 0x0147
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
		}
	}
}
     35c:	28 96       	adiw	r28, 0x08	; 8
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     36e:	7f df       	rcall	.-258    	; 0x26e <SetupHardware>
     370:	8d ef       	ldi	r24, 0xFD	; 253

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
     378:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     37a:	74 df       	rcall	.-280    	; 0x264 <LEDs_SetAllLEDs>
     37c:	78 94       	sei
     37e:	a6 df       	rcall	.-180    	; 0x2cc <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     380:	c9 d6       	rcall	.+3474   	; 0x1114 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     382:	fd cf       	rjmp	.-6      	; 0x37e <main+0x10>

00000384 <EVENT_USB_Host_DeviceAttached>:
     384:	8a ee       	ldi	r24, 0xEA	; 234

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     38c:	80 ea       	ldi	r24, 0xA0	; 160
     38e:	6a cf       	rjmp	.-300    	; 0x264 <LEDs_SetAllLEDs>

00000390 <EVENT_USB_Host_DeviceUnattached>:
     390:	83 ed       	ldi	r24, 0xD3	; 211
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	64 cf       	rjmp	.-312    	; 0x264 <LEDs_SetAllLEDs>

0000039c <EVENT_USB_Host_DeviceEnumerationComplete>:
     39c:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	c2 50       	subi	r28, 0x02	; 2
     3a6:	d2 40       	sbci	r29, 0x02	; 2
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	57 df       	rcall	.-338    	; 0x264 <LEDs_SetAllLEDs>
     3b6:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3b8:	32 e0       	ldi	r19, 0x02	; 2
     3ba:	ae 01       	movw	r20, r28
     3bc:	4f 5f       	subi	r20, 0xFF	; 255
     3be:	5f 4f       	sbci	r21, 0xFF	; 255
     3c0:	be 01       	movw	r22, r28
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7d 4f       	sbci	r23, 0xFD	; 253
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	cf d4       	rcall	.+2462   	; 0xd68 <USB_Host_GetDeviceConfigDescriptor>
     3ca:	88 23       	and	r24, r24
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     3ce:	86 ea       	ldi	r24, 0xA6	; 166
     3d0:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3d2:	17 c0       	rjmp	.+46     	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     3d4:	cf 5f       	subi	r28, 0xFF	; 255
     3d6:	dd 4f       	sbci	r29, 0xFD	; 253
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     3d8:	68 81       	ld	r22, Y
     3da:	79 81       	ldd	r23, Y+1	; 0x01
     3dc:	c1 50       	subi	r28, 0x01	; 1
     3de:	d2 40       	sbci	r29, 0x02	; 2
     3e0:	ae 01       	movw	r20, r28
     3e2:	4f 5f       	subi	r20, 0xFF	; 255
     3e4:	5f 4f       	sbci	r21, 0xFF	; 255
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	c8 d6       	rcall	.+3472   	; 0x117c <HID_Host_ConfigurePipes>
     3ec:	88 23       	and	r24, r24
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     3f0:	8e e7       	ldi	r24, 0x7E	; 126
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	66 d6       	rcall	.+3276   	; 0x10c6 <USB_Host_SetDeviceConfiguration>
     3fa:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3fc:	31 f0       	breq	.+12     	; 0x40a <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     3fe:	88 e5       	ldi	r24, 0x58	; 88
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     406:	80 e9       	ldi	r24, 0x90	; 144
     408:	13 c0       	rjmp	.+38     	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     40e:	eb d7       	rcall	.+4054   	; 0x13e6 <HID_Host_SetBootProtocol>
     410:	88 23       	and	r24, r24
		return;
	}

	if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     412:	49 f0       	breq	.+18     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     414:	84 e3       	ldi	r24, 0x34	; 52
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
     41c:	80 e9       	ldi	r24, 0x90	; 144
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     41e:	22 df       	rcall	.-444    	; 0x264 <LEDs_SetAllLEDs>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	51 d6       	rcall	.+3234   	; 0x10c6 <USB_Host_SetDeviceConfiguration>
     424:	06 c0       	rjmp	.+12     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     426:	8d e1       	ldi	r24, 0x1D	; 29
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     42e:	80 e6       	ldi	r24, 0x60	; 96
     430:	19 df       	rcall	.-462    	; 0x264 <LEDs_SetAllLEDs>
		return;
     432:	ce 5f       	subi	r28, 0xFE	; 254
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     434:	dd 4f       	sbci	r29, 0xFD	; 253
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
}
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <EVENT_USB_Host_HostError>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	89 83       	std	Y+1, r24	; 0x01
     452:	58 d3       	rcall	.+1712   	; 0xb04 <USB_Disable>
     454:	1f 92       	push	r1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	8f 93       	push	r24
     45a:	8e ee       	ldi	r24, 0xEE	; 238
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	0e 94 89 0a 	call	0x1512	; 0x1512 <printf_P>
     466:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     468:	fd de       	rcall	.-518    	; 0x264 <LEDs_SetAllLEDs>
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	ff cf       	rjmp	.-2      	; 0x472 <EVENT_USB_Host_HostError+0x2c>

00000474 <EVENT_USB_Host_DeviceEnumerationFailed>:
     474:	90 91 35 01 	lds	r25, 0x0135
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     478:	1f 92       	push	r1
     47a:	9f 93       	push	r25
     47c:	1f 92       	push	r1
     47e:	6f 93       	push	r22
     480:	1f 92       	push	r1
     482:	8f 93       	push	r24
     484:	88 e9       	ldi	r24, 0x98	; 152
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	0e 94 89 0a 	call	0x1512	; 0x1512 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     490:	8d b7       	in	r24, 0x3d	; 61
     492:	9e b7       	in	r25, 0x3e	; 62
     494:	08 96       	adiw	r24, 0x08	; 8
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	9e bf       	out	0x3e, r25	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	8d bf       	out	0x3d, r24	; 61
     4a0:	80 e9       	ldi	r24, 0x90	; 144
     4a2:	e0 ce       	rjmp	.-576    	; 0x264 <LEDs_SetAllLEDs>

000004a4 <USB_GetHIDReportSize>:

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     4a4:	fc 01       	movw	r30, r24
     4a6:	e4 0f       	add	r30, r20
     4a8:	f1 1d       	adc	r31, r1
     4aa:	e4 0f       	add	r30, r20
				break;
     4ac:	f1 1d       	adc	r31, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	df 01       	movw	r26, r30
     4b4:	a2 0f       	add	r26, r18
     4b6:	b3 1f       	adc	r27, r19
     4b8:	af 56       	subi	r26, 0x6F	; 111
     4ba:	bc 4f       	sbci	r27, 0xFC	; 252
     4bc:	4d 91       	ld	r20, X+
     4be:	5c 91       	ld	r21, X
     4c0:	dc 01       	movw	r26, r24
     4c2:	a2 0f       	add	r26, r18
     4c4:	b3 1f       	adc	r27, r19
     4c6:	a0 57       	subi	r26, 0x70	; 112
     4c8:	bc 4f       	sbci	r27, 0xFC	; 252
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	7c 91       	ld	r23, X
     4cc:	76 13       	cpse	r23, r22
     4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <USB_GetHIDReportSize+0x50>
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	ca 01       	movw	r24, r20
     4d6:	87 70       	andi	r24, 0x07	; 7
     4d8:	99 27       	eor	r25, r25
     4da:	89 2b       	or	r24, r25
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <USB_GetHIDReportSize+0x3e>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	ca 01       	movw	r24, r20
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	43 e0       	ldi	r20, 0x03	; 3
     4e6:	96 95       	lsr	r25
     4e8:	87 95       	ror	r24
     4ea:	4a 95       	dec	r20
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <USB_GetHIDReportSize+0x42>
     4ee:	82 0f       	add	r24, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	93 1f       	adc	r25, r19
     4f2:	08 95       	ret
     4f4:	29 5f       	subi	r18, 0xF9	; 249
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	26 34       	cpi	r18, 0x46	; 70
     4fa:	31 05       	cpc	r19, r1
     4fc:	d1 f6       	brne	.-76     	; 0x4b2 <USB_GetHIDReportSize+0xe>
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	08 95       	ret

00000504 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     504:	80 91 9e 00 	lds	r24, 0x009E
     508:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     50a:	90 91 a0 00 	lds	r25, 0x00A0
     50e:	9d 7f       	andi	r25, 0xFD	; 253
     510:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     514:	90 91 9e 00 	lds	r25, 0x009E
     518:	92 60       	ori	r25, 0x02	; 2
     51a:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     51e:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     522:	91 fd       	sbrc	r25, 1
     524:	fc cf       	rjmp	.-8      	; 0x51e <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     526:	90 91 9e 00 	lds	r25, 0x009E
     52a:	91 60       	ori	r25, 0x01	; 1
     52c:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     530:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     534:	90 91 a0 00 	lds	r25, 0x00A0
     538:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     53a:	20 91 a0 00 	lds	r18, 0x00A0
     53e:	2f 7d       	andi	r18, 0xDF	; 223
     540:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     544:	20 91 9f 00 	lds	r18, 0x009F
     548:	2f 7d       	andi	r18, 0xDF	; 223
     54a:	20 93 9f 00 	sts	0x009F, r18
     54e:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     550:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     554:	35 ff       	sbrs	r19, 5
     556:	0b c0       	rjmp	.+22     	; 0x56e <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     558:	20 91 9f 00 	lds	r18, 0x009F
     55c:	2f 7d       	andi	r18, 0xDF	; 223
     55e:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     562:	20 91 9f 00 	lds	r18, 0x009F
     566:	2d 7f       	andi	r18, 0xFD	; 253
     568:	20 93 9f 00 	sts	0x009F, r18
     56c:	08 c0       	rjmp	.+16     	; 0x57e <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	ef ec       	ldi	r30, 0xCF	; 207
     570:	f7 e0       	ldi	r31, 0x07	; 7
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <USB_Host_ResetDevice+0x6e>
     576:	00 c0       	rjmp	.+0      	; 0x578 <USB_Host_ResetDevice+0x74>
     578:	00 00       	nop
     57a:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     57c:	49 f7       	brne	.-46     	; 0x550 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     57e:	99 23       	and	r25, r25
     580:	29 f0       	breq	.+10     	; 0x58c <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     582:	90 91 a0 00 	lds	r25, 0x00A0
     586:	90 62       	ori	r25, 0x20	; 32
     588:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     58c:	81 11       	cpse	r24, r1
     58e:	05 c0       	rjmp	.+10     	; 0x59a <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     590:	80 91 9e 00 	lds	r24, 0x009E
     594:	8e 7f       	andi	r24, 0xFE	; 254
     596:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     59a:	80 91 a0 00 	lds	r24, 0x00A0
     59e:	82 60       	ori	r24, 0x02	; 2
     5a0:	80 93 a0 00 	sts	0x00A0, r24
     5a4:	08 95       	ret

000005a6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5a6:	20 91 9e 00 	lds	r18, 0x009E
     5aa:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5ac:	90 91 a0 00 	lds	r25, 0x00A0
     5b0:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5b2:	30 91 a0 00 	lds	r19, 0x00A0
     5b6:	3f 7d       	andi	r19, 0xDF	; 223
     5b8:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5bc:	30 91 9f 00 	lds	r19, 0x009F
     5c0:	3f 7d       	andi	r19, 0xDF	; 223
     5c2:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5c6:	30 91 9e 00 	lds	r19, 0x009E
     5ca:	31 60       	ori	r19, 0x01	; 1
     5cc:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5d0:	88 23       	and	r24, r24
     5d2:	39 f1       	breq	.+78     	; 0x622 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5d4:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5d8:	35 ff       	sbrs	r19, 5
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5dc:	30 91 9f 00 	lds	r19, 0x009F
     5e0:	3f 7d       	andi	r19, 0xDF	; 223
     5e2:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5e6:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5e8:	30 91 35 01 	lds	r19, 0x0135
     5ec:	31 30       	cpi	r19, 0x01	; 1
     5ee:	c1 f0       	breq	.+48     	; 0x620 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5f0:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     5f4:	34 ff       	sbrs	r19, 4
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5f8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     5fc:	80 91 a6 00 	lds	r24, 0x00A6
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     606:	82 e0       	ldi	r24, 0x02	; 2

			break;
     608:	0c c0       	rjmp	.+24     	; 0x622 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     60a:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     60e:	31 ff       	sbrs	r19, 1
     610:	df cf       	rjmp	.-66     	; 0x5d0 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     612:	80 91 a6 00 	lds	r24, 0x00A6
     616:	8d 7f       	andi	r24, 0xFD	; 253
     618:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     61c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     61e:	01 c0       	rjmp	.+2      	; 0x622 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     620:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     622:	21 11       	cpse	r18, r1
     624:	05 c0       	rjmp	.+10     	; 0x630 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     626:	20 91 9e 00 	lds	r18, 0x009E
     62a:	2e 7f       	andi	r18, 0xFE	; 254
     62c:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     630:	99 23       	and	r25, r25
     632:	29 f0       	breq	.+10     	; 0x63e <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     634:	90 91 a0 00 	lds	r25, 0x00A0
     638:	90 62       	ori	r25, 0x20	; 32
     63a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     63e:	08 95       	ret

00000640 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	28 97       	sbiw	r28, 0x08	; 8
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     658:	80 91 35 01 	lds	r24, 0x0135
     65c:	85 30       	cpi	r24, 0x05	; 5
     65e:	09 f4       	brne	.+2      	; 0x662 <USB_Host_ProcessNextHostState+0x22>
     660:	9c c0       	rjmp	.+312    	; 0x79a <USB_Host_ProcessNextHostState+0x15a>
     662:	68 f4       	brcc	.+26     	; 0x67e <USB_Host_ProcessNextHostState+0x3e>
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	e1 f1       	breq	.+120    	; 0x6e0 <USB_Host_ProcessNextHostState+0xa0>
     668:	18 f4       	brcc	.+6      	; 0x670 <USB_Host_ProcessNextHostState+0x30>
     66a:	88 23       	and	r24, r24
     66c:	d9 f0       	breq	.+54     	; 0x6a4 <USB_Host_ProcessNextHostState+0x64>
     66e:	ff c0       	rjmp	.+510    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	09 f4       	brne	.+2      	; 0x676 <USB_Host_ProcessNextHostState+0x36>
     674:	3f c0       	rjmp	.+126    	; 0x6f4 <USB_Host_ProcessNextHostState+0xb4>
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	09 f4       	brne	.+2      	; 0x67c <USB_Host_ProcessNextHostState+0x3c>
     67a:	67 c0       	rjmp	.+206    	; 0x74a <USB_Host_ProcessNextHostState+0x10a>
     67c:	f8 c0       	rjmp	.+496    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     67e:	87 30       	cpi	r24, 0x07	; 7
     680:	09 f4       	brne	.+2      	; 0x684 <USB_Host_ProcessNextHostState+0x44>
     682:	a6 c0       	rjmp	.+332    	; 0x7d0 <USB_Host_ProcessNextHostState+0x190>
     684:	08 f4       	brcc	.+2      	; 0x688 <USB_Host_ProcessNextHostState+0x48>
     686:	96 c0       	rjmp	.+300    	; 0x7b4 <USB_Host_ProcessNextHostState+0x174>
     688:	88 30       	cpi	r24, 0x08	; 8
     68a:	09 f4       	brne	.+2      	; 0x68e <USB_Host_ProcessNextHostState+0x4e>
     68c:	bf c0       	rjmp	.+382    	; 0x80c <USB_Host_ProcessNextHostState+0x1cc>
     68e:	89 30       	cpi	r24, 0x09	; 9
     690:	09 f0       	breq	.+2      	; 0x694 <USB_Host_ProcessNextHostState+0x54>
     692:	ed c0       	rjmp	.+474    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	80 93 35 01 	sts	0x0135, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     6a0:	7d de       	rcall	.-774    	; 0x39c <EVENT_USB_Host_DeviceEnumerationComplete>
     6a2:	e5 c0       	rjmp	.+458    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
			break;
     6a4:	00 91 29 01 	lds	r16, 0x0129
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6a8:	10 91 2a 01 	lds	r17, 0x012A
     6ac:	01 15       	cp	r16, r1
     6ae:	11 05       	cpc	r17, r1
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <USB_Host_ProcessNextHostState+0x74>
     6b2:	dd c0       	rjmp	.+442    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6b6:	77 df       	rcall	.-274    	; 0x5a6 <USB_Host_WaitMS>
     6b8:	88 23       	and	r24, r24
     6ba:	31 f0       	breq	.+12     	; 0x6c8 <USB_Host_ProcessNextHostState+0x88>
     6bc:	90 91 28 01 	lds	r25, 0x0128
				{
					USB_HostState = PostWaitState;
     6c0:	90 93 35 01 	sts	0x0135, r25
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	c5 c0       	rjmp	.+394    	; 0x852 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     6c8:	01 50       	subi	r16, 0x01	; 1
					break;
     6ca:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     6cc:	10 93 2a 01 	sts	0x012A, r17
     6d0:	00 93 29 01 	sts	0x0129, r16
     6d4:	01 2b       	or	r16, r17
     6d6:	09 f0       	breq	.+2      	; 0x6da <USB_Host_ProcessNextHostState+0x9a>
     6d8:	ca c0       	rjmp	.+404    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     6da:	80 91 28 01 	lds	r24, 0x0128
				  USB_HostState = PostWaitState;
     6de:	07 c0       	rjmp	.+14     	; 0x6ee <USB_Host_ProcessNextHostState+0xae>
     6e0:	88 ee       	ldi	r24, 0xE8	; 232
     6e2:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     6e4:	90 93 2a 01 	sts	0x012A, r25
     6e8:	80 93 29 01 	sts	0x0129, r24
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	80 93 35 01 	sts	0x0135, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6f2:	bd c0       	rjmp	.+378    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     6f4:	80 91 29 01 	lds	r24, 0x0129
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     6f8:	90 91 2a 01 	lds	r25, 0x012A
     6fc:	9c 01       	movw	r18, r24
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	31 09       	sbc	r19, r1
     702:	30 93 2a 01 	sts	0x012A, r19
     706:	20 93 29 01 	sts	0x0129, r18
     70a:	89 2b       	or	r24, r25
     70c:	39 f0       	breq	.+14     	; 0x71c <USB_Host_ProcessNextHostState+0xdc>
     70e:	8f ec       	ldi	r24, 0xCF	; 207
     710:	97 e0       	ldi	r25, 0x07	; 7
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <USB_Host_ProcessNextHostState+0xd2>
     716:	00 c0       	rjmp	.+0      	; 0x718 <USB_Host_ProcessNextHostState+0xd8>
     718:	00 00       	nop
     71a:	a9 c0       	rjmp	.+338    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     71c:	77 98       	cbi	0x0e, 7	; 14
     71e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     722:	80 61       	ori	r24, 0x10	; 16
     724:	80 93 d8 00 	sts	0x00D8, r24
     728:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     72c:	8b 7f       	andi	r24, 0xFB	; 251
     72e:	80 93 dd 00 	sts	0x00DD, r24
     732:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     736:	80 61       	ori	r24, 0x10	; 16
     738:	80 93 d7 00 	sts	0x00D7, r24
     73c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     740:	82 60       	ori	r24, 0x02	; 2
     742:	80 93 dd 00 	sts	0x00DD, r24
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	d2 cf       	rjmp	.-92     	; 0x6ee <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     74a:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     74e:	80 ff       	sbrs	r24, 0
     750:	8e c0       	rjmp	.+284    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     752:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     756:	8e 7f       	andi	r24, 0xFE	; 254
     758:	80 93 9f 00 	sts	0x009F, r24
     75c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     760:	8d 7f       	andi	r24, 0xFD	; 253
     762:	80 93 9f 00 	sts	0x009F, r24
     766:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     76a:	8d 7f       	andi	r24, 0xFD	; 253
     76c:	80 93 df 00 	sts	0x00DF, r24
     770:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     774:	82 60       	ori	r24, 0x02	; 2
     776:	80 93 de 00 	sts	0x00DE, r24
     77a:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	80 93 9e 00 	sts	0x009E, r24
     784:	53 d1       	rcall	.+678    	; 0xa2c <Pipe_ClearPipes>
     786:	10 92 35 01 	sts	0x0135, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     78a:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	90 93 2a 01 	sts	0x012A, r25
     792:	80 93 29 01 	sts	0x0129, r24
     796:	85 e0       	ldi	r24, 0x05	; 5
     798:	0a c0       	rjmp	.+20     	; 0x7ae <USB_Host_ProcessNextHostState+0x16e>
     79a:	b4 de       	rcall	.-664    	; 0x504 <USB_Host_ResetDevice>
     79c:	10 92 35 01 	sts	0x0135, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7a0:	88 ec       	ldi	r24, 0xC8	; 200
     7a2:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7a4:	90 93 2a 01 	sts	0x012A, r25
     7a8:	80 93 29 01 	sts	0x0129, r24
     7ac:	86 e0       	ldi	r24, 0x06	; 6
     7ae:	80 93 28 01 	sts	0x0128, r24
     7b2:	5d c0       	rjmp	.+186    	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     7b4:	01 e0       	ldi	r16, 0x01	; 1
     7b6:	20 e4       	ldi	r18, 0x40	; 64
     7b8:	30 e0       	ldi	r19, 0x00	; 0
			break;
     7ba:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	ae d0       	rcall	.+348    	; 0x91e <Pipe_ConfigurePipe>
     7c2:	81 11       	cpse	r24, r1
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <USB_Host_ProcessNextHostState+0x18c>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	43 c0       	rjmp	.+134    	; 0x852 <USB_Host_ProcessNextHostState+0x212>
     7cc:	87 e0       	ldi	r24, 0x07	; 7
     7ce:	8f cf       	rjmp	.-226    	; 0x6ee <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7d0:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7d2:	e8 e1       	ldi	r30, 0x18	; 24
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7d6:	ad e2       	ldi	r26, 0x2D	; 45
     7d8:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7da:	01 90       	ld	r0, Z+
     7dc:	0d 92       	st	X+, r0
     7de:	8a 95       	dec	r24
     7e0:	e1 f7       	brne	.-8      	; 0x7da <USB_Host_ProcessNextHostState+0x19a>
     7e2:	10 92 a7 00 	sts	0x00A7, r1
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	72 d3       	rcall	.+1764   	; 0xed0 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7ec:	81 11       	cpse	r24, r1
     7ee:	30 c0       	rjmp	.+96     	; 0x850 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7f0:	88 85       	ldd	r24, Y+8	; 0x08
     7f2:	80 93 17 01 	sts	0x0117, r24
     7f6:	86 de       	rcall	.-756    	; 0x504 <USB_Host_ResetDevice>
     7f8:	10 92 35 01 	sts	0x0135, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7fc:	88 ec       	ldi	r24, 0xC8	; 200
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	90 93 2a 01 	sts	0x012A, r25

			USB_Host_ResetDevice();
     804:	80 93 29 01 	sts	0x0129, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	d1 cf       	rjmp	.-94     	; 0x7ae <USB_Host_ProcessNextHostState+0x16e>
     80c:	20 91 17 01 	lds	r18, 0x0117
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	01 e0       	ldi	r16, 0x01	; 1
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     81a:	81 d0       	rcall	.+258    	; 0x91e <Pipe_ConfigurePipe>
     81c:	88 23       	and	r24, r24
     81e:	99 f2       	breq	.-90     	; 0x7c6 <USB_Host_ProcessNextHostState+0x186>
     820:	88 e0       	ldi	r24, 0x08	; 8
     822:	e0 e2       	ldi	r30, 0x20	; 32
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	ad e2       	ldi	r26, 0x2D	; 45
     828:	b1 e0       	ldi	r27, 0x01	; 1
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     830:	e1 f7       	brne	.-8      	; 0x82a <USB_Host_ProcessNextHostState+0x1ea>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4c d3       	rcall	.+1688   	; 0xed0 <USB_Host_SendControlRequest>
     838:	81 11       	cpse	r24, r1
     83a:	0a c0       	rjmp	.+20     	; 0x850 <USB_Host_ProcessNextHostState+0x210>
     83c:	10 92 35 01 	sts	0x0135, r1
     840:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 2a 01 	sts	0x012A, r25
     848:	80 93 29 01 	sts	0x0129, r24
     84c:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     84e:	af cf       	rjmp	.-162    	; 0x7ae <USB_Host_ProcessNextHostState+0x16e>
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	20 91 35 01 	lds	r18, 0x0135
     856:	21 30       	cpi	r18, 0x01	; 1
     858:	51 f0       	breq	.+20     	; 0x86e <USB_Host_ProcessNextHostState+0x22e>
     85a:	68 2f       	mov	r22, r24
     85c:	89 2f       	mov	r24, r25
     85e:	0a de       	rcall	.-1004   	; 0x474 <EVENT_USB_Host_DeviceEnumerationFailed>
     860:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     864:	81 60       	ori	r24, 0x01	; 1
     866:	80 93 dd 00 	sts	0x00DD, r24
     86a:	92 dd       	rcall	.-1244   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     86c:	63 d1       	rcall	.+710    	; 0xb34 <USB_ResetInterface>
     86e:	28 96       	adiw	r28, 0x08	; 8
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16

		USB_ResetInterface();
     882:	08 95       	ret

00000884 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	7c 01       	movw	r14, r24
     896:	8b 01       	movw	r16, r22
     898:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     89a:	80 91 aa 00 	lds	r24, 0x00AA
     89e:	8f 7c       	andi	r24, 0xCF	; 207
     8a0:	80 61       	ori	r24, 0x10	; 16
     8a2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     8a6:	00 d1       	rcall	.+512    	; 0xaa8 <Pipe_WaitUntilReady>
     8a8:	81 11       	cpse	r24, r1
     8aa:	30 c0       	rjmp	.+96     	; 0x90c <Pipe_Read_Stream_LE+0x88>
     8ac:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     8ae:	31 f0       	breq	.+12     	; 0x8bc <Pipe_Read_Stream_LE+0x38>
     8b0:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	08 1b       	sub	r16, r24
     8b6:	19 0b       	sbc	r17, r25
     8b8:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     8ba:	f9 1e       	adc	r15, r25
     8bc:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8be:	d1 2c       	mov	r13, r1
     8c0:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     8c2:	11 05       	cpc	r17, r1
     8c4:	11 f1       	breq	.+68     	; 0x90a <Pipe_Read_Stream_LE+0x86>
     8c6:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     8ca:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     8cc:	13 c0       	rjmp	.+38     	; 0x8f4 <Pipe_Read_Stream_LE+0x70>
     8ce:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     8d2:	8e 77       	andi	r24, 0x7E	; 126
     8d4:	80 93 a6 00 	sts	0x00A6, r24
     8d8:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     8da:	41 f0       	breq	.+16     	; 0x8ec <Pipe_Read_Stream_LE+0x68>
     8dc:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	8c 0d       	add	r24, r12
     8e2:	9d 1d       	adc	r25, r13
     8e4:	99 83       	std	Y+1, r25	; 0x01
     8e6:	88 83       	st	Y, r24
     8e8:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     8ea:	10 c0       	rjmp	.+32     	; 0x90c <Pipe_Read_Stream_LE+0x88>
     8ec:	dd d0       	rcall	.+442    	; 0xaa8 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8ee:	88 23       	and	r24, r24
     8f0:	39 f3       	breq	.-50     	; 0x8c0 <Pipe_Read_Stream_LE+0x3c>
     8f2:	0c c0       	rjmp	.+24     	; 0x90c <Pipe_Read_Stream_LE+0x88>
     8f4:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     8f8:	f7 01       	movw	r30, r14
     8fa:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     8fc:	7f 01       	movw	r14, r30
     8fe:	01 50       	subi	r16, 0x01	; 1
     900:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     902:	ff ef       	ldi	r31, 0xFF	; 255
     904:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     906:	df 0a       	sbc	r13, r31
     908:	db cf       	rjmp	.-74     	; 0x8c0 <Pipe_Read_Stream_LE+0x3c>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     90e:	cf 91       	pop	r28
}
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	08 95       	ret

0000091e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     91e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     920:	e8 2f       	mov	r30, r24
     922:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     924:	87 ff       	sbrs	r24, 7
     926:	02 c0       	rjmp	.+4      	; 0x92c <Pipe_ConfigurePipe+0xe>
     928:	80 e1       	ldi	r24, 0x10	; 16
     92a:	01 c0       	rjmp	.+2      	; 0x92e <Pipe_ConfigurePipe+0x10>
     92c:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     92e:	e7 30       	cpi	r30, 0x07	; 7
     930:	10 f0       	brcs	.+4      	; 0x936 <Pipe_ConfigurePipe+0x18>
	  return false;
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	5a c0       	rjmp	.+180    	; 0x9ea <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     936:	61 11       	cpse	r22, r1
     938:	01 c0       	rjmp	.+2      	; 0x93c <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     93a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     93c:	90 e4       	ldi	r25, 0x40	; 64
     93e:	69 9f       	mul	r22, r25
     940:	b0 01       	movw	r22, r0
     942:	11 24       	eor	r1, r1
     944:	4f 70       	andi	r20, 0x0F	; 15
     946:	46 2b       	or	r20, r22
     948:	48 2b       	or	r20, r24
     94a:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     94c:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     950:	5e 13       	cpse	r21, r30
     952:	19 c0       	rjmp	.+50     	; 0x986 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     954:	02 30       	cpi	r16, 0x02	; 2
     956:	10 f0       	brcs	.+4      	; 0x95c <Pipe_ConfigurePipe+0x3e>
     958:	76 e0       	ldi	r23, 0x06	; 6
     95a:	01 c0       	rjmp	.+2      	; 0x95e <Pipe_ConfigurePipe+0x40>
     95c:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     95e:	88 e0       	ldi	r24, 0x08	; 8
     960:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     962:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     964:	82 17       	cp	r24, r18
     966:	93 07       	cpc	r25, r19
     968:	40 f0       	brcs	.+16     	; 0x97a <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     96a:	86 2f       	mov	r24, r22
     96c:	82 95       	swap	r24
     96e:	80 7f       	andi	r24, 0xF0	; 240
     970:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     972:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     974:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e c0       	rjmp	.+28     	; 0x996 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     97a:	65 30       	cpi	r22, 0x05	; 5
     97c:	b1 f3       	breq	.-20     	; 0x96a <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     97e:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	ef cf       	rjmp	.-34     	; 0x964 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     986:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     98a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     98e:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     992:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     996:	81 fd       	sbrc	r24, 1
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     99a:	5f 5f       	subi	r21, 0xFF	; 255
     99c:	57 30       	cpi	r21, 0x07	; 7
     99e:	b1 f6       	brne	.-84     	; 0x94c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9a0:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	21 c0       	rjmp	.+66     	; 0x9ea <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9a8:	90 91 a9 00 	lds	r25, 0x00A9
     9ac:	9e 7f       	andi	r25, 0xFE	; 254
     9ae:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9b2:	90 91 ab 00 	lds	r25, 0x00AB
     9b6:	9d 7f       	andi	r25, 0xFD	; 253
     9b8:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9bc:	90 91 a9 00 	lds	r25, 0x00A9
     9c0:	91 60       	ori	r25, 0x01	; 1
     9c2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     9c6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     9ca:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     9ce:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     9d2:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9d6:	80 91 a9 00 	lds	r24, 0x00A9
     9da:	80 62       	ori	r24, 0x20	; 32
     9dc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9e0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     9e4:	87 fd       	sbrc	r24, 7
     9e6:	d9 cf       	rjmp	.-78     	; 0x99a <Pipe_ConfigurePipe+0x7c>
     9e8:	a4 cf       	rjmp	.-184    	; 0x932 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	f6 2e       	mov	r15, r22
     9fa:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	1f 15       	cp	r17, r15
     a00:	71 f0       	breq	.+28     	; 0xa1e <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     a02:	88 81       	ld	r24, Y
     a04:	88 23       	and	r24, r24
     a06:	41 f0       	breq	.+16     	; 0xa18 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	3a 81       	ldd	r19, Y+2	; 0x02
     a0c:	0d 81       	ldd	r16, Y+5	; 0x05
     a0e:	4b 81       	ldd	r20, Y+3	; 0x03
     a10:	6c 81       	ldd	r22, Y+4	; 0x04
     a12:	85 df       	rcall	.-246    	; 0x91e <Pipe_ConfigurePipe>
     a14:	88 23       	and	r24, r24
     a16:	21 f0       	breq	.+8      	; 0xa20 <Pipe_ConfigurePipeTable+0x32>
     a18:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a1a:	26 96       	adiw	r28, 0x06	; 6
     a1c:	f0 cf       	rjmp	.-32     	; 0x9fe <Pipe_ConfigurePipeTable+0x10>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     a20:	df 91       	pop	r29
}
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	08 95       	ret

00000a2c <Pipe_ClearPipes>:
     a2c:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a30:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a32:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a36:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a3a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a3e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a42:	90 91 a9 00 	lds	r25, 0x00A9
     a46:	9e 7f       	andi	r25, 0xFE	; 254
     a48:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	87 30       	cpi	r24, 0x07	; 7
     a50:	81 f7       	brne	.-32     	; 0xa32 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a52:	08 95       	ret

00000a54 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     a54:	90 91 a7 00 	lds	r25, 0x00A7
     a58:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     a5a:	20 91 aa 00 	lds	r18, 0x00AA
     a5e:	20 ff       	sbrs	r18, 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <Pipe_IsEndpointBound+0x12>
     a62:	20 e8       	ldi	r18, 0x80	; 128
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <Pipe_IsEndpointBound+0x14>
     a66:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     a68:	42 2f       	mov	r20, r18
     a6a:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a6c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a6e:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a72:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a76:	27 ff       	sbrs	r18, 7
     a78:	0c c0       	rjmp	.+24     	; 0xa92 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     a7a:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a7e:	53 2f       	mov	r21, r19
     a80:	5f 70       	andi	r21, 0x0F	; 15
     a82:	35 ff       	sbrs	r19, 5
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <Pipe_IsEndpointBound+0x36>
     a86:	20 e8       	ldi	r18, 0x80	; 128
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <Pipe_IsEndpointBound+0x38>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a8e:	28 17       	cp	r18, r24
     a90:	49 f0       	breq	.+18     	; 0xaa4 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a92:	9f 5f       	subi	r25, 0xFF	; 255
     a94:	97 30       	cpi	r25, 0x07	; 7
     a96:	59 f7       	brne	.-42     	; 0xa6e <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a98:	94 2f       	mov	r25, r20
     a9a:	9f 70       	andi	r25, 0x0F	; 15
     a9c:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     aa6:	08 95       	ret

00000aa8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aa8:	80 91 a2 00 	lds	r24, 0x00A2
     aac:	90 91 a3 00 	lds	r25, 0x00A3
     ab0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab2:	20 91 aa 00 	lds	r18, 0x00AA
     ab6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab8:	20 31       	cpi	r18, 0x10	; 16
     aba:	29 f4       	brne	.+10     	; 0xac6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     abc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     ac0:	20 ff       	sbrs	r18, 0
     ac2:	05 c0       	rjmp	.+10     	; 0xace <Pipe_WaitUntilReady+0x26>
     ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     aca:	22 fd       	sbrc	r18, 2
     acc:	13 c0       	rjmp	.+38     	; 0xaf4 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ace:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad2:	21 fd       	sbrc	r18, 1
     ad4:	11 c0       	rjmp	.+34     	; 0xaf8 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ad6:	20 91 35 01 	lds	r18, 0x0135
     ada:	21 30       	cpi	r18, 0x01	; 1
     adc:	79 f0       	breq	.+30     	; 0xafc <Pipe_WaitUntilReady+0x54>
     ade:	20 91 a2 00 	lds	r18, 0x00A2
     ae2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ae6:	28 17       	cp	r18, r24
     ae8:	39 07       	cpc	r19, r25
     aea:	19 f3       	breq	.-58     	; 0xab2 <Pipe_WaitUntilReady+0xa>
     aec:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aee:	41 f0       	breq	.+16     	; 0xb00 <Pipe_WaitUntilReady+0x58>
     af0:	c9 01       	movw	r24, r18
     af2:	df cf       	rjmp	.-66     	; 0xab2 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b00:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     b02:	08 95       	ret

00000b04 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b04:	75 d0       	rcall	.+234    	; 0xbf0 <USB_INT_DisableAllInterrupts>
     b06:	7c d0       	rcall	.+248    	; 0xc00 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b08:	e0 ee       	ldi	r30, 0xE0	; 224
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b0c:	80 81       	ld	r24, Z
     b0e:	81 60       	ori	r24, 0x01	; 1
     b10:	80 83       	st	Z, r24
     b12:	e8 ed       	ldi	r30, 0xD8	; 216
     b14:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b16:	80 81       	ld	r24, Z
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	80 83       	st	Z, r24
     b1c:	19 bc       	out	0x29, r1	; 41
     b1e:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b20:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b22:	8c 91       	ld	r24, X
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	8c 93       	st	X, r24
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b2c:	80 83       	st	Z, r24
     b2e:	10 92 2c 01 	sts	0x012C, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b32:	08 95       	ret

00000b34 <USB_ResetInterface>:
     b34:	5d d0       	rcall	.+186    	; 0xbf0 <USB_INT_DisableAllInterrupts>
     b36:	64 d0       	rcall	.+200    	; 0xc00 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b38:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b3c:	8f 77       	andi	r24, 0x7F	; 127
     b3e:	80 93 d8 00 	sts	0x00D8, r24
     b42:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	80 93 d8 00 	sts	0x00D8, r24
     b4c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b50:	8f 7d       	andi	r24, 0xDF	; 223
     b52:	80 93 d8 00 	sts	0x00D8, r24
     b56:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	80 93 d7 00 	sts	0x00D7, r24
     b60:	8c e0       	ldi	r24, 0x0C	; 12
     b62:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b64:	8e e0       	ldi	r24, 0x0E	; 14
     b66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b68:	09 b4       	in	r0, 0x29	; 41
     b6a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b6c:	fd cf       	rjmp	.-6      	; 0xb68 <USB_ResetInterface+0x34>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 35 01 	sts	0x0135, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b74:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ConfigurationNumber = 0;
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b7e:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b82:	80 64       	ori	r24, 0x40	; 64
     b84:	80 93 d8 00 	sts	0x00D8, r24
     b88:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	80 93 dd 00 	sts	0x00DD, r24
     b92:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b96:	84 60       	ori	r24, 0x04	; 4
     b98:	80 93 dd 00 	sts	0x00DD, r24
     b9c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     ba0:	8f 7e       	andi	r24, 0xEF	; 239
     ba2:	80 93 d7 00 	sts	0x00D7, r24
     ba6:	6f 9a       	sbi	0x0d, 7	; 13
     ba8:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     baa:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	80 93 de 00 	sts	0x00DE, r24
     bb4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     bb8:	84 60       	ori	r24, 0x04	; 4
     bba:	80 93 de 00 	sts	0x00DE, r24
     bbe:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	80 93 e0 00 	sts	0x00E0, r24
     bc8:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     bcc:	80 61       	ori	r24, 0x10	; 16
     bce:	80 93 d8 00 	sts	0x00D8, r24
     bd2:	08 95       	ret

00000bd4 <USB_Init>:
     bd4:	e8 ed       	ldi	r30, 0xD8	; 216
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7e       	andi	r24, 0xEF	; 239
     bdc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     bde:	e7 ed       	ldi	r30, 0xD7	; 215
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
     bee:	a2 cf       	rjmp	.-188    	; 0xb34 <USB_ResetInterface>

00000bf0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bf0:	e8 ed       	ldi	r30, 0xD8	; 216
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	8c 7f       	andi	r24, 0xFC	; 252
     bf8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bfa:	10 92 a0 00 	sts	0x00A0, r1
     bfe:	08 95       	ret

00000c00 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c00:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c04:	10 92 9f 00 	sts	0x009F, r1
     c08:	08 95       	ret

00000c0a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	0b b6       	in	r0, 0x3b	; 59
     c16:	0f 92       	push	r0
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c30:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c34:	85 ff       	sbrs	r24, 5
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c38:	80 91 a0 00 	lds	r24, 0x00A0
     c3c:	85 ff       	sbrs	r24, 5
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c40:	80 91 9f 00 	lds	r24, 0x009F
     c44:	8f 7d       	andi	r24, 0xDF	; 223
     c46:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c4a:	1a d1       	rcall	.+564    	; 0xe80 <USB_Event_Stub>
     c4c:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c50:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c52:	15 c0       	rjmp	.+42     	; 0xc7e <__vector_10+0x74>
     c54:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c58:	81 ff       	sbrs	r24, 1
     c5a:	11 c0       	rjmp	.+34     	; 0xc7e <__vector_10+0x74>
     c5c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c60:	8d 7f       	andi	r24, 0xFD	; 253
     c62:	80 93 9f 00 	sts	0x009F, r24
     c66:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
     c6c:	80 93 9f 00 	sts	0x009F, r24
     c70:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c74:	8d 7f       	andi	r24, 0xFD	; 253
     c76:	80 93 a0 00 	sts	0x00A0, r24
     c7a:	8a db       	rcall	.-2284   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c7c:	5b df       	rcall	.-330    	; 0xb34 <USB_ResetInterface>
     c7e:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     c82:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c84:	15 c0       	rjmp	.+42     	; 0xcb0 <__vector_10+0xa6>
     c86:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c8a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <__vector_10+0xa6>
     c8e:	80 91 df 00 	lds	r24, 0x00DF
     c92:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c94:	80 93 df 00 	sts	0x00DF, r24
     c98:	77 98       	cbi	0x0e, 7	; 14
     c9a:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c9e:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ca0:	80 93 dd 00 	sts	0x00DD, r24
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	cf db       	rcall	.-2146   	; 0x446 <EVENT_USB_Host_HostError>
     ca8:	73 db       	rcall	.-2330   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 35 01 	sts	0x0135, r24
		EVENT_USB_Host_DeviceUnattached();
     cb0:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     cb4:	80 ff       	sbrs	r24, 0
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <__vector_10+0xdc>
     cb8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cbc:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cbe:	13 c0       	rjmp	.+38     	; 0xce6 <__vector_10+0xdc>
     cc0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cca:	80 91 de 00 	lds	r24, 0x00DE
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     cd4:	57 db       	rcall	.-2386   	; 0x384 <EVENT_USB_Host_DeviceAttached>
     cd6:	80 91 a0 00 	lds	r24, 0x00A0
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ce0:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ce2:	80 93 35 01 	sts	0x0135, r24
     ce6:	80 91 df 00 	lds	r24, 0x00DF
     cea:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <__vector_10+0x100>
     cee:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cf2:	82 ff       	sbrs	r24, 2
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cf6:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cfa:	8b 7f       	andi	r24, 0xFB	; 251
     cfc:	80 93 df 00 	sts	0x00DF, r24
     d00:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	b7 db       	rcall	.-2194   	; 0x474 <EVENT_USB_Host_DeviceEnumerationFailed>
     d06:	44 db       	rcall	.-2424   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
     d08:	15 df       	rcall	.-470    	; 0xb34 <USB_ResetInterface>
     d0a:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23

		USB_ResetInterface();
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0b be       	out	0x3b, r0	; 59
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d36:	eb 01       	movw	r28, r22
     d38:	a8 81       	ld	r26, Y
     d3a:	b9 81       	ldd	r27, Y+1	; 0x01
     d3c:	8c 91       	ld	r24, X
     d3e:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
     d40:	20 81       	ld	r18, Z
     d42:	31 81       	ldd	r19, Z+1	; 0x01
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	08 f4       	brcc	.+2      	; 0xd4c <USB_GetNextDescriptor+0x1c>
     d4a:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d4c:	a2 0f       	add	r26, r18
     d4e:	b3 1f       	adc	r27, r19
     d50:	eb 01       	movw	r28, r22
     d52:	b9 83       	std	Y+1, r27	; 0x01
     d54:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	82 1b       	sub	r24, r18
     d5c:	93 0b       	sbc	r25, r19
     d5e:	91 83       	std	Z+1, r25	; 0x01
     d60:	80 83       	st	Z, r24
			}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	29 97       	sbiw	r28, 0x09	; 9
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	7b 01       	movw	r14, r22
     d8a:	8a 01       	movw	r16, r20
     d8c:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d8e:	90 e8       	ldi	r25, 0x80	; 128
     d90:	90 93 2d 01 	sts	0x012D, r25
     d94:	96 e0       	ldi	r25, 0x06	; 6
     d96:	90 93 2e 01 	sts	0x012E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d9a:	e8 2f       	mov	r30, r24
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     da2:	f0 93 30 01 	sts	0x0130, r31
     da6:	e0 93 2f 01 	sts	0x012F, r30
     daa:	10 92 32 01 	sts	0x0132, r1
     dae:	10 92 31 01 	sts	0x0131, r1
     db2:	89 e0       	ldi	r24, 0x09	; 9
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 34 01 	sts	0x0134, r25
     dba:	80 93 33 01 	sts	0x0133, r24
     dbe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	84 d0       	rcall	.+264    	; 0xed0 <USB_Host_SendControlRequest>
     dc8:	81 11       	cpse	r24, r1
     dca:	19 c0       	rjmp	.+50     	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x96>
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	d7 01       	movw	r26, r14
     dd2:	ed 93       	st	X+, r30
     dd4:	fc 93       	st	X, r31
     dd6:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     dd8:	df 06       	cpc	r13, r31
     dda:	70 f0       	brcs	.+28     	; 0xdf8 <USB_Host_GetDeviceConfigDescriptor+0x90>
     ddc:	f0 93 34 01 	sts	0x0134, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     de0:	e0 93 33 01 	sts	0x0133, r30
     de4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     de6:	74 d0       	rcall	.+232    	; 0xed0 <USB_Host_SendControlRequest>
     de8:	81 11       	cpse	r24, r1
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x96>
     dec:	f8 01       	movw	r30, r16
     dee:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	21 f0       	breq	.+8      	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x94>
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     e00:	0f b6       	in	r0, 0x3f	; 63
}
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	08 95       	ret

00000e1c <USB_GetNextDescriptorComp>:
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	8c 01       	movw	r16, r24
     e32:	eb 01       	movw	r28, r22
     e34:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e36:	f8 01       	movw	r30, r16
     e38:	e0 80       	ld	r14, Z
     e3a:	f1 80       	ldd	r15, Z+1	; 0x01
     e3c:	e1 14       	cp	r14, r1
     e3e:	f1 04       	cpc	r15, r1
     e40:	99 f0       	breq	.+38     	; 0xe68 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e42:	a8 80       	ld	r10, Y
     e44:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     e46:	be 01       	movw	r22, r28
     e48:	c8 01       	movw	r24, r16
     e4a:	72 df       	rcall	.-284    	; 0xd30 <USB_GetNextDescriptor>
     e4c:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e4e:	99 81       	ldd	r25, Y+1	; 0x01
     e50:	f6 01       	movw	r30, r12
     e52:	09 95       	icall
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	79 f3       	breq	.-34     	; 0xe36 <USB_GetNextDescriptorComp+0x1a>
     e58:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e5a:	39 f4       	brne	.+14     	; 0xe6a <USB_GetNextDescriptorComp+0x4e>
     e5c:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     e5e:	a8 82       	st	Y, r10
     e60:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     e62:	f1 82       	std	Z+1, r15	; 0x01
     e64:	e0 82       	st	Z, r14
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <USB_GetNextDescriptorComp+0x4e>
     e68:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e6a:	df 91       	pop	r29
}
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	08 95       	ret

00000e80 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e80:	08 95       	ret

00000e82 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e8a:	c9 ee       	ldi	r28, 0xE9	; 233
     e8c:	d3 e0       	ldi	r29, 0x03	; 3
     e8e:	11 11       	cpse	r17, r1
     e90:	0d c0       	rjmp	.+26     	; 0xeac <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e92:	80 91 a6 00 	lds	r24, 0x00A6
     e96:	83 fd       	sbrc	r24, 3
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	84 db       	rcall	.-2296   	; 0x5a6 <USB_Host_WaitMS>
     e9e:	81 11       	cpse	r24, r1
     ea0:	13 c0       	rjmp	.+38     	; 0xec8 <USB_Host_WaitForIOS+0x46>
     ea2:	21 97       	sbiw	r28, 0x01	; 1
     ea4:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ea6:	99 f7       	brne	.-26     	; 0xe8e <USB_Host_WaitForIOS+0xc>
     ea8:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <USB_Host_WaitForIOS+0x46>
     eac:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     eae:	29 f4       	brne	.+10     	; 0xeba <USB_Host_WaitForIOS+0x38>
     eb0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     eb4:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     eb6:	f1 cf       	rjmp	.-30     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <USB_Host_WaitForIOS+0x44>
     eba:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ebc:	71 f7       	brne	.-36     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     ebe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ec2:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     ec4:	ea cf       	rjmp	.-44     	; 0xe9a <USB_Host_WaitForIOS+0x18>
     ec6:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     ec8:	df 91       	pop	r29
}
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	08 95       	ret

00000ed0 <USB_Host_SendControlRequest>:
     ed0:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     edc:	f0 90 9e 00 	lds	r15, 0x009E
     ee0:	8f 2d       	mov	r24, r15
     ee2:	81 70       	andi	r24, 0x01	; 1
     ee4:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     ee6:	c0 91 33 01 	lds	r28, 0x0133
     eea:	d0 91 34 01 	lds	r29, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eee:	80 91 9e 00 	lds	r24, 0x009E
     ef2:	81 60       	ori	r24, 0x01	; 1
     ef4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	55 db       	rcall	.-2390   	; 0x5a6 <USB_Host_WaitMS>
     efc:	81 11       	cpse	r24, r1
     efe:	cc c0       	rjmp	.+408    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     f00:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f04:	8f 7c       	andi	r24, 0xCF	; 207
     f06:	80 93 aa 00 	sts	0x00AA, r24
     f0a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f0e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	80 93 a6 00 	sts	0x00A6, r24
     f18:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f1c:	8f 7b       	andi	r24, 0xBF	; 191
     f1e:	80 93 a9 00 	sts	0x00A9, r24
     f22:	ed e2       	ldi	r30, 0x2D	; 45
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f28:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f2e:	e5 33       	cpi	r30, 0x35	; 53
     f30:	f8 07       	cpc	r31, r24
     f32:	c9 f7       	brne	.-14     	; 0xf26 <USB_Host_SendControlRequest+0x56>
     f34:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f38:	87 77       	andi	r24, 0x77	; 119
     f3a:	80 93 a6 00 	sts	0x00A6, r24
     f3e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f40:	a0 df       	rcall	.-192    	; 0xe82 <USB_Host_WaitForIOS>
     f42:	81 11       	cpse	r24, r1
     f44:	a9 c0       	rjmp	.+338    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     f46:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	80 93 a9 00 	sts	0x00A9, r24
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	29 db       	rcall	.-2478   	; 0x5a6 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f54:	81 11       	cpse	r24, r1
     f56:	a0 c0       	rjmp	.+320    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     f58:	80 91 2d 01 	lds	r24, 0x012D
     f5c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f5e:	4e c0       	rjmp	.+156    	; 0xffc <USB_Host_SendControlRequest+0x12c>
     f60:	80 91 aa 00 	lds	r24, 0x00AA
     f64:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f66:	80 61       	ori	r24, 0x10	; 16
     f68:	80 93 aa 00 	sts	0x00AA, r24
     f6c:	01 15       	cp	r16, r1
     f6e:	11 05       	cpc	r17, r1
     f70:	09 f0       	breq	.+2      	; 0xf74 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f72:	3a c0       	rjmp	.+116    	; 0xfe8 <USB_Host_SendControlRequest+0x118>
     f74:	80 91 aa 00 	lds	r24, 0x00AA
     f78:	8f 7c       	andi	r24, 0xCF	; 207
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	80 93 aa 00 	sts	0x00AA, r24
     f80:	80 91 a9 00 	lds	r24, 0x00A9
     f84:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f86:	80 93 a9 00 	sts	0x00A9, r24
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	7a df       	rcall	.-268    	; 0xe82 <USB_Host_WaitForIOS>
     f8e:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f90:	83 c0       	rjmp	.+262    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     f92:	80 91 a6 00 	lds	r24, 0x00A6
     f96:	8b 77       	andi	r24, 0x7B	; 123
     f98:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	71 df       	rcall	.-286    	; 0xe82 <USB_Host_WaitForIOS>
     fa0:	7b c0       	rjmp	.+246    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     fa2:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa6:	8f 7b       	andi	r24, 0xBF	; 191
     fa8:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	69 df       	rcall	.-302    	; 0xe82 <USB_Host_WaitForIOS>
     fb0:	81 11       	cpse	r24, r1
     fb2:	72 c0       	rjmp	.+228    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
     fb4:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fb8:	90 91 f7 00 	lds	r25, 0x00F7
     fbc:	89 2b       	or	r24, r25
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fc0:	c0 e0       	ldi	r28, 0x00	; 0
     fc2:	d0 e0       	ldi	r29, 0x00	; 0
     fc4:	f8 01       	movw	r30, r16
     fc6:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     fc8:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
     fcc:	90 91 f7 00 	lds	r25, 0x00F7
     fd0:	89 2b       	or	r24, r25
     fd2:	69 f4       	brne	.+26     	; 0xfee <USB_Host_SendControlRequest+0x11e>
     fd4:	80 91 a9 00 	lds	r24, 0x00A9
     fd8:	80 64       	ori	r24, 0x40	; 64
     fda:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
     fde:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe2:	8e 77       	andi	r24, 0x7E	; 126
     fe4:	80 93 a6 00 	sts	0x00A6, r24
     fe8:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fea:	d9 f6       	brne	.-74     	; 0xfa2 <USB_Host_SendControlRequest+0xd2>
     fec:	c3 cf       	rjmp	.-122    	; 0xf74 <USB_Host_SendControlRequest+0xa4>
     fee:	20 97       	sbiw	r28, 0x00	; 0
     ff0:	89 f3       	breq	.-30     	; 0xfd4 <USB_Host_SendControlRequest+0x104>
     ff2:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     ff6:	81 93       	st	Z+, r24
     ff8:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     ffa:	e5 cf       	rjmp	.-54     	; 0xfc6 <USB_Host_SendControlRequest+0xf6>
     ffc:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ffe:	11 05       	cpc	r17, r1
    1000:	b1 f1       	breq	.+108    	; 0x106e <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1002:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1006:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1008:	80 62       	ori	r24, 0x20	; 32
    100a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    100e:	80 91 a9 00 	lds	r24, 0x00A9
    1012:	8f 7b       	andi	r24, 0xBF	; 191
    1014:	80 93 a9 00 	sts	0x00A9, r24
    1018:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101a:	20 97       	sbiw	r28, 0x00	; 0
    101c:	01 f1       	breq	.+64     	; 0x105e <USB_Host_SendControlRequest+0x18e>
    101e:	31 df       	rcall	.-414    	; 0xe82 <USB_Host_WaitForIOS>
    1020:	81 11       	cpse	r24, r1
    1022:	3a c0       	rjmp	.+116    	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1024:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1026:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102a:	30 91 f7 00 	lds	r19, 0x00F7
    102e:	80 91 17 01 	lds	r24, 0x0117
    1032:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1034:	28 17       	cp	r18, r24
    1036:	39 07       	cpc	r19, r25
    1038:	58 f4       	brcc	.+22     	; 0x1050 <USB_Host_SendControlRequest+0x180>
    103a:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	8c 01       	movw	r16, r24
    1040:	20 81       	ld	r18, Z
    1042:	20 93 af 00 	sts	0x00AF, r18
    1046:	21 97       	sbiw	r28, 0x01	; 1
    1048:	20 97       	sbiw	r28, 0x00	; 0
    104a:	19 f0       	breq	.+6      	; 0x1052 <USB_Host_SendControlRequest+0x182>
    104c:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    104e:	eb cf       	rjmp	.-42     	; 0x1026 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1050:	8f 01       	movw	r16, r30
    1052:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1056:	8b 77       	andi	r24, 0x7B	; 123
    1058:	80 93 a6 00 	sts	0x00A6, r24
    105c:	dd cf       	rjmp	.-70     	; 0x1018 <USB_Host_SendControlRequest+0x148>
    105e:	11 df       	rcall	.-478    	; 0xe82 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1060:	81 11       	cpse	r24, r1
    1062:	1a c0       	rjmp	.+52     	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
    1064:	80 91 a9 00 	lds	r24, 0x00A9
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    106e:	80 91 aa 00 	lds	r24, 0x00AA
    1072:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1074:	80 61       	ori	r24, 0x10	; 16
    1076:	80 93 aa 00 	sts	0x00AA, r24
    107a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107e:	8f 7b       	andi	r24, 0xBF	; 191
    1080:	80 93 a9 00 	sts	0x00A9, r24
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	fd de       	rcall	.-518    	; 0xe82 <USB_Host_WaitForIOS>
    1088:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <USB_Host_SendControlRequest+0x1c8>
    108c:	80 91 a6 00 	lds	r24, 0x00A6
    1090:	8e 77       	andi	r24, 0x7E	; 126
    1092:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 91 a9 00 	lds	r25, 0x00A9
    109c:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    109e:	90 93 a9 00 	sts	0x00A9, r25
    10a2:	f1 10       	cpse	r15, r1
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <USB_Host_SendControlRequest+0x1e0>
    10a6:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10aa:	9e 7f       	andi	r25, 0xFE	; 254
    10ac:	90 93 9e 00 	sts	0x009E, r25
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10b6:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    10c2:	ff 90       	pop	r15
    10c4:	08 95       	ret

000010c6 <USB_Host_SetDeviceConfiguration>:
    10c6:	cf 93       	push	r28
				UPRST = 0;
    10c8:	c8 2f       	mov	r28, r24
    10ca:	10 92 2d 01 	sts	0x012D, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10ce:	89 e0       	ldi	r24, 0x09	; 9
    10d0:	80 93 2e 01 	sts	0x012E, r24
    10d4:	2c 2f       	mov	r18, r28
    10d6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10d8:	30 93 30 01 	sts	0x0130, r19
    10dc:	20 93 2f 01 	sts	0x012F, r18
    10e0:	10 92 32 01 	sts	0x0132, r1
    10e4:	10 92 31 01 	sts	0x0131, r1
    10e8:	10 92 34 01 	sts	0x0134, r1
    10ec:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10f0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	eb de       	rcall	.-554    	; 0xed0 <USB_Host_SendControlRequest>
    10fa:	81 11       	cpse	r24, r1
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <USB_Host_SetDeviceConfiguration+0x4a>
    10fe:	c0 93 2b 01 	sts	0x012B, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1102:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1104:	11 f0       	breq	.+4      	; 0x110a <USB_Host_SetDeviceConfiguration+0x44>
    1106:	9b e0       	ldi	r25, 0x0B	; 11
    1108:	01 c0       	rjmp	.+2      	; 0x110c <USB_Host_SetDeviceConfiguration+0x46>
    110a:	9a e0       	ldi	r25, 0x0A	; 10
    110c:	90 93 35 01 	sts	0x0135, r25
    1110:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1112:	08 95       	ret

00001114 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1114:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1116:	c0 91 a7 00 	lds	r28, 0x00A7
    111a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    111c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1120:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1124:	8d da       	rcall	.-2790   	; 0x640 <USB_Host_ProcessNextHostState>
    1126:	c0 93 a7 00 	sts	0x00A7, r28
    112a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    112c:	08 95       	ret

0000112e <DCOMP_HID_Host_NextHIDInterface>:

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    112e:	fc 01       	movw	r30, r24
    1130:	21 81       	ldd	r18, Z+1	; 0x01
    1132:	24 30       	cpi	r18, 0x04	; 4
    1134:	29 f4       	brne	.+10     	; 0x1140 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1136:	85 81       	ldd	r24, Z+5	; 0x05
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	11 f4       	brne	.+4      	; 0x1140 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1140:	82 e0       	ldi	r24, 0x02	; 2
}
    1142:	08 95       	ret

00001144 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1144:	fc 01       	movw	r30, r24
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	81 32       	cpi	r24, 0x21	; 33
    114a:	21 f0       	breq	.+8      	; 0x1154 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	21 f4       	brne	.+8      	; 0x1158 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1158:	82 e0       	ldi	r24, 0x02	; 2
}
    115a:	08 95       	ret

0000115c <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    115c:	fc 01       	movw	r30, r24
    115e:	21 81       	ldd	r18, Z+1	; 0x01
    1160:	25 30       	cpi	r18, 0x05	; 5
    1162:	31 f4       	brne	.+12     	; 0x1170 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	76 dc       	rcall	.-1812   	; 0xa54 <Pipe_IsEndpointBound>
    1168:	88 23       	and	r24, r24
    116a:	31 f0       	breq	.+12     	; 0x1178 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    116c:	82 e0       	ldi	r24, 0x02	; 2
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    116e:	08 95       	ret
    1170:	24 30       	cpi	r18, 0x04	; 4
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1172:	e1 f7       	brne	.-8      	; 0x116c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1174:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1176:	08 95       	ret
    1178:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    117a:	08 95       	ret

0000117c <HID_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    117c:	6f 92       	push	r6
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    117e:	7f 92       	push	r7
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	00 d0       	rcall	.+0      	; 0x119a <HID_Host_ConfigurePipes+0x1e>
    119a:	00 d0       	rcall	.+0      	; 0x119c <HID_Host_ConfigurePipes+0x20>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	8c 01       	movw	r16, r24
    11a2:	7a 83       	std	Y+2, r23	; 0x02
    11a4:	69 83       	std	Y+1, r22	; 0x01
    11a6:	5c 83       	std	Y+4, r21	; 0x04
    11a8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    11aa:	fc 01       	movw	r30, r24
    11ac:	3f 96       	adiw	r30, 0x0f	; 15
    11ae:	88 e0       	ldi	r24, 0x08	; 8
    11b0:	df 01       	movw	r26, r30
    11b2:	1d 92       	st	X+, r1
    11b4:	8a 95       	dec	r24
    11b6:	e9 f7       	brne	.-6      	; 0x11b2 <HID_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11b8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ba:	fc 81       	ldd	r31, Y+4	; 0x04
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <HID_Host_ConfigurePipes+0x48>
    11c2:	9d c0       	rjmp	.+314    	; 0x12fe <HID_Host_ConfigurePipes+0x182>
    11c4:	81 2c       	mov	r8, r1
    11c6:	91 2c       	mov	r9, r1
    11c8:	c1 2c       	mov	r12, r1
    11ca:	d1 2c       	mov	r13, r1
    11cc:	61 2c       	mov	r6, r1
    11ce:	71 2c       	mov	r7, r1
    11d0:	a1 2c       	mov	r10, r1
    11d2:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    11d4:	c1 14       	cp	r12, r1
    11d6:	d1 04       	cpc	r13, r1
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <HID_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    11da:	a1 14       	cp	r10, r1
    11dc:	b1 04       	cpc	r11, r1
    11de:	b9 f0       	breq	.+46     	; 0x120e <HID_Host_ConfigurePipes+0x92>
    11e0:	41 c0       	rjmp	.+130    	; 0x1264 <HID_Host_ConfigurePipes+0xe8>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11e2:	4e ea       	ldi	r20, 0xAE	; 174
    11e4:	58 e0       	ldi	r21, 0x08	; 8
    11e6:	be 01       	movw	r22, r28
    11e8:	6d 5f       	subi	r22, 0xFD	; 253
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	15 de       	rcall	.-982    	; 0xe1c <USB_GetNextDescriptorComp>
    11f2:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    11f4:	f2 cf       	rjmp	.-28     	; 0x11da <HID_Host_ConfigurePipes+0x5e>
    11f6:	27 c0       	rjmp	.+78     	; 0x1246 <HID_Host_ConfigurePipes+0xca>
    11f8:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11fa:	dc 80       	ldd	r13, Y+4	; 0x04
    11fc:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    11fe:	84 85       	ldd	r24, Z+12	; 0x0c
    1200:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1202:	89 f0       	breq	.+34     	; 0x1226 <HID_Host_ConfigurePipes+0xaa>
    1204:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1206:	17 96       	adiw	r26, 0x07	; 7
    1208:	9c 91       	ld	r25, X
    120a:	98 17       	cp	r25, r24
    120c:	61 f0       	breq	.+24     	; 0x1226 <HID_Host_ConfigurePipes+0xaa>
    120e:	47 e9       	ldi	r20, 0x97	; 151
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1210:	58 e0       	ldi	r21, 0x08	; 8
    1212:	be 01       	movw	r22, r28
    1214:	6d 5f       	subi	r22, 0xFD	; 253
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	ff dd       	rcall	.-1026   	; 0xe1c <USB_GetNextDescriptorComp>
    121e:	88 23       	and	r24, r24
    1220:	59 f3       	breq	.-42     	; 0x11f8 <HID_Host_ConfigurePipes+0x7c>
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	6d c0       	rjmp	.+218    	; 0x1300 <HID_Host_ConfigurePipes+0x184>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1226:	42 ea       	ldi	r20, 0xA2	; 162
    1228:	58 e0       	ldi	r21, 0x08	; 8

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    122a:	be 01       	movw	r22, r28
    122c:	6d 5f       	subi	r22, 0xFD	; 253
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	f3 dd       	rcall	.-1050   	; 0xe1c <USB_GetNextDescriptorComp>
    1236:	81 11       	cpse	r24, r1
    1238:	f4 cf       	rjmp	.-24     	; 0x1222 <HID_Host_ConfigurePipes+0xa6>
    123a:	8b 80       	ldd	r8, Y+3	; 0x03
    123c:	9c 80       	ldd	r9, Y+4	; 0x04
    123e:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1240:	f1 2c       	mov	r15, r1
    1242:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1244:	c7 cf       	rjmp	.-114    	; 0x11d4 <HID_Host_ConfigurePipes+0x58>
    1246:	eb 80       	ldd	r14, Y+3	; 0x03
    1248:	fc 80       	ldd	r15, Y+4	; 0x04
    124a:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <HID_Host_ConfigurePipes+0xda>
    1252:	57 01       	movw	r10, r14
    1254:	73 01       	movw	r14, r6
    1256:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    1258:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    125a:	99 f3       	breq	.-26     	; 0x1242 <HID_Host_ConfigurePipes+0xc6>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    125c:	e1 14       	cp	r14, r1
    125e:	f1 04       	cpc	r15, r1
    1260:	81 f3       	breq	.-32     	; 0x1242 <HID_Host_ConfigurePipes+0xc6>
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <HID_Host_ConfigurePipes+0xea>
    1264:	73 01       	movw	r14, r6
    1266:	d5 01       	movw	r26, r10
    1268:	14 96       	adiw	r26, 0x04	; 4
    126a:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    126c:	9c 91       	ld	r25, X
    126e:	15 97       	sbiw	r26, 0x05	; 5
    1270:	f8 01       	movw	r30, r16
    1272:	92 83       	std	Z+2, r25	; 0x02
    1274:	81 83       	std	Z+1, r24	; 0x01
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	8c 91       	ld	r24, X
    127a:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	b8 2e       	mov	r11, r24
    1280:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	c8 01       	movw	r24, r16
    1286:	b3 db       	rcall	.-2202   	; 0x9ee <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1288:	81 11       	cpse	r24, r1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <HID_Host_ConfigurePipes+0x114>
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	38 c0       	rjmp	.+112    	; 0x1300 <HID_Host_ConfigurePipes+0x184>
    1290:	e1 14       	cp	r14, r1
    1292:	f1 04       	cpc	r15, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    1294:	f9 f4       	brne	.+62     	; 0x12d4 <HID_Host_ConfigurePipes+0x158>
    1296:	d6 01       	movw	r26, r12

	if (DataOUTEndpoint)
    1298:	12 96       	adiw	r26, 0x02	; 2
    129a:	8c 91       	ld	r24, X
    129c:	f8 01       	movw	r30, r16

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    129e:	80 8b       	std	Z+16, r24	; 0x10
    12a0:	d4 01       	movw	r26, r8
    12a2:	17 96       	adiw	r26, 0x07	; 7
    12a4:	8d 91       	ld	r24, X+
    12a6:	9c 91       	ld	r25, X
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    12a8:	18 97       	sbiw	r26, 0x08	; 8
    12aa:	95 8b       	std	Z+21, r25	; 0x15
    12ac:	84 8b       	std	Z+20, r24	; 0x14
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	f6 01       	movw	r30, r12
    12b2:	96 81       	ldd	r25, Z+6	; 0x06
    12b4:	91 11       	cpse	r25, r1
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <HID_Host_ConfigurePipes+0x13e>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	d8 01       	movw	r26, r16
    12bc:	51 96       	adiw	r26, 0x11	; 17
    12be:	8c 93       	st	X, r24
    12c0:	51 97       	sbiw	r26, 0x11	; 17
    12c2:	88 e0       	ldi	r24, 0x08	; 8
    12c4:	56 96       	adiw	r26, 0x16	; 22
    12c6:	8c 93       	st	X, r24
    12c8:	56 97       	sbiw	r26, 0x16	; 22
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	1f 96       	adiw	r26, 0x0f	; 15
    12ce:	8c 93       	st	X, r24
    12d0:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.IsActive             = true;
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <HID_Host_ConfigurePipes+0x184>
    12d4:	f7 01       	movw	r30, r14
    12d6:	84 81       	ldd	r24, Z+4	; 0x04

	return HID_ENUMERROR_NoError;
    12d8:	95 81       	ldd	r25, Z+5	; 0x05
    12da:	d8 01       	movw	r26, r16
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12dc:	18 96       	adiw	r26, 0x08	; 8
    12de:	9c 93       	st	X, r25
    12e0:	8e 93       	st	-X, r24
    12e2:	17 97       	sbiw	r26, 0x07	; 7
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	19 96       	adiw	r26, 0x09	; 9
    12e8:	8c 93       	st	X, r24
    12ea:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    12ec:	1a 96       	adiw	r26, 0x0a	; 10
    12ee:	bc 92       	st	X, r11
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    12f4:	06 96       	adiw	r24, 0x06	; 6
    12f6:	7b db       	rcall	.-2314   	; 0x9ee <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    12f8:	88 23       	and	r24, r24
    12fa:	41 f2       	breq	.-112    	; 0x128c <HID_Host_ConfigurePipes+0x110>
    12fc:	cc cf       	rjmp	.-104    	; 0x1296 <HID_Host_ConfigurePipes+0x11a>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1308:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	7f 90       	pop	r7
    1322:	6f 90       	pop	r6
    1324:	08 95       	ret

00001326 <HID_Host_ReceiveReport>:
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	fc 01       	movw	r30, r24
    132c:	eb 01       	movw	r28, r22
    132e:	80 91 35 01 	lds	r24, 0x0135
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1332:	8b 30       	cpi	r24, 0x0B	; 11
    1334:	c1 f5       	brne	.+112    	; 0x13a6 <HID_Host_ReceiveReport+0x80>
    1336:	87 85       	ldd	r24, Z+15	; 0x0f
    1338:	88 23       	and	r24, r24
    133a:	a9 f1       	breq	.+106    	; 0x13a6 <HID_Host_ReceiveReport+0x80>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    133c:	80 81       	ld	r24, Z
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1344:	80 91 a9 00 	lds	r24, 0x00A9
    1348:	8f 7b       	andi	r24, 0xBF	; 191
    134a:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    134e:	83 89       	ldd	r24, Z+19	; 0x13
    1350:	81 11       	cpse	r24, r1
    1352:	12 c0       	rjmp	.+36     	; 0x1378 <HID_Host_ReceiveReport+0x52>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1354:	a5 85       	ldd	r26, Z+13	; 0x0d
    1356:	b6 85       	ldd	r27, Z+14	; 0x0e
    1358:	a8 52       	subi	r26, 0x28	; 40
    135a:	bc 4f       	sbci	r27, 0xFC	; 252
    135c:	8c 91       	ld	r24, X
    135e:	88 23       	and	r24, r24
    1360:	29 f0       	breq	.+10     	; 0x136c <HID_Host_ReceiveReport+0x46>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1362:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1366:	68 83       	st	Y, r22
    1368:	21 96       	adiw	r28, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <HID_Host_ReceiveReport+0x48>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    136c:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	85 85       	ldd	r24, Z+13	; 0x0d
    1372:	96 85       	ldd	r25, Z+14	; 0x0e
    1374:	97 d8       	rcall	.-3794   	; 0x4a4 <USB_GetHIDReportSize>
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <HID_Host_ReceiveReport+0x5a>
    1378:	80 91 f6 00 	lds	r24, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    137c:	90 91 f7 00 	lds	r25, 0x00F7
    1380:	40 e0       	ldi	r20, 0x00	; 0
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	bc 01       	movw	r22, r24
    1386:	ce 01       	movw	r24, r28
    1388:	7d da       	rcall	.-2822   	; 0x884 <Pipe_Read_Stream_LE>
    138a:	81 11       	cpse	r24, r1
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <HID_Host_ReceiveReport+0x82>
    138e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1392:	8e 77       	andi	r24, 0x7E	; 126
    1394:	80 93 a6 00 	sts	0x00A6, r24
    1398:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    139c:	80 64       	ori	r24, 0x40	; 64
    139e:	80 93 a9 00 	sts	0x00A9, r24
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <HID_Host_ReceiveReport+0x82>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    13aa:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    13ac:	08 95       	ret

000013ae <HID_Host_IsReportReceived>:
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 91 35 01 	lds	r24, 0x0135
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    13b4:	8b 30       	cpi	r24, 0x0B	; 11
    13b6:	a9 f4       	brne	.+42     	; 0x13e2 <HID_Host_IsReportReceived+0x34>
    13b8:	87 85       	ldd	r24, Z+15	; 0x0f
    13ba:	88 23       	and	r24, r24
    13bc:	99 f0       	breq	.+38     	; 0x13e4 <HID_Host_IsReportReceived+0x36>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13be:	80 81       	ld	r24, Z
    13c0:	8f 70       	andi	r24, 0x0F	; 15
    13c2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13c6:	80 91 a9 00 	lds	r24, 0x00A9
    13ca:	8f 7b       	andi	r24, 0xBF	; 191
    13cc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13d0:	80 91 a6 00 	lds	r24, 0x00A6
    13d4:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d6:	90 91 a9 00 	lds	r25, 0x00A9
    13da:	90 64       	ori	r25, 0x40	; 64
    13dc:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    13e0:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    13e4:	08 95       	ret

000013e6 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    13ec:	89 89       	ldd	r24, Y+17	; 0x11
    13ee:	88 23       	and	r24, r24
    13f0:	09 f1       	breq	.+66     	; 0x1434 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    13f2:	88 89       	ldd	r24, Y+16	; 0x10
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	21 e2       	ldi	r18, 0x21	; 33
    13f8:	20 93 2d 01 	sts	0x012D, r18
    13fc:	2b e0       	ldi	r18, 0x0B	; 11
    13fe:	20 93 2e 01 	sts	0x012E, r18
    1402:	10 92 30 01 	sts	0x0130, r1
    1406:	10 92 2f 01 	sts	0x012F, r1
    140a:	90 93 32 01 	sts	0x0132, r25
    140e:	80 93 31 01 	sts	0x0131, r24
    1412:	10 92 34 01 	sts	0x0134, r1
    1416:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    141a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	56 dd       	rcall	.-1364   	; 0xed0 <USB_Host_SendControlRequest>
    1424:	81 11       	cpse	r24, r1
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <HID_Host_SetBootProtocol+0x50>
    1428:	88 e0       	ldi	r24, 0x08	; 8
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    142a:	8e 8b       	std	Y+22, r24	; 0x16
    142c:	81 e0       	ldi	r24, 0x01	; 1
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    142e:	8b 8b       	std	Y+19, r24	; 0x13
    1430:	80 e0       	ldi	r24, 0x00	; 0

	return HOST_SENDCONTROL_Successful;
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <HID_Host_SetBootProtocol+0x50>
    1434:	80 e8       	ldi	r24, 0x80	; 128
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    1436:	df 91       	pop	r29

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    143c:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1440:	95 ff       	sbrs	r25, 5
    1442:	fc cf       	rjmp	.-8      	; 0x143c <Serial_putchar>
				UDR1 = DataByte;
    1444:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 95       	ret

0000144e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    144e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1452:	87 ff       	sbrs	r24, 7
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <Serial_getchar+0x18>
    1456:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    145a:	87 ff       	sbrs	r24, 7
    145c:	07 c0       	rjmp	.+14     	; 0x146c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    145e:	80 91 ce 00 	lds	r24, 0x00CE
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 95       	ret
	  return _FDEV_EOF;
    1466:	8e ef       	ldi	r24, 0xFE	; 254
    1468:	9f ef       	ldi	r25, 0xFF	; 255
    146a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1470:	08 95       	ret

00001472 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1472:	fc 01       	movw	r30, r24
	if (!(Stream))
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	59 f4       	brne	.+22     	; 0x148e <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1478:	86 e3       	ldi	r24, 0x36	; 54
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	90 93 45 01 	sts	0x0145, r25
    1480:	80 93 44 01 	sts	0x0144, r24
		stdout = Stream;
    1484:	90 93 47 01 	sts	0x0147, r25
    1488:	80 93 46 01 	sts	0x0146, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    148c:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    148e:	8e e0       	ldi	r24, 0x0E	; 14
    1490:	df 01       	movw	r26, r30
    1492:	1d 92       	st	X+, r1
    1494:	8a 95       	dec	r24
    1496:	e9 f7       	brne	.-6      	; 0x1492 <Serial_CreateStream+0x20>
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	83 83       	std	Z+3, r24	; 0x03
    149c:	8e e1       	ldi	r24, 0x1E	; 30
    149e:	9a e0       	ldi	r25, 0x0A	; 10
    14a0:	91 87       	std	Z+9, r25	; 0x09
    14a2:	80 87       	std	Z+8, r24	; 0x08
    14a4:	87 e2       	ldi	r24, 0x27	; 39
    14a6:	9a e0       	ldi	r25, 0x0A	; 10
    14a8:	93 87       	std	Z+11, r25	; 0x0b
    14aa:	82 87       	std	Z+10, r24	; 0x0a
    14ac:	08 95       	ret

000014ae <fputc>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	18 2f       	mov	r17, r24
    14b8:	09 2f       	mov	r16, r25
    14ba:	eb 01       	movw	r28, r22
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	81 fd       	sbrc	r24, 1
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <fputc+0x1a>
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	9f ef       	ldi	r25, 0xFF	; 255
    14c6:	20 c0       	rjmp	.+64     	; 0x1508 <fputc+0x5a>
    14c8:	82 ff       	sbrs	r24, 2
    14ca:	10 c0       	rjmp	.+32     	; 0x14ec <fputc+0x3e>
    14cc:	4e 81       	ldd	r20, Y+6	; 0x06
    14ce:	5f 81       	ldd	r21, Y+7	; 0x07
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	42 17       	cp	r20, r18
    14d6:	53 07       	cpc	r21, r19
    14d8:	7c f4       	brge	.+30     	; 0x14f8 <fputc+0x4a>
    14da:	e8 81       	ld	r30, Y
    14dc:	f9 81       	ldd	r31, Y+1	; 0x01
    14de:	9f 01       	movw	r18, r30
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	39 83       	std	Y+1, r19	; 0x01
    14e6:	28 83       	st	Y, r18
    14e8:	10 83       	st	Z, r17
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <fputc+0x4a>
    14ec:	e8 85       	ldd	r30, Y+8	; 0x08
    14ee:	f9 85       	ldd	r31, Y+9	; 0x09
    14f0:	81 2f       	mov	r24, r17
    14f2:	09 95       	icall
    14f4:	89 2b       	or	r24, r25
    14f6:	29 f7       	brne	.-54     	; 0x14c2 <fputc+0x14>
    14f8:	2e 81       	ldd	r18, Y+6	; 0x06
    14fa:	3f 81       	ldd	r19, Y+7	; 0x07
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	3f 83       	std	Y+7, r19	; 0x07
    1502:	2e 83       	std	Y+6, r18	; 0x06
    1504:	81 2f       	mov	r24, r17
    1506:	90 2f       	mov	r25, r16
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <printf_P>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	fe 01       	movw	r30, r28
    1520:	37 96       	adiw	r30, 0x07	; 7
    1522:	61 91       	ld	r22, Z+
    1524:	71 91       	ld	r23, Z+
    1526:	06 e4       	ldi	r16, 0x46	; 70
    1528:	11 e0       	ldi	r17, 0x01	; 1
    152a:	d8 01       	movw	r26, r16
    152c:	8d 91       	ld	r24, X+
    152e:	9c 91       	ld	r25, X
    1530:	dc 01       	movw	r26, r24
    1532:	13 96       	adiw	r26, 0x03	; 3
    1534:	2c 91       	ld	r18, X
    1536:	13 97       	sbiw	r26, 0x03	; 3
    1538:	28 60       	ori	r18, 0x08	; 8
    153a:	13 96       	adiw	r26, 0x03	; 3
    153c:	2c 93       	st	X, r18
    153e:	af 01       	movw	r20, r30
    1540:	3a d0       	rcall	.+116    	; 0x15b6 <vfprintf>
    1542:	d8 01       	movw	r26, r16
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	23 81       	ldd	r18, Z+3	; 0x03
    154a:	27 7f       	andi	r18, 0xF7	; 247
    154c:	23 83       	std	Z+3, r18	; 0x03
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <puts_P>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	e0 91 46 01 	lds	r30, 0x0146
    1566:	f0 91 47 01 	lds	r31, 0x0147
    156a:	83 81       	ldd	r24, Z+3	; 0x03
    156c:	81 ff       	sbrs	r24, 1
    156e:	1c c0       	rjmp	.+56     	; 0x15a8 <puts_P+0x50>
    1570:	00 e0       	ldi	r16, 0x00	; 0
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	fe 01       	movw	r30, r28
    1576:	84 91       	lpm	r24, Z
    1578:	60 91 46 01 	lds	r22, 0x0146
    157c:	70 91 47 01 	lds	r23, 0x0147
    1580:	db 01       	movw	r26, r22
    1582:	18 96       	adiw	r26, 0x08	; 8
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	19 97       	sbiw	r26, 0x09	; 9
    158a:	88 23       	and	r24, r24
    158c:	39 f0       	breq	.+14     	; 0x159c <puts_P+0x44>
    158e:	09 95       	icall
    1590:	89 2b       	or	r24, r25
    1592:	11 f0       	breq	.+4      	; 0x1598 <puts_P+0x40>
    1594:	0f ef       	ldi	r16, 0xFF	; 255
    1596:	1f ef       	ldi	r17, 0xFF	; 255
    1598:	21 96       	adiw	r28, 0x01	; 1
    159a:	ec cf       	rjmp	.-40     	; 0x1574 <puts_P+0x1c>
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	09 95       	icall
    15a0:	89 2b       	or	r24, r25
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <puts_P+0x50>
    15a4:	c8 01       	movw	r24, r16
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <puts_P+0x54>
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	9f ef       	ldi	r25, 0xFF	; 255
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <vfprintf>:
    15b6:	2f 92       	push	r2
    15b8:	3f 92       	push	r3
    15ba:	4f 92       	push	r4
    15bc:	5f 92       	push	r5
    15be:	6f 92       	push	r6
    15c0:	7f 92       	push	r7
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	2c 97       	sbiw	r28, 0x0c	; 12
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	7c 01       	movw	r14, r24
    15ec:	6b 01       	movw	r12, r22
    15ee:	8a 01       	movw	r16, r20
    15f0:	fc 01       	movw	r30, r24
    15f2:	17 82       	std	Z+7, r1	; 0x07
    15f4:	16 82       	std	Z+6, r1	; 0x06
    15f6:	83 81       	ldd	r24, Z+3	; 0x03
    15f8:	81 ff       	sbrs	r24, 1
    15fa:	b0 c1       	rjmp	.+864    	; 0x195c <vfprintf+0x3a6>
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	4c 01       	movw	r8, r24
    1602:	f7 01       	movw	r30, r14
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	f6 01       	movw	r30, r12
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	6f 01       	movw	r12, r30
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <vfprintf+0x62>
    1616:	9e c1       	rjmp	.+828    	; 0x1954 <vfprintf+0x39e>
    1618:	85 32       	cpi	r24, 0x25	; 37
    161a:	39 f4       	brne	.+14     	; 0x162a <vfprintf+0x74>
    161c:	93 fd       	sbrc	r25, 3
    161e:	85 91       	lpm	r24, Z+
    1620:	93 ff       	sbrs	r25, 3
    1622:	81 91       	ld	r24, Z+
    1624:	6f 01       	movw	r12, r30
    1626:	85 32       	cpi	r24, 0x25	; 37
    1628:	21 f4       	brne	.+8      	; 0x1632 <vfprintf+0x7c>
    162a:	b7 01       	movw	r22, r14
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	3f df       	rcall	.-386    	; 0x14ae <fputc>
    1630:	e8 cf       	rjmp	.-48     	; 0x1602 <vfprintf+0x4c>
    1632:	51 2c       	mov	r5, r1
    1634:	31 2c       	mov	r3, r1
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	20 32       	cpi	r18, 0x20	; 32
    163a:	a0 f4       	brcc	.+40     	; 0x1664 <vfprintf+0xae>
    163c:	8b 32       	cpi	r24, 0x2B	; 43
    163e:	69 f0       	breq	.+26     	; 0x165a <vfprintf+0xa4>
    1640:	30 f4       	brcc	.+12     	; 0x164e <vfprintf+0x98>
    1642:	80 32       	cpi	r24, 0x20	; 32
    1644:	59 f0       	breq	.+22     	; 0x165c <vfprintf+0xa6>
    1646:	83 32       	cpi	r24, 0x23	; 35
    1648:	69 f4       	brne	.+26     	; 0x1664 <vfprintf+0xae>
    164a:	20 61       	ori	r18, 0x10	; 16
    164c:	2c c0       	rjmp	.+88     	; 0x16a6 <vfprintf+0xf0>
    164e:	8d 32       	cpi	r24, 0x2D	; 45
    1650:	39 f0       	breq	.+14     	; 0x1660 <vfprintf+0xaa>
    1652:	80 33       	cpi	r24, 0x30	; 48
    1654:	39 f4       	brne	.+14     	; 0x1664 <vfprintf+0xae>
    1656:	21 60       	ori	r18, 0x01	; 1
    1658:	26 c0       	rjmp	.+76     	; 0x16a6 <vfprintf+0xf0>
    165a:	22 60       	ori	r18, 0x02	; 2
    165c:	24 60       	ori	r18, 0x04	; 4
    165e:	23 c0       	rjmp	.+70     	; 0x16a6 <vfprintf+0xf0>
    1660:	28 60       	ori	r18, 0x08	; 8
    1662:	21 c0       	rjmp	.+66     	; 0x16a6 <vfprintf+0xf0>
    1664:	27 fd       	sbrc	r18, 7
    1666:	27 c0       	rjmp	.+78     	; 0x16b6 <vfprintf+0x100>
    1668:	30 ed       	ldi	r19, 0xD0	; 208
    166a:	38 0f       	add	r19, r24
    166c:	3a 30       	cpi	r19, 0x0A	; 10
    166e:	78 f4       	brcc	.+30     	; 0x168e <vfprintf+0xd8>
    1670:	26 ff       	sbrs	r18, 6
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <vfprintf+0xca>
    1674:	fa e0       	ldi	r31, 0x0A	; 10
    1676:	5f 9e       	mul	r5, r31
    1678:	30 0d       	add	r19, r0
    167a:	11 24       	eor	r1, r1
    167c:	53 2e       	mov	r5, r19
    167e:	13 c0       	rjmp	.+38     	; 0x16a6 <vfprintf+0xf0>
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	38 9e       	mul	r3, r24
    1684:	30 0d       	add	r19, r0
    1686:	11 24       	eor	r1, r1
    1688:	33 2e       	mov	r3, r19
    168a:	20 62       	ori	r18, 0x20	; 32
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <vfprintf+0xf0>
    168e:	8e 32       	cpi	r24, 0x2E	; 46
    1690:	21 f4       	brne	.+8      	; 0x169a <vfprintf+0xe4>
    1692:	26 fd       	sbrc	r18, 6
    1694:	5f c1       	rjmp	.+702    	; 0x1954 <vfprintf+0x39e>
    1696:	20 64       	ori	r18, 0x40	; 64
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0xf0>
    169a:	8c 36       	cpi	r24, 0x6C	; 108
    169c:	11 f4       	brne	.+4      	; 0x16a2 <vfprintf+0xec>
    169e:	20 68       	ori	r18, 0x80	; 128
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0xf0>
    16a2:	88 36       	cpi	r24, 0x68	; 104
    16a4:	41 f4       	brne	.+16     	; 0x16b6 <vfprintf+0x100>
    16a6:	f6 01       	movw	r30, r12
    16a8:	93 fd       	sbrc	r25, 3
    16aa:	85 91       	lpm	r24, Z+
    16ac:	93 ff       	sbrs	r25, 3
    16ae:	81 91       	ld	r24, Z+
    16b0:	6f 01       	movw	r12, r30
    16b2:	81 11       	cpse	r24, r1
    16b4:	c1 cf       	rjmp	.-126    	; 0x1638 <vfprintf+0x82>
    16b6:	98 2f       	mov	r25, r24
    16b8:	9f 7d       	andi	r25, 0xDF	; 223
    16ba:	95 54       	subi	r25, 0x45	; 69
    16bc:	93 30       	cpi	r25, 0x03	; 3
    16be:	28 f4       	brcc	.+10     	; 0x16ca <vfprintf+0x114>
    16c0:	0c 5f       	subi	r16, 0xFC	; 252
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	ff e3       	ldi	r31, 0x3F	; 63
    16c6:	f9 83       	std	Y+1, r31	; 0x01
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <vfprintf+0x12e>
    16ca:	83 36       	cpi	r24, 0x63	; 99
    16cc:	31 f0       	breq	.+12     	; 0x16da <vfprintf+0x124>
    16ce:	83 37       	cpi	r24, 0x73	; 115
    16d0:	71 f0       	breq	.+28     	; 0x16ee <vfprintf+0x138>
    16d2:	83 35       	cpi	r24, 0x53	; 83
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <vfprintf+0x122>
    16d6:	57 c0       	rjmp	.+174    	; 0x1786 <vfprintf+0x1d0>
    16d8:	21 c0       	rjmp	.+66     	; 0x171c <vfprintf+0x166>
    16da:	f8 01       	movw	r30, r16
    16dc:	80 81       	ld	r24, Z
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	44 24       	eor	r4, r4
    16e6:	43 94       	inc	r4
    16e8:	51 2c       	mov	r5, r1
    16ea:	54 01       	movw	r10, r8
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <vfprintf+0x160>
    16ee:	38 01       	movw	r6, r16
    16f0:	f2 e0       	ldi	r31, 0x02	; 2
    16f2:	6f 0e       	add	r6, r31
    16f4:	71 1c       	adc	r7, r1
    16f6:	f8 01       	movw	r30, r16
    16f8:	a0 80       	ld	r10, Z
    16fa:	b1 80       	ldd	r11, Z+1	; 0x01
    16fc:	26 ff       	sbrs	r18, 6
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <vfprintf+0x150>
    1700:	65 2d       	mov	r22, r5
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x154>
    1706:	6f ef       	ldi	r22, 0xFF	; 255
    1708:	7f ef       	ldi	r23, 0xFF	; 255
    170a:	c5 01       	movw	r24, r10
    170c:	2c 87       	std	Y+12, r18	; 0x0c
    170e:	4c d1       	rcall	.+664    	; 0x19a8 <strnlen>
    1710:	2c 01       	movw	r4, r24
    1712:	83 01       	movw	r16, r6
    1714:	2c 85       	ldd	r18, Y+12	; 0x0c
    1716:	2f 77       	andi	r18, 0x7F	; 127
    1718:	22 2e       	mov	r2, r18
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <vfprintf+0x192>
    171c:	38 01       	movw	r6, r16
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	6f 0e       	add	r6, r31
    1722:	71 1c       	adc	r7, r1
    1724:	f8 01       	movw	r30, r16
    1726:	a0 80       	ld	r10, Z
    1728:	b1 80       	ldd	r11, Z+1	; 0x01
    172a:	26 ff       	sbrs	r18, 6
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <vfprintf+0x17e>
    172e:	65 2d       	mov	r22, r5
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x182>
    1734:	6f ef       	ldi	r22, 0xFF	; 255
    1736:	7f ef       	ldi	r23, 0xFF	; 255
    1738:	c5 01       	movw	r24, r10
    173a:	2c 87       	std	Y+12, r18	; 0x0c
    173c:	2a d1       	rcall	.+596    	; 0x1992 <strnlen_P>
    173e:	2c 01       	movw	r4, r24
    1740:	2c 85       	ldd	r18, Y+12	; 0x0c
    1742:	20 68       	ori	r18, 0x80	; 128
    1744:	22 2e       	mov	r2, r18
    1746:	83 01       	movw	r16, r6
    1748:	23 fc       	sbrc	r2, 3
    174a:	19 c0       	rjmp	.+50     	; 0x177e <vfprintf+0x1c8>
    174c:	83 2d       	mov	r24, r3
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	48 16       	cp	r4, r24
    1752:	59 06       	cpc	r5, r25
    1754:	a0 f4       	brcc	.+40     	; 0x177e <vfprintf+0x1c8>
    1756:	b7 01       	movw	r22, r14
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a8 de       	rcall	.-688    	; 0x14ae <fputc>
    175e:	3a 94       	dec	r3
    1760:	f5 cf       	rjmp	.-22     	; 0x174c <vfprintf+0x196>
    1762:	f5 01       	movw	r30, r10
    1764:	27 fc       	sbrc	r2, 7
    1766:	85 91       	lpm	r24, Z+
    1768:	27 fe       	sbrs	r2, 7
    176a:	81 91       	ld	r24, Z+
    176c:	5f 01       	movw	r10, r30
    176e:	b7 01       	movw	r22, r14
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9d de       	rcall	.-710    	; 0x14ae <fputc>
    1774:	31 10       	cpse	r3, r1
    1776:	3a 94       	dec	r3
    1778:	f1 e0       	ldi	r31, 0x01	; 1
    177a:	4f 1a       	sub	r4, r31
    177c:	51 08       	sbc	r5, r1
    177e:	41 14       	cp	r4, r1
    1780:	51 04       	cpc	r5, r1
    1782:	79 f7       	brne	.-34     	; 0x1762 <vfprintf+0x1ac>
    1784:	de c0       	rjmp	.+444    	; 0x1942 <vfprintf+0x38c>
    1786:	84 36       	cpi	r24, 0x64	; 100
    1788:	11 f0       	breq	.+4      	; 0x178e <vfprintf+0x1d8>
    178a:	89 36       	cpi	r24, 0x69	; 105
    178c:	31 f5       	brne	.+76     	; 0x17da <vfprintf+0x224>
    178e:	f8 01       	movw	r30, r16
    1790:	27 ff       	sbrs	r18, 7
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <vfprintf+0x1ec>
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	0c 5f       	subi	r16, 0xFC	; 252
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <vfprintf+0x1fc>
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	88 27       	eor	r24, r24
    17a8:	77 fd       	sbrc	r23, 7
    17aa:	80 95       	com	r24
    17ac:	98 2f       	mov	r25, r24
    17ae:	0e 5f       	subi	r16, 0xFE	; 254
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	2f 76       	andi	r18, 0x6F	; 111
    17b4:	b2 2e       	mov	r11, r18
    17b6:	97 ff       	sbrs	r25, 7
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <vfprintf+0x216>
    17ba:	90 95       	com	r25
    17bc:	80 95       	com	r24
    17be:	70 95       	com	r23
    17c0:	61 95       	neg	r22
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	20 68       	ori	r18, 0x80	; 128
    17ca:	b2 2e       	mov	r11, r18
    17cc:	2a e0       	ldi	r18, 0x0A	; 10
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	a4 01       	movw	r20, r8
    17d2:	f5 d0       	rcall	.+490    	; 0x19be <__ultoa_invert>
    17d4:	a8 2e       	mov	r10, r24
    17d6:	a8 18       	sub	r10, r8
    17d8:	43 c0       	rjmp	.+134    	; 0x1860 <vfprintf+0x2aa>
    17da:	85 37       	cpi	r24, 0x75	; 117
    17dc:	29 f4       	brne	.+10     	; 0x17e8 <vfprintf+0x232>
    17de:	2f 7e       	andi	r18, 0xEF	; 239
    17e0:	b2 2e       	mov	r11, r18
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	25 c0       	rjmp	.+74     	; 0x1832 <vfprintf+0x27c>
    17e8:	f2 2f       	mov	r31, r18
    17ea:	f9 7f       	andi	r31, 0xF9	; 249
    17ec:	bf 2e       	mov	r11, r31
    17ee:	8f 36       	cpi	r24, 0x6F	; 111
    17f0:	c1 f0       	breq	.+48     	; 0x1822 <vfprintf+0x26c>
    17f2:	18 f4       	brcc	.+6      	; 0x17fa <vfprintf+0x244>
    17f4:	88 35       	cpi	r24, 0x58	; 88
    17f6:	79 f0       	breq	.+30     	; 0x1816 <vfprintf+0x260>
    17f8:	ad c0       	rjmp	.+346    	; 0x1954 <vfprintf+0x39e>
    17fa:	80 37       	cpi	r24, 0x70	; 112
    17fc:	19 f0       	breq	.+6      	; 0x1804 <vfprintf+0x24e>
    17fe:	88 37       	cpi	r24, 0x78	; 120
    1800:	21 f0       	breq	.+8      	; 0x180a <vfprintf+0x254>
    1802:	a8 c0       	rjmp	.+336    	; 0x1954 <vfprintf+0x39e>
    1804:	2f 2f       	mov	r18, r31
    1806:	20 61       	ori	r18, 0x10	; 16
    1808:	b2 2e       	mov	r11, r18
    180a:	b4 fe       	sbrs	r11, 4
    180c:	0d c0       	rjmp	.+26     	; 0x1828 <vfprintf+0x272>
    180e:	8b 2d       	mov	r24, r11
    1810:	84 60       	ori	r24, 0x04	; 4
    1812:	b8 2e       	mov	r11, r24
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <vfprintf+0x272>
    1816:	24 ff       	sbrs	r18, 4
    1818:	0a c0       	rjmp	.+20     	; 0x182e <vfprintf+0x278>
    181a:	9f 2f       	mov	r25, r31
    181c:	96 60       	ori	r25, 0x06	; 6
    181e:	b9 2e       	mov	r11, r25
    1820:	06 c0       	rjmp	.+12     	; 0x182e <vfprintf+0x278>
    1822:	28 e0       	ldi	r18, 0x08	; 8
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <vfprintf+0x27c>
    1828:	20 e1       	ldi	r18, 0x10	; 16
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <vfprintf+0x27c>
    182e:	20 e1       	ldi	r18, 0x10	; 16
    1830:	32 e0       	ldi	r19, 0x02	; 2
    1832:	f8 01       	movw	r30, r16
    1834:	b7 fe       	sbrs	r11, 7
    1836:	07 c0       	rjmp	.+14     	; 0x1846 <vfprintf+0x290>
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	0c 5f       	subi	r16, 0xFC	; 252
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x29c>
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 5f       	subi	r16, 0xFE	; 254
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	a4 01       	movw	r20, r8
    1854:	b4 d0       	rcall	.+360    	; 0x19be <__ultoa_invert>
    1856:	a8 2e       	mov	r10, r24
    1858:	a8 18       	sub	r10, r8
    185a:	fb 2d       	mov	r31, r11
    185c:	ff 77       	andi	r31, 0x7F	; 127
    185e:	bf 2e       	mov	r11, r31
    1860:	b6 fe       	sbrs	r11, 6
    1862:	0b c0       	rjmp	.+22     	; 0x187a <vfprintf+0x2c4>
    1864:	2b 2d       	mov	r18, r11
    1866:	2e 7f       	andi	r18, 0xFE	; 254
    1868:	a5 14       	cp	r10, r5
    186a:	50 f4       	brcc	.+20     	; 0x1880 <vfprintf+0x2ca>
    186c:	b4 fe       	sbrs	r11, 4
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <vfprintf+0x2ce>
    1870:	b2 fc       	sbrc	r11, 2
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <vfprintf+0x2ce>
    1874:	2b 2d       	mov	r18, r11
    1876:	2e 7e       	andi	r18, 0xEE	; 238
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <vfprintf+0x2ce>
    187a:	7a 2c       	mov	r7, r10
    187c:	2b 2d       	mov	r18, r11
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <vfprintf+0x2d0>
    1880:	7a 2c       	mov	r7, r10
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <vfprintf+0x2d0>
    1884:	75 2c       	mov	r7, r5
    1886:	24 ff       	sbrs	r18, 4
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <vfprintf+0x2ee>
    188a:	fe 01       	movw	r30, r28
    188c:	ea 0d       	add	r30, r10
    188e:	f1 1d       	adc	r31, r1
    1890:	80 81       	ld	r24, Z
    1892:	80 33       	cpi	r24, 0x30	; 48
    1894:	11 f4       	brne	.+4      	; 0x189a <vfprintf+0x2e4>
    1896:	29 7e       	andi	r18, 0xE9	; 233
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <vfprintf+0x2f6>
    189a:	22 ff       	sbrs	r18, 2
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x2f4>
    189e:	73 94       	inc	r7
    18a0:	73 94       	inc	r7
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <vfprintf+0x2f6>
    18a4:	82 2f       	mov	r24, r18
    18a6:	86 78       	andi	r24, 0x86	; 134
    18a8:	09 f0       	breq	.+2      	; 0x18ac <vfprintf+0x2f6>
    18aa:	73 94       	inc	r7
    18ac:	23 fd       	sbrc	r18, 3
    18ae:	12 c0       	rjmp	.+36     	; 0x18d4 <vfprintf+0x31e>
    18b0:	20 ff       	sbrs	r18, 0
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x30a>
    18b4:	5a 2c       	mov	r5, r10
    18b6:	73 14       	cp	r7, r3
    18b8:	18 f4       	brcc	.+6      	; 0x18c0 <vfprintf+0x30a>
    18ba:	53 0c       	add	r5, r3
    18bc:	57 18       	sub	r5, r7
    18be:	73 2c       	mov	r7, r3
    18c0:	73 14       	cp	r7, r3
    18c2:	60 f4       	brcc	.+24     	; 0x18dc <vfprintf+0x326>
    18c4:	b7 01       	movw	r22, r14
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	2c 87       	std	Y+12, r18	; 0x0c
    18cc:	f0 dd       	rcall	.-1056   	; 0x14ae <fputc>
    18ce:	73 94       	inc	r7
    18d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18d2:	f6 cf       	rjmp	.-20     	; 0x18c0 <vfprintf+0x30a>
    18d4:	73 14       	cp	r7, r3
    18d6:	10 f4       	brcc	.+4      	; 0x18dc <vfprintf+0x326>
    18d8:	37 18       	sub	r3, r7
    18da:	01 c0       	rjmp	.+2      	; 0x18de <vfprintf+0x328>
    18dc:	31 2c       	mov	r3, r1
    18de:	24 ff       	sbrs	r18, 4
    18e0:	11 c0       	rjmp	.+34     	; 0x1904 <vfprintf+0x34e>
    18e2:	b7 01       	movw	r22, r14
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2c 87       	std	Y+12, r18	; 0x0c
    18ea:	e1 dd       	rcall	.-1086   	; 0x14ae <fputc>
    18ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ee:	22 ff       	sbrs	r18, 2
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <vfprintf+0x368>
    18f2:	21 ff       	sbrs	r18, 1
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x346>
    18f6:	88 e5       	ldi	r24, 0x58	; 88
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x34a>
    18fc:	88 e7       	ldi	r24, 0x78	; 120
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	b7 01       	movw	r22, r14
    1902:	0c c0       	rjmp	.+24     	; 0x191c <vfprintf+0x366>
    1904:	82 2f       	mov	r24, r18
    1906:	86 78       	andi	r24, 0x86	; 134
    1908:	51 f0       	breq	.+20     	; 0x191e <vfprintf+0x368>
    190a:	21 fd       	sbrc	r18, 1
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <vfprintf+0x35c>
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vfprintf+0x35e>
    1912:	8b e2       	ldi	r24, 0x2B	; 43
    1914:	27 fd       	sbrc	r18, 7
    1916:	8d e2       	ldi	r24, 0x2D	; 45
    1918:	b7 01       	movw	r22, r14
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	c8 dd       	rcall	.-1136   	; 0x14ae <fputc>
    191e:	a5 14       	cp	r10, r5
    1920:	30 f4       	brcc	.+12     	; 0x192e <vfprintf+0x378>
    1922:	b7 01       	movw	r22, r14
    1924:	80 e3       	ldi	r24, 0x30	; 48
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	c2 dd       	rcall	.-1148   	; 0x14ae <fputc>
    192a:	5a 94       	dec	r5
    192c:	f8 cf       	rjmp	.-16     	; 0x191e <vfprintf+0x368>
    192e:	aa 94       	dec	r10
    1930:	f4 01       	movw	r30, r8
    1932:	ea 0d       	add	r30, r10
    1934:	f1 1d       	adc	r31, r1
    1936:	80 81       	ld	r24, Z
    1938:	b7 01       	movw	r22, r14
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b8 dd       	rcall	.-1168   	; 0x14ae <fputc>
    193e:	a1 10       	cpse	r10, r1
    1940:	f6 cf       	rjmp	.-20     	; 0x192e <vfprintf+0x378>
    1942:	33 20       	and	r3, r3
    1944:	09 f4       	brne	.+2      	; 0x1948 <vfprintf+0x392>
    1946:	5d ce       	rjmp	.-838    	; 0x1602 <vfprintf+0x4c>
    1948:	b7 01       	movw	r22, r14
    194a:	80 e2       	ldi	r24, 0x20	; 32
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	af dd       	rcall	.-1186   	; 0x14ae <fputc>
    1950:	3a 94       	dec	r3
    1952:	f7 cf       	rjmp	.-18     	; 0x1942 <vfprintf+0x38c>
    1954:	f7 01       	movw	r30, r14
    1956:	86 81       	ldd	r24, Z+6	; 0x06
    1958:	97 81       	ldd	r25, Z+7	; 0x07
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <vfprintf+0x3aa>
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	2c 96       	adiw	r28, 0x0c	; 12
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	3f 90       	pop	r3
    198e:	2f 90       	pop	r2
    1990:	08 95       	ret

00001992 <strnlen_P>:
    1992:	fc 01       	movw	r30, r24
    1994:	05 90       	lpm	r0, Z+
    1996:	61 50       	subi	r22, 0x01	; 1
    1998:	70 40       	sbci	r23, 0x00	; 0
    199a:	01 10       	cpse	r0, r1
    199c:	d8 f7       	brcc	.-10     	; 0x1994 <strnlen_P+0x2>
    199e:	80 95       	com	r24
    19a0:	90 95       	com	r25
    19a2:	8e 0f       	add	r24, r30
    19a4:	9f 1f       	adc	r25, r31
    19a6:	08 95       	ret

000019a8 <strnlen>:
    19a8:	fc 01       	movw	r30, r24
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	70 40       	sbci	r23, 0x00	; 0
    19ae:	01 90       	ld	r0, Z+
    19b0:	01 10       	cpse	r0, r1
    19b2:	d8 f7       	brcc	.-10     	; 0x19aa <strnlen+0x2>
    19b4:	80 95       	com	r24
    19b6:	90 95       	com	r25
    19b8:	8e 0f       	add	r24, r30
    19ba:	9f 1f       	adc	r25, r31
    19bc:	08 95       	ret

000019be <__ultoa_invert>:
    19be:	fa 01       	movw	r30, r20
    19c0:	aa 27       	eor	r26, r26
    19c2:	28 30       	cpi	r18, 0x08	; 8
    19c4:	51 f1       	breq	.+84     	; 0x1a1a <__ultoa_invert+0x5c>
    19c6:	20 31       	cpi	r18, 0x10	; 16
    19c8:	81 f1       	breq	.+96     	; 0x1a2a <__ultoa_invert+0x6c>
    19ca:	e8 94       	clt
    19cc:	6f 93       	push	r22
    19ce:	6e 7f       	andi	r22, 0xFE	; 254
    19d0:	6e 5f       	subi	r22, 0xFE	; 254
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	8f 4f       	sbci	r24, 0xFF	; 255
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	af 4f       	sbci	r26, 0xFF	; 255
    19da:	b1 e0       	ldi	r27, 0x01	; 1
    19dc:	3e d0       	rcall	.+124    	; 0x1a5a <__ultoa_invert+0x9c>
    19de:	b4 e0       	ldi	r27, 0x04	; 4
    19e0:	3c d0       	rcall	.+120    	; 0x1a5a <__ultoa_invert+0x9c>
    19e2:	67 0f       	add	r22, r23
    19e4:	78 1f       	adc	r23, r24
    19e6:	89 1f       	adc	r24, r25
    19e8:	9a 1f       	adc	r25, r26
    19ea:	a1 1d       	adc	r26, r1
    19ec:	68 0f       	add	r22, r24
    19ee:	79 1f       	adc	r23, r25
    19f0:	8a 1f       	adc	r24, r26
    19f2:	91 1d       	adc	r25, r1
    19f4:	a1 1d       	adc	r26, r1
    19f6:	6a 0f       	add	r22, r26
    19f8:	71 1d       	adc	r23, r1
    19fa:	81 1d       	adc	r24, r1
    19fc:	91 1d       	adc	r25, r1
    19fe:	a1 1d       	adc	r26, r1
    1a00:	20 d0       	rcall	.+64     	; 0x1a42 <__ultoa_invert+0x84>
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__ultoa_invert+0x48>
    1a04:	68 94       	set
    1a06:	3f 91       	pop	r19
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	26 9f       	mul	r18, r22
    1a0c:	11 24       	eor	r1, r1
    1a0e:	30 19       	sub	r19, r0
    1a10:	30 5d       	subi	r19, 0xD0	; 208
    1a12:	31 93       	st	Z+, r19
    1a14:	de f6       	brtc	.-74     	; 0x19cc <__ultoa_invert+0xe>
    1a16:	cf 01       	movw	r24, r30
    1a18:	08 95       	ret
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	47 70       	andi	r20, 0x07	; 7
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	41 93       	st	Z+, r20
    1a22:	b3 e0       	ldi	r27, 0x03	; 3
    1a24:	0f d0       	rcall	.+30     	; 0x1a44 <__ultoa_invert+0x86>
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0x5c>
    1a28:	f6 cf       	rjmp	.-20     	; 0x1a16 <__ultoa_invert+0x58>
    1a2a:	46 2f       	mov	r20, r22
    1a2c:	4f 70       	andi	r20, 0x0F	; 15
    1a2e:	40 5d       	subi	r20, 0xD0	; 208
    1a30:	4a 33       	cpi	r20, 0x3A	; 58
    1a32:	18 f0       	brcs	.+6      	; 0x1a3a <__ultoa_invert+0x7c>
    1a34:	49 5d       	subi	r20, 0xD9	; 217
    1a36:	31 fd       	sbrc	r19, 1
    1a38:	40 52       	subi	r20, 0x20	; 32
    1a3a:	41 93       	st	Z+, r20
    1a3c:	02 d0       	rcall	.+4      	; 0x1a42 <__ultoa_invert+0x84>
    1a3e:	a9 f7       	brne	.-22     	; 0x1a2a <__ultoa_invert+0x6c>
    1a40:	ea cf       	rjmp	.-44     	; 0x1a16 <__ultoa_invert+0x58>
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	a6 95       	lsr	r26
    1a46:	97 95       	ror	r25
    1a48:	87 95       	ror	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	ba 95       	dec	r27
    1a50:	c9 f7       	brne	.-14     	; 0x1a44 <__ultoa_invert+0x86>
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 05       	cpc	r22, r1
    1a56:	71 05       	cpc	r23, r1
    1a58:	08 95       	ret
    1a5a:	9b 01       	movw	r18, r22
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	0a 2e       	mov	r0, r26
    1a60:	06 94       	lsr	r0
    1a62:	57 95       	ror	r21
    1a64:	47 95       	ror	r20
    1a66:	37 95       	ror	r19
    1a68:	27 95       	ror	r18
    1a6a:	ba 95       	dec	r27
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__ultoa_invert+0xa2>
    1a6e:	62 0f       	add	r22, r18
    1a70:	73 1f       	adc	r23, r19
    1a72:	84 1f       	adc	r24, r20
    1a74:	95 1f       	adc	r25, r21
    1a76:	a0 1d       	adc	r26, r0
    1a78:	08 95       	ret

00001a7a <_exit>:
    1a7a:	f8 94       	cli

00001a7c <__stop_program>:
    1a7c:	ff cf       	rjmp	.-2      	; 0x1a7c <__stop_program>

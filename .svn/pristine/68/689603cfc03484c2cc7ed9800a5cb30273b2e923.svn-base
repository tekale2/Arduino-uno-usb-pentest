
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000023fe  00002492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800128  00800128  000024ba  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005f53  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f650  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037c9  00000000  00000000  00015e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005609  00000000  00000000  0001961d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001858  00000000  00000000  0001ec28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004fb8  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ae7b  00000000  00000000  00025438  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000980  00000000  00000000  000302b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
       6:	00 00       	nop
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
      28:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_10>
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
		  DataINEndpoint  = EndpointData;
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      82:	00 00       	nop
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4565>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4558>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

	return AOA_ENUMERROR_NoError;
}
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4553>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4551>:
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
     164:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

00000172 <__c.4549>:
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati

	return AUDIO_ENUMERROR_NoError;
}
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4547>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     1b8:	6f 61 72 64 2e 0d 0a 00                             oard....

000001c0 <__c.4545>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4538>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4533>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4512>:
     217:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	ee ef       	ldi	r30, 0xFE	; 254
     254:	f3 e2       	ldi	r31, 0x23	; 35
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a8 32       	cpi	r26, 0x28	; 40
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a8 e2       	ldi	r26, 0x28	; 40
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a3 32       	cpi	r26, 0x23	; 35
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	d0 d0       	rcall	.+416    	; 0x418 <main>
     278:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27e:	9b b1       	in	r25, 0x0b	; 11
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 2b       	or	r25, r24
     284:	9b b9       	out	0x0b, r25	; 11
     286:	08 95       	ret

00000288 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     288:	84 b7       	in	r24, 0x34	; 52
     28a:	87 7f       	andi	r24, 0xF7	; 247
     28c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28e:	88 e1       	ldi	r24, 0x18	; 24
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	80 93 60 00 	sts	0x0060, r24
     298:	10 92 60 00 	sts	0x0060, r1
     29c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	80 93 61 00 	sts	0x0061, r24
     2aa:	90 93 61 00 	sts	0x0061, r25
     2ae:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 cd 00 	sts	0x00CD, r25
     2b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c6:	88 e1       	ldi	r24, 0x18	; 24
     2c8:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     2cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2d0:	8a b1       	in	r24, 0x0a	; 10
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2dc:	0e 94 32 0a 	call	0x1464	; 0x1464 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <Serial_CreateStream>

000002e8 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2e8:	8f 92       	push	r8
     2ea:	9f 92       	push	r9
     2ec:	af 92       	push	r10
     2ee:	bf 92       	push	r11
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     304:	ed b6       	in	r14, 0x3d	; 61
     306:	fe b6       	in	r15, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     308:	80 91 0e 05 	lds	r24, 0x050E
     30c:	8b 30       	cpi	r24, 0x0B	; 11
     30e:	09 f0       	breq	.+2      	; 0x312 <KeyboardHost_Task+0x2a>
     310:	71 c0       	rjmp	.+226    	; 0x3f4 <KeyboardHost_Task+0x10c>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <HID_Host_IsReportReceived>
     31a:	88 23       	and	r24, r24
     31c:	09 f4       	brne	.+2      	; 0x320 <KeyboardHost_Task+0x38>
     31e:	6a c0       	rjmp	.+212    	; 0x3f4 <KeyboardHost_Task+0x10c>
     320:	cd b6       	in	r12, 0x3d	; 61
     322:	de b6       	in	r13, 0x3e	; 62
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     324:	80 91 16 01 	lds	r24, 0x0116
     328:	2d b7       	in	r18, 0x3d	; 61
     32a:	3e b7       	in	r19, 0x3e	; 62
     32c:	28 1b       	sub	r18, r24
     32e:	31 09       	sbc	r19, r1
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	3e bf       	out	0x3e, r19	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	2d bf       	out	0x3d, r18	; 61
     33a:	0d b7       	in	r16, 0x3d	; 61
     33c:	1e b7       	in	r17, 0x3e	; 62
     33e:	0f 5f       	subi	r16, 0xFF	; 255
     340:	1f 4f       	sbci	r17, 0xFF	; 255
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     342:	b8 01       	movw	r22, r16
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <HID_Host_ReceiveReport>

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     34c:	91 2c       	mov	r9, r1
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     34e:	8a e2       	ldi	r24, 0x2A	; 42
     350:	88 2e       	mov	r8, r24
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     352:	80 91 28 01 	lds	r24, 0x0128
     356:	98 16       	cp	r9, r24
     358:	08 f0       	brcs	.+2      	; 0x35c <KeyboardHost_Task+0x74>
     35a:	42 c0       	rjmp	.+132    	; 0x3e0 <KeyboardHost_Task+0xf8>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35c:	89 9c       	mul	r8, r9
     35e:	50 01       	movw	r10, r0
     360:	11 24       	eor	r1, r1
     362:	c5 01       	movw	r24, r10
     364:	87 5d       	subi	r24, 0xD7	; 215
     366:	9e 4f       	sbci	r25, 0xFE	; 254
     368:	5c 01       	movw	r10, r24

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     36a:	bc 01       	movw	r22, r24
     36c:	c8 01       	movw	r24, r16
     36e:	84 d4       	rcall	.+2312   	; 0xc78 <USB_GetHIDReportItemInfo>
     370:	88 23       	and	r24, r24
     372:	61 f1       	breq	.+88     	; 0x3cc <KeyboardHost_Task+0xe4>
     374:	f5 01       	movw	r30, r10
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     376:	81 85       	ldd	r24, Z+9	; 0x09
     378:	92 85       	ldd	r25, Z+10	; 0x0a
     37a:	07 97       	sbiw	r24, 0x07	; 7
     37c:	39 f5       	brne	.+78     	; 0x3cc <KeyboardHost_Task+0xe4>
     37e:	80 85       	ldd	r24, Z+8	; 0x08
     380:	88 30       	cpi	r24, 0x08	; 8
     382:	21 f5       	brne	.+72     	; 0x3cc <KeyboardHost_Task+0xe4>
     384:	46 89       	ldd	r20, Z+22	; 0x16
				(ReportItem->Attributes.BitSize         == 8)                   &&
     386:	57 89       	ldd	r21, Z+23	; 0x17
     388:	60 8d       	ldd	r22, Z+24	; 0x18
     38a:	71 8d       	ldd	r23, Z+25	; 0x19
     38c:	42 30       	cpi	r20, 0x02	; 2
     38e:	51 05       	cpc	r21, r1
     390:	61 05       	cpc	r22, r1
     392:	71 05       	cpc	r23, r1
     394:	d8 f0       	brcs	.+54     	; 0x3cc <KeyboardHost_Task+0xe4>
     396:	82 81       	ldd	r24, Z+2	; 0x02
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     398:	81 11       	cpse	r24, r1
     39a:	18 c0       	rjmp	.+48     	; 0x3cc <KeyboardHost_Task+0xe4>
     39c:	82 a1       	ldd	r24, Z+34	; 0x22
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     39e:	88 23       	and	r24, r24

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     3a0:	f9 f0       	breq	.+62     	; 0x3e0 <KeyboardHost_Task+0xf8>
     3a2:	90 e2       	ldi	r25, 0x20	; 32
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     3a4:	99 b9       	out	0x09, r25	; 9
     3a6:	9c ef       	ldi	r25, 0xFC	; 252
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     3a8:	98 0f       	add	r25, r24
     3aa:	9a 31       	cpi	r25, 0x1A	; 26
     3ac:	10 f4       	brcc	.+4      	; 0x3b2 <KeyboardHost_Task+0xca>
     3ae:	83 5c       	subi	r24, 0xC3	; 195
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     3b0:	10 c0       	rjmp	.+32     	; 0x3d2 <KeyboardHost_Task+0xea>
     3b2:	92 ee       	ldi	r25, 0xE2	; 226
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     3b4:	98 0f       	add	r25, r24
     3b6:	99 30       	cpi	r25, 0x09	; 9
     3b8:	10 f4       	brcc	.+4      	; 0x3be <KeyboardHost_Task+0xd6>
     3ba:	8d 5e       	subi	r24, 0xED	; 237
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <KeyboardHost_Task+0xea>
     3be:	87 32       	cpi	r24, 0x27	; 39
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     3c0:	39 f0       	breq	.+14     	; 0x3d0 <KeyboardHost_Task+0xe8>
     3c2:	8c 32       	cpi	r24, 0x2C	; 44
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     3c4:	99 f0       	breq	.+38     	; 0x3ec <KeyboardHost_Task+0x104>
     3c6:	88 32       	cpi	r24, 0x28	; 40
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     3c8:	59 f4       	brne	.+22     	; 0x3e0 <KeyboardHost_Task+0xf8>
     3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <KeyboardHost_Task+0x108>
     3cc:	93 94       	inc	r9
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3ce:	c1 cf       	rjmp	.-126    	; 0x352 <KeyboardHost_Task+0x6a>
     3d0:	80 e3       	ldi	r24, 0x30	; 48
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
					{
						PressedKey = '0';
     3d2:	60 91 1f 05 	lds	r22, 0x051F
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
					  putchar(PressedKey);
     3d6:	70 91 20 05 	lds	r23, 0x0520
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <fputc>
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de be       	out	0x3e, r13	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd be       	out	0x3d, r12	; 61
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <KeyboardHost_Task+0x10c>
     3ec:	80 e2       	ldi	r24, 0x20	; 32
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
					{
						PressedKey = ' ';
     3ee:	f1 cf       	rjmp	.-30     	; 0x3d2 <KeyboardHost_Task+0xea>
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
					{
						PressedKey = '\n';
     3f2:	ef cf       	rjmp	.-34     	; 0x3d2 <KeyboardHost_Task+0xea>
     3f4:	0f b6       	in	r0, 0x3f	; 63
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     3f6:	f8 94       	cli
     3f8:	fe be       	out	0x3e, r15	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	ed be       	out	0x3d, r14	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	9f 90       	pop	r9
     414:	8f 90       	pop	r8
     416:	08 95       	ret

00000418 <main>:
     418:	37 df       	rcall	.-402    	; 0x288 <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     41a:	87 e1       	ldi	r24, 0x17	; 23

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
     422:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     424:	2c df       	rcall	.-424    	; 0x27e <LEDs_SetAllLEDs>
     426:	78 94       	sei
     428:	5f df       	rcall	.-322    	; 0x2e8 <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     42a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     42e:	fc cf       	rjmp	.-8      	; 0x428 <main+0x10>

00000430 <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     438:	80 ea       	ldi	r24, 0xA0	; 160
     43a:	21 cf       	rjmp	.-446    	; 0x27e <LEDs_SetAllLEDs>

0000043c <EVENT_USB_Host_DeviceUnattached>:
     43c:	8d ee       	ldi	r24, 0xED	; 237
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     444:	80 e1       	ldi	r24, 0x10	; 16
     446:	1b cf       	rjmp	.-458    	; 0x27e <LEDs_SetAllLEDs>

00000448 <EVENT_USB_Host_DeviceEnumerationComplete>:
     448:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	c2 50       	subi	r28, 0x02	; 2
     452:	d2 40       	sbci	r29, 0x02	; 2
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     45e:	80 ea       	ldi	r24, 0xA0	; 160
     460:	0e df       	rcall	.-484    	; 0x27e <LEDs_SetAllLEDs>
     462:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     464:	32 e0       	ldi	r19, 0x02	; 2
     466:	ae 01       	movw	r20, r28
     468:	4f 5f       	subi	r20, 0xFF	; 255
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7d 4f       	sbci	r23, 0xFD	; 253
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 02 0b 	call	0x1604	; 0x1604 <USB_Host_GetDeviceConfigDescriptor>
     478:	88 23       	and	r24, r24
     47a:	19 f0       	breq	.+6      	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     47c:	80 ec       	ldi	r24, 0xC0	; 192
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	19 c0       	rjmp	.+50     	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     482:	cf 5f       	subi	r28, 0xFF	; 255
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     484:	dd 4f       	sbci	r29, 0xFD	; 253
     486:	68 81       	ld	r22, Y
     488:	79 81       	ldd	r23, Y+1	; 0x01
     48a:	c1 50       	subi	r28, 0x01	; 1
     48c:	d2 40       	sbci	r29, 0x02	; 2
     48e:	ae 01       	movw	r20, r28
     490:	4f 5f       	subi	r20, 0xFF	; 255
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <HID_Host_ConfigurePipes>
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     4a0:	88 e9       	ldi	r24, 0x98	; 152
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4a6:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4a8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <USB_Host_SetDeviceConfiguration>
     4ac:	88 23       	and	r24, r24
     4ae:	31 f0       	breq	.+12     	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4b0:	82 e7       	ldi	r24, 0x72	; 114
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
     4b8:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ba:	15 c0       	rjmp	.+42     	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <HID_Host_SetReportProtocol>
     4c4:	88 23       	and	r24, r24
     4c6:	51 f0       	breq	.+20     	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     4c8:	84 e3       	ldi	r24, 0x34	; 52
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
     4d0:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d2:	d5 de       	rcall	.-598    	; 0x27e <LEDs_SetAllLEDs>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     4dc:	8d e1       	ldi	r24, 0x1D	; 29
		return;
     4de:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     4e0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <puts_P>
     4e4:	80 e6       	ldi	r24, 0x60	; 96
     4e6:	cb de       	rcall	.-618    	; 0x27e <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     4e8:	ce 5f       	subi	r28, 0xFE	; 254
     4ea:	dd 4f       	sbci	r29, 0xFD	; 253
     4ec:	0f b6       	in	r0, 0x3f	; 63
}
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <EVENT_USB_Host_HostError>:
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	1f 92       	push	r1

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	45 d7       	rcall	.+3722   	; 0x1394 <USB_Disable>
     50a:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	8f 93       	push	r24
     510:	8e ee       	ldi	r24, 0xEE	; 238
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <printf_P>
     51c:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     51e:	af de       	rcall	.-674    	; 0x27e <LEDs_SetAllLEDs>
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	ff cf       	rjmp	.-2      	; 0x528 <EVENT_USB_Host_HostError+0x2c>

0000052a <EVENT_USB_Host_DeviceEnumerationFailed>:
     52a:	90 91 0e 05 	lds	r25, 0x050E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     52e:	1f 92       	push	r1
     530:	9f 93       	push	r25
     532:	1f 92       	push	r1
     534:	6f 93       	push	r22
     536:	1f 92       	push	r1
     538:	8f 93       	push	r24
     53a:	88 e9       	ldi	r24, 0x98	; 152
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     546:	8d b7       	in	r24, 0x3d	; 61
     548:	9e b7       	in	r25, 0x3e	; 62
     54a:	08 96       	adiw	r24, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	9e bf       	out	0x3e, r25	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	8d bf       	out	0x3d, r24	; 61
     556:	80 e9       	ldi	r24, 0x90	; 144
     558:	92 ce       	rjmp	.-732    	; 0x27e <LEDs_SetAllLEDs>

0000055a <CALLBACK_HIDParser_FilterHIDReportItem>:
     55a:	41 e0       	ldi	r20, 0x01	; 1
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     55c:	fc 01       	movw	r30, r24
     55e:	21 85       	ldd	r18, Z+9	; 0x09
     560:	32 85       	ldd	r19, Z+10	; 0x0a
     562:	27 30       	cpi	r18, 0x07	; 7
     564:	31 05       	cpc	r19, r1
     566:	09 f0       	breq	.+2      	; 0x56a <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     568:	40 e0       	ldi	r20, 0x00	; 0
}
     56a:	84 2f       	mov	r24, r20
     56c:	08 95       	ret

0000056e <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     56e:	2f 92       	push	r2
     570:	3f 92       	push	r3
     572:	4f 92       	push	r4
     574:	5f 92       	push	r5
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	cd 58       	subi	r28, 0x8D	; 141
     598:	d1 09       	sbc	r29, r1
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     5a6:	9a 01       	movw	r18, r20
     5a8:	20 57       	subi	r18, 0x70	; 112
     5aa:	3c 4f       	sbci	r19, 0xFC	; 252
     5ac:	e8 96       	adiw	r28, 0x38	; 56
     5ae:	3f af       	std	Y+63, r19	; 0x3f
     5b0:	2e af       	std	Y+62, r18	; 0x3e
     5b2:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     5b4:	89 ed       	ldi	r24, 0xD9	; 217
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	da 01       	movw	r26, r20
     5ba:	fc 01       	movw	r30, r24
     5bc:	1d 92       	st	X+, r1
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	e9 f7       	brne	.-6      	; 0x5bc <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     5c2:	fe 01       	movw	r30, r28
     5c4:	31 96       	adiw	r30, 0x01	; 1
     5c6:	8c e1       	ldi	r24, 0x1C	; 28
     5c8:	df 01       	movw	r26, r30
     5ca:	1d 92       	st	X+, r1
     5cc:	8a 95       	dec	r24
     5ce:	e9 f7       	brne	.-6      	; 0x5ca <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	d9 01       	movw	r26, r18
     5d4:	1d 92       	st	X+, r1
     5d6:	8a 95       	dec	r24
     5d8:	e9 f7       	brne	.-6      	; 0x5d4 <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     5da:	9a 01       	movw	r18, r20
     5dc:	21 57       	subi	r18, 0x71	; 113
     5de:	3c 4f       	sbci	r19, 0xFC	; 252
     5e0:	eb 96       	adiw	r28, 0x3b	; 59
     5e2:	3f af       	std	Y+63, r19	; 0x3f
     5e4:	2e af       	std	Y+62, r18	; 0x3e
     5e6:	eb 97       	sbiw	r28, 0x3b	; 59
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	d9 01       	movw	r26, r18
     5ec:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     5ee:	41 2c       	mov	r4, r1
     5f0:	51 2c       	mov	r5, r1
     5f2:	32 01       	movw	r6, r4
     5f4:	81 2c       	mov	r8, r1
     5f6:	91 2c       	mov	r9, r1
     5f8:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     5fa:	e4 96       	adiw	r28, 0x34	; 52
     5fc:	1f ae       	std	Y+63, r1	; 0x3f
     5fe:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     600:	e6 96       	adiw	r28, 0x36	; 54
     602:	1f ae       	std	Y+63, r1	; 0x3f
     604:	1e ae       	std	Y+62, r1	; 0x3e
     606:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     608:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     60a:	9a 01       	movw	r18, r20
     60c:	2a 52       	subi	r18, 0x2A	; 42
     60e:	3c 4f       	sbci	r19, 0xFC	; 252
     610:	ed 96       	adiw	r28, 0x3d	; 61
     612:	3f af       	std	Y+63, r19	; 0x3f
     614:	2e af       	std	Y+62, r18	; 0x3e
     616:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     618:	9a 01       	movw	r18, r20
     61a:	28 57       	subi	r18, 0x78	; 120
     61c:	3c 4f       	sbci	r19, 0xFC	; 252
     61e:	cd 57       	subi	r28, 0x7D	; 125
     620:	df 4f       	sbci	r29, 0xFF	; 255
     622:	39 83       	std	Y+1, r19	; 0x01
     624:	28 83       	st	Y, r18
     626:	c3 58       	subi	r28, 0x83	; 131
     628:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     62a:	9a 01       	movw	r18, r20
     62c:	28 52       	subi	r18, 0x28	; 40
     62e:	3c 4f       	sbci	r19, 0xFC	; 252
     630:	ef 96       	adiw	r28, 0x3f	; 63
     632:	3f af       	std	Y+63, r19	; 0x3f
     634:	2e af       	std	Y+62, r18	; 0x3e
     636:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     638:	cb 57       	subi	r28, 0x7B	; 123
     63a:	df 4f       	sbci	r29, 0xFF	; 255
     63c:	b9 83       	std	Y+1, r27	; 0x01
     63e:	a8 83       	st	Y, r26
     640:	c5 58       	subi	r28, 0x85	; 133
     642:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     644:	61 15       	cp	r22, r1
     646:	71 05       	cpc	r23, r1
     648:	09 f4       	brne	.+2      	; 0x64c <USB_ProcessHIDReport+0xde>
     64a:	e9 c2       	rjmp	.+1490   	; 0xc1e <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     64c:	d1 01       	movw	r26, r2
     64e:	bc 91       	ld	r27, X
     650:	e9 96       	adiw	r28, 0x39	; 57
     652:	bf af       	std	Y+63, r27	; 0x3f
     654:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     656:	8b 2f       	mov	r24, r27
     658:	83 70       	andi	r24, 0x03	; 3
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	81 f1       	breq	.+96     	; 0x6be <USB_ProcessHIDReport+0x150>
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	59 f0       	breq	.+22     	; 0x678 <USB_ProcessHIDReport+0x10a>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	d9 f1       	breq	.+118    	; 0x6dc <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     666:	ef ef       	ldi	r30, 0xFF	; 255
     668:	2e 1a       	sub	r2, r30
     66a:	3e 0a       	sbc	r3, r30
		ReportSize--;
     66c:	61 50       	subi	r22, 0x01	; 1
     66e:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     670:	c1 2c       	mov	r12, r1
     672:	d1 2c       	mov	r13, r1
     674:	76 01       	movw	r14, r12
     676:	3d c0       	rjmp	.+122    	; 0x6f2 <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     678:	d1 01       	movw	r26, r2
     67a:	14 96       	adiw	r26, 0x04	; 4
     67c:	8c 91       	ld	r24, X
     67e:	14 97       	sbiw	r26, 0x04	; 4
     680:	13 96       	adiw	r26, 0x03	; 3
     682:	cc 90       	ld	r12, X
     684:	13 97       	sbiw	r26, 0x03	; 3
     686:	d1 2c       	mov	r13, r1
     688:	e1 2c       	mov	r14, r1
     68a:	f1 2c       	mov	r15, r1
     68c:	76 01       	movw	r14, r12
     68e:	dd 24       	eor	r13, r13
     690:	cc 24       	eor	r12, r12
     692:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     694:	11 96       	adiw	r26, 0x01	; 1
     696:	8c 91       	ld	r24, X
     698:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     69a:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     69c:	12 96       	adiw	r26, 0x02	; 2
     69e:	8c 91       	ld	r24, X
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	98 2f       	mov	r25, r24
     6a4:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6a6:	a0 e0       	ldi	r26, 0x00	; 0
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	c8 2a       	or	r12, r24
     6ac:	d9 2a       	or	r13, r25
     6ae:	ea 2a       	or	r14, r26
     6b0:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     6b2:	65 50       	subi	r22, 0x05	; 5
     6b4:	71 09       	sbc	r23, r1
				ReportData     += 4;
     6b6:	b5 e0       	ldi	r27, 0x05	; 5
     6b8:	2b 0e       	add	r2, r27
     6ba:	31 1c       	adc	r3, r1
				break;
     6bc:	1a c0       	rjmp	.+52     	; 0x6f2 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     6be:	f1 01       	movw	r30, r2
     6c0:	c2 80       	ldd	r12, Z+2	; 0x02
     6c2:	d1 2c       	mov	r13, r1
     6c4:	dc 2c       	mov	r13, r12
     6c6:	cc 24       	eor	r12, r12
     6c8:	81 81       	ldd	r24, Z+1	; 0x01
     6ca:	c8 2a       	or	r12, r24
     6cc:	e1 2c       	mov	r14, r1
     6ce:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     6d0:	63 50       	subi	r22, 0x03	; 3
     6d2:	71 09       	sbc	r23, r1
				ReportData     += 2;
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	2f 0e       	add	r2, r31
     6d8:	31 1c       	adc	r3, r1
				break;
     6da:	0b c0       	rjmp	.+22     	; 0x6f2 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     6dc:	d1 01       	movw	r26, r2
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	cc 90       	ld	r12, X
     6e2:	d1 2c       	mov	r13, r1
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     6e8:	62 50       	subi	r22, 0x02	; 2
     6ea:	71 09       	sbc	r23, r1
				ReportData     += 1;
     6ec:	b2 e0       	ldi	r27, 0x02	; 2
     6ee:	2b 0e       	add	r2, r27
     6f0:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6f2:	e9 96       	adiw	r28, 0x39	; 57
     6f4:	2f ad       	ldd	r18, Y+63	; 0x3f
     6f6:	e9 97       	sbiw	r28, 0x39	; 57
     6f8:	2c 7f       	andi	r18, 0xFC	; 252
     6fa:	24 36       	cpi	r18, 0x64	; 100
     6fc:	09 f4       	brne	.+2      	; 0x700 <USB_ProcessHIDReport+0x192>
     6fe:	96 c0       	rjmp	.+300    	; 0x82c <USB_ProcessHIDReport+0x2be>
     700:	68 f5       	brcc	.+90     	; 0x75c <USB_ProcessHIDReport+0x1ee>
     702:	24 32       	cpi	r18, 0x24	; 36
     704:	09 f4       	brne	.+2      	; 0x708 <USB_ProcessHIDReport+0x19a>
     706:	7c c0       	rjmp	.+248    	; 0x800 <USB_ProcessHIDReport+0x292>
     708:	b0 f4       	brcc	.+44     	; 0x736 <USB_ProcessHIDReport+0x1c8>
     70a:	28 30       	cpi	r18, 0x08	; 8
     70c:	09 f4       	brne	.+2      	; 0x710 <USB_ProcessHIDReport+0x1a2>
     70e:	f4 c0       	rjmp	.+488    	; 0x8f8 <USB_ProcessHIDReport+0x38a>
     710:	48 f4       	brcc	.+18     	; 0x724 <USB_ProcessHIDReport+0x1b6>
     712:	24 30       	cpi	r18, 0x04	; 4
     714:	09 f0       	breq	.+2      	; 0x718 <USB_ProcessHIDReport+0x1aa>
     716:	73 c2       	rjmp	.+1254   	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     718:	d8 01       	movw	r26, r16
     71a:	12 96       	adiw	r26, 0x02	; 2
     71c:	dc 92       	st	X, r13
     71e:	ce 92       	st	-X, r12
     720:	11 97       	sbiw	r26, 0x01	; 1
				break;
     722:	6d c2       	rjmp	.+1242   	; 0xbfe <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     724:	24 31       	cpi	r18, 0x14	; 20
     726:	09 f4       	brne	.+2      	; 0x72a <USB_ProcessHIDReport+0x1bc>
     728:	65 c0       	rjmp	.+202    	; 0x7f4 <USB_ProcessHIDReport+0x286>
     72a:	28 31       	cpi	r18, 0x18	; 24
     72c:	09 f0       	breq	.+2      	; 0x730 <USB_ProcessHIDReport+0x1c2>
     72e:	67 c2       	rjmp	.+1230   	; 0xbfe <USB_ProcessHIDReport+0x690>
     730:	46 01       	movw	r8, r12
     732:	57 01       	movw	r10, r14
     734:	64 c2       	rjmp	.+1224   	; 0xbfe <USB_ProcessHIDReport+0x690>
     736:	24 33       	cpi	r18, 0x34	; 52
     738:	09 f4       	brne	.+2      	; 0x73c <USB_ProcessHIDReport+0x1ce>
     73a:	6a c0       	rjmp	.+212    	; 0x810 <USB_ProcessHIDReport+0x2a2>
     73c:	30 f4       	brcc	.+12     	; 0x74a <USB_ProcessHIDReport+0x1dc>
     73e:	28 32       	cpi	r18, 0x28	; 40
     740:	09 f0       	breq	.+2      	; 0x744 <USB_ProcessHIDReport+0x1d6>
     742:	5d c2       	rjmp	.+1210   	; 0xbfe <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     744:	26 01       	movw	r4, r12
     746:	37 01       	movw	r6, r14
     748:	5a c2       	rjmp	.+1204   	; 0xbfe <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     74a:	24 34       	cpi	r18, 0x44	; 68
     74c:	09 f4       	brne	.+2      	; 0x750 <USB_ProcessHIDReport+0x1e2>
     74e:	66 c0       	rjmp	.+204    	; 0x81c <USB_ProcessHIDReport+0x2ae>
     750:	24 35       	cpi	r18, 0x54	; 84
     752:	09 f0       	breq	.+2      	; 0x756 <USB_ProcessHIDReport+0x1e8>
     754:	54 c2       	rjmp	.+1192   	; 0xbfe <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     756:	f8 01       	movw	r30, r16
     758:	c1 86       	std	Z+9, r12	; 0x09
				break;
     75a:	51 c2       	rjmp	.+1186   	; 0xbfe <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     75c:	24 39       	cpi	r18, 0x94	; 148
     75e:	09 f4       	brne	.+2      	; 0x762 <USB_ProcessHIDReport+0x1f4>
     760:	6d c0       	rjmp	.+218    	; 0x83c <USB_ProcessHIDReport+0x2ce>
     762:	78 f4       	brcc	.+30     	; 0x782 <USB_ProcessHIDReport+0x214>
     764:	20 38       	cpi	r18, 0x80	; 128
     766:	e1 f0       	breq	.+56     	; 0x7a0 <USB_ProcessHIDReport+0x232>
     768:	30 f4       	brcc	.+12     	; 0x776 <USB_ProcessHIDReport+0x208>
     76a:	24 37       	cpi	r18, 0x74	; 116
     76c:	09 f0       	breq	.+2      	; 0x770 <USB_ProcessHIDReport+0x202>
     76e:	47 c2       	rjmp	.+1166   	; 0xbfe <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     770:	f8 01       	movw	r30, r16
     772:	c0 82       	st	Z, r12
				break;
     774:	44 c2       	rjmp	.+1160   	; 0xbfe <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     776:	24 38       	cpi	r18, 0x84	; 132
     778:	09 f4       	brne	.+2      	; 0x77c <USB_ProcessHIDReport+0x20e>
     77a:	64 c0       	rjmp	.+200    	; 0x844 <USB_ProcessHIDReport+0x2d6>
     77c:	20 39       	cpi	r18, 0x90	; 144
     77e:	81 f0       	breq	.+32     	; 0x7a0 <USB_ProcessHIDReport+0x232>
     780:	3e c2       	rjmp	.+1148   	; 0xbfe <USB_ProcessHIDReport+0x690>
     782:	20 3b       	cpi	r18, 0xB0	; 176
     784:	69 f0       	breq	.+26     	; 0x7a0 <USB_ProcessHIDReport+0x232>
     786:	30 f4       	brcc	.+12     	; 0x794 <USB_ProcessHIDReport+0x226>
     788:	20 3a       	cpi	r18, 0xA0	; 160
     78a:	09 f4       	brne	.+2      	; 0x78e <USB_ProcessHIDReport+0x220>
     78c:	c9 c0       	rjmp	.+402    	; 0x920 <USB_ProcessHIDReport+0x3b2>
     78e:	24 3a       	cpi	r18, 0xA4	; 164
     790:	b9 f0       	breq	.+46     	; 0x7c0 <USB_ProcessHIDReport+0x252>
     792:	35 c2       	rjmp	.+1130   	; 0xbfe <USB_ProcessHIDReport+0x690>
     794:	24 3b       	cpi	r18, 0xB4	; 180
     796:	29 f1       	breq	.+74     	; 0x7e2 <USB_ProcessHIDReport+0x274>
     798:	20 3c       	cpi	r18, 0xC0	; 192
     79a:	09 f4       	brne	.+2      	; 0x79e <USB_ProcessHIDReport+0x230>
     79c:	2d c1       	rjmp	.+602    	; 0x9f8 <USB_ProcessHIDReport+0x48a>
     79e:	2f c2       	rjmp	.+1118   	; 0xbfe <USB_ProcessHIDReport+0x690>
     7a0:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     7a2:	d7 01       	movw	r26, r14
     7a4:	c6 01       	movw	r24, r12
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	99 27       	eor	r25, r25
     7aa:	aa 27       	eor	r26, r26
     7ac:	bb 27       	eor	r27, r27
     7ae:	c1 58       	subi	r28, 0x81	; 129
     7b0:	df 4f       	sbci	r29, 0xFF	; 255
     7b2:	88 83       	st	Y, r24
     7b4:	99 83       	std	Y+1, r25	; 0x01
     7b6:	aa 83       	std	Y+2, r26	; 0x02
     7b8:	bb 83       	std	Y+3, r27	; 0x03
     7ba:	cf 57       	subi	r28, 0x7F	; 127
     7bc:	d0 40       	sbci	r29, 0x00	; 0
     7be:	4a c1       	rjmp	.+660    	; 0xa54 <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     7c0:	ce 01       	movw	r24, r28
     7c2:	4d 96       	adiw	r24, 0x1d	; 29
     7c4:	08 17       	cp	r16, r24
     7c6:	19 07       	cpc	r17, r25
     7c8:	09 f4       	brne	.+2      	; 0x7cc <USB_ProcessHIDReport+0x25e>
     7ca:	2f c2       	rjmp	.+1118   	; 0xc2a <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     7cc:	c8 01       	movw	r24, r16
     7ce:	4c 96       	adiw	r24, 0x1c	; 28
     7d0:	2a e2       	ldi	r18, 0x2A	; 42
     7d2:	f8 01       	movw	r30, r16
     7d4:	dc 01       	movw	r26, r24
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	2a 95       	dec	r18
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     7de:	8c 01       	movw	r16, r24
				break;
     7e0:	0e c2       	rjmp	.+1052   	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	08 17       	cp	r16, r24
     7e8:	19 07       	cpc	r17, r25
     7ea:	09 f4       	brne	.+2      	; 0x7ee <USB_ProcessHIDReport+0x280>
     7ec:	20 c2       	rjmp	.+1088   	; 0xc2e <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     7ee:	0c 51       	subi	r16, 0x1C	; 28
     7f0:	11 09       	sbc	r17, r1
				break;
     7f2:	05 c2       	rjmp	.+1034   	; 0xbfe <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     7f4:	f8 01       	movw	r30, r16
     7f6:	c2 86       	std	Z+10, r12	; 0x0a
     7f8:	d3 86       	std	Z+11, r13	; 0x0b
     7fa:	e4 86       	std	Z+12, r14	; 0x0c
     7fc:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     7fe:	ff c1       	rjmp	.+1022   	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     800:	d8 01       	movw	r26, r16
     802:	1e 96       	adiw	r26, 0x0e	; 14
     804:	cd 92       	st	X+, r12
     806:	dd 92       	st	X+, r13
     808:	ed 92       	st	X+, r14
     80a:	fc 92       	st	X, r15
     80c:	51 97       	sbiw	r26, 0x11	; 17
				break;
     80e:	f7 c1       	rjmp	.+1006   	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     810:	f8 01       	movw	r30, r16
     812:	c2 8a       	std	Z+18, r12	; 0x12
     814:	d3 8a       	std	Z+19, r13	; 0x13
     816:	e4 8a       	std	Z+20, r14	; 0x14
     818:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     81a:	f1 c1       	rjmp	.+994    	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     81c:	d8 01       	movw	r26, r16
     81e:	56 96       	adiw	r26, 0x16	; 22
     820:	cd 92       	st	X+, r12
     822:	dd 92       	st	X+, r13
     824:	ed 92       	st	X+, r14
     826:	fc 92       	st	X, r15
     828:	59 97       	sbiw	r26, 0x19	; 25
				break;
     82a:	e9 c1       	rjmp	.+978    	; 0xbfe <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     82c:	d8 01       	movw	r26, r16
     82e:	15 96       	adiw	r26, 0x05	; 5
     830:	cd 92       	st	X+, r12
     832:	dd 92       	st	X+, r13
     834:	ed 92       	st	X+, r14
     836:	fc 92       	st	X, r15
     838:	18 97       	sbiw	r26, 0x08	; 8
				break;
     83a:	e1 c1       	rjmp	.+962    	; 0xbfe <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     83c:	d8 01       	movw	r26, r16
     83e:	5a 96       	adiw	r26, 0x1a	; 26
     840:	cc 92       	st	X, r12
				break;
     842:	dd c1       	rjmp	.+954    	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     844:	ac 2d       	mov	r26, r12
     846:	f8 01       	movw	r30, r16
     848:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     84a:	ef 96       	adiw	r28, 0x3f	; 63
     84c:	ee ad       	ldd	r30, Y+62	; 0x3e
     84e:	ff ad       	ldd	r31, Y+63	; 0x3f
     850:	ef 97       	sbiw	r28, 0x3f	; 63
     852:	80 81       	ld	r24, Z
     854:	88 23       	and	r24, r24
     856:	09 f4       	brne	.+2      	; 0x85a <USB_ProcessHIDReport+0x2ec>
     858:	40 c0       	rjmp	.+128    	; 0x8da <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     85a:	cb 57       	subi	r28, 0x7B	; 123
     85c:	df 4f       	sbci	r29, 0xFF	; 255
     85e:	e8 81       	ld	r30, Y
     860:	f9 81       	ldd	r31, Y+1	; 0x01
     862:	c5 58       	subi	r28, 0x85	; 133
     864:	d0 40       	sbci	r29, 0x00	; 0
     866:	b0 81       	ld	r27, Z
     868:	9a 01       	movw	r18, r20
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	8b 17       	cp	r24, r27
     870:	d0 f4       	brcc	.+52     	; 0x8a6 <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     872:	7c 01       	movw	r14, r24
     874:	f9 01       	movw	r30, r18
     876:	e0 57       	subi	r30, 0x70	; 112
     878:	fc 4f       	sbci	r31, 0xFC	; 252
     87a:	e0 81       	ld	r30, Z
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	29 5f       	subi	r18, 0xF9	; 249
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	ea 13       	cpse	r30, r26
     884:	f4 cf       	rjmp	.-24     	; 0x86e <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     886:	27 e0       	ldi	r18, 0x07	; 7
     888:	2e 9d       	mul	r18, r14
     88a:	c0 01       	movw	r24, r0
     88c:	2f 9d       	mul	r18, r15
     88e:	90 0d       	add	r25, r0
     890:	11 24       	eor	r1, r1
     892:	9c 01       	movw	r18, r24
     894:	20 57       	subi	r18, 0x70	; 112
     896:	3c 4f       	sbci	r19, 0xFC	; 252
     898:	24 0f       	add	r18, r20
     89a:	35 1f       	adc	r19, r21
     89c:	e8 96       	adiw	r28, 0x38	; 56
     89e:	3f af       	std	Y+63, r19	; 0x3f
     8a0:	2e af       	std	Y+62, r18	; 0x3e
     8a2:	e8 97       	sbiw	r28, 0x38	; 56
     8a4:	1a c0       	rjmp	.+52     	; 0x8da <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     8a6:	ba 30       	cpi	r27, 0x0A	; 10
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_ProcessHIDReport+0x33e>
     8aa:	cb c1       	rjmp	.+918    	; 0xc42 <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	8b 0f       	add	r24, r27
     8b0:	eb 96       	adiw	r28, 0x3b	; 59
     8b2:	ee ad       	ldd	r30, Y+62	; 0x3e
     8b4:	ff ad       	ldd	r31, Y+63	; 0x3f
     8b6:	eb 97       	sbiw	r28, 0x3b	; 59
     8b8:	80 83       	st	Z, r24
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	9a 01       	movw	r18, r20
     8be:	8b 9f       	mul	r24, r27
     8c0:	20 0d       	add	r18, r0
     8c2:	31 1d       	adc	r19, r1
     8c4:	11 24       	eor	r1, r1
     8c6:	20 57       	subi	r18, 0x70	; 112
     8c8:	3c 4f       	sbci	r19, 0xFC	; 252
     8ca:	e8 96       	adiw	r28, 0x38	; 56
     8cc:	3f af       	std	Y+63, r19	; 0x3f
     8ce:	2e af       	std	Y+62, r18	; 0x3e
     8d0:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     8d2:	d9 01       	movw	r26, r18
     8d4:	1d 92       	st	X+, r1
     8d6:	8a 95       	dec	r24
     8d8:	e9 f7       	brne	.-6      	; 0x8d4 <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	ef 96       	adiw	r28, 0x3f	; 63
     8de:	ee ad       	ldd	r30, Y+62	; 0x3e
     8e0:	ff ad       	ldd	r31, Y+63	; 0x3f
     8e2:	ef 97       	sbiw	r28, 0x3f	; 63
     8e4:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     8e6:	d8 01       	movw	r26, r16
     8e8:	5b 96       	adiw	r26, 0x1b	; 27
     8ea:	8c 91       	ld	r24, X
     8ec:	e8 96       	adiw	r28, 0x38	; 56
     8ee:	ee ad       	ldd	r30, Y+62	; 0x3e
     8f0:	ff ad       	ldd	r31, Y+63	; 0x3f
     8f2:	e8 97       	sbiw	r28, 0x38	; 56
     8f4:	80 83       	st	Z, r24
				break;
     8f6:	83 c1       	rjmp	.+774    	; 0xbfe <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     8f8:	e4 96       	adiw	r28, 0x34	; 52
     8fa:	2f ad       	ldd	r18, Y+63	; 0x3f
     8fc:	e4 97       	sbiw	r28, 0x34	; 52
     8fe:	28 30       	cpi	r18, 0x08	; 8
     900:	09 f4       	brne	.+2      	; 0x904 <USB_ProcessHIDReport+0x396>
     902:	97 c1       	rjmp	.+814    	; 0xc32 <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     904:	fe 01       	movw	r30, r28
     906:	ed 59       	subi	r30, 0x9D	; 157
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	e2 0f       	add	r30, r18
     90c:	f1 1d       	adc	r31, r1
     90e:	e2 0f       	add	r30, r18
     910:	f1 1d       	adc	r31, r1
     912:	d1 82       	std	Z+1, r13	; 0x01
     914:	c0 82       	st	Z, r12
     916:	2f 5f       	subi	r18, 0xFF	; 255
     918:	e4 96       	adiw	r28, 0x34	; 52
     91a:	2f af       	std	Y+63, r18	; 0x3f
     91c:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     91e:	6f c1       	rjmp	.+734    	; 0xbfe <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     920:	e6 96       	adiw	r28, 0x36	; 54
     922:	2e ad       	ldd	r18, Y+62	; 0x3e
     924:	3f ad       	ldd	r19, Y+63	; 0x3f
     926:	e6 97       	sbiw	r28, 0x36	; 54
     928:	23 2b       	or	r18, r19
     92a:	41 f4       	brne	.+16     	; 0x93c <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     92c:	9a 01       	movw	r18, r20
     92e:	27 5b       	subi	r18, 0xB7	; 183
     930:	3c 4f       	sbci	r19, 0xFC	; 252
     932:	e6 96       	adiw	r28, 0x36	; 54
     934:	3f af       	std	Y+63, r19	; 0x3f
     936:	2e af       	std	Y+62, r18	; 0x3e
     938:	e6 97       	sbiw	r28, 0x36	; 54
     93a:	1d c0       	rjmp	.+58     	; 0x976 <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     93c:	fa 01       	movw	r30, r20
     93e:	e0 5b       	subi	r30, 0xB0	; 176
     940:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     942:	85 81       	ldd	r24, Z+5	; 0x05
     944:	96 81       	ldd	r25, Z+6	; 0x06
     946:	89 2b       	or	r24, r25
     948:	61 f0       	breq	.+24     	; 0x962 <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     94a:	cd 57       	subi	r28, 0x7D	; 125
     94c:	df 4f       	sbci	r29, 0xFF	; 255
     94e:	28 81       	ld	r18, Y
     950:	39 81       	ldd	r19, Y+1	; 0x01
     952:	c3 58       	subi	r28, 0x83	; 131
     954:	d0 40       	sbci	r29, 0x00	; 0
     956:	e2 17       	cp	r30, r18
     958:	f3 07       	cpc	r31, r19
     95a:	09 f4       	brne	.+2      	; 0x95e <USB_ProcessHIDReport+0x3f0>
     95c:	6c c1       	rjmp	.+728    	; 0xc36 <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     95e:	37 96       	adiw	r30, 0x07	; 7
     960:	f0 cf       	rjmp	.-32     	; 0x942 <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     962:	e6 96       	adiw	r28, 0x36	; 54
     964:	2e ad       	ldd	r18, Y+62	; 0x3e
     966:	3f ad       	ldd	r19, Y+63	; 0x3f
     968:	e6 97       	sbiw	r28, 0x36	; 54
     96a:	36 83       	std	Z+6, r19	; 0x06
     96c:	25 83       	std	Z+5, r18	; 0x05
     96e:	e6 96       	adiw	r28, 0x36	; 54
     970:	ff af       	std	Y+63, r31	; 0x3f
     972:	ee af       	std	Y+62, r30	; 0x3e
     974:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     976:	e6 96       	adiw	r28, 0x36	; 54
     978:	ae ad       	ldd	r26, Y+62	; 0x3e
     97a:	bf ad       	ldd	r27, Y+63	; 0x3f
     97c:	e6 97       	sbiw	r28, 0x36	; 54
     97e:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     980:	f8 01       	movw	r30, r16
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	92 81       	ldd	r25, Z+2	; 0x02
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	9c 93       	st	X, r25
     98a:	8e 93       	st	-X, r24
     98c:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     98e:	e4 96       	adiw	r28, 0x34	; 52
     990:	2f ad       	ldd	r18, Y+63	; 0x3f
     992:	e4 97       	sbiw	r28, 0x34	; 52
     994:	22 23       	and	r18, r18
     996:	e1 f0       	breq	.+56     	; 0x9d0 <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     998:	a5 96       	adiw	r28, 0x25	; 37
     99a:	8e ad       	ldd	r24, Y+62	; 0x3e
     99c:	9f ad       	ldd	r25, Y+63	; 0x3f
     99e:	a5 97       	sbiw	r28, 0x25	; 37
     9a0:	14 96       	adiw	r26, 0x04	; 4
     9a2:	9c 93       	st	X, r25
     9a4:	8e 93       	st	-X, r24
     9a6:	13 97       	sbiw	r26, 0x03	; 3
     9a8:	fe 01       	movw	r30, r28
     9aa:	ed 59       	subi	r30, 0x9D	; 157
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	e4 96       	adiw	r28, 0x34	; 52
     9b2:	3f ad       	ldd	r19, Y+63	; 0x3f
     9b4:	e4 97       	sbiw	r28, 0x34	; 52
     9b6:	23 17       	cp	r18, r19
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	81 93       	st	Z+, r24
     9c0:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     9c2:	2f 5f       	subi	r18, 0xFF	; 255
     9c4:	f5 cf       	rjmp	.-22     	; 0x9b0 <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     9c6:	31 50       	subi	r19, 0x01	; 1
     9c8:	e4 96       	adiw	r28, 0x34	; 52
     9ca:	3f af       	std	Y+63, r19	; 0x3f
     9cc:	e4 97       	sbiw	r28, 0x34	; 52
     9ce:	17 c1       	rjmp	.+558    	; 0xbfe <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     9d0:	48 14       	cp	r4, r8
     9d2:	59 04       	cpc	r5, r9
     9d4:	6a 04       	cpc	r6, r10
     9d6:	7b 04       	cpc	r7, r11
     9d8:	08 f4       	brcc	.+2      	; 0x9dc <USB_ProcessHIDReport+0x46e>
     9da:	11 c1       	rjmp	.+546    	; 0xbfe <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     9dc:	e6 96       	adiw	r28, 0x36	; 54
     9de:	ae ad       	ldd	r26, Y+62	; 0x3e
     9e0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9e2:	e6 97       	sbiw	r28, 0x36	; 54
     9e4:	14 96       	adiw	r26, 0x04	; 4
     9e6:	9c 92       	st	X, r9
     9e8:	8e 92       	st	-X, r8
     9ea:	13 97       	sbiw	r26, 0x03	; 3
     9ec:	bf ef       	ldi	r27, 0xFF	; 255
     9ee:	8b 1a       	sub	r8, r27
     9f0:	9b 0a       	sbc	r9, r27
     9f2:	ab 0a       	sbc	r10, r27
     9f4:	bb 0a       	sbc	r11, r27
     9f6:	03 c1       	rjmp	.+518    	; 0xbfe <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     9f8:	e6 96       	adiw	r28, 0x36	; 54
     9fa:	2e ad       	ldd	r18, Y+62	; 0x3e
     9fc:	3f ad       	ldd	r19, Y+63	; 0x3f
     9fe:	e6 97       	sbiw	r28, 0x36	; 54
     a00:	21 15       	cp	r18, r1
     a02:	31 05       	cpc	r19, r1
     a04:	09 f4       	brne	.+2      	; 0xa08 <USB_ProcessHIDReport+0x49a>
     a06:	19 c1       	rjmp	.+562    	; 0xc3a <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     a08:	d9 01       	movw	r26, r18
     a0a:	15 96       	adiw	r26, 0x05	; 5
     a0c:	0d 90       	ld	r0, X+
     a0e:	bc 91       	ld	r27, X
     a10:	a0 2d       	mov	r26, r0
     a12:	e6 96       	adiw	r28, 0x36	; 54
     a14:	bf af       	std	Y+63, r27	; 0x3f
     a16:	ae af       	std	Y+62, r26	; 0x3e
     a18:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     a1a:	f1 c0       	rjmp	.+482    	; 0xbfe <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     a1c:	da 01       	movw	r26, r20
     a1e:	fa e2       	ldi	r31, 0x2A	; 42
     a20:	f8 9f       	mul	r31, r24
     a22:	a0 0d       	add	r26, r0
     a24:	b1 1d       	adc	r27, r1
     a26:	11 24       	eor	r1, r1
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	fe 01       	movw	r30, r28
     a2c:	f9 96       	adiw	r30, 0x39	; 57
     a2e:	8a e2       	ldi	r24, 0x2A	; 42
     a30:	01 90       	ld	r0, Z+
     a32:	0d 92       	st	X+, r0
     a34:	8a 95       	dec	r24
     a36:	e1 f7       	brne	.-8      	; 0xa30 <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     a38:	c1 58       	subi	r28, 0x81	; 129
     a3a:	df 4f       	sbci	r29, 0xFF	; 255
     a3c:	88 81       	ld	r24, Y
     a3e:	99 81       	ldd	r25, Y+1	; 0x01
     a40:	aa 81       	ldd	r26, Y+2	; 0x02
     a42:	bb 81       	ldd	r27, Y+3	; 0x03
     a44:	cf 57       	subi	r28, 0x7F	; 127
     a46:	d0 40       	sbci	r29, 0x00	; 0
     a48:	89 2b       	or	r24, r25
     a4a:	8a 2b       	or	r24, r26
     a4c:	8b 2b       	or	r24, r27
     a4e:	09 f4       	brne	.+2      	; 0xa52 <USB_ProcessHIDReport+0x4e4>
     a50:	8f c0       	rjmp	.+286    	; 0xb70 <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     a52:	3f 5f       	subi	r19, 0xFF	; 255
     a54:	f8 01       	movw	r30, r16
     a56:	82 8d       	ldd	r24, Z+26	; 0x1a
     a58:	38 17       	cp	r19, r24
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <USB_ProcessHIDReport+0x4f0>
     a5c:	d0 c0       	rjmp	.+416    	; 0xbfe <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     a5e:	f8 01       	movw	r30, r16
     a60:	de 01       	movw	r26, r28
     a62:	af 5b       	subi	r26, 0xBF	; 191
     a64:	bf 4f       	sbci	r27, 0xFF	; 255
     a66:	8a e1       	ldi	r24, 0x1A	; 26
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     a70:	dd ae       	std	Y+61, r13	; 0x3d
     a72:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     a74:	e6 96       	adiw	r28, 0x36	; 54
     a76:	ee ad       	ldd	r30, Y+62	; 0x3e
     a78:	ff ad       	ldd	r31, Y+63	; 0x3f
     a7a:	e6 97       	sbiw	r28, 0x36	; 54
     a7c:	21 96       	adiw	r28, 0x01	; 1
     a7e:	ff af       	std	Y+63, r31	; 0x3f
     a80:	ee af       	std	Y+62, r30	; 0x3e
     a82:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     a84:	d8 01       	movw	r26, r16
     a86:	5b 96       	adiw	r26, 0x1b	; 27
     a88:	8c 91       	ld	r24, X
     a8a:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     a8c:	e4 96       	adiw	r28, 0x34	; 52
     a8e:	bf ad       	ldd	r27, Y+63	; 0x3f
     a90:	e4 97       	sbiw	r28, 0x34	; 52
     a92:	bb 23       	and	r27, r27
     a94:	e1 f0       	breq	.+56     	; 0xace <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     a96:	a5 96       	adiw	r28, 0x25	; 37
     a98:	8e ad       	ldd	r24, Y+62	; 0x3e
     a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
     a9c:	a5 97       	sbiw	r28, 0x25	; 37
     a9e:	26 96       	adiw	r28, 0x06	; 6
     aa0:	9f af       	std	Y+63, r25	; 0x3f
     aa2:	8e af       	std	Y+62, r24	; 0x3e
     aa4:	26 97       	sbiw	r28, 0x06	; 6
     aa6:	fe 01       	movw	r30, r28
     aa8:	ed 59       	subi	r30, 0x9D	; 157
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     aac:	a1 e0       	ldi	r26, 0x01	; 1
     aae:	e4 96       	adiw	r28, 0x34	; 52
     ab0:	8f ad       	ldd	r24, Y+63	; 0x3f
     ab2:	e4 97       	sbiw	r28, 0x34	; 52
     ab4:	a8 17       	cp	r26, r24
     ab6:	31 f0       	breq	.+12     	; 0xac4 <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	81 93       	st	Z+, r24
     abe:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     ac0:	af 5f       	subi	r26, 0xFF	; 255
     ac2:	f5 cf       	rjmp	.-22     	; 0xaae <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	e4 96       	adiw	r28, 0x34	; 52
     ac8:	8f af       	std	Y+63, r24	; 0x3f
     aca:	e4 97       	sbiw	r28, 0x34	; 52
     acc:	0e c0       	rjmp	.+28     	; 0xaea <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ace:	48 14       	cp	r4, r8
     ad0:	59 04       	cpc	r5, r9
     ad2:	6a 04       	cpc	r6, r10
     ad4:	7b 04       	cpc	r7, r11
     ad6:	48 f0       	brcs	.+18     	; 0xaea <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     ad8:	26 96       	adiw	r28, 0x06	; 6
     ada:	9f ae       	std	Y+63, r9	; 0x3f
     adc:	8e ae       	std	Y+62, r8	; 0x3e
     ade:	26 97       	sbiw	r28, 0x06	; 6
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	89 1a       	sub	r8, r25
     ae4:	99 0a       	sbc	r9, r25
     ae6:	a9 0a       	sbc	r10, r25
     ae8:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     aea:	20 38       	cpi	r18, 0x80	; 128
     aec:	11 f4       	brne	.+4      	; 0xaf2 <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     aee:	1b ae       	std	Y+59, r1	; 0x3b
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     af2:	20 39       	cpi	r18, 0x90	; 144
     af4:	19 f4       	brne	.+6      	; 0xafc <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     af6:	a1 e0       	ldi	r26, 0x01	; 1
     af8:	ab af       	std	Y+59, r26	; 0x3b
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     afc:	b2 e0       	ldi	r27, 0x02	; 2
     afe:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     b00:	8b ad       	ldd	r24, Y+59	; 0x3b
     b02:	e8 96       	adiw	r28, 0x38	; 56
     b04:	ee ad       	ldd	r30, Y+62	; 0x3e
     b06:	ff ad       	ldd	r31, Y+63	; 0x3f
     b08:	e8 97       	sbiw	r28, 0x38	; 56
     b0a:	e8 0f       	add	r30, r24
     b0c:	f1 1d       	adc	r31, r1
     b0e:	e8 0f       	add	r30, r24
     b10:	f1 1d       	adc	r31, r1
     b12:	81 81       	ldd	r24, Z+1	; 0x01
     b14:	92 81       	ldd	r25, Z+2	; 0x02
     b16:	9a af       	std	Y+58, r25	; 0x3a
     b18:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     b1a:	d8 01       	movw	r26, r16
     b1c:	bc 91       	ld	r27, X
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	92 81       	ldd	r25, Z+2	; 0x02
     b22:	8b 0f       	add	r24, r27
     b24:	91 1d       	adc	r25, r1
     b26:	92 83       	std	Z+2, r25	; 0x02
     b28:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b2a:	8b ad       	ldd	r24, Y+59	; 0x3b
     b2c:	e8 96       	adiw	r28, 0x38	; 56
     b2e:	ee ad       	ldd	r30, Y+62	; 0x3e
     b30:	ff ad       	ldd	r31, Y+63	; 0x3f
     b32:	e8 97       	sbiw	r28, 0x38	; 56
     b34:	e8 0f       	add	r30, r24
     b36:	f1 1d       	adc	r31, r1
     b38:	e8 0f       	add	r30, r24
     b3a:	f1 1d       	adc	r31, r1
     b3c:	ed 96       	adiw	r28, 0x3d	; 61
     b3e:	ae ad       	ldd	r26, Y+62	; 0x3e
     b40:	bf ad       	ldd	r27, Y+63	; 0x3f
     b42:	ed 97       	sbiw	r28, 0x3d	; 61
     b44:	8d 91       	ld	r24, X+
     b46:	9c 91       	ld	r25, X
     b48:	01 80       	ldd	r0, Z+1	; 0x01
     b4a:	f2 81       	ldd	r31, Z+2	; 0x02
     b4c:	e0 2d       	mov	r30, r0
     b4e:	e8 17       	cp	r30, r24
     b50:	f9 07       	cpc	r31, r25
     b52:	08 f4       	brcc	.+2      	; 0xb56 <USB_ProcessHIDReport+0x5e8>
     b54:	fc 01       	movw	r30, r24
     b56:	ed 96       	adiw	r28, 0x3d	; 61
     b58:	ae ad       	ldd	r26, Y+62	; 0x3e
     b5a:	bf ad       	ldd	r27, Y+63	; 0x3f
     b5c:	ed 97       	sbiw	r28, 0x3d	; 61
     b5e:	ed 93       	st	X+, r30
     b60:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     b62:	fa 01       	movw	r30, r20
     b64:	80 81       	ld	r24, Z
     b66:	84 31       	cpi	r24, 0x14	; 20
     b68:	09 f0       	breq	.+2      	; 0xb6c <USB_ProcessHIDReport+0x5fe>
     b6a:	58 cf       	rjmp	.-336    	; 0xa1c <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	6a c0       	rjmp	.+212    	; 0xc44 <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     b70:	ce 01       	movw	r24, r28
     b72:	c9 96       	adiw	r24, 0x39	; 57
     b74:	c8 57       	subi	r28, 0x78	; 120
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	28 83       	st	Y, r18
     b7a:	c8 58       	subi	r28, 0x88	; 136
     b7c:	d0 40       	sbci	r29, 0x00	; 0
     b7e:	c9 57       	subi	r28, 0x79	; 121
     b80:	df 4f       	sbci	r29, 0xFF	; 255
     b82:	38 83       	st	Y, r19
     b84:	c7 58       	subi	r28, 0x87	; 135
     b86:	d0 40       	sbci	r29, 0x00	; 0
     b88:	c5 57       	subi	r28, 0x75	; 117
     b8a:	df 4f       	sbci	r29, 0xFF	; 255
     b8c:	48 83       	st	Y, r20
     b8e:	cb 58       	subi	r28, 0x8B	; 139
     b90:	d0 40       	sbci	r29, 0x00	; 0
     b92:	c4 57       	subi	r28, 0x74	; 116
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	58 83       	st	Y, r21
     b98:	cc 58       	subi	r28, 0x8C	; 140
     b9a:	d0 40       	sbci	r29, 0x00	; 0
     b9c:	c7 57       	subi	r28, 0x77	; 119
     b9e:	df 4f       	sbci	r29, 0xFF	; 255
     ba0:	68 83       	st	Y, r22
     ba2:	c9 58       	subi	r28, 0x89	; 137
     ba4:	d0 40       	sbci	r29, 0x00	; 0
     ba6:	c6 57       	subi	r28, 0x76	; 118
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	78 83       	st	Y, r23
     bac:	ca 58       	subi	r28, 0x8A	; 138
     bae:	d0 40       	sbci	r29, 0x00	; 0
     bb0:	d4 dc       	rcall	.-1624   	; 0x55a <CALLBACK_HIDParser_FilterHIDReportItem>
     bb2:	c8 57       	subi	r28, 0x78	; 120
     bb4:	df 4f       	sbci	r29, 0xFF	; 255
     bb6:	28 81       	ld	r18, Y
     bb8:	c8 58       	subi	r28, 0x88	; 136
     bba:	d0 40       	sbci	r29, 0x00	; 0
     bbc:	c9 57       	subi	r28, 0x79	; 121
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	38 81       	ld	r19, Y
     bc2:	c7 58       	subi	r28, 0x87	; 135
     bc4:	d0 40       	sbci	r29, 0x00	; 0
     bc6:	c5 57       	subi	r28, 0x75	; 117
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	48 81       	ld	r20, Y
     bcc:	cb 58       	subi	r28, 0x8B	; 139
     bce:	d0 40       	sbci	r29, 0x00	; 0
     bd0:	c4 57       	subi	r28, 0x74	; 116
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	58 81       	ld	r21, Y
     bd6:	cc 58       	subi	r28, 0x8C	; 140
     bd8:	d0 40       	sbci	r29, 0x00	; 0
     bda:	c7 57       	subi	r28, 0x77	; 119
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	68 81       	ld	r22, Y
     be0:	c9 58       	subi	r28, 0x89	; 137
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	c6 57       	subi	r28, 0x76	; 118
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	78 81       	ld	r23, Y
     bea:	ca 58       	subi	r28, 0x8A	; 138
     bec:	d0 40       	sbci	r29, 0x00	; 0
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <USB_ProcessHIDReport+0x686>
     bf2:	2f cf       	rjmp	.-418    	; 0xa52 <USB_ProcessHIDReport+0x4e4>
     bf4:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
     bf6:	8c 91       	ld	r24, X
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	8c 93       	st	X, r24
     bfc:	2a cf       	rjmp	.-428    	; 0xa52 <USB_ProcessHIDReport+0x4e4>
     bfe:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     c00:	8f ad       	ldd	r24, Y+63	; 0x3f
     c02:	e9 97       	sbiw	r28, 0x39	; 57
     c04:	8c 70       	andi	r24, 0x0C	; 12
     c06:	09 f0       	breq	.+2      	; 0xc0a <USB_ProcessHIDReport+0x69c>
     c08:	1d cd       	rjmp	.-1478   	; 0x644 <USB_ProcessHIDReport+0xd6>
     c0a:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     c0c:	51 2c       	mov	r5, r1
     c0e:	32 01       	movw	r6, r4
     c10:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     c12:	91 2c       	mov	r9, r1
     c14:	54 01       	movw	r10, r8
     c16:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     c18:	1f ae       	std	Y+63, r1	; 0x3f
     c1a:	e4 97       	sbiw	r28, 0x34	; 52
     c1c:	13 cd       	rjmp	.-1498   	; 0x644 <USB_ProcessHIDReport+0xd6>
     c1e:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     c20:	8c 91       	ld	r24, X
     c22:	81 11       	cpse	r24, r1
     c24:	0c c0       	rjmp	.+24     	; 0xc3e <USB_ProcessHIDReport+0x6d0>
     c26:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     c28:	0d c0       	rjmp	.+26     	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c2a:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c32:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c36:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c3a:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <USB_ProcessHIDReport+0x6d6>
     c42:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     c44:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     c46:	df 4f       	sbci	r29, 0xFF	; 255
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	bf 90       	pop	r11
     c64:	af 90       	pop	r10
     c66:	9f 90       	pop	r9
     c68:	8f 90       	pop	r8
     c6a:	7f 90       	pop	r7
     c6c:	6f 90       	pop	r6
     c6e:	5f 90       	pop	r5
     c70:	4f 90       	pop	r4
     c72:	3f 90       	pop	r3
     c74:	2f 90       	pop	r2
     c76:	08 95       	ret

00000c78 <USB_GetHIDReportItemInfo>:
     c78:	ef 92       	push	r14

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     c86:	30 97       	sbiw	r30, 0x00	; 0
     c88:	09 f4       	brne	.+2      	; 0xc8c <USB_GetHIDReportItemInfo+0x14>
     c8a:	4c c0       	rjmp	.+152    	; 0xd24 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     c8c:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     c8e:	d0 81       	ld	r29, Z
     c90:	c1 81       	ldd	r28, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     c92:	25 81       	ldd	r18, Z+5	; 0x05
     c94:	22 23       	and	r18, r18
     c96:	29 f0       	breq	.+10     	; 0xca2 <USB_GetHIDReportItemInfo+0x2a>
	{
		if (ReportItem->ReportID != ReportData[0])
     c98:	dc 01       	movw	r26, r24
     c9a:	4c 91       	ld	r20, X
     c9c:	24 13       	cpse	r18, r20
     c9e:	42 c0       	rjmp	.+132    	; 0xd24 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     ca0:	01 96       	adiw	r24, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
     ca2:	42 a1       	ldd	r20, Z+34	; 0x22
     ca4:	53 a1       	ldd	r21, Z+35	; 0x23
     ca6:	64 a1       	ldd	r22, Z+36	; 0x24
     ca8:	75 a1       	ldd	r23, Z+37	; 0x25
     caa:	46 a3       	std	Z+38, r20	; 0x26
     cac:	57 a3       	std	Z+39, r21	; 0x27
     cae:	60 a7       	std	Z+40, r22	; 0x28
     cb0:	71 a7       	std	Z+41, r23	; 0x29
	ReportItem->Value = 0;
     cb2:	12 a2       	std	Z+34, r1	; 0x22
     cb4:	13 a2       	std	Z+35, r1	; 0x23
     cb6:	14 a2       	std	Z+36, r1	; 0x24
     cb8:	15 a2       	std	Z+37, r1	; 0x25
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     cba:	ad 2f       	mov	r26, r29
     cbc:	bc 2f       	mov	r27, r28
	uint32_t BitMask      = (1 << 0);
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	7d 01       	movw	r14, r26
     cc8:	e3 0e       	add	r14, r19
     cca:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     ccc:	ea 16       	cp	r14, r26
     cce:	fb 06       	cpc	r15, r27
     cd0:	39 f1       	breq	.+78     	; 0xd20 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     cd2:	9d 01       	movw	r18, r26
     cd4:	c3 e0       	ldi	r28, 0x03	; 3
     cd6:	36 95       	lsr	r19
     cd8:	27 95       	ror	r18
     cda:	ca 95       	dec	r28
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <USB_GetHIDReportItemInfo+0x5e>
     cde:	28 0f       	add	r18, r24
     ce0:	39 1f       	adc	r19, r25
     ce2:	e9 01       	movw	r28, r18
     ce4:	28 81       	ld	r18, Y
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	8d 01       	movw	r16, r26
     cea:	07 70       	andi	r16, 0x07	; 7
     cec:	11 27       	eor	r17, r17
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USB_GetHIDReportItemInfo+0x7c>
     cf0:	35 95       	asr	r19
     cf2:	27 95       	ror	r18
     cf4:	0a 95       	dec	r16
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <USB_GetHIDReportItemInfo+0x78>
     cf8:	20 ff       	sbrs	r18, 0
     cfa:	0c c0       	rjmp	.+24     	; 0xd14 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     cfc:	02 a1       	ldd	r16, Z+34	; 0x22
     cfe:	13 a1       	ldd	r17, Z+35	; 0x23
     d00:	24 a1       	ldd	r18, Z+36	; 0x24
     d02:	35 a1       	ldd	r19, Z+37	; 0x25
     d04:	04 2b       	or	r16, r20
     d06:	15 2b       	or	r17, r21
     d08:	26 2b       	or	r18, r22
     d0a:	37 2b       	or	r19, r23
     d0c:	02 a3       	std	Z+34, r16	; 0x22
     d0e:	13 a3       	std	Z+35, r17	; 0x23
     d10:	24 a3       	std	Z+36, r18	; 0x24
     d12:	35 a3       	std	Z+37, r19	; 0x25

		CurrentBit++;
     d14:	11 96       	adiw	r26, 0x01	; 1
		BitMask <<= 1;
     d16:	44 0f       	add	r20, r20
     d18:	55 1f       	adc	r21, r21
     d1a:	66 1f       	adc	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	d6 cf       	rjmp	.-84     	; 0xccc <USB_GetHIDReportItemInfo+0x54>
	}

	return true;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <USB_GetHIDReportItemInfo+0xae>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
     d24:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     d34:	fc 01       	movw	r30, r24
     d36:	e4 0f       	add	r30, r20
     d38:	f1 1d       	adc	r31, r1
     d3a:	e4 0f       	add	r30, r20
     d3c:	f1 1d       	adc	r31, r1
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	df 01       	movw	r26, r30
     d44:	a2 0f       	add	r26, r18
     d46:	b3 1f       	adc	r27, r19
     d48:	af 56       	subi	r26, 0x6F	; 111
     d4a:	bc 4f       	sbci	r27, 0xFC	; 252
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     d4c:	4d 91       	ld	r20, X+
     d4e:	5c 91       	ld	r21, X
     d50:	dc 01       	movw	r26, r24
     d52:	a2 0f       	add	r26, r18
     d54:	b3 1f       	adc	r27, r19
     d56:	a0 57       	subi	r26, 0x70	; 112
     d58:	bc 4f       	sbci	r27, 0xFC	; 252

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     d5a:	7c 91       	ld	r23, X
     d5c:	76 13       	cpse	r23, r22
     d5e:	12 c0       	rjmp	.+36     	; 0xd84 <USB_GetHIDReportSize+0x50>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	ca 01       	movw	r24, r20
     d66:	87 70       	andi	r24, 0x07	; 7
     d68:	99 27       	eor	r25, r25
     d6a:	89 2b       	or	r24, r25
     d6c:	11 f4       	brne	.+4      	; 0xd72 <USB_GetHIDReportSize+0x3e>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	ca 01       	movw	r24, r20
     d74:	43 e0       	ldi	r20, 0x03	; 3
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	4a 95       	dec	r20
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <USB_GetHIDReportSize+0x42>
     d7e:	82 0f       	add	r24, r18
     d80:	93 1f       	adc	r25, r19
     d82:	08 95       	ret
     d84:	29 5f       	subi	r18, 0xF9	; 249
     d86:	3f 4f       	sbci	r19, 0xFF	; 255

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     d88:	26 34       	cpi	r18, 0x46	; 70
     d8a:	31 05       	cpc	r19, r1
     d8c:	d1 f6       	brne	.-76     	; 0xd42 <USB_GetHIDReportSize+0xe>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
}
     d92:	08 95       	ret

00000d94 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d94:	80 91 9e 00 	lds	r24, 0x009E
     d98:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d9a:	90 91 a0 00 	lds	r25, 0x00A0
     d9e:	9d 7f       	andi	r25, 0xFD	; 253
     da0:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     da4:	90 91 9e 00 	lds	r25, 0x009E
     da8:	92 60       	ori	r25, 0x02	; 2
     daa:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     dae:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     db2:	91 fd       	sbrc	r25, 1
     db4:	fc cf       	rjmp	.-8      	; 0xdae <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     db6:	90 91 9e 00 	lds	r25, 0x009E
     dba:	91 60       	ori	r25, 0x01	; 1
     dbc:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     dc0:	10 92 04 05 	sts	0x0504, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     dc4:	90 91 a0 00 	lds	r25, 0x00A0
     dc8:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     dca:	20 91 a0 00 	lds	r18, 0x00A0
     dce:	2f 7d       	andi	r18, 0xDF	; 223
     dd0:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dd4:	20 91 9f 00 	lds	r18, 0x009F
     dd8:	2f 7d       	andi	r18, 0xDF	; 223
     dda:	20 93 9f 00 	sts	0x009F, r18
     dde:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     de0:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     de4:	35 ff       	sbrs	r19, 5
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     de8:	20 91 9f 00 	lds	r18, 0x009F
     dec:	2f 7d       	andi	r18, 0xDF	; 223
     dee:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     df2:	20 91 9f 00 	lds	r18, 0x009F
     df6:	2d 7f       	andi	r18, 0xFD	; 253
     df8:	20 93 9f 00 	sts	0x009F, r18
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dfe:	ef ec       	ldi	r30, 0xCF	; 207
     e00:	f7 e0       	ldi	r31, 0x07	; 7
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <USB_Host_ResetDevice+0x6e>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <USB_Host_ResetDevice+0x74>
     e08:	00 00       	nop
     e0a:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     e0c:	49 f7       	brne	.-46     	; 0xde0 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     e0e:	99 23       	and	r25, r25
     e10:	29 f0       	breq	.+10     	; 0xe1c <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e12:	90 91 a0 00 	lds	r25, 0x00A0
     e16:	90 62       	ori	r25, 0x20	; 32
     e18:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     e1c:	81 11       	cpse	r24, r1
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     e20:	80 91 9e 00 	lds	r24, 0x009E
     e24:	8e 7f       	andi	r24, 0xFE	; 254
     e26:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e2a:	80 91 a0 00 	lds	r24, 0x00A0
     e2e:	82 60       	ori	r24, 0x02	; 2
     e30:	80 93 a0 00 	sts	0x00A0, r24
     e34:	08 95       	ret

00000e36 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e36:	20 91 9e 00 	lds	r18, 0x009E
     e3a:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e3c:	90 91 a0 00 	lds	r25, 0x00A0
     e40:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e42:	30 91 a0 00 	lds	r19, 0x00A0
     e46:	3f 7d       	andi	r19, 0xDF	; 223
     e48:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e4c:	30 91 9f 00 	lds	r19, 0x009F
     e50:	3f 7d       	andi	r19, 0xDF	; 223
     e52:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e56:	30 91 9e 00 	lds	r19, 0x009E
     e5a:	31 60       	ori	r19, 0x01	; 1
     e5c:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     e60:	88 23       	and	r24, r24
     e62:	39 f1       	breq	.+78     	; 0xeb2 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e64:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e68:	35 ff       	sbrs	r19, 5
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e6c:	30 91 9f 00 	lds	r19, 0x009F
     e70:	3f 7d       	andi	r19, 0xDF	; 223
     e72:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     e76:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     e78:	30 91 0e 05 	lds	r19, 0x050E
     e7c:	31 30       	cpi	r19, 0x01	; 1
     e7e:	c1 f0       	breq	.+48     	; 0xeb0 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     e80:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     e84:	34 ff       	sbrs	r19, 4
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e88:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e8c:	80 91 a6 00 	lds	r24, 0x00A6
     e90:	8f 7e       	andi	r24, 0xEF	; 239
     e92:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     e96:	82 e0       	ldi	r24, 0x02	; 2

			break;
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e9a:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     e9e:	31 ff       	sbrs	r19, 1
     ea0:	df cf       	rjmp	.-66     	; 0xe60 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     ea2:	80 91 a6 00 	lds	r24, 0x00A6
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     eac:	83 e0       	ldi	r24, 0x03	; 3

			break;
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     eb0:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     eb2:	21 11       	cpse	r18, r1
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     eb6:	20 91 9e 00 	lds	r18, 0x009E
     eba:	2e 7f       	andi	r18, 0xFE	; 254
     ebc:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     ec0:	99 23       	and	r25, r25
     ec2:	29 f0       	breq	.+10     	; 0xece <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ec4:	90 91 a0 00 	lds	r25, 0x00A0
     ec8:	90 62       	ori	r25, 0x20	; 32
     eca:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     ece:	08 95       	ret

00000ed0 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	28 97       	sbiw	r28, 0x08	; 8
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ee8:	80 91 0e 05 	lds	r24, 0x050E
     eec:	85 30       	cpi	r24, 0x05	; 5
     eee:	09 f4       	brne	.+2      	; 0xef2 <USB_Host_ProcessNextHostState+0x22>
     ef0:	9c c0       	rjmp	.+312    	; 0x102a <USB_Host_ProcessNextHostState+0x15a>
     ef2:	68 f4       	brcc	.+26     	; 0xf0e <USB_Host_ProcessNextHostState+0x3e>
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	e1 f1       	breq	.+120    	; 0xf70 <USB_Host_ProcessNextHostState+0xa0>
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <USB_Host_ProcessNextHostState+0x30>
     efa:	88 23       	and	r24, r24
     efc:	d9 f0       	breq	.+54     	; 0xf34 <USB_Host_ProcessNextHostState+0x64>
     efe:	ff c0       	rjmp	.+510    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	09 f4       	brne	.+2      	; 0xf06 <USB_Host_ProcessNextHostState+0x36>
     f04:	3f c0       	rjmp	.+126    	; 0xf84 <USB_Host_ProcessNextHostState+0xb4>
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	09 f4       	brne	.+2      	; 0xf0c <USB_Host_ProcessNextHostState+0x3c>
     f0a:	67 c0       	rjmp	.+206    	; 0xfda <USB_Host_ProcessNextHostState+0x10a>
     f0c:	f8 c0       	rjmp	.+496    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     f0e:	87 30       	cpi	r24, 0x07	; 7
     f10:	09 f4       	brne	.+2      	; 0xf14 <USB_Host_ProcessNextHostState+0x44>
     f12:	a6 c0       	rjmp	.+332    	; 0x1060 <USB_Host_ProcessNextHostState+0x190>
     f14:	08 f4       	brcc	.+2      	; 0xf18 <USB_Host_ProcessNextHostState+0x48>
     f16:	96 c0       	rjmp	.+300    	; 0x1044 <USB_Host_ProcessNextHostState+0x174>
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	09 f4       	brne	.+2      	; 0xf1e <USB_Host_ProcessNextHostState+0x4e>
     f1c:	bf c0       	rjmp	.+382    	; 0x109c <USB_Host_ProcessNextHostState+0x1cc>
     f1e:	89 30       	cpi	r24, 0x09	; 9
     f20:	09 f0       	breq	.+2      	; 0xf24 <USB_Host_ProcessNextHostState+0x54>
     f22:	ed c0       	rjmp	.+474    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     f2a:	8a e0       	ldi	r24, 0x0A	; 10
     f2c:	80 93 0e 05 	sts	0x050E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     f30:	8b da       	rcall	.-2794   	; 0x448 <EVENT_USB_Host_DeviceEnumerationComplete>
     f32:	e5 c0       	rjmp	.+458    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
			break;
     f34:	00 91 02 05 	lds	r16, 0x0502
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     f38:	10 91 03 05 	lds	r17, 0x0503
     f3c:	01 15       	cp	r16, r1
     f3e:	11 05       	cpc	r17, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <USB_Host_ProcessNextHostState+0x74>
     f42:	dd c0       	rjmp	.+442    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     f44:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f46:	77 df       	rcall	.-274    	; 0xe36 <USB_Host_WaitMS>
     f48:	88 23       	and	r24, r24
     f4a:	31 f0       	breq	.+12     	; 0xf58 <USB_Host_ProcessNextHostState+0x88>
     f4c:	90 91 01 05 	lds	r25, 0x0501
				{
					USB_HostState = PostWaitState;
     f50:	90 93 0e 05 	sts	0x050E, r25
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	c5 c0       	rjmp	.+394    	; 0x10e2 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     f58:	01 50       	subi	r16, 0x01	; 1
					break;
     f5a:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     f5c:	10 93 03 05 	sts	0x0503, r17
     f60:	00 93 02 05 	sts	0x0502, r16
     f64:	01 2b       	or	r16, r17
     f66:	09 f0       	breq	.+2      	; 0xf6a <USB_Host_ProcessNextHostState+0x9a>
     f68:	ca c0       	rjmp	.+404    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     f6a:	80 91 01 05 	lds	r24, 0x0501
				  USB_HostState = PostWaitState;
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <USB_Host_ProcessNextHostState+0xae>
     f70:	88 ee       	ldi	r24, 0xE8	; 232
     f72:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     f74:	90 93 03 05 	sts	0x0503, r25
     f78:	80 93 02 05 	sts	0x0502, r24
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	80 93 0e 05 	sts	0x050E, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     f82:	bd c0       	rjmp	.+378    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     f84:	80 91 02 05 	lds	r24, 0x0502
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     f88:	90 91 03 05 	lds	r25, 0x0503
     f8c:	9c 01       	movw	r18, r24
     f8e:	21 50       	subi	r18, 0x01	; 1
     f90:	31 09       	sbc	r19, r1
     f92:	30 93 03 05 	sts	0x0503, r19
     f96:	20 93 02 05 	sts	0x0502, r18
     f9a:	89 2b       	or	r24, r25
     f9c:	39 f0       	breq	.+14     	; 0xfac <USB_Host_ProcessNextHostState+0xdc>
     f9e:	8f ec       	ldi	r24, 0xCF	; 207
     fa0:	97 e0       	ldi	r25, 0x07	; 7
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <USB_Host_ProcessNextHostState+0xd2>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <USB_Host_ProcessNextHostState+0xd8>
     fa8:	00 00       	nop
     faa:	a9 c0       	rjmp	.+338    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
     fac:	77 98       	cbi	0x0e, 7	; 14
     fae:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     fb2:	80 61       	ori	r24, 0x10	; 16
     fb4:	80 93 d8 00 	sts	0x00D8, r24
     fb8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	80 93 dd 00 	sts	0x00DD, r24
     fc2:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     fc6:	80 61       	ori	r24, 0x10	; 16
     fc8:	80 93 d7 00 	sts	0x00D7, r24
     fcc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	80 93 dd 00 	sts	0x00DD, r24
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	d2 cf       	rjmp	.-92     	; 0xf7e <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     fda:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     fde:	80 ff       	sbrs	r24, 0
     fe0:	8e c0       	rjmp	.+284    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     fe2:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	80 93 9f 00 	sts	0x009F, r24
     fec:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	80 93 9f 00 	sts	0x009F, r24
     ff6:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ffa:	8d 7f       	andi	r24, 0xFD	; 253
     ffc:	80 93 df 00 	sts	0x00DF, r24
    1000:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	80 93 de 00 	sts	0x00DE, r24
    100a:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    100e:	81 60       	ori	r24, 0x01	; 1
    1010:	80 93 9e 00 	sts	0x009E, r24
    1014:	53 d1       	rcall	.+678    	; 0x12bc <Pipe_ClearPipes>
    1016:	10 92 0e 05 	sts	0x050E, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    101a:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	90 93 03 05 	sts	0x0503, r25
    1022:	80 93 02 05 	sts	0x0502, r24
    1026:	85 e0       	ldi	r24, 0x05	; 5
    1028:	0a c0       	rjmp	.+20     	; 0x103e <USB_Host_ProcessNextHostState+0x16e>
    102a:	b4 de       	rcall	.-664    	; 0xd94 <USB_Host_ResetDevice>
    102c:	10 92 0e 05 	sts	0x050E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1030:	88 ec       	ldi	r24, 0xC8	; 200
    1032:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1034:	90 93 03 05 	sts	0x0503, r25
    1038:	80 93 02 05 	sts	0x0502, r24
    103c:	86 e0       	ldi	r24, 0x06	; 6
    103e:	80 93 01 05 	sts	0x0501, r24
    1042:	5d c0       	rjmp	.+186    	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
    1044:	01 e0       	ldi	r16, 0x01	; 1
    1046:	20 e4       	ldi	r18, 0x40	; 64
    1048:	30 e0       	ldi	r19, 0x00	; 0
			break;
    104a:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	ae d0       	rcall	.+348    	; 0x11ae <Pipe_ConfigurePipe>
    1052:	81 11       	cpse	r24, r1
    1054:	03 c0       	rjmp	.+6      	; 0x105c <USB_Host_ProcessNextHostState+0x18c>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <USB_Host_ProcessNextHostState+0x212>
    105c:	87 e0       	ldi	r24, 0x07	; 7
    105e:	8f cf       	rjmp	.-226    	; 0xf7e <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1060:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1062:	e8 e1       	ldi	r30, 0x18	; 24
    1064:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1066:	a6 e0       	ldi	r26, 0x06	; 6
    1068:	b5 e0       	ldi	r27, 0x05	; 5
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    106a:	01 90       	ld	r0, Z+
    106c:	0d 92       	st	X+, r0
    106e:	8a 95       	dec	r24
    1070:	e1 f7       	brne	.-8      	; 0x106a <USB_Host_ProcessNextHostState+0x19a>
    1072:	10 92 a7 00 	sts	0x00A7, r1
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	78 d3       	rcall	.+1776   	; 0x176c <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    107c:	81 11       	cpse	r24, r1
    107e:	30 c0       	rjmp	.+96     	; 0x10e0 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1080:	88 85       	ldd	r24, Y+8	; 0x08
    1082:	80 93 17 01 	sts	0x0117, r24
    1086:	86 de       	rcall	.-756    	; 0xd94 <USB_Host_ResetDevice>
    1088:	10 92 0e 05 	sts	0x050E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    108c:	88 ec       	ldi	r24, 0xC8	; 200
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	90 93 03 05 	sts	0x0503, r25

			USB_Host_ResetDevice();
    1094:	80 93 02 05 	sts	0x0502, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	d1 cf       	rjmp	.-94     	; 0x103e <USB_Host_ProcessNextHostState+0x16e>
    109c:	20 91 17 01 	lds	r18, 0x0117
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	01 e0       	ldi	r16, 0x01	; 1
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    10aa:	81 d0       	rcall	.+258    	; 0x11ae <Pipe_ConfigurePipe>
    10ac:	88 23       	and	r24, r24
    10ae:	99 f2       	breq	.-90     	; 0x1056 <USB_Host_ProcessNextHostState+0x186>
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	e0 e2       	ldi	r30, 0x20	; 32
    10b4:	f1 e0       	ldi	r31, 0x01	; 1
    10b6:	a6 e0       	ldi	r26, 0x06	; 6
    10b8:	b5 e0       	ldi	r27, 0x05	; 5
    10ba:	01 90       	ld	r0, Z+
    10bc:	0d 92       	st	X+, r0
    10be:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <USB_Host_ProcessNextHostState+0x1ea>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	52 d3       	rcall	.+1700   	; 0x176c <USB_Host_SendControlRequest>
    10c8:	81 11       	cpse	r24, r1
    10ca:	0a c0       	rjmp	.+20     	; 0x10e0 <USB_Host_ProcessNextHostState+0x210>
    10cc:	10 92 0e 05 	sts	0x050E, r1
    10d0:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 03 05 	sts	0x0503, r25
    10d8:	80 93 02 05 	sts	0x0502, r24
    10dc:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    10de:	af cf       	rjmp	.-162    	; 0x103e <USB_Host_ProcessNextHostState+0x16e>
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	20 91 0e 05 	lds	r18, 0x050E
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	51 f0       	breq	.+20     	; 0x10fe <USB_Host_ProcessNextHostState+0x22e>
    10ea:	68 2f       	mov	r22, r24
    10ec:	89 2f       	mov	r24, r25
    10ee:	1d da       	rcall	.-3014   	; 0x52a <EVENT_USB_Host_DeviceEnumerationFailed>
    10f0:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 93 dd 00 	sts	0x00DD, r24
    10fa:	a0 d9       	rcall	.-3264   	; 0x43c <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    10fc:	63 d1       	rcall	.+710    	; 0x13c4 <USB_ResetInterface>
    10fe:	28 96       	adiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16

		USB_ResetInterface();
    1112:	08 95       	ret

00001114 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	7c 01       	movw	r14, r24
    1126:	8b 01       	movw	r16, r22
    1128:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    112a:	80 91 aa 00 	lds	r24, 0x00AA
    112e:	8f 7c       	andi	r24, 0xCF	; 207
    1130:	80 61       	ori	r24, 0x10	; 16
    1132:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1136:	00 d1       	rcall	.+512    	; 0x1338 <Pipe_WaitUntilReady>
    1138:	81 11       	cpse	r24, r1
    113a:	30 c0       	rjmp	.+96     	; 0x119c <Pipe_Read_Stream_LE+0x88>
    113c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    113e:	31 f0       	breq	.+12     	; 0x114c <Pipe_Read_Stream_LE+0x38>
    1140:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1142:	99 81       	ldd	r25, Y+1	; 0x01
    1144:	08 1b       	sub	r16, r24
    1146:	19 0b       	sbc	r17, r25
    1148:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    114a:	f9 1e       	adc	r15, r25
    114c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    114e:	d1 2c       	mov	r13, r1
    1150:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1152:	11 05       	cpc	r17, r1
    1154:	11 f1       	breq	.+68     	; 0x119a <Pipe_Read_Stream_LE+0x86>
    1156:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    115a:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <Pipe_Read_Stream_LE+0x70>
    115e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1162:	8e 77       	andi	r24, 0x7E	; 126
    1164:	80 93 a6 00 	sts	0x00A6, r24
    1168:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    116a:	41 f0       	breq	.+16     	; 0x117c <Pipe_Read_Stream_LE+0x68>
    116c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	8c 0d       	add	r24, r12
    1172:	9d 1d       	adc	r25, r13
    1174:	99 83       	std	Y+1, r25	; 0x01
    1176:	88 83       	st	Y, r24
    1178:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    117a:	10 c0       	rjmp	.+32     	; 0x119c <Pipe_Read_Stream_LE+0x88>
    117c:	dd d0       	rcall	.+442    	; 0x1338 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    117e:	88 23       	and	r24, r24
    1180:	39 f3       	breq	.-50     	; 0x1150 <Pipe_Read_Stream_LE+0x3c>
    1182:	0c c0       	rjmp	.+24     	; 0x119c <Pipe_Read_Stream_LE+0x88>
    1184:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1188:	f7 01       	movw	r30, r14
    118a:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    118c:	7f 01       	movw	r14, r30
    118e:	01 50       	subi	r16, 0x01	; 1
    1190:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1192:	ff ef       	ldi	r31, 0xFF	; 255
    1194:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1196:	df 0a       	sbc	r13, r31
    1198:	db cf       	rjmp	.-74     	; 0x1150 <Pipe_Read_Stream_LE+0x3c>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    119e:	cf 91       	pop	r28
}
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	08 95       	ret

000011ae <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    11ae:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    11b0:	e8 2f       	mov	r30, r24
    11b2:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    11b4:	87 ff       	sbrs	r24, 7
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <Pipe_ConfigurePipe+0xe>
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <Pipe_ConfigurePipe+0x10>
    11bc:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    11be:	e7 30       	cpi	r30, 0x07	; 7
    11c0:	10 f0       	brcs	.+4      	; 0x11c6 <Pipe_ConfigurePipe+0x18>
	  return false;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	5a c0       	rjmp	.+180    	; 0x127a <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    11c6:	61 11       	cpse	r22, r1
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    11ca:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    11cc:	90 e4       	ldi	r25, 0x40	; 64
    11ce:	69 9f       	mul	r22, r25
    11d0:	b0 01       	movw	r22, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	4f 70       	andi	r20, 0x0F	; 15
    11d6:	46 2b       	or	r20, r22
    11d8:	48 2b       	or	r20, r24
    11da:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11dc:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    11e0:	5e 13       	cpse	r21, r30
    11e2:	19 c0       	rjmp	.+50     	; 0x1216 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    11e4:	02 30       	cpi	r16, 0x02	; 2
    11e6:	10 f0       	brcs	.+4      	; 0x11ec <Pipe_ConfigurePipe+0x3e>
    11e8:	76 e0       	ldi	r23, 0x06	; 6
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <Pipe_ConfigurePipe+0x40>
    11ec:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    11ee:	88 e0       	ldi	r24, 0x08	; 8
    11f0:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    11f2:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    11f4:	82 17       	cp	r24, r18
    11f6:	93 07       	cpc	r25, r19
    11f8:	40 f0       	brcs	.+16     	; 0x120a <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    11fa:	86 2f       	mov	r24, r22
    11fc:	82 95       	swap	r24
    11fe:	80 7f       	andi	r24, 0xF0	; 240
    1200:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1202:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1204:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    120a:	65 30       	cpi	r22, 0x05	; 5
    120c:	b1 f3       	breq	.-20     	; 0x11fa <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    120e:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	ef cf       	rjmp	.-34     	; 0x11f4 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1216:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    121a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    121e:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1222:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1226:	81 fd       	sbrc	r24, 1
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    122a:	5f 5f       	subi	r21, 0xFF	; 255
    122c:	57 30       	cpi	r21, 0x07	; 7
    122e:	b1 f6       	brne	.-84     	; 0x11dc <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1230:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	21 c0       	rjmp	.+66     	; 0x127a <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1238:	90 91 a9 00 	lds	r25, 0x00A9
    123c:	9e 7f       	andi	r25, 0xFE	; 254
    123e:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1242:	90 91 ab 00 	lds	r25, 0x00AB
    1246:	9d 7f       	andi	r25, 0xFD	; 253
    1248:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    124c:	90 91 a9 00 	lds	r25, 0x00A9
    1250:	91 60       	ori	r25, 0x01	; 1
    1252:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1256:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    125a:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    125e:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    1262:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1266:	80 91 a9 00 	lds	r24, 0x00A9
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1270:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1274:	87 fd       	sbrc	r24, 7
    1276:	d9 cf       	rjmp	.-78     	; 0x122a <Pipe_ConfigurePipe+0x7c>
    1278:	a4 cf       	rjmp	.-184    	; 0x11c2 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	f6 2e       	mov	r15, r22
    128a:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	1f 15       	cp	r17, r15
    1290:	71 f0       	breq	.+28     	; 0x12ae <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
    1292:	88 81       	ld	r24, Y
    1294:	88 23       	and	r24, r24
    1296:	41 f0       	breq	.+16     	; 0x12a8 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    1298:	29 81       	ldd	r18, Y+1	; 0x01
    129a:	3a 81       	ldd	r19, Y+2	; 0x02
    129c:	0d 81       	ldd	r16, Y+5	; 0x05
    129e:	4b 81       	ldd	r20, Y+3	; 0x03
    12a0:	6c 81       	ldd	r22, Y+4	; 0x04
    12a2:	85 df       	rcall	.-246    	; 0x11ae <Pipe_ConfigurePipe>
    12a4:	88 23       	and	r24, r24
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <Pipe_ConfigurePipeTable+0x32>
    12a8:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    12aa:	26 96       	adiw	r28, 0x06	; 6
    12ac:	f0 cf       	rjmp	.-32     	; 0x128e <Pipe_ConfigurePipeTable+0x10>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
    12b0:	df 91       	pop	r29
}
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	08 95       	ret

000012bc <Pipe_ClearPipes>:
    12bc:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    12c0:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12c2:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    12c6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    12ca:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    12ce:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    12d2:	90 91 a9 00 	lds	r25, 0x00A9
    12d6:	9e 7f       	andi	r25, 0xFE	; 254
    12d8:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	87 30       	cpi	r24, 0x07	; 7
    12e0:	81 f7       	brne	.-32     	; 0x12c2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    12e2:	08 95       	ret

000012e4 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12e4:	90 91 a7 00 	lds	r25, 0x00A7
    12e8:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12ea:	20 91 aa 00 	lds	r18, 0x00AA
    12ee:	20 ff       	sbrs	r18, 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <Pipe_IsEndpointBound+0x12>
    12f2:	20 e8       	ldi	r18, 0x80	; 128
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <Pipe_IsEndpointBound+0x14>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12f8:	42 2f       	mov	r20, r18
    12fa:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    12fc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12fe:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1302:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1306:	27 ff       	sbrs	r18, 7
    1308:	0c c0       	rjmp	.+24     	; 0x1322 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    130a:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    130e:	53 2f       	mov	r21, r19
    1310:	5f 70       	andi	r21, 0x0F	; 15
    1312:	35 ff       	sbrs	r19, 5
    1314:	02 c0       	rjmp	.+4      	; 0x131a <Pipe_IsEndpointBound+0x36>
    1316:	20 e8       	ldi	r18, 0x80	; 128
    1318:	01 c0       	rjmp	.+2      	; 0x131c <Pipe_IsEndpointBound+0x38>
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    131e:	28 17       	cp	r18, r24
    1320:	49 f0       	breq	.+18     	; 0x1334 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1322:	9f 5f       	subi	r25, 0xFF	; 255
    1324:	97 30       	cpi	r25, 0x07	; 7
    1326:	59 f7       	brne	.-42     	; 0x12fe <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1328:	94 2f       	mov	r25, r20
    132a:	9f 70       	andi	r25, 0x0F	; 15
    132c:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1334:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1336:	08 95       	ret

00001338 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1338:	80 91 a2 00 	lds	r24, 0x00A2
    133c:	90 91 a3 00 	lds	r25, 0x00A3
    1340:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1342:	20 91 aa 00 	lds	r18, 0x00AA
    1346:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1348:	20 31       	cpi	r18, 0x10	; 16
    134a:	29 f4       	brne	.+10     	; 0x1356 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    134c:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1350:	20 ff       	sbrs	r18, 0
    1352:	05 c0       	rjmp	.+10     	; 0x135e <Pipe_WaitUntilReady+0x26>
    1354:	17 c0       	rjmp	.+46     	; 0x1384 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1356:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    135a:	22 fd       	sbrc	r18, 2
    135c:	13 c0       	rjmp	.+38     	; 0x1384 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    135e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1362:	21 fd       	sbrc	r18, 1
    1364:	11 c0       	rjmp	.+34     	; 0x1388 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1366:	20 91 0e 05 	lds	r18, 0x050E
    136a:	21 30       	cpi	r18, 0x01	; 1
    136c:	79 f0       	breq	.+30     	; 0x138c <Pipe_WaitUntilReady+0x54>
    136e:	20 91 a2 00 	lds	r18, 0x00A2
    1372:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1376:	28 17       	cp	r18, r24
    1378:	39 07       	cpc	r19, r25
    137a:	19 f3       	breq	.-58     	; 0x1342 <Pipe_WaitUntilReady+0xa>
    137c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    137e:	41 f0       	breq	.+16     	; 0x1390 <Pipe_WaitUntilReady+0x58>
    1380:	c9 01       	movw	r24, r18
    1382:	df cf       	rjmp	.-66     	; 0x1342 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1390:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1392:	08 95       	ret

00001394 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1394:	75 d0       	rcall	.+234    	; 0x1480 <USB_INT_DisableAllInterrupts>
    1396:	7c d0       	rcall	.+248    	; 0x1490 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1398:	e0 ee       	ldi	r30, 0xE0	; 224
    139a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    139c:	80 81       	ld	r24, Z
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
    13a2:	e8 ed       	ldi	r30, 0xD8	; 216
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 77       	andi	r24, 0x7F	; 127
    13aa:	80 83       	st	Z, r24
    13ac:	19 bc       	out	0x29, r1	; 41
    13ae:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13b0:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    13b2:	8c 91       	ld	r24, X
    13b4:	8e 7f       	andi	r24, 0xFE	; 254
    13b6:	8c 93       	st	X, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    13bc:	80 83       	st	Z, r24
    13be:	10 92 05 05 	sts	0x0505, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    13c2:	08 95       	ret

000013c4 <USB_ResetInterface>:
    13c4:	5d d0       	rcall	.+186    	; 0x1480 <USB_INT_DisableAllInterrupts>
    13c6:	64 d0       	rcall	.+200    	; 0x1490 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    13c8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    13cc:	8f 77       	andi	r24, 0x7F	; 127
    13ce:	80 93 d8 00 	sts	0x00D8, r24
    13d2:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	80 93 d8 00 	sts	0x00D8, r24
    13dc:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	80 93 d8 00 	sts	0x00D8, r24
    13e6:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    13ea:	8f 77       	andi	r24, 0x7F	; 127
    13ec:	80 93 d7 00 	sts	0x00D7, r24
    13f0:	8c e0       	ldi	r24, 0x0C	; 12
    13f2:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13f4:	8e e0       	ldi	r24, 0x0E	; 14
    13f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13f8:	09 b4       	in	r0, 0x29	; 41
    13fa:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    13fc:	fd cf       	rjmp	.-6      	; 0x13f8 <USB_ResetInterface+0x34>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 0e 05 	sts	0x050E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1404:	10 92 04 05 	sts	0x0504, r1
	USB_Host_ConfigurationNumber = 0;
    1408:	80 e4       	ldi	r24, 0x40	; 64
    140a:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    140e:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1412:	80 64       	ori	r24, 0x40	; 64
    1414:	80 93 d8 00 	sts	0x00D8, r24
    1418:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	80 93 dd 00 	sts	0x00DD, r24
    1422:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1426:	84 60       	ori	r24, 0x04	; 4
    1428:	80 93 dd 00 	sts	0x00DD, r24
    142c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1430:	8f 7e       	andi	r24, 0xEF	; 239
    1432:	80 93 d7 00 	sts	0x00D7, r24
    1436:	6f 9a       	sbi	0x0d, 7	; 13
    1438:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    143a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	80 93 de 00 	sts	0x00DE, r24
    1444:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1448:	84 60       	ori	r24, 0x04	; 4
    144a:	80 93 de 00 	sts	0x00DE, r24
    144e:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1452:	8e 7f       	andi	r24, 0xFE	; 254
    1454:	80 93 e0 00 	sts	0x00E0, r24
    1458:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    145c:	80 61       	ori	r24, 0x10	; 16
    145e:	80 93 d8 00 	sts	0x00D8, r24
    1462:	08 95       	ret

00001464 <USB_Init>:
    1464:	e8 ed       	ldi	r30, 0xD8	; 216
    1466:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1468:	80 81       	ld	r24, Z
    146a:	8f 7e       	andi	r24, 0xEF	; 239
    146c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    146e:	e7 ed       	ldi	r30, 0xD7	; 215
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 05 05 	sts	0x0505, r24

	USB_ResetInterface();
    147e:	a2 cf       	rjmp	.-188    	; 0x13c4 <USB_ResetInterface>

00001480 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1480:	e8 ed       	ldi	r30, 0xD8	; 216
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8c 7f       	andi	r24, 0xFC	; 252
    1488:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    148a:	10 92 a0 00 	sts	0x00A0, r1
    148e:	08 95       	ret

00001490 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1490:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1494:	10 92 9f 00 	sts	0x009F, r1
    1498:	08 95       	ret

0000149a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	0b b6       	in	r0, 0x3b	; 59
    14a6:	0f 92       	push	r0
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    14c0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    14c4:	85 ff       	sbrs	r24, 5
    14c6:	0a c0       	rjmp	.+20     	; 0x14dc <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    14c8:	80 91 a0 00 	lds	r24, 0x00A0
    14cc:	85 ff       	sbrs	r24, 5
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    14d0:	80 91 9f 00 	lds	r24, 0x009F
    14d4:	8f 7d       	andi	r24, 0xDF	; 223
    14d6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    14da:	20 d1       	rcall	.+576    	; 0x171c <USB_Event_Stub>
    14dc:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    14e0:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <__vector_10+0x76>
    14e4:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    14e8:	81 ff       	sbrs	r24, 1
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <__vector_10+0x76>
    14ec:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    14f0:	8d 7f       	andi	r24, 0xFD	; 253
    14f2:	80 93 9f 00 	sts	0x009F, r24
    14f6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    14fa:	8e 7f       	andi	r24, 0xFE	; 254
    14fc:	80 93 9f 00 	sts	0x009F, r24
    1500:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	80 93 a0 00 	sts	0x00A0, r24
    150a:	0e 94 1e 02 	call	0x43c	; 0x43c <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    150e:	5a df       	rcall	.-332    	; 0x13c4 <USB_ResetInterface>

		USB_ResetInterface();
    1510:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1514:	81 ff       	sbrs	r24, 1
    1516:	17 c0       	rjmp	.+46     	; 0x1546 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1518:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    151c:	81 ff       	sbrs	r24, 1
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <__vector_10+0xac>
    1520:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1524:	8d 7f       	andi	r24, 0xFD	; 253
    1526:	80 93 df 00 	sts	0x00DF, r24
    152a:	77 98       	cbi	0x0e, 7	; 14
    152c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	80 93 dd 00 	sts	0x00DD, r24
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 7e 02 	call	0x4fc	; 0x4fc <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    153c:	0e 94 1e 02 	call	0x43c	; 0x43c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	80 93 0e 05 	sts	0x050E, r24

		USB_HostState = HOST_STATE_Unattached;
    1546:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    154a:	80 ff       	sbrs	r24, 0
    154c:	18 c0       	rjmp	.+48     	; 0x157e <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    154e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1552:	80 ff       	sbrs	r24, 0
    1554:	14 c0       	rjmp	.+40     	; 0x157e <__vector_10+0xe4>
    1556:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    155a:	8e 7f       	andi	r24, 0xFE	; 254
    155c:	80 93 df 00 	sts	0x00DF, r24
    1560:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1564:	8e 7f       	andi	r24, 0xFE	; 254
    1566:	80 93 de 00 	sts	0x00DE, r24
    156a:	0e 94 18 02 	call	0x430	; 0x430 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    156e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1572:	82 60       	ori	r24, 0x02	; 2
    1574:	80 93 a0 00 	sts	0x00A0, r24
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	80 93 0e 05 	sts	0x050E, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    157e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1582:	82 ff       	sbrs	r24, 2
    1584:	10 c0       	rjmp	.+32     	; 0x15a6 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1586:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    158a:	82 ff       	sbrs	r24, 2
    158c:	0c c0       	rjmp	.+24     	; 0x15a6 <__vector_10+0x10c>
    158e:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1592:	8b 7f       	andi	r24, 0xFB	; 251
    1594:	80 93 df 00 	sts	0x00DF, r24
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    159c:	0e 94 95 02 	call	0x52a	; 0x52a <EVENT_USB_Host_DeviceEnumerationFailed>
    15a0:	0e 94 1e 02 	call	0x43c	; 0x43c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    15a4:	0f df       	rcall	.-482    	; 0x13c4 <USB_ResetInterface>
    15a6:	ff 91       	pop	r31

		USB_ResetInterface();
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0b be       	out	0x3b, r0	; 59
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    15d2:	eb 01       	movw	r28, r22
    15d4:	a8 81       	ld	r26, Y
    15d6:	b9 81       	ldd	r27, Y+1	; 0x01
    15d8:	8c 91       	ld	r24, X
    15da:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    15dc:	20 81       	ld	r18, Z
    15de:	31 81       	ldd	r19, Z+1	; 0x01
    15e0:	82 17       	cp	r24, r18
    15e2:	93 07       	cpc	r25, r19
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <USB_GetNextDescriptor+0x1c>
    15e6:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    15e8:	a2 0f       	add	r26, r18
    15ea:	b3 1f       	adc	r27, r19
    15ec:	eb 01       	movw	r28, r22
    15ee:	b9 83       	std	Y+1, r27	; 0x01
    15f0:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	82 1b       	sub	r24, r18
    15f8:	93 0b       	sbc	r25, r19
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
			}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1604:	cf 92       	push	r12
    1606:	df 92       	push	r13
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	29 97       	sbiw	r28, 0x09	; 9
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	7b 01       	movw	r14, r22
    1626:	8a 01       	movw	r16, r20
    1628:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    162a:	90 e8       	ldi	r25, 0x80	; 128
    162c:	90 93 06 05 	sts	0x0506, r25
    1630:	96 e0       	ldi	r25, 0x06	; 6
    1632:	90 93 07 05 	sts	0x0507, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1636:	e8 2f       	mov	r30, r24
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    163e:	f0 93 09 05 	sts	0x0509, r31
    1642:	e0 93 08 05 	sts	0x0508, r30
    1646:	10 92 0b 05 	sts	0x050B, r1
    164a:	10 92 0a 05 	sts	0x050A, r1
    164e:	89 e0       	ldi	r24, 0x09	; 9
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 0d 05 	sts	0x050D, r25
    1656:	80 93 0c 05 	sts	0x050C, r24
    165a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	84 d0       	rcall	.+264    	; 0x176c <USB_Host_SendControlRequest>
    1664:	81 11       	cpse	r24, r1
    1666:	19 c0       	rjmp	.+50     	; 0x169a <USB_Host_GetDeviceConfigDescriptor+0x96>
    1668:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    166a:	fc 81       	ldd	r31, Y+4	; 0x04
    166c:	d7 01       	movw	r26, r14
    166e:	ed 93       	st	X+, r30
    1670:	fc 93       	st	X, r31
    1672:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    1674:	df 06       	cpc	r13, r31
    1676:	70 f0       	brcs	.+28     	; 0x1694 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1678:	f0 93 0d 05 	sts	0x050D, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    167c:	e0 93 0c 05 	sts	0x050C, r30
    1680:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1682:	74 d0       	rcall	.+232    	; 0x176c <USB_Host_SendControlRequest>
    1684:	81 11       	cpse	r24, r1
    1686:	09 c0       	rjmp	.+18     	; 0x169a <USB_Host_GetDeviceConfigDescriptor+0x96>
    1688:	f8 01       	movw	r30, r16
    168a:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	21 f0       	breq	.+8      	; 0x1698 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1690:	86 e0       	ldi	r24, 0x06	; 6
    1692:	03 c0       	rjmp	.+6      	; 0x169a <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1694:	85 e0       	ldi	r24, 0x05	; 5
    1696:	01 c0       	rjmp	.+2      	; 0x169a <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    169c:	0f b6       	in	r0, 0x3f	; 63
}
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	08 95       	ret

000016b8 <USB_GetNextDescriptorComp>:
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	8c 01       	movw	r16, r24
    16ce:	eb 01       	movw	r28, r22
    16d0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    16d2:	f8 01       	movw	r30, r16
    16d4:	e0 80       	ld	r14, Z
    16d6:	f1 80       	ldd	r15, Z+1	; 0x01
    16d8:	e1 14       	cp	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	99 f0       	breq	.+38     	; 0x1704 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    16de:	a8 80       	ld	r10, Y
    16e0:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    16e2:	be 01       	movw	r22, r28
    16e4:	c8 01       	movw	r24, r16
    16e6:	72 df       	rcall	.-284    	; 0x15cc <USB_GetNextDescriptor>
    16e8:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    16ea:	99 81       	ldd	r25, Y+1	; 0x01
    16ec:	f6 01       	movw	r30, r12
    16ee:	09 95       	icall
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	79 f3       	breq	.-34     	; 0x16d2 <USB_GetNextDescriptorComp+0x1a>
    16f4:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    16f6:	39 f4       	brne	.+14     	; 0x1706 <USB_GetNextDescriptorComp+0x4e>
    16f8:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    16fa:	a8 82       	st	Y, r10
    16fc:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    16fe:	f1 82       	std	Z+1, r15	; 0x01
    1700:	e0 82       	st	Z, r14
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <USB_GetNextDescriptorComp+0x4e>
    1704:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1706:	df 91       	pop	r29
}
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	08 95       	ret

0000171c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    171c:	08 95       	ret

0000171e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1726:	c9 ee       	ldi	r28, 0xE9	; 233
    1728:	d3 e0       	ldi	r29, 0x03	; 3
    172a:	11 11       	cpse	r17, r1
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    172e:	80 91 a6 00 	lds	r24, 0x00A6
    1732:	83 fd       	sbrc	r24, 3
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	7e db       	rcall	.-2308   	; 0xe36 <USB_Host_WaitMS>
    173a:	81 11       	cpse	r24, r1
    173c:	13 c0       	rjmp	.+38     	; 0x1764 <USB_Host_WaitForIOS+0x46>
    173e:	21 97       	sbiw	r28, 0x01	; 1
    1740:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1742:	99 f7       	brne	.-26     	; 0x172a <USB_Host_WaitForIOS+0xc>
    1744:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <USB_Host_WaitForIOS+0x46>
    1748:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    174a:	29 f4       	brne	.+10     	; 0x1756 <USB_Host_WaitForIOS+0x38>
    174c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1750:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1752:	f1 cf       	rjmp	.-30     	; 0x1736 <USB_Host_WaitForIOS+0x18>
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <USB_Host_WaitForIOS+0x44>
    1756:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1758:	71 f7       	brne	.-36     	; 0x1736 <USB_Host_WaitForIOS+0x18>
    175a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    175e:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1760:	ea cf       	rjmp	.-44     	; 0x1736 <USB_Host_WaitForIOS+0x18>
    1762:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1764:	df 91       	pop	r29
}
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	08 95       	ret

0000176c <USB_Host_SendControlRequest>:
    176c:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1778:	f0 90 9e 00 	lds	r15, 0x009E
    177c:	8f 2d       	mov	r24, r15
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1782:	c0 91 0c 05 	lds	r28, 0x050C
    1786:	d0 91 0d 05 	lds	r29, 0x050D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    178a:	80 91 9e 00 	lds	r24, 0x009E
    178e:	81 60       	ori	r24, 0x01	; 1
    1790:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	4f db       	rcall	.-2402   	; 0xe36 <USB_Host_WaitMS>
    1798:	81 11       	cpse	r24, r1
    179a:	cc c0       	rjmp	.+408    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    179c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17a0:	8f 7c       	andi	r24, 0xCF	; 207
    17a2:	80 93 aa 00 	sts	0x00AA, r24
    17a6:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    17aa:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    17ae:	8f 7e       	andi	r24, 0xEF	; 239
    17b0:	80 93 a6 00 	sts	0x00A6, r24
    17b4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17b8:	8f 7b       	andi	r24, 0xBF	; 191
    17ba:	80 93 a9 00 	sts	0x00A9, r24
    17be:	e6 e0       	ldi	r30, 0x06	; 6
    17c0:	f5 e0       	ldi	r31, 0x05	; 5
    17c2:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    17c4:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    17c8:	85 e0       	ldi	r24, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    17ca:	ee 30       	cpi	r30, 0x0E	; 14
    17cc:	f8 07       	cpc	r31, r24
    17ce:	c9 f7       	brne	.-14     	; 0x17c2 <USB_Host_SendControlRequest+0x56>
    17d0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    17d4:	87 77       	andi	r24, 0x77	; 119
    17d6:	80 93 a6 00 	sts	0x00A6, r24
    17da:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    17dc:	a0 df       	rcall	.-192    	; 0x171e <USB_Host_WaitForIOS>
    17de:	81 11       	cpse	r24, r1
    17e0:	a9 c0       	rjmp	.+338    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    17e2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	80 93 a9 00 	sts	0x00A9, r24
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	23 db       	rcall	.-2490   	; 0xe36 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17f0:	81 11       	cpse	r24, r1
    17f2:	a0 c0       	rjmp	.+320    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    17f4:	80 91 06 05 	lds	r24, 0x0506
    17f8:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    17fa:	4e c0       	rjmp	.+156    	; 0x1898 <USB_Host_SendControlRequest+0x12c>
    17fc:	80 91 aa 00 	lds	r24, 0x00AA
    1800:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1802:	80 61       	ori	r24, 0x10	; 16
    1804:	80 93 aa 00 	sts	0x00AA, r24
    1808:	01 15       	cp	r16, r1
    180a:	11 05       	cpc	r17, r1
    180c:	09 f0       	breq	.+2      	; 0x1810 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    180e:	3a c0       	rjmp	.+116    	; 0x1884 <USB_Host_SendControlRequest+0x118>
    1810:	80 91 aa 00 	lds	r24, 0x00AA
    1814:	8f 7c       	andi	r24, 0xCF	; 207
    1816:	80 62       	ori	r24, 0x20	; 32
    1818:	80 93 aa 00 	sts	0x00AA, r24
    181c:	80 91 a9 00 	lds	r24, 0x00A9
    1820:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1822:	80 93 a9 00 	sts	0x00A9, r24
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	7a df       	rcall	.-268    	; 0x171e <USB_Host_WaitForIOS>
    182a:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    182c:	83 c0       	rjmp	.+262    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    182e:	80 91 a6 00 	lds	r24, 0x00A6
    1832:	8b 77       	andi	r24, 0x7B	; 123
    1834:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	71 df       	rcall	.-286    	; 0x171e <USB_Host_WaitForIOS>
    183c:	7b c0       	rjmp	.+246    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    183e:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1842:	8f 7b       	andi	r24, 0xBF	; 191
    1844:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	69 df       	rcall	.-302    	; 0x171e <USB_Host_WaitForIOS>
    184c:	81 11       	cpse	r24, r1
    184e:	72 c0       	rjmp	.+228    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    1850:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1854:	90 91 f7 00 	lds	r25, 0x00F7
    1858:	89 2b       	or	r24, r25
    185a:	11 f4       	brne	.+4      	; 0x1860 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    185c:	c0 e0       	ldi	r28, 0x00	; 0
    185e:	d0 e0       	ldi	r29, 0x00	; 0
    1860:	f8 01       	movw	r30, r16
    1862:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1864:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1868:	90 91 f7 00 	lds	r25, 0x00F7
    186c:	89 2b       	or	r24, r25
    186e:	69 f4       	brne	.+26     	; 0x188a <USB_Host_SendControlRequest+0x11e>
    1870:	80 91 a9 00 	lds	r24, 0x00A9
    1874:	80 64       	ori	r24, 0x40	; 64
    1876:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    187a:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    187e:	8e 77       	andi	r24, 0x7E	; 126
    1880:	80 93 a6 00 	sts	0x00A6, r24
    1884:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1886:	d9 f6       	brne	.-74     	; 0x183e <USB_Host_SendControlRequest+0xd2>
    1888:	c3 cf       	rjmp	.-122    	; 0x1810 <USB_Host_SendControlRequest+0xa4>
    188a:	20 97       	sbiw	r28, 0x00	; 0
    188c:	89 f3       	breq	.-30     	; 0x1870 <USB_Host_SendControlRequest+0x104>
    188e:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1892:	81 93       	st	Z+, r24
    1894:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1896:	e5 cf       	rjmp	.-54     	; 0x1862 <USB_Host_SendControlRequest+0xf6>
    1898:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    189a:	11 05       	cpc	r17, r1
    189c:	b1 f1       	breq	.+108    	; 0x190a <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    189e:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    18a2:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18aa:	80 91 a9 00 	lds	r24, 0x00A9
    18ae:	8f 7b       	andi	r24, 0xBF	; 191
    18b0:	80 93 a9 00 	sts	0x00A9, r24
    18b4:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18b6:	20 97       	sbiw	r28, 0x00	; 0
    18b8:	01 f1       	breq	.+64     	; 0x18fa <USB_Host_SendControlRequest+0x18e>
    18ba:	31 df       	rcall	.-414    	; 0x171e <USB_Host_WaitForIOS>
    18bc:	81 11       	cpse	r24, r1
    18be:	3a c0       	rjmp	.+116    	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    18c0:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    18c2:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    18c6:	30 91 f7 00 	lds	r19, 0x00F7
    18ca:	80 91 17 01 	lds	r24, 0x0117
    18ce:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	58 f4       	brcc	.+22     	; 0x18ec <USB_Host_SendControlRequest+0x180>
    18d6:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	8c 01       	movw	r16, r24
    18dc:	20 81       	ld	r18, Z
    18de:	20 93 af 00 	sts	0x00AF, r18
    18e2:	21 97       	sbiw	r28, 0x01	; 1
    18e4:	20 97       	sbiw	r28, 0x00	; 0
    18e6:	19 f0       	breq	.+6      	; 0x18ee <USB_Host_SendControlRequest+0x182>
    18e8:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    18ea:	eb cf       	rjmp	.-42     	; 0x18c2 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    18ec:	8f 01       	movw	r16, r30
    18ee:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    18f2:	8b 77       	andi	r24, 0x7B	; 123
    18f4:	80 93 a6 00 	sts	0x00A6, r24
    18f8:	dd cf       	rjmp	.-70     	; 0x18b4 <USB_Host_SendControlRequest+0x148>
    18fa:	11 df       	rcall	.-478    	; 0x171e <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18fc:	81 11       	cpse	r24, r1
    18fe:	1a c0       	rjmp	.+52     	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    1900:	80 91 a9 00 	lds	r24, 0x00A9
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    190a:	80 91 aa 00 	lds	r24, 0x00AA
    190e:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1910:	80 61       	ori	r24, 0x10	; 16
    1912:	80 93 aa 00 	sts	0x00AA, r24
    1916:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    191a:	8f 7b       	andi	r24, 0xBF	; 191
    191c:	80 93 a9 00 	sts	0x00A9, r24
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	fd de       	rcall	.-518    	; 0x171e <USB_Host_WaitForIOS>
    1924:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <USB_Host_SendControlRequest+0x1c8>
    1928:	80 91 a6 00 	lds	r24, 0x00A6
    192c:	8e 77       	andi	r24, 0x7E	; 126
    192e:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 91 a9 00 	lds	r25, 0x00A9
    1938:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    193a:	90 93 a9 00 	sts	0x00A9, r25
    193e:	f1 10       	cpse	r15, r1
    1940:	05 c0       	rjmp	.+10     	; 0x194c <USB_Host_SendControlRequest+0x1e0>
    1942:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1946:	9e 7f       	andi	r25, 0xFE	; 254
    1948:	90 93 9e 00 	sts	0x009E, r25
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1952:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    195e:	ff 90       	pop	r15
    1960:	08 95       	ret

00001962 <USB_Host_SetDeviceConfiguration>:
    1962:	cf 93       	push	r28
				UPRST = 0;
    1964:	c8 2f       	mov	r28, r24
    1966:	10 92 06 05 	sts	0x0506, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    196a:	89 e0       	ldi	r24, 0x09	; 9
    196c:	80 93 07 05 	sts	0x0507, r24
    1970:	2c 2f       	mov	r18, r28
    1972:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1974:	30 93 09 05 	sts	0x0509, r19
    1978:	20 93 08 05 	sts	0x0508, r18
    197c:	10 92 0b 05 	sts	0x050B, r1
    1980:	10 92 0a 05 	sts	0x050A, r1
    1984:	10 92 0d 05 	sts	0x050D, r1
    1988:	10 92 0c 05 	sts	0x050C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    198c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	eb de       	rcall	.-554    	; 0x176c <USB_Host_SendControlRequest>
    1996:	81 11       	cpse	r24, r1
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <USB_Host_SetDeviceConfiguration+0x4a>
    199a:	c0 93 04 05 	sts	0x0504, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    199e:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <USB_Host_SetDeviceConfiguration+0x44>
    19a2:	9b e0       	ldi	r25, 0x0B	; 11
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <USB_Host_SetDeviceConfiguration+0x46>
    19a6:	9a e0       	ldi	r25, 0x0A	; 10
    19a8:	90 93 0e 05 	sts	0x050E, r25
    19ac:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    19ae:	08 95       	ret

000019b0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    19b0:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    19b2:	c0 91 a7 00 	lds	r28, 0x00A7
    19b6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    19b8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    19bc:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    19c0:	87 da       	rcall	.-2802   	; 0xed0 <USB_Host_ProcessNextHostState>
    19c2:	c0 93 a7 00 	sts	0x00A7, r28
    19c6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    19c8:	08 95       	ret

000019ca <DCOMP_HID_Host_NextHIDInterface>:

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    19ca:	fc 01       	movw	r30, r24
    19cc:	21 81       	ldd	r18, Z+1	; 0x01
    19ce:	24 30       	cpi	r18, 0x04	; 4
    19d0:	29 f4       	brne	.+10     	; 0x19dc <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    19d2:	85 81       	ldd	r24, Z+5	; 0x05
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	11 f4       	brne	.+4      	; 0x19dc <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    19dc:	82 e0       	ldi	r24, 0x02	; 2
}
    19de:	08 95       	ret

000019e0 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    19e0:	fc 01       	movw	r30, r24
    19e2:	81 81       	ldd	r24, Z+1	; 0x01
    19e4:	81 32       	cpi	r24, 0x21	; 33
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    19f4:	82 e0       	ldi	r24, 0x02	; 2
}
    19f6:	08 95       	ret

000019f8 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    19f8:	fc 01       	movw	r30, r24
    19fa:	21 81       	ldd	r18, Z+1	; 0x01
    19fc:	25 30       	cpi	r18, 0x05	; 5
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	70 dc       	rcall	.-1824   	; 0x12e4 <Pipe_IsEndpointBound>
    1a04:	88 23       	and	r24, r24
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1a08:	82 e0       	ldi	r24, 0x02	; 2
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a0a:	08 95       	ret
    1a0c:	24 30       	cpi	r18, 0x04	; 4
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1a0e:	e1 f7       	brne	.-8      	; 0x1a08 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1a12:	08 95       	ret
    1a14:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1a16:	08 95       	ret

00001a18 <HID_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1a18:	6f 92       	push	r6
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1a1a:	7f 92       	push	r7
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <HID_Host_ConfigurePipes+0x1e>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <HID_Host_ConfigurePipes+0x20>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	7a 83       	std	Y+2, r23	; 0x02
    1a40:	69 83       	std	Y+1, r22	; 0x01
    1a42:	5c 83       	std	Y+4, r21	; 0x04
    1a44:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1a46:	fc 01       	movw	r30, r24
    1a48:	3f 96       	adiw	r30, 0x0f	; 15
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	df 01       	movw	r26, r30
    1a4e:	1d 92       	st	X+, r1
    1a50:	8a 95       	dec	r24
    1a52:	e9 f7       	brne	.-6      	; 0x1a4e <HID_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1a54:	eb 81       	ldd	r30, Y+3	; 0x03
    1a56:	fc 81       	ldd	r31, Y+4	; 0x04
    1a58:	81 81       	ldd	r24, Z+1	; 0x01
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <HID_Host_ConfigurePipes+0x48>
    1a5e:	9d c0       	rjmp	.+314    	; 0x1b9a <HID_Host_ConfigurePipes+0x182>
    1a60:	81 2c       	mov	r8, r1
    1a62:	91 2c       	mov	r9, r1
    1a64:	c1 2c       	mov	r12, r1
    1a66:	d1 2c       	mov	r13, r1
    1a68:	61 2c       	mov	r6, r1
    1a6a:	71 2c       	mov	r7, r1
    1a6c:	a1 2c       	mov	r10, r1
    1a6e:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1a70:	c1 14       	cp	r12, r1
    1a72:	d1 04       	cpc	r13, r1
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <HID_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1a76:	a1 14       	cp	r10, r1
    1a78:	b1 04       	cpc	r11, r1
    1a7a:	b9 f0       	breq	.+46     	; 0x1aaa <HID_Host_ConfigurePipes+0x92>
    1a7c:	41 c0       	rjmp	.+130    	; 0x1b00 <HID_Host_ConfigurePipes+0xe8>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1a7e:	4c ef       	ldi	r20, 0xFC	; 252
    1a80:	5c e0       	ldi	r21, 0x0C	; 12
    1a82:	be 01       	movw	r22, r28
    1a84:	6d 5f       	subi	r22, 0xFD	; 253
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	15 de       	rcall	.-982    	; 0x16b8 <USB_GetNextDescriptorComp>
    1a8e:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1a90:	f2 cf       	rjmp	.-28     	; 0x1a76 <HID_Host_ConfigurePipes+0x5e>
    1a92:	27 c0       	rjmp	.+78     	; 0x1ae2 <HID_Host_ConfigurePipes+0xca>
    1a94:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1a96:	dc 80       	ldd	r13, Y+4	; 0x04
    1a98:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1a9a:	84 85       	ldd	r24, Z+12	; 0x0c
    1a9c:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1a9e:	89 f0       	breq	.+34     	; 0x1ac2 <HID_Host_ConfigurePipes+0xaa>
    1aa0:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1aa2:	17 96       	adiw	r26, 0x07	; 7
    1aa4:	9c 91       	ld	r25, X
    1aa6:	98 17       	cp	r25, r24
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <HID_Host_ConfigurePipes+0xaa>
    1aaa:	45 ee       	ldi	r20, 0xE5	; 229
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1aac:	5c e0       	ldi	r21, 0x0C	; 12
    1aae:	be 01       	movw	r22, r28
    1ab0:	6d 5f       	subi	r22, 0xFD	; 253
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	ff dd       	rcall	.-1026   	; 0x16b8 <USB_GetNextDescriptorComp>
    1aba:	88 23       	and	r24, r24
    1abc:	59 f3       	breq	.-42     	; 0x1a94 <HID_Host_ConfigurePipes+0x7c>
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	6d c0       	rjmp	.+218    	; 0x1b9c <HID_Host_ConfigurePipes+0x184>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1ac2:	40 ef       	ldi	r20, 0xF0	; 240
    1ac4:	5c e0       	ldi	r21, 0x0C	; 12

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6d 5f       	subi	r22, 0xFD	; 253
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	ce 01       	movw	r24, r28
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	f3 dd       	rcall	.-1050   	; 0x16b8 <USB_GetNextDescriptorComp>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	f4 cf       	rjmp	.-24     	; 0x1abe <HID_Host_ConfigurePipes+0xa6>
    1ad6:	8b 80       	ldd	r8, Y+3	; 0x03
    1ad8:	9c 80       	ldd	r9, Y+4	; 0x04
    1ada:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1adc:	f1 2c       	mov	r15, r1
    1ade:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1ae0:	c7 cf       	rjmp	.-114    	; 0x1a70 <HID_Host_ConfigurePipes+0x58>
    1ae2:	eb 80       	ldd	r14, Y+3	; 0x03
    1ae4:	fc 80       	ldd	r15, Y+4	; 0x04
    1ae6:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <HID_Host_ConfigurePipes+0xda>
    1aee:	57 01       	movw	r10, r14
    1af0:	73 01       	movw	r14, r6
    1af2:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    1af4:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1af6:	99 f3       	breq	.-26     	; 0x1ade <HID_Host_ConfigurePipes+0xc6>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1af8:	e1 14       	cp	r14, r1
    1afa:	f1 04       	cpc	r15, r1
    1afc:	81 f3       	breq	.-32     	; 0x1ade <HID_Host_ConfigurePipes+0xc6>
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <HID_Host_ConfigurePipes+0xea>
    1b00:	73 01       	movw	r14, r6
    1b02:	d5 01       	movw	r26, r10
    1b04:	14 96       	adiw	r26, 0x04	; 4
    1b06:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1b08:	9c 91       	ld	r25, X
    1b0a:	15 97       	sbiw	r26, 0x05	; 5
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	92 83       	std	Z+2, r25	; 0x02
    1b10:	81 83       	std	Z+1, r24	; 0x01
    1b12:	12 96       	adiw	r26, 0x02	; 2
    1b14:	8c 91       	ld	r24, X
    1b16:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	b8 2e       	mov	r11, r24
    1b1c:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	c8 01       	movw	r24, r16
    1b22:	ad db       	rcall	.-2214   	; 0x127e <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1b24:	81 11       	cpse	r24, r1
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <HID_Host_ConfigurePipes+0x114>
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	38 c0       	rjmp	.+112    	; 0x1b9c <HID_Host_ConfigurePipes+0x184>
    1b2c:	e1 14       	cp	r14, r1
    1b2e:	f1 04       	cpc	r15, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    1b30:	f9 f4       	brne	.+62     	; 0x1b70 <HID_Host_ConfigurePipes+0x158>
    1b32:	d6 01       	movw	r26, r12

	if (DataOUTEndpoint)
    1b34:	12 96       	adiw	r26, 0x02	; 2
    1b36:	8c 91       	ld	r24, X
    1b38:	f8 01       	movw	r30, r16

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1b3a:	80 8b       	std	Z+16, r24	; 0x10
    1b3c:	d4 01       	movw	r26, r8
    1b3e:	17 96       	adiw	r26, 0x07	; 7
    1b40:	8d 91       	ld	r24, X+
    1b42:	9c 91       	ld	r25, X
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1b44:	18 97       	sbiw	r26, 0x08	; 8
    1b46:	95 8b       	std	Z+21, r25	; 0x15
    1b48:	84 8b       	std	Z+20, r24	; 0x14
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	f6 01       	movw	r30, r12
    1b4e:	96 81       	ldd	r25, Z+6	; 0x06
    1b50:	91 11       	cpse	r25, r1
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <HID_Host_ConfigurePipes+0x13e>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	d8 01       	movw	r26, r16
    1b58:	51 96       	adiw	r26, 0x11	; 17
    1b5a:	8c 93       	st	X, r24
    1b5c:	51 97       	sbiw	r26, 0x11	; 17
    1b5e:	88 e0       	ldi	r24, 0x08	; 8
    1b60:	56 96       	adiw	r26, 0x16	; 22
    1b62:	8c 93       	st	X, r24
    1b64:	56 97       	sbiw	r26, 0x16	; 22
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	1f 96       	adiw	r26, 0x0f	; 15
    1b6a:	8c 93       	st	X, r24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.IsActive             = true;
    1b6e:	16 c0       	rjmp	.+44     	; 0x1b9c <HID_Host_ConfigurePipes+0x184>
    1b70:	f7 01       	movw	r30, r14
    1b72:	84 81       	ldd	r24, Z+4	; 0x04

	return HID_ENUMERROR_NoError;
    1b74:	95 81       	ldd	r25, Z+5	; 0x05
    1b76:	d8 01       	movw	r26, r16
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1b78:	18 96       	adiw	r26, 0x08	; 8
    1b7a:	9c 93       	st	X, r25
    1b7c:	8e 93       	st	-X, r24
    1b7e:	17 97       	sbiw	r26, 0x07	; 7
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	19 96       	adiw	r26, 0x09	; 9
    1b84:	8c 93       	st	X, r24
    1b86:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1b88:	1a 96       	adiw	r26, 0x0a	; 10
    1b8a:	bc 92       	st	X, r11
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1b90:	06 96       	adiw	r24, 0x06	; 6
    1b92:	75 db       	rcall	.-2326   	; 0x127e <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1b94:	88 23       	and	r24, r24
    1b96:	41 f2       	breq	.-112    	; 0x1b28 <HID_Host_ConfigurePipes+0x110>
    1b98:	cc cf       	rjmp	.-104    	; 0x1b32 <HID_Host_ConfigurePipes+0x11a>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1ba4:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	7f 90       	pop	r7
    1bbe:	6f 90       	pop	r6
    1bc0:	08 95       	ret

00001bc2 <HID_Host_ReceiveReport>:
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	eb 01       	movw	r28, r22
    1bca:	80 91 0e 05 	lds	r24, 0x050E
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1bce:	8b 30       	cpi	r24, 0x0B	; 11
    1bd0:	c1 f5       	brne	.+112    	; 0x1c42 <HID_Host_ReceiveReport+0x80>
    1bd2:	87 85       	ldd	r24, Z+15	; 0x0f
    1bd4:	88 23       	and	r24, r24
    1bd6:	a9 f1       	breq	.+106    	; 0x1c42 <HID_Host_ReceiveReport+0x80>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1bd8:	80 81       	ld	r24, Z
    1bda:	8f 70       	andi	r24, 0x0F	; 15
    1bdc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1be0:	80 91 a9 00 	lds	r24, 0x00A9
    1be4:	8f 7b       	andi	r24, 0xBF	; 191
    1be6:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1bea:	83 89       	ldd	r24, Z+19	; 0x13
    1bec:	81 11       	cpse	r24, r1
    1bee:	12 c0       	rjmp	.+36     	; 0x1c14 <HID_Host_ReceiveReport+0x52>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1bf0:	a5 85       	ldd	r26, Z+13	; 0x0d
    1bf2:	b6 85       	ldd	r27, Z+14	; 0x0e
    1bf4:	a8 52       	subi	r26, 0x28	; 40
    1bf6:	bc 4f       	sbci	r27, 0xFC	; 252
    1bf8:	8c 91       	ld	r24, X
    1bfa:	88 23       	and	r24, r24
    1bfc:	29 f0       	breq	.+10     	; 0x1c08 <HID_Host_ReceiveReport+0x46>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1bfe:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1c02:	68 83       	st	Y, r22
    1c04:	21 96       	adiw	r28, 0x01	; 1
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <HID_Host_ReceiveReport+0x48>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1c08:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	85 85       	ldd	r24, Z+13	; 0x0d
    1c0e:	96 85       	ldd	r25, Z+14	; 0x0e
    1c10:	91 d8       	rcall	.-3806   	; 0xd34 <USB_GetHIDReportSize>
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <HID_Host_ReceiveReport+0x5a>
    1c14:	80 91 f6 00 	lds	r24, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c18:	90 91 f7 00 	lds	r25, 0x00F7
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	bc 01       	movw	r22, r24
    1c22:	ce 01       	movw	r24, r28
    1c24:	77 da       	rcall	.-2834   	; 0x1114 <Pipe_Read_Stream_LE>
    1c26:	81 11       	cpse	r24, r1
    1c28:	0d c0       	rjmp	.+26     	; 0x1c44 <HID_Host_ReceiveReport+0x82>
    1c2a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c2e:	8e 77       	andi	r24, 0x7E	; 126
    1c30:	80 93 a6 00 	sts	0x00A6, r24
    1c34:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	80 93 a9 00 	sts	0x00A9, r24
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <HID_Host_ReceiveReport+0x82>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1c46:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1c48:	08 95       	ret

00001c4a <HID_Host_IsReportReceived>:
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	80 91 0e 05 	lds	r24, 0x050E
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1c50:	8b 30       	cpi	r24, 0x0B	; 11
    1c52:	a9 f4       	brne	.+42     	; 0x1c7e <HID_Host_IsReportReceived+0x34>
    1c54:	87 85       	ldd	r24, Z+15	; 0x0f
    1c56:	88 23       	and	r24, r24
    1c58:	99 f0       	breq	.+38     	; 0x1c80 <HID_Host_IsReportReceived+0x36>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8f 70       	andi	r24, 0x0F	; 15
    1c5e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c62:	80 91 a9 00 	lds	r24, 0x00A9
    1c66:	8f 7b       	andi	r24, 0xBF	; 191
    1c68:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1c6c:	80 91 a6 00 	lds	r24, 0x00A6
    1c70:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c72:	90 91 a9 00 	lds	r25, 0x00A9
    1c76:	90 64       	ori	r25, 0x40	; 64
    1c78:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1c7c:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1c80:	08 95       	ret

00001c82 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1c98:	cd b6       	in	r12, 0x3d	; 61
    1c9a:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	54 96       	adiw	r26, 0x14	; 20
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	55 97       	sbiw	r26, 0x15	; 21
    1ca6:	ed b7       	in	r30, 0x3d	; 61
    1ca8:	fe b7       	in	r31, 0x3e	; 62
    1caa:	e8 1b       	sub	r30, r24
    1cac:	f9 0b       	sbc	r31, r25
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	fe bf       	out	0x3e, r31	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	ed bf       	out	0x3d, r30	; 61
    1cb8:	2d b7       	in	r18, 0x3d	; 61
    1cba:	3e b7       	in	r19, 0x3e	; 62
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	79 01       	movw	r14, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1cc2:	50 96       	adiw	r26, 0x10	; 16
    1cc4:	2c 91       	ld	r18, X
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	41 e8       	ldi	r20, 0x81	; 129
    1cca:	40 93 06 05 	sts	0x0506, r20
    1cce:	46 e0       	ldi	r20, 0x06	; 6
    1cd0:	40 93 07 05 	sts	0x0507, r20
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	52 e2       	ldi	r21, 0x22	; 34
    1cd8:	50 93 09 05 	sts	0x0509, r21
    1cdc:	40 93 08 05 	sts	0x0508, r20
    1ce0:	30 93 0b 05 	sts	0x050B, r19
    1ce4:	20 93 0a 05 	sts	0x050A, r18
    1ce8:	90 93 0d 05 	sts	0x050D, r25
    1cec:	80 93 0c 05 	sts	0x050C, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1cf0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1cf4:	c7 01       	movw	r24, r14
    1cf6:	3a dd       	rcall	.-1420   	; 0x176c <USB_Host_SendControlRequest>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	52 c0       	rjmp	.+164    	; 0x1da0 <HID_Host_SetReportProtocol+0x11e>
    1cfc:	d8 01       	movw	r26, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1cfe:	53 96       	adiw	r26, 0x13	; 19
    1d00:	8c 91       	ld	r24, X
    1d02:	53 97       	sbiw	r26, 0x13	; 19
    1d04:	88 23       	and	r24, r24
    1d06:	f1 f0       	breq	.+60     	; 0x1d44 <HID_Host_SetReportProtocol+0xc2>
    1d08:	50 96       	adiw	r26, 0x10	; 16
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1d0a:	8c 91       	ld	r24, X
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	21 e2       	ldi	r18, 0x21	; 33
    1d10:	20 93 06 05 	sts	0x0506, r18
    1d14:	2b e0       	ldi	r18, 0x0B	; 11
    1d16:	20 93 07 05 	sts	0x0507, r18
    1d1a:	21 e0       	ldi	r18, 0x01	; 1
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	30 93 09 05 	sts	0x0509, r19
    1d22:	20 93 08 05 	sts	0x0508, r18
    1d26:	90 93 0b 05 	sts	0x050B, r25
    1d2a:	80 93 0a 05 	sts	0x050A, r24
    1d2e:	10 92 0d 05 	sts	0x050D, r1
    1d32:	10 92 0c 05 	sts	0x050C, r1
    1d36:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	18 dd       	rcall	.-1488   	; 0x176c <USB_Host_SendControlRequest>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	30 c0       	rjmp	.+96     	; 0x1da0 <HID_Host_SetReportProtocol+0x11e>
    1d40:	f8 01       	movw	r30, r16
    1d42:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1d44:	d8 01       	movw	r26, r16
    1d46:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1d48:	4d 91       	ld	r20, X+
    1d4a:	5c 91       	ld	r21, X
    1d4c:	1e 97       	sbiw	r26, 0x0e	; 14
    1d4e:	41 15       	cp	r20, r1
    1d50:	51 05       	cpc	r21, r1
    1d52:	29 f1       	breq	.+74     	; 0x1d9e <HID_Host_SetReportProtocol+0x11c>
    1d54:	54 96       	adiw	r26, 0x14	; 20
    1d56:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1d58:	7c 91       	ld	r23, X
    1d5a:	55 97       	sbiw	r26, 0x15	; 21
    1d5c:	c7 01       	movw	r24, r14
    1d5e:	0e 94 b7 02 	call	0x56e	; 0x56e <USB_ProcessHIDReport>
    1d62:	88 23       	and	r24, r24
    1d64:	11 f0       	breq	.+4      	; 0x1d6a <HID_Host_SetReportProtocol+0xe8>
    1d66:	80 68       	ori	r24, 0x80	; 128
    1d68:	1b c0       	rjmp	.+54     	; 0x1da0 <HID_Host_SetReportProtocol+0x11e>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1d6a:	d8 01       	movw	r26, r16
    1d6c:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1d6e:	ed 91       	ld	r30, X+
    1d70:	fc 91       	ld	r31, X
    1d72:	1e 97       	sbiw	r26, 0x0e	; 14
    1d74:	ea 52       	subi	r30, 0x2A	; 42
    1d76:	fc 4f       	sbci	r31, 0xFC	; 252
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	27 70       	andi	r18, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1d80:	33 27       	eor	r19, r19
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	23 2b       	or	r18, r19
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <HID_Host_SetReportProtocol+0x108>
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	33 e0       	ldi	r19, 0x03	; 3
    1d8c:	96 95       	lsr	r25
    1d8e:	87 95       	ror	r24
    1d90:	3a 95       	dec	r19
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <HID_Host_SetReportProtocol+0x10a>
    1d94:	84 0f       	add	r24, r20
    1d96:	f8 01       	movw	r30, r16
    1d98:	86 8b       	std	Z+22, r24	; 0x16
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <HID_Host_SetReportProtocol+0x11e>

	return 0;
    1d9e:	80 e8       	ldi	r24, 0x80	; 128
    1da0:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1da2:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1da4:	de be       	out	0x3e, r13	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd be       	out	0x3d, r12	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	08 95       	ret

00001dbc <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1dbc:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1dc0:	95 ff       	sbrs	r25, 5
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <Serial_putchar>
				UDR1 = DataByte;
    1dc4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	08 95       	ret

00001dce <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1dce:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1dd2:	87 ff       	sbrs	r24, 7
    1dd4:	08 c0       	rjmp	.+16     	; 0x1de6 <Serial_getchar+0x18>
    1dd6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1dda:	87 ff       	sbrs	r24, 7
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1dde:	80 91 ce 00 	lds	r24, 0x00CE
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	08 95       	ret
	  return _FDEV_EOF;
    1de6:	8e ef       	ldi	r24, 0xFE	; 254
    1de8:	9f ef       	ldi	r25, 0xFF	; 255
    1dea:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1df0:	08 95       	ret

00001df2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1df2:	fc 01       	movw	r30, r24
	if (!(Stream))
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	59 f4       	brne	.+22     	; 0x1e0e <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1df8:	8f e0       	ldi	r24, 0x0F	; 15
    1dfa:	95 e0       	ldi	r25, 0x05	; 5
    1dfc:	90 93 1e 05 	sts	0x051E, r25
    1e00:	80 93 1d 05 	sts	0x051D, r24
		stdout = Stream;
    1e04:	90 93 20 05 	sts	0x0520, r25
    1e08:	80 93 1f 05 	sts	0x051F, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1e0c:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e0e:	8e e0       	ldi	r24, 0x0E	; 14
    1e10:	df 01       	movw	r26, r30
    1e12:	1d 92       	st	X+, r1
    1e14:	8a 95       	dec	r24
    1e16:	e9 f7       	brne	.-6      	; 0x1e12 <Serial_CreateStream+0x20>
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	83 83       	std	Z+3, r24	; 0x03
    1e1c:	8e ed       	ldi	r24, 0xDE	; 222
    1e1e:	9e e0       	ldi	r25, 0x0E	; 14
    1e20:	91 87       	std	Z+9, r25	; 0x09
    1e22:	80 87       	std	Z+8, r24	; 0x08
    1e24:	87 ee       	ldi	r24, 0xE7	; 231
    1e26:	9e e0       	ldi	r25, 0x0E	; 14
    1e28:	93 87       	std	Z+11, r25	; 0x0b
    1e2a:	82 87       	std	Z+10, r24	; 0x0a
    1e2c:	08 95       	ret

00001e2e <fputc>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	18 2f       	mov	r17, r24
    1e38:	09 2f       	mov	r16, r25
    1e3a:	eb 01       	movw	r28, r22
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	81 fd       	sbrc	r24, 1
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <fputc+0x1a>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	9f ef       	ldi	r25, 0xFF	; 255
    1e46:	20 c0       	rjmp	.+64     	; 0x1e88 <fputc+0x5a>
    1e48:	82 ff       	sbrs	r24, 2
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <fputc+0x3e>
    1e4c:	4e 81       	ldd	r20, Y+6	; 0x06
    1e4e:	5f 81       	ldd	r21, Y+7	; 0x07
    1e50:	2c 81       	ldd	r18, Y+4	; 0x04
    1e52:	3d 81       	ldd	r19, Y+5	; 0x05
    1e54:	42 17       	cp	r20, r18
    1e56:	53 07       	cpc	r21, r19
    1e58:	7c f4       	brge	.+30     	; 0x1e78 <fputc+0x4a>
    1e5a:	e8 81       	ld	r30, Y
    1e5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5e:	9f 01       	movw	r18, r30
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	39 83       	std	Y+1, r19	; 0x01
    1e66:	28 83       	st	Y, r18
    1e68:	10 83       	st	Z, r17
    1e6a:	06 c0       	rjmp	.+12     	; 0x1e78 <fputc+0x4a>
    1e6c:	e8 85       	ldd	r30, Y+8	; 0x08
    1e6e:	f9 85       	ldd	r31, Y+9	; 0x09
    1e70:	81 2f       	mov	r24, r17
    1e72:	09 95       	icall
    1e74:	89 2b       	or	r24, r25
    1e76:	29 f7       	brne	.-54     	; 0x1e42 <fputc+0x14>
    1e78:	2e 81       	ldd	r18, Y+6	; 0x06
    1e7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e7c:	2f 5f       	subi	r18, 0xFF	; 255
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	3f 83       	std	Y+7, r19	; 0x07
    1e82:	2e 83       	std	Y+6, r18	; 0x06
    1e84:	81 2f       	mov	r24, r17
    1e86:	90 2f       	mov	r25, r16
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <printf_P>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	37 96       	adiw	r30, 0x07	; 7
    1ea2:	61 91       	ld	r22, Z+
    1ea4:	71 91       	ld	r23, Z+
    1ea6:	0f e1       	ldi	r16, 0x1F	; 31
    1ea8:	15 e0       	ldi	r17, 0x05	; 5
    1eaa:	d8 01       	movw	r26, r16
    1eac:	8d 91       	ld	r24, X+
    1eae:	9c 91       	ld	r25, X
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	13 96       	adiw	r26, 0x03	; 3
    1eb4:	2c 91       	ld	r18, X
    1eb6:	13 97       	sbiw	r26, 0x03	; 3
    1eb8:	28 60       	ori	r18, 0x08	; 8
    1eba:	13 96       	adiw	r26, 0x03	; 3
    1ebc:	2c 93       	st	X, r18
    1ebe:	af 01       	movw	r20, r30
    1ec0:	3a d0       	rcall	.+116    	; 0x1f36 <vfprintf>
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	ed 91       	ld	r30, X+
    1ec6:	fc 91       	ld	r31, X
    1ec8:	23 81       	ldd	r18, Z+3	; 0x03
    1eca:	27 7f       	andi	r18, 0xF7	; 247
    1ecc:	23 83       	std	Z+3, r18	; 0x03
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <puts_P>:
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	ec 01       	movw	r28, r24
    1ee2:	e0 91 1f 05 	lds	r30, 0x051F
    1ee6:	f0 91 20 05 	lds	r31, 0x0520
    1eea:	83 81       	ldd	r24, Z+3	; 0x03
    1eec:	81 ff       	sbrs	r24, 1
    1eee:	1c c0       	rjmp	.+56     	; 0x1f28 <puts_P+0x50>
    1ef0:	00 e0       	ldi	r16, 0x00	; 0
    1ef2:	10 e0       	ldi	r17, 0x00	; 0
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	84 91       	lpm	r24, Z
    1ef8:	60 91 1f 05 	lds	r22, 0x051F
    1efc:	70 91 20 05 	lds	r23, 0x0520
    1f00:	db 01       	movw	r26, r22
    1f02:	18 96       	adiw	r26, 0x08	; 8
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	19 97       	sbiw	r26, 0x09	; 9
    1f0a:	88 23       	and	r24, r24
    1f0c:	39 f0       	breq	.+14     	; 0x1f1c <puts_P+0x44>
    1f0e:	09 95       	icall
    1f10:	89 2b       	or	r24, r25
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <puts_P+0x40>
    1f14:	0f ef       	ldi	r16, 0xFF	; 255
    1f16:	1f ef       	ldi	r17, 0xFF	; 255
    1f18:	21 96       	adiw	r28, 0x01	; 1
    1f1a:	ec cf       	rjmp	.-40     	; 0x1ef4 <puts_P+0x1c>
    1f1c:	8a e0       	ldi	r24, 0x0A	; 10
    1f1e:	09 95       	icall
    1f20:	89 2b       	or	r24, r25
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <puts_P+0x50>
    1f24:	c8 01       	movw	r24, r16
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <puts_P+0x54>
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	08 95       	ret

00001f36 <vfprintf>:
    1f36:	2f 92       	push	r2
    1f38:	3f 92       	push	r3
    1f3a:	4f 92       	push	r4
    1f3c:	5f 92       	push	r5
    1f3e:	6f 92       	push	r6
    1f40:	7f 92       	push	r7
    1f42:	8f 92       	push	r8
    1f44:	9f 92       	push	r9
    1f46:	af 92       	push	r10
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	7c 01       	movw	r14, r24
    1f6c:	6b 01       	movw	r12, r22
    1f6e:	8a 01       	movw	r16, r20
    1f70:	fc 01       	movw	r30, r24
    1f72:	17 82       	std	Z+7, r1	; 0x07
    1f74:	16 82       	std	Z+6, r1	; 0x06
    1f76:	83 81       	ldd	r24, Z+3	; 0x03
    1f78:	81 ff       	sbrs	r24, 1
    1f7a:	b0 c1       	rjmp	.+864    	; 0x22dc <__stack+0x1dd>
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	4c 01       	movw	r8, r24
    1f82:	f7 01       	movw	r30, r14
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	f6 01       	movw	r30, r12
    1f88:	93 fd       	sbrc	r25, 3
    1f8a:	85 91       	lpm	r24, Z+
    1f8c:	93 ff       	sbrs	r25, 3
    1f8e:	81 91       	ld	r24, Z+
    1f90:	6f 01       	movw	r12, r30
    1f92:	88 23       	and	r24, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <vfprintf+0x62>
    1f96:	9e c1       	rjmp	.+828    	; 0x22d4 <__stack+0x1d5>
    1f98:	85 32       	cpi	r24, 0x25	; 37
    1f9a:	39 f4       	brne	.+14     	; 0x1faa <vfprintf+0x74>
    1f9c:	93 fd       	sbrc	r25, 3
    1f9e:	85 91       	lpm	r24, Z+
    1fa0:	93 ff       	sbrs	r25, 3
    1fa2:	81 91       	ld	r24, Z+
    1fa4:	6f 01       	movw	r12, r30
    1fa6:	85 32       	cpi	r24, 0x25	; 37
    1fa8:	21 f4       	brne	.+8      	; 0x1fb2 <vfprintf+0x7c>
    1faa:	b7 01       	movw	r22, r14
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	3f df       	rcall	.-386    	; 0x1e2e <fputc>
    1fb0:	e8 cf       	rjmp	.-48     	; 0x1f82 <vfprintf+0x4c>
    1fb2:	51 2c       	mov	r5, r1
    1fb4:	31 2c       	mov	r3, r1
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	20 32       	cpi	r18, 0x20	; 32
    1fba:	a0 f4       	brcc	.+40     	; 0x1fe4 <vfprintf+0xae>
    1fbc:	8b 32       	cpi	r24, 0x2B	; 43
    1fbe:	69 f0       	breq	.+26     	; 0x1fda <vfprintf+0xa4>
    1fc0:	30 f4       	brcc	.+12     	; 0x1fce <vfprintf+0x98>
    1fc2:	80 32       	cpi	r24, 0x20	; 32
    1fc4:	59 f0       	breq	.+22     	; 0x1fdc <vfprintf+0xa6>
    1fc6:	83 32       	cpi	r24, 0x23	; 35
    1fc8:	69 f4       	brne	.+26     	; 0x1fe4 <vfprintf+0xae>
    1fca:	20 61       	ori	r18, 0x10	; 16
    1fcc:	2c c0       	rjmp	.+88     	; 0x2026 <vfprintf+0xf0>
    1fce:	8d 32       	cpi	r24, 0x2D	; 45
    1fd0:	39 f0       	breq	.+14     	; 0x1fe0 <vfprintf+0xaa>
    1fd2:	80 33       	cpi	r24, 0x30	; 48
    1fd4:	39 f4       	brne	.+14     	; 0x1fe4 <vfprintf+0xae>
    1fd6:	21 60       	ori	r18, 0x01	; 1
    1fd8:	26 c0       	rjmp	.+76     	; 0x2026 <vfprintf+0xf0>
    1fda:	22 60       	ori	r18, 0x02	; 2
    1fdc:	24 60       	ori	r18, 0x04	; 4
    1fde:	23 c0       	rjmp	.+70     	; 0x2026 <vfprintf+0xf0>
    1fe0:	28 60       	ori	r18, 0x08	; 8
    1fe2:	21 c0       	rjmp	.+66     	; 0x2026 <vfprintf+0xf0>
    1fe4:	27 fd       	sbrc	r18, 7
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <vfprintf+0x100>
    1fe8:	30 ed       	ldi	r19, 0xD0	; 208
    1fea:	38 0f       	add	r19, r24
    1fec:	3a 30       	cpi	r19, 0x0A	; 10
    1fee:	78 f4       	brcc	.+30     	; 0x200e <vfprintf+0xd8>
    1ff0:	26 ff       	sbrs	r18, 6
    1ff2:	06 c0       	rjmp	.+12     	; 0x2000 <vfprintf+0xca>
    1ff4:	fa e0       	ldi	r31, 0x0A	; 10
    1ff6:	5f 9e       	mul	r5, r31
    1ff8:	30 0d       	add	r19, r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	53 2e       	mov	r5, r19
    1ffe:	13 c0       	rjmp	.+38     	; 0x2026 <vfprintf+0xf0>
    2000:	8a e0       	ldi	r24, 0x0A	; 10
    2002:	38 9e       	mul	r3, r24
    2004:	30 0d       	add	r19, r0
    2006:	11 24       	eor	r1, r1
    2008:	33 2e       	mov	r3, r19
    200a:	20 62       	ori	r18, 0x20	; 32
    200c:	0c c0       	rjmp	.+24     	; 0x2026 <vfprintf+0xf0>
    200e:	8e 32       	cpi	r24, 0x2E	; 46
    2010:	21 f4       	brne	.+8      	; 0x201a <vfprintf+0xe4>
    2012:	26 fd       	sbrc	r18, 6
    2014:	5f c1       	rjmp	.+702    	; 0x22d4 <__stack+0x1d5>
    2016:	20 64       	ori	r18, 0x40	; 64
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <vfprintf+0xf0>
    201a:	8c 36       	cpi	r24, 0x6C	; 108
    201c:	11 f4       	brne	.+4      	; 0x2022 <vfprintf+0xec>
    201e:	20 68       	ori	r18, 0x80	; 128
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0xf0>
    2022:	88 36       	cpi	r24, 0x68	; 104
    2024:	41 f4       	brne	.+16     	; 0x2036 <vfprintf+0x100>
    2026:	f6 01       	movw	r30, r12
    2028:	93 fd       	sbrc	r25, 3
    202a:	85 91       	lpm	r24, Z+
    202c:	93 ff       	sbrs	r25, 3
    202e:	81 91       	ld	r24, Z+
    2030:	6f 01       	movw	r12, r30
    2032:	81 11       	cpse	r24, r1
    2034:	c1 cf       	rjmp	.-126    	; 0x1fb8 <vfprintf+0x82>
    2036:	98 2f       	mov	r25, r24
    2038:	9f 7d       	andi	r25, 0xDF	; 223
    203a:	95 54       	subi	r25, 0x45	; 69
    203c:	93 30       	cpi	r25, 0x03	; 3
    203e:	28 f4       	brcc	.+10     	; 0x204a <vfprintf+0x114>
    2040:	0c 5f       	subi	r16, 0xFC	; 252
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	ff e3       	ldi	r31, 0x3F	; 63
    2046:	f9 83       	std	Y+1, r31	; 0x01
    2048:	0d c0       	rjmp	.+26     	; 0x2064 <vfprintf+0x12e>
    204a:	83 36       	cpi	r24, 0x63	; 99
    204c:	31 f0       	breq	.+12     	; 0x205a <vfprintf+0x124>
    204e:	83 37       	cpi	r24, 0x73	; 115
    2050:	71 f0       	breq	.+28     	; 0x206e <vfprintf+0x138>
    2052:	83 35       	cpi	r24, 0x53	; 83
    2054:	09 f0       	breq	.+2      	; 0x2058 <vfprintf+0x122>
    2056:	57 c0       	rjmp	.+174    	; 0x2106 <__stack+0x7>
    2058:	21 c0       	rjmp	.+66     	; 0x209c <vfprintf+0x166>
    205a:	f8 01       	movw	r30, r16
    205c:	80 81       	ld	r24, Z
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	0e 5f       	subi	r16, 0xFE	; 254
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	44 24       	eor	r4, r4
    2066:	43 94       	inc	r4
    2068:	51 2c       	mov	r5, r1
    206a:	54 01       	movw	r10, r8
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <vfprintf+0x160>
    206e:	38 01       	movw	r6, r16
    2070:	f2 e0       	ldi	r31, 0x02	; 2
    2072:	6f 0e       	add	r6, r31
    2074:	71 1c       	adc	r7, r1
    2076:	f8 01       	movw	r30, r16
    2078:	a0 80       	ld	r10, Z
    207a:	b1 80       	ldd	r11, Z+1	; 0x01
    207c:	26 ff       	sbrs	r18, 6
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <vfprintf+0x150>
    2080:	65 2d       	mov	r22, r5
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	02 c0       	rjmp	.+4      	; 0x208a <vfprintf+0x154>
    2086:	6f ef       	ldi	r22, 0xFF	; 255
    2088:	7f ef       	ldi	r23, 0xFF	; 255
    208a:	c5 01       	movw	r24, r10
    208c:	2c 87       	std	Y+12, r18	; 0x0c
    208e:	4c d1       	rcall	.+664    	; 0x2328 <strnlen>
    2090:	2c 01       	movw	r4, r24
    2092:	83 01       	movw	r16, r6
    2094:	2c 85       	ldd	r18, Y+12	; 0x0c
    2096:	2f 77       	andi	r18, 0x7F	; 127
    2098:	22 2e       	mov	r2, r18
    209a:	16 c0       	rjmp	.+44     	; 0x20c8 <vfprintf+0x192>
    209c:	38 01       	movw	r6, r16
    209e:	f2 e0       	ldi	r31, 0x02	; 2
    20a0:	6f 0e       	add	r6, r31
    20a2:	71 1c       	adc	r7, r1
    20a4:	f8 01       	movw	r30, r16
    20a6:	a0 80       	ld	r10, Z
    20a8:	b1 80       	ldd	r11, Z+1	; 0x01
    20aa:	26 ff       	sbrs	r18, 6
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <vfprintf+0x17e>
    20ae:	65 2d       	mov	r22, r5
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfprintf+0x182>
    20b4:	6f ef       	ldi	r22, 0xFF	; 255
    20b6:	7f ef       	ldi	r23, 0xFF	; 255
    20b8:	c5 01       	movw	r24, r10
    20ba:	2c 87       	std	Y+12, r18	; 0x0c
    20bc:	2a d1       	rcall	.+596    	; 0x2312 <strnlen_P>
    20be:	2c 01       	movw	r4, r24
    20c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c2:	20 68       	ori	r18, 0x80	; 128
    20c4:	22 2e       	mov	r2, r18
    20c6:	83 01       	movw	r16, r6
    20c8:	23 fc       	sbrc	r2, 3
    20ca:	19 c0       	rjmp	.+50     	; 0x20fe <vfprintf+0x1c8>
    20cc:	83 2d       	mov	r24, r3
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	48 16       	cp	r4, r24
    20d2:	59 06       	cpc	r5, r25
    20d4:	a0 f4       	brcc	.+40     	; 0x20fe <vfprintf+0x1c8>
    20d6:	b7 01       	movw	r22, r14
    20d8:	80 e2       	ldi	r24, 0x20	; 32
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a8 de       	rcall	.-688    	; 0x1e2e <fputc>
    20de:	3a 94       	dec	r3
    20e0:	f5 cf       	rjmp	.-22     	; 0x20cc <vfprintf+0x196>
    20e2:	f5 01       	movw	r30, r10
    20e4:	27 fc       	sbrc	r2, 7
    20e6:	85 91       	lpm	r24, Z+
    20e8:	27 fe       	sbrs	r2, 7
    20ea:	81 91       	ld	r24, Z+
    20ec:	5f 01       	movw	r10, r30
    20ee:	b7 01       	movw	r22, r14
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9d de       	rcall	.-710    	; 0x1e2e <fputc>
    20f4:	31 10       	cpse	r3, r1
    20f6:	3a 94       	dec	r3
    20f8:	f1 e0       	ldi	r31, 0x01	; 1
    20fa:	4f 1a       	sub	r4, r31
    20fc:	51 08       	sbc	r5, r1
    20fe:	41 14       	cp	r4, r1
    2100:	51 04       	cpc	r5, r1
    2102:	79 f7       	brne	.-34     	; 0x20e2 <vfprintf+0x1ac>
    2104:	de c0       	rjmp	.+444    	; 0x22c2 <__stack+0x1c3>
    2106:	84 36       	cpi	r24, 0x64	; 100
    2108:	11 f0       	breq	.+4      	; 0x210e <__stack+0xf>
    210a:	89 36       	cpi	r24, 0x69	; 105
    210c:	31 f5       	brne	.+76     	; 0x215a <__stack+0x5b>
    210e:	f8 01       	movw	r30, r16
    2110:	27 ff       	sbrs	r18, 7
    2112:	07 c0       	rjmp	.+14     	; 0x2122 <__stack+0x23>
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	0c 5f       	subi	r16, 0xFC	; 252
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	08 c0       	rjmp	.+16     	; 0x2132 <__stack+0x33>
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	88 27       	eor	r24, r24
    2128:	77 fd       	sbrc	r23, 7
    212a:	80 95       	com	r24
    212c:	98 2f       	mov	r25, r24
    212e:	0e 5f       	subi	r16, 0xFE	; 254
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	2f 76       	andi	r18, 0x6F	; 111
    2134:	b2 2e       	mov	r11, r18
    2136:	97 ff       	sbrs	r25, 7
    2138:	09 c0       	rjmp	.+18     	; 0x214c <__stack+0x4d>
    213a:	90 95       	com	r25
    213c:	80 95       	com	r24
    213e:	70 95       	com	r23
    2140:	61 95       	neg	r22
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	8f 4f       	sbci	r24, 0xFF	; 255
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	20 68       	ori	r18, 0x80	; 128
    214a:	b2 2e       	mov	r11, r18
    214c:	2a e0       	ldi	r18, 0x0A	; 10
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	a4 01       	movw	r20, r8
    2152:	f5 d0       	rcall	.+490    	; 0x233e <__ultoa_invert>
    2154:	a8 2e       	mov	r10, r24
    2156:	a8 18       	sub	r10, r8
    2158:	43 c0       	rjmp	.+134    	; 0x21e0 <__stack+0xe1>
    215a:	85 37       	cpi	r24, 0x75	; 117
    215c:	29 f4       	brne	.+10     	; 0x2168 <__stack+0x69>
    215e:	2f 7e       	andi	r18, 0xEF	; 239
    2160:	b2 2e       	mov	r11, r18
    2162:	2a e0       	ldi	r18, 0x0A	; 10
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	25 c0       	rjmp	.+74     	; 0x21b2 <__stack+0xb3>
    2168:	f2 2f       	mov	r31, r18
    216a:	f9 7f       	andi	r31, 0xF9	; 249
    216c:	bf 2e       	mov	r11, r31
    216e:	8f 36       	cpi	r24, 0x6F	; 111
    2170:	c1 f0       	breq	.+48     	; 0x21a2 <__stack+0xa3>
    2172:	18 f4       	brcc	.+6      	; 0x217a <__stack+0x7b>
    2174:	88 35       	cpi	r24, 0x58	; 88
    2176:	79 f0       	breq	.+30     	; 0x2196 <__stack+0x97>
    2178:	ad c0       	rjmp	.+346    	; 0x22d4 <__stack+0x1d5>
    217a:	80 37       	cpi	r24, 0x70	; 112
    217c:	19 f0       	breq	.+6      	; 0x2184 <__stack+0x85>
    217e:	88 37       	cpi	r24, 0x78	; 120
    2180:	21 f0       	breq	.+8      	; 0x218a <__stack+0x8b>
    2182:	a8 c0       	rjmp	.+336    	; 0x22d4 <__stack+0x1d5>
    2184:	2f 2f       	mov	r18, r31
    2186:	20 61       	ori	r18, 0x10	; 16
    2188:	b2 2e       	mov	r11, r18
    218a:	b4 fe       	sbrs	r11, 4
    218c:	0d c0       	rjmp	.+26     	; 0x21a8 <__stack+0xa9>
    218e:	8b 2d       	mov	r24, r11
    2190:	84 60       	ori	r24, 0x04	; 4
    2192:	b8 2e       	mov	r11, r24
    2194:	09 c0       	rjmp	.+18     	; 0x21a8 <__stack+0xa9>
    2196:	24 ff       	sbrs	r18, 4
    2198:	0a c0       	rjmp	.+20     	; 0x21ae <__stack+0xaf>
    219a:	9f 2f       	mov	r25, r31
    219c:	96 60       	ori	r25, 0x06	; 6
    219e:	b9 2e       	mov	r11, r25
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <__stack+0xaf>
    21a2:	28 e0       	ldi	r18, 0x08	; 8
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	05 c0       	rjmp	.+10     	; 0x21b2 <__stack+0xb3>
    21a8:	20 e1       	ldi	r18, 0x10	; 16
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <__stack+0xb3>
    21ae:	20 e1       	ldi	r18, 0x10	; 16
    21b0:	32 e0       	ldi	r19, 0x02	; 2
    21b2:	f8 01       	movw	r30, r16
    21b4:	b7 fe       	sbrs	r11, 7
    21b6:	07 c0       	rjmp	.+14     	; 0x21c6 <__stack+0xc7>
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	0c 5f       	subi	r16, 0xFC	; 252
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <__stack+0xd3>
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 5f       	subi	r16, 0xFE	; 254
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	a4 01       	movw	r20, r8
    21d4:	b4 d0       	rcall	.+360    	; 0x233e <__ultoa_invert>
    21d6:	a8 2e       	mov	r10, r24
    21d8:	a8 18       	sub	r10, r8
    21da:	fb 2d       	mov	r31, r11
    21dc:	ff 77       	andi	r31, 0x7F	; 127
    21de:	bf 2e       	mov	r11, r31
    21e0:	b6 fe       	sbrs	r11, 6
    21e2:	0b c0       	rjmp	.+22     	; 0x21fa <__stack+0xfb>
    21e4:	2b 2d       	mov	r18, r11
    21e6:	2e 7f       	andi	r18, 0xFE	; 254
    21e8:	a5 14       	cp	r10, r5
    21ea:	50 f4       	brcc	.+20     	; 0x2200 <__stack+0x101>
    21ec:	b4 fe       	sbrs	r11, 4
    21ee:	0a c0       	rjmp	.+20     	; 0x2204 <__stack+0x105>
    21f0:	b2 fc       	sbrc	r11, 2
    21f2:	08 c0       	rjmp	.+16     	; 0x2204 <__stack+0x105>
    21f4:	2b 2d       	mov	r18, r11
    21f6:	2e 7e       	andi	r18, 0xEE	; 238
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__stack+0x105>
    21fa:	7a 2c       	mov	r7, r10
    21fc:	2b 2d       	mov	r18, r11
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <__stack+0x107>
    2200:	7a 2c       	mov	r7, r10
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <__stack+0x107>
    2204:	75 2c       	mov	r7, r5
    2206:	24 ff       	sbrs	r18, 4
    2208:	0d c0       	rjmp	.+26     	; 0x2224 <__stack+0x125>
    220a:	fe 01       	movw	r30, r28
    220c:	ea 0d       	add	r30, r10
    220e:	f1 1d       	adc	r31, r1
    2210:	80 81       	ld	r24, Z
    2212:	80 33       	cpi	r24, 0x30	; 48
    2214:	11 f4       	brne	.+4      	; 0x221a <__stack+0x11b>
    2216:	29 7e       	andi	r18, 0xE9	; 233
    2218:	09 c0       	rjmp	.+18     	; 0x222c <__stack+0x12d>
    221a:	22 ff       	sbrs	r18, 2
    221c:	06 c0       	rjmp	.+12     	; 0x222a <__stack+0x12b>
    221e:	73 94       	inc	r7
    2220:	73 94       	inc	r7
    2222:	04 c0       	rjmp	.+8      	; 0x222c <__stack+0x12d>
    2224:	82 2f       	mov	r24, r18
    2226:	86 78       	andi	r24, 0x86	; 134
    2228:	09 f0       	breq	.+2      	; 0x222c <__stack+0x12d>
    222a:	73 94       	inc	r7
    222c:	23 fd       	sbrc	r18, 3
    222e:	12 c0       	rjmp	.+36     	; 0x2254 <__stack+0x155>
    2230:	20 ff       	sbrs	r18, 0
    2232:	06 c0       	rjmp	.+12     	; 0x2240 <__stack+0x141>
    2234:	5a 2c       	mov	r5, r10
    2236:	73 14       	cp	r7, r3
    2238:	18 f4       	brcc	.+6      	; 0x2240 <__stack+0x141>
    223a:	53 0c       	add	r5, r3
    223c:	57 18       	sub	r5, r7
    223e:	73 2c       	mov	r7, r3
    2240:	73 14       	cp	r7, r3
    2242:	60 f4       	brcc	.+24     	; 0x225c <__stack+0x15d>
    2244:	b7 01       	movw	r22, r14
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	2c 87       	std	Y+12, r18	; 0x0c
    224c:	f0 dd       	rcall	.-1056   	; 0x1e2e <fputc>
    224e:	73 94       	inc	r7
    2250:	2c 85       	ldd	r18, Y+12	; 0x0c
    2252:	f6 cf       	rjmp	.-20     	; 0x2240 <__stack+0x141>
    2254:	73 14       	cp	r7, r3
    2256:	10 f4       	brcc	.+4      	; 0x225c <__stack+0x15d>
    2258:	37 18       	sub	r3, r7
    225a:	01 c0       	rjmp	.+2      	; 0x225e <__stack+0x15f>
    225c:	31 2c       	mov	r3, r1
    225e:	24 ff       	sbrs	r18, 4
    2260:	11 c0       	rjmp	.+34     	; 0x2284 <__stack+0x185>
    2262:	b7 01       	movw	r22, r14
    2264:	80 e3       	ldi	r24, 0x30	; 48
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	2c 87       	std	Y+12, r18	; 0x0c
    226a:	e1 dd       	rcall	.-1086   	; 0x1e2e <fputc>
    226c:	2c 85       	ldd	r18, Y+12	; 0x0c
    226e:	22 ff       	sbrs	r18, 2
    2270:	16 c0       	rjmp	.+44     	; 0x229e <__stack+0x19f>
    2272:	21 ff       	sbrs	r18, 1
    2274:	03 c0       	rjmp	.+6      	; 0x227c <__stack+0x17d>
    2276:	88 e5       	ldi	r24, 0x58	; 88
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <__stack+0x181>
    227c:	88 e7       	ldi	r24, 0x78	; 120
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	b7 01       	movw	r22, r14
    2282:	0c c0       	rjmp	.+24     	; 0x229c <__stack+0x19d>
    2284:	82 2f       	mov	r24, r18
    2286:	86 78       	andi	r24, 0x86	; 134
    2288:	51 f0       	breq	.+20     	; 0x229e <__stack+0x19f>
    228a:	21 fd       	sbrc	r18, 1
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x193>
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <__stack+0x195>
    2292:	8b e2       	ldi	r24, 0x2B	; 43
    2294:	27 fd       	sbrc	r18, 7
    2296:	8d e2       	ldi	r24, 0x2D	; 45
    2298:	b7 01       	movw	r22, r14
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	c8 dd       	rcall	.-1136   	; 0x1e2e <fputc>
    229e:	a5 14       	cp	r10, r5
    22a0:	30 f4       	brcc	.+12     	; 0x22ae <__stack+0x1af>
    22a2:	b7 01       	movw	r22, r14
    22a4:	80 e3       	ldi	r24, 0x30	; 48
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	c2 dd       	rcall	.-1148   	; 0x1e2e <fputc>
    22aa:	5a 94       	dec	r5
    22ac:	f8 cf       	rjmp	.-16     	; 0x229e <__stack+0x19f>
    22ae:	aa 94       	dec	r10
    22b0:	f4 01       	movw	r30, r8
    22b2:	ea 0d       	add	r30, r10
    22b4:	f1 1d       	adc	r31, r1
    22b6:	80 81       	ld	r24, Z
    22b8:	b7 01       	movw	r22, r14
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	b8 dd       	rcall	.-1168   	; 0x1e2e <fputc>
    22be:	a1 10       	cpse	r10, r1
    22c0:	f6 cf       	rjmp	.-20     	; 0x22ae <__stack+0x1af>
    22c2:	33 20       	and	r3, r3
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <__stack+0x1c9>
    22c6:	5d ce       	rjmp	.-838    	; 0x1f82 <vfprintf+0x4c>
    22c8:	b7 01       	movw	r22, r14
    22ca:	80 e2       	ldi	r24, 0x20	; 32
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	af dd       	rcall	.-1186   	; 0x1e2e <fputc>
    22d0:	3a 94       	dec	r3
    22d2:	f7 cf       	rjmp	.-18     	; 0x22c2 <__stack+0x1c3>
    22d4:	f7 01       	movw	r30, r14
    22d6:	86 81       	ldd	r24, Z+6	; 0x06
    22d8:	97 81       	ldd	r25, Z+7	; 0x07
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <__stack+0x1e1>
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	9f ef       	ldi	r25, 0xFF	; 255
    22e0:	2c 96       	adiw	r28, 0x0c	; 12
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	df 90       	pop	r13
    22fa:	cf 90       	pop	r12
    22fc:	bf 90       	pop	r11
    22fe:	af 90       	pop	r10
    2300:	9f 90       	pop	r9
    2302:	8f 90       	pop	r8
    2304:	7f 90       	pop	r7
    2306:	6f 90       	pop	r6
    2308:	5f 90       	pop	r5
    230a:	4f 90       	pop	r4
    230c:	3f 90       	pop	r3
    230e:	2f 90       	pop	r2
    2310:	08 95       	ret

00002312 <strnlen_P>:
    2312:	fc 01       	movw	r30, r24
    2314:	05 90       	lpm	r0, Z+
    2316:	61 50       	subi	r22, 0x01	; 1
    2318:	70 40       	sbci	r23, 0x00	; 0
    231a:	01 10       	cpse	r0, r1
    231c:	d8 f7       	brcc	.-10     	; 0x2314 <strnlen_P+0x2>
    231e:	80 95       	com	r24
    2320:	90 95       	com	r25
    2322:	8e 0f       	add	r24, r30
    2324:	9f 1f       	adc	r25, r31
    2326:	08 95       	ret

00002328 <strnlen>:
    2328:	fc 01       	movw	r30, r24
    232a:	61 50       	subi	r22, 0x01	; 1
    232c:	70 40       	sbci	r23, 0x00	; 0
    232e:	01 90       	ld	r0, Z+
    2330:	01 10       	cpse	r0, r1
    2332:	d8 f7       	brcc	.-10     	; 0x232a <strnlen+0x2>
    2334:	80 95       	com	r24
    2336:	90 95       	com	r25
    2338:	8e 0f       	add	r24, r30
    233a:	9f 1f       	adc	r25, r31
    233c:	08 95       	ret

0000233e <__ultoa_invert>:
    233e:	fa 01       	movw	r30, r20
    2340:	aa 27       	eor	r26, r26
    2342:	28 30       	cpi	r18, 0x08	; 8
    2344:	51 f1       	breq	.+84     	; 0x239a <__ultoa_invert+0x5c>
    2346:	20 31       	cpi	r18, 0x10	; 16
    2348:	81 f1       	breq	.+96     	; 0x23aa <__ultoa_invert+0x6c>
    234a:	e8 94       	clt
    234c:	6f 93       	push	r22
    234e:	6e 7f       	andi	r22, 0xFE	; 254
    2350:	6e 5f       	subi	r22, 0xFE	; 254
    2352:	7f 4f       	sbci	r23, 0xFF	; 255
    2354:	8f 4f       	sbci	r24, 0xFF	; 255
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	af 4f       	sbci	r26, 0xFF	; 255
    235a:	b1 e0       	ldi	r27, 0x01	; 1
    235c:	3e d0       	rcall	.+124    	; 0x23da <__ultoa_invert+0x9c>
    235e:	b4 e0       	ldi	r27, 0x04	; 4
    2360:	3c d0       	rcall	.+120    	; 0x23da <__ultoa_invert+0x9c>
    2362:	67 0f       	add	r22, r23
    2364:	78 1f       	adc	r23, r24
    2366:	89 1f       	adc	r24, r25
    2368:	9a 1f       	adc	r25, r26
    236a:	a1 1d       	adc	r26, r1
    236c:	68 0f       	add	r22, r24
    236e:	79 1f       	adc	r23, r25
    2370:	8a 1f       	adc	r24, r26
    2372:	91 1d       	adc	r25, r1
    2374:	a1 1d       	adc	r26, r1
    2376:	6a 0f       	add	r22, r26
    2378:	71 1d       	adc	r23, r1
    237a:	81 1d       	adc	r24, r1
    237c:	91 1d       	adc	r25, r1
    237e:	a1 1d       	adc	r26, r1
    2380:	20 d0       	rcall	.+64     	; 0x23c2 <__ultoa_invert+0x84>
    2382:	09 f4       	brne	.+2      	; 0x2386 <__ultoa_invert+0x48>
    2384:	68 94       	set
    2386:	3f 91       	pop	r19
    2388:	2a e0       	ldi	r18, 0x0A	; 10
    238a:	26 9f       	mul	r18, r22
    238c:	11 24       	eor	r1, r1
    238e:	30 19       	sub	r19, r0
    2390:	30 5d       	subi	r19, 0xD0	; 208
    2392:	31 93       	st	Z+, r19
    2394:	de f6       	brtc	.-74     	; 0x234c <__ultoa_invert+0xe>
    2396:	cf 01       	movw	r24, r30
    2398:	08 95       	ret
    239a:	46 2f       	mov	r20, r22
    239c:	47 70       	andi	r20, 0x07	; 7
    239e:	40 5d       	subi	r20, 0xD0	; 208
    23a0:	41 93       	st	Z+, r20
    23a2:	b3 e0       	ldi	r27, 0x03	; 3
    23a4:	0f d0       	rcall	.+30     	; 0x23c4 <__ultoa_invert+0x86>
    23a6:	c9 f7       	brne	.-14     	; 0x239a <__ultoa_invert+0x5c>
    23a8:	f6 cf       	rjmp	.-20     	; 0x2396 <__ultoa_invert+0x58>
    23aa:	46 2f       	mov	r20, r22
    23ac:	4f 70       	andi	r20, 0x0F	; 15
    23ae:	40 5d       	subi	r20, 0xD0	; 208
    23b0:	4a 33       	cpi	r20, 0x3A	; 58
    23b2:	18 f0       	brcs	.+6      	; 0x23ba <__ultoa_invert+0x7c>
    23b4:	49 5d       	subi	r20, 0xD9	; 217
    23b6:	31 fd       	sbrc	r19, 1
    23b8:	40 52       	subi	r20, 0x20	; 32
    23ba:	41 93       	st	Z+, r20
    23bc:	02 d0       	rcall	.+4      	; 0x23c2 <__ultoa_invert+0x84>
    23be:	a9 f7       	brne	.-22     	; 0x23aa <__ultoa_invert+0x6c>
    23c0:	ea cf       	rjmp	.-44     	; 0x2396 <__ultoa_invert+0x58>
    23c2:	b4 e0       	ldi	r27, 0x04	; 4
    23c4:	a6 95       	lsr	r26
    23c6:	97 95       	ror	r25
    23c8:	87 95       	ror	r24
    23ca:	77 95       	ror	r23
    23cc:	67 95       	ror	r22
    23ce:	ba 95       	dec	r27
    23d0:	c9 f7       	brne	.-14     	; 0x23c4 <__ultoa_invert+0x86>
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	61 05       	cpc	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	08 95       	ret
    23da:	9b 01       	movw	r18, r22
    23dc:	ac 01       	movw	r20, r24
    23de:	0a 2e       	mov	r0, r26
    23e0:	06 94       	lsr	r0
    23e2:	57 95       	ror	r21
    23e4:	47 95       	ror	r20
    23e6:	37 95       	ror	r19
    23e8:	27 95       	ror	r18
    23ea:	ba 95       	dec	r27
    23ec:	c9 f7       	brne	.-14     	; 0x23e0 <__ultoa_invert+0xa2>
    23ee:	62 0f       	add	r22, r18
    23f0:	73 1f       	adc	r23, r19
    23f2:	84 1f       	adc	r24, r20
    23f4:	95 1f       	adc	r25, r21
    23f6:	a0 1d       	adc	r26, r0
    23f8:	08 95       	ret

000023fa <_exit>:
    23fa:	f8 94       	cli

000023fc <__stop_program>:
    23fc:	ff cf       	rjmp	.-2      	; 0x23fc <__stop_program>


XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  000024f4  000025a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024f4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  008001ba  008001ba  00002662  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00002662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a98  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000016f  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000326b  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e89c  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003bcc  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000050ba  00000000  00000000  00015fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000015a8  00000000  00000000  0001b078  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004d35  00000000  00000000  0001c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000879b  00000000  00000000  00021355  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000988  00000000  00000000  00029af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	37 c2       	rjmp	.+1134   	; 0x474 <__vector_1>
       6:	00 00       	nop
       8:	cf c0       	rjmp	.+414    	; 0x1a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c0       	rjmp	.+410    	; 0x1a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c0       	rjmp	.+406    	; 0x1a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c0       	rjmp	.+402    	; 0x1a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c0       	rjmp	.+394    	; 0x1a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c0       	rjmp	.+390    	; 0x1a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c0       	rjmp	.+386    	; 0x1a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_10>
      2c:	bd c0       	rjmp	.+378    	; 0x1a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bb c0       	rjmp	.+374    	; 0x1a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b7 c0       	rjmp	.+366    	; 0x1a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c0       	rjmp	.+362    	; 0x1a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c0       	rjmp	.+358    	; 0x1a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	3b c2       	rjmp	.+1142   	; 0x4bc <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	af c0       	rjmp	.+350    	; 0x1a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c0       	rjmp	.+346    	; 0x1a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c0       	rjmp	.+342    	; 0x1a8 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	63 c3       	rjmp	.+1734   	; 0x71c <__vector_21>
      56:	00 00       	nop
      58:	a7 c0       	rjmp	.+334    	; 0x1a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c0       	rjmp	.+330    	; 0x1a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c0       	rjmp	.+326    	; 0x1a8 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	a1 c0       	rjmp	.+322    	; 0x1a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c0       	rjmp	.+318    	; 0x1a8 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	9d c0       	rjmp	.+314    	; 0x1a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c0       	rjmp	.+310    	; 0x1a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c0       	rjmp	.+306    	; 0x1a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c0       	rjmp	.+302    	; 0x1a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c0       	rjmp	.+298    	; 0x1a8 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	73 c2       	rjmp	.+1254   	; 0x568 <__vector_32>
      82:	00 00       	nop
      84:	91 c0       	rjmp	.+290    	; 0x1a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c0       	rjmp	.+286    	; 0x1a8 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	8d c0       	rjmp	.+282    	; 0x1a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c0       	rjmp	.+278    	; 0x1a8 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	89 c0       	rjmp	.+274    	; 0x1a8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <USART_ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	64 00 67 00 65 00 00 00                             d.g.e...

000000c0 <USART_ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <USART_LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      da:	04 03 09 04                                         ....

000000de <USART_ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ee:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000011c <USART_DeviceDescriptor>:
     11c:	12 01 10 01 02 00 00 10 eb 03 4b 20 01 00 01 02     ..........K ....
     12c:	dc 01                                               ..

0000012e <AVRISP_ProductString>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     13e:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

00000148 <AVRISP_ManufacturerString>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     148:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

00000156 <AVRISP_LanguageString>:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	04 03 09 04                                         ....

0000015a <AVRISP_DeviceDescriptor>:
     15a:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
				ReportSize     -= 2;
				ReportData     += 2;
     16a:	03 01                                               ..

0000016c <__ctors_end>:
				break;
     16c:	11 24       	eor	r1, r1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d0 e2       	ldi	r29, 0x20	; 32
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
				ReportSize     -= 1;
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
				ReportData     += 1;
     17e:	e4 ef       	ldi	r30, 0xF4	; 244
     180:	f4 e2       	ldi	r31, 0x24	; 36
     182:	00 e0       	ldi	r16, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	0b bf       	out	0x3b, r16	; 59
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x14>
     188:	07 90       	elpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	aa 3b       	cpi	r26, 0xBA	; 186
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0x10>

00000192 <__do_clear_bss>:
     192:	12 e0       	ldi	r17, 0x02	; 2
     194:	aa eb       	ldi	r26, 0xBA	; 186
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a8 3e       	cpi	r26, 0xE8	; 232
     19e:	b1 07       	cpc	r27, r17
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	c6 d0       	rcall	.+396    	; 0x330 <main>
     1a4:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	2b cf       	rjmp	.-426    	; 0x0 <__vectors>

000001aa <LEDs_SetAllLEDs>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	95 b1       	in	r25, 0x05	; 5
     1ac:	80 95       	com	r24
     1ae:	90 64       	ori	r25, 0x40	; 64
     1b0:	89 23       	and	r24, r25
     1b2:	85 b9       	out	0x05, r24	; 5
				break;
     1b4:	08 95       	ret

000001b6 <AVRISP_Task>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	8e b3       	in	r24, 0x1e	; 30
     1b8:	84 30       	cpi	r24, 0x04	; 4
     1ba:	69 f4       	brne	.+26     	; 0x1d6 <AVRISP_Task+0x20>
     1bc:	e0 d3       	rcall	.+1984   	; 0x97e <V2Params_UpdateParamValues>
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	80 93 e9 00 	sts	0x00E9, r24
     1c4:	80 91 e8 00 	lds	r24, 0x00E8
     1c8:	82 ff       	sbrs	r24, 2
     1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <AVRISP_Task+0x20>
     1cc:	80 e4       	ldi	r24, 0x40	; 64
     1ce:	ed df       	rcall	.-38     	; 0x1aa <LEDs_SetAllLEDs>
     1d0:	d1 d2       	rcall	.+1442   	; 0x774 <V2Protocol_ProcessCommand>
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	ea cf       	rjmp	.-44     	; 0x1aa <LEDs_SetAllLEDs>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	08 95       	ret

000001d8 <UARTBridge_Task>:
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	8e b3       	in	r24, 0x1e	; 30
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <UARTBridge_Task+0x10>
     1e6:	6c c0       	rjmp	.+216    	; 0x2c0 <UARTBridge_Task+0xe8>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	8f b7       	in	r24, 0x3f	; 63
     1ea:	f8 94       	cli
				break;
     1ec:	20 91 ca 02 	lds	r18, 0x02CA
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f0:	30 91 cb 02 	lds	r19, 0x02CB
     1f4:	8f bf       	out	0x3f, r24	; 63
     1f6:	80 91 c8 02 	lds	r24, 0x02C8
     1fa:	90 91 c9 02 	lds	r25, 0x02C9
     1fe:	28 17       	cp	r18, r24
     200:	39 07       	cpc	r19, r25
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	09 f1       	breq	.+66     	; 0x246 <UARTBridge_Task+0x6e>
     204:	80 e0       	ldi	r24, 0x00	; 0
				break;
     206:	91 e0       	ldi	r25, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CDC_Device_ReceiveByte>
     20c:	97 fd       	sbrc	r25, 7
     20e:	1b c0       	rjmp	.+54     	; 0x246 <UARTBridge_Task+0x6e>
     210:	e0 ec       	ldi	r30, 0xC0	; 192
     212:	f2 e0       	ldi	r31, 0x02	; 2
     214:	a0 81       	ld	r26, Z
     216:	b1 81       	ldd	r27, Z+1	; 0x01
     218:	8c 93       	st	X, r24
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
     224:	26 81       	ldd	r18, Z+6	; 0x06
     226:	37 81       	ldd	r19, Z+7	; 0x07
     228:	82 17       	cp	r24, r18
     22a:	93 07       	cpc	r25, r19
     22c:	21 f4       	brne	.+8      	; 0x236 <UARTBridge_Task+0x5e>
     22e:	84 81       	ldd	r24, Z+4	; 0x04
     230:	95 81       	ldd	r25, Z+5	; 0x05
     232:	91 83       	std	Z+1, r25	; 0x01
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	80 83       	st	Z, r24
     236:	2f b7       	in	r18, 0x3f	; 63
     238:	f8 94       	cli
     23a:	82 85       	ldd	r24, Z+10	; 0x0a
     23c:	93 85       	ldd	r25, Z+11	; 0x0b
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	93 87       	std	Z+11, r25	; 0x0b
     242:	82 87       	std	Z+10, r24	; 0x0a
     244:	2f bf       	out	0x3f, r18	; 63
     246:	8f b7       	in	r24, 0x3f	; 63
     248:	f8 94       	cli
     24a:	c0 91 d6 02 	lds	r28, 0x02D6
     24e:	d0 91 d7 02 	lds	r29, 0x02D7
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	8f bf       	out	0x3f, r24	; 63
     254:	a8 99       	sbic	0x15, 0	; 21
     256:	0b c0       	rjmp	.+22     	; 0x26e <UARTBridge_Task+0x96>
     258:	c9 3c       	cpi	r28, 0xC9	; 201
     25a:	d1 05       	cpc	r29, r1
     25c:	40 f4       	brcc	.+16     	; 0x26e <UARTBridge_Task+0x96>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	0f 91       	pop	r16
     26a:	0c 94 46 11 	jmp	0x228c	; 0x228c <CDC_Device_USBTask>
     26e:	a8 9a       	sbi	0x15, 0	; 21
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	0c ec       	ldi	r16, 0xCC	; 204
				break;
     272:	12 e0       	ldi	r17, 0x02	; 2

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	20 97       	sbiw	r28, 0x00	; 0
     276:	99 f3       	breq	.-26     	; 0x25e <UARTBridge_Task+0x86>
     278:	e0 91 ce 02 	lds	r30, 0x02CE
     27c:	f0 91 cf 02 	lds	r31, 0x02CF
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	60 81       	ld	r22, Z
     282:	80 e0       	ldi	r24, 0x00	; 0
				break;
     284:	91 e0       	ldi	r25, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	0e 94 f5 10 	call	0x21ea	; 0x21ea <CDC_Device_SendByte>
     28a:	81 11       	cpse	r24, r1
     28c:	e8 cf       	rjmp	.-48     	; 0x25e <UARTBridge_Task+0x86>
     28e:	f8 01       	movw	r30, r16
				break;
     290:	82 81       	ldd	r24, Z+2	; 0x02

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	93 81       	ldd	r25, Z+3	; 0x03
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	93 83       	std	Z+3, r25	; 0x03
     298:	82 83       	std	Z+2, r24	; 0x02
     29a:	26 81       	ldd	r18, Z+6	; 0x06
     29c:	37 81       	ldd	r19, Z+7	; 0x07
     29e:	82 17       	cp	r24, r18
				break;
     2a0:	93 07       	cpc	r25, r19

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	21 f4       	brne	.+8      	; 0x2ac <UARTBridge_Task+0xd4>
     2a4:	84 81       	ldd	r24, Z+4	; 0x04
     2a6:	95 81       	ldd	r25, Z+5	; 0x05
     2a8:	93 83       	std	Z+3, r25	; 0x03
     2aa:	82 83       	std	Z+2, r24	; 0x02
				break;
     2ac:	2f b7       	in	r18, 0x3f	; 63

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	f8 94       	cli
     2b0:	82 85       	ldd	r24, Z+10	; 0x0a
     2b2:	93 85       	ldd	r25, Z+11	; 0x0b
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	93 87       	std	Z+11, r25	; 0x0b
     2b8:	82 87       	std	Z+10, r24	; 0x0a
     2ba:	2f bf       	out	0x3f, r18	; 63
				break;
     2bc:	21 97       	sbiw	r28, 0x01	; 1
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	da cf       	rjmp	.-76     	; 0x274 <UARTBridge_Task+0x9c>
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <SetupHardware>:
     2ca:	84 b7       	in	r24, 0x34	; 52
				break;
     2cc:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	84 bf       	out	0x34, r24	; 52
     2d0:	88 e1       	ldi	r24, 0x18	; 24
     2d2:	0f b6       	in	r0, 0x3f	; 63
				break;
     2d4:	f8 94       	cli

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 93 60 00 	sts	0x0060, r24
     2da:	10 92 60 00 	sts	0x0060, r1

				if (ParserData->UsingReportIDs)
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	80 e8       	ldi	r24, 0x80	; 128
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	80 93 61 00 	sts	0x0061, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	90 93 61 00 	sts	0x0061, r25
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	85 b7       	in	r24, 0x35	; 53
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	85 bf       	out	0x35, r24	; 53
     2f8:	85 b7       	in	r24, 0x35	; 53
     2fa:	80 68       	ori	r24, 0x80	; 128
     2fc:	85 bf       	out	0x35, r24	; 53
     2fe:	8f 9a       	sbi	0x11, 7	; 17
     300:	8f e1       	ldi	r24, 0x1F	; 31
     302:	9e e4       	ldi	r25, 0x4E	; 78
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <SetupHardware+0x3a>
     308:	00 c0       	rjmp	.+0      	; 0x30a <SetupHardware+0x40>
     30a:	00 00       	nop
     30c:	8f b1       	in	r24, 0x0f	; 15
     30e:	80 95       	com	r24
     310:	88 1f       	adc	r24, r24
     312:	88 27       	eor	r24, r24
     314:	88 1f       	adc	r24, r24
     316:	80 93 ba 01 	sts	0x01BA, r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31a:	85 b7       	in	r24, 0x35	; 53
     31c:	8f 77       	andi	r24, 0x7F	; 127
     31e:	85 bf       	out	0x35, r24	; 53
     320:	85 b7       	in	r24, 0x35	; 53
     322:	8f 77       	andi	r24, 0x7F	; 127
     324:	85 bf       	out	0x35, r24	; 53
     326:	8c d0       	rcall	.+280    	; 0x440 <SoftUART_Init>
     328:	26 9a       	sbi	0x04, 6	; 4
     32a:	2e 9a       	sbi	0x05, 6	; 5
     32c:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <USB_Init>

00000330 <main>:
     330:	cc df       	rcall	.-104    	; 0x2ca <SetupHardware>
     332:	80 e4       	ldi	r24, 0x40	; 64
     334:	3a df       	rcall	.-396    	; 0x1aa <LEDs_SetAllLEDs>
     336:	78 94       	sei
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	80 91 ba 01 	lds	r24, 0x01BA
     33c:	81 11       	cpse	r24, r1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	02 c0       	rjmp	.+4      	; 0x344 <main+0x14>
     340:	4b df       	rcall	.-362    	; 0x1d8 <UARTBridge_Task>
     342:	01 c0       	rjmp	.+2      	; 0x346 <main+0x16>
     344:	38 df       	rcall	.-400    	; 0x1b6 <AVRISP_Task>
     346:	0e 94 b5 10 	call	0x216a	; 0x216a <USB_USBTask>
     34a:	f6 cf       	rjmp	.-20     	; 0x338 <main+0x8>

0000034c <EVENT_USB_Device_ConfigurationChanged>:
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	80 91 ba 01 	lds	r24, 0x01BA
     35a:	81 11       	cpse	r24, r1
     35c:	37 c0       	rjmp	.+110    	; 0x3cc <EVENT_USB_Device_ConfigurationChanged+0x80>
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <CDC_Device_ConfigureEndpoints>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     366:	95 e0       	ldi	r25, 0x05	; 5
     368:	95 bd       	out	0x25, r25	; 37
     36a:	e0 ec       	ldi	r30, 0xC0	; 192
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	f2 e0       	ldi	r31, 0x02	; 2
     36e:	9f b7       	in	r25, 0x3f	; 63
     370:	f8 94       	cli
     372:	2b e3       	ldi	r18, 0x3B	; 59
     374:	32 e0       	ldi	r19, 0x02	; 2
     376:	31 83       	std	Z+1, r19	; 0x01

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	20 83       	st	Z, r18
     37a:	33 83       	std	Z+3, r19	; 0x03
     37c:	22 83       	std	Z+2, r18	; 0x02
     37e:	35 83       	std	Z+5, r19	; 0x05
     380:	24 83       	std	Z+4, r18	; 0x04
     382:	2b eb       	ldi	r18, 0xBB	; 187
     384:	32 e0       	ldi	r19, 0x02	; 2
     386:	37 83       	std	Z+7, r19	; 0x07
				break;
     388:	26 83       	std	Z+6, r18	; 0x06

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	20 e8       	ldi	r18, 0x80	; 128
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	31 87       	std	Z+9, r19	; 0x09
     390:	20 87       	std	Z+8, r18	; 0x08
     392:	13 86       	std	Z+11, r1	; 0x0b
     394:	12 86       	std	Z+10, r1	; 0x0a
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	9f bf       	out	0x3f, r25	; 63
     398:	ec ec       	ldi	r30, 0xCC	; 204
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	9f b7       	in	r25, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	2b eb       	ldi	r18, 0xBB	; 187
     3a2:	31 e0       	ldi	r19, 0x01	; 1
     3a4:	31 83       	std	Z+1, r19	; 0x01
     3a6:	20 83       	st	Z, r18
     3a8:	33 83       	std	Z+3, r19	; 0x03
     3aa:	22 83       	std	Z+2, r18	; 0x02
     3ac:	35 83       	std	Z+5, r19	; 0x05
     3ae:	24 83       	std	Z+4, r18	; 0x04
				break;
     3b0:	2b e3       	ldi	r18, 0x3B	; 59
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	32 e0       	ldi	r19, 0x02	; 2
     3b4:	37 83       	std	Z+7, r19	; 0x07
     3b6:	26 83       	std	Z+6, r18	; 0x06
     3b8:	20 e8       	ldi	r18, 0x80	; 128
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	31 87       	std	Z+9, r19	; 0x09
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	20 87       	std	Z+8, r18	; 0x08
     3c0:	13 86       	std	Z+11, r1	; 0x0b
     3c2:	12 86       	std	Z+10, r1	; 0x0a
     3c4:	9f bf       	out	0x3f, r25	; 63
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	3b d0       	rcall	.+118    	; 0x440 <SoftUART_Init>
     3ca:	07 c0       	rjmp	.+14     	; 0x3da <EVENT_USB_Device_ConfigurationChanged+0x8e>
     3cc:	42 e3       	ldi	r20, 0x32	; 50
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	60 e8       	ldi	r22, 0x80	; 128
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Endpoint_ConfigureEndpoint_Prv>

					while (CurrCollectionPath->Parent != NULL)
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	b6 d1       	rcall	.+876    	; 0x746 <V2Protocol_Init>
     3da:	89 81       	ldd	r24, Y+1	; 0x01
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	88 23       	and	r24, r24
     3de:	11 f0       	breq	.+4      	; 0x3e4 <EVENT_USB_Device_ConfigurationChanged+0x98>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <EVENT_USB_Device_ConfigurationChanged+0x9a>
     3e4:	80 e4       	ldi	r24, 0x40	; 64
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	de ce       	rjmp	.-580    	; 0x1aa <LEDs_SetAllLEDs>

000003ee <EVENT_USB_Device_ControlRequest>:
     3ee:	80 91 ba 01 	lds	r24, 0x01BA
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f2:	81 11       	cpse	r24, r1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <EVENT_USB_Device_ControlRequest+0x10>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <CDC_Device_ProcessControlRequest>
     3fe:	08 95       	ret

00000400 <EVENT_USB_Device_Connect>:
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	d3 ce       	rjmp	.-602    	; 0x1aa <LEDs_SetAllLEDs>

00000404 <EVENT_USB_Device_Disconnect>:
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	d1 ce       	rjmp	.-606    	; 0x1aa <LEDs_SetAllLEDs>

00000408 <EVENT_CDC_Device_LineEncodingChanged>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	fc 01       	movw	r30, r24
     40a:	24 89       	ldd	r18, Z+20	; 0x14
     40c:	35 89       	ldd	r19, Z+21	; 0x15
     40e:	46 89       	ldd	r20, Z+22	; 0x16
     410:	57 89       	ldd	r21, Z+23	; 0x17
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	72 e1       	ldi	r23, 0x12	; 18
     416:	8a e7       	ldi	r24, 0x7A	; 122
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 3c 12 	call	0x2478	; 0x2478 <__udivmodsi4>
     41e:	21 50       	subi	r18, 0x01	; 1

				if (UsageListSize)
     420:	31 09       	sbc	r19, r1
     422:	30 93 89 00 	sts	0x0089, r19
     426:	20 93 88 00 	sts	0x0088, r18
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	30 93 99 00 	sts	0x0099, r19
     42e:	20 93 98 00 	sts	0x0098, r18
     432:	08 95       	ret

00000434 <CALLBACK_USB_GetDescriptor>:
     434:	70 91 ba 01 	lds	r23, 0x01BA
     438:	71 11       	cpse	r23, r1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <CALLBACK_USB_GetDescriptor+0xa>
     43c:	f4 c0       	rjmp	.+488    	; 0x626 <USART_GetDescriptor>
     43e:	27 c1       	rjmp	.+590    	; 0x68e <AVRISP_GetDescriptor>

00000440 <SoftUART_Init>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	59 9a       	sbi	0x0b, 1	; 11
     442:	51 9a       	sbi	0x0a, 1	; 10
     444:	58 9a       	sbi	0x0b, 0	; 11
     446:	22 e0       	ldi	r18, 0x02	; 2
     448:	20 93 69 00 	sts	0x0069, r18
					  UsageList[i - 1] = UsageList[i];
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	8d bb       	out	0x1d, r24	; 29
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	93 e0       	ldi	r25, 0x03	; 3

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	90 93 89 00 	sts	0x0089, r25
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	80 93 88 00 	sts	0x0088, r24
     45c:	90 93 99 00 	sts	0x0099, r25
     460:	80 93 98 00 	sts	0x0098, r24
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     464:	20 93 6f 00 	sts	0x006F, r18
     468:	20 93 71 00 	sts	0x0071, r18
     46c:	89 e0       	ldi	r24, 0x09	; 9
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	80 93 91 00 	sts	0x0091, r24
     472:	08 95       	ret

00000474 <__vector_1>:
     474:	1f 92       	push	r1
     476:	0f 92       	push	r0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	0f 92       	push	r0
     47c:	11 24       	eor	r1, r1
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	88 e0       	ldi	r24, 0x08	; 8
     484:	80 93 bc 02 	sts	0x02BC, r24
     488:	80 91 88 00 	lds	r24, 0x0088
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48c:	90 91 89 00 	lds	r25, 0x0089
     490:	96 95       	lsr	r25
     492:	87 95       	ror	r24
     494:	91 95       	neg	r25
     496:	81 95       	neg	r24
     498:	91 09       	sbc	r25, r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	90 93 85 00 	sts	0x0085, r25
     49e:	80 93 84 00 	sts	0x0084, r24
     4a2:	48 99       	sbic	0x09, 0	; 9
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__vector_1+0x3a>
     4a6:	1d ba       	out	0x1d, r1	; 29
     4a8:	89 e0       	ldi	r24, 0x09	; 9
     4aa:	80 93 81 00 	sts	0x0081, r24
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_17>:
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	0b b6       	in	r0, 0x3b	; 59
     4c8:	0f 92       	push	r0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
     4da:	89 b1       	in	r24, 0x09	; 9
     4dc:	81 70       	andi	r24, 0x01	; 1
     4de:	20 91 bc 02 	lds	r18, 0x02BC
     4e2:	22 23       	and	r18, r18
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	71 f0       	breq	.+28     	; 0x502 <__vector_17+0x46>
     4e6:	90 91 bb 02 	lds	r25, 0x02BB
     4ea:	96 95       	lsr	r25
     4ec:	90 93 bb 02 	sts	0x02BB, r25
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	21 50       	subi	r18, 0x01	; 1
     4f2:	20 93 bc 02 	sts	0x02BC, r18
     4f6:	88 23       	and	r24, r24
     4f8:	41 f1       	breq	.+80     	; 0x54a <__vector_17+0x8e>
     4fa:	90 68       	ori	r25, 0x80	; 128
     4fc:	90 93 bb 02 	sts	0x02BB, r25
     500:	24 c0       	rjmp	.+72     	; 0x54a <__vector_17+0x8e>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	10 92 81 00 	sts	0x0081, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9c bb       	out	0x1c, r25	; 28
     50a:	9d bb       	out	0x1d, r25	; 29
     50c:	88 23       	and	r24, r24
     50e:	e9 f0       	breq	.+58     	; 0x54a <__vector_17+0x8e>
     510:	ec ec       	ldi	r30, 0xCC	; 204
     512:	f2 e0       	ldi	r31, 0x02	; 2
     514:	a0 81       	ld	r26, Z
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	b1 81       	ldd	r27, Z+1	; 0x01
     518:	80 91 bb 02 	lds	r24, 0x02BB
     51c:	8c 93       	st	X, r24

					if (UsageListSize)
     51e:	80 81       	ld	r24, Z
     520:	91 81       	ldd	r25, Z+1	; 0x01
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	26 81       	ldd	r18, Z+6	; 0x06
     52a:	37 81       	ldd	r19, Z+7	; 0x07
     52c:	82 17       	cp	r24, r18
     52e:	93 07       	cpc	r25, r19
     530:	21 f4       	brne	.+8      	; 0x53a <__vector_17+0x7e>
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	95 81       	ldd	r25, Z+5	; 0x05
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
     53a:	2f b7       	in	r18, 0x3f	; 63
     53c:	f8 94       	cli

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	82 85       	ldd	r24, Z+10	; 0x0a
     540:	93 85       	ldd	r25, Z+11	; 0x0b
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	93 87       	std	Z+11, r25	; 0x0b
     546:	82 87       	std	Z+10, r24	; 0x0a
     548:	2f bf       	out	0x3f, r18	; 63
						  UsageList[i - 1] = UsageList[i];
     54a:	ff 91       	pop	r31
     54c:	ef 91       	pop	r30
     54e:	bf 91       	pop	r27
     550:	af 91       	pop	r26

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0b be       	out	0x3b, r0	; 59
     55e:	0f 90       	pop	r0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	0f be       	out	0x3f, r0	; 63
     562:	0f 90       	pop	r0
     564:	1f 90       	pop	r1
     566:	18 95       	reti

00000568 <__vector_32>:
     568:	1f 92       	push	r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	2f 93       	push	r18
     578:	3f 93       	push	r19
     57a:	8f 93       	push	r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	bf 93       	push	r27
     582:	ef 93       	push	r30
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	ff 93       	push	r31
     586:	80 91 be 02 	lds	r24, 0x02BE
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	88 23       	and	r24, r24
     58c:	81 f0       	breq	.+32     	; 0x5ae <__vector_32+0x46>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	80 91 bd 02 	lds	r24, 0x02BD

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	80 ff       	sbrs	r24, 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <__vector_32+0x32>
     596:	59 98       	cbi	0x0b, 1	; 11
     598:	01 c0       	rjmp	.+2      	; 0x59c <__vector_32+0x34>
     59a:	59 9a       	sbi	0x0b, 1	; 11
     59c:	80 91 bd 02 	lds	r24, 0x02BD
     5a0:	86 95       	lsr	r24
     5a2:	80 93 bd 02 	sts	0x02BD, r24
     5a6:	80 91 be 02 	lds	r24, 0x02BE
     5aa:	81 50       	subi	r24, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	2b c0       	rjmp	.+86     	; 0x604 <__vector_32+0x9c>
     5ae:	80 91 bc 02 	lds	r24, 0x02BC
     5b2:	81 11       	cpse	r24, r1
     5b4:	29 c0       	rjmp	.+82     	; 0x608 <__vector_32+0xa0>
     5b6:	2f b7       	in	r18, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	80 91 ca 02 	lds	r24, 0x02CA

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	90 91 cb 02 	lds	r25, 0x02CB
     5c2:	2f bf       	out	0x3f, r18	; 63
     5c4:	89 2b       	or	r24, r25
     5c6:	01 f1       	breq	.+64     	; 0x608 <__vector_32+0xa0>
     5c8:	59 98       	cbi	0x0b, 1	; 11
     5ca:	e0 ec       	ldi	r30, 0xC0	; 192
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	a2 81       	ldd	r26, Z+2	; 0x02
     5d0:	b3 81       	ldd	r27, Z+3	; 0x03
     5d2:	2d 91       	ld	r18, X+
     5d4:	b3 83       	std	Z+3, r27	; 0x03
     5d6:	a2 83       	std	Z+2, r26	; 0x02
     5d8:	86 81       	ldd	r24, Z+6	; 0x06
     5da:	97 81       	ldd	r25, Z+7	; 0x07
     5dc:	a8 17       	cp	r26, r24
     5de:	b9 07       	cpc	r27, r25
     5e0:	21 f4       	brne	.+8      	; 0x5ea <__vector_32+0x82>
     5e2:	84 81       	ldd	r24, Z+4	; 0x04
     5e4:	95 81       	ldd	r25, Z+5	; 0x05
     5e6:	93 83       	std	Z+3, r25	; 0x03
     5e8:	82 83       	std	Z+2, r24	; 0x02
     5ea:	3f b7       	in	r19, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	82 85       	ldd	r24, Z+10	; 0x0a
     5f0:	93 85       	ldd	r25, Z+11	; 0x0b
     5f2:	01 97       	sbiw	r24, 0x01	; 1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	93 87       	std	Z+11, r25	; 0x0b
     5f6:	82 87       	std	Z+10, r24	; 0x0a
     5f8:	3f bf       	out	0x3f, r19	; 63
     5fa:	82 2f       	mov	r24, r18
     5fc:	80 95       	com	r24
					  return HID_PARSE_InsufficientReportItems;
     5fe:	80 93 bd 02 	sts	0x02BD, r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	89 e0       	ldi	r24, 0x09	; 9
     604:	80 93 be 02 	sts	0x02BE, r24
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	3f 91       	pop	r19
     616:	2f 91       	pop	r18
     618:	0f 90       	pop	r0
     61a:	0b be       	out	0x3b, r0	; 59
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <USART_GetDescriptor>:
     626:	f9 01       	movw	r30, r18
     628:	10 82       	st	Z, r1
     62a:	29 2f       	mov	r18, r25
     62c:	33 27       	eor	r19, r19
     62e:	22 30       	cpi	r18, 0x02	; 2
     630:	31 05       	cpc	r19, r1
     632:	59 f0       	breq	.+22     	; 0x64a <USART_GetDescriptor+0x24>
     634:	23 30       	cpi	r18, 0x03	; 3
     636:	31 05       	cpc	r19, r1
     638:	69 f0       	breq	.+26     	; 0x654 <USART_GetDescriptor+0x2e>
     63a:	21 30       	cpi	r18, 0x01	; 1
     63c:	31 05       	cpc	r19, r1
     63e:	f9 f4       	brne	.+62     	; 0x67e <USART_GetDescriptor+0x58>
     640:	82 e1       	ldi	r24, 0x12	; 18
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	2c e1       	ldi	r18, 0x1C	; 28
     646:	31 e0       	ldi	r19, 0x01	; 1
     648:	1e c0       	rjmp	.+60     	; 0x686 <USART_GetDescriptor+0x60>
     64a:	8e e3       	ldi	r24, 0x3E	; 62
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	2e ed       	ldi	r18, 0xDE	; 222
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	19 c0       	rjmp	.+50     	; 0x686 <USART_GetDescriptor+0x60>
     654:	99 27       	eor	r25, r25
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	91 05       	cpc	r25, r1
     65a:	41 f0       	breq	.+16     	; 0x66c <USART_GetDescriptor+0x46>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	41 f0       	breq	.+16     	; 0x672 <USART_GetDescriptor+0x4c>
     662:	89 2b       	or	r24, r25
     664:	61 f4       	brne	.+24     	; 0x67e <USART_GetDescriptor+0x58>
     666:	ea ed       	ldi	r30, 0xDA	; 218
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	05 c0       	rjmp	.+10     	; 0x676 <USART_GetDescriptor+0x50>
     66c:	e0 ec       	ldi	r30, 0xC0	; 192
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <USART_GetDescriptor+0x50>
     672:	e8 e9       	ldi	r30, 0x98	; 152
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	84 91       	lpm	r24, Z
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	9f 01       	movw	r18, r30
     67c:	04 c0       	rjmp	.+8      	; 0x686 <USART_GetDescriptor+0x60>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	fa 01       	movw	r30, r20
					  ParserData->TotalReportItems++;
     688:	31 83       	std	Z+1, r19	; 0x01
     68a:	20 83       	st	Z, r18
     68c:	08 95       	ret

0000068e <AVRISP_GetDescriptor>:
     68e:	f9 01       	movw	r30, r18
     690:	10 82       	st	Z, r1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	29 2f       	mov	r18, r25
     694:	33 27       	eor	r19, r19
     696:	22 30       	cpi	r18, 0x02	; 2
     698:	31 05       	cpc	r19, r1
     69a:	59 f0       	breq	.+22     	; 0x6b2 <AVRISP_GetDescriptor+0x24>
     69c:	23 30       	cpi	r18, 0x03	; 3
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	31 05       	cpc	r19, r1
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <AVRISP_GetDescriptor+0x32>
     6a2:	21 30       	cpi	r18, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	31 05       	cpc	r19, r1
     6a6:	91 f5       	brne	.+100    	; 0x70c <AVRISP_GetDescriptor+0x7e>
     6a8:	82 e1       	ldi	r24, 0x12	; 18
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	2a e5       	ldi	r18, 0x5A	; 90
     6ae:	31 e0       	ldi	r19, 0x01	; 1
     6b0:	31 c0       	rjmp	.+98     	; 0x714 <AVRISP_GetDescriptor+0x86>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	80 83       	st	Z, r24
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	90 e0       	ldi	r25, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	29 e3       	ldi	r18, 0x39	; 57
     6bc:	31 e0       	ldi	r19, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	2a c0       	rjmp	.+84     	; 0x714 <AVRISP_GetDescriptor+0x86>
     6c0:	99 27       	eor	r25, r25
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	91 05       	cpc	r25, r1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	c9 f0       	breq	.+50     	; 0x6fa <AVRISP_GetDescriptor+0x6c>
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <AVRISP_GetDescriptor+0x46>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	89 2b       	or	r24, r25
     6cc:	f9 f4       	brne	.+62     	; 0x70c <AVRISP_GetDescriptor+0x7e>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	e6 e5       	ldi	r30, 0x56	; 86
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	18 c0       	rjmp	.+48     	; 0x704 <AVRISP_GetDescriptor+0x76>
     6d4:	82 30       	cpi	r24, 0x02	; 2
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	91 05       	cpc	r25, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	99 f0       	breq	.+38     	; 0x700 <AVRISP_GetDescriptor+0x72>
     6da:	03 97       	sbiw	r24, 0x03	; 3
     6dc:	b9 f4       	brne	.+46     	; 0x70c <AVRISP_GetDescriptor+0x7e>
     6de:	80 91 1b 01 	lds	r24, 0x011B
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	23 e3       	ldi	r18, 0x33	; 51
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	30 93 2a 01 	sts	0x012A, r19
     6ec:	20 93 29 01 	sts	0x0129, r18
     6f0:	22 e0       	ldi	r18, 0x02	; 2
     6f2:	20 83       	st	Z, r18
     6f4:	2b e1       	ldi	r18, 0x1B	; 27
     6f6:	31 e0       	ldi	r19, 0x01	; 1
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <AVRISP_GetDescriptor+0x86>
     6fa:	e8 e4       	ldi	r30, 0x48	; 72
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <AVRISP_GetDescriptor+0x76>
     700:	ee e2       	ldi	r30, 0x2E	; 46
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	84 91       	lpm	r24, Z
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9f 01       	movw	r18, r30
     70a:	04 c0       	rjmp	.+8      	; 0x714 <AVRISP_GetDescriptor+0x86>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     714:	fa 01       	movw	r30, r20
     716:	31 83       	std	Z+1, r19	; 0x01
     718:	20 83       	st	Z, r18
	return Size;
}
     71a:	08 95       	ret

0000071c <__vector_21>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     71c:	78 94       	sei
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     72a:	8a b5       	in	r24, 0x2a	; 42
     72c:	88 23       	and	r24, r24
     72e:	21 f0       	breq	.+8      	; 0x738 <__vector_21+0x1c>
	  TimeoutTicksRemaining--;
     730:	8a b5       	in	r24, 0x2a	; 42
     732:	81 50       	subi	r24, 0x01	; 1
     734:	8a bd       	out	0x2a, r24	; 42
     736:	01 c0       	rjmp	.+2      	; 0x73a <__vector_21+0x1e>
	else
	  TCCR0B = 0;
     738:	15 bc       	out	0x25, r1	; 37
}
     73a:	8f 91       	pop	r24
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     746:	ea e7       	ldi	r30, 0x7A	; 122
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	87 ea       	ldi	r24, 0xA7	; 167
     74c:	80 83       	st	Z, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     74e:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     750:	ae e7       	ldi	r26, 0x7E	; 126
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	8c 91       	ld	r24, X
     756:	84 60       	ori	r24, 0x04	; 4
     758:	8c 93       	st	X, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     75a:	82 e4       	ldi	r24, 0x42	; 66
     75c:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     760:	80 81       	ld	r24, Z
     762:	80 64       	ori	r24, 0x40	; 64
     764:	80 83       	st	Z, r24
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     766:	8d e4       	ldi	r24, 0x4D	; 77
     768:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     76e:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
     772:	ea c0       	rjmp	.+468    	; 0x948 <V2Params_LoadNonVolatileParamValues>

00000774 <V2Protocol_ProcessCommand>:
     774:	0f 93       	push	r16
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	1f 92       	push	r1
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     782:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     786:	84 e6       	ldi	r24, 0x64	; 100
     788:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));
     78a:	85 e0       	ldi	r24, 0x05	; 5
     78c:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     78e:	16 30       	cpi	r17, 0x06	; 6
     790:	09 f4       	brne	.+2      	; 0x794 <V2Protocol_ProcessCommand+0x20>
     792:	68 c0       	rjmp	.+208    	; 0x864 <V2Protocol_ProcessCommand+0xf0>
     794:	38 f4       	brcc	.+14     	; 0x7a4 <V2Protocol_ProcessCommand+0x30>
     796:	11 30       	cpi	r17, 0x01	; 1
     798:	f1 f0       	breq	.+60     	; 0x7d6 <V2Protocol_ProcessCommand+0x62>
     79a:	08 f4       	brcc	.+2      	; 0x79e <V2Protocol_ProcessCommand+0x2a>
     79c:	8f c0       	rjmp	.+286    	; 0x8bc <V2Protocol_ProcessCommand+0x148>
     79e:	14 30       	cpi	r17, 0x04	; 4
     7a0:	b0 f1       	brcs	.+108    	; 0x80e <V2Protocol_ProcessCommand+0x9a>
     7a2:	8c c0       	rjmp	.+280    	; 0x8bc <V2Protocol_ProcessCommand+0x148>
     7a4:	10 35       	cpi	r17, 0x50	; 80
     7a6:	09 f4       	brne	.+2      	; 0x7aa <V2Protocol_ProcessCommand+0x36>
     7a8:	87 c0       	rjmp	.+270    	; 0x8b8 <V2Protocol_ProcessCommand+0x144>
     7aa:	11 35       	cpi	r17, 0x51	; 81
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <V2Protocol_ProcessCommand+0x3c>
     7ae:	82 c0       	rjmp	.+260    	; 0x8b4 <V2Protocol_ProcessCommand+0x140>
     7b0:	1a 30       	cpi	r17, 0x0A	; 10
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <V2Protocol_ProcessCommand+0x42>
     7b4:	83 c0       	rjmp	.+262    	; 0x8bc <V2Protocol_ProcessCommand+0x148>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b6:	80 91 e8 00 	lds	r24, 0x00E8
     7ba:	8b 77       	andi	r24, 0x7B	; 123
     7bc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7c6:	80 91 ec 00 	lds	r24, 0x00EC
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7d0:	10 93 f1 00 	sts	0x00F1, r17
     7d4:	6c c0       	rjmp	.+216    	; 0x8ae <V2Protocol_ProcessCommand+0x13a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d6:	80 91 e8 00 	lds	r24, 0x00E8
     7da:	8b 77       	andi	r24, 0x7B	; 123
     7dc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7e6:	80 91 ec 00 	lds	r24, 0x00EC
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7f0:	10 93 f1 00 	sts	0x00F1, r17
     7f4:	10 92 f1 00 	sts	0x00F1, r1
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	8f ea       	ldi	r24, 0xAF	; 175
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	a9 d7       	rcall	.+3922   	; 0x175e <Endpoint_Write_Stream_LE>
     80c:	78 c0       	rjmp	.+240    	; 0x8fe <V2Protocol_ProcessCommand+0x18a>
     80e:	00 91 f1 00 	lds	r16, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     812:	12 30       	cpi	r17, 0x02	; 2
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     814:	11 f4       	brne	.+4      	; 0x81a <V2Protocol_ProcessCommand+0xa6>
     816:	60 91 f1 00 	lds	r22, 0x00F1
     81a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     81e:	8b 77       	andi	r24, 0x7B	; 123
     820:	80 93 e8 00 	sts	0x00E8, r24
     824:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     826:	80 93 e9 00 	sts	0x00E9, r24
     82a:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	80 93 ec 00 	sts	0x00EC, r24
     834:	10 93 f1 00 	sts	0x00F1, r17
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     838:	80 2f       	mov	r24, r16
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	b7 d0       	rcall	.+366    	; 0x9ac <V2Params_GetParameterPrivileges>
     83e:	69 81       	ldd	r22, Y+1	; 0x01
     840:	12 30       	cpi	r17, 0x02	; 2

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     842:	39 f4       	brne	.+14     	; 0x852 <V2Protocol_ProcessCommand+0xde>
     844:	81 ff       	sbrs	r24, 1
     846:	0c c0       	rjmp	.+24     	; 0x860 <V2Protocol_ProcessCommand+0xec>
     848:	10 92 f1 00 	sts	0x00F1, r1
     84c:	80 2f       	mov	r24, r16
     84e:	be d0       	rcall	.+380    	; 0x9cc <V2Params_SetParameterValue>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     850:	56 c0       	rjmp	.+172    	; 0x8fe <V2Protocol_ProcessCommand+0x18a>
     852:	80 ff       	sbrs	r24, 0
     854:	05 c0       	rjmp	.+10     	; 0x860 <V2Protocol_ProcessCommand+0xec>
     856:	10 92 f1 00 	sts	0x00F1, r1
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     85a:	80 2f       	mov	r24, r16
     85c:	af d0       	rcall	.+350    	; 0x9bc <V2Params_GetParameterValue>
     85e:	4d c0       	rjmp	.+154    	; 0x8fa <V2Protocol_ProcessCommand+0x186>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     860:	80 ec       	ldi	r24, 0xC0	; 192
     862:	4b c0       	rjmp	.+150    	; 0x8fa <V2Protocol_ProcessCommand+0x186>
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	64 e0       	ldi	r22, 0x04	; 4
     86a:	70 e0       	ldi	r23, 0x00	; 0
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     86c:	89 ed       	ldi	r24, 0xD9	; 217
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 3f 0c 	call	0x187e	; 0x187e <Endpoint_Read_Stream_BE>
     874:	80 91 e8 00 	lds	r24, 0x00E8
     878:	8b 77       	andi	r24, 0x7B	; 123
     87a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	80 93 e9 00 	sts	0x00E9, r24
     884:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     888:	81 60       	ori	r24, 0x01	; 1
     88a:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     88e:	80 91 d9 02 	lds	r24, 0x02D9
     892:	90 91 da 02 	lds	r25, 0x02DA

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     896:	a0 91 db 02 	lds	r26, 0x02DB
     89a:	b0 91 dc 02 	lds	r27, 0x02DC
     89e:	b7 ff       	sbrs	r27, 7
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <V2Protocol_ProcessCommand+0x134>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 d8 02 	sts	0x02D8, r24
     8a8:	86 e0       	ldi	r24, 0x06	; 6
	  MustLoadExtendedAddress = true;
     8aa:	80 93 f1 00 	sts	0x00F1, r24
     8ae:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8b2:	25 c0       	rjmp	.+74     	; 0x8fe <V2Protocol_ProcessCommand+0x18a>
     8b4:	ea d1       	rcall	.+980    	; 0xc8a <XPROGProtocol_SetMode>
     8b6:	28 c0       	rjmp	.+80     	; 0x908 <V2Protocol_ProcessCommand+0x194>
     8b8:	18 d2       	rcall	.+1072   	; 0xcea <XPROGProtocol_Command>
     8ba:	26 c0       	rjmp	.+76     	; 0x908 <V2Protocol_ProcessCommand+0x194>
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     8bc:	80 91 f2 00 	lds	r24, 0x00F2
			break;
     8c0:	90 91 f3 00 	lds	r25, 0x00F3
		case CMD_XPROG:
			XPROGProtocol_Command();
     8c4:	80 34       	cpi	r24, 0x40	; 64
			break;
     8c6:	91 05       	cpc	r25, r1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     8c8:	41 f4       	brne	.+16     	; 0x8da <V2Protocol_ProcessCommand+0x166>
     8ca:	80 91 e8 00 	lds	r24, 0x00E8
     8ce:	8b 77       	andi	r24, 0x7B	; 123
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     8d0:	80 93 e8 00 	sts	0x00E8, r24
     8d4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8d8:	f1 cf       	rjmp	.-30     	; 0x8bc <V2Protocol_ProcessCommand+0x148>
     8da:	80 91 e8 00 	lds	r24, 0x00E8
     8de:	8b 77       	andi	r24, 0x7B	; 123
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     8e0:	80 93 e8 00 	sts	0x00E8, r24
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	80 93 e9 00 	sts	0x00E9, r24
     8ea:	80 91 ec 00 	lds	r24, 0x00EC
     8ee:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8f0:	80 93 ec 00 	sts	0x00EC, r24
     8f4:	10 93 f1 00 	sts	0x00F1, r17
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8f8:	89 ec       	ldi	r24, 0xC9	; 201
     8fa:	80 93 f1 00 	sts	0x00F1, r24
     8fe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     902:	8e 77       	andi	r24, 0x7E	; 126
     904:	80 93 e8 00 	sts	0x00E8, r24
     908:	15 bc       	out	0x25, r1	; 37
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     90a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Endpoint_WaitUntilReady>
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	80 93 e9 00 	sts	0x00E9, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     914:	80 91 ec 00 	lds	r24, 0x00EC

	Endpoint_WaitUntilReady();
     918:	8e 7f       	andi	r24, 0xFE	; 254
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     91a:	80 93 ec 00 	sts	0x00EC, r24
     91e:	0f 90       	pop	r0
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <V2Params_GetParamFromTable>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
     92a:	e9 e5       	ldi	r30, 0x59	; 89
     92c:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     92e:	90 81       	ld	r25, Z
     930:	89 17       	cp	r24, r25
     932:	41 f0       	breq	.+16     	; 0x944 <V2Params_GetParamFromTable+0x1a>
		  return CurrTableItem;

		CurrTableItem++;
     934:	33 96       	adiw	r30, 0x03	; 3
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	e7 37       	cpi	r30, 0x77	; 119
     93a:	f9 07       	cpc	r31, r25
     93c:	c1 f7       	brne	.-16     	; 0x92e <V2Params_GetParamFromTable+0x4>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
}
     942:	08 95       	ret
     944:	cf 01       	movw	r24, r30
     946:	08 95       	ret

00000948 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__eerd_byte_usb1287>
     954:	d8 2f       	mov	r29, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__eerd_byte_usb1287>
     95e:	c8 2f       	mov	r28, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
     960:	df 3f       	cpi	r29, 0xFF	; 255
     962:	21 f0       	breq	.+8      	; 0x96c <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
     964:	8e e9       	ldi	r24, 0x9E	; 158
     966:	e1 df       	rcall	.-62     	; 0x92a <V2Params_GetParamFromTable>
     968:	fc 01       	movw	r30, r24
     96a:	d2 83       	std	Z+2, r29	; 0x02
     96c:	cf 3f       	cpi	r28, 0xFF	; 255

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
     96e:	21 f0       	breq	.+8      	; 0x978 <V2Params_LoadNonVolatileParamValues+0x30>
     970:	88 e9       	ldi	r24, 0x98	; 152
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
     972:	db df       	rcall	.-74     	; 0x92a <V2Params_GetParamFromTable>
     974:	fc 01       	movw	r30, r24
     976:	c2 83       	std	Z+2, r28	; 0x02
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
}
     97c:	08 95       	ret

0000097e <V2Params_UpdateParamValues>:
     97e:	84 e9       	ldi	r24, 0x94	; 148
     980:	d4 df       	rcall	.-88     	; 0x92a <V2Params_GetParamFromTable>
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     982:	ea e7       	ldi	r30, 0x7A	; 122
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	20 81       	ld	r18, Z
     988:	20 61       	ori	r18, 0x10	; 16
     98a:	20 83       	st	Z, r18
     98c:	40 91 78 00 	lds	r20, 0x0078
				return ADC;
     990:	50 91 79 00 	lds	r21, 0x0079
     994:	62 e3       	ldi	r22, 0x32	; 50
     996:	64 9f       	mul	r22, r20
     998:	90 01       	movw	r18, r0
     99a:	65 9f       	mul	r22, r21
     99c:	30 0d       	add	r19, r0
     99e:	11 24       	eor	r1, r1
     9a0:	23 2f       	mov	r18, r19
     9a2:	26 95       	lsr	r18
     9a4:	26 95       	lsr	r18
     9a6:	fc 01       	movw	r30, r24
     9a8:	22 83       	std	Z+2, r18	; 0x02
     9aa:	08 95       	ret

000009ac <V2Params_GetParameterPrivileges>:
     9ac:	be df       	rcall	.-132    	; 0x92a <V2Params_GetParamFromTable>
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     9ae:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <V2Params_GetParameterPrivileges+0xc>
     9b2:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamPrivileges;
     9b4:	81 81       	ldd	r24, Z+1	; 0x01
     9b6:	08 95       	ret
     9b8:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     9ba:	08 95       	ret

000009bc <V2Params_GetParameterValue>:

	return ParamInfo->ParamPrivileges;
}
     9bc:	b6 df       	rcall	.-148    	; 0x92a <V2Params_GetParamFromTable>
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     9be:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     9c0:	19 f0       	breq	.+6      	; 0x9c8 <V2Params_GetParameterValue+0xc>
     9c2:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamValue;
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	08 95       	ret
     9c8:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     9ca:	08 95       	ret

000009cc <V2Params_SetParameterValue>:

	return ParamInfo->ParamValue;
}
     9cc:	1f 93       	push	r17
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	1f 92       	push	r1
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	18 2f       	mov	r17, r24
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     9da:	69 83       	std	Y+1, r22	; 0x01
     9dc:	a6 df       	rcall	.-180    	; 0x92a <V2Params_GetParamFromTable>
     9de:	69 81       	ldd	r22, Y+1	; 0x01

	if (ParamInfo == NULL)
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	89 f0       	breq	.+34     	; 0xa06 <V2Params_SetParameterValue+0x3a>
     9e4:	fc 01       	movw	r30, r24
	  return;

	ParamInfo->ParamValue = Value;
     9e6:	62 83       	std	Z+2, r22	; 0x02
     9e8:	1e 39       	cpi	r17, 0x9E	; 158

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     9ea:	19 f4       	brne	.+6      	; 0x9f2 <V2Params_SetParameterValue+0x26>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <V2Params_SetParameterValue+0x2e>
     9f2:	18 39       	cpi	r17, 0x98	; 152

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
     9f4:	41 f4       	brne	.+16     	; 0xa06 <V2Params_SetParameterValue+0x3a>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0f 90       	pop	r0
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__eeupd_byte_usb1287>
	if (ParamID == PARAM_RESET_POLARITY)
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     a06:	0f 90       	pop	r0
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	08 95       	ret

00000a10 <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     a10:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
     a12:	69 2f       	mov	r22, r25
     a14:	78 2f       	mov	r23, r24
     a16:	83 2f       	mov	r24, r19
     a18:	92 2f       	mov	r25, r18
     a1a:	08 95       	ret

00000a1c <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	c8 50       	subi	r28, 0x08	; 8
     a36:	d1 40       	sbci	r29, 0x01	; 1
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	68 e0       	ldi	r22, 0x08	; 8
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	cf d6       	rcall	.+3486   	; 0x17ee <Endpoint_Read_Stream_LE>
     a50:	6b 81       	ldd	r22, Y+3	; 0x03
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     a52:	7c 81       	ldd	r23, Y+4	; 0x04
     a54:	8d 81       	ldd	r24, Y+5	; 0x05
     a56:	9e 81       	ldd	r25, Y+6	; 0x06
     a58:	db df       	rcall	.-74     	; 0xa10 <SwapEndian_32>
     a5a:	6b 83       	std	Y+3, r22	; 0x03
     a5c:	7c 83       	std	Y+4, r23	; 0x04
     a5e:	8d 83       	std	Y+5, r24	; 0x05
     a60:	9e 83       	std	Y+6, r25	; 0x06
     a62:	7f 81       	ldd	r23, Y+7	; 0x07
     a64:	68 85       	ldd	r22, Y+8	; 0x08
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a66:	6f 83       	std	Y+7, r22	; 0x07
     a68:	78 87       	std	Y+8, r23	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
     a6e:	ce 01       	movw	r24, r28
     a70:	09 96       	adiw	r24, 0x09	; 9
     a72:	bd d6       	rcall	.+3450   	; 0x17ee <Endpoint_Read_Stream_LE>
     a74:	8f 81       	ldd	r24, Y+7	; 0x07
     a76:	98 85       	ldd	r25, Y+8	; 0x08
     a78:	09 96       	adiw	r24, 0x09	; 9

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a7a:	8f 73       	andi	r24, 0x3F	; 63
     a7c:	99 27       	eor	r25, r25
     a7e:	89 2b       	or	r24, r25
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
     a80:	39 f4       	brne	.+14     	; 0xa90 <XPROGProtocol_WriteMemory+0x74>
     a82:	80 91 e8 00 	lds	r24, 0x00E8
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a86:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a88:	80 93 e8 00 	sts	0x00E8, r24
     a8c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Endpoint_WaitUntilReady>
     a90:	80 91 e8 00 	lds	r24, 0x00E8
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     a94:	8b 77       	andi	r24, 0x7B	; 123
     a96:	80 93 e8 00 	sts	0x00E8, r24
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aa0:	80 91 ec 00 	lds	r24, 0x00EC
     aa4:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     aa6:	80 93 ec 00 	sts	0x00EC, r24
     aaa:	80 91 bf 02 	lds	r24, 0x02BF
     aae:	81 11       	cpse	r24, r1

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     ab0:	2d c0       	rjmp	.+90     	; 0xb0c <XPROGProtocol_WriteMemory+0xf0>
     ab2:	29 81       	ldd	r18, Y+1	; 0x01
     ab4:	21 50       	subi	r18, 0x01	; 1
     ab6:	eb 80       	ldd	r14, Y+3	; 0x03
     ab8:	fc 80       	ldd	r15, Y+4	; 0x04
     aba:	0d 81       	ldd	r16, Y+5	; 0x05
     abc:	1e 81       	ldd	r17, Y+6	; 0x06
     abe:	26 30       	cpi	r18, 0x06	; 6
     ac0:	a0 f4       	brcc	.+40     	; 0xaea <XPROGProtocol_WriteMemory+0xce>
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	ef 56       	subi	r30, 0x6F	; 111
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	80 81       	ld	r24, Z
     acc:	f9 01       	movw	r30, r18
     ace:	e5 57       	subi	r30, 0x75	; 117
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	90 81       	ld	r25, Z
     ad4:	f9 01       	movw	r30, r18
     ad6:	eb 57       	subi	r30, 0x7B	; 123
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	60 81       	ld	r22, Z
     adc:	f9 01       	movw	r30, r18
     ade:	e1 58       	subi	r30, 0x81	; 129
     ae0:	fe 4f       	sbci	r31, 0xFE	; 254
     ae2:	20 81       	ld	r18, Z
     ae4:	22 23       	and	r18, r18
     ae6:	d9 f1       	breq	.+118    	; 0xb5e <XPROGProtocol_WriteMemory+0x142>
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <XPROGProtocol_WriteMemory+0xd4>
     aea:	66 e2       	ldi	r22, 0x26	; 38
     aec:	93 e2       	ldi	r25, 0x23	; 35
     aee:	8e e2       	ldi	r24, 0x2E	; 46
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     af0:	af 80       	ldd	r10, Y+7	; 0x07
     af2:	b8 84       	ldd	r11, Y+8	; 0x08
     af4:	9e 01       	movw	r18, r28
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     af6:	27 5f       	subi	r18, 0xF7	; 247
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	69 01       	movw	r12, r18
     afc:	2a 81       	ldd	r18, Y+2	; 0x02
     afe:	48 2f       	mov	r20, r24
     b00:	89 2f       	mov	r24, r25
     b02:	31 d4       	rcall	.+2146   	; 0x1366 <XMEGANVM_WritePageMemory>
     b04:	81 11       	cpse	r24, r1
     b06:	0b c0       	rjmp	.+22     	; 0xb1e <XPROGProtocol_WriteMemory+0x102>
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	0a c0       	rjmp	.+20     	; 0xb20 <XPROGProtocol_WriteMemory+0x104>
     b0c:	4f 81       	ldd	r20, Y+7	; 0x07
     b0e:	58 85       	ldd	r21, Y+8	; 0x08
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData[0]))))
		{
			ReturnStatus = XPROG_ERR_TIMEOUT;
     b10:	be 01       	movw	r22, r28
     b12:	67 5f       	subi	r22, 0xF7	; 247
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	c9 d5       	rcall	.+2962   	; 0x16ae <TINYNVM_WriteMemory>
     b1c:	f3 cf       	rjmp	.-26     	; 0xb04 <XPROGProtocol_WriteMemory+0xe8>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e5       	ldi	r25, 0x50	; 80
     b22:	90 93 f1 00 	sts	0x00F1, r25
     b26:	94 e0       	ldi	r25, 0x04	; 4
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
     b28:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b2c:	80 93 f1 00 	sts	0x00F1, r24
     b30:	80 91 e8 00 	lds	r24, 0x00E8
     b34:	8e 77       	andi	r24, 0x7E	; 126
     b36:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b3a:	c8 5f       	subi	r28, 0xF8	; 248
     b3c:	de 4f       	sbci	r29, 0xFE	; 254
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	08 95       	ret
     b5e:	29 85       	ldd	r18, Y+9	; 0x09
     b60:	b8 01       	movw	r22, r16
     b62:	a7 01       	movw	r20, r14
     b64:	d1 d3       	rcall	.+1954   	; 0x1308 <XMEGANVM_WriteByteMemory>
     b66:	ce cf       	rjmp	.-100    	; 0xb04 <XPROGProtocol_WriteMemory+0xe8>

00000b68 <XPROGProtocol_ReadMemory>:

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	c7 50       	subi	r28, 0x07	; 7
     b72:	d1 40       	sbci	r29, 0x01	; 1

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	67 e0       	ldi	r22, 0x07	; 7
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	9e 4f       	sbci	r25, 0xFE	; 254
     b8c:	30 d6       	rcall	.+3168   	; 0x17ee <Endpoint_Read_Stream_LE>
     b8e:	ce 5f       	subi	r28, 0xFE	; 254
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     b90:	de 4f       	sbci	r29, 0xFE	; 254
     b92:	68 81       	ld	r22, Y
     b94:	79 81       	ldd	r23, Y+1	; 0x01
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	c2 50       	subi	r28, 0x02	; 2
     b9c:	d1 40       	sbci	r29, 0x01	; 1
     b9e:	38 df       	rcall	.-400    	; 0xa10 <SwapEndian_32>
     ba0:	ce 5f       	subi	r28, 0xFE	; 254
     ba2:	de 4f       	sbci	r29, 0xFE	; 254
     ba4:	68 83       	st	Y, r22
     ba6:	79 83       	std	Y+1, r23	; 0x01
     ba8:	8a 83       	std	Y+2, r24	; 0x02
     baa:	9b 83       	std	Y+3, r25	; 0x03
     bac:	c2 50       	subi	r28, 0x02	; 2
     bae:	d1 40       	sbci	r29, 0x01	; 1
     bb0:	ca 5f       	subi	r28, 0xFA	; 250
     bb2:	de 4f       	sbci	r29, 0xFE	; 254
     bb4:	88 81       	ld	r24, Y
     bb6:	c6 50       	subi	r28, 0x06	; 6
     bb8:	d1 40       	sbci	r29, 0x01	; 1
     bba:	c9 5f       	subi	r28, 0xF9	; 249
     bbc:	de 4f       	sbci	r29, 0xFE	; 254
     bbe:	98 81       	ld	r25, Y
     bc0:	c7 50       	subi	r28, 0x07	; 7
     bc2:	d1 40       	sbci	r29, 0x01	; 1
     bc4:	ca 5f       	subi	r28, 0xFA	; 250
     bc6:	de 4f       	sbci	r29, 0xFE	; 254
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     bc8:	98 83       	st	Y, r25
     bca:	c6 50       	subi	r28, 0x06	; 6
     bcc:	d1 40       	sbci	r29, 0x01	; 1
     bce:	c9 5f       	subi	r28, 0xF9	; 249
     bd0:	de 4f       	sbci	r29, 0xFE	; 254
     bd2:	88 83       	st	Y, r24
     bd4:	c7 50       	subi	r28, 0x07	; 7
     bd6:	d1 40       	sbci	r29, 0x01	; 1
     bd8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bdc:	8b 77       	andi	r24, 0x7B	; 123
     bde:	80 93 e8 00 	sts	0x00E8, r24
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     be8:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	80 93 ec 00 	sts	0x00EC, r24
     bf2:	80 91 bf 02 	lds	r24, 0x02BF
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     bf6:	ca 5f       	subi	r28, 0xFA	; 250
     bf8:	de 4f       	sbci	r29, 0xFE	; 254
     bfa:	28 81       	ld	r18, Y
     bfc:	39 81       	ldd	r19, Y+1	; 0x01
     bfe:	c6 50       	subi	r28, 0x06	; 6
     c00:	d1 40       	sbci	r29, 0x01	; 1
     c02:	81 11       	cpse	r24, r1
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <XPROGProtocol_ReadMemory+0xc2>
     c06:	ce 5f       	subi	r28, 0xFE	; 254
     c08:	de 4f       	sbci	r29, 0xFE	; 254
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c0a:	68 81       	ld	r22, Y
     c0c:	79 81       	ldd	r23, Y+1	; 0x01
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	c2 50       	subi	r28, 0x02	; 2
     c14:	d1 40       	sbci	r29, 0x01	; 1
     c16:	ae 01       	movw	r20, r28
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	31 d3       	rcall	.+1634   	; 0x1280 <XMEGANVM_ReadMemory>
     c1e:	88 23       	and	r24, r24
     c20:	11 f0       	breq	.+4      	; 0xc26 <XPROGProtocol_ReadMemory+0xbe>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <XPROGProtocol_ReadMemory+0xda>
     c26:	83 e0       	ldi	r24, 0x03	; 3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <XPROGProtocol_ReadMemory+0xda>
     c2a:	a9 01       	movw	r20, r18

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
     c2c:	be 01       	movw	r22, r28
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	ce 5f       	subi	r28, 0xFE	; 254
     c34:	de 4f       	sbci	r29, 0xFE	; 254
     c36:	88 81       	ld	r24, Y
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	c2 50       	subi	r28, 0x02	; 2
     c3c:	d1 40       	sbci	r29, 0x01	; 1
     c3e:	0a d5       	rcall	.+2580   	; 0x1654 <TINYNVM_ReadMemory>
     c40:	ee cf       	rjmp	.-36     	; 0xc1e <XPROGProtocol_ReadMemory+0xb6>
     c42:	90 e5       	ldi	r25, 0x50	; 80
     c44:	90 93 f1 00 	sts	0x00F1, r25
     c48:	95 e0       	ldi	r25, 0x05	; 5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c4a:	90 93 f1 00 	sts	0x00F1, r25
     c4e:	80 93 f1 00 	sts	0x00F1, r24
     c52:	81 11       	cpse	r24, r1
     c54:	0b c0       	rjmp	.+22     	; 0xc6c <XPROGProtocol_ReadMemory+0x104>
     c56:	ca 5f       	subi	r28, 0xFA	; 250
     c58:	de 4f       	sbci	r29, 0xFE	; 254

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
     c5a:	68 81       	ld	r22, Y
     c5c:	79 81       	ldd	r23, Y+1	; 0x01
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
     c5e:	c6 50       	subi	r28, 0x06	; 6
     c60:	d1 40       	sbci	r29, 0x01	; 1
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	79 d5       	rcall	.+2802   	; 0x175e <Endpoint_Write_Stream_LE>
     c6c:	80 91 e8 00 	lds	r24, 0x00E8
     c70:	8e 77       	andi	r24, 0x7E	; 126
     c72:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c76:	c9 5f       	subi	r28, 0xF9	; 249
     c78:	de 4f       	sbci	r29, 0xFE	; 254
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62

	Endpoint_ClearIN();
}
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <XPROGProtocol_SetMode>:
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	1f 92       	push	r1
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	a6 d5       	rcall	.+2892   	; 0x17ee <Endpoint_Read_Stream_LE>
     ca2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ca6:	8b 77       	andi	r24, 0x7B	; 123
     ca8:	80 93 e8 00 	sts	0x00E8, r24
     cac:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cae:	80 93 e9 00 	sts	0x00E9, r24
     cb2:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	80 93 ec 00 	sts	0x00EC, r24
     cbc:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     cbe:	80 93 bf 02 	sts	0x02BF, r24
     cc2:	81 e5       	ldi	r24, 0x51	; 81
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc4:	80 93 f1 00 	sts	0x00F1, r24
     cc8:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPROG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <XPROGProtocol_SetMode+0x48>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <XPROGProtocol_SetMode+0x4a>
     cd2:	80 ec       	ldi	r24, 0xC0	; 192
     cd4:	80 93 f1 00 	sts	0x00F1, r24
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cdc:	8e 77       	andi	r24, 0x7E	; 126
     cde:	80 93 e8 00 	sts	0x00E8, r24
     ce2:	0f 90       	pop	r0
	Endpoint_ClearIN();
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <XPROGProtocol_Command>:
     cea:	cf 93       	push	r28

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     cec:	df 93       	push	r29
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <XPROGProtocol_Command+0x6>
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <XPROGProtocol_Command+0x8>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <XPROGProtocol_Command+0xa>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     cf8:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	09 f4       	brne	.+2      	; 0xd02 <XPROGProtocol_Command+0x18>
     d00:	92 c0       	rjmp	.+292    	; 0xe26 <XPROGProtocol_Command+0x13c>
     d02:	38 f4       	brcc	.+14     	; 0xd12 <XPROGProtocol_Command+0x28>
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	71 f1       	breq	.+92     	; 0xd64 <XPROGProtocol_Command+0x7a>
     d08:	08 f0       	brcs	.+2      	; 0xd0c <XPROGProtocol_Command+0x22>
     d0a:	49 c0       	rjmp	.+146    	; 0xd9e <XPROGProtocol_Command+0xb4>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	51 f0       	breq	.+20     	; 0xd24 <XPROGProtocol_Command+0x3a>
     d10:	29 c1       	rjmp	.+594    	; 0xf64 <XPROGProtocol_Command+0x27a>
     d12:	86 30       	cpi	r24, 0x06	; 6
     d14:	09 f4       	brne	.+2      	; 0xd18 <XPROGProtocol_Command+0x2e>
     d16:	8b c0       	rjmp	.+278    	; 0xe2e <XPROGProtocol_Command+0x144>
     d18:	08 f4       	brcc	.+2      	; 0xd1c <XPROGProtocol_Command+0x32>
     d1a:	87 c0       	rjmp	.+270    	; 0xe2a <XPROGProtocol_Command+0x140>
     d1c:	87 30       	cpi	r24, 0x07	; 7
     d1e:	09 f4       	brne	.+2      	; 0xd22 <XPROGProtocol_Command+0x38>
     d20:	cf c0       	rjmp	.+414    	; 0xec0 <XPROGProtocol_Command+0x1d6>
     d22:	20 c1       	rjmp	.+576    	; 0xf64 <XPROGProtocol_Command+0x27a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d24:	80 91 e8 00 	lds	r24, 0x00E8
     d28:	8b 77       	andi	r24, 0x7B	; 123
     d2a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d34:	80 91 ec 00 	lds	r24, 0x00EC
     d38:	81 60       	ori	r24, 0x01	; 1
     d3a:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     d3e:	80 91 bf 02 	lds	r24, 0x02BF
     d42:	81 11       	cpse	r24, r1
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <XPROGProtocol_Command+0x60>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     d46:	1c d2       	rcall	.+1080   	; 0x1180 <XMEGANVM_EnablePDI>
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <XPROGProtocol_Command+0x6a>
     d4a:	82 30       	cpi	r24, 0x02	; 2
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
     d4c:	11 f4       	brne	.+4      	; 0xd52 <XPROGProtocol_Command+0x68>
     d4e:	3c d4       	rcall	.+2168   	; 0x15c8 <TINYNVM_EnableTPI>
	  NVMBusEnabled = TINYNVM_EnableTPI();
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <XPROGProtocol_Command+0x6a>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e5       	ldi	r25, 0x50	; 80
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
     d56:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	90 93 f1 00 	sts	0x00F1, r25
     d60:	89 27       	eor	r24, r25
     d62:	f9 c0       	rjmp	.+498    	; 0xf56 <XPROGProtocol_Command+0x26c>
	else if (XPROG_SelectedProtocol == XPROG_PROTOCOL_TPI)
	  NVMBusEnabled = TINYNVM_EnableTPI();

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_ENTER_PROGMODE);
	Endpoint_Write_8(NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED);
     d64:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d68:	8b 77       	andi	r24, 0x7B	; 123
     d6a:	80 93 e8 00 	sts	0x00E8, r24
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d74:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	80 93 ec 00 	sts	0x00EC, r24
     d7e:	80 91 bf 02 	lds	r24, 0x02BF
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     d82:	81 11       	cpse	r24, r1
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <XPROGProtocol_Command+0xa0>
     d86:	3b d2       	rcall	.+1142   	; 0x11fe <XMEGANVM_DisablePDI>
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <XPROGProtocol_Command+0xa2>
	  XMEGANVM_DisablePDI();
     d8a:	59 d4       	rcall	.+2226   	; 0x163e <TINYNVM_DisableTPI>
     d8c:	80 e5       	ldi	r24, 0x50	; 80
     d8e:	80 93 f1 00 	sts	0x00F1, r24
	else
	  TINYNVM_DisableTPI();
     d92:	82 e0       	ldi	r24, 0x02	; 2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d94:	80 93 f1 00 	sts	0x00F1, r24
     d98:	10 92 f1 00 	sts	0x00F1, r1
     d9c:	de c0       	rjmp	.+444    	; 0xf5a <XPROGProtocol_Command+0x270>
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	65 e0       	ldi	r22, 0x05	; 5
     da4:	70 e0       	ldi	r23, 0x00	; 0
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	21 d5       	rcall	.+2626   	; 0x17ee <Endpoint_Read_Stream_LE>
     dac:	6a 81       	ldd	r22, Y+2	; 0x02
     dae:	7b 81       	ldd	r23, Y+3	; 0x03
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	2d de       	rcall	.-934    	; 0xa10 <SwapEndian_32>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     db6:	6a 83       	std	Y+2, r22	; 0x02
     db8:	7b 83       	std	Y+3, r23	; 0x03
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	9d 83       	std	Y+5, r25	; 0x05
     dbe:	80 91 e8 00 	lds	r24, 0x00E8
     dc2:	8b 77       	andi	r24, 0x7B	; 123
     dc4:	80 93 e8 00 	sts	0x00E8, r24
     dc8:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dca:	80 93 e9 00 	sts	0x00E9, r24
     dce:	80 91 ec 00 	lds	r24, 0x00EC
     dd2:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dd4:	80 93 ec 00 	sts	0x00EC, r24
     dd8:	80 91 bf 02 	lds	r24, 0x02BF
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ddc:	e9 81       	ldd	r30, Y+1	; 0x01
     dde:	81 11       	cpse	r24, r1
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <XPROGProtocol_Command+0x120>
     de2:	e1 50       	subi	r30, 0x01	; 1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     de4:	e8 30       	cpi	r30, 0x08	; 8
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <XPROGProtocol_Command+0x108>
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	e9 56       	subi	r30, 0x69	; 105
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	80 81       	ld	r24, Z
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <XPROGProtocol_Command+0x10a>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	4a 81       	ldd	r20, Y+2	; 0x02
     df6:	5b 81       	ldd	r21, Y+3	; 0x03
     df8:	6c 81       	ldd	r22, Y+4	; 0x04
     dfa:	7d 81       	ldd	r23, Y+5	; 0x05
     dfc:	26 d3       	rcall	.+1612   	; 0x144a <XMEGANVM_EraseMemory>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
     dfe:	88 23       	and	r24, r24
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e00:	11 f0       	breq	.+4      	; 0xe06 <XPROGProtocol_Command+0x11c>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <XPROGProtocol_Command+0x132>
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <XPROGProtocol_Command+0x132>
     e0a:	e1 30       	cpi	r30, 0x01	; 1
     e0c:	11 f4       	brne	.+4      	; 0xe12 <XPROGProtocol_Command+0x128>
     e0e:	80 e1       	ldi	r24, 0x10	; 16
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <XPROGProtocol_Command+0x12a>
     e12:	84 e1       	ldi	r24, 0x14	; 20
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
     e14:	6a 81       	ldd	r22, Y+2	; 0x02
     e16:	7b 81       	ldd	r23, Y+3	; 0x03
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPROG_ERASE_CHIP)
     e18:	85 d4       	rcall	.+2314   	; 0x1724 <TINYNVM_EraseMemory>
     e1a:	f1 cf       	rjmp	.-30     	; 0xdfe <XPROGProtocol_Command+0x114>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
     e1c:	90 e5       	ldi	r25, 0x50	; 80
     e1e:	90 93 f1 00 	sts	0x00F1, r25
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	96 c0       	rjmp	.+300    	; 0xf52 <XPROGProtocol_Command+0x268>
     e26:	fa dd       	rcall	.-1036   	; 0xa1c <XPROGProtocol_WriteMemory>
     e28:	9d c0       	rjmp	.+314    	; 0xf64 <XPROGProtocol_Command+0x27a>
     e2a:	9e de       	rcall	.-708    	; 0xb68 <XPROGProtocol_ReadMemory>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2c:	9b c0       	rjmp	.+310    	; 0xf64 <XPROGProtocol_Command+0x27a>
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
			break;
		case XPROG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPROG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     e36:	ce 01       	movw	r24, r28
     e38:	06 96       	adiw	r24, 0x06	; 6
			break;
     e3a:	d9 d4       	rcall	.+2482   	; 0x17ee <Endpoint_Read_Stream_LE>
		case XPROG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     e3c:	80 91 e8 00 	lds	r24, 0x00E8
			break;
     e40:	8b 77       	andi	r24, 0x7B	; 123
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
     e42:	80 93 e8 00 	sts	0x00E8, r24
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	80 93 e9 00 	sts	0x00E9, r24
     e4c:	80 91 ec 00 	lds	r24, 0x00EC
     e50:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e52:	80 93 ec 00 	sts	0x00EC, r24
     e56:	80 91 bf 02 	lds	r24, 0x02BF
     e5a:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <XPROGProtocol_Command+0x198>
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	81 30       	cpi	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e62:	21 f0       	breq	.+8      	; 0xe6c <XPROGProtocol_Command+0x182>
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	21 f0       	breq	.+8      	; 0xe70 <XPROGProtocol_Command+0x186>
     e68:	88 e7       	ldi	r24, 0x78	; 120
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <XPROGProtocol_Command+0x188>
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPROG_PROTOCOL_PDI)
     e6c:	88 e3       	ldi	r24, 0x38	; 56
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <XPROGProtocol_Command+0x188>
     e70:	89 e3       	ldi	r24, 0x39	; 57
     e72:	be 01       	movw	r22, r28
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
     e74:	6f 5f       	subi	r22, 0xFF	; 255
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
     e78:	cd d1       	rcall	.+922    	; 0x1214 <XMEGANVM_GetMemoryCRC>
     e7a:	88 23       	and	r24, r24
     e7c:	21 f0       	breq	.+8      	; 0xe86 <XPROGProtocol_Command+0x19c>
				break;
			case XPROG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
				break;
			default:
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <XPROGProtocol_Command+0x19e>

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
		{
			case XPROG_CRC_APP:
				CRCCommand = XMEGA_NVM_CMD_APPCRC;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <XPROGProtocol_Command+0x19e>
				break;
			case XPROG_CRC_BOOT:
				CRCCommand = XMEGA_NVM_CMD_BOOTCRC;
     e86:	83 e0       	ldi	r24, 0x03	; 3
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     e88:	90 e5       	ldi	r25, 0x50	; 80
     e8a:	90 93 f1 00 	sts	0x00F1, r25
     e8e:	96 e0       	ldi	r25, 0x06	; 6
     e90:	90 93 f1 00 	sts	0x00F1, r25
     e94:	80 93 f1 00 	sts	0x00F1, r24
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
     e98:	81 11       	cpse	r24, r1
		  ReturnStatus = XPROG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPROG_ERR_FAILED;
     e9a:	5f c0       	rjmp	.+190    	; 0xf5a <XPROGProtocol_Command+0x270>
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPROG_ERR_TIMEOUT;
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ea0:	ab 81       	ldd	r26, Y+3	; 0x03
     ea2:	bc 81       	ldd	r27, Y+4	; 0x04
     ea4:	cd 01       	movw	r24, r26
     ea6:	aa 27       	eor	r26, r26
     ea8:	bb 27       	eor	r27, r27
     eaa:	80 93 f1 00 	sts	0x00F1, r24
     eae:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPROG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPROG_ERR_OK)
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	ab 81       	ldd	r26, Y+3	; 0x03
	{
		Endpoint_Write_8(MemoryCRC >> 16);
     eb4:	bc 81       	ldd	r27, Y+4	; 0x04
     eb6:	80 93 f1 00 	sts	0x00F1, r24
     eba:	89 2f       	mov	r24, r25
     ebc:	99 27       	eor	r25, r25
     ebe:	4b c0       	rjmp	.+150    	; 0xf56 <XPROGProtocol_Command+0x26c>
     ec0:	80 91 f1 00 	lds	r24, 0x00F1
     ec4:	83 30       	cpi	r24, 0x03	; 3
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
     ec6:	41 f1       	breq	.+80     	; 0xf18 <XPROGProtocol_Command+0x22e>
     ec8:	68 f4       	brcc	.+26     	; 0xee4 <XPROGProtocol_Command+0x1fa>
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	a1 f0       	breq	.+40     	; 0xef6 <XPROGProtocol_Command+0x20c>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	71 f5       	brne	.+92     	; 0xf2e <XPROGProtocol_Command+0x244>
				UEDATX = (Data >> 8);
     ed2:	80 91 f1 00 	lds	r24, 0x00F1
     ed6:	90 91 f1 00 	lds	r25, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eda:	90 93 79 01 	sts	0x0179, r25
	uint8_t ReturnStatus = XPROG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     ede:	80 93 7a 01 	sts	0x017A, r24
     ee2:	23 c0       	rjmp	.+70     	; 0xf2a <XPROGProtocol_Command+0x240>
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	e9 f0       	breq	.+58     	; 0xf22 <XPROGProtocol_Command+0x238>
     ee8:	85 30       	cpi	r24, 0x05	; 5
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     eea:	09 f5       	brne	.+66     	; 0xf2e <XPROGProtocol_Command+0x244>
     eec:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
     ef0:	80 91 f1 00 	lds	r24, 0x00F1
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
     ef4:	1a c0       	rjmp	.+52     	; 0xf2a <XPROGProtocol_Command+0x240>
     ef6:	80 91 f1 00 	lds	r24, 0x00F1
     efa:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t ReturnStatus = XPROG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     efe:	20 91 f1 00 	lds	r18, 0x00F1
     f02:	30 91 f1 00 	lds	r19, 0x00F1
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
     f06:	30 93 7b 01 	sts	0x017B, r19
				Dummy = UEDATX;
     f0a:	20 93 7c 01 	sts	0x017C, r18
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     f0e:	90 93 7d 01 	sts	0x017D, r25
				Data.Bytes[2] = UEDATX;
     f12:	80 93 7e 01 	sts	0x017E, r24
				Data.Bytes[1] = UEDATX;
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <XPROGProtocol_Command+0x240>
     f18:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
     f1c:	80 93 78 01 	sts	0x0178, r24
	{
		case XPROG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <XPROGProtocol_Command+0x240>
     f22:	80 91 f1 00 	lds	r24, 0x00F1
     f26:	80 93 77 01 	sts	0x0177, r24
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <XPROGProtocol_Command+0x246>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f30:	90 91 e8 00 	lds	r25, 0x00E8
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
     f34:	9b 77       	andi	r25, 0x7B	; 123
     f36:	90 93 e8 00 	sts	0x00E8, r25
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	90 93 e9 00 	sts	0x00E9, r25
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
     f40:	90 91 ec 00 	lds	r25, 0x00EC
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPROG_ERR_OK;
     f44:	91 60       	ori	r25, 0x01	; 1
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPROG_ERR_FAILED;
     f46:	90 93 ec 00 	sts	0x00EC, r25
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f4a:	90 e5       	ldi	r25, 0x50	; 80
     f4c:	90 93 f1 00 	sts	0x00F1, r25
     f50:	97 e0       	ldi	r25, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f52:	90 93 f1 00 	sts	0x00F1, r25
     f56:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     f5a:	80 91 e8 00 	lds	r24, 0x00E8
     f5e:	8e 77       	andi	r24, 0x7E	; 126
     f60:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f64:	26 96       	adiw	r28, 0x06	; 6
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	df 91       	pop	r29
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
     f76:	4d 99       	sbic	0x09, 5	; 9
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
     f7a:	4d 9b       	sbis	0x09, 5	; 9
     f7c:	fe cf       	rjmp	.-4      	; 0xf7a <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
     f7e:	4d 99       	sbic	0x09, 5	; 9
     f80:	fe cf       	rjmp	.-4      	; 0xf7e <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
     f82:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     f84:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     f86:	80 91 c9 00 	lds	r24, 0x00C9
     f8a:	8f 7e       	andi	r24, 0xEF	; 239
     f8c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
     f90:	80 91 c9 00 	lds	r24, 0x00C9
     f94:	88 60       	ori	r24, 0x08	; 8
     f96:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 dd 02 	sts	0x02DD, r24
     fa0:	08 95       	ret

00000fa2 <XPROGTarget_SetRxMode>:
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
     fa2:	80 91 c8 00 	lds	r24, 0x00C8
     fa6:	86 ff       	sbrs	r24, 6
     fa8:	fc cf       	rjmp	.-8      	; 0xfa2 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
     faa:	80 91 c8 00 	lds	r24, 0x00C8
     fae:	80 64       	ori	r24, 0x40	; 64
     fb0:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
     fb4:	80 91 c9 00 	lds	r24, 0x00C9
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
     fbe:	80 91 c9 00 	lds	r24, 0x00C9
     fc2:	80 61       	ori	r24, 0x10	; 16
     fc4:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
     fc8:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
     fca:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
     fcc:	10 92 dd 02 	sts	0x02DD, r1
     fd0:	08 95       	ret

00000fd2 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     fd2:	80 91 dd 02 	lds	r24, 0x02DD
     fd6:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
     fd8:	e4 df       	rcall	.-56     	; 0xfa2 <XPROGTarget_SetRxMode>
     fda:	80 ec       	ldi	r24, 0xC0	; 192

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
     fdc:	80 93 c8 00 	sts	0x00C8, r24
     fe0:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
     fe4:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
     fe8:	8a b1       	in	r24, 0x0a	; 10

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
     fea:	87 7d       	andi	r24, 0xD7	; 215
     fec:	8a b9       	out	0x0a, r24	; 10
     fee:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     ff0:	83 7d       	andi	r24, 0xD3	; 211
     ff2:	8b b9       	out	0x0b, r24	; 11
     ff4:	08 95       	ret

00000ff6 <XPROGTarget_DisableTargetTPI>:
     ff6:	80 91 dd 02 	lds	r24, 0x02DD

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     ffa:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
     ffc:	d2 df       	rcall	.-92     	; 0xfa2 <XPROGTarget_SetRxMode>
     ffe:	80 91 c8 00 	lds	r24, 0x00C8

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    1002:	80 6c       	ori	r24, 0xC0	; 192
    1004:	80 93 c8 00 	sts	0x00C8, r24
    1008:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
    100c:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
    1010:	8a b1       	in	r24, 0x0a	; 10

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    1012:	87 7d       	andi	r24, 0xD7	; 215
    1014:	8a b9       	out	0x0a, r24	; 10
    1016:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1018:	83 7d       	andi	r24, 0xD3	; 211
    101a:	8b b9       	out	0x0b, r24	; 11
    101c:	24 98       	cbi	0x04, 4	; 4

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    101e:	2c 98       	cbi	0x05, 4	; 5
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1020:	08 95       	ret

00001022 <XPROGTarget_SendByte>:
    1022:	cf 93       	push	r28
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    102c:	90 91 dd 02 	lds	r25, 0x02DD
    1030:	91 11       	cpse	r25, r1
    1032:	03 c0       	rjmp	.+6      	; 0x103a <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	9f df       	rcall	.-194    	; 0xf76 <XPROGTarget_SetTxMode>
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	90 91 c8 00 	lds	r25, 0x00C8

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    103e:	95 ff       	sbrs	r25, 5
    1040:	fc cf       	rjmp	.-8      	; 0x103a <XPROGTarget_SendByte+0x18>
    1042:	90 91 c8 00 	lds	r25, 0x00C8
	UCSR1A |= (1 << TXC1);
    1046:	90 64       	ori	r25, 0x40	; 64
    1048:	90 93 c8 00 	sts	0x00C8, r25
    104c:	80 93 ce 00 	sts	0x00CE, r24
	UDR1    = Byte;
    1050:	0f 90       	pop	r0
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <XPROGTarget_ReceiveByte>:
    1058:	80 91 dd 02 	lds	r24, 0x02DD
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    105c:	81 11       	cpse	r24, r1
	  XPROGTarget_SetRxMode();
    105e:	a1 df       	rcall	.-190    	; 0xfa2 <XPROGTarget_SetRxMode>
    1060:	80 91 c8 00 	lds	r24, 0x00C8

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    1064:	87 fd       	sbrc	r24, 7
    1066:	03 c0       	rjmp	.+6      	; 0x106e <XPROGTarget_ReceiveByte+0x16>
    1068:	8a b5       	in	r24, 0x2a	; 42
    106a:	81 11       	cpse	r24, r1
    106c:	f9 cf       	rjmp	.-14     	; 0x1060 <XPROGTarget_ReceiveByte+0x8>
    106e:	80 91 ce 00 	lds	r24, 0x00CE

	return UDR1;
    1072:	08 95       	ret

00001074 <XPROGTarget_SendIdle>:
}
    1074:	80 91 dd 02 	lds	r24, 0x02DD

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1078:	81 11       	cpse	r24, r1
    107a:	01 c0       	rjmp	.+2      	; 0x107e <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    107c:	7c df       	rcall	.-264    	; 0xf76 <XPROGTarget_SetTxMode>
    107e:	8c e0       	ldi	r24, 0x0C	; 12
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    1080:	4d 99       	sbic	0x09, 5	; 9

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    1082:	fe cf       	rjmp	.-4      	; 0x1080 <XPROGTarget_SendIdle+0xc>
    1084:	4d 9b       	sbis	0x09, 5	; 9
		while (!(PIND & (1 << 5)));
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <XPROGTarget_SendIdle+0x10>
    1088:	4d 99       	sbic	0x09, 5	; 9
		while (PIND & (1 << 5));
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <XPROGTarget_SendIdle+0x14>
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	c1 f7       	brne	.-16     	; 0x1080 <XPROGTarget_SendIdle+0xc>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    1090:	08 95       	ret

00001092 <XPROGTarget_EnableTargetPDI>:
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    1092:	10 92 dd 02 	sts	0x02DD, r1
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1096:	8a b1       	in	r24, 0x0a	; 10
    1098:	88 62       	ori	r24, 0x28	; 40
    109a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    109c:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    109e:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a0:	87 ec       	ldi	r24, 0xC7	; 199
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <XPROGTarget_EnableTargetPDI+0x12>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <XPROGTarget_EnableTargetPDI+0x18>
    10aa:	00 00       	nop
	_delay_us(100);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 cd 00 	sts	0x00CD, r25
    10b4:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    10be:	8f e6       	ldi	r24, 0x6F	; 111
    10c0:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    10c4:	d7 df       	rcall	.-82     	; 0x1074 <XPROGTarget_SendIdle>
    10c6:	d6 cf       	rjmp	.-84     	; 0x1074 <XPROGTarget_SendIdle>

000010c8 <XPROGTarget_EnableTargetTPI>:
	XPROGTarget_SendIdle();
    10c8:	10 92 dd 02 	sts	0x02DD, r1
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    10cc:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    10ce:	2c 98       	cbi	0x05, 4	; 5
    10d0:	87 ec       	ldi	r24, 0xC7	; 199
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <XPROGTarget_EnableTargetTPI+0xc>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <XPROGTarget_EnableTargetTPI+0x12>
    10da:	00 00       	nop
	_delay_us(100);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    10dc:	8a b1       	in	r24, 0x0a	; 10
    10de:	88 62       	ori	r24, 0x28	; 40
    10e0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    10e2:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 cd 00 	sts	0x00CD, r25
    10ec:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    10f6:	8f e6       	ldi	r24, 0x6F	; 111
    10f8:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    10fc:	bb df       	rcall	.-138    	; 0x1074 <XPROGTarget_SendIdle>
    10fe:	ba cf       	rjmp	.-140    	; 0x1074 <XPROGTarget_SendIdle>

00001100 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <XMEGANVM_SendAddress+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    110e:	86 2f       	mov	r24, r22
    1110:	79 83       	std	Y+1, r23	; 0x01
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	86 df       	rcall	.-244    	; 0x1022 <XPROGTarget_SendByte>
    1116:	79 81       	ldd	r23, Y+1	; 0x01
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1118:	87 2f       	mov	r24, r23
    111a:	83 df       	rcall	.-250    	; 0x1022 <XPROGTarget_SendByte>
    111c:	81 2f       	mov	r24, r17
    111e:	81 df       	rcall	.-254    	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	89 2f       	mov	r24, r25
    1124:	0f 90       	pop	r0
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
}
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	79 cf       	rjmp	.-270    	; 0x1022 <XPROGTarget_SendByte>

00001130 <XMEGANVM_SendNVMRegAddress>:
    1130:	40 91 7b 01 	lds	r20, 0x017B
{
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1134:	50 91 7c 01 	lds	r21, 0x017C
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    1138:	60 91 7d 01 	lds	r22, 0x017D
    113c:	70 91 7e 01 	lds	r23, 0x017E
    1140:	48 2b       	or	r20, r24

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    1142:	cb 01       	movw	r24, r22
    1144:	ba 01       	movw	r22, r20
    1146:	dc cf       	rjmp	.-72     	; 0x1100 <XMEGANVM_SendAddress>

00001148 <XMEGANVM_WaitWhileNVMBusBusy>:
    1148:	80 e8       	ldi	r24, 0x80	; 128
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
    114a:	6b df       	rcall	.-298    	; 0x1022 <XPROGTarget_SendByte>
    114c:	85 df       	rcall	.-246    	; 0x1058 <XPROGTarget_ReceiveByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    114e:	9a b5       	in	r25, 0x2a	; 42
    1150:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1152:	21 f0       	breq	.+8      	; 0x115c <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    1154:	81 ff       	sbrs	r24, 1
    1156:	f8 cf       	rjmp	.-16     	; 0x1148 <XMEGANVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret
		  return true;
    115c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    115e:	08 95       	ret

00001160 <XMEGANVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1160:	8b e6       	ldi	r24, 0x6B	; 107
    1162:	5f df       	rcall	.-322    	; 0x1022 <XPROGTarget_SendByte>
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1164:	8f e0       	ldi	r24, 0x0F	; 15
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1166:	e4 df       	rcall	.-56     	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	5b df       	rcall	.-330    	; 0x1022 <XPROGTarget_SendByte>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
    116c:	75 df       	rcall	.-278    	; 0x1058 <XPROGTarget_ReceiveByte>
    116e:	9a b5       	in	r25, 0x2a	; 42
    1170:	99 23       	and	r25, r25

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1172:	21 f0       	breq	.+8      	; 0x117c <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    1174:	87 fd       	sbrc	r24, 7

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1176:	f8 cf       	rjmp	.-16     	; 0x1168 <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret

00001180 <XMEGANVM_EnablePDI>:
		  return true;
    1180:	df 92       	push	r13
	}
}
    1182:	ef 92       	push	r14

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	28 97       	sbiw	r28, 0x08	; 8
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    119e:	79 df       	rcall	.-270    	; 0x1092 <XPROGTarget_EnableTargetPDI>
    11a0:	81 ec       	ldi	r24, 0xC1	; 193

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
    11a2:	3f df       	rcall	.-386    	; 0x1022 <XPROGTarget_SendByte>
    11a4:	89 e5       	ldi	r24, 0x59	; 89
    11a6:	3d df       	rcall	.-390    	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    11a8:	82 ec       	ldi	r24, 0xC2	; 194
    11aa:	3b df       	rcall	.-394    	; 0x1022 <XPROGTarget_SendByte>
    11ac:	82 e0       	ldi	r24, 0x02	; 2

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
    11ae:	39 df       	rcall	.-398    	; 0x1022 <XPROGTarget_SendByte>
    11b0:	80 ee       	ldi	r24, 0xE0	; 224
    11b2:	37 df       	rcall	.-402    	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    11b4:	8e 01       	movw	r16, r28
    11b6:	07 5f       	subi	r16, 0xF7	; 247
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	7c 01       	movw	r14, r24
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	d8 2e       	mov	r13, r24
    11c4:	ef e9       	ldi	r30, 0x9F	; 159
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	d7 01       	movw	r26, r14
    11ca:	8d 2d       	mov	r24, r13
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    11cc:	01 90       	ld	r0, Z+
    11ce:	0d 92       	st	X+, r0
    11d0:	8a 95       	dec	r24
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <XMEGANVM_EnablePDI+0x4c>
    11d4:	f8 01       	movw	r30, r16
    11d6:	82 91       	ld	r24, -Z
    11d8:	8f 01       	movw	r16, r30
    11da:	23 df       	rcall	.-442    	; 0x1022 <XPROGTarget_SendByte>
    11dc:	0e 15       	cp	r16, r14
    11de:	1f 05       	cpc	r17, r15
    11e0:	89 f7       	brne	.-30     	; 0x11c4 <XMEGANVM_EnablePDI+0x44>
    11e2:	28 96       	adiw	r28, 0x08	; 8
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	df 91       	pop	r29
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	a5 cf       	rjmp	.-182    	; 0x1148 <XMEGANVM_WaitWhileNVMBusBusy>

000011fe <XMEGANVM_DisablePDI>:
    11fe:	a4 df       	rcall	.-184    	; 0x1148 <XMEGANVM_WaitWhileNVMBusBusy>
    1200:	81 ec       	ldi	r24, 0xC1	; 193
    1202:	0f df       	rcall	.-482    	; 0x1022 <XPROGTarget_SendByte>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	0d df       	rcall	.-486    	; 0x1022 <XPROGTarget_SendByte>
    1208:	81 e8       	ldi	r24, 0x81	; 129
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    120a:	0b df       	rcall	.-490    	; 0x1022 <XPROGTarget_SendByte>
    120c:	25 df       	rcall	.-438    	; 0x1058 <XPROGTarget_ReceiveByte>
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
    120e:	81 11       	cpse	r24, r1
    1210:	f7 cf       	rjmp	.-18     	; 0x1200 <XMEGANVM_DisablePDI+0x2>
    1212:	df ce       	rjmp	.-578    	; 0xfd2 <XPROGTarget_DisableTargetPDI>

00001214 <XMEGANVM_GetMemoryCRC>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	18 2f       	mov	r17, r24

	XPROGTarget_DisableTargetPDI();
    121c:	eb 01       	movw	r28, r22
    121e:	18 82       	st	Y, r1
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
	*CRCDest = 0;
    1220:	19 82       	std	Y+1, r1	; 0x01
    1222:	1a 82       	std	Y+2, r1	; 0x02
    1224:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1226:	9c df       	rcall	.-200    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    1228:	88 23       	and	r24, r24
    122a:	29 f1       	breq	.+74     	; 0x1276 <XMEGANVM_GetMemoryCRC+0x62>
    122c:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    122e:	f9 de       	rcall	.-526    	; 0x1022 <XPROGTarget_SendByte>
    1230:	8a e0       	ldi	r24, 0x0A	; 10
    1232:	7e df       	rcall	.-260    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1234:	81 2f       	mov	r24, r17
    1236:	f5 de       	rcall	.-534    	; 0x1022 <XPROGTarget_SendByte>
    1238:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(CRCCommand);
    123a:	f3 de       	rcall	.-538    	; 0x1022 <XPROGTarget_SendByte>
    123c:	8b e0       	ldi	r24, 0x0B	; 11
    123e:	78 df       	rcall	.-272    	; 0x1130 <XMEGANVM_SendNVMRegAddress>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	ef de       	rcall	.-546    	; 0x1022 <XPROGTarget_SendByte>
    1244:	81 df       	rcall	.-254    	; 0x1148 <XMEGANVM_WaitWhileNVMBusBusy>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1246:	88 23       	and	r24, r24
    1248:	b1 f0       	breq	.+44     	; 0x1276 <XMEGANVM_GetMemoryCRC+0x62>
    124a:	8a df       	rcall	.-236    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    124c:	88 23       	and	r24, r24
    124e:	99 f0       	breq	.+38     	; 0x1276 <XMEGANVM_GetMemoryCRC+0x62>
    1250:	8b e6       	ldi	r24, 0x6B	; 107

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1252:	e7 de       	rcall	.-562    	; 0x1022 <XPROGTarget_SendByte>
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	6c df       	rcall	.-296    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    1258:	80 ea       	ldi	r24, 0xA0	; 160
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    125a:	e3 de       	rcall	.-570    	; 0x1022 <XPROGTarget_SendByte>
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	e1 de       	rcall	.-574    	; 0x1022 <XPROGTarget_SendByte>
    1260:	84 e2       	ldi	r24, 0x24	; 36
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    1262:	df de       	rcall	.-578    	; 0x1022 <XPROGTarget_SendByte>
    1264:	13 e0       	ldi	r17, 0x03	; 3
    1266:	f8 de       	rcall	.-528    	; 0x1058 <XPROGTarget_ReceiveByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1268:	89 93       	st	Y+, r24
    126a:	11 50       	subi	r17, 0x01	; 1
    126c:	e1 f7       	brne	.-8      	; 0x1266 <XMEGANVM_GetMemoryCRC+0x52>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    126e:	9a b5       	in	r25, 0x2a	; 42
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	91 11       	cpse	r25, r1
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <XMEGANVM_GetMemoryCRC+0x64>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	df 91       	pop	r29

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <XMEGANVM_ReadMemory>:
    1280:	cf 92       	push	r12
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
	XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
    128a:	1f 93       	push	r17
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
    1294:	ea 01       	movw	r28, r20
}
    1296:	89 01       	movw	r16, r18
    1298:	63 df       	rcall	.-314    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    129a:	88 23       	and	r24, r24
    129c:	61 f1       	breq	.+88     	; 0x12f6 <XMEGANVM_ReadMemory+0x76>
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    129e:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    12a0:	c0 de       	rcall	.-640    	; 0x1022 <XPROGTarget_SendByte>
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	45 df       	rcall	.-374    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    12a6:	83 e4       	ldi	r24, 0x43	; 67
    12a8:	bc de       	rcall	.-648    	; 0x1022 <XPROGTarget_SendByte>
    12aa:	02 30       	cpi	r16, 0x02	; 2
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    12ac:	11 05       	cpc	r17, r1
    12ae:	b8 f0       	brcs	.+46     	; 0x12de <XMEGANVM_ReadMemory+0x5e>
    12b0:	8b e6       	ldi	r24, 0x6B	; 107

	if (ReadSize > 1)
    12b2:	b7 de       	rcall	.-658    	; 0x1022 <XPROGTarget_SendByte>
    12b4:	c7 01       	movw	r24, r14
    12b6:	b6 01       	movw	r22, r12
	{
		/* Load the PDI pointer register with the start address we want to read from */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    12b8:	23 df       	rcall	.-442    	; 0x1100 <XMEGANVM_SendAddress>
    12ba:	80 ea       	ldi	r24, 0xA0	; 160
    12bc:	b2 de       	rcall	.-668    	; 0x1022 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(ReadAddress);
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	80 0f       	add	r24, r16
    12c2:	af de       	rcall	.-674    	; 0x1022 <XPROGTarget_SendByte>
    12c4:	84 e2       	ldi	r24, 0x24	; 36

		/* Send the REPEAT command with the specified number of bytes to read */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    12c6:	ad de       	rcall	.-678    	; 0x1022 <XPROGTarget_SendByte>
    12c8:	0c 0f       	add	r16, r28
    12ca:	1d 1f       	adc	r17, r29
		XPROGTarget_SendByte(ReadSize - 1);
    12cc:	c0 17       	cp	r28, r16
    12ce:	d1 07       	cpc	r29, r17
    12d0:	69 f0       	breq	.+26     	; 0x12ec <XMEGANVM_ReadMemory+0x6c>
    12d2:	8a b5       	in	r24, 0x2a	; 42

		/* Send a LD command with indirect access and post-increment to read out the bytes */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    12d4:	88 23       	and	r24, r24
    12d6:	51 f0       	breq	.+20     	; 0x12ec <XMEGANVM_ReadMemory+0x6c>
    12d8:	bf de       	rcall	.-642    	; 0x1058 <XPROGTarget_ReceiveByte>
    12da:	89 93       	st	Y+, r24
    12dc:	f7 cf       	rjmp	.-18     	; 0x12cc <XMEGANVM_ReadMemory+0x4c>
		while (ReadSize-- && TimeoutTicksRemaining)
    12de:	8c e0       	ldi	r24, 0x0C	; 12
    12e0:	a0 de       	rcall	.-704    	; 0x1022 <XPROGTarget_SendByte>
    12e2:	c7 01       	movw	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	0c df       	rcall	.-488    	; 0x1100 <XMEGANVM_SendAddress>
    12e8:	b7 de       	rcall	.-658    	; 0x1058 <XPROGTarget_ReceiveByte>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    12ea:	88 83       	st	Y, r24
    12ec:	9a b5       	in	r25, 0x2a	; 42
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	91 11       	cpse	r25, r1
	}
	else
	{
		/* Send a LDS command with the read address to read out the requested byte */
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <XMEGANVM_ReadMemory+0x76>
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	df 91       	pop	r29
		XMEGANVM_SendAddress(ReadAddress);
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
	}

	return (TimeoutTicksRemaining > 0);
    1306:	08 95       	ret

00001308 <XMEGANVM_WriteByteMemory>:
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
}
    1310:	df 93       	push	r29
    1312:	00 d0       	rcall	.+0      	; 0x1314 <XMEGANVM_WriteByteMemory+0xc>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <XMEGANVM_WriteByteMemory+0xe>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	f8 2e       	mov	r15, r24
    131c:	12 2f       	mov	r17, r18
    131e:	49 83       	std	Y+1, r20	; 0x01
    1320:	5a 83       	std	Y+2, r21	; 0x02
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	7c 83       	std	Y+4, r23	; 0x04
    1326:	1c df       	rcall	.-456    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    1328:	08 2f       	mov	r16, r24
    132a:	88 23       	and	r24, r24
    132c:	89 f0       	breq	.+34     	; 0x1350 <XMEGANVM_WriteByteMemory+0x48>
    132e:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1330:	78 de       	rcall	.-784    	; 0x1022 <XPROGTarget_SendByte>
    1332:	8a e0       	ldi	r24, 0x0A	; 10
    1334:	fd de       	rcall	.-518    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1336:	8f 2d       	mov	r24, r15
    1338:	74 de       	rcall	.-792    	; 0x1022 <XPROGTarget_SendByte>
    133a:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(WriteCommand);
    133c:	72 de       	rcall	.-796    	; 0x1022 <XPROGTarget_SendByte>
    133e:	49 81       	ldd	r20, Y+1	; 0x01
    1340:	5a 81       	ldd	r21, Y+2	; 0x02

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	7c 81       	ldd	r23, Y+4	; 0x04
    1346:	cb 01       	movw	r24, r22
	XMEGANVM_SendAddress(WriteAddress);
    1348:	ba 01       	movw	r22, r20
    134a:	da de       	rcall	.-588    	; 0x1100 <XMEGANVM_SendAddress>
    134c:	81 2f       	mov	r24, r17
    134e:	69 de       	rcall	.-814    	; 0x1022 <XPROGTarget_SendByte>
    1350:	80 2f       	mov	r24, r16
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
	XPROGTarget_SendByte(Byte);
    1358:	0f 90       	pop	r0
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28

	return true;
}
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	08 95       	ret

00001366 <XMEGANVM_WritePageMemory>:
    1366:	4f 92       	push	r4
    1368:	5f 92       	push	r5
    136a:	6f 92       	push	r6
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	c8 2f       	mov	r28, r24
    1388:	d6 2f       	mov	r29, r22
    138a:	84 2e       	mov	r8, r20
    138c:	92 2e       	mov	r9, r18
    138e:	27 01       	movw	r4, r14
    1390:	38 01       	movw	r6, r16
	if (PageMode & XPROG_PAGEMODE_ERASE)
    1392:	20 ff       	sbrs	r18, 0
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <XMEGANVM_WritePageMemory+0x52>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1396:	e4 de       	rcall	.-568    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    1398:	81 11       	cpse	r24, r1
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <XMEGANVM_WritePageMemory+0x3a>
    139c:	c0 e0       	ldi	r28, 0x00	; 0
		  return false;
    139e:	43 c0       	rjmp	.+134    	; 0x1426 <XMEGANVM_WritePageMemory+0xc0>
    13a0:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    13a2:	3f de       	rcall	.-898    	; 0x1022 <XPROGTarget_SendByte>
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	c4 de       	rcall	.-632    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13a8:	8d 2f       	mov	r24, r29
    13aa:	3b de       	rcall	.-906    	; 0x1022 <XPROGTarget_SendByte>
    13ac:	8c e4       	ldi	r24, 0x4C	; 76
		XPROGTarget_SendByte(EraseBuffCommand);
    13ae:	39 de       	rcall	.-910    	; 0x1022 <XPROGTarget_SendByte>
    13b0:	8b e0       	ldi	r24, 0x0B	; 11
    13b2:	be de       	rcall	.-644    	; 0x1130 <XMEGANVM_SendNVMRegAddress>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	35 de       	rcall	.-918    	; 0x1022 <XPROGTarget_SendByte>
    13b8:	a1 14       	cp	r10, r1
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    13ba:	b1 04       	cpc	r11, r1
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <XMEGANVM_WritePageMemory+0x60>
    13be:	91 fc       	sbrc	r9, 1
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    13c0:	20 c0       	rjmp	.+64     	; 0x1402 <XMEGANVM_WritePageMemory+0x9c>
    13c2:	c1 e0       	ldi	r28, 0x01	; 1
    13c4:	30 c0       	rjmp	.+96     	; 0x1426 <XMEGANVM_WritePageMemory+0xc0>
	}

	if (WriteSize)
    13c6:	cc de       	rcall	.-616    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    13c8:	88 23       	and	r24, r24
    13ca:	41 f3       	breq	.-48     	; 0x139c <XMEGANVM_WritePageMemory+0x36>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
    13cc:	8c e4       	ldi	r24, 0x4C	; 76
    13ce:	29 de       	rcall	.-942    	; 0x1022 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
    13d0:	8a e0       	ldi	r24, 0x0A	; 10
    13d2:	ae de       	rcall	.-676    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
	}

	if (WriteSize)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    13d4:	8c 2f       	mov	r24, r28
    13d6:	25 de       	rcall	.-950    	; 0x1022 <XPROGTarget_SendByte>
    13d8:	8b e6       	ldi	r24, 0x6B	; 107
    13da:	23 de       	rcall	.-954    	; 0x1022 <XPROGTarget_SendByte>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    13dc:	c3 01       	movw	r24, r6
    13de:	b2 01       	movw	r22, r4
    13e0:	8f de       	rcall	.-738    	; 0x1100 <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13e2:	80 ea       	ldi	r24, 0xA0	; 160
    13e4:	1e de       	rcall	.-964    	; 0x1022 <XPROGTarget_SendByte>
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
		XPROGTarget_SendByte(WriteBuffCommand);
    13e8:	8a 0d       	add	r24, r10
    13ea:	1b de       	rcall	.-970    	; 0x1022 <XPROGTarget_SendByte>
    13ec:	84 e6       	ldi	r24, 0x64	; 100

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    13ee:	19 de       	rcall	.-974    	; 0x1022 <XPROGTarget_SendByte>
    13f0:	e6 01       	movw	r28, r12
    13f2:	ac 0c       	add	r10, r12
		XMEGANVM_SendAddress(WriteAddress);
    13f4:	bd 1c       	adc	r11, r13
    13f6:	ca 15       	cp	r28, r10
    13f8:	db 05       	cpc	r29, r11
    13fa:	09 f3       	breq	.-62     	; 0x13be <XMEGANVM_WritePageMemory+0x58>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    13fc:	89 91       	ld	r24, Y+
    13fe:	11 de       	rcall	.-990    	; 0x1022 <XPROGTarget_SendByte>
    1400:	fa cf       	rjmp	.-12     	; 0x13f6 <XMEGANVM_WritePageMemory+0x90>
		XPROGTarget_SendByte(WriteSize - 1);
    1402:	ae de       	rcall	.-676    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    1404:	c8 2f       	mov	r28, r24
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <XMEGANVM_WritePageMemory+0xa6>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    140a:	c8 cf       	rjmp	.-112    	; 0x139c <XMEGANVM_WritePageMemory+0x36>
    140c:	8c e4       	ldi	r24, 0x4C	; 76
    140e:	09 de       	rcall	.-1006   	; 0x1022 <XPROGTarget_SendByte>
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	8e de       	rcall	.-740    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    1414:	88 2d       	mov	r24, r8
		while (WriteSize--)
    1416:	05 de       	rcall	.-1014   	; 0x1022 <XPROGTarget_SendByte>
    1418:	8c e4       	ldi	r24, 0x4C	; 76
    141a:	03 de       	rcall	.-1018   	; 0x1022 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(*(WriteBuffer++));
    141c:	c3 01       	movw	r24, r6
    141e:	b2 01       	movw	r22, r4
    1420:	6f de       	rcall	.-802    	; 0x1100 <XMEGANVM_SendAddress>
    1422:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1424:	fe dd       	rcall	.-1028   	; 0x1022 <XPROGTarget_SendByte>
    1426:	8c 2f       	mov	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	df 90       	pop	r13
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1436:	cf 90       	pop	r12
    1438:	bf 90       	pop	r11
    143a:	af 90       	pop	r10
		XPROGTarget_SendByte(WritePageCommand);
    143c:	9f 90       	pop	r9
    143e:	8f 90       	pop	r8
    1440:	7f 90       	pop	r7

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1442:	6f 90       	pop	r6
    1444:	5f 90       	pop	r5
    1446:	4f 90       	pop	r4
		XMEGANVM_SendAddress(WriteAddress);
    1448:	08 95       	ret

0000144a <XMEGANVM_EraseMemory>:
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
		XPROGTarget_SendByte(0x00);
    1450:	00 d0       	rcall	.+0      	; 0x1452 <XMEGANVM_EraseMemory+0x8>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <XMEGANVM_EraseMemory+0xa>
    1454:	cd b7       	in	r28, 0x3d	; 61
	}

	return true;
}
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	18 2f       	mov	r17, r24
    145a:	49 83       	std	Y+1, r20	; 0x01
    145c:	5a 83       	std	Y+2, r21	; 0x02
    145e:	6b 83       	std	Y+3, r22	; 0x03
    1460:	7c 83       	std	Y+4, r23	; 0x04
    1462:	7e de       	rcall	.-772    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    1464:	49 81       	ldd	r20, Y+1	; 0x01
    1466:	5a 81       	ldd	r21, Y+2	; 0x02
    1468:	6b 81       	ldd	r22, Y+3	; 0x03
    146a:	7c 81       	ldd	r23, Y+4	; 0x04
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <XMEGANVM_EraseMemory+0x28>
    1470:	67 c0       	rjmp	.+206    	; 0x1540 <XMEGANVM_EraseMemory+0xf6>
    1472:	8c e4       	ldi	r24, 0x4C	; 76
    1474:	10 34       	cpi	r17, 0x40	; 64
    1476:	29 f4       	brne	.+10     	; 0x1482 <XMEGANVM_EraseMemory+0x38>
    1478:	d4 dd       	rcall	.-1112   	; 0x1022 <XPROGTarget_SendByte>

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    147a:	8a e0       	ldi	r24, 0x0A	; 10
    147c:	59 de       	rcall	.-846    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    147e:	80 e4       	ldi	r24, 0x40	; 64
    1480:	40 c0       	rjmp	.+128    	; 0x1502 <XMEGANVM_EraseMemory+0xb8>
    1482:	49 83       	std	Y+1, r20	; 0x01
		XPROGTarget_SendByte(EraseCommand);
    1484:	5a 83       	std	Y+2, r21	; 0x02
    1486:	6b 83       	std	Y+3, r22	; 0x03
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1488:	7c 83       	std	Y+4, r23	; 0x04
    148a:	10 33       	cpi	r17, 0x30	; 48
    148c:	09 f0       	breq	.+2      	; 0x1490 <XMEGANVM_EraseMemory+0x46>
    148e:	40 c0       	rjmp	.+128    	; 0x1510 <XMEGANVM_EraseMemory+0xc6>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1490:	c8 dd       	rcall	.-1136   	; 0x1022 <XPROGTarget_SendByte>
    1492:	8a e0       	ldi	r24, 0x0A	; 10
    1494:	4d de       	rcall	.-870    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1496:	86 e3       	ldi	r24, 0x36	; 54
    1498:	c4 dd       	rcall	.-1144   	; 0x1022 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    149a:	8c e4       	ldi	r24, 0x4C	; 76
    149c:	c2 dd       	rcall	.-1148   	; 0x1022 <XPROGTarget_SendByte>
    149e:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    14a0:	47 de       	rcall	.-882    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	be dd       	rcall	.-1156   	; 0x1022 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    14a6:	5c de       	rcall	.-840    	; 0x1160 <XMEGANVM_WaitWhileNVMControllerBusy>
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <XMEGANVM_EraseMemory+0x64>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    14ac:	49 c0       	rjmp	.+146    	; 0x1540 <XMEGANVM_EraseMemory+0xf6>
    14ae:	8c e4       	ldi	r24, 0x4C	; 76
    14b0:	b8 dd       	rcall	.-1168   	; 0x1022 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	3d de       	rcall	.-902    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    14b6:	83 e3       	ldi	r24, 0x33	; 51

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    14b8:	b4 dd       	rcall	.-1176   	; 0x1022 <XPROGTarget_SendByte>
    14ba:	8b e6       	ldi	r24, 0x6B	; 107
    14bc:	b2 dd       	rcall	.-1180   	; 0x1022 <XPROGTarget_SendByte>
    14be:	49 81       	ldd	r20, Y+1	; 0x01
    14c0:	5a 81       	ldd	r21, Y+2	; 0x02
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    14c2:	6b 81       	ldd	r22, Y+3	; 0x03
    14c4:	7c 81       	ldd	r23, Y+4	; 0x04
    14c6:	cb 01       	movw	r24, r22
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    14c8:	ba 01       	movw	r22, r20
    14ca:	1a de       	rcall	.-972    	; 0x1100 <XMEGANVM_SendAddress>
    14cc:	80 ea       	ldi	r24, 0xA0	; 160
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    14ce:	a9 dd       	rcall	.-1198   	; 0x1022 <XPROGTarget_SendByte>
    14d0:	80 91 79 01 	lds	r24, 0x0179

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
    14d4:	81 50       	subi	r24, 0x01	; 1
    14d6:	a5 dd       	rcall	.-1206   	; 0x1022 <XPROGTarget_SendByte>
    14d8:	84 e6       	ldi	r24, 0x64	; 100
		XMEGANVM_SendAddress(Address);
    14da:	a3 dd       	rcall	.-1210   	; 0x1022 <XPROGTarget_SendByte>
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	21 2f       	mov	r18, r17
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	80 91 79 01 	lds	r24, 0x0179
    14e6:	90 91 7a 01 	lds	r25, 0x017A

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	20 f4       	brcc	.+8      	; 0x14f8 <XMEGANVM_EraseMemory+0xae>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	97 dd       	rcall	.-1234   	; 0x1022 <XPROGTarget_SendByte>
    14f4:	1f 5f       	subi	r17, 0xFF	; 255
    14f6:	f3 cf       	rjmp	.-26     	; 0x14de <XMEGANVM_EraseMemory+0x94>
    14f8:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
    14fa:	93 dd       	rcall	.-1242   	; 0x1022 <XPROGTarget_SendByte>
    14fc:	8a e0       	ldi	r24, 0x0A	; 10
    14fe:	18 de       	rcall	.-976    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1500:	80 e3       	ldi	r24, 0x30	; 48
    1502:	8f dd       	rcall	.-1250   	; 0x1022 <XPROGTarget_SendByte>
    1504:	8c e4       	ldi	r24, 0x4C	; 76
    1506:	8d dd       	rcall	.-1254   	; 0x1022 <XPROGTarget_SendByte>
    1508:	8b e0       	ldi	r24, 0x0B	; 11
    150a:	12 de       	rcall	.-988    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	0f c0       	rjmp	.+30     	; 0x152e <XMEGANVM_EraseMemory+0xe4>
    1510:	88 dd       	rcall	.-1264   	; 0x1022 <XPROGTarget_SendByte>
    1512:	8a e0       	ldi	r24, 0x0A	; 10
		  XPROGTarget_SendByte(0x00);
    1514:	0d de       	rcall	.-998    	; 0x1130 <XMEGANVM_SendNVMRegAddress>
    1516:	81 2f       	mov	r24, r17
    1518:	84 dd       	rcall	.-1272   	; 0x1022 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    151a:	8c e4       	ldi	r24, 0x4C	; 76
    151c:	82 dd       	rcall	.-1276   	; 0x1022 <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    151e:	49 81       	ldd	r20, Y+1	; 0x01
    1520:	5a 81       	ldd	r21, Y+2	; 0x02
    1522:	6b 81       	ldd	r22, Y+3	; 0x03
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1524:	7c 81       	ldd	r23, Y+4	; 0x04
    1526:	cb 01       	movw	r24, r22
    1528:	ba 01       	movw	r22, r20
		XPROGTarget_SendByte(EraseCommand);
    152a:	ea dd       	rcall	.-1068   	; 0x1100 <XMEGANVM_SendAddress>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	79 dd       	rcall	.-1294   	; 0x1022 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    153c:	1f 91       	pop	r17
    153e:	04 ce       	rjmp	.-1016   	; 0x1148 <XMEGANVM_WaitWhileNVMBusBusy>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0f 90       	pop	r0
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
		XPROGTarget_SendByte(EraseCommand);
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
    1550:	08 95       	ret

00001552 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SOUT(Address));
    1552:	98 2f       	mov	r25, r24
    1554:	9f 70       	andi	r25, 0x0F	; 15
    1556:	90 69       	ori	r25, 0x90	; 144
    1558:	80 73       	andi	r24, 0x30	; 48
    155a:	88 0f       	add	r24, r24
    155c:	89 2b       	or	r24, r25
    155e:	61 cd       	rjmp	.-1342   	; 0x1022 <XPROGTarget_SendByte>

00001560 <TINYNVM_SendPointerAddress>:
    1560:	1f 93       	push	r17

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	1f 92       	push	r1
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    156e:	88 e6       	ldi	r24, 0x68	; 104
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	57 dd       	rcall	.-1362   	; 0x1022 <XPROGTarget_SendByte>
    1574:	81 2f       	mov	r24, r17
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1576:	55 dd       	rcall	.-1366   	; 0x1022 <XPROGTarget_SendByte>
    1578:	89 e6       	ldi	r24, 0x69	; 105
    157a:	53 dd       	rcall	.-1370   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    157c:	99 81       	ldd	r25, Y+1	; 0x01
    157e:	89 2f       	mov	r24, r25
    1580:	0f 90       	pop	r0
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
}
    1586:	1f 91       	pop	r17
    1588:	4c cd       	rjmp	.-1384   	; 0x1022 <XPROGTarget_SendByte>

0000158a <TINYNVM_WaitWhileNVMBusBusy>:
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	4a dd       	rcall	.-1388   	; 0x1022 <XPROGTarget_SendByte>
{
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    158e:	64 dd       	rcall	.-1336   	; 0x1058 <XPROGTarget_ReceiveByte>
    1590:	9a b5       	in	r25, 0x2a	; 42
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1592:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1594:	21 f0       	breq	.+8      	; 0x159e <TINYNVM_WaitWhileNVMBusBusy+0x14>
    1596:	81 ff       	sbrs	r24, 1
    1598:	f8 cf       	rjmp	.-16     	; 0x158a <TINYNVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	08 95       	ret
		  return true;
    159e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    15a0:	08 95       	ret

000015a2 <TINYNVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    15a2:	80 91 77 01 	lds	r24, 0x0177
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once - use function to reduce code size */
	XPROGTarget_SendByte(TPI_CMD_SIN(Address));
    15a6:	98 2f       	mov	r25, r24
    15a8:	9f 70       	andi	r25, 0x0F	; 15
    15aa:	90 61       	ori	r25, 0x10	; 16
    15ac:	80 73       	andi	r24, 0x30	; 48
    15ae:	88 0f       	add	r24, r24
    15b0:	89 2b       	or	r24, r25
    15b2:	37 dd       	rcall	.-1426   	; 0x1022 <XPROGTarget_SendByte>
    15b4:	51 dd       	rcall	.-1374   	; 0x1058 <XPROGTarget_ReceiveByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    15b6:	9a b5       	in	r25, 0x2a	; 42
    15b8:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <TINYNVM_WaitWhileNVMControllerBusy+0x22>
    15bc:	87 fd       	sbrc	r24, 7
    15be:	f1 cf       	rjmp	.-30     	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	08 95       	ret
		  return true;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    15c6:	08 95       	ret

000015c8 <TINYNVM_EnableTPI>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the TPI interface was enabled successfully, \c false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	28 97       	sbiw	r28, 0x08	; 8
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    15e6:	70 dd       	rcall	.-1312   	; 0x10c8 <XPROGTarget_EnableTargetTPI>
    15e8:	82 ec       	ldi	r24, 0xC2	; 194

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
    15ea:	1b dd       	rcall	.-1482   	; 0x1022 <XPROGTarget_SendByte>
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	19 dd       	rcall	.-1486   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    15f0:	80 ee       	ldi	r24, 0xE0	; 224
    15f2:	17 dd       	rcall	.-1490   	; 0x1022 <XPROGTarget_SendByte>
    15f4:	8e 01       	movw	r16, r28

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    15f6:	07 5f       	subi	r16, 0xF7	; 247
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	7c 01       	movw	r14, r24
    1600:	88 e0       	ldi	r24, 0x08	; 8
    1602:	d8 2e       	mov	r13, r24
    1604:	e7 ea       	ldi	r30, 0xA7	; 167
    1606:	f1 e0       	ldi	r31, 0x01	; 1
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1608:	d7 01       	movw	r26, r14
    160a:	8d 2d       	mov	r24, r13
    160c:	01 90       	ld	r0, Z+
    160e:	0d 92       	st	X+, r0
    1610:	8a 95       	dec	r24
    1612:	e1 f7       	brne	.-8      	; 0x160c <TINYNVM_EnableTPI+0x44>
    1614:	f8 01       	movw	r30, r16
    1616:	82 91       	ld	r24, -Z
    1618:	8f 01       	movw	r16, r30
    161a:	03 dd       	rcall	.-1530   	; 0x1022 <XPROGTarget_SendByte>
    161c:	0e 15       	cp	r16, r14
    161e:	1f 05       	cpc	r17, r15
    1620:	89 f7       	brne	.-30     	; 0x1604 <TINYNVM_EnableTPI+0x3c>
    1622:	28 96       	adiw	r28, 0x08	; 8
    1624:	0f b6       	in	r0, 0x3f	; 63
	XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_CTRL));
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
}
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	a6 cf       	rjmp	.-180    	; 0x158a <TINYNVM_WaitWhileNVMBusBusy>

0000163e <TINYNVM_DisableTPI>:
    163e:	a5 df       	rcall	.-182    	; 0x158a <TINYNVM_WaitWhileNVMBusBusy>
    1640:	80 ec       	ldi	r24, 0xC0	; 192
    1642:	ef dc       	rcall	.-1570   	; 0x1022 <XPROGTarget_SendByte>
    1644:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1646:	ed dc       	rcall	.-1574   	; 0x1022 <XPROGTarget_SendByte>
    1648:	80 e8       	ldi	r24, 0x80	; 128

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS(TPI_REG_STATUS));
		XPROGTarget_SendByte(0x00);
    164a:	eb dc       	rcall	.-1578   	; 0x1022 <XPROGTarget_SendByte>
    164c:	05 dd       	rcall	.-1526   	; 0x1058 <XPROGTarget_ReceiveByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS(TPI_REG_STATUS));
    164e:	81 11       	cpse	r24, r1
    1650:	f7 cf       	rjmp	.-18     	; 0x1640 <TINYNVM_DisableTPI+0x2>
    1652:	d1 cc       	rjmp	.-1630   	; 0xff6 <XPROGTarget_DisableTargetTPI>

00001654 <TINYNVM_ReadMemory>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17

	XPROGTarget_DisableTargetTPI();
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1660:	ec 01       	movw	r28, r24
    1662:	7b 01       	movw	r14, r22
    1664:	8a 01       	movw	r16, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1666:	9d df       	rcall	.-198    	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
    1668:	88 23       	and	r24, r24
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <TINYNVM_ReadMemory+0x4c>
    166c:	80 91 78 01 	lds	r24, 0x0178
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1670:	70 df       	rcall	.-288    	; 0x1552 <TINYNVM_SendWriteNVMRegister>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	d6 dc       	rcall	.-1620   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1676:	ce 01       	movw	r24, r28
    1678:	73 df       	rcall	.-282    	; 0x1560 <TINYNVM_SendPointerAddress>
    167a:	e7 01       	movw	r28, r14

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    167c:	0e 0d       	add	r16, r14
    167e:	1f 1d       	adc	r17, r15
    1680:	c0 17       	cp	r28, r16
    1682:	d1 07       	cpc	r29, r17
    1684:	41 f0       	breq	.+16     	; 0x1696 <TINYNVM_ReadMemory+0x42>
    1686:	8a b5       	in	r24, 0x2a	; 42

	while (ReadSize-- && TimeoutTicksRemaining)
    1688:	88 23       	and	r24, r24
    168a:	29 f0       	breq	.+10     	; 0x1696 <TINYNVM_ReadMemory+0x42>
    168c:	84 e2       	ldi	r24, 0x24	; 36
    168e:	c9 dc       	rcall	.-1646   	; 0x1022 <XPROGTarget_SendByte>
    1690:	e3 dc       	rcall	.-1594   	; 0x1058 <XPROGTarget_ReceiveByte>
    1692:	89 93       	st	Y+, r24
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD(TPI_POINTER_INDIRECT_PI));
    1694:	f5 cf       	rjmp	.-22     	; 0x1680 <TINYNVM_ReadMemory+0x2c>
    1696:	9a b5       	in	r25, 0x2a	; 42
    1698:	81 e0       	ldi	r24, 0x01	; 1
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    169a:	91 11       	cpse	r25, r1
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <TINYNVM_ReadMemory+0x4c>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	df 91       	pop	r29
	}

	return (TimeoutTicksRemaining > 0);
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
}
    16ac:	08 95       	ret

000016ae <TINYNVM_WriteMemory>:
    16ae:	df 92       	push	r13
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    16ba:	df 93       	push	r29
    16bc:	7c 01       	movw	r14, r24
    16be:	8b 01       	movw	r16, r22
    16c0:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    16c2:	6f df       	rcall	.-290    	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
    16c4:	d8 2e       	mov	r13, r24
    16c6:	81 11       	cpse	r24, r1
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <TINYNVM_WriteMemory+0x20>
    16ca:	d1 2c       	mov	r13, r1
	  return false;
    16cc:	22 c0       	rjmp	.+68     	; 0x1712 <TINYNVM_WriteMemory+0x64>
    16ce:	c0 ff       	sbrs	r28, 0

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <TINYNVM_WriteMemory+0x30>
    16d2:	f8 01       	movw	r30, r16
	  WriteBuffer[WriteLength++] = 0xFF;
    16d4:	ec 0f       	add	r30, r28
    16d6:	fd 1f       	adc	r31, r29
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	80 83       	st	Z, r24
    16dc:	21 96       	adiw	r28, 0x01	; 1
    16de:	80 91 78 01 	lds	r24, 0x0178

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    16e2:	37 df       	rcall	.-402    	; 0x1552 <TINYNVM_SendWriteNVMRegister>
    16e4:	8d e1       	ldi	r24, 0x1D	; 29
    16e6:	9d dc       	rcall	.-1734   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    16e8:	c7 01       	movw	r24, r14
    16ea:	3a df       	rcall	.-396    	; 0x1560 <TINYNVM_SendPointerAddress>
    16ec:	20 97       	sbiw	r28, 0x00	; 0

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    16ee:	89 f0       	breq	.+34     	; 0x1712 <TINYNVM_WriteMemory+0x64>
    16f0:	58 df       	rcall	.-336    	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
    16f2:	88 23       	and	r24, r24

	while (WriteLength)
    16f4:	51 f3       	breq	.-44     	; 0x16ca <TINYNVM_WriteMemory+0x1c>
    16f6:	84 e6       	ldi	r24, 0x64	; 100
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    16f8:	94 dc       	rcall	.-1752   	; 0x1022 <XPROGTarget_SendByte>
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 81       	ld	r24, Z
    16fe:	91 dc       	rcall	.-1758   	; 0x1022 <XPROGTarget_SendByte>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    1700:	84 e6       	ldi	r24, 0x64	; 100
    1702:	8f dc       	rcall	.-1762   	; 0x1022 <XPROGTarget_SendByte>
    1704:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1706:	81 81       	ldd	r24, Z+1	; 0x01
    1708:	8c dc       	rcall	.-1768   	; 0x1022 <XPROGTarget_SendByte>
    170a:	22 97       	sbiw	r28, 0x02	; 2
    170c:	0e 5f       	subi	r16, 0xFE	; 254

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT_PI));
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	ed cf       	rjmp	.-38     	; 0x16ec <TINYNVM_WriteMemory+0x3e>
    1712:	8d 2d       	mov	r24, r13
		XPROGTarget_SendByte(*(WriteBuffer++));
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	08 95       	ret

00001724 <TINYNVM_EraseMemory>:
	}

	return true;
}
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	18 2f       	mov	r17, r24
    172c:	eb 01       	movw	r28, r22
    172e:	39 df       	rcall	.-398    	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
    1730:	88 23       	and	r24, r24
    1732:	81 f0       	breq	.+32     	; 0x1754 <TINYNVM_EraseMemory+0x30>
    1734:	80 91 78 01 	lds	r24, 0x0178
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1738:	0c df       	rcall	.-488    	; 0x1552 <TINYNVM_SendWriteNVMRegister>
    173a:	81 2f       	mov	r24, r17
    173c:	72 dc       	rcall	.-1820   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(EraseCommand);
    173e:	ce 01       	movw	r24, r28
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	0e df       	rcall	.-484    	; 0x1560 <TINYNVM_SendPointerAddress>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1744:	80 e6       	ldi	r24, 0x60	; 96
    1746:	6d dc       	rcall	.-1830   	; 0x1022 <XPROGTarget_SendByte>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	6b dc       	rcall	.-1834   	; 0x1022 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT));
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
	XPROGTarget_SendByte(0x00);
    1752:	27 cf       	rjmp	.-434    	; 0x15a2 <TINYNVM_WaitWhileNVMControllerBusy>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	df 91       	pop	r29
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	08 95       	ret

0000175e <Endpoint_Write_Stream_LE>:
	TINYNVM_SendPointerAddress(Address | 0x0001);
	XPROGTarget_SendByte(TPI_CMD_SST(TPI_POINTER_INDIRECT));
	XPROGTarget_SendByte(0x00);

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
	  return false;

	return true;
}
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    176c:	df 93       	push	r29
    176e:	7c 01       	movw	r14, r24
    1770:	8b 01       	movw	r16, r22
    1772:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1774:	6b d2       	rcall	.+1238   	; 0x1c4c <Endpoint_WaitUntilReady>
    1776:	81 11       	cpse	r24, r1
    1778:	31 c0       	rjmp	.+98     	; 0x17dc <Endpoint_Write_Stream_LE+0x7e>
    177a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    177c:	31 f0       	breq	.+12     	; 0x178a <Endpoint_Write_Stream_LE+0x2c>
    177e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1780:	99 81       	ldd	r25, Y+1	; 0x01
    1782:	08 1b       	sub	r16, r24
    1784:	19 0b       	sbc	r17, r25
    1786:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1788:	f9 1e       	adc	r15, r25
    178a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    178c:	d1 2c       	mov	r13, r1
    178e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1790:	11 05       	cpc	r17, r1
    1792:	19 f1       	breq	.+70     	; 0x17da <Endpoint_Write_Stream_LE+0x7c>
    1794:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1798:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <Endpoint_Write_Stream_LE+0x66>
    179c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17a0:	8e 77       	andi	r24, 0x7E	; 126
    17a2:	80 93 e8 00 	sts	0x00E8, r24
    17a6:	e1 d4       	rcall	.+2498   	; 0x216a <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    17a8:	20 97       	sbiw	r28, 0x00	; 0
    17aa:	41 f0       	breq	.+16     	; 0x17bc <Endpoint_Write_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    17ac:	88 81       	ld	r24, Y
    17ae:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    17b0:	8c 0d       	add	r24, r12
    17b2:	9d 1d       	adc	r25, r13
    17b4:	99 83       	std	Y+1, r25	; 0x01
    17b6:	88 83       	st	Y, r24
    17b8:	85 e0       	ldi	r24, 0x05	; 5
    17ba:	10 c0       	rjmp	.+32     	; 0x17dc <Endpoint_Write_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    17bc:	47 d2       	rcall	.+1166   	; 0x1c4c <Endpoint_WaitUntilReady>
    17be:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17c0:	31 f3       	breq	.-52     	; 0x178e <Endpoint_Write_Stream_LE+0x30>
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <Endpoint_Write_Stream_LE+0x7e>
    17c4:	f7 01       	movw	r30, r14
    17c6:	81 91       	ld	r24, Z+
    17c8:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17ca:	80 93 f1 00 	sts	0x00F1, r24
    17ce:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17d0:	11 09       	sbc	r17, r1
    17d2:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    17d4:	cf 1a       	sub	r12, r31
    17d6:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    17d8:	da cf       	rjmp	.-76     	; 0x178e <Endpoint_Write_Stream_LE+0x30>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    17e0:	1f 91       	pop	r17
}
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <Endpoint_Read_Stream_LE>:
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	7c 01       	movw	r14, r24
    1800:	8b 01       	movw	r16, r22
    1802:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1804:	23 d2       	rcall	.+1094   	; 0x1c4c <Endpoint_WaitUntilReady>
    1806:	81 11       	cpse	r24, r1
    1808:	31 c0       	rjmp	.+98     	; 0x186c <Endpoint_Read_Stream_LE+0x7e>
    180a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    180c:	31 f0       	breq	.+12     	; 0x181a <Endpoint_Read_Stream_LE+0x2c>
    180e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1810:	99 81       	ldd	r25, Y+1	; 0x01
    1812:	08 1b       	sub	r16, r24
    1814:	19 0b       	sbc	r17, r25
    1816:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1818:	f9 1e       	adc	r15, r25
    181a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    181c:	d1 2c       	mov	r13, r1
    181e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1820:	11 05       	cpc	r17, r1
    1822:	19 f1       	breq	.+70     	; 0x186a <Endpoint_Read_Stream_LE+0x7c>
    1824:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1828:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <Endpoint_Read_Stream_LE+0x66>
    182c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1830:	8b 77       	andi	r24, 0x7B	; 123
    1832:	80 93 e8 00 	sts	0x00E8, r24
    1836:	99 d4       	rcall	.+2354   	; 0x216a <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1838:	20 97       	sbiw	r28, 0x00	; 0
    183a:	41 f0       	breq	.+16     	; 0x184c <Endpoint_Read_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    183c:	88 81       	ld	r24, Y
    183e:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    1840:	8c 0d       	add	r24, r12
    1842:	9d 1d       	adc	r25, r13
    1844:	99 83       	std	Y+1, r25	; 0x01
    1846:	88 83       	st	Y, r24
    1848:	85 e0       	ldi	r24, 0x05	; 5
    184a:	10 c0       	rjmp	.+32     	; 0x186c <Endpoint_Read_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    184c:	ff d1       	rcall	.+1022   	; 0x1c4c <Endpoint_WaitUntilReady>
    184e:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1850:	31 f3       	breq	.-52     	; 0x181e <Endpoint_Read_Stream_LE+0x30>
    1852:	0c c0       	rjmp	.+24     	; 0x186c <Endpoint_Read_Stream_LE+0x7e>
    1854:	80 91 f1 00 	lds	r24, 0x00F1
    1858:	f7 01       	movw	r30, r14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    185a:	81 93       	st	Z+, r24
    185c:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    185e:	01 50       	subi	r16, 0x01	; 1
    1860:	11 09       	sbc	r17, r1
    1862:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1864:	cf 1a       	sub	r12, r31
    1866:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1868:	da cf       	rjmp	.-76     	; 0x181e <Endpoint_Read_Stream_LE+0x30>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1870:	1f 91       	pop	r17
}
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	08 95       	ret

0000187e <Endpoint_Read_Stream_BE>:
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	6c 01       	movw	r12, r24
    1890:	8b 01       	movw	r16, r22
    1892:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1894:	db d1       	rcall	.+950    	; 0x1c4c <Endpoint_WaitUntilReady>
    1896:	81 11       	cpse	r24, r1
    1898:	38 c0       	rjmp	.+112    	; 0x190a <Endpoint_Read_Stream_BE+0x8c>
    189a:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    189c:	21 97       	sbiw	r28, 0x01	; 1
    189e:	cc 0d       	add	r28, r12
    18a0:	dd 1d       	adc	r29, r13
    18a2:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    18a4:	f1 04       	cpc	r15, r1
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <Endpoint_Read_Stream_BE+0x38>
    18a8:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	08 1b       	sub	r16, r24
    18b0:	19 0b       	sbc	r17, r25
    18b2:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    18b4:	d9 0b       	sbc	r29, r25
    18b6:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    18b8:	d1 2c       	mov	r13, r1
    18ba:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    18bc:	11 05       	cpc	r17, r1
    18be:	21 f1       	breq	.+72     	; 0x1908 <Endpoint_Read_Stream_BE+0x8a>
    18c0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18c4:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    18c6:	16 c0       	rjmp	.+44     	; 0x18f4 <Endpoint_Read_Stream_BE+0x76>
    18c8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18cc:	8b 77       	andi	r24, 0x7B	; 123
    18ce:	80 93 e8 00 	sts	0x00E8, r24
    18d2:	4b d4       	rcall	.+2198   	; 0x216a <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    18d4:	e1 14       	cp	r14, r1
    18d6:	f1 04       	cpc	r15, r1
			#endif

			if (BytesProcessed != NULL)
    18d8:	49 f0       	breq	.+18     	; 0x18ec <Endpoint_Read_Stream_BE+0x6e>
    18da:	f7 01       	movw	r30, r14
    18dc:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	8c 0d       	add	r24, r12
    18e2:	9d 1d       	adc	r25, r13
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <Endpoint_Read_Stream_BE+0x8c>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    18ec:	af d1       	rcall	.+862    	; 0x1c4c <Endpoint_WaitUntilReady>
    18ee:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18f0:	21 f3       	breq	.-56     	; 0x18ba <Endpoint_Read_Stream_BE+0x3c>
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <Endpoint_Read_Stream_BE+0x8c>
    18f4:	80 91 f1 00 	lds	r24, 0x00F1
    18f8:	88 83       	st	Y, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    18fa:	21 97       	sbiw	r28, 0x01	; 1
    18fc:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    18fe:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1900:	ff ef       	ldi	r31, 0xFF	; 255
			Length--;
    1902:	cf 1a       	sub	r12, r31
    1904:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1906:	d9 cf       	rjmp	.-78     	; 0x18ba <Endpoint_Read_Stream_BE+0x3c>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    190e:	1f 91       	pop	r17
}
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	df 90       	pop	r13
    1918:	cf 90       	pop	r12
    191a:	08 95       	ret

0000191c <Endpoint_Write_Control_Stream_LE>:
    191c:	20 91 e6 02 	lds	r18, 0x02E6
    1920:	30 91 e7 02 	lds	r19, 0x02E7
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1924:	26 17       	cp	r18, r22
    1926:	37 07       	cpc	r19, r23
    1928:	48 f0       	brcs	.+18     	; 0x193c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    192a:	61 15       	cp	r22, r1
    192c:	71 05       	cpc	r23, r1
    192e:	39 f4       	brne	.+14     	; 0x193e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1930:	20 91 e8 00 	lds	r18, 0x00E8
    1934:	2e 77       	andi	r18, 0x7E	; 126
    1936:	20 93 e8 00 	sts	0x00E8, r18
    193a:	01 c0       	rjmp	.+2      	; 0x193e <Endpoint_Write_Control_Stream_LE+0x22>
    193c:	b9 01       	movw	r22, r18
    193e:	fc 01       	movw	r30, r24
    1940:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1942:	61 15       	cp	r22, r1
    1944:	71 05       	cpc	r23, r1
    1946:	91 f1       	breq	.+100    	; 0x19ac <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1948:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    194a:	88 23       	and	r24, r24
    194c:	e1 f1       	breq	.+120    	; 0x19c6 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    194e:	85 30       	cpi	r24, 0x05	; 5
    1950:	e1 f1       	breq	.+120    	; 0x19ca <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1952:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1956:	83 fd       	sbrc	r24, 3
    1958:	3a c0       	rjmp	.+116    	; 0x19ce <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    195a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    195e:	82 ff       	sbrs	r24, 2
    1960:	06 c0       	rjmp	.+12     	; 0x196e <Endpoint_Write_Control_Stream_LE+0x52>
    1962:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1966:	82 ff       	sbrs	r24, 2
    1968:	24 c0       	rjmp	.+72     	; 0x19b2 <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    196e:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1972:	80 ff       	sbrs	r24, 0
    1974:	e6 cf       	rjmp	.-52     	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1976:	80 91 f2 00 	lds	r24, 0x00F2
    197a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    197e:	61 15       	cp	r22, r1
    1980:	71 05       	cpc	r23, r1
    1982:	51 f0       	breq	.+20     	; 0x1998 <Endpoint_Write_Control_Stream_LE+0x7c>
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	91 05       	cpc	r25, r1
    1988:	38 f4       	brcc	.+14     	; 0x1998 <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    198a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    198c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	f3 cf       	rjmp	.-26     	; 0x197e <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	40 97       	sbiw	r24, 0x10	; 16
    199c:	09 f0       	breq	.+2      	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0x84>
    199e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a0:	80 91 e8 00 	lds	r24, 0x00E8
    19a4:	8e 77       	andi	r24, 0x7E	; 126
    19a6:	80 93 e8 00 	sts	0x00E8, r24
    19aa:	cb cf       	rjmp	.-106    	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19ac:	21 11       	cpse	r18, r1
    19ae:	cc cf       	rjmp	.-104    	; 0x1948 <Endpoint_Write_Control_Stream_LE+0x2c>
    19b0:	d8 cf       	rjmp	.-80     	; 0x1962 <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19b2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19b4:	88 23       	and	r24, r24
    19b6:	39 f0       	breq	.+14     	; 0x19c6 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19b8:	85 30       	cpi	r24, 0x05	; 5
    19ba:	39 f0       	breq	.+14     	; 0x19ca <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19c0:	83 ff       	sbrs	r24, 3
    19c2:	cf cf       	rjmp	.-98     	; 0x1962 <Endpoint_Write_Control_Stream_LE+0x46>
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19ca:	83 e0       	ldi	r24, 0x03	; 3
    19cc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19d0:	08 95       	ret

000019d2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19d2:	20 91 e6 02 	lds	r18, 0x02E6
    19d6:	30 91 e7 02 	lds	r19, 0x02E7
    19da:	26 17       	cp	r18, r22
    19dc:	37 07       	cpc	r19, r23
    19de:	48 f0       	brcs	.+18     	; 0x19f2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19e0:	61 15       	cp	r22, r1
    19e2:	71 05       	cpc	r23, r1
    19e4:	39 f4       	brne	.+14     	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19e6:	20 91 e8 00 	lds	r18, 0x00E8
    19ea:	2e 77       	andi	r18, 0x7E	; 126
    19ec:	20 93 e8 00 	sts	0x00E8, r18
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x22>
    19f2:	b9 01       	movw	r22, r18
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19f8:	61 15       	cp	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	a9 f1       	breq	.+106    	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19fe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <Endpoint_Write_Control_PStream_LE+0x34>
    1a04:	3e c0       	rjmp	.+124    	; 0x1a82 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a06:	85 30       	cpi	r24, 0x05	; 5
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <Endpoint_Write_Control_PStream_LE+0x3a>
    1a0a:	3d c0       	rjmp	.+122    	; 0x1a86 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a10:	83 fd       	sbrc	r24, 3
    1a12:	3b c0       	rjmp	.+118    	; 0x1a8a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a14:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a18:	82 ff       	sbrs	r24, 2
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <Endpoint_Write_Control_PStream_LE+0x56>
    1a1c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a20:	82 ff       	sbrs	r24, 2
    1a22:	25 c0       	rjmp	.+74     	; 0x1a6e <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a28:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1a2c:	80 ff       	sbrs	r24, 0
    1a2e:	e4 cf       	rjmp	.-56     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a30:	80 91 f2 00 	lds	r24, 0x00F2
    1a34:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a38:	61 15       	cp	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <Endpoint_Write_Control_PStream_LE+0x82>
    1a3e:	80 31       	cpi	r24, 0x10	; 16
    1a40:	91 05       	cpc	r25, r1
    1a42:	40 f4       	brcc	.+16     	; 0x1a54 <Endpoint_Write_Control_PStream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a44:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a46:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a4a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a4c:	61 50       	subi	r22, 0x01	; 1
    1a4e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	f2 cf       	rjmp	.-28     	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x66>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	40 97       	sbiw	r24, 0x10	; 16
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <Endpoint_Write_Control_PStream_LE+0x8a>
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a5c:	80 91 e8 00 	lds	r24, 0x00E8
    1a60:	8e 77       	andi	r24, 0x7E	; 126
    1a62:	80 93 e8 00 	sts	0x00E8, r24
    1a66:	c8 cf       	rjmp	.-112    	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a68:	21 11       	cpse	r18, r1
    1a6a:	c9 cf       	rjmp	.-110    	; 0x19fe <Endpoint_Write_Control_PStream_LE+0x2c>
    1a6c:	d7 cf       	rjmp	.-82     	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a6e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a70:	88 23       	and	r24, r24
    1a72:	39 f0       	breq	.+14     	; 0x1a82 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a74:	85 30       	cpi	r24, 0x05	; 5
    1a76:	39 f0       	breq	.+14     	; 0x1a86 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a78:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a7c:	83 ff       	sbrs	r24, 3
    1a7e:	ce cf       	rjmp	.-100    	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0x4a>
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <Endpoint_Write_Control_PStream_LE+0xb8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a8c:	08 95       	ret

00001a8e <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a9c:	20 91 e6 02 	lds	r18, 0x02E6
    1aa0:	30 91 e7 02 	lds	r19, 0x02E7
    1aa4:	26 17       	cp	r18, r22
    1aa6:	37 07       	cpc	r19, r23
    1aa8:	40 f0       	brcs	.+16     	; 0x1aba <Endpoint_Write_Control_EStream_LE+0x2c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1aaa:	20 97       	sbiw	r28, 0x00	; 0
    1aac:	39 f4       	brne	.+14     	; 0x1abc <Endpoint_Write_Control_EStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1aae:	20 91 e8 00 	lds	r18, 0x00E8
    1ab2:	2e 77       	andi	r18, 0x7E	; 126
    1ab4:	20 93 e8 00 	sts	0x00E8, r18
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <Endpoint_Write_Control_EStream_LE+0x2e>
    1aba:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1abc:	9c 01       	movw	r18, r24
    1abe:	40 e0       	ldi	r20, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ac0:	20 97       	sbiw	r28, 0x00	; 0
    1ac2:	d9 f1       	breq	.+118    	; 0x1b3a <Endpoint_Write_Control_EStream_LE+0xac>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ac4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ac6:	88 23       	and	r24, r24
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <Endpoint_Write_Control_EStream_LE+0x3e>
    1aca:	44 c0       	rjmp	.+136    	; 0x1b54 <Endpoint_Write_Control_EStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1acc:	85 30       	cpi	r24, 0x05	; 5
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <Endpoint_Write_Control_EStream_LE+0x44>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ad2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ad6:	83 fd       	sbrc	r24, 3
    1ad8:	41 c0       	rjmp	.+130    	; 0x1b5c <Endpoint_Write_Control_EStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ada:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ade:	82 ff       	sbrs	r24, 2
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <Endpoint_Write_Control_EStream_LE+0x60>
    1ae2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ae6:	82 ff       	sbrs	r24, 2
    1ae8:	2b c0       	rjmp	.+86     	; 0x1b40 <Endpoint_Write_Control_EStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	38 c0       	rjmp	.+112    	; 0x1b5e <Endpoint_Write_Control_EStream_LE+0xd0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aee:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1af2:	80 ff       	sbrs	r24, 0
    1af4:	e5 cf       	rjmp	.-54     	; 0x1ac0 <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1af6:	00 91 f2 00 	lds	r16, 0x00F2
    1afa:	10 91 f3 00 	lds	r17, 0x00F3
    1afe:	79 01       	movw	r14, r18
    1b00:	e0 1a       	sub	r14, r16
    1b02:	f1 0a       	sbc	r15, r17
    1b04:	c7 01       	movw	r24, r14
    1b06:	80 0f       	add	r24, r16
    1b08:	91 1f       	adc	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b0a:	20 97       	sbiw	r28, 0x00	; 0
    1b0c:	51 f0       	breq	.+20     	; 0x1b22 <Endpoint_Write_Control_EStream_LE+0x94>
    1b0e:	00 31       	cpi	r16, 0x10	; 16
    1b10:	11 05       	cpc	r17, r1
    1b12:	38 f4       	brcc	.+14     	; 0x1b22 <Endpoint_Write_Control_EStream_LE+0x94>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b14:	d3 d4       	rcall	.+2470   	; 0x24bc <__eerd_byte_usb1287>
    1b16:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b1a:	21 97       	sbiw	r28, 0x01	; 1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1b1c:	0f 5f       	subi	r16, 0xFF	; 255
				BytesInEndpoint++;
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	f1 cf       	rjmp	.-30     	; 0x1b04 <Endpoint_Write_Control_EStream_LE+0x76>
    1b22:	41 e0       	ldi	r20, 0x01	; 1
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b24:	00 31       	cpi	r16, 0x10	; 16
    1b26:	11 05       	cpc	r17, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <Endpoint_Write_Control_EStream_LE+0x9e>
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	20 91 e8 00 	lds	r18, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b30:	2e 77       	andi	r18, 0x7E	; 126
    1b32:	20 93 e8 00 	sts	0x00E8, r18
    1b36:	9c 01       	movw	r18, r24
    1b38:	c3 cf       	rjmp	.-122    	; 0x1ac0 <Endpoint_Write_Control_EStream_LE+0x32>
    1b3a:	41 11       	cpse	r20, r1
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b3c:	c3 cf       	rjmp	.-122    	; 0x1ac4 <Endpoint_Write_Control_EStream_LE+0x36>
    1b3e:	d1 cf       	rjmp	.-94     	; 0x1ae2 <Endpoint_Write_Control_EStream_LE+0x54>
    1b40:	8e b3       	in	r24, 0x1e	; 30
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b42:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <Endpoint_Write_Control_EStream_LE+0xc6>
    1b46:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <Endpoint_Write_Control_EStream_LE+0xca>
    1b4a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b4e:	83 ff       	sbrs	r24, 3
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b50:	c8 cf       	rjmp	.-112    	; 0x1ae2 <Endpoint_Write_Control_EStream_LE+0x54>
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <Endpoint_Write_Control_EStream_LE+0xce>
    1b54:	82 e0       	ldi	r24, 0x02	; 2
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <Endpoint_Write_Control_EStream_LE+0xd0>
    1b58:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <Endpoint_Write_Control_EStream_LE+0xd0>
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b5e:	df 91       	pop	r29
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	08 95       	ret

00001b6c <Endpoint_ConfigureEndpoint_Prv>:
    1b6c:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b6e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1b72:	eb ee       	ldi	r30, 0xEB	; 235
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	81 60       	ori	r24, 0x01	; 1
    1b7a:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1b7c:	ed ee       	ldi	r30, 0xED	; 237
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    1b82:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    1b86:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b88:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	88 27       	eor	r24, r24
    1b90:	88 1f       	adc	r24, r24
    1b92:	08 95       	ret

00001b94 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	06 2f       	mov	r16, r22
    1b9e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	10 17       	cp	r17, r16
    1ba4:	71 f1       	breq	.+92     	; 0x1c02 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    1ba6:	98 81       	ld	r25, Y
    1ba8:	99 23       	and	r25, r25
    1baa:	41 f1       	breq	.+80     	; 0x1bfc <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1bac:	2c 81       	ldd	r18, Y+4	; 0x04
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1bb4:	89 2f       	mov	r24, r25
    1bb6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1bb8:	87 30       	cpi	r24, 0x07	; 7
    1bba:	10 f0       	brcs	.+4      	; 0x1bc0 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	22 c0       	rjmp	.+68     	; 0x1c04 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	10 f0       	brcs	.+4      	; 0x1bc8 <Endpoint_ConfigureEndpointTable+0x34>
    1bc4:	56 e0       	ldi	r21, 0x06	; 6
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <Endpoint_ConfigureEndpointTable+0x36>
    1bc8:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1bca:	28 e0       	ldi	r18, 0x08	; 8
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1bce:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1bd0:	2e 17       	cp	r18, r30
    1bd2:	3f 07       	cpc	r19, r31
    1bd4:	20 f4       	brcc	.+8      	; 0x1bde <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    1bd6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	f9 cf       	rjmp	.-14     	; 0x1bd0 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    1bde:	42 95       	swap	r20
    1be0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1be2:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1be4:	69 2f       	mov	r22, r25
    1be6:	66 1f       	adc	r22, r22
    1be8:	66 27       	eor	r22, r22
    1bea:	66 1f       	adc	r22, r22
    1bec:	90 e4       	ldi	r25, 0x40	; 64
    1bee:	79 9f       	mul	r23, r25
    1bf0:	90 01       	movw	r18, r0
    1bf2:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bf4:	62 2b       	or	r22, r18
    1bf6:	ba df       	rcall	.-140    	; 0x1b6c <Endpoint_ConfigureEndpoint_Prv>
    1bf8:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1bfa:	01 f3       	breq	.-64     	; 0x1bbc <Endpoint_ConfigureEndpointTable+0x28>
    1bfc:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1bfe:	25 96       	adiw	r28, 0x05	; 5
    1c00:	d0 cf       	rjmp	.-96     	; 0x1ba2 <Endpoint_ConfigureEndpointTable+0xe>
    1c02:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    1c04:	df 91       	pop	r29
}
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <Endpoint_ClearStatusStage>:
    1c0e:	80 91 e0 02 	lds	r24, 0x02E0
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c12:	87 fd       	sbrc	r24, 7
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c16:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c1a:	80 ff       	sbrs	r24, 0
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <Endpoint_ClearStatusStage+0x2a>
    1c1e:	10 c0       	rjmp	.+32     	; 0x1c40 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c20:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1c24:	82 fd       	sbrc	r24, 2
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c28:	8e b3       	in	r24, 0x1e	; 30
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	f9 cf       	rjmp	.-14     	; 0x1c20 <Endpoint_ClearStatusStage+0x12>
    1c2e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c30:	80 91 e8 00 	lds	r24, 0x00E8
    1c34:	8b 77       	andi	r24, 0x7B	; 123
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c38:	8e b3       	in	r24, 0x1e	; 30
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	ec cf       	rjmp	.-40     	; 0x1c16 <Endpoint_ClearStatusStage+0x8>
    1c3e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c40:	80 91 e8 00 	lds	r24, 0x00E8
    1c44:	8e 77       	andi	r24, 0x7E	; 126
    1c46:	80 93 e8 00 	sts	0x00E8, r24
    1c4a:	08 95       	ret

00001c4c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c4c:	80 91 e4 00 	lds	r24, 0x00E4
    1c50:	90 91 e5 00 	lds	r25, 0x00E5
    1c54:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c56:	20 91 ec 00 	lds	r18, 0x00EC
    1c5a:	20 ff       	sbrs	r18, 0
    1c5c:	20 c0       	rjmp	.+64     	; 0x1c9e <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c5e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c62:	20 fd       	sbrc	r18, 0
    1c64:	20 c0       	rjmp	.+64     	; 0x1ca6 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c66:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c68:	22 23       	and	r18, r18
    1c6a:	89 f0       	breq	.+34     	; 0x1c8e <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c6c:	25 30       	cpi	r18, 0x05	; 5
    1c6e:	89 f0       	breq	.+34     	; 0x1c92 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c70:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c74:	25 fd       	sbrc	r18, 5
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <Endpoint_WaitUntilReady+0x4a>
    1c78:	20 91 e4 00 	lds	r18, 0x00E4
    1c7c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c80:	28 17       	cp	r18, r24
    1c82:	39 07       	cpc	r19, r25
    1c84:	41 f3       	breq	.-48     	; 0x1c56 <Endpoint_WaitUntilReady+0xa>
    1c86:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c88:	41 f0       	breq	.+16     	; 0x1c9a <Endpoint_WaitUntilReady+0x4e>
    1c8a:	c9 01       	movw	r24, r18
    1c8c:	e4 cf       	rjmp	.-56     	; 0x1c56 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c9e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1ca2:	22 ff       	sbrs	r18, 2
    1ca4:	e0 cf       	rjmp	.-64     	; 0x1c66 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	08 95       	ret

00001caa <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cb2:	49 d0       	rcall	.+146    	; 0x1d46 <USB_INT_DisableAllInterrupts>
    1cb4:	50 d0       	rcall	.+160    	; 0x1d56 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cb6:	c8 ed       	ldi	r28, 0xD8	; 216
    1cb8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cba:	88 81       	ld	r24, Y
    1cbc:	8f 77       	andi	r24, 0x7F	; 127
    1cbe:	88 83       	st	Y, r24
    1cc0:	88 81       	ld	r24, Y
    1cc2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1cc4:	88 83       	st	Y, r24
    1cc6:	88 81       	ld	r24, Y
    1cc8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cca:	88 83       	st	Y, r24
    1ccc:	e7 ed       	ldi	r30, 0xD7	; 215
    1cce:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 68       	ori	r24, 0x80	; 128
    1cd4:	80 83       	st	Z, r24
    1cd6:	19 bc       	out	0x29, r1	; 41
    1cd8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cda:	10 92 de 02 	sts	0x02DE, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    1cde:	00 ee       	ldi	r16, 0xE0	; 224
    1ce0:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8b 7f       	andi	r24, 0xFB	; 251
    1ce8:	80 83       	st	Z, r24
    1cea:	88 81       	ld	r24, Y
    1cec:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1cee:	88 83       	st	Y, r24
    1cf0:	42 e1       	ldi	r20, 0x12	; 18
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	3a df       	rcall	.-396    	; 0x1b6c <Endpoint_ConfigureEndpoint_Prv>
    1cf8:	e1 ee       	ldi	r30, 0xE1	; 225
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1cfe:	8e 7f       	andi	r24, 0xFE	; 254
    1d00:	80 83       	st	Z, r24
    1d02:	e2 ee       	ldi	r30, 0xE2	; 226
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	80 83       	st	Z, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 60       	ori	r24, 0x08	; 8
    1d10:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 81       	ld	r24, Z
    1d16:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d18:	80 83       	st	Z, r24
    1d1a:	88 81       	ld	r24, Y
    1d1c:	80 61       	ori	r24, 0x10	; 16
    1d1e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <USB_Init>:
    1d2a:	e8 ed       	ldi	r30, 0xD8	; 216
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d30:	8f 7e       	andi	r24, 0xEF	; 239
    1d32:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d34:	e7 ed       	ldi	r30, 0xD7	; 215
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	81 60       	ori	r24, 0x01	; 1
    1d3c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	80 93 df 02 	sts	0x02DF, r24

	USB_ResetInterface();
    1d44:	b2 cf       	rjmp	.-156    	; 0x1caa <USB_ResetInterface>

00001d46 <USB_INT_DisableAllInterrupts>:
    1d46:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8c 7f       	andi	r24, 0xFC	; 252
    1d4e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d50:	10 92 e2 00 	sts	0x00E2, r1
    1d54:	08 95       	ret

00001d56 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d56:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d5a:	10 92 e1 00 	sts	0x00E1, r1
    1d5e:	08 95       	ret

00001d60 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	0b b6       	in	r0, 0x3b	; 59
    1d6c:	0f 92       	push	r0
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d86:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	1d c0       	rjmp	.+58     	; 0x1dc8 <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d8e:	80 91 d8 00 	lds	r24, 0x00D8
    1d92:	80 ff       	sbrs	r24, 0
    1d94:	19 c0       	rjmp	.+50     	; 0x1dc8 <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d96:	80 91 da 00 	lds	r24, 0x00DA
    1d9a:	8e 7f       	andi	r24, 0xFE	; 254
    1d9c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1da0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1da4:	80 ff       	sbrs	r24, 0
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <__vector_10+0x60>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1da8:	8c e0       	ldi	r24, 0x0C	; 12
    1daa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dac:	8e e0       	ldi	r24, 0x0E	; 14
    1dae:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1db0:	09 b4       	in	r0, 0x29	; 41
    1db2:	00 fe       	sbrs	r0, 0
    1db4:	fd cf       	rjmp	.-6      	; 0x1db0 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1dba:	0e 94 00 02 	call	0x400	; 0x400 <EVENT_USB_Device_Connect>
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <__vector_10+0x68>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1dc0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1dc2:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1dc4:	0e 94 02 02 	call	0x404	; 0x404 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1dc8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1dcc:	80 ff       	sbrs	r24, 0
    1dce:	17 c0       	rjmp	.+46     	; 0x1dfe <__vector_10+0x9e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1dd0:	80 91 e2 00 	lds	r24, 0x00E2
    1dd4:	80 ff       	sbrs	r24, 0
    1dd6:	13 c0       	rjmp	.+38     	; 0x1dfe <__vector_10+0x9e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dd8:	80 91 e2 00 	lds	r24, 0x00E2
    1ddc:	8e 7f       	andi	r24, 0xFE	; 254
    1dde:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1de2:	80 91 e2 00 	lds	r24, 0x00E2
    1de6:	80 61       	ori	r24, 0x10	; 16
    1de8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1dec:	80 91 d8 00 	lds	r24, 0x00D8
    1df0:	80 62       	ori	r24, 0x20	; 32
    1df2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1df6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1dfc:	b5 d1       	rcall	.+874    	; 0x2168 <USB_Event_Stub>
    1dfe:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1e02:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e04:	2e c0       	rjmp	.+92     	; 0x1e62 <__vector_10+0x102>
    1e06:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1e0a:	84 ff       	sbrs	r24, 4
    1e0c:	2a c0       	rjmp	.+84     	; 0x1e62 <__vector_10+0x102>
    1e0e:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e10:	89 bd       	out	0x29, r24	; 41
    1e12:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e14:	89 bd       	out	0x29, r24	; 41
    1e16:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e18:	00 fe       	sbrs	r0, 0
    1e1a:	fd cf       	rjmp	.-6      	; 0x1e16 <__vector_10+0xb6>
    1e1c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e20:	8f 7d       	andi	r24, 0xDF	; 223
    1e22:	80 93 d8 00 	sts	0x00D8, r24
    1e26:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e2a:	8f 7e       	andi	r24, 0xEF	; 239
    1e2c:	80 93 e1 00 	sts	0x00E1, r24
    1e30:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e34:	8f 7e       	andi	r24, 0xEF	; 239
    1e36:	80 93 e2 00 	sts	0x00E2, r24
    1e3a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e3e:	81 60       	ori	r24, 0x01	; 1
    1e40:	80 93 e2 00 	sts	0x00E2, r24
    1e44:	80 91 de 02 	lds	r24, 0x02DE
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e48:	88 23       	and	r24, r24
    1e4a:	11 f0       	breq	.+4      	; 0x1e50 <__vector_10+0xf0>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e4e:	07 c0       	rjmp	.+14     	; 0x1e5e <__vector_10+0xfe>
    1e50:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e54:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <__vector_10+0xfc>
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <__vector_10+0xfe>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	8e bb       	out	0x1e, r24	; 30
    1e60:	83 d1       	rcall	.+774    	; 0x2168 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e62:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e66:	83 ff       	sbrs	r24, 3
    1e68:	21 c0       	rjmp	.+66     	; 0x1eac <__vector_10+0x14c>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e6a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e6e:	83 ff       	sbrs	r24, 3
    1e70:	1d c0       	rjmp	.+58     	; 0x1eac <__vector_10+0x14c>
    1e72:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e76:	87 7f       	andi	r24, 0xF7	; 247
    1e78:	80 93 e1 00 	sts	0x00E1, r24
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e80:	10 92 de 02 	sts	0x02DE, r1
		USB_Device_ConfigurationNumber = 0;
    1e84:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	80 93 e1 00 	sts	0x00E1, r24
    1e8e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e92:	8e 7f       	andi	r24, 0xFE	; 254
    1e94:	80 93 e2 00 	sts	0x00E2, r24
    1e98:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e9c:	80 61       	ori	r24, 0x10	; 16
    1e9e:	80 93 e2 00 	sts	0x00E2, r24
    1ea2:	42 e1       	ldi	r20, 0x12	; 18
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	61 de       	rcall	.-830    	; 0x1b6c <Endpoint_ConfigureEndpoint_Prv>
    1eaa:	5e d1       	rcall	.+700    	; 0x2168 <USB_Event_Stub>
    1eac:	ff 91       	pop	r31
    1eae:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	7f 91       	pop	r23
    1eba:	6f 91       	pop	r22
    1ebc:	5f 91       	pop	r21
    1ebe:	4f 91       	pop	r20
    1ec0:	3f 91       	pop	r19
    1ec2:	2f 91       	pop	r18
    1ec4:	0f 90       	pop	r0
    1ec6:	0b be       	out	0x3b, r0	; 59
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <USB_Device_ProcessControlRequest>:
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	ab 97       	sbiw	r28, 0x2b	; 43
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	e0 ee       	ldi	r30, 0xE0	; 224
    1eea:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1eec:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ef0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ef2:	22 e0       	ldi	r18, 0x02	; 2
    1ef4:	e8 3e       	cpi	r30, 0xE8	; 232
    1ef6:	f2 07       	cpc	r31, r18
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1efa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1efe:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1f02:	83 ff       	sbrs	r24, 3
    1f04:	19 c1       	rjmp	.+562    	; 0x2138 <__stack+0x39>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1f06:	90 91 e0 02 	lds	r25, 0x02E0

		switch (USB_ControlRequest.bRequest)
    1f0a:	80 91 e1 02 	lds	r24, 0x02E1
    1f0e:	85 30       	cpi	r24, 0x05	; 5
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <USB_Device_ProcessControlRequest+0x42>
    1f12:	65 c0       	rjmp	.+202    	; 0x1fde <USB_Device_ProcessControlRequest+0x10c>
    1f14:	30 f4       	brcc	.+12     	; 0x1f22 <USB_Device_ProcessControlRequest+0x50>
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	59 f1       	breq	.+86     	; 0x1f70 <USB_Device_ProcessControlRequest+0x9e>
    1f1a:	68 f0       	brcs	.+26     	; 0x1f36 <USB_Device_ProcessControlRequest+0x64>
    1f1c:	83 30       	cpi	r24, 0x03	; 3
    1f1e:	41 f1       	breq	.+80     	; 0x1f70 <USB_Device_ProcessControlRequest+0x9e>
    1f20:	0b c1       	rjmp	.+534    	; 0x2138 <__stack+0x39>
    1f22:	88 30       	cpi	r24, 0x08	; 8
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <USB_Device_ProcessControlRequest+0x56>
    1f26:	da c0       	rjmp	.+436    	; 0x20dc <USB_Device_ProcessControlRequest+0x20a>
    1f28:	89 30       	cpi	r24, 0x09	; 9
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <USB_Device_ProcessControlRequest+0x5c>
    1f2c:	e9 c0       	rjmp	.+466    	; 0x2100 <__stack+0x1>
    1f2e:	86 30       	cpi	r24, 0x06	; 6
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <USB_Device_ProcessControlRequest+0x62>
    1f32:	02 c1       	rjmp	.+516    	; 0x2138 <__stack+0x39>
    1f34:	75 c0       	rjmp	.+234    	; 0x2020 <USB_Device_ProcessControlRequest+0x14e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f36:	90 38       	cpi	r25, 0x80	; 128
    1f38:	81 f0       	breq	.+32     	; 0x1f5a <USB_Device_ProcessControlRequest+0x88>
    1f3a:	92 38       	cpi	r25, 0x82	; 130
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <USB_Device_ProcessControlRequest+0x6e>
    1f3e:	fc c0       	rjmp	.+504    	; 0x2138 <__stack+0x39>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f40:	80 91 e4 02 	lds	r24, 0x02E4
    1f44:	8f 70       	andi	r24, 0x0F	; 15
    1f46:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f4a:	90 91 eb 00 	lds	r25, 0x00EB
    1f4e:	95 fb       	bst	r25, 5
    1f50:	99 27       	eor	r25, r25
    1f52:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f54:	10 92 e9 00 	sts	0x00E9, r1
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <USB_Device_ProcessControlRequest+0x8a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f5c:	80 91 e8 00 	lds	r24, 0x00E8
    1f60:	87 7f       	andi	r24, 0xF7	; 247
    1f62:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f66:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1f6a:	10 92 f1 00 	sts	0x00F1, r1
    1f6e:	c1 c0       	rjmp	.+386    	; 0x20f2 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f70:	29 2f       	mov	r18, r25
    1f72:	2d 7f       	andi	r18, 0xFD	; 253
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <USB_Device_ProcessControlRequest+0xa6>
    1f76:	e0 c0       	rjmp	.+448    	; 0x2138 <__stack+0x39>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f78:	92 30       	cpi	r25, 0x02	; 2
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <USB_Device_ProcessControlRequest+0xac>
    1f7c:	dd c0       	rjmp	.+442    	; 0x2138 <__stack+0x39>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f7e:	90 91 e2 02 	lds	r25, 0x02E2
    1f82:	91 11       	cpse	r25, r1
    1f84:	26 c0       	rjmp	.+76     	; 0x1fd2 <USB_Device_ProcessControlRequest+0x100>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f86:	20 91 e4 02 	lds	r18, 0x02E4
    1f8a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <USB_Device_ProcessControlRequest+0xbe>
    1f8e:	d4 c0       	rjmp	.+424    	; 0x2138 <__stack+0x39>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f90:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f94:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f98:	90 ff       	sbrs	r25, 0
    1f9a:	1b c0       	rjmp	.+54     	; 0x1fd2 <USB_Device_ProcessControlRequest+0x100>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <USB_Device_ProcessControlRequest+0xd6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fa0:	80 91 eb 00 	lds	r24, 0x00EB
    1fa4:	80 62       	ori	r24, 0x20	; 32
    1fa6:	13 c0       	rjmp	.+38     	; 0x1fce <USB_Device_ProcessControlRequest+0xfc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fa8:	80 91 eb 00 	lds	r24, 0x00EB
    1fac:	80 61       	ori	r24, 0x10	; 16
    1fae:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	02 2e       	mov	r0, r18
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0xea>
    1fba:	88 0f       	add	r24, r24
    1fbc:	0a 94       	dec	r0
    1fbe:	ea f7       	brpl	.-6      	; 0x1fba <USB_Device_ProcessControlRequest+0xe8>
    1fc0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1fc4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fc8:	80 91 eb 00 	lds	r24, 0x00EB
    1fcc:	88 60       	ori	r24, 0x08	; 8
    1fce:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	8d c0       	rjmp	.+282    	; 0x20f8 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fde:	91 11       	cpse	r25, r1
    1fe0:	ab c0       	rjmp	.+342    	; 0x2138 <__stack+0x39>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fe2:	10 91 e2 02 	lds	r17, 0x02E2
    1fe6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fe8:	80 91 e3 00 	lds	r24, 0x00E3
    1fec:	80 78       	andi	r24, 0x80	; 128
    1fee:	81 2b       	or	r24, r17
    1ff0:	80 93 e3 00 	sts	0x00E3, r24
    1ff4:	80 91 e8 00 	lds	r24, 0x00E8
    1ff8:	87 7f       	andi	r24, 0xF7	; 247
    1ffa:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ffe:	07 de       	rcall	.-1010   	; 0x1c0e <Endpoint_ClearStatusStage>
    2000:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2004:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    2006:	fc cf       	rjmp	.-8      	; 0x2000 <USB_Device_ProcessControlRequest+0x12e>
    2008:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	80 93 e3 00 	sts	0x00E3, r24
    2012:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2014:	11 f0       	breq	.+4      	; 0x201a <USB_Device_ProcessControlRequest+0x148>
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	01 c0       	rjmp	.+2      	; 0x201c <USB_Device_ProcessControlRequest+0x14a>
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	8e bb       	out	0x1e, r24	; 30
    201e:	8c c0       	rjmp	.+280    	; 0x2138 <__stack+0x39>
    2020:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2022:	92 30       	cpi	r25, 0x02	; 2
    2024:	08 f0       	brcs	.+2      	; 0x2028 <USB_Device_ProcessControlRequest+0x156>
    2026:	88 c0       	rjmp	.+272    	; 0x2138 <__stack+0x39>
    2028:	80 91 e2 02 	lds	r24, 0x02E2
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    202c:	90 91 e3 02 	lds	r25, 0x02E3
    2030:	8c 3d       	cpi	r24, 0xDC	; 220
    2032:	23 e0       	ldi	r18, 0x03	; 3
    2034:	92 07       	cpc	r25, r18
    2036:	69 f5       	brne	.+90     	; 0x2092 <USB_Device_ProcessControlRequest+0x1c0>
    2038:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2042:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2044:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2046:	13 96       	adiw	r26, 0x03	; 3
    2048:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    204a:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    204c:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    204e:	e3 2f       	mov	r30, r19
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	50 93 57 00 	sts	0x0057, r21
    2056:	e4 91       	lpm	r30, Z
    2058:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <USB_Device_ProcessControlRequest+0x190>
    205c:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    205e:	ef 70       	andi	r30, 0x0F	; 15
    2060:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    2062:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    2064:	8e 2f       	mov	r24, r30
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    206a:	10 f0       	brcs	.+4      	; 0x2070 <USB_Device_ProcessControlRequest+0x19e>
    206c:	c7 96       	adiw	r24, 0x37	; 55
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <USB_Device_ProcessControlRequest+0x1a0>
    2070:	c0 96       	adiw	r24, 0x30	; 48
    2072:	8d 93       	st	X+, r24
    2074:	9d 93       	st	X+, r25
    2076:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2078:	24 31       	cpi	r18, 0x14	; 20
    207a:	49 f7       	brne	.-46     	; 0x204e <USB_Device_ProcessControlRequest+0x17c>
    207c:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    207e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2082:	87 7f       	andi	r24, 0xF7	; 247
    2084:	80 93 e8 00 	sts	0x00E8, r24
    2088:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	ce 01       	movw	r24, r28
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	1e c0       	rjmp	.+60     	; 0x20ce <USB_Device_ProcessControlRequest+0x1fc>
    2092:	9e 01       	movw	r18, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2094:	25 5d       	subi	r18, 0xD5	; 213
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	ae 01       	movw	r20, r28
    209a:	4f 5f       	subi	r20, 0xFF	; 255
    209c:	5f 4f       	sbci	r21, 0xFF	; 255
    209e:	60 91 e4 02 	lds	r22, 0x02E4
    20a2:	0e 94 1a 02 	call	0x434	; 0x434 <CALLBACK_USB_GetDescriptor>
    20a6:	bc 01       	movw	r22, r24
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	09 f4       	brne	.+2      	; 0x20ae <USB_Device_ProcessControlRequest+0x1dc>
    20ac:	45 c0       	rjmp	.+138    	; 0x2138 <__stack+0x39>
    20ae:	80 91 e8 00 	lds	r24, 0x00E8
    20b2:	87 7f       	andi	r24, 0xF7	; 247
    20b4:	80 93 e8 00 	sts	0x00E8, r24
    20b8:	2b a5       	ldd	r18, Y+43	; 0x2b
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	21 11       	cpse	r18, r1
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <USB_Device_ProcessControlRequest+0x1f4>
    20c2:	87 dc       	rcall	.-1778   	; 0x19d2 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <USB_Device_ProcessControlRequest+0x1fe>
    20c6:	21 30       	cpi	r18, 0x01	; 1
    20c8:	11 f4       	brne	.+4      	; 0x20ce <USB_Device_ProcessControlRequest+0x1fc>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    20ca:	e1 dc       	rcall	.-1598   	; 0x1a8e <Endpoint_Write_Control_EStream_LE>
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <USB_Device_ProcessControlRequest+0x1fe>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    20ce:	26 dc       	rcall	.-1972   	; 0x191c <Endpoint_Write_Control_Stream_LE>
    20d0:	80 91 e8 00 	lds	r24, 0x00E8
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    20d4:	8b 77       	andi	r24, 0x7B	; 123
    20d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20da:	2e c0       	rjmp	.+92     	; 0x2138 <__stack+0x39>
    20dc:	90 38       	cpi	r25, 0x80	; 128
    20de:	61 f5       	brne	.+88     	; 0x2138 <__stack+0x39>
    20e0:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    20e4:	87 7f       	andi	r24, 0xF7	; 247
    20e6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ea:	80 91 de 02 	lds	r24, 0x02DE
    20ee:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20f2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20f6:	8e 77       	andi	r24, 0x7E	; 126
    20f8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20fc:	88 dd       	rcall	.-1264   	; 0x1c0e <Endpoint_ClearStatusStage>
    20fe:	1c c0       	rjmp	.+56     	; 0x2138 <__stack+0x39>
    2100:	91 11       	cpse	r25, r1
    2102:	1a c0       	rjmp	.+52     	; 0x2138 <__stack+0x39>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2104:	90 91 e2 02 	lds	r25, 0x02E2
    2108:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    210a:	b0 f4       	brcc	.+44     	; 0x2138 <__stack+0x39>
    210c:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2110:	87 7f       	andi	r24, 0xF7	; 247
    2112:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2116:	90 93 de 02 	sts	0x02DE, r25
    211a:	79 dd       	rcall	.-1294   	; 0x1c0e <Endpoint_ClearStatusStage>
    211c:	80 91 de 02 	lds	r24, 0x02DE
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2120:	81 11       	cpse	r24, r1
    2122:	04 c0       	rjmp	.+8      	; 0x212c <__stack+0x2d>

	Endpoint_ClearStatusStage();
    2124:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    2128:	87 ff       	sbrs	r24, 7
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <__stack+0x31>
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <__stack+0x33>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2134:	0e 94 a6 01 	call	0x34c	; 0x34c <EVENT_USB_Device_ConfigurationChanged>
    2138:	80 91 e8 00 	lds	r24, 0x00E8
    213c:	83 ff       	sbrs	r24, 3
    213e:	0a c0       	rjmp	.+20     	; 0x2154 <__stack+0x55>

	EVENT_USB_Device_ConfigurationChanged();
    2140:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2144:	87 7f       	andi	r24, 0xF7	; 247
    2146:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    214a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    214e:	80 62       	ori	r24, 0x20	; 32
    2150:	80 93 eb 00 	sts	0x00EB, r24
    2154:	ab 96       	adiw	r28, 0x2b	; 43
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	08 95       	ret

00002168 <USB_Event_Stub>:
    2168:	08 95       	ret

0000216a <USB_USBTask>:
    216a:	cf 93       	push	r28
    216c:	8e b3       	in	r24, 0x1e	; 30
    216e:	88 23       	and	r24, r24
    2170:	a9 f0       	breq	.+42     	; 0x219c <USB_USBTask+0x32>
    2172:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2176:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2178:	90 91 ec 00 	lds	r25, 0x00EC
    217c:	90 ff       	sbrs	r25, 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <USB_USBTask+0x1a>
    2180:	90 e8       	ldi	r25, 0x80	; 128
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <USB_USBTask+0x1c>
    2184:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2186:	c9 2f       	mov	r28, r25
    2188:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    218a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    218e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2192:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2194:	9e de       	rcall	.-708    	; 0x1ed2 <USB_Device_ProcessControlRequest>
    2196:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2198:	c0 93 e9 00 	sts	0x00E9, r28
    219c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    219e:	08 95       	ret

000021a0 <CDC_Device_ConfigureEndpoints>:
    21a0:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    21a2:	df 93       	push	r29
    21a4:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    21a6:	fc 01       	movw	r30, r24
    21a8:	70 96       	adiw	r30, 0x10	; 16
    21aa:	8b e0       	ldi	r24, 0x0B	; 11
    21ac:	df 01       	movw	r26, r30
    21ae:	1d 92       	st	X+, r1
    21b0:	8a 95       	dec	r24
    21b2:	e9 f7       	brne	.-6      	; 0x21ae <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    21b8:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	ce 01       	movw	r24, r28
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	e7 dc       	rcall	.-1586   	; 0x1b94 <Endpoint_ConfigureEndpointTable>
    21c6:	88 23       	and	r24, r24
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <CDC_Device_ConfigureEndpoints+0x42>
    21ca:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    21cc:	ce 01       	movw	r24, r28
    21ce:	06 96       	adiw	r24, 0x06	; 6
    21d0:	e1 dc       	rcall	.-1598   	; 0x1b94 <Endpoint_ConfigureEndpointTable>
    21d2:	88 23       	and	r24, r24
    21d4:	31 f0       	breq	.+12     	; 0x21e2 <CDC_Device_ConfigureEndpoints+0x42>
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    21da:	0b 96       	adiw	r24, 0x0b	; 11
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
	  return false;

	return true;
}
    21e0:	d9 cc       	rjmp	.-1614   	; 0x1b94 <Endpoint_ConfigureEndpointTable>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
	  return false;

	return true;
}
    21e8:	08 95       	ret

000021ea <CDC_Device_SendByte>:
    21ea:	cf 93       	push	r28
    21ec:	c6 2f       	mov	r28, r22
    21ee:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    21f0:	24 30       	cpi	r18, 0x04	; 4
    21f2:	f1 f4       	brne	.+60     	; 0x2230 <CDC_Device_SendByte+0x46>
    21f4:	fc 01       	movw	r30, r24
    21f6:	44 89       	ldd	r20, Z+20	; 0x14
    21f8:	55 89       	ldd	r21, Z+21	; 0x15
    21fa:	66 89       	ldd	r22, Z+22	; 0x16
    21fc:	77 89       	ldd	r23, Z+23	; 0x17
    21fe:	45 2b       	or	r20, r21
    2200:	46 2b       	or	r20, r22
    2202:	47 2b       	or	r20, r23
    2204:	a9 f0       	breq	.+42     	; 0x2230 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2206:	81 81       	ldd	r24, Z+1	; 0x01
    2208:	8f 70       	andi	r24, 0x0F	; 15
    220a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    220e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    2212:	85 ff       	sbrs	r24, 5
    2214:	04 c0       	rjmp	.+8      	; 0x221e <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2216:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	0a c0       	rjmp	.+20     	; 0x2232 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    221e:	80 91 e8 00 	lds	r24, 0x00E8
    2222:	8e 77       	andi	r24, 0x7E	; 126
    2224:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2228:	11 dd       	rcall	.-1502   	; 0x1c4c <Endpoint_WaitUntilReady>
    222a:	88 23       	and	r24, r24
    222c:	a1 f3       	breq	.-24     	; 0x2216 <CDC_Device_SendByte+0x2c>
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <CDC_Device_SendByte+0x48>
    2230:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2232:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2234:	08 95       	ret

00002236 <CDC_Device_Flush>:
    2236:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2238:	24 30       	cpi	r18, 0x04	; 4
    223a:	31 f5       	brne	.+76     	; 0x2288 <CDC_Device_Flush+0x52>
    223c:	fc 01       	movw	r30, r24
    223e:	44 89       	ldd	r20, Z+20	; 0x14
    2240:	55 89       	ldd	r21, Z+21	; 0x15
    2242:	66 89       	ldd	r22, Z+22	; 0x16
    2244:	77 89       	ldd	r23, Z+23	; 0x17
    2246:	45 2b       	or	r20, r21
    2248:	46 2b       	or	r20, r22
    224a:	47 2b       	or	r20, r23
    224c:	e9 f0       	breq	.+58     	; 0x2288 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    224e:	81 81       	ldd	r24, Z+1	; 0x01
    2250:	8f 70       	andi	r24, 0x0F	; 15
    2252:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2256:	80 91 f2 00 	lds	r24, 0x00F2
    225a:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    225e:	89 2b       	or	r24, r25
    2260:	89 f0       	breq	.+34     	; 0x2284 <CDC_Device_Flush+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2262:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2266:	80 91 e8 00 	lds	r24, 0x00E8
    226a:	8e 77       	andi	r24, 0x7E	; 126
    226c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2270:	95 fd       	sbrc	r25, 5
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <CDC_Device_Flush+0x4e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2274:	eb dc       	rcall	.-1578   	; 0x1c4c <Endpoint_WaitUntilReady>
    2276:	81 11       	cpse	r24, r1
    2278:	08 c0       	rjmp	.+16     	; 0x228a <CDC_Device_Flush+0x54>
    227a:	80 91 e8 00 	lds	r24, 0x00E8
    227e:	8e 77       	andi	r24, 0x7E	; 126
    2280:	80 93 e8 00 	sts	0x00E8, r24
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	08 95       	ret
    2288:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    228a:	08 95       	ret

0000228c <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    228c:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    228e:	24 30       	cpi	r18, 0x04	; 4
    2290:	89 f4       	brne	.+34     	; 0x22b4 <CDC_Device_USBTask+0x28>
    2292:	fc 01       	movw	r30, r24
    2294:	44 89       	ldd	r20, Z+20	; 0x14
    2296:	55 89       	ldd	r21, Z+21	; 0x15
    2298:	66 89       	ldd	r22, Z+22	; 0x16
    229a:	77 89       	ldd	r23, Z+23	; 0x17
    229c:	45 2b       	or	r20, r21
    229e:	46 2b       	or	r20, r22
    22a0:	47 2b       	or	r20, r23
    22a2:	41 f0       	breq	.+16     	; 0x22b4 <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22a4:	21 81       	ldd	r18, Z+1	; 0x01
    22a6:	2f 70       	andi	r18, 0x0F	; 15
    22a8:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22ac:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    22b0:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    22b2:	c1 cf       	rjmp	.-126    	; 0x2236 <CDC_Device_Flush>
    22b4:	08 95       	ret

000022b6 <CDC_Device_ReceiveByte>:
    22b6:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    22b8:	24 30       	cpi	r18, 0x04	; 4
    22ba:	19 f0       	breq	.+6      	; 0x22c2 <CDC_Device_ReceiveByte+0xc>
	  return -1;
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	9f ef       	ldi	r25, 0xFF	; 255
    22c0:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    22c2:	fc 01       	movw	r30, r24
    22c4:	44 89       	ldd	r20, Z+20	; 0x14
    22c6:	55 89       	ldd	r21, Z+21	; 0x15
    22c8:	66 89       	ldd	r22, Z+22	; 0x16
    22ca:	77 89       	ldd	r23, Z+23	; 0x17
    22cc:	45 2b       	or	r20, r21
    22ce:	46 2b       	or	r20, r22
    22d0:	47 2b       	or	r20, r23
    22d2:	a1 f3       	breq	.-24     	; 0x22bc <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22d4:	86 81       	ldd	r24, Z+6	; 0x06
    22d6:	8f 70       	andi	r24, 0x0F	; 15
    22d8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22dc:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    22e0:	82 ff       	sbrs	r24, 2
    22e2:	ec cf       	rjmp	.-40     	; 0x22bc <CDC_Device_ReceiveByte+0x6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    22e4:	80 91 f2 00 	lds	r24, 0x00F2
    22e8:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    22ec:	89 2b       	or	r24, r25
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22f0:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <CDC_Device_ReceiveByte+0x46>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    22f8:	2f ef       	ldi	r18, 0xFF	; 255
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    22fc:	80 91 f2 00 	lds	r24, 0x00F2
    2300:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2304:	89 2b       	or	r24, r25
    2306:	29 f4       	brne	.+10     	; 0x2312 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2308:	80 91 e8 00 	lds	r24, 0x00E8
    230c:	8b 77       	andi	r24, 0x7B	; 123
    230e:	80 93 e8 00 	sts	0x00E8, r24
    2312:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    2314:	08 95       	ret

00002316 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    2316:	08 95       	ret

00002318 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    231e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2322:	83 ff       	sbrs	r24, 3
    2324:	a6 c0       	rjmp	.+332    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2326:	88 81       	ld	r24, Y
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	20 91 e4 02 	lds	r18, 0x02E4
    232e:	30 91 e5 02 	lds	r19, 0x02E5
    2332:	28 17       	cp	r18, r24
    2334:	39 07       	cpc	r19, r25
    2336:	09 f0       	breq	.+2      	; 0x233a <CDC_Device_ProcessControlRequest+0x22>
    2338:	9c c0       	rjmp	.+312    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    233a:	80 91 e1 02 	lds	r24, 0x02E1
    233e:	81 32       	cpi	r24, 0x21	; 33
    2340:	61 f0       	breq	.+24     	; 0x235a <CDC_Device_ProcessControlRequest+0x42>
    2342:	20 f4       	brcc	.+8      	; 0x234c <CDC_Device_ProcessControlRequest+0x34>
    2344:	80 32       	cpi	r24, 0x20	; 32
    2346:	09 f4       	brne	.+2      	; 0x234a <CDC_Device_ProcessControlRequest+0x32>
    2348:	3e c0       	rjmp	.+124    	; 0x23c6 <CDC_Device_ProcessControlRequest+0xae>
    234a:	93 c0       	rjmp	.+294    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
    234c:	82 32       	cpi	r24, 0x22	; 34
    234e:	09 f4       	brne	.+2      	; 0x2352 <CDC_Device_ProcessControlRequest+0x3a>
    2350:	6c c0       	rjmp	.+216    	; 0x242a <CDC_Device_ProcessControlRequest+0x112>
    2352:	83 32       	cpi	r24, 0x23	; 35
    2354:	09 f4       	brne	.+2      	; 0x2358 <CDC_Device_ProcessControlRequest+0x40>
    2356:	7d c0       	rjmp	.+250    	; 0x2452 <CDC_Device_ProcessControlRequest+0x13a>
    2358:	8c c0       	rjmp	.+280    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    235a:	80 91 e0 02 	lds	r24, 0x02E0
    235e:	81 3a       	cpi	r24, 0xA1	; 161
    2360:	09 f0       	breq	.+2      	; 0x2364 <CDC_Device_ProcessControlRequest+0x4c>
    2362:	87 c0       	rjmp	.+270    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2364:	80 91 e8 00 	lds	r24, 0x00E8
    2368:	87 7f       	andi	r24, 0xF7	; 247
    236a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    236e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2372:	80 ff       	sbrs	r24, 0
    2374:	fc cf       	rjmp	.-8      	; 0x236e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    2376:	4c 89       	ldd	r20, Y+20	; 0x14
    2378:	5d 89       	ldd	r21, Y+21	; 0x15
    237a:	6e 89       	ldd	r22, Y+22	; 0x16
    237c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    237e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    2382:	bb 27       	eor	r27, r27
    2384:	a7 2f       	mov	r26, r23
    2386:	96 2f       	mov	r25, r22
    2388:	85 2f       	mov	r24, r21
    238a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    238e:	cb 01       	movw	r24, r22
    2390:	aa 27       	eor	r26, r26
    2392:	bb 27       	eor	r27, r27
    2394:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    2398:	47 2f       	mov	r20, r23
    239a:	55 27       	eor	r21, r21
    239c:	66 27       	eor	r22, r22
    239e:	77 27       	eor	r23, r23
    23a0:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    23a4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23a6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    23aa:	89 8d       	ldd	r24, Y+25	; 0x19
    23ac:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    23b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23b6:	80 91 e8 00 	lds	r24, 0x00E8
    23ba:	8e 77       	andi	r24, 0x7E	; 126
    23bc:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    23c4:	24 cc       	rjmp	.-1976   	; 0x1c0e <Endpoint_ClearStatusStage>
    23c6:	80 91 e0 02 	lds	r24, 0x02E0
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    23ca:	81 32       	cpi	r24, 0x21	; 33
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <CDC_Device_ProcessControlRequest+0xb8>
    23ce:	51 c0       	rjmp	.+162    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
    23d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23d4:	87 7f       	andi	r24, 0xF7	; 247
    23d6:	80 93 e8 00 	sts	0x00E8, r24
    23da:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23de:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <CDC_Device_ProcessControlRequest+0xd2>
    23e2:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    23e4:	81 11       	cpse	r24, r1
    23e6:	f9 cf       	rjmp	.-14     	; 0x23da <CDC_Device_ProcessControlRequest+0xc2>
    23e8:	44 c0       	rjmp	.+136    	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
    23ea:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    23ee:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    23f2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    23f6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    23fa:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    23fc:	2d 8b       	std	Y+21, r18	; 0x15
    23fe:	9e 8b       	std	Y+22, r25	; 0x16
    2400:	8f 8b       	std	Y+23, r24	; 0x17
    2402:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2406:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2408:	80 91 f1 00 	lds	r24, 0x00F1
    240c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    240e:	80 91 f1 00 	lds	r24, 0x00F1
    2412:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2414:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2418:	8b 77       	andi	r24, 0x7B	; 123
    241a:	80 93 e8 00 	sts	0x00E8, r24
    241e:	f7 db       	rcall	.-2066   	; 0x1c0e <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2420:	ce 01       	movw	r24, r28
    2422:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2424:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2426:	0c 94 04 02 	jmp	0x408	; 0x408 <EVENT_CDC_Device_LineEncodingChanged>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    242a:	80 91 e0 02 	lds	r24, 0x02E0
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    242e:	81 32       	cpi	r24, 0x21	; 33
    2430:	01 f5       	brne	.+64     	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
    2432:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2436:	87 7f       	andi	r24, 0xF7	; 247
    2438:	80 93 e8 00 	sts	0x00E8, r24
    243c:	e8 db       	rcall	.-2096   	; 0x1c0e <Endpoint_ClearStatusStage>
    243e:	80 91 e2 02 	lds	r24, 0x02E2
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2442:	90 91 e3 02 	lds	r25, 0x02E3

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2446:	99 8b       	std	Y+17, r25	; 0x11
    2448:	88 8b       	std	Y+16, r24	; 0x10
    244a:	ce 01       	movw	r24, r28
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2450:	62 cf       	rjmp	.-316    	; 0x2316 <CDC_Device_Event_Stub>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2452:	80 91 e0 02 	lds	r24, 0x02E0
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2456:	81 32       	cpi	r24, 0x21	; 33
    2458:	61 f4       	brne	.+24     	; 0x2472 <CDC_Device_ProcessControlRequest+0x15a>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    245a:	80 91 e8 00 	lds	r24, 0x00E8
    245e:	87 7f       	andi	r24, 0xF7	; 247
    2460:	80 93 e8 00 	sts	0x00E8, r24
    2464:	d4 db       	rcall	.-2136   	; 0x1c0e <Endpoint_ClearStatusStage>
    2466:	60 91 e2 02 	lds	r22, 0x02E2
    246a:	ce 01       	movw	r24, r28
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2470:	52 cf       	rjmp	.-348    	; 0x2316 <CDC_Device_Event_Stub>
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
			}

			break;
	}
}
    2476:	08 95       	ret

00002478 <__udivmodsi4>:
    2478:	a1 e2       	ldi	r26, 0x21	; 33
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    247a:	1a 2e       	mov	r1, r26
    247c:	aa 1b       	sub	r26, r26
			}

			break;
	}
}
    247e:	bb 1b       	sub	r27, r27
    2480:	fd 01       	movw	r30, r26
    2482:	0d c0       	rjmp	.+26     	; 0x249e <__udivmodsi4_ep>

00002484 <__udivmodsi4_loop>:
    2484:	aa 1f       	adc	r26, r26
    2486:	bb 1f       	adc	r27, r27
    2488:	ee 1f       	adc	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	a2 17       	cp	r26, r18
    248e:	b3 07       	cpc	r27, r19
    2490:	e4 07       	cpc	r30, r20
    2492:	f5 07       	cpc	r31, r21
    2494:	20 f0       	brcs	.+8      	; 0x249e <__udivmodsi4_ep>
    2496:	a2 1b       	sub	r26, r18
    2498:	b3 0b       	sbc	r27, r19
    249a:	e4 0b       	sbc	r30, r20
    249c:	f5 0b       	sbc	r31, r21

0000249e <__udivmodsi4_ep>:
    249e:	66 1f       	adc	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	1a 94       	dec	r1
    24a8:	69 f7       	brne	.-38     	; 0x2484 <__udivmodsi4_loop>
    24aa:	60 95       	com	r22
    24ac:	70 95       	com	r23
    24ae:	80 95       	com	r24
    24b0:	90 95       	com	r25
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	bd 01       	movw	r22, r26
    24b8:	cf 01       	movw	r24, r30
    24ba:	08 95       	ret

000024bc <__eerd_byte_usb1287>:
    24bc:	f9 99       	sbic	0x1f, 1	; 31
    24be:	fe cf       	rjmp	.-4      	; 0x24bc <__eerd_byte_usb1287>
    24c0:	92 bd       	out	0x22, r25	; 34
    24c2:	81 bd       	out	0x21, r24	; 33
    24c4:	f8 9a       	sbi	0x1f, 0	; 31
    24c6:	99 27       	eor	r25, r25
    24c8:	80 b5       	in	r24, 0x20	; 32
    24ca:	08 95       	ret

000024cc <__eeupd_byte_usb1287>:
    24cc:	26 2f       	mov	r18, r22

000024ce <__eeupd_r18_usb1287>:
    24ce:	f9 99       	sbic	0x1f, 1	; 31
    24d0:	fe cf       	rjmp	.-4      	; 0x24ce <__eeupd_r18_usb1287>
    24d2:	92 bd       	out	0x22, r25	; 34
    24d4:	81 bd       	out	0x21, r24	; 33
    24d6:	f8 9a       	sbi	0x1f, 0	; 31
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	00 b4       	in	r0, 0x20	; 32
    24dc:	02 16       	cp	r0, r18
    24de:	39 f0       	breq	.+14     	; 0x24ee <__eeupd_r18_usb1287+0x20>
    24e0:	1f ba       	out	0x1f, r1	; 31
    24e2:	20 bd       	out	0x20, r18	; 32
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	fa 9a       	sbi	0x1f, 2	; 31
    24ea:	f9 9a       	sbi	0x1f, 1	; 31
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	08 95       	ret

000024f0 <_exit>:
    24f0:	f8 94       	cli

000024f2 <__stop_program>:
    24f2:	ff cf       	rjmp	.-2      	; 0x24f2 <__stop_program>


MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000175c  000017f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  00001834  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002157  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007f1e  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b9b  00000000  00000000  0000a456  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002f93  00000000  00000000  0000bff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b24  00000000  00000000  0000ef84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002a9c  00000000  00000000  0000faa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004c68  00000000  00000000  00012544  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  000171ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_10>
      2c:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000c8 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

00000106 <DeviceDescriptor>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec e5       	ldi	r30, 0x5C	; 92
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     12c:	f7 e1       	ldi	r31, 0x17	; 23
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	a4 34       	cpi	r26, 0x44	; 68
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a4 e4       	ldi	r26, 0x44	; 68
     142:	b1 e0       	ldi	r27, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
				ReportData     += 4;
     148:	a1 37       	cpi	r26, 0x71	; 113
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
				break;
     14e:	76 d1       	rcall	.+748    	; 0x43c <main>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
     156:	9b b1       	in	r25, 0x0b	; 11
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	98 2b       	or	r25, r24
     15c:	9b b9       	out	0x0b, r25	; 11
     15e:	08 95       	ret

00000160 <SetupHardware>:
     160:	84 b7       	in	r24, 0x34	; 52
				ReportSize     -= 2;
     162:	87 7f       	andi	r24, 0xF7	; 247
     164:	84 bf       	out	0x34, r24	; 52
				ReportData     += 2;
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
				break;
     16c:	80 93 60 00 	sts	0x0060, r24

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	10 92 60 00 	sts	0x0060, r1
     174:	0f be       	out	0x3f, r0	; 63
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 e8       	ldi	r24, 0x80	; 128
				ReportSize     -= 1;
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
				ReportData     += 1;
     17e:	80 93 61 00 	sts	0x0061, r24
     182:	90 93 61 00 	sts	0x0061, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	0f be       	out	0x3f, r0	; 63
     188:	8a b1       	in	r24, 0x0a	; 10
     18a:	80 6f       	ori	r24, 0xF0	; 240
     18c:	8a b9       	out	0x0a, r24	; 10
     18e:	8b b1       	in	r24, 0x0b	; 11
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	8b b9       	out	0x0b, r24	; 11
     194:	8d b1       	in	r24, 0x0d	; 13
     196:	83 60       	ori	r24, 0x03	; 3
     198:	8d b9       	out	0x0d, r24	; 13
     19a:	8e b1       	in	r24, 0x0e	; 14
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	8e b9       	out	0x0e, r24	; 14
     1a0:	20 9a       	sbi	0x04, 0	; 4
     1a2:	28 9a       	sbi	0x05, 0	; 5
     1a4:	84 b1       	in	r24, 0x04	; 4
     1a6:	86 60       	ori	r24, 0x06	; 6
     1a8:	84 b9       	out	0x04, r24	; 4

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	23 98       	cbi	0x04, 3	; 4
     1ac:	2b 9a       	sbi	0x05, 3	; 5
     1ae:	8d b5       	in	r24, 0x2d	; 45
     1b0:	81 60       	ori	r24, 0x01	; 1
     1b2:	8d bd       	out	0x2d, r24	; 45
				break;
     1b4:	20 98       	cbi	0x04, 0	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	8c e5       	ldi	r24, 0x5C	; 92
     1b8:	8c bd       	out	0x2c, r24	; 44
     1ba:	0e 94 10 09 	call	0x1220	; 0x1220 <USB_Init>
     1be:	52 d4       	rcall	.+2212   	; 0xa64 <DataflashManager_CheckDataflashOperation>
     1c0:	81 11       	cpse	r24, r1
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <SetupHardware+0x6a>
     1c4:	80 e9       	ldi	r24, 0x90	; 144
     1c6:	c7 df       	rcall	.-114    	; 0x156 <LEDs_SetAllLEDs>
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <SetupHardware+0x68>
     1ca:	fb c3       	rjmp	.+2038   	; 0x9c2 <DataflashManager_ResetDataflashProtections>

000001cc <EVENT_USB_Device_Connect>:
     1cc:	80 ea       	ldi	r24, 0xA0	; 160
     1ce:	c3 df       	rcall	.-122    	; 0x156 <LEDs_SetAllLEDs>
     1d0:	10 92 44 01 	sts	0x0144, r1
     1d4:	08 95       	ret

000001d6 <EVENT_USB_Device_Disconnect>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	80 e1       	ldi	r24, 0x10	; 16
     1d8:	be cf       	rjmp	.-132    	; 0x156 <LEDs_SetAllLEDs>

000001da <EVENT_USB_Device_ConfigurationChanged>:
     1da:	cf 93       	push	r28
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	42 e3       	ldi	r20, 0x32	; 50
     1de:	61 e8       	ldi	r22, 0x81	; 129
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	53 d7       	rcall	.+3750   	; 0x108a <Endpoint_ConfigureEndpoint_Prv>
     1e4:	c8 2f       	mov	r28, r24
     1e6:	42 e3       	ldi	r20, 0x32	; 50
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	60 e8       	ldi	r22, 0x80	; 128
     1ea:	84 e0       	ldi	r24, 0x04	; 4
				break;
     1ec:	4e d7       	rcall	.+3740   	; 0x108a <Endpoint_ConfigureEndpoint_Prv>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	88 23       	and	r24, r24
     1f0:	21 f0       	breq	.+8      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x20>
     1f2:	cc 23       	and	r28, r28
     1f4:	11 f0       	breq	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x20>
     1f6:	80 e6       	ldi	r24, 0x60	; 96
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x22>
     1fa:	80 e9       	ldi	r24, 0x90	; 144
     1fc:	cf 91       	pop	r28
     1fe:	ab cf       	rjmp	.-170    	; 0x156 <LEDs_SetAllLEDs>

00000200 <EVENT_USB_Device_ControlRequest>:
     200:	80 91 6a 01 	lds	r24, 0x016A
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     204:	8e 3f       	cpi	r24, 0xFE	; 254
				break;
     206:	81 f0       	breq	.+32     	; 0x228 <EVENT_USB_Device_ControlRequest+0x28>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	8f 3f       	cpi	r24, 0xFF	; 255
     20a:	f9 f4       	brne	.+62     	; 0x24a <EVENT_USB_Device_ControlRequest+0x4a>
     20c:	80 91 69 01 	lds	r24, 0x0169
     210:	81 32       	cpi	r24, 0x21	; 33
     212:	d9 f4       	brne	.+54     	; 0x24a <EVENT_USB_Device_ControlRequest+0x4a>
     214:	80 91 e8 00 	lds	r24, 0x00E8
     218:	87 7f       	andi	r24, 0xF7	; 247
     21a:	80 93 e8 00 	sts	0x00E8, r24
     21e:	6a d7       	rcall	.+3796   	; 0x10f4 <Endpoint_ClearStatusStage>
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	80 93 44 01 	sts	0x0144, r24
     226:	08 95       	ret
     228:	80 91 69 01 	lds	r24, 0x0169
     22c:	81 3a       	cpi	r24, 0xA1	; 161
     22e:	69 f4       	brne	.+26     	; 0x24a <EVENT_USB_Device_ControlRequest+0x4a>
     230:	80 91 e8 00 	lds	r24, 0x00E8
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	87 7f       	andi	r24, 0xF7	; 247
     236:	80 93 e8 00 	sts	0x00E8, r24
     23a:	10 92 f1 00 	sts	0x00F1, r1
     23e:	80 91 e8 00 	lds	r24, 0x00E8
     242:	8e 77       	andi	r24, 0x7E	; 126
     244:	80 93 e8 00 	sts	0x00E8, r24
     248:	55 c7       	rjmp	.+3754   	; 0x10f4 <Endpoint_ClearStatusStage>
     24a:	08 95       	ret

0000024c <MassStorage_Task>:
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	00 d0       	rcall	.+0      	; 0x252 <MassStorage_Task+0x6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	80 91 68 01 	lds	r24, 0x0168
     25a:	84 30       	cpi	r24, 0x04	; 4
     25c:	09 f0       	breq	.+2      	; 0x260 <MassStorage_Task+0x14>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	e9 c0       	rjmp	.+466    	; 0x432 <MassStorage_Task+0x1e6>
     260:	80 93 e9 00 	sts	0x00E9, r24
     264:	80 91 e8 00 	lds	r24, 0x00E8
     268:	82 ff       	sbrs	r24, 2
     26a:	b9 c0       	rjmp	.+370    	; 0x3de <MassStorage_Task+0x192>
     26c:	1a 82       	std	Y+2, r1	; 0x02
     26e:	19 82       	std	Y+1, r1	; 0x01
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	ae 01       	movw	r20, r28
				break;
     272:	4f 5f       	subi	r20, 0xFF	; 255

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	5f 4f       	sbci	r21, 0xFF	; 255
     276:	6f e0       	ldi	r22, 0x0F	; 15
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	85 e4       	ldi	r24, 0x45	; 69
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	01 d6       	rcall	.+3074   	; 0xe82 <Endpoint_Read_Stream_LE>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	29 f4       	brne	.+10     	; 0x28e <MassStorage_Task+0x42>
				break;
     284:	80 91 44 01 	lds	r24, 0x0144

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     288:	88 23       	and	r24, r24
     28a:	91 f3       	breq	.-28     	; 0x270 <MassStorage_Task+0x24>
     28c:	a8 c0       	rjmp	.+336    	; 0x3de <MassStorage_Task+0x192>
     28e:	80 91 45 01 	lds	r24, 0x0145
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	90 91 46 01 	lds	r25, 0x0146
     296:	a0 91 47 01 	lds	r26, 0x0147
     29a:	b0 91 48 01 	lds	r27, 0x0148
     29e:	85 35       	cpi	r24, 0x55	; 85
				break;
     2a0:	93 45       	sbci	r25, 0x53	; 83

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	a2 44       	sbci	r26, 0x42	; 66
     2a4:	b3 44       	sbci	r27, 0x43	; 67
     2a6:	69 f4       	brne	.+26     	; 0x2c2 <MassStorage_Task+0x76>
     2a8:	80 91 52 01 	lds	r24, 0x0152
				break;
     2ac:	81 11       	cpse	r24, r1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <MassStorage_Task+0x76>
     2b0:	80 91 51 01 	lds	r24, 0x0151
     2b4:	8f 71       	andi	r24, 0x1F	; 31
     2b6:	29 f4       	brne	.+10     	; 0x2c2 <MassStorage_Task+0x76>
     2b8:	80 91 53 01 	lds	r24, 0x0153
				break;
     2bc:	81 50       	subi	r24, 0x01	; 1
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	80 31       	cpi	r24, 0x10	; 16
     2c0:	70 f0       	brcs	.+28     	; 0x2de <MassStorage_Task+0x92>
     2c2:	80 91 eb 00 	lds	r24, 0x00EB
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	80 93 eb 00 	sts	0x00EB, r24
				break;
     2cc:	83 e0       	ldi	r24, 0x03	; 3
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	80 93 e9 00 	sts	0x00E9, r24
     2d2:	80 91 eb 00 	lds	r24, 0x00EB
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 62       	ori	r24, 0x20	; 32
     2d8:	80 93 eb 00 	sts	0x00EB, r24

				if (ParserData->UsingReportIDs)
     2dc:	80 c0       	rjmp	.+256    	; 0x3de <MassStorage_Task+0x192>
     2de:	1a 82       	std	Y+2, r1	; 0x02
     2e0:	19 82       	std	Y+1, r1	; 0x01
     2e2:	60 91 53 01 	lds	r22, 0x0153
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	ae 01       	movw	r20, r28
     2ea:	4f 5f       	subi	r20, 0xFF	; 255
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	5f 4f       	sbci	r21, 0xFF	; 255
     2ee:	84 e5       	ldi	r24, 0x54	; 84
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	c7 d5       	rcall	.+2958   	; 0xe82 <Endpoint_Read_Stream_LE>
     2f4:	85 30       	cpi	r24, 0x05	; 5
     2f6:	29 f4       	brne	.+10     	; 0x302 <MassStorage_Task+0xb6>
     2f8:	80 91 44 01 	lds	r24, 0x0144
     2fc:	88 23       	and	r24, r24
     2fe:	89 f3       	breq	.-30     	; 0x2e2 <MassStorage_Task+0x96>
     300:	6e c0       	rjmp	.+220    	; 0x3de <MassStorage_Task+0x192>
     302:	80 91 e8 00 	lds	r24, 0x00E8
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     306:	8b 77       	andi	r24, 0x7B	; 123
     308:	80 93 e8 00 	sts	0x00E8, r24
     30c:	80 e2       	ldi	r24, 0x20	; 32
     30e:	23 df       	rcall	.-442    	; 0x156 <LEDs_SetAllLEDs>
     310:	80 91 51 01 	lds	r24, 0x0151
     314:	87 ff       	sbrs	r24, 7
     316:	03 c0       	rjmp	.+6      	; 0x31e <MassStorage_Task+0xd2>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	80 93 e9 00 	sts	0x00E9, r24
     31e:	17 d4       	rcall	.+2094   	; 0xb4e <SCSI_DecodeSCSICommand>
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	98 27       	eor	r25, r24
     324:	90 93 0c 01 	sts	0x010C, r25
     328:	40 91 49 01 	lds	r20, 0x0149
     32c:	50 91 4a 01 	lds	r21, 0x014A
     330:	60 91 4b 01 	lds	r22, 0x014B
     334:	70 91 4c 01 	lds	r23, 0x014C
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	40 93 04 01 	sts	0x0104, r20
     33c:	50 93 05 01 	sts	0x0105, r21
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     340:	60 93 06 01 	sts	0x0106, r22
     344:	70 93 07 01 	sts	0x0107, r23
     348:	40 91 4d 01 	lds	r20, 0x014D
     34c:	50 91 4e 01 	lds	r21, 0x014E
     350:	60 91 4f 01 	lds	r22, 0x014F
     354:	70 91 50 01 	lds	r23, 0x0150
     358:	40 93 08 01 	sts	0x0108, r20
     35c:	50 93 09 01 	sts	0x0109, r21
     360:	60 93 0a 01 	sts	0x010A, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	70 93 0b 01 	sts	0x010B, r23
     368:	91 30       	cpi	r25, 0x01	; 1
     36a:	49 f4       	brne	.+18     	; 0x37e <MassStorage_Task+0x132>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	45 2b       	or	r20, r21
     36e:	46 2b       	or	r20, r22
     370:	47 2b       	or	r20, r23
     372:	29 f0       	breq	.+10     	; 0x37e <MassStorage_Task+0x132>
     374:	80 91 eb 00 	lds	r24, 0x00EB

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 93 eb 00 	sts	0x00EB, r24
     37e:	84 e0       	ldi	r24, 0x04	; 4
     380:	80 93 e9 00 	sts	0x00E9, r24
     384:	80 91 eb 00 	lds	r24, 0x00EB
				break;
     388:	85 ff       	sbrs	r24, 5

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	05 c0       	rjmp	.+10     	; 0x396 <MassStorage_Task+0x14a>
     38c:	80 91 44 01 	lds	r24, 0x0144
     390:	88 23       	and	r24, r24
     392:	c1 f3       	breq	.-16     	; 0x384 <MassStorage_Task+0x138>
     394:	22 c0       	rjmp	.+68     	; 0x3da <MassStorage_Task+0x18e>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	80 93 e9 00 	sts	0x00E9, r24
     39c:	80 91 eb 00 	lds	r24, 0x00EB
     3a0:	85 ff       	sbrs	r24, 5
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <MassStorage_Task+0x162>
     3a4:	80 91 44 01 	lds	r24, 0x0144
     3a8:	88 23       	and	r24, r24
     3aa:	c1 f3       	breq	.-16     	; 0x39c <MassStorage_Task+0x150>
     3ac:	16 c0       	rjmp	.+44     	; 0x3da <MassStorage_Task+0x18e>
     3ae:	1a 82       	std	Y+2, r1	; 0x02
				break;
     3b0:	19 82       	std	Y+1, r1	; 0x01
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	ae 01       	movw	r20, r28
     3b4:	4f 5f       	subi	r20, 0xFF	; 255
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	6d e0       	ldi	r22, 0x0D	; 13
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	19 d5       	rcall	.+2610   	; 0xdf4 <Endpoint_Write_Stream_LE>
     3c2:	85 30       	cpi	r24, 0x05	; 5
     3c4:	29 f4       	brne	.+10     	; 0x3d0 <MassStorage_Task+0x184>
     3c6:	80 91 44 01 	lds	r24, 0x0144
     3ca:	88 23       	and	r24, r24
     3cc:	91 f3       	breq	.-28     	; 0x3b2 <MassStorage_Task+0x166>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <MassStorage_Task+0x18e>
     3d0:	80 91 e8 00 	lds	r24, 0x00E8

					while (CurrCollectionPath->Parent != NULL)
     3d4:	8e 77       	andi	r24, 0x7E	; 126
     3d6:	80 93 e8 00 	sts	0x00E8, r24
     3da:	80 e6       	ldi	r24, 0x60	; 96
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	bc de       	rcall	.-648    	; 0x156 <LEDs_SetAllLEDs>
     3de:	80 91 44 01 	lds	r24, 0x0144
     3e2:	88 23       	and	r24, r24
     3e4:	31 f1       	breq	.+76     	; 0x432 <MassStorage_Task+0x1e6>
     3e6:	80 e1       	ldi	r24, 0x10	; 16
     3e8:	80 93 ea 00 	sts	0x00EA, r24
     3ec:	10 92 ea 00 	sts	0x00EA, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	88 e0       	ldi	r24, 0x08	; 8
     3f2:	80 93 ea 00 	sts	0x00EA, r24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f6:	10 92 ea 00 	sts	0x00EA, r1
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	80 93 e9 00 	sts	0x00E9, r24
     400:	80 91 eb 00 	lds	r24, 0x00EB
     404:	80 61       	ori	r24, 0x10	; 16
     406:	80 93 eb 00 	sts	0x00EB, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     40a:	80 91 eb 00 	lds	r24, 0x00EB
     40e:	88 60       	ori	r24, 0x08	; 8
     410:	80 93 eb 00 	sts	0x00EB, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	80 93 e9 00 	sts	0x00E9, r24
     41a:	80 91 eb 00 	lds	r24, 0x00EB
     41e:	80 61       	ori	r24, 0x10	; 16

				if (UsageListSize)
     420:	80 93 eb 00 	sts	0x00EB, r24
     424:	80 91 eb 00 	lds	r24, 0x00EB
     428:	88 60       	ori	r24, 0x08	; 8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	80 93 eb 00 	sts	0x00EB, r24
     42e:	10 92 44 01 	sts	0x0144, r1
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <main>:
     43c:	91 de       	rcall	.-734    	; 0x160 <SetupHardware>
     43e:	80 e1       	ldi	r24, 0x10	; 16

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	8a de       	rcall	.-748    	; 0x156 <LEDs_SetAllLEDs>
     442:	78 94       	sei
     444:	03 df       	rcall	.-506    	; 0x24c <MassStorage_Task>
     446:	0e 94 90 0b 	call	0x1720	; 0x1720 <USB_USBTask>
     44a:	fc cf       	rjmp	.-8      	; 0x444 <main+0x8>

0000044c <CALLBACK_USB_GetDescriptor>:
					  UsageList[i - 1] = UsageList[i];
     44c:	29 2f       	mov	r18, r25
     44e:	33 27       	eor	r19, r19
     450:	22 30       	cpi	r18, 0x02	; 2
     452:	31 05       	cpc	r19, r1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	59 f0       	breq	.+22     	; 0x46c <CALLBACK_USB_GetDescriptor+0x20>
     456:	23 30       	cpi	r18, 0x03	; 3
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	31 05       	cpc	r19, r1
     45a:	69 f0       	breq	.+26     	; 0x476 <CALLBACK_USB_GetDescriptor+0x2a>
     45c:	21 30       	cpi	r18, 0x01	; 1
     45e:	31 05       	cpc	r19, r1
     460:	f9 f4       	brne	.+62     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x54>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	82 e1       	ldi	r24, 0x12	; 18
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	26 e0       	ldi	r18, 0x06	; 6
     468:	31 e0       	ldi	r19, 0x01	; 1
     46a:	1e c0       	rjmp	.+60     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x5c>
     46c:	80 e2       	ldi	r24, 0x20	; 32
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	26 ee       	ldi	r18, 0xE6	; 230
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	19 c0       	rjmp	.+50     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x5c>
     476:	99 27       	eor	r25, r25
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	41 f0       	breq	.+16     	; 0x48e <CALLBACK_USB_GetDescriptor+0x42>
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	41 f0       	breq	.+16     	; 0x494 <CALLBACK_USB_GetDescriptor+0x48>
     484:	89 2b       	or	r24, r25
     486:	61 f4       	brne	.+24     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x54>
     488:	e2 ee       	ldi	r30, 0xE2	; 226
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	05 c0       	rjmp	.+10     	; 0x498 <CALLBACK_USB_GetDescriptor+0x4c>
     48e:	e8 ec       	ldi	r30, 0xC8	; 200
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	02 c0       	rjmp	.+4      	; 0x498 <CALLBACK_USB_GetDescriptor+0x4c>
     494:	e8 e9       	ldi	r30, 0x98	; 152
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	84 91       	lpm	r24, Z
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9f 01       	movw	r18, r30
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x5c>
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	fa 01       	movw	r30, r20
     4aa:	31 83       	std	Z+1, r19	; 0x01
				break;
     4ac:	20 83       	st	Z, r18
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	08 95       	ret

000004b0 <Dataflash_ToggleSelectedChipCS>:
     4b0:	8e b1       	in	r24, 0x0e	; 14
     4b2:	9e b1       	in	r25, 0x0e	; 14
     4b4:	93 60       	ori	r25, 0x03	; 3
     4b6:	9e b9       	out	0x0e, r25	; 14
     4b8:	9e b1       	in	r25, 0x0e	; 14
     4ba:	8c 6f       	ori	r24, 0xFC	; 252
     4bc:	93 60       	ori	r25, 0x03	; 3
     4be:	89 23       	and	r24, r25
     4c0:	8e b9       	out	0x0e, r24	; 14
     4c2:	08 95       	ret

000004c4 <Dataflash_WaitWhileBusy>:
     4c4:	f5 df       	rcall	.-22     	; 0x4b0 <Dataflash_ToggleSelectedChipCS>
     4c6:	87 ed       	ldi	r24, 0xD7	; 215
     4c8:	8e bd       	out	0x2e, r24	; 46
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <Dataflash_WaitWhileBusy+0x6>
     4d0:	1e bc       	out	0x2e, r1	; 46
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <Dataflash_WaitWhileBusy+0xe>
     4d8:	0e b4       	in	r0, 0x2e	; 46
     4da:	07 fe       	sbrs	r0, 7
     4dc:	f9 cf       	rjmp	.-14     	; 0x4d0 <Dataflash_WaitWhileBusy+0xc>
     4de:	e8 cf       	rjmp	.-48     	; 0x4b0 <Dataflash_ToggleSelectedChipCS>

000004e0 <Dataflash_SendAddressBytes>:
     4e0:	9c 01       	movw	r18, r24
     4e2:	36 95       	lsr	r19
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	27 95       	ror	r18
     4e6:	56 e0       	ldi	r21, 0x06	; 6
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	5a 95       	dec	r21
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <Dataflash_SendAddressBytes+0x8>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	8e bd       	out	0x2e, r24	; 46
     4f2:	0d b4       	in	r0, 0x2d	; 45
     4f4:	07 fe       	sbrs	r0, 7
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <Dataflash_SendAddressBytes+0x12>
     4f8:	22 0f       	add	r18, r18
     4fa:	22 0f       	add	r18, r18
     4fc:	22 0f       	add	r18, r18
     4fe:	27 2b       	or	r18, r23
     500:	2e bd       	out	0x2e, r18	; 46
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	fd cf       	rjmp	.-6      	; 0x502 <Dataflash_SendAddressBytes+0x22>
     508:	6e bd       	out	0x2e, r22	; 46
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <Dataflash_SendAddressBytes+0x2a>
     510:	08 95       	ret

00000512 <Dataflash_SelectChipFromPage>:
     512:	2e b1       	in	r18, 0x0e	; 14
     514:	23 60       	ori	r18, 0x03	; 3
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	2e b9       	out	0x0e, r18	; 14
     518:	81 15       	cp	r24, r1
     51a:	20 e4       	ldi	r18, 0x40	; 64
     51c:	92 07       	cpc	r25, r18

					if (UsageListSize)
     51e:	50 f4       	brcc	.+20     	; 0x534 <Dataflash_SelectChipFromPage+0x22>
     520:	80 ff       	sbrs	r24, 0
     522:	04 c0       	rjmp	.+8      	; 0x52c <Dataflash_SelectChipFromPage+0x1a>
     524:	8e b1       	in	r24, 0x0e	; 14
     526:	83 60       	ori	r24, 0x03	; 3
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	8d 7f       	andi	r24, 0xFD	; 253
     52a:	03 c0       	rjmp	.+6      	; 0x532 <Dataflash_SelectChipFromPage+0x20>
     52c:	8e b1       	in	r24, 0x0e	; 14
     52e:	83 60       	ori	r24, 0x03	; 3
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	8e b9       	out	0x0e, r24	; 14
     534:	08 95       	ret

00000536 <DataflashManager_WriteBlocks>:
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
						  UsageList[i - 1] = UsageList[i];
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8a 01       	movw	r16, r20
     554:	6b 01       	movw	r12, r22
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	7c 01       	movw	r14, r24
     558:	f9 e0       	ldi	r31, 0x09	; 9
     55a:	cc 0c       	add	r12, r12
     55c:	dd 1c       	adc	r13, r13
     55e:	ee 1c       	adc	r14, r14
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	ff 1c       	adc	r15, r15
     562:	fa 95       	dec	r31
     564:	d1 f7       	brne	.-12     	; 0x55a <DataflashManager_WriteBlocks+0x24>
     566:	aa e0       	ldi	r26, 0x0A	; 10
     568:	f6 94       	lsr	r15
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	e7 94       	ror	r14
     56c:	d7 94       	ror	r13
     56e:	c7 94       	ror	r12
     570:	aa 95       	dec	r26
     572:	d1 f7       	brne	.-12     	; 0x568 <DataflashManager_WriteBlocks+0x32>
     574:	e6 01       	movw	r28, r12
     576:	5b 01       	movw	r10, r22
     578:	ba 2c       	mov	r11, r10
     57a:	aa 24       	eor	r10, r10
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	bb 0c       	add	r11, r11
     57e:	aa 24       	eor	r10, r10
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	b8 22       	and	r11, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	c6 01       	movw	r24, r12
     586:	c5 df       	rcall	.-118    	; 0x512 <Dataflash_SelectChipFromPage>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	83 e5       	ldi	r24, 0x53	; 83
     58a:	8e bd       	out	0x2e, r24	; 46
     58c:	0d b4       	in	r0, 0x2d	; 45
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	07 fe       	sbrs	r0, 7
     590:	fd cf       	rjmp	.-6      	; 0x58c <DataflashManager_WriteBlocks+0x56>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	c6 01       	movw	r24, r12
     598:	a3 df       	rcall	.-186    	; 0x4e0 <Dataflash_SendAddressBytes>
     59a:	94 df       	rcall	.-216    	; 0x4c4 <Dataflash_WaitWhileBusy>
     59c:	84 e8       	ldi	r24, 0x84	; 132
     59e:	8e bd       	out	0x2e, r24	; 46
     5a0:	0d b4       	in	r0, 0x2d	; 45
     5a2:	07 fe       	sbrs	r0, 7
     5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <DataflashManager_WriteBlocks+0x6a>
     5a6:	b5 01       	movw	r22, r10
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	99 df       	rcall	.-206    	; 0x4e0 <Dataflash_SendAddressBytes>
     5ae:	c3 d5       	rcall	.+2950   	; 0x1136 <Endpoint_WaitUntilReady>
     5b0:	81 11       	cpse	r24, r1
     5b2:	ec c0       	rjmp	.+472    	; 0x78c <DataflashManager_WriteBlocks+0x256>
     5b4:	74 e0       	ldi	r23, 0x04	; 4
     5b6:	b6 94       	lsr	r11
     5b8:	a7 94       	ror	r10
     5ba:	7a 95       	dec	r23

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <DataflashManager_WriteBlocks+0x80>
     5be:	48 01       	movw	r8, r16
     5c0:	e5 e0       	ldi	r30, 0x05	; 5
     5c2:	88 0c       	add	r8, r8
     5c4:	99 1c       	adc	r9, r9
     5c6:	ea 95       	dec	r30
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <DataflashManager_WriteBlocks+0x8c>
     5ca:	e1 2c       	mov	r14, r1
     5cc:	f1 2c       	mov	r15, r1
     5ce:	b1 2c       	mov	r11, r1
     5d0:	66 24       	eor	r6, r6
     5d2:	63 94       	inc	r6
     5d4:	01 15       	cp	r16, r1
     5d6:	11 05       	cpc	r17, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <DataflashManager_WriteBlocks+0xa6>
     5da:	bd c0       	rjmp	.+378    	; 0x756 <DataflashManager_WriteBlocks+0x220>
     5dc:	67 01       	movw	r12, r14
     5de:	c8 0c       	add	r12, r8
     5e0:	d9 1c       	adc	r13, r9
     5e2:	60 e2       	ldi	r22, 0x20	; 32
     5e4:	76 2e       	mov	r7, r22
     5e6:	80 91 e8 00 	lds	r24, 0x00E8
     5ea:	85 ff       	sbrs	r24, 5
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <DataflashManager_WriteBlocks+0xc0>
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	a8 12       	cpse	r10, r24
     5f2:	43 c0       	rjmp	.+134    	; 0x67a <DataflashManager_WriteBlocks+0x144>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <DataflashManager_WriteBlocks+0xd2>
     5f6:	80 91 e8 00 	lds	r24, 0x00E8
     5fa:	8b 77       	andi	r24, 0x7B	; 123
     5fc:	80 93 e8 00 	sts	0x00E8, r24
					  return HID_PARSE_InsufficientReportItems;
     600:	9a d5       	rcall	.+2868   	; 0x1136 <Endpoint_WaitUntilReady>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	88 23       	and	r24, r24
     604:	a1 f3       	breq	.-24     	; 0x5ee <DataflashManager_WriteBlocks+0xb8>
     606:	c2 c0       	rjmp	.+388    	; 0x78c <DataflashManager_WriteBlocks+0x256>
     608:	5d df       	rcall	.-326    	; 0x4c4 <Dataflash_WaitWhileBusy>
     60a:	bb 20       	and	r11, r11
     60c:	11 f0       	breq	.+4      	; 0x612 <DataflashManager_WriteBlocks+0xdc>
     60e:	86 e8       	ldi	r24, 0x86	; 134
     610:	01 c0       	rjmp	.+2      	; 0x614 <DataflashManager_WriteBlocks+0xde>
     612:	83 e8       	ldi	r24, 0x83	; 131
     614:	8e bd       	out	0x2e, r24	; 46
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <DataflashManager_WriteBlocks+0xe0>
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	ce 01       	movw	r24, r28
     622:	5e df       	rcall	.-324    	; 0x4e0 <Dataflash_SendAddressBytes>
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	8e b1       	in	r24, 0x0e	; 14
     628:	80 95       	com	r24
     62a:	83 70       	andi	r24, 0x03	; 3
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	09 f4       	brne	.+2      	; 0x632 <DataflashManager_WriteBlocks+0xfc>
     630:	b6 24       	eor	r11, r6
     632:	ce 01       	movw	r24, r28
     634:	6e df       	rcall	.-292    	; 0x512 <Dataflash_SelectChipFromPage>
     636:	80 e4       	ldi	r24, 0x40	; 64
     638:	c8 16       	cp	r12, r24
     63a:	d1 04       	cpc	r13, r1
     63c:	78 f4       	brcc	.+30     	; 0x65c <DataflashManager_WriteBlocks+0x126>
     63e:	42 df       	rcall	.-380    	; 0x4c4 <Dataflash_WaitWhileBusy>
     640:	bb 20       	and	r11, r11
     642:	11 f0       	breq	.+4      	; 0x648 <DataflashManager_WriteBlocks+0x112>
     644:	85 e5       	ldi	r24, 0x55	; 85
     646:	01 c0       	rjmp	.+2      	; 0x64a <DataflashManager_WriteBlocks+0x114>
     648:	83 e5       	ldi	r24, 0x53	; 83
     64a:	8e bd       	out	0x2e, r24	; 46
     64c:	0d b4       	in	r0, 0x2d	; 45
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <DataflashManager_WriteBlocks+0x116>
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	43 df       	rcall	.-378    	; 0x4e0 <Dataflash_SendAddressBytes>
     65a:	34 df       	rcall	.-408    	; 0x4c4 <Dataflash_WaitWhileBusy>
     65c:	bb 20       	and	r11, r11
     65e:	11 f0       	breq	.+4      	; 0x664 <DataflashManager_WriteBlocks+0x12e>
     660:	87 e8       	ldi	r24, 0x87	; 135
     662:	01 c0       	rjmp	.+2      	; 0x666 <DataflashManager_WriteBlocks+0x130>
     664:	84 e8       	ldi	r24, 0x84	; 132
     666:	8e bd       	out	0x2e, r24	; 46
     668:	0d b4       	in	r0, 0x2d	; 45
     66a:	07 fe       	sbrs	r0, 7
     66c:	fd cf       	rjmp	.-6      	; 0x668 <DataflashManager_WriteBlocks+0x132>
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	34 df       	rcall	.-408    	; 0x4e0 <Dataflash_SendAddressBytes>
     678:	a1 2c       	mov	r10, r1
     67a:	80 91 f1 00 	lds	r24, 0x00F1
     67e:	8e bd       	out	0x2e, r24	; 46
     680:	0d b4       	in	r0, 0x2d	; 45
     682:	07 fe       	sbrs	r0, 7
     684:	fd cf       	rjmp	.-6      	; 0x680 <DataflashManager_WriteBlocks+0x14a>
     686:	80 91 f1 00 	lds	r24, 0x00F1
					  ParserData->TotalReportItems++;
     68a:	8e bd       	out	0x2e, r24	; 46
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_WriteBlocks+0x156>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	80 91 f1 00 	lds	r24, 0x00F1
     696:	8e bd       	out	0x2e, r24	; 46
     698:	0d b4       	in	r0, 0x2d	; 45
     69a:	07 fe       	sbrs	r0, 7
     69c:	fd cf       	rjmp	.-6      	; 0x698 <DataflashManager_WriteBlocks+0x162>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	80 91 f1 00 	lds	r24, 0x00F1
     6a2:	8e bd       	out	0x2e, r24	; 46
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <DataflashManager_WriteBlocks+0x16e>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	80 91 f1 00 	lds	r24, 0x00F1
     6ae:	8e bd       	out	0x2e, r24	; 46
     6b0:	0d b4       	in	r0, 0x2d	; 45
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <DataflashManager_WriteBlocks+0x17a>
     6b6:	80 91 f1 00 	lds	r24, 0x00F1
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_WriteBlocks+0x186>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	80 91 f1 00 	lds	r24, 0x00F1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	8e bd       	out	0x2e, r24	; 46
     6c8:	0d b4       	in	r0, 0x2d	; 45
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	07 fe       	sbrs	r0, 7
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <DataflashManager_WriteBlocks+0x192>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	80 91 f1 00 	lds	r24, 0x00F1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	8e bd       	out	0x2e, r24	; 46
     6d4:	0d b4       	in	r0, 0x2d	; 45
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	07 fe       	sbrs	r0, 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <DataflashManager_WriteBlocks+0x19e>
     6da:	80 91 f1 00 	lds	r24, 0x00F1
     6de:	8e bd       	out	0x2e, r24	; 46
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_WriteBlocks+0x1aa>
     6e6:	80 91 f1 00 	lds	r24, 0x00F1
     6ea:	8e bd       	out	0x2e, r24	; 46
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_WriteBlocks+0x1b6>
     6f2:	80 91 f1 00 	lds	r24, 0x00F1
     6f6:	8e bd       	out	0x2e, r24	; 46
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_WriteBlocks+0x1c2>
     6fe:	80 91 f1 00 	lds	r24, 0x00F1
     702:	8e bd       	out	0x2e, r24	; 46
     704:	0d b4       	in	r0, 0x2d	; 45
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <DataflashManager_WriteBlocks+0x1ce>
     70a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     70e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     710:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     712:	07 fe       	sbrs	r0, 7
     714:	fd cf       	rjmp	.-6      	; 0x710 <DataflashManager_WriteBlocks+0x1da>
     716:	80 91 f1 00 	lds	r24, 0x00F1
     71a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     71c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <DataflashManager_WriteBlocks+0x1e6>
     722:	80 91 f1 00 	lds	r24, 0x00F1
     726:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     728:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <DataflashManager_WriteBlocks+0x1f2>
     72e:	80 91 f1 00 	lds	r24, 0x00F1
     732:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     734:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_WriteBlocks+0x1fe>
     73a:	a3 94       	inc	r10
     73c:	80 91 44 01 	lds	r24, 0x0144
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     740:	81 11       	cpse	r24, r1
				while (!(SPSR & (1 << SPIF)));
     742:	24 c0       	rjmp	.+72     	; 0x78c <DataflashManager_WriteBlocks+0x256>
     744:	7a 94       	dec	r7
     746:	09 f0       	breq	.+2      	; 0x74a <DataflashManager_WriteBlocks+0x214>
     748:	4e cf       	rjmp	.-356    	; 0x5e6 <DataflashManager_WriteBlocks+0xb0>
     74a:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     74c:	11 09       	sbc	r17, r1
				while (!(SPSR & (1 << SPIF)));
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	e8 1a       	sub	r14, r24
     752:	f1 08       	sbc	r15, r1
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     754:	3f cf       	rjmp	.-386    	; 0x5d4 <DataflashManager_WriteBlocks+0x9e>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     756:	b6 de       	rcall	.-660    	; 0x4c4 <Dataflash_WaitWhileBusy>
     758:	bb 20       	and	r11, r11
     75a:	11 f0       	breq	.+4      	; 0x760 <DataflashManager_WriteBlocks+0x22a>
     75c:	86 e8       	ldi	r24, 0x86	; 134
     75e:	01 c0       	rjmp	.+2      	; 0x762 <DataflashManager_WriteBlocks+0x22c>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	8e bd       	out	0x2e, r24	; 46
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     764:	0d b4       	in	r0, 0x2d	; 45
     766:	07 fe       	sbrs	r0, 7
     768:	fd cf       	rjmp	.-6      	; 0x764 <DataflashManager_WriteBlocks+0x22e>
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	ce 01       	movw	r24, r28
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     770:	b7 de       	rcall	.-658    	; 0x4e0 <Dataflash_SendAddressBytes>
     772:	a8 de       	rcall	.-688    	; 0x4c4 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     774:	80 91 e8 00 	lds	r24, 0x00E8
     778:	85 fd       	sbrc	r24, 5
     77a:	05 c0       	rjmp	.+10     	; 0x786 <DataflashManager_WriteBlocks+0x250>
     77c:	80 91 e8 00 	lds	r24, 0x00E8
     780:	8b 77       	andi	r24, 0x7B	; 123
     782:	80 93 e8 00 	sts	0x00E8, r24
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     786:	8e b1       	in	r24, 0x0e	; 14
     788:	83 60       	ori	r24, 0x03	; 3
     78a:	8e b9       	out	0x0e, r24	; 14
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
	Dataflash_WaitWhileBusy();
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	7f 90       	pop	r7
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     7a6:	6f 90       	pop	r6
     7a8:	08 95       	ret

000007aa <DataflashManager_ReadBlocks>:
     7aa:	af 92       	push	r10
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	8a 01       	movw	r16, r20
     7c0:	6b 01       	movw	r12, r22
     7c2:	7c 01       	movw	r14, r24
     7c4:	39 e0       	ldi	r19, 0x09	; 9
     7c6:	cc 0c       	add	r12, r12
     7c8:	dd 1c       	adc	r13, r13
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7ca:	ee 1c       	adc	r14, r14
     7cc:	ff 1c       	adc	r15, r15
     7ce:	3a 95       	dec	r19
     7d0:	d1 f7       	brne	.-12     	; 0x7c6 <DataflashManager_ReadBlocks+0x1c>
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	f6 94       	lsr	r15
     7d6:	e7 94       	ror	r14
     7d8:	d7 94       	ror	r13
     7da:	c7 94       	ror	r12
     7dc:	4a 95       	dec	r20
     7de:	d1 f7       	brne	.-12     	; 0x7d4 <DataflashManager_ReadBlocks+0x2a>
     7e0:	e6 01       	movw	r28, r12
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7e2:	5b 01       	movw	r10, r22
     7e4:	ba 2c       	mov	r11, r10
     7e6:	aa 24       	eor	r10, r10
     7e8:	bb 0c       	add	r11, r11
     7ea:	aa 24       	eor	r10, r10
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	b8 22       	and	r11, r24
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7f0:	c6 01       	movw	r24, r12
     7f2:	8f de       	rcall	.-738    	; 0x512 <Dataflash_SelectChipFromPage>
     7f4:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f6:	8e bd       	out	0x2e, r24	; 46
     7f8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_ReadBlocks+0x4e>
     7fe:	b5 01       	movw	r22, r10

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     800:	c6 01       	movw	r24, r12
     802:	6e de       	rcall	.-804    	; 0x4e0 <Dataflash_SendAddressBytes>
     804:	1e bc       	out	0x2e, r1	; 46
     806:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     808:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ReadBlocks+0x5c>
     80c:	1e bc       	out	0x2e, r1	; 46
     80e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     810:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_ReadBlocks+0x64>
     814:	1e bc       	out	0x2e, r1	; 46
     816:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     818:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ReadBlocks+0x6c>
     81c:	1e bc       	out	0x2e, r1	; 46
     81e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     820:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     822:	fd cf       	rjmp	.-6      	; 0x81e <DataflashManager_ReadBlocks+0x74>
     824:	88 d4       	rcall	.+2320   	; 0x1136 <Endpoint_WaitUntilReady>
     826:	81 11       	cpse	r24, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     828:	c1 c0       	rjmp	.+386    	; 0x9ac <DataflashManager_ReadBlocks+0x202>
     82a:	94 e0       	ldi	r25, 0x04	; 4
     82c:	b6 94       	lsr	r11
     82e:	a7 94       	ror	r10
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     830:	9a 95       	dec	r25
     832:	e1 f7       	brne	.-8      	; 0x82c <DataflashManager_ReadBlocks+0x82>
     834:	22 ed       	ldi	r18, 0xD2	; 210
     836:	e2 2e       	mov	r14, r18
     838:	01 15       	cp	r16, r1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     83a:	11 05       	cpc	r17, r1
     83c:	09 f4       	brne	.+2      	; 0x840 <DataflashManager_ReadBlocks+0x96>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     83e:	aa c0       	rjmp	.+340    	; 0x994 <DataflashManager_ReadBlocks+0x1ea>
     840:	80 e2       	ldi	r24, 0x20	; 32
     842:	f8 2e       	mov	r15, r24
     844:	80 91 e8 00 	lds	r24, 0x00E8
     848:	85 ff       	sbrs	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     84a:	08 c0       	rjmp	.+16     	; 0x85c <DataflashManager_ReadBlocks+0xb2>
     84c:	80 e4       	ldi	r24, 0x40	; 64

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     84e:	a8 12       	cpse	r10, r24
     850:	26 c0       	rjmp	.+76     	; 0x89e <DataflashManager_ReadBlocks+0xf4>
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     852:	21 96       	adiw	r28, 0x01	; 1
     854:	ce 01       	movw	r24, r28
     856:	5d de       	rcall	.-838    	; 0x512 <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     858:	ee bc       	out	0x2e, r14	; 46

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     85a:	09 c0       	rjmp	.+18     	; 0x86e <DataflashManager_ReadBlocks+0xc4>
     85c:	80 91 e8 00 	lds	r24, 0x00E8
     860:	8e 77       	andi	r24, 0x7E	; 126
     862:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     866:	67 d4       	rcall	.+2254   	; 0x1136 <Endpoint_WaitUntilReady>
     868:	88 23       	and	r24, r24
     86a:	81 f3       	breq	.-32     	; 0x84c <DataflashManager_ReadBlocks+0xa2>
     86c:	9f c0       	rjmp	.+318    	; 0x9ac <DataflashManager_ReadBlocks+0x202>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     86e:	0d b4       	in	r0, 0x2d	; 45
     870:	07 fe       	sbrs	r0, 7
     872:	fd cf       	rjmp	.-6      	; 0x86e <DataflashManager_ReadBlocks+0xc4>
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     878:	ce 01       	movw	r24, r28
     87a:	32 de       	rcall	.-924    	; 0x4e0 <Dataflash_SendAddressBytes>
     87c:	1e bc       	out	0x2e, r1	; 46
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
     882:	fd cf       	rjmp	.-6      	; 0x87e <DataflashManager_ReadBlocks+0xd4>
     884:	1e bc       	out	0x2e, r1	; 46
     886:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     888:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     88a:	fd cf       	rjmp	.-6      	; 0x886 <DataflashManager_ReadBlocks+0xdc>
     88c:	1e bc       	out	0x2e, r1	; 46
     88e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     890:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     892:	fd cf       	rjmp	.-6      	; 0x88e <DataflashManager_ReadBlocks+0xe4>
     894:	1e bc       	out	0x2e, r1	; 46
     896:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     898:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     89a:	fd cf       	rjmp	.-6      	; 0x896 <DataflashManager_ReadBlocks+0xec>
     89c:	a1 2c       	mov	r10, r1
     89e:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8a2:	07 fe       	sbrs	r0, 7
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <DataflashManager_ReadBlocks+0xf6>
     8a6:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     8a8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8ac:	1e bc       	out	0x2e, r1	; 46
     8ae:	0d b4       	in	r0, 0x2d	; 45
     8b0:	07 fe       	sbrs	r0, 7
				return SPDR;
     8b2:	fd cf       	rjmp	.-6      	; 0x8ae <DataflashManager_ReadBlocks+0x104>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8b4:	8e b5       	in	r24, 0x2e	; 46
     8b6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8ba:	1e bc       	out	0x2e, r1	; 46
     8bc:	0d b4       	in	r0, 0x2d	; 45
     8be:	07 fe       	sbrs	r0, 7
				return SPDR;
     8c0:	fd cf       	rjmp	.-6      	; 0x8bc <DataflashManager_ReadBlocks+0x112>
     8c2:	8e b5       	in	r24, 0x2e	; 46
     8c4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8c8:	1e bc       	out	0x2e, r1	; 46
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
				return SPDR;
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <DataflashManager_ReadBlocks+0x120>
     8d0:	8e b5       	in	r24, 0x2e	; 46
     8d2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8d6:	1e bc       	out	0x2e, r1	; 46
     8d8:	0d b4       	in	r0, 0x2d	; 45
     8da:	07 fe       	sbrs	r0, 7
				return SPDR;
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <DataflashManager_ReadBlocks+0x12e>
     8de:	8e b5       	in	r24, 0x2e	; 46
     8e0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8e4:	1e bc       	out	0x2e, r1	; 46
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
				return SPDR;
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_ReadBlocks+0x13c>
     8ec:	8e b5       	in	r24, 0x2e	; 46
     8ee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8f2:	1e bc       	out	0x2e, r1	; 46
     8f4:	0d b4       	in	r0, 0x2d	; 45
     8f6:	07 fe       	sbrs	r0, 7
				return SPDR;
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <DataflashManager_ReadBlocks+0x14a>
     8fa:	8e b5       	in	r24, 0x2e	; 46
     8fc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     900:	1e bc       	out	0x2e, r1	; 46
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
				return SPDR;
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_ReadBlocks+0x158>
     908:	8e b5       	in	r24, 0x2e	; 46
     90a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     90e:	1e bc       	out	0x2e, r1	; 46
     910:	0d b4       	in	r0, 0x2d	; 45
     912:	07 fe       	sbrs	r0, 7
				return SPDR;
     914:	fd cf       	rjmp	.-6      	; 0x910 <DataflashManager_ReadBlocks+0x166>
     916:	8e b5       	in	r24, 0x2e	; 46
     918:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     91c:	1e bc       	out	0x2e, r1	; 46
     91e:	0d b4       	in	r0, 0x2d	; 45
     920:	07 fe       	sbrs	r0, 7
				return SPDR;
     922:	fd cf       	rjmp	.-6      	; 0x91e <DataflashManager_ReadBlocks+0x174>
     924:	8e b5       	in	r24, 0x2e	; 46
     926:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     92a:	1e bc       	out	0x2e, r1	; 46
     92c:	0d b4       	in	r0, 0x2d	; 45
     92e:	07 fe       	sbrs	r0, 7
				return SPDR;
     930:	fd cf       	rjmp	.-6      	; 0x92c <DataflashManager_ReadBlocks+0x182>
     932:	8e b5       	in	r24, 0x2e	; 46
     934:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     938:	1e bc       	out	0x2e, r1	; 46
     93a:	0d b4       	in	r0, 0x2d	; 45
     93c:	07 fe       	sbrs	r0, 7
				return SPDR;
     93e:	fd cf       	rjmp	.-6      	; 0x93a <DataflashManager_ReadBlocks+0x190>
     940:	8e b5       	in	r24, 0x2e	; 46
     942:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     946:	1e bc       	out	0x2e, r1	; 46
     948:	0d b4       	in	r0, 0x2d	; 45
     94a:	07 fe       	sbrs	r0, 7
				return SPDR;
     94c:	fd cf       	rjmp	.-6      	; 0x948 <DataflashManager_ReadBlocks+0x19e>
     94e:	8e b5       	in	r24, 0x2e	; 46
     950:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     954:	1e bc       	out	0x2e, r1	; 46
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
				return SPDR;
     95a:	fd cf       	rjmp	.-6      	; 0x956 <DataflashManager_ReadBlocks+0x1ac>
     95c:	8e b5       	in	r24, 0x2e	; 46
     95e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     962:	1e bc       	out	0x2e, r1	; 46
     964:	0d b4       	in	r0, 0x2d	; 45
     966:	07 fe       	sbrs	r0, 7
				return SPDR;
     968:	fd cf       	rjmp	.-6      	; 0x964 <DataflashManager_ReadBlocks+0x1ba>
     96a:	8e b5       	in	r24, 0x2e	; 46
     96c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     970:	1e bc       	out	0x2e, r1	; 46
     972:	0d b4       	in	r0, 0x2d	; 45
     974:	07 fe       	sbrs	r0, 7
				return SPDR;
     976:	fd cf       	rjmp	.-6      	; 0x972 <DataflashManager_ReadBlocks+0x1c8>
     978:	8e b5       	in	r24, 0x2e	; 46
     97a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     97e:	a3 94       	inc	r10
     980:	80 91 44 01 	lds	r24, 0x0144
				return SPDR;
     984:	81 11       	cpse	r24, r1
     986:	12 c0       	rjmp	.+36     	; 0x9ac <DataflashManager_ReadBlocks+0x202>
     988:	fa 94       	dec	r15
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     98a:	09 f0       	breq	.+2      	; 0x98e <DataflashManager_ReadBlocks+0x1e4>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     98c:	5b cf       	rjmp	.-330    	; 0x844 <DataflashManager_ReadBlocks+0x9a>
     98e:	01 50       	subi	r16, 0x01	; 1
     990:	11 09       	sbc	r17, r1
     992:	52 cf       	rjmp	.-348    	; 0x838 <DataflashManager_ReadBlocks+0x8e>
     994:	80 91 e8 00 	lds	r24, 0x00E8
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     998:	85 fd       	sbrc	r24, 5
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <DataflashManager_ReadBlocks+0x1fc>
     99c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9a0:	8e 77       	andi	r24, 0x7E	; 126
     9a2:	80 93 e8 00 	sts	0x00E8, r24
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9a6:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9a8:	83 60       	ori	r24, 0x03	; 3
     9aa:	8e b9       	out	0x0e, r24	; 14
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	08 95       	ret

000009c2 <DataflashManager_ResetDataflashProtections>:
     9c2:	8e b1       	in	r24, 0x0e	; 14
     9c4:	83 60       	ori	r24, 0x03	; 3
     9c6:	8e 7f       	andi	r24, 0xFE	; 254
     9c8:	8e b9       	out	0x0e, r24	; 14
     9ca:	87 ed       	ldi	r24, 0xD7	; 215
     9cc:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     9ce:	0d b4       	in	r0, 0x2d	; 45
     9d0:	07 fe       	sbrs	r0, 7
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9d6:	0d b4       	in	r0, 0x2d	; 45
     9d8:	07 fe       	sbrs	r0, 7
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     9dc:	0e b4       	in	r0, 0x2e	; 46
     9de:	01 fc       	sbrc	r0, 1
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <DataflashManager_ResetDataflashProtections+0x2e>
     9e2:	8e b1       	in	r24, 0x0e	; 14
     9e4:	83 60       	ori	r24, 0x03	; 3
     9e6:	8d 7f       	andi	r24, 0xFD	; 253
     9e8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ea:	87 ed       	ldi	r24, 0xD7	; 215
     9ec:	8e bd       	out	0x2e, r24	; 46
     9ee:	16 c0       	rjmp	.+44     	; 0xa1c <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     9f0:	5f dd       	rcall	.-1346   	; 0x4b0 <Dataflash_ToggleSelectedChipCS>
     9f2:	8d e3       	ldi	r24, 0x3D	; 61
     9f4:	8e bd       	out	0x2e, r24	; 46
     9f6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     9f8:	07 fe       	sbrs	r0, 7
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <DataflashManager_ResetDataflashProtections+0x34>
     9fc:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9fe:	8e bd       	out	0x2e, r24	; 46
     a00:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a02:	07 fe       	sbrs	r0, 7
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <DataflashManager_ResetDataflashProtections+0x3e>
     a06:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a08:	8e bd       	out	0x2e, r24	; 46
     a0a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a0c:	07 fe       	sbrs	r0, 7
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <DataflashManager_ResetDataflashProtections+0x48>
     a10:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a12:	8e bd       	out	0x2e, r24	; 46
     a14:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a16:	07 fe       	sbrs	r0, 7
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <DataflashManager_ResetDataflashProtections+0x52>
     a1a:	e3 cf       	rjmp	.-58     	; 0x9e2 <DataflashManager_ResetDataflashProtections+0x20>
     a1c:	0d b4       	in	r0, 0x2d	; 45
     a1e:	07 fe       	sbrs	r0, 7
     a20:	fd cf       	rjmp	.-6      	; 0xa1c <DataflashManager_ResetDataflashProtections+0x5a>
     a22:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a24:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a26:	07 fe       	sbrs	r0, 7
     a28:	fd cf       	rjmp	.-6      	; 0xa24 <DataflashManager_ResetDataflashProtections+0x62>
     a2a:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a2c:	01 fc       	sbrc	r0, 1
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <DataflashManager_ResetDataflashProtections+0x76>
     a30:	8e b1       	in	r24, 0x0e	; 14
     a32:	83 60       	ori	r24, 0x03	; 3
     a34:	8e b9       	out	0x0e, r24	; 14
     a36:	08 95       	ret
     a38:	3b dd       	rcall	.-1418   	; 0x4b0 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     a3a:	8d e3       	ldi	r24, 0x3D	; 61
     a3c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <DataflashManager_ResetDataflashProtections+0x7c>
     a44:	8a e2       	ldi	r24, 0x2A	; 42
     a46:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a48:	0d b4       	in	r0, 0x2d	; 45
     a4a:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <DataflashManager_ResetDataflashProtections+0x86>
     a4e:	8f e7       	ldi	r24, 0x7F	; 127
     a50:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a52:	0d b4       	in	r0, 0x2d	; 45
     a54:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <DataflashManager_ResetDataflashProtections+0x90>
     a58:	8a e9       	ldi	r24, 0x9A	; 154
     a5a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a5c:	0d b4       	in	r0, 0x2d	; 45
     a5e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a60:	fd cf       	rjmp	.-6      	; 0xa5c <DataflashManager_ResetDataflashProtections+0x9a>
     a62:	e6 cf       	rjmp	.-52     	; 0xa30 <DataflashManager_ResetDataflashProtections+0x6e>

00000a64 <DataflashManager_CheckDataflashOperation>:
     a64:	8e b1       	in	r24, 0x0e	; 14
     a66:	83 60       	ori	r24, 0x03	; 3
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a6c:	8f e9       	ldi	r24, 0x9F	; 159
     a6e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a70:	0d b4       	in	r0, 0x2d	; 45
     a72:	07 fe       	sbrs	r0, 7
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a76:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     a7e:	9e b5       	in	r25, 0x2e	; 46
     a80:	8e b1       	in	r24, 0x0e	; 14
     a82:	83 60       	ori	r24, 0x03	; 3
     a84:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     a86:	9f 31       	cpi	r25, 0x1F	; 31
     a88:	a1 f4       	brne	.+40     	; 0xab2 <DataflashManager_CheckDataflashOperation+0x4e>
     a8a:	8e b1       	in	r24, 0x0e	; 14
     a8c:	83 60       	ori	r24, 0x03	; 3
     a8e:	8d 7f       	andi	r24, 0xFD	; 253
     a90:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a96:	0d b4       	in	r0, 0x2d	; 45
     a98:	07 fe       	sbrs	r0, 7
     a9a:	fd cf       	rjmp	.-6      	; 0xa96 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a9c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     aa4:	9e b5       	in	r25, 0x2e	; 46
     aa6:	8e b1       	in	r24, 0x0e	; 14
     aa8:	83 60       	ori	r24, 0x03	; 3
     aaa:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	9f 31       	cpi	r25, 0x1F	; 31
     ab0:	09 f0       	breq	.+2      	; 0xab4 <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     ab4:	08 95       	ret

00000ab6 <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	28 2f       	mov	r18, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     abc:	60 91 59 01 	lds	r22, 0x0159
     ac0:	70 91 58 01 	lds	r23, 0x0158
     ac4:	80 91 57 01 	lds	r24, 0x0157
     ac8:	90 91 56 01 	lds	r25, 0x0156

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     acc:	30 91 5c 01 	lds	r19, 0x015C
     ad0:	c3 2f       	mov	r28, r19
     ad2:	30 91 5b 01 	lds	r19, 0x015B
     ad6:	d3 2f       	mov	r29, r19

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     ad8:	61 15       	cp	r22, r1
     ada:	30 e8       	ldi	r19, 0x80	; 128
     adc:	73 07       	cpc	r23, r19
     ade:	81 05       	cpc	r24, r1
     ae0:	91 05       	cpc	r25, r1
     ae2:	68 f0       	brcs	.+26     	; 0xafe <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ae4:	80 91 0f 01 	lds	r24, 0x010F
     ae8:	80 7f       	andi	r24, 0xF0	; 240
     aea:	85 60       	ori	r24, 0x05	; 5
     aec:	80 93 0f 01 	sts	0x010F, r24
     af0:	81 e2       	ldi	r24, 0x21	; 33
     af2:	80 93 19 01 	sts	0x0119, r24
     af6:	10 92 1a 01 	sts	0x011A, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	25 c0       	rjmp	.+74     	; 0xb48 <SCSI_Command_ReadWrite_10+0x92>
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     afe:	ae 01       	movw	r20, r28
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b00:	22 23       	and	r18, r18
     b02:	11 f0       	breq	.+4      	; 0xb08 <SCSI_Command_ReadWrite_10+0x52>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b04:	52 de       	rcall	.-860    	; 0x7aa <DataflashManager_ReadBlocks>
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <SCSI_Command_ReadWrite_10+0x54>
     b08:	16 dd       	rcall	.-1492   	; 0x536 <DataflashManager_WriteBlocks>
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b0a:	ae 01       	movw	r20, r28
     b0c:	60 e0       	ldi	r22, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	89 e0       	ldi	r24, 0x09	; 9
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <SCSI_Command_ReadWrite_10+0x5c>
     b1e:	80 91 4d 01 	lds	r24, 0x014D
     b22:	90 91 4e 01 	lds	r25, 0x014E
     b26:	a0 91 4f 01 	lds	r26, 0x014F
     b2a:	b0 91 50 01 	lds	r27, 0x0150
     b2e:	84 1b       	sub	r24, r20
     b30:	95 0b       	sbc	r25, r21
     b32:	a6 0b       	sbc	r26, r22
     b34:	b7 0b       	sbc	r27, r23
     b36:	80 93 4d 01 	sts	0x014D, r24
     b3a:	90 93 4e 01 	sts	0x014E, r25
     b3e:	a0 93 4f 01 	sts	0x014F, r26
     b42:	b0 93 50 01 	sts	0x0150, r27
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	df 91       	pop	r29

	return true;
     b4a:	cf 91       	pop	r28
}
     b4c:	08 95       	ret

00000b4e <SCSI_DecodeSCSICommand>:
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     b56:	80 91 54 01 	lds	r24, 0x0154
     b5a:	8d 31       	cpi	r24, 0x1D	; 29
     b5c:	09 f4       	brne	.+2      	; 0xb60 <SCSI_DecodeSCSICommand+0x12>
     b5e:	a6 c0       	rjmp	.+332    	; 0xcac <SCSI_DecodeSCSICommand+0x15e>
     b60:	88 f4       	brcc	.+34     	; 0xb84 <SCSI_DecodeSCSICommand+0x36>
     b62:	82 31       	cpi	r24, 0x12	; 18
     b64:	09 f1       	breq	.+66     	; 0xba8 <SCSI_DecodeSCSICommand+0x5a>
     b66:	38 f4       	brcc	.+14     	; 0xb76 <SCSI_DecodeSCSICommand+0x28>
     b68:	88 23       	and	r24, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <SCSI_DecodeSCSICommand+0x20>
     b6c:	e2 c0       	rjmp	.+452    	; 0xd32 <SCSI_DecodeSCSICommand+0x1e4>
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	09 f4       	brne	.+2      	; 0xb74 <SCSI_DecodeSCSICommand+0x26>
     b72:	4d c0       	rjmp	.+154    	; 0xc0e <SCSI_DecodeSCSICommand+0xc0>
     b74:	e7 c0       	rjmp	.+462    	; 0xd44 <SCSI_DecodeSCSICommand+0x1f6>
     b76:	8a 31       	cpi	r24, 0x1A	; 26
     b78:	09 f4       	brne	.+2      	; 0xb7c <SCSI_DecodeSCSICommand+0x2e>
     b7a:	ba c0       	rjmp	.+372    	; 0xcf0 <SCSI_DecodeSCSICommand+0x1a2>
     b7c:	8b 31       	cpi	r24, 0x1B	; 27
     b7e:	09 f4       	brne	.+2      	; 0xb82 <SCSI_DecodeSCSICommand+0x34>
     b80:	d8 c0       	rjmp	.+432    	; 0xd32 <SCSI_DecodeSCSICommand+0x1e4>
     b82:	e0 c0       	rjmp	.+448    	; 0xd44 <SCSI_DecodeSCSICommand+0x1f6>
     b84:	88 32       	cpi	r24, 0x28	; 40
     b86:	09 f4       	brne	.+2      	; 0xb8a <SCSI_DecodeSCSICommand+0x3c>
     b88:	ad c0       	rjmp	.+346    	; 0xce4 <SCSI_DecodeSCSICommand+0x196>
     b8a:	38 f4       	brcc	.+14     	; 0xb9a <SCSI_DecodeSCSICommand+0x4c>
     b8c:	8e 31       	cpi	r24, 0x1E	; 30
     b8e:	09 f4       	brne	.+2      	; 0xb92 <SCSI_DecodeSCSICommand+0x44>
     b90:	d0 c0       	rjmp	.+416    	; 0xd32 <SCSI_DecodeSCSICommand+0x1e4>
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	09 f4       	brne	.+2      	; 0xb98 <SCSI_DecodeSCSICommand+0x4a>
     b96:	62 c0       	rjmp	.+196    	; 0xc5c <SCSI_DecodeSCSICommand+0x10e>
     b98:	d5 c0       	rjmp	.+426    	; 0xd44 <SCSI_DecodeSCSICommand+0x1f6>
     b9a:	8a 32       	cpi	r24, 0x2A	; 42
     b9c:	09 f4       	brne	.+2      	; 0xba0 <SCSI_DecodeSCSICommand+0x52>
     b9e:	a0 c0       	rjmp	.+320    	; 0xce0 <SCSI_DecodeSCSICommand+0x192>
     ba0:	8f 32       	cpi	r24, 0x2F	; 47
     ba2:	09 f4       	brne	.+2      	; 0xba6 <SCSI_DecodeSCSICommand+0x58>
     ba4:	c6 c0       	rjmp	.+396    	; 0xd32 <SCSI_DecodeSCSICommand+0x1e4>
     ba6:	ce c0       	rjmp	.+412    	; 0xd44 <SCSI_DecodeSCSICommand+0x1f6>
     ba8:	80 91 58 01 	lds	r24, 0x0158
     bac:	c8 2f       	mov	r28, r24
     bae:	80 91 57 01 	lds	r24, 0x0157
     bb2:	d8 2f       	mov	r29, r24
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     bb4:	80 91 55 01 	lds	r24, 0x0155
     bb8:	83 70       	andi	r24, 0x03	; 3
     bba:	09 f0       	breq	.+2      	; 0xbbe <SCSI_DecodeSCSICommand+0x70>
     bbc:	7b c0       	rjmp	.+246    	; 0xcb4 <SCSI_DecodeSCSICommand+0x166>
     bbe:	80 91 56 01 	lds	r24, 0x0156
     bc2:	81 11       	cpse	r24, r1
     bc4:	77 c0       	rjmp	.+238    	; 0xcb4 <SCSI_DecodeSCSICommand+0x166>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     bc6:	8e 01       	movw	r16, r28
     bc8:	c5 32       	cpi	r28, 0x25	; 37
     bca:	d1 05       	cpc	r29, r1
     bcc:	10 f0       	brcs	.+4      	; 0xbd2 <SCSI_DecodeSCSICommand+0x84>
     bce:	04 e2       	ldi	r16, 0x24	; 36
     bd0:	10 e0       	ldi	r17, 0x00	; 0

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	b8 01       	movw	r22, r16
     bd8:	8f e1       	ldi	r24, 0x1F	; 31
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0b d1       	rcall	.+534    	; 0xdf4 <Endpoint_Write_Stream_LE>
     bde:	60 e0       	ldi	r22, 0x00	; 0

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	ce 01       	movw	r24, r28
     be4:	80 1b       	sub	r24, r16
     be6:	91 0b       	sbc	r25, r17
     be8:	c8 d0       	rcall	.+400    	; 0xd7a <Endpoint_Null_Stream>
     bea:	80 91 e8 00 	lds	r24, 0x00E8
     bee:	8e 77       	andi	r24, 0x7E	; 126
     bf0:	80 93 e8 00 	sts	0x00E8, r24
     bf4:	80 91 4d 01 	lds	r24, 0x014D

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     bf8:	90 91 4e 01 	lds	r25, 0x014E
     bfc:	a0 91 4f 01 	lds	r26, 0x014F
     c00:	b0 91 50 01 	lds	r27, 0x0150
     c04:	80 1b       	sub	r24, r16
     c06:	91 0b       	sbc	r25, r17
     c08:	a1 09       	sbc	r26, r1
     c0a:	b1 09       	sbc	r27, r1
     c0c:	89 c0       	rjmp	.+274    	; 0xd20 <SCSI_DecodeSCSICommand+0x1d2>
     c0e:	00 91 58 01 	lds	r16, 0x0158
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c12:	10 2f       	mov	r17, r16
     c14:	03 31       	cpi	r16, 0x13	; 19
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c16:	08 f0       	brcs	.+2      	; 0xc1a <SCSI_DecodeSCSICommand+0xcc>
     c18:	12 e1       	ldi	r17, 0x12	; 18
     c1a:	c1 2f       	mov	r28, r17
     c1c:	d0 e0       	ldi	r29, 0x00	; 0

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	be 01       	movw	r22, r28
     c24:	8d e0       	ldi	r24, 0x0D	; 13
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	e5 d0       	rcall	.+458    	; 0xdf4 <Endpoint_Write_Stream_LE>
     c2a:	80 2f       	mov	r24, r16
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	8c 1b       	sub	r24, r28
     c34:	9d 0b       	sbc	r25, r29
     c36:	a1 d0       	rcall	.+322    	; 0xd7a <Endpoint_Null_Stream>
     c38:	80 91 e8 00 	lds	r24, 0x00E8
     c3c:	8e 77       	andi	r24, 0x7E	; 126
     c3e:	80 93 e8 00 	sts	0x00E8, r24
     c42:	80 91 4d 01 	lds	r24, 0x014D
     c46:	90 91 4e 01 	lds	r25, 0x014E

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c4a:	a0 91 4f 01 	lds	r26, 0x014F
     c4e:	b0 91 50 01 	lds	r27, 0x0150
     c52:	81 1b       	sub	r24, r17
     c54:	91 09       	sbc	r25, r1
     c56:	a1 09       	sbc	r26, r1
     c58:	b1 09       	sbc	r27, r1
     c5a:	62 c0       	rjmp	.+196    	; 0xd20 <SCSI_DecodeSCSICommand+0x1d2>
     c5c:	10 92 f1 00 	sts	0x00F1, r1
     c60:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c64:	8f e7       	ldi	r24, 0x7F	; 127
     c66:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
				UEDATX = (Data >> 8);
     c6c:	80 93 f1 00 	sts	0x00F1, r24
     c70:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data &  0xFF);
     c74:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     c7e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c82:	80 91 44 01 	lds	r24, 0x0144
				UEDATX = (Data &  0xFF);
     c86:	81 11       	cpse	r24, r1
     c88:	72 c0       	rjmp	.+228    	; 0xd6e <SCSI_DecodeSCSICommand+0x220>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	8e 77       	andi	r24, 0x7E	; 126
     c90:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c94:	80 91 4d 01 	lds	r24, 0x014D
     c98:	90 91 4e 01 	lds	r25, 0x014E

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     c9c:	a0 91 4f 01 	lds	r26, 0x014F
     ca0:	b0 91 50 01 	lds	r27, 0x0150
     ca4:	08 97       	sbiw	r24, 0x08	; 8
     ca6:	a1 09       	sbc	r26, r1
     ca8:	b1 09       	sbc	r27, r1
     caa:	3a c0       	rjmp	.+116    	; 0xd20 <SCSI_DecodeSCSICommand+0x1d2>
     cac:	80 91 55 01 	lds	r24, 0x0155
     cb0:	82 fd       	sbrc	r24, 2
     cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <SCSI_DecodeSCSICommand+0x176>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     cb4:	80 91 0f 01 	lds	r24, 0x010F
     cb8:	80 7f       	andi	r24, 0xF0	; 240
     cba:	85 60       	ori	r24, 0x05	; 5
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cbc:	80 93 0f 01 	sts	0x010F, r24
     cc0:	84 e2       	ldi	r24, 0x24	; 36
     cc2:	47 c0       	rjmp	.+142    	; 0xd52 <SCSI_DecodeSCSICommand+0x204>
     cc4:	cf de       	rcall	.-610    	; 0xa64 <DataflashManager_CheckDataflashOperation>
     cc6:	81 11       	cpse	r24, r1
     cc8:	34 c0       	rjmp	.+104    	; 0xd32 <SCSI_DecodeSCSICommand+0x1e4>
     cca:	80 91 0f 01 	lds	r24, 0x010F

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     cce:	80 7f       	andi	r24, 0xF0	; 240
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	80 93 0f 01 	sts	0x010F, r24
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     cd6:	10 92 19 01 	sts	0x0119, r1
     cda:	10 92 1a 01 	sts	0x011A, r1
     cde:	47 c0       	rjmp	.+142    	; 0xd6e <SCSI_DecodeSCSICommand+0x220>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <SCSI_DecodeSCSICommand+0x198>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	e7 de       	rcall	.-562    	; 0xab6 <SCSI_Command_ReadWrite_10>
     ce8:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     cea:	09 f4       	brne	.+2      	; 0xcee <SCSI_DecodeSCSICommand+0x1a0>
     cec:	40 c0       	rjmp	.+128    	; 0xd6e <SCSI_DecodeSCSICommand+0x220>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     cee:	34 c0       	rjmp	.+104    	; 0xd58 <SCSI_DecodeSCSICommand+0x20a>
     cf0:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     cf4:	10 92 f1 00 	sts	0x00F1, r1
     cf8:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cfc:	10 92 f1 00 	sts	0x00F1, r1
     d00:	80 91 e8 00 	lds	r24, 0x00E8
     d04:	8e 77       	andi	r24, 0x7E	; 126
     d06:	80 93 e8 00 	sts	0x00E8, r24
     d0a:	80 91 4d 01 	lds	r24, 0x014D
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d0e:	90 91 4e 01 	lds	r25, 0x014E
     d12:	a0 91 4f 01 	lds	r26, 0x014F
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     d16:	b0 91 50 01 	lds	r27, 0x0150
     d1a:	04 97       	sbiw	r24, 0x04	; 4
     d1c:	a1 09       	sbc	r26, r1
     d1e:	b1 09       	sbc	r27, r1
     d20:	80 93 4d 01 	sts	0x014D, r24
     d24:	90 93 4e 01 	sts	0x014E, r25
     d28:	a0 93 4f 01 	sts	0x014F, r26
     d2c:	b0 93 50 01 	sts	0x0150, r27
     d30:	13 c0       	rjmp	.+38     	; 0xd58 <SCSI_DecodeSCSICommand+0x20a>
     d32:	10 92 4d 01 	sts	0x014D, r1
     d36:	10 92 4e 01 	sts	0x014E, r1
     d3a:	10 92 4f 01 	sts	0x014F, r1
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     d3e:	10 92 50 01 	sts	0x0150, r1
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <SCSI_DecodeSCSICommand+0x20a>
     d44:	80 91 0f 01 	lds	r24, 0x010F
     d48:	80 7f       	andi	r24, 0xF0	; 240
     d4a:	85 60       	ori	r24, 0x05	; 5
     d4c:	80 93 0f 01 	sts	0x010F, r24
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	80 93 19 01 	sts	0x0119, r24
     d56:	c1 cf       	rjmp	.-126    	; 0xcda <SCSI_DecodeSCSICommand+0x18c>
     d58:	80 91 0f 01 	lds	r24, 0x010F
     d5c:	80 7f       	andi	r24, 0xF0	; 240
     d5e:	80 93 0f 01 	sts	0x010F, r24
     d62:	10 92 19 01 	sts	0x0119, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d66:	10 92 1a 01 	sts	0x011A, r1
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <SCSI_DecodeSCSICommand+0x222>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <Endpoint_Null_Stream>:
	}

	return false;
     d7a:	ef 92       	push	r14
}
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     d86:	8c 01       	movw	r16, r24
     d88:	eb 01       	movw	r28, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d8a:	d5 d1       	rcall	.+938    	; 0x1136 <Endpoint_WaitUntilReady>
     d8c:	81 11       	cpse	r24, r1
     d8e:	2b c0       	rjmp	.+86     	; 0xde6 <Endpoint_Null_Stream+0x6c>
     d90:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d92:	21 f0       	breq	.+8      	; 0xd9c <Endpoint_Null_Stream+0x22>
     d94:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
     d96:	99 81       	ldd	r25, Y+1	; 0x01
     d98:	08 1b       	sub	r16, r24
     d9a:	19 0b       	sbc	r17, r25
     d9c:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     d9e:	f1 2c       	mov	r15, r1
     da0:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     da2:	11 05       	cpc	r17, r1
     da4:	f9 f0       	breq	.+62     	; 0xde4 <Endpoint_Null_Stream+0x6a>
     da6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     daa:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dac:	13 c0       	rjmp	.+38     	; 0xdd4 <Endpoint_Null_Stream+0x5a>
     dae:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db2:	8e 77       	andi	r24, 0x7E	; 126
     db4:	80 93 e8 00 	sts	0x00E8, r24
     db8:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     dba:	41 f0       	breq	.+16     	; 0xdcc <Endpoint_Null_Stream+0x52>
     dbc:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     dbe:	99 81       	ldd	r25, Y+1	; 0x01
     dc0:	8e 0d       	add	r24, r14
     dc2:	9f 1d       	adc	r25, r15
     dc4:	99 83       	std	Y+1, r25	; 0x01
     dc6:	88 83       	st	Y, r24
     dc8:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <Endpoint_Null_Stream+0x6c>
     dcc:	b4 d1       	rcall	.+872    	; 0x1136 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dce:	88 23       	and	r24, r24
     dd0:	39 f3       	breq	.-50     	; 0xda0 <Endpoint_Null_Stream+0x26>
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <Endpoint_Null_Stream+0x6c>
     dd4:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dd8:	01 50       	subi	r16, 0x01	; 1
     dda:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
     de0:	f8 0a       	sbc	r15, r24
     de2:	de cf       	rjmp	.-68     	; 0xda0 <Endpoint_Null_Stream+0x26>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     de8:	cf 91       	pop	r28
}
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	08 95       	ret

00000df4 <Endpoint_Write_Stream_LE>:
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	7c 01       	movw	r14, r24
     e06:	8b 01       	movw	r16, r22
     e08:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e0a:	95 d1       	rcall	.+810    	; 0x1136 <Endpoint_WaitUntilReady>
     e0c:	81 11       	cpse	r24, r1
     e0e:	30 c0       	rjmp	.+96     	; 0xe70 <Endpoint_Write_Stream_LE+0x7c>
     e10:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e12:	31 f0       	breq	.+12     	; 0xe20 <Endpoint_Write_Stream_LE+0x2c>
     e14:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     e16:	99 81       	ldd	r25, Y+1	; 0x01
     e18:	08 1b       	sub	r16, r24
     e1a:	19 0b       	sbc	r17, r25
     e1c:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e1e:	f9 1e       	adc	r15, r25
     e20:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e22:	d1 2c       	mov	r13, r1
     e24:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e26:	11 05       	cpc	r17, r1
     e28:	11 f1       	breq	.+68     	; 0xe6e <Endpoint_Write_Stream_LE+0x7a>
     e2a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e2e:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e30:	13 c0       	rjmp	.+38     	; 0xe58 <Endpoint_Write_Stream_LE+0x64>
     e32:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e36:	8e 77       	andi	r24, 0x7E	; 126
     e38:	80 93 e8 00 	sts	0x00E8, r24
     e3c:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e3e:	41 f0       	breq	.+16     	; 0xe50 <Endpoint_Write_Stream_LE+0x5c>
     e40:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	8c 0d       	add	r24, r12
     e46:	9d 1d       	adc	r25, r13
     e48:	99 83       	std	Y+1, r25	; 0x01
     e4a:	88 83       	st	Y, r24
     e4c:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e4e:	10 c0       	rjmp	.+32     	; 0xe70 <Endpoint_Write_Stream_LE+0x7c>
     e50:	72 d1       	rcall	.+740    	; 0x1136 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e52:	88 23       	and	r24, r24
     e54:	39 f3       	breq	.-50     	; 0xe24 <Endpoint_Write_Stream_LE+0x30>
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <Endpoint_Write_Stream_LE+0x7c>
     e58:	f7 01       	movw	r30, r14
     e5a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e5c:	7f 01       	movw	r14, r30
     e5e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e62:	01 50       	subi	r16, 0x01	; 1
     e64:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e66:	ff ef       	ldi	r31, 0xFF	; 255
     e68:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     e6a:	df 0a       	sbc	r13, r31
     e6c:	db cf       	rjmp	.-74     	; 0xe24 <Endpoint_Write_Stream_LE+0x30>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     e72:	cf 91       	pop	r28
}
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	08 95       	ret

00000e82 <Endpoint_Read_Stream_LE>:
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	7c 01       	movw	r14, r24
     e94:	8b 01       	movw	r16, r22
     e96:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e98:	4e d1       	rcall	.+668    	; 0x1136 <Endpoint_WaitUntilReady>
     e9a:	81 11       	cpse	r24, r1
     e9c:	30 c0       	rjmp	.+96     	; 0xefe <Endpoint_Read_Stream_LE+0x7c>
     e9e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ea0:	31 f0       	breq	.+12     	; 0xeae <Endpoint_Read_Stream_LE+0x2c>
     ea2:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     ea4:	99 81       	ldd	r25, Y+1	; 0x01
     ea6:	08 1b       	sub	r16, r24
     ea8:	19 0b       	sbc	r17, r25
     eaa:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     eac:	f9 1e       	adc	r15, r25
     eae:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     eb0:	d1 2c       	mov	r13, r1
     eb2:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     eb4:	11 05       	cpc	r17, r1
     eb6:	11 f1       	breq	.+68     	; 0xefc <Endpoint_Read_Stream_LE+0x7a>
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ebc:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <Endpoint_Read_Stream_LE+0x64>
     ec0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ec4:	8b 77       	andi	r24, 0x7B	; 123
     ec6:	80 93 e8 00 	sts	0x00E8, r24
     eca:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     ecc:	41 f0       	breq	.+16     	; 0xede <Endpoint_Read_Stream_LE+0x5c>
     ece:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     ed0:	99 81       	ldd	r25, Y+1	; 0x01
     ed2:	8c 0d       	add	r24, r12
     ed4:	9d 1d       	adc	r25, r13
     ed6:	99 83       	std	Y+1, r25	; 0x01
     ed8:	88 83       	st	Y, r24
     eda:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     edc:	10 c0       	rjmp	.+32     	; 0xefe <Endpoint_Read_Stream_LE+0x7c>
     ede:	2b d1       	rcall	.+598    	; 0x1136 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ee0:	88 23       	and	r24, r24
     ee2:	39 f3       	breq	.-50     	; 0xeb2 <Endpoint_Read_Stream_LE+0x30>
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <Endpoint_Read_Stream_LE+0x7c>
     ee6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eea:	f7 01       	movw	r30, r14
     eec:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     eee:	7f 01       	movw	r14, r30
     ef0:	01 50       	subi	r16, 0x01	; 1
     ef2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ef4:	ff ef       	ldi	r31, 0xFF	; 255
     ef6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ef8:	df 0a       	sbc	r13, r31
     efa:	db cf       	rjmp	.-74     	; 0xeb2 <Endpoint_Read_Stream_LE+0x30>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     f00:	cf 91       	pop	r28
}
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	08 95       	ret

00000f10 <Endpoint_Write_Control_Stream_LE>:
     f10:	20 91 6f 01 	lds	r18, 0x016F
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f14:	30 91 70 01 	lds	r19, 0x0170
     f18:	26 17       	cp	r18, r22
     f1a:	37 07       	cpc	r19, r23
     f1c:	48 f0       	brcs	.+18     	; 0xf30 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f1e:	61 15       	cp	r22, r1
     f20:	71 05       	cpc	r23, r1
     f22:	39 f4       	brne	.+14     	; 0xf32 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f24:	20 91 e8 00 	lds	r18, 0x00E8
     f28:	2e 77       	andi	r18, 0x7E	; 126
     f2a:	20 93 e8 00 	sts	0x00E8, r18
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <Endpoint_Write_Control_Stream_LE+0x22>
     f30:	b9 01       	movw	r22, r18
     f32:	fc 01       	movw	r30, r24
     f34:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f36:	61 15       	cp	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	99 f1       	breq	.+102    	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f3c:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f40:	88 23       	and	r24, r24
     f42:	e9 f1       	breq	.+122    	; 0xfbe <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	e9 f1       	breq	.+122    	; 0xfc2 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f48:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f4c:	83 fd       	sbrc	r24, 3
     f4e:	3b c0       	rjmp	.+118    	; 0xfc6 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f50:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f54:	82 ff       	sbrs	r24, 2
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <Endpoint_Write_Control_Stream_LE+0x54>
     f58:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f5c:	82 ff       	sbrs	r24, 2
     f5e:	24 c0       	rjmp	.+72     	; 0xfa8 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f64:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     f68:	80 ff       	sbrs	r24, 0
     f6a:	e5 cf       	rjmp	.-54     	; 0xf36 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f6c:	80 91 f2 00 	lds	r24, 0x00F2
     f70:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f74:	61 15       	cp	r22, r1
     f76:	71 05       	cpc	r23, r1
     f78:	51 f0       	breq	.+20     	; 0xf8e <Endpoint_Write_Control_Stream_LE+0x7e>
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	91 05       	cpc	r25, r1
     f7e:	38 f4       	brcc	.+14     	; 0xf8e <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f80:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f82:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     f86:	61 50       	subi	r22, 0x01	; 1
     f88:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	08 97       	sbiw	r24, 0x08	; 8
     f92:	09 f0       	breq	.+2      	; 0xf96 <Endpoint_Write_Control_Stream_LE+0x86>
     f94:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f96:	80 91 e8 00 	lds	r24, 0x00E8
     f9a:	8e 77       	andi	r24, 0x7E	; 126
     f9c:	80 93 e8 00 	sts	0x00E8, r24
     fa0:	ca cf       	rjmp	.-108    	; 0xf36 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fa2:	21 11       	cpse	r18, r1
     fa4:	cb cf       	rjmp	.-106    	; 0xf3c <Endpoint_Write_Control_Stream_LE+0x2c>
     fa6:	d8 cf       	rjmp	.-80     	; 0xf58 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fa8:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fac:	88 23       	and	r24, r24
     fae:	39 f0       	breq	.+14     	; 0xfbe <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fb0:	85 30       	cpi	r24, 0x05	; 5
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fb4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fb8:	83 ff       	sbrs	r24, 3
     fba:	ce cf       	rjmp	.-100    	; 0xf58 <Endpoint_Write_Control_Stream_LE+0x48>
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fc8:	08 95       	ret

00000fca <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fca:	20 91 6f 01 	lds	r18, 0x016F
     fce:	30 91 70 01 	lds	r19, 0x0170
     fd2:	26 17       	cp	r18, r22
     fd4:	37 07       	cpc	r19, r23
     fd6:	48 f0       	brcs	.+18     	; 0xfea <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	39 f4       	brne	.+14     	; 0xfec <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fde:	20 91 e8 00 	lds	r18, 0x00E8
     fe2:	2e 77       	andi	r18, 0x7E	; 126
     fe4:	20 93 e8 00 	sts	0x00E8, r18
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <Endpoint_Write_Control_PStream_LE+0x22>
     fea:	b9 01       	movw	r22, r18
     fec:	fc 01       	movw	r30, r24
     fee:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ff0:	61 15       	cp	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	b1 f1       	breq	.+108    	; 0x1062 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ff6:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <Endpoint_Write_Control_PStream_LE+0x36>
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	09 f4       	brne	.+2      	; 0x1006 <Endpoint_Write_Control_PStream_LE+0x3c>
    1004:	3e c0       	rjmp	.+124    	; 0x1082 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1006:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    100a:	83 fd       	sbrc	r24, 3
    100c:	3c c0       	rjmp	.+120    	; 0x1086 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    100e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1012:	82 ff       	sbrs	r24, 2
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <Endpoint_Write_Control_PStream_LE+0x58>
    1016:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    101a:	82 ff       	sbrs	r24, 2
    101c:	25 c0       	rjmp	.+74     	; 0x1068 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1022:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1026:	80 ff       	sbrs	r24, 0
    1028:	e3 cf       	rjmp	.-58     	; 0xff0 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    102a:	80 91 f2 00 	lds	r24, 0x00F2
    102e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1032:	61 15       	cp	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	59 f0       	breq	.+22     	; 0x104e <Endpoint_Write_Control_PStream_LE+0x84>
    1038:	88 30       	cpi	r24, 0x08	; 8
    103a:	91 05       	cpc	r25, r1
    103c:	40 f4       	brcc	.+16     	; 0x104e <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    103e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1040:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1044:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1046:	61 50       	subi	r22, 0x01	; 1
    1048:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	f2 cf       	rjmp	.-28     	; 0x1032 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	08 97       	sbiw	r24, 0x08	; 8
    1052:	09 f0       	breq	.+2      	; 0x1056 <Endpoint_Write_Control_PStream_LE+0x8c>
    1054:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1056:	80 91 e8 00 	lds	r24, 0x00E8
    105a:	8e 77       	andi	r24, 0x7E	; 126
    105c:	80 93 e8 00 	sts	0x00E8, r24
    1060:	c7 cf       	rjmp	.-114    	; 0xff0 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1062:	21 11       	cpse	r18, r1
    1064:	c8 cf       	rjmp	.-112    	; 0xff6 <Endpoint_Write_Control_PStream_LE+0x2c>
    1066:	d7 cf       	rjmp	.-82     	; 0x1016 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1068:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    106c:	88 23       	and	r24, r24
    106e:	39 f0       	breq	.+14     	; 0x107e <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	39 f0       	breq	.+14     	; 0x1082 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1074:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1078:	83 ff       	sbrs	r24, 3
    107a:	cd cf       	rjmp	.-102    	; 0x1016 <Endpoint_Write_Control_PStream_LE+0x4c>
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1086:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1088:	08 95       	ret

0000108a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    108a:	98 2f       	mov	r25, r24
    108c:	97 30       	cpi	r25, 0x07	; 7
    108e:	58 f5       	brcc	.+86     	; 0x10e6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1090:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1094:	98 17       	cp	r25, r24
    1096:	39 f0       	breq	.+14     	; 0x10a6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1098:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    109c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    10a0:	50 91 f0 00 	lds	r21, 0x00F0
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    10a6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    10a8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    10aa:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    10ac:	21 ff       	sbrs	r18, 1
    10ae:	19 c0       	rjmp	.+50     	; 0x10e2 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    10b0:	30 91 eb 00 	lds	r19, 0x00EB
    10b4:	3e 7f       	andi	r19, 0xFE	; 254
    10b6:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    10ba:	30 91 ed 00 	lds	r19, 0x00ED
    10be:	3d 7f       	andi	r19, 0xFD	; 253
    10c0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    10c4:	30 91 eb 00 	lds	r19, 0x00EB
    10c8:	31 60       	ori	r19, 0x01	; 1
    10ca:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    10ce:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    10d2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    10d6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    10da:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    10de:	27 ff       	sbrs	r18, 7
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	d3 cf       	rjmp	.-90     	; 0x108c <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    10f0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    10f2:	08 95       	ret

000010f4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    10f4:	80 91 69 01 	lds	r24, 0x0169
    10f8:	87 fd       	sbrc	r24, 7
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10fc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1100:	80 ff       	sbrs	r24, 0
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <Endpoint_ClearStatusStage+0x2c>
    1104:	12 c0       	rjmp	.+36     	; 0x112a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1106:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    110a:	82 fd       	sbrc	r24, 2
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    110e:	80 91 68 01 	lds	r24, 0x0168
    1112:	81 11       	cpse	r24, r1
    1114:	f8 cf       	rjmp	.-16     	; 0x1106 <Endpoint_ClearStatusStage+0x12>
    1116:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1118:	80 91 e8 00 	lds	r24, 0x00E8
    111c:	8b 77       	andi	r24, 0x7B	; 123
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1120:	80 91 68 01 	lds	r24, 0x0168
    1124:	81 11       	cpse	r24, r1
    1126:	ea cf       	rjmp	.-44     	; 0x10fc <Endpoint_ClearStatusStage+0x8>
    1128:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    112a:	80 91 e8 00 	lds	r24, 0x00E8
    112e:	8e 77       	andi	r24, 0x7E	; 126
    1130:	80 93 e8 00 	sts	0x00E8, r24
    1134:	08 95       	ret

00001136 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1136:	80 91 e4 00 	lds	r24, 0x00E4
    113a:	90 91 e5 00 	lds	r25, 0x00E5
    113e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1140:	20 91 ec 00 	lds	r18, 0x00EC
    1144:	20 ff       	sbrs	r18, 0
    1146:	21 c0       	rjmp	.+66     	; 0x118a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1148:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    114c:	20 fd       	sbrc	r18, 0
    114e:	21 c0       	rjmp	.+66     	; 0x1192 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1150:	20 91 68 01 	lds	r18, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1154:	22 23       	and	r18, r18
    1156:	89 f0       	breq	.+34     	; 0x117a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1158:	25 30       	cpi	r18, 0x05	; 5
    115a:	89 f0       	breq	.+34     	; 0x117e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    115c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1160:	25 fd       	sbrc	r18, 5
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <Endpoint_WaitUntilReady+0x4c>
    1164:	20 91 e4 00 	lds	r18, 0x00E4
    1168:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	39 f3       	breq	.-50     	; 0x1140 <Endpoint_WaitUntilReady+0xa>
    1172:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1174:	41 f0       	breq	.+16     	; 0x1186 <Endpoint_WaitUntilReady+0x50>
    1176:	c9 01       	movw	r24, r18
    1178:	e3 cf       	rjmp	.-58     	; 0x1140 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    118a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    118e:	22 ff       	sbrs	r18, 2
    1190:	df cf       	rjmp	.-66     	; 0x1150 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    119e:	4e d0       	rcall	.+156    	; 0x123c <USB_INT_DisableAllInterrupts>
    11a0:	55 d0       	rcall	.+170    	; 0x124c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11a2:	c8 ed       	ldi	r28, 0xD8	; 216
    11a4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11a6:	88 81       	ld	r24, Y
    11a8:	8f 77       	andi	r24, 0x7F	; 127
    11aa:	88 83       	st	Y, r24
    11ac:	88 81       	ld	r24, Y
    11ae:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    11b0:	88 83       	st	Y, r24
    11b2:	88 81       	ld	r24, Y
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    11b6:	88 83       	st	Y, r24
    11b8:	e7 ed       	ldi	r30, 0xD7	; 215
    11ba:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    11bc:	80 81       	ld	r24, Z
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	80 83       	st	Z, r24
    11c2:	19 bc       	out	0x29, r1	; 41
    11c4:	10 92 68 01 	sts	0x0168, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    11c8:	10 92 64 01 	sts	0x0164, r1
	USB_Device_ConfigurationNumber  = 0;
    11cc:	10 92 66 01 	sts	0x0166, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    11d0:	10 92 65 01 	sts	0x0165, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    11d4:	00 ee       	ldi	r16, 0xE0	; 224
    11d6:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    11d8:	f8 01       	movw	r30, r16
    11da:	80 81       	ld	r24, Z
    11dc:	8b 7f       	andi	r24, 0xFB	; 251
    11de:	80 83       	st	Z, r24
    11e0:	88 81       	ld	r24, Y
    11e2:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    11e4:	88 83       	st	Y, r24
    11e6:	42 e0       	ldi	r20, 0x02	; 2
    11e8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	4e df       	rcall	.-356    	; 0x108a <Endpoint_ConfigureEndpoint_Prv>
    11ee:	e1 ee       	ldi	r30, 0xE1	; 225
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	80 83       	st	Z, r24
    11f8:	e2 ee       	ldi	r30, 0xE2	; 226
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 83       	st	Z, r24
    1202:	80 81       	ld	r24, Z
    1204:	88 60       	ori	r24, 0x08	; 8
    1206:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1208:	f8 01       	movw	r30, r16
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    120e:	80 83       	st	Z, r24
    1210:	88 81       	ld	r24, Y
    1212:	80 61       	ori	r24, 0x10	; 16
    1214:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <USB_Init>:
    1220:	e8 ed       	ldi	r30, 0xD8	; 216
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    122a:	e7 ed       	ldi	r30, 0xD7	; 215
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 67 01 	sts	0x0167, r24

	USB_ResetInterface();
    123a:	ad cf       	rjmp	.-166    	; 0x1196 <USB_ResetInterface>

0000123c <USB_INT_DisableAllInterrupts>:
    123c:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8c 7f       	andi	r24, 0xFC	; 252
    1244:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1246:	10 92 e2 00 	sts	0x00E2, r1
    124a:	08 95       	ret

0000124c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    124c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1250:	10 92 e1 00 	sts	0x00E1, r1
    1254:	08 95       	ret

00001256 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	11 24       	eor	r1, r1
    1260:	0b b6       	in	r0, 0x3b	; 59
    1262:	0f 92       	push	r0
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    127c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1280:	82 ff       	sbrs	r24, 2
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1284:	80 91 e2 00 	lds	r24, 0x00E2
    1288:	82 ff       	sbrs	r24, 2
    128a:	06 c0       	rjmp	.+12     	; 0x1298 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    128c:	80 91 e1 00 	lds	r24, 0x00E1
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1296:	43 d2       	rcall	.+1158   	; 0x171e <USB_Event_Stub>
    1298:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    129c:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    129e:	1f c0       	rjmp	.+62     	; 0x12de <__vector_10+0x88>
    12a0:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    12a4:	80 ff       	sbrs	r24, 0
    12a6:	1b c0       	rjmp	.+54     	; 0x12de <__vector_10+0x88>
    12a8:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	80 93 da 00 	sts	0x00DA, r24
    12b2:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    12b6:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <__vector_10+0x7e>
    12ba:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12bc:	89 bd       	out	0x29, r24	; 41
    12be:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12c0:	89 bd       	out	0x29, r24	; 41
    12c2:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    12c4:	00 fe       	sbrs	r0, 0
    12c6:	fd cf       	rjmp	.-6      	; 0x12c2 <__vector_10+0x6c>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    12ca:	80 93 68 01 	sts	0x0168, r24
    12ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <__vector_10+0x88>
    12d4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12d6:	10 92 68 01 	sts	0x0168, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    12da:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    12de:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    12e2:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    12e4:	18 c0       	rjmp	.+48     	; 0x1316 <__vector_10+0xc0>
    12e6:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    12ea:	80 ff       	sbrs	r24, 0
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <__vector_10+0xc0>
    12ee:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    12f2:	8e 7f       	andi	r24, 0xFE	; 254
    12f4:	80 93 e2 00 	sts	0x00E2, r24
    12f8:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    12fc:	80 61       	ori	r24, 0x10	; 16
    12fe:	80 93 e2 00 	sts	0x00E2, r24
    1302:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	80 93 d8 00 	sts	0x00D8, r24
    130c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    130e:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1310:	80 93 68 01 	sts	0x0168, r24
    1314:	04 d2       	rcall	.+1032   	; 0x171e <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    1316:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    131a:	84 ff       	sbrs	r24, 4
    131c:	2f c0       	rjmp	.+94     	; 0x137c <__vector_10+0x126>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    131e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1322:	84 ff       	sbrs	r24, 4
    1324:	2b c0       	rjmp	.+86     	; 0x137c <__vector_10+0x126>
    1326:	8c e0       	ldi	r24, 0x0C	; 12
    1328:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    132a:	8e e0       	ldi	r24, 0x0E	; 14
    132c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    132e:	09 b4       	in	r0, 0x29	; 41
    1330:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1332:	fd cf       	rjmp	.-6      	; 0x132e <__vector_10+0xd8>
    1334:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1338:	8f 7d       	andi	r24, 0xDF	; 223
    133a:	80 93 d8 00 	sts	0x00D8, r24
    133e:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1342:	8f 7e       	andi	r24, 0xEF	; 239
    1344:	80 93 e1 00 	sts	0x00E1, r24
    1348:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    134c:	8f 7e       	andi	r24, 0xEF	; 239
    134e:	80 93 e2 00 	sts	0x00E2, r24
    1352:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 93 e2 00 	sts	0x00E2, r24
    135c:	80 91 64 01 	lds	r24, 0x0164
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1360:	88 23       	and	r24, r24
    1362:	11 f0       	breq	.+4      	; 0x1368 <__vector_10+0x112>
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <__vector_10+0x120>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1368:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    136c:	87 ff       	sbrs	r24, 7
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <__vector_10+0x11e>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <__vector_10+0x120>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 68 01 	sts	0x0168, r24
    137a:	d1 d1       	rcall	.+930    	; 0x171e <USB_Event_Stub>
    137c:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1380:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1382:	27 c0       	rjmp	.+78     	; 0x13d2 <__vector_10+0x17c>
    1384:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1388:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    138a:	23 c0       	rjmp	.+70     	; 0x13d2 <__vector_10+0x17c>
    138c:	80 91 e1 00 	lds	r24, 0x00E1
    1390:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1392:	80 93 e1 00 	sts	0x00E1, r24
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	80 93 68 01 	sts	0x0168, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    139c:	10 92 64 01 	sts	0x0164, r1
    13a0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    13a4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13a6:	80 93 e1 00 	sts	0x00E1, r24
    13aa:	80 91 e2 00 	lds	r24, 0x00E2
    13ae:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    13b0:	80 93 e2 00 	sts	0x00E2, r24
    13b4:	80 91 e2 00 	lds	r24, 0x00E2
    13b8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13ba:	80 93 e2 00 	sts	0x00E2, r24
    13be:	42 e0       	ldi	r20, 0x02	; 2
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13c4:	62 de       	rcall	.-828    	; 0x108a <Endpoint_ConfigureEndpoint_Prv>
    13c6:	80 91 f0 00 	lds	r24, 0x00F0
    13ca:	88 60       	ori	r24, 0x08	; 8
    13cc:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    13d0:	a6 d1       	rcall	.+844    	; 0x171e <USB_Event_Stub>
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0b be       	out	0x3b, r0	; 59
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_11>:
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1402:	0b b6       	in	r0, 0x3b	; 59
    1404:	0f 92       	push	r0
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	cf 93       	push	r28
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1420:	c0 91 e9 00 	lds	r28, 0x00E9
    1424:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1426:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    142a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    142e:	80 91 f0 00 	lds	r24, 0x00F0
    1432:	87 7f       	andi	r24, 0xF7	; 247
    1434:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1438:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    143a:	1d d0       	rcall	.+58     	; 0x1476 <USB_Device_ProcessControlRequest>
    143c:	10 92 e9 00 	sts	0x00E9, r1
    1440:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1444:	88 60       	ori	r24, 0x08	; 8
    1446:	80 93 f0 00 	sts	0x00F0, r24
    144a:	c0 93 e9 00 	sts	0x00E9, r28
    144e:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1450:	ef 91       	pop	r30
    1452:	cf 91       	pop	r28
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <USB_Device_ProcessControlRequest>:
    1476:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	aa 97       	sbiw	r28, 0x2a	; 42
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	e9 e6       	ldi	r30, 0x69	; 105
    148e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1490:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1494:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	e1 37       	cpi	r30, 0x71	; 113
    149a:	f2 07       	cpc	r31, r18
    149c:	c9 f7       	brne	.-14     	; 0x1490 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    149e:	0e 94 00 01 	call	0x200	; 0x200 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14a2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    14a6:	83 ff       	sbrs	r24, 3
    14a8:	22 c1       	rjmp	.+580    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    14aa:	90 91 69 01 	lds	r25, 0x0169

		switch (USB_ControlRequest.bRequest)
    14ae:	80 91 6a 01 	lds	r24, 0x016A
    14b2:	85 30       	cpi	r24, 0x05	; 5
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <USB_Device_ProcessControlRequest+0x42>
    14b6:	77 c0       	rjmp	.+238    	; 0x15a6 <USB_Device_ProcessControlRequest+0x130>
    14b8:	30 f4       	brcc	.+12     	; 0x14c6 <USB_Device_ProcessControlRequest+0x50>
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	81 f1       	breq	.+96     	; 0x151e <USB_Device_ProcessControlRequest+0xa8>
    14be:	68 f0       	brcs	.+26     	; 0x14da <USB_Device_ProcessControlRequest+0x64>
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	69 f1       	breq	.+90     	; 0x151e <USB_Device_ProcessControlRequest+0xa8>
    14c4:	14 c1       	rjmp	.+552    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	09 f4       	brne	.+2      	; 0x14cc <USB_Device_ProcessControlRequest+0x56>
    14ca:	e2 c0       	rjmp	.+452    	; 0x1690 <USB_Device_ProcessControlRequest+0x21a>
    14cc:	89 30       	cpi	r24, 0x09	; 9
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <USB_Device_ProcessControlRequest+0x5c>
    14d0:	f1 c0       	rjmp	.+482    	; 0x16b4 <USB_Device_ProcessControlRequest+0x23e>
    14d2:	86 30       	cpi	r24, 0x06	; 6
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <USB_Device_ProcessControlRequest+0x62>
    14d6:	0b c1       	rjmp	.+534    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    14d8:	88 c0       	rjmp	.+272    	; 0x15ea <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14da:	90 38       	cpi	r25, 0x80	; 128
    14dc:	81 f0       	breq	.+32     	; 0x14fe <USB_Device_ProcessControlRequest+0x88>
    14de:	92 38       	cpi	r25, 0x82	; 130
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <USB_Device_ProcessControlRequest+0x6e>
    14e2:	05 c1       	rjmp	.+522    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14e4:	80 91 6d 01 	lds	r24, 0x016D
    14e8:	8f 70       	andi	r24, 0x0F	; 15
    14ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14ee:	80 91 eb 00 	lds	r24, 0x00EB
    14f2:	85 fb       	bst	r24, 5
    14f4:	88 27       	eor	r24, r24
    14f6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14f8:	10 92 e9 00 	sts	0x00E9, r1
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    14fe:	80 91 65 01 	lds	r24, 0x0165
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1502:	90 91 66 01 	lds	r25, 0x0166
    1506:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1508:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    150a:	90 91 e8 00 	lds	r25, 0x00E8
    150e:	97 7f       	andi	r25, 0xF7	; 247
    1510:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1514:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1518:	10 92 f1 00 	sts	0x00F1, r1
    151c:	c4 c0       	rjmp	.+392    	; 0x16a6 <USB_Device_ProcessControlRequest+0x230>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    151e:	29 2f       	mov	r18, r25
    1520:	2d 7f       	andi	r18, 0xFD	; 253
    1522:	09 f0       	breq	.+2      	; 0x1526 <USB_Device_ProcessControlRequest+0xb0>
    1524:	e4 c0       	rjmp	.+456    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1526:	99 23       	and	r25, r25
    1528:	19 f0       	breq	.+6      	; 0x1530 <USB_Device_ProcessControlRequest+0xba>
    152a:	92 30       	cpi	r25, 0x02	; 2
    152c:	61 f0       	breq	.+24     	; 0x1546 <USB_Device_ProcessControlRequest+0xd0>
    152e:	df c0       	rjmp	.+446    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1530:	90 91 6b 01 	lds	r25, 0x016B
    1534:	91 30       	cpi	r25, 0x01	; 1
    1536:	09 f0       	breq	.+2      	; 0x153a <USB_Device_ProcessControlRequest+0xc4>
    1538:	da c0       	rjmp	.+436    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	09 f0       	breq	.+2      	; 0x1540 <USB_Device_ProcessControlRequest+0xca>
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	90 93 66 01 	sts	0x0166, r25
    1544:	2a c0       	rjmp	.+84     	; 0x159a <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1546:	90 91 6b 01 	lds	r25, 0x016B
    154a:	91 11       	cpse	r25, r1
    154c:	26 c0       	rjmp	.+76     	; 0x159a <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    154e:	20 91 6d 01 	lds	r18, 0x016D
    1552:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1554:	09 f4       	brne	.+2      	; 0x1558 <USB_Device_ProcessControlRequest+0xe2>
    1556:	cb c0       	rjmp	.+406    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1558:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    155c:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1560:	90 ff       	sbrs	r25, 0
    1562:	1b c0       	rjmp	.+54     	; 0x159a <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	21 f4       	brne	.+8      	; 0x1570 <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1568:	80 91 eb 00 	lds	r24, 0x00EB
    156c:	80 62       	ori	r24, 0x20	; 32
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1570:	80 91 eb 00 	lds	r24, 0x00EB
    1574:	80 61       	ori	r24, 0x10	; 16
    1576:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <USB_Device_ProcessControlRequest+0x10e>
    1582:	88 0f       	add	r24, r24
    1584:	0a 94       	dec	r0
    1586:	ea f7       	brpl	.-6      	; 0x1582 <USB_Device_ProcessControlRequest+0x10c>
    1588:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    158c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1590:	80 91 eb 00 	lds	r24, 0x00EB
    1594:	88 60       	ori	r24, 0x08	; 8
    1596:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    159a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    159e:	80 91 e8 00 	lds	r24, 0x00E8
    15a2:	87 7f       	andi	r24, 0xF7	; 247
    15a4:	83 c0       	rjmp	.+262    	; 0x16ac <USB_Device_ProcessControlRequest+0x236>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15a6:	91 11       	cpse	r25, r1
    15a8:	a2 c0       	rjmp	.+324    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    15aa:	10 91 6b 01 	lds	r17, 0x016B
    15ae:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    15b0:	80 91 e3 00 	lds	r24, 0x00E3
    15b4:	80 78       	andi	r24, 0x80	; 128
    15b6:	81 2b       	or	r24, r17
    15b8:	80 93 e3 00 	sts	0x00E3, r24
    15bc:	80 91 e8 00 	lds	r24, 0x00E8
    15c0:	87 7f       	andi	r24, 0xF7	; 247
    15c2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    15c6:	96 dd       	rcall	.-1236   	; 0x10f4 <Endpoint_ClearStatusStage>
    15c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15cc:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    15ce:	fc cf       	rjmp	.-8      	; 0x15c8 <USB_Device_ProcessControlRequest+0x152>
    15d0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	80 93 e3 00 	sts	0x00E3, r24
    15da:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <USB_Device_ProcessControlRequest+0x16c>
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <USB_Device_ProcessControlRequest+0x16e>
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	80 93 68 01 	sts	0x0168, r24
    15e8:	82 c0       	rjmp	.+260    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    15ea:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15ec:	92 30       	cpi	r25, 0x02	; 2
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <USB_Device_ProcessControlRequest+0x17c>
    15f0:	7e c0       	rjmp	.+252    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    15f2:	80 91 6b 01 	lds	r24, 0x016B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15f6:	90 91 6c 01 	lds	r25, 0x016C
    15fa:	8c 3d       	cpi	r24, 0xDC	; 220
    15fc:	23 e0       	ldi	r18, 0x03	; 3
    15fe:	92 07       	cpc	r25, r18
    1600:	71 f5       	brne	.+92     	; 0x165e <USB_Device_ProcessControlRequest+0x1e8>
    1602:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    160c:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    160e:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1610:	13 96       	adiw	r26, 0x03	; 3
    1612:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1614:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1616:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1618:	e3 2f       	mov	r30, r19
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	50 93 57 00 	sts	0x0057, r21
    1620:	e4 91       	lpm	r30, Z
    1622:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    1624:	03 c0       	rjmp	.+6      	; 0x162c <USB_Device_ProcessControlRequest+0x1b6>
    1626:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1628:	ef 70       	andi	r30, 0x0F	; 15
    162a:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    162c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    162e:	8e 2f       	mov	r24, r30
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1634:	10 f0       	brcs	.+4      	; 0x163a <USB_Device_ProcessControlRequest+0x1c4>
    1636:	c7 96       	adiw	r24, 0x37	; 55
    1638:	01 c0       	rjmp	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x1c6>
    163a:	c0 96       	adiw	r24, 0x30	; 48
    163c:	8d 93       	st	X+, r24
    163e:	9d 93       	st	X+, r25
    1640:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1642:	24 31       	cpi	r18, 0x14	; 20
    1644:	49 f7       	brne	.-46     	; 0x1618 <USB_Device_ProcessControlRequest+0x1a2>
    1646:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1648:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    164c:	87 7f       	andi	r24, 0xF7	; 247
    164e:	80 93 e8 00 	sts	0x00E8, r24
    1652:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	5a dc       	rcall	.-1868   	; 0xf10 <Endpoint_Write_Control_Stream_LE>
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <USB_Device_ProcessControlRequest+0x20e>
    165e:	ae 01       	movw	r20, r28
    1660:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
    1664:	60 91 6d 01 	lds	r22, 0x016D
    1668:	0e 94 26 02 	call	0x44c	; 0x44c <CALLBACK_USB_GetDescriptor>
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	09 f4       	brne	.+2      	; 0x1672 <USB_Device_ProcessControlRequest+0x1fc>
    1670:	3e c0       	rjmp	.+124    	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    1672:	20 91 e8 00 	lds	r18, 0x00E8
    1676:	27 7f       	andi	r18, 0xF7	; 247
    1678:	20 93 e8 00 	sts	0x00E8, r18
    167c:	bc 01       	movw	r22, r24
    167e:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	a3 dc       	rcall	.-1722   	; 0xfca <Endpoint_Write_Control_PStream_LE>
    1684:	80 91 e8 00 	lds	r24, 0x00E8
    1688:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    168a:	80 93 e8 00 	sts	0x00E8, r24
    168e:	2f c0       	rjmp	.+94     	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    1690:	90 38       	cpi	r25, 0x80	; 128
    1692:	69 f5       	brne	.+90     	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    1694:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1698:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    169a:	80 93 e8 00 	sts	0x00E8, r24
    169e:	80 91 64 01 	lds	r24, 0x0164
    16a2:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16a6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16aa:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ac:	80 93 e8 00 	sts	0x00E8, r24
    16b0:	21 dd       	rcall	.-1470   	; 0x10f4 <Endpoint_ClearStatusStage>
    16b2:	1d c0       	rjmp	.+58     	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    16b4:	91 11       	cpse	r25, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    16b6:	1b c0       	rjmp	.+54     	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
    16b8:	90 91 6b 01 	lds	r25, 0x016B
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16bc:	92 30       	cpi	r25, 0x02	; 2
    16be:	b8 f4       	brcc	.+46     	; 0x16ee <USB_Device_ProcessControlRequest+0x278>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    16c0:	80 91 e8 00 	lds	r24, 0x00E8
    16c4:	87 7f       	andi	r24, 0xF7	; 247
    16c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16ca:	90 93 64 01 	sts	0x0164, r25
    16ce:	12 dd       	rcall	.-1500   	; 0x10f4 <Endpoint_ClearStatusStage>
    16d0:	80 91 64 01 	lds	r24, 0x0164
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16d4:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <USB_Device_ProcessControlRequest+0x26a>
    16d8:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    16dc:	87 ff       	sbrs	r24, 7
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <USB_Device_ProcessControlRequest+0x26e>
    16e0:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <USB_Device_ProcessControlRequest+0x270>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16e6:	80 93 68 01 	sts	0x0168, r24
    16ea:	0e 94 ed 00 	call	0x1da	; 0x1da <EVENT_USB_Device_ConfigurationChanged>
    16ee:	80 91 e8 00 	lds	r24, 0x00E8
    16f2:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <USB_Device_ProcessControlRequest+0x294>
    16f6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16fa:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    16fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1700:	80 91 eb 00 	lds	r24, 0x00EB
    1704:	80 62       	ori	r24, 0x20	; 32
    1706:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    170a:	aa 96       	adiw	r28, 0x2a	; 42
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	08 95       	ret

0000171e <USB_Event_Stub>:
    171e:	08 95       	ret

00001720 <USB_USBTask>:
    1720:	cf 93       	push	r28
    1722:	80 91 68 01 	lds	r24, 0x0168
    1726:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1728:	a9 f0       	breq	.+42     	; 0x1754 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    172a:	80 91 e9 00 	lds	r24, 0x00E9
    172e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1730:	90 91 ec 00 	lds	r25, 0x00EC
    1734:	90 ff       	sbrs	r25, 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <USB_USBTask+0x1c>
    1738:	90 e8       	ldi	r25, 0x80	; 128
    173a:	01 c0       	rjmp	.+2      	; 0x173e <USB_USBTask+0x1e>
    173c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    173e:	c9 2f       	mov	r28, r25
    1740:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1742:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1746:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    174a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    174c:	94 de       	rcall	.-728    	; 0x1476 <USB_Device_ProcessControlRequest>
    174e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1750:	c0 93 e9 00 	sts	0x00E9, r28
    1754:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1756:	08 95       	ret

00001758 <_exit>:
    1758:	f8 94       	cli

0000175a <__stop_program>:
    175a:	ff cf       	rjmp	.-2      	; 0x175a <__stop_program>

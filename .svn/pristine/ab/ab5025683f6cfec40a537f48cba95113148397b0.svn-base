
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002222  000022b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  000022c8  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005b9a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  00005bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000630b  00000000  00000000  00005f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cd9  00000000  00000000  0000c29e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028a2  00000000  00000000  0000df77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  0001081c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027c1  00000000  00000000  000112cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003fe7  00000000  00000000  00013a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000460  00000000  00000000  00017a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c1       	rjmp	.+722    	; 0x2d4 <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_10>
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c1       	rjmp	.+734    	; 0x310 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c1       	rjmp	.+682    	; 0x310 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c1       	rjmp	.+678    	; 0x310 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3f c1       	rjmp	.+638    	; 0x310 <__bad_interrupt>
      92:	00 00       	nop
      94:	3d c1       	rjmp	.+634    	; 0x310 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4586>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4579>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4574>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4572>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4570>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4b 65 79 62     Not a valid Keyb
     15e:	6f 61 72 64 2e 1b 5b 33 37 6d 00                    oard..[37m.

00000169 <__c.4568>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4566>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4564>:
     1ad:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1bd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c7 <__c.4562>:
     1c7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1d7:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1e7:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001f1 <__c.4560>:
     1f1:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     201:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020b <__c.4558>:
     20b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21b:	69 63 65 2e 0d 0a 00                                ice....

00000222 <__c.4556>:
     222:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     232:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     242:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024c <__c.4553>:
     24c:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25c:	61 74 61 2e 0d 0a 00                                ata....

00000263 <__c.4548>:
     263:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     273:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     283:	00                                                  .

00000284 <__c.4543>:
     284:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     294:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002a1 <__c.4534>:
     2a1:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
     2b1:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2c1:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2d1:	37 6d 00                                            7m.

000002d4 <__ctors_end>:
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d0 e2       	ldi	r29, 0x20	; 32
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b1 e0       	ldi	r27, 0x01	; 1
     2e6:	e2 e2       	ldi	r30, 0x22	; 34
     2e8:	f2 e2       	ldi	r31, 0x22	; 34
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a2 31       	cpi	r26, 0x12	; 18
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	15 e0       	ldi	r17, 0x05	; 5
     2fc:	a2 e1       	ldi	r26, 0x12	; 18
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	af 30       	cpi	r26, 0x0F	; 15
     306:	b1 07       	cpc	r27, r17
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	8f d1       	rcall	.+798    	; 0x62a <main>
     30c:	0c 94 0f 11 	jmp	0x221e	; 0x221e <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     312:	9b b1       	in	r25, 0x0b	; 11
     314:	9f 70       	andi	r25, 0x0F	; 15
     316:	98 2b       	or	r25, r24
     318:	9b b9       	out	0x0b, r25	; 11
     31a:	08 95       	ret

0000031c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     31c:	84 b7       	in	r24, 0x34	; 52
     31e:	87 7f       	andi	r24, 0xF7	; 247
     320:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     322:	88 e1       	ldi	r24, 0x18	; 24
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	80 93 60 00 	sts	0x0060, r24
     32c:	10 92 60 00 	sts	0x0060, r1
     330:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	80 e8       	ldi	r24, 0x80	; 128
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	80 93 61 00 	sts	0x0061, r24
     33e:	90 93 61 00 	sts	0x0061, r25
     342:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     344:	83 e3       	ldi	r24, 0x33	; 51
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	90 93 cd 00 	sts	0x00CD, r25
     34c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     356:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     360:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     362:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     364:	8a b1       	in	r24, 0x0a	; 10
     366:	80 6f       	ori	r24, 0xF0	; 240
     368:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     36a:	8b b1       	in	r24, 0x0b	; 11
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     370:	0e 94 3d 0b 	call	0x167a	; 0x167a <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <Serial_CreateStream>

0000037c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     384:	80 ea       	ldi	r24, 0xA0	; 160
     386:	c5 cf       	rjmp	.-118    	; 0x312 <LEDs_SetAllLEDs>

00000388 <EVENT_USB_Host_DeviceUnattached>:
     388:	83 e6       	ldi	r24, 0x63	; 99
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     390:	80 e1       	ldi	r24, 0x10	; 16
     392:	bf cf       	rjmp	.-130    	; 0x312 <LEDs_SetAllLEDs>

00000394 <EVENT_USB_Host_DeviceEnumerationComplete>:
     394:	cf 93       	push	r28
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     396:	8c e4       	ldi	r24, 0x4C	; 76
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     39e:	74 d1       	rcall	.+744    	; 0x688 <ProcessConfigurationDescriptor>
     3a0:	c8 2f       	mov	r28, r24
     3a2:	88 23       	and	r24, r24
     3a4:	b9 f0       	breq	.+46     	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     3a6:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     3aa:	82 e2       	ldi	r24, 0x22	; 34
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     3b0:	8b e0       	ldi	r24, 0x0B	; 11
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
     3b8:	1f 92       	push	r1

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ba:	cf 93       	push	r28
     3bc:	81 ef       	ldi	r24, 0xF1	; 241
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <printf_P>
     3c8:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	80 e9       	ldi	r24, 0x90	; 144
     3d2:	47 c0       	rjmp	.+142    	; 0x462 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3d6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <USB_Host_SetDeviceConfiguration>
     3da:	c8 2f       	mov	r28, r24
     3dc:	88 23       	and	r24, r24
     3de:	49 f0       	breq	.+18     	; 0x3f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     3e0:	87 ec       	ldi	r24, 0xC7	; 199

	{
		puts_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"));
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
     3e8:	1f 92       	push	r1
		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ea:	cf 93       	push	r28
     3ec:	8d ea       	ldi	r24, 0xAD	; 173
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	e7 cf       	rjmp	.-50     	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     3f2:	80 91 ef 04 	lds	r24, 0x04EF

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     3f6:	8f 93       	push	r24
     3f8:	80 91 ee 04 	lds	r24, 0x04EE
     3fc:	8f 93       	push	r24
     3fe:	84 e8       	ldi	r24, 0x84	; 132
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <printf_P>
     40a:	d9 d1       	rcall	.+946    	; 0x7be <GetHIDReportData>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     40c:	c8 2f       	mov	r28, r24
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	88 23       	and	r24, r24
     418:	f9 f0       	breq	.+62     	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
     41a:	89 e6       	ldi	r24, 0x69	; 105
     41c:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     41e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
     422:	80 91 15 01 	lds	r24, 0x0115

		if (!(HIDReportInfo.TotalReportItems))
     426:	81 11       	cpse	r24, r1
     428:	05 c0       	rjmp	.+10     	; 0x434 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     42a:	8e e4       	ldi	r24, 0x4E	; 78
     42c:	91 e0       	ldi	r25, 0x01	; 1
			puts_P(PSTR("Not a valid Keyboard." ESC_FG_WHITE));
     42e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
     432:	0c c0       	rjmp	.+24     	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
     434:	1f 92       	push	r1
     436:	cf 93       	push	r28
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     438:	84 e3       	ldi	r24, 0x34	; 52
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <printf_P>
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	80 e9       	ldi	r24, 0x90	; 144
     44e:	61 df       	rcall	.-318    	; 0x312 <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	cf 91       	pop	r28
     454:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <USB_Host_SetDeviceConfiguration>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     458:	8d e1       	ldi	r24, 0x1D	; 29
			puts_P(PSTR("Not a valid Keyboard." ESC_FG_WHITE));
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     460:	80 e6       	ldi	r24, 0x60	; 96
     462:	cf 91       	pop	r28
     464:	56 cf       	rjmp	.-340    	; 0x312 <LEDs_SetAllLEDs>

00000466 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     466:	cf 93       	push	r28
}
     468:	df 93       	push	r29
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     46e:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     476:	1f 92       	push	r1
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	8f 93       	push	r24
     47c:	8e ee       	ldi	r24, 0xEE	; 238
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	43 df       	rcall	.-378    	; 0x312 <LEDs_SetAllLEDs>
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	ff cf       	rjmp	.-2      	; 0x494 <EVENT_USB_Host_HostError+0x2e>

00000496 <EVENT_USB_Host_DeviceEnumerationFailed>:
     496:	90 91 fa 04 	lds	r25, 0x04FA
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     49a:	1f 92       	push	r1
     49c:	9f 93       	push	r25
     49e:	1f 92       	push	r1
     4a0:	6f 93       	push	r22
     4a2:	1f 92       	push	r1
     4a4:	8f 93       	push	r24
     4a6:	88 e9       	ldi	r24, 0x98	; 152
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b2:	8d b7       	in	r24, 0x3d	; 61
     4b4:	9e b7       	in	r25, 0x3e	; 62
     4b6:	08 96       	adiw	r24, 0x08	; 8
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	9e bf       	out	0x3e, r25	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	8d bf       	out	0x3d, r24	; 61
     4c2:	80 e9       	ldi	r24, 0x90	; 144
     4c4:	26 cf       	rjmp	.-436    	; 0x312 <LEDs_SetAllLEDs>

000004c6 <ProcessKeyboardReport>:
     4c6:	ef 92       	push	r14
 *  as required and prints pressed characters to the serial port. Each time a key is typed, a board LED is toggled.
 *
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	8c 01       	movw	r16, r24
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4d4:	f1 2c       	mov	r15, r1
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4d6:	8a e2       	ldi	r24, 0x2A	; 42
     4d8:	e8 2e       	mov	r14, r24
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4da:	80 91 15 01 	lds	r24, 0x0115
     4de:	f8 16       	cp	r15, r24
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <ProcessKeyboardReport+0x1e>
     4e2:	48 c0       	rjmp	.+144    	; 0x574 <ProcessKeyboardReport+0xae>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4e4:	ef 9c       	mul	r14, r15
     4e6:	e0 01       	movw	r28, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	ca 5e       	subi	r28, 0xEA	; 234
     4ec:	de 4f       	sbci	r29, 0xFE	; 254

		/* Check if the current report item is a keyboard scan-code */
		if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     4ee:	89 85       	ldd	r24, Y+9	; 0x09
     4f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f2:	07 97       	sbiw	r24, 0x07	; 7
     4f4:	69 f5       	brne	.+90     	; 0x550 <ProcessKeyboardReport+0x8a>
     4f6:	88 85       	ldd	r24, Y+8	; 0x08
     4f8:	88 30       	cpi	r24, 0x08	; 8
     4fa:	51 f5       	brne	.+84     	; 0x550 <ProcessKeyboardReport+0x8a>
			(ReportItem->Attributes.BitSize         == 8)                   &&
     4fc:	4e 89       	ldd	r20, Y+22	; 0x16
     4fe:	5f 89       	ldd	r21, Y+23	; 0x17
     500:	68 8d       	ldd	r22, Y+24	; 0x18
     502:	79 8d       	ldd	r23, Y+25	; 0x19
     504:	42 30       	cpi	r20, 0x02	; 2
     506:	51 05       	cpc	r21, r1
     508:	61 05       	cpc	r22, r1
     50a:	71 05       	cpc	r23, r1
     50c:	08 f1       	brcs	.+66     	; 0x550 <ProcessKeyboardReport+0x8a>
			(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	81 11       	cpse	r24, r1
     512:	1e c0       	rjmp	.+60     	; 0x550 <ProcessKeyboardReport+0x8a>
			(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
		{
			/* Retrieve the keyboard scan-code from the report data retrieved from the device */
			bool FoundData = USB_GetHIDReportItemInfo(KeyboardReport, ReportItem);
     514:	be 01       	movw	r22, r28
     516:	c8 01       	movw	r24, r16
     518:	32 d5       	rcall	.+2660   	; 0xf7e <USB_GetHIDReportItemInfo>
     51a:	88 23       	and	r24, r24

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     51c:	c9 f0       	breq	.+50     	; 0x550 <ProcessKeyboardReport+0x8a>
     51e:	8a a1       	ldd	r24, Y+34	; 0x22
			  continue;

			/* Key code is an unsigned char in length, cast to the appropriate type */
			uint8_t KeyCode = (uint8_t)ReportItem->Value;
     520:	88 23       	and	r24, r24

			/* If scan-code is non-zero, a key is being pressed */
			if (KeyCode)
     522:	41 f1       	breq	.+80     	; 0x574 <ProcessKeyboardReport+0xae>
     524:	90 e2       	ldi	r25, 0x20	; 32
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     526:	99 b9       	out	0x09, r25	; 9
     528:	9c ef       	ldi	r25, 0xFC	; 252
				LEDs_ToggleLEDs(LEDS_LED2);

				char PressedKey = 0;

				/* Retrieve pressed key character if alphanumeric */
				if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     52a:	98 0f       	add	r25, r24
     52c:	9a 31       	cpi	r25, 0x1A	; 26
     52e:	10 f4       	brcc	.+4      	; 0x534 <ProcessKeyboardReport+0x6e>
     530:	83 5c       	subi	r24, 0xC3	; 195
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     532:	13 c0       	rjmp	.+38     	; 0x55a <ProcessKeyboardReport+0x94>
     534:	92 ee       	ldi	r25, 0xE2	; 226
				}
				else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     536:	98 0f       	add	r25, r24
     538:	99 30       	cpi	r25, 0x09	; 9
     53a:	10 f4       	brcc	.+4      	; 0x540 <ProcessKeyboardReport+0x7a>
     53c:	8d 5e       	subi	r24, 0xED	; 237
						 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     53e:	0d c0       	rjmp	.+26     	; 0x55a <ProcessKeyboardReport+0x94>
     540:	87 32       	cpi	r24, 0x27	; 39
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     542:	41 f0       	breq	.+16     	; 0x554 <ProcessKeyboardReport+0x8e>
     544:	8c 32       	cpi	r24, 0x2C	; 44
				{
					PressedKey = '0';
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     546:	41 f0       	breq	.+16     	; 0x558 <ProcessKeyboardReport+0x92>
     548:	88 32       	cpi	r24, 0x28	; 40
				{
					PressedKey = ' ';
				}
				else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     54a:	a1 f4       	brne	.+40     	; 0x574 <ProcessKeyboardReport+0xae>
     54c:	8a e0       	ldi	r24, 0x0A	; 10
				{
					PressedKey = '\n';
     54e:	05 c0       	rjmp	.+10     	; 0x55a <ProcessKeyboardReport+0x94>
     550:	f3 94       	inc	r15
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     552:	c3 cf       	rjmp	.-122    	; 0x4da <ProcessKeyboardReport+0x14>
     554:	80 e3       	ldi	r24, 0x30	; 48
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
				{
					PressedKey = '0';
     556:	01 c0       	rjmp	.+2      	; 0x55a <ProcessKeyboardReport+0x94>
     558:	80 e2       	ldi	r24, 0x20	; 32
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
				{
					PressedKey = ' ';
     55a:	60 91 0b 05 	lds	r22, 0x050B
					PressedKey = '\n';
				}

				/* Print the pressed key character out through the serial port if valid */
				if (PressedKey)
				  putchar(PressedKey);
     55e:	70 91 0c 05 	lds	r23, 0x050C
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	df 91       	pop	r29

			/* Once a scan-code is found, stop scanning through the report items */
			break;
		}
	}
}
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <fputc>
					PressedKey = '\n';
				}

				/* Print the pressed key character out through the serial port if valid */
				if (PressedKey)
				  putchar(PressedKey);
     574:	df 91       	pop	r29

			/* Once a scan-code is found, stop scanning through the report items */
			break;
		}
	}
}
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	08 95       	ret

00000582 <KeyboardHost_Task>:
     582:	ef 92       	push	r14

/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     592:	ed b6       	in	r14, 0x3d	; 61
     594:	fe b6       	in	r15, 0x3e	; 62
/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     596:	80 91 fa 04 	lds	r24, 0x04FA
     59a:	8b 30       	cpi	r24, 0x0B	; 11
     59c:	d1 f5       	brne	.+116    	; 0x612 <KeyboardHost_Task+0x90>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5a4:	80 91 a9 00 	lds	r24, 0x00A9
     5a8:	8f 7b       	andi	r24, 0xBF	; 191
     5aa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5ae:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze keyboard data pipe */
	Pipe_SelectPipe(KEYBOARD_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     5b2:	80 ff       	sbrs	r24, 0
     5b4:	29 c0       	rjmp	.+82     	; 0x608 <KeyboardHost_Task+0x86>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5b6:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached keyboard */
		if (Pipe_IsReadWriteAllowed())
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	20 c0       	rjmp	.+64     	; 0x5fe <KeyboardHost_Task+0x7c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     5be:	80 91 f6 00 	lds	r24, 0x00F6
     5c2:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t KeyboardReport[Pipe_BytesInPipe()];
     5c6:	2d b7       	in	r18, 0x3d	; 61
     5c8:	3e b7       	in	r19, 0x3e	; 62
     5ca:	28 1b       	sub	r18, r24
     5cc:	39 0b       	sbc	r19, r25
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	3e bf       	out	0x3e, r19	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	2d bf       	out	0x3d, r18	; 61
     5d8:	0d b7       	in	r16, 0x3d	; 61
     5da:	1e b7       	in	r17, 0x3e	; 62
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	60 91 f6 00 	lds	r22, 0x00F6
     5e4:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the keyboard report */
			Pipe_Read_Stream_LE(KeyboardReport, Pipe_BytesInPipe(), NULL);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	c8 01       	movw	r24, r16
     5ee:	e6 d6       	rcall	.+3532   	; 0x13bc <Pipe_Read_Stream_LE>
     5f0:	c8 01       	movw	r24, r16

			/* Process the read in keyboard report from the device */
			ProcessKeyboardReport(KeyboardReport);
     5f2:	69 df       	rcall	.-302    	; 0x4c6 <ProcessKeyboardReport>
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	fe be       	out	0x3e, r15	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	ed be       	out	0x3d, r14	; 61
     5fe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     602:	8e 77       	andi	r24, 0x7E	; 126
     604:	80 93 a6 00 	sts	0x00A6, r24
     608:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	80 93 a9 00 	sts	0x00A9, r24
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     616:	fe be       	out	0x3e, r15	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	ed be       	out	0x3d, r14	; 61
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <main>:
     62a:	78 de       	rcall	.-784    	; 0x31c <SetupHardware>
     62c:	81 ea       	ldi	r24, 0xA1	; 161
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <puts_P>
     634:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     636:	6d de       	rcall	.-806    	; 0x312 <LEDs_SetAllLEDs>
     638:	78 94       	sei
     63a:	a3 df       	rcall	.-186    	; 0x582 <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     63c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     640:	fc cf       	rjmp	.-8      	; 0x63a <main+0x10>

00000642 <DComp_NextKeyboardInterface>:
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     642:	fc 01       	movw	r30, r24
     644:	21 81       	ldd	r18, Z+1	; 0x01
     646:	24 30       	cpi	r18, 0x04	; 4
     648:	29 f4       	brne	.+10     	; 0x654 <DComp_NextKeyboardInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     64a:	85 81       	ldd	r24, Z+5	; 0x05
     64c:	83 30       	cpi	r24, 0x03	; 3
     64e:	11 f4       	brne	.+4      	; 0x654 <DComp_NextKeyboardInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     654:	82 e0       	ldi	r24, 0x02	; 2
}
     656:	08 95       	ret

00000658 <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     658:	fc 01       	movw	r30, r24
     65a:	81 81       	ldd	r24, Z+1	; 0x01
     65c:	85 30       	cpi	r24, 0x05	; 5
     65e:	21 f0       	breq	.+8      	; 0x668 <DComp_NextKeyboardInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	21 f4       	brne	.+8      	; 0x66c <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	08 95       	ret
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     66c:	82 e0       	ldi	r24, 0x02	; 2
}
     66e:	08 95       	ret

00000670 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     670:	fc 01       	movw	r30, r24
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	81 32       	cpi	r24, 0x21	; 33
     676:	21 f0       	breq	.+8      	; 0x680 <DComp_NextHID+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     678:	84 30       	cpi	r24, 0x04	; 4
     67a:	21 f4       	brne	.+8      	; 0x684 <DComp_NextHID+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	08 95       	ret
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     684:	82 e0       	ldi	r24, 0x02	; 2
}
     686:	08 95       	ret

00000688 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref KeyboardHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	c4 50       	subi	r28, 0x04	; 4
     69e:	d2 40       	sbci	r29, 0x02	; 2
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6aa:	ae 01       	movw	r20, r28
     6ac:	4f 5f       	subi	r20, 0xFF	; 255
     6ae:	5f 4f       	sbci	r21, 0xFF	; 255
     6b0:	cd 5f       	subi	r28, 0xFD	; 253
     6b2:	dd 4f       	sbci	r29, 0xFD	; 253
     6b4:	59 83       	std	Y+1, r21	; 0x01
     6b6:	48 83       	st	Y, r20
     6b8:	c3 50       	subi	r28, 0x03	; 3
     6ba:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	32 e0       	ldi	r19, 0x02	; 2
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7d 4f       	sbci	r23, 0xFD	; 253
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 0d 0c 	call	0x181a	; 0x181a <USB_Host_GetDeviceConfigDescriptor>
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <ProcessConfigurationDescriptor+0x4a>
     6d0:	65 c0       	rjmp	.+202    	; 0x79c <ProcessConfigurationDescriptor+0x114>
     6d2:	86 30       	cpi	r24, 0x06	; 6
     6d4:	21 f0       	breq	.+8      	; 0x6de <ProcessConfigurationDescriptor+0x56>
     6d6:	88 23       	and	r24, r24
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <ProcessConfigurationDescriptor+0x5a>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	60 c0       	rjmp	.+192    	; 0x79e <ProcessConfigurationDescriptor+0x116>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	5e c0       	rjmp	.+188    	; 0x79e <ProcessConfigurationDescriptor+0x116>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6e2:	c1 2c       	mov	r12, r1
     6e4:	d1 2c       	mov	r13, r1
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     6ea:	01 15       	cp	r16, r1
     6ec:	11 05       	cpc	r17, r1
     6ee:	69 f4       	brne	.+26     	; 0x70a <ProcessConfigurationDescriptor+0x82>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6f0:	41 e2       	ldi	r20, 0x21	; 33
     6f2:	53 e0       	ldi	r21, 0x03	; 3
     6f4:	be 01       	movw	r22, r28
     6f6:	6d 5f       	subi	r22, 0xFD	; 253
     6f8:	7d 4f       	sbci	r23, 0xFD	; 253
     6fa:	ce 01       	movw	r24, r28
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	9d 4f       	sbci	r25, 0xFD	; 253
     700:	0e 94 67 0c 	call	0x18ce	; 0x18ce <USB_GetNextDescriptorComp>
     704:	88 23       	and	r24, r24
     706:	81 f0       	breq	.+32     	; 0x728 <ProcessConfigurationDescriptor+0xa0>
     708:	0d c0       	rjmp	.+26     	; 0x724 <ProcessConfigurationDescriptor+0x9c>

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     70a:	4c e2       	ldi	r20, 0x2C	; 44
     70c:	53 e0       	ldi	r21, 0x03	; 3
     70e:	be 01       	movw	r22, r28
     710:	6d 5f       	subi	r22, 0xFD	; 253
     712:	7d 4f       	sbci	r23, 0xFD	; 253
     714:	ce 01       	movw	r24, r28
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	9d 4f       	sbci	r25, 0xFD	; 253
     71a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     71e:	81 11       	cpse	r24, r1
     720:	e7 cf       	rjmp	.-50     	; 0x6f0 <ProcessConfigurationDescriptor+0x68>
     722:	1b c0       	rjmp	.+54     	; 0x75a <ProcessConfigurationDescriptor+0xd2>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextKeyboardInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	3b c0       	rjmp	.+118    	; 0x79e <ProcessConfigurationDescriptor+0x116>
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     728:	cd 5f       	subi	r28, 0xFD	; 253
     72a:	dd 4f       	sbci	r29, 0xFD	; 253
     72c:	08 81       	ld	r16, Y
     72e:	19 81       	ldd	r17, Y+1	; 0x01
     730:	c3 50       	subi	r28, 0x03	; 3
     732:	d2 40       	sbci	r29, 0x02	; 2

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     734:	48 e3       	ldi	r20, 0x38	; 56
     736:	53 e0       	ldi	r21, 0x03	; 3
     738:	be 01       	movw	r22, r28
     73a:	6d 5f       	subi	r22, 0xFD	; 253
     73c:	7d 4f       	sbci	r23, 0xFD	; 253
     73e:	ce 01       	movw	r24, r28
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	9d 4f       	sbci	r25, 0xFD	; 253
     744:	0e 94 67 0c 	call	0x18ce	; 0x18ce <USB_GetNextDescriptorComp>
     748:	81 11       	cpse	r24, r1
     74a:	ec cf       	rjmp	.-40     	; 0x724 <ProcessConfigurationDescriptor+0x9c>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     74c:	cd 5f       	subi	r28, 0xFD	; 253
     74e:	dd 4f       	sbci	r29, 0xFD	; 253
     750:	c8 80       	ld	r12, Y
     752:	d9 80       	ldd	r13, Y+1	; 0x01
     754:	c3 50       	subi	r28, 0x03	; 3
     756:	d2 40       	sbci	r29, 0x02	; 2

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     758:	c8 cf       	rjmp	.-112    	; 0x6ea <ProcessConfigurationDescriptor+0x62>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     75a:	cd 5f       	subi	r28, 0xFD	; 253
     75c:	dd 4f       	sbci	r29, 0xFD	; 253
     75e:	e8 80       	ld	r14, Y
     760:	f9 80       	ldd	r15, Y+1	; 0x01
     762:	c3 50       	subi	r28, 0x03	; 3
     764:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     766:	f7 01       	movw	r30, r14
     768:	42 81       	ldd	r20, Z+2	; 0x02
     76a:	47 ff       	sbrs	r20, 7
     76c:	be cf       	rjmp	.-132    	; 0x6ea <ProcessConfigurationDescriptor+0x62>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     76e:	e1 14       	cp	r14, r1
     770:	f1 04       	cpc	r15, r1
     772:	09 f4       	brne	.+2      	; 0x776 <ProcessConfigurationDescriptor+0xee>
     774:	ba cf       	rjmp	.-140    	; 0x6ea <ProcessConfigurationDescriptor+0x62>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     776:	24 81       	ldd	r18, Z+4	; 0x04
     778:	35 81       	ldd	r19, Z+5	; 0x05
     77a:	01 e0       	ldi	r16, 0x01	; 1
     77c:	63 e0       	ldi	r22, 0x03	; 3
     77e:	81 e8       	ldi	r24, 0x81	; 129
     780:	6a d6       	rcall	.+3284   	; 0x1456 <Pipe_ConfigurePipe>
     782:	f7 01       	movw	r30, r14
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     784:	86 81       	ldd	r24, Z+6	; 0x06
     786:	80 93 ad 00 	sts	0x00AD, r24
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     78a:	f6 01       	movw	r30, r12

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     78c:	87 81       	ldd	r24, Z+7	; 0x07
     78e:	90 85       	ldd	r25, Z+8	; 0x08
     790:	90 93 ef 04 	sts	0x04EF, r25
     794:	80 93 ee 04 	sts	0x04EE, r24
     798:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     79a:	01 c0       	rjmp	.+2      	; 0x79e <ProcessConfigurationDescriptor+0x116>
     79c:	82 e0       	ldi	r24, 0x02	; 2
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     79e:	cc 5f       	subi	r28, 0xFC	; 252
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7a0:	dd 4f       	sbci	r29, 0xFD	; 253
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     7ce:	ed b6       	in	r14, 0x3d	; 61
     7d0:	fe b6       	in	r15, 0x3e	; 62
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     7d2:	80 91 ee 04 	lds	r24, 0x04EE
     7d6:	90 91 ef 04 	lds	r25, 0x04EF
     7da:	2d b7       	in	r18, 0x3d	; 61
     7dc:	3e b7       	in	r19, 0x3e	; 62
     7de:	28 1b       	sub	r18, r24
     7e0:	39 0b       	sbc	r19, r25
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	3e bf       	out	0x3e, r19	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	2d bf       	out	0x3d, r18	; 61
     7ec:	0d b7       	in	r16, 0x3d	; 61
     7ee:	1e b7       	in	r17, 0x3e	; 62
     7f0:	0f 5f       	subi	r16, 0xFF	; 255
     7f2:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     7f4:	21 e8       	ldi	r18, 0x81	; 129
     7f6:	20 93 f2 04 	sts	0x04F2, r18
     7fa:	26 e0       	ldi	r18, 0x06	; 6
     7fc:	20 93 f3 04 	sts	0x04F3, r18
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	32 e2       	ldi	r19, 0x22	; 34
     804:	30 93 f5 04 	sts	0x04F5, r19
     808:	20 93 f4 04 	sts	0x04F4, r18
     80c:	10 92 f7 04 	sts	0x04F7, r1
     810:	10 92 f6 04 	sts	0x04F6, r1
     814:	90 93 f9 04 	sts	0x04F9, r25
     818:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     81c:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     820:	c8 01       	movw	r24, r16
     822:	0e 94 c1 0c 	call	0x1982	; 0x1982 <USB_Host_SendControlRequest>
     826:	81 11       	cpse	r24, r1
     828:	0d c0       	rjmp	.+26     	; 0x844 <GetHIDReportData+0x86>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     82a:	60 91 ee 04 	lds	r22, 0x04EE
     82e:	70 91 ef 04 	lds	r23, 0x04EF
     832:	45 e1       	ldi	r20, 0x15	; 21
     834:	51 e0       	ldi	r21, 0x01	; 1
     836:	c8 01       	movw	r24, r16
     838:	1d d0       	rcall	.+58     	; 0x874 <USB_ProcessHIDReport>
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	81 11       	cpse	r24, r1
     83e:	03 c0       	rjmp	.+6      	; 0x846 <GetHIDReportData+0x88>
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	01 c0       	rjmp	.+2      	; 0x846 <GetHIDReportData+0x88>
     844:	92 e0       	ldi	r25, 0x02	; 2
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     846:	89 2f       	mov	r24, r25
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	fe be       	out	0x3e, r15	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	ed be       	out	0x3d, r14	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <CALLBACK_HIDParser_FilterHIDReportItem>:
     860:	41 e0       	ldi	r20, 0x01	; 1
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     862:	fc 01       	movw	r30, r24
     864:	21 85       	ldd	r18, Z+9	; 0x09
     866:	32 85       	ldd	r19, Z+10	; 0x0a
     868:	27 30       	cpi	r18, 0x07	; 7
     86a:	31 05       	cpc	r19, r1
     86c:	09 f0       	breq	.+2      	; 0x870 <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     86e:	40 e0       	ldi	r20, 0x00	; 0
}
     870:	84 2f       	mov	r24, r20
     872:	08 95       	ret

00000874 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     874:	2f 92       	push	r2
     876:	3f 92       	push	r3
     878:	4f 92       	push	r4
     87a:	5f 92       	push	r5
     87c:	6f 92       	push	r6
     87e:	7f 92       	push	r7
     880:	8f 92       	push	r8
     882:	9f 92       	push	r9
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	cd 58       	subi	r28, 0x8D	; 141
     89e:	d1 09       	sbc	r29, r1
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     8ac:	9a 01       	movw	r18, r20
     8ae:	20 57       	subi	r18, 0x70	; 112
     8b0:	3c 4f       	sbci	r19, 0xFC	; 252
     8b2:	e8 96       	adiw	r28, 0x38	; 56
     8b4:	3f af       	std	Y+63, r19	; 0x3f
     8b6:	2e af       	std	Y+62, r18	; 0x3e
     8b8:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     8ba:	89 ed       	ldi	r24, 0xD9	; 217
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	da 01       	movw	r26, r20
     8c0:	fc 01       	movw	r30, r24
     8c2:	1d 92       	st	X+, r1
     8c4:	31 97       	sbiw	r30, 0x01	; 1
     8c6:	e9 f7       	brne	.-6      	; 0x8c2 <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     8c8:	fe 01       	movw	r30, r28
     8ca:	31 96       	adiw	r30, 0x01	; 1
     8cc:	8c e1       	ldi	r24, 0x1C	; 28
     8ce:	df 01       	movw	r26, r30
     8d0:	1d 92       	st	X+, r1
     8d2:	8a 95       	dec	r24
     8d4:	e9 f7       	brne	.-6      	; 0x8d0 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	d9 01       	movw	r26, r18
     8da:	1d 92       	st	X+, r1
     8dc:	8a 95       	dec	r24
     8de:	e9 f7       	brne	.-6      	; 0x8da <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     8e0:	9a 01       	movw	r18, r20
     8e2:	21 57       	subi	r18, 0x71	; 113
     8e4:	3c 4f       	sbci	r19, 0xFC	; 252
     8e6:	eb 96       	adiw	r28, 0x3b	; 59
     8e8:	3f af       	std	Y+63, r19	; 0x3f
     8ea:	2e af       	std	Y+62, r18	; 0x3e
     8ec:	eb 97       	sbiw	r28, 0x3b	; 59
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	d9 01       	movw	r26, r18
     8f2:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     8f4:	41 2c       	mov	r4, r1
     8f6:	51 2c       	mov	r5, r1
     8f8:	32 01       	movw	r6, r4
     8fa:	81 2c       	mov	r8, r1
     8fc:	91 2c       	mov	r9, r1
     8fe:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     900:	e4 96       	adiw	r28, 0x34	; 52
     902:	1f ae       	std	Y+63, r1	; 0x3f
     904:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     906:	e6 96       	adiw	r28, 0x36	; 54
     908:	1f ae       	std	Y+63, r1	; 0x3f
     90a:	1e ae       	std	Y+62, r1	; 0x3e
     90c:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     90e:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     910:	9a 01       	movw	r18, r20
     912:	2a 52       	subi	r18, 0x2A	; 42
     914:	3c 4f       	sbci	r19, 0xFC	; 252
     916:	ed 96       	adiw	r28, 0x3d	; 61
     918:	3f af       	std	Y+63, r19	; 0x3f
     91a:	2e af       	std	Y+62, r18	; 0x3e
     91c:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     91e:	9a 01       	movw	r18, r20
     920:	28 57       	subi	r18, 0x78	; 120
     922:	3c 4f       	sbci	r19, 0xFC	; 252
     924:	cd 57       	subi	r28, 0x7D	; 125
     926:	df 4f       	sbci	r29, 0xFF	; 255
     928:	39 83       	std	Y+1, r19	; 0x01
     92a:	28 83       	st	Y, r18
     92c:	c3 58       	subi	r28, 0x83	; 131
     92e:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     930:	9a 01       	movw	r18, r20
     932:	28 52       	subi	r18, 0x28	; 40
     934:	3c 4f       	sbci	r19, 0xFC	; 252
     936:	ef 96       	adiw	r28, 0x3f	; 63
     938:	3f af       	std	Y+63, r19	; 0x3f
     93a:	2e af       	std	Y+62, r18	; 0x3e
     93c:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     93e:	cb 57       	subi	r28, 0x7B	; 123
     940:	df 4f       	sbci	r29, 0xFF	; 255
     942:	b9 83       	std	Y+1, r27	; 0x01
     944:	a8 83       	st	Y, r26
     946:	c5 58       	subi	r28, 0x85	; 133
     948:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     94a:	61 15       	cp	r22, r1
     94c:	71 05       	cpc	r23, r1
     94e:	09 f4       	brne	.+2      	; 0x952 <USB_ProcessHIDReport+0xde>
     950:	e9 c2       	rjmp	.+1490   	; 0xf24 <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     952:	d1 01       	movw	r26, r2
     954:	bc 91       	ld	r27, X
     956:	e9 96       	adiw	r28, 0x39	; 57
     958:	bf af       	std	Y+63, r27	; 0x3f
     95a:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     95c:	8b 2f       	mov	r24, r27
     95e:	83 70       	andi	r24, 0x03	; 3
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	81 f1       	breq	.+96     	; 0x9c4 <USB_ProcessHIDReport+0x150>
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	59 f0       	breq	.+22     	; 0x97e <USB_ProcessHIDReport+0x10a>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	d9 f1       	breq	.+118    	; 0x9e2 <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     96c:	ef ef       	ldi	r30, 0xFF	; 255
     96e:	2e 1a       	sub	r2, r30
     970:	3e 0a       	sbc	r3, r30
		ReportSize--;
     972:	61 50       	subi	r22, 0x01	; 1
     974:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     976:	c1 2c       	mov	r12, r1
     978:	d1 2c       	mov	r13, r1
     97a:	76 01       	movw	r14, r12
     97c:	3d c0       	rjmp	.+122    	; 0x9f8 <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     97e:	d1 01       	movw	r26, r2
     980:	14 96       	adiw	r26, 0x04	; 4
     982:	8c 91       	ld	r24, X
     984:	14 97       	sbiw	r26, 0x04	; 4
     986:	13 96       	adiw	r26, 0x03	; 3
     988:	cc 90       	ld	r12, X
     98a:	13 97       	sbiw	r26, 0x03	; 3
     98c:	d1 2c       	mov	r13, r1
     98e:	e1 2c       	mov	r14, r1
     990:	f1 2c       	mov	r15, r1
     992:	76 01       	movw	r14, r12
     994:	dd 24       	eor	r13, r13
     996:	cc 24       	eor	r12, r12
     998:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	8c 91       	ld	r24, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9a0:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	8c 91       	ld	r24, X
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	98 2f       	mov	r25, r24
     9aa:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	c8 2a       	or	r12, r24
     9b2:	d9 2a       	or	r13, r25
     9b4:	ea 2a       	or	r14, r26
     9b6:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     9b8:	65 50       	subi	r22, 0x05	; 5
     9ba:	71 09       	sbc	r23, r1
				ReportData     += 4;
     9bc:	b5 e0       	ldi	r27, 0x05	; 5
     9be:	2b 0e       	add	r2, r27
     9c0:	31 1c       	adc	r3, r1
				break;
     9c2:	1a c0       	rjmp	.+52     	; 0x9f8 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     9c4:	f1 01       	movw	r30, r2
     9c6:	c2 80       	ldd	r12, Z+2	; 0x02
     9c8:	d1 2c       	mov	r13, r1
     9ca:	dc 2c       	mov	r13, r12
     9cc:	cc 24       	eor	r12, r12
     9ce:	81 81       	ldd	r24, Z+1	; 0x01
     9d0:	c8 2a       	or	r12, r24
     9d2:	e1 2c       	mov	r14, r1
     9d4:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     9d6:	63 50       	subi	r22, 0x03	; 3
     9d8:	71 09       	sbc	r23, r1
				ReportData     += 2;
     9da:	f3 e0       	ldi	r31, 0x03	; 3
     9dc:	2f 0e       	add	r2, r31
     9de:	31 1c       	adc	r3, r1
				break;
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     9e2:	d1 01       	movw	r26, r2
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	cc 90       	ld	r12, X
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     9ee:	62 50       	subi	r22, 0x02	; 2
     9f0:	71 09       	sbc	r23, r1
				ReportData     += 1;
     9f2:	b2 e0       	ldi	r27, 0x02	; 2
     9f4:	2b 0e       	add	r2, r27
     9f6:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     9f8:	e9 96       	adiw	r28, 0x39	; 57
     9fa:	2f ad       	ldd	r18, Y+63	; 0x3f
     9fc:	e9 97       	sbiw	r28, 0x39	; 57
     9fe:	2c 7f       	andi	r18, 0xFC	; 252
     a00:	24 36       	cpi	r18, 0x64	; 100
     a02:	09 f4       	brne	.+2      	; 0xa06 <USB_ProcessHIDReport+0x192>
     a04:	96 c0       	rjmp	.+300    	; 0xb32 <USB_ProcessHIDReport+0x2be>
     a06:	68 f5       	brcc	.+90     	; 0xa62 <USB_ProcessHIDReport+0x1ee>
     a08:	24 32       	cpi	r18, 0x24	; 36
     a0a:	09 f4       	brne	.+2      	; 0xa0e <USB_ProcessHIDReport+0x19a>
     a0c:	7c c0       	rjmp	.+248    	; 0xb06 <USB_ProcessHIDReport+0x292>
     a0e:	b0 f4       	brcc	.+44     	; 0xa3c <USB_ProcessHIDReport+0x1c8>
     a10:	28 30       	cpi	r18, 0x08	; 8
     a12:	09 f4       	brne	.+2      	; 0xa16 <USB_ProcessHIDReport+0x1a2>
     a14:	f4 c0       	rjmp	.+488    	; 0xbfe <USB_ProcessHIDReport+0x38a>
     a16:	48 f4       	brcc	.+18     	; 0xa2a <USB_ProcessHIDReport+0x1b6>
     a18:	24 30       	cpi	r18, 0x04	; 4
     a1a:	09 f0       	breq	.+2      	; 0xa1e <USB_ProcessHIDReport+0x1aa>
     a1c:	73 c2       	rjmp	.+1254   	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     a1e:	d8 01       	movw	r26, r16
     a20:	12 96       	adiw	r26, 0x02	; 2
     a22:	dc 92       	st	X, r13
     a24:	ce 92       	st	-X, r12
     a26:	11 97       	sbiw	r26, 0x01	; 1
				break;
     a28:	6d c2       	rjmp	.+1242   	; 0xf04 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a2a:	24 31       	cpi	r18, 0x14	; 20
     a2c:	09 f4       	brne	.+2      	; 0xa30 <USB_ProcessHIDReport+0x1bc>
     a2e:	65 c0       	rjmp	.+202    	; 0xafa <USB_ProcessHIDReport+0x286>
     a30:	28 31       	cpi	r18, 0x18	; 24
     a32:	09 f0       	breq	.+2      	; 0xa36 <USB_ProcessHIDReport+0x1c2>
     a34:	67 c2       	rjmp	.+1230   	; 0xf04 <USB_ProcessHIDReport+0x690>
     a36:	46 01       	movw	r8, r12
     a38:	57 01       	movw	r10, r14
     a3a:	64 c2       	rjmp	.+1224   	; 0xf04 <USB_ProcessHIDReport+0x690>
     a3c:	24 33       	cpi	r18, 0x34	; 52
     a3e:	09 f4       	brne	.+2      	; 0xa42 <USB_ProcessHIDReport+0x1ce>
     a40:	6a c0       	rjmp	.+212    	; 0xb16 <USB_ProcessHIDReport+0x2a2>
     a42:	30 f4       	brcc	.+12     	; 0xa50 <USB_ProcessHIDReport+0x1dc>
     a44:	28 32       	cpi	r18, 0x28	; 40
     a46:	09 f0       	breq	.+2      	; 0xa4a <USB_ProcessHIDReport+0x1d6>
     a48:	5d c2       	rjmp	.+1210   	; 0xf04 <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     a4a:	26 01       	movw	r4, r12
     a4c:	37 01       	movw	r6, r14
     a4e:	5a c2       	rjmp	.+1204   	; 0xf04 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a50:	24 34       	cpi	r18, 0x44	; 68
     a52:	09 f4       	brne	.+2      	; 0xa56 <USB_ProcessHIDReport+0x1e2>
     a54:	66 c0       	rjmp	.+204    	; 0xb22 <USB_ProcessHIDReport+0x2ae>
     a56:	24 35       	cpi	r18, 0x54	; 84
     a58:	09 f0       	breq	.+2      	; 0xa5c <USB_ProcessHIDReport+0x1e8>
     a5a:	54 c2       	rjmp	.+1192   	; 0xf04 <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     a5c:	f8 01       	movw	r30, r16
     a5e:	c1 86       	std	Z+9, r12	; 0x09
				break;
     a60:	51 c2       	rjmp	.+1186   	; 0xf04 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a62:	24 39       	cpi	r18, 0x94	; 148
     a64:	09 f4       	brne	.+2      	; 0xa68 <USB_ProcessHIDReport+0x1f4>
     a66:	6d c0       	rjmp	.+218    	; 0xb42 <USB_ProcessHIDReport+0x2ce>
     a68:	78 f4       	brcc	.+30     	; 0xa88 <USB_ProcessHIDReport+0x214>
     a6a:	20 38       	cpi	r18, 0x80	; 128
     a6c:	e1 f0       	breq	.+56     	; 0xaa6 <USB_ProcessHIDReport+0x232>
     a6e:	30 f4       	brcc	.+12     	; 0xa7c <USB_ProcessHIDReport+0x208>
     a70:	24 37       	cpi	r18, 0x74	; 116
     a72:	09 f0       	breq	.+2      	; 0xa76 <USB_ProcessHIDReport+0x202>
     a74:	47 c2       	rjmp	.+1166   	; 0xf04 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     a76:	f8 01       	movw	r30, r16
     a78:	c0 82       	st	Z, r12
				break;
     a7a:	44 c2       	rjmp	.+1160   	; 0xf04 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a7c:	24 38       	cpi	r18, 0x84	; 132
     a7e:	09 f4       	brne	.+2      	; 0xa82 <USB_ProcessHIDReport+0x20e>
     a80:	64 c0       	rjmp	.+200    	; 0xb4a <USB_ProcessHIDReport+0x2d6>
     a82:	20 39       	cpi	r18, 0x90	; 144
     a84:	81 f0       	breq	.+32     	; 0xaa6 <USB_ProcessHIDReport+0x232>
     a86:	3e c2       	rjmp	.+1148   	; 0xf04 <USB_ProcessHIDReport+0x690>
     a88:	20 3b       	cpi	r18, 0xB0	; 176
     a8a:	69 f0       	breq	.+26     	; 0xaa6 <USB_ProcessHIDReport+0x232>
     a8c:	30 f4       	brcc	.+12     	; 0xa9a <USB_ProcessHIDReport+0x226>
     a8e:	20 3a       	cpi	r18, 0xA0	; 160
     a90:	09 f4       	brne	.+2      	; 0xa94 <USB_ProcessHIDReport+0x220>
     a92:	c9 c0       	rjmp	.+402    	; 0xc26 <USB_ProcessHIDReport+0x3b2>
     a94:	24 3a       	cpi	r18, 0xA4	; 164
     a96:	b9 f0       	breq	.+46     	; 0xac6 <USB_ProcessHIDReport+0x252>
     a98:	35 c2       	rjmp	.+1130   	; 0xf04 <USB_ProcessHIDReport+0x690>
     a9a:	24 3b       	cpi	r18, 0xB4	; 180
     a9c:	29 f1       	breq	.+74     	; 0xae8 <USB_ProcessHIDReport+0x274>
     a9e:	20 3c       	cpi	r18, 0xC0	; 192
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <USB_ProcessHIDReport+0x230>
     aa2:	2d c1       	rjmp	.+602    	; 0xcfe <USB_ProcessHIDReport+0x48a>
     aa4:	2f c2       	rjmp	.+1118   	; 0xf04 <USB_ProcessHIDReport+0x690>
     aa6:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     aa8:	d7 01       	movw	r26, r14
     aaa:	c6 01       	movw	r24, r12
     aac:	81 70       	andi	r24, 0x01	; 1
     aae:	99 27       	eor	r25, r25
     ab0:	aa 27       	eor	r26, r26
     ab2:	bb 27       	eor	r27, r27
     ab4:	c1 58       	subi	r28, 0x81	; 129
     ab6:	df 4f       	sbci	r29, 0xFF	; 255
     ab8:	88 83       	st	Y, r24
     aba:	99 83       	std	Y+1, r25	; 0x01
     abc:	aa 83       	std	Y+2, r26	; 0x02
     abe:	bb 83       	std	Y+3, r27	; 0x03
     ac0:	cf 57       	subi	r28, 0x7F	; 127
     ac2:	d0 40       	sbci	r29, 0x00	; 0
     ac4:	4a c1       	rjmp	.+660    	; 0xd5a <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     ac6:	ce 01       	movw	r24, r28
     ac8:	4d 96       	adiw	r24, 0x1d	; 29
     aca:	08 17       	cp	r16, r24
     acc:	19 07       	cpc	r17, r25
     ace:	09 f4       	brne	.+2      	; 0xad2 <USB_ProcessHIDReport+0x25e>
     ad0:	2f c2       	rjmp	.+1118   	; 0xf30 <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     ad2:	c8 01       	movw	r24, r16
     ad4:	4c 96       	adiw	r24, 0x1c	; 28
     ad6:	2a e2       	ldi	r18, 0x2A	; 42
     ad8:	f8 01       	movw	r30, r16
     ada:	dc 01       	movw	r26, r24
     adc:	01 90       	ld	r0, Z+
     ade:	0d 92       	st	X+, r0
     ae0:	2a 95       	dec	r18
     ae2:	e1 f7       	brne	.-8      	; 0xadc <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     ae4:	8c 01       	movw	r16, r24
				break;
     ae6:	0e c2       	rjmp	.+1052   	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	08 17       	cp	r16, r24
     aee:	19 07       	cpc	r17, r25
     af0:	09 f4       	brne	.+2      	; 0xaf4 <USB_ProcessHIDReport+0x280>
     af2:	20 c2       	rjmp	.+1088   	; 0xf34 <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     af4:	0c 51       	subi	r16, 0x1C	; 28
     af6:	11 09       	sbc	r17, r1
				break;
     af8:	05 c2       	rjmp	.+1034   	; 0xf04 <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     afa:	f8 01       	movw	r30, r16
     afc:	c2 86       	std	Z+10, r12	; 0x0a
     afe:	d3 86       	std	Z+11, r13	; 0x0b
     b00:	e4 86       	std	Z+12, r14	; 0x0c
     b02:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     b04:	ff c1       	rjmp	.+1022   	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     b06:	d8 01       	movw	r26, r16
     b08:	1e 96       	adiw	r26, 0x0e	; 14
     b0a:	cd 92       	st	X+, r12
     b0c:	dd 92       	st	X+, r13
     b0e:	ed 92       	st	X+, r14
     b10:	fc 92       	st	X, r15
     b12:	51 97       	sbiw	r26, 0x11	; 17
				break;
     b14:	f7 c1       	rjmp	.+1006   	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     b16:	f8 01       	movw	r30, r16
     b18:	c2 8a       	std	Z+18, r12	; 0x12
     b1a:	d3 8a       	std	Z+19, r13	; 0x13
     b1c:	e4 8a       	std	Z+20, r14	; 0x14
     b1e:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     b20:	f1 c1       	rjmp	.+994    	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     b22:	d8 01       	movw	r26, r16
     b24:	56 96       	adiw	r26, 0x16	; 22
     b26:	cd 92       	st	X+, r12
     b28:	dd 92       	st	X+, r13
     b2a:	ed 92       	st	X+, r14
     b2c:	fc 92       	st	X, r15
     b2e:	59 97       	sbiw	r26, 0x19	; 25
				break;
     b30:	e9 c1       	rjmp	.+978    	; 0xf04 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     b32:	d8 01       	movw	r26, r16
     b34:	15 96       	adiw	r26, 0x05	; 5
     b36:	cd 92       	st	X+, r12
     b38:	dd 92       	st	X+, r13
     b3a:	ed 92       	st	X+, r14
     b3c:	fc 92       	st	X, r15
     b3e:	18 97       	sbiw	r26, 0x08	; 8
				break;
     b40:	e1 c1       	rjmp	.+962    	; 0xf04 <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     b42:	d8 01       	movw	r26, r16
     b44:	5a 96       	adiw	r26, 0x1a	; 26
     b46:	cc 92       	st	X, r12
				break;
     b48:	dd c1       	rjmp	.+954    	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     b4a:	ac 2d       	mov	r26, r12
     b4c:	f8 01       	movw	r30, r16
     b4e:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     b50:	ef 96       	adiw	r28, 0x3f	; 63
     b52:	ee ad       	ldd	r30, Y+62	; 0x3e
     b54:	ff ad       	ldd	r31, Y+63	; 0x3f
     b56:	ef 97       	sbiw	r28, 0x3f	; 63
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <USB_ProcessHIDReport+0x2ec>
     b5e:	40 c0       	rjmp	.+128    	; 0xbe0 <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     b60:	cb 57       	subi	r28, 0x7B	; 123
     b62:	df 4f       	sbci	r29, 0xFF	; 255
     b64:	e8 81       	ld	r30, Y
     b66:	f9 81       	ldd	r31, Y+1	; 0x01
     b68:	c5 58       	subi	r28, 0x85	; 133
     b6a:	d0 40       	sbci	r29, 0x00	; 0
     b6c:	b0 81       	ld	r27, Z
     b6e:	9a 01       	movw	r18, r20
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	8b 17       	cp	r24, r27
     b76:	d0 f4       	brcc	.+52     	; 0xbac <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     b78:	7c 01       	movw	r14, r24
     b7a:	f9 01       	movw	r30, r18
     b7c:	e0 57       	subi	r30, 0x70	; 112
     b7e:	fc 4f       	sbci	r31, 0xFC	; 252
     b80:	e0 81       	ld	r30, Z
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	29 5f       	subi	r18, 0xF9	; 249
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	ea 13       	cpse	r30, r26
     b8a:	f4 cf       	rjmp	.-24     	; 0xb74 <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     b8c:	27 e0       	ldi	r18, 0x07	; 7
     b8e:	2e 9d       	mul	r18, r14
     b90:	c0 01       	movw	r24, r0
     b92:	2f 9d       	mul	r18, r15
     b94:	90 0d       	add	r25, r0
     b96:	11 24       	eor	r1, r1
     b98:	9c 01       	movw	r18, r24
     b9a:	20 57       	subi	r18, 0x70	; 112
     b9c:	3c 4f       	sbci	r19, 0xFC	; 252
     b9e:	24 0f       	add	r18, r20
     ba0:	35 1f       	adc	r19, r21
     ba2:	e8 96       	adiw	r28, 0x38	; 56
     ba4:	3f af       	std	Y+63, r19	; 0x3f
     ba6:	2e af       	std	Y+62, r18	; 0x3e
     ba8:	e8 97       	sbiw	r28, 0x38	; 56
     baa:	1a c0       	rjmp	.+52     	; 0xbe0 <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     bac:	ba 30       	cpi	r27, 0x0A	; 10
     bae:	09 f4       	brne	.+2      	; 0xbb2 <USB_ProcessHIDReport+0x33e>
     bb0:	cb c1       	rjmp	.+918    	; 0xf48 <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	8b 0f       	add	r24, r27
     bb6:	eb 96       	adiw	r28, 0x3b	; 59
     bb8:	ee ad       	ldd	r30, Y+62	; 0x3e
     bba:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbc:	eb 97       	sbiw	r28, 0x3b	; 59
     bbe:	80 83       	st	Z, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	9a 01       	movw	r18, r20
     bc4:	8b 9f       	mul	r24, r27
     bc6:	20 0d       	add	r18, r0
     bc8:	31 1d       	adc	r19, r1
     bca:	11 24       	eor	r1, r1
     bcc:	20 57       	subi	r18, 0x70	; 112
     bce:	3c 4f       	sbci	r19, 0xFC	; 252
     bd0:	e8 96       	adiw	r28, 0x38	; 56
     bd2:	3f af       	std	Y+63, r19	; 0x3f
     bd4:	2e af       	std	Y+62, r18	; 0x3e
     bd6:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     bd8:	d9 01       	movw	r26, r18
     bda:	1d 92       	st	X+, r1
     bdc:	8a 95       	dec	r24
     bde:	e9 f7       	brne	.-6      	; 0xbda <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	ef 96       	adiw	r28, 0x3f	; 63
     be4:	ee ad       	ldd	r30, Y+62	; 0x3e
     be6:	ff ad       	ldd	r31, Y+63	; 0x3f
     be8:	ef 97       	sbiw	r28, 0x3f	; 63
     bea:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     bec:	d8 01       	movw	r26, r16
     bee:	5b 96       	adiw	r26, 0x1b	; 27
     bf0:	8c 91       	ld	r24, X
     bf2:	e8 96       	adiw	r28, 0x38	; 56
     bf4:	ee ad       	ldd	r30, Y+62	; 0x3e
     bf6:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf8:	e8 97       	sbiw	r28, 0x38	; 56
     bfa:	80 83       	st	Z, r24
				break;
     bfc:	83 c1       	rjmp	.+774    	; 0xf04 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     bfe:	e4 96       	adiw	r28, 0x34	; 52
     c00:	2f ad       	ldd	r18, Y+63	; 0x3f
     c02:	e4 97       	sbiw	r28, 0x34	; 52
     c04:	28 30       	cpi	r18, 0x08	; 8
     c06:	09 f4       	brne	.+2      	; 0xc0a <USB_ProcessHIDReport+0x396>
     c08:	97 c1       	rjmp	.+814    	; 0xf38 <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     c0a:	fe 01       	movw	r30, r28
     c0c:	ed 59       	subi	r30, 0x9D	; 157
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	e2 0f       	add	r30, r18
     c12:	f1 1d       	adc	r31, r1
     c14:	e2 0f       	add	r30, r18
     c16:	f1 1d       	adc	r31, r1
     c18:	d1 82       	std	Z+1, r13	; 0x01
     c1a:	c0 82       	st	Z, r12
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	e4 96       	adiw	r28, 0x34	; 52
     c20:	2f af       	std	Y+63, r18	; 0x3f
     c22:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     c24:	6f c1       	rjmp	.+734    	; 0xf04 <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     c26:	e6 96       	adiw	r28, 0x36	; 54
     c28:	2e ad       	ldd	r18, Y+62	; 0x3e
     c2a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c2c:	e6 97       	sbiw	r28, 0x36	; 54
     c2e:	23 2b       	or	r18, r19
     c30:	41 f4       	brne	.+16     	; 0xc42 <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     c32:	9a 01       	movw	r18, r20
     c34:	27 5b       	subi	r18, 0xB7	; 183
     c36:	3c 4f       	sbci	r19, 0xFC	; 252
     c38:	e6 96       	adiw	r28, 0x36	; 54
     c3a:	3f af       	std	Y+63, r19	; 0x3f
     c3c:	2e af       	std	Y+62, r18	; 0x3e
     c3e:	e6 97       	sbiw	r28, 0x36	; 54
     c40:	1d c0       	rjmp	.+58     	; 0xc7c <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     c42:	fa 01       	movw	r30, r20
     c44:	e0 5b       	subi	r30, 0xB0	; 176
     c46:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     c48:	85 81       	ldd	r24, Z+5	; 0x05
     c4a:	96 81       	ldd	r25, Z+6	; 0x06
     c4c:	89 2b       	or	r24, r25
     c4e:	61 f0       	breq	.+24     	; 0xc68 <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     c50:	cd 57       	subi	r28, 0x7D	; 125
     c52:	df 4f       	sbci	r29, 0xFF	; 255
     c54:	28 81       	ld	r18, Y
     c56:	39 81       	ldd	r19, Y+1	; 0x01
     c58:	c3 58       	subi	r28, 0x83	; 131
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	e2 17       	cp	r30, r18
     c5e:	f3 07       	cpc	r31, r19
     c60:	09 f4       	brne	.+2      	; 0xc64 <USB_ProcessHIDReport+0x3f0>
     c62:	6c c1       	rjmp	.+728    	; 0xf3c <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     c64:	37 96       	adiw	r30, 0x07	; 7
     c66:	f0 cf       	rjmp	.-32     	; 0xc48 <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     c68:	e6 96       	adiw	r28, 0x36	; 54
     c6a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c6c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c6e:	e6 97       	sbiw	r28, 0x36	; 54
     c70:	36 83       	std	Z+6, r19	; 0x06
     c72:	25 83       	std	Z+5, r18	; 0x05
     c74:	e6 96       	adiw	r28, 0x36	; 54
     c76:	ff af       	std	Y+63, r31	; 0x3f
     c78:	ee af       	std	Y+62, r30	; 0x3e
     c7a:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     c7c:	e6 96       	adiw	r28, 0x36	; 54
     c7e:	ae ad       	ldd	r26, Y+62	; 0x3e
     c80:	bf ad       	ldd	r27, Y+63	; 0x3f
     c82:	e6 97       	sbiw	r28, 0x36	; 54
     c84:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     c86:	f8 01       	movw	r30, r16
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	92 81       	ldd	r25, Z+2	; 0x02
     c8c:	12 96       	adiw	r26, 0x02	; 2
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     c94:	e4 96       	adiw	r28, 0x34	; 52
     c96:	2f ad       	ldd	r18, Y+63	; 0x3f
     c98:	e4 97       	sbiw	r28, 0x34	; 52
     c9a:	22 23       	and	r18, r18
     c9c:	e1 f0       	breq	.+56     	; 0xcd6 <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     c9e:	a5 96       	adiw	r28, 0x25	; 37
     ca0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ca4:	a5 97       	sbiw	r28, 0x25	; 37
     ca6:	14 96       	adiw	r26, 0x04	; 4
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	13 97       	sbiw	r26, 0x03	; 3
     cae:	fe 01       	movw	r30, r28
     cb0:	ed 59       	subi	r30, 0x9D	; 157
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	e4 96       	adiw	r28, 0x34	; 52
     cb8:	3f ad       	ldd	r19, Y+63	; 0x3f
     cba:	e4 97       	sbiw	r28, 0x34	; 52
     cbc:	23 17       	cp	r18, r19
     cbe:	31 f0       	breq	.+12     	; 0xccc <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	81 93       	st	Z+, r24
     cc6:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	f5 cf       	rjmp	.-22     	; 0xcb6 <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     ccc:	31 50       	subi	r19, 0x01	; 1
     cce:	e4 96       	adiw	r28, 0x34	; 52
     cd0:	3f af       	std	Y+63, r19	; 0x3f
     cd2:	e4 97       	sbiw	r28, 0x34	; 52
     cd4:	17 c1       	rjmp	.+558    	; 0xf04 <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     cd6:	48 14       	cp	r4, r8
     cd8:	59 04       	cpc	r5, r9
     cda:	6a 04       	cpc	r6, r10
     cdc:	7b 04       	cpc	r7, r11
     cde:	08 f4       	brcc	.+2      	; 0xce2 <USB_ProcessHIDReport+0x46e>
     ce0:	11 c1       	rjmp	.+546    	; 0xf04 <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     ce2:	e6 96       	adiw	r28, 0x36	; 54
     ce4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ce6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ce8:	e6 97       	sbiw	r28, 0x36	; 54
     cea:	14 96       	adiw	r26, 0x04	; 4
     cec:	9c 92       	st	X, r9
     cee:	8e 92       	st	-X, r8
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	bf ef       	ldi	r27, 0xFF	; 255
     cf4:	8b 1a       	sub	r8, r27
     cf6:	9b 0a       	sbc	r9, r27
     cf8:	ab 0a       	sbc	r10, r27
     cfa:	bb 0a       	sbc	r11, r27
     cfc:	03 c1       	rjmp	.+518    	; 0xf04 <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     cfe:	e6 96       	adiw	r28, 0x36	; 54
     d00:	2e ad       	ldd	r18, Y+62	; 0x3e
     d02:	3f ad       	ldd	r19, Y+63	; 0x3f
     d04:	e6 97       	sbiw	r28, 0x36	; 54
     d06:	21 15       	cp	r18, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <USB_ProcessHIDReport+0x49a>
     d0c:	19 c1       	rjmp	.+562    	; 0xf40 <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     d0e:	d9 01       	movw	r26, r18
     d10:	15 96       	adiw	r26, 0x05	; 5
     d12:	0d 90       	ld	r0, X+
     d14:	bc 91       	ld	r27, X
     d16:	a0 2d       	mov	r26, r0
     d18:	e6 96       	adiw	r28, 0x36	; 54
     d1a:	bf af       	std	Y+63, r27	; 0x3f
     d1c:	ae af       	std	Y+62, r26	; 0x3e
     d1e:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     d20:	f1 c0       	rjmp	.+482    	; 0xf04 <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     d22:	da 01       	movw	r26, r20
     d24:	fa e2       	ldi	r31, 0x2A	; 42
     d26:	f8 9f       	mul	r31, r24
     d28:	a0 0d       	add	r26, r0
     d2a:	b1 1d       	adc	r27, r1
     d2c:	11 24       	eor	r1, r1
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	fe 01       	movw	r30, r28
     d32:	f9 96       	adiw	r30, 0x39	; 57
     d34:	8a e2       	ldi	r24, 0x2A	; 42
     d36:	01 90       	ld	r0, Z+
     d38:	0d 92       	st	X+, r0
     d3a:	8a 95       	dec	r24
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     d3e:	c1 58       	subi	r28, 0x81	; 129
     d40:	df 4f       	sbci	r29, 0xFF	; 255
     d42:	88 81       	ld	r24, Y
     d44:	99 81       	ldd	r25, Y+1	; 0x01
     d46:	aa 81       	ldd	r26, Y+2	; 0x02
     d48:	bb 81       	ldd	r27, Y+3	; 0x03
     d4a:	cf 57       	subi	r28, 0x7F	; 127
     d4c:	d0 40       	sbci	r29, 0x00	; 0
     d4e:	89 2b       	or	r24, r25
     d50:	8a 2b       	or	r24, r26
     d52:	8b 2b       	or	r24, r27
     d54:	09 f4       	brne	.+2      	; 0xd58 <USB_ProcessHIDReport+0x4e4>
     d56:	8f c0       	rjmp	.+286    	; 0xe76 <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     d58:	3f 5f       	subi	r19, 0xFF	; 255
     d5a:	f8 01       	movw	r30, r16
     d5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d5e:	38 17       	cp	r19, r24
     d60:	08 f0       	brcs	.+2      	; 0xd64 <USB_ProcessHIDReport+0x4f0>
     d62:	d0 c0       	rjmp	.+416    	; 0xf04 <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     d64:	f8 01       	movw	r30, r16
     d66:	de 01       	movw	r26, r28
     d68:	af 5b       	subi	r26, 0xBF	; 191
     d6a:	bf 4f       	sbci	r27, 0xFF	; 255
     d6c:	8a e1       	ldi	r24, 0x1A	; 26
     d6e:	01 90       	ld	r0, Z+
     d70:	0d 92       	st	X+, r0
     d72:	8a 95       	dec	r24
     d74:	e1 f7       	brne	.-8      	; 0xd6e <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     d76:	dd ae       	std	Y+61, r13	; 0x3d
     d78:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     d7a:	e6 96       	adiw	r28, 0x36	; 54
     d7c:	ee ad       	ldd	r30, Y+62	; 0x3e
     d7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     d80:	e6 97       	sbiw	r28, 0x36	; 54
     d82:	21 96       	adiw	r28, 0x01	; 1
     d84:	ff af       	std	Y+63, r31	; 0x3f
     d86:	ee af       	std	Y+62, r30	; 0x3e
     d88:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     d8a:	d8 01       	movw	r26, r16
     d8c:	5b 96       	adiw	r26, 0x1b	; 27
     d8e:	8c 91       	ld	r24, X
     d90:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     d92:	e4 96       	adiw	r28, 0x34	; 52
     d94:	bf ad       	ldd	r27, Y+63	; 0x3f
     d96:	e4 97       	sbiw	r28, 0x34	; 52
     d98:	bb 23       	and	r27, r27
     d9a:	e1 f0       	breq	.+56     	; 0xdd4 <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     d9c:	a5 96       	adiw	r28, 0x25	; 37
     d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
     da0:	9f ad       	ldd	r25, Y+63	; 0x3f
     da2:	a5 97       	sbiw	r28, 0x25	; 37
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	9f af       	std	Y+63, r25	; 0x3f
     da8:	8e af       	std	Y+62, r24	; 0x3e
     daa:	26 97       	sbiw	r28, 0x06	; 6
     dac:	fe 01       	movw	r30, r28
     dae:	ed 59       	subi	r30, 0x9D	; 157
     db0:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     db2:	a1 e0       	ldi	r26, 0x01	; 1
     db4:	e4 96       	adiw	r28, 0x34	; 52
     db6:	8f ad       	ldd	r24, Y+63	; 0x3f
     db8:	e4 97       	sbiw	r28, 0x34	; 52
     dba:	a8 17       	cp	r26, r24
     dbc:	31 f0       	breq	.+12     	; 0xdca <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	81 93       	st	Z+, r24
     dc4:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     dc6:	af 5f       	subi	r26, 0xFF	; 255
     dc8:	f5 cf       	rjmp	.-22     	; 0xdb4 <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     dca:	81 50       	subi	r24, 0x01	; 1
     dcc:	e4 96       	adiw	r28, 0x34	; 52
     dce:	8f af       	std	Y+63, r24	; 0x3f
     dd0:	e4 97       	sbiw	r28, 0x34	; 52
     dd2:	0e c0       	rjmp	.+28     	; 0xdf0 <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     dd4:	48 14       	cp	r4, r8
     dd6:	59 04       	cpc	r5, r9
     dd8:	6a 04       	cpc	r6, r10
     dda:	7b 04       	cpc	r7, r11
     ddc:	48 f0       	brcs	.+18     	; 0xdf0 <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     dde:	26 96       	adiw	r28, 0x06	; 6
     de0:	9f ae       	std	Y+63, r9	; 0x3f
     de2:	8e ae       	std	Y+62, r8	; 0x3e
     de4:	26 97       	sbiw	r28, 0x06	; 6
     de6:	9f ef       	ldi	r25, 0xFF	; 255
     de8:	89 1a       	sub	r8, r25
     dea:	99 0a       	sbc	r9, r25
     dec:	a9 0a       	sbc	r10, r25
     dee:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     df0:	20 38       	cpi	r18, 0x80	; 128
     df2:	11 f4       	brne	.+4      	; 0xdf8 <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     df4:	1b ae       	std	Y+59, r1	; 0x3b
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     df8:	20 39       	cpi	r18, 0x90	; 144
     dfa:	19 f4       	brne	.+6      	; 0xe02 <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     dfc:	a1 e0       	ldi	r26, 0x01	; 1
     dfe:	ab af       	std	Y+59, r26	; 0x3b
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     e02:	b2 e0       	ldi	r27, 0x02	; 2
     e04:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     e06:	8b ad       	ldd	r24, Y+59	; 0x3b
     e08:	e8 96       	adiw	r28, 0x38	; 56
     e0a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e0c:	ff ad       	ldd	r31, Y+63	; 0x3f
     e0e:	e8 97       	sbiw	r28, 0x38	; 56
     e10:	e8 0f       	add	r30, r24
     e12:	f1 1d       	adc	r31, r1
     e14:	e8 0f       	add	r30, r24
     e16:	f1 1d       	adc	r31, r1
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	92 81       	ldd	r25, Z+2	; 0x02
     e1c:	9a af       	std	Y+58, r25	; 0x3a
     e1e:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     e20:	d8 01       	movw	r26, r16
     e22:	bc 91       	ld	r27, X
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	92 81       	ldd	r25, Z+2	; 0x02
     e28:	8b 0f       	add	r24, r27
     e2a:	91 1d       	adc	r25, r1
     e2c:	92 83       	std	Z+2, r25	; 0x02
     e2e:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     e30:	8b ad       	ldd	r24, Y+59	; 0x3b
     e32:	e8 96       	adiw	r28, 0x38	; 56
     e34:	ee ad       	ldd	r30, Y+62	; 0x3e
     e36:	ff ad       	ldd	r31, Y+63	; 0x3f
     e38:	e8 97       	sbiw	r28, 0x38	; 56
     e3a:	e8 0f       	add	r30, r24
     e3c:	f1 1d       	adc	r31, r1
     e3e:	e8 0f       	add	r30, r24
     e40:	f1 1d       	adc	r31, r1
     e42:	ed 96       	adiw	r28, 0x3d	; 61
     e44:	ae ad       	ldd	r26, Y+62	; 0x3e
     e46:	bf ad       	ldd	r27, Y+63	; 0x3f
     e48:	ed 97       	sbiw	r28, 0x3d	; 61
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	01 80       	ldd	r0, Z+1	; 0x01
     e50:	f2 81       	ldd	r31, Z+2	; 0x02
     e52:	e0 2d       	mov	r30, r0
     e54:	e8 17       	cp	r30, r24
     e56:	f9 07       	cpc	r31, r25
     e58:	08 f4       	brcc	.+2      	; 0xe5c <USB_ProcessHIDReport+0x5e8>
     e5a:	fc 01       	movw	r30, r24
     e5c:	ed 96       	adiw	r28, 0x3d	; 61
     e5e:	ae ad       	ldd	r26, Y+62	; 0x3e
     e60:	bf ad       	ldd	r27, Y+63	; 0x3f
     e62:	ed 97       	sbiw	r28, 0x3d	; 61
     e64:	ed 93       	st	X+, r30
     e66:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     e68:	fa 01       	movw	r30, r20
     e6a:	80 81       	ld	r24, Z
     e6c:	84 31       	cpi	r24, 0x14	; 20
     e6e:	09 f0       	breq	.+2      	; 0xe72 <USB_ProcessHIDReport+0x5fe>
     e70:	58 cf       	rjmp	.-336    	; 0xd22 <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	6a c0       	rjmp	.+212    	; 0xf4a <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     e76:	ce 01       	movw	r24, r28
     e78:	c9 96       	adiw	r24, 0x39	; 57
     e7a:	c8 57       	subi	r28, 0x78	; 120
     e7c:	df 4f       	sbci	r29, 0xFF	; 255
     e7e:	28 83       	st	Y, r18
     e80:	c8 58       	subi	r28, 0x88	; 136
     e82:	d0 40       	sbci	r29, 0x00	; 0
     e84:	c9 57       	subi	r28, 0x79	; 121
     e86:	df 4f       	sbci	r29, 0xFF	; 255
     e88:	38 83       	st	Y, r19
     e8a:	c7 58       	subi	r28, 0x87	; 135
     e8c:	d0 40       	sbci	r29, 0x00	; 0
     e8e:	c5 57       	subi	r28, 0x75	; 117
     e90:	df 4f       	sbci	r29, 0xFF	; 255
     e92:	48 83       	st	Y, r20
     e94:	cb 58       	subi	r28, 0x8B	; 139
     e96:	d0 40       	sbci	r29, 0x00	; 0
     e98:	c4 57       	subi	r28, 0x74	; 116
     e9a:	df 4f       	sbci	r29, 0xFF	; 255
     e9c:	58 83       	st	Y, r21
     e9e:	cc 58       	subi	r28, 0x8C	; 140
     ea0:	d0 40       	sbci	r29, 0x00	; 0
     ea2:	c7 57       	subi	r28, 0x77	; 119
     ea4:	df 4f       	sbci	r29, 0xFF	; 255
     ea6:	68 83       	st	Y, r22
     ea8:	c9 58       	subi	r28, 0x89	; 137
     eaa:	d0 40       	sbci	r29, 0x00	; 0
     eac:	c6 57       	subi	r28, 0x76	; 118
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	78 83       	st	Y, r23
     eb2:	ca 58       	subi	r28, 0x8A	; 138
     eb4:	d0 40       	sbci	r29, 0x00	; 0
     eb6:	d4 dc       	rcall	.-1624   	; 0x860 <CALLBACK_HIDParser_FilterHIDReportItem>
     eb8:	c8 57       	subi	r28, 0x78	; 120
     eba:	df 4f       	sbci	r29, 0xFF	; 255
     ebc:	28 81       	ld	r18, Y
     ebe:	c8 58       	subi	r28, 0x88	; 136
     ec0:	d0 40       	sbci	r29, 0x00	; 0
     ec2:	c9 57       	subi	r28, 0x79	; 121
     ec4:	df 4f       	sbci	r29, 0xFF	; 255
     ec6:	38 81       	ld	r19, Y
     ec8:	c7 58       	subi	r28, 0x87	; 135
     eca:	d0 40       	sbci	r29, 0x00	; 0
     ecc:	c5 57       	subi	r28, 0x75	; 117
     ece:	df 4f       	sbci	r29, 0xFF	; 255
     ed0:	48 81       	ld	r20, Y
     ed2:	cb 58       	subi	r28, 0x8B	; 139
     ed4:	d0 40       	sbci	r29, 0x00	; 0
     ed6:	c4 57       	subi	r28, 0x74	; 116
     ed8:	df 4f       	sbci	r29, 0xFF	; 255
     eda:	58 81       	ld	r21, Y
     edc:	cc 58       	subi	r28, 0x8C	; 140
     ede:	d0 40       	sbci	r29, 0x00	; 0
     ee0:	c7 57       	subi	r28, 0x77	; 119
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
     ee4:	68 81       	ld	r22, Y
     ee6:	c9 58       	subi	r28, 0x89	; 137
     ee8:	d0 40       	sbci	r29, 0x00	; 0
     eea:	c6 57       	subi	r28, 0x76	; 118
     eec:	df 4f       	sbci	r29, 0xFF	; 255
     eee:	78 81       	ld	r23, Y
     ef0:	ca 58       	subi	r28, 0x8A	; 138
     ef2:	d0 40       	sbci	r29, 0x00	; 0
     ef4:	88 23       	and	r24, r24
     ef6:	09 f4       	brne	.+2      	; 0xefa <USB_ProcessHIDReport+0x686>
     ef8:	2f cf       	rjmp	.-418    	; 0xd58 <USB_ProcessHIDReport+0x4e4>
     efa:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
     efc:	8c 91       	ld	r24, X
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8c 93       	st	X, r24
     f02:	2a cf       	rjmp	.-428    	; 0xd58 <USB_ProcessHIDReport+0x4e4>
     f04:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     f06:	8f ad       	ldd	r24, Y+63	; 0x3f
     f08:	e9 97       	sbiw	r28, 0x39	; 57
     f0a:	8c 70       	andi	r24, 0x0C	; 12
     f0c:	09 f0       	breq	.+2      	; 0xf10 <USB_ProcessHIDReport+0x69c>
     f0e:	1d cd       	rjmp	.-1478   	; 0x94a <USB_ProcessHIDReport+0xd6>
     f10:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     f12:	51 2c       	mov	r5, r1
     f14:	32 01       	movw	r6, r4
     f16:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     f18:	91 2c       	mov	r9, r1
     f1a:	54 01       	movw	r10, r8
     f1c:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     f1e:	1f ae       	std	Y+63, r1	; 0x3f
     f20:	e4 97       	sbiw	r28, 0x34	; 52
     f22:	13 cd       	rjmp	.-1498   	; 0x94a <USB_ProcessHIDReport+0xd6>
     f24:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     f26:	8c 91       	ld	r24, X
     f28:	81 11       	cpse	r24, r1
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <USB_ProcessHIDReport+0x6d0>
     f2c:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f30:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f34:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f38:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f3c:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f40:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f44:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <USB_ProcessHIDReport+0x6d6>
     f48:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     f4a:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	8f 90       	pop	r8
     f70:	7f 90       	pop	r7
     f72:	6f 90       	pop	r6
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	3f 90       	pop	r3
     f7a:	2f 90       	pop	r2
     f7c:	08 95       	ret

00000f7e <USB_GetHIDReportItemInfo>:
     f7e:	ef 92       	push	r14

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	09 f4       	brne	.+2      	; 0xf92 <USB_GetHIDReportItemInfo+0x14>
     f90:	4c c0       	rjmp	.+152    	; 0x102a <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     f92:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     f94:	d0 81       	ld	r29, Z
     f96:	c1 81       	ldd	r28, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     f98:	25 81       	ldd	r18, Z+5	; 0x05
     f9a:	22 23       	and	r18, r18
     f9c:	29 f0       	breq	.+10     	; 0xfa8 <USB_GetHIDReportItemInfo+0x2a>
	{
		if (ReportItem->ReportID != ReportData[0])
     f9e:	dc 01       	movw	r26, r24
     fa0:	4c 91       	ld	r20, X
     fa2:	24 13       	cpse	r18, r20
     fa4:	42 c0       	rjmp	.+132    	; 0x102a <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     fa6:	01 96       	adiw	r24, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
     fa8:	42 a1       	ldd	r20, Z+34	; 0x22
     faa:	53 a1       	ldd	r21, Z+35	; 0x23
     fac:	64 a1       	ldd	r22, Z+36	; 0x24
     fae:	75 a1       	ldd	r23, Z+37	; 0x25
     fb0:	46 a3       	std	Z+38, r20	; 0x26
     fb2:	57 a3       	std	Z+39, r21	; 0x27
     fb4:	60 a7       	std	Z+40, r22	; 0x28
     fb6:	71 a7       	std	Z+41, r23	; 0x29
	ReportItem->Value = 0;
     fb8:	12 a2       	std	Z+34, r1	; 0x22
     fba:	13 a2       	std	Z+35, r1	; 0x23
     fbc:	14 a2       	std	Z+36, r1	; 0x24
     fbe:	15 a2       	std	Z+37, r1	; 0x25
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     fc0:	ad 2f       	mov	r26, r29
     fc2:	bc 2f       	mov	r27, r28
	uint32_t BitMask      = (1 << 0);
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	7d 01       	movw	r14, r26
     fce:	e3 0e       	add	r14, r19
     fd0:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     fd2:	ea 16       	cp	r14, r26
     fd4:	fb 06       	cpc	r15, r27
     fd6:	39 f1       	breq	.+78     	; 0x1026 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     fd8:	9d 01       	movw	r18, r26
     fda:	c3 e0       	ldi	r28, 0x03	; 3
     fdc:	36 95       	lsr	r19
     fde:	27 95       	ror	r18
     fe0:	ca 95       	dec	r28
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <USB_GetHIDReportItemInfo+0x5e>
     fe4:	28 0f       	add	r18, r24
     fe6:	39 1f       	adc	r19, r25
     fe8:	e9 01       	movw	r28, r18
     fea:	28 81       	ld	r18, Y
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8d 01       	movw	r16, r26
     ff0:	07 70       	andi	r16, 0x07	; 7
     ff2:	11 27       	eor	r17, r17
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <USB_GetHIDReportItemInfo+0x7c>
     ff6:	35 95       	asr	r19
     ff8:	27 95       	ror	r18
     ffa:	0a 95       	dec	r16
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <USB_GetHIDReportItemInfo+0x78>
     ffe:	20 ff       	sbrs	r18, 0
    1000:	0c c0       	rjmp	.+24     	; 0x101a <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
    1002:	02 a1       	ldd	r16, Z+34	; 0x22
    1004:	13 a1       	ldd	r17, Z+35	; 0x23
    1006:	24 a1       	ldd	r18, Z+36	; 0x24
    1008:	35 a1       	ldd	r19, Z+37	; 0x25
    100a:	04 2b       	or	r16, r20
    100c:	15 2b       	or	r17, r21
    100e:	26 2b       	or	r18, r22
    1010:	37 2b       	or	r19, r23
    1012:	02 a3       	std	Z+34, r16	; 0x22
    1014:	13 a3       	std	Z+35, r17	; 0x23
    1016:	24 a3       	std	Z+36, r18	; 0x24
    1018:	35 a3       	std	Z+37, r19	; 0x25

		CurrentBit++;
    101a:	11 96       	adiw	r26, 0x01	; 1
		BitMask <<= 1;
    101c:	44 0f       	add	r20, r20
    101e:	55 1f       	adc	r21, r21
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	d6 cf       	rjmp	.-84     	; 0xfd2 <USB_GetHIDReportItemInfo+0x54>
	}

	return true;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	01 c0       	rjmp	.+2      	; 0x102c <USB_GetHIDReportItemInfo+0xae>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
    102a:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	08 95       	ret

0000103a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    103a:	80 91 9e 00 	lds	r24, 0x009E
    103e:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1040:	90 91 a0 00 	lds	r25, 0x00A0
    1044:	9d 7f       	andi	r25, 0xFD	; 253
    1046:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    104a:	90 91 9e 00 	lds	r25, 0x009E
    104e:	92 60       	ori	r25, 0x02	; 2
    1050:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1054:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    1058:	91 fd       	sbrc	r25, 1
    105a:	fc cf       	rjmp	.-8      	; 0x1054 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    105c:	90 91 9e 00 	lds	r25, 0x009E
    1060:	91 60       	ori	r25, 0x01	; 1
    1062:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    1066:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    106a:	90 91 a0 00 	lds	r25, 0x00A0
    106e:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1070:	20 91 a0 00 	lds	r18, 0x00A0
    1074:	2f 7d       	andi	r18, 0xDF	; 223
    1076:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    107a:	20 91 9f 00 	lds	r18, 0x009F
    107e:	2f 7d       	andi	r18, 0xDF	; 223
    1080:	20 93 9f 00 	sts	0x009F, r18
    1084:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1086:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    108a:	35 ff       	sbrs	r19, 5
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    108e:	20 91 9f 00 	lds	r18, 0x009F
    1092:	2f 7d       	andi	r18, 0xDF	; 223
    1094:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1098:	20 91 9f 00 	lds	r18, 0x009F
    109c:	2d 7f       	andi	r18, 0xFD	; 253
    109e:	20 93 9f 00 	sts	0x009F, r18
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a4:	ef ec       	ldi	r30, 0xCF	; 207
    10a6:	f7 e0       	ldi	r31, 0x07	; 7
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <USB_Host_ResetDevice+0x6e>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <USB_Host_ResetDevice+0x74>
    10ae:	00 00       	nop
    10b0:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    10b2:	49 f7       	brne	.-46     	; 0x1086 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    10b4:	99 23       	and	r25, r25
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    10b8:	90 91 a0 00 	lds	r25, 0x00A0
    10bc:	90 62       	ori	r25, 0x20	; 32
    10be:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    10c2:	81 11       	cpse	r24, r1
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10c6:	80 91 9e 00 	lds	r24, 0x009E
    10ca:	8e 7f       	andi	r24, 0xFE	; 254
    10cc:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    10d0:	80 91 a0 00 	lds	r24, 0x00A0
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	80 93 a0 00 	sts	0x00A0, r24
    10da:	08 95       	ret

000010dc <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10dc:	20 91 9e 00 	lds	r18, 0x009E
    10e0:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    10e2:	90 91 a0 00 	lds	r25, 0x00A0
    10e6:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    10e8:	30 91 a0 00 	lds	r19, 0x00A0
    10ec:	3f 7d       	andi	r19, 0xDF	; 223
    10ee:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10f2:	30 91 9f 00 	lds	r19, 0x009F
    10f6:	3f 7d       	andi	r19, 0xDF	; 223
    10f8:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10fc:	30 91 9e 00 	lds	r19, 0x009E
    1100:	31 60       	ori	r19, 0x01	; 1
    1102:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1106:	88 23       	and	r24, r24
    1108:	39 f1       	breq	.+78     	; 0x1158 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    110a:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    110e:	35 ff       	sbrs	r19, 5
    1110:	06 c0       	rjmp	.+12     	; 0x111e <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1112:	30 91 9f 00 	lds	r19, 0x009F
    1116:	3f 7d       	andi	r19, 0xDF	; 223
    1118:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    111c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    111e:	30 91 fa 04 	lds	r19, 0x04FA
    1122:	31 30       	cpi	r19, 0x01	; 1
    1124:	c1 f0       	breq	.+48     	; 0x1156 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1126:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    112a:	34 ff       	sbrs	r19, 4
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    112e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1132:	80 91 a6 00 	lds	r24, 0x00A6
    1136:	8f 7e       	andi	r24, 0xEF	; 239
    1138:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    113c:	82 e0       	ldi	r24, 0x02	; 2

			break;
    113e:	0c c0       	rjmp	.+24     	; 0x1158 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1140:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
    1144:	31 ff       	sbrs	r19, 1
    1146:	df cf       	rjmp	.-66     	; 0x1106 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1148:	80 91 a6 00 	lds	r24, 0x00A6
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1152:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1156:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    1158:	21 11       	cpse	r18, r1
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    115c:	20 91 9e 00 	lds	r18, 0x009E
    1160:	2e 7f       	andi	r18, 0xFE	; 254
    1162:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1166:	99 23       	and	r25, r25
    1168:	29 f0       	breq	.+10     	; 0x1174 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    116a:	90 91 a0 00 	lds	r25, 0x00A0
    116e:	90 62       	ori	r25, 0x20	; 32
    1170:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1174:	08 95       	ret

00001176 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	28 97       	sbiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    118e:	80 91 fa 04 	lds	r24, 0x04FA
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	09 f4       	brne	.+2      	; 0x1198 <USB_Host_ProcessNextHostState+0x22>
    1196:	9c c0       	rjmp	.+312    	; 0x12d0 <USB_Host_ProcessNextHostState+0x15a>
    1198:	68 f4       	brcc	.+26     	; 0x11b4 <USB_Host_ProcessNextHostState+0x3e>
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	e1 f1       	breq	.+120    	; 0x1216 <USB_Host_ProcessNextHostState+0xa0>
    119e:	18 f4       	brcc	.+6      	; 0x11a6 <USB_Host_ProcessNextHostState+0x30>
    11a0:	88 23       	and	r24, r24
    11a2:	d9 f0       	breq	.+54     	; 0x11da <USB_Host_ProcessNextHostState+0x64>
    11a4:	00 c1       	rjmp	.+512    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	09 f4       	brne	.+2      	; 0x11ac <USB_Host_ProcessNextHostState+0x36>
    11aa:	3f c0       	rjmp	.+126    	; 0x122a <USB_Host_ProcessNextHostState+0xb4>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <USB_Host_ProcessNextHostState+0x3c>
    11b0:	67 c0       	rjmp	.+206    	; 0x1280 <USB_Host_ProcessNextHostState+0x10a>
    11b2:	f9 c0       	rjmp	.+498    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    11b4:	87 30       	cpi	r24, 0x07	; 7
    11b6:	09 f4       	brne	.+2      	; 0x11ba <USB_Host_ProcessNextHostState+0x44>
    11b8:	a6 c0       	rjmp	.+332    	; 0x1306 <USB_Host_ProcessNextHostState+0x190>
    11ba:	08 f4       	brcc	.+2      	; 0x11be <USB_Host_ProcessNextHostState+0x48>
    11bc:	96 c0       	rjmp	.+300    	; 0x12ea <USB_Host_ProcessNextHostState+0x174>
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <USB_Host_ProcessNextHostState+0x4e>
    11c2:	bf c0       	rjmp	.+382    	; 0x1342 <USB_Host_ProcessNextHostState+0x1cc>
    11c4:	89 30       	cpi	r24, 0x09	; 9
    11c6:	09 f0       	breq	.+2      	; 0x11ca <USB_Host_ProcessNextHostState+0x54>
    11c8:	ee c0       	rjmp	.+476    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    11d0:	8a e0       	ldi	r24, 0x0A	; 10
    11d2:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    11d6:	de d8       	rcall	.-3652   	; 0x394 <EVENT_USB_Host_DeviceEnumerationComplete>
    11d8:	e6 c0       	rjmp	.+460    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
			break;
    11da:	00 91 13 01 	lds	r16, 0x0113
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    11de:	10 91 14 01 	lds	r17, 0x0114
    11e2:	01 15       	cp	r16, r1
    11e4:	11 05       	cpc	r17, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <USB_Host_ProcessNextHostState+0x74>
    11e8:	de c0       	rjmp	.+444    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11ec:	77 df       	rcall	.-274    	; 0x10dc <USB_Host_WaitMS>
    11ee:	88 23       	and	r24, r24
    11f0:	31 f0       	breq	.+12     	; 0x11fe <USB_Host_ProcessNextHostState+0x88>
    11f2:	90 91 12 01 	lds	r25, 0x0112
				{
					USB_HostState = PostWaitState;
    11f6:	90 93 fa 04 	sts	0x04FA, r25
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	c5 c0       	rjmp	.+394    	; 0x1388 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    11fe:	01 50       	subi	r16, 0x01	; 1
					break;
    1200:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
    1202:	10 93 14 01 	sts	0x0114, r17
    1206:	00 93 13 01 	sts	0x0113, r16
    120a:	01 2b       	or	r16, r17
    120c:	09 f0       	breq	.+2      	; 0x1210 <USB_Host_ProcessNextHostState+0x9a>
    120e:	cb c0       	rjmp	.+406    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    1210:	80 91 12 01 	lds	r24, 0x0112
				  USB_HostState = PostWaitState;
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <USB_Host_ProcessNextHostState+0xae>
    1216:	88 ee       	ldi	r24, 0xE8	; 232
    1218:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    121a:	90 93 14 01 	sts	0x0114, r25
    121e:	80 93 13 01 	sts	0x0113, r24
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	80 93 fa 04 	sts	0x04FA, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1228:	be c0       	rjmp	.+380    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    122a:	80 91 13 01 	lds	r24, 0x0113
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    122e:	90 91 14 01 	lds	r25, 0x0114
    1232:	9c 01       	movw	r18, r24
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	31 09       	sbc	r19, r1
    1238:	30 93 14 01 	sts	0x0114, r19
    123c:	20 93 13 01 	sts	0x0113, r18
    1240:	89 2b       	or	r24, r25
    1242:	39 f0       	breq	.+14     	; 0x1252 <USB_Host_ProcessNextHostState+0xdc>
    1244:	8f ec       	ldi	r24, 0xCF	; 207
    1246:	97 e0       	ldi	r25, 0x07	; 7
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <USB_Host_ProcessNextHostState+0xd2>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <USB_Host_ProcessNextHostState+0xd8>
    124e:	00 00       	nop
    1250:	aa c0       	rjmp	.+340    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    1252:	77 98       	cbi	0x0e, 7	; 14
    1254:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	80 93 d8 00 	sts	0x00D8, r24
    125e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1262:	8b 7f       	andi	r24, 0xFB	; 251
    1264:	80 93 dd 00 	sts	0x00DD, r24
    1268:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	80 93 d7 00 	sts	0x00D7, r24
    1272:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	80 93 dd 00 	sts	0x00DD, r24
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	d2 cf       	rjmp	.-92     	; 0x1224 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1280:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1284:	80 ff       	sbrs	r24, 0
    1286:	8f c0       	rjmp	.+286    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1288:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	80 93 9f 00 	sts	0x009F, r24
    1292:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1296:	8d 7f       	andi	r24, 0xFD	; 253
    1298:	80 93 9f 00 	sts	0x009F, r24
    129c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    12a0:	8d 7f       	andi	r24, 0xFD	; 253
    12a2:	80 93 df 00 	sts	0x00DF, r24
    12a6:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	80 93 de 00 	sts	0x00DE, r24
    12b0:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	80 93 9e 00 	sts	0x009E, r24
    12ba:	35 d1       	rcall	.+618    	; 0x1526 <Pipe_ClearPipes>
    12bc:	10 92 fa 04 	sts	0x04FA, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    12c0:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	90 93 14 01 	sts	0x0114, r25
    12c8:	80 93 13 01 	sts	0x0113, r24
    12cc:	85 e0       	ldi	r24, 0x05	; 5
    12ce:	0a c0       	rjmp	.+20     	; 0x12e4 <USB_Host_ProcessNextHostState+0x16e>
    12d0:	b4 de       	rcall	.-664    	; 0x103a <USB_Host_ResetDevice>
    12d2:	10 92 fa 04 	sts	0x04FA, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    12da:	90 93 14 01 	sts	0x0114, r25
    12de:	80 93 13 01 	sts	0x0113, r24
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	80 93 12 01 	sts	0x0112, r24
    12e8:	5e c0       	rjmp	.+188    	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    12ea:	01 e0       	ldi	r16, 0x01	; 1
    12ec:	20 e4       	ldi	r18, 0x40	; 64
    12ee:	30 e0       	ldi	r19, 0x00	; 0
			break;
    12f0:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	af d0       	rcall	.+350    	; 0x1456 <Pipe_ConfigurePipe>
    12f8:	81 11       	cpse	r24, r1
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <USB_Host_ProcessNextHostState+0x18c>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	43 c0       	rjmp	.+134    	; 0x1388 <USB_Host_ProcessNextHostState+0x212>
    1302:	87 e0       	ldi	r24, 0x07	; 7
    1304:	8f cf       	rjmp	.-226    	; 0x1224 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1306:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1308:	e1 e0       	ldi	r30, 0x01	; 1
    130a:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    130c:	a2 ef       	ldi	r26, 0xF2	; 242
    130e:	b4 e0       	ldi	r27, 0x04	; 4
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1310:	01 90       	ld	r0, Z+
    1312:	0d 92       	st	X+, r0
    1314:	8a 95       	dec	r24
    1316:	e1 f7       	brne	.-8      	; 0x1310 <USB_Host_ProcessNextHostState+0x19a>
    1318:	10 92 a7 00 	sts	0x00A7, r1
    131c:	ce 01       	movw	r24, r28
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	30 d3       	rcall	.+1632   	; 0x1982 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1322:	81 11       	cpse	r24, r1
    1324:	30 c0       	rjmp	.+96     	; 0x1386 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1326:	88 85       	ldd	r24, Y+8	; 0x08
    1328:	80 93 00 01 	sts	0x0100, r24
    132c:	86 de       	rcall	.-756    	; 0x103a <USB_Host_ResetDevice>
    132e:	10 92 fa 04 	sts	0x04FA, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	90 93 14 01 	sts	0x0114, r25

			USB_Host_ResetDevice();
    133a:	80 93 13 01 	sts	0x0113, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    133e:	88 e0       	ldi	r24, 0x08	; 8
    1340:	d1 cf       	rjmp	.-94     	; 0x12e4 <USB_Host_ProcessNextHostState+0x16e>
    1342:	20 91 00 01 	lds	r18, 0x0100
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	01 e0       	ldi	r16, 0x01	; 1
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1350:	82 d0       	rcall	.+260    	; 0x1456 <Pipe_ConfigurePipe>
    1352:	88 23       	and	r24, r24
    1354:	99 f2       	breq	.-90     	; 0x12fc <USB_Host_ProcessNextHostState+0x186>
    1356:	88 e0       	ldi	r24, 0x08	; 8
    1358:	e9 e0       	ldi	r30, 0x09	; 9
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	a2 ef       	ldi	r26, 0xF2	; 242
    135e:	b4 e0       	ldi	r27, 0x04	; 4
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1366:	e1 f7       	brne	.-8      	; 0x1360 <USB_Host_ProcessNextHostState+0x1ea>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0a d3       	rcall	.+1556   	; 0x1982 <USB_Host_SendControlRequest>
    136e:	81 11       	cpse	r24, r1
    1370:	0a c0       	rjmp	.+20     	; 0x1386 <USB_Host_ProcessNextHostState+0x210>
    1372:	10 92 fa 04 	sts	0x04FA, r1
    1376:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 14 01 	sts	0x0114, r25
    137e:	80 93 13 01 	sts	0x0113, r24
    1382:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1384:	af cf       	rjmp	.-162    	; 0x12e4 <USB_Host_ProcessNextHostState+0x16e>
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	20 91 fa 04 	lds	r18, 0x04FA
    138c:	21 30       	cpi	r18, 0x01	; 1
    138e:	59 f0       	breq	.+22     	; 0x13a6 <USB_Host_ProcessNextHostState+0x230>
    1390:	68 2f       	mov	r22, r24
    1392:	89 2f       	mov	r24, r25
    1394:	80 d8       	rcall	.-3840   	; 0x496 <EVENT_USB_Host_DeviceEnumerationFailed>
    1396:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 93 dd 00 	sts	0x00DD, r24
    13a0:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    13a4:	1a d1       	rcall	.+564    	; 0x15da <USB_ResetInterface>
    13a6:	28 96       	adiw	r28, 0x08	; 8
    13a8:	0f b6       	in	r0, 0x3f	; 63
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17

		USB_ResetInterface();
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	7c 01       	movw	r14, r24
    13ce:	8b 01       	movw	r16, r22
    13d0:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13d2:	80 91 aa 00 	lds	r24, 0x00AA
    13d6:	8f 7c       	andi	r24, 0xCF	; 207
    13d8:	80 61       	ori	r24, 0x10	; 16
    13da:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    13de:	b7 d0       	rcall	.+366    	; 0x154e <Pipe_WaitUntilReady>
    13e0:	81 11       	cpse	r24, r1
    13e2:	30 c0       	rjmp	.+96     	; 0x1444 <Pipe_Read_Stream_LE+0x88>
    13e4:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    13e6:	31 f0       	breq	.+12     	; 0x13f4 <Pipe_Read_Stream_LE+0x38>
    13e8:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	08 1b       	sub	r16, r24
    13ee:	19 0b       	sbc	r17, r25
    13f0:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    13f2:	f9 1e       	adc	r15, r25
    13f4:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13f6:	d1 2c       	mov	r13, r1
    13f8:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    13fa:	11 05       	cpc	r17, r1
    13fc:	11 f1       	breq	.+68     	; 0x1442 <Pipe_Read_Stream_LE+0x86>
    13fe:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1402:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1404:	13 c0       	rjmp	.+38     	; 0x142c <Pipe_Read_Stream_LE+0x70>
    1406:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    140a:	8e 77       	andi	r24, 0x7E	; 126
    140c:	80 93 a6 00 	sts	0x00A6, r24
    1410:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1412:	41 f0       	breq	.+16     	; 0x1424 <Pipe_Read_Stream_LE+0x68>
    1414:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    1416:	99 81       	ldd	r25, Y+1	; 0x01
    1418:	8c 0d       	add	r24, r12
    141a:	9d 1d       	adc	r25, r13
    141c:	99 83       	std	Y+1, r25	; 0x01
    141e:	88 83       	st	Y, r24
    1420:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1422:	10 c0       	rjmp	.+32     	; 0x1444 <Pipe_Read_Stream_LE+0x88>
    1424:	94 d0       	rcall	.+296    	; 0x154e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1426:	88 23       	and	r24, r24
    1428:	39 f3       	breq	.-50     	; 0x13f8 <Pipe_Read_Stream_LE+0x3c>
    142a:	0c c0       	rjmp	.+24     	; 0x1444 <Pipe_Read_Stream_LE+0x88>
    142c:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1430:	f7 01       	movw	r30, r14
    1432:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1434:	7f 01       	movw	r14, r30
    1436:	01 50       	subi	r16, 0x01	; 1
    1438:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    143a:	ff ef       	ldi	r31, 0xFF	; 255
    143c:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    143e:	df 0a       	sbc	r13, r31
    1440:	db cf       	rjmp	.-74     	; 0x13f8 <Pipe_Read_Stream_LE+0x3c>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    1446:	cf 91       	pop	r28
}
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1456:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1458:	e8 2f       	mov	r30, r24
    145a:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    145c:	87 ff       	sbrs	r24, 7
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <Pipe_ConfigurePipe+0xe>
    1460:	80 e1       	ldi	r24, 0x10	; 16
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <Pipe_ConfigurePipe+0x10>
    1464:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    1466:	e7 30       	cpi	r30, 0x07	; 7
    1468:	10 f0       	brcs	.+4      	; 0x146e <Pipe_ConfigurePipe+0x18>
	  return false;
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	5a c0       	rjmp	.+180    	; 0x1522 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    146e:	61 11       	cpse	r22, r1
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    1472:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1474:	90 e4       	ldi	r25, 0x40	; 64
    1476:	69 9f       	mul	r22, r25
    1478:	b0 01       	movw	r22, r0
    147a:	11 24       	eor	r1, r1
    147c:	4f 70       	andi	r20, 0x0F	; 15
    147e:	46 2b       	or	r20, r22
    1480:	48 2b       	or	r20, r24
    1482:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1484:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1488:	5e 13       	cpse	r21, r30
    148a:	19 c0       	rjmp	.+50     	; 0x14be <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    148c:	02 30       	cpi	r16, 0x02	; 2
    148e:	10 f0       	brcs	.+4      	; 0x1494 <Pipe_ConfigurePipe+0x3e>
    1490:	76 e0       	ldi	r23, 0x06	; 6
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <Pipe_ConfigurePipe+0x40>
    1494:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    149a:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    149c:	82 17       	cp	r24, r18
    149e:	93 07       	cpc	r25, r19
    14a0:	40 f0       	brcs	.+16     	; 0x14b2 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    14a2:	86 2f       	mov	r24, r22
    14a4:	82 95       	swap	r24
    14a6:	80 7f       	andi	r24, 0xF0	; 240
    14a8:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    14aa:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    14ac:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    14b2:	65 30       	cpi	r22, 0x05	; 5
    14b4:	b1 f3       	breq	.-20     	; 0x14a2 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	ef cf       	rjmp	.-34     	; 0x149c <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    14be:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    14c2:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    14c6:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    14ca:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    14ce:	81 fd       	sbrc	r24, 1
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    14d2:	5f 5f       	subi	r21, 0xFF	; 255
    14d4:	57 30       	cpi	r21, 0x07	; 7
    14d6:	b1 f6       	brne	.-84     	; 0x1484 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14d8:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	21 c0       	rjmp	.+66     	; 0x1522 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    14e0:	90 91 a9 00 	lds	r25, 0x00A9
    14e4:	9e 7f       	andi	r25, 0xFE	; 254
    14e6:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    14ea:	90 91 ab 00 	lds	r25, 0x00AB
    14ee:	9d 7f       	andi	r25, 0xFD	; 253
    14f0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    14f4:	90 91 a9 00 	lds	r25, 0x00A9
    14f8:	91 60       	ori	r25, 0x01	; 1
    14fa:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    14fe:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1502:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1506:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    150a:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    150e:	80 91 a9 00 	lds	r24, 0x00A9
    1512:	80 62       	ori	r24, 0x20	; 32
    1514:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1518:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    151c:	87 fd       	sbrc	r24, 7
    151e:	d9 cf       	rjmp	.-78     	; 0x14d2 <Pipe_ConfigurePipe+0x7c>
    1520:	a4 cf       	rjmp	.-184    	; 0x146a <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1526:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    152a:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    152c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1530:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1534:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1538:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    153c:	90 91 a9 00 	lds	r25, 0x00A9
    1540:	9e 7f       	andi	r25, 0xFE	; 254
    1542:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	87 30       	cpi	r24, 0x07	; 7
    154a:	81 f7       	brne	.-32     	; 0x152c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    154c:	08 95       	ret

0000154e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    154e:	80 91 a2 00 	lds	r24, 0x00A2
    1552:	90 91 a3 00 	lds	r25, 0x00A3
    1556:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1558:	20 91 aa 00 	lds	r18, 0x00AA
    155c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    155e:	20 31       	cpi	r18, 0x10	; 16
    1560:	29 f4       	brne	.+10     	; 0x156c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1562:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1566:	20 ff       	sbrs	r18, 0
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <Pipe_WaitUntilReady+0x26>
    156a:	17 c0       	rjmp	.+46     	; 0x159a <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    156c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1570:	22 fd       	sbrc	r18, 2
    1572:	13 c0       	rjmp	.+38     	; 0x159a <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1574:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1578:	21 fd       	sbrc	r18, 1
    157a:	11 c0       	rjmp	.+34     	; 0x159e <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    157c:	20 91 fa 04 	lds	r18, 0x04FA
    1580:	21 30       	cpi	r18, 0x01	; 1
    1582:	79 f0       	breq	.+30     	; 0x15a2 <Pipe_WaitUntilReady+0x54>
    1584:	20 91 a2 00 	lds	r18, 0x00A2
    1588:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	19 f3       	breq	.-58     	; 0x1558 <Pipe_WaitUntilReady+0xa>
    1592:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1594:	41 f0       	breq	.+16     	; 0x15a6 <Pipe_WaitUntilReady+0x58>
    1596:	c9 01       	movw	r24, r18
    1598:	df cf       	rjmp	.-66     	; 0x1558 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    15a6:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    15a8:	08 95       	ret

000015aa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    15aa:	75 d0       	rcall	.+234    	; 0x1696 <USB_INT_DisableAllInterrupts>
    15ac:	7c d0       	rcall	.+248    	; 0x16a6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    15ae:	e0 ee       	ldi	r30, 0xE0	; 224
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	80 83       	st	Z, r24
    15b8:	e8 ed       	ldi	r30, 0xD8	; 216
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    15bc:	80 81       	ld	r24, Z
    15be:	8f 77       	andi	r24, 0x7F	; 127
    15c0:	80 83       	st	Z, r24
    15c2:	19 bc       	out	0x29, r1	; 41
    15c4:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    15c6:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    15c8:	8c 91       	ld	r24, X
    15ca:	8e 7f       	andi	r24, 0xFE	; 254
    15cc:	8c 93       	st	X, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    15d2:	80 83       	st	Z, r24
    15d4:	10 92 f1 04 	sts	0x04F1, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    15d8:	08 95       	ret

000015da <USB_ResetInterface>:
    15da:	5d d0       	rcall	.+186    	; 0x1696 <USB_INT_DisableAllInterrupts>
    15dc:	64 d0       	rcall	.+200    	; 0x16a6 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    15de:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	80 93 d8 00 	sts	0x00D8, r24
    15e8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	80 93 d8 00 	sts	0x00D8, r24
    15f2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    15f6:	8f 7d       	andi	r24, 0xDF	; 223
    15f8:	80 93 d8 00 	sts	0x00D8, r24
    15fc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	80 93 d7 00 	sts	0x00D7, r24
    1606:	8c e0       	ldi	r24, 0x0C	; 12
    1608:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    160a:	8e e0       	ldi	r24, 0x0E	; 14
    160c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    160e:	09 b4       	in	r0, 0x29	; 41
    1610:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1612:	fd cf       	rjmp	.-6      	; 0x160e <USB_ResetInterface+0x34>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 fa 04 	sts	0x04FA, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    161a:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ConfigurationNumber = 0;
    161e:	80 e4       	ldi	r24, 0x40	; 64
    1620:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1624:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1628:	80 64       	ori	r24, 0x40	; 64
    162a:	80 93 d8 00 	sts	0x00D8, r24
    162e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	80 93 dd 00 	sts	0x00DD, r24
    1638:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	80 93 dd 00 	sts	0x00DD, r24
    1642:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1646:	8f 7e       	andi	r24, 0xEF	; 239
    1648:	80 93 d7 00 	sts	0x00D7, r24
    164c:	6f 9a       	sbi	0x0d, 7	; 13
    164e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1650:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1654:	81 60       	ori	r24, 0x01	; 1
    1656:	80 93 de 00 	sts	0x00DE, r24
    165a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	80 93 de 00 	sts	0x00DE, r24
    1664:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	80 93 e0 00 	sts	0x00E0, r24
    166e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1672:	80 61       	ori	r24, 0x10	; 16
    1674:	80 93 d8 00 	sts	0x00D8, r24
    1678:	08 95       	ret

0000167a <USB_Init>:
    167a:	e8 ed       	ldi	r30, 0xD8	; 216
    167c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    167e:	80 81       	ld	r24, Z
    1680:	8f 7e       	andi	r24, 0xEF	; 239
    1682:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1684:	e7 ed       	ldi	r30, 0xD7	; 215
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	81 60       	ori	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
    1694:	a2 cf       	rjmp	.-188    	; 0x15da <USB_ResetInterface>

00001696 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1696:	e8 ed       	ldi	r30, 0xD8	; 216
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8c 7f       	andi	r24, 0xFC	; 252
    169e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    16a0:	10 92 a0 00 	sts	0x00A0, r1
    16a4:	08 95       	ret

000016a6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    16a6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    16aa:	10 92 9f 00 	sts	0x009F, r1
    16ae:	08 95       	ret

000016b0 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	0b b6       	in	r0, 0x3b	; 59
    16bc:	0f 92       	push	r0
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	6f 93       	push	r22
    16c8:	7f 93       	push	r23
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	ef 93       	push	r30
    16d4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    16d6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    16da:	85 ff       	sbrs	r24, 5
    16dc:	0a c0       	rjmp	.+20     	; 0x16f2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    16de:	80 91 a0 00 	lds	r24, 0x00A0
    16e2:	85 ff       	sbrs	r24, 5
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    16e6:	80 91 9f 00 	lds	r24, 0x009F
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    16f0:	20 d1       	rcall	.+576    	; 0x1932 <USB_Event_Stub>
    16f2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    16f6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    16f8:	16 c0       	rjmp	.+44     	; 0x1726 <__vector_10+0x76>
    16fa:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    16fe:	81 ff       	sbrs	r24, 1
    1700:	12 c0       	rjmp	.+36     	; 0x1726 <__vector_10+0x76>
    1702:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	80 93 9f 00 	sts	0x009F, r24
    170c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	80 93 9f 00 	sts	0x009F, r24
    1716:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    171a:	8d 7f       	andi	r24, 0xFD	; 253
    171c:	80 93 a0 00 	sts	0x00A0, r24
    1720:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1724:	5a df       	rcall	.-332    	; 0x15da <USB_ResetInterface>

		USB_ResetInterface();
    1726:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    172a:	81 ff       	sbrs	r24, 1
    172c:	17 c0       	rjmp	.+46     	; 0x175c <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    172e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1732:	81 ff       	sbrs	r24, 1
    1734:	13 c0       	rjmp	.+38     	; 0x175c <__vector_10+0xac>
    1736:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    173a:	8d 7f       	andi	r24, 0xFD	; 253
    173c:	80 93 df 00 	sts	0x00DF, r24
    1740:	77 98       	cbi	0x0e, 7	; 14
    1742:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1746:	81 60       	ori	r24, 0x01	; 1
    1748:	80 93 dd 00 	sts	0x00DD, r24
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 33 02 	call	0x466	; 0x466 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1752:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 fa 04 	sts	0x04FA, r24

		USB_HostState = HOST_STATE_Unattached;
    175c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1760:	80 ff       	sbrs	r24, 0
    1762:	18 c0       	rjmp	.+48     	; 0x1794 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1764:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1768:	80 ff       	sbrs	r24, 0
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <__vector_10+0xe4>
    176c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1770:	8e 7f       	andi	r24, 0xFE	; 254
    1772:	80 93 df 00 	sts	0x00DF, r24
    1776:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    177a:	8e 7f       	andi	r24, 0xFE	; 254
    177c:	80 93 de 00 	sts	0x00DE, r24
    1780:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1784:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1788:	82 60       	ori	r24, 0x02	; 2
    178a:	80 93 a0 00 	sts	0x00A0, r24
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	80 93 fa 04 	sts	0x04FA, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1794:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1798:	82 ff       	sbrs	r24, 2
    179a:	10 c0       	rjmp	.+32     	; 0x17bc <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    179c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    17a0:	82 ff       	sbrs	r24, 2
    17a2:	0c c0       	rjmp	.+24     	; 0x17bc <__vector_10+0x10c>
    17a4:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	80 93 df 00 	sts	0x00DF, r24
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    17b2:	0e 94 4b 02 	call	0x496	; 0x496 <EVENT_USB_Host_DeviceEnumerationFailed>
    17b6:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    17ba:	0f df       	rcall	.-482    	; 0x15da <USB_ResetInterface>
    17bc:	ff 91       	pop	r31

		USB_ResetInterface();
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    17e8:	eb 01       	movw	r28, r22
    17ea:	a8 81       	ld	r26, Y
    17ec:	b9 81       	ldd	r27, Y+1	; 0x01
    17ee:	8c 91       	ld	r24, X
    17f0:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    17f2:	20 81       	ld	r18, Z
    17f4:	31 81       	ldd	r19, Z+1	; 0x01
    17f6:	82 17       	cp	r24, r18
    17f8:	93 07       	cpc	r25, r19
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <USB_GetNextDescriptor+0x1c>
    17fc:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    17fe:	a2 0f       	add	r26, r18
    1800:	b3 1f       	adc	r27, r19
    1802:	eb 01       	movw	r28, r22
    1804:	b9 83       	std	Y+1, r27	; 0x01
    1806:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	82 1b       	sub	r24, r18
    180e:	93 0b       	sbc	r25, r19
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
			}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	29 97       	sbiw	r28, 0x09	; 9
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	7b 01       	movw	r14, r22
    183c:	8a 01       	movw	r16, r20
    183e:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1840:	90 e8       	ldi	r25, 0x80	; 128
    1842:	90 93 f2 04 	sts	0x04F2, r25
    1846:	96 e0       	ldi	r25, 0x06	; 6
    1848:	90 93 f3 04 	sts	0x04F3, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    184c:	e8 2f       	mov	r30, r24
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	31 97       	sbiw	r30, 0x01	; 1
    1852:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1854:	f0 93 f5 04 	sts	0x04F5, r31
    1858:	e0 93 f4 04 	sts	0x04F4, r30
    185c:	10 92 f7 04 	sts	0x04F7, r1
    1860:	10 92 f6 04 	sts	0x04F6, r1
    1864:	89 e0       	ldi	r24, 0x09	; 9
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	90 93 f9 04 	sts	0x04F9, r25
    186c:	80 93 f8 04 	sts	0x04F8, r24
    1870:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1874:	ce 01       	movw	r24, r28
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	84 d0       	rcall	.+264    	; 0x1982 <USB_Host_SendControlRequest>
    187a:	81 11       	cpse	r24, r1
    187c:	19 c0       	rjmp	.+50     	; 0x18b0 <USB_Host_GetDeviceConfigDescriptor+0x96>
    187e:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1880:	fc 81       	ldd	r31, Y+4	; 0x04
    1882:	d7 01       	movw	r26, r14
    1884:	ed 93       	st	X+, r30
    1886:	fc 93       	st	X, r31
    1888:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    188a:	df 06       	cpc	r13, r31
    188c:	70 f0       	brcs	.+28     	; 0x18aa <USB_Host_GetDeviceConfigDescriptor+0x90>
    188e:	f0 93 f9 04 	sts	0x04F9, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1892:	e0 93 f8 04 	sts	0x04F8, r30
    1896:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1898:	74 d0       	rcall	.+232    	; 0x1982 <USB_Host_SendControlRequest>
    189a:	81 11       	cpse	r24, r1
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <USB_Host_GetDeviceConfigDescriptor+0x96>
    189e:	f8 01       	movw	r30, r16
    18a0:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	21 f0       	breq	.+8      	; 0x18ae <USB_Host_GetDeviceConfigDescriptor+0x94>
    18a6:	86 e0       	ldi	r24, 0x06	; 6
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    18aa:	85 e0       	ldi	r24, 0x05	; 5
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    18b2:	0f b6       	in	r0, 0x3f	; 63
}
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	08 95       	ret

000018ce <USB_GetNextDescriptorComp>:
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	8c 01       	movw	r16, r24
    18e4:	eb 01       	movw	r28, r22
    18e6:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    18e8:	f8 01       	movw	r30, r16
    18ea:	e0 80       	ld	r14, Z
    18ec:	f1 80       	ldd	r15, Z+1	; 0x01
    18ee:	e1 14       	cp	r14, r1
    18f0:	f1 04       	cpc	r15, r1
    18f2:	99 f0       	breq	.+38     	; 0x191a <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    18f4:	a8 80       	ld	r10, Y
    18f6:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    18f8:	be 01       	movw	r22, r28
    18fa:	c8 01       	movw	r24, r16
    18fc:	72 df       	rcall	.-284    	; 0x17e2 <USB_GetNextDescriptor>
    18fe:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1900:	99 81       	ldd	r25, Y+1	; 0x01
    1902:	f6 01       	movw	r30, r12
    1904:	09 95       	icall
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	79 f3       	breq	.-34     	; 0x18e8 <USB_GetNextDescriptorComp+0x1a>
    190a:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    190c:	39 f4       	brne	.+14     	; 0x191c <USB_GetNextDescriptorComp+0x4e>
    190e:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1910:	a8 82       	st	Y, r10
    1912:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1914:	f1 82       	std	Z+1, r15	; 0x01
    1916:	e0 82       	st	Z, r14
    1918:	01 c0       	rjmp	.+2      	; 0x191c <USB_GetNextDescriptorComp+0x4e>
    191a:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    191c:	df 91       	pop	r29
}
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	08 95       	ret

00001932 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1932:	08 95       	ret

00001934 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    193c:	c9 ee       	ldi	r28, 0xE9	; 233
    193e:	d3 e0       	ldi	r29, 0x03	; 3
    1940:	11 11       	cpse	r17, r1
    1942:	0d c0       	rjmp	.+26     	; 0x195e <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1944:	80 91 a6 00 	lds	r24, 0x00A6
    1948:	83 fd       	sbrc	r24, 3
    194a:	16 c0       	rjmp	.+44     	; 0x1978 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	c6 db       	rcall	.-2164   	; 0x10dc <USB_Host_WaitMS>
    1950:	81 11       	cpse	r24, r1
    1952:	13 c0       	rjmp	.+38     	; 0x197a <USB_Host_WaitForIOS+0x46>
    1954:	21 97       	sbiw	r28, 0x01	; 1
    1956:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1958:	99 f7       	brne	.-26     	; 0x1940 <USB_Host_WaitForIOS+0xc>
    195a:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    195c:	0e c0       	rjmp	.+28     	; 0x197a <USB_Host_WaitForIOS+0x46>
    195e:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1960:	29 f4       	brne	.+10     	; 0x196c <USB_Host_WaitForIOS+0x38>
    1962:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1966:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1968:	f1 cf       	rjmp	.-30     	; 0x194c <USB_Host_WaitForIOS+0x18>
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <USB_Host_WaitForIOS+0x44>
    196c:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    196e:	71 f7       	brne	.-36     	; 0x194c <USB_Host_WaitForIOS+0x18>
    1970:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1974:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1976:	ea cf       	rjmp	.-44     	; 0x194c <USB_Host_WaitForIOS+0x18>
    1978:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    197a:	df 91       	pop	r29
}
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	08 95       	ret

00001982 <USB_Host_SendControlRequest>:
    1982:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    198e:	f0 90 9e 00 	lds	r15, 0x009E
    1992:	8f 2d       	mov	r24, r15
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1998:	c0 91 f8 04 	lds	r28, 0x04F8
    199c:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    19a0:	80 91 9e 00 	lds	r24, 0x009E
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	97 db       	rcall	.-2258   	; 0x10dc <USB_Host_WaitMS>
    19ae:	81 11       	cpse	r24, r1
    19b0:	cc c0       	rjmp	.+408    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    19b2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19b6:	8f 7c       	andi	r24, 0xCF	; 207
    19b8:	80 93 aa 00 	sts	0x00AA, r24
    19bc:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    19c0:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    19c4:	8f 7e       	andi	r24, 0xEF	; 239
    19c6:	80 93 a6 00 	sts	0x00A6, r24
    19ca:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19ce:	8f 7b       	andi	r24, 0xBF	; 191
    19d0:	80 93 a9 00 	sts	0x00A9, r24
    19d4:	e2 ef       	ldi	r30, 0xF2	; 242
    19d6:	f4 e0       	ldi	r31, 0x04	; 4
    19d8:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    19da:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    19de:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    19e0:	ea 3f       	cpi	r30, 0xFA	; 250
    19e2:	f8 07       	cpc	r31, r24
    19e4:	c9 f7       	brne	.-14     	; 0x19d8 <USB_Host_SendControlRequest+0x56>
    19e6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    19ea:	87 77       	andi	r24, 0x77	; 119
    19ec:	80 93 a6 00 	sts	0x00A6, r24
    19f0:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    19f2:	a0 df       	rcall	.-192    	; 0x1934 <USB_Host_WaitForIOS>
    19f4:	81 11       	cpse	r24, r1
    19f6:	a9 c0       	rjmp	.+338    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    19f8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19fc:	80 64       	ori	r24, 0x40	; 64
    19fe:	80 93 a9 00 	sts	0x00A9, r24
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	6b db       	rcall	.-2346   	; 0x10dc <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a06:	81 11       	cpse	r24, r1
    1a08:	a0 c0       	rjmp	.+320    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1a0a:	80 91 f2 04 	lds	r24, 0x04F2
    1a0e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1a10:	4e c0       	rjmp	.+156    	; 0x1aae <USB_Host_SendControlRequest+0x12c>
    1a12:	80 91 aa 00 	lds	r24, 0x00AA
    1a16:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a18:	80 61       	ori	r24, 0x10	; 16
    1a1a:	80 93 aa 00 	sts	0x00AA, r24
    1a1e:	01 15       	cp	r16, r1
    1a20:	11 05       	cpc	r17, r1
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1a24:	3a c0       	rjmp	.+116    	; 0x1a9a <USB_Host_SendControlRequest+0x118>
    1a26:	80 91 aa 00 	lds	r24, 0x00AA
    1a2a:	8f 7c       	andi	r24, 0xCF	; 207
    1a2c:	80 62       	ori	r24, 0x20	; 32
    1a2e:	80 93 aa 00 	sts	0x00AA, r24
    1a32:	80 91 a9 00 	lds	r24, 0x00A9
    1a36:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a38:	80 93 a9 00 	sts	0x00A9, r24
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	7a df       	rcall	.-268    	; 0x1934 <USB_Host_WaitForIOS>
    1a40:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a42:	83 c0       	rjmp	.+262    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1a44:	80 91 a6 00 	lds	r24, 0x00A6
    1a48:	8b 77       	andi	r24, 0x7B	; 123
    1a4a:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	71 df       	rcall	.-286    	; 0x1934 <USB_Host_WaitForIOS>
    1a52:	7b c0       	rjmp	.+246    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1a54:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a58:	8f 7b       	andi	r24, 0xBF	; 191
    1a5a:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	69 df       	rcall	.-302    	; 0x1934 <USB_Host_WaitForIOS>
    1a62:	81 11       	cpse	r24, r1
    1a64:	72 c0       	rjmp	.+228    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1a66:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a6a:	90 91 f7 00 	lds	r25, 0x00F7
    1a6e:	89 2b       	or	r24, r25
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	d0 e0       	ldi	r29, 0x00	; 0
    1a76:	f8 01       	movw	r30, r16
    1a78:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1a7a:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1a7e:	90 91 f7 00 	lds	r25, 0x00F7
    1a82:	89 2b       	or	r24, r25
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <USB_Host_SendControlRequest+0x11e>
    1a86:	80 91 a9 00 	lds	r24, 0x00A9
    1a8a:	80 64       	ori	r24, 0x40	; 64
    1a8c:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1a90:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a94:	8e 77       	andi	r24, 0x7E	; 126
    1a96:	80 93 a6 00 	sts	0x00A6, r24
    1a9a:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a9c:	d9 f6       	brne	.-74     	; 0x1a54 <USB_Host_SendControlRequest+0xd2>
    1a9e:	c3 cf       	rjmp	.-122    	; 0x1a26 <USB_Host_SendControlRequest+0xa4>
    1aa0:	20 97       	sbiw	r28, 0x00	; 0
    1aa2:	89 f3       	breq	.-30     	; 0x1a86 <USB_Host_SendControlRequest+0x104>
    1aa4:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1aa8:	81 93       	st	Z+, r24
    1aaa:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1aac:	e5 cf       	rjmp	.-54     	; 0x1a78 <USB_Host_SendControlRequest+0xf6>
    1aae:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	b1 f1       	breq	.+108    	; 0x1b20 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1ab4:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1ab8:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ac0:	80 91 a9 00 	lds	r24, 0x00A9
    1ac4:	8f 7b       	andi	r24, 0xBF	; 191
    1ac6:	80 93 a9 00 	sts	0x00A9, r24
    1aca:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1acc:	20 97       	sbiw	r28, 0x00	; 0
    1ace:	01 f1       	breq	.+64     	; 0x1b10 <USB_Host_SendControlRequest+0x18e>
    1ad0:	31 df       	rcall	.-414    	; 0x1934 <USB_Host_WaitForIOS>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	3a c0       	rjmp	.+116    	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ad6:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1ad8:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1adc:	30 91 f7 00 	lds	r19, 0x00F7
    1ae0:	80 91 00 01 	lds	r24, 0x0100
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ae6:	28 17       	cp	r18, r24
    1ae8:	39 07       	cpc	r19, r25
    1aea:	58 f4       	brcc	.+22     	; 0x1b02 <USB_Host_SendControlRequest+0x180>
    1aec:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	8c 01       	movw	r16, r24
    1af2:	20 81       	ld	r18, Z
    1af4:	20 93 af 00 	sts	0x00AF, r18
    1af8:	21 97       	sbiw	r28, 0x01	; 1
    1afa:	20 97       	sbiw	r28, 0x00	; 0
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <USB_Host_SendControlRequest+0x182>
    1afe:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1b00:	eb cf       	rjmp	.-42     	; 0x1ad8 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b02:	8f 01       	movw	r16, r30
    1b04:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b08:	8b 77       	andi	r24, 0x7B	; 123
    1b0a:	80 93 a6 00 	sts	0x00A6, r24
    1b0e:	dd cf       	rjmp	.-70     	; 0x1aca <USB_Host_SendControlRequest+0x148>
    1b10:	11 df       	rcall	.-478    	; 0x1934 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b12:	81 11       	cpse	r24, r1
    1b14:	1a c0       	rjmp	.+52     	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1b16:	80 91 a9 00 	lds	r24, 0x00A9
    1b1a:	80 64       	ori	r24, 0x40	; 64
    1b1c:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b20:	80 91 aa 00 	lds	r24, 0x00AA
    1b24:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b26:	80 61       	ori	r24, 0x10	; 16
    1b28:	80 93 aa 00 	sts	0x00AA, r24
    1b2c:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b30:	8f 7b       	andi	r24, 0xBF	; 191
    1b32:	80 93 a9 00 	sts	0x00A9, r24
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	fd de       	rcall	.-518    	; 0x1934 <USB_Host_WaitForIOS>
    1b3a:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b3c:	06 c0       	rjmp	.+12     	; 0x1b4a <USB_Host_SendControlRequest+0x1c8>
    1b3e:	80 91 a6 00 	lds	r24, 0x00A6
    1b42:	8e 77       	andi	r24, 0x7E	; 126
    1b44:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 91 a9 00 	lds	r25, 0x00A9
    1b4e:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b50:	90 93 a9 00 	sts	0x00A9, r25
    1b54:	f1 10       	cpse	r15, r1
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <USB_Host_SendControlRequest+0x1e0>
    1b58:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b5c:	9e 7f       	andi	r25, 0xFE	; 254
    1b5e:	90 93 9e 00 	sts	0x009E, r25
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1b68:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1b74:	ff 90       	pop	r15
    1b76:	08 95       	ret

00001b78 <USB_Host_SetDeviceConfiguration>:
    1b78:	cf 93       	push	r28
				UPRST = 0;
    1b7a:	c8 2f       	mov	r28, r24
    1b7c:	10 92 f2 04 	sts	0x04F2, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1b80:	89 e0       	ldi	r24, 0x09	; 9
    1b82:	80 93 f3 04 	sts	0x04F3, r24
    1b86:	2c 2f       	mov	r18, r28
    1b88:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1b8a:	30 93 f5 04 	sts	0x04F5, r19
    1b8e:	20 93 f4 04 	sts	0x04F4, r18
    1b92:	10 92 f7 04 	sts	0x04F7, r1
    1b96:	10 92 f6 04 	sts	0x04F6, r1
    1b9a:	10 92 f9 04 	sts	0x04F9, r1
    1b9e:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ba2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	eb de       	rcall	.-554    	; 0x1982 <USB_Host_SendControlRequest>
    1bac:	81 11       	cpse	r24, r1
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <USB_Host_SetDeviceConfiguration+0x4a>
    1bb0:	c0 93 f0 04 	sts	0x04F0, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1bb4:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1bb6:	11 f0       	breq	.+4      	; 0x1bbc <USB_Host_SetDeviceConfiguration+0x44>
    1bb8:	9b e0       	ldi	r25, 0x0B	; 11
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <USB_Host_SetDeviceConfiguration+0x46>
    1bbc:	9a e0       	ldi	r25, 0x0A	; 10
    1bbe:	90 93 fa 04 	sts	0x04FA, r25
    1bc2:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1bc4:	08 95       	ret

00001bc6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1bc6:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1bc8:	c0 91 a7 00 	lds	r28, 0x00A7
    1bcc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1bce:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1bd2:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1bd6:	cf da       	rcall	.-2658   	; 0x1176 <USB_Host_ProcessNextHostState>
    1bd8:	c0 93 a7 00 	sts	0x00A7, r28
    1bdc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1bde:	08 95       	ret

00001be0 <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1be0:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1be4:	95 ff       	sbrs	r25, 5
    1be6:	fc cf       	rjmp	.-8      	; 0x1be0 <Serial_putchar>
				UDR1 = DataByte;
    1be8:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	08 95       	ret

00001bf2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1bf2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1bf6:	87 ff       	sbrs	r24, 7
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <Serial_getchar+0x18>
    1bfa:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1bfe:	87 ff       	sbrs	r24, 7
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1c02:	80 91 ce 00 	lds	r24, 0x00CE
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	08 95       	ret
	  return _FDEV_EOF;
    1c0a:	8e ef       	ldi	r24, 0xFE	; 254
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1c14:	08 95       	ret

00001c16 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1c16:	fc 01       	movw	r30, r24
	if (!(Stream))
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	59 f4       	brne	.+22     	; 0x1c32 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1c1c:	8b ef       	ldi	r24, 0xFB	; 251
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	90 93 0a 05 	sts	0x050A, r25
    1c24:	80 93 09 05 	sts	0x0509, r24
		stdout = Stream;
    1c28:	90 93 0c 05 	sts	0x050C, r25
    1c2c:	80 93 0b 05 	sts	0x050B, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1c30:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1c32:	8e e0       	ldi	r24, 0x0E	; 14
    1c34:	df 01       	movw	r26, r30
    1c36:	1d 92       	st	X+, r1
    1c38:	8a 95       	dec	r24
    1c3a:	e9 f7       	brne	.-6      	; 0x1c36 <Serial_CreateStream+0x20>
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	83 83       	std	Z+3, r24	; 0x03
    1c40:	80 ef       	ldi	r24, 0xF0	; 240
    1c42:	9d e0       	ldi	r25, 0x0D	; 13
    1c44:	91 87       	std	Z+9, r25	; 0x09
    1c46:	80 87       	std	Z+8, r24	; 0x08
    1c48:	89 ef       	ldi	r24, 0xF9	; 249
    1c4a:	9d e0       	ldi	r25, 0x0D	; 13
    1c4c:	93 87       	std	Z+11, r25	; 0x0b
    1c4e:	82 87       	std	Z+10, r24	; 0x0a
    1c50:	08 95       	ret

00001c52 <fputc>:
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	18 2f       	mov	r17, r24
    1c5c:	09 2f       	mov	r16, r25
    1c5e:	eb 01       	movw	r28, r22
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	81 fd       	sbrc	r24, 1
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <fputc+0x1a>
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	20 c0       	rjmp	.+64     	; 0x1cac <fputc+0x5a>
    1c6c:	82 ff       	sbrs	r24, 2
    1c6e:	10 c0       	rjmp	.+32     	; 0x1c90 <fputc+0x3e>
    1c70:	4e 81       	ldd	r20, Y+6	; 0x06
    1c72:	5f 81       	ldd	r21, Y+7	; 0x07
    1c74:	2c 81       	ldd	r18, Y+4	; 0x04
    1c76:	3d 81       	ldd	r19, Y+5	; 0x05
    1c78:	42 17       	cp	r20, r18
    1c7a:	53 07       	cpc	r21, r19
    1c7c:	7c f4       	brge	.+30     	; 0x1c9c <fputc+0x4a>
    1c7e:	e8 81       	ld	r30, Y
    1c80:	f9 81       	ldd	r31, Y+1	; 0x01
    1c82:	9f 01       	movw	r18, r30
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	39 83       	std	Y+1, r19	; 0x01
    1c8a:	28 83       	st	Y, r18
    1c8c:	10 83       	st	Z, r17
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <fputc+0x4a>
    1c90:	e8 85       	ldd	r30, Y+8	; 0x08
    1c92:	f9 85       	ldd	r31, Y+9	; 0x09
    1c94:	81 2f       	mov	r24, r17
    1c96:	09 95       	icall
    1c98:	89 2b       	or	r24, r25
    1c9a:	29 f7       	brne	.-54     	; 0x1c66 <fputc+0x14>
    1c9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	3f 83       	std	Y+7, r19	; 0x07
    1ca6:	2e 83       	std	Y+6, r18	; 0x06
    1ca8:	81 2f       	mov	r24, r17
    1caa:	90 2f       	mov	r25, r16
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <printf_P>:
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	37 96       	adiw	r30, 0x07	; 7
    1cc6:	61 91       	ld	r22, Z+
    1cc8:	71 91       	ld	r23, Z+
    1cca:	0b e0       	ldi	r16, 0x0B	; 11
    1ccc:	15 e0       	ldi	r17, 0x05	; 5
    1cce:	d8 01       	movw	r26, r16
    1cd0:	8d 91       	ld	r24, X+
    1cd2:	9c 91       	ld	r25, X
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	13 96       	adiw	r26, 0x03	; 3
    1cd8:	2c 91       	ld	r18, X
    1cda:	13 97       	sbiw	r26, 0x03	; 3
    1cdc:	28 60       	ori	r18, 0x08	; 8
    1cde:	13 96       	adiw	r26, 0x03	; 3
    1ce0:	2c 93       	st	X, r18
    1ce2:	af 01       	movw	r20, r30
    1ce4:	3a d0       	rcall	.+116    	; 0x1d5a <vfprintf>
    1ce6:	d8 01       	movw	r26, r16
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	23 81       	ldd	r18, Z+3	; 0x03
    1cee:	27 7f       	andi	r18, 0xF7	; 247
    1cf0:	23 83       	std	Z+3, r18	; 0x03
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <puts_P>:
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
    1d06:	e0 91 0b 05 	lds	r30, 0x050B
    1d0a:	f0 91 0c 05 	lds	r31, 0x050C
    1d0e:	83 81       	ldd	r24, Z+3	; 0x03
    1d10:	81 ff       	sbrs	r24, 1
    1d12:	1c c0       	rjmp	.+56     	; 0x1d4c <puts_P+0x50>
    1d14:	00 e0       	ldi	r16, 0x00	; 0
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	fe 01       	movw	r30, r28
    1d1a:	84 91       	lpm	r24, Z
    1d1c:	60 91 0b 05 	lds	r22, 0x050B
    1d20:	70 91 0c 05 	lds	r23, 0x050C
    1d24:	db 01       	movw	r26, r22
    1d26:	18 96       	adiw	r26, 0x08	; 8
    1d28:	ed 91       	ld	r30, X+
    1d2a:	fc 91       	ld	r31, X
    1d2c:	19 97       	sbiw	r26, 0x09	; 9
    1d2e:	88 23       	and	r24, r24
    1d30:	39 f0       	breq	.+14     	; 0x1d40 <puts_P+0x44>
    1d32:	09 95       	icall
    1d34:	89 2b       	or	r24, r25
    1d36:	11 f0       	breq	.+4      	; 0x1d3c <puts_P+0x40>
    1d38:	0f ef       	ldi	r16, 0xFF	; 255
    1d3a:	1f ef       	ldi	r17, 0xFF	; 255
    1d3c:	21 96       	adiw	r28, 0x01	; 1
    1d3e:	ec cf       	rjmp	.-40     	; 0x1d18 <puts_P+0x1c>
    1d40:	8a e0       	ldi	r24, 0x0A	; 10
    1d42:	09 95       	icall
    1d44:	89 2b       	or	r24, r25
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <puts_P+0x50>
    1d48:	c8 01       	movw	r24, r16
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <puts_P+0x54>
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	08 95       	ret

00001d5a <vfprintf>:
    1d5a:	2f 92       	push	r2
    1d5c:	3f 92       	push	r3
    1d5e:	4f 92       	push	r4
    1d60:	5f 92       	push	r5
    1d62:	6f 92       	push	r6
    1d64:	7f 92       	push	r7
    1d66:	8f 92       	push	r8
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	2c 97       	sbiw	r28, 0x0c	; 12
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	7c 01       	movw	r14, r24
    1d90:	6b 01       	movw	r12, r22
    1d92:	8a 01       	movw	r16, r20
    1d94:	fc 01       	movw	r30, r24
    1d96:	17 82       	std	Z+7, r1	; 0x07
    1d98:	16 82       	std	Z+6, r1	; 0x06
    1d9a:	83 81       	ldd	r24, Z+3	; 0x03
    1d9c:	81 ff       	sbrs	r24, 1
    1d9e:	b0 c1       	rjmp	.+864    	; 0x2100 <__stack+0x1>
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	4c 01       	movw	r8, r24
    1da6:	f7 01       	movw	r30, r14
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	f6 01       	movw	r30, r12
    1dac:	93 fd       	sbrc	r25, 3
    1dae:	85 91       	lpm	r24, Z+
    1db0:	93 ff       	sbrs	r25, 3
    1db2:	81 91       	ld	r24, Z+
    1db4:	6f 01       	movw	r12, r30
    1db6:	88 23       	and	r24, r24
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <vfprintf+0x62>
    1dba:	9e c1       	rjmp	.+828    	; 0x20f8 <vfprintf+0x39e>
    1dbc:	85 32       	cpi	r24, 0x25	; 37
    1dbe:	39 f4       	brne	.+14     	; 0x1dce <vfprintf+0x74>
    1dc0:	93 fd       	sbrc	r25, 3
    1dc2:	85 91       	lpm	r24, Z+
    1dc4:	93 ff       	sbrs	r25, 3
    1dc6:	81 91       	ld	r24, Z+
    1dc8:	6f 01       	movw	r12, r30
    1dca:	85 32       	cpi	r24, 0x25	; 37
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <vfprintf+0x7c>
    1dce:	b7 01       	movw	r22, r14
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	3f df       	rcall	.-386    	; 0x1c52 <fputc>
    1dd4:	e8 cf       	rjmp	.-48     	; 0x1da6 <vfprintf+0x4c>
    1dd6:	51 2c       	mov	r5, r1
    1dd8:	31 2c       	mov	r3, r1
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	20 32       	cpi	r18, 0x20	; 32
    1dde:	a0 f4       	brcc	.+40     	; 0x1e08 <vfprintf+0xae>
    1de0:	8b 32       	cpi	r24, 0x2B	; 43
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <vfprintf+0xa4>
    1de4:	30 f4       	brcc	.+12     	; 0x1df2 <vfprintf+0x98>
    1de6:	80 32       	cpi	r24, 0x20	; 32
    1de8:	59 f0       	breq	.+22     	; 0x1e00 <vfprintf+0xa6>
    1dea:	83 32       	cpi	r24, 0x23	; 35
    1dec:	69 f4       	brne	.+26     	; 0x1e08 <vfprintf+0xae>
    1dee:	20 61       	ori	r18, 0x10	; 16
    1df0:	2c c0       	rjmp	.+88     	; 0x1e4a <vfprintf+0xf0>
    1df2:	8d 32       	cpi	r24, 0x2D	; 45
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <vfprintf+0xaa>
    1df6:	80 33       	cpi	r24, 0x30	; 48
    1df8:	39 f4       	brne	.+14     	; 0x1e08 <vfprintf+0xae>
    1dfa:	21 60       	ori	r18, 0x01	; 1
    1dfc:	26 c0       	rjmp	.+76     	; 0x1e4a <vfprintf+0xf0>
    1dfe:	22 60       	ori	r18, 0x02	; 2
    1e00:	24 60       	ori	r18, 0x04	; 4
    1e02:	23 c0       	rjmp	.+70     	; 0x1e4a <vfprintf+0xf0>
    1e04:	28 60       	ori	r18, 0x08	; 8
    1e06:	21 c0       	rjmp	.+66     	; 0x1e4a <vfprintf+0xf0>
    1e08:	27 fd       	sbrc	r18, 7
    1e0a:	27 c0       	rjmp	.+78     	; 0x1e5a <vfprintf+0x100>
    1e0c:	30 ed       	ldi	r19, 0xD0	; 208
    1e0e:	38 0f       	add	r19, r24
    1e10:	3a 30       	cpi	r19, 0x0A	; 10
    1e12:	78 f4       	brcc	.+30     	; 0x1e32 <vfprintf+0xd8>
    1e14:	26 ff       	sbrs	r18, 6
    1e16:	06 c0       	rjmp	.+12     	; 0x1e24 <vfprintf+0xca>
    1e18:	fa e0       	ldi	r31, 0x0A	; 10
    1e1a:	5f 9e       	mul	r5, r31
    1e1c:	30 0d       	add	r19, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	53 2e       	mov	r5, r19
    1e22:	13 c0       	rjmp	.+38     	; 0x1e4a <vfprintf+0xf0>
    1e24:	8a e0       	ldi	r24, 0x0A	; 10
    1e26:	38 9e       	mul	r3, r24
    1e28:	30 0d       	add	r19, r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	33 2e       	mov	r3, r19
    1e2e:	20 62       	ori	r18, 0x20	; 32
    1e30:	0c c0       	rjmp	.+24     	; 0x1e4a <vfprintf+0xf0>
    1e32:	8e 32       	cpi	r24, 0x2E	; 46
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <vfprintf+0xe4>
    1e36:	26 fd       	sbrc	r18, 6
    1e38:	5f c1       	rjmp	.+702    	; 0x20f8 <vfprintf+0x39e>
    1e3a:	20 64       	ori	r18, 0x40	; 64
    1e3c:	06 c0       	rjmp	.+12     	; 0x1e4a <vfprintf+0xf0>
    1e3e:	8c 36       	cpi	r24, 0x6C	; 108
    1e40:	11 f4       	brne	.+4      	; 0x1e46 <vfprintf+0xec>
    1e42:	20 68       	ori	r18, 0x80	; 128
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <vfprintf+0xf0>
    1e46:	88 36       	cpi	r24, 0x68	; 104
    1e48:	41 f4       	brne	.+16     	; 0x1e5a <vfprintf+0x100>
    1e4a:	f6 01       	movw	r30, r12
    1e4c:	93 fd       	sbrc	r25, 3
    1e4e:	85 91       	lpm	r24, Z+
    1e50:	93 ff       	sbrs	r25, 3
    1e52:	81 91       	ld	r24, Z+
    1e54:	6f 01       	movw	r12, r30
    1e56:	81 11       	cpse	r24, r1
    1e58:	c1 cf       	rjmp	.-126    	; 0x1ddc <vfprintf+0x82>
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	9f 7d       	andi	r25, 0xDF	; 223
    1e5e:	95 54       	subi	r25, 0x45	; 69
    1e60:	93 30       	cpi	r25, 0x03	; 3
    1e62:	28 f4       	brcc	.+10     	; 0x1e6e <vfprintf+0x114>
    1e64:	0c 5f       	subi	r16, 0xFC	; 252
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	ff e3       	ldi	r31, 0x3F	; 63
    1e6a:	f9 83       	std	Y+1, r31	; 0x01
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <vfprintf+0x12e>
    1e6e:	83 36       	cpi	r24, 0x63	; 99
    1e70:	31 f0       	breq	.+12     	; 0x1e7e <vfprintf+0x124>
    1e72:	83 37       	cpi	r24, 0x73	; 115
    1e74:	71 f0       	breq	.+28     	; 0x1e92 <vfprintf+0x138>
    1e76:	83 35       	cpi	r24, 0x53	; 83
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <vfprintf+0x122>
    1e7a:	57 c0       	rjmp	.+174    	; 0x1f2a <vfprintf+0x1d0>
    1e7c:	21 c0       	rjmp	.+66     	; 0x1ec0 <vfprintf+0x166>
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 81       	ld	r24, Z
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	0e 5f       	subi	r16, 0xFE	; 254
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	44 24       	eor	r4, r4
    1e8a:	43 94       	inc	r4
    1e8c:	51 2c       	mov	r5, r1
    1e8e:	54 01       	movw	r10, r8
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <vfprintf+0x160>
    1e92:	38 01       	movw	r6, r16
    1e94:	f2 e0       	ldi	r31, 0x02	; 2
    1e96:	6f 0e       	add	r6, r31
    1e98:	71 1c       	adc	r7, r1
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	a0 80       	ld	r10, Z
    1e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea0:	26 ff       	sbrs	r18, 6
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <vfprintf+0x150>
    1ea4:	65 2d       	mov	r22, r5
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0x154>
    1eaa:	6f ef       	ldi	r22, 0xFF	; 255
    1eac:	7f ef       	ldi	r23, 0xFF	; 255
    1eae:	c5 01       	movw	r24, r10
    1eb0:	2c 87       	std	Y+12, r18	; 0x0c
    1eb2:	4c d1       	rcall	.+664    	; 0x214c <strnlen>
    1eb4:	2c 01       	movw	r4, r24
    1eb6:	83 01       	movw	r16, r6
    1eb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eba:	2f 77       	andi	r18, 0x7F	; 127
    1ebc:	22 2e       	mov	r2, r18
    1ebe:	16 c0       	rjmp	.+44     	; 0x1eec <vfprintf+0x192>
    1ec0:	38 01       	movw	r6, r16
    1ec2:	f2 e0       	ldi	r31, 0x02	; 2
    1ec4:	6f 0e       	add	r6, r31
    1ec6:	71 1c       	adc	r7, r1
    1ec8:	f8 01       	movw	r30, r16
    1eca:	a0 80       	ld	r10, Z
    1ecc:	b1 80       	ldd	r11, Z+1	; 0x01
    1ece:	26 ff       	sbrs	r18, 6
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <vfprintf+0x17e>
    1ed2:	65 2d       	mov	r22, r5
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x182>
    1ed8:	6f ef       	ldi	r22, 0xFF	; 255
    1eda:	7f ef       	ldi	r23, 0xFF	; 255
    1edc:	c5 01       	movw	r24, r10
    1ede:	2c 87       	std	Y+12, r18	; 0x0c
    1ee0:	2a d1       	rcall	.+596    	; 0x2136 <strnlen_P>
    1ee2:	2c 01       	movw	r4, r24
    1ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ee6:	20 68       	ori	r18, 0x80	; 128
    1ee8:	22 2e       	mov	r2, r18
    1eea:	83 01       	movw	r16, r6
    1eec:	23 fc       	sbrc	r2, 3
    1eee:	19 c0       	rjmp	.+50     	; 0x1f22 <vfprintf+0x1c8>
    1ef0:	83 2d       	mov	r24, r3
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	48 16       	cp	r4, r24
    1ef6:	59 06       	cpc	r5, r25
    1ef8:	a0 f4       	brcc	.+40     	; 0x1f22 <vfprintf+0x1c8>
    1efa:	b7 01       	movw	r22, r14
    1efc:	80 e2       	ldi	r24, 0x20	; 32
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a8 de       	rcall	.-688    	; 0x1c52 <fputc>
    1f02:	3a 94       	dec	r3
    1f04:	f5 cf       	rjmp	.-22     	; 0x1ef0 <vfprintf+0x196>
    1f06:	f5 01       	movw	r30, r10
    1f08:	27 fc       	sbrc	r2, 7
    1f0a:	85 91       	lpm	r24, Z+
    1f0c:	27 fe       	sbrs	r2, 7
    1f0e:	81 91       	ld	r24, Z+
    1f10:	5f 01       	movw	r10, r30
    1f12:	b7 01       	movw	r22, r14
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9d de       	rcall	.-710    	; 0x1c52 <fputc>
    1f18:	31 10       	cpse	r3, r1
    1f1a:	3a 94       	dec	r3
    1f1c:	f1 e0       	ldi	r31, 0x01	; 1
    1f1e:	4f 1a       	sub	r4, r31
    1f20:	51 08       	sbc	r5, r1
    1f22:	41 14       	cp	r4, r1
    1f24:	51 04       	cpc	r5, r1
    1f26:	79 f7       	brne	.-34     	; 0x1f06 <vfprintf+0x1ac>
    1f28:	de c0       	rjmp	.+444    	; 0x20e6 <vfprintf+0x38c>
    1f2a:	84 36       	cpi	r24, 0x64	; 100
    1f2c:	11 f0       	breq	.+4      	; 0x1f32 <vfprintf+0x1d8>
    1f2e:	89 36       	cpi	r24, 0x69	; 105
    1f30:	31 f5       	brne	.+76     	; 0x1f7e <vfprintf+0x224>
    1f32:	f8 01       	movw	r30, r16
    1f34:	27 ff       	sbrs	r18, 7
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <vfprintf+0x1ec>
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	0c 5f       	subi	r16, 0xFC	; 252
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	08 c0       	rjmp	.+16     	; 0x1f56 <vfprintf+0x1fc>
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	88 27       	eor	r24, r24
    1f4c:	77 fd       	sbrc	r23, 7
    1f4e:	80 95       	com	r24
    1f50:	98 2f       	mov	r25, r24
    1f52:	0e 5f       	subi	r16, 0xFE	; 254
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	2f 76       	andi	r18, 0x6F	; 111
    1f58:	b2 2e       	mov	r11, r18
    1f5a:	97 ff       	sbrs	r25, 7
    1f5c:	09 c0       	rjmp	.+18     	; 0x1f70 <vfprintf+0x216>
    1f5e:	90 95       	com	r25
    1f60:	80 95       	com	r24
    1f62:	70 95       	com	r23
    1f64:	61 95       	neg	r22
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	20 68       	ori	r18, 0x80	; 128
    1f6e:	b2 2e       	mov	r11, r18
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	a4 01       	movw	r20, r8
    1f76:	f5 d0       	rcall	.+490    	; 0x2162 <__ultoa_invert>
    1f78:	a8 2e       	mov	r10, r24
    1f7a:	a8 18       	sub	r10, r8
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <vfprintf+0x2aa>
    1f7e:	85 37       	cpi	r24, 0x75	; 117
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <vfprintf+0x232>
    1f82:	2f 7e       	andi	r18, 0xEF	; 239
    1f84:	b2 2e       	mov	r11, r18
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	25 c0       	rjmp	.+74     	; 0x1fd6 <vfprintf+0x27c>
    1f8c:	f2 2f       	mov	r31, r18
    1f8e:	f9 7f       	andi	r31, 0xF9	; 249
    1f90:	bf 2e       	mov	r11, r31
    1f92:	8f 36       	cpi	r24, 0x6F	; 111
    1f94:	c1 f0       	breq	.+48     	; 0x1fc6 <vfprintf+0x26c>
    1f96:	18 f4       	brcc	.+6      	; 0x1f9e <vfprintf+0x244>
    1f98:	88 35       	cpi	r24, 0x58	; 88
    1f9a:	79 f0       	breq	.+30     	; 0x1fba <vfprintf+0x260>
    1f9c:	ad c0       	rjmp	.+346    	; 0x20f8 <vfprintf+0x39e>
    1f9e:	80 37       	cpi	r24, 0x70	; 112
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <vfprintf+0x24e>
    1fa2:	88 37       	cpi	r24, 0x78	; 120
    1fa4:	21 f0       	breq	.+8      	; 0x1fae <vfprintf+0x254>
    1fa6:	a8 c0       	rjmp	.+336    	; 0x20f8 <vfprintf+0x39e>
    1fa8:	2f 2f       	mov	r18, r31
    1faa:	20 61       	ori	r18, 0x10	; 16
    1fac:	b2 2e       	mov	r11, r18
    1fae:	b4 fe       	sbrs	r11, 4
    1fb0:	0d c0       	rjmp	.+26     	; 0x1fcc <vfprintf+0x272>
    1fb2:	8b 2d       	mov	r24, r11
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	b8 2e       	mov	r11, r24
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <vfprintf+0x272>
    1fba:	24 ff       	sbrs	r18, 4
    1fbc:	0a c0       	rjmp	.+20     	; 0x1fd2 <vfprintf+0x278>
    1fbe:	9f 2f       	mov	r25, r31
    1fc0:	96 60       	ori	r25, 0x06	; 6
    1fc2:	b9 2e       	mov	r11, r25
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vfprintf+0x278>
    1fc6:	28 e0       	ldi	r18, 0x08	; 8
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <vfprintf+0x27c>
    1fcc:	20 e1       	ldi	r18, 0x10	; 16
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x27c>
    1fd2:	20 e1       	ldi	r18, 0x10	; 16
    1fd4:	32 e0       	ldi	r19, 0x02	; 2
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	b7 fe       	sbrs	r11, 7
    1fda:	07 c0       	rjmp	.+14     	; 0x1fea <vfprintf+0x290>
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0c 5f       	subi	r16, 0xFC	; 252
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	06 c0       	rjmp	.+12     	; 0x1ff6 <vfprintf+0x29c>
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	a4 01       	movw	r20, r8
    1ff8:	b4 d0       	rcall	.+360    	; 0x2162 <__ultoa_invert>
    1ffa:	a8 2e       	mov	r10, r24
    1ffc:	a8 18       	sub	r10, r8
    1ffe:	fb 2d       	mov	r31, r11
    2000:	ff 77       	andi	r31, 0x7F	; 127
    2002:	bf 2e       	mov	r11, r31
    2004:	b6 fe       	sbrs	r11, 6
    2006:	0b c0       	rjmp	.+22     	; 0x201e <vfprintf+0x2c4>
    2008:	2b 2d       	mov	r18, r11
    200a:	2e 7f       	andi	r18, 0xFE	; 254
    200c:	a5 14       	cp	r10, r5
    200e:	50 f4       	brcc	.+20     	; 0x2024 <vfprintf+0x2ca>
    2010:	b4 fe       	sbrs	r11, 4
    2012:	0a c0       	rjmp	.+20     	; 0x2028 <vfprintf+0x2ce>
    2014:	b2 fc       	sbrc	r11, 2
    2016:	08 c0       	rjmp	.+16     	; 0x2028 <vfprintf+0x2ce>
    2018:	2b 2d       	mov	r18, r11
    201a:	2e 7e       	andi	r18, 0xEE	; 238
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <vfprintf+0x2ce>
    201e:	7a 2c       	mov	r7, r10
    2020:	2b 2d       	mov	r18, r11
    2022:	03 c0       	rjmp	.+6      	; 0x202a <vfprintf+0x2d0>
    2024:	7a 2c       	mov	r7, r10
    2026:	01 c0       	rjmp	.+2      	; 0x202a <vfprintf+0x2d0>
    2028:	75 2c       	mov	r7, r5
    202a:	24 ff       	sbrs	r18, 4
    202c:	0d c0       	rjmp	.+26     	; 0x2048 <vfprintf+0x2ee>
    202e:	fe 01       	movw	r30, r28
    2030:	ea 0d       	add	r30, r10
    2032:	f1 1d       	adc	r31, r1
    2034:	80 81       	ld	r24, Z
    2036:	80 33       	cpi	r24, 0x30	; 48
    2038:	11 f4       	brne	.+4      	; 0x203e <vfprintf+0x2e4>
    203a:	29 7e       	andi	r18, 0xE9	; 233
    203c:	09 c0       	rjmp	.+18     	; 0x2050 <vfprintf+0x2f6>
    203e:	22 ff       	sbrs	r18, 2
    2040:	06 c0       	rjmp	.+12     	; 0x204e <vfprintf+0x2f4>
    2042:	73 94       	inc	r7
    2044:	73 94       	inc	r7
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <vfprintf+0x2f6>
    2048:	82 2f       	mov	r24, r18
    204a:	86 78       	andi	r24, 0x86	; 134
    204c:	09 f0       	breq	.+2      	; 0x2050 <vfprintf+0x2f6>
    204e:	73 94       	inc	r7
    2050:	23 fd       	sbrc	r18, 3
    2052:	12 c0       	rjmp	.+36     	; 0x2078 <vfprintf+0x31e>
    2054:	20 ff       	sbrs	r18, 0
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <vfprintf+0x30a>
    2058:	5a 2c       	mov	r5, r10
    205a:	73 14       	cp	r7, r3
    205c:	18 f4       	brcc	.+6      	; 0x2064 <vfprintf+0x30a>
    205e:	53 0c       	add	r5, r3
    2060:	57 18       	sub	r5, r7
    2062:	73 2c       	mov	r7, r3
    2064:	73 14       	cp	r7, r3
    2066:	60 f4       	brcc	.+24     	; 0x2080 <vfprintf+0x326>
    2068:	b7 01       	movw	r22, r14
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	2c 87       	std	Y+12, r18	; 0x0c
    2070:	f0 dd       	rcall	.-1056   	; 0x1c52 <fputc>
    2072:	73 94       	inc	r7
    2074:	2c 85       	ldd	r18, Y+12	; 0x0c
    2076:	f6 cf       	rjmp	.-20     	; 0x2064 <vfprintf+0x30a>
    2078:	73 14       	cp	r7, r3
    207a:	10 f4       	brcc	.+4      	; 0x2080 <vfprintf+0x326>
    207c:	37 18       	sub	r3, r7
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <vfprintf+0x328>
    2080:	31 2c       	mov	r3, r1
    2082:	24 ff       	sbrs	r18, 4
    2084:	11 c0       	rjmp	.+34     	; 0x20a8 <vfprintf+0x34e>
    2086:	b7 01       	movw	r22, r14
    2088:	80 e3       	ldi	r24, 0x30	; 48
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	2c 87       	std	Y+12, r18	; 0x0c
    208e:	e1 dd       	rcall	.-1086   	; 0x1c52 <fputc>
    2090:	2c 85       	ldd	r18, Y+12	; 0x0c
    2092:	22 ff       	sbrs	r18, 2
    2094:	16 c0       	rjmp	.+44     	; 0x20c2 <vfprintf+0x368>
    2096:	21 ff       	sbrs	r18, 1
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <vfprintf+0x346>
    209a:	88 e5       	ldi	r24, 0x58	; 88
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <vfprintf+0x34a>
    20a0:	88 e7       	ldi	r24, 0x78	; 120
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	b7 01       	movw	r22, r14
    20a6:	0c c0       	rjmp	.+24     	; 0x20c0 <vfprintf+0x366>
    20a8:	82 2f       	mov	r24, r18
    20aa:	86 78       	andi	r24, 0x86	; 134
    20ac:	51 f0       	breq	.+20     	; 0x20c2 <vfprintf+0x368>
    20ae:	21 fd       	sbrc	r18, 1
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x35c>
    20b2:	80 e2       	ldi	r24, 0x20	; 32
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <vfprintf+0x35e>
    20b6:	8b e2       	ldi	r24, 0x2B	; 43
    20b8:	27 fd       	sbrc	r18, 7
    20ba:	8d e2       	ldi	r24, 0x2D	; 45
    20bc:	b7 01       	movw	r22, r14
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	c8 dd       	rcall	.-1136   	; 0x1c52 <fputc>
    20c2:	a5 14       	cp	r10, r5
    20c4:	30 f4       	brcc	.+12     	; 0x20d2 <vfprintf+0x378>
    20c6:	b7 01       	movw	r22, r14
    20c8:	80 e3       	ldi	r24, 0x30	; 48
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	c2 dd       	rcall	.-1148   	; 0x1c52 <fputc>
    20ce:	5a 94       	dec	r5
    20d0:	f8 cf       	rjmp	.-16     	; 0x20c2 <vfprintf+0x368>
    20d2:	aa 94       	dec	r10
    20d4:	f4 01       	movw	r30, r8
    20d6:	ea 0d       	add	r30, r10
    20d8:	f1 1d       	adc	r31, r1
    20da:	80 81       	ld	r24, Z
    20dc:	b7 01       	movw	r22, r14
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	b8 dd       	rcall	.-1168   	; 0x1c52 <fputc>
    20e2:	a1 10       	cpse	r10, r1
    20e4:	f6 cf       	rjmp	.-20     	; 0x20d2 <vfprintf+0x378>
    20e6:	33 20       	and	r3, r3
    20e8:	09 f4       	brne	.+2      	; 0x20ec <vfprintf+0x392>
    20ea:	5d ce       	rjmp	.-838    	; 0x1da6 <vfprintf+0x4c>
    20ec:	b7 01       	movw	r22, r14
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	af dd       	rcall	.-1186   	; 0x1c52 <fputc>
    20f4:	3a 94       	dec	r3
    20f6:	f7 cf       	rjmp	.-18     	; 0x20e6 <vfprintf+0x38c>
    20f8:	f7 01       	movw	r30, r14
    20fa:	86 81       	ldd	r24, Z+6	; 0x06
    20fc:	97 81       	ldd	r25, Z+7	; 0x07
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <__stack+0x5>
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	9f ef       	ldi	r25, 0xFF	; 255
    2104:	2c 96       	adiw	r28, 0x0c	; 12
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	9f 90       	pop	r9
    2126:	8f 90       	pop	r8
    2128:	7f 90       	pop	r7
    212a:	6f 90       	pop	r6
    212c:	5f 90       	pop	r5
    212e:	4f 90       	pop	r4
    2130:	3f 90       	pop	r3
    2132:	2f 90       	pop	r2
    2134:	08 95       	ret

00002136 <strnlen_P>:
    2136:	fc 01       	movw	r30, r24
    2138:	05 90       	lpm	r0, Z+
    213a:	61 50       	subi	r22, 0x01	; 1
    213c:	70 40       	sbci	r23, 0x00	; 0
    213e:	01 10       	cpse	r0, r1
    2140:	d8 f7       	brcc	.-10     	; 0x2138 <strnlen_P+0x2>
    2142:	80 95       	com	r24
    2144:	90 95       	com	r25
    2146:	8e 0f       	add	r24, r30
    2148:	9f 1f       	adc	r25, r31
    214a:	08 95       	ret

0000214c <strnlen>:
    214c:	fc 01       	movw	r30, r24
    214e:	61 50       	subi	r22, 0x01	; 1
    2150:	70 40       	sbci	r23, 0x00	; 0
    2152:	01 90       	ld	r0, Z+
    2154:	01 10       	cpse	r0, r1
    2156:	d8 f7       	brcc	.-10     	; 0x214e <strnlen+0x2>
    2158:	80 95       	com	r24
    215a:	90 95       	com	r25
    215c:	8e 0f       	add	r24, r30
    215e:	9f 1f       	adc	r25, r31
    2160:	08 95       	ret

00002162 <__ultoa_invert>:
    2162:	fa 01       	movw	r30, r20
    2164:	aa 27       	eor	r26, r26
    2166:	28 30       	cpi	r18, 0x08	; 8
    2168:	51 f1       	breq	.+84     	; 0x21be <__ultoa_invert+0x5c>
    216a:	20 31       	cpi	r18, 0x10	; 16
    216c:	81 f1       	breq	.+96     	; 0x21ce <__ultoa_invert+0x6c>
    216e:	e8 94       	clt
    2170:	6f 93       	push	r22
    2172:	6e 7f       	andi	r22, 0xFE	; 254
    2174:	6e 5f       	subi	r22, 0xFE	; 254
    2176:	7f 4f       	sbci	r23, 0xFF	; 255
    2178:	8f 4f       	sbci	r24, 0xFF	; 255
    217a:	9f 4f       	sbci	r25, 0xFF	; 255
    217c:	af 4f       	sbci	r26, 0xFF	; 255
    217e:	b1 e0       	ldi	r27, 0x01	; 1
    2180:	3e d0       	rcall	.+124    	; 0x21fe <__ultoa_invert+0x9c>
    2182:	b4 e0       	ldi	r27, 0x04	; 4
    2184:	3c d0       	rcall	.+120    	; 0x21fe <__ultoa_invert+0x9c>
    2186:	67 0f       	add	r22, r23
    2188:	78 1f       	adc	r23, r24
    218a:	89 1f       	adc	r24, r25
    218c:	9a 1f       	adc	r25, r26
    218e:	a1 1d       	adc	r26, r1
    2190:	68 0f       	add	r22, r24
    2192:	79 1f       	adc	r23, r25
    2194:	8a 1f       	adc	r24, r26
    2196:	91 1d       	adc	r25, r1
    2198:	a1 1d       	adc	r26, r1
    219a:	6a 0f       	add	r22, r26
    219c:	71 1d       	adc	r23, r1
    219e:	81 1d       	adc	r24, r1
    21a0:	91 1d       	adc	r25, r1
    21a2:	a1 1d       	adc	r26, r1
    21a4:	20 d0       	rcall	.+64     	; 0x21e6 <__ultoa_invert+0x84>
    21a6:	09 f4       	brne	.+2      	; 0x21aa <__ultoa_invert+0x48>
    21a8:	68 94       	set
    21aa:	3f 91       	pop	r19
    21ac:	2a e0       	ldi	r18, 0x0A	; 10
    21ae:	26 9f       	mul	r18, r22
    21b0:	11 24       	eor	r1, r1
    21b2:	30 19       	sub	r19, r0
    21b4:	30 5d       	subi	r19, 0xD0	; 208
    21b6:	31 93       	st	Z+, r19
    21b8:	de f6       	brtc	.-74     	; 0x2170 <__ultoa_invert+0xe>
    21ba:	cf 01       	movw	r24, r30
    21bc:	08 95       	ret
    21be:	46 2f       	mov	r20, r22
    21c0:	47 70       	andi	r20, 0x07	; 7
    21c2:	40 5d       	subi	r20, 0xD0	; 208
    21c4:	41 93       	st	Z+, r20
    21c6:	b3 e0       	ldi	r27, 0x03	; 3
    21c8:	0f d0       	rcall	.+30     	; 0x21e8 <__ultoa_invert+0x86>
    21ca:	c9 f7       	brne	.-14     	; 0x21be <__ultoa_invert+0x5c>
    21cc:	f6 cf       	rjmp	.-20     	; 0x21ba <__ultoa_invert+0x58>
    21ce:	46 2f       	mov	r20, r22
    21d0:	4f 70       	andi	r20, 0x0F	; 15
    21d2:	40 5d       	subi	r20, 0xD0	; 208
    21d4:	4a 33       	cpi	r20, 0x3A	; 58
    21d6:	18 f0       	brcs	.+6      	; 0x21de <__ultoa_invert+0x7c>
    21d8:	49 5d       	subi	r20, 0xD9	; 217
    21da:	31 fd       	sbrc	r19, 1
    21dc:	40 52       	subi	r20, 0x20	; 32
    21de:	41 93       	st	Z+, r20
    21e0:	02 d0       	rcall	.+4      	; 0x21e6 <__ultoa_invert+0x84>
    21e2:	a9 f7       	brne	.-22     	; 0x21ce <__ultoa_invert+0x6c>
    21e4:	ea cf       	rjmp	.-44     	; 0x21ba <__ultoa_invert+0x58>
    21e6:	b4 e0       	ldi	r27, 0x04	; 4
    21e8:	a6 95       	lsr	r26
    21ea:	97 95       	ror	r25
    21ec:	87 95       	ror	r24
    21ee:	77 95       	ror	r23
    21f0:	67 95       	ror	r22
    21f2:	ba 95       	dec	r27
    21f4:	c9 f7       	brne	.-14     	; 0x21e8 <__ultoa_invert+0x86>
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	61 05       	cpc	r22, r1
    21fa:	71 05       	cpc	r23, r1
    21fc:	08 95       	ret
    21fe:	9b 01       	movw	r18, r22
    2200:	ac 01       	movw	r20, r24
    2202:	0a 2e       	mov	r0, r26
    2204:	06 94       	lsr	r0
    2206:	57 95       	ror	r21
    2208:	47 95       	ror	r20
    220a:	37 95       	ror	r19
    220c:	27 95       	ror	r18
    220e:	ba 95       	dec	r27
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__ultoa_invert+0xa2>
    2212:	62 0f       	add	r22, r18
    2214:	73 1f       	adc	r23, r19
    2216:	84 1f       	adc	r24, r20
    2218:	95 1f       	adc	r25, r21
    221a:	a0 1d       	adc	r26, r0
    221c:	08 95       	ret

0000221e <_exit>:
    221e:	f8 94       	cli

00002220 <__stop_program>:
    2220:	ff cf       	rjmp	.-2      	; 0x2220 <__stop_program>


LEDNotifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e8c  00000f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080011c  0080011c  00000f3c  2**0
                  ALLOC
  3 .stab         00001050  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df4  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000638  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a326  00000000  00000000  000033c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a57  00000000  00000000  0000d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003cad  00000000  00000000  00010146  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000eb8  00000000  00000000  00013df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003df3  00000000  00000000  00014cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000658f  00000000  00000000  00018a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006d8  00000000  00000000  0001f02e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
   2:	00 00       	nop
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
   e:	00 00       	nop
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	00 00       	nop
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	00 00       	nop
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	00 00       	nop
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
  26:	00 00       	nop
  28:	1e c3       	rjmp	.+1596   	; 0x666 <__vector_10>
  2a:	00 00       	nop
  2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
  2e:	00 00       	nop
  30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
  3e:	00 00       	nop
  40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
  4e:	00 00       	nop
  50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	84 c0       	rjmp	.+264    	; 0x15e <__vector_21>
  56:	00 00       	nop
  58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
  5e:	00 00       	nop
  60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
  66:	00 00       	nop
  68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
  6e:	00 00       	nop
  70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
  72:	00 00       	nop
  74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
  76:	00 00       	nop
  78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	6d c0       	rjmp	.+218    	; 0x15c <__bad_interrupt>
  82:	00 00       	nop
  84:	6b c0       	rjmp	.+214    	; 0x15c <__bad_interrupt>
  86:	00 00       	nop
  88:	69 c0       	rjmp	.+210    	; 0x15c <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	67 c0       	rjmp	.+206    	; 0x15c <__bad_interrupt>
  8e:	00 00       	nop
  90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1a 03 4c 00 45 00 44 00 20 00 4e 00 6f 00 74 00     ..L.E.D. .N.o.t.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	69 00 66 00 69 00 65 00 72 00 00 00                 i.f.i.e.r...

000000b4 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ce <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  ce:	04 03 09 04                                         ....

000000d2 <ConfigurationDescriptor>:
  d2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  e2:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 102:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000110 <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 110:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 120:	dc 01                                               ..

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d0 e2       	ldi	r29, 0x20	; 32
 12a:	de bf       	out	0x3e, r29	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	11 e0       	ldi	r17, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	ec e8       	ldi	r30, 0x8C	; 140
 136:	fe e0       	ldi	r31, 0x0E	; 14
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	0b bf       	out	0x3b, r16	; 59
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x14>
 13e:	07 90       	elpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	ac 31       	cpi	r26, 0x1C	; 28
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0x10>

00000148 <__do_clear_bss>:
				ReportData     += 4;
 148:	11 e0       	ldi	r17, 0x01	; 1
 14a:	ac e1       	ldi	r26, 0x1C	; 28
 14c:	b1 e0       	ldi	r27, 0x01	; 1
				break;
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	aa 33       	cpi	r26, 0x3A	; 58
 154:	b1 07       	cpc	r27, r17
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	5a d0       	rcall	.+180    	; 0x20e <main>
 15a:	96 c6       	rjmp	.+3372   	; 0xe88 <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <__vector_21>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
				ReportSize     -= 2;
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
				ReportData     += 2;
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	8f 93       	push	r24
				break;
 16c:	9f 93       	push	r25

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	80 91 2d 01 	lds	r24, 0x012D
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 2d 01 	sts	0x012D, r24
 178:	8f 31       	cpi	r24, 0x1F	; 31
				ReportSize     -= 1;
 17a:	11 f4       	brne	.+4      	; 0x180 <__vector_21+0x22>
 17c:	10 92 2d 01 	sts	0x012D, r1
				ReportData     += 1;
 180:	90 91 2d 01 	lds	r25, 0x012D
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	80 91 2c 01 	lds	r24, 0x012C
 188:	98 17       	cp	r25, r24
 18a:	10 f4       	brcc	.+4      	; 0x190 <__vector_21+0x32>
 18c:	8c e1       	ldi	r24, 0x1C	; 28
 18e:	01 c0       	rjmp	.+2      	; 0x192 <__vector_21+0x34>
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	20 91 2d 01 	lds	r18, 0x012D
 196:	90 91 2b 01 	lds	r25, 0x012B
 19a:	29 17       	cp	r18, r25
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <__vector_21+0x42>
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	20 91 2d 01 	lds	r18, 0x012D
 1a4:	90 91 2a 01 	lds	r25, 0x012A
 1a8:	29 17       	cp	r18, r25

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <__vector_21+0x50>
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	93 7e       	andi	r25, 0xE3	; 227
 1b2:	98 2b       	or	r25, r24
				break;
 1b4:	98 b9       	out	0x08, r25	; 8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <SetupHardware>:
 1c6:	84 b7       	in	r24, 0x34	; 52
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	84 bf       	out	0x34, r24	; 52
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 60 00 	sts	0x0060, r24
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	10 92 60 00 	sts	0x0060, r1
 1da:	0f be       	out	0x3f, r0	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	80 93 61 00 	sts	0x0061, r24
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	90 93 61 00 	sts	0x0061, r25
				break;
 1ec:	0f be       	out	0x3f, r0	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	87 b1       	in	r24, 0x07	; 7
 1f0:	8c 61       	ori	r24, 0x1C	; 28
 1f2:	87 b9       	out	0x07, r24	; 7
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	83 7e       	andi	r24, 0xE3	; 227
 1f8:	88 b9       	out	0x08, r24	; 8
 1fa:	1a d2       	rcall	.+1076   	; 0x630 <USB_Init>
 1fc:	84 e6       	ldi	r24, 0x64	; 100
 1fe:	87 bd       	out	0x27, r24	; 39
 200:	82 e0       	ldi	r24, 0x02	; 2
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	84 bd       	out	0x24, r24	; 36
 204:	91 e0       	ldi	r25, 0x01	; 1
				break;
 206:	95 bd       	out	0x25, r25	; 37
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	80 93 6e 00 	sts	0x006E, r24
 20c:	08 95       	ret

0000020e <main>:
 20e:	db df       	rcall	.-74     	; 0x1c6 <SetupHardware>
 210:	6c e1       	ldi	r22, 0x1C	; 28
 212:	71 e0       	ldi	r23, 0x01	; 1
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	36 d5       	rcall	.+2668   	; 0xc86 <CDC_Device_CreateBlockingStream>
 21a:	78 94       	sei
 21c:	8c e1       	ldi	r24, 0x1C	; 28
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	f5 d5       	rcall	.+3050   	; 0xe0c <fgetc>
 222:	28 2f       	mov	r18, r24
 224:	20 7e       	andi	r18, 0xE0	; 224
 226:	98 2f       	mov	r25, r24
 228:	9f 71       	andi	r25, 0x1F	; 31
 22a:	85 fd       	sbrc	r24, 5
 22c:	90 93 2c 01 	sts	0x012C, r25
 230:	86 fd       	sbrc	r24, 6
 232:	90 93 2b 01 	sts	0x012B, r25
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 236:	27 fd       	sbrc	r18, 7
 238:	90 93 2a 01 	sts	0x012A, r25
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	c8 d4       	rcall	.+2448   	; 0xbd2 <CDC_Device_USBTask>
 242:	26 d4       	rcall	.+2124   	; 0xa90 <USB_USBTask>
 244:	eb cf       	rjmp	.-42     	; 0x21c <main+0xe>

00000246 <EVENT_USB_Device_ConfigurationChanged>:
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	3d c4       	rjmp	.+2170   	; 0xac6 <CDC_Device_ConfigureEndpoints>

0000024c <EVENT_USB_Device_ControlRequest>:
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	2e c5       	rjmp	.+2652   	; 0xcae <CDC_Device_ProcessControlRequest>

00000252 <CALLBACK_USB_GetDescriptor>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	29 2f       	mov	r18, r25
 254:	33 27       	eor	r19, r19
 256:	22 30       	cpi	r18, 0x02	; 2
 258:	31 05       	cpc	r19, r1
 25a:	59 f0       	breq	.+22     	; 0x272 <CALLBACK_USB_GetDescriptor+0x20>
 25c:	23 30       	cpi	r18, 0x03	; 3
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	31 05       	cpc	r19, r1
 260:	69 f0       	breq	.+26     	; 0x27c <CALLBACK_USB_GetDescriptor+0x2a>
 262:	21 30       	cpi	r18, 0x01	; 1
 264:	31 05       	cpc	r19, r1
 266:	f9 f4       	brne	.+62     	; 0x2a6 <CALLBACK_USB_GetDescriptor+0x54>
 268:	82 e1       	ldi	r24, 0x12	; 18
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	20 e1       	ldi	r18, 0x10	; 16
 26e:	31 e0       	ldi	r19, 0x01	; 1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	1e c0       	rjmp	.+60     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x5c>
				break;
 272:	8e e3       	ldi	r24, 0x3E	; 62

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	22 ed       	ldi	r18, 0xD2	; 210
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	19 c0       	rjmp	.+50     	; 0x2ae <CALLBACK_USB_GetDescriptor+0x5c>
 27c:	99 27       	eor	r25, r25
 27e:	81 30       	cpi	r24, 0x01	; 1
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	91 05       	cpc	r25, r1
 282:	41 f0       	breq	.+16     	; 0x294 <CALLBACK_USB_GetDescriptor+0x42>
				break;
 284:	82 30       	cpi	r24, 0x02	; 2

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	91 05       	cpc	r25, r1
 288:	41 f0       	breq	.+16     	; 0x29a <CALLBACK_USB_GetDescriptor+0x48>
 28a:	89 2b       	or	r24, r25
 28c:	61 f4       	brne	.+24     	; 0x2a6 <CALLBACK_USB_GetDescriptor+0x54>
 28e:	ee ec       	ldi	r30, 0xCE	; 206
				break;
 290:	f0 e0       	ldi	r31, 0x00	; 0

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	05 c0       	rjmp	.+10     	; 0x29e <CALLBACK_USB_GetDescriptor+0x4c>
 294:	e4 eb       	ldi	r30, 0xB4	; 180
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <CALLBACK_USB_GetDescriptor+0x4c>
 29a:	e8 e9       	ldi	r30, 0x98	; 152
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	84 91       	lpm	r24, Z
				break;
 2a0:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	9f 01       	movw	r18, r30
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <CALLBACK_USB_GetDescriptor+0x5c>
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	20 e0       	ldi	r18, 0x00	; 0
				break;
 2ac:	30 e0       	ldi	r19, 0x00	; 0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	fa 01       	movw	r30, r20
 2b0:	31 83       	std	Z+1, r19	; 0x01
 2b2:	20 83       	st	Z, r18
 2b4:	08 95       	ret

000002b6 <Endpoint_Write_Control_Stream_LE>:
 2b6:	20 91 38 01 	lds	r18, 0x0138
 2ba:	30 91 39 01 	lds	r19, 0x0139
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	26 17       	cp	r18, r22
 2c0:	37 07       	cpc	r19, r23
 2c2:	48 f0       	brcs	.+18     	; 0x2d6 <Endpoint_Write_Control_Stream_LE+0x20>
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <Endpoint_Write_Control_Stream_LE+0x22>
 2ca:	20 91 e8 00 	lds	r18, 0x00E8
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	2e 77       	andi	r18, 0x7E	; 126
 2d0:	20 93 e8 00 	sts	0x00E8, r18
				break;
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <Endpoint_Write_Control_Stream_LE+0x22>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	b9 01       	movw	r22, r18
 2d8:	fc 01       	movw	r30, r24
 2da:	20 e0       	ldi	r18, 0x00	; 0

				if (ParserData->UsingReportIDs)
 2dc:	61 15       	cp	r22, r1
 2de:	71 05       	cpc	r23, r1
 2e0:	91 f1       	breq	.+100    	; 0x346 <Endpoint_Write_Control_Stream_LE+0x90>
 2e2:	8e b3       	in	r24, 0x1e	; 30
 2e4:	88 23       	and	r24, r24
 2e6:	e1 f1       	breq	.+120    	; 0x360 <Endpoint_Write_Control_Stream_LE+0xaa>
 2e8:	85 30       	cpi	r24, 0x05	; 5
 2ea:	e1 f1       	breq	.+120    	; 0x364 <Endpoint_Write_Control_Stream_LE+0xae>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	80 91 e8 00 	lds	r24, 0x00E8
 2f0:	83 fd       	sbrc	r24, 3
 2f2:	3a c0       	rjmp	.+116    	; 0x368 <Endpoint_Write_Control_Stream_LE+0xb2>
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
 2f8:	82 ff       	sbrs	r24, 2
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <Endpoint_Write_Control_Stream_LE+0x52>
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
 300:	82 ff       	sbrs	r24, 2
 302:	24 c0       	rjmp	.+72     	; 0x34c <Endpoint_Write_Control_Stream_LE+0x96>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
 308:	80 91 e8 00 	lds	r24, 0x00E8
 30c:	80 ff       	sbrs	r24, 0
 30e:	e6 cf       	rjmp	.-52     	; 0x2dc <Endpoint_Write_Control_Stream_LE+0x26>
 310:	80 91 f2 00 	lds	r24, 0x00F2
 314:	90 91 f3 00 	lds	r25, 0x00F3
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	61 15       	cp	r22, r1
 31a:	71 05       	cpc	r23, r1
 31c:	51 f0       	breq	.+20     	; 0x332 <Endpoint_Write_Control_Stream_LE+0x7c>
 31e:	88 30       	cpi	r24, 0x08	; 8
 320:	91 05       	cpc	r25, r1
 322:	38 f4       	brcc	.+14     	; 0x332 <Endpoint_Write_Control_Stream_LE+0x7c>
 324:	21 91       	ld	r18, Z+
 326:	20 93 f1 00 	sts	0x00F1, r18
 32a:	61 50       	subi	r22, 0x01	; 1
 32c:	71 09       	sbc	r23, r1
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	f3 cf       	rjmp	.-26     	; 0x318 <Endpoint_Write_Control_Stream_LE+0x62>
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	08 97       	sbiw	r24, 0x08	; 8
 336:	09 f0       	breq	.+2      	; 0x33a <Endpoint_Write_Control_Stream_LE+0x84>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	80 91 e8 00 	lds	r24, 0x00E8
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	8e 77       	andi	r24, 0x7E	; 126
 340:	80 93 e8 00 	sts	0x00E8, r24
 344:	cb cf       	rjmp	.-106    	; 0x2dc <Endpoint_Write_Control_Stream_LE+0x26>
 346:	21 11       	cpse	r18, r1
 348:	cc cf       	rjmp	.-104    	; 0x2e2 <Endpoint_Write_Control_Stream_LE+0x2c>
 34a:	d8 cf       	rjmp	.-80     	; 0x2fc <Endpoint_Write_Control_Stream_LE+0x46>
 34c:	8e b3       	in	r24, 0x1e	; 30
 34e:	88 23       	and	r24, r24
 350:	39 f0       	breq	.+14     	; 0x360 <Endpoint_Write_Control_Stream_LE+0xaa>
 352:	85 30       	cpi	r24, 0x05	; 5
 354:	39 f0       	breq	.+14     	; 0x364 <Endpoint_Write_Control_Stream_LE+0xae>
 356:	80 91 e8 00 	lds	r24, 0x00E8
 35a:	83 ff       	sbrs	r24, 3
 35c:	cf cf       	rjmp	.-98     	; 0x2fc <Endpoint_Write_Control_Stream_LE+0x46>
 35e:	04 c0       	rjmp	.+8      	; 0x368 <Endpoint_Write_Control_Stream_LE+0xb2>
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	08 95       	ret
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret

0000036c <Endpoint_Write_Control_PStream_LE>:
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	20 91 38 01 	lds	r18, 0x0138
 370:	30 91 39 01 	lds	r19, 0x0139
 374:	26 17       	cp	r18, r22
 376:	37 07       	cpc	r19, r23

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	48 f0       	brcs	.+18     	; 0x38c <Endpoint_Write_Control_PStream_LE+0x20>
 37a:	61 15       	cp	r22, r1
 37c:	71 05       	cpc	r23, r1
 37e:	39 f4       	brne	.+14     	; 0x38e <Endpoint_Write_Control_PStream_LE+0x22>
 380:	20 91 e8 00 	lds	r18, 0x00E8
 384:	2e 77       	andi	r18, 0x7E	; 126
 386:	20 93 e8 00 	sts	0x00E8, r18
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	01 c0       	rjmp	.+2      	; 0x38e <Endpoint_Write_Control_PStream_LE+0x22>
 38c:	b9 01       	movw	r22, r18
 38e:	fc 01       	movw	r30, r24
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	61 15       	cp	r22, r1
 394:	71 05       	cpc	r23, r1
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	a9 f1       	breq	.+106    	; 0x402 <Endpoint_Write_Control_PStream_LE+0x96>
 398:	8e b3       	in	r24, 0x1e	; 30
 39a:	88 23       	and	r24, r24
 39c:	09 f4       	brne	.+2      	; 0x3a0 <Endpoint_Write_Control_PStream_LE+0x34>
 39e:	3e c0       	rjmp	.+124    	; 0x41c <Endpoint_Write_Control_PStream_LE+0xb0>
 3a0:	85 30       	cpi	r24, 0x05	; 5
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <Endpoint_Write_Control_PStream_LE+0x3a>
 3a4:	3d c0       	rjmp	.+122    	; 0x420 <Endpoint_Write_Control_PStream_LE+0xb4>
 3a6:	80 91 e8 00 	lds	r24, 0x00E8
 3aa:	83 fd       	sbrc	r24, 3
 3ac:	3b c0       	rjmp	.+118    	; 0x424 <Endpoint_Write_Control_PStream_LE+0xb8>
 3ae:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	82 ff       	sbrs	r24, 2
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <Endpoint_Write_Control_PStream_LE+0x56>
 3b6:	80 91 e8 00 	lds	r24, 0x00E8
 3ba:	82 ff       	sbrs	r24, 2
 3bc:	25 c0       	rjmp	.+74     	; 0x408 <Endpoint_Write_Control_PStream_LE+0x9c>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	e4 cf       	rjmp	.-56     	; 0x392 <Endpoint_Write_Control_PStream_LE+0x26>
 3ca:	80 91 f2 00 	lds	r24, 0x00F2
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	90 91 f3 00 	lds	r25, 0x00F3
 3d2:	61 15       	cp	r22, r1

					while (CurrCollectionPath->Parent != NULL)
 3d4:	71 05       	cpc	r23, r1
 3d6:	59 f0       	breq	.+22     	; 0x3ee <Endpoint_Write_Control_PStream_LE+0x82>
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	91 05       	cpc	r25, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	40 f4       	brcc	.+16     	; 0x3ee <Endpoint_Write_Control_PStream_LE+0x82>
 3de:	24 91       	lpm	r18, Z
 3e0:	20 93 f1 00 	sts	0x00F1, r18
 3e4:	31 96       	adiw	r30, 0x01	; 1
 3e6:	61 50       	subi	r22, 0x01	; 1
 3e8:	71 09       	sbc	r23, r1
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	f2 cf       	rjmp	.-28     	; 0x3d2 <Endpoint_Write_Control_PStream_LE+0x66>
 3ee:	21 e0       	ldi	r18, 0x01	; 1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	08 97       	sbiw	r24, 0x08	; 8
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <Endpoint_Write_Control_PStream_LE+0x8a>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	80 91 e8 00 	lds	r24, 0x00E8
 3fa:	8e 77       	andi	r24, 0x7E	; 126
 3fc:	80 93 e8 00 	sts	0x00E8, r24
 400:	c8 cf       	rjmp	.-112    	; 0x392 <Endpoint_Write_Control_PStream_LE+0x26>
 402:	21 11       	cpse	r18, r1
 404:	c9 cf       	rjmp	.-110    	; 0x398 <Endpoint_Write_Control_PStream_LE+0x2c>
 406:	d7 cf       	rjmp	.-82     	; 0x3b6 <Endpoint_Write_Control_PStream_LE+0x4a>
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	8e b3       	in	r24, 0x1e	; 30
 40a:	88 23       	and	r24, r24
 40c:	39 f0       	breq	.+14     	; 0x41c <Endpoint_Write_Control_PStream_LE+0xb0>
 40e:	85 30       	cpi	r24, 0x05	; 5
 410:	39 f0       	breq	.+14     	; 0x420 <Endpoint_Write_Control_PStream_LE+0xb4>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	80 91 e8 00 	lds	r24, 0x00E8
 416:	83 ff       	sbrs	r24, 3
 418:	ce cf       	rjmp	.-100    	; 0x3b6 <Endpoint_Write_Control_PStream_LE+0x4a>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <Endpoint_Write_Control_PStream_LE+0xb8>
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	08 95       	ret

				if (UsageListSize)
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret

00000428 <Endpoint_ConfigureEndpoint_Prv>:
 428:	98 2f       	mov	r25, r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	97 30       	cpi	r25, 0x07	; 7
 42c:	58 f5       	brcc	.+86     	; 0x484 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 42e:	90 93 e9 00 	sts	0x00E9, r25
 432:	98 17       	cp	r25, r24
 434:	39 f0       	breq	.+14     	; 0x444 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 436:	70 91 ec 00 	lds	r23, 0x00EC
 43a:	20 91 ed 00 	lds	r18, 0x00ED
 43e:	50 91 f0 00 	lds	r21, 0x00F0

					for (uint8_t i = 1; i < UsageListSize; i++)
 442:	03 c0       	rjmp	.+6      	; 0x44a <Endpoint_ConfigureEndpoint_Prv+0x22>
 444:	24 2f       	mov	r18, r20
 446:	76 2f       	mov	r23, r22
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	21 ff       	sbrs	r18, 1
					  UsageList[i - 1] = UsageList[i];
 44c:	19 c0       	rjmp	.+50     	; 0x480 <Endpoint_ConfigureEndpoint_Prv+0x58>
 44e:	30 91 eb 00 	lds	r19, 0x00EB
 452:	3e 7f       	andi	r19, 0xFE	; 254

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	30 93 eb 00 	sts	0x00EB, r19
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	30 91 ed 00 	lds	r19, 0x00ED
 45c:	3d 7f       	andi	r19, 0xFD	; 253
 45e:	30 93 ed 00 	sts	0x00ED, r19
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	30 91 eb 00 	lds	r19, 0x00EB
 466:	31 60       	ori	r19, 0x01	; 1
 468:	30 93 eb 00 	sts	0x00EB, r19
 46c:	70 93 ec 00 	sts	0x00EC, r23
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 470:	20 93 ed 00 	sts	0x00ED, r18
 474:	50 93 f0 00 	sts	0x00F0, r21
 478:	20 91 ee 00 	lds	r18, 0x00EE
 47c:	27 ff       	sbrs	r18, 7
 47e:	07 c0       	rjmp	.+14     	; 0x48e <Endpoint_ConfigureEndpoint_Prv+0x66>
 480:	9f 5f       	subi	r25, 0xFF	; 255
 482:	d3 cf       	rjmp	.-90     	; 0x42a <Endpoint_ConfigureEndpoint_Prv+0x2>
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 93 e9 00 	sts	0x00E9, r24
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret

00000492 <Endpoint_ConfigureEndpointTable>:
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	06 2f       	mov	r16, r22
 49c:	ec 01       	movw	r28, r24
 49e:	10 e0       	ldi	r17, 0x00	; 0
 4a0:	10 17       	cp	r17, r16
 4a2:	71 f1       	breq	.+92     	; 0x500 <Endpoint_ConfigureEndpointTable+0x6e>
 4a4:	98 81       	ld	r25, Y
 4a6:	99 23       	and	r25, r25
 4a8:	41 f1       	breq	.+80     	; 0x4fa <Endpoint_ConfigureEndpointTable+0x68>
 4aa:	2c 81       	ldd	r18, Y+4	; 0x04
				break;
 4ac:	e9 81       	ldd	r30, Y+1	; 0x01
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	fa 81       	ldd	r31, Y+2	; 0x02
 4b0:	7b 81       	ldd	r23, Y+3	; 0x03
 4b2:	89 2f       	mov	r24, r25
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	87 30       	cpi	r24, 0x07	; 7
 4b8:	10 f0       	brcs	.+4      	; 0x4be <Endpoint_ConfigureEndpointTable+0x2c>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	22 c0       	rjmp	.+68     	; 0x502 <Endpoint_ConfigureEndpointTable+0x70>
 4be:	22 30       	cpi	r18, 0x02	; 2
 4c0:	10 f0       	brcs	.+4      	; 0x4c6 <Endpoint_ConfigureEndpointTable+0x34>
 4c2:	56 e0       	ldi	r21, 0x06	; 6
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <Endpoint_ConfigureEndpointTable+0x36>
 4c6:	52 e0       	ldi	r21, 0x02	; 2
 4c8:	28 e0       	ldi	r18, 0x08	; 8
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	2e 17       	cp	r18, r30
 4d0:	3f 07       	cpc	r19, r31
 4d2:	20 f4       	brcc	.+8      	; 0x4dc <Endpoint_ConfigureEndpointTable+0x4a>
 4d4:	4f 5f       	subi	r20, 0xFF	; 255
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	f9 cf       	rjmp	.-14     	; 0x4ce <Endpoint_ConfigureEndpointTable+0x3c>
 4dc:	42 95       	swap	r20
 4de:	40 7f       	andi	r20, 0xF0	; 240
 4e0:	45 2b       	or	r20, r21
 4e2:	69 2f       	mov	r22, r25
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	66 1f       	adc	r22, r22
 4e6:	66 27       	eor	r22, r22
 4e8:	66 1f       	adc	r22, r22
 4ea:	90 e4       	ldi	r25, 0x40	; 64
 4ec:	79 9f       	mul	r23, r25
 4ee:	90 01       	movw	r18, r0
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	11 24       	eor	r1, r1
 4f2:	62 2b       	or	r22, r18
 4f4:	99 df       	rcall	.-206    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
 4f6:	88 23       	and	r24, r24
 4f8:	01 f3       	breq	.-64     	; 0x4ba <Endpoint_ConfigureEndpointTable+0x28>
 4fa:	1f 5f       	subi	r17, 0xFF	; 255
 4fc:	25 96       	adiw	r28, 0x05	; 5
 4fe:	d0 cf       	rjmp	.-96     	; 0x4a0 <Endpoint_ConfigureEndpointTable+0xe>
 500:	81 e0       	ldi	r24, 0x01	; 1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	08 95       	ret

0000050c <Endpoint_ClearStatusStage>:
 50c:	80 91 32 01 	lds	r24, 0x0132
 510:	87 fd       	sbrc	r24, 7
 512:	05 c0       	rjmp	.+10     	; 0x51e <Endpoint_ClearStatusStage+0x12>
 514:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 518:	80 ff       	sbrs	r24, 0
 51a:	0d c0       	rjmp	.+26     	; 0x536 <Endpoint_ClearStatusStage+0x2a>
 51c:	10 c0       	rjmp	.+32     	; 0x53e <Endpoint_ClearStatusStage+0x32>

					if (UsageListSize)
 51e:	80 91 e8 00 	lds	r24, 0x00E8
 522:	82 fd       	sbrc	r24, 2
 524:	04 c0       	rjmp	.+8      	; 0x52e <Endpoint_ClearStatusStage+0x22>
 526:	8e b3       	in	r24, 0x1e	; 30
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	81 11       	cpse	r24, r1
 52a:	f9 cf       	rjmp	.-14     	; 0x51e <Endpoint_ClearStatusStage+0x12>
 52c:	08 95       	ret
 52e:	80 91 e8 00 	lds	r24, 0x00E8
 532:	8b 77       	andi	r24, 0x7B	; 123
 534:	07 c0       	rjmp	.+14     	; 0x544 <Endpoint_ClearStatusStage+0x38>
 536:	8e b3       	in	r24, 0x1e	; 30
 538:	81 11       	cpse	r24, r1
 53a:	ec cf       	rjmp	.-40     	; 0x514 <Endpoint_ClearStatusStage+0x8>
 53c:	08 95       	ret

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	80 91 e8 00 	lds	r24, 0x00E8
 542:	8e 77       	andi	r24, 0x7E	; 126
 544:	80 93 e8 00 	sts	0x00E8, r24
 548:	08 95       	ret

0000054a <Endpoint_WaitUntilReady>:
						  UsageList[i - 1] = UsageList[i];
 54a:	80 91 e4 00 	lds	r24, 0x00E4
 54e:	90 91 e5 00 	lds	r25, 0x00E5

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	45 e6       	ldi	r20, 0x65	; 101
 554:	20 91 ec 00 	lds	r18, 0x00EC
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 558:	20 ff       	sbrs	r18, 0
 55a:	20 c0       	rjmp	.+64     	; 0x59c <Endpoint_WaitUntilReady+0x52>
 55c:	20 91 e8 00 	lds	r18, 0x00E8
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	20 fd       	sbrc	r18, 0
 562:	20 c0       	rjmp	.+64     	; 0x5a4 <Endpoint_WaitUntilReady+0x5a>
 564:	2e b3       	in	r18, 0x1e	; 30
 566:	22 23       	and	r18, r18
 568:	89 f0       	breq	.+34     	; 0x58c <Endpoint_WaitUntilReady+0x42>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	25 30       	cpi	r18, 0x05	; 5
 56c:	89 f0       	breq	.+34     	; 0x590 <Endpoint_WaitUntilReady+0x46>
 56e:	20 91 eb 00 	lds	r18, 0x00EB
 572:	25 fd       	sbrc	r18, 5
 574:	0f c0       	rjmp	.+30     	; 0x594 <Endpoint_WaitUntilReady+0x4a>
 576:	20 91 e4 00 	lds	r18, 0x00E4
 57a:	30 91 e5 00 	lds	r19, 0x00E5
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57e:	28 17       	cp	r18, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	39 07       	cpc	r19, r25
 582:	41 f3       	breq	.-48     	; 0x554 <Endpoint_WaitUntilReady+0xa>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	41 50       	subi	r20, 0x01	; 1
 586:	41 f0       	breq	.+16     	; 0x598 <Endpoint_WaitUntilReady+0x4e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	c9 01       	movw	r24, r18
 58a:	e4 cf       	rjmp	.-56     	; 0x554 <Endpoint_WaitUntilReady+0xa>
 58c:	82 e0       	ldi	r24, 0x02	; 2
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	08 95       	ret
 590:	83 e0       	ldi	r24, 0x03	; 3

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	08 95       	ret
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
 598:	84 e0       	ldi	r24, 0x04	; 4
 59a:	08 95       	ret
 59c:	20 91 e8 00 	lds	r18, 0x00E8
 5a0:	22 ff       	sbrs	r18, 2
 5a2:	e0 cf       	rjmp	.-64     	; 0x564 <Endpoint_WaitUntilReady+0x1a>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret

000005a8 <USB_ResetInterface>:
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	4d d0       	rcall	.+154    	; 0x64c <USB_INT_DisableAllInterrupts>
 5b2:	54 d0       	rcall	.+168    	; 0x65c <USB_INT_ClearAllInterrupts>
 5b4:	c8 ed       	ldi	r28, 0xD8	; 216
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	88 81       	ld	r24, Y
 5ba:	8f 77       	andi	r24, 0x7F	; 127

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	88 83       	st	Y, r24
 5be:	88 81       	ld	r24, Y
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	88 83       	st	Y, r24
 5c4:	88 81       	ld	r24, Y
 5c6:	8f 7d       	andi	r24, 0xDF	; 223
 5c8:	88 83       	st	Y, r24
 5ca:	e7 ed       	ldi	r30, 0xD7	; 215
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	80 83       	st	Z, r24
 5d4:	19 bc       	out	0x29, r1	; 41
 5d6:	1e ba       	out	0x1e, r1	; 30
 5d8:	10 92 2e 01 	sts	0x012E, r1
 5dc:	10 92 30 01 	sts	0x0130, r1
 5e0:	10 92 2f 01 	sts	0x012F, r1
 5e4:	00 ee       	ldi	r16, 0xE0	; 224
 5e6:	10 e0       	ldi	r17, 0x00	; 0
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 81       	ld	r24, Z
 5ec:	8b 7f       	andi	r24, 0xFB	; 251
 5ee:	80 83       	st	Z, r24
 5f0:	88 81       	ld	r24, Y
 5f2:	81 60       	ori	r24, 0x01	; 1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	88 83       	st	Y, r24
 5f6:	42 e0       	ldi	r20, 0x02	; 2
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	15 df       	rcall	.-470    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
					  return HID_PARSE_InsufficientReportItems;
 5fe:	e1 ee       	ldi	r30, 0xE1	; 225
 600:	f0 e0       	ldi	r31, 0x00	; 0

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	80 81       	ld	r24, Z
 604:	8e 7f       	andi	r24, 0xFE	; 254
 606:	80 83       	st	Z, r24
 608:	e2 ee       	ldi	r30, 0xE2	; 226
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	80 83       	st	Z, r24
 612:	80 81       	ld	r24, Z
 614:	88 60       	ori	r24, 0x08	; 8
 616:	80 83       	st	Z, r24
 618:	f8 01       	movw	r30, r16
 61a:	80 81       	ld	r24, Z
 61c:	8e 7f       	andi	r24, 0xFE	; 254
 61e:	80 83       	st	Z, r24
 620:	88 81       	ld	r24, Y
 622:	80 61       	ori	r24, 0x10	; 16
 624:	88 83       	st	Y, r24
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <USB_Init>:
 630:	e8 ed       	ldi	r30, 0xD8	; 216
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	8f 7e       	andi	r24, 0xEF	; 239
 638:	80 83       	st	Z, r24
 63a:	e7 ed       	ldi	r30, 0xD7	; 215
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	81 60       	ori	r24, 0x01	; 1
 642:	80 83       	st	Z, r24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 31 01 	sts	0x0131, r24
 64a:	ae cf       	rjmp	.-164    	; 0x5a8 <USB_ResetInterface>

0000064c <USB_INT_DisableAllInterrupts>:
 64c:	e8 ed       	ldi	r30, 0xD8	; 216
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	8c 7f       	andi	r24, 0xFC	; 252
 654:	80 83       	st	Z, r24
 656:	10 92 e2 00 	sts	0x00E2, r1
 65a:	08 95       	ret

0000065c <USB_INT_ClearAllInterrupts>:
 65c:	10 92 da 00 	sts	0x00DA, r1
 660:	10 92 e1 00 	sts	0x00E1, r1
 664:	08 95       	ret

00000666 <__vector_10>:
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	0b b6       	in	r0, 0x3b	; 59
 672:	0f 92       	push	r0
 674:	2f 93       	push	r18
 676:	3f 93       	push	r19
 678:	4f 93       	push	r20
 67a:	5f 93       	push	r21
 67c:	6f 93       	push	r22
 67e:	7f 93       	push	r23
 680:	8f 93       	push	r24
 682:	9f 93       	push	r25
 684:	af 93       	push	r26
 686:	bf 93       	push	r27
					  ParserData->TotalReportItems++;
 688:	ef 93       	push	r30
 68a:	ff 93       	push	r31
 68c:	80 91 e1 00 	lds	r24, 0x00E1
 690:	82 ff       	sbrs	r24, 2

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	0a c0       	rjmp	.+20     	; 0x6a8 <__vector_10+0x42>
 694:	80 91 e2 00 	lds	r24, 0x00E2
 698:	82 ff       	sbrs	r24, 2
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <__vector_10+0x42>
 69c:	80 91 e1 00 	lds	r24, 0x00E1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 6a0:	8b 7f       	andi	r24, 0xFB	; 251
 6a2:	80 93 e1 00 	sts	0x00E1, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	f3 d1       	rcall	.+998    	; 0xa8e <USB_Event_Stub>
 6a8:	80 91 da 00 	lds	r24, 0x00DA
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6ac:	80 ff       	sbrs	r24, 0
 6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <__vector_10+0x80>
 6b0:	80 91 d8 00 	lds	r24, 0x00D8
		}
	}

	if (!(ParserData->TotalReportItems))
 6b4:	80 ff       	sbrs	r24, 0
 6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <__vector_10+0x80>
 6b8:	80 91 da 00 	lds	r24, 0x00DA
	  return HID_PARSE_NoUnfilteredReportItems;
 6bc:	8e 7f       	andi	r24, 0xFE	; 254

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	80 93 da 00 	sts	0x00DA, r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	80 91 d9 00 	lds	r24, 0x00D9
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	80 ff       	sbrs	r24, 0
 6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <__vector_10+0x7a>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	8c e0       	ldi	r24, 0x0C	; 12
 6cc:	89 bd       	out	0x29, r24	; 41

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	8e e0       	ldi	r24, 0x0E	; 14
 6d0:	89 bd       	out	0x29, r24	; 41
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	09 b4       	in	r0, 0x29	; 41
 6d4:	00 fe       	sbrs	r0, 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <__vector_10+0x6c>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	8e bb       	out	0x1e, r24	; 30
 6dc:	d8 d1       	rcall	.+944    	; 0xa8e <USB_Event_Stub>
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <__vector_10+0x80>
 6e0:	19 bc       	out	0x29, r1	; 41
 6e2:	1e ba       	out	0x1e, r1	; 30
 6e4:	d4 d1       	rcall	.+936    	; 0xa8e <USB_Event_Stub>
 6e6:	80 91 e1 00 	lds	r24, 0x00E1
 6ea:	80 ff       	sbrs	r24, 0
 6ec:	17 c0       	rjmp	.+46     	; 0x71c <__vector_10+0xb6>
 6ee:	80 91 e2 00 	lds	r24, 0x00E2
 6f2:	80 ff       	sbrs	r24, 0
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <__vector_10+0xb6>
 6f6:	80 91 e2 00 	lds	r24, 0x00E2
 6fa:	8e 7f       	andi	r24, 0xFE	; 254
 6fc:	80 93 e2 00 	sts	0x00E2, r24
 700:	80 91 e2 00 	lds	r24, 0x00E2
 704:	80 61       	ori	r24, 0x10	; 16
 706:	80 93 e2 00 	sts	0x00E2, r24
 70a:	80 91 d8 00 	lds	r24, 0x00D8
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 70e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 710:	80 93 d8 00 	sts	0x00D8, r24
 714:	19 bc       	out	0x29, r1	; 41
 716:	85 e0       	ldi	r24, 0x05	; 5
 718:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 71a:	b9 d1       	rcall	.+882    	; 0xa8e <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 71c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 720:	84 ff       	sbrs	r24, 4
 722:	2e c0       	rjmp	.+92     	; 0x780 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 724:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 728:	84 ff       	sbrs	r24, 4
 72a:	2a c0       	rjmp	.+84     	; 0x780 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 72c:	8c e0       	ldi	r24, 0x0C	; 12
 72e:	89 bd       	out	0x29, r24	; 41
 730:	8e e0       	ldi	r24, 0x0E	; 14
 732:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 734:	09 b4       	in	r0, 0x29	; 41
 736:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 738:	fd cf       	rjmp	.-6      	; 0x734 <__vector_10+0xce>
 73a:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 73e:	8f 7d       	andi	r24, 0xDF	; 223
 740:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 744:	80 91 e1 00 	lds	r24, 0x00E1
 748:	8f 7e       	andi	r24, 0xEF	; 239
 74a:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 74e:	80 91 e2 00 	lds	r24, 0x00E2
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 758:	80 91 e2 00 	lds	r24, 0x00E2
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 762:	80 91 2e 01 	lds	r24, 0x012E
 766:	88 23       	and	r24, r24
 768:	11 f0       	breq	.+4      	; 0x76e <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	07 c0       	rjmp	.+14     	; 0x77c <__vector_10+0x116>
 76e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 772:	87 ff       	sbrs	r24, 7
 774:	02 c0       	rjmp	.+4      	; 0x77a <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	01 c0       	rjmp	.+2      	; 0x77c <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	8e bb       	out	0x1e, r24	; 30
 77e:	87 d1       	rcall	.+782    	; 0xa8e <USB_Event_Stub>
 780:	80 91 e1 00 	lds	r24, 0x00E1
 784:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 786:	21 c0       	rjmp	.+66     	; 0x7ca <__vector_10+0x164>
 788:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 78c:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 78e:	1d c0       	rjmp	.+58     	; 0x7ca <__vector_10+0x164>
 790:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 794:	87 7f       	andi	r24, 0xF7	; 247
 796:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	8e bb       	out	0x1e, r24	; 30
 79e:	10 92 2e 01 	sts	0x012E, r1
 7a2:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7a6:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 7a8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
 7b0:	8e 7f       	andi	r24, 0xFE	; 254
 7b2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7b6:	80 91 e2 00 	lds	r24, 0x00E2
 7ba:	80 61       	ori	r24, 0x10	; 16
 7bc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7c0:	42 e0       	ldi	r20, 0x02	; 2
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	30 de       	rcall	.-928    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
 7c8:	62 d1       	rcall	.+708    	; 0xa8e <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0b be       	out	0x3b, r0	; 59
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <USB_Device_ProcessControlRequest>:
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	aa 97       	sbiw	r28, 0x2a	; 42
 7fc:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	e2 e3       	ldi	r30, 0x32	; 50
 808:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 80a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 80e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	ea 33       	cpi	r30, 0x3A	; 58
 814:	f2 07       	cpc	r31, r18
 816:	c9 f7       	brne	.-14     	; 0x80a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 818:	19 dd       	rcall	.-1486   	; 0x24c <EVENT_USB_Device_ControlRequest>
 81a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 81e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 820:	1e c1       	rjmp	.+572    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 822:	90 91 32 01 	lds	r25, 0x0132
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 826:	80 91 33 01 	lds	r24, 0x0133

		switch (USB_ControlRequest.bRequest)
 82a:	85 30       	cpi	r24, 0x05	; 5
 82c:	09 f4       	brne	.+2      	; 0x830 <USB_Device_ProcessControlRequest+0x40>
 82e:	77 c0       	rjmp	.+238    	; 0x91e <USB_Device_ProcessControlRequest+0x12e>
 830:	30 f4       	brcc	.+12     	; 0x83e <USB_Device_ProcessControlRequest+0x4e>
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	81 f1       	breq	.+96     	; 0x896 <USB_Device_ProcessControlRequest+0xa6>
 836:	68 f0       	brcs	.+26     	; 0x852 <USB_Device_ProcessControlRequest+0x62>
 838:	83 30       	cpi	r24, 0x03	; 3
 83a:	69 f1       	breq	.+90     	; 0x896 <USB_Device_ProcessControlRequest+0xa6>
 83c:	10 c1       	rjmp	.+544    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 83e:	88 30       	cpi	r24, 0x08	; 8
 840:	09 f4       	brne	.+2      	; 0x844 <USB_Device_ProcessControlRequest+0x54>
 842:	e0 c0       	rjmp	.+448    	; 0xa04 <USB_Device_ProcessControlRequest+0x214>
 844:	89 30       	cpi	r24, 0x09	; 9
 846:	09 f4       	brne	.+2      	; 0x84a <USB_Device_ProcessControlRequest+0x5a>
 848:	ef c0       	rjmp	.+478    	; 0xa28 <USB_Device_ProcessControlRequest+0x238>
 84a:	86 30       	cpi	r24, 0x06	; 6
 84c:	09 f0       	breq	.+2      	; 0x850 <USB_Device_ProcessControlRequest+0x60>
 84e:	07 c1       	rjmp	.+526    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 850:	87 c0       	rjmp	.+270    	; 0x960 <USB_Device_ProcessControlRequest+0x170>
 852:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 854:	81 f0       	breq	.+32     	; 0x876 <USB_Device_ProcessControlRequest+0x86>
 856:	92 38       	cpi	r25, 0x82	; 130
 858:	09 f0       	breq	.+2      	; 0x85c <USB_Device_ProcessControlRequest+0x6c>
 85a:	01 c1       	rjmp	.+514    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 85c:	80 91 36 01 	lds	r24, 0x0136
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 860:	8f 70       	andi	r24, 0x0F	; 15
 862:	80 93 e9 00 	sts	0x00E9, r24
 866:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 86a:	85 fb       	bst	r24, 5
 86c:	88 27       	eor	r24, r24
 86e:	80 f9       	bld	r24, 0
 870:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 874:	06 c0       	rjmp	.+12     	; 0x882 <USB_Device_ProcessControlRequest+0x92>
 876:	80 91 2f 01 	lds	r24, 0x012F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 87a:	90 91 30 01 	lds	r25, 0x0130
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 87e:	91 11       	cpse	r25, r1
 880:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 882:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 886:	97 7f       	andi	r25, 0xF7	; 247
 888:	90 93 e8 00 	sts	0x00E8, r25
 88c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 890:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 894:	c2 c0       	rjmp	.+388    	; 0xa1a <USB_Device_ProcessControlRequest+0x22a>
 896:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 898:	2d 7f       	andi	r18, 0xFD	; 253
 89a:	09 f0       	breq	.+2      	; 0x89e <USB_Device_ProcessControlRequest+0xae>
 89c:	e0 c0       	rjmp	.+448    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 89e:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8a0:	19 f0       	breq	.+6      	; 0x8a8 <USB_Device_ProcessControlRequest+0xb8>
 8a2:	92 30       	cpi	r25, 0x02	; 2
 8a4:	61 f0       	breq	.+24     	; 0x8be <USB_Device_ProcessControlRequest+0xce>
 8a6:	db c0       	rjmp	.+438    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 8a8:	90 91 34 01 	lds	r25, 0x0134
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8ac:	91 30       	cpi	r25, 0x01	; 1
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <USB_Device_ProcessControlRequest+0xc2>
 8b0:	d6 c0       	rjmp	.+428    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 8b2:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <USB_Device_ProcessControlRequest+0xc8>
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	90 93 30 01 	sts	0x0130, r25
 8bc:	2a c0       	rjmp	.+84     	; 0x912 <USB_Device_ProcessControlRequest+0x122>
 8be:	90 91 34 01 	lds	r25, 0x0134

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8c2:	91 11       	cpse	r25, r1
 8c4:	26 c0       	rjmp	.+76     	; 0x912 <USB_Device_ProcessControlRequest+0x122>
 8c6:	20 91 36 01 	lds	r18, 0x0136
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8ca:	2f 70       	andi	r18, 0x0F	; 15
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8ce:	c7 c0       	rjmp	.+398    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 8d0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8d4:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 8d8:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8da:	1b c0       	rjmp	.+54     	; 0x912 <USB_Device_ProcessControlRequest+0x122>
 8dc:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8de:	21 f4       	brne	.+8      	; 0x8e8 <USB_Device_ProcessControlRequest+0xf8>
 8e0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8e4:	80 62       	ori	r24, 0x20	; 32
 8e6:	13 c0       	rjmp	.+38     	; 0x90e <USB_Device_ProcessControlRequest+0x11e>
 8e8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 8ec:	80 61       	ori	r24, 0x10	; 16
 8ee:	80 93 eb 00 	sts	0x00EB, r24
 8f2:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	02 2e       	mov	r0, r18
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <USB_Device_ProcessControlRequest+0x10c>
 8fa:	88 0f       	add	r24, r24
 8fc:	0a 94       	dec	r0
 8fe:	ea f7       	brpl	.-6      	; 0x8fa <USB_Device_ProcessControlRequest+0x10a>
 900:	80 93 ea 00 	sts	0x00EA, r24
 904:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 908:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 90c:	88 60       	ori	r24, 0x08	; 8
 90e:	80 93 eb 00 	sts	0x00EB, r24
 912:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 916:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 91a:	87 7f       	andi	r24, 0xF7	; 247
 91c:	81 c0       	rjmp	.+258    	; 0xa20 <USB_Device_ProcessControlRequest+0x230>
 91e:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 920:	9e c0       	rjmp	.+316    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 922:	10 91 34 01 	lds	r17, 0x0134
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 926:	1f 77       	andi	r17, 0x7F	; 127
 928:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 92c:	80 78       	andi	r24, 0x80	; 128
 92e:	81 2b       	or	r24, r17
 930:	80 93 e3 00 	sts	0x00E3, r24
 934:	80 91 e8 00 	lds	r24, 0x00E8
 938:	87 7f       	andi	r24, 0xF7	; 247
 93a:	80 93 e8 00 	sts	0x00E8, r24
 93e:	e6 dd       	rcall	.-1076   	; 0x50c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 940:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 944:	80 ff       	sbrs	r24, 0
 946:	fc cf       	rjmp	.-8      	; 0x940 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 948:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	80 93 e3 00 	sts	0x00E3, r24
 952:	11 23       	and	r17, r17
 954:	11 f0       	breq	.+4      	; 0x95a <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	01 c0       	rjmp	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x16c>
 95a:	82 e0       	ldi	r24, 0x02	; 2
 95c:	8e bb       	out	0x1e, r24	; 30
 95e:	7f c0       	rjmp	.+254    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 960:	90 58       	subi	r25, 0x80	; 128
 962:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 964:	08 f0       	brcs	.+2      	; 0x968 <USB_Device_ProcessControlRequest+0x178>
 966:	7b c0       	rjmp	.+246    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 968:	80 91 34 01 	lds	r24, 0x0134
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 96c:	90 91 35 01 	lds	r25, 0x0135
 970:	8c 3d       	cpi	r24, 0xDC	; 220
 972:	23 e0       	ldi	r18, 0x03	; 3
 974:	92 07       	cpc	r25, r18
 976:	71 f5       	brne	.+92     	; 0x9d4 <USB_Device_ProcessControlRequest+0x1e4>
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 97c:	8a e2       	ldi	r24, 0x2A	; 42
 97e:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 980:	4f b7       	in	r20, 0x3f	; 63
 982:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 984:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 986:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 988:	20 e0       	ldi	r18, 0x00	; 0
 98a:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 98c:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 98e:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	50 93 57 00 	sts	0x0057, r21
 996:	e4 91       	lpm	r30, Z
 998:	20 ff       	sbrs	r18, 0
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
 99c:	e2 95       	swap	r30
 99e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 9a0:	3f 5f       	subi	r19, 0xFF	; 255
 9a2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 9a4:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	ea 30       	cpi	r30, 0x0A	; 10
 9aa:	10 f0       	brcs	.+4      	; 0x9b0 <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 9ac:	c7 96       	adiw	r24, 0x37	; 55
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <USB_Device_ProcessControlRequest+0x1c2>
 9b0:	c0 96       	adiw	r24, 0x30	; 48
 9b2:	8d 93       	st	X+, r24
 9b4:	9d 93       	st	X+, r25
 9b6:	2f 5f       	subi	r18, 0xFF	; 255
 9b8:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9ba:	49 f7       	brne	.-46     	; 0x98e <USB_Device_ProcessControlRequest+0x19e>
 9bc:	4f bf       	out	0x3f, r20	; 63
 9be:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9c2:	87 7f       	andi	r24, 0xF7	; 247
 9c4:	80 93 e8 00 	sts	0x00E8, r24
 9c8:	6a e2       	ldi	r22, 0x2A	; 42
 9ca:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9cc:	ce 01       	movw	r24, r28
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	72 dc       	rcall	.-1820   	; 0x2b6 <Endpoint_Write_Control_Stream_LE>
 9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <USB_Device_ProcessControlRequest+0x208>
 9d4:	ae 01       	movw	r20, r28
 9d6:	4f 5f       	subi	r20, 0xFF	; 255
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9da:	60 91 36 01 	lds	r22, 0x0136
 9de:	39 dc       	rcall	.-1934   	; 0x252 <CALLBACK_USB_GetDescriptor>
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0x1f6>
 9e4:	3c c0       	rjmp	.+120    	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 9e6:	20 91 e8 00 	lds	r18, 0x00E8
 9ea:	27 7f       	andi	r18, 0xF7	; 247
 9ec:	20 93 e8 00 	sts	0x00E8, r18
 9f0:	bc 01       	movw	r22, r24
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	9a 81       	ldd	r25, Y+2	; 0x02
 9f6:	ba dc       	rcall	.-1676   	; 0x36c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 9f8:	80 91 e8 00 	lds	r24, 0x00E8
 9fc:	8b 77       	andi	r24, 0x7B	; 123
 9fe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a02:	2d c0       	rjmp	.+90     	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 a04:	90 38       	cpi	r25, 0x80	; 128
 a06:	59 f5       	brne	.+86     	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 a08:	80 91 e8 00 	lds	r24, 0x00E8
 a0c:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a0e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a12:	80 91 2e 01 	lds	r24, 0x012E
 a16:	80 93 f1 00 	sts	0x00F1, r24
 a1a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 a1e:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a24:	73 dd       	rcall	.-1306   	; 0x50c <Endpoint_ClearStatusStage>
 a26:	1b c0       	rjmp	.+54     	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 a28:	91 11       	cpse	r25, r1
 a2a:	19 c0       	rjmp	.+50     	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
 a2c:	90 91 34 01 	lds	r25, 0x0134
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a30:	92 30       	cpi	r25, 0x02	; 2
 a32:	a8 f4       	brcc	.+42     	; 0xa5e <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a34:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a38:	87 7f       	andi	r24, 0xF7	; 247
 a3a:	80 93 e8 00 	sts	0x00E8, r24
 a3e:	90 93 2e 01 	sts	0x012E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a42:	64 dd       	rcall	.-1336   	; 0x50c <Endpoint_ClearStatusStage>
 a44:	80 91 2e 01 	lds	r24, 0x012E
 a48:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <USB_Device_ProcessControlRequest+0x264>
 a4c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 a50:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <USB_Device_ProcessControlRequest+0x268>
 a54:	84 e0       	ldi	r24, 0x04	; 4
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0x26a>
 a58:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a5a:	8e bb       	out	0x1e, r24	; 30
 a5c:	f4 db       	rcall	.-2072   	; 0x246 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
 a62:	83 ff       	sbrs	r24, 3
 a64:	0a c0       	rjmp	.+20     	; 0xa7a <USB_Device_ProcessControlRequest+0x28a>
 a66:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 a6a:	87 7f       	andi	r24, 0xF7	; 247
 a6c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a70:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a74:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a76:	80 93 eb 00 	sts	0x00EB, r24
 a7a:	aa 96       	adiw	r28, 0x2a	; 42
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a80:	de bf       	out	0x3e, r29	; 62
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	cd bf       	out	0x3d, r28	; 61
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a8a:	1f 91       	pop	r17
 a8c:	08 95       	ret

00000a8e <USB_Event_Stub>:
 a8e:	08 95       	ret

00000a90 <USB_USBTask>:
 a90:	cf 93       	push	r28
 a92:	8e b3       	in	r24, 0x1e	; 30
 a94:	88 23       	and	r24, r24
 a96:	a9 f0       	breq	.+42     	; 0xac2 <USB_USBTask+0x32>
 a98:	80 91 e9 00 	lds	r24, 0x00E9
 a9c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a9e:	90 91 ec 00 	lds	r25, 0x00EC
 aa2:	90 ff       	sbrs	r25, 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <USB_USBTask+0x1a>
 aa6:	90 e8       	ldi	r25, 0x80	; 128
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <USB_USBTask+0x1c>
 aaa:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 aac:	c9 2f       	mov	r28, r25
 aae:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ab4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ab8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 aba:	9a de       	rcall	.-716    	; 0x7f0 <USB_Device_ProcessControlRequest>
 abc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 abe:	c0 93 e9 00 	sts	0x00E9, r28
 ac2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 ac4:	08 95       	ret

00000ac6 <CDC_Device_ConfigureEndpoints>:
 ac6:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ac8:	df 93       	push	r29
 aca:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 acc:	fc 01       	movw	r30, r24
 ace:	70 96       	adiw	r30, 0x10	; 16
 ad0:	8b e0       	ldi	r24, 0x0B	; 11
 ad2:	df 01       	movw	r26, r30
 ad4:	1d 92       	st	X+, r1
 ad6:	8a 95       	dec	r24
 ad8:	e9 f7       	brne	.-6      	; 0xad4 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 ada:	82 e0       	ldi	r24, 0x02	; 2
 adc:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 ade:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 ae4:	61 e0       	ldi	r22, 0x01	; 1
 ae6:	ce 01       	movw	r24, r28
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	d3 dc       	rcall	.-1626   	; 0x492 <Endpoint_ConfigureEndpointTable>
 aec:	88 23       	and	r24, r24
 aee:	61 f0       	breq	.+24     	; 0xb08 <CDC_Device_ConfigureEndpoints+0x42>
 af0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 af2:	ce 01       	movw	r24, r28
 af4:	06 96       	adiw	r24, 0x06	; 6
 af6:	cd dc       	rcall	.-1638   	; 0x492 <Endpoint_ConfigureEndpointTable>
 af8:	88 23       	and	r24, r24
 afa:	31 f0       	breq	.+12     	; 0xb08 <CDC_Device_ConfigureEndpoints+0x42>
 afc:	61 e0       	ldi	r22, 0x01	; 1
 afe:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 b00:	0b 96       	adiw	r24, 0x0b	; 11
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
	  return false;

	return true;
}
 b06:	c5 cc       	rjmp	.-1654   	; 0x492 <Endpoint_ConfigureEndpointTable>
 b08:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
	  return false;

	return true;
}
 b0e:	08 95       	ret

00000b10 <CDC_Device_SendByte>:
 b10:	cf 93       	push	r28
 b12:	c6 2f       	mov	r28, r22
 b14:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b16:	24 30       	cpi	r18, 0x04	; 4
 b18:	f1 f4       	brne	.+60     	; 0xb56 <CDC_Device_SendByte+0x46>
 b1a:	fc 01       	movw	r30, r24
 b1c:	44 89       	ldd	r20, Z+20	; 0x14
 b1e:	55 89       	ldd	r21, Z+21	; 0x15
 b20:	66 89       	ldd	r22, Z+22	; 0x16
 b22:	77 89       	ldd	r23, Z+23	; 0x17
 b24:	45 2b       	or	r20, r21
 b26:	46 2b       	or	r20, r22
 b28:	47 2b       	or	r20, r23
 b2a:	a9 f0       	breq	.+42     	; 0xb56 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b2c:	81 81       	ldd	r24, Z+1	; 0x01
 b2e:	8f 70       	andi	r24, 0x0F	; 15
 b30:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 b34:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 b38:	85 ff       	sbrs	r24, 5
 b3a:	04 c0       	rjmp	.+8      	; 0xb44 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b3c:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	0a c0       	rjmp	.+20     	; 0xb58 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b44:	80 91 e8 00 	lds	r24, 0x00E8
 b48:	8e 77       	andi	r24, 0x7E	; 126
 b4a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 b4e:	fd dc       	rcall	.-1542   	; 0x54a <Endpoint_WaitUntilReady>
 b50:	88 23       	and	r24, r24
 b52:	a1 f3       	breq	.-24     	; 0xb3c <CDC_Device_SendByte+0x2c>
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <CDC_Device_SendByte+0x48>
 b56:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 b58:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 b5a:	08 95       	ret

00000b5c <CDC_Device_putchar>:
 b5c:	fb 01       	movw	r30, r22
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 b5e:	68 2f       	mov	r22, r24
 b60:	84 85       	ldd	r24, Z+12	; 0x0c
 b62:	95 85       	ldd	r25, Z+13	; 0x0d
 b64:	d5 df       	rcall	.-86     	; 0xb10 <CDC_Device_SendByte>
 b66:	21 e0       	ldi	r18, 0x01	; 1
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	81 11       	cpse	r24, r1
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <CDC_Device_putchar+0x16>
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	88 27       	eor	r24, r24
}
 b74:	99 27       	eor	r25, r25
 b76:	82 1b       	sub	r24, r18
 b78:	93 0b       	sbc	r25, r19
 b7a:	08 95       	ret

00000b7c <CDC_Device_Flush>:
 b7c:	2e b3       	in	r18, 0x1e	; 30
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b7e:	24 30       	cpi	r18, 0x04	; 4
 b80:	31 f5       	brne	.+76     	; 0xbce <CDC_Device_Flush+0x52>
 b82:	fc 01       	movw	r30, r24
 b84:	44 89       	ldd	r20, Z+20	; 0x14
 b86:	55 89       	ldd	r21, Z+21	; 0x15
 b88:	66 89       	ldd	r22, Z+22	; 0x16
 b8a:	77 89       	ldd	r23, Z+23	; 0x17
 b8c:	45 2b       	or	r20, r21
 b8e:	46 2b       	or	r20, r22
 b90:	47 2b       	or	r20, r23
 b92:	e9 f0       	breq	.+58     	; 0xbce <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b94:	81 81       	ldd	r24, Z+1	; 0x01
 b96:	8f 70       	andi	r24, 0x0F	; 15
 b98:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 b9c:	80 91 f2 00 	lds	r24, 0x00F2
 ba0:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 ba4:	89 2b       	or	r24, r25
 ba6:	89 f0       	breq	.+34     	; 0xbca <CDC_Device_Flush+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ba8:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bac:	80 91 e8 00 	lds	r24, 0x00E8
 bb0:	8e 77       	andi	r24, 0x7E	; 126
 bb2:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 bb6:	95 fd       	sbrc	r25, 5
 bb8:	08 c0       	rjmp	.+16     	; 0xbca <CDC_Device_Flush+0x4e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 bba:	c7 dc       	rcall	.-1650   	; 0x54a <Endpoint_WaitUntilReady>
 bbc:	81 11       	cpse	r24, r1
 bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <CDC_Device_Flush+0x54>
 bc0:	80 91 e8 00 	lds	r24, 0x00E8
 bc4:	8e 77       	andi	r24, 0x7E	; 126
 bc6:	80 93 e8 00 	sts	0x00E8, r24
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	08 95       	ret
 bce:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 bd0:	08 95       	ret

00000bd2 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 bd2:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bd4:	24 30       	cpi	r18, 0x04	; 4
 bd6:	89 f4       	brne	.+34     	; 0xbfa <CDC_Device_USBTask+0x28>
 bd8:	fc 01       	movw	r30, r24
 bda:	44 89       	ldd	r20, Z+20	; 0x14
 bdc:	55 89       	ldd	r21, Z+21	; 0x15
 bde:	66 89       	ldd	r22, Z+22	; 0x16
 be0:	77 89       	ldd	r23, Z+23	; 0x17
 be2:	45 2b       	or	r20, r21
 be4:	46 2b       	or	r20, r22
 be6:	47 2b       	or	r20, r23
 be8:	41 f0       	breq	.+16     	; 0xbfa <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bea:	21 81       	ldd	r18, Z+1	; 0x01
 bec:	2f 70       	andi	r18, 0x0F	; 15
 bee:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bf2:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 bf6:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
 bf8:	c1 cf       	rjmp	.-126    	; 0xb7c <CDC_Device_Flush>
 bfa:	08 95       	ret

00000bfc <CDC_Device_ReceiveByte>:
 bfc:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bfe:	24 30       	cpi	r18, 0x04	; 4
 c00:	19 f0       	breq	.+6      	; 0xc08 <CDC_Device_ReceiveByte+0xc>
	  return -1;
 c02:	8f ef       	ldi	r24, 0xFF	; 255
 c04:	9f ef       	ldi	r25, 0xFF	; 255
 c06:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c08:	fc 01       	movw	r30, r24
 c0a:	44 89       	ldd	r20, Z+20	; 0x14
 c0c:	55 89       	ldd	r21, Z+21	; 0x15
 c0e:	66 89       	ldd	r22, Z+22	; 0x16
 c10:	77 89       	ldd	r23, Z+23	; 0x17
 c12:	45 2b       	or	r20, r21
 c14:	46 2b       	or	r20, r22
 c16:	47 2b       	or	r20, r23
 c18:	a1 f3       	breq	.-24     	; 0xc02 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c1a:	86 81       	ldd	r24, Z+6	; 0x06
 c1c:	8f 70       	andi	r24, 0x0F	; 15
 c1e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c22:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 c26:	82 ff       	sbrs	r24, 2
 c28:	ec cf       	rjmp	.-40     	; 0xc02 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 c2a:	80 91 f2 00 	lds	r24, 0x00F2
 c2e:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 c32:	89 2b       	or	r24, r25
 c34:	21 f0       	breq	.+8      	; 0xc3e <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c36:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <CDC_Device_ReceiveByte+0x46>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 c3e:	2f ef       	ldi	r18, 0xFF	; 255
 c40:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 c42:	80 91 f2 00 	lds	r24, 0x00F2
 c46:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 c4a:	89 2b       	or	r24, r25
 c4c:	29 f4       	brne	.+10     	; 0xc58 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c4e:	80 91 e8 00 	lds	r24, 0x00E8
 c52:	8b 77       	andi	r24, 0x7B	; 123
 c54:	80 93 e8 00 	sts	0x00E8, r24
 c58:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 c5a:	08 95       	ret

00000c5c <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
 c5c:	cf 93       	push	r28
 c5e:	df 93       	push	r29
 c60:	ec 01       	movw	r28, r24
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
 c62:	8c 85       	ldd	r24, Y+12	; 0x0c
 c64:	9d 85       	ldd	r25, Y+13	; 0x0d
 c66:	ca df       	rcall	.-108    	; 0xbfc <CDC_Device_ReceiveByte>
 c68:	97 ff       	sbrs	r25, 7
 c6a:	0a c0       	rjmp	.+20     	; 0xc80 <CDC_Device_getchar_Blocking+0x24>
 c6c:	8e b3       	in	r24, 0x1e	; 30
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 c6e:	88 23       	and	r24, r24
 c70:	29 f0       	breq	.+10     	; 0xc7c <CDC_Device_getchar_Blocking+0x20>
 c72:	8c 85       	ldd	r24, Y+12	; 0x0c
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 c74:	9d 85       	ldd	r25, Y+13	; 0x0d
 c76:	ad df       	rcall	.-166    	; 0xbd2 <CDC_Device_USBTask>
 c78:	0b df       	rcall	.-490    	; 0xa90 <USB_USBTask>
 c7a:	f3 cf       	rjmp	.-26     	; 0xc62 <CDC_Device_getchar_Blocking+0x6>
		USB_USBTask();
 c7c:	8e ef       	ldi	r24, 0xFE	; 254
 c7e:	9f ef       	ldi	r25, 0xFF	; 255
 c80:	df 91       	pop	r29
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return _FDEV_EOF;
 c82:	cf 91       	pop	r28
 c84:	08 95       	ret

00000c86 <CDC_Device_CreateBlockingStream>:
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
 c86:	fb 01       	movw	r30, r22
 c88:	2e e0       	ldi	r18, 0x0E	; 14
 c8a:	db 01       	movw	r26, r22
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
 c8c:	1d 92       	st	X+, r1
 c8e:	2a 95       	dec	r18
 c90:	e9 f7       	brne	.-6      	; 0xc8c <CDC_Device_CreateBlockingStream+0x6>
 c92:	23 e0       	ldi	r18, 0x03	; 3
 c94:	23 83       	std	Z+3, r18	; 0x03
 c96:	2e ea       	ldi	r18, 0xAE	; 174
 c98:	35 e0       	ldi	r19, 0x05	; 5
 c9a:	31 87       	std	Z+9, r19	; 0x09
 c9c:	20 87       	std	Z+8, r18	; 0x08
 c9e:	2e e2       	ldi	r18, 0x2E	; 46
 ca0:	36 e0       	ldi	r19, 0x06	; 6
 ca2:	33 87       	std	Z+11, r19	; 0x0b
 ca4:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 ca6:	95 87       	std	Z+13, r25	; 0x0d
 ca8:	84 87       	std	Z+12, r24	; 0x0c
 caa:	08 95       	ret

00000cac <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 cac:	08 95       	ret

00000cae <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cae:	cf 93       	push	r28
 cb0:	df 93       	push	r29
 cb2:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cb4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 cb8:	83 ff       	sbrs	r24, 3
 cba:	a5 c0       	rjmp	.+330    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 cbc:	88 81       	ld	r24, Y
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	20 91 36 01 	lds	r18, 0x0136
 cc4:	30 91 37 01 	lds	r19, 0x0137
 cc8:	28 17       	cp	r18, r24
 cca:	39 07       	cpc	r19, r25
 ccc:	09 f0       	breq	.+2      	; 0xcd0 <CDC_Device_ProcessControlRequest+0x22>
 cce:	9b c0       	rjmp	.+310    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	switch (USB_ControlRequest.bRequest)
 cd0:	80 91 33 01 	lds	r24, 0x0133
 cd4:	81 32       	cpi	r24, 0x21	; 33
 cd6:	61 f0       	breq	.+24     	; 0xcf0 <CDC_Device_ProcessControlRequest+0x42>
 cd8:	20 f4       	brcc	.+8      	; 0xce2 <CDC_Device_ProcessControlRequest+0x34>
 cda:	80 32       	cpi	r24, 0x20	; 32
 cdc:	09 f4       	brne	.+2      	; 0xce0 <CDC_Device_ProcessControlRequest+0x32>
 cde:	3e c0       	rjmp	.+124    	; 0xd5c <CDC_Device_ProcessControlRequest+0xae>
 ce0:	92 c0       	rjmp	.+292    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
 ce2:	82 32       	cpi	r24, 0x22	; 34
 ce4:	09 f4       	brne	.+2      	; 0xce8 <CDC_Device_ProcessControlRequest+0x3a>
 ce6:	6b c0       	rjmp	.+214    	; 0xdbe <CDC_Device_ProcessControlRequest+0x110>
 ce8:	83 32       	cpi	r24, 0x23	; 35
 cea:	09 f4       	brne	.+2      	; 0xcee <CDC_Device_ProcessControlRequest+0x40>
 cec:	7c c0       	rjmp	.+248    	; 0xde6 <CDC_Device_ProcessControlRequest+0x138>
 cee:	8b c0       	rjmp	.+278    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cf0:	80 91 32 01 	lds	r24, 0x0132
 cf4:	81 3a       	cpi	r24, 0xA1	; 161
 cf6:	09 f0       	breq	.+2      	; 0xcfa <CDC_Device_ProcessControlRequest+0x4c>
 cf8:	86 c0       	rjmp	.+268    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
 cfe:	87 7f       	andi	r24, 0xF7	; 247
 d00:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d04:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 d08:	80 ff       	sbrs	r24, 0
 d0a:	fc cf       	rjmp	.-8      	; 0xd04 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d0c:	4c 89       	ldd	r20, Y+20	; 0x14
 d0e:	5d 89       	ldd	r21, Y+21	; 0x15
 d10:	6e 89       	ldd	r22, Y+22	; 0x16
 d12:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d14:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 d18:	bb 27       	eor	r27, r27
 d1a:	a7 2f       	mov	r26, r23
 d1c:	96 2f       	mov	r25, r22
 d1e:	85 2f       	mov	r24, r21
 d20:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 d24:	cb 01       	movw	r24, r22
 d26:	aa 27       	eor	r26, r26
 d28:	bb 27       	eor	r27, r27
 d2a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 d2e:	47 2f       	mov	r20, r23
 d30:	55 27       	eor	r21, r21
 d32:	66 27       	eor	r22, r22
 d34:	77 27       	eor	r23, r23
 d36:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 d3a:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d3c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 d40:	89 8d       	ldd	r24, Y+25	; 0x19
 d42:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 d46:	8a 8d       	ldd	r24, Y+26	; 0x1a
 d48:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d4c:	80 91 e8 00 	lds	r24, 0x00E8
 d50:	8e 77       	andi	r24, 0x7E	; 126
 d52:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 d56:	df 91       	pop	r29
 d58:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d5a:	d8 cb       	rjmp	.-2128   	; 0x50c <Endpoint_ClearStatusStage>
 d5c:	80 91 32 01 	lds	r24, 0x0132
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d60:	81 32       	cpi	r24, 0x21	; 33
 d62:	09 f0       	breq	.+2      	; 0xd66 <CDC_Device_ProcessControlRequest+0xb8>
 d64:	50 c0       	rjmp	.+160    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
 d66:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d6a:	87 7f       	andi	r24, 0xF7	; 247
 d6c:	80 93 e8 00 	sts	0x00E8, r24
 d70:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d74:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 d76:	04 c0       	rjmp	.+8      	; 0xd80 <CDC_Device_ProcessControlRequest+0xd2>
 d78:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 d7a:	81 11       	cpse	r24, r1
 d7c:	f9 cf       	rjmp	.-14     	; 0xd70 <CDC_Device_ProcessControlRequest+0xc2>
 d7e:	43 c0       	rjmp	.+134    	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
 d80:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 d84:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 d88:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 d8c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 d90:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 d92:	2d 8b       	std	Y+21, r18	; 0x15
 d94:	9e 8b       	std	Y+22, r25	; 0x16
 d96:	8f 8b       	std	Y+23, r24	; 0x17
 d98:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 d9c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 d9e:	80 91 f1 00 	lds	r24, 0x00F1
 da2:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 da4:	80 91 f1 00 	lds	r24, 0x00F1
 da8:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 daa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dae:	8b 77       	andi	r24, 0x7B	; 123
 db0:	80 93 e8 00 	sts	0x00E8, r24
 db4:	ab db       	rcall	.-2218   	; 0x50c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 db6:	ce 01       	movw	r24, r28
 db8:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 dba:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 dbc:	77 cf       	rjmp	.-274    	; 0xcac <CDC_Device_Event_Stub>
 dbe:	80 91 32 01 	lds	r24, 0x0132
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 dc2:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dc4:	01 f5       	brne	.+64     	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
 dc6:	80 91 e8 00 	lds	r24, 0x00E8
 dca:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dcc:	80 93 e8 00 	sts	0x00E8, r24
 dd0:	9d db       	rcall	.-2246   	; 0x50c <Endpoint_ClearStatusStage>
 dd2:	80 91 34 01 	lds	r24, 0x0134
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dd6:	90 91 35 01 	lds	r25, 0x0135

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 dda:	99 8b       	std	Y+17, r25	; 0x11
 ddc:	88 8b       	std	Y+16, r24	; 0x10
 dde:	ce 01       	movw	r24, r28
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	63 cf       	rjmp	.-314    	; 0xcac <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 de6:	80 91 32 01 	lds	r24, 0x0132
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 dea:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 dec:	61 f4       	brne	.+24     	; 0xe06 <CDC_Device_ProcessControlRequest+0x158>
 dee:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 df2:	87 7f       	andi	r24, 0xF7	; 247
 df4:	80 93 e8 00 	sts	0x00E8, r24
 df8:	89 db       	rcall	.-2286   	; 0x50c <Endpoint_ClearStatusStage>
 dfa:	60 91 34 01 	lds	r22, 0x0134
 dfe:	ce 01       	movw	r24, r28
 e00:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e02:	cf 91       	pop	r28
 e04:	53 cf       	rjmp	.-346    	; 0xcac <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e06:	df 91       	pop	r29
 e08:	cf 91       	pop	r28
 e0a:	08 95       	ret

00000e0c <fgetc>:
			}

			break;
	}
}
 e0c:	cf 93       	push	r28
 e0e:	df 93       	push	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e10:	ec 01       	movw	r28, r24
 e12:	2b 81       	ldd	r18, Y+3	; 0x03
			}

			break;
	}
}
 e14:	20 ff       	sbrs	r18, 0
 e16:	33 c0       	rjmp	.+102    	; 0xe7e <fgetc+0x72>
 e18:	26 ff       	sbrs	r18, 6
 e1a:	0a c0       	rjmp	.+20     	; 0xe30 <fgetc+0x24>
 e1c:	2f 7b       	andi	r18, 0xBF	; 191
 e1e:	2b 83       	std	Y+3, r18	; 0x03
 e20:	8e 81       	ldd	r24, Y+6	; 0x06
 e22:	9f 81       	ldd	r25, Y+7	; 0x07
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	9f 83       	std	Y+7, r25	; 0x07
 e28:	8e 83       	std	Y+6, r24	; 0x06
 e2a:	8a 81       	ldd	r24, Y+2	; 0x02
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	29 c0       	rjmp	.+82     	; 0xe82 <fgetc+0x76>
 e30:	22 ff       	sbrs	r18, 2
 e32:	0f c0       	rjmp	.+30     	; 0xe52 <fgetc+0x46>
 e34:	e8 81       	ld	r30, Y
 e36:	f9 81       	ldd	r31, Y+1	; 0x01
 e38:	80 81       	ld	r24, Z
 e3a:	99 27       	eor	r25, r25
 e3c:	87 fd       	sbrc	r24, 7
 e3e:	90 95       	com	r25
 e40:	00 97       	sbiw	r24, 0x00	; 0
 e42:	19 f4       	brne	.+6      	; 0xe4a <fgetc+0x3e>
 e44:	20 62       	ori	r18, 0x20	; 32
 e46:	2b 83       	std	Y+3, r18	; 0x03
 e48:	1a c0       	rjmp	.+52     	; 0xe7e <fgetc+0x72>
 e4a:	31 96       	adiw	r30, 0x01	; 1
 e4c:	f9 83       	std	Y+1, r31	; 0x01
 e4e:	e8 83       	st	Y, r30
 e50:	0e c0       	rjmp	.+28     	; 0xe6e <fgetc+0x62>
 e52:	ea 85       	ldd	r30, Y+10	; 0x0a
 e54:	fb 85       	ldd	r31, Y+11	; 0x0b
 e56:	09 95       	icall
 e58:	97 ff       	sbrs	r25, 7
 e5a:	09 c0       	rjmp	.+18     	; 0xe6e <fgetc+0x62>
 e5c:	2b 81       	ldd	r18, Y+3	; 0x03
 e5e:	01 96       	adiw	r24, 0x01	; 1
 e60:	11 f4       	brne	.+4      	; 0xe66 <fgetc+0x5a>
 e62:	80 e1       	ldi	r24, 0x10	; 16
 e64:	01 c0       	rjmp	.+2      	; 0xe68 <fgetc+0x5c>
 e66:	80 e2       	ldi	r24, 0x20	; 32
 e68:	82 2b       	or	r24, r18
 e6a:	8b 83       	std	Y+3, r24	; 0x03
 e6c:	08 c0       	rjmp	.+16     	; 0xe7e <fgetc+0x72>
 e6e:	2e 81       	ldd	r18, Y+6	; 0x06
 e70:	3f 81       	ldd	r19, Y+7	; 0x07
 e72:	2f 5f       	subi	r18, 0xFF	; 255
 e74:	3f 4f       	sbci	r19, 0xFF	; 255
 e76:	3f 83       	std	Y+7, r19	; 0x07
 e78:	2e 83       	std	Y+6, r18	; 0x06
 e7a:	99 27       	eor	r25, r25
 e7c:	02 c0       	rjmp	.+4      	; 0xe82 <fgetc+0x76>
 e7e:	8f ef       	ldi	r24, 0xFF	; 255
 e80:	9f ef       	ldi	r25, 0xFF	; 255
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	08 95       	ret

00000e88 <_exit>:
 e88:	f8 94       	cli

00000e8a <__stop_program>:
 e8a:	ff cf       	rjmp	.-2      	; 0xe8a <__stop_program>

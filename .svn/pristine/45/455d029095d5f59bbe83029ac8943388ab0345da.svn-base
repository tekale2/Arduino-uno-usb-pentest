
DualMIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000ea4  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a68c  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002afd  00000000  00000000  0000c798  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fb6  00000000  00000000  0000f295  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef4  00000000  00000000  0001324c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000418b  00000000  00000000  00014140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000066b7  00000000  00000000  000182cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000720  00000000  00000000  0001e982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	bb c0       	rjmp	.+374    	; 0x178 <__ctors_end>
   2:	00 00       	nop
   4:	d6 c0       	rjmp	.+428    	; 0x1b2 <__bad_interrupt>
   6:	00 00       	nop
   8:	d4 c0       	rjmp	.+424    	; 0x1b2 <__bad_interrupt>
   a:	00 00       	nop
   c:	d2 c0       	rjmp	.+420    	; 0x1b2 <__bad_interrupt>
   e:	00 00       	nop
  10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__bad_interrupt>
  12:	00 00       	nop
  14:	ce c0       	rjmp	.+412    	; 0x1b2 <__bad_interrupt>
  16:	00 00       	nop
  18:	cc c0       	rjmp	.+408    	; 0x1b2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ca c0       	rjmp	.+404    	; 0x1b2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c8 c0       	rjmp	.+400    	; 0x1b2 <__bad_interrupt>
  22:	00 00       	nop
  24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c4       	rjmp	.+2148   	; 0x88e <__vector_10>
  2a:	00 00       	nop
  2c:	c2 c0       	rjmp	.+388    	; 0x1b2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c0 c0       	rjmp	.+384    	; 0x1b2 <__bad_interrupt>
  32:	00 00       	nop
  34:	be c0       	rjmp	.+380    	; 0x1b2 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	bc c0       	rjmp	.+376    	; 0x1b2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ba c0       	rjmp	.+372    	; 0x1b2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b8 c0       	rjmp	.+368    	; 0x1b2 <__bad_interrupt>
  42:	00 00       	nop
  44:	b6 c0       	rjmp	.+364    	; 0x1b2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	b4 c0       	rjmp	.+360    	; 0x1b2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b2 c0       	rjmp	.+356    	; 0x1b2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	ae c0       	rjmp	.+348    	; 0x1b2 <__bad_interrupt>
  56:	00 00       	nop
  58:	ac c0       	rjmp	.+344    	; 0x1b2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	aa c0       	rjmp	.+340    	; 0x1b2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a8 c0       	rjmp	.+336    	; 0x1b2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	a6 c0       	rjmp	.+332    	; 0x1b2 <__bad_interrupt>
  66:	00 00       	nop
  68:	a4 c0       	rjmp	.+328    	; 0x1b2 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	a2 c0       	rjmp	.+324    	; 0x1b2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a0 c0       	rjmp	.+320    	; 0x1b2 <__bad_interrupt>
  72:	00 00       	nop
  74:	9e c0       	rjmp	.+316    	; 0x1b2 <__bad_interrupt>
  76:	00 00       	nop
  78:	9c c0       	rjmp	.+312    	; 0x1b2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9a c0       	rjmp	.+308    	; 0x1b2 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	98 c0       	rjmp	.+304    	; 0x1b2 <__bad_interrupt>
  82:	00 00       	nop
  84:	96 c0       	rjmp	.+300    	; 0x1b2 <__bad_interrupt>
  86:	00 00       	nop
  88:	94 c0       	rjmp	.+296    	; 0x1b2 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	92 c0       	rjmp	.+292    	; 0x1b2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	90 c0       	rjmp	.+288    	; 0x1b2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	8e c0       	rjmp	.+284    	; 0x1b2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	28 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     (.L.U.F.A. .D.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	61 00 6c 00 20 00 4d 00 49 00 44 00 49 00 20 00     a.l. .M.I.D.I. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000c2 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000dc <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  e0:	09 02 85 00 02 01 00 c0 32 09 04 00 00 00 01 01     ........2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f0:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
 100:	01 03 00 00 07 24 01 00 01 61 00 06 24 02 01 01     .....$...a..$...

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 110:	00 06 24 02 01 02 00 06 24 02 02 03 00 06 24 02     ..$.....$.....$.
 120:	02 04 00 09 24 03 01 05 01 03 01 00 09 24 03 01     ....$........$..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 130:	06 01 04 01 00 09 24 03 02 07 01 01 01 00 09 24     ......$........$
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 140:	03 02 08 01 02 01 00 09 05 01 02 40 00 05 00 00     ...........@....
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	06 25 01 02 01 02 09 05 82 02 40 00 05 00 00 06     .%........@.....
 160:	25 01 02 05 06                                      %....

00000165 <DeviceDescriptor>:
				ReportSize     -= 2;
 165:	12 01 10 01 00 00 00 08 eb 03 6d 20 02 00 01 02     ..........m ....
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 175:	00 01 00                                            ...

00000178 <__ctors_end>:
 178:	11 24       	eor	r1, r1
				ReportSize     -= 1;
 17a:	1f be       	out	0x3f, r1	; 63
 17c:	cf ef       	ldi	r28, 0xFF	; 255
				ReportData     += 1;
 17e:	d0 e2       	ldi	r29, 0x20	; 32
 180:	de bf       	out	0x3e, r29	; 62
 182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	e4 e0       	ldi	r30, 0x04	; 4
 18c:	fe e0       	ldi	r31, 0x0E	; 14
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	0b bf       	out	0x3b, r16	; 59
 192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x14>
 194:	07 90       	elpm	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	ac 30       	cpi	r26, 0x0C	; 12
 19a:	b1 07       	cpc	r27, r17
 19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0x10>

0000019e <__do_clear_bss>:
 19e:	11 e0       	ldi	r17, 0x01	; 1
 1a0:	ac e0       	ldi	r26, 0x0C	; 12
 1a2:	b1 e0       	ldi	r27, 0x01	; 1
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
 1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
 1a8:	aa 31       	cpi	r26, 0x1A	; 26

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	b1 07       	cpc	r27, r17
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
 1ae:	97 d0       	rcall	.+302    	; 0x2de <main>
 1b0:	27 c6       	rjmp	.+3150   	; 0xe00 <_exit>

000001b2 <__bad_interrupt>:
 1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <LEDs_SetAllLEDs>:
				break;
 1b4:	9b b1       	in	r25, 0x0b	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	9f 70       	andi	r25, 0x0F	; 15
 1b8:	98 2b       	or	r25, r24
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	08 95       	ret

000001be <SetupHardware>:
 1be:	84 b7       	in	r24, 0x34	; 52
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	84 bf       	out	0x34, r24	; 52
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	80 93 60 00 	sts	0x0060, r24
 1ce:	10 92 60 00 	sts	0x0060, r1
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	90 e0       	ldi	r25, 0x00	; 0
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	80 93 61 00 	sts	0x0061, r24
 1e0:	90 93 61 00 	sts	0x0061, r25
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	84 b1       	in	r24, 0x04	; 4
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	8f 71       	andi	r24, 0x1F	; 31
 1ea:	84 b9       	out	0x04, r24	; 4
				break;
 1ec:	8d b1       	in	r24, 0x0d	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	8f 7c       	andi	r24, 0xCF	; 207
 1f0:	8d b9       	out	0x0d, r24	; 13
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	80 6e       	ori	r24, 0xE0	; 224
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	8e b1       	in	r24, 0x0e	; 14
 1fa:	80 63       	ori	r24, 0x30	; 48
 1fc:	8e b9       	out	0x0e, r24	; 14
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	80 6f       	ori	r24, 0xF0	; 240
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	8a b9       	out	0x0a, r24	; 10
 204:	8b b1       	in	r24, 0x0b	; 11
				break;
 206:	8f 70       	andi	r24, 0x0F	; 15
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	6a 98       	cbi	0x0d, 2	; 13
 20c:	72 9a       	sbi	0x0e, 2	; 14
 20e:	24 c3       	rjmp	.+1608   	; 0x858 <USB_Init>

00000210 <CheckJoystickMovement>:
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <CheckJoystickMovement+0x8>
 218:	00 d0       	rcall	.+0      	; 0x21a <CheckJoystickMovement+0xa>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	23 b1       	in	r18, 0x03	; 3
 220:	1c b1       	in	r17, 0x0c	; 12
 222:	10 95       	com	r17
 224:	10 73       	andi	r17, 0x30	; 48
 226:	16 95       	lsr	r17
 228:	20 95       	com	r18
 22a:	20 7e       	andi	r18, 0xE0	; 224
 22c:	12 2b       	or	r17, r18
 22e:	40 91 0c 01 	lds	r20, 0x010C
 232:	41 27       	eor	r20, r17
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	5c b1       	in	r21, 0x0c	; 12
 236:	46 ff       	sbrs	r20, 6
 238:	04 c0       	rjmp	.+8      	; 0x242 <CheckJoystickMovement+0x32>
 23a:	16 ff       	sbrs	r17, 6
 23c:	04 c0       	rjmp	.+8      	; 0x246 <CheckJoystickMovement+0x36>
 23e:	20 e9       	ldi	r18, 0x90	; 144
 240:	03 c0       	rjmp	.+6      	; 0x248 <CheckJoystickMovement+0x38>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	01 c0       	rjmp	.+2      	; 0x248 <CheckJoystickMovement+0x38>
 246:	20 e8       	ldi	r18, 0x80	; 128
 248:	47 ff       	sbrs	r20, 7
 24a:	05 c0       	rjmp	.+10     	; 0x256 <CheckJoystickMovement+0x46>
 24c:	3d e3       	ldi	r19, 0x3D	; 61
 24e:	17 ff       	sbrs	r17, 7
 250:	04 c0       	rjmp	.+8      	; 0x25a <CheckJoystickMovement+0x4a>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	20 e9       	ldi	r18, 0x90	; 144
 254:	03 c0       	rjmp	.+6      	; 0x25c <CheckJoystickMovement+0x4c>
 256:	3c e3       	ldi	r19, 0x3C	; 60
 258:	01 c0       	rjmp	.+2      	; 0x25c <CheckJoystickMovement+0x4c>
 25a:	20 e8       	ldi	r18, 0x80	; 128
 25c:	43 ff       	sbrs	r20, 3
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	06 c0       	rjmp	.+12     	; 0x26c <CheckJoystickMovement+0x5c>
 260:	3e e3       	ldi	r19, 0x3E	; 62
 262:	13 ff       	sbrs	r17, 3
 264:	02 c0       	rjmp	.+4      	; 0x26a <CheckJoystickMovement+0x5a>
 266:	20 e9       	ldi	r18, 0x90	; 144
 268:	01 c0       	rjmp	.+2      	; 0x26c <CheckJoystickMovement+0x5c>
 26a:	20 e8       	ldi	r18, 0x80	; 128
 26c:	44 ff       	sbrs	r20, 4
 26e:	06 c0       	rjmp	.+12     	; 0x27c <CheckJoystickMovement+0x6c>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	3f e3       	ldi	r19, 0x3F	; 63
				break;
 272:	14 ff       	sbrs	r17, 4

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	02 c0       	rjmp	.+4      	; 0x27a <CheckJoystickMovement+0x6a>
 276:	20 e9       	ldi	r18, 0x90	; 144
 278:	01 c0       	rjmp	.+2      	; 0x27c <CheckJoystickMovement+0x6c>
 27a:	20 e8       	ldi	r18, 0x80	; 128
 27c:	45 ff       	sbrs	r20, 5
 27e:	04 c0       	rjmp	.+8      	; 0x288 <CheckJoystickMovement+0x78>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	15 ff       	sbrs	r17, 5
 282:	2a c0       	rjmp	.+84     	; 0x2d8 <CheckJoystickMovement+0xc8>
				break;
 284:	20 e9       	ldi	r18, 0x90	; 144

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	29 c0       	rjmp	.+82     	; 0x2da <CheckJoystickMovement+0xca>
 288:	22 23       	and	r18, r18
 28a:	e1 f0       	breq	.+56     	; 0x2c4 <CheckJoystickMovement+0xb4>
 28c:	42 2f       	mov	r20, r18
 28e:	42 95       	swap	r20
				break;
 290:	4f 70       	andi	r20, 0x0F	; 15

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	50 95       	com	r21
 294:	52 fb       	bst	r21, 2
 296:	88 27       	eor	r24, r24
 298:	80 f9       	bld	r24, 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	54 e0       	ldi	r21, 0x04	; 4
 29e:	88 0f       	add	r24, r24
				break;
 2a0:	99 1f       	adc	r25, r25

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	5a 95       	dec	r21
 2a4:	e1 f7       	brne	.-8      	; 0x29e <CheckJoystickMovement+0x8e>
 2a6:	48 2b       	or	r20, r24
 2a8:	49 83       	std	Y+1, r20	; 0x01
 2aa:	2a 83       	std	Y+2, r18	; 0x02
				break;
 2ac:	3b 83       	std	Y+3, r19	; 0x03

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	8c 83       	std	Y+4, r24	; 0x04
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2bc:	37 d5       	rcall	.+2670   	; 0xd2c <MIDI_Device_SendEventPacket>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	53 d5       	rcall	.+2726   	; 0xd6a <MIDI_Device_Flush>
 2c4:	10 93 0c 01 	sts	0x010C, r17
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
				break;
 2cc:	0f 90       	pop	r0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
				break;
 2d4:	1f 91       	pop	r17

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	08 95       	ret
 2d8:	20 e8       	ldi	r18, 0x80	; 128
 2da:	3b e3       	ldi	r19, 0x3B	; 59

				if (ParserData->UsingReportIDs)
 2dc:	d7 cf       	rjmp	.-82     	; 0x28c <CheckJoystickMovement+0x7c>

000002de <main>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <main+0x6>
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <main+0x8>
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	69 df       	rcall	.-302    	; 0x1be <SetupHardware>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	62 df       	rcall	.-316    	; 0x1b4 <LEDs_SetAllLEDs>
 2f0:	78 94       	sei
 2f2:	8e df       	rcall	.-228    	; 0x210 <CheckJoystickMovement>
 2f4:	be 01       	movw	r22, r28
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	5c d5       	rcall	.+2744   	; 0xdb8 <MIDI_Device_ReceiveEventPacket>
 300:	88 23       	and	r24, r24
 302:	81 f0       	breq	.+32     	; 0x324 <main+0x46>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	89 30       	cpi	r24, 0x09	; 9
 308:	51 f4       	brne	.+20     	; 0x31e <main+0x40>
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	88 23       	and	r24, r24
 30e:	39 f0       	breq	.+14     	; 0x31e <main+0x40>
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	10 f0       	brcs	.+4      	; 0x31a <main+0x3c>
 316:	80 e1       	ldi	r24, 0x10	; 16
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	03 c0       	rjmp	.+6      	; 0x320 <main+0x42>
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	01 c0       	rjmp	.+2      	; 0x320 <main+0x42>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	49 df       	rcall	.-366    	; 0x1b4 <LEDs_SetAllLEDs>
 322:	e8 cf       	rjmp	.-48     	; 0x2f4 <main+0x16>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	39 d5       	rcall	.+2674   	; 0xd9c <MIDI_Device_USBTask>
 32a:	cd d4       	rcall	.+2458   	; 0xcc6 <USB_USBTask>
 32c:	e2 cf       	rjmp	.-60     	; 0x2f2 <main+0x14>

0000032e <EVENT_USB_Device_Connect>:
 32e:	80 ea       	ldi	r24, 0xA0	; 160
 330:	41 cf       	rjmp	.-382    	; 0x1b4 <LEDs_SetAllLEDs>

00000332 <EVENT_USB_Device_Disconnect>:
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	3f cf       	rjmp	.-386    	; 0x1b4 <LEDs_SetAllLEDs>

00000336 <EVENT_USB_Device_ConfigurationChanged>:
 336:	80 e0       	ldi	r24, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	e1 d4       	rcall	.+2498   	; 0xcfe <MIDI_Device_ConfigureEndpoints>
 33c:	88 23       	and	r24, r24
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	11 f0       	breq	.+4      	; 0x344 <EVENT_USB_Device_ConfigurationChanged+0xe>
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	01 c0       	rjmp	.+2      	; 0x346 <EVENT_USB_Device_ConfigurationChanged+0x10>
 344:	80 e9       	ldi	r24, 0x90	; 144
 346:	36 cf       	rjmp	.-404    	; 0x1b4 <LEDs_SetAllLEDs>

00000348 <EVENT_USB_Device_ControlRequest>:
 348:	08 95       	ret

0000034a <CALLBACK_USB_GetDescriptor>:
 34a:	29 2f       	mov	r18, r25
 34c:	33 27       	eor	r19, r19
 34e:	22 30       	cpi	r18, 0x02	; 2
 350:	31 05       	cpc	r19, r1
 352:	59 f0       	breq	.+22     	; 0x36a <CALLBACK_USB_GetDescriptor+0x20>
 354:	23 30       	cpi	r18, 0x03	; 3
 356:	31 05       	cpc	r19, r1
 358:	69 f0       	breq	.+26     	; 0x374 <CALLBACK_USB_GetDescriptor+0x2a>
 35a:	21 30       	cpi	r18, 0x01	; 1
 35c:	31 05       	cpc	r19, r1
 35e:	f9 f4       	brne	.+62     	; 0x39e <CALLBACK_USB_GetDescriptor+0x54>
 360:	82 e1       	ldi	r24, 0x12	; 18
 362:	90 e0       	ldi	r25, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	25 e6       	ldi	r18, 0x65	; 101
 366:	31 e0       	ldi	r19, 0x01	; 1
 368:	1e c0       	rjmp	.+60     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x5c>
 36a:	85 e8       	ldi	r24, 0x85	; 133
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	20 ee       	ldi	r18, 0xE0	; 224
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	19 c0       	rjmp	.+50     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x5c>
 374:	99 27       	eor	r25, r25
 376:	81 30       	cpi	r24, 0x01	; 1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	91 05       	cpc	r25, r1
 37a:	41 f0       	breq	.+16     	; 0x38c <CALLBACK_USB_GetDescriptor+0x42>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 05       	cpc	r25, r1
 380:	41 f0       	breq	.+16     	; 0x392 <CALLBACK_USB_GetDescriptor+0x48>
 382:	89 2b       	or	r24, r25
 384:	61 f4       	brne	.+24     	; 0x39e <CALLBACK_USB_GetDescriptor+0x54>
 386:	ec ed       	ldi	r30, 0xDC	; 220
				break;
 388:	f0 e0       	ldi	r31, 0x00	; 0

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	05 c0       	rjmp	.+10     	; 0x396 <CALLBACK_USB_GetDescriptor+0x4c>
 38c:	e2 ec       	ldi	r30, 0xC2	; 194
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <CALLBACK_USB_GetDescriptor+0x4c>
 392:	e8 e9       	ldi	r30, 0x98	; 152
 394:	f0 e0       	ldi	r31, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	84 91       	lpm	r24, Z
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	9f 01       	movw	r18, r30
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x5c>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	fa 01       	movw	r30, r20
 3a8:	31 83       	std	Z+1, r19	; 0x01
 3aa:	20 83       	st	Z, r18
 3ac:	08 95       	ret

000003ae <Endpoint_Write_Stream_LE>:
 3ae:	cf 92       	push	r12
				break;
 3b0:	df 92       	push	r13
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	7c 01       	movw	r14, r24
 3c0:	8b 01       	movw	r16, r22
 3c2:	ea 01       	movw	r28, r20
 3c4:	d4 d1       	rcall	.+936    	; 0x76e <Endpoint_WaitUntilReady>
 3c6:	81 11       	cpse	r24, r1
 3c8:	31 c0       	rjmp	.+98     	; 0x42c <Endpoint_Write_Stream_LE+0x7e>
 3ca:	20 97       	sbiw	r28, 0x00	; 0
 3cc:	31 f0       	breq	.+12     	; 0x3da <Endpoint_Write_Stream_LE+0x2c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	88 81       	ld	r24, Y
 3d0:	99 81       	ldd	r25, Y+1	; 0x01
 3d2:	08 1b       	sub	r16, r24

					while (CurrCollectionPath->Parent != NULL)
 3d4:	19 0b       	sbc	r17, r25
 3d6:	e8 0e       	add	r14, r24
 3d8:	f9 1e       	adc	r15, r25
 3da:	c1 2c       	mov	r12, r1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	d1 2c       	mov	r13, r1
 3de:	01 15       	cp	r16, r1
 3e0:	11 05       	cpc	r17, r1
 3e2:	19 f1       	breq	.+70     	; 0x42a <Endpoint_Write_Stream_LE+0x7c>
 3e4:	80 91 e8 00 	lds	r24, 0x00E8
 3e8:	85 fd       	sbrc	r24, 5
 3ea:	14 c0       	rjmp	.+40     	; 0x414 <Endpoint_Write_Stream_LE+0x66>
 3ec:	80 91 e8 00 	lds	r24, 0x00E8
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	8e 77       	andi	r24, 0x7E	; 126
 3f2:	80 93 e8 00 	sts	0x00E8, r24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f6:	67 d4       	rcall	.+2254   	; 0xcc6 <USB_USBTask>
 3f8:	20 97       	sbiw	r28, 0x00	; 0
 3fa:	41 f0       	breq	.+16     	; 0x40c <Endpoint_Write_Stream_LE+0x5e>
 3fc:	88 81       	ld	r24, Y
 3fe:	99 81       	ldd	r25, Y+1	; 0x01
 400:	8c 0d       	add	r24, r12
 402:	9d 1d       	adc	r25, r13
 404:	99 83       	std	Y+1, r25	; 0x01
 406:	88 83       	st	Y, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	10 c0       	rjmp	.+32     	; 0x42c <Endpoint_Write_Stream_LE+0x7e>
 40c:	b0 d1       	rcall	.+864    	; 0x76e <Endpoint_WaitUntilReady>
 40e:	88 23       	and	r24, r24
 410:	31 f3       	breq	.-52     	; 0x3de <Endpoint_Write_Stream_LE+0x30>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	0c c0       	rjmp	.+24     	; 0x42c <Endpoint_Write_Stream_LE+0x7e>
 414:	f7 01       	movw	r30, r14
 416:	81 91       	ld	r24, Z+
 418:	7f 01       	movw	r14, r30
 41a:	80 93 f1 00 	sts	0x00F1, r24
 41e:	01 50       	subi	r16, 0x01	; 1

				if (UsageListSize)
 420:	11 09       	sbc	r17, r1
 422:	ff ef       	ldi	r31, 0xFF	; 255
 424:	cf 1a       	sub	r12, r31
 426:	df 0a       	sbc	r13, r31
 428:	da cf       	rjmp	.-76     	; 0x3de <Endpoint_Write_Stream_LE+0x30>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	08 95       	ret

0000043e <Endpoint_Read_Stream_LE>:
 43e:	cf 92       	push	r12

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
					  UsageList[i - 1] = UsageList[i];
 44c:	df 93       	push	r29
 44e:	7c 01       	movw	r14, r24
 450:	8b 01       	movw	r16, r22
 452:	ea 01       	movw	r28, r20

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	8c d1       	rcall	.+792    	; 0x76e <Endpoint_WaitUntilReady>
 456:	81 11       	cpse	r24, r1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	31 c0       	rjmp	.+98     	; 0x4bc <Endpoint_Read_Stream_LE+0x7e>
 45a:	20 97       	sbiw	r28, 0x00	; 0
 45c:	31 f0       	breq	.+12     	; 0x46a <Endpoint_Read_Stream_LE+0x2c>
 45e:	88 81       	ld	r24, Y
 460:	99 81       	ldd	r25, Y+1	; 0x01
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	08 1b       	sub	r16, r24
 464:	19 0b       	sbc	r17, r25
 466:	e8 0e       	add	r14, r24
 468:	f9 1e       	adc	r15, r25
 46a:	c1 2c       	mov	r12, r1
 46c:	d1 2c       	mov	r13, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	01 15       	cp	r16, r1
 470:	11 05       	cpc	r17, r1
 472:	19 f1       	breq	.+70     	; 0x4ba <Endpoint_Read_Stream_LE+0x7c>
 474:	80 91 e8 00 	lds	r24, 0x00E8
 478:	85 fd       	sbrc	r24, 5
 47a:	14 c0       	rjmp	.+40     	; 0x4a4 <Endpoint_Read_Stream_LE+0x66>
 47c:	80 91 e8 00 	lds	r24, 0x00E8
 480:	8b 77       	andi	r24, 0x7B	; 123
 482:	80 93 e8 00 	sts	0x00E8, r24
 486:	1f d4       	rcall	.+2110   	; 0xcc6 <USB_USBTask>
 488:	20 97       	sbiw	r28, 0x00	; 0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	41 f0       	breq	.+16     	; 0x49c <Endpoint_Read_Stream_LE+0x5e>
 48c:	88 81       	ld	r24, Y
 48e:	99 81       	ldd	r25, Y+1	; 0x01
 490:	8c 0d       	add	r24, r12
 492:	9d 1d       	adc	r25, r13
 494:	99 83       	std	Y+1, r25	; 0x01
 496:	88 83       	st	Y, r24
 498:	85 e0       	ldi	r24, 0x05	; 5
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	10 c0       	rjmp	.+32     	; 0x4bc <Endpoint_Read_Stream_LE+0x7e>
 49c:	68 d1       	rcall	.+720    	; 0x76e <Endpoint_WaitUntilReady>
 49e:	88 23       	and	r24, r24
 4a0:	31 f3       	breq	.-52     	; 0x46e <Endpoint_Read_Stream_LE+0x30>
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <Endpoint_Read_Stream_LE+0x7e>
 4a4:	80 91 f1 00 	lds	r24, 0x00F1
 4a8:	f7 01       	movw	r30, r14
 4aa:	81 93       	st	Z+, r24
				break;
 4ac:	7f 01       	movw	r14, r30
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	01 50       	subi	r16, 0x01	; 1
 4b0:	11 09       	sbc	r17, r1
 4b2:	ff ef       	ldi	r31, 0xFF	; 255
 4b4:	cf 1a       	sub	r12, r31
 4b6:	df 0a       	sbc	r13, r31
 4b8:	da cf       	rjmp	.-76     	; 0x46e <Endpoint_Read_Stream_LE+0x30>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	df 90       	pop	r13
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	cf 90       	pop	r12
 4cc:	08 95       	ret

000004ce <Endpoint_Write_Control_Stream_LE>:
 4ce:	20 91 18 01 	lds	r18, 0x0118
 4d2:	30 91 19 01 	lds	r19, 0x0119
 4d6:	26 17       	cp	r18, r22
 4d8:	37 07       	cpc	r19, r23
 4da:	48 f0       	brcs	.+18     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x20>
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	39 f4       	brne	.+14     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x22>
 4e2:	20 91 e8 00 	lds	r18, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e6:	2e 77       	andi	r18, 0x7E	; 126
 4e8:	20 93 e8 00 	sts	0x00E8, r18
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x22>
 4ee:	b9 01       	movw	r22, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	99 f1       	breq	.+102    	; 0x560 <Endpoint_Write_Control_Stream_LE+0x92>
 4fa:	80 91 11 01 	lds	r24, 0x0111
 4fe:	88 23       	and	r24, r24
 500:	e9 f1       	breq	.+122    	; 0x57c <Endpoint_Write_Control_Stream_LE+0xae>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	85 30       	cpi	r24, 0x05	; 5
 504:	e9 f1       	breq	.+122    	; 0x580 <Endpoint_Write_Control_Stream_LE+0xb2>
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	80 91 e8 00 	lds	r24, 0x00E8
 50a:	83 fd       	sbrc	r24, 3
 50c:	3b c0       	rjmp	.+118    	; 0x584 <Endpoint_Write_Control_Stream_LE+0xb6>
 50e:	80 91 e8 00 	lds	r24, 0x00E8
 512:	82 ff       	sbrs	r24, 2
 514:	06 c0       	rjmp	.+12     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x54>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	80 91 e8 00 	lds	r24, 0x00E8
 51a:	82 ff       	sbrs	r24, 2
 51c:	24 c0       	rjmp	.+72     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x98>

					if (UsageListSize)
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
 522:	80 91 e8 00 	lds	r24, 0x00E8
 526:	80 ff       	sbrs	r24, 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	e5 cf       	rjmp	.-54     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x26>
 52a:	80 91 f2 00 	lds	r24, 0x00F2
 52e:	90 91 f3 00 	lds	r25, 0x00F3
 532:	61 15       	cp	r22, r1
 534:	71 05       	cpc	r23, r1
 536:	51 f0       	breq	.+20     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x7e>
 538:	88 30       	cpi	r24, 0x08	; 8
 53a:	91 05       	cpc	r25, r1
 53c:	38 f4       	brcc	.+14     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x7e>

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	21 91       	ld	r18, Z+
 540:	20 93 f1 00 	sts	0x00F1, r18
 544:	61 50       	subi	r22, 0x01	; 1
 546:	71 09       	sbc	r23, r1
 548:	01 96       	adiw	r24, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
 54a:	f3 cf       	rjmp	.-26     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x64>
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	08 97       	sbiw	r24, 0x08	; 8
 550:	09 f0       	breq	.+2      	; 0x554 <Endpoint_Write_Control_Stream_LE+0x86>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	80 91 e8 00 	lds	r24, 0x00E8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 558:	8e 77       	andi	r24, 0x7E	; 126
 55a:	80 93 e8 00 	sts	0x00E8, r24
 55e:	ca cf       	rjmp	.-108    	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x26>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	21 11       	cpse	r18, r1
 562:	cb cf       	rjmp	.-106    	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x2c>
 564:	d8 cf       	rjmp	.-80     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x48>
 566:	80 91 11 01 	lds	r24, 0x0111
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	88 23       	and	r24, r24
 56c:	39 f0       	breq	.+14     	; 0x57c <Endpoint_Write_Control_Stream_LE+0xae>
 56e:	85 30       	cpi	r24, 0x05	; 5
 570:	39 f0       	breq	.+14     	; 0x580 <Endpoint_Write_Control_Stream_LE+0xb2>
 572:	80 91 e8 00 	lds	r24, 0x00E8
 576:	83 ff       	sbrs	r24, 3
 578:	ce cf       	rjmp	.-100    	; 0x516 <Endpoint_Write_Control_Stream_LE+0x48>
 57a:	04 c0       	rjmp	.+8      	; 0x584 <Endpoint_Write_Control_Stream_LE+0xb6>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	08 95       	ret
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	08 95       	ret
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	08 95       	ret

00000588 <Endpoint_Write_Control_PStream_LE>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	20 91 18 01 	lds	r18, 0x0118
 58c:	30 91 19 01 	lds	r19, 0x0119
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 590:	26 17       	cp	r18, r22

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	37 07       	cpc	r19, r23
 594:	48 f0       	brcs	.+18     	; 0x5a8 <Endpoint_Write_Control_PStream_LE+0x20>
 596:	61 15       	cp	r22, r1
 598:	71 05       	cpc	r23, r1
 59a:	39 f4       	brne	.+14     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x22>
 59c:	20 91 e8 00 	lds	r18, 0x00E8
 5a0:	2e 77       	andi	r18, 0x7E	; 126
 5a2:	20 93 e8 00 	sts	0x00E8, r18
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x22>
 5a8:	b9 01       	movw	r22, r18
 5aa:	fc 01       	movw	r30, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	61 15       	cp	r22, r1
 5b0:	71 05       	cpc	r23, r1
 5b2:	b1 f1       	breq	.+108    	; 0x620 <Endpoint_Write_Control_PStream_LE+0x98>
 5b4:	80 91 11 01 	lds	r24, 0x0111
 5b8:	88 23       	and	r24, r24
 5ba:	09 f4       	brne	.+2      	; 0x5be <Endpoint_Write_Control_PStream_LE+0x36>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	3f c0       	rjmp	.+126    	; 0x63c <Endpoint_Write_Control_PStream_LE+0xb4>
 5be:	85 30       	cpi	r24, 0x05	; 5
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x3c>
 5c2:	3e c0       	rjmp	.+124    	; 0x640 <Endpoint_Write_Control_PStream_LE+0xb8>
 5c4:	80 91 e8 00 	lds	r24, 0x00E8
 5c8:	83 fd       	sbrc	r24, 3
 5ca:	3c c0       	rjmp	.+120    	; 0x644 <Endpoint_Write_Control_PStream_LE+0xbc>
 5cc:	80 91 e8 00 	lds	r24, 0x00E8
 5d0:	82 ff       	sbrs	r24, 2
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x58>
 5d4:	80 91 e8 00 	lds	r24, 0x00E8
 5d8:	82 ff       	sbrs	r24, 2
 5da:	25 c0       	rjmp	.+74     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x9e>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret
 5e0:	80 91 e8 00 	lds	r24, 0x00E8
 5e4:	80 ff       	sbrs	r24, 0
 5e6:	e3 cf       	rjmp	.-58     	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x26>
 5e8:	80 91 f2 00 	lds	r24, 0x00F2
 5ec:	90 91 f3 00 	lds	r25, 0x00F3
 5f0:	61 15       	cp	r22, r1
 5f2:	71 05       	cpc	r23, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	59 f0       	breq	.+22     	; 0x60c <Endpoint_Write_Control_PStream_LE+0x84>
 5f6:	88 30       	cpi	r24, 0x08	; 8
 5f8:	91 05       	cpc	r25, r1
 5fa:	40 f4       	brcc	.+16     	; 0x60c <Endpoint_Write_Control_PStream_LE+0x84>
 5fc:	24 91       	lpm	r18, Z
					  return HID_PARSE_InsufficientReportItems;
 5fe:	20 93 f1 00 	sts	0x00F1, r18

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	31 96       	adiw	r30, 0x01	; 1
 604:	61 50       	subi	r22, 0x01	; 1
 606:	71 09       	sbc	r23, r1
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x68>
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	08 97       	sbiw	r24, 0x08	; 8
 610:	09 f0       	breq	.+2      	; 0x614 <Endpoint_Write_Control_PStream_LE+0x8c>
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	80 91 e8 00 	lds	r24, 0x00E8
 618:	8e 77       	andi	r24, 0x7E	; 126
 61a:	80 93 e8 00 	sts	0x00E8, r24
 61e:	c7 cf       	rjmp	.-114    	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x26>
 620:	21 11       	cpse	r18, r1
 622:	c8 cf       	rjmp	.-112    	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x2c>
 624:	d7 cf       	rjmp	.-82     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x4c>
 626:	80 91 11 01 	lds	r24, 0x0111
 62a:	88 23       	and	r24, r24
 62c:	39 f0       	breq	.+14     	; 0x63c <Endpoint_Write_Control_PStream_LE+0xb4>
 62e:	85 30       	cpi	r24, 0x05	; 5
 630:	39 f0       	breq	.+14     	; 0x640 <Endpoint_Write_Control_PStream_LE+0xb8>
 632:	80 91 e8 00 	lds	r24, 0x00E8
 636:	83 ff       	sbrs	r24, 3
 638:	cd cf       	rjmp	.-102    	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x4c>
 63a:	04 c0       	rjmp	.+8      	; 0x644 <Endpoint_Write_Control_PStream_LE+0xbc>
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	08 95       	ret
 640:	83 e0       	ldi	r24, 0x03	; 3
 642:	08 95       	ret
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	08 95       	ret

00000648 <Endpoint_ConfigureEndpoint_Prv>:
 648:	98 2f       	mov	r25, r24
 64a:	97 30       	cpi	r25, 0x07	; 7
 64c:	58 f5       	brcc	.+86     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 64e:	90 93 e9 00 	sts	0x00E9, r25
 652:	98 17       	cp	r25, r24
 654:	39 f0       	breq	.+14     	; 0x664 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 656:	70 91 ec 00 	lds	r23, 0x00EC
 65a:	20 91 ed 00 	lds	r18, 0x00ED
 65e:	50 91 f0 00 	lds	r21, 0x00F0
 662:	03 c0       	rjmp	.+6      	; 0x66a <Endpoint_ConfigureEndpoint_Prv+0x22>
 664:	24 2f       	mov	r18, r20
 666:	76 2f       	mov	r23, r22
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	21 ff       	sbrs	r18, 1
 66c:	19 c0       	rjmp	.+50     	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv+0x58>
 66e:	30 91 eb 00 	lds	r19, 0x00EB
 672:	3e 7f       	andi	r19, 0xFE	; 254
 674:	30 93 eb 00 	sts	0x00EB, r19
 678:	30 91 ed 00 	lds	r19, 0x00ED
 67c:	3d 7f       	andi	r19, 0xFD	; 253
 67e:	30 93 ed 00 	sts	0x00ED, r19
 682:	30 91 eb 00 	lds	r19, 0x00EB
 686:	31 60       	ori	r19, 0x01	; 1
					  ParserData->TotalReportItems++;
 688:	30 93 eb 00 	sts	0x00EB, r19
 68c:	70 93 ec 00 	sts	0x00EC, r23
 690:	20 93 ed 00 	sts	0x00ED, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 694:	50 93 f0 00 	sts	0x00F0, r21
 698:	20 91 ee 00 	lds	r18, 0x00EE
 69c:	27 ff       	sbrs	r18, 7
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <Endpoint_ConfigureEndpoint_Prv+0x66>
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	d3 cf       	rjmp	.-90     	; 0x64a <Endpoint_ConfigureEndpoint_Prv+0x2>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	8f 70       	andi	r24, 0x0F	; 15
 6a6:	80 93 e9 00 	sts	0x00E9, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret

000006b2 <Endpoint_ConfigureEndpointTable>:
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	06 2f       	mov	r16, r22
 6bc:	ec 01       	movw	r28, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	10 e0       	ldi	r17, 0x00	; 0
 6c0:	10 17       	cp	r17, r16
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	71 f1       	breq	.+92     	; 0x720 <Endpoint_ConfigureEndpointTable+0x6e>
 6c4:	98 81       	ld	r25, Y
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	99 23       	and	r25, r25
 6c8:	41 f1       	breq	.+80     	; 0x71a <Endpoint_ConfigureEndpointTable+0x68>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	2c 81       	ldd	r18, Y+4	; 0x04
 6cc:	e9 81       	ldd	r30, Y+1	; 0x01

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	fa 81       	ldd	r31, Y+2	; 0x02
 6d0:	7b 81       	ldd	r23, Y+3	; 0x03
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	89 2f       	mov	r24, r25
 6d4:	8f 70       	andi	r24, 0x0F	; 15
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	87 30       	cpi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	10 f0       	brcs	.+4      	; 0x6de <Endpoint_ConfigureEndpointTable+0x2c>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	22 c0       	rjmp	.+68     	; 0x722 <Endpoint_ConfigureEndpointTable+0x70>
 6de:	22 30       	cpi	r18, 0x02	; 2
 6e0:	10 f0       	brcs	.+4      	; 0x6e6 <Endpoint_ConfigureEndpointTable+0x34>
 6e2:	56 e0       	ldi	r21, 0x06	; 6
 6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <Endpoint_ConfigureEndpointTable+0x36>
 6e6:	52 e0       	ldi	r21, 0x02	; 2
 6e8:	28 e0       	ldi	r18, 0x08	; 8
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	2e 17       	cp	r18, r30
 6f0:	3f 07       	cpc	r19, r31
 6f2:	20 f4       	brcc	.+8      	; 0x6fc <Endpoint_ConfigureEndpointTable+0x4a>
 6f4:	4f 5f       	subi	r20, 0xFF	; 255
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <Endpoint_ConfigureEndpointTable+0x3c>
 6fc:	42 95       	swap	r20
 6fe:	40 7f       	andi	r20, 0xF0	; 240
 700:	45 2b       	or	r20, r21
 702:	69 2f       	mov	r22, r25
 704:	66 1f       	adc	r22, r22
 706:	66 27       	eor	r22, r22
 708:	66 1f       	adc	r22, r22
 70a:	90 e4       	ldi	r25, 0x40	; 64

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 70c:	79 9f       	mul	r23, r25
 70e:	90 01       	movw	r18, r0
 710:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 712:	62 2b       	or	r22, r18
 714:	99 df       	rcall	.-206    	; 0x648 <Endpoint_ConfigureEndpoint_Prv>
 716:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 718:	01 f3       	breq	.-64     	; 0x6da <Endpoint_ConfigureEndpointTable+0x28>
 71a:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 71c:	25 96       	adiw	r28, 0x05	; 5
 71e:	d0 cf       	rjmp	.-96     	; 0x6c0 <Endpoint_ConfigureEndpointTable+0xe>
 720:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
 722:	df 91       	pop	r29
}
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <Endpoint_ClearStatusStage>:
 72c:	80 91 12 01 	lds	r24, 0x0112
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 730:	87 fd       	sbrc	r24, 7
 732:	05 c0       	rjmp	.+10     	; 0x73e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 734:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 738:	80 ff       	sbrs	r24, 0
 73a:	0e c0       	rjmp	.+28     	; 0x758 <Endpoint_ClearStatusStage+0x2c>
 73c:	12 c0       	rjmp	.+36     	; 0x762 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 73e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 742:	82 fd       	sbrc	r24, 2
 744:	05 c0       	rjmp	.+10     	; 0x750 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 746:	80 91 11 01 	lds	r24, 0x0111
 74a:	81 11       	cpse	r24, r1
 74c:	f8 cf       	rjmp	.-16     	; 0x73e <Endpoint_ClearStatusStage+0x12>
 74e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 750:	80 91 e8 00 	lds	r24, 0x00E8
 754:	8b 77       	andi	r24, 0x7B	; 123
 756:	08 c0       	rjmp	.+16     	; 0x768 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 758:	80 91 11 01 	lds	r24, 0x0111
 75c:	81 11       	cpse	r24, r1
 75e:	ea cf       	rjmp	.-44     	; 0x734 <Endpoint_ClearStatusStage+0x8>
 760:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 762:	80 91 e8 00 	lds	r24, 0x00E8
 766:	8e 77       	andi	r24, 0x7E	; 126
 768:	80 93 e8 00 	sts	0x00E8, r24
 76c:	08 95       	ret

0000076e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 76e:	80 91 e4 00 	lds	r24, 0x00E4
 772:	90 91 e5 00 	lds	r25, 0x00E5
 776:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 778:	20 91 ec 00 	lds	r18, 0x00EC
 77c:	20 ff       	sbrs	r18, 0
 77e:	21 c0       	rjmp	.+66     	; 0x7c2 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 780:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 784:	20 fd       	sbrc	r18, 0
 786:	21 c0       	rjmp	.+66     	; 0x7ca <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 788:	20 91 11 01 	lds	r18, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 78c:	22 23       	and	r18, r18
 78e:	89 f0       	breq	.+34     	; 0x7b2 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 790:	25 30       	cpi	r18, 0x05	; 5
 792:	89 f0       	breq	.+34     	; 0x7b6 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 794:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 798:	25 fd       	sbrc	r18, 5
 79a:	0f c0       	rjmp	.+30     	; 0x7ba <Endpoint_WaitUntilReady+0x4c>
 79c:	20 91 e4 00 	lds	r18, 0x00E4
 7a0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	39 f3       	breq	.-50     	; 0x778 <Endpoint_WaitUntilReady+0xa>
 7aa:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7ac:	41 f0       	breq	.+16     	; 0x7be <Endpoint_WaitUntilReady+0x50>
 7ae:	c9 01       	movw	r24, r18
 7b0:	e3 cf       	rjmp	.-58     	; 0x778 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7c2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 7c6:	22 ff       	sbrs	r18, 2
 7c8:	df cf       	rjmp	.-66     	; 0x788 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret

000007ce <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7d6:	4e d0       	rcall	.+156    	; 0x874 <USB_INT_DisableAllInterrupts>
 7d8:	55 d0       	rcall	.+170    	; 0x884 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7da:	c8 ed       	ldi	r28, 0xD8	; 216
 7dc:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7de:	88 81       	ld	r24, Y
 7e0:	8f 77       	andi	r24, 0x7F	; 127
 7e2:	88 83       	st	Y, r24
 7e4:	88 81       	ld	r24, Y
 7e6:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7e8:	88 83       	st	Y, r24
 7ea:	88 81       	ld	r24, Y
 7ec:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7ee:	88 83       	st	Y, r24
 7f0:	e7 ed       	ldi	r30, 0xD7	; 215
 7f2:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7f4:	80 81       	ld	r24, Z
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	80 83       	st	Z, r24
 7fa:	19 bc       	out	0x29, r1	; 41
 7fc:	10 92 11 01 	sts	0x0111, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 800:	10 92 0d 01 	sts	0x010D, r1
	USB_Device_ConfigurationNumber  = 0;
 804:	10 92 0f 01 	sts	0x010F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 808:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 80c:	00 ee       	ldi	r16, 0xE0	; 224
 80e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 810:	f8 01       	movw	r30, r16
 812:	80 81       	ld	r24, Z
 814:	8b 7f       	andi	r24, 0xFB	; 251
 816:	80 83       	st	Z, r24
 818:	88 81       	ld	r24, Y
 81a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 81c:	88 83       	st	Y, r24
 81e:	42 e0       	ldi	r20, 0x02	; 2
 820:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	11 df       	rcall	.-478    	; 0x648 <Endpoint_ConfigureEndpoint_Prv>
 826:	e1 ee       	ldi	r30, 0xE1	; 225
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 82c:	8e 7f       	andi	r24, 0xFE	; 254
 82e:	80 83       	st	Z, r24
 830:	e2 ee       	ldi	r30, 0xE2	; 226
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 836:	81 60       	ori	r24, 0x01	; 1
 838:	80 83       	st	Z, r24
 83a:	80 81       	ld	r24, Z
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 846:	80 83       	st	Z, r24
 848:	88 81       	ld	r24, Y
 84a:	80 61       	ori	r24, 0x10	; 16
 84c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <USB_Init>:
 858:	e8 ed       	ldi	r30, 0xD8	; 216
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 85e:	8f 7e       	andi	r24, 0xEF	; 239
 860:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 862:	e7 ed       	ldi	r30, 0xD7	; 215
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	80 93 10 01 	sts	0x0110, r24

	USB_ResetInterface();
 872:	ad cf       	rjmp	.-166    	; 0x7ce <USB_ResetInterface>

00000874 <USB_INT_DisableAllInterrupts>:
 874:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	8c 7f       	andi	r24, 0xFC	; 252
 87c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 87e:	10 92 e2 00 	sts	0x00E2, r1
 882:	08 95       	ret

00000884 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 884:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 888:	10 92 e1 00 	sts	0x00E1, r1
 88c:	08 95       	ret

0000088e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
 898:	0b b6       	in	r0, 0x3b	; 59
 89a:	0f 92       	push	r0
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8b4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8b8:	82 ff       	sbrs	r24, 2
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8bc:	80 91 e2 00 	lds	r24, 0x00E2
 8c0:	82 ff       	sbrs	r24, 2
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 8c4:	80 91 e1 00 	lds	r24, 0x00E1
 8c8:	8b 7f       	andi	r24, 0xFB	; 251
 8ca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8ce:	fa d1       	rcall	.+1012   	; 0xcc4 <USB_Event_Stub>
 8d0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 8d4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8d6:	1d c0       	rjmp	.+58     	; 0x912 <__vector_10+0x84>
 8d8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8dc:	80 ff       	sbrs	r24, 0
 8de:	19 c0       	rjmp	.+50     	; 0x912 <__vector_10+0x84>
 8e0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8e4:	8e 7f       	andi	r24, 0xFE	; 254
 8e6:	80 93 da 00 	sts	0x00DA, r24
 8ea:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8ee:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8f0:	0c c0       	rjmp	.+24     	; 0x90a <__vector_10+0x7c>
 8f2:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8f4:	89 bd       	out	0x29, r24	; 41
 8f6:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8f8:	89 bd       	out	0x29, r24	; 41
 8fa:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8fc:	00 fe       	sbrs	r0, 0
 8fe:	fd cf       	rjmp	.-6      	; 0x8fa <__vector_10+0x6c>
 900:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 902:	80 93 11 01 	sts	0x0111, r24
 906:	13 dd       	rcall	.-1498   	; 0x32e <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 908:	04 c0       	rjmp	.+8      	; 0x912 <__vector_10+0x84>
 90a:	19 bc       	out	0x29, r1	; 41
 90c:	10 92 11 01 	sts	0x0111, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 910:	10 dd       	rcall	.-1504   	; 0x332 <EVENT_USB_Device_Disconnect>
 912:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 916:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 918:	18 c0       	rjmp	.+48     	; 0x94a <__vector_10+0xbc>
 91a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 91e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 920:	14 c0       	rjmp	.+40     	; 0x94a <__vector_10+0xbc>
 922:	80 91 e2 00 	lds	r24, 0x00E2
 926:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 928:	80 93 e2 00 	sts	0x00E2, r24
 92c:	80 91 e2 00 	lds	r24, 0x00E2
 930:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 932:	80 93 e2 00 	sts	0x00E2, r24
 936:	80 91 d8 00 	lds	r24, 0x00D8
 93a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 93c:	80 93 d8 00 	sts	0x00D8, r24
 940:	19 bc       	out	0x29, r1	; 41
 942:	85 e0       	ldi	r24, 0x05	; 5
 944:	80 93 11 01 	sts	0x0111, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 948:	bd d1       	rcall	.+890    	; 0xcc4 <USB_Event_Stub>
 94a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 94e:	84 ff       	sbrs	r24, 4
 950:	2f c0       	rjmp	.+94     	; 0x9b0 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 952:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 956:	84 ff       	sbrs	r24, 4
 958:	2b c0       	rjmp	.+86     	; 0x9b0 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 95a:	8c e0       	ldi	r24, 0x0C	; 12
 95c:	89 bd       	out	0x29, r24	; 41
 95e:	8e e0       	ldi	r24, 0x0E	; 14
 960:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 962:	09 b4       	in	r0, 0x29	; 41
 964:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 966:	fd cf       	rjmp	.-6      	; 0x962 <__vector_10+0xd4>
 968:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 96c:	8f 7d       	andi	r24, 0xDF	; 223
 96e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 972:	80 91 e1 00 	lds	r24, 0x00E1
 976:	8f 7e       	andi	r24, 0xEF	; 239
 978:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 97c:	80 91 e2 00 	lds	r24, 0x00E2
 980:	8f 7e       	andi	r24, 0xEF	; 239
 982:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 986:	80 91 e2 00 	lds	r24, 0x00E2
 98a:	81 60       	ori	r24, 0x01	; 1
 98c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 990:	80 91 0d 01 	lds	r24, 0x010D
 994:	88 23       	and	r24, r24
 996:	11 f0       	breq	.+4      	; 0x99c <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <__vector_10+0x11c>
 99c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 9a0:	87 ff       	sbrs	r24, 7
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9a4:	83 e0       	ldi	r24, 0x03	; 3
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	80 93 11 01 	sts	0x0111, r24
 9ae:	8a d1       	rcall	.+788    	; 0xcc4 <USB_Event_Stub>
 9b0:	80 91 e1 00 	lds	r24, 0x00E1
 9b4:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9b6:	22 c0       	rjmp	.+68     	; 0x9fc <__vector_10+0x16e>
 9b8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9bc:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9be:	1e c0       	rjmp	.+60     	; 0x9fc <__vector_10+0x16e>
 9c0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9c4:	87 7f       	andi	r24, 0xF7	; 247
 9c6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 9ca:	82 e0       	ldi	r24, 0x02	; 2
 9cc:	80 93 11 01 	sts	0x0111, r24
 9d0:	10 92 0d 01 	sts	0x010D, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 9d4:	80 91 e1 00 	lds	r24, 0x00E1
 9d8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9da:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9de:	80 91 e2 00 	lds	r24, 0x00E2
 9e2:	8e 7f       	andi	r24, 0xFE	; 254
 9e4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9e8:	80 91 e2 00 	lds	r24, 0x00E2
 9ec:	80 61       	ori	r24, 0x10	; 16
 9ee:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9f2:	42 e0       	ldi	r20, 0x02	; 2
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	80 e0       	ldi	r24, 0x00	; 0
 9f8:	27 de       	rcall	.-946    	; 0x648 <Endpoint_ConfigureEndpoint_Prv>
 9fa:	64 d1       	rcall	.+712    	; 0xcc4 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	bf 91       	pop	r27
 a02:	af 91       	pop	r26
 a04:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a06:	8f 91       	pop	r24
 a08:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a0a:	6f 91       	pop	r22
 a0c:	5f 91       	pop	r21
 a0e:	4f 91       	pop	r20
 a10:	3f 91       	pop	r19
 a12:	2f 91       	pop	r18
 a14:	0f 90       	pop	r0
 a16:	0b be       	out	0x3b, r0	; 59
 a18:	0f 90       	pop	r0
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <USB_Device_ProcessControlRequest>:
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	aa 97       	sbiw	r28, 0x2a	; 42
 a2e:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	e2 e1       	ldi	r30, 0x12	; 18
 a3a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a3c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a40:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a42:	21 e0       	ldi	r18, 0x01	; 1
 a44:	ea 31       	cpi	r30, 0x1A	; 26
 a46:	f2 07       	cpc	r31, r18
 a48:	c9 f7       	brne	.-14     	; 0xa3c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a4a:	7e dc       	rcall	.-1796   	; 0x348 <EVENT_USB_Device_ControlRequest>
 a4c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a50:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a52:	20 c1       	rjmp	.+576    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 a54:	90 91 12 01 	lds	r25, 0x0112
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a58:	80 91 13 01 	lds	r24, 0x0113

		switch (USB_ControlRequest.bRequest)
 a5c:	85 30       	cpi	r24, 0x05	; 5
 a5e:	09 f4       	brne	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x40>
 a60:	77 c0       	rjmp	.+238    	; 0xb50 <USB_Device_ProcessControlRequest+0x12e>
 a62:	30 f4       	brcc	.+12     	; 0xa70 <USB_Device_ProcessControlRequest+0x4e>
 a64:	81 30       	cpi	r24, 0x01	; 1
 a66:	81 f1       	breq	.+96     	; 0xac8 <USB_Device_ProcessControlRequest+0xa6>
 a68:	68 f0       	brcs	.+26     	; 0xa84 <USB_Device_ProcessControlRequest+0x62>
 a6a:	83 30       	cpi	r24, 0x03	; 3
 a6c:	69 f1       	breq	.+90     	; 0xac8 <USB_Device_ProcessControlRequest+0xa6>
 a6e:	12 c1       	rjmp	.+548    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 a70:	88 30       	cpi	r24, 0x08	; 8
 a72:	09 f4       	brne	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0x54>
 a74:	e1 c0       	rjmp	.+450    	; 0xc38 <USB_Device_ProcessControlRequest+0x216>
 a76:	89 30       	cpi	r24, 0x09	; 9
 a78:	09 f4       	brne	.+2      	; 0xa7c <USB_Device_ProcessControlRequest+0x5a>
 a7a:	f0 c0       	rjmp	.+480    	; 0xc5c <USB_Device_ProcessControlRequest+0x23a>
 a7c:	86 30       	cpi	r24, 0x06	; 6
 a7e:	09 f0       	breq	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0x60>
 a80:	09 c1       	rjmp	.+530    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 a82:	88 c0       	rjmp	.+272    	; 0xb94 <USB_Device_ProcessControlRequest+0x172>
 a84:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a86:	81 f0       	breq	.+32     	; 0xaa8 <USB_Device_ProcessControlRequest+0x86>
 a88:	92 38       	cpi	r25, 0x82	; 130
 a8a:	09 f0       	breq	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x6c>
 a8c:	03 c1       	rjmp	.+518    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 a8e:	80 91 16 01 	lds	r24, 0x0116
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a92:	8f 70       	andi	r24, 0x0F	; 15
 a94:	80 93 e9 00 	sts	0x00E9, r24
 a98:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a9c:	85 fb       	bst	r24, 5
 a9e:	88 27       	eor	r24, r24
 aa0:	80 f9       	bld	r24, 0
 aa2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <USB_Device_ProcessControlRequest+0x92>
 aa8:	80 91 0e 01 	lds	r24, 0x010E
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 aac:	90 91 0f 01 	lds	r25, 0x010F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ab0:	91 11       	cpse	r25, r1
 ab2:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ab4:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab8:	97 7f       	andi	r25, 0xF7	; 247
 aba:	90 93 e8 00 	sts	0x00E8, r25
 abe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ac2:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ac6:	c3 c0       	rjmp	.+390    	; 0xc4e <USB_Device_ProcessControlRequest+0x22c>
 ac8:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aca:	2d 7f       	andi	r18, 0xFD	; 253
 acc:	09 f0       	breq	.+2      	; 0xad0 <USB_Device_ProcessControlRequest+0xae>
 ace:	e2 c0       	rjmp	.+452    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 ad0:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ad2:	19 f0       	breq	.+6      	; 0xada <USB_Device_ProcessControlRequest+0xb8>
 ad4:	92 30       	cpi	r25, 0x02	; 2
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <USB_Device_ProcessControlRequest+0xce>
 ad8:	dd c0       	rjmp	.+442    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 ada:	90 91 14 01 	lds	r25, 0x0114
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ade:	91 30       	cpi	r25, 0x01	; 1
 ae0:	09 f0       	breq	.+2      	; 0xae4 <USB_Device_ProcessControlRequest+0xc2>
 ae2:	d8 c0       	rjmp	.+432    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 ae4:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ae6:	09 f0       	breq	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0xc8>
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	90 93 0f 01 	sts	0x010F, r25
 aee:	2a c0       	rjmp	.+84     	; 0xb44 <USB_Device_ProcessControlRequest+0x122>
 af0:	90 91 14 01 	lds	r25, 0x0114

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 af4:	91 11       	cpse	r25, r1
 af6:	26 c0       	rjmp	.+76     	; 0xb44 <USB_Device_ProcessControlRequest+0x122>
 af8:	20 91 16 01 	lds	r18, 0x0116
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 afc:	2f 70       	andi	r18, 0x0F	; 15
 afe:	09 f4       	brne	.+2      	; 0xb02 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b00:	c9 c0       	rjmp	.+402    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 b02:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b06:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b0a:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b0c:	1b c0       	rjmp	.+54     	; 0xb44 <USB_Device_ProcessControlRequest+0x122>
 b0e:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b10:	21 f4       	brne	.+8      	; 0xb1a <USB_Device_ProcessControlRequest+0xf8>
 b12:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b16:	80 62       	ori	r24, 0x20	; 32
 b18:	13 c0       	rjmp	.+38     	; 0xb40 <USB_Device_ProcessControlRequest+0x11e>
 b1a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b1e:	80 61       	ori	r24, 0x10	; 16
 b20:	80 93 eb 00 	sts	0x00EB, r24
 b24:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 2e       	mov	r0, r18
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x10c>
 b2c:	88 0f       	add	r24, r24
 b2e:	0a 94       	dec	r0
 b30:	ea f7       	brpl	.-6      	; 0xb2c <USB_Device_ProcessControlRequest+0x10a>
 b32:	80 93 ea 00 	sts	0x00EA, r24
 b36:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b3a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b3e:	88 60       	ori	r24, 0x08	; 8
 b40:	80 93 eb 00 	sts	0x00EB, r24
 b44:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4c:	87 7f       	andi	r24, 0xF7	; 247
 b4e:	82 c0       	rjmp	.+260    	; 0xc54 <USB_Device_ProcessControlRequest+0x232>
 b50:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b52:	a0 c0       	rjmp	.+320    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 b54:	10 91 14 01 	lds	r17, 0x0114
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b58:	1f 77       	andi	r17, 0x7F	; 127
 b5a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b5e:	80 78       	andi	r24, 0x80	; 128
 b60:	81 2b       	or	r24, r17
 b62:	80 93 e3 00 	sts	0x00E3, r24
 b66:	80 91 e8 00 	lds	r24, 0x00E8
 b6a:	87 7f       	andi	r24, 0xF7	; 247
 b6c:	80 93 e8 00 	sts	0x00E8, r24
 b70:	dd dd       	rcall	.-1094   	; 0x72c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b72:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b76:	80 ff       	sbrs	r24, 0
 b78:	fc cf       	rjmp	.-8      	; 0xb72 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b7a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b7e:	80 68       	ori	r24, 0x80	; 128
 b80:	80 93 e3 00 	sts	0x00E3, r24
 b84:	11 23       	and	r17, r17
 b86:	11 f0       	breq	.+4      	; 0xb8c <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b88:	83 e0       	ldi	r24, 0x03	; 3
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x16c>
 b8c:	82 e0       	ldi	r24, 0x02	; 2
 b8e:	80 93 11 01 	sts	0x0111, r24
 b92:	80 c0       	rjmp	.+256    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 b94:	90 58       	subi	r25, 0x80	; 128
 b96:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b98:	08 f0       	brcs	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x17a>
 b9a:	7c c0       	rjmp	.+248    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 b9c:	80 91 14 01 	lds	r24, 0x0114
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ba0:	90 91 15 01 	lds	r25, 0x0115
 ba4:	8c 3d       	cpi	r24, 0xDC	; 220
 ba6:	23 e0       	ldi	r18, 0x03	; 3
 ba8:	92 07       	cpc	r25, r18
 baa:	71 f5       	brne	.+92     	; 0xc08 <USB_Device_ProcessControlRequest+0x1e6>
 bac:	83 e0       	ldi	r24, 0x03	; 3
 bae:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bb0:	8a e2       	ldi	r24, 0x2A	; 42
 bb2:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bb4:	4f b7       	in	r20, 0x3f	; 63
 bb6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bb8:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bba:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bbc:	20 e0       	ldi	r18, 0x00	; 0
 bbe:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bc0:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bc2:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bc4:	f0 e0       	ldi	r31, 0x00	; 0
 bc6:	50 93 57 00 	sts	0x0057, r21
 bca:	e4 91       	lpm	r30, Z
 bcc:	20 ff       	sbrs	r18, 0
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 bd0:	e2 95       	swap	r30
 bd2:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 bd4:	3f 5f       	subi	r19, 0xFF	; 255
 bd6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bd8:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	ea 30       	cpi	r30, 0x0A	; 10
 bde:	10 f0       	brcs	.+4      	; 0xbe4 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 be0:	c7 96       	adiw	r24, 0x37	; 55
 be2:	01 c0       	rjmp	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0x1c4>
 be4:	c0 96       	adiw	r24, 0x30	; 48
 be6:	8d 93       	st	X+, r24
 be8:	9d 93       	st	X+, r25
 bea:	2f 5f       	subi	r18, 0xFF	; 255
 bec:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bee:	49 f7       	brne	.-46     	; 0xbc2 <USB_Device_ProcessControlRequest+0x1a0>
 bf0:	4f bf       	out	0x3f, r20	; 63
 bf2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf6:	87 7f       	andi	r24, 0xF7	; 247
 bf8:	80 93 e8 00 	sts	0x00E8, r24
 bfc:	6a e2       	ldi	r22, 0x2A	; 42
 bfe:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c00:	ce 01       	movw	r24, r28
 c02:	01 96       	adiw	r24, 0x01	; 1
 c04:	64 dc       	rcall	.-1848   	; 0x4ce <Endpoint_Write_Control_Stream_LE>
 c06:	12 c0       	rjmp	.+36     	; 0xc2c <USB_Device_ProcessControlRequest+0x20a>
 c08:	ae 01       	movw	r20, r28
 c0a:	4f 5f       	subi	r20, 0xFF	; 255
 c0c:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c0e:	60 91 16 01 	lds	r22, 0x0116
 c12:	9b db       	rcall	.-2250   	; 0x34a <CALLBACK_USB_GetDescriptor>
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	09 f4       	brne	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0x1f8>
 c18:	3d c0       	rjmp	.+122    	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 c1a:	20 91 e8 00 	lds	r18, 0x00E8
 c1e:	27 7f       	andi	r18, 0xF7	; 247
 c20:	20 93 e8 00 	sts	0x00E8, r18
 c24:	bc 01       	movw	r22, r24
 c26:	89 81       	ldd	r24, Y+1	; 0x01
 c28:	9a 81       	ldd	r25, Y+2	; 0x02
 c2a:	ae dc       	rcall	.-1700   	; 0x588 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c2c:	80 91 e8 00 	lds	r24, 0x00E8
 c30:	8b 77       	andi	r24, 0x7B	; 123
 c32:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c36:	2e c0       	rjmp	.+92     	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 c38:	90 38       	cpi	r25, 0x80	; 128
 c3a:	61 f5       	brne	.+88     	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c42:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c46:	80 91 0d 01 	lds	r24, 0x010D
 c4a:	80 93 f1 00 	sts	0x00F1, r24
 c4e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c52:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c54:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c58:	69 dd       	rcall	.-1326   	; 0x72c <Endpoint_ClearStatusStage>
 c5a:	1c c0       	rjmp	.+56     	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 c5c:	91 11       	cpse	r25, r1
 c5e:	1a c0       	rjmp	.+52     	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
 c60:	90 91 14 01 	lds	r25, 0x0114
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c64:	92 30       	cpi	r25, 0x02	; 2
 c66:	b0 f4       	brcc	.+44     	; 0xc94 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c68:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c6c:	87 7f       	andi	r24, 0xF7	; 247
 c6e:	80 93 e8 00 	sts	0x00E8, r24
 c72:	90 93 0d 01 	sts	0x010D, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c76:	5a dd       	rcall	.-1356   	; 0x72c <Endpoint_ClearStatusStage>
 c78:	80 91 0d 01 	lds	r24, 0x010D
 c7c:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <USB_Device_ProcessControlRequest+0x266>
 c80:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c84:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <USB_Device_ProcessControlRequest+0x26a>
 c88:	84 e0       	ldi	r24, 0x04	; 4
 c8a:	01 c0       	rjmp	.+2      	; 0xc8e <USB_Device_ProcessControlRequest+0x26c>
 c8c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c8e:	80 93 11 01 	sts	0x0111, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c92:	51 db       	rcall	.-2398   	; 0x336 <EVENT_USB_Device_ConfigurationChanged>
 c94:	80 91 e8 00 	lds	r24, 0x00E8
 c98:	83 ff       	sbrs	r24, 3
 c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <USB_Device_ProcessControlRequest+0x28e>
 c9c:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 ca0:	87 7f       	andi	r24, 0xF7	; 247
 ca2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ca6:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 caa:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cac:	80 93 eb 00 	sts	0x00EB, r24
 cb0:	aa 96       	adiw	r28, 0x2a	; 42
 cb2:	0f b6       	in	r0, 0x3f	; 63
 cb4:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cb6:	de bf       	out	0x3e, r29	; 62
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	cd bf       	out	0x3d, r28	; 61
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cc0:	1f 91       	pop	r17
 cc2:	08 95       	ret

00000cc4 <USB_Event_Stub>:
 cc4:	08 95       	ret

00000cc6 <USB_USBTask>:
 cc6:	cf 93       	push	r28
 cc8:	80 91 11 01 	lds	r24, 0x0111
 ccc:	88 23       	and	r24, r24
 cce:	a9 f0       	breq	.+42     	; 0xcfa <USB_USBTask+0x34>
 cd0:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cd4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cd6:	90 91 ec 00 	lds	r25, 0x00EC
 cda:	90 ff       	sbrs	r25, 0
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <USB_USBTask+0x1c>
 cde:	90 e8       	ldi	r25, 0x80	; 128
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <USB_USBTask+0x1e>
 ce2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ce4:	c9 2f       	mov	r28, r25
 ce6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ce8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cec:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cf0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 cf2:	97 de       	rcall	.-722    	; 0xa22 <USB_Device_ProcessControlRequest>
 cf4:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cf6:	c0 93 e9 00 	sts	0x00E9, r28
 cfa:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cfc:	08 95       	ret

00000cfe <MIDI_Device_ConfigureEndpoints>:
 cfe:	cf 93       	push	r28
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d00:	df 93       	push	r29
 d02:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d04:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d06:	82 e0       	ldi	r24, 0x02	; 2
 d08:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d0a:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d0c:	61 e0       	ldi	r22, 0x01	; 1
 d0e:	ce 01       	movw	r24, r28
 d10:	01 96       	adiw	r24, 0x01	; 1
 d12:	cf dc       	rcall	.-1634   	; 0x6b2 <Endpoint_ConfigureEndpointTable>
 d14:	88 23       	and	r24, r24
 d16:	31 f0       	breq	.+12     	; 0xd24 <MIDI_Device_ConfigureEndpoints+0x26>
 d18:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d1a:	ce 01       	movw	r24, r28
 d1c:	06 96       	adiw	r24, 0x06	; 6
 d1e:	df 91       	pop	r29
	  return false;

	return true;
}
 d20:	cf 91       	pop	r28
 d22:	c7 cc       	rjmp	.-1650   	; 0x6b2 <Endpoint_ConfigureEndpointTable>
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d24:	80 e0       	ldi	r24, 0x00	; 0
 d26:	df 91       	pop	r29
	  return false;

	return true;
}
 d28:	cf 91       	pop	r28
 d2a:	08 95       	ret

00000d2c <MIDI_Device_SendEventPacket>:
 d2c:	fc 01       	movw	r30, r24
 d2e:	cb 01       	movw	r24, r22
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d30:	20 91 11 01 	lds	r18, 0x0111
 d34:	24 30       	cpi	r18, 0x04	; 4
 d36:	a9 f4       	brne	.+42     	; 0xd62 <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d38:	21 81       	ldd	r18, Z+1	; 0x01
 d3a:	2f 70       	andi	r18, 0x0F	; 15
 d3c:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d40:	40 e0       	ldi	r20, 0x00	; 0
 d42:	50 e0       	ldi	r21, 0x00	; 0
 d44:	64 e0       	ldi	r22, 0x04	; 4
 d46:	70 e0       	ldi	r23, 0x00	; 0
 d48:	32 db       	rcall	.-2460   	; 0x3ae <Endpoint_Write_Stream_LE>
 d4a:	81 11       	cpse	r24, r1
 d4c:	0d c0       	rjmp	.+26     	; 0xd68 <MIDI_Device_SendEventPacket+0x3c>
 d4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d52:	85 fd       	sbrc	r24, 5
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d54:	08 c0       	rjmp	.+16     	; 0xd66 <MIDI_Device_SendEventPacket+0x3a>
 d56:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5a:	8e 77       	andi	r24, 0x7E	; 126
 d5c:	80 93 e8 00 	sts	0x00E8, r24
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <MIDI_Device_SendEventPacket+0x3a>
 d62:	82 e0       	ldi	r24, 0x02	; 2

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d64:	08 95       	ret
 d66:	80 e0       	ldi	r24, 0x00	; 0
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
 d68:	08 95       	ret

00000d6a <MIDI_Device_Flush>:
}
 d6a:	20 91 11 01 	lds	r18, 0x0111

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d6e:	24 30       	cpi	r18, 0x04	; 4
 d70:	89 f4       	brne	.+34     	; 0xd94 <MIDI_Device_Flush+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d72:	fc 01       	movw	r30, r24
 d74:	81 81       	ldd	r24, Z+1	; 0x01
 d76:	8f 70       	andi	r24, 0x0F	; 15
 d78:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 d7c:	80 91 f2 00 	lds	r24, 0x00F2
 d80:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 d84:	89 2b       	or	r24, r25
 d86:	41 f0       	breq	.+16     	; 0xd98 <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d88:	80 91 e8 00 	lds	r24, 0x00E8
 d8c:	8e 77       	andi	r24, 0x7E	; 126
 d8e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d92:	ed cc       	rjmp	.-1574   	; 0x76e <Endpoint_WaitUntilReady>
 d94:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d96:	08 95       	ret
 d98:	80 e0       	ldi	r24, 0x00	; 0

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d9a:	08 95       	ret

00000d9c <MIDI_Device_USBTask>:
}
 d9c:	20 91 11 01 	lds	r18, 0x0111
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 da0:	24 30       	cpi	r18, 0x04	; 4
 da2:	49 f4       	brne	.+18     	; 0xdb6 <MIDI_Device_USBTask+0x1a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 da4:	fc 01       	movw	r30, r24
 da6:	21 81       	ldd	r18, Z+1	; 0x01
 da8:	2f 70       	andi	r18, 0x0F	; 15
 daa:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 dae:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 db2:	20 fd       	sbrc	r18, 0
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 db4:	da cf       	rjmp	.-76     	; 0xd6a <MIDI_Device_Flush>
 db6:	08 95       	ret

00000db8 <MIDI_Device_ReceiveEventPacket>:
 db8:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 dba:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 dbc:	20 91 11 01 	lds	r18, 0x0111
 dc0:	24 30       	cpi	r18, 0x04	; 4
 dc2:	11 f0       	breq	.+4      	; 0xdc8 <MIDI_Device_ReceiveEventPacket+0x10>
	  return false;
 dc4:	80 e0       	ldi	r24, 0x00	; 0
 dc6:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dc8:	26 81       	ldd	r18, Z+6	; 0x06
 dca:	2f 70       	andi	r18, 0x0F	; 15
 dcc:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dd0:	20 91 e8 00 	lds	r18, 0x00E8

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsOUTReceived()))
 dd4:	22 ff       	sbrs	r18, 2
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <MIDI_Device_ReceiveEventPacket+0xc>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dd8:	20 91 e8 00 	lds	r18, 0x00E8
		return false;

	if (!(Endpoint_IsReadWriteAllowed()))
 ddc:	25 ff       	sbrs	r18, 5
 dde:	f2 cf       	rjmp	.-28     	; 0xdc4 <MIDI_Device_ReceiveEventPacket+0xc>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 de0:	40 e0       	ldi	r20, 0x00	; 0
 de2:	50 e0       	ldi	r21, 0x00	; 0
 de4:	64 e0       	ldi	r22, 0x04	; 4
 de6:	70 e0       	ldi	r23, 0x00	; 0
 de8:	2a db       	rcall	.-2476   	; 0x43e <Endpoint_Read_Stream_LE>
 dea:	80 91 e8 00 	lds	r24, 0x00E8
 dee:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 df0:	05 c0       	rjmp	.+10     	; 0xdfc <MIDI_Device_ReceiveEventPacket+0x44>
 df2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 df6:	8b 77       	andi	r24, 0x7B	; 123
 df8:	80 93 e8 00 	sts	0x00E8, r24
 dfc:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 dfe:	08 95       	ret

00000e00 <_exit>:
}
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>

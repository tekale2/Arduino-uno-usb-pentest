
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002450  000024e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800128  00800128  0000250c  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f616  00000000  00000000  00006854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037ac  00000000  00000000  00015e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000561d  00000000  00000000  00019616  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001868  00000000  00000000  0001ec34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004fb1  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000adfc  00000000  00000000  0002544d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
       6:	00 00       	nop
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
      28:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_10>
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
		  DataINEndpoint  = EndpointData;
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      82:	00 00       	nop
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4565>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4558>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

	return AOA_ENUMERROR_NoError;
}
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4553>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4551>:
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
     164:	64 20 4a 6f 79 73 74 69 63 6b 2e 0d 0a 00           d Joystick....

00000172 <__c.4549>:
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati

	return AUDIO_ENUMERROR_NoError;
}
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4547>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4a 6f 79 73     Not a Valid Joys
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     1b8:	74 69 63 6b 2e 0d 0a 00                             tick....

000001c0 <__c.4545>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4538>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4533>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4512>:
     217:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 6f     .[36mJoystick Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e0 e5       	ldi	r30, 0x50	; 80
     254:	f4 e2       	ldi	r31, 0x24	; 36
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a8 32       	cpi	r26, 0x28	; 40
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a8 e2       	ldi	r26, 0x28	; 40
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a3 32       	cpi	r26, 0x23	; 35
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	e4 d0       	rcall	.+456    	; 0x440 <main>
     278:	0c 94 26 12 	jmp	0x244c	; 0x244c <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27e:	9b b1       	in	r25, 0x0b	; 11
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 2b       	or	r25, r24
     284:	9b b9       	out	0x0b, r25	; 11
     286:	08 95       	ret

00000288 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     288:	84 b7       	in	r24, 0x34	; 52
     28a:	87 7f       	andi	r24, 0xF7	; 247
     28c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28e:	88 e1       	ldi	r24, 0x18	; 24
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	80 93 60 00 	sts	0x0060, r24
     298:	10 92 60 00 	sts	0x0060, r1
     29c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	80 93 61 00 	sts	0x0061, r24
     2aa:	90 93 61 00 	sts	0x0061, r25
     2ae:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 cd 00 	sts	0x00CD, r25
     2b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c6:	88 e1       	ldi	r24, 0x18	; 24
     2c8:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     2cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2d0:	8a b1       	in	r24, 0x0a	; 10
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2dc:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <Serial_CreateStream>

000002e8 <JoystickHost_Task>:

/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	9f 92       	push	r9
     2f2:	af 92       	push	r10
     2f4:	bf 92       	push	r11
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     30a:	cd b6       	in	r12, 0x3d	; 61
     30c:	de b6       	in	r13, 0x3e	; 62
/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     30e:	80 91 0e 05 	lds	r24, 0x050E
     312:	8b 30       	cpi	r24, 0x0B	; 11
     314:	09 f0       	breq	.+2      	; 0x318 <JoystickHost_Task+0x30>
     316:	7f c0       	rjmp	.+254    	; 0x416 <JoystickHost_Task+0x12e>
	  return;

	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <HID_Host_IsReportReceived>
     320:	88 23       	and	r24, r24
     322:	09 f4       	brne	.+2      	; 0x326 <JoystickHost_Task+0x3e>
     324:	78 c0       	rjmp	.+240    	; 0x416 <JoystickHost_Task+0x12e>
     326:	ad b6       	in	r10, 0x3d	; 61
     328:	be b6       	in	r11, 0x3e	; 62
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
     32a:	80 91 16 01 	lds	r24, 0x0116
     32e:	2d b7       	in	r18, 0x3d	; 61
     330:	3e b7       	in	r19, 0x3e	; 62
     332:	28 1b       	sub	r18, r24
     334:	31 09       	sbc	r19, r1
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	3e bf       	out	0x3e, r19	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	2d bf       	out	0x3d, r18	; 61
     340:	8d b7       	in	r24, 0x3d	; 61
     342:	9e b7       	in	r25, 0x3e	; 62
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	7c 01       	movw	r14, r24
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);
     348:	bc 01       	movw	r22, r24
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     352:	61 2c       	mov	r6, r1
	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     354:	71 2c       	mov	r7, r1

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     356:	9a e2       	ldi	r25, 0x2A	; 42
     358:	59 2e       	mov	r5, r25
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     35a:	20 e1       	ldi	r18, 0x10	; 16
     35c:	82 2e       	mov	r8, r18
     35e:	91 2c       	mov	r9, r1
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     360:	80 91 28 01 	lds	r24, 0x0128
     364:	68 16       	cp	r6, r24
     366:	08 f0       	brcs	.+2      	; 0x36a <JoystickHost_Task+0x82>
     368:	4f c0       	rjmp	.+158    	; 0x408 <JoystickHost_Task+0x120>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     36a:	56 9c       	mul	r5, r6
     36c:	80 01       	movw	r16, r0
     36e:	11 24       	eor	r1, r1
     370:	07 5d       	subi	r16, 0xD7	; 215
     372:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     374:	b8 01       	movw	r22, r16
     376:	c7 01       	movw	r24, r14
     378:	a8 d4       	rcall	.+2384   	; 0xcca <USB_GetHIDReportItemInfo>
     37a:	88 23       	and	r24, r24
     37c:	09 f4       	brne	.+2      	; 0x380 <JoystickHost_Task+0x98>
     37e:	42 c0       	rjmp	.+132    	; 0x404 <JoystickHost_Task+0x11c>
     380:	f8 01       	movw	r30, r16
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     382:	81 85       	ldd	r24, Z+9	; 0x09
     384:	92 85       	ldd	r25, Z+10	; 0x0a
     386:	89 30       	cpi	r24, 0x09	; 9
     388:	91 05       	cpc	r25, r1
     38a:	71 f4       	brne	.+28     	; 0x3a8 <JoystickHost_Task+0xc0>
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	81 11       	cpse	r24, r1
     390:	39 c0       	rjmp	.+114    	; 0x404 <JoystickHost_Task+0x11c>
     392:	82 a1       	ldd	r24, Z+34	; 0x22
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     394:	93 a1       	ldd	r25, Z+35	; 0x23
     396:	a4 a1       	ldd	r26, Z+36	; 0x24
     398:	b5 a1       	ldd	r27, Z+37	; 0x25
     39a:	89 2b       	or	r24, r25
     39c:	8a 2b       	or	r24, r26
     39e:	8b 2b       	or	r24, r27
     3a0:	89 f1       	breq	.+98     	; 0x404 <JoystickHost_Task+0x11c>
     3a2:	80 ef       	ldi	r24, 0xF0	; 240
				  LEDMask = LEDS_ALL_LEDS;
     3a4:	78 2e       	mov	r7, r24
     3a6:	2e c0       	rjmp	.+92     	; 0x404 <JoystickHost_Task+0x11c>
     3a8:	01 97       	sbiw	r24, 0x01	; 1
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3aa:	61 f5       	brne	.+88     	; 0x404 <JoystickHost_Task+0x11c>
     3ac:	f8 01       	movw	r30, r16
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3ae:	23 85       	ldd	r18, Z+11	; 0x0b
     3b0:	34 85       	ldd	r19, Z+12	; 0x0c
     3b2:	c9 01       	movw	r24, r18
     3b4:	c0 97       	sbiw	r24, 0x30	; 48
     3b6:	02 97       	sbiw	r24, 0x02	; 2
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3b8:	28 f5       	brcc	.+74     	; 0x404 <JoystickHost_Task+0x11c>
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     3bc:	81 11       	cpse	r24, r1
     3be:	22 c0       	rjmp	.+68     	; 0x404 <JoystickHost_Task+0x11c>
     3c0:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3c2:	a4 01       	movw	r20, r8
     3c4:	48 1b       	sub	r20, r24
     3c6:	51 09       	sbc	r21, r1
     3c8:	82 a1       	ldd	r24, Z+34	; 0x22
     3ca:	93 a1       	ldd	r25, Z+35	; 0x23
     3cc:	a4 a1       	ldd	r26, Z+36	; 0x24
     3ce:	b5 a1       	ldd	r27, Z+37	; 0x25
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <JoystickHost_Task+0xf2>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	aa 1f       	adc	r26, r26
     3d8:	bb 1f       	adc	r27, r27
     3da:	4a 95       	dec	r20
     3dc:	d2 f7       	brpl	.-12     	; 0x3d2 <JoystickHost_Task+0xea>
     3de:	00 97       	sbiw	r24, 0x00	; 0

				if (DeltaMovement)
     3e0:	89 f0       	breq	.+34     	; 0x404 <JoystickHost_Task+0x11c>
     3e2:	20 33       	cpi	r18, 0x30	; 48
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     3e4:	31 05       	cpc	r19, r1
     3e6:	39 f4       	brne	.+14     	; 0x3f6 <JoystickHost_Task+0x10e>
     3e8:	18 16       	cp	r1, r24
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     3ea:	19 06       	cpc	r1, r25
     3ec:	14 f4       	brge	.+4      	; 0x3f2 <JoystickHost_Task+0x10a>
     3ee:	80 e1       	ldi	r24, 0x10	; 16
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <JoystickHost_Task+0x11a>
     3f2:	80 e2       	ldi	r24, 0x20	; 32
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <JoystickHost_Task+0x11a>
     3f6:	18 16       	cp	r1, r24
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     3f8:	19 06       	cpc	r1, r25
     3fa:	14 f4       	brge	.+4      	; 0x400 <JoystickHost_Task+0x118>
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <JoystickHost_Task+0x11a>
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	78 2a       	or	r7, r24
     404:	63 94       	inc	r6
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     406:	ac cf       	rjmp	.-168    	; 0x360 <JoystickHost_Task+0x78>
     408:	87 2d       	mov	r24, r7
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     40a:	39 df       	rcall	.-398    	; 0x27e <LEDs_SetAllLEDs>
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	be be       	out	0x3e, r11	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	ad be       	out	0x3d, r10	; 61
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
	}
}
     41a:	de be       	out	0x3e, r13	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd be       	out	0x3d, r12	; 61
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	7f 90       	pop	r7
     43a:	6f 90       	pop	r6
     43c:	5f 90       	pop	r5
     43e:	08 95       	ret

00000440 <main>:
     440:	23 df       	rcall	.-442    	; 0x288 <SetupHardware>
     442:	87 e1       	ldi	r24, 0x17	; 23
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Joystick Host Demo running.\r\n" ESC_FG_WHITE));
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
     44a:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     44c:	18 df       	rcall	.-464    	; 0x27e <LEDs_SetAllLEDs>
     44e:	78 94       	sei
     450:	4b df       	rcall	.-362    	; 0x2e8 <JoystickHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     452:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     456:	fc cf       	rjmp	.-8      	; 0x450 <main+0x10>

00000458 <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Joystick_HID_Interface);
		USB_USBTask();
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     460:	80 ea       	ldi	r24, 0xA0	; 160
     462:	0d cf       	rjmp	.-486    	; 0x27e <LEDs_SetAllLEDs>

00000464 <EVENT_USB_Host_DeviceUnattached>:
     464:	8d ee       	ldi	r24, 0xED	; 237
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	07 cf       	rjmp	.-498    	; 0x27e <LEDs_SetAllLEDs>

00000470 <EVENT_USB_Host_DeviceEnumerationComplete>:
     470:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	c2 50       	subi	r28, 0x02	; 2
     47a:	d2 40       	sbci	r29, 0x02	; 2
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     486:	80 ea       	ldi	r24, 0xA0	; 160
     488:	fa de       	rcall	.-524    	; 0x27e <LEDs_SetAllLEDs>
     48a:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     48c:	32 e0       	ldi	r19, 0x02	; 2
     48e:	ae 01       	movw	r20, r28
     490:	4f 5f       	subi	r20, 0xFF	; 255
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	be 01       	movw	r22, r28
     496:	6f 5f       	subi	r22, 0xFF	; 255
     498:	7d 4f       	sbci	r23, 0xFD	; 253
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <USB_Host_GetDeviceConfigDescriptor>
     4a0:	88 23       	and	r24, r24
     4a2:	19 f0       	breq	.+6      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4a4:	80 ec       	ldi	r24, 0xC0	; 192
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	19 c0       	rjmp	.+50     	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4aa:	cf 5f       	subi	r28, 0xFF	; 255
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Joystick_HID_Interface,
     4ac:	dd 4f       	sbci	r29, 0xFD	; 253
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	c1 50       	subi	r28, 0x01	; 1
     4b4:	d2 40       	sbci	r29, 0x02	; 2
     4b6:	ae 01       	movw	r20, r28
     4b8:	4f 5f       	subi	r20, 0xFF	; 255
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <HID_Host_ConfigurePipes>
     4c4:	88 23       	and	r24, r24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     4c8:	88 e9       	ldi	r24, 0x98	; 152
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Joystick.\r\n"));
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4d0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Host_SetDeviceConfiguration>
     4d4:	88 23       	and	r24, r24
     4d6:	31 f0       	breq	.+12     	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4d8:	82 e7       	ldi	r24, 0x72	; 114
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
     4e0:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e2:	15 c0       	rjmp	.+42     	; 0x50e <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Joystick_HID_Interface) != 0)
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <HID_Host_SetReportProtocol>
     4ec:	88 23       	and	r24, r24
     4ee:	51 f0       	breq	.+20     	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     4f0:	84 e3       	ldi	r24, 0x34	; 52
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Joystick.\r\n"));
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
     4f8:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4fa:	c1 de       	rcall	.-638    	; 0x27e <LEDs_SetAllLEDs>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     502:	06 c0       	rjmp	.+12     	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     504:	8d e1       	ldi	r24, 0x1D	; 29
		return;
     506:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     508:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <puts_P>
     50c:	80 e6       	ldi	r24, 0x60	; 96
     50e:	b7 de       	rcall	.-658    	; 0x27e <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     510:	ce 5f       	subi	r28, 0xFE	; 254
     512:	dd 4f       	sbci	r29, 0xFD	; 253
     514:	0f b6       	in	r0, 0x3f	; 63
}
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <EVENT_USB_Host_HostError>:
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	5a d7       	rcall	.+3764   	; 0x13e6 <USB_Disable>
     532:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	8f 93       	push	r24
     538:	8e ee       	ldi	r24, 0xEE	; 238
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
     544:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     546:	9b de       	rcall	.-714    	; 0x27e <LEDs_SetAllLEDs>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	ff cf       	rjmp	.-2      	; 0x550 <EVENT_USB_Host_HostError+0x2c>

00000552 <EVENT_USB_Host_DeviceEnumerationFailed>:
     552:	90 91 0e 05 	lds	r25, 0x050E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     556:	1f 92       	push	r1
     558:	9f 93       	push	r25
     55a:	1f 92       	push	r1
     55c:	6f 93       	push	r22
     55e:	1f 92       	push	r1
     560:	8f 93       	push	r24
     562:	88 e9       	ldi	r24, 0x98	; 152
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     56e:	8d b7       	in	r24, 0x3d	; 61
     570:	9e b7       	in	r25, 0x3e	; 62
     572:	08 96       	adiw	r24, 0x08	; 8
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	9e bf       	out	0x3e, r25	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	8d bf       	out	0x3d, r24	; 61
     57e:	80 e9       	ldi	r24, 0x90	; 144
     580:	7e ce       	rjmp	.-772    	; 0x27e <LEDs_SetAllLEDs>

00000582 <CALLBACK_HIDParser_FilterHIDReportItem>:
     582:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     584:	16 96       	adiw	r26, 0x06	; 6
     586:	ed 91       	ld	r30, X+
     588:	fc 91       	ld	r31, X
     58a:	17 97       	sbiw	r26, 0x07	; 7
     58c:	30 97       	sbiw	r30, 0x00	; 0
     58e:	b1 f0       	breq	.+44     	; 0x5bc <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     590:	21 81       	ldd	r18, Z+1	; 0x01
     592:	32 81       	ldd	r19, Z+2	; 0x02
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	29 f4       	brne	.+10     	; 0x5a4 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     59a:	23 81       	ldd	r18, Z+3	; 0x03
     59c:	34 81       	ldd	r19, Z+4	; 0x04
     59e:	24 30       	cpi	r18, 0x04	; 4
     5a0:	31 05       	cpc	r19, r1
     5a2:	21 f0       	breq	.+8      	; 0x5ac <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5a4:	05 80       	ldd	r0, Z+5	; 0x05
     5a6:	f6 81       	ldd	r31, Z+6	; 0x06
     5a8:	e0 2d       	mov	r30, r0
     5aa:	f0 cf       	rjmp	.-32     	; 0x58c <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     5ac:	fc 01       	movw	r30, r24
     5ae:	21 85       	ldd	r18, Z+9	; 0x09
     5b0:	32 85       	ldd	r19, Z+10	; 0x0a
     5b2:	27 7f       	andi	r18, 0xF7	; 247
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	21 30       	cpi	r18, 0x01	; 1
     5b8:	31 05       	cpc	r19, r1
     5ba:	09 f0       	breq	.+2      	; 0x5be <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     5be:	08 95       	ret

000005c0 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     5c0:	2f 92       	push	r2
     5c2:	3f 92       	push	r3
     5c4:	4f 92       	push	r4
     5c6:	5f 92       	push	r5
     5c8:	6f 92       	push	r6
     5ca:	7f 92       	push	r7
     5cc:	8f 92       	push	r8
     5ce:	9f 92       	push	r9
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	cd 58       	subi	r28, 0x8D	; 141
     5ea:	d1 09       	sbc	r29, r1
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     5f8:	9a 01       	movw	r18, r20
     5fa:	20 57       	subi	r18, 0x70	; 112
     5fc:	3c 4f       	sbci	r19, 0xFC	; 252
     5fe:	e8 96       	adiw	r28, 0x38	; 56
     600:	3f af       	std	Y+63, r19	; 0x3f
     602:	2e af       	std	Y+62, r18	; 0x3e
     604:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     606:	89 ed       	ldi	r24, 0xD9	; 217
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	da 01       	movw	r26, r20
     60c:	fc 01       	movw	r30, r24
     60e:	1d 92       	st	X+, r1
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	e9 f7       	brne	.-6      	; 0x60e <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     614:	fe 01       	movw	r30, r28
     616:	31 96       	adiw	r30, 0x01	; 1
     618:	8c e1       	ldi	r24, 0x1C	; 28
     61a:	df 01       	movw	r26, r30
     61c:	1d 92       	st	X+, r1
     61e:	8a 95       	dec	r24
     620:	e9 f7       	brne	.-6      	; 0x61c <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	d9 01       	movw	r26, r18
     626:	1d 92       	st	X+, r1
     628:	8a 95       	dec	r24
     62a:	e9 f7       	brne	.-6      	; 0x626 <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     62c:	9a 01       	movw	r18, r20
     62e:	21 57       	subi	r18, 0x71	; 113
     630:	3c 4f       	sbci	r19, 0xFC	; 252
     632:	eb 96       	adiw	r28, 0x3b	; 59
     634:	3f af       	std	Y+63, r19	; 0x3f
     636:	2e af       	std	Y+62, r18	; 0x3e
     638:	eb 97       	sbiw	r28, 0x3b	; 59
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	d9 01       	movw	r26, r18
     63e:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     640:	41 2c       	mov	r4, r1
     642:	51 2c       	mov	r5, r1
     644:	32 01       	movw	r6, r4
     646:	81 2c       	mov	r8, r1
     648:	91 2c       	mov	r9, r1
     64a:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     64c:	e4 96       	adiw	r28, 0x34	; 52
     64e:	1f ae       	std	Y+63, r1	; 0x3f
     650:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     652:	e6 96       	adiw	r28, 0x36	; 54
     654:	1f ae       	std	Y+63, r1	; 0x3f
     656:	1e ae       	std	Y+62, r1	; 0x3e
     658:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     65a:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     65c:	9a 01       	movw	r18, r20
     65e:	2a 52       	subi	r18, 0x2A	; 42
     660:	3c 4f       	sbci	r19, 0xFC	; 252
     662:	ed 96       	adiw	r28, 0x3d	; 61
     664:	3f af       	std	Y+63, r19	; 0x3f
     666:	2e af       	std	Y+62, r18	; 0x3e
     668:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     66a:	9a 01       	movw	r18, r20
     66c:	28 57       	subi	r18, 0x78	; 120
     66e:	3c 4f       	sbci	r19, 0xFC	; 252
     670:	cd 57       	subi	r28, 0x7D	; 125
     672:	df 4f       	sbci	r29, 0xFF	; 255
     674:	39 83       	std	Y+1, r19	; 0x01
     676:	28 83       	st	Y, r18
     678:	c3 58       	subi	r28, 0x83	; 131
     67a:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     67c:	9a 01       	movw	r18, r20
     67e:	28 52       	subi	r18, 0x28	; 40
     680:	3c 4f       	sbci	r19, 0xFC	; 252
     682:	ef 96       	adiw	r28, 0x3f	; 63
     684:	3f af       	std	Y+63, r19	; 0x3f
     686:	2e af       	std	Y+62, r18	; 0x3e
     688:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     68a:	cb 57       	subi	r28, 0x7B	; 123
     68c:	df 4f       	sbci	r29, 0xFF	; 255
     68e:	b9 83       	std	Y+1, r27	; 0x01
     690:	a8 83       	st	Y, r26
     692:	c5 58       	subi	r28, 0x85	; 133
     694:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     696:	61 15       	cp	r22, r1
     698:	71 05       	cpc	r23, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <USB_ProcessHIDReport+0xde>
     69c:	e9 c2       	rjmp	.+1490   	; 0xc70 <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     69e:	d1 01       	movw	r26, r2
     6a0:	bc 91       	ld	r27, X
     6a2:	e9 96       	adiw	r28, 0x39	; 57
     6a4:	bf af       	std	Y+63, r27	; 0x3f
     6a6:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     6a8:	8b 2f       	mov	r24, r27
     6aa:	83 70       	andi	r24, 0x03	; 3
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	81 f1       	breq	.+96     	; 0x710 <USB_ProcessHIDReport+0x150>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	59 f0       	breq	.+22     	; 0x6ca <USB_ProcessHIDReport+0x10a>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	d9 f1       	breq	.+118    	; 0x72e <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     6b8:	ef ef       	ldi	r30, 0xFF	; 255
     6ba:	2e 1a       	sub	r2, r30
     6bc:	3e 0a       	sbc	r3, r30
		ReportSize--;
     6be:	61 50       	subi	r22, 0x01	; 1
     6c0:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     6c2:	c1 2c       	mov	r12, r1
     6c4:	d1 2c       	mov	r13, r1
     6c6:	76 01       	movw	r14, r12
     6c8:	3d c0       	rjmp	.+122    	; 0x744 <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6ca:	d1 01       	movw	r26, r2
     6cc:	14 96       	adiw	r26, 0x04	; 4
     6ce:	8c 91       	ld	r24, X
     6d0:	14 97       	sbiw	r26, 0x04	; 4
     6d2:	13 96       	adiw	r26, 0x03	; 3
     6d4:	cc 90       	ld	r12, X
     6d6:	13 97       	sbiw	r26, 0x03	; 3
     6d8:	d1 2c       	mov	r13, r1
     6da:	e1 2c       	mov	r14, r1
     6dc:	f1 2c       	mov	r15, r1
     6de:	76 01       	movw	r14, r12
     6e0:	dd 24       	eor	r13, r13
     6e2:	cc 24       	eor	r12, r12
     6e4:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     6e6:	11 96       	adiw	r26, 0x01	; 1
     6e8:	8c 91       	ld	r24, X
     6ea:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6ec:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     6ee:	12 96       	adiw	r26, 0x02	; 2
     6f0:	8c 91       	ld	r24, X
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	98 2f       	mov	r25, r24
     6f6:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	c8 2a       	or	r12, r24
     6fe:	d9 2a       	or	r13, r25
     700:	ea 2a       	or	r14, r26
     702:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     704:	65 50       	subi	r22, 0x05	; 5
     706:	71 09       	sbc	r23, r1
				ReportData     += 4;
     708:	b5 e0       	ldi	r27, 0x05	; 5
     70a:	2b 0e       	add	r2, r27
     70c:	31 1c       	adc	r3, r1
				break;
     70e:	1a c0       	rjmp	.+52     	; 0x744 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     710:	f1 01       	movw	r30, r2
     712:	c2 80       	ldd	r12, Z+2	; 0x02
     714:	d1 2c       	mov	r13, r1
     716:	dc 2c       	mov	r13, r12
     718:	cc 24       	eor	r12, r12
     71a:	81 81       	ldd	r24, Z+1	; 0x01
     71c:	c8 2a       	or	r12, r24
     71e:	e1 2c       	mov	r14, r1
     720:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     722:	63 50       	subi	r22, 0x03	; 3
     724:	71 09       	sbc	r23, r1
				ReportData     += 2;
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	2f 0e       	add	r2, r31
     72a:	31 1c       	adc	r3, r1
				break;
     72c:	0b c0       	rjmp	.+22     	; 0x744 <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     72e:	d1 01       	movw	r26, r2
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	cc 90       	ld	r12, X
     734:	d1 2c       	mov	r13, r1
     736:	e1 2c       	mov	r14, r1
     738:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     73a:	62 50       	subi	r22, 0x02	; 2
     73c:	71 09       	sbc	r23, r1
				ReportData     += 1;
     73e:	b2 e0       	ldi	r27, 0x02	; 2
     740:	2b 0e       	add	r2, r27
     742:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     744:	e9 96       	adiw	r28, 0x39	; 57
     746:	2f ad       	ldd	r18, Y+63	; 0x3f
     748:	e9 97       	sbiw	r28, 0x39	; 57
     74a:	2c 7f       	andi	r18, 0xFC	; 252
     74c:	24 36       	cpi	r18, 0x64	; 100
     74e:	09 f4       	brne	.+2      	; 0x752 <USB_ProcessHIDReport+0x192>
     750:	96 c0       	rjmp	.+300    	; 0x87e <USB_ProcessHIDReport+0x2be>
     752:	68 f5       	brcc	.+90     	; 0x7ae <USB_ProcessHIDReport+0x1ee>
     754:	24 32       	cpi	r18, 0x24	; 36
     756:	09 f4       	brne	.+2      	; 0x75a <USB_ProcessHIDReport+0x19a>
     758:	7c c0       	rjmp	.+248    	; 0x852 <USB_ProcessHIDReport+0x292>
     75a:	b0 f4       	brcc	.+44     	; 0x788 <USB_ProcessHIDReport+0x1c8>
     75c:	28 30       	cpi	r18, 0x08	; 8
     75e:	09 f4       	brne	.+2      	; 0x762 <USB_ProcessHIDReport+0x1a2>
     760:	f4 c0       	rjmp	.+488    	; 0x94a <USB_ProcessHIDReport+0x38a>
     762:	48 f4       	brcc	.+18     	; 0x776 <USB_ProcessHIDReport+0x1b6>
     764:	24 30       	cpi	r18, 0x04	; 4
     766:	09 f0       	breq	.+2      	; 0x76a <USB_ProcessHIDReport+0x1aa>
     768:	73 c2       	rjmp	.+1254   	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     76a:	d8 01       	movw	r26, r16
     76c:	12 96       	adiw	r26, 0x02	; 2
     76e:	dc 92       	st	X, r13
     770:	ce 92       	st	-X, r12
     772:	11 97       	sbiw	r26, 0x01	; 1
				break;
     774:	6d c2       	rjmp	.+1242   	; 0xc50 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     776:	24 31       	cpi	r18, 0x14	; 20
     778:	09 f4       	brne	.+2      	; 0x77c <USB_ProcessHIDReport+0x1bc>
     77a:	65 c0       	rjmp	.+202    	; 0x846 <USB_ProcessHIDReport+0x286>
     77c:	28 31       	cpi	r18, 0x18	; 24
     77e:	09 f0       	breq	.+2      	; 0x782 <USB_ProcessHIDReport+0x1c2>
     780:	67 c2       	rjmp	.+1230   	; 0xc50 <USB_ProcessHIDReport+0x690>
     782:	46 01       	movw	r8, r12
     784:	57 01       	movw	r10, r14
     786:	64 c2       	rjmp	.+1224   	; 0xc50 <USB_ProcessHIDReport+0x690>
     788:	24 33       	cpi	r18, 0x34	; 52
     78a:	09 f4       	brne	.+2      	; 0x78e <USB_ProcessHIDReport+0x1ce>
     78c:	6a c0       	rjmp	.+212    	; 0x862 <USB_ProcessHIDReport+0x2a2>
     78e:	30 f4       	brcc	.+12     	; 0x79c <USB_ProcessHIDReport+0x1dc>
     790:	28 32       	cpi	r18, 0x28	; 40
     792:	09 f0       	breq	.+2      	; 0x796 <USB_ProcessHIDReport+0x1d6>
     794:	5d c2       	rjmp	.+1210   	; 0xc50 <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     796:	26 01       	movw	r4, r12
     798:	37 01       	movw	r6, r14
     79a:	5a c2       	rjmp	.+1204   	; 0xc50 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     79c:	24 34       	cpi	r18, 0x44	; 68
     79e:	09 f4       	brne	.+2      	; 0x7a2 <USB_ProcessHIDReport+0x1e2>
     7a0:	66 c0       	rjmp	.+204    	; 0x86e <USB_ProcessHIDReport+0x2ae>
     7a2:	24 35       	cpi	r18, 0x54	; 84
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <USB_ProcessHIDReport+0x1e8>
     7a6:	54 c2       	rjmp	.+1192   	; 0xc50 <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     7a8:	f8 01       	movw	r30, r16
     7aa:	c1 86       	std	Z+9, r12	; 0x09
				break;
     7ac:	51 c2       	rjmp	.+1186   	; 0xc50 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7ae:	24 39       	cpi	r18, 0x94	; 148
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <USB_ProcessHIDReport+0x1f4>
     7b2:	6d c0       	rjmp	.+218    	; 0x88e <USB_ProcessHIDReport+0x2ce>
     7b4:	78 f4       	brcc	.+30     	; 0x7d4 <USB_ProcessHIDReport+0x214>
     7b6:	20 38       	cpi	r18, 0x80	; 128
     7b8:	e1 f0       	breq	.+56     	; 0x7f2 <USB_ProcessHIDReport+0x232>
     7ba:	30 f4       	brcc	.+12     	; 0x7c8 <USB_ProcessHIDReport+0x208>
     7bc:	24 37       	cpi	r18, 0x74	; 116
     7be:	09 f0       	breq	.+2      	; 0x7c2 <USB_ProcessHIDReport+0x202>
     7c0:	47 c2       	rjmp	.+1166   	; 0xc50 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     7c2:	f8 01       	movw	r30, r16
     7c4:	c0 82       	st	Z, r12
				break;
     7c6:	44 c2       	rjmp	.+1160   	; 0xc50 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7c8:	24 38       	cpi	r18, 0x84	; 132
     7ca:	09 f4       	brne	.+2      	; 0x7ce <USB_ProcessHIDReport+0x20e>
     7cc:	64 c0       	rjmp	.+200    	; 0x896 <USB_ProcessHIDReport+0x2d6>
     7ce:	20 39       	cpi	r18, 0x90	; 144
     7d0:	81 f0       	breq	.+32     	; 0x7f2 <USB_ProcessHIDReport+0x232>
     7d2:	3e c2       	rjmp	.+1148   	; 0xc50 <USB_ProcessHIDReport+0x690>
     7d4:	20 3b       	cpi	r18, 0xB0	; 176
     7d6:	69 f0       	breq	.+26     	; 0x7f2 <USB_ProcessHIDReport+0x232>
     7d8:	30 f4       	brcc	.+12     	; 0x7e6 <USB_ProcessHIDReport+0x226>
     7da:	20 3a       	cpi	r18, 0xA0	; 160
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <USB_ProcessHIDReport+0x220>
     7de:	c9 c0       	rjmp	.+402    	; 0x972 <USB_ProcessHIDReport+0x3b2>
     7e0:	24 3a       	cpi	r18, 0xA4	; 164
     7e2:	b9 f0       	breq	.+46     	; 0x812 <USB_ProcessHIDReport+0x252>
     7e4:	35 c2       	rjmp	.+1130   	; 0xc50 <USB_ProcessHIDReport+0x690>
     7e6:	24 3b       	cpi	r18, 0xB4	; 180
     7e8:	29 f1       	breq	.+74     	; 0x834 <USB_ProcessHIDReport+0x274>
     7ea:	20 3c       	cpi	r18, 0xC0	; 192
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <USB_ProcessHIDReport+0x230>
     7ee:	2d c1       	rjmp	.+602    	; 0xa4a <USB_ProcessHIDReport+0x48a>
     7f0:	2f c2       	rjmp	.+1118   	; 0xc50 <USB_ProcessHIDReport+0x690>
     7f2:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     7f4:	d7 01       	movw	r26, r14
     7f6:	c6 01       	movw	r24, r12
     7f8:	81 70       	andi	r24, 0x01	; 1
     7fa:	99 27       	eor	r25, r25
     7fc:	aa 27       	eor	r26, r26
     7fe:	bb 27       	eor	r27, r27
     800:	c1 58       	subi	r28, 0x81	; 129
     802:	df 4f       	sbci	r29, 0xFF	; 255
     804:	88 83       	st	Y, r24
     806:	99 83       	std	Y+1, r25	; 0x01
     808:	aa 83       	std	Y+2, r26	; 0x02
     80a:	bb 83       	std	Y+3, r27	; 0x03
     80c:	cf 57       	subi	r28, 0x7F	; 127
     80e:	d0 40       	sbci	r29, 0x00	; 0
     810:	4a c1       	rjmp	.+660    	; 0xaa6 <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     812:	ce 01       	movw	r24, r28
     814:	4d 96       	adiw	r24, 0x1d	; 29
     816:	08 17       	cp	r16, r24
     818:	19 07       	cpc	r17, r25
     81a:	09 f4       	brne	.+2      	; 0x81e <USB_ProcessHIDReport+0x25e>
     81c:	2f c2       	rjmp	.+1118   	; 0xc7c <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     81e:	c8 01       	movw	r24, r16
     820:	4c 96       	adiw	r24, 0x1c	; 28
     822:	2a e2       	ldi	r18, 0x2A	; 42
     824:	f8 01       	movw	r30, r16
     826:	dc 01       	movw	r26, r24
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	2a 95       	dec	r18
     82e:	e1 f7       	brne	.-8      	; 0x828 <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     830:	8c 01       	movw	r16, r24
				break;
     832:	0e c2       	rjmp	.+1052   	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	08 17       	cp	r16, r24
     83a:	19 07       	cpc	r17, r25
     83c:	09 f4       	brne	.+2      	; 0x840 <USB_ProcessHIDReport+0x280>
     83e:	20 c2       	rjmp	.+1088   	; 0xc80 <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     840:	0c 51       	subi	r16, 0x1C	; 28
     842:	11 09       	sbc	r17, r1
				break;
     844:	05 c2       	rjmp	.+1034   	; 0xc50 <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     846:	f8 01       	movw	r30, r16
     848:	c2 86       	std	Z+10, r12	; 0x0a
     84a:	d3 86       	std	Z+11, r13	; 0x0b
     84c:	e4 86       	std	Z+12, r14	; 0x0c
     84e:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     850:	ff c1       	rjmp	.+1022   	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     852:	d8 01       	movw	r26, r16
     854:	1e 96       	adiw	r26, 0x0e	; 14
     856:	cd 92       	st	X+, r12
     858:	dd 92       	st	X+, r13
     85a:	ed 92       	st	X+, r14
     85c:	fc 92       	st	X, r15
     85e:	51 97       	sbiw	r26, 0x11	; 17
				break;
     860:	f7 c1       	rjmp	.+1006   	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     862:	f8 01       	movw	r30, r16
     864:	c2 8a       	std	Z+18, r12	; 0x12
     866:	d3 8a       	std	Z+19, r13	; 0x13
     868:	e4 8a       	std	Z+20, r14	; 0x14
     86a:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     86c:	f1 c1       	rjmp	.+994    	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     86e:	d8 01       	movw	r26, r16
     870:	56 96       	adiw	r26, 0x16	; 22
     872:	cd 92       	st	X+, r12
     874:	dd 92       	st	X+, r13
     876:	ed 92       	st	X+, r14
     878:	fc 92       	st	X, r15
     87a:	59 97       	sbiw	r26, 0x19	; 25
				break;
     87c:	e9 c1       	rjmp	.+978    	; 0xc50 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     87e:	d8 01       	movw	r26, r16
     880:	15 96       	adiw	r26, 0x05	; 5
     882:	cd 92       	st	X+, r12
     884:	dd 92       	st	X+, r13
     886:	ed 92       	st	X+, r14
     888:	fc 92       	st	X, r15
     88a:	18 97       	sbiw	r26, 0x08	; 8
				break;
     88c:	e1 c1       	rjmp	.+962    	; 0xc50 <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     88e:	d8 01       	movw	r26, r16
     890:	5a 96       	adiw	r26, 0x1a	; 26
     892:	cc 92       	st	X, r12
				break;
     894:	dd c1       	rjmp	.+954    	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     896:	ac 2d       	mov	r26, r12
     898:	f8 01       	movw	r30, r16
     89a:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     89c:	ef 96       	adiw	r28, 0x3f	; 63
     89e:	ee ad       	ldd	r30, Y+62	; 0x3e
     8a0:	ff ad       	ldd	r31, Y+63	; 0x3f
     8a2:	ef 97       	sbiw	r28, 0x3f	; 63
     8a4:	80 81       	ld	r24, Z
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_ProcessHIDReport+0x2ec>
     8aa:	40 c0       	rjmp	.+128    	; 0x92c <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     8ac:	cb 57       	subi	r28, 0x7B	; 123
     8ae:	df 4f       	sbci	r29, 0xFF	; 255
     8b0:	e8 81       	ld	r30, Y
     8b2:	f9 81       	ldd	r31, Y+1	; 0x01
     8b4:	c5 58       	subi	r28, 0x85	; 133
     8b6:	d0 40       	sbci	r29, 0x00	; 0
     8b8:	b0 81       	ld	r27, Z
     8ba:	9a 01       	movw	r18, r20
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	8b 17       	cp	r24, r27
     8c2:	d0 f4       	brcc	.+52     	; 0x8f8 <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     8c4:	7c 01       	movw	r14, r24
     8c6:	f9 01       	movw	r30, r18
     8c8:	e0 57       	subi	r30, 0x70	; 112
     8ca:	fc 4f       	sbci	r31, 0xFC	; 252
     8cc:	e0 81       	ld	r30, Z
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	29 5f       	subi	r18, 0xF9	; 249
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	ea 13       	cpse	r30, r26
     8d6:	f4 cf       	rjmp	.-24     	; 0x8c0 <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     8d8:	27 e0       	ldi	r18, 0x07	; 7
     8da:	2e 9d       	mul	r18, r14
     8dc:	c0 01       	movw	r24, r0
     8de:	2f 9d       	mul	r18, r15
     8e0:	90 0d       	add	r25, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	9c 01       	movw	r18, r24
     8e6:	20 57       	subi	r18, 0x70	; 112
     8e8:	3c 4f       	sbci	r19, 0xFC	; 252
     8ea:	24 0f       	add	r18, r20
     8ec:	35 1f       	adc	r19, r21
     8ee:	e8 96       	adiw	r28, 0x38	; 56
     8f0:	3f af       	std	Y+63, r19	; 0x3f
     8f2:	2e af       	std	Y+62, r18	; 0x3e
     8f4:	e8 97       	sbiw	r28, 0x38	; 56
     8f6:	1a c0       	rjmp	.+52     	; 0x92c <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     8f8:	ba 30       	cpi	r27, 0x0A	; 10
     8fa:	09 f4       	brne	.+2      	; 0x8fe <USB_ProcessHIDReport+0x33e>
     8fc:	cb c1       	rjmp	.+918    	; 0xc94 <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	8b 0f       	add	r24, r27
     902:	eb 96       	adiw	r28, 0x3b	; 59
     904:	ee ad       	ldd	r30, Y+62	; 0x3e
     906:	ff ad       	ldd	r31, Y+63	; 0x3f
     908:	eb 97       	sbiw	r28, 0x3b	; 59
     90a:	80 83       	st	Z, r24
     90c:	87 e0       	ldi	r24, 0x07	; 7
     90e:	9a 01       	movw	r18, r20
     910:	8b 9f       	mul	r24, r27
     912:	20 0d       	add	r18, r0
     914:	31 1d       	adc	r19, r1
     916:	11 24       	eor	r1, r1
     918:	20 57       	subi	r18, 0x70	; 112
     91a:	3c 4f       	sbci	r19, 0xFC	; 252
     91c:	e8 96       	adiw	r28, 0x38	; 56
     91e:	3f af       	std	Y+63, r19	; 0x3f
     920:	2e af       	std	Y+62, r18	; 0x3e
     922:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     924:	d9 01       	movw	r26, r18
     926:	1d 92       	st	X+, r1
     928:	8a 95       	dec	r24
     92a:	e9 f7       	brne	.-6      	; 0x926 <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	ef 96       	adiw	r28, 0x3f	; 63
     930:	ee ad       	ldd	r30, Y+62	; 0x3e
     932:	ff ad       	ldd	r31, Y+63	; 0x3f
     934:	ef 97       	sbiw	r28, 0x3f	; 63
     936:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     938:	d8 01       	movw	r26, r16
     93a:	5b 96       	adiw	r26, 0x1b	; 27
     93c:	8c 91       	ld	r24, X
     93e:	e8 96       	adiw	r28, 0x38	; 56
     940:	ee ad       	ldd	r30, Y+62	; 0x3e
     942:	ff ad       	ldd	r31, Y+63	; 0x3f
     944:	e8 97       	sbiw	r28, 0x38	; 56
     946:	80 83       	st	Z, r24
				break;
     948:	83 c1       	rjmp	.+774    	; 0xc50 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     94a:	e4 96       	adiw	r28, 0x34	; 52
     94c:	2f ad       	ldd	r18, Y+63	; 0x3f
     94e:	e4 97       	sbiw	r28, 0x34	; 52
     950:	28 30       	cpi	r18, 0x08	; 8
     952:	09 f4       	brne	.+2      	; 0x956 <USB_ProcessHIDReport+0x396>
     954:	97 c1       	rjmp	.+814    	; 0xc84 <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     956:	fe 01       	movw	r30, r28
     958:	ed 59       	subi	r30, 0x9D	; 157
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	e2 0f       	add	r30, r18
     95e:	f1 1d       	adc	r31, r1
     960:	e2 0f       	add	r30, r18
     962:	f1 1d       	adc	r31, r1
     964:	d1 82       	std	Z+1, r13	; 0x01
     966:	c0 82       	st	Z, r12
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	e4 96       	adiw	r28, 0x34	; 52
     96c:	2f af       	std	Y+63, r18	; 0x3f
     96e:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     970:	6f c1       	rjmp	.+734    	; 0xc50 <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     972:	e6 96       	adiw	r28, 0x36	; 54
     974:	2e ad       	ldd	r18, Y+62	; 0x3e
     976:	3f ad       	ldd	r19, Y+63	; 0x3f
     978:	e6 97       	sbiw	r28, 0x36	; 54
     97a:	23 2b       	or	r18, r19
     97c:	41 f4       	brne	.+16     	; 0x98e <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     97e:	9a 01       	movw	r18, r20
     980:	27 5b       	subi	r18, 0xB7	; 183
     982:	3c 4f       	sbci	r19, 0xFC	; 252
     984:	e6 96       	adiw	r28, 0x36	; 54
     986:	3f af       	std	Y+63, r19	; 0x3f
     988:	2e af       	std	Y+62, r18	; 0x3e
     98a:	e6 97       	sbiw	r28, 0x36	; 54
     98c:	1d c0       	rjmp	.+58     	; 0x9c8 <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     98e:	fa 01       	movw	r30, r20
     990:	e0 5b       	subi	r30, 0xB0	; 176
     992:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     994:	85 81       	ldd	r24, Z+5	; 0x05
     996:	96 81       	ldd	r25, Z+6	; 0x06
     998:	89 2b       	or	r24, r25
     99a:	61 f0       	breq	.+24     	; 0x9b4 <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     99c:	cd 57       	subi	r28, 0x7D	; 125
     99e:	df 4f       	sbci	r29, 0xFF	; 255
     9a0:	28 81       	ld	r18, Y
     9a2:	39 81       	ldd	r19, Y+1	; 0x01
     9a4:	c3 58       	subi	r28, 0x83	; 131
     9a6:	d0 40       	sbci	r29, 0x00	; 0
     9a8:	e2 17       	cp	r30, r18
     9aa:	f3 07       	cpc	r31, r19
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <USB_ProcessHIDReport+0x3f0>
     9ae:	6c c1       	rjmp	.+728    	; 0xc88 <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     9b0:	37 96       	adiw	r30, 0x07	; 7
     9b2:	f0 cf       	rjmp	.-32     	; 0x994 <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     9b4:	e6 96       	adiw	r28, 0x36	; 54
     9b6:	2e ad       	ldd	r18, Y+62	; 0x3e
     9b8:	3f ad       	ldd	r19, Y+63	; 0x3f
     9ba:	e6 97       	sbiw	r28, 0x36	; 54
     9bc:	36 83       	std	Z+6, r19	; 0x06
     9be:	25 83       	std	Z+5, r18	; 0x05
     9c0:	e6 96       	adiw	r28, 0x36	; 54
     9c2:	ff af       	std	Y+63, r31	; 0x3f
     9c4:	ee af       	std	Y+62, r30	; 0x3e
     9c6:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     9c8:	e6 96       	adiw	r28, 0x36	; 54
     9ca:	ae ad       	ldd	r26, Y+62	; 0x3e
     9cc:	bf ad       	ldd	r27, Y+63	; 0x3f
     9ce:	e6 97       	sbiw	r28, 0x36	; 54
     9d0:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     9d2:	f8 01       	movw	r30, r16
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
     9d6:	92 81       	ldd	r25, Z+2	; 0x02
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	9c 93       	st	X, r25
     9dc:	8e 93       	st	-X, r24
     9de:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     9e0:	e4 96       	adiw	r28, 0x34	; 52
     9e2:	2f ad       	ldd	r18, Y+63	; 0x3f
     9e4:	e4 97       	sbiw	r28, 0x34	; 52
     9e6:	22 23       	and	r18, r18
     9e8:	e1 f0       	breq	.+56     	; 0xa22 <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     9ea:	a5 96       	adiw	r28, 0x25	; 37
     9ec:	8e ad       	ldd	r24, Y+62	; 0x3e
     9ee:	9f ad       	ldd	r25, Y+63	; 0x3f
     9f0:	a5 97       	sbiw	r28, 0x25	; 37
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	9c 93       	st	X, r25
     9f6:	8e 93       	st	-X, r24
     9f8:	13 97       	sbiw	r26, 0x03	; 3
     9fa:	fe 01       	movw	r30, r28
     9fc:	ed 59       	subi	r30, 0x9D	; 157
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	e4 96       	adiw	r28, 0x34	; 52
     a04:	3f ad       	ldd	r19, Y+63	; 0x3f
     a06:	e4 97       	sbiw	r28, 0x34	; 52
     a08:	23 17       	cp	r18, r19
     a0a:	31 f0       	breq	.+12     	; 0xa18 <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	81 93       	st	Z+, r24
     a12:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	f5 cf       	rjmp	.-22     	; 0xa02 <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     a18:	31 50       	subi	r19, 0x01	; 1
     a1a:	e4 96       	adiw	r28, 0x34	; 52
     a1c:	3f af       	std	Y+63, r19	; 0x3f
     a1e:	e4 97       	sbiw	r28, 0x34	; 52
     a20:	17 c1       	rjmp	.+558    	; 0xc50 <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     a22:	48 14       	cp	r4, r8
     a24:	59 04       	cpc	r5, r9
     a26:	6a 04       	cpc	r6, r10
     a28:	7b 04       	cpc	r7, r11
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <USB_ProcessHIDReport+0x46e>
     a2c:	11 c1       	rjmp	.+546    	; 0xc50 <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     a2e:	e6 96       	adiw	r28, 0x36	; 54
     a30:	ae ad       	ldd	r26, Y+62	; 0x3e
     a32:	bf ad       	ldd	r27, Y+63	; 0x3f
     a34:	e6 97       	sbiw	r28, 0x36	; 54
     a36:	14 96       	adiw	r26, 0x04	; 4
     a38:	9c 92       	st	X, r9
     a3a:	8e 92       	st	-X, r8
     a3c:	13 97       	sbiw	r26, 0x03	; 3
     a3e:	bf ef       	ldi	r27, 0xFF	; 255
     a40:	8b 1a       	sub	r8, r27
     a42:	9b 0a       	sbc	r9, r27
     a44:	ab 0a       	sbc	r10, r27
     a46:	bb 0a       	sbc	r11, r27
     a48:	03 c1       	rjmp	.+518    	; 0xc50 <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     a4a:	e6 96       	adiw	r28, 0x36	; 54
     a4c:	2e ad       	ldd	r18, Y+62	; 0x3e
     a4e:	3f ad       	ldd	r19, Y+63	; 0x3f
     a50:	e6 97       	sbiw	r28, 0x36	; 54
     a52:	21 15       	cp	r18, r1
     a54:	31 05       	cpc	r19, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <USB_ProcessHIDReport+0x49a>
     a58:	19 c1       	rjmp	.+562    	; 0xc8c <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     a5a:	d9 01       	movw	r26, r18
     a5c:	15 96       	adiw	r26, 0x05	; 5
     a5e:	0d 90       	ld	r0, X+
     a60:	bc 91       	ld	r27, X
     a62:	a0 2d       	mov	r26, r0
     a64:	e6 96       	adiw	r28, 0x36	; 54
     a66:	bf af       	std	Y+63, r27	; 0x3f
     a68:	ae af       	std	Y+62, r26	; 0x3e
     a6a:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     a6c:	f1 c0       	rjmp	.+482    	; 0xc50 <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     a6e:	da 01       	movw	r26, r20
     a70:	fa e2       	ldi	r31, 0x2A	; 42
     a72:	f8 9f       	mul	r31, r24
     a74:	a0 0d       	add	r26, r0
     a76:	b1 1d       	adc	r27, r1
     a78:	11 24       	eor	r1, r1
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	fe 01       	movw	r30, r28
     a7e:	f9 96       	adiw	r30, 0x39	; 57
     a80:	8a e2       	ldi	r24, 0x2A	; 42
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	8a 95       	dec	r24
     a88:	e1 f7       	brne	.-8      	; 0xa82 <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     a8a:	c1 58       	subi	r28, 0x81	; 129
     a8c:	df 4f       	sbci	r29, 0xFF	; 255
     a8e:	88 81       	ld	r24, Y
     a90:	99 81       	ldd	r25, Y+1	; 0x01
     a92:	aa 81       	ldd	r26, Y+2	; 0x02
     a94:	bb 81       	ldd	r27, Y+3	; 0x03
     a96:	cf 57       	subi	r28, 0x7F	; 127
     a98:	d0 40       	sbci	r29, 0x00	; 0
     a9a:	89 2b       	or	r24, r25
     a9c:	8a 2b       	or	r24, r26
     a9e:	8b 2b       	or	r24, r27
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <USB_ProcessHIDReport+0x4e4>
     aa2:	8f c0       	rjmp	.+286    	; 0xbc2 <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     aa4:	3f 5f       	subi	r19, 0xFF	; 255
     aa6:	f8 01       	movw	r30, r16
     aa8:	82 8d       	ldd	r24, Z+26	; 0x1a
     aaa:	38 17       	cp	r19, r24
     aac:	08 f0       	brcs	.+2      	; 0xab0 <USB_ProcessHIDReport+0x4f0>
     aae:	d0 c0       	rjmp	.+416    	; 0xc50 <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     ab0:	f8 01       	movw	r30, r16
     ab2:	de 01       	movw	r26, r28
     ab4:	af 5b       	subi	r26, 0xBF	; 191
     ab6:	bf 4f       	sbci	r27, 0xFF	; 255
     ab8:	8a e1       	ldi	r24, 0x1A	; 26
     aba:	01 90       	ld	r0, Z+
     abc:	0d 92       	st	X+, r0
     abe:	8a 95       	dec	r24
     ac0:	e1 f7       	brne	.-8      	; 0xaba <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     ac2:	dd ae       	std	Y+61, r13	; 0x3d
     ac4:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     ac6:	e6 96       	adiw	r28, 0x36	; 54
     ac8:	ee ad       	ldd	r30, Y+62	; 0x3e
     aca:	ff ad       	ldd	r31, Y+63	; 0x3f
     acc:	e6 97       	sbiw	r28, 0x36	; 54
     ace:	21 96       	adiw	r28, 0x01	; 1
     ad0:	ff af       	std	Y+63, r31	; 0x3f
     ad2:	ee af       	std	Y+62, r30	; 0x3e
     ad4:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     ad6:	d8 01       	movw	r26, r16
     ad8:	5b 96       	adiw	r26, 0x1b	; 27
     ada:	8c 91       	ld	r24, X
     adc:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     ade:	e4 96       	adiw	r28, 0x34	; 52
     ae0:	bf ad       	ldd	r27, Y+63	; 0x3f
     ae2:	e4 97       	sbiw	r28, 0x34	; 52
     ae4:	bb 23       	and	r27, r27
     ae6:	e1 f0       	breq	.+56     	; 0xb20 <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     ae8:	a5 96       	adiw	r28, 0x25	; 37
     aea:	8e ad       	ldd	r24, Y+62	; 0x3e
     aec:	9f ad       	ldd	r25, Y+63	; 0x3f
     aee:	a5 97       	sbiw	r28, 0x25	; 37
     af0:	26 96       	adiw	r28, 0x06	; 6
     af2:	9f af       	std	Y+63, r25	; 0x3f
     af4:	8e af       	std	Y+62, r24	; 0x3e
     af6:	26 97       	sbiw	r28, 0x06	; 6
     af8:	fe 01       	movw	r30, r28
     afa:	ed 59       	subi	r30, 0x9D	; 157
     afc:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     afe:	a1 e0       	ldi	r26, 0x01	; 1
     b00:	e4 96       	adiw	r28, 0x34	; 52
     b02:	8f ad       	ldd	r24, Y+63	; 0x3f
     b04:	e4 97       	sbiw	r28, 0x34	; 52
     b06:	a8 17       	cp	r26, r24
     b08:	31 f0       	breq	.+12     	; 0xb16 <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	81 93       	st	Z+, r24
     b10:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     b12:	af 5f       	subi	r26, 0xFF	; 255
     b14:	f5 cf       	rjmp	.-22     	; 0xb00 <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     b16:	81 50       	subi	r24, 0x01	; 1
     b18:	e4 96       	adiw	r28, 0x34	; 52
     b1a:	8f af       	std	Y+63, r24	; 0x3f
     b1c:	e4 97       	sbiw	r28, 0x34	; 52
     b1e:	0e c0       	rjmp	.+28     	; 0xb3c <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b20:	48 14       	cp	r4, r8
     b22:	59 04       	cpc	r5, r9
     b24:	6a 04       	cpc	r6, r10
     b26:	7b 04       	cpc	r7, r11
     b28:	48 f0       	brcs	.+18     	; 0xb3c <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     b2a:	26 96       	adiw	r28, 0x06	; 6
     b2c:	9f ae       	std	Y+63, r9	; 0x3f
     b2e:	8e ae       	std	Y+62, r8	; 0x3e
     b30:	26 97       	sbiw	r28, 0x06	; 6
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	89 1a       	sub	r8, r25
     b36:	99 0a       	sbc	r9, r25
     b38:	a9 0a       	sbc	r10, r25
     b3a:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     b3c:	20 38       	cpi	r18, 0x80	; 128
     b3e:	11 f4       	brne	.+4      	; 0xb44 <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     b40:	1b ae       	std	Y+59, r1	; 0x3b
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     b44:	20 39       	cpi	r18, 0x90	; 144
     b46:	19 f4       	brne	.+6      	; 0xb4e <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     b48:	a1 e0       	ldi	r26, 0x01	; 1
     b4a:	ab af       	std	Y+59, r26	; 0x3b
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     b4e:	b2 e0       	ldi	r27, 0x02	; 2
     b50:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     b52:	8b ad       	ldd	r24, Y+59	; 0x3b
     b54:	e8 96       	adiw	r28, 0x38	; 56
     b56:	ee ad       	ldd	r30, Y+62	; 0x3e
     b58:	ff ad       	ldd	r31, Y+63	; 0x3f
     b5a:	e8 97       	sbiw	r28, 0x38	; 56
     b5c:	e8 0f       	add	r30, r24
     b5e:	f1 1d       	adc	r31, r1
     b60:	e8 0f       	add	r30, r24
     b62:	f1 1d       	adc	r31, r1
     b64:	81 81       	ldd	r24, Z+1	; 0x01
     b66:	92 81       	ldd	r25, Z+2	; 0x02
     b68:	9a af       	std	Y+58, r25	; 0x3a
     b6a:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     b6c:	d8 01       	movw	r26, r16
     b6e:	bc 91       	ld	r27, X
     b70:	81 81       	ldd	r24, Z+1	; 0x01
     b72:	92 81       	ldd	r25, Z+2	; 0x02
     b74:	8b 0f       	add	r24, r27
     b76:	91 1d       	adc	r25, r1
     b78:	92 83       	std	Z+2, r25	; 0x02
     b7a:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b7c:	8b ad       	ldd	r24, Y+59	; 0x3b
     b7e:	e8 96       	adiw	r28, 0x38	; 56
     b80:	ee ad       	ldd	r30, Y+62	; 0x3e
     b82:	ff ad       	ldd	r31, Y+63	; 0x3f
     b84:	e8 97       	sbiw	r28, 0x38	; 56
     b86:	e8 0f       	add	r30, r24
     b88:	f1 1d       	adc	r31, r1
     b8a:	e8 0f       	add	r30, r24
     b8c:	f1 1d       	adc	r31, r1
     b8e:	ed 96       	adiw	r28, 0x3d	; 61
     b90:	ae ad       	ldd	r26, Y+62	; 0x3e
     b92:	bf ad       	ldd	r27, Y+63	; 0x3f
     b94:	ed 97       	sbiw	r28, 0x3d	; 61
     b96:	8d 91       	ld	r24, X+
     b98:	9c 91       	ld	r25, X
     b9a:	01 80       	ldd	r0, Z+1	; 0x01
     b9c:	f2 81       	ldd	r31, Z+2	; 0x02
     b9e:	e0 2d       	mov	r30, r0
     ba0:	e8 17       	cp	r30, r24
     ba2:	f9 07       	cpc	r31, r25
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <USB_ProcessHIDReport+0x5e8>
     ba6:	fc 01       	movw	r30, r24
     ba8:	ed 96       	adiw	r28, 0x3d	; 61
     baa:	ae ad       	ldd	r26, Y+62	; 0x3e
     bac:	bf ad       	ldd	r27, Y+63	; 0x3f
     bae:	ed 97       	sbiw	r28, 0x3d	; 61
     bb0:	ed 93       	st	X+, r30
     bb2:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     bb4:	fa 01       	movw	r30, r20
     bb6:	80 81       	ld	r24, Z
     bb8:	84 31       	cpi	r24, 0x14	; 20
     bba:	09 f0       	breq	.+2      	; 0xbbe <USB_ProcessHIDReport+0x5fe>
     bbc:	58 cf       	rjmp	.-336    	; 0xa6e <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	6a c0       	rjmp	.+212    	; 0xc96 <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     bc2:	ce 01       	movw	r24, r28
     bc4:	c9 96       	adiw	r24, 0x39	; 57
     bc6:	c8 57       	subi	r28, 0x78	; 120
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	28 83       	st	Y, r18
     bcc:	c8 58       	subi	r28, 0x88	; 136
     bce:	d0 40       	sbci	r29, 0x00	; 0
     bd0:	c9 57       	subi	r28, 0x79	; 121
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	38 83       	st	Y, r19
     bd6:	c7 58       	subi	r28, 0x87	; 135
     bd8:	d0 40       	sbci	r29, 0x00	; 0
     bda:	c5 57       	subi	r28, 0x75	; 117
     bdc:	df 4f       	sbci	r29, 0xFF	; 255
     bde:	48 83       	st	Y, r20
     be0:	cb 58       	subi	r28, 0x8B	; 139
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	c4 57       	subi	r28, 0x74	; 116
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	58 83       	st	Y, r21
     bea:	cc 58       	subi	r28, 0x8C	; 140
     bec:	d0 40       	sbci	r29, 0x00	; 0
     bee:	c7 57       	subi	r28, 0x77	; 119
     bf0:	df 4f       	sbci	r29, 0xFF	; 255
     bf2:	68 83       	st	Y, r22
     bf4:	c9 58       	subi	r28, 0x89	; 137
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	c6 57       	subi	r28, 0x76	; 118
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	78 83       	st	Y, r23
     bfe:	ca 58       	subi	r28, 0x8A	; 138
     c00:	d0 40       	sbci	r29, 0x00	; 0
     c02:	bf dc       	rcall	.-1666   	; 0x582 <CALLBACK_HIDParser_FilterHIDReportItem>
     c04:	c8 57       	subi	r28, 0x78	; 120
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	28 81       	ld	r18, Y
     c0a:	c8 58       	subi	r28, 0x88	; 136
     c0c:	d0 40       	sbci	r29, 0x00	; 0
     c0e:	c9 57       	subi	r28, 0x79	; 121
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	38 81       	ld	r19, Y
     c14:	c7 58       	subi	r28, 0x87	; 135
     c16:	d0 40       	sbci	r29, 0x00	; 0
     c18:	c5 57       	subi	r28, 0x75	; 117
     c1a:	df 4f       	sbci	r29, 0xFF	; 255
     c1c:	48 81       	ld	r20, Y
     c1e:	cb 58       	subi	r28, 0x8B	; 139
     c20:	d0 40       	sbci	r29, 0x00	; 0
     c22:	c4 57       	subi	r28, 0x74	; 116
     c24:	df 4f       	sbci	r29, 0xFF	; 255
     c26:	58 81       	ld	r21, Y
     c28:	cc 58       	subi	r28, 0x8C	; 140
     c2a:	d0 40       	sbci	r29, 0x00	; 0
     c2c:	c7 57       	subi	r28, 0x77	; 119
     c2e:	df 4f       	sbci	r29, 0xFF	; 255
     c30:	68 81       	ld	r22, Y
     c32:	c9 58       	subi	r28, 0x89	; 137
     c34:	d0 40       	sbci	r29, 0x00	; 0
     c36:	c6 57       	subi	r28, 0x76	; 118
     c38:	df 4f       	sbci	r29, 0xFF	; 255
     c3a:	78 81       	ld	r23, Y
     c3c:	ca 58       	subi	r28, 0x8A	; 138
     c3e:	d0 40       	sbci	r29, 0x00	; 0
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <USB_ProcessHIDReport+0x686>
     c44:	2f cf       	rjmp	.-418    	; 0xaa4 <USB_ProcessHIDReport+0x4e4>
     c46:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
     c48:	8c 91       	ld	r24, X
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	8c 93       	st	X, r24
     c4e:	2a cf       	rjmp	.-428    	; 0xaa4 <USB_ProcessHIDReport+0x4e4>
     c50:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     c52:	8f ad       	ldd	r24, Y+63	; 0x3f
     c54:	e9 97       	sbiw	r28, 0x39	; 57
     c56:	8c 70       	andi	r24, 0x0C	; 12
     c58:	09 f0       	breq	.+2      	; 0xc5c <USB_ProcessHIDReport+0x69c>
     c5a:	1d cd       	rjmp	.-1478   	; 0x696 <USB_ProcessHIDReport+0xd6>
     c5c:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     c5e:	51 2c       	mov	r5, r1
     c60:	32 01       	movw	r6, r4
     c62:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     c64:	91 2c       	mov	r9, r1
     c66:	54 01       	movw	r10, r8
     c68:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     c6a:	1f ae       	std	Y+63, r1	; 0x3f
     c6c:	e4 97       	sbiw	r28, 0x34	; 52
     c6e:	13 cd       	rjmp	.-1498   	; 0x696 <USB_ProcessHIDReport+0xd6>
     c70:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     c72:	8c 91       	ld	r24, X
     c74:	81 11       	cpse	r24, r1
     c76:	0c c0       	rjmp	.+24     	; 0xc90 <USB_ProcessHIDReport+0x6d0>
     c78:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c7c:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c80:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     c82:	09 c0       	rjmp	.+18     	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c84:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c88:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c8c:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c90:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <USB_ProcessHIDReport+0x6d6>
     c94:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     c96:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     c98:	df 4f       	sbci	r29, 0xFF	; 255
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	7f 90       	pop	r7
     cbe:	6f 90       	pop	r6
     cc0:	5f 90       	pop	r5
     cc2:	4f 90       	pop	r4
     cc4:	3f 90       	pop	r3
     cc6:	2f 90       	pop	r2
     cc8:	08 95       	ret

00000cca <USB_GetHIDReportItemInfo>:
     cca:	ef 92       	push	r14

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	09 f4       	brne	.+2      	; 0xcde <USB_GetHIDReportItemInfo+0x14>
     cdc:	4c c0       	rjmp	.+152    	; 0xd76 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     cde:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     ce0:	d0 81       	ld	r29, Z
     ce2:	c1 81       	ldd	r28, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     ce4:	25 81       	ldd	r18, Z+5	; 0x05
     ce6:	22 23       	and	r18, r18
     ce8:	29 f0       	breq	.+10     	; 0xcf4 <USB_GetHIDReportItemInfo+0x2a>
	{
		if (ReportItem->ReportID != ReportData[0])
     cea:	dc 01       	movw	r26, r24
     cec:	4c 91       	ld	r20, X
     cee:	24 13       	cpse	r18, r20
     cf0:	42 c0       	rjmp	.+132    	; 0xd76 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     cf2:	01 96       	adiw	r24, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
     cf4:	42 a1       	ldd	r20, Z+34	; 0x22
     cf6:	53 a1       	ldd	r21, Z+35	; 0x23
     cf8:	64 a1       	ldd	r22, Z+36	; 0x24
     cfa:	75 a1       	ldd	r23, Z+37	; 0x25
     cfc:	46 a3       	std	Z+38, r20	; 0x26
     cfe:	57 a3       	std	Z+39, r21	; 0x27
     d00:	60 a7       	std	Z+40, r22	; 0x28
     d02:	71 a7       	std	Z+41, r23	; 0x29
	ReportItem->Value = 0;
     d04:	12 a2       	std	Z+34, r1	; 0x22
     d06:	13 a2       	std	Z+35, r1	; 0x23
     d08:	14 a2       	std	Z+36, r1	; 0x24
     d0a:	15 a2       	std	Z+37, r1	; 0x25
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     d0c:	ad 2f       	mov	r26, r29
     d0e:	bc 2f       	mov	r27, r28
	uint32_t BitMask      = (1 << 0);
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	7d 01       	movw	r14, r26
     d1a:	e3 0e       	add	r14, r19
     d1c:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     d1e:	ea 16       	cp	r14, r26
     d20:	fb 06       	cpc	r15, r27
     d22:	39 f1       	breq	.+78     	; 0xd72 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     d24:	9d 01       	movw	r18, r26
     d26:	c3 e0       	ldi	r28, 0x03	; 3
     d28:	36 95       	lsr	r19
     d2a:	27 95       	ror	r18
     d2c:	ca 95       	dec	r28
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <USB_GetHIDReportItemInfo+0x5e>
     d30:	28 0f       	add	r18, r24
     d32:	39 1f       	adc	r19, r25
     d34:	e9 01       	movw	r28, r18
     d36:	28 81       	ld	r18, Y
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8d 01       	movw	r16, r26
     d3c:	07 70       	andi	r16, 0x07	; 7
     d3e:	11 27       	eor	r17, r17
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <USB_GetHIDReportItemInfo+0x7c>
     d42:	35 95       	asr	r19
     d44:	27 95       	ror	r18
     d46:	0a 95       	dec	r16
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <USB_GetHIDReportItemInfo+0x78>
     d4a:	20 ff       	sbrs	r18, 0
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     d4e:	02 a1       	ldd	r16, Z+34	; 0x22
     d50:	13 a1       	ldd	r17, Z+35	; 0x23
     d52:	24 a1       	ldd	r18, Z+36	; 0x24
     d54:	35 a1       	ldd	r19, Z+37	; 0x25
     d56:	04 2b       	or	r16, r20
     d58:	15 2b       	or	r17, r21
     d5a:	26 2b       	or	r18, r22
     d5c:	37 2b       	or	r19, r23
     d5e:	02 a3       	std	Z+34, r16	; 0x22
     d60:	13 a3       	std	Z+35, r17	; 0x23
     d62:	24 a3       	std	Z+36, r18	; 0x24
     d64:	35 a3       	std	Z+37, r19	; 0x25

		CurrentBit++;
     d66:	11 96       	adiw	r26, 0x01	; 1
		BitMask <<= 1;
     d68:	44 0f       	add	r20, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	66 1f       	adc	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	d6 cf       	rjmp	.-84     	; 0xd1e <USB_GetHIDReportItemInfo+0x54>
	}

	return true;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <USB_GetHIDReportItemInfo+0xae>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
     d76:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	08 95       	ret

00000d86 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     d86:	fc 01       	movw	r30, r24
     d88:	e4 0f       	add	r30, r20
     d8a:	f1 1d       	adc	r31, r1
     d8c:	e4 0f       	add	r30, r20
     d8e:	f1 1d       	adc	r31, r1
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	df 01       	movw	r26, r30
     d96:	a2 0f       	add	r26, r18
     d98:	b3 1f       	adc	r27, r19
     d9a:	af 56       	subi	r26, 0x6F	; 111
     d9c:	bc 4f       	sbci	r27, 0xFC	; 252
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     d9e:	4d 91       	ld	r20, X+
     da0:	5c 91       	ld	r21, X
     da2:	dc 01       	movw	r26, r24
     da4:	a2 0f       	add	r26, r18
     da6:	b3 1f       	adc	r27, r19
     da8:	a0 57       	subi	r26, 0x70	; 112
     daa:	bc 4f       	sbci	r27, 0xFC	; 252

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     dac:	7c 91       	ld	r23, X
     dae:	76 13       	cpse	r23, r22
     db0:	12 c0       	rjmp	.+36     	; 0xdd6 <USB_GetHIDReportSize+0x50>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	ca 01       	movw	r24, r20
     db8:	87 70       	andi	r24, 0x07	; 7
     dba:	99 27       	eor	r25, r25
     dbc:	89 2b       	or	r24, r25
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <USB_GetHIDReportSize+0x3e>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	ca 01       	movw	r24, r20
     dc6:	43 e0       	ldi	r20, 0x03	; 3
     dc8:	96 95       	lsr	r25
     dca:	87 95       	ror	r24
     dcc:	4a 95       	dec	r20
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <USB_GetHIDReportSize+0x42>
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19
     dd4:	08 95       	ret
     dd6:	29 5f       	subi	r18, 0xF9	; 249
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     dda:	26 34       	cpi	r18, 0x46	; 70
     ddc:	31 05       	cpc	r19, r1
     dde:	d1 f6       	brne	.-76     	; 0xd94 <USB_GetHIDReportSize+0xe>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
}
     de4:	08 95       	ret

00000de6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     de6:	80 91 9e 00 	lds	r24, 0x009E
     dea:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     dec:	90 91 a0 00 	lds	r25, 0x00A0
     df0:	9d 7f       	andi	r25, 0xFD	; 253
     df2:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     df6:	90 91 9e 00 	lds	r25, 0x009E
     dfa:	92 60       	ori	r25, 0x02	; 2
     dfc:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e00:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e04:	91 fd       	sbrc	r25, 1
     e06:	fc cf       	rjmp	.-8      	; 0xe00 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e08:	90 91 9e 00 	lds	r25, 0x009E
     e0c:	91 60       	ori	r25, 0x01	; 1
     e0e:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     e12:	10 92 04 05 	sts	0x0504, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e16:	90 91 a0 00 	lds	r25, 0x00A0
     e1a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e1c:	20 91 a0 00 	lds	r18, 0x00A0
     e20:	2f 7d       	andi	r18, 0xDF	; 223
     e22:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e26:	20 91 9f 00 	lds	r18, 0x009F
     e2a:	2f 7d       	andi	r18, 0xDF	; 223
     e2c:	20 93 9f 00 	sts	0x009F, r18
     e30:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e32:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e36:	35 ff       	sbrs	r19, 5
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e3a:	20 91 9f 00 	lds	r18, 0x009F
     e3e:	2f 7d       	andi	r18, 0xDF	; 223
     e40:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e44:	20 91 9f 00 	lds	r18, 0x009F
     e48:	2d 7f       	andi	r18, 0xFD	; 253
     e4a:	20 93 9f 00 	sts	0x009F, r18
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e50:	ef ec       	ldi	r30, 0xCF	; 207
     e52:	f7 e0       	ldi	r31, 0x07	; 7
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <USB_Host_ResetDevice+0x6e>
     e58:	00 c0       	rjmp	.+0      	; 0xe5a <USB_Host_ResetDevice+0x74>
     e5a:	00 00       	nop
     e5c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     e5e:	49 f7       	brne	.-46     	; 0xe32 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     e60:	99 23       	and	r25, r25
     e62:	29 f0       	breq	.+10     	; 0xe6e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e64:	90 91 a0 00 	lds	r25, 0x00A0
     e68:	90 62       	ori	r25, 0x20	; 32
     e6a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     e6e:	81 11       	cpse	r24, r1
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     e72:	80 91 9e 00 	lds	r24, 0x009E
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e7c:	80 91 a0 00 	lds	r24, 0x00A0
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	80 93 a0 00 	sts	0x00A0, r24
     e86:	08 95       	ret

00000e88 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e88:	20 91 9e 00 	lds	r18, 0x009E
     e8c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e8e:	90 91 a0 00 	lds	r25, 0x00A0
     e92:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e94:	30 91 a0 00 	lds	r19, 0x00A0
     e98:	3f 7d       	andi	r19, 0xDF	; 223
     e9a:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e9e:	30 91 9f 00 	lds	r19, 0x009F
     ea2:	3f 7d       	andi	r19, 0xDF	; 223
     ea4:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ea8:	30 91 9e 00 	lds	r19, 0x009E
     eac:	31 60       	ori	r19, 0x01	; 1
     eae:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     eb2:	88 23       	and	r24, r24
     eb4:	39 f1       	breq	.+78     	; 0xf04 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     eb6:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     eba:	35 ff       	sbrs	r19, 5
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ebe:	30 91 9f 00 	lds	r19, 0x009F
     ec2:	3f 7d       	andi	r19, 0xDF	; 223
     ec4:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     ec8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     eca:	30 91 0e 05 	lds	r19, 0x050E
     ece:	31 30       	cpi	r19, 0x01	; 1
     ed0:	c1 f0       	breq	.+48     	; 0xf02 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     ed2:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     ed6:	34 ff       	sbrs	r19, 4
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     eda:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     ede:	80 91 a6 00 	lds	r24, 0x00A6
     ee2:	8f 7e       	andi	r24, 0xEF	; 239
     ee4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     ee8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     eec:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     ef0:	31 ff       	sbrs	r19, 1
     ef2:	df cf       	rjmp	.-66     	; 0xeb2 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     ef4:	80 91 a6 00 	lds	r24, 0x00A6
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
     efa:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     efe:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     f02:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     f04:	21 11       	cpse	r18, r1
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f08:	20 91 9e 00 	lds	r18, 0x009E
     f0c:	2e 7f       	andi	r18, 0xFE	; 254
     f0e:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f12:	99 23       	and	r25, r25
     f14:	29 f0       	breq	.+10     	; 0xf20 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f16:	90 91 a0 00 	lds	r25, 0x00A0
     f1a:	90 62       	ori	r25, 0x20	; 32
     f1c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f20:	08 95       	ret

00000f22 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	28 97       	sbiw	r28, 0x08	; 8
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     f3a:	80 91 0e 05 	lds	r24, 0x050E
     f3e:	85 30       	cpi	r24, 0x05	; 5
     f40:	09 f4       	brne	.+2      	; 0xf44 <USB_Host_ProcessNextHostState+0x22>
     f42:	9c c0       	rjmp	.+312    	; 0x107c <USB_Host_ProcessNextHostState+0x15a>
     f44:	68 f4       	brcc	.+26     	; 0xf60 <USB_Host_ProcessNextHostState+0x3e>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	e1 f1       	breq	.+120    	; 0xfc2 <USB_Host_ProcessNextHostState+0xa0>
     f4a:	18 f4       	brcc	.+6      	; 0xf52 <USB_Host_ProcessNextHostState+0x30>
     f4c:	88 23       	and	r24, r24
     f4e:	d9 f0       	breq	.+54     	; 0xf86 <USB_Host_ProcessNextHostState+0x64>
     f50:	ff c0       	rjmp	.+510    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	09 f4       	brne	.+2      	; 0xf58 <USB_Host_ProcessNextHostState+0x36>
     f56:	3f c0       	rjmp	.+126    	; 0xfd6 <USB_Host_ProcessNextHostState+0xb4>
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	09 f4       	brne	.+2      	; 0xf5e <USB_Host_ProcessNextHostState+0x3c>
     f5c:	67 c0       	rjmp	.+206    	; 0x102c <USB_Host_ProcessNextHostState+0x10a>
     f5e:	f8 c0       	rjmp	.+496    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     f60:	87 30       	cpi	r24, 0x07	; 7
     f62:	09 f4       	brne	.+2      	; 0xf66 <USB_Host_ProcessNextHostState+0x44>
     f64:	a6 c0       	rjmp	.+332    	; 0x10b2 <USB_Host_ProcessNextHostState+0x190>
     f66:	08 f4       	brcc	.+2      	; 0xf6a <USB_Host_ProcessNextHostState+0x48>
     f68:	96 c0       	rjmp	.+300    	; 0x1096 <USB_Host_ProcessNextHostState+0x174>
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	09 f4       	brne	.+2      	; 0xf70 <USB_Host_ProcessNextHostState+0x4e>
     f6e:	bf c0       	rjmp	.+382    	; 0x10ee <USB_Host_ProcessNextHostState+0x1cc>
     f70:	89 30       	cpi	r24, 0x09	; 9
     f72:	09 f0       	breq	.+2      	; 0xf76 <USB_Host_ProcessNextHostState+0x54>
     f74:	ed c0       	rjmp	.+474    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     f7c:	8a e0       	ldi	r24, 0x0A	; 10
     f7e:	80 93 0e 05 	sts	0x050E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     f82:	76 da       	rcall	.-2836   	; 0x470 <EVENT_USB_Host_DeviceEnumerationComplete>
     f84:	e5 c0       	rjmp	.+458    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
			break;
     f86:	00 91 02 05 	lds	r16, 0x0502
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     f8a:	10 91 03 05 	lds	r17, 0x0503
     f8e:	01 15       	cp	r16, r1
     f90:	11 05       	cpc	r17, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <USB_Host_ProcessNextHostState+0x74>
     f94:	dd c0       	rjmp	.+442    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     f96:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f98:	77 df       	rcall	.-274    	; 0xe88 <USB_Host_WaitMS>
     f9a:	88 23       	and	r24, r24
     f9c:	31 f0       	breq	.+12     	; 0xfaa <USB_Host_ProcessNextHostState+0x88>
     f9e:	90 91 01 05 	lds	r25, 0x0501
				{
					USB_HostState = PostWaitState;
     fa2:	90 93 0e 05 	sts	0x050E, r25
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	c5 c0       	rjmp	.+394    	; 0x1134 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     faa:	01 50       	subi	r16, 0x01	; 1
					break;
     fac:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     fae:	10 93 03 05 	sts	0x0503, r17
     fb2:	00 93 02 05 	sts	0x0502, r16
     fb6:	01 2b       	or	r16, r17
     fb8:	09 f0       	breq	.+2      	; 0xfbc <USB_Host_ProcessNextHostState+0x9a>
     fba:	ca c0       	rjmp	.+404    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     fbc:	80 91 01 05 	lds	r24, 0x0501
				  USB_HostState = PostWaitState;
     fc0:	07 c0       	rjmp	.+14     	; 0xfd0 <USB_Host_ProcessNextHostState+0xae>
     fc2:	88 ee       	ldi	r24, 0xE8	; 232
     fc4:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     fc6:	90 93 03 05 	sts	0x0503, r25
     fca:	80 93 02 05 	sts	0x0502, r24
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	80 93 0e 05 	sts	0x050E, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     fd4:	bd c0       	rjmp	.+378    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     fd6:	80 91 02 05 	lds	r24, 0x0502
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     fda:	90 91 03 05 	lds	r25, 0x0503
     fde:	9c 01       	movw	r18, r24
     fe0:	21 50       	subi	r18, 0x01	; 1
     fe2:	31 09       	sbc	r19, r1
     fe4:	30 93 03 05 	sts	0x0503, r19
     fe8:	20 93 02 05 	sts	0x0502, r18
     fec:	89 2b       	or	r24, r25
     fee:	39 f0       	breq	.+14     	; 0xffe <USB_Host_ProcessNextHostState+0xdc>
     ff0:	8f ec       	ldi	r24, 0xCF	; 207
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <USB_Host_ProcessNextHostState+0xd2>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <USB_Host_ProcessNextHostState+0xd8>
     ffa:	00 00       	nop
     ffc:	a9 c0       	rjmp	.+338    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
     ffe:	77 98       	cbi	0x0e, 7	; 14
    1000:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	80 93 d8 00 	sts	0x00D8, r24
    100a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    100e:	8b 7f       	andi	r24, 0xFB	; 251
    1010:	80 93 dd 00 	sts	0x00DD, r24
    1014:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1018:	80 61       	ori	r24, 0x10	; 16
    101a:	80 93 d7 00 	sts	0x00D7, r24
    101e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	80 93 dd 00 	sts	0x00DD, r24
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	d2 cf       	rjmp	.-92     	; 0xfd0 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    102c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1030:	80 ff       	sbrs	r24, 0
    1032:	8e c0       	rjmp	.+284    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1034:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1038:	8e 7f       	andi	r24, 0xFE	; 254
    103a:	80 93 9f 00 	sts	0x009F, r24
    103e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	80 93 9f 00 	sts	0x009F, r24
    1048:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    104c:	8d 7f       	andi	r24, 0xFD	; 253
    104e:	80 93 df 00 	sts	0x00DF, r24
    1052:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1056:	82 60       	ori	r24, 0x02	; 2
    1058:	80 93 de 00 	sts	0x00DE, r24
    105c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	80 93 9e 00 	sts	0x009E, r24
    1066:	53 d1       	rcall	.+678    	; 0x130e <Pipe_ClearPipes>
    1068:	10 92 0e 05 	sts	0x050E, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    106c:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	90 93 03 05 	sts	0x0503, r25
    1074:	80 93 02 05 	sts	0x0502, r24
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <USB_Host_ProcessNextHostState+0x16e>
    107c:	b4 de       	rcall	.-664    	; 0xde6 <USB_Host_ResetDevice>
    107e:	10 92 0e 05 	sts	0x050E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1082:	88 ec       	ldi	r24, 0xC8	; 200
    1084:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1086:	90 93 03 05 	sts	0x0503, r25
    108a:	80 93 02 05 	sts	0x0502, r24
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	80 93 01 05 	sts	0x0501, r24
    1094:	5d c0       	rjmp	.+186    	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
    1096:	01 e0       	ldi	r16, 0x01	; 1
    1098:	20 e4       	ldi	r18, 0x40	; 64
    109a:	30 e0       	ldi	r19, 0x00	; 0
			break;
    109c:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	ae d0       	rcall	.+348    	; 0x1200 <Pipe_ConfigurePipe>
    10a4:	81 11       	cpse	r24, r1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <USB_Host_ProcessNextHostState+0x18c>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	43 c0       	rjmp	.+134    	; 0x1134 <USB_Host_ProcessNextHostState+0x212>
    10ae:	87 e0       	ldi	r24, 0x07	; 7
    10b0:	8f cf       	rjmp	.-226    	; 0xfd0 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    10b2:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    10b4:	e8 e1       	ldi	r30, 0x18	; 24
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    10b8:	a6 e0       	ldi	r26, 0x06	; 6
    10ba:	b5 e0       	ldi	r27, 0x05	; 5
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    10bc:	01 90       	ld	r0, Z+
    10be:	0d 92       	st	X+, r0
    10c0:	8a 95       	dec	r24
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <USB_Host_ProcessNextHostState+0x19a>
    10c4:	10 92 a7 00 	sts	0x00A7, r1
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	78 d3       	rcall	.+1776   	; 0x17be <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ce:	81 11       	cpse	r24, r1
    10d0:	30 c0       	rjmp	.+96     	; 0x1132 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    10d2:	88 85       	ldd	r24, Y+8	; 0x08
    10d4:	80 93 17 01 	sts	0x0117, r24
    10d8:	86 de       	rcall	.-756    	; 0xde6 <USB_Host_ResetDevice>
    10da:	10 92 0e 05 	sts	0x050E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	90 93 03 05 	sts	0x0503, r25

			USB_Host_ResetDevice();
    10e6:	80 93 02 05 	sts	0x0502, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    10ea:	88 e0       	ldi	r24, 0x08	; 8
    10ec:	d1 cf       	rjmp	.-94     	; 0x1090 <USB_Host_ProcessNextHostState+0x16e>
    10ee:	20 91 17 01 	lds	r18, 0x0117
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	01 e0       	ldi	r16, 0x01	; 1
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    10fc:	81 d0       	rcall	.+258    	; 0x1200 <Pipe_ConfigurePipe>
    10fe:	88 23       	and	r24, r24
    1100:	99 f2       	breq	.-90     	; 0x10a8 <USB_Host_ProcessNextHostState+0x186>
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	e0 e2       	ldi	r30, 0x20	; 32
    1106:	f1 e0       	ldi	r31, 0x01	; 1
    1108:	a6 e0       	ldi	r26, 0x06	; 6
    110a:	b5 e0       	ldi	r27, 0x05	; 5
    110c:	01 90       	ld	r0, Z+
    110e:	0d 92       	st	X+, r0
    1110:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1112:	e1 f7       	brne	.-8      	; 0x110c <USB_Host_ProcessNextHostState+0x1ea>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	52 d3       	rcall	.+1700   	; 0x17be <USB_Host_SendControlRequest>
    111a:	81 11       	cpse	r24, r1
    111c:	0a c0       	rjmp	.+20     	; 0x1132 <USB_Host_ProcessNextHostState+0x210>
    111e:	10 92 0e 05 	sts	0x050E, r1
    1122:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	90 93 03 05 	sts	0x0503, r25
    112a:	80 93 02 05 	sts	0x0502, r24
    112e:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1130:	af cf       	rjmp	.-162    	; 0x1090 <USB_Host_ProcessNextHostState+0x16e>
    1132:	93 e0       	ldi	r25, 0x03	; 3
    1134:	20 91 0e 05 	lds	r18, 0x050E
    1138:	21 30       	cpi	r18, 0x01	; 1
    113a:	51 f0       	breq	.+20     	; 0x1150 <USB_Host_ProcessNextHostState+0x22e>
    113c:	68 2f       	mov	r22, r24
    113e:	89 2f       	mov	r24, r25
    1140:	08 da       	rcall	.-3056   	; 0x552 <EVENT_USB_Host_DeviceEnumerationFailed>
    1142:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1146:	81 60       	ori	r24, 0x01	; 1
    1148:	80 93 dd 00 	sts	0x00DD, r24
    114c:	8b d9       	rcall	.-3306   	; 0x464 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    114e:	63 d1       	rcall	.+710    	; 0x1416 <USB_ResetInterface>
    1150:	28 96       	adiw	r28, 0x08	; 8
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16

		USB_ResetInterface();
    1164:	08 95       	ret

00001166 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	7c 01       	movw	r14, r24
    1178:	8b 01       	movw	r16, r22
    117a:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117c:	80 91 aa 00 	lds	r24, 0x00AA
    1180:	8f 7c       	andi	r24, 0xCF	; 207
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1188:	00 d1       	rcall	.+512    	; 0x138a <Pipe_WaitUntilReady>
    118a:	81 11       	cpse	r24, r1
    118c:	30 c0       	rjmp	.+96     	; 0x11ee <Pipe_Read_Stream_LE+0x88>
    118e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1190:	31 f0       	breq	.+12     	; 0x119e <Pipe_Read_Stream_LE+0x38>
    1192:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1194:	99 81       	ldd	r25, Y+1	; 0x01
    1196:	08 1b       	sub	r16, r24
    1198:	19 0b       	sbc	r17, r25
    119a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    119c:	f9 1e       	adc	r15, r25
    119e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11a0:	d1 2c       	mov	r13, r1
    11a2:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    11a4:	11 05       	cpc	r17, r1
    11a6:	11 f1       	breq	.+68     	; 0x11ec <Pipe_Read_Stream_LE+0x86>
    11a8:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11ac:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <Pipe_Read_Stream_LE+0x70>
    11b0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11b4:	8e 77       	andi	r24, 0x7E	; 126
    11b6:	80 93 a6 00 	sts	0x00A6, r24
    11ba:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    11bc:	41 f0       	breq	.+16     	; 0x11ce <Pipe_Read_Stream_LE+0x68>
    11be:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	8c 0d       	add	r24, r12
    11c4:	9d 1d       	adc	r25, r13
    11c6:	99 83       	std	Y+1, r25	; 0x01
    11c8:	88 83       	st	Y, r24
    11ca:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <Pipe_Read_Stream_LE+0x88>
    11ce:	dd d0       	rcall	.+442    	; 0x138a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    11d0:	88 23       	and	r24, r24
    11d2:	39 f3       	breq	.-50     	; 0x11a2 <Pipe_Read_Stream_LE+0x3c>
    11d4:	0c c0       	rjmp	.+24     	; 0x11ee <Pipe_Read_Stream_LE+0x88>
    11d6:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11da:	f7 01       	movw	r30, r14
    11dc:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    11de:	7f 01       	movw	r14, r30
    11e0:	01 50       	subi	r16, 0x01	; 1
    11e2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    11e4:	ff ef       	ldi	r31, 0xFF	; 255
    11e6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    11e8:	df 0a       	sbc	r13, r31
    11ea:	db cf       	rjmp	.-74     	; 0x11a2 <Pipe_Read_Stream_LE+0x3c>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    11f0:	cf 91       	pop	r28
}
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret

00001200 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1200:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1202:	e8 2f       	mov	r30, r24
    1204:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1206:	87 ff       	sbrs	r24, 7
    1208:	02 c0       	rjmp	.+4      	; 0x120e <Pipe_ConfigurePipe+0xe>
    120a:	80 e1       	ldi	r24, 0x10	; 16
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <Pipe_ConfigurePipe+0x10>
    120e:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    1210:	e7 30       	cpi	r30, 0x07	; 7
    1212:	10 f0       	brcs	.+4      	; 0x1218 <Pipe_ConfigurePipe+0x18>
	  return false;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	5a c0       	rjmp	.+180    	; 0x12cc <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    1218:	61 11       	cpse	r22, r1
    121a:	01 c0       	rjmp	.+2      	; 0x121e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    121c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    121e:	90 e4       	ldi	r25, 0x40	; 64
    1220:	69 9f       	mul	r22, r25
    1222:	b0 01       	movw	r22, r0
    1224:	11 24       	eor	r1, r1
    1226:	4f 70       	andi	r20, 0x0F	; 15
    1228:	46 2b       	or	r20, r22
    122a:	48 2b       	or	r20, r24
    122c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    122e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1232:	5e 13       	cpse	r21, r30
    1234:	19 c0       	rjmp	.+50     	; 0x1268 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    1236:	02 30       	cpi	r16, 0x02	; 2
    1238:	10 f0       	brcs	.+4      	; 0x123e <Pipe_ConfigurePipe+0x3e>
    123a:	76 e0       	ldi	r23, 0x06	; 6
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <Pipe_ConfigurePipe+0x40>
    123e:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1240:	88 e0       	ldi	r24, 0x08	; 8
    1242:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1244:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1246:	82 17       	cp	r24, r18
    1248:	93 07       	cpc	r25, r19
    124a:	40 f0       	brcs	.+16     	; 0x125c <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    124c:	86 2f       	mov	r24, r22
    124e:	82 95       	swap	r24
    1250:	80 7f       	andi	r24, 0xF0	; 240
    1252:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1254:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1256:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e c0       	rjmp	.+28     	; 0x1278 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    125c:	65 30       	cpi	r22, 0x05	; 5
    125e:	b1 f3       	breq	.-20     	; 0x124c <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    1260:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	ef cf       	rjmp	.-34     	; 0x1246 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1268:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    126c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1270:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1274:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1278:	81 fd       	sbrc	r24, 1
    127a:	07 c0       	rjmp	.+14     	; 0x128a <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    127c:	5f 5f       	subi	r21, 0xFF	; 255
    127e:	57 30       	cpi	r21, 0x07	; 7
    1280:	b1 f6       	brne	.-84     	; 0x122e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1282:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	21 c0       	rjmp	.+66     	; 0x12cc <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    128a:	90 91 a9 00 	lds	r25, 0x00A9
    128e:	9e 7f       	andi	r25, 0xFE	; 254
    1290:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1294:	90 91 ab 00 	lds	r25, 0x00AB
    1298:	9d 7f       	andi	r25, 0xFD	; 253
    129a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    129e:	90 91 a9 00 	lds	r25, 0x00A9
    12a2:	91 60       	ori	r25, 0x01	; 1
    12a4:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    12a8:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    12ac:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    12b0:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    12b4:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    12b8:	80 91 a9 00 	lds	r24, 0x00A9
    12bc:	80 62       	ori	r24, 0x20	; 32
    12be:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    12c2:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    12c6:	87 fd       	sbrc	r24, 7
    12c8:	d9 cf       	rjmp	.-78     	; 0x127c <Pipe_ConfigurePipe+0x7c>
    12ca:	a4 cf       	rjmp	.-184    	; 0x1214 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	f6 2e       	mov	r15, r22
    12dc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	1f 15       	cp	r17, r15
    12e2:	71 f0       	breq	.+28     	; 0x1300 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
    12e4:	88 81       	ld	r24, Y
    12e6:	88 23       	and	r24, r24
    12e8:	41 f0       	breq	.+16     	; 0x12fa <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	3a 81       	ldd	r19, Y+2	; 0x02
    12ee:	0d 81       	ldd	r16, Y+5	; 0x05
    12f0:	4b 81       	ldd	r20, Y+3	; 0x03
    12f2:	6c 81       	ldd	r22, Y+4	; 0x04
    12f4:	85 df       	rcall	.-246    	; 0x1200 <Pipe_ConfigurePipe>
    12f6:	88 23       	and	r24, r24
    12f8:	21 f0       	breq	.+8      	; 0x1302 <Pipe_ConfigurePipeTable+0x32>
    12fa:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    12fc:	26 96       	adiw	r28, 0x06	; 6
    12fe:	f0 cf       	rjmp	.-32     	; 0x12e0 <Pipe_ConfigurePipeTable+0x10>
    1300:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
    1302:	df 91       	pop	r29
}
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	08 95       	ret

0000130e <Pipe_ClearPipes>:
    130e:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1312:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1314:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1318:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    131c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1320:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1324:	90 91 a9 00 	lds	r25, 0x00A9
    1328:	9e 7f       	andi	r25, 0xFE	; 254
    132a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	87 30       	cpi	r24, 0x07	; 7
    1332:	81 f7       	brne	.-32     	; 0x1314 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1334:	08 95       	ret

00001336 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1336:	90 91 a7 00 	lds	r25, 0x00A7
    133a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    133c:	20 91 aa 00 	lds	r18, 0x00AA
    1340:	20 ff       	sbrs	r18, 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <Pipe_IsEndpointBound+0x12>
    1344:	20 e8       	ldi	r18, 0x80	; 128
    1346:	01 c0       	rjmp	.+2      	; 0x134a <Pipe_IsEndpointBound+0x14>
    1348:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    134a:	42 2f       	mov	r20, r18
    134c:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    134e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1350:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1354:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1358:	27 ff       	sbrs	r18, 7
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    135c:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1360:	53 2f       	mov	r21, r19
    1362:	5f 70       	andi	r21, 0x0F	; 15
    1364:	35 ff       	sbrs	r19, 5
    1366:	02 c0       	rjmp	.+4      	; 0x136c <Pipe_IsEndpointBound+0x36>
    1368:	20 e8       	ldi	r18, 0x80	; 128
    136a:	01 c0       	rjmp	.+2      	; 0x136e <Pipe_IsEndpointBound+0x38>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1370:	28 17       	cp	r18, r24
    1372:	49 f0       	breq	.+18     	; 0x1386 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1374:	9f 5f       	subi	r25, 0xFF	; 255
    1376:	97 30       	cpi	r25, 0x07	; 7
    1378:	59 f7       	brne	.-42     	; 0x1350 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    137a:	94 2f       	mov	r25, r20
    137c:	9f 70       	andi	r25, 0x0F	; 15
    137e:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1386:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1388:	08 95       	ret

0000138a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    138a:	80 91 a2 00 	lds	r24, 0x00A2
    138e:	90 91 a3 00 	lds	r25, 0x00A3
    1392:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1394:	20 91 aa 00 	lds	r18, 0x00AA
    1398:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    139a:	20 31       	cpi	r18, 0x10	; 16
    139c:	29 f4       	brne	.+10     	; 0x13a8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    139e:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    13a2:	20 ff       	sbrs	r18, 0
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <Pipe_WaitUntilReady+0x26>
    13a6:	17 c0       	rjmp	.+46     	; 0x13d6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    13a8:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    13ac:	22 fd       	sbrc	r18, 2
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13b0:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    13b4:	21 fd       	sbrc	r18, 1
    13b6:	11 c0       	rjmp	.+34     	; 0x13da <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    13b8:	20 91 0e 05 	lds	r18, 0x050E
    13bc:	21 30       	cpi	r18, 0x01	; 1
    13be:	79 f0       	breq	.+30     	; 0x13de <Pipe_WaitUntilReady+0x54>
    13c0:	20 91 a2 00 	lds	r18, 0x00A2
    13c4:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    13c8:	28 17       	cp	r18, r24
    13ca:	39 07       	cpc	r19, r25
    13cc:	19 f3       	breq	.-58     	; 0x1394 <Pipe_WaitUntilReady+0xa>
    13ce:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    13d0:	41 f0       	breq	.+16     	; 0x13e2 <Pipe_WaitUntilReady+0x58>
    13d2:	c9 01       	movw	r24, r18
    13d4:	df cf       	rjmp	.-66     	; 0x1394 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    13e2:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    13e4:	08 95       	ret

000013e6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    13e6:	75 d0       	rcall	.+234    	; 0x14d2 <USB_INT_DisableAllInterrupts>
    13e8:	7c d0       	rcall	.+248    	; 0x14e2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13ea:	e0 ee       	ldi	r30, 0xE0	; 224
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	80 83       	st	Z, r24
    13f4:	e8 ed       	ldi	r30, 0xD8	; 216
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 77       	andi	r24, 0x7F	; 127
    13fc:	80 83       	st	Z, r24
    13fe:	19 bc       	out	0x29, r1	; 41
    1400:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1402:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1404:	8c 91       	ld	r24, X
    1406:	8e 7f       	andi	r24, 0xFE	; 254
    1408:	8c 93       	st	X, r24
    140a:	80 81       	ld	r24, Z
    140c:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    140e:	80 83       	st	Z, r24
    1410:	10 92 05 05 	sts	0x0505, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1414:	08 95       	ret

00001416 <USB_ResetInterface>:
    1416:	5d d0       	rcall	.+186    	; 0x14d2 <USB_INT_DisableAllInterrupts>
    1418:	64 d0       	rcall	.+200    	; 0x14e2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    141a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	80 93 d8 00 	sts	0x00D8, r24
    1424:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1428:	80 68       	ori	r24, 0x80	; 128
    142a:	80 93 d8 00 	sts	0x00D8, r24
    142e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1432:	8f 7d       	andi	r24, 0xDF	; 223
    1434:	80 93 d8 00 	sts	0x00D8, r24
    1438:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    143c:	8f 77       	andi	r24, 0x7F	; 127
    143e:	80 93 d7 00 	sts	0x00D7, r24
    1442:	8c e0       	ldi	r24, 0x0C	; 12
    1444:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1446:	8e e0       	ldi	r24, 0x0E	; 14
    1448:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    144a:	09 b4       	in	r0, 0x29	; 41
    144c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    144e:	fd cf       	rjmp	.-6      	; 0x144a <USB_ResetInterface+0x34>
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 0e 05 	sts	0x050E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1456:	10 92 04 05 	sts	0x0504, r1
	USB_Host_ConfigurationNumber = 0;
    145a:	80 e4       	ldi	r24, 0x40	; 64
    145c:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1460:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1464:	80 64       	ori	r24, 0x40	; 64
    1466:	80 93 d8 00 	sts	0x00D8, r24
    146a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 93 dd 00 	sts	0x00DD, r24
    1474:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1478:	84 60       	ori	r24, 0x04	; 4
    147a:	80 93 dd 00 	sts	0x00DD, r24
    147e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1482:	8f 7e       	andi	r24, 0xEF	; 239
    1484:	80 93 d7 00 	sts	0x00D7, r24
    1488:	6f 9a       	sbi	0x0d, 7	; 13
    148a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    148c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1490:	81 60       	ori	r24, 0x01	; 1
    1492:	80 93 de 00 	sts	0x00DE, r24
    1496:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	80 93 de 00 	sts	0x00DE, r24
    14a0:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    14a4:	8e 7f       	andi	r24, 0xFE	; 254
    14a6:	80 93 e0 00 	sts	0x00E0, r24
    14aa:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14ae:	80 61       	ori	r24, 0x10	; 16
    14b0:	80 93 d8 00 	sts	0x00D8, r24
    14b4:	08 95       	ret

000014b6 <USB_Init>:
    14b6:	e8 ed       	ldi	r30, 0xD8	; 216
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 7e       	andi	r24, 0xEF	; 239
    14be:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    14c0:	e7 ed       	ldi	r30, 0xD7	; 215
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	80 93 05 05 	sts	0x0505, r24

	USB_ResetInterface();
    14d0:	a2 cf       	rjmp	.-188    	; 0x1416 <USB_ResetInterface>

000014d2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    14d2:	e8 ed       	ldi	r30, 0xD8	; 216
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8c 7f       	andi	r24, 0xFC	; 252
    14da:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    14dc:	10 92 a0 00 	sts	0x00A0, r1
    14e0:	08 95       	ret

000014e2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    14e2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    14e6:	10 92 9f 00 	sts	0x009F, r1
    14ea:	08 95       	ret

000014ec <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	0b b6       	in	r0, 0x3b	; 59
    14f8:	0f 92       	push	r0
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1512:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1516:	85 ff       	sbrs	r24, 5
    1518:	0a c0       	rjmp	.+20     	; 0x152e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    151a:	80 91 a0 00 	lds	r24, 0x00A0
    151e:	85 ff       	sbrs	r24, 5
    1520:	06 c0       	rjmp	.+12     	; 0x152e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1522:	80 91 9f 00 	lds	r24, 0x009F
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    152c:	20 d1       	rcall	.+576    	; 0x176e <USB_Event_Stub>
    152e:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1532:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1534:	16 c0       	rjmp	.+44     	; 0x1562 <__vector_10+0x76>
    1536:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    153a:	81 ff       	sbrs	r24, 1
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <__vector_10+0x76>
    153e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1542:	8d 7f       	andi	r24, 0xFD	; 253
    1544:	80 93 9f 00 	sts	0x009F, r24
    1548:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	80 93 9f 00 	sts	0x009F, r24
    1552:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1556:	8d 7f       	andi	r24, 0xFD	; 253
    1558:	80 93 a0 00 	sts	0x00A0, r24
    155c:	0e 94 32 02 	call	0x464	; 0x464 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1560:	5a df       	rcall	.-332    	; 0x1416 <USB_ResetInterface>

		USB_ResetInterface();
    1562:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1566:	81 ff       	sbrs	r24, 1
    1568:	17 c0       	rjmp	.+46     	; 0x1598 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    156a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    156e:	81 ff       	sbrs	r24, 1
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <__vector_10+0xac>
    1572:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1576:	8d 7f       	andi	r24, 0xFD	; 253
    1578:	80 93 df 00 	sts	0x00DF, r24
    157c:	77 98       	cbi	0x0e, 7	; 14
    157e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 93 dd 00 	sts	0x00DD, r24
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	0e 94 92 02 	call	0x524	; 0x524 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    158e:	0e 94 32 02 	call	0x464	; 0x464 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 0e 05 	sts	0x050E, r24

		USB_HostState = HOST_STATE_Unattached;
    1598:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    159c:	80 ff       	sbrs	r24, 0
    159e:	18 c0       	rjmp	.+48     	; 0x15d0 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    15a0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    15a4:	80 ff       	sbrs	r24, 0
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <__vector_10+0xe4>
    15a8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	80 93 df 00 	sts	0x00DF, r24
    15b2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    15b6:	8e 7f       	andi	r24, 0xFE	; 254
    15b8:	80 93 de 00 	sts	0x00DE, r24
    15bc:	0e 94 2c 02 	call	0x458	; 0x458 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    15c0:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    15c4:	82 60       	ori	r24, 0x02	; 2
    15c6:	80 93 a0 00 	sts	0x00A0, r24
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	80 93 0e 05 	sts	0x050E, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    15d0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    15d4:	82 ff       	sbrs	r24, 2
    15d6:	10 c0       	rjmp	.+32     	; 0x15f8 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    15d8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    15dc:	82 ff       	sbrs	r24, 2
    15de:	0c c0       	rjmp	.+24     	; 0x15f8 <__vector_10+0x10c>
    15e0:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    15e4:	8b 7f       	andi	r24, 0xFB	; 251
    15e6:	80 93 df 00 	sts	0x00DF, r24
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    15ee:	0e 94 a9 02 	call	0x552	; 0x552 <EVENT_USB_Host_DeviceEnumerationFailed>
    15f2:	0e 94 32 02 	call	0x464	; 0x464 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    15f6:	0f df       	rcall	.-482    	; 0x1416 <USB_ResetInterface>
    15f8:	ff 91       	pop	r31

		USB_ResetInterface();
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	0f 90       	pop	r0
    1612:	0b be       	out	0x3b, r0	; 59
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1624:	eb 01       	movw	r28, r22
    1626:	a8 81       	ld	r26, Y
    1628:	b9 81       	ldd	r27, Y+1	; 0x01
    162a:	8c 91       	ld	r24, X
    162c:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    162e:	20 81       	ld	r18, Z
    1630:	31 81       	ldd	r19, Z+1	; 0x01
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	08 f4       	brcc	.+2      	; 0x163a <USB_GetNextDescriptor+0x1c>
    1638:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    163a:	a2 0f       	add	r26, r18
    163c:	b3 1f       	adc	r27, r19
    163e:	eb 01       	movw	r28, r22
    1640:	b9 83       	std	Y+1, r27	; 0x01
    1642:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	82 1b       	sub	r24, r18
    164a:	93 0b       	sbc	r25, r19
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24
			}
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	29 97       	sbiw	r28, 0x09	; 9
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	7b 01       	movw	r14, r22
    1678:	8a 01       	movw	r16, r20
    167a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    167c:	90 e8       	ldi	r25, 0x80	; 128
    167e:	90 93 06 05 	sts	0x0506, r25
    1682:	96 e0       	ldi	r25, 0x06	; 6
    1684:	90 93 07 05 	sts	0x0507, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1688:	e8 2f       	mov	r30, r24
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	31 97       	sbiw	r30, 0x01	; 1
    168e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1690:	f0 93 09 05 	sts	0x0509, r31
    1694:	e0 93 08 05 	sts	0x0508, r30
    1698:	10 92 0b 05 	sts	0x050B, r1
    169c:	10 92 0a 05 	sts	0x050A, r1
    16a0:	89 e0       	ldi	r24, 0x09	; 9
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 0d 05 	sts	0x050D, r25
    16a8:	80 93 0c 05 	sts	0x050C, r24
    16ac:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	84 d0       	rcall	.+264    	; 0x17be <USB_Host_SendControlRequest>
    16b6:	81 11       	cpse	r24, r1
    16b8:	19 c0       	rjmp	.+50     	; 0x16ec <USB_Host_GetDeviceConfigDescriptor+0x96>
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	d7 01       	movw	r26, r14
    16c0:	ed 93       	st	X+, r30
    16c2:	fc 93       	st	X, r31
    16c4:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    16c6:	df 06       	cpc	r13, r31
    16c8:	70 f0       	brcs	.+28     	; 0x16e6 <USB_Host_GetDeviceConfigDescriptor+0x90>
    16ca:	f0 93 0d 05 	sts	0x050D, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    16ce:	e0 93 0c 05 	sts	0x050C, r30
    16d2:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    16d4:	74 d0       	rcall	.+232    	; 0x17be <USB_Host_SendControlRequest>
    16d6:	81 11       	cpse	r24, r1
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <USB_Host_GetDeviceConfigDescriptor+0x96>
    16da:	f8 01       	movw	r30, r16
    16dc:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	21 f0       	breq	.+8      	; 0x16ea <USB_Host_GetDeviceConfigDescriptor+0x94>
    16e2:	86 e0       	ldi	r24, 0x06	; 6
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    16e6:	85 e0       	ldi	r24, 0x05	; 5
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    16ee:	0f b6       	in	r0, 0x3f	; 63
}
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	08 95       	ret

0000170a <USB_GetNextDescriptorComp>:
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	8c 01       	movw	r16, r24
    1720:	eb 01       	movw	r28, r22
    1722:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1724:	f8 01       	movw	r30, r16
    1726:	e0 80       	ld	r14, Z
    1728:	f1 80       	ldd	r15, Z+1	; 0x01
    172a:	e1 14       	cp	r14, r1
    172c:	f1 04       	cpc	r15, r1
    172e:	99 f0       	breq	.+38     	; 0x1756 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1730:	a8 80       	ld	r10, Y
    1732:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1734:	be 01       	movw	r22, r28
    1736:	c8 01       	movw	r24, r16
    1738:	72 df       	rcall	.-284    	; 0x161e <USB_GetNextDescriptor>
    173a:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    173c:	99 81       	ldd	r25, Y+1	; 0x01
    173e:	f6 01       	movw	r30, r12
    1740:	09 95       	icall
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	79 f3       	breq	.-34     	; 0x1724 <USB_GetNextDescriptorComp+0x1a>
    1746:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1748:	39 f4       	brne	.+14     	; 0x1758 <USB_GetNextDescriptorComp+0x4e>
    174a:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    174c:	a8 82       	st	Y, r10
    174e:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1750:	f1 82       	std	Z+1, r15	; 0x01
    1752:	e0 82       	st	Z, r14
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <USB_GetNextDescriptorComp+0x4e>
    1756:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1758:	df 91       	pop	r29
}
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	08 95       	ret

0000176e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    176e:	08 95       	ret

00001770 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1778:	c9 ee       	ldi	r28, 0xE9	; 233
    177a:	d3 e0       	ldi	r29, 0x03	; 3
    177c:	11 11       	cpse	r17, r1
    177e:	0d c0       	rjmp	.+26     	; 0x179a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1780:	80 91 a6 00 	lds	r24, 0x00A6
    1784:	83 fd       	sbrc	r24, 3
    1786:	16 c0       	rjmp	.+44     	; 0x17b4 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	7e db       	rcall	.-2308   	; 0xe88 <USB_Host_WaitMS>
    178c:	81 11       	cpse	r24, r1
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <USB_Host_WaitForIOS+0x46>
    1790:	21 97       	sbiw	r28, 0x01	; 1
    1792:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1794:	99 f7       	brne	.-26     	; 0x177c <USB_Host_WaitForIOS+0xc>
    1796:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <USB_Host_WaitForIOS+0x46>
    179a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    179c:	29 f4       	brne	.+10     	; 0x17a8 <USB_Host_WaitForIOS+0x38>
    179e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17a2:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    17a4:	f1 cf       	rjmp	.-30     	; 0x1788 <USB_Host_WaitForIOS+0x18>
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <USB_Host_WaitForIOS+0x44>
    17a8:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17aa:	71 f7       	brne	.-36     	; 0x1788 <USB_Host_WaitForIOS+0x18>
    17ac:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17b0:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    17b2:	ea cf       	rjmp	.-44     	; 0x1788 <USB_Host_WaitForIOS+0x18>
    17b4:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    17b6:	df 91       	pop	r29
}
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	08 95       	ret

000017be <USB_Host_SendControlRequest>:
    17be:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    17ca:	f0 90 9e 00 	lds	r15, 0x009E
    17ce:	8f 2d       	mov	r24, r15
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    17d4:	c0 91 0c 05 	lds	r28, 0x050C
    17d8:	d0 91 0d 05 	lds	r29, 0x050D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    17dc:	80 91 9e 00 	lds	r24, 0x009E
    17e0:	81 60       	ori	r24, 0x01	; 1
    17e2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	4f db       	rcall	.-2402   	; 0xe88 <USB_Host_WaitMS>
    17ea:	81 11       	cpse	r24, r1
    17ec:	cc c0       	rjmp	.+408    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    17ee:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17f2:	8f 7c       	andi	r24, 0xCF	; 207
    17f4:	80 93 aa 00 	sts	0x00AA, r24
    17f8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    17fc:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1800:	8f 7e       	andi	r24, 0xEF	; 239
    1802:	80 93 a6 00 	sts	0x00A6, r24
    1806:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	80 93 a9 00 	sts	0x00A9, r24
    1810:	e6 e0       	ldi	r30, 0x06	; 6
    1812:	f5 e0       	ldi	r31, 0x05	; 5
    1814:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1816:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    181a:	85 e0       	ldi	r24, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    181c:	ee 30       	cpi	r30, 0x0E	; 14
    181e:	f8 07       	cpc	r31, r24
    1820:	c9 f7       	brne	.-14     	; 0x1814 <USB_Host_SendControlRequest+0x56>
    1822:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1826:	87 77       	andi	r24, 0x77	; 119
    1828:	80 93 a6 00 	sts	0x00A6, r24
    182c:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    182e:	a0 df       	rcall	.-192    	; 0x1770 <USB_Host_WaitForIOS>
    1830:	81 11       	cpse	r24, r1
    1832:	a9 c0       	rjmp	.+338    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1834:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1838:	80 64       	ori	r24, 0x40	; 64
    183a:	80 93 a9 00 	sts	0x00A9, r24
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	23 db       	rcall	.-2490   	; 0xe88 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1842:	81 11       	cpse	r24, r1
    1844:	a0 c0       	rjmp	.+320    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1846:	80 91 06 05 	lds	r24, 0x0506
    184a:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    184c:	4e c0       	rjmp	.+156    	; 0x18ea <USB_Host_SendControlRequest+0x12c>
    184e:	80 91 aa 00 	lds	r24, 0x00AA
    1852:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1854:	80 61       	ori	r24, 0x10	; 16
    1856:	80 93 aa 00 	sts	0x00AA, r24
    185a:	01 15       	cp	r16, r1
    185c:	11 05       	cpc	r17, r1
    185e:	09 f0       	breq	.+2      	; 0x1862 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1860:	3a c0       	rjmp	.+116    	; 0x18d6 <USB_Host_SendControlRequest+0x118>
    1862:	80 91 aa 00 	lds	r24, 0x00AA
    1866:	8f 7c       	andi	r24, 0xCF	; 207
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	80 93 aa 00 	sts	0x00AA, r24
    186e:	80 91 a9 00 	lds	r24, 0x00A9
    1872:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1874:	80 93 a9 00 	sts	0x00A9, r24
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	7a df       	rcall	.-268    	; 0x1770 <USB_Host_WaitForIOS>
    187c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    187e:	83 c0       	rjmp	.+262    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1880:	80 91 a6 00 	lds	r24, 0x00A6
    1884:	8b 77       	andi	r24, 0x7B	; 123
    1886:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	71 df       	rcall	.-286    	; 0x1770 <USB_Host_WaitForIOS>
    188e:	7b c0       	rjmp	.+246    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1890:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1894:	8f 7b       	andi	r24, 0xBF	; 191
    1896:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	69 df       	rcall	.-302    	; 0x1770 <USB_Host_WaitForIOS>
    189e:	81 11       	cpse	r24, r1
    18a0:	72 c0       	rjmp	.+228    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    18a2:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18a6:	90 91 f7 00 	lds	r25, 0x00F7
    18aa:	89 2b       	or	r24, r25
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18ae:	c0 e0       	ldi	r28, 0x00	; 0
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	f8 01       	movw	r30, r16
    18b4:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    18b6:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    18ba:	90 91 f7 00 	lds	r25, 0x00F7
    18be:	89 2b       	or	r24, r25
    18c0:	69 f4       	brne	.+26     	; 0x18dc <USB_Host_SendControlRequest+0x11e>
    18c2:	80 91 a9 00 	lds	r24, 0x00A9
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    18cc:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18d0:	8e 77       	andi	r24, 0x7E	; 126
    18d2:	80 93 a6 00 	sts	0x00A6, r24
    18d6:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18d8:	d9 f6       	brne	.-74     	; 0x1890 <USB_Host_SendControlRequest+0xd2>
    18da:	c3 cf       	rjmp	.-122    	; 0x1862 <USB_Host_SendControlRequest+0xa4>
    18dc:	20 97       	sbiw	r28, 0x00	; 0
    18de:	89 f3       	breq	.-30     	; 0x18c2 <USB_Host_SendControlRequest+0x104>
    18e0:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    18e4:	81 93       	st	Z+, r24
    18e6:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    18e8:	e5 cf       	rjmp	.-54     	; 0x18b4 <USB_Host_SendControlRequest+0xf6>
    18ea:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    18ec:	11 05       	cpc	r17, r1
    18ee:	b1 f1       	breq	.+108    	; 0x195c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    18f0:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    18f4:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    18f6:	80 62       	ori	r24, 0x20	; 32
    18f8:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18fc:	80 91 a9 00 	lds	r24, 0x00A9
    1900:	8f 7b       	andi	r24, 0xBF	; 191
    1902:	80 93 a9 00 	sts	0x00A9, r24
    1906:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1908:	20 97       	sbiw	r28, 0x00	; 0
    190a:	01 f1       	breq	.+64     	; 0x194c <USB_Host_SendControlRequest+0x18e>
    190c:	31 df       	rcall	.-414    	; 0x1770 <USB_Host_WaitForIOS>
    190e:	81 11       	cpse	r24, r1
    1910:	3a c0       	rjmp	.+116    	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1912:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1914:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1918:	30 91 f7 00 	lds	r19, 0x00F7
    191c:	80 91 17 01 	lds	r24, 0x0117
    1920:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	58 f4       	brcc	.+22     	; 0x193e <USB_Host_SendControlRequest+0x180>
    1928:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	8c 01       	movw	r16, r24
    192e:	20 81       	ld	r18, Z
    1930:	20 93 af 00 	sts	0x00AF, r18
    1934:	21 97       	sbiw	r28, 0x01	; 1
    1936:	20 97       	sbiw	r28, 0x00	; 0
    1938:	19 f0       	breq	.+6      	; 0x1940 <USB_Host_SendControlRequest+0x182>
    193a:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    193c:	eb cf       	rjmp	.-42     	; 0x1914 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    193e:	8f 01       	movw	r16, r30
    1940:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1944:	8b 77       	andi	r24, 0x7B	; 123
    1946:	80 93 a6 00 	sts	0x00A6, r24
    194a:	dd cf       	rjmp	.-70     	; 0x1906 <USB_Host_SendControlRequest+0x148>
    194c:	11 df       	rcall	.-478    	; 0x1770 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    194e:	81 11       	cpse	r24, r1
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1952:	80 91 a9 00 	lds	r24, 0x00A9
    1956:	80 64       	ori	r24, 0x40	; 64
    1958:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    195c:	80 91 aa 00 	lds	r24, 0x00AA
    1960:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1962:	80 61       	ori	r24, 0x10	; 16
    1964:	80 93 aa 00 	sts	0x00AA, r24
    1968:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    196c:	8f 7b       	andi	r24, 0xBF	; 191
    196e:	80 93 a9 00 	sts	0x00A9, r24
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	fd de       	rcall	.-518    	; 0x1770 <USB_Host_WaitForIOS>
    1976:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    197a:	80 91 a6 00 	lds	r24, 0x00A6
    197e:	8e 77       	andi	r24, 0x7E	; 126
    1980:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 91 a9 00 	lds	r25, 0x00A9
    198a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    198c:	90 93 a9 00 	sts	0x00A9, r25
    1990:	f1 10       	cpse	r15, r1
    1992:	05 c0       	rjmp	.+10     	; 0x199e <USB_Host_SendControlRequest+0x1e0>
    1994:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1998:	9e 7f       	andi	r25, 0xFE	; 254
    199a:	90 93 9e 00 	sts	0x009E, r25
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    19a4:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    19b0:	ff 90       	pop	r15
    19b2:	08 95       	ret

000019b4 <USB_Host_SetDeviceConfiguration>:
    19b4:	cf 93       	push	r28
				UPRST = 0;
    19b6:	c8 2f       	mov	r28, r24
    19b8:	10 92 06 05 	sts	0x0506, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    19bc:	89 e0       	ldi	r24, 0x09	; 9
    19be:	80 93 07 05 	sts	0x0507, r24
    19c2:	2c 2f       	mov	r18, r28
    19c4:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    19c6:	30 93 09 05 	sts	0x0509, r19
    19ca:	20 93 08 05 	sts	0x0508, r18
    19ce:	10 92 0b 05 	sts	0x050B, r1
    19d2:	10 92 0a 05 	sts	0x050A, r1
    19d6:	10 92 0d 05 	sts	0x050D, r1
    19da:	10 92 0c 05 	sts	0x050C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    19de:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	eb de       	rcall	.-554    	; 0x17be <USB_Host_SendControlRequest>
    19e8:	81 11       	cpse	r24, r1
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <USB_Host_SetDeviceConfiguration+0x4a>
    19ec:	c0 93 04 05 	sts	0x0504, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    19f0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <USB_Host_SetDeviceConfiguration+0x44>
    19f4:	9b e0       	ldi	r25, 0x0B	; 11
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <USB_Host_SetDeviceConfiguration+0x46>
    19f8:	9a e0       	ldi	r25, 0x0A	; 10
    19fa:	90 93 0e 05 	sts	0x050E, r25
    19fe:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1a00:	08 95       	ret

00001a02 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1a02:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1a04:	c0 91 a7 00 	lds	r28, 0x00A7
    1a08:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1a0a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a0e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1a12:	87 da       	rcall	.-2802   	; 0xf22 <USB_Host_ProcessNextHostState>
    1a14:	c0 93 a7 00 	sts	0x00A7, r28
    1a18:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1a1a:	08 95       	ret

00001a1c <DCOMP_HID_Host_NextHIDInterface>:

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	21 81       	ldd	r18, Z+1	; 0x01
    1a20:	24 30       	cpi	r18, 0x04	; 4
    1a22:	29 f4       	brne	.+10     	; 0x1a2e <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1a24:	85 81       	ldd	r24, Z+5	; 0x05
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
}
    1a30:	08 95       	ret

00001a32 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1a32:	fc 01       	movw	r30, r24
    1a34:	81 81       	ldd	r24, Z+1	; 0x01
    1a36:	81 32       	cpi	r24, 0x21	; 33
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1a46:	82 e0       	ldi	r24, 0x02	; 2
}
    1a48:	08 95       	ret

00001a4a <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	21 81       	ldd	r18, Z+1	; 0x01
    1a4e:	25 30       	cpi	r18, 0x05	; 5
    1a50:	31 f4       	brne	.+12     	; 0x1a5e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	70 dc       	rcall	.-1824   	; 0x1336 <Pipe_IsEndpointBound>
    1a56:	88 23       	and	r24, r24
    1a58:	31 f0       	breq	.+12     	; 0x1a66 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a5c:	08 95       	ret
    1a5e:	24 30       	cpi	r18, 0x04	; 4
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1a64:	08 95       	ret
    1a66:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1a68:	08 95       	ret

00001a6a <HID_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1a6a:	6f 92       	push	r6
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <HID_Host_ConfigurePipes+0x1e>
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <HID_Host_ConfigurePipes+0x20>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	8c 01       	movw	r16, r24
    1a90:	7a 83       	std	Y+2, r23	; 0x02
    1a92:	69 83       	std	Y+1, r22	; 0x01
    1a94:	5c 83       	std	Y+4, r21	; 0x04
    1a96:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1a98:	fc 01       	movw	r30, r24
    1a9a:	3f 96       	adiw	r30, 0x0f	; 15
    1a9c:	88 e0       	ldi	r24, 0x08	; 8
    1a9e:	df 01       	movw	r26, r30
    1aa0:	1d 92       	st	X+, r1
    1aa2:	8a 95       	dec	r24
    1aa4:	e9 f7       	brne	.-6      	; 0x1aa0 <HID_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1aaa:	81 81       	ldd	r24, Z+1	; 0x01
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <HID_Host_ConfigurePipes+0x48>
    1ab0:	9d c0       	rjmp	.+314    	; 0x1bec <HID_Host_ConfigurePipes+0x182>
    1ab2:	81 2c       	mov	r8, r1
    1ab4:	91 2c       	mov	r9, r1
    1ab6:	c1 2c       	mov	r12, r1
    1ab8:	d1 2c       	mov	r13, r1
    1aba:	61 2c       	mov	r6, r1
    1abc:	71 2c       	mov	r7, r1
    1abe:	a1 2c       	mov	r10, r1
    1ac0:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1ac2:	c1 14       	cp	r12, r1
    1ac4:	d1 04       	cpc	r13, r1
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <HID_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1ac8:	a1 14       	cp	r10, r1
    1aca:	b1 04       	cpc	r11, r1
    1acc:	b9 f0       	breq	.+46     	; 0x1afc <HID_Host_ConfigurePipes+0x92>
    1ace:	41 c0       	rjmp	.+130    	; 0x1b52 <HID_Host_ConfigurePipes+0xe8>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ad0:	45 e2       	ldi	r20, 0x25	; 37
    1ad2:	5d e0       	ldi	r21, 0x0D	; 13
    1ad4:	be 01       	movw	r22, r28
    1ad6:	6d 5f       	subi	r22, 0xFD	; 253
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	15 de       	rcall	.-982    	; 0x170a <USB_GetNextDescriptorComp>
    1ae0:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1ae2:	f2 cf       	rjmp	.-28     	; 0x1ac8 <HID_Host_ConfigurePipes+0x5e>
    1ae4:	27 c0       	rjmp	.+78     	; 0x1b34 <HID_Host_ConfigurePipes+0xca>
    1ae6:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1ae8:	dc 80       	ldd	r13, Y+4	; 0x04
    1aea:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1aec:	84 85       	ldd	r24, Z+12	; 0x0c
    1aee:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1af0:	89 f0       	breq	.+34     	; 0x1b14 <HID_Host_ConfigurePipes+0xaa>
    1af2:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1af4:	17 96       	adiw	r26, 0x07	; 7
    1af6:	9c 91       	ld	r25, X
    1af8:	98 17       	cp	r25, r24
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <HID_Host_ConfigurePipes+0xaa>
    1afc:	4e e0       	ldi	r20, 0x0E	; 14
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1afe:	5d e0       	ldi	r21, 0x0D	; 13
    1b00:	be 01       	movw	r22, r28
    1b02:	6d 5f       	subi	r22, 0xFD	; 253
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	ce 01       	movw	r24, r28
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	ff dd       	rcall	.-1026   	; 0x170a <USB_GetNextDescriptorComp>
    1b0c:	88 23       	and	r24, r24
    1b0e:	59 f3       	breq	.-42     	; 0x1ae6 <HID_Host_ConfigurePipes+0x7c>
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	6d c0       	rjmp	.+218    	; 0x1bee <HID_Host_ConfigurePipes+0x184>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1b14:	49 e1       	ldi	r20, 0x19	; 25
    1b16:	5d e0       	ldi	r21, 0x0D	; 13

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b18:	be 01       	movw	r22, r28
    1b1a:	6d 5f       	subi	r22, 0xFD	; 253
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	f3 dd       	rcall	.-1050   	; 0x170a <USB_GetNextDescriptorComp>
    1b24:	81 11       	cpse	r24, r1
    1b26:	f4 cf       	rjmp	.-24     	; 0x1b10 <HID_Host_ConfigurePipes+0xa6>
    1b28:	8b 80       	ldd	r8, Y+3	; 0x03
    1b2a:	9c 80       	ldd	r9, Y+4	; 0x04
    1b2c:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1b2e:	f1 2c       	mov	r15, r1
    1b30:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1b32:	c7 cf       	rjmp	.-114    	; 0x1ac2 <HID_Host_ConfigurePipes+0x58>
    1b34:	eb 80       	ldd	r14, Y+3	; 0x03
    1b36:	fc 80       	ldd	r15, Y+4	; 0x04
    1b38:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <HID_Host_ConfigurePipes+0xda>
    1b40:	57 01       	movw	r10, r14
    1b42:	73 01       	movw	r14, r6
    1b44:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    1b46:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1b48:	99 f3       	breq	.-26     	; 0x1b30 <HID_Host_ConfigurePipes+0xc6>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1b4a:	e1 14       	cp	r14, r1
    1b4c:	f1 04       	cpc	r15, r1
    1b4e:	81 f3       	breq	.-32     	; 0x1b30 <HID_Host_ConfigurePipes+0xc6>
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <HID_Host_ConfigurePipes+0xea>
    1b52:	73 01       	movw	r14, r6
    1b54:	d5 01       	movw	r26, r10
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1b5a:	9c 91       	ld	r25, X
    1b5c:	15 97       	sbiw	r26, 0x05	; 5
    1b5e:	f8 01       	movw	r30, r16
    1b60:	92 83       	std	Z+2, r25	; 0x02
    1b62:	81 83       	std	Z+1, r24	; 0x01
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	8c 91       	ld	r24, X
    1b68:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	b8 2e       	mov	r11, r24
    1b6e:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	c8 01       	movw	r24, r16
    1b74:	ad db       	rcall	.-2214   	; 0x12d0 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1b76:	81 11       	cpse	r24, r1
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <HID_Host_ConfigurePipes+0x114>
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	38 c0       	rjmp	.+112    	; 0x1bee <HID_Host_ConfigurePipes+0x184>
    1b7e:	e1 14       	cp	r14, r1
    1b80:	f1 04       	cpc	r15, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    1b82:	f9 f4       	brne	.+62     	; 0x1bc2 <HID_Host_ConfigurePipes+0x158>
    1b84:	d6 01       	movw	r26, r12

	if (DataOUTEndpoint)
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	8c 91       	ld	r24, X
    1b8a:	f8 01       	movw	r30, r16

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1b8c:	80 8b       	std	Z+16, r24	; 0x10
    1b8e:	d4 01       	movw	r26, r8
    1b90:	17 96       	adiw	r26, 0x07	; 7
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1b96:	18 97       	sbiw	r26, 0x08	; 8
    1b98:	95 8b       	std	Z+21, r25	; 0x15
    1b9a:	84 8b       	std	Z+20, r24	; 0x14
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	96 81       	ldd	r25, Z+6	; 0x06
    1ba2:	91 11       	cpse	r25, r1
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <HID_Host_ConfigurePipes+0x13e>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	d8 01       	movw	r26, r16
    1baa:	51 96       	adiw	r26, 0x11	; 17
    1bac:	8c 93       	st	X, r24
    1bae:	51 97       	sbiw	r26, 0x11	; 17
    1bb0:	88 e0       	ldi	r24, 0x08	; 8
    1bb2:	56 96       	adiw	r26, 0x16	; 22
    1bb4:	8c 93       	st	X, r24
    1bb6:	56 97       	sbiw	r26, 0x16	; 22
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	1f 96       	adiw	r26, 0x0f	; 15
    1bbc:	8c 93       	st	X, r24
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.IsActive             = true;
    1bc0:	16 c0       	rjmp	.+44     	; 0x1bee <HID_Host_ConfigurePipes+0x184>
    1bc2:	f7 01       	movw	r30, r14
    1bc4:	84 81       	ldd	r24, Z+4	; 0x04

	return HID_ENUMERROR_NoError;
    1bc6:	95 81       	ldd	r25, Z+5	; 0x05
    1bc8:	d8 01       	movw	r26, r16
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1bca:	18 96       	adiw	r26, 0x08	; 8
    1bcc:	9c 93       	st	X, r25
    1bce:	8e 93       	st	-X, r24
    1bd0:	17 97       	sbiw	r26, 0x07	; 7
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	19 96       	adiw	r26, 0x09	; 9
    1bd6:	8c 93       	st	X, r24
    1bd8:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1bda:	1a 96       	adiw	r26, 0x0a	; 10
    1bdc:	bc 92       	st	X, r11
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1be2:	06 96       	adiw	r24, 0x06	; 6
    1be4:	75 db       	rcall	.-2326   	; 0x12d0 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1be6:	88 23       	and	r24, r24
    1be8:	41 f2       	breq	.-112    	; 0x1b7a <HID_Host_ConfigurePipes+0x110>
    1bea:	cc cf       	rjmp	.-104    	; 0x1b84 <HID_Host_ConfigurePipes+0x11a>
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1bf6:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	9f 90       	pop	r9
    1c0c:	8f 90       	pop	r8
    1c0e:	7f 90       	pop	r7
    1c10:	6f 90       	pop	r6
    1c12:	08 95       	ret

00001c14 <HID_Host_ReceiveReport>:
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	fc 01       	movw	r30, r24
    1c1a:	eb 01       	movw	r28, r22
    1c1c:	80 91 0e 05 	lds	r24, 0x050E
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1c20:	8b 30       	cpi	r24, 0x0B	; 11
    1c22:	c1 f5       	brne	.+112    	; 0x1c94 <HID_Host_ReceiveReport+0x80>
    1c24:	87 85       	ldd	r24, Z+15	; 0x0f
    1c26:	88 23       	and	r24, r24
    1c28:	a9 f1       	breq	.+106    	; 0x1c94 <HID_Host_ReceiveReport+0x80>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 70       	andi	r24, 0x0F	; 15
    1c2e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c32:	80 91 a9 00 	lds	r24, 0x00A9
    1c36:	8f 7b       	andi	r24, 0xBF	; 191
    1c38:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1c3c:	83 89       	ldd	r24, Z+19	; 0x13
    1c3e:	81 11       	cpse	r24, r1
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <HID_Host_ReceiveReport+0x52>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1c42:	a5 85       	ldd	r26, Z+13	; 0x0d
    1c44:	b6 85       	ldd	r27, Z+14	; 0x0e
    1c46:	a8 52       	subi	r26, 0x28	; 40
    1c48:	bc 4f       	sbci	r27, 0xFC	; 252
    1c4a:	8c 91       	ld	r24, X
    1c4c:	88 23       	and	r24, r24
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <HID_Host_ReceiveReport+0x46>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c50:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1c54:	68 83       	st	Y, r22
    1c56:	21 96       	adiw	r28, 0x01	; 1
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <HID_Host_ReceiveReport+0x48>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	85 85       	ldd	r24, Z+13	; 0x0d
    1c60:	96 85       	ldd	r25, Z+14	; 0x0e
    1c62:	91 d8       	rcall	.-3806   	; 0xd86 <USB_GetHIDReportSize>
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <HID_Host_ReceiveReport+0x5a>
    1c66:	80 91 f6 00 	lds	r24, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c6a:	90 91 f7 00 	lds	r25, 0x00F7
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	bc 01       	movw	r22, r24
    1c74:	ce 01       	movw	r24, r28
    1c76:	77 da       	rcall	.-2834   	; 0x1166 <Pipe_Read_Stream_LE>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <HID_Host_ReceiveReport+0x82>
    1c7c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c80:	8e 77       	andi	r24, 0x7E	; 126
    1c82:	80 93 a6 00 	sts	0x00A6, r24
    1c86:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c8a:	80 64       	ori	r24, 0x40	; 64
    1c8c:	80 93 a9 00 	sts	0x00A9, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <HID_Host_ReceiveReport+0x82>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1c98:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1c9a:	08 95       	ret

00001c9c <HID_Host_IsReportReceived>:
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 91 0e 05 	lds	r24, 0x050E
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1ca2:	8b 30       	cpi	r24, 0x0B	; 11
    1ca4:	a9 f4       	brne	.+42     	; 0x1cd0 <HID_Host_IsReportReceived+0x34>
    1ca6:	87 85       	ldd	r24, Z+15	; 0x0f
    1ca8:	88 23       	and	r24, r24
    1caa:	99 f0       	breq	.+38     	; 0x1cd2 <HID_Host_IsReportReceived+0x36>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 70       	andi	r24, 0x0F	; 15
    1cb0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cb4:	80 91 a9 00 	lds	r24, 0x00A9
    1cb8:	8f 7b       	andi	r24, 0xBF	; 191
    1cba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1cbe:	80 91 a6 00 	lds	r24, 0x00A6
    1cc2:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cc4:	90 91 a9 00 	lds	r25, 0x00A9
    1cc8:	90 64       	ori	r25, 0x40	; 64
    1cca:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1cce:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1cd2:	08 95       	ret

00001cd4 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1cea:	cd b6       	in	r12, 0x3d	; 61
    1cec:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1cee:	dc 01       	movw	r26, r24
    1cf0:	54 96       	adiw	r26, 0x14	; 20
    1cf2:	8d 91       	ld	r24, X+
    1cf4:	9c 91       	ld	r25, X
    1cf6:	55 97       	sbiw	r26, 0x15	; 21
    1cf8:	ed b7       	in	r30, 0x3d	; 61
    1cfa:	fe b7       	in	r31, 0x3e	; 62
    1cfc:	e8 1b       	sub	r30, r24
    1cfe:	f9 0b       	sbc	r31, r25
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	fe bf       	out	0x3e, r31	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	ed bf       	out	0x3d, r30	; 61
    1d0a:	2d b7       	in	r18, 0x3d	; 61
    1d0c:	3e b7       	in	r19, 0x3e	; 62
    1d0e:	2f 5f       	subi	r18, 0xFF	; 255
    1d10:	3f 4f       	sbci	r19, 0xFF	; 255
    1d12:	79 01       	movw	r14, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1d14:	50 96       	adiw	r26, 0x10	; 16
    1d16:	2c 91       	ld	r18, X
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	41 e8       	ldi	r20, 0x81	; 129
    1d1c:	40 93 06 05 	sts	0x0506, r20
    1d20:	46 e0       	ldi	r20, 0x06	; 6
    1d22:	40 93 07 05 	sts	0x0507, r20
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	52 e2       	ldi	r21, 0x22	; 34
    1d2a:	50 93 09 05 	sts	0x0509, r21
    1d2e:	40 93 08 05 	sts	0x0508, r20
    1d32:	30 93 0b 05 	sts	0x050B, r19
    1d36:	20 93 0a 05 	sts	0x050A, r18
    1d3a:	90 93 0d 05 	sts	0x050D, r25
    1d3e:	80 93 0c 05 	sts	0x050C, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d42:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1d46:	c7 01       	movw	r24, r14
    1d48:	3a dd       	rcall	.-1420   	; 0x17be <USB_Host_SendControlRequest>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	52 c0       	rjmp	.+164    	; 0x1df2 <HID_Host_SetReportProtocol+0x11e>
    1d4e:	d8 01       	movw	r26, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1d50:	53 96       	adiw	r26, 0x13	; 19
    1d52:	8c 91       	ld	r24, X
    1d54:	53 97       	sbiw	r26, 0x13	; 19
    1d56:	88 23       	and	r24, r24
    1d58:	f1 f0       	breq	.+60     	; 0x1d96 <HID_Host_SetReportProtocol+0xc2>
    1d5a:	50 96       	adiw	r26, 0x10	; 16
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1d5c:	8c 91       	ld	r24, X
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	21 e2       	ldi	r18, 0x21	; 33
    1d62:	20 93 06 05 	sts	0x0506, r18
    1d66:	2b e0       	ldi	r18, 0x0B	; 11
    1d68:	20 93 07 05 	sts	0x0507, r18
    1d6c:	21 e0       	ldi	r18, 0x01	; 1
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	30 93 09 05 	sts	0x0509, r19
    1d74:	20 93 08 05 	sts	0x0508, r18
    1d78:	90 93 0b 05 	sts	0x050B, r25
    1d7c:	80 93 0a 05 	sts	0x050A, r24
    1d80:	10 92 0d 05 	sts	0x050D, r1
    1d84:	10 92 0c 05 	sts	0x050C, r1
    1d88:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	18 dd       	rcall	.-1488   	; 0x17be <USB_Host_SendControlRequest>
    1d8e:	81 11       	cpse	r24, r1
    1d90:	30 c0       	rjmp	.+96     	; 0x1df2 <HID_Host_SetReportProtocol+0x11e>
    1d92:	f8 01       	movw	r30, r16
    1d94:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1d96:	d8 01       	movw	r26, r16
    1d98:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1d9a:	4d 91       	ld	r20, X+
    1d9c:	5c 91       	ld	r21, X
    1d9e:	1e 97       	sbiw	r26, 0x0e	; 14
    1da0:	41 15       	cp	r20, r1
    1da2:	51 05       	cpc	r21, r1
    1da4:	29 f1       	breq	.+74     	; 0x1df0 <HID_Host_SetReportProtocol+0x11c>
    1da6:	54 96       	adiw	r26, 0x14	; 20
    1da8:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1daa:	7c 91       	ld	r23, X
    1dac:	55 97       	sbiw	r26, 0x15	; 21
    1dae:	c7 01       	movw	r24, r14
    1db0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <USB_ProcessHIDReport>
    1db4:	88 23       	and	r24, r24
    1db6:	11 f0       	breq	.+4      	; 0x1dbc <HID_Host_SetReportProtocol+0xe8>
    1db8:	80 68       	ori	r24, 0x80	; 128
    1dba:	1b c0       	rjmp	.+54     	; 0x1df2 <HID_Host_SetReportProtocol+0x11e>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1dbc:	d8 01       	movw	r26, r16
    1dbe:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	1e 97       	sbiw	r26, 0x0e	; 14
    1dc6:	ea 52       	subi	r30, 0x2A	; 42
    1dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	9c 01       	movw	r18, r24
    1dd0:	27 70       	andi	r18, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1dd2:	33 27       	eor	r19, r19
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	23 2b       	or	r18, r19
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <HID_Host_SetReportProtocol+0x108>
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	33 e0       	ldi	r19, 0x03	; 3
    1dde:	96 95       	lsr	r25
    1de0:	87 95       	ror	r24
    1de2:	3a 95       	dec	r19
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <HID_Host_SetReportProtocol+0x10a>
    1de6:	84 0f       	add	r24, r20
    1de8:	f8 01       	movw	r30, r16
    1dea:	86 8b       	std	Z+22, r24	; 0x16
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <HID_Host_SetReportProtocol+0x11e>

	return 0;
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1df4:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1df6:	de be       	out	0x3e, r13	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd be       	out	0x3d, r12	; 61
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	08 95       	ret

00001e0e <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1e0e:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1e12:	95 ff       	sbrs	r25, 5
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <Serial_putchar>
				UDR1 = DataByte;
    1e16:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	08 95       	ret

00001e20 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e20:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e24:	87 ff       	sbrs	r24, 7
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <Serial_getchar+0x18>
    1e28:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e2c:	87 ff       	sbrs	r24, 7
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1e30:	80 91 ce 00 	lds	r24, 0x00CE
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	08 95       	ret
	  return _FDEV_EOF;
    1e38:	8e ef       	ldi	r24, 0xFE	; 254
    1e3a:	9f ef       	ldi	r25, 0xFF	; 255
    1e3c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e3e:	8f ef       	ldi	r24, 0xFF	; 255
    1e40:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e42:	08 95       	ret

00001e44 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1e44:	fc 01       	movw	r30, r24
	if (!(Stream))
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	59 f4       	brne	.+22     	; 0x1e60 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1e4a:	8f e0       	ldi	r24, 0x0F	; 15
    1e4c:	95 e0       	ldi	r25, 0x05	; 5
    1e4e:	90 93 1e 05 	sts	0x051E, r25
    1e52:	80 93 1d 05 	sts	0x051D, r24
		stdout = Stream;
    1e56:	90 93 20 05 	sts	0x0520, r25
    1e5a:	80 93 1f 05 	sts	0x051F, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1e5e:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e60:	8e e0       	ldi	r24, 0x0E	; 14
    1e62:	df 01       	movw	r26, r30
    1e64:	1d 92       	st	X+, r1
    1e66:	8a 95       	dec	r24
    1e68:	e9 f7       	brne	.-6      	; 0x1e64 <Serial_CreateStream+0x20>
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	83 83       	std	Z+3, r24	; 0x03
    1e6e:	87 e0       	ldi	r24, 0x07	; 7
    1e70:	9f e0       	ldi	r25, 0x0F	; 15
    1e72:	91 87       	std	Z+9, r25	; 0x09
    1e74:	80 87       	std	Z+8, r24	; 0x08
    1e76:	80 e1       	ldi	r24, 0x10	; 16
    1e78:	9f e0       	ldi	r25, 0x0F	; 15
    1e7a:	93 87       	std	Z+11, r25	; 0x0b
    1e7c:	82 87       	std	Z+10, r24	; 0x0a
    1e7e:	08 95       	ret

00001e80 <printf_P>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	37 96       	adiw	r30, 0x07	; 7
    1e90:	61 91       	ld	r22, Z+
    1e92:	71 91       	ld	r23, Z+
    1e94:	0f e1       	ldi	r16, 0x1F	; 31
    1e96:	15 e0       	ldi	r17, 0x05	; 5
    1e98:	d8 01       	movw	r26, r16
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	9c 91       	ld	r25, X
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	13 96       	adiw	r26, 0x03	; 3
    1ea2:	2c 91       	ld	r18, X
    1ea4:	13 97       	sbiw	r26, 0x03	; 3
    1ea6:	28 60       	ori	r18, 0x08	; 8
    1ea8:	13 96       	adiw	r26, 0x03	; 3
    1eaa:	2c 93       	st	X, r18
    1eac:	af 01       	movw	r20, r30
    1eae:	3a d0       	rcall	.+116    	; 0x1f24 <vfprintf>
    1eb0:	d8 01       	movw	r26, r16
    1eb2:	ed 91       	ld	r30, X+
    1eb4:	fc 91       	ld	r31, X
    1eb6:	23 81       	ldd	r18, Z+3	; 0x03
    1eb8:	27 7f       	andi	r18, 0xF7	; 247
    1eba:	23 83       	std	Z+3, r18	; 0x03
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	08 95       	ret

00001ec6 <puts_P>:
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	e0 91 1f 05 	lds	r30, 0x051F
    1ed4:	f0 91 20 05 	lds	r31, 0x0520
    1ed8:	83 81       	ldd	r24, Z+3	; 0x03
    1eda:	81 ff       	sbrs	r24, 1
    1edc:	1c c0       	rjmp	.+56     	; 0x1f16 <puts_P+0x50>
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	84 91       	lpm	r24, Z
    1ee6:	60 91 1f 05 	lds	r22, 0x051F
    1eea:	70 91 20 05 	lds	r23, 0x0520
    1eee:	db 01       	movw	r26, r22
    1ef0:	18 96       	adiw	r26, 0x08	; 8
    1ef2:	ed 91       	ld	r30, X+
    1ef4:	fc 91       	ld	r31, X
    1ef6:	19 97       	sbiw	r26, 0x09	; 9
    1ef8:	88 23       	and	r24, r24
    1efa:	39 f0       	breq	.+14     	; 0x1f0a <puts_P+0x44>
    1efc:	09 95       	icall
    1efe:	89 2b       	or	r24, r25
    1f00:	11 f0       	breq	.+4      	; 0x1f06 <puts_P+0x40>
    1f02:	0f ef       	ldi	r16, 0xFF	; 255
    1f04:	1f ef       	ldi	r17, 0xFF	; 255
    1f06:	21 96       	adiw	r28, 0x01	; 1
    1f08:	ec cf       	rjmp	.-40     	; 0x1ee2 <puts_P+0x1c>
    1f0a:	8a e0       	ldi	r24, 0x0A	; 10
    1f0c:	09 95       	icall
    1f0e:	89 2b       	or	r24, r25
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <puts_P+0x50>
    1f12:	c8 01       	movw	r24, r16
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <puts_P+0x54>
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <vfprintf>:
    1f24:	2f 92       	push	r2
    1f26:	3f 92       	push	r3
    1f28:	4f 92       	push	r4
    1f2a:	5f 92       	push	r5
    1f2c:	6f 92       	push	r6
    1f2e:	7f 92       	push	r7
    1f30:	8f 92       	push	r8
    1f32:	9f 92       	push	r9
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	7c 01       	movw	r14, r24
    1f5a:	6b 01       	movw	r12, r22
    1f5c:	8a 01       	movw	r16, r20
    1f5e:	fc 01       	movw	r30, r24
    1f60:	17 82       	std	Z+7, r1	; 0x07
    1f62:	16 82       	std	Z+6, r1	; 0x06
    1f64:	83 81       	ldd	r24, Z+3	; 0x03
    1f66:	81 ff       	sbrs	r24, 1
    1f68:	b0 c1       	rjmp	.+864    	; 0x22ca <__stack+0x1cb>
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	4c 01       	movw	r8, r24
    1f70:	f7 01       	movw	r30, r14
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	f6 01       	movw	r30, r12
    1f76:	93 fd       	sbrc	r25, 3
    1f78:	85 91       	lpm	r24, Z+
    1f7a:	93 ff       	sbrs	r25, 3
    1f7c:	81 91       	ld	r24, Z+
    1f7e:	6f 01       	movw	r12, r30
    1f80:	88 23       	and	r24, r24
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <vfprintf+0x62>
    1f84:	9e c1       	rjmp	.+828    	; 0x22c2 <__stack+0x1c3>
    1f86:	85 32       	cpi	r24, 0x25	; 37
    1f88:	39 f4       	brne	.+14     	; 0x1f98 <vfprintf+0x74>
    1f8a:	93 fd       	sbrc	r25, 3
    1f8c:	85 91       	lpm	r24, Z+
    1f8e:	93 ff       	sbrs	r25, 3
    1f90:	81 91       	ld	r24, Z+
    1f92:	6f 01       	movw	r12, r30
    1f94:	85 32       	cpi	r24, 0x25	; 37
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <vfprintf+0x7c>
    1f98:	b7 01       	movw	r22, r14
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	c7 d1       	rcall	.+910    	; 0x232c <fputc>
    1f9e:	e8 cf       	rjmp	.-48     	; 0x1f70 <vfprintf+0x4c>
    1fa0:	51 2c       	mov	r5, r1
    1fa2:	31 2c       	mov	r3, r1
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	20 32       	cpi	r18, 0x20	; 32
    1fa8:	a0 f4       	brcc	.+40     	; 0x1fd2 <vfprintf+0xae>
    1faa:	8b 32       	cpi	r24, 0x2B	; 43
    1fac:	69 f0       	breq	.+26     	; 0x1fc8 <vfprintf+0xa4>
    1fae:	30 f4       	brcc	.+12     	; 0x1fbc <vfprintf+0x98>
    1fb0:	80 32       	cpi	r24, 0x20	; 32
    1fb2:	59 f0       	breq	.+22     	; 0x1fca <vfprintf+0xa6>
    1fb4:	83 32       	cpi	r24, 0x23	; 35
    1fb6:	69 f4       	brne	.+26     	; 0x1fd2 <vfprintf+0xae>
    1fb8:	20 61       	ori	r18, 0x10	; 16
    1fba:	2c c0       	rjmp	.+88     	; 0x2014 <vfprintf+0xf0>
    1fbc:	8d 32       	cpi	r24, 0x2D	; 45
    1fbe:	39 f0       	breq	.+14     	; 0x1fce <vfprintf+0xaa>
    1fc0:	80 33       	cpi	r24, 0x30	; 48
    1fc2:	39 f4       	brne	.+14     	; 0x1fd2 <vfprintf+0xae>
    1fc4:	21 60       	ori	r18, 0x01	; 1
    1fc6:	26 c0       	rjmp	.+76     	; 0x2014 <vfprintf+0xf0>
    1fc8:	22 60       	ori	r18, 0x02	; 2
    1fca:	24 60       	ori	r18, 0x04	; 4
    1fcc:	23 c0       	rjmp	.+70     	; 0x2014 <vfprintf+0xf0>
    1fce:	28 60       	ori	r18, 0x08	; 8
    1fd0:	21 c0       	rjmp	.+66     	; 0x2014 <vfprintf+0xf0>
    1fd2:	27 fd       	sbrc	r18, 7
    1fd4:	27 c0       	rjmp	.+78     	; 0x2024 <vfprintf+0x100>
    1fd6:	30 ed       	ldi	r19, 0xD0	; 208
    1fd8:	38 0f       	add	r19, r24
    1fda:	3a 30       	cpi	r19, 0x0A	; 10
    1fdc:	78 f4       	brcc	.+30     	; 0x1ffc <vfprintf+0xd8>
    1fde:	26 ff       	sbrs	r18, 6
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <vfprintf+0xca>
    1fe2:	fa e0       	ldi	r31, 0x0A	; 10
    1fe4:	5f 9e       	mul	r5, r31
    1fe6:	30 0d       	add	r19, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	53 2e       	mov	r5, r19
    1fec:	13 c0       	rjmp	.+38     	; 0x2014 <vfprintf+0xf0>
    1fee:	8a e0       	ldi	r24, 0x0A	; 10
    1ff0:	38 9e       	mul	r3, r24
    1ff2:	30 0d       	add	r19, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	33 2e       	mov	r3, r19
    1ff8:	20 62       	ori	r18, 0x20	; 32
    1ffa:	0c c0       	rjmp	.+24     	; 0x2014 <vfprintf+0xf0>
    1ffc:	8e 32       	cpi	r24, 0x2E	; 46
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <vfprintf+0xe4>
    2000:	26 fd       	sbrc	r18, 6
    2002:	5f c1       	rjmp	.+702    	; 0x22c2 <__stack+0x1c3>
    2004:	20 64       	ori	r18, 0x40	; 64
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <vfprintf+0xf0>
    2008:	8c 36       	cpi	r24, 0x6C	; 108
    200a:	11 f4       	brne	.+4      	; 0x2010 <vfprintf+0xec>
    200c:	20 68       	ori	r18, 0x80	; 128
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <vfprintf+0xf0>
    2010:	88 36       	cpi	r24, 0x68	; 104
    2012:	41 f4       	brne	.+16     	; 0x2024 <vfprintf+0x100>
    2014:	f6 01       	movw	r30, r12
    2016:	93 fd       	sbrc	r25, 3
    2018:	85 91       	lpm	r24, Z+
    201a:	93 ff       	sbrs	r25, 3
    201c:	81 91       	ld	r24, Z+
    201e:	6f 01       	movw	r12, r30
    2020:	81 11       	cpse	r24, r1
    2022:	c1 cf       	rjmp	.-126    	; 0x1fa6 <vfprintf+0x82>
    2024:	98 2f       	mov	r25, r24
    2026:	9f 7d       	andi	r25, 0xDF	; 223
    2028:	95 54       	subi	r25, 0x45	; 69
    202a:	93 30       	cpi	r25, 0x03	; 3
    202c:	28 f4       	brcc	.+10     	; 0x2038 <vfprintf+0x114>
    202e:	0c 5f       	subi	r16, 0xFC	; 252
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ff e3       	ldi	r31, 0x3F	; 63
    2034:	f9 83       	std	Y+1, r31	; 0x01
    2036:	0d c0       	rjmp	.+26     	; 0x2052 <vfprintf+0x12e>
    2038:	83 36       	cpi	r24, 0x63	; 99
    203a:	31 f0       	breq	.+12     	; 0x2048 <vfprintf+0x124>
    203c:	83 37       	cpi	r24, 0x73	; 115
    203e:	71 f0       	breq	.+28     	; 0x205c <vfprintf+0x138>
    2040:	83 35       	cpi	r24, 0x53	; 83
    2042:	09 f0       	breq	.+2      	; 0x2046 <vfprintf+0x122>
    2044:	57 c0       	rjmp	.+174    	; 0x20f4 <vfprintf+0x1d0>
    2046:	21 c0       	rjmp	.+66     	; 0x208a <vfprintf+0x166>
    2048:	f8 01       	movw	r30, r16
    204a:	80 81       	ld	r24, Z
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	0e 5f       	subi	r16, 0xFE	; 254
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	44 24       	eor	r4, r4
    2054:	43 94       	inc	r4
    2056:	51 2c       	mov	r5, r1
    2058:	54 01       	movw	r10, r8
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <vfprintf+0x160>
    205c:	38 01       	movw	r6, r16
    205e:	f2 e0       	ldi	r31, 0x02	; 2
    2060:	6f 0e       	add	r6, r31
    2062:	71 1c       	adc	r7, r1
    2064:	f8 01       	movw	r30, r16
    2066:	a0 80       	ld	r10, Z
    2068:	b1 80       	ldd	r11, Z+1	; 0x01
    206a:	26 ff       	sbrs	r18, 6
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfprintf+0x150>
    206e:	65 2d       	mov	r22, r5
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x154>
    2074:	6f ef       	ldi	r22, 0xFF	; 255
    2076:	7f ef       	ldi	r23, 0xFF	; 255
    2078:	c5 01       	movw	r24, r10
    207a:	2c 87       	std	Y+12, r18	; 0x0c
    207c:	4c d1       	rcall	.+664    	; 0x2316 <strnlen>
    207e:	2c 01       	movw	r4, r24
    2080:	83 01       	movw	r16, r6
    2082:	2c 85       	ldd	r18, Y+12	; 0x0c
    2084:	2f 77       	andi	r18, 0x7F	; 127
    2086:	22 2e       	mov	r2, r18
    2088:	16 c0       	rjmp	.+44     	; 0x20b6 <vfprintf+0x192>
    208a:	38 01       	movw	r6, r16
    208c:	f2 e0       	ldi	r31, 0x02	; 2
    208e:	6f 0e       	add	r6, r31
    2090:	71 1c       	adc	r7, r1
    2092:	f8 01       	movw	r30, r16
    2094:	a0 80       	ld	r10, Z
    2096:	b1 80       	ldd	r11, Z+1	; 0x01
    2098:	26 ff       	sbrs	r18, 6
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <vfprintf+0x17e>
    209c:	65 2d       	mov	r22, r5
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <vfprintf+0x182>
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	7f ef       	ldi	r23, 0xFF	; 255
    20a6:	c5 01       	movw	r24, r10
    20a8:	2c 87       	std	Y+12, r18	; 0x0c
    20aa:	2a d1       	rcall	.+596    	; 0x2300 <strnlen_P>
    20ac:	2c 01       	movw	r4, r24
    20ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    20b0:	20 68       	ori	r18, 0x80	; 128
    20b2:	22 2e       	mov	r2, r18
    20b4:	83 01       	movw	r16, r6
    20b6:	23 fc       	sbrc	r2, 3
    20b8:	19 c0       	rjmp	.+50     	; 0x20ec <vfprintf+0x1c8>
    20ba:	83 2d       	mov	r24, r3
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	48 16       	cp	r4, r24
    20c0:	59 06       	cpc	r5, r25
    20c2:	a0 f4       	brcc	.+40     	; 0x20ec <vfprintf+0x1c8>
    20c4:	b7 01       	movw	r22, r14
    20c6:	80 e2       	ldi	r24, 0x20	; 32
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	30 d1       	rcall	.+608    	; 0x232c <fputc>
    20cc:	3a 94       	dec	r3
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <vfprintf+0x196>
    20d0:	f5 01       	movw	r30, r10
    20d2:	27 fc       	sbrc	r2, 7
    20d4:	85 91       	lpm	r24, Z+
    20d6:	27 fe       	sbrs	r2, 7
    20d8:	81 91       	ld	r24, Z+
    20da:	5f 01       	movw	r10, r30
    20dc:	b7 01       	movw	r22, r14
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	25 d1       	rcall	.+586    	; 0x232c <fputc>
    20e2:	31 10       	cpse	r3, r1
    20e4:	3a 94       	dec	r3
    20e6:	f1 e0       	ldi	r31, 0x01	; 1
    20e8:	4f 1a       	sub	r4, r31
    20ea:	51 08       	sbc	r5, r1
    20ec:	41 14       	cp	r4, r1
    20ee:	51 04       	cpc	r5, r1
    20f0:	79 f7       	brne	.-34     	; 0x20d0 <vfprintf+0x1ac>
    20f2:	de c0       	rjmp	.+444    	; 0x22b0 <__stack+0x1b1>
    20f4:	84 36       	cpi	r24, 0x64	; 100
    20f6:	11 f0       	breq	.+4      	; 0x20fc <vfprintf+0x1d8>
    20f8:	89 36       	cpi	r24, 0x69	; 105
    20fa:	31 f5       	brne	.+76     	; 0x2148 <__stack+0x49>
    20fc:	f8 01       	movw	r30, r16
    20fe:	27 ff       	sbrs	r18, 7
    2100:	07 c0       	rjmp	.+14     	; 0x2110 <__stack+0x11>
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	0c 5f       	subi	r16, 0xFC	; 252
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <__stack+0x21>
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	88 27       	eor	r24, r24
    2116:	77 fd       	sbrc	r23, 7
    2118:	80 95       	com	r24
    211a:	98 2f       	mov	r25, r24
    211c:	0e 5f       	subi	r16, 0xFE	; 254
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	2f 76       	andi	r18, 0x6F	; 111
    2122:	b2 2e       	mov	r11, r18
    2124:	97 ff       	sbrs	r25, 7
    2126:	09 c0       	rjmp	.+18     	; 0x213a <__stack+0x3b>
    2128:	90 95       	com	r25
    212a:	80 95       	com	r24
    212c:	70 95       	com	r23
    212e:	61 95       	neg	r22
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8f 4f       	sbci	r24, 0xFF	; 255
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	20 68       	ori	r18, 0x80	; 128
    2138:	b2 2e       	mov	r11, r18
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	a4 01       	movw	r20, r8
    2140:	27 d1       	rcall	.+590    	; 0x2390 <__ultoa_invert>
    2142:	a8 2e       	mov	r10, r24
    2144:	a8 18       	sub	r10, r8
    2146:	43 c0       	rjmp	.+134    	; 0x21ce <__stack+0xcf>
    2148:	85 37       	cpi	r24, 0x75	; 117
    214a:	29 f4       	brne	.+10     	; 0x2156 <__stack+0x57>
    214c:	2f 7e       	andi	r18, 0xEF	; 239
    214e:	b2 2e       	mov	r11, r18
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	25 c0       	rjmp	.+74     	; 0x21a0 <__stack+0xa1>
    2156:	f2 2f       	mov	r31, r18
    2158:	f9 7f       	andi	r31, 0xF9	; 249
    215a:	bf 2e       	mov	r11, r31
    215c:	8f 36       	cpi	r24, 0x6F	; 111
    215e:	c1 f0       	breq	.+48     	; 0x2190 <__stack+0x91>
    2160:	18 f4       	brcc	.+6      	; 0x2168 <__stack+0x69>
    2162:	88 35       	cpi	r24, 0x58	; 88
    2164:	79 f0       	breq	.+30     	; 0x2184 <__stack+0x85>
    2166:	ad c0       	rjmp	.+346    	; 0x22c2 <__stack+0x1c3>
    2168:	80 37       	cpi	r24, 0x70	; 112
    216a:	19 f0       	breq	.+6      	; 0x2172 <__stack+0x73>
    216c:	88 37       	cpi	r24, 0x78	; 120
    216e:	21 f0       	breq	.+8      	; 0x2178 <__stack+0x79>
    2170:	a8 c0       	rjmp	.+336    	; 0x22c2 <__stack+0x1c3>
    2172:	2f 2f       	mov	r18, r31
    2174:	20 61       	ori	r18, 0x10	; 16
    2176:	b2 2e       	mov	r11, r18
    2178:	b4 fe       	sbrs	r11, 4
    217a:	0d c0       	rjmp	.+26     	; 0x2196 <__stack+0x97>
    217c:	8b 2d       	mov	r24, r11
    217e:	84 60       	ori	r24, 0x04	; 4
    2180:	b8 2e       	mov	r11, r24
    2182:	09 c0       	rjmp	.+18     	; 0x2196 <__stack+0x97>
    2184:	24 ff       	sbrs	r18, 4
    2186:	0a c0       	rjmp	.+20     	; 0x219c <__stack+0x9d>
    2188:	9f 2f       	mov	r25, r31
    218a:	96 60       	ori	r25, 0x06	; 6
    218c:	b9 2e       	mov	r11, r25
    218e:	06 c0       	rjmp	.+12     	; 0x219c <__stack+0x9d>
    2190:	28 e0       	ldi	r18, 0x08	; 8
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <__stack+0xa1>
    2196:	20 e1       	ldi	r18, 0x10	; 16
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <__stack+0xa1>
    219c:	20 e1       	ldi	r18, 0x10	; 16
    219e:	32 e0       	ldi	r19, 0x02	; 2
    21a0:	f8 01       	movw	r30, r16
    21a2:	b7 fe       	sbrs	r11, 7
    21a4:	07 c0       	rjmp	.+14     	; 0x21b4 <__stack+0xb5>
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	0c 5f       	subi	r16, 0xFC	; 252
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <__stack+0xc1>
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 5f       	subi	r16, 0xFE	; 254
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	a4 01       	movw	r20, r8
    21c2:	e6 d0       	rcall	.+460    	; 0x2390 <__ultoa_invert>
    21c4:	a8 2e       	mov	r10, r24
    21c6:	a8 18       	sub	r10, r8
    21c8:	fb 2d       	mov	r31, r11
    21ca:	ff 77       	andi	r31, 0x7F	; 127
    21cc:	bf 2e       	mov	r11, r31
    21ce:	b6 fe       	sbrs	r11, 6
    21d0:	0b c0       	rjmp	.+22     	; 0x21e8 <__stack+0xe9>
    21d2:	2b 2d       	mov	r18, r11
    21d4:	2e 7f       	andi	r18, 0xFE	; 254
    21d6:	a5 14       	cp	r10, r5
    21d8:	50 f4       	brcc	.+20     	; 0x21ee <__stack+0xef>
    21da:	b4 fe       	sbrs	r11, 4
    21dc:	0a c0       	rjmp	.+20     	; 0x21f2 <__stack+0xf3>
    21de:	b2 fc       	sbrc	r11, 2
    21e0:	08 c0       	rjmp	.+16     	; 0x21f2 <__stack+0xf3>
    21e2:	2b 2d       	mov	r18, r11
    21e4:	2e 7e       	andi	r18, 0xEE	; 238
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <__stack+0xf3>
    21e8:	7a 2c       	mov	r7, r10
    21ea:	2b 2d       	mov	r18, r11
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <__stack+0xf5>
    21ee:	7a 2c       	mov	r7, r10
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <__stack+0xf5>
    21f2:	75 2c       	mov	r7, r5
    21f4:	24 ff       	sbrs	r18, 4
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <__stack+0x113>
    21f8:	fe 01       	movw	r30, r28
    21fa:	ea 0d       	add	r30, r10
    21fc:	f1 1d       	adc	r31, r1
    21fe:	80 81       	ld	r24, Z
    2200:	80 33       	cpi	r24, 0x30	; 48
    2202:	11 f4       	brne	.+4      	; 0x2208 <__stack+0x109>
    2204:	29 7e       	andi	r18, 0xE9	; 233
    2206:	09 c0       	rjmp	.+18     	; 0x221a <__stack+0x11b>
    2208:	22 ff       	sbrs	r18, 2
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <__stack+0x119>
    220c:	73 94       	inc	r7
    220e:	73 94       	inc	r7
    2210:	04 c0       	rjmp	.+8      	; 0x221a <__stack+0x11b>
    2212:	82 2f       	mov	r24, r18
    2214:	86 78       	andi	r24, 0x86	; 134
    2216:	09 f0       	breq	.+2      	; 0x221a <__stack+0x11b>
    2218:	73 94       	inc	r7
    221a:	23 fd       	sbrc	r18, 3
    221c:	12 c0       	rjmp	.+36     	; 0x2242 <__stack+0x143>
    221e:	20 ff       	sbrs	r18, 0
    2220:	06 c0       	rjmp	.+12     	; 0x222e <__stack+0x12f>
    2222:	5a 2c       	mov	r5, r10
    2224:	73 14       	cp	r7, r3
    2226:	18 f4       	brcc	.+6      	; 0x222e <__stack+0x12f>
    2228:	53 0c       	add	r5, r3
    222a:	57 18       	sub	r5, r7
    222c:	73 2c       	mov	r7, r3
    222e:	73 14       	cp	r7, r3
    2230:	60 f4       	brcc	.+24     	; 0x224a <__stack+0x14b>
    2232:	b7 01       	movw	r22, r14
    2234:	80 e2       	ldi	r24, 0x20	; 32
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	2c 87       	std	Y+12, r18	; 0x0c
    223a:	78 d0       	rcall	.+240    	; 0x232c <fputc>
    223c:	73 94       	inc	r7
    223e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2240:	f6 cf       	rjmp	.-20     	; 0x222e <__stack+0x12f>
    2242:	73 14       	cp	r7, r3
    2244:	10 f4       	brcc	.+4      	; 0x224a <__stack+0x14b>
    2246:	37 18       	sub	r3, r7
    2248:	01 c0       	rjmp	.+2      	; 0x224c <__stack+0x14d>
    224a:	31 2c       	mov	r3, r1
    224c:	24 ff       	sbrs	r18, 4
    224e:	11 c0       	rjmp	.+34     	; 0x2272 <__stack+0x173>
    2250:	b7 01       	movw	r22, r14
    2252:	80 e3       	ldi	r24, 0x30	; 48
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	2c 87       	std	Y+12, r18	; 0x0c
    2258:	69 d0       	rcall	.+210    	; 0x232c <fputc>
    225a:	2c 85       	ldd	r18, Y+12	; 0x0c
    225c:	22 ff       	sbrs	r18, 2
    225e:	16 c0       	rjmp	.+44     	; 0x228c <__stack+0x18d>
    2260:	21 ff       	sbrs	r18, 1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <__stack+0x16b>
    2264:	88 e5       	ldi	r24, 0x58	; 88
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <__stack+0x16f>
    226a:	88 e7       	ldi	r24, 0x78	; 120
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	b7 01       	movw	r22, r14
    2270:	0c c0       	rjmp	.+24     	; 0x228a <__stack+0x18b>
    2272:	82 2f       	mov	r24, r18
    2274:	86 78       	andi	r24, 0x86	; 134
    2276:	51 f0       	breq	.+20     	; 0x228c <__stack+0x18d>
    2278:	21 fd       	sbrc	r18, 1
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <__stack+0x181>
    227c:	80 e2       	ldi	r24, 0x20	; 32
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <__stack+0x183>
    2280:	8b e2       	ldi	r24, 0x2B	; 43
    2282:	27 fd       	sbrc	r18, 7
    2284:	8d e2       	ldi	r24, 0x2D	; 45
    2286:	b7 01       	movw	r22, r14
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	50 d0       	rcall	.+160    	; 0x232c <fputc>
    228c:	a5 14       	cp	r10, r5
    228e:	30 f4       	brcc	.+12     	; 0x229c <__stack+0x19d>
    2290:	b7 01       	movw	r22, r14
    2292:	80 e3       	ldi	r24, 0x30	; 48
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	4a d0       	rcall	.+148    	; 0x232c <fputc>
    2298:	5a 94       	dec	r5
    229a:	f8 cf       	rjmp	.-16     	; 0x228c <__stack+0x18d>
    229c:	aa 94       	dec	r10
    229e:	f4 01       	movw	r30, r8
    22a0:	ea 0d       	add	r30, r10
    22a2:	f1 1d       	adc	r31, r1
    22a4:	80 81       	ld	r24, Z
    22a6:	b7 01       	movw	r22, r14
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	40 d0       	rcall	.+128    	; 0x232c <fputc>
    22ac:	a1 10       	cpse	r10, r1
    22ae:	f6 cf       	rjmp	.-20     	; 0x229c <__stack+0x19d>
    22b0:	33 20       	and	r3, r3
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__stack+0x1b7>
    22b4:	5d ce       	rjmp	.-838    	; 0x1f70 <vfprintf+0x4c>
    22b6:	b7 01       	movw	r22, r14
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	37 d0       	rcall	.+110    	; 0x232c <fputc>
    22be:	3a 94       	dec	r3
    22c0:	f7 cf       	rjmp	.-18     	; 0x22b0 <__stack+0x1b1>
    22c2:	f7 01       	movw	r30, r14
    22c4:	86 81       	ldd	r24, Z+6	; 0x06
    22c6:	97 81       	ldd	r25, Z+7	; 0x07
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <__stack+0x1cf>
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	9f ef       	ldi	r25, 0xFF	; 255
    22ce:	2c 96       	adiw	r28, 0x0c	; 12
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	7f 90       	pop	r7
    22f4:	6f 90       	pop	r6
    22f6:	5f 90       	pop	r5
    22f8:	4f 90       	pop	r4
    22fa:	3f 90       	pop	r3
    22fc:	2f 90       	pop	r2
    22fe:	08 95       	ret

00002300 <strnlen_P>:
    2300:	fc 01       	movw	r30, r24
    2302:	05 90       	lpm	r0, Z+
    2304:	61 50       	subi	r22, 0x01	; 1
    2306:	70 40       	sbci	r23, 0x00	; 0
    2308:	01 10       	cpse	r0, r1
    230a:	d8 f7       	brcc	.-10     	; 0x2302 <strnlen_P+0x2>
    230c:	80 95       	com	r24
    230e:	90 95       	com	r25
    2310:	8e 0f       	add	r24, r30
    2312:	9f 1f       	adc	r25, r31
    2314:	08 95       	ret

00002316 <strnlen>:
    2316:	fc 01       	movw	r30, r24
    2318:	61 50       	subi	r22, 0x01	; 1
    231a:	70 40       	sbci	r23, 0x00	; 0
    231c:	01 90       	ld	r0, Z+
    231e:	01 10       	cpse	r0, r1
    2320:	d8 f7       	brcc	.-10     	; 0x2318 <strnlen+0x2>
    2322:	80 95       	com	r24
    2324:	90 95       	com	r25
    2326:	8e 0f       	add	r24, r30
    2328:	9f 1f       	adc	r25, r31
    232a:	08 95       	ret

0000232c <fputc>:
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	18 2f       	mov	r17, r24
    2336:	09 2f       	mov	r16, r25
    2338:	eb 01       	movw	r28, r22
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	81 fd       	sbrc	r24, 1
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <fputc+0x1a>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	20 c0       	rjmp	.+64     	; 0x2386 <fputc+0x5a>
    2346:	82 ff       	sbrs	r24, 2
    2348:	10 c0       	rjmp	.+32     	; 0x236a <fputc+0x3e>
    234a:	4e 81       	ldd	r20, Y+6	; 0x06
    234c:	5f 81       	ldd	r21, Y+7	; 0x07
    234e:	2c 81       	ldd	r18, Y+4	; 0x04
    2350:	3d 81       	ldd	r19, Y+5	; 0x05
    2352:	42 17       	cp	r20, r18
    2354:	53 07       	cpc	r21, r19
    2356:	7c f4       	brge	.+30     	; 0x2376 <fputc+0x4a>
    2358:	e8 81       	ld	r30, Y
    235a:	f9 81       	ldd	r31, Y+1	; 0x01
    235c:	9f 01       	movw	r18, r30
    235e:	2f 5f       	subi	r18, 0xFF	; 255
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	39 83       	std	Y+1, r19	; 0x01
    2364:	28 83       	st	Y, r18
    2366:	10 83       	st	Z, r17
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <fputc+0x4a>
    236a:	e8 85       	ldd	r30, Y+8	; 0x08
    236c:	f9 85       	ldd	r31, Y+9	; 0x09
    236e:	81 2f       	mov	r24, r17
    2370:	09 95       	icall
    2372:	89 2b       	or	r24, r25
    2374:	29 f7       	brne	.-54     	; 0x2340 <fputc+0x14>
    2376:	2e 81       	ldd	r18, Y+6	; 0x06
    2378:	3f 81       	ldd	r19, Y+7	; 0x07
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	3f 83       	std	Y+7, r19	; 0x07
    2380:	2e 83       	std	Y+6, r18	; 0x06
    2382:	81 2f       	mov	r24, r17
    2384:	90 2f       	mov	r25, r16
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <__ultoa_invert>:
    2390:	fa 01       	movw	r30, r20
    2392:	aa 27       	eor	r26, r26
    2394:	28 30       	cpi	r18, 0x08	; 8
    2396:	51 f1       	breq	.+84     	; 0x23ec <__ultoa_invert+0x5c>
    2398:	20 31       	cpi	r18, 0x10	; 16
    239a:	81 f1       	breq	.+96     	; 0x23fc <__ultoa_invert+0x6c>
    239c:	e8 94       	clt
    239e:	6f 93       	push	r22
    23a0:	6e 7f       	andi	r22, 0xFE	; 254
    23a2:	6e 5f       	subi	r22, 0xFE	; 254
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	8f 4f       	sbci	r24, 0xFF	; 255
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	af 4f       	sbci	r26, 0xFF	; 255
    23ac:	b1 e0       	ldi	r27, 0x01	; 1
    23ae:	3e d0       	rcall	.+124    	; 0x242c <__ultoa_invert+0x9c>
    23b0:	b4 e0       	ldi	r27, 0x04	; 4
    23b2:	3c d0       	rcall	.+120    	; 0x242c <__ultoa_invert+0x9c>
    23b4:	67 0f       	add	r22, r23
    23b6:	78 1f       	adc	r23, r24
    23b8:	89 1f       	adc	r24, r25
    23ba:	9a 1f       	adc	r25, r26
    23bc:	a1 1d       	adc	r26, r1
    23be:	68 0f       	add	r22, r24
    23c0:	79 1f       	adc	r23, r25
    23c2:	8a 1f       	adc	r24, r26
    23c4:	91 1d       	adc	r25, r1
    23c6:	a1 1d       	adc	r26, r1
    23c8:	6a 0f       	add	r22, r26
    23ca:	71 1d       	adc	r23, r1
    23cc:	81 1d       	adc	r24, r1
    23ce:	91 1d       	adc	r25, r1
    23d0:	a1 1d       	adc	r26, r1
    23d2:	20 d0       	rcall	.+64     	; 0x2414 <__ultoa_invert+0x84>
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <__ultoa_invert+0x48>
    23d6:	68 94       	set
    23d8:	3f 91       	pop	r19
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	26 9f       	mul	r18, r22
    23de:	11 24       	eor	r1, r1
    23e0:	30 19       	sub	r19, r0
    23e2:	30 5d       	subi	r19, 0xD0	; 208
    23e4:	31 93       	st	Z+, r19
    23e6:	de f6       	brtc	.-74     	; 0x239e <__ultoa_invert+0xe>
    23e8:	cf 01       	movw	r24, r30
    23ea:	08 95       	ret
    23ec:	46 2f       	mov	r20, r22
    23ee:	47 70       	andi	r20, 0x07	; 7
    23f0:	40 5d       	subi	r20, 0xD0	; 208
    23f2:	41 93       	st	Z+, r20
    23f4:	b3 e0       	ldi	r27, 0x03	; 3
    23f6:	0f d0       	rcall	.+30     	; 0x2416 <__ultoa_invert+0x86>
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0x5c>
    23fa:	f6 cf       	rjmp	.-20     	; 0x23e8 <__ultoa_invert+0x58>
    23fc:	46 2f       	mov	r20, r22
    23fe:	4f 70       	andi	r20, 0x0F	; 15
    2400:	40 5d       	subi	r20, 0xD0	; 208
    2402:	4a 33       	cpi	r20, 0x3A	; 58
    2404:	18 f0       	brcs	.+6      	; 0x240c <__ultoa_invert+0x7c>
    2406:	49 5d       	subi	r20, 0xD9	; 217
    2408:	31 fd       	sbrc	r19, 1
    240a:	40 52       	subi	r20, 0x20	; 32
    240c:	41 93       	st	Z+, r20
    240e:	02 d0       	rcall	.+4      	; 0x2414 <__ultoa_invert+0x84>
    2410:	a9 f7       	brne	.-22     	; 0x23fc <__ultoa_invert+0x6c>
    2412:	ea cf       	rjmp	.-44     	; 0x23e8 <__ultoa_invert+0x58>
    2414:	b4 e0       	ldi	r27, 0x04	; 4
    2416:	a6 95       	lsr	r26
    2418:	97 95       	ror	r25
    241a:	87 95       	ror	r24
    241c:	77 95       	ror	r23
    241e:	67 95       	ror	r22
    2420:	ba 95       	dec	r27
    2422:	c9 f7       	brne	.-14     	; 0x2416 <__ultoa_invert+0x86>
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	61 05       	cpc	r22, r1
    2428:	71 05       	cpc	r23, r1
    242a:	08 95       	ret
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	0a 2e       	mov	r0, r26
    2432:	06 94       	lsr	r0
    2434:	57 95       	ror	r21
    2436:	47 95       	ror	r20
    2438:	37 95       	ror	r19
    243a:	27 95       	ror	r18
    243c:	ba 95       	dec	r27
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__ultoa_invert+0xa2>
    2440:	62 0f       	add	r22, r18
    2442:	73 1f       	adc	r23, r19
    2444:	84 1f       	adc	r24, r20
    2446:	95 1f       	adc	r25, r21
    2448:	a0 1d       	adc	r26, r0
    244a:	08 95       	ret

0000244c <_exit>:
    244c:	f8 94       	cli

0000244e <__stop_program>:
    244e:	ff cf       	rjmp	.-2      	; 0x244e <__stop_program>

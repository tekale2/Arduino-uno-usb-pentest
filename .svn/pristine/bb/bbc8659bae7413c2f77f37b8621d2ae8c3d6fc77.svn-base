
Arduino-keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000f22  00000fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  0080010e  0080010e  00000fc4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000420  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000079b0  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f99  00000000  00000000  00008da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d4b  00000000  00000000  0000ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c24  00000000  00000000  0000da8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028b8  00000000  00000000  0000e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004c81  00000000  00000000  00010f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004c0  00000000  00000000  00015be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
   2:	00 00       	nop
				PLLCSR |= (1 << PLLE);
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
   e:	00 00       	nop
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	00 00       	nop
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
  1a:	00 00       	nop
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	00 00       	nop
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	00 00       	nop
	while (!(UDCON & (1 << RMWKUP)));
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
  26:	00 00       	nop
  28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
  2a:	00 00       	nop
}
  2c:	d1 c3       	rjmp	.+1954   	; 0x7d0 <__vector_11>
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  2e:	00 00       	nop
				
				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
  30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
  36:	00 00       	nop
  38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
  3a:	00 00       	nop
				*BytesRem      -= CurrDescriptorSize;
  3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
  3e:	00 00       	nop
  40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
  46:	00 00       	nop
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
				
		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
  48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
  4e:	00 00       	nop
  50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
  52:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
  54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
  56:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
  58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c1       	rjmp	.+648    	; 0x2e6 <__vector_23>
				*BytesRem      = PrevBytesRem;
  5e:	00 00       	nop
  60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
  62:	00 00       	nop
		
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
  64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
}
  66:	00 00       	nop
  68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
  6e:	00 00       	nop
  70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 04       	cpc	r10, r7
  76:	c3 04       	cpc	r12, r3
  78:	6c 05       	cpc	r22, r12
  7a:	c3 04       	cpc	r12, r3
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
  7c:	6c 05       	cpc	r22, r12
  7e:	f8 04       	cpc	r15, r8
  80:	15 05       	cpc	r17, r5
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
  82:	6c 05       	cpc	r22, r12
  84:	34 05       	cpc	r19, r4
  86:	46 05       	cpc	r20, r6

00000088 <ProductString>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
  88:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
  98:	64 00 00 00                                         d...

0000009c <ManufacturerString>:
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
  9c:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
  ac:	00 00                                               ..

000000ae <LanguageString>:
  ae:	04 03 09 04                                         ....

000000b2 <ConfigurationDescriptor>:
  b2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  c2:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
  d2:	00 0a                                               ..

000000d4 <DeviceDescriptor>:
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);

				Endpoint_ClearStatusStage();
  d4:	12 01 00 02 00 00 00 08 eb 03 42 20 00 00 01 02     ..........B ....
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
			  
			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
			                                                                 SCSI_Command_Pass : SCSI_Command_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
  e4:	00 01                                               ..

000000e6 <KeyboardReport>:
  e6:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
  f6:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 106:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 116:	75 08 15 00 26 e7 00 05 07 19 00 29 e7 81 00 c0     u...&......)....

00000126 <__ctors_end>:
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
 12a:	cf ef       	ldi	r28, 0xFF	; 255
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	de bf       	out	0x3e, r29	; 62
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	11 e0       	ldi	r17, 0x01	; 1

	while (Endpoint_IsStalled())
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b1 e0       	ldi	r27, 0x01	; 1
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
 138:	e2 e2       	ldi	r30, 0x22	; 34
 13a:	ff e0       	ldi	r31, 0x0F	; 15
		#endif
		
		if (MSInterfaceInfo->State.IsMassStoreReset)
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	ae 30       	cpi	r26, 0x0E	; 14
		  return;
	}
	
	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	ae e0       	ldi	r26, 0x0E	; 14
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	af 3a       	cpi	r26, 0xAF	; 175
 154:	b2 07       	cpc	r27, r18
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	4f d0       	rcall	.+158    	; 0x1f8 <main>
 15a:	e1 c6       	rjmp	.+3522   	; 0xf1e <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <SetupHardware>:
 15e:	bf 92       	push	r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
			
			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}
	
	if (MSInterfaceInfo->State.IsMassStoreReset)
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 170:	84 b7       	in	r24, 0x34	; 52
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	84 bf       	out	0x34, r24	; 52
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	80 93 60 00 	sts	0x0060, r24
 180:	10 92 60 00 	sts	0x0060, r1
 184:	0f be       	out	0x3f, r0	; 63
				UERST = 0;
 186:	8c ec       	ldi	r24, 0xCC	; 204
 188:	c8 2e       	mov	r12, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 18a:	d1 2c       	mov	r13, r1
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	f6 01       	movw	r30, r12
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
 196:	9a ec       	ldi	r25, 0xCA	; 202
 198:	e9 2e       	mov	r14, r25
				UERST = 0;
 19a:	f1 2c       	mov	r15, r1
 19c:	26 e0       	ldi	r18, 0x06	; 6
	{
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataOUTEndpointNumber);
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
		
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
 19e:	b2 2e       	mov	r11, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1a0:	f7 01       	movw	r30, r14
 1a2:	b0 82       	st	Z, r11
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 1a4:	08 ec       	ldi	r16, 0xC8	; 200
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	f8 01       	movw	r30, r16
 1aa:	10 82       	st	Z, r1
 1ac:	c9 ec       	ldi	r28, 0xC9	; 201
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	88 83       	st	Y, r24
 1b4:	53 9a       	sbi	0x0a, 3	; 10
 1b6:	5a 9a       	sbi	0x0b, 2	; 11
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
 1b8:	00 d3       	rcall	.+1536   	; 0x7ba <USB_Init>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	85 bd       	out	0x25, r24	; 37
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 1be:	5f 9a       	sbi	0x0b, 7	; 11
 1c0:	57 9a       	sbi	0x0a, 7	; 10
 1c2:	18 82       	st	Y, r1
 1c4:	f8 01       	movw	r30, r16
 1c6:	10 82       	st	Z, r1
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 1c8:	f7 01       	movw	r30, r14
 1ca:	10 82       	st	Z, r1
 1cc:	8f ec       	ldi	r24, 0xCF	; 207
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	f6 01       	movw	r30, r12
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
 1d2:	91 83       	std	Z+1, r25	; 0x01
	}
}
 1d4:	80 83       	st	Z, r24
 1d6:	f7 01       	movw	r30, r14
 1d8:	b0 82       	st	Z, r11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	f8 01       	movw	r30, r16

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = SERIAL_2X_UBBRVAL(9600);

	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
	UCSR1A = (1 << U2X1);
 1de:	80 83       	st	Z, r24
 1e0:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1e2:	88 83       	st	Y, r24
 1e4:	df 91       	pop	r29
}
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	08 95       	ret

000001f8 <main>:
 1f8:	ad d0       	rcall	.+346    	; 0x354 <init_vars>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	init_vars();
 1fa:	b1 df       	rcall	.-158    	; 0x15e <SetupHardware>
	SetupHardware();
 1fc:	2f b7       	in	r18, 0x3f	; 63
 1fe:	f8 94       	cli
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 200:	8f e1       	ldi	r24, 0x1F	; 31
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 202:	91 e0       	ldi	r25, 0x01	; 1
			{
				Buffer->In  = Buffer->Buffer;
 204:	90 93 a0 01 	sts	0x01A0, r25
 208:	80 93 9f 01 	sts	0x019F, r24
 20c:	90 93 a2 01 	sts	0x01A2, r25
				Buffer->Out = Buffer->Buffer;
 210:	80 93 a1 01 	sts	0x01A1, r24
 214:	2f bf       	out	0x3f, r18	; 63
 216:	78 94       	sei
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 218:	80 e0       	ldi	r24, 0x00	; 0

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	sei();
 21a:	91 e0       	ldi	r25, 0x01	; 1

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
 21c:	b4 d5       	rcall	.+2920   	; 0xd86 <HID_Device_USBTask>
 21e:	65 d4       	rcall	.+2250   	; 0xaea <USB_USBTask>
 220:	fb cf       	rjmp	.-10     	; 0x218 <main+0x20>

00000222 <EVENT_USB_Device_Connect>:
 222:	08 95       	ret

00000224 <EVENT_USB_Device_Disconnect>:
		USB_USBTask();
 224:	08 95       	ret

00000226 <EVENT_USB_Device_ConfigurationChanged>:
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_READY);

	HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 22a:	8a d5       	rcall	.+2836   	; 0xd40 <HID_Device_ConfigureEndpoints>
 22c:	e2 ee       	ldi	r30, 0xE2	; 226
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	84 60       	ori	r24, 0x04	; 4
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <EVENT_USB_Device_UnhandledControlRequest>:
 238:	80 e0       	ldi	r24, 0x00	; 0
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	67 c4       	rjmp	.+2254   	; 0xb0c <HID_Device_ProcessControlRequest>

0000023e <EVENT_USB_Device_StartOfFrame>:
 23e:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 242:	90 91 0c 01 	lds	r25, 0x010C
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	29 f0       	breq	.+10     	; 0x254 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	90 93 0c 01 	sts	0x010C, r25
 250:	80 93 0b 01 	sts	0x010B, r24
 254:	08 95       	ret

00000256 <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 25a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 25c:	f8 94       	cli
			{
				Count = Buffer->Count;
 25e:	80 91 a3 01 	lds	r24, 0x01A3
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 262:	9f bf       	out	0x3f, r25	; 63
	uint8_t *datap = ReportData;
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	48 f1       	brcs	.+82     	; 0x2ba <CALLBACK_HID_Device_CreateHIDReport+0x64>
 268:	af e0       	ldi	r26, 0x0F	; 15
 26a:	b1 e0       	ldi	r27, 0x01	; 1
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	91 e0       	ldi	r25, 0x01	; 1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 270:	e0 91 a1 01 	lds	r30, 0x01A1
 274:	f0 91 a2 01 	lds	r31, 0x01A2
 278:	51 91       	ld	r21, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 27a:	f0 93 a2 01 	sts	0x01A2, r31
 27e:	e0 93 a1 01 	sts	0x01A1, r30
 282:	ef 59       	subi	r30, 0x9F	; 159
 284:	f1 40       	sbci	r31, 0x01	; 1
 286:	21 f4       	brne	.+8      	; 0x290 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
			  Buffer->Out = Buffer->Buffer;
 288:	90 93 a2 01 	sts	0x01A2, r25
 28c:	80 93 a1 01 	sts	0x01A1, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 290:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 292:	f8 94       	cli
			{
				Buffer->Count--;
 294:	40 91 a3 01 	lds	r20, 0x01A3
 298:	41 50       	subi	r20, 0x01	; 1
 29a:	40 93 a3 01 	sts	0x01A3, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 29e:	6f bf       	out	0x3f, r22	; 63
	    for (ind=0; ind<8; ind++) {
		keyboardData[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 2a0:	5d 93       	st	X+, r21
	int ind;

	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
	    for (ind=0; ind<8; ind++) {
 2a2:	e1 e0       	ldi	r30, 0x01	; 1
 2a4:	a7 31       	cpi	r26, 0x17	; 23
 2a6:	be 07       	cpc	r27, r30
 2a8:	19 f7       	brne	.-58     	; 0x270 <CALLBACK_HID_Device_CreateHIDReport+0x1a>
		keyboardData[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
	    }

	    /* Send an led status byte back for every keyboard report received */
	    Serial_TxByte(ledReport);
 2aa:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 2ae:	90 91 c8 00 	lds	r25, 0x00C8
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <CALLBACK_HID_Device_CreateHIDReport+0x58>
				UDR1 = DataByte;
 2b6:	80 93 ce 00 	sts	0x00CE, r24
 2ba:	af e0       	ldi	r26, 0x0F	; 15
 2bc:	b1 e0       	ldi	r27, 0x01	; 1
 2be:	f9 01       	movw	r30, r18
	}

	for (ind=0; ind<8; ind++) {
	    datap[ind] = keyboardData[ind];
 2c0:	8d 91       	ld	r24, X+
 2c2:	81 93       	st	Z+, r24

	    /* Send an led status byte back for every keyboard report received */
	    Serial_TxByte(ledReport);
	}

	for (ind=0; ind<8; ind++) {
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	a7 31       	cpi	r26, 0x17	; 23
 2c8:	b4 07       	cpc	r27, r20
 2ca:	d1 f7       	brne	.-12     	; 0x2c0 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
	    datap[ind] = keyboardData[ind];
	}

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	f8 01       	movw	r30, r16
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	80 83       	st	Z, r24
	return false;
}
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    /* Need to send status back to the Arduino to manage caps, scrolllock, numlock leds */
  // ledReport = //*((uint8_t *)ReportData);
   ledReport = check_windows();
 2de:	3d d0       	rcall	.+122    	; 0x35a <check_windows>
 2e0:	80 93 0e 01 	sts	0x010E, r24
 2e4:	08 95       	ret

000002e6 <__vector_23>:
 2e6:	1f 92       	push	r1

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 2fa:	80 91 ce 00 	lds	r24, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 2fe:	9e b3       	in	r25, 0x1e	; 30
 300:	94 30       	cpi	r25, 0x04	; 4
 302:	f1 f4       	brne	.+60     	; 0x340 <__stack+0x41>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 304:	e0 91 9f 01 	lds	r30, 0x019F
 308:	f0 91 a0 01 	lds	r31, 0x01A0
 30c:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 30e:	e0 91 9f 01 	lds	r30, 0x019F
 312:	f0 91 a0 01 	lds	r31, 0x01A0
 316:	cf 01       	movw	r24, r30
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	90 93 a0 01 	sts	0x01A0, r25
 31e:	80 93 9f 01 	sts	0x019F, r24
 322:	8f 59       	subi	r24, 0x9F	; 159
 324:	91 40       	sbci	r25, 0x01	; 1
 326:	21 f4       	brne	.+8      	; 0x330 <__stack+0x31>
			  Buffer->In = Buffer->Buffer;
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	92 83       	std	Z+2, r25	; 0x02
 32e:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 330:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 332:	f8 94       	cli
			{
				Buffer->Count++;
 334:	80 91 a3 01 	lds	r24, 0x01A3
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 a3 01 	sts	0x01A3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 33e:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <init_vars>:
 *  is called so that the descriptor details can be passed back and the appropriate descriptor sent back to the
 *  USB host.
 */
void init_vars()
{
	is_windows = 0;
 354:	10 92 a4 01 	sts	0x01A4, r1
 358:	08 95       	ret

0000035a <check_windows>:
}
uint8_t check_windows()
{
	return is_windows;
}
 35a:	80 91 a4 01 	lds	r24, 0x01A4
 35e:	08 95       	ret

00000360 <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 360:	29 2f       	mov	r18, r25
 362:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
	if(wValue == 0x03EE)
 364:	8e 3e       	cpi	r24, 0xEE	; 238
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	96 07       	cpc	r25, r22
 36a:	19 f4       	brne	.+6      	; 0x372 <CALLBACK_USB_GetDescriptor+0x12>
		is_windows = 1;
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	60 93 a4 01 	sts	0x01A4, r22
	switch (DescriptorType)
 372:	23 30       	cpi	r18, 0x03	; 3
 374:	31 05       	cpc	r19, r1
 376:	b9 f0       	breq	.+46     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x46>
 378:	5c f4       	brge	.+22     	; 0x390 <CALLBACK_USB_GetDescriptor+0x30>
 37a:	21 30       	cpi	r18, 0x01	; 1
 37c:	31 05       	cpc	r19, r1
 37e:	a9 f1       	breq	.+106    	; 0x3ea <CALLBACK_USB_GetDescriptor+0x8a>
 380:	22 30       	cpi	r18, 0x02	; 2
 382:	31 05       	cpc	r19, r1
 384:	b9 f5       	brne	.+110    	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x94>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 386:	82 e2       	ldi	r24, 0x22	; 34
 388:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 38a:	22 eb       	ldi	r18, 0xB2	; 178
 38c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 38e:	36 c0       	rjmp	.+108    	; 0x3fc <CALLBACK_USB_GetDescriptor+0x9c>

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
	if(wValue == 0x03EE)
		is_windows = 1;
	switch (DescriptorType)
 390:	21 32       	cpi	r18, 0x21	; 33
 392:	31 05       	cpc	r19, r1
 394:	29 f1       	breq	.+74     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x80>
 396:	22 32       	cpi	r18, 0x22	; 34
 398:	31 05       	cpc	r19, r1
 39a:	61 f5       	brne	.+88     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x94>
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&KeyboardReport;
			Size    = sizeof(KeyboardReport);
 39c:	80 e4       	ldi	r24, 0x40	; 64
 39e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&KeyboardReport;
 3a0:	26 ee       	ldi	r18, 0xE6	; 230
 3a2:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(KeyboardReport);
			break;
 3a4:	2b c0       	rjmp	.+86     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x9c>
 3a6:	99 27       	eor	r25, r25
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	91 05       	cpc	r25, r1
 3ac:	81 f0       	breq	.+32     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x6e>
 3ae:	2c f4       	brge	.+10     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x5a>
 3b0:	89 2b       	or	r24, r25
 3b2:	01 f5       	brne	.+64     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x94>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3b4:	ee ea       	ldi	r30, 0xAE	; 174
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	91 05       	cpc	r25, r1
 3be:	51 f0       	breq	.+20     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x74>
 3c0:	8e 3e       	cpi	r24, 0xEE	; 238
 3c2:	91 05       	cpc	r25, r1
 3c4:	b9 f4       	brne	.+46     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x94>
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case 0xEE:
					is_windows = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 a4 01 	sts	0x01A4, r24
 3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x94>
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3ce:	ec e9       	ldi	r30, 0x9C	; 156
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3d4:	e8 e8       	ldi	r30, 0x88	; 136
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	84 91       	lpm	r24, Z
 3da:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
 3dc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x9c>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 3e0:	89 e0       	ldi	r24, 0x09	; 9
 3e2:	90 e0       	ldi	r25, 0x00	; 0
					is_windows = 1;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
 3e4:	24 ec       	ldi	r18, 0xC4	; 196
 3e6:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x9c>
		is_windows = 1;
	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3ea:	82 e1       	ldi	r24, 0x12	; 18
 3ec:	90 e0       	ldi	r25, 0x00	; 0
	if(wValue == 0x03EE)
		is_windows = 1;
	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
 3ee:	24 ed       	ldi	r18, 0xD4	; 212
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <CALLBACK_USB_GetDescriptor+0x9c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}
	
	*DescriptorAddress = Address;
 3fc:	fa 01       	movw	r30, r20
 3fe:	31 83       	std	Z+1, r19	; 0x01
 400:	20 83       	st	Z, r18
	return Size;
}
 402:	08 95       	ret

00000404 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 404:	28 e0       	ldi	r18, 0x08	; 8
 406:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 408:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
 40a:	28 17       	cp	r18, r24
 40c:	39 07       	cpc	r19, r25
 40e:	20 f4       	brcc	.+8      	; 0x418 <Endpoint_BytesToEPSizeMaskDynamic+0x14>
				{
					MaskVal++;
 410:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	f9 cf       	rjmp	.-14     	; 0x40a <Endpoint_BytesToEPSizeMaskDynamic+0x6>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
 418:	84 2f       	mov	r24, r20
 41a:	82 95       	swap	r24
 41c:	80 7f       	andi	r24, 0xF0	; 240
 41e:	08 95       	ret

00000420 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 420:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 424:	eb ee       	ldi	r30, 0xEB	; 235
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 42e:	ed ee       	ldi	r30, 0xED	; 237
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 434:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 438:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 43a:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 43e:	88 1f       	adc	r24, r24
 440:	88 27       	eor	r24, r24
 442:	88 1f       	adc	r24, r24
 444:	08 95       	ret

00000446 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 446:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 44a:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 44c:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 450:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
 454:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
 458:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 45c:	90 91 eb 00 	lds	r25, 0x00EB
 460:	9e 7f       	andi	r25, 0xFE	; 254
 462:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	85 30       	cpi	r24, 0x05	; 5
 46a:	81 f7       	brne	.-32     	; 0x44c <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 46c:	08 95       	ret

0000046e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 46e:	80 91 a7 01 	lds	r24, 0x01A7
 472:	87 fd       	sbrc	r24, 7
 474:	05 c0       	rjmp	.+10     	; 0x480 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 476:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 47a:	80 ff       	sbrs	r24, 0
 47c:	0d c0       	rjmp	.+26     	; 0x498 <Endpoint_ClearStatusStage+0x2a>
 47e:	10 c0       	rjmp	.+32     	; 0x4a0 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 484:	82 fd       	sbrc	r24, 2
 486:	04 c0       	rjmp	.+8      	; 0x490 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 488:	8e b3       	in	r24, 0x1e	; 30
 48a:	81 11       	cpse	r24, r1
 48c:	f9 cf       	rjmp	.-14     	; 0x480 <Endpoint_ClearStatusStage+0x12>
 48e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 490:	80 91 e8 00 	lds	r24, 0x00E8
 494:	8b 77       	andi	r24, 0x7B	; 123
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 498:	8e b3       	in	r24, 0x1e	; 30
 49a:	81 11       	cpse	r24, r1
 49c:	ec cf       	rjmp	.-40     	; 0x476 <Endpoint_ClearStatusStage+0x8>
 49e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
 4a4:	8e 77       	andi	r24, 0x7E	; 126
 4a6:	80 93 e8 00 	sts	0x00E8, r24
 4aa:	08 95       	ret

000004ac <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 4ac:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 4ae:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 4b2:	90 ff       	sbrs	r25, 0
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 4b6:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
 4ba:	90 ff       	sbrs	r25, 0
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <Endpoint_WaitUntilReady+0x1c>
 4be:	1b c0       	rjmp	.+54     	; 0x4f6 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4c0:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4c4:	92 fd       	sbrc	r25, 2
 4c6:	17 c0       	rjmp	.+46     	; 0x4f6 <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 4c8:	9e b3       	in	r25, 0x1e	; 30
 4ca:	99 23       	and	r25, r25
 4cc:	b1 f0       	breq	.+44     	; 0x4fa <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 4ce:	9e b3       	in	r25, 0x1e	; 30
 4d0:	95 30       	cpi	r25, 0x05	; 5
 4d2:	a9 f0       	breq	.+42     	; 0x4fe <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 4d4:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 4d8:	95 fd       	sbrc	r25, 5
 4da:	13 c0       	rjmp	.+38     	; 0x502 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 4dc:	90 91 e1 00 	lds	r25, 0x00E1
 4e0:	92 ff       	sbrs	r25, 2
 4e2:	e5 cf       	rjmp	.-54     	; 0x4ae <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 4e4:	90 91 e1 00 	lds	r25, 0x00E1
 4e8:	9b 7f       	andi	r25, 0xFB	; 251
 4ea:	90 93 e1 00 	sts	0x00E1, r25
 4ee:	81 50       	subi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
 4f0:	f1 f6       	brne	.-68     	; 0x4ae <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 4f2:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
 4f4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret

00000506 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
 514:	8b 01       	movw	r16, r22
 516:	7a 01       	movw	r14, r20
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 518:	c9 df       	rcall	.-110    	; 0x4ac <Endpoint_WaitUntilReady>
 51a:	81 11       	cpse	r24, r1
 51c:	1d c0       	rjmp	.+58     	; 0x558 <Endpoint_Write_Stream_LE+0x52>
 51e:	01 15       	cp	r16, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
 520:	11 05       	cpc	r17, r1
 522:	c9 f0       	breq	.+50     	; 0x556 <Endpoint_Write_Stream_LE+0x50>
 524:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 528:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 52a:	0e c0       	rjmp	.+28     	; 0x548 <Endpoint_Write_Stream_LE+0x42>
 52c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 530:	8e 77       	andi	r24, 0x7E	; 126
 532:	80 93 e8 00 	sts	0x00E8, r24
 536:	e1 14       	cp	r14, r1
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
 538:	f1 04       	cpc	r15, r1
 53a:	71 f3       	breq	.-36     	; 0x518 <Endpoint_Write_Stream_LE+0x12>
 53c:	f7 01       	movw	r30, r14
 53e:	09 95       	icall
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	51 f7       	brne	.-44     	; 0x518 <Endpoint_Write_Stream_LE+0x12>
 544:	85 e0       	ldi	r24, 0x05	; 5
			  return ENDPOINT_RWSTREAM_CallbackAborted;
 546:	08 c0       	rjmp	.+16     	; 0x558 <Endpoint_Write_Stream_LE+0x52>
 548:	88 81       	ld	r24, Y
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 54a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 54e:	01 50       	subi	r16, 0x01	; 1
			Length--;
 550:	11 09       	sbc	r17, r1
 552:	21 96       	adiw	r28, 0x01	; 1
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 554:	e4 cf       	rjmp	.-56     	; 0x51e <Endpoint_Write_Stream_LE+0x18>
 556:	80 e0       	ldi	r24, 0x00	; 0
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
 558:	df 91       	pop	r29
}
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	08 95       	ret

00000566 <Endpoint_Write_Control_Stream_LE>:
 566:	20 91 ad 01 	lds	r18, 0x01AD
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 56a:	30 91 ae 01 	lds	r19, 0x01AE
 56e:	26 17       	cp	r18, r22
 570:	37 07       	cpc	r19, r23
 572:	48 f0       	brcs	.+18     	; 0x586 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 574:	61 15       	cp	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	39 f4       	brne	.+14     	; 0x588 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 57a:	20 91 e8 00 	lds	r18, 0x00E8
 57e:	2e 77       	andi	r18, 0x7E	; 126
 580:	20 93 e8 00 	sts	0x00E8, r18
 584:	01 c0       	rjmp	.+2      	; 0x588 <Endpoint_Write_Control_Stream_LE+0x22>
 586:	b9 01       	movw	r22, r18
 588:	30 e0       	ldi	r19, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 58a:	61 15       	cp	r22, r1
 58c:	71 05       	cpc	r23, r1
 58e:	91 f1       	breq	.+100    	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x8e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 590:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 594:	23 fd       	sbrc	r18, 3
 596:	38 c0       	rjmp	.+112    	; 0x608 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 598:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 59c:	22 ff       	sbrs	r18, 2
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <Endpoint_Write_Control_Stream_LE+0x46>
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 5a4:	82 ff       	sbrs	r24, 2
 5a6:	29 c0       	rjmp	.+82     	; 0x5fa <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5ac:	2e b3       	in	r18, 0x1e	; 30
 5ae:	22 23       	and	r18, r18
 5b0:	69 f1       	breq	.+90     	; 0x60c <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5b2:	2e b3       	in	r18, 0x1e	; 30
 5b4:	25 30       	cpi	r18, 0x05	; 5
 5b6:	61 f1       	breq	.+88     	; 0x610 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 5b8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 5bc:	20 ff       	sbrs	r18, 0
 5be:	e5 cf       	rjmp	.-54     	; 0x58a <Endpoint_Write_Control_Stream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 5c0:	20 91 f2 00 	lds	r18, 0x00F2
 5c4:	fc 01       	movw	r30, r24
 5c6:	cf 01       	movw	r24, r30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 5c8:	61 15       	cp	r22, r1
 5ca:	71 05       	cpc	r23, r1
 5cc:	49 f0       	breq	.+18     	; 0x5e0 <Endpoint_Write_Control_Stream_LE+0x7a>
 5ce:	28 30       	cpi	r18, 0x08	; 8
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5d2:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 5d4:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 5d8:	61 50       	subi	r22, 0x01	; 1
 5da:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5dc:	2f 5f       	subi	r18, 0xFF	; 255
 5de:	f3 cf       	rjmp	.-26     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 5e0:	31 e0       	ldi	r19, 0x01	; 1
 5e2:	28 30       	cpi	r18, 0x08	; 8
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0x82>
 5e6:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5e8:	20 91 e8 00 	lds	r18, 0x00E8
 5ec:	2e 77       	andi	r18, 0x7E	; 126
 5ee:	20 93 e8 00 	sts	0x00E8, r18
 5f2:	cb cf       	rjmp	.-106    	; 0x58a <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5f4:	31 11       	cpse	r19, r1
 5f6:	cc cf       	rjmp	.-104    	; 0x590 <Endpoint_Write_Control_Stream_LE+0x2a>
 5f8:	d3 cf       	rjmp	.-90     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5fa:	8e b3       	in	r24, 0x1e	; 30
 5fc:	88 23       	and	r24, r24
 5fe:	31 f0       	breq	.+12     	; 0x60c <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 600:	8e b3       	in	r24, 0x1e	; 30
 602:	85 30       	cpi	r24, 0x05	; 5
 604:	69 f6       	brne	.-102    	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x3a>
 606:	04 c0       	rjmp	.+8      	; 0x610 <Endpoint_Write_Control_Stream_LE+0xaa>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 610:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 612:	08 95       	ret

00000614 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 614:	20 91 ad 01 	lds	r18, 0x01AD
 618:	30 91 ae 01 	lds	r19, 0x01AE
 61c:	26 17       	cp	r18, r22
 61e:	37 07       	cpc	r19, r23
 620:	48 f0       	brcs	.+18     	; 0x634 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 622:	61 15       	cp	r22, r1
 624:	71 05       	cpc	r23, r1
 626:	39 f4       	brne	.+14     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x22>
 628:	20 91 e8 00 	lds	r18, 0x00E8
 62c:	2e 77       	andi	r18, 0x7E	; 126
 62e:	20 93 e8 00 	sts	0x00E8, r18
 632:	01 c0       	rjmp	.+2      	; 0x636 <Endpoint_Write_Control_PStream_LE+0x22>
 634:	b9 01       	movw	r22, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 636:	30 e0       	ldi	r19, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 638:	61 15       	cp	r22, r1
 63a:	71 05       	cpc	r23, r1
 63c:	99 f1       	breq	.+102    	; 0x6a4 <Endpoint_Write_Control_PStream_LE+0x90>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 63e:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 642:	23 fd       	sbrc	r18, 3
 644:	39 c0       	rjmp	.+114    	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 646:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 64a:	22 ff       	sbrs	r18, 2
 64c:	06 c0       	rjmp	.+12     	; 0x65a <Endpoint_Write_Control_PStream_LE+0x46>
 64e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 652:	82 ff       	sbrs	r24, 2
 654:	2a c0       	rjmp	.+84     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 65a:	2e b3       	in	r18, 0x1e	; 30
 65c:	22 23       	and	r18, r18
 65e:	71 f1       	breq	.+92     	; 0x6bc <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 660:	2e b3       	in	r18, 0x1e	; 30
 662:	25 30       	cpi	r18, 0x05	; 5
 664:	69 f1       	breq	.+90     	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 666:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 66a:	20 ff       	sbrs	r18, 0
 66c:	e5 cf       	rjmp	.-54     	; 0x638 <Endpoint_Write_Control_PStream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 66e:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 672:	fc 01       	movw	r30, r24
 674:	cf 01       	movw	r24, r30
 676:	61 15       	cp	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	51 f0       	breq	.+20     	; 0x690 <Endpoint_Write_Control_PStream_LE+0x7c>
 67c:	28 30       	cpi	r18, 0x08	; 8
 67e:	40 f4       	brcc	.+16     	; 0x690 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 680:	84 91       	lpm	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 682:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 686:	61 50       	subi	r22, 0x01	; 1
 688:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	31 96       	adiw	r30, 0x01	; 1
 68e:	f2 cf       	rjmp	.-28     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 690:	31 e0       	ldi	r19, 0x01	; 1
 692:	28 30       	cpi	r18, 0x08	; 8
 694:	09 f0       	breq	.+2      	; 0x698 <Endpoint_Write_Control_PStream_LE+0x84>
 696:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 698:	20 91 e8 00 	lds	r18, 0x00E8
 69c:	2e 77       	andi	r18, 0x7E	; 126
 69e:	20 93 e8 00 	sts	0x00E8, r18
 6a2:	ca cf       	rjmp	.-108    	; 0x638 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6a4:	31 11       	cpse	r19, r1
 6a6:	cb cf       	rjmp	.-106    	; 0x63e <Endpoint_Write_Control_PStream_LE+0x2a>
 6a8:	d2 cf       	rjmp	.-92     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6aa:	8e b3       	in	r24, 0x1e	; 30
 6ac:	88 23       	and	r24, r24
 6ae:	31 f0       	breq	.+12     	; 0x6bc <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6b0:	8e b3       	in	r24, 0x1e	; 30
 6b2:	85 30       	cpi	r24, 0x05	; 5
 6b4:	61 f6       	brne	.-104    	; 0x64e <Endpoint_Write_Control_PStream_LE+0x3a>
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0xac>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6c0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6c2:	08 95       	ret

000006c4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 6c4:	61 15       	cp	r22, r1
 6c6:	71 05       	cpc	r23, r1
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6ca:	20 91 e8 00 	lds	r18, 0x00E8
 6ce:	2b 77       	andi	r18, 0x7B	; 123
 6d0:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();
	
	while (Length)
 6d4:	61 15       	cp	r22, r1
 6d6:	71 05       	cpc	r23, r1
 6d8:	49 f1       	breq	.+82     	; 0x72c <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6da:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 6de:	23 fd       	sbrc	r18, 3
 6e0:	2a c0       	rjmp	.+84     	; 0x736 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e2:	2e b3       	in	r18, 0x1e	; 30
 6e4:	22 23       	and	r18, r18
 6e6:	59 f1       	breq	.+86     	; 0x73e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6e8:	2e b3       	in	r18, 0x1e	; 30
 6ea:	25 30       	cpi	r18, 0x05	; 5
 6ec:	51 f1       	breq	.+84     	; 0x742 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ee:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6f2:	22 ff       	sbrs	r18, 2
 6f4:	f2 cf       	rjmp	.-28     	; 0x6da <Endpoint_Read_Control_Stream_LE+0x16>
 6f6:	fc 01       	movw	r30, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6f8:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
 6fc:	88 23       	and	r24, r24
 6fe:	71 f0       	breq	.+28     	; 0x71c <Endpoint_Read_Control_Stream_LE+0x58>
 700:	9f 01       	movw	r18, r30
 702:	2f 5f       	subi	r18, 0xFF	; 255
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 706:	c9 01       	movw	r24, r18
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 708:	40 91 f1 00 	lds	r20, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 70c:	40 83       	st	Z, r20
				Length--;
 70e:	61 50       	subi	r22, 0x01	; 1
 710:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 712:	61 15       	cp	r22, r1
 714:	71 05       	cpc	r23, r1
 716:	c9 f2       	breq	.-78     	; 0x6ca <Endpoint_Read_Control_Stream_LE+0x6>
 718:	f9 01       	movw	r30, r18
 71a:	ee cf       	rjmp	.-36     	; 0x6f8 <Endpoint_Read_Control_Stream_LE+0x34>
 71c:	cf 01       	movw	r24, r30
 71e:	d5 cf       	rjmp	.-86     	; 0x6ca <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 720:	8e b3       	in	r24, 0x1e	; 30
 722:	88 23       	and	r24, r24
 724:	61 f0       	breq	.+24     	; 0x73e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 726:	8e b3       	in	r24, 0x1e	; 30
 728:	85 30       	cpi	r24, 0x05	; 5
 72a:	59 f0       	breq	.+22     	; 0x742 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 72c:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 730:	80 ff       	sbrs	r24, 0
 732:	f6 cf       	rjmp	.-20     	; 0x720 <Endpoint_Read_Control_Stream_LE+0x5c>
 734:	02 c0       	rjmp	.+4      	; 0x73a <Endpoint_Read_Control_Stream_LE+0x76>
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	08 95       	ret
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 742:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 744:	08 95       	ret

00000746 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 746:	3e d0       	rcall	.+124    	; 0x7c4 <USB_INT_DisableAllInterrupts>
 748:	40 d0       	rcall	.+128    	; 0x7ca <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 74a:	1e ba       	out	0x1e, r1	; 30
 74c:	10 92 a5 01 	sts	0x01A5, r1
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
 750:	84 e0       	ldi	r24, 0x04	; 4
 752:	89 bd       	out	0x29, r24	; 41
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 754:	89 b5       	in	r24, 0x29	; 41
 756:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
 758:	89 bd       	out	0x29, r24	; 41
 75a:	09 b4       	in	r0, 0x29	; 41
 75c:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 75e:	fd cf       	rjmp	.-6      	; 0x75a <USB_ResetInterface+0x14>
 760:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 764:	98 2f       	mov	r25, r24
 766:	9f 77       	andi	r25, 0x7F	; 127
				
				USBCON = (Temp & ~(1 << USBE));
 768:	90 93 d8 00 	sts	0x00D8, r25
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
 772:	80 91 63 00 	lds	r24, 0x0063
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 776:	8e 7f       	andi	r24, 0xFE	; 254
 778:	80 93 63 00 	sts	0x0063, r24
 77c:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 780:	8f 7d       	andi	r24, 0xDF	; 223
 782:	80 93 d8 00 	sts	0x00D8, r24
 786:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 78a:	8e 7f       	andi	r24, 0xFE	; 254
 78c:	80 93 e0 00 	sts	0x00E0, r24
 790:	80 91 e1 00 	lds	r24, 0x00E1
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 794:	8e 7f       	andi	r24, 0xFE	; 254
 796:	80 93 e1 00 	sts	0x00E1, r24
 79a:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_SUSPEND);
 79e:	81 60       	ori	r24, 0x01	; 1
 7a0:	80 93 e2 00 	sts	0x00E2, r24
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
	USB_INT_Clear(USB_INT_EORSTI);
 7a8:	87 7f       	andi	r24, 0xF7	; 247
 7aa:	80 93 e1 00 	sts	0x00E1, r24
 7ae:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_EORSTI);
 7b2:	88 60       	ori	r24, 0x08	; 8
 7b4:	80 93 e2 00 	sts	0x00E2, r24
 7b8:	08 95       	ret

000007ba <USB_Init>:
 7ba:	c5 df       	rcall	.-118    	; 0x746 <USB_ResetInterface>
 7bc:	81 e0       	ldi	r24, 0x01	; 1

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 7be:	80 93 a6 01 	sts	0x01A6, r24
 7c2:	08 95       	ret

000007c4 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7c4:	10 92 e2 00 	sts	0x00E2, r1
 7c8:	08 95       	ret

000007ca <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 7ca:	10 92 e1 00 	sts	0x00E1, r1
 7ce:	08 95       	ret

000007d0 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 7f2:	80 91 e1 00 	lds	r24, 0x00E1
 7f6:	80 ff       	sbrs	r24, 0
 7f8:	1b c0       	rjmp	.+54     	; 0x830 <__vector_11+0x60>
 7fa:	80 91 e2 00 	lds	r24, 0x00E2
 7fe:	80 ff       	sbrs	r24, 0
 800:	17 c0       	rjmp	.+46     	; 0x830 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 802:	80 91 e1 00 	lds	r24, 0x00E1
 806:	8e 7f       	andi	r24, 0xFE	; 254
 808:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 80c:	80 91 e2 00 	lds	r24, 0x00E2
 810:	8e 7f       	andi	r24, 0xFE	; 254
 812:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 816:	80 91 e2 00 	lds	r24, 0x00E2
 81a:	80 61       	ori	r24, 0x10	; 16
 81c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 820:	80 91 d8 00 	lds	r24, 0x00D8
 824:	80 62       	ori	r24, 0x20	; 32
 826:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 82a:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 82c:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 82e:	fa dc       	rcall	.-1548   	; 0x224 <EVENT_USB_Device_Disconnect>
 830:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 834:	84 ff       	sbrs	r24, 4
 836:	29 c0       	rjmp	.+82     	; 0x88a <__vector_11+0xba>
 838:	80 91 e2 00 	lds	r24, 0x00E2
 83c:	84 ff       	sbrs	r24, 4
 83e:	25 c0       	rjmp	.+74     	; 0x88a <__vector_11+0xba>
 840:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 842:	89 bd       	out	0x29, r24	; 41
 844:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 846:	82 60       	ori	r24, 0x02	; 2
 848:	89 bd       	out	0x29, r24	; 41
 84a:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 84c:	00 fe       	sbrs	r0, 0
 84e:	fd cf       	rjmp	.-6      	; 0x84a <__vector_11+0x7a>
 850:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 854:	8f 7d       	andi	r24, 0xDF	; 223
 856:	80 93 d8 00 	sts	0x00D8, r24
 85a:	80 91 e1 00 	lds	r24, 0x00E1
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 85e:	8f 7e       	andi	r24, 0xEF	; 239
 860:	80 93 e1 00 	sts	0x00E1, r24
 864:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_WAKEUP);
 868:	8f 7e       	andi	r24, 0xEF	; 239
 86a:	80 93 e2 00 	sts	0x00E2, r24
 86e:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_SUSPEND);
 872:	81 60       	ori	r24, 0x01	; 1
 874:	80 93 e2 00 	sts	0x00E2, r24
 878:	80 91 a5 01 	lds	r24, 0x01A5
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 87c:	88 23       	and	r24, r24
 87e:	11 f0       	breq	.+4      	; 0x884 <__vector_11+0xb4>
 880:	84 e0       	ldi	r24, 0x04	; 4
 882:	01 c0       	rjmp	.+2      	; 0x886 <__vector_11+0xb6>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	8e bb       	out	0x1e, r24	; 30
 888:	cc dc       	rcall	.-1640   	; 0x222 <EVENT_USB_Device_Connect>
		EVENT_USB_Device_Connect();
 88a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 88e:	83 ff       	sbrs	r24, 3
 890:	22 c0       	rjmp	.+68     	; 0x8d6 <__vector_11+0x106>
 892:	80 91 e2 00 	lds	r24, 0x00E2
 896:	83 ff       	sbrs	r24, 3
 898:	1e c0       	rjmp	.+60     	; 0x8d6 <__vector_11+0x106>
 89a:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);
 89e:	87 7f       	andi	r24, 0xF7	; 247
 8a0:	80 93 e1 00 	sts	0x00E1, r24
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	8e bb       	out	0x1e, r24	; 30

		USB_DeviceState         = DEVICE_STATE_Default;
 8a8:	10 92 a5 01 	sts	0x01A5, r1
		USB_ConfigurationNumber = 0;
 8ac:	80 91 e1 00 	lds	r24, 0x00E1

		USB_INT_Clear(USB_INT_SUSPEND);
 8b0:	8e 7f       	andi	r24, 0xFE	; 254
 8b2:	80 93 e1 00 	sts	0x00E1, r24
 8b6:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Disable(USB_INT_SUSPEND);
 8ba:	8e 7f       	andi	r24, 0xFE	; 254
 8bc:	80 93 e2 00 	sts	0x00E2, r24
 8c0:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUP);
 8c4:	80 61       	ori	r24, 0x10	; 16
 8c6:	80 93 e2 00 	sts	0x00E2, r24
 8ca:	bd dd       	rcall	.-1158   	; 0x446 <Endpoint_ClearEndpoints>
 8cc:	42 e0       	ldi	r20, 0x02	; 2

		Endpoint_ClearEndpoints();
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	80 e0       	ldi	r24, 0x00	; 0
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 8d2:	a6 dd       	rcall	.-1204   	; 0x420 <Endpoint_ConfigureEndpoint_Prv>
 8d4:	09 d1       	rcall	.+530    	; 0xae8 <USB_Event_Stub>
 8d6:	80 91 e1 00 	lds	r24, 0x00E1
 8da:	82 ff       	sbrs	r24, 2

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <__vector_11+0x122>
 8de:	80 91 e2 00 	lds	r24, 0x00E2
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8e2:	82 ff       	sbrs	r24, 2
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <__vector_11+0x122>
 8e6:	80 91 e1 00 	lds	r24, 0x00E1
 8ea:	8b 7f       	andi	r24, 0xFB	; 251
 8ec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);
 8f0:	a6 dc       	rcall	.-1716   	; 0x23e <EVENT_USB_Device_StartOfFrame>
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
		
		EVENT_USB_Device_StartOfFrame();
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	00 d0       	rcall	.+0      	; 0x91c <USB_Device_ProcessControlRequest+0x8>
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	e7 ea       	ldi	r30, 0xA7	; 167
 922:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 924:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 928:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	ef 3a       	cpi	r30, 0xAF	; 175
 92e:	f8 07       	cpc	r31, r24
 930:	c9 f7       	brne	.-14     	; 0x924 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 932:	20 91 a7 01 	lds	r18, 0x01A7
	
	switch (USB_ControlRequest.bRequest)
 936:	30 91 a8 01 	lds	r19, 0x01A8
 93a:	83 2f       	mov	r24, r19
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	8a 30       	cpi	r24, 0x0A	; 10
 940:	91 05       	cpc	r25, r1
 942:	08 f0       	brcs	.+2      	; 0x946 <USB_Device_ProcessControlRequest+0x32>
 944:	c9 c0       	rjmp	.+402    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 946:	fc 01       	movw	r30, r24
 948:	e6 5c       	subi	r30, 0xC6	; 198
 94a:	ff 4f       	sbci	r31, 0xFF	; 255
 94c:	c5 c2       	rjmp	.+1418   	; 0xed8 <__tablejump2__>
 94e:	20 38       	cpi	r18, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 950:	09 f4       	brne	.+2      	; 0x954 <USB_Device_ProcessControlRequest+0x40>
 952:	b3 c0       	rjmp	.+358    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 954:	22 38       	cpi	r18, 0x82	; 130
 956:	09 f0       	breq	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x46>
 958:	bf c0       	rjmp	.+382    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 95a:	80 91 ab 01 	lds	r24, 0x01AB
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 95e:	87 70       	andi	r24, 0x07	; 7
 960:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 964:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 968:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 96c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 970:	87 7f       	andi	r24, 0xF7	; 247
 972:	80 93 e8 00 	sts	0x00E8, r24
 976:	95 fb       	bst	r25, 5
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 978:	88 27       	eor	r24, r24
 97a:	80 f9       	bld	r24, 0
 97c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 980:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
 984:	7c c0       	rjmp	.+248    	; 0xa7e <USB_Device_ProcessControlRequest+0x16a>
 986:	82 2f       	mov	r24, r18
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 988:	8d 7f       	andi	r24, 0xFD	; 253
 98a:	09 f0       	breq	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x7a>
 98c:	a5 c0       	rjmp	.+330    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 98e:	22 30       	cpi	r18, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 990:	09 f0       	breq	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0x80>
 992:	93 c0       	rjmp	.+294    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 994:	80 91 a9 01 	lds	r24, 0x01A9
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 998:	81 11       	cpse	r24, r1
 99a:	24 c0       	rjmp	.+72     	; 0x9e4 <USB_Device_ProcessControlRequest+0xd0>
 99c:	20 91 ab 01 	lds	r18, 0x01AB
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9a0:	27 70       	andi	r18, 0x07	; 7
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0x92>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9a4:	8a c0       	rjmp	.+276    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 9a6:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9aa:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9ae:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 9b0:	84 c0       	rjmp	.+264    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 9b2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9b6:	33 30       	cpi	r19, 0x03	; 3
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9b8:	11 f4       	brne	.+4      	; 0x9be <USB_Device_ProcessControlRequest+0xaa>
 9ba:	80 62       	ori	r24, 0x20	; 32
 9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <USB_Device_ProcessControlRequest+0xcc>
 9be:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9c0:	80 93 eb 00 	sts	0x00EB, r24
 9c4:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	02 2e       	mov	r0, r18
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <USB_Device_ProcessControlRequest+0xba>
 9cc:	88 0f       	add	r24, r24
 9ce:	0a 94       	dec	r0
 9d0:	ea f7       	brpl	.-6      	; 0x9cc <USB_Device_ProcessControlRequest+0xb8>
 9d2:	80 93 ea 00 	sts	0x00EA, r24
 9d6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 9da:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9de:	88 60       	ori	r24, 0x08	; 8
 9e0:	80 93 eb 00 	sts	0x00EB, r24
 9e4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9e8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ec:	87 7f       	andi	r24, 0xF7	; 247
 9ee:	4a c0       	rjmp	.+148    	; 0xa84 <USB_Device_ProcessControlRequest+0x170>
 9f0:	21 11       	cpse	r18, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9f2:	72 c0       	rjmp	.+228    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 9f4:	10 91 a9 01 	lds	r17, 0x01A9
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9f8:	80 91 e8 00 	lds	r24, 0x00E8
 9fc:	87 7f       	andi	r24, 0xF7	; 247
 9fe:	80 93 e8 00 	sts	0x00E8, r24
 a02:	35 dd       	rcall	.-1430   	; 0x46e <Endpoint_ClearStatusStage>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 a04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 a08:	80 fd       	sbrc	r24, 0
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <USB_Device_ProcessControlRequest+0x100>
	
	while (!(Endpoint_IsINReady()))
 a0c:	8e b3       	in	r24, 0x1e	; 30
 a0e:	81 11       	cpse	r24, r1
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 a10:	f9 cf       	rjmp	.-14     	; 0xa04 <USB_Device_ProcessControlRequest+0xf0>
 a12:	53 c0       	rjmp	.+166    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a14:	81 2f       	mov	r24, r17
 a16:	8f 77       	andi	r24, 0x7F	; 127
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a18:	11 f0       	breq	.+4      	; 0xa1e <USB_Device_ProcessControlRequest+0x10a>
 a1a:	93 e0       	ldi	r25, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a1c:	01 c0       	rjmp	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x10c>
 a1e:	92 e0       	ldi	r25, 0x02	; 2
 a20:	9e bb       	out	0x1e, r25	; 30
 a22:	80 68       	ori	r24, 0x80	; 128
 a24:	80 93 e3 00 	sts	0x00E3, r24
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 a28:	48 c0       	rjmp	.+144    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a2a:	20 58       	subi	r18, 0x80	; 128
 a2c:	22 30       	cpi	r18, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a2e:	08 f0       	brcs	.+2      	; 0xa32 <USB_Device_ProcessControlRequest+0x11e>
 a30:	53 c0       	rjmp	.+166    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 a32:	ae 01       	movw	r20, r28
 a34:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a36:	5f 4f       	sbci	r21, 0xFF	; 255
 a38:	60 91 ab 01 	lds	r22, 0x01AB
 a3c:	80 91 a9 01 	lds	r24, 0x01A9
 a40:	90 91 aa 01 	lds	r25, 0x01AA
 a44:	8d dc       	rcall	.-1766   	; 0x360 <CALLBACK_USB_GetDescriptor>
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	c1 f1       	breq	.+112    	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a4a:	20 91 e8 00 	lds	r18, 0x00E8
 a4e:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a50:	20 93 e8 00 	sts	0x00E8, r18
 a54:	bc 01       	movw	r22, r24
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 a5a:	dc dd       	rcall	.-1096   	; 0x614 <Endpoint_Write_Control_PStream_LE>
 a5c:	80 91 e8 00 	lds	r24, 0x00E8
 a60:	8b 77       	andi	r24, 0x7B	; 123
 a62:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a66:	29 c0       	rjmp	.+82     	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a68:	20 38       	cpi	r18, 0x80	; 128
 a6a:	b1 f5       	brne	.+108    	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
 a6c:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a70:	87 7f       	andi	r24, 0xF7	; 247
 a72:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a76:	80 91 a5 01 	lds	r24, 0x01A5
 a7a:	80 93 f1 00 	sts	0x00F1, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a82:	8e 77       	andi	r24, 0x7E	; 126
 a84:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a88:	f2 dc       	rcall	.-1564   	; 0x46e <Endpoint_ClearStatusStage>
 a8a:	17 c0       	rjmp	.+46     	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a8c:	21 11       	cpse	r18, r1
 a8e:	24 c0       	rjmp	.+72     	; 0xad8 <USB_Device_ProcessControlRequest+0x1c4>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a90:	90 91 a9 01 	lds	r25, 0x01A9
 a94:	92 30       	cpi	r25, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a96:	88 f4       	brcc	.+34     	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 a98:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a9c:	87 7f       	andi	r24, 0xF7	; 247
 a9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa2:	90 93 a5 01 	sts	0x01A5, r25
 aa6:	e3 dc       	rcall	.-1594   	; 0x46e <Endpoint_ClearStatusStage>
 aa8:	80 91 a5 01 	lds	r24, 0x01A5
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 aac:	88 23       	and	r24, r24
 aae:	11 f0       	breq	.+4      	; 0xab4 <USB_Device_ProcessControlRequest+0x1a0>

	Endpoint_ClearStatusStage();
 ab0:	84 e0       	ldi	r24, 0x04	; 4
 ab2:	01 c0       	rjmp	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x1a2>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 ab4:	83 e0       	ldi	r24, 0x03	; 3
 ab6:	8e bb       	out	0x1e, r24	; 30
 ab8:	b6 db       	rcall	.-2196   	; 0x226 <EVENT_USB_Device_ConfigurationChanged>
 aba:	80 91 e8 00 	lds	r24, 0x00E8
 abe:	83 ff       	sbrs	r24, 3
 ac0:	0d c0       	rjmp	.+26     	; 0xadc <USB_Device_ProcessControlRequest+0x1c8>
 ac2:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 ac6:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ac8:	80 93 eb 00 	sts	0x00EB, r24
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 acc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ad0:	87 7f       	andi	r24, 0xF7	; 247
 ad2:	80 93 e8 00 	sts	0x00E8, r24
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <USB_Device_ProcessControlRequest+0x1c8>
 ad8:	af db       	rcall	.-2210   	; 0x238 <EVENT_USB_Device_UnhandledControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ada:	ef cf       	rjmp	.-34     	; 0xaba <USB_Device_ProcessControlRequest+0x1a6>
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 ae6:	08 95       	ret

00000ae8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 ae8:	08 95       	ret

00000aea <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 aea:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 aec:	8e b3       	in	r24, 0x1e	; 30
 aee:	88 23       	and	r24, r24
 af0:	59 f0       	breq	.+22     	; 0xb08 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 af2:	c0 91 e9 00 	lds	r28, 0x00E9
 af6:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 af8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 afc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 b00:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 b02:	08 df       	rcall	.-496    	; 0x914 <USB_Device_ProcessControlRequest>
 b04:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b08:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 b0a:	08 95       	ret

00000b0c <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 b0c:	8f 92       	push	r8
 b0e:	9f 92       	push	r9
 b10:	af 92       	push	r10
 b12:	bf 92       	push	r11
 b14:	cf 92       	push	r12
 b16:	df 92       	push	r13
 b18:	ef 92       	push	r14
 b1a:	ff 92       	push	r15
 b1c:	0f 93       	push	r16
 b1e:	1f 93       	push	r17
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	00 d0       	rcall	.+0      	; 0xb26 <HID_Device_ProcessControlRequest+0x1a>
 b26:	1f 92       	push	r1
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
 b2c:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 b2e:	ad b6       	in	r10, 0x3d	; 61
 b30:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b32:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 b36:	83 ff       	sbrs	r24, 3
 b38:	ee c0       	rjmp	.+476    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b3a:	f7 01       	movw	r30, r14
 b3c:	80 81       	ld	r24, Z
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	20 91 ab 01 	lds	r18, 0x01AB
 b44:	30 91 ac 01 	lds	r19, 0x01AC
 b48:	28 17       	cp	r18, r24
 b4a:	39 07       	cpc	r19, r25
 b4c:	09 f0       	breq	.+2      	; 0xb50 <HID_Device_ProcessControlRequest+0x44>
 b4e:	e3 c0       	rjmp	.+454    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
	  return;

	switch (USB_ControlRequest.bRequest)
 b50:	80 91 a8 01 	lds	r24, 0x01A8
 b54:	83 30       	cpi	r24, 0x03	; 3
 b56:	09 f4       	brne	.+2      	; 0xb5a <HID_Device_ProcessControlRequest+0x4e>
 b58:	90 c0       	rjmp	.+288    	; 0xc7a <HID_Device_ProcessControlRequest+0x16e>
 b5a:	30 f4       	brcc	.+12     	; 0xb68 <HID_Device_ProcessControlRequest+0x5c>
 b5c:	81 30       	cpi	r24, 0x01	; 1
 b5e:	71 f0       	breq	.+28     	; 0xb7c <HID_Device_ProcessControlRequest+0x70>
 b60:	82 30       	cpi	r24, 0x02	; 2
 b62:	09 f4       	brne	.+2      	; 0xb66 <HID_Device_ProcessControlRequest+0x5a>
 b64:	c0 c0       	rjmp	.+384    	; 0xce6 <HID_Device_ProcessControlRequest+0x1da>
 b66:	d7 c0       	rjmp	.+430    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 b68:	8a 30       	cpi	r24, 0x0A	; 10
 b6a:	09 f4       	brne	.+2      	; 0xb6e <HID_Device_ProcessControlRequest+0x62>
 b6c:	a5 c0       	rjmp	.+330    	; 0xcb8 <HID_Device_ProcessControlRequest+0x1ac>
 b6e:	8b 30       	cpi	r24, 0x0B	; 11
 b70:	09 f4       	brne	.+2      	; 0xb74 <HID_Device_ProcessControlRequest+0x68>
 b72:	90 c0       	rjmp	.+288    	; 0xc94 <HID_Device_ProcessControlRequest+0x188>
 b74:	89 30       	cpi	r24, 0x09	; 9
 b76:	09 f0       	breq	.+2      	; 0xb7a <HID_Device_ProcessControlRequest+0x6e>
 b78:	ce c0       	rjmp	.+412    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 b7a:	4c c0       	rjmp	.+152    	; 0xc14 <HID_Device_ProcessControlRequest+0x108>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 b7c:	80 91 a7 01 	lds	r24, 0x01A7
 b80:	81 3a       	cpi	r24, 0xA1	; 161
 b82:	09 f0       	breq	.+2      	; 0xb86 <HID_Device_ProcessControlRequest+0x7a>
 b84:	c8 c0       	rjmp	.+400    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 b86:	8d b6       	in	r8, 0x3d	; 61
 b88:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8a:	80 91 e8 00 	lds	r24, 0x00E8
 b8e:	87 7f       	andi	r24, 0xF7	; 247
 b90:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 b94:	1a 82       	std	Y+2, r1	; 0x02
 b96:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 b98:	80 91 a9 01 	lds	r24, 0x01A9
 b9c:	10 91 aa 01 	lds	r17, 0x01AA
 ba0:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 ba2:	f7 01       	movw	r30, r14
 ba4:	47 81       	ldd	r20, Z+7	; 0x07
 ba6:	50 e0       	ldi	r21, 0x00	; 0
 ba8:	8d b7       	in	r24, 0x3d	; 61
 baa:	9e b7       	in	r25, 0x3e	; 62
 bac:	84 1b       	sub	r24, r20
 bae:	95 0b       	sbc	r25, r21
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	9e bf       	out	0x3e, r25	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	8d bf       	out	0x3d, r24	; 61
 bba:	ed b7       	in	r30, 0x3d	; 61
 bbc:	fe b7       	in	r31, 0x3e	; 62
 bbe:	31 96       	adiw	r30, 0x01	; 1
 bc0:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	70 e0       	ldi	r23, 0x00	; 0
 bc6:	cf 01       	movw	r24, r30
 bc8:	a3 d1       	rcall	.+838    	; 0xf10 <memset>
 bca:	4f ef       	ldi	r20, 0xFF	; 255
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 bcc:	41 0f       	add	r20, r17
 bce:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 bd0:	0f 5f       	subi	r16, 0xFF	; 255
 bd2:	1f 4f       	sbci	r17, 0xFF	; 255
 bd4:	96 01       	movw	r18, r12
 bd6:	be 01       	movw	r22, r28
 bd8:	6d 5f       	subi	r22, 0xFD	; 253
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	c7 01       	movw	r24, r14
 bde:	3b db       	rcall	.-2442   	; 0x256 <CALLBACK_HID_Device_CreateHIDReport>
 be0:	f7 01       	movw	r30, r14
 be2:	85 81       	ldd	r24, Z+5	; 0x05
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 be4:	96 81       	ldd	r25, Z+6	; 0x06
 be6:	00 97       	sbiw	r24, 0x00	; 0
 be8:	21 f0       	breq	.+8      	; 0xbf2 <HID_Device_ProcessControlRequest+0xe6>
 bea:	47 81       	ldd	r20, Z+7	; 0x07
 bec:	50 e0       	ldi	r21, 0x00	; 0
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 bee:	b6 01       	movw	r22, r12
 bf0:	86 d1       	rcall	.+780    	; 0xefe <memcpy>
 bf2:	10 92 e9 00 	sts	0x00E9, r1
 bf6:	69 81       	ldd	r22, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bf8:	7a 81       	ldd	r23, Y+2	; 0x02
 bfa:	c6 01       	movw	r24, r12

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 bfc:	b4 dc       	rcall	.-1688   	; 0x566 <Endpoint_Write_Control_Stream_LE>
 bfe:	80 91 e8 00 	lds	r24, 0x00E8
 c02:	8b 77       	andi	r24, 0x7B	; 123
 c04:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	9e be       	out	0x3e, r9	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	8d be       	out	0x3d, r8	; 61
 c12:	81 c0       	rjmp	.+258    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 c14:	80 91 a7 01 	lds	r24, 0x01A7
 c18:	81 32       	cpi	r24, 0x21	; 33
 c1a:	09 f0       	breq	.+2      	; 0xc1e <HID_Device_ProcessControlRequest+0x112>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c1c:	7c c0       	rjmp	.+248    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 c1e:	80 91 e8 00 	lds	r24, 0x00E8
 c22:	87 7f       	andi	r24, 0xF7	; 247
 c24:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c28:	00 91 ad 01 	lds	r16, 0x01AD
 c2c:	10 91 ae 01 	lds	r17, 0x01AE
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 c30:	90 90 a9 01 	lds	r9, 0x01A9
 c34:	80 90 aa 01 	lds	r8, 0x01AA
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c38:	8d b7       	in	r24, 0x3d	; 61
 c3a:	9e b7       	in	r25, 0x3e	; 62
 c3c:	80 1b       	sub	r24, r16
 c3e:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	f8 94       	cli
 c44:	9e bf       	out	0x3e, r25	; 62
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	8d bf       	out	0x3d, r24	; 61
 c4a:	ed b7       	in	r30, 0x3d	; 61
 c4c:	fe b7       	in	r31, 0x3e	; 62
 c4e:	31 96       	adiw	r30, 0x01	; 1
 c50:	6f 01       	movw	r12, r30
 c52:	b8 01       	movw	r22, r16
 c54:	cf 01       	movw	r24, r30
 c56:	36 dd       	rcall	.-1428   	; 0x6c4 <Endpoint_Read_Control_Stream_LE>
 c58:	4f ef       	ldi	r20, 0xFF	; 255

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 c5a:	48 0d       	add	r20, r8
 c5c:	96 01       	movw	r18, r12
 c5e:	69 2d       	mov	r22, r9
 c60:	c7 01       	movw	r24, r14
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c62:	3d db       	rcall	.-2438   	; 0x2de <CALLBACK_HID_Device_ProcessHIDReport>
 c64:	80 91 e8 00 	lds	r24, 0x00E8
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 c68:	8e 77       	andi	r24, 0x7E	; 126
 c6a:	80 93 e8 00 	sts	0x00E8, r24
 c6e:	0f b6       	in	r0, 0x3f	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c70:	f8 94       	cli
 c72:	be be       	out	0x3e, r11	; 62
 c74:	0f be       	out	0x3f, r0	; 63
 c76:	ad be       	out	0x3d, r10	; 61
 c78:	4e c0       	rjmp	.+156    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 c7a:	80 91 a7 01 	lds	r24, 0x01A7
 c7e:	81 3a       	cpi	r24, 0xA1	; 161
 c80:	09 f0       	breq	.+2      	; 0xc84 <HID_Device_ProcessControlRequest+0x178>
 c82:	49 c0       	rjmp	.+146    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 c84:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c88:	87 7f       	andi	r24, 0xF7	; 247
 c8a:	80 93 e8 00 	sts	0x00E8, r24
 c8e:	f7 01       	movw	r30, r14
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c90:	80 85       	ldd	r24, Z+8	; 0x08
 c92:	39 c0       	rjmp	.+114    	; 0xd06 <HID_Device_ProcessControlRequest+0x1fa>
 c94:	80 91 a7 01 	lds	r24, 0x01A7
 c98:	81 32       	cpi	r24, 0x21	; 33
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 c9a:	e9 f5       	brne	.+122    	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 c9c:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ca0:	87 7f       	andi	r24, 0xF7	; 247
 ca2:	80 93 e8 00 	sts	0x00E8, r24
 ca6:	90 91 a9 01 	lds	r25, 0x01A9
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	91 11       	cpse	r25, r1
 cae:	01 c0       	rjmp	.+2      	; 0xcb2 <HID_Device_ProcessControlRequest+0x1a6>
 cb0:	80 e0       	ldi	r24, 0x00	; 0
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 cb2:	f7 01       	movw	r30, r14
 cb4:	80 87       	std	Z+8, r24	; 0x08
 cb6:	2e c0       	rjmp	.+92     	; 0xd14 <HID_Device_ProcessControlRequest+0x208>
 cb8:	80 91 a7 01 	lds	r24, 0x01A7
 cbc:	81 32       	cpi	r24, 0x21	; 33
 cbe:	59 f5       	brne	.+86     	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 cc0:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cc4:	87 7f       	andi	r24, 0xF7	; 247
 cc6:	80 93 e8 00 	sts	0x00E8, r24
 cca:	80 91 a9 01 	lds	r24, 0x01A9
 cce:	90 91 aa 01 	lds	r25, 0x01AA
 cd2:	88 27       	eor	r24, r24
 cd4:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 cd6:	96 95       	lsr	r25
 cd8:	87 95       	ror	r24
 cda:	3a 95       	dec	r19
 cdc:	e1 f7       	brne	.-8      	; 0xcd6 <HID_Device_ProcessControlRequest+0x1ca>
 cde:	f7 01       	movw	r30, r14
 ce0:	92 87       	std	Z+10, r25	; 0x0a
 ce2:	81 87       	std	Z+9, r24	; 0x09
 ce4:	17 c0       	rjmp	.+46     	; 0xd14 <HID_Device_ProcessControlRequest+0x208>
 ce6:	80 91 a7 01 	lds	r24, 0x01A7
 cea:	81 3a       	cpi	r24, 0xA1	; 161
 cec:	a1 f4       	brne	.+40     	; 0xd16 <HID_Device_ProcessControlRequest+0x20a>
 cee:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cf2:	87 7f       	andi	r24, 0xF7	; 247
 cf4:	80 93 e8 00 	sts	0x00E8, r24
 cf8:	f7 01       	movw	r30, r14
 cfa:	81 85       	ldd	r24, Z+9	; 0x09
 cfc:	92 85       	ldd	r25, Z+10	; 0x0a
 cfe:	96 95       	lsr	r25
 d00:	87 95       	ror	r24
 d02:	96 95       	lsr	r25
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 d04:	87 95       	ror	r24
 d06:	80 93 f1 00 	sts	0x00F1, r24
 d0a:	80 91 e8 00 	lds	r24, 0x00E8
 d0e:	8e 77       	andi	r24, 0x7E	; 126
 d10:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d14:	ac db       	rcall	.-2216   	; 0x46e <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d16:	0f b6       	in	r0, 0x3f	; 63
 d18:	f8 94       	cli
 d1a:	be be       	out	0x3e, r11	; 62
 d1c:	0f be       	out	0x3f, r0	; 63
 d1e:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 d20:	0f 90       	pop	r0
 d22:	0f 90       	pop	r0
			}

			break;
	}
}
 d24:	0f 90       	pop	r0
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	1f 91       	pop	r17
 d2c:	0f 91       	pop	r16
 d2e:	ff 90       	pop	r15
 d30:	ef 90       	pop	r14
 d32:	df 90       	pop	r13
 d34:	cf 90       	pop	r12
 d36:	bf 90       	pop	r11
 d38:	af 90       	pop	r10
 d3a:	9f 90       	pop	r9
 d3c:	8f 90       	pop	r8
 d3e:	08 95       	ret

00000d40 <HID_Device_ConfigureEndpoints>:
 d40:	cf 93       	push	r28
 d42:	df 93       	push	r29
 d44:	fc 01       	movw	r30, r24
 d46:	dc 01       	movw	r26, r24
 d48:	18 96       	adiw	r26, 0x08	; 8
 d4a:	85 e0       	ldi	r24, 0x05	; 5
 d4c:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 d4e:	19 92       	st	Y+, r1
 d50:	8a 95       	dec	r24
 d52:	e9 f7       	brne	.-6      	; 0xd4e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 d54:	81 e0       	ldi	r24, 0x01	; 1
 d56:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 d58:	84 ef       	ldi	r24, 0xF4	; 244
 d5a:	91 e0       	ldi	r25, 0x01	; 1
 d5c:	92 87       	std	Z+10, r25	; 0x0a
 d5e:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 d60:	22 81       	ldd	r18, Z+2	; 0x02
 d62:	33 81       	ldd	r19, Z+3	; 0x03
 d64:	84 81       	ldd	r24, Z+4	; 0x04
 d66:	88 23       	and	r24, r24
 d68:	11 f0       	breq	.+4      	; 0xd6e <HID_Device_ConfigureEndpoints+0x2e>
 d6a:	c4 e0       	ldi	r28, 0x04	; 4
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <HID_Device_ConfigureEndpoints+0x30>
 d6e:	c0 e0       	ldi	r28, 0x00	; 0
 d70:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d72:	c9 01       	movw	r24, r18
 d74:	47 db       	rcall	.-2418   	; 0x404 <Endpoint_BytesToEPSizeMaskDynamic>
 d76:	4c 2f       	mov	r20, r28
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d78:	48 2b       	or	r20, r24
 d7a:	42 60       	ori	r20, 0x02	; 2
 d7c:	61 ec       	ldi	r22, 0xC1	; 193
 d7e:	8d 2f       	mov	r24, r29
 d80:	df 91       	pop	r29
	{
		return false;
	}
	
	return true;
}
 d82:	cf 91       	pop	r28
 d84:	4d cb       	rjmp	.-2406   	; 0x420 <Endpoint_ConfigureEndpoint_Prv>

00000d86 <HID_Device_USBTask>:
 d86:	5f 92       	push	r5
 d88:	6f 92       	push	r6
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d8a:	7f 92       	push	r7
 d8c:	8f 92       	push	r8
 d8e:	9f 92       	push	r9
 d90:	af 92       	push	r10
 d92:	bf 92       	push	r11
 d94:	cf 92       	push	r12
 d96:	df 92       	push	r13
 d98:	ef 92       	push	r14
 d9a:	ff 92       	push	r15
 d9c:	0f 93       	push	r16
 d9e:	1f 93       	push	r17
 da0:	cf 93       	push	r28
 da2:	df 93       	push	r29
 da4:	00 d0       	rcall	.+0      	; 0xda6 <HID_Device_USBTask+0x20>
 da6:	1f 92       	push	r1
 da8:	cd b7       	in	r28, 0x3d	; 61
 daa:	de b7       	in	r29, 0x3e	; 62
 dac:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 dae:	ad b6       	in	r10, 0x3d	; 61
 db0:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 db2:	8e b3       	in	r24, 0x1e	; 30
 db4:	84 30       	cpi	r24, 0x04	; 4
 db6:	09 f0       	breq	.+2      	; 0xdba <HID_Device_USBTask+0x34>
 db8:	77 c0       	rjmp	.+238    	; 0xea8 <HID_Device_USBTask+0x122>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 dba:	f7 01       	movw	r30, r14
 dbc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dbe:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dc2:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsReadWriteAllowed())
 dc6:	85 ff       	sbrs	r24, 5
 dc8:	6f c0       	rjmp	.+222    	; 0xea8 <HID_Device_USBTask+0x122>
 dca:	8d b6       	in	r8, 0x3d	; 61
 dcc:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 dce:	47 81       	ldd	r20, Z+7	; 0x07
 dd0:	50 e0       	ldi	r21, 0x00	; 0
 dd2:	8d b7       	in	r24, 0x3d	; 61
 dd4:	9e b7       	in	r25, 0x3e	; 62
 dd6:	84 1b       	sub	r24, r20
 dd8:	95 0b       	sbc	r25, r21
 dda:	0f b6       	in	r0, 0x3f	; 63
 ddc:	f8 94       	cli
 dde:	9e bf       	out	0x3e, r25	; 62
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	8d bf       	out	0x3d, r24	; 61
 de4:	ed b7       	in	r30, 0x3d	; 61
 de6:	fe b7       	in	r31, 0x3e	; 62
 de8:	31 96       	adiw	r30, 0x01	; 1
 dea:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 dec:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 dee:	1a 82       	std	Y+2, r1	; 0x02
 df0:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 df2:	60 e0       	ldi	r22, 0x00	; 0
 df4:	70 e0       	ldi	r23, 0x00	; 0
 df6:	cf 01       	movw	r24, r30
 df8:	8b d0       	rcall	.+278    	; 0xf10 <memset>
 dfa:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 dfc:	0f 5f       	subi	r16, 0xFF	; 255
 dfe:	1f 4f       	sbci	r17, 0xFF	; 255
 e00:	96 01       	movw	r18, r12
 e02:	40 e0       	ldi	r20, 0x00	; 0
 e04:	be 01       	movw	r22, r28
 e06:	6d 5f       	subi	r22, 0xFD	; 253
 e08:	7f 4f       	sbci	r23, 0xFF	; 255
 e0a:	c7 01       	movw	r24, r14
 e0c:	24 da       	rcall	.-3000   	; 0x256 <CALLBACK_HID_Device_CreateHIDReport>
 e0e:	68 2e       	mov	r6, r24
 e10:	f7 01       	movw	r30, r14
 e12:	81 85       	ldd	r24, Z+9	; 0x09
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 e14:	92 85       	ldd	r25, Z+10	; 0x0a
 e16:	89 2b       	or	r24, r25
 e18:	41 f0       	breq	.+16     	; 0xe2a <HID_Device_USBTask+0xa4>
 e1a:	21 e0       	ldi	r18, 0x01	; 1
 e1c:	83 85       	ldd	r24, Z+11	; 0x0b
 e1e:	94 85       	ldd	r25, Z+12	; 0x0c
 e20:	89 2b       	or	r24, r25
 e22:	09 f0       	breq	.+2      	; 0xe26 <HID_Device_USBTask+0xa0>
 e24:	20 e0       	ldi	r18, 0x00	; 0
 e26:	72 2e       	mov	r7, r18
 e28:	01 c0       	rjmp	.+2      	; 0xe2c <HID_Device_USBTask+0xa6>
 e2a:	71 2c       	mov	r7, r1
 e2c:	f7 01       	movw	r30, r14
 e2e:	05 81       	ldd	r16, Z+5	; 0x05
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 e30:	16 81       	ldd	r17, Z+6	; 0x06
 e32:	01 15       	cp	r16, r1
 e34:	11 05       	cpc	r17, r1
 e36:	89 f0       	breq	.+34     	; 0xe5a <HID_Device_USBTask+0xd4>
 e38:	49 81       	ldd	r20, Y+1	; 0x01
 e3a:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 e3c:	b8 01       	movw	r22, r16
 e3e:	c6 01       	movw	r24, r12
 e40:	51 d0       	rcall	.+162    	; 0xee4 <memcmp>
 e42:	55 24       	eor	r5, r5
 e44:	53 94       	inc	r5
 e46:	89 2b       	or	r24, r25
 e48:	09 f4       	brne	.+2      	; 0xe4c <HID_Device_USBTask+0xc6>
 e4a:	51 2c       	mov	r5, r1
 e4c:	f7 01       	movw	r30, r14
 e4e:	47 81       	ldd	r20, Z+7	; 0x07
 e50:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 e52:	b6 01       	movw	r22, r12
 e54:	c8 01       	movw	r24, r16
 e56:	53 d0       	rcall	.+166    	; 0xefe <memcpy>
 e58:	01 c0       	rjmp	.+2      	; 0xe5c <HID_Device_USBTask+0xd6>
 e5a:	51 2c       	mov	r5, r1
 e5c:	29 81       	ldd	r18, Y+1	; 0x01
 e5e:	3a 81       	ldd	r19, Y+2	; 0x02
 e60:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 e62:	e9 f0       	breq	.+58     	; 0xe9e <HID_Device_USBTask+0x118>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 e64:	61 10       	cpse	r6, r1
 e66:	04 c0       	rjmp	.+8      	; 0xe70 <HID_Device_USBTask+0xea>
 e68:	51 10       	cpse	r5, r1
 e6a:	02 c0       	rjmp	.+4      	; 0xe70 <HID_Device_USBTask+0xea>
 e6c:	70 fe       	sbrs	r7, 0
 e6e:	17 c0       	rjmp	.+46     	; 0xe9e <HID_Device_USBTask+0x118>
 e70:	f7 01       	movw	r30, r14
 e72:	81 85       	ldd	r24, Z+9	; 0x09
 e74:	92 85       	ldd	r25, Z+10	; 0x0a
 e76:	94 87       	std	Z+12, r25	; 0x0c
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 e78:	83 87       	std	Z+11, r24	; 0x0b
 e7a:	81 81       	ldd	r24, Z+1	; 0x01
 e7c:	80 93 e9 00 	sts	0x00E9, r24
 e80:	8b 81       	ldd	r24, Y+3	; 0x03

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e82:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e84:	80 93 f1 00 	sts	0x00F1, r24

			if (ReportID)
 e88:	69 81       	ldd	r22, Y+1	; 0x01
 e8a:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e8c:	40 e0       	ldi	r20, 0x00	; 0
 e8e:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 e90:	c6 01       	movw	r24, r12
 e92:	39 db       	rcall	.-2446   	; 0x506 <Endpoint_Write_Stream_LE>
 e94:	80 91 e8 00 	lds	r24, 0x00E8
 e98:	8e 77       	andi	r24, 0x7E	; 126
 e9a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e9e:	0f b6       	in	r0, 0x3f	; 63
 ea0:	f8 94       	cli
 ea2:	9e be       	out	0x3e, r9	; 62
 ea4:	0f be       	out	0x3f, r0	; 63
 ea6:	8d be       	out	0x3d, r8	; 61
 ea8:	0f b6       	in	r0, 0x3f	; 63
 eaa:	f8 94       	cli
 eac:	be be       	out	0x3e, r11	; 62
 eae:	0f be       	out	0x3f, r0	; 63
 eb0:	ad be       	out	0x3d, r10	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 eb2:	0f 90       	pop	r0
 eb4:	0f 90       	pop	r0
 eb6:	0f 90       	pop	r0
 eb8:	df 91       	pop	r29
 eba:	cf 91       	pop	r28
 ebc:	1f 91       	pop	r17
 ebe:	0f 91       	pop	r16
 ec0:	ff 90       	pop	r15
 ec2:	ef 90       	pop	r14
 ec4:	df 90       	pop	r13
 ec6:	cf 90       	pop	r12
 ec8:	bf 90       	pop	r11
 eca:	af 90       	pop	r10
 ecc:	9f 90       	pop	r9
 ece:	8f 90       	pop	r8
 ed0:	7f 90       	pop	r7
 ed2:	6f 90       	pop	r6
 ed4:	5f 90       	pop	r5
 ed6:	08 95       	ret

00000ed8 <__tablejump2__>:
 ed8:	ee 0f       	add	r30, r30
 eda:	ff 1f       	adc	r31, r31

00000edc <__tablejump__>:
 edc:	05 90       	lpm	r0, Z+
 ede:	f4 91       	lpm	r31, Z
 ee0:	e0 2d       	mov	r30, r0
 ee2:	09 94       	ijmp

00000ee4 <memcmp>:
 ee4:	fb 01       	movw	r30, r22
 ee6:	dc 01       	movw	r26, r24
 ee8:	04 c0       	rjmp	.+8      	; 0xef2 <memcmp+0xe>
 eea:	8d 91       	ld	r24, X+
 eec:	01 90       	ld	r0, Z+
 eee:	80 19       	sub	r24, r0
 ef0:	21 f4       	brne	.+8      	; 0xefa <memcmp+0x16>
 ef2:	41 50       	subi	r20, 0x01	; 1
 ef4:	50 40       	sbci	r21, 0x00	; 0
 ef6:	c8 f7       	brcc	.-14     	; 0xeea <memcmp+0x6>
 ef8:	88 1b       	sub	r24, r24
 efa:	99 0b       	sbc	r25, r25
 efc:	08 95       	ret

00000efe <memcpy>:
 efe:	fb 01       	movw	r30, r22
 f00:	dc 01       	movw	r26, r24
 f02:	02 c0       	rjmp	.+4      	; 0xf08 <memcpy+0xa>
 f04:	01 90       	ld	r0, Z+
 f06:	0d 92       	st	X+, r0
 f08:	41 50       	subi	r20, 0x01	; 1
 f0a:	50 40       	sbci	r21, 0x00	; 0
 f0c:	d8 f7       	brcc	.-10     	; 0xf04 <memcpy+0x6>
 f0e:	08 95       	ret

00000f10 <memset>:
 f10:	dc 01       	movw	r26, r24
 f12:	01 c0       	rjmp	.+2      	; 0xf16 <memset+0x6>
 f14:	6d 93       	st	X+, r22
 f16:	41 50       	subi	r20, 0x01	; 1
 f18:	50 40       	sbci	r21, 0x00	; 0
 f1a:	e0 f7       	brcc	.-8      	; 0xf14 <memset+0x4>
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>

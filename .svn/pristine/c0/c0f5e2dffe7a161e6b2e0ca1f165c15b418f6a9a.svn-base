
RelayBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000aac  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005c0  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d12  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002898  00000000  00000000  0000a996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003651  00000000  00000000  0000d22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bec  00000000  00000000  00010880  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003824  00000000  00000000  0001146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004abd  00000000  00000000  00014c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0001974d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	13 c3       	rjmp	.+1574   	; 0x650 <__vector_10>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	70 c0       	rjmp	.+224    	; 0x12e <__bad_interrupt>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	50 c0       	rjmp	.+160    	; 0x12e <__bad_interrupt>
  8e:	00 00       	nop
  90:	4e c0       	rjmp	.+156    	; 0x12e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	4c c0       	rjmp	.+152    	; 0x12e <__bad_interrupt>
  96:	00 00       	nop

00000098 <RelayBoard_SerialString>:
  98:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00           ..0.0.0.0.1...

000000a6 <RelayBoard_ProductString>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a6:	16 03 52 00 65 00 6c 00 61 00 79 00 42 00 6f 00     ..R.e.l.a.y.B.o.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b6:	61 00 72 00 64 00 00 00                             a.r.d...

000000be <RelayBoard_ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  be:	0c 03 53 00 49 00 53 00 50 00 4d 00 00 00           ..S.I.S.P.M...

000000cc <RelayBoard_LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  cc:	04 03 09 04                                         ....

000000d0 <RelayBoard_ConfigurationDescriptor>:
  d0:	09 02 12 00 01 01 00 80 fa 09 04 00 00 00 ff 00     ................

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  e0:	00 00                                               ..

000000e2 <RelayBoard_DeviceDescriptor>:
  e2:	12 01 10 01 ff 00 00 08 b4 04 11 fd 00 02 01 02     ................
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f2:	03 01                                               ..

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d0 e2       	ldi	r29, 0x20	; 32
  fc:	de bf       	out	0x3e, r29	; 62
		ReportSize--;
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	e8 e1       	ldi	r30, 0x18	; 24
 108:	fa e0       	ldi	r31, 0x0A	; 10
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 30       	cpi	r26, 0x00	; 0
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ac 30       	cpi	r26, 0x0C	; 12
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	b1 07       	cpc	r27, r17
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	1e d0       	rcall	.+60     	; 0x168 <main>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	73 c4       	rjmp	.+2278   	; 0xa14 <_exit>

0000012e <__bad_interrupt>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <SetupHardware>:
 130:	84 b7       	in	r24, 0x34	; 52
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	84 bf       	out	0x34, r24	; 52
 136:	88 e1       	ldi	r24, 0x18	; 24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	80 93 60 00 	sts	0x0060, r24
 140:	10 92 60 00 	sts	0x0060, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	0f be       	out	0x3f, r0	; 63
 146:	90 e0       	ldi	r25, 0x00	; 0
				ReportData     += 4;
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
				break;
 14e:	80 93 61 00 	sts	0x0061, r24

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 152:	90 93 61 00 	sts	0x0061, r25
 156:	0f be       	out	0x3f, r0	; 63
 158:	60 d2       	rcall	.+1216   	; 0x61a <USB_Init>
 15a:	87 b1       	in	r24, 0x07	; 7
 15c:	80 6f       	ori	r24, 0xF0	; 240
 15e:	87 b9       	out	0x07, r24	; 7
 160:	88 b1       	in	r24, 0x08	; 8
				ReportSize     -= 2;
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	88 b9       	out	0x08, r24	; 8
				ReportData     += 2;
 166:	08 95       	ret

00000168 <main>:
 168:	e3 df       	rcall	.-58     	; 0x130 <SetupHardware>
 16a:	78 94       	sei
				break;
 16c:	4b d4       	rcall	.+2198   	; 0xa04 <USB_USBTask>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0x4>

00000170 <EVENT_USB_Device_ControlRequest>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	27 97       	sbiw	r28, 0x07	; 7
				ReportSize     -= 1;
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
				ReportData     += 1;
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	19 82       	std	Y+1, r1	; 0x01
 186:	1a 82       	std	Y+2, r1	; 0x02
 188:	1b 82       	std	Y+3, r1	; 0x03
 18a:	1c 82       	std	Y+4, r1	; 0x04
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8d 83       	std	Y+5, r24	; 0x05
 190:	1e 82       	std	Y+6, r1	; 0x06
 192:	1f 82       	std	Y+7, r1	; 0x07
 194:	80 91 05 01 	lds	r24, 0x0105
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f4       	brne	.+2      	; 0x19e <EVENT_USB_Device_ControlRequest+0x2e>
 19c:	4a c0       	rjmp	.+148    	; 0x232 <EVENT_USB_Device_ControlRequest+0xc2>
 19e:	89 30       	cpi	r24, 0x09	; 9
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <EVENT_USB_Device_ControlRequest+0x34>
 1a2:	91 c0       	rjmp	.+290    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 1a4:	80 91 04 01 	lds	r24, 0x0104
 1a8:	81 32       	cpi	r24, 0x21	; 33

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	09 f0       	breq	.+2      	; 0x1ae <EVENT_USB_Device_ControlRequest+0x3e>
 1ac:	8c c0       	rjmp	.+280    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	89 b9       	out	0x09, r24	; 9
 1b2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	87 7f       	andi	r24, 0xF7	; 247
 1b8:	80 93 e8 00 	sts	0x00E8, r24
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	ce 01       	movw	r24, r28
 1c2:	06 96       	adiw	r24, 0x06	; 6
 1c4:	1c d1       	rcall	.+568    	; 0x3fe <Endpoint_Read_Control_Stream_LE>
 1c6:	80 91 e8 00 	lds	r24, 0x00E8
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	80 93 e8 00 	sts	0x00E8, r24
 1d0:	80 91 06 01 	lds	r24, 0x0106
 1d4:	90 91 07 01 	lds	r25, 0x0107
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d8:	86 30       	cpi	r24, 0x06	; 6
 1da:	23 e0       	ldi	r18, 0x03	; 3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	92 07       	cpc	r25, r18
 1de:	a1 f0       	breq	.+40     	; 0x208 <EVENT_USB_Device_ControlRequest+0x98>
 1e0:	20 f4       	brcc	.+8      	; 0x1ea <EVENT_USB_Device_ControlRequest+0x7a>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	93 40       	sbci	r25, 0x03	; 3
 1e6:	49 f0       	breq	.+18     	; 0x1fa <EVENT_USB_Device_ControlRequest+0x8a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	6e c0       	rjmp	.+220    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 1ea:	89 30       	cpi	r24, 0x09	; 9
				break;
 1ec:	23 e0       	ldi	r18, 0x03	; 3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	92 07       	cpc	r25, r18
 1f0:	91 f0       	breq	.+36     	; 0x216 <EVENT_USB_Device_ControlRequest+0xa6>
 1f2:	8c 30       	cpi	r24, 0x0C	; 12
 1f4:	93 40       	sbci	r25, 0x03	; 3
 1f6:	b1 f0       	breq	.+44     	; 0x224 <EVENT_USB_Device_ControlRequest+0xb4>
 1f8:	66 c0       	rjmp	.+204    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 1fa:	8f 81       	ldd	r24, Y+7	; 0x07
 1fc:	88 23       	and	r24, r24
 1fe:	11 f0       	breq	.+4      	; 0x204 <EVENT_USB_Device_ControlRequest+0x94>
 200:	47 98       	cbi	0x08, 7	; 8
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	61 c0       	rjmp	.+194    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 204:	47 9a       	sbi	0x08, 7	; 8
				break;
 206:	5f c0       	rjmp	.+190    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	8f 81       	ldd	r24, Y+7	; 0x07
 20a:	88 23       	and	r24, r24
 20c:	11 f0       	breq	.+4      	; 0x212 <EVENT_USB_Device_ControlRequest+0xa2>
 20e:	46 98       	cbi	0x08, 6	; 8
 210:	5a c0       	rjmp	.+180    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 212:	46 9a       	sbi	0x08, 6	; 8
 214:	58 c0       	rjmp	.+176    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 216:	8f 81       	ldd	r24, Y+7	; 0x07
 218:	88 23       	and	r24, r24
 21a:	11 f0       	breq	.+4      	; 0x220 <EVENT_USB_Device_ControlRequest+0xb0>
 21c:	45 98       	cbi	0x08, 5	; 8
 21e:	53 c0       	rjmp	.+166    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 220:	45 9a       	sbi	0x08, 5	; 8
 222:	51 c0       	rjmp	.+162    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 224:	8f 81       	ldd	r24, Y+7	; 0x07
 226:	88 23       	and	r24, r24
 228:	11 f0       	breq	.+4      	; 0x22e <EVENT_USB_Device_ControlRequest+0xbe>
 22a:	44 98       	cbi	0x08, 4	; 8
 22c:	4c c0       	rjmp	.+152    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 22e:	44 9a       	sbi	0x08, 4	; 8
 230:	4a c0       	rjmp	.+148    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 232:	80 91 04 01 	lds	r24, 0x0104
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 236:	81 3a       	cpi	r24, 0xA1	; 161
 238:	09 f0       	breq	.+2      	; 0x23c <EVENT_USB_Device_ControlRequest+0xcc>
 23a:	45 c0       	rjmp	.+138    	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	89 b9       	out	0x09, r24	; 9
 240:	80 91 e8 00 	lds	r24, 0x00E8
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	80 93 e8 00 	sts	0x00E8, r24
 24a:	80 91 06 01 	lds	r24, 0x0106
 24e:	90 91 07 01 	lds	r25, 0x0107
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	23 e0       	ldi	r18, 0x03	; 3
 256:	92 07       	cpc	r25, r18
 258:	e9 f0       	breq	.+58     	; 0x294 <EVENT_USB_Device_ControlRequest+0x124>
 25a:	70 f4       	brcc	.+28     	; 0x278 <EVENT_USB_Device_ControlRequest+0x108>
 25c:	81 30       	cpi	r24, 0x01	; 1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	23 e0       	ldi	r18, 0x03	; 3
 260:	92 07       	cpc	r25, r18
 262:	91 f0       	breq	.+36     	; 0x288 <EVENT_USB_Device_ControlRequest+0x118>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	93 40       	sbci	r25, 0x03	; 3
 268:	09 f5       	brne	.+66     	; 0x2ac <EVENT_USB_Device_ControlRequest+0x13c>
 26a:	88 b1       	in	r24, 0x08	; 8
 26c:	80 95       	com	r24
 26e:	88 1f       	adc	r24, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	88 27       	eor	r24, r24
				break;
 272:	88 1f       	adc	r24, r24

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	8e 5f       	subi	r24, 0xFE	; 254
 276:	19 c0       	rjmp	.+50     	; 0x2aa <EVENT_USB_Device_ControlRequest+0x13a>
 278:	89 30       	cpi	r24, 0x09	; 9
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	92 07       	cpc	r25, r18
 27e:	69 f0       	breq	.+26     	; 0x29a <EVENT_USB_Device_ControlRequest+0x12a>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	8c 30       	cpi	r24, 0x0C	; 12
 282:	93 40       	sbci	r25, 0x03	; 3
				break;
 284:	69 f0       	breq	.+26     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x130>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	12 c0       	rjmp	.+36     	; 0x2ac <EVENT_USB_Device_ControlRequest+0x13c>
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
				break;
 290:	5b d0       	rcall	.+182    	; 0x348 <Endpoint_Write_Control_Stream_LE>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	0c c0       	rjmp	.+24     	; 0x2ac <EVENT_USB_Device_ControlRequest+0x13c>
 294:	46 9b       	sbis	0x08, 6	; 8
 296:	08 c0       	rjmp	.+16     	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x138>
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <EVENT_USB_Device_ControlRequest+0x134>
 29a:	45 9b       	sbis	0x08, 5	; 8
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x138>
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <EVENT_USB_Device_ControlRequest+0x134>
				break;
 2a0:	44 9b       	sbis	0x08, 4	; 8

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x138>
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <EVENT_USB_Device_ControlRequest+0x13a>
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	8f 83       	std	Y+7, r24	; 0x07
				break;
 2ac:	8f 81       	ldd	r24, Y+7	; 0x07

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	88 23       	and	r24, r24
 2b0:	29 f0       	breq	.+10     	; 0x2bc <EVENT_USB_Device_ControlRequest+0x14c>
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	ce 01       	movw	r24, r28
 2b8:	06 96       	adiw	r24, 0x06	; 6
 2ba:	46 d0       	rcall	.+140    	; 0x348 <Endpoint_Write_Control_Stream_LE>
				break;
 2bc:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	80 93 e8 00 	sts	0x00E8, r24
 2c6:	27 96       	adiw	r28, 0x07	; 7
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
				break;
 2cc:	de bf       	out	0x3e, r29	; 62
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
				break;
 2d4:	cf 91       	pop	r28

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	08 95       	ret

000002d8 <CALLBACK_USB_GetDescriptor>:
 2d8:	29 2f       	mov	r18, r25
 2da:	33 27       	eor	r19, r19

				if (ParserData->UsingReportIDs)
 2dc:	22 30       	cpi	r18, 0x02	; 2
 2de:	31 05       	cpc	r19, r1
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <CALLBACK_USB_GetDescriptor+0x20>
 2e2:	23 30       	cpi	r18, 0x03	; 3
 2e4:	31 05       	cpc	r19, r1
 2e6:	69 f0       	breq	.+26     	; 0x302 <CALLBACK_USB_GetDescriptor+0x2a>
 2e8:	21 30       	cpi	r18, 0x01	; 1
 2ea:	31 05       	cpc	r19, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	29 f5       	brne	.+74     	; 0x338 <CALLBACK_USB_GetDescriptor+0x60>
 2ee:	82 e1       	ldi	r24, 0x12	; 18
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	22 ee       	ldi	r18, 0xE2	; 226
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	24 c0       	rjmp	.+72     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
 2f8:	82 e1       	ldi	r24, 0x12	; 18
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	20 ed       	ldi	r18, 0xD0	; 208
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	1f c0       	rjmp	.+62     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
 302:	99 27       	eor	r25, r25
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	91 05       	cpc	r25, r1
 308:	71 f0       	breq	.+28     	; 0x326 <CALLBACK_USB_GetDescriptor+0x4e>
 30a:	2c f4       	brge	.+10     	; 0x316 <CALLBACK_USB_GetDescriptor+0x3e>
 30c:	89 2b       	or	r24, r25
 30e:	a1 f4       	brne	.+40     	; 0x338 <CALLBACK_USB_GetDescriptor+0x60>
 310:	ec ec       	ldi	r30, 0xCC	; 204
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	0d c0       	rjmp	.+26     	; 0x330 <CALLBACK_USB_GetDescriptor+0x58>
 316:	82 30       	cpi	r24, 0x02	; 2
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	91 05       	cpc	r25, r1
 31a:	41 f0       	breq	.+16     	; 0x32c <CALLBACK_USB_GetDescriptor+0x54>
 31c:	03 97       	sbiw	r24, 0x03	; 3
 31e:	61 f4       	brne	.+24     	; 0x338 <CALLBACK_USB_GetDescriptor+0x60>
 320:	e8 e9       	ldi	r30, 0x98	; 152
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	05 c0       	rjmp	.+10     	; 0x330 <CALLBACK_USB_GetDescriptor+0x58>
 326:	ee eb       	ldi	r30, 0xBE	; 190
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <CALLBACK_USB_GetDescriptor+0x58>
 32c:	e6 ea       	ldi	r30, 0xA6	; 166
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	84 91       	lpm	r24, Z
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	9f 01       	movw	r18, r30
 336:	04 c0       	rjmp	.+8      	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	20 e0       	ldi	r18, 0x00	; 0
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	fa 01       	movw	r30, r20
 342:	31 83       	std	Z+1, r19	; 0x01
 344:	20 83       	st	Z, r18
 346:	08 95       	ret

00000348 <Endpoint_Write_Control_Stream_LE>:
 348:	20 91 0a 01 	lds	r18, 0x010A
 34c:	30 91 0b 01 	lds	r19, 0x010B
 350:	26 17       	cp	r18, r22
 352:	37 07       	cpc	r19, r23
 354:	48 f0       	brcs	.+18     	; 0x368 <Endpoint_Write_Control_Stream_LE+0x20>
 356:	61 15       	cp	r22, r1
 358:	71 05       	cpc	r23, r1
 35a:	39 f4       	brne	.+14     	; 0x36a <Endpoint_Write_Control_Stream_LE+0x22>
 35c:	20 91 e8 00 	lds	r18, 0x00E8
 360:	2e 7f       	andi	r18, 0xFE	; 254
 362:	20 93 e8 00 	sts	0x00E8, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 366:	01 c0       	rjmp	.+2      	; 0x36a <Endpoint_Write_Control_Stream_LE+0x22>
 368:	b9 01       	movw	r22, r18
 36a:	fc 01       	movw	r30, r24
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	61 15       	cp	r22, r1
 370:	71 05       	cpc	r23, r1
 372:	91 f1       	breq	.+100    	; 0x3d8 <Endpoint_Write_Control_Stream_LE+0x90>
 374:	8e b3       	in	r24, 0x1e	; 30
 376:	88 23       	and	r24, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	e1 f1       	breq	.+120    	; 0x3f2 <Endpoint_Write_Control_Stream_LE+0xaa>
 37a:	85 30       	cpi	r24, 0x05	; 5
 37c:	e1 f1       	breq	.+120    	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0xae>
 37e:	80 91 e8 00 	lds	r24, 0x00E8
 382:	83 fd       	sbrc	r24, 3
 384:	3a c0       	rjmp	.+116    	; 0x3fa <Endpoint_Write_Control_Stream_LE+0xb2>
 386:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	82 ff       	sbrs	r24, 2
 38c:	06 c0       	rjmp	.+12     	; 0x39a <Endpoint_Write_Control_Stream_LE+0x52>
 38e:	80 91 e8 00 	lds	r24, 0x00E8
 392:	82 ff       	sbrs	r24, 2
 394:	24 c0       	rjmp	.+72     	; 0x3de <Endpoint_Write_Control_Stream_LE+0x96>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
 39a:	80 91 e8 00 	lds	r24, 0x00E8
 39e:	80 ff       	sbrs	r24, 0
 3a0:	e6 cf       	rjmp	.-52     	; 0x36e <Endpoint_Write_Control_Stream_LE+0x26>
 3a2:	80 91 f2 00 	lds	r24, 0x00F2
 3a6:	90 91 f3 00 	lds	r25, 0x00F3
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x7c>
				break;
 3b0:	88 30       	cpi	r24, 0x08	; 8
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	91 05       	cpc	r25, r1
 3b4:	38 f4       	brcc	.+14     	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x7c>
 3b6:	21 91       	ld	r18, Z+
 3b8:	20 93 f1 00 	sts	0x00F1, r18
 3bc:	61 50       	subi	r22, 0x01	; 1
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	71 09       	sbc	r23, r1
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	f3 cf       	rjmp	.-26     	; 0x3aa <Endpoint_Write_Control_Stream_LE+0x62>
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	08 97       	sbiw	r24, 0x08	; 8
 3c8:	09 f0       	breq	.+2      	; 0x3cc <Endpoint_Write_Control_Stream_LE+0x84>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	80 93 e8 00 	sts	0x00E8, r24

					while (CurrCollectionPath->Parent != NULL)
 3d6:	cb cf       	rjmp	.-106    	; 0x36e <Endpoint_Write_Control_Stream_LE+0x26>
 3d8:	21 11       	cpse	r18, r1
 3da:	cc cf       	rjmp	.-104    	; 0x374 <Endpoint_Write_Control_Stream_LE+0x2c>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	d8 cf       	rjmp	.-80     	; 0x38e <Endpoint_Write_Control_Stream_LE+0x46>
 3de:	8e b3       	in	r24, 0x1e	; 30
 3e0:	88 23       	and	r24, r24
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <Endpoint_Write_Control_Stream_LE+0xaa>
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0xae>
 3e8:	80 91 e8 00 	lds	r24, 0x00E8
 3ec:	83 ff       	sbrs	r24, 3
 3ee:	cf cf       	rjmp	.-98     	; 0x38e <Endpoint_Write_Control_Stream_LE+0x46>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <Endpoint_Write_Control_Stream_LE+0xb2>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	08 95       	ret
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	08 95       	ret
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret

000003fe <Endpoint_Read_Control_Stream_LE>:
 3fe:	61 15       	cp	r22, r1
 400:	71 05       	cpc	r23, r1
 402:	29 f4       	brne	.+10     	; 0x40e <Endpoint_Read_Control_Stream_LE+0x10>
 404:	20 91 e8 00 	lds	r18, 0x00E8
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	2b 7f       	andi	r18, 0xFB	; 251
 40a:	20 93 e8 00 	sts	0x00E8, r18
 40e:	61 15       	cp	r22, r1
 410:	71 05       	cpc	r23, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	21 f1       	breq	.+72     	; 0x45c <Endpoint_Read_Control_Stream_LE+0x5e>
 414:	2e b3       	in	r18, 0x1e	; 30
 416:	22 23       	and	r18, r18
 418:	51 f1       	breq	.+84     	; 0x46e <Endpoint_Read_Control_Stream_LE+0x70>
 41a:	25 30       	cpi	r18, 0x05	; 5
 41c:	51 f1       	breq	.+84     	; 0x472 <Endpoint_Read_Control_Stream_LE+0x74>
 41e:	20 91 e8 00 	lds	r18, 0x00E8

				if (UsageListSize)
 422:	23 fd       	sbrc	r18, 3
 424:	20 c0       	rjmp	.+64     	; 0x466 <Endpoint_Read_Control_Stream_LE+0x68>
 426:	20 91 e8 00 	lds	r18, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	22 ff       	sbrs	r18, 2
 42c:	f3 cf       	rjmp	.-26     	; 0x414 <Endpoint_Read_Control_Stream_LE+0x16>
 42e:	fc 01       	movw	r30, r24
 430:	cf 01       	movw	r24, r30
 432:	20 91 f2 00 	lds	r18, 0x00F2
 436:	30 91 f3 00 	lds	r19, 0x00F3
 43a:	23 2b       	or	r18, r19
 43c:	19 f3       	breq	.-58     	; 0x404 <Endpoint_Read_Control_Stream_LE+0x6>
 43e:	80 91 f1 00 	lds	r24, 0x00F1

					for (uint8_t i = 1; i < UsageListSize; i++)
 442:	81 93       	st	Z+, r24
 444:	cf 01       	movw	r24, r30
 446:	61 50       	subi	r22, 0x01	; 1
 448:	71 09       	sbc	r23, r1
 44a:	61 15       	cp	r22, r1
					  UsageList[i - 1] = UsageList[i];
 44c:	71 05       	cpc	r23, r1
 44e:	81 f7       	brne	.-32     	; 0x430 <Endpoint_Read_Control_Stream_LE+0x32>
 450:	d9 cf       	rjmp	.-78     	; 0x404 <Endpoint_Read_Control_Stream_LE+0x6>
 452:	8e b3       	in	r24, 0x1e	; 30

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	88 23       	and	r24, r24
 456:	59 f0       	breq	.+22     	; 0x46e <Endpoint_Read_Control_Stream_LE+0x70>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	85 30       	cpi	r24, 0x05	; 5
 45a:	59 f0       	breq	.+22     	; 0x472 <Endpoint_Read_Control_Stream_LE+0x74>
 45c:	80 91 e8 00 	lds	r24, 0x00E8
 460:	80 ff       	sbrs	r24, 0
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	f7 cf       	rjmp	.-18     	; 0x452 <Endpoint_Read_Control_Stream_LE+0x54>
 464:	02 c0       	rjmp	.+4      	; 0x46a <Endpoint_Read_Control_Stream_LE+0x6c>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	08 95       	ret
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	08 95       	ret

00000476 <Endpoint_Write_Control_PStream_LE>:
 476:	20 91 0a 01 	lds	r18, 0x010A
 47a:	30 91 0b 01 	lds	r19, 0x010B
 47e:	26 17       	cp	r18, r22
 480:	37 07       	cpc	r19, r23
 482:	48 f0       	brcs	.+18     	; 0x496 <Endpoint_Write_Control_PStream_LE+0x20>
 484:	61 15       	cp	r22, r1
 486:	71 05       	cpc	r23, r1
 488:	39 f4       	brne	.+14     	; 0x498 <Endpoint_Write_Control_PStream_LE+0x22>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	20 91 e8 00 	lds	r18, 0x00E8
 48e:	2e 7f       	andi	r18, 0xFE	; 254
 490:	20 93 e8 00 	sts	0x00E8, r18
 494:	01 c0       	rjmp	.+2      	; 0x498 <Endpoint_Write_Control_PStream_LE+0x22>
 496:	b9 01       	movw	r22, r18
 498:	fc 01       	movw	r30, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	61 15       	cp	r22, r1
 49e:	71 05       	cpc	r23, r1
 4a0:	a9 f1       	breq	.+106    	; 0x50c <Endpoint_Write_Control_PStream_LE+0x96>
 4a2:	8e b3       	in	r24, 0x1e	; 30
 4a4:	88 23       	and	r24, r24
 4a6:	09 f4       	brne	.+2      	; 0x4aa <Endpoint_Write_Control_PStream_LE+0x34>
 4a8:	3e c0       	rjmp	.+124    	; 0x526 <Endpoint_Write_Control_PStream_LE+0xb0>
 4aa:	85 30       	cpi	r24, 0x05	; 5
				break;
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <Endpoint_Write_Control_PStream_LE+0x3a>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	3d c0       	rjmp	.+122    	; 0x52a <Endpoint_Write_Control_PStream_LE+0xb4>
 4b0:	80 91 e8 00 	lds	r24, 0x00E8
 4b4:	83 fd       	sbrc	r24, 3
 4b6:	3b c0       	rjmp	.+118    	; 0x52e <Endpoint_Write_Control_PStream_LE+0xb8>
 4b8:	80 91 e8 00 	lds	r24, 0x00E8
 4bc:	82 ff       	sbrs	r24, 2
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <Endpoint_Write_Control_PStream_LE+0x56>
 4c0:	80 91 e8 00 	lds	r24, 0x00E8
 4c4:	82 ff       	sbrs	r24, 2
 4c6:	25 c0       	rjmp	.+74     	; 0x512 <Endpoint_Write_Control_PStream_LE+0x9c>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	08 95       	ret
 4cc:	80 91 e8 00 	lds	r24, 0x00E8
 4d0:	80 ff       	sbrs	r24, 0
 4d2:	e4 cf       	rjmp	.-56     	; 0x49c <Endpoint_Write_Control_PStream_LE+0x26>
 4d4:	80 91 f2 00 	lds	r24, 0x00F2
 4d8:	90 91 f3 00 	lds	r25, 0x00F3
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x82>
 4e2:	88 30       	cpi	r24, 0x08	; 8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	91 05       	cpc	r25, r1
 4e6:	40 f4       	brcc	.+16     	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x82>
 4e8:	24 91       	lpm	r18, Z
 4ea:	20 93 f1 00 	sts	0x00F1, r18
 4ee:	31 96       	adiw	r30, 0x01	; 1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	61 50       	subi	r22, 0x01	; 1
 4f2:	71 09       	sbc	r23, r1
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	f2 cf       	rjmp	.-28     	; 0x4dc <Endpoint_Write_Control_PStream_LE+0x66>
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	08 97       	sbiw	r24, 0x08	; 8
 4fc:	09 f0       	breq	.+2      	; 0x500 <Endpoint_Write_Control_PStream_LE+0x8a>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	80 91 e8 00 	lds	r24, 0x00E8
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 504:	8e 7f       	andi	r24, 0xFE	; 254
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	80 93 e8 00 	sts	0x00E8, r24
 50a:	c8 cf       	rjmp	.-112    	; 0x49c <Endpoint_Write_Control_PStream_LE+0x26>
 50c:	21 11       	cpse	r18, r1
 50e:	c9 cf       	rjmp	.-110    	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0x2c>
 510:	d7 cf       	rjmp	.-82     	; 0x4c0 <Endpoint_Write_Control_PStream_LE+0x4a>
 512:	8e b3       	in	r24, 0x1e	; 30
 514:	88 23       	and	r24, r24
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	39 f0       	breq	.+14     	; 0x526 <Endpoint_Write_Control_PStream_LE+0xb0>
 518:	85 30       	cpi	r24, 0x05	; 5
 51a:	39 f0       	breq	.+14     	; 0x52a <Endpoint_Write_Control_PStream_LE+0xb4>
 51c:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
 520:	83 ff       	sbrs	r24, 3
 522:	ce cf       	rjmp	.-100    	; 0x4c0 <Endpoint_Write_Control_PStream_LE+0x4a>
 524:	04 c0       	rjmp	.+8      	; 0x52e <Endpoint_Write_Control_PStream_LE+0xb8>
 526:	82 e0       	ldi	r24, 0x02	; 2
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	08 95       	ret
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	08 95       	ret
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	08 95       	ret

00000532 <Endpoint_ConfigureEndpoint_Prv>:
 532:	eb ee       	ldi	r30, 0xEB	; 235
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
 53c:	ed ee       	ldi	r30, 0xED	; 237

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	10 82       	st	Z, r1
 542:	60 93 ec 00 	sts	0x00EC, r22
 546:	40 83       	st	Z, r20
 548:	80 91 ee 00 	lds	r24, 0x00EE
						  UsageList[i - 1] = UsageList[i];
 54c:	88 1f       	adc	r24, r24
 54e:	88 27       	eor	r24, r24
 550:	88 1f       	adc	r24, r24

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	08 95       	ret

00000554 <Endpoint_ClearStatusStage>:
 554:	80 91 04 01 	lds	r24, 0x0104
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 558:	87 fd       	sbrc	r24, 7
 55a:	05 c0       	rjmp	.+10     	; 0x566 <Endpoint_ClearStatusStage+0x12>
 55c:	80 91 e8 00 	lds	r24, 0x00E8
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	80 ff       	sbrs	r24, 0
 562:	0d c0       	rjmp	.+26     	; 0x57e <Endpoint_ClearStatusStage+0x2a>
 564:	10 c0       	rjmp	.+32     	; 0x586 <Endpoint_ClearStatusStage+0x32>
 566:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	82 fd       	sbrc	r24, 2
 56c:	04 c0       	rjmp	.+8      	; 0x576 <Endpoint_ClearStatusStage+0x22>
 56e:	8e b3       	in	r24, 0x1e	; 30
 570:	81 11       	cpse	r24, r1
 572:	f9 cf       	rjmp	.-14     	; 0x566 <Endpoint_ClearStatusStage+0x12>
 574:	08 95       	ret
 576:	80 91 e8 00 	lds	r24, 0x00E8
 57a:	8b 7f       	andi	r24, 0xFB	; 251
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	07 c0       	rjmp	.+14     	; 0x58c <Endpoint_ClearStatusStage+0x38>
 57e:	8e b3       	in	r24, 0x1e	; 30
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	81 11       	cpse	r24, r1
 582:	ec cf       	rjmp	.-40     	; 0x55c <Endpoint_ClearStatusStage+0x8>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	08 95       	ret
 586:	80 91 e8 00 	lds	r24, 0x00E8
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 58a:	8e 7f       	andi	r24, 0xFE	; 254
 58c:	80 93 e8 00 	sts	0x00E8, r24
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 590:	08 95       	ret

00000592 <USB_ResetInterface>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	4d d0       	rcall	.+154    	; 0x636 <USB_INT_DisableAllInterrupts>
 59c:	54 d0       	rcall	.+168    	; 0x646 <USB_INT_ClearAllInterrupts>
 59e:	c8 ed       	ldi	r28, 0xD8	; 216
 5a0:	d0 e0       	ldi	r29, 0x00	; 0
 5a2:	88 81       	ld	r24, Y
 5a4:	8f 77       	andi	r24, 0x7F	; 127
 5a6:	88 83       	st	Y, r24
 5a8:	88 81       	ld	r24, Y
 5aa:	80 68       	ori	r24, 0x80	; 128

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	88 83       	st	Y, r24
 5ae:	88 81       	ld	r24, Y
 5b0:	8f 7d       	andi	r24, 0xDF	; 223
 5b2:	88 83       	st	Y, r24
 5b4:	e7 ed       	ldi	r30, 0xD7	; 215
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 68       	ori	r24, 0x80	; 128

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	80 83       	st	Z, r24
 5be:	19 bc       	out	0x29, r1	; 41
 5c0:	1e ba       	out	0x1e, r1	; 30
 5c2:	10 92 00 01 	sts	0x0100, r1
 5c6:	10 92 02 01 	sts	0x0102, r1
 5ca:	10 92 01 01 	sts	0x0101, r1
 5ce:	00 ee       	ldi	r16, 0xE0	; 224
 5d0:	10 e0       	ldi	r17, 0x00	; 0
 5d2:	f8 01       	movw	r30, r16
 5d4:	80 81       	ld	r24, Z
 5d6:	8b 7f       	andi	r24, 0xFB	; 251
 5d8:	80 83       	st	Z, r24
 5da:	88 81       	ld	r24, Y
 5dc:	81 60       	ori	r24, 0x01	; 1
 5de:	88 83       	st	Y, r24
 5e0:	42 e0       	ldi	r20, 0x02	; 2
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	a5 df       	rcall	.-182    	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
 5e8:	e1 ee       	ldi	r30, 0xE1	; 225
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	8e 7f       	andi	r24, 0xFE	; 254
 5f0:	80 83       	st	Z, r24
 5f2:	e2 ee       	ldi	r30, 0xE2	; 226

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	81 60       	ori	r24, 0x01	; 1
 5fa:	80 83       	st	Z, r24
 5fc:	80 81       	ld	r24, Z
					  return HID_PARSE_InsufficientReportItems;
 5fe:	88 60       	ori	r24, 0x08	; 8
 600:	80 83       	st	Z, r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	f8 01       	movw	r30, r16
 604:	80 81       	ld	r24, Z
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	80 83       	st	Z, r24
 60a:	88 81       	ld	r24, Y
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	88 83       	st	Y, r24
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	08 95       	ret

0000061a <USB_Init>:
 61a:	e8 ed       	ldi	r30, 0xD8	; 216
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	8f 7e       	andi	r24, 0xEF	; 239
 622:	80 83       	st	Z, r24
 624:	e7 ed       	ldi	r30, 0xD7	; 215
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	80 83       	st	Z, r24
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 03 01 	sts	0x0103, r24
 634:	ae cf       	rjmp	.-164    	; 0x592 <USB_ResetInterface>

00000636 <USB_INT_DisableAllInterrupts>:
 636:	e8 ed       	ldi	r30, 0xD8	; 216
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	8c 7f       	andi	r24, 0xFC	; 252
 63e:	80 83       	st	Z, r24
 640:	10 92 e2 00 	sts	0x00E2, r1
 644:	08 95       	ret

00000646 <USB_INT_ClearAllInterrupts>:
 646:	10 92 da 00 	sts	0x00DA, r1
 64a:	10 92 e1 00 	sts	0x00E1, r1
 64e:	08 95       	ret

00000650 <__vector_10>:
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	0f 92       	push	r0
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
 676:	80 91 e1 00 	lds	r24, 0x00E1
 67a:	82 ff       	sbrs	r24, 2
 67c:	0a c0       	rjmp	.+20     	; 0x692 <__vector_10+0x42>
 67e:	80 91 e2 00 	lds	r24, 0x00E2
 682:	82 ff       	sbrs	r24, 2
 684:	06 c0       	rjmp	.+12     	; 0x692 <__vector_10+0x42>
 686:	80 91 e1 00 	lds	r24, 0x00E1
					  ParserData->TotalReportItems++;
 68a:	8b 7f       	andi	r24, 0xFB	; 251
 68c:	80 93 e1 00 	sts	0x00E1, r24
 690:	b8 d1       	rcall	.+880    	; 0xa02 <USB_Event_Stub>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	80 91 da 00 	lds	r24, 0x00DA
 696:	80 ff       	sbrs	r24, 0
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <__vector_10+0x80>
 69a:	80 91 d8 00 	lds	r24, 0x00D8
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	80 ff       	sbrs	r24, 0
 6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <__vector_10+0x80>
 6a2:	80 91 da 00 	lds	r24, 0x00DA
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	8e 7f       	andi	r24, 0xFE	; 254
 6a8:	80 93 da 00 	sts	0x00DA, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6ac:	80 91 d9 00 	lds	r24, 0x00D9
 6b0:	80 ff       	sbrs	r24, 0
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__vector_10+0x7a>
 6b4:	8c e0       	ldi	r24, 0x0C	; 12
 6b6:	89 bd       	out	0x29, r24	; 41
 6b8:	8e e0       	ldi	r24, 0x0E	; 14
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	89 bd       	out	0x29, r24	; 41
 6bc:	09 b4       	in	r0, 0x29	; 41

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	00 fe       	sbrs	r0, 0
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <__vector_10+0x6c>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	8e bb       	out	0x1e, r24	; 30
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	9d d1       	rcall	.+826    	; 0xa02 <USB_Event_Stub>
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <__vector_10+0x80>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	19 bc       	out	0x29, r1	; 41
 6cc:	1e ba       	out	0x1e, r1	; 30

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	99 d1       	rcall	.+818    	; 0xa02 <USB_Event_Stub>
 6d0:	80 91 e1 00 	lds	r24, 0x00E1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d4:	80 ff       	sbrs	r24, 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	17 c0       	rjmp	.+46     	; 0x706 <__vector_10+0xb6>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	80 91 e2 00 	lds	r24, 0x00E2
 6dc:	80 ff       	sbrs	r24, 0
 6de:	13 c0       	rjmp	.+38     	; 0x706 <__vector_10+0xb6>
 6e0:	80 91 e2 00 	lds	r24, 0x00E2
 6e4:	8e 7f       	andi	r24, 0xFE	; 254
 6e6:	80 93 e2 00 	sts	0x00E2, r24
 6ea:	80 91 e2 00 	lds	r24, 0x00E2
 6ee:	80 61       	ori	r24, 0x10	; 16
 6f0:	80 93 e2 00 	sts	0x00E2, r24
 6f4:	80 91 d8 00 	lds	r24, 0x00D8
 6f8:	80 62       	ori	r24, 0x20	; 32
 6fa:	80 93 d8 00 	sts	0x00D8, r24
 6fe:	19 bc       	out	0x29, r1	; 41
 700:	85 e0       	ldi	r24, 0x05	; 5
 702:	8e bb       	out	0x1e, r24	; 30
 704:	7e d1       	rcall	.+764    	; 0xa02 <USB_Event_Stub>
 706:	80 91 e1 00 	lds	r24, 0x00E1
 70a:	84 ff       	sbrs	r24, 4
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
 70c:	2e c0       	rjmp	.+92     	; 0x76a <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 70e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 712:	84 ff       	sbrs	r24, 4
 714:	2a c0       	rjmp	.+84     	; 0x76a <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 716:	8c e0       	ldi	r24, 0x0C	; 12
 718:	89 bd       	out	0x29, r24	; 41
 71a:	8e e0       	ldi	r24, 0x0E	; 14
 71c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 71e:	09 b4       	in	r0, 0x29	; 41
 720:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 722:	fd cf       	rjmp	.-6      	; 0x71e <__vector_10+0xce>
 724:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 728:	8f 7d       	andi	r24, 0xDF	; 223
 72a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 72e:	80 91 e1 00 	lds	r24, 0x00E1
 732:	8f 7e       	andi	r24, 0xEF	; 239
 734:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 738:	80 91 e2 00 	lds	r24, 0x00E2
 73c:	8f 7e       	andi	r24, 0xEF	; 239
 73e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 742:	80 91 e2 00 	lds	r24, 0x00E2
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 74c:	80 91 00 01 	lds	r24, 0x0100
 750:	88 23       	and	r24, r24
 752:	11 f0       	breq	.+4      	; 0x758 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 754:	84 e0       	ldi	r24, 0x04	; 4
 756:	07 c0       	rjmp	.+14     	; 0x766 <__vector_10+0x116>
 758:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 75c:	87 ff       	sbrs	r24, 7
 75e:	02 c0       	rjmp	.+4      	; 0x764 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 760:	83 e0       	ldi	r24, 0x03	; 3
 762:	01 c0       	rjmp	.+2      	; 0x766 <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	8e bb       	out	0x1e, r24	; 30
 768:	4c d1       	rcall	.+664    	; 0xa02 <USB_Event_Stub>
 76a:	80 91 e1 00 	lds	r24, 0x00E1
 76e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 770:	21 c0       	rjmp	.+66     	; 0x7b4 <__vector_10+0x164>
 772:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 776:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <__vector_10+0x164>
 77a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 77e:	87 7f       	andi	r24, 0xF7	; 247
 780:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	8e bb       	out	0x1e, r24	; 30
 788:	10 92 00 01 	sts	0x0100, r1
 78c:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 790:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 792:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 796:	80 91 e2 00 	lds	r24, 0x00E2
 79a:	8e 7f       	andi	r24, 0xFE	; 254
 79c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7a0:	80 91 e2 00 	lds	r24, 0x00E2
 7a4:	80 61       	ori	r24, 0x10	; 16
 7a6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7aa:	42 e0       	ldi	r20, 0x02	; 2
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	c0 de       	rcall	.-640    	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
 7b2:	27 d1       	rcall	.+590    	; 0xa02 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7b4:	ff 91       	pop	r31
 7b6:	ef 91       	pop	r30
 7b8:	bf 91       	pop	r27
 7ba:	af 91       	pop	r26
 7bc:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7be:	8f 91       	pop	r24
 7c0:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7c2:	6f 91       	pop	r22
 7c4:	5f 91       	pop	r21
 7c6:	4f 91       	pop	r20
 7c8:	3f 91       	pop	r19
 7ca:	2f 91       	pop	r18
 7cc:	0f 90       	pop	r0
 7ce:	0b be       	out	0x3b, r0	; 59
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <USB_Device_ProcessControlRequest>:
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	aa 97       	sbiw	r28, 0x2a	; 42
 7e6:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	e4 e0       	ldi	r30, 0x04	; 4
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 7f4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 7f8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	ec 30       	cpi	r30, 0x0C	; 12
 7fe:	f2 07       	cpc	r31, r18
 800:	c9 f7       	brne	.-14     	; 0x7f4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 802:	b6 dc       	rcall	.-1684   	; 0x170 <EVENT_USB_Device_ControlRequest>
 804:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 808:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 80a:	e3 c0       	rjmp	.+454    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 80c:	90 91 04 01 	lds	r25, 0x0104
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 810:	80 91 05 01 	lds	r24, 0x0105

		switch (USB_ControlRequest.bRequest)
 814:	85 30       	cpi	r24, 0x05	; 5
 816:	09 f4       	brne	.+2      	; 0x81a <USB_Device_ProcessControlRequest+0x40>
 818:	3c c0       	rjmp	.+120    	; 0x892 <USB_Device_ProcessControlRequest+0xb8>
 81a:	30 f4       	brcc	.+12     	; 0x828 <USB_Device_ProcessControlRequest+0x4e>
 81c:	81 30       	cpi	r24, 0x01	; 1
 81e:	29 f1       	breq	.+74     	; 0x86a <USB_Device_ProcessControlRequest+0x90>
 820:	68 f0       	brcs	.+26     	; 0x83c <USB_Device_ProcessControlRequest+0x62>
 822:	83 30       	cpi	r24, 0x03	; 3
 824:	11 f1       	breq	.+68     	; 0x86a <USB_Device_ProcessControlRequest+0x90>
 826:	d5 c0       	rjmp	.+426    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 828:	88 30       	cpi	r24, 0x08	; 8
 82a:	09 f4       	brne	.+2      	; 0x82e <USB_Device_ProcessControlRequest+0x54>
 82c:	a5 c0       	rjmp	.+330    	; 0x978 <USB_Device_ProcessControlRequest+0x19e>
 82e:	89 30       	cpi	r24, 0x09	; 9
 830:	09 f4       	brne	.+2      	; 0x834 <USB_Device_ProcessControlRequest+0x5a>
 832:	b4 c0       	rjmp	.+360    	; 0x99c <USB_Device_ProcessControlRequest+0x1c2>
 834:	86 30       	cpi	r24, 0x06	; 6
 836:	09 f0       	breq	.+2      	; 0x83a <USB_Device_ProcessControlRequest+0x60>
 838:	cc c0       	rjmp	.+408    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 83a:	4c c0       	rjmp	.+152    	; 0x8d4 <USB_Device_ProcessControlRequest+0xfa>
 83c:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 83e:	29 f0       	breq	.+10     	; 0x84a <USB_Device_ProcessControlRequest+0x70>
 840:	92 38       	cpi	r25, 0x82	; 130
 842:	09 f0       	breq	.+2      	; 0x846 <USB_Device_ProcessControlRequest+0x6c>
 844:	c6 c0       	rjmp	.+396    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 846:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 848:	06 c0       	rjmp	.+12     	; 0x856 <USB_Device_ProcessControlRequest+0x7c>
 84a:	80 91 01 01 	lds	r24, 0x0101
 84e:	90 91 02 01 	lds	r25, 0x0102
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 852:	91 11       	cpse	r25, r1
 854:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 856:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 85a:	97 7f       	andi	r25, 0xF7	; 247
 85c:	90 93 e8 00 	sts	0x00E8, r25
 860:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 864:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 868:	92 c0       	rjmp	.+292    	; 0x98e <USB_Device_ProcessControlRequest+0x1b4>
 86a:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 86c:	2d 7f       	andi	r18, 0xFD	; 253
 86e:	09 f0       	breq	.+2      	; 0x872 <USB_Device_ProcessControlRequest+0x98>
 870:	b0 c0       	rjmp	.+352    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 872:	91 11       	cpse	r25, r1
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 874:	ae c0       	rjmp	.+348    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 876:	90 91 06 01 	lds	r25, 0x0106
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 87a:	91 30       	cpi	r25, 0x01	; 1
 87c:	09 f0       	breq	.+2      	; 0x880 <USB_Device_ProcessControlRequest+0xa6>
 87e:	a9 c0       	rjmp	.+338    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 880:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 882:	09 f0       	breq	.+2      	; 0x886 <USB_Device_ProcessControlRequest+0xac>
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	90 93 02 01 	sts	0x0102, r25
 88a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 88e:	87 7f       	andi	r24, 0xF7	; 247
 890:	81 c0       	rjmp	.+258    	; 0x994 <USB_Device_ProcessControlRequest+0x1ba>
 892:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 894:	9e c0       	rjmp	.+316    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 896:	10 91 06 01 	lds	r17, 0x0106
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 89a:	1f 77       	andi	r17, 0x7F	; 127
 89c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8a0:	80 78       	andi	r24, 0x80	; 128
 8a2:	81 2b       	or	r24, r17
 8a4:	80 93 e3 00 	sts	0x00E3, r24
 8a8:	80 91 e8 00 	lds	r24, 0x00E8
 8ac:	87 7f       	andi	r24, 0xF7	; 247
 8ae:	80 93 e8 00 	sts	0x00E8, r24
 8b2:	50 de       	rcall	.-864    	; 0x554 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8b4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8b8:	80 ff       	sbrs	r24, 0
 8ba:	fc cf       	rjmp	.-8      	; 0x8b4 <USB_Device_ProcessControlRequest+0xda>

	while (!(Endpoint_IsINReady()));
 8bc:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 8c0:	80 68       	ori	r24, 0x80	; 128
 8c2:	80 93 e3 00 	sts	0x00E3, r24
 8c6:	11 23       	and	r17, r17
 8c8:	11 f0       	breq	.+4      	; 0x8ce <USB_Device_ProcessControlRequest+0xf4>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8ca:	83 e0       	ldi	r24, 0x03	; 3
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <USB_Device_ProcessControlRequest+0xf6>
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	8e bb       	out	0x1e, r24	; 30
 8d2:	7f c0       	rjmp	.+254    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 8d4:	90 58       	subi	r25, 0x80	; 128
 8d6:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8d8:	08 f0       	brcs	.+2      	; 0x8dc <USB_Device_ProcessControlRequest+0x102>
 8da:	7b c0       	rjmp	.+246    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 8dc:	80 91 06 01 	lds	r24, 0x0106
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8e0:	90 91 07 01 	lds	r25, 0x0107
 8e4:	8c 3d       	cpi	r24, 0xDC	; 220
 8e6:	23 e0       	ldi	r18, 0x03	; 3
 8e8:	92 07       	cpc	r25, r18
 8ea:	71 f5       	brne	.+92     	; 0x948 <USB_Device_ProcessControlRequest+0x16e>
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8f0:	8a e2       	ldi	r24, 0x2A	; 42
 8f2:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 8f4:	4f b7       	in	r20, 0x3f	; 63
 8f6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 8f8:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 8fa:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 900:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 902:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	50 93 57 00 	sts	0x0057, r21
 90a:	e4 91       	lpm	r30, Z
 90c:	20 ff       	sbrs	r18, 0
 90e:	03 c0       	rjmp	.+6      	; 0x916 <USB_Device_ProcessControlRequest+0x13c>

					if (SerialCharNum & 0x01)
 910:	e2 95       	swap	r30
 912:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 914:	3f 5f       	subi	r19, 0xFF	; 255
 916:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 918:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	ea 30       	cpi	r30, 0x0A	; 10
 91e:	10 f0       	brcs	.+4      	; 0x924 <USB_Device_ProcessControlRequest+0x14a>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 920:	c7 96       	adiw	r24, 0x37	; 55
 922:	01 c0       	rjmp	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x14c>
 924:	c0 96       	adiw	r24, 0x30	; 48
 926:	8d 93       	st	X+, r24
 928:	9d 93       	st	X+, r25
 92a:	2f 5f       	subi	r18, 0xFF	; 255
 92c:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 92e:	49 f7       	brne	.-46     	; 0x902 <USB_Device_ProcessControlRequest+0x128>
 930:	4f bf       	out	0x3f, r20	; 63
 932:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 936:	87 7f       	andi	r24, 0xF7	; 247
 938:	80 93 e8 00 	sts	0x00E8, r24
 93c:	6a e2       	ldi	r22, 0x2A	; 42
 93e:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 940:	ce 01       	movw	r24, r28
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	01 dd       	rcall	.-1534   	; 0x348 <Endpoint_Write_Control_Stream_LE>
 946:	12 c0       	rjmp	.+36     	; 0x96c <USB_Device_ProcessControlRequest+0x192>
 948:	ae 01       	movw	r20, r28
 94a:	4f 5f       	subi	r20, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 94e:	60 91 08 01 	lds	r22, 0x0108
 952:	c2 dc       	rcall	.-1660   	; 0x2d8 <CALLBACK_USB_GetDescriptor>
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	09 f4       	brne	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x180>
 958:	3c c0       	rjmp	.+120    	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 95a:	20 91 e8 00 	lds	r18, 0x00E8
 95e:	27 7f       	andi	r18, 0xF7	; 247
 960:	20 93 e8 00 	sts	0x00E8, r18
 964:	bc 01       	movw	r22, r24
 966:	89 81       	ldd	r24, Y+1	; 0x01
 968:	9a 81       	ldd	r25, Y+2	; 0x02
 96a:	85 dd       	rcall	.-1270   	; 0x476 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 96c:	80 91 e8 00 	lds	r24, 0x00E8
 970:	8b 7f       	andi	r24, 0xFB	; 251
 972:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 976:	2d c0       	rjmp	.+90     	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 978:	90 38       	cpi	r25, 0x80	; 128
 97a:	59 f5       	brne	.+86     	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 97c:	80 91 e8 00 	lds	r24, 0x00E8
 980:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 982:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 986:	80 91 00 01 	lds	r24, 0x0100
 98a:	80 93 f1 00 	sts	0x00F1, r24
 98e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 992:	8e 7f       	andi	r24, 0xFE	; 254
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 994:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 998:	dd dd       	rcall	.-1094   	; 0x554 <Endpoint_ClearStatusStage>
 99a:	1b c0       	rjmp	.+54     	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 99c:	91 11       	cpse	r25, r1
 99e:	19 c0       	rjmp	.+50     	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
 9a0:	90 91 06 01 	lds	r25, 0x0106
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 9a4:	92 30       	cpi	r25, 0x02	; 2
 9a6:	a8 f4       	brcc	.+42     	; 0x9d2 <USB_Device_ProcessControlRequest+0x1f8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9a8:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9ac:	87 7f       	andi	r24, 0xF7	; 247
 9ae:	80 93 e8 00 	sts	0x00E8, r24
 9b2:	90 93 00 01 	sts	0x0100, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b6:	ce dd       	rcall	.-1124   	; 0x554 <Endpoint_ClearStatusStage>
 9b8:	80 91 00 01 	lds	r24, 0x0100
 9bc:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9be:	04 c0       	rjmp	.+8      	; 0x9c8 <USB_Device_ProcessControlRequest+0x1ee>
 9c0:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 9c4:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <USB_Device_ProcessControlRequest+0x1f2>
 9c8:	84 e0       	ldi	r24, 0x04	; 4
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <USB_Device_ProcessControlRequest+0x1f4>
 9cc:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9ce:	8e bb       	out	0x1e, r24	; 30
 9d0:	18 d0       	rcall	.+48     	; 0xa02 <USB_Event_Stub>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
 9d6:	83 ff       	sbrs	r24, 3
 9d8:	0a c0       	rjmp	.+20     	; 0x9ee <USB_Device_ProcessControlRequest+0x214>
 9da:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 9de:	87 7f       	andi	r24, 0xF7	; 247
 9e0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9e4:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9e8:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ea:	80 93 eb 00 	sts	0x00EB, r24
 9ee:	aa 96       	adiw	r28, 0x2a	; 42
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 9fe:	1f 91       	pop	r17
 a00:	08 95       	ret

00000a02 <USB_Event_Stub>:
 a02:	08 95       	ret

00000a04 <USB_USBTask>:
 a04:	8e b3       	in	r24, 0x1e	; 30
 a06:	88 23       	and	r24, r24
 a08:	21 f0       	breq	.+8      	; 0xa12 <USB_USBTask+0xe>
 a0a:	80 91 e8 00 	lds	r24, 0x00E8
 a0e:	83 fd       	sbrc	r24, 3
 a10:	e4 ce       	rjmp	.-568    	; 0x7da <USB_Device_ProcessControlRequest>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>

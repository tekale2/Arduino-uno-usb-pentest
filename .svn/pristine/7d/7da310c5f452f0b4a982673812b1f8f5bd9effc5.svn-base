
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001000  00001094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800112  00800112  000010a6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a9c7  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bd1  00000000  00000000  0000cce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004033  00000000  00000000  0000f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f54  00000000  00000000  000138ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004221  00000000  00000000  00014840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006831  00000000  00000000  00018a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001f292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c4       	rjmp	.+2082   	; 0x84c <__vector_10>
      2a:	00 00       	nop
      2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	ca c0       	rjmp	.+404    	; 0x1ea <__vector_21>
      56:	00 00       	nop
      58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000c2 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000dc <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e0:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f0:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     100:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     110:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
     120:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     130:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     140:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000150 <DeviceDescriptor>:
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	12 01 00 02 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
     160:	00 01                                               ..

00000162 <__ctors_end>:
				ReportSize     -= 2;
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
				ReportData     += 2;
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e2       	ldi	r29, 0x20	; 32
     16a:	de bf       	out	0x3e, r29	; 62
				break;
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e0 e0       	ldi	r30, 0x00	; 0
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	00 e0       	ldi	r16, 0x00	; 0
				ReportSize     -= 1;
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
				ReportData     += 1;
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a2 31       	cpi	r26, 0x12	; 18
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	a2 e1       	ldi	r26, 0x12	; 18
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	af 31       	cpi	r26, 0x1F	; 31
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	22 d0       	rcall	.+68     	; 0x1de <main>
     19a:	30 c7       	rjmp	.+3680   	; 0xffc <_exit>

0000019c <__bad_interrupt>:
     19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <LEDs_SetAllLEDs>:
     19e:	9b b1       	in	r25, 0x0b	; 11
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	98 2b       	or	r25, r24
     1a4:	9b b9       	out	0x0b, r25	; 11
     1a6:	08 95       	ret

000001a8 <SetupHardware>:
     1a8:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	87 7f       	andi	r24, 0xF7	; 247
     1ac:	84 bf       	out	0x34, r24	; 52
     1ae:	88 e1       	ldi	r24, 0x18	; 24
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
				break;
     1b4:	80 93 60 00 	sts	0x0060, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	10 92 60 00 	sts	0x0060, r1
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	80 e8       	ldi	r24, 0x80	; 128
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	80 93 61 00 	sts	0x0061, r24
     1ca:	90 93 61 00 	sts	0x0061, r25
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	8a b1       	in	r24, 0x0a	; 10
     1d2:	80 6f       	ori	r24, 0xF0	; 240
     1d4:	8a b9       	out	0x0a, r24	; 10
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	8b b1       	in	r24, 0x0b	; 11
     1d8:	8f 70       	andi	r24, 0x0F	; 15
     1da:	8b b9       	out	0x0b, r24	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	1c c3       	rjmp	.+1592   	; 0x816 <USB_Init>

000001de <main>:
     1de:	e4 df       	rcall	.-56     	; 0x1a8 <SetupHardware>
     1e0:	80 e1       	ldi	r24, 0x10	; 16
     1e2:	dd df       	rcall	.-70     	; 0x19e <LEDs_SetAllLEDs>
     1e4:	78 94       	sei
     1e6:	4e d5       	rcall	.+2716   	; 0xc84 <USB_USBTask>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x8>

000001ea <__vector_21>:
     1ea:	1f 92       	push	r1
				break;
     1ec:	0f 92       	push	r0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	0b b6       	in	r0, 0x3b	; 59
     1f6:	0f 92       	push	r0
     1f8:	2f 93       	push	r18
     1fa:	3f 93       	push	r19
     1fc:	4f 93       	push	r20
     1fe:	5f 93       	push	r21
     200:	6f 93       	push	r22
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	7f 93       	push	r23
     204:	8f 93       	push	r24
				break;
     206:	9f 93       	push	r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	af 93       	push	r26
     20a:	bf 93       	push	r27
     20c:	cf 93       	push	r28
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
     212:	80 91 e9 00 	lds	r24, 0x00E9
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	90 91 ec 00 	lds	r25, 0x00EC
     21c:	90 ff       	sbrs	r25, 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_21+0x3a>
     220:	90 e8       	ldi	r25, 0x80	; 128
     222:	01 c0       	rjmp	.+2      	; 0x226 <__vector_21+0x3c>
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	c9 2f       	mov	r28, r25
     228:	c8 2b       	or	r28, r24
     22a:	80 91 16 01 	lds	r24, 0x0116
     22e:	84 30       	cpi	r24, 0x04	; 4
     230:	09 f0       	breq	.+2      	; 0x234 <__vector_21+0x4a>
     232:	53 c0       	rjmp	.+166    	; 0x2da <__vector_21+0xf0>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	80 91 10 01 	lds	r24, 0x0110
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <__vector_21+0x54>
     23c:	4e c0       	rjmp	.+156    	; 0x2da <__vector_21+0xf0>
     23e:	80 91 0b 01 	lds	r24, 0x010B
     242:	8f 70       	andi	r24, 0x0F	; 15
     244:	80 93 e9 00 	sts	0x00E9, r24
     248:	80 91 e8 00 	lds	r24, 0x00E8
     24c:	82 ff       	sbrs	r24, 2
     24e:	45 c0       	rjmp	.+138    	; 0x2da <__vector_21+0xf0>
     250:	80 91 f1 00 	lds	r24, 0x00F1
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	40 91 f1 00 	lds	r20, 0x00F1
     258:	80 91 f2 00 	lds	r24, 0x00F2
     25c:	90 91 f3 00 	lds	r25, 0x00F3
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     260:	89 2b       	or	r24, r25
     262:	29 f4       	brne	.+10     	; 0x26e <__vector_21+0x84>
     264:	80 91 e8 00 	lds	r24, 0x00E8
     268:	8b 77       	andi	r24, 0x7B	; 123
     26a:	80 93 e8 00 	sts	0x00E8, r24
     26e:	80 91 f1 00 	lds	r24, 0x00F1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     272:	20 91 f1 00 	lds	r18, 0x00F1

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     276:	80 91 f2 00 	lds	r24, 0x00F2
     27a:	90 91 f3 00 	lds	r25, 0x00F3
     27e:	89 2b       	or	r24, r25
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	29 f4       	brne	.+10     	; 0x28c <__vector_21+0xa2>
     282:	80 91 e8 00 	lds	r24, 0x00E8

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	8b 77       	andi	r24, 0x7B	; 123
     288:	80 93 e8 00 	sts	0x00E8, r24
     28c:	55 27       	eor	r21, r21
     28e:	47 fd       	sbrc	r20, 7
				break;
     290:	50 95       	com	r21

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	33 27       	eor	r19, r19
     294:	27 fd       	sbrc	r18, 7
     296:	30 95       	com	r19
     298:	ca 01       	movw	r24, r20
     29a:	82 0f       	add	r24, r18
     29c:	93 1f       	adc	r25, r19
     29e:	95 95       	asr	r25
				break;
     2a0:	87 95       	ror	r24

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	40 58       	subi	r20, 0x80	; 128
     2a4:	50 93 99 00 	sts	0x0099, r21
     2a8:	40 93 98 00 	sts	0x0098, r20
				break;
     2ac:	20 58       	subi	r18, 0x80	; 128

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	30 93 9b 00 	sts	0x009B, r19
     2b2:	20 93 9a 00 	sts	0x009A, r18
     2b6:	81 31       	cpi	r24, 0x11	; 17
     2b8:	44 f4       	brge	.+16     	; 0x2ca <__vector_21+0xe0>
     2ba:	89 30       	cpi	r24, 0x09	; 9
				break;
     2bc:	44 f4       	brge	.+16     	; 0x2ce <__vector_21+0xe4>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	85 30       	cpi	r24, 0x05	; 5
     2c0:	44 f4       	brge	.+16     	; 0x2d2 <__vector_21+0xe8>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	44 f4       	brge	.+16     	; 0x2d6 <__vector_21+0xec>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <__vector_21+0xee>
     2ca:	80 ef       	ldi	r24, 0xF0	; 240
				break;
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <__vector_21+0xee>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	80 eb       	ldi	r24, 0xB0	; 176
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <__vector_21+0xee>
     2d2:	80 e3       	ldi	r24, 0x30	; 48
				break;
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__vector_21+0xee>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 e1       	ldi	r24, 0x10	; 16
     2d8:	62 df       	rcall	.-316    	; 0x19e <LEDs_SetAllLEDs>
     2da:	cf 70       	andi	r28, 0x0F	; 15

				if (ParserData->UsingReportIDs)
     2dc:	c0 93 e9 00 	sts	0x00E9, r28
     2e0:	ff 91       	pop	r31
     2e2:	ef 91       	pop	r30
     2e4:	cf 91       	pop	r28
     2e6:	bf 91       	pop	r27
     2e8:	af 91       	pop	r26
     2ea:	9f 91       	pop	r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	8f 91       	pop	r24
     2ee:	7f 91       	pop	r23
     2f0:	6f 91       	pop	r22
     2f2:	5f 91       	pop	r21
     2f4:	4f 91       	pop	r20
     2f6:	3f 91       	pop	r19
     2f8:	2f 91       	pop	r18
     2fa:	0f 90       	pop	r0
     2fc:	0b be       	out	0x3b, r0	; 59
     2fe:	0f 90       	pop	r0
     300:	0f be       	out	0x3f, r0	; 63
     302:	0f 90       	pop	r0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	1f 90       	pop	r1
     306:	18 95       	reti

00000308 <EVENT_USB_Device_Connect>:
     308:	cf 93       	push	r28
     30a:	80 ea       	ldi	r24, 0xA0	; 160
     30c:	48 df       	rcall	.-368    	; 0x19e <LEDs_SetAllLEDs>
     30e:	c2 e0       	ldi	r28, 0x02	; 2
     310:	c0 93 6e 00 	sts	0x006E, r28
     314:	20 91 00 01 	lds	r18, 0x0100
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	30 91 01 01 	lds	r19, 0x0101
     31c:	40 91 02 01 	lds	r20, 0x0102
     320:	50 91 03 01 	lds	r21, 0x0103
     324:	60 e4       	ldi	r22, 0x40	; 64
     326:	72 e4       	ldi	r23, 0x42	; 66
     328:	8f e0       	ldi	r24, 0x0F	; 15
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	45 d6       	rcall	.+3210   	; 0xfb8 <__udivmodsi4>
     32e:	21 50       	subi	r18, 0x01	; 1
     330:	27 bd       	out	0x27, r18	; 39
     332:	c4 bd       	out	0x24, r28	; 36
     334:	c5 bd       	out	0x25, r28	; 37
     336:	87 b1       	in	r24, 0x07	; 7
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	80 66       	ori	r24, 0x60	; 96
     33a:	87 b9       	out	0x07, r24	; 7
     33c:	81 ef       	ldi	r24, 0xF1	; 241
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	80 93 90 00 	sts	0x0090, r24
     342:	89 e0       	ldi	r24, 0x09	; 9
     344:	80 93 91 00 	sts	0x0091, r24
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <EVENT_USB_Device_Disconnect>:
     34c:	80 e1       	ldi	r24, 0x10	; 16
     34e:	27 df       	rcall	.-434    	; 0x19e <LEDs_SetAllLEDs>
     350:	15 bc       	out	0x25, r1	; 37
     352:	10 92 91 00 	sts	0x0091, r1
     356:	87 b1       	in	r24, 0x07	; 7
     358:	8f 79       	andi	r24, 0x9F	; 159
     35a:	87 b9       	out	0x07, r24	; 7
     35c:	08 95       	ret

0000035e <EVENT_USB_Device_ConfigurationChanged>:
     35e:	84 e0       	ldi	r24, 0x04	; 4
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	ac d4       	rcall	.+2392   	; 0xcbc <Audio_Device_ConfigureEndpoints>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	88 23       	and	r24, r24
     366:	11 f0       	breq	.+4      	; 0x36c <EVENT_USB_Device_ConfigurationChanged+0xe>
     368:	80 e6       	ldi	r24, 0x60	; 96
     36a:	01 c0       	rjmp	.+2      	; 0x36e <EVENT_USB_Device_ConfigurationChanged+0x10>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	80 e9       	ldi	r24, 0x90	; 144
     36e:	17 cf       	rjmp	.-466    	; 0x19e <LEDs_SetAllLEDs>

00000370 <EVENT_USB_Device_ControlRequest>:
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	bb c4       	rjmp	.+2422   	; 0xcec <Audio_Device_ProcessControlRequest>

00000376 <CALLBACK_Audio_Device_GetSetEndpointProperty>:
     376:	ef 92       	push	r14

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	f7 01       	movw	r30, r14
     380:	80 91 0b 01 	lds	r24, 0x010B
     384:	48 13       	cpse	r20, r24
     386:	38 c0       	rjmp	.+112    	; 0x3f8 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
				break;
     388:	21 30       	cpi	r18, 0x01	; 1

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	b1 f5       	brne	.+108    	; 0x3f8 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
     38c:	61 30       	cpi	r22, 0x01	; 1
     38e:	19 f0       	breq	.+6      	; 0x396 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x20>
     390:	61 38       	cpi	r22, 0x81	; 129
     392:	01 f1       	breq	.+64     	; 0x3d4 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x5e>
     394:	31 c0       	rjmp	.+98     	; 0x3f8 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	01 2b       	or	r16, r17
     398:	89 f1       	breq	.+98     	; 0x3fc <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
     39a:	82 81       	ldd	r24, Z+2	; 0x02
     39c:	21 81       	ldd	r18, Z+1	; 0x01
     39e:	42 2f       	mov	r20, r18
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	22 27       	eor	r18, r18
     3a8:	34 2f       	mov	r19, r20
     3aa:	45 2f       	mov	r20, r21
     3ac:	56 2f       	mov	r21, r22
     3ae:	48 2b       	or	r20, r24
				break;
     3b0:	80 81       	ld	r24, Z
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	28 2b       	or	r18, r24
     3b4:	20 93 00 01 	sts	0x0100, r18
     3b8:	30 93 01 01 	sts	0x0101, r19
     3bc:	40 93 02 01 	sts	0x0102, r20
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	50 93 03 01 	sts	0x0103, r21
     3c4:	60 e4       	ldi	r22, 0x40	; 64
     3c6:	72 e4       	ldi	r23, 0x42	; 66
     3c8:	8f e0       	ldi	r24, 0x0F	; 15
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	f5 d5       	rcall	.+3050   	; 0xfb8 <__udivmodsi4>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	27 bd       	out	0x27, r18	; 39
     3d2:	14 c0       	rjmp	.+40     	; 0x3fc <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	01 15       	cp	r16, r1
     3d6:	11 05       	cpc	r17, r1
     3d8:	89 f0       	breq	.+34     	; 0x3fc <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
     3da:	83 e0       	ldi	r24, 0x03	; 3
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	d8 01       	movw	r26, r16
     3e0:	8d 93       	st	X+, r24
     3e2:	9c 93       	st	X, r25
     3e4:	80 91 00 01 	lds	r24, 0x0100
     3e8:	90 91 01 01 	lds	r25, 0x0101
     3ec:	20 91 02 01 	lds	r18, 0x0102
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	22 83       	std	Z+2, r18	; 0x02
     3f2:	91 83       	std	Z+1, r25	; 0x01
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	80 83       	st	Z, r24
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <CALLBACK_Audio_Device_GetSetEndpointProperty+0x88>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	08 95       	ret

00000408 <CALLBACK_Audio_Device_GetSetInterfaceProperty>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret

0000040c <CALLBACK_USB_GetDescriptor>:
     40c:	29 2f       	mov	r18, r25
     40e:	33 27       	eor	r19, r19
     410:	22 30       	cpi	r18, 0x02	; 2
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	31 05       	cpc	r19, r1
     414:	59 f0       	breq	.+22     	; 0x42c <CALLBACK_USB_GetDescriptor+0x20>
     416:	23 30       	cpi	r18, 0x03	; 3
     418:	31 05       	cpc	r19, r1
     41a:	69 f0       	breq	.+26     	; 0x436 <CALLBACK_USB_GetDescriptor+0x2a>
     41c:	21 30       	cpi	r18, 0x01	; 1
     41e:	31 05       	cpc	r19, r1

				if (UsageListSize)
     420:	f9 f4       	brne	.+62     	; 0x460 <CALLBACK_USB_GetDescriptor+0x54>
     422:	82 e1       	ldi	r24, 0x12	; 18
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	20 e5       	ldi	r18, 0x50	; 80
     428:	31 e0       	ldi	r19, 0x01	; 1
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	1e c0       	rjmp	.+60     	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
     42c:	80 e7       	ldi	r24, 0x70	; 112
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	20 ee       	ldi	r18, 0xE0	; 224
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	19 c0       	rjmp	.+50     	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
     436:	99 27       	eor	r25, r25
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	91 05       	cpc	r25, r1
     43c:	41 f0       	breq	.+16     	; 0x44e <CALLBACK_USB_GetDescriptor+0x42>
     43e:	82 30       	cpi	r24, 0x02	; 2

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	91 05       	cpc	r25, r1
     442:	41 f0       	breq	.+16     	; 0x454 <CALLBACK_USB_GetDescriptor+0x48>
     444:	89 2b       	or	r24, r25
     446:	61 f4       	brne	.+24     	; 0x460 <CALLBACK_USB_GetDescriptor+0x54>
     448:	ec ed       	ldi	r30, 0xDC	; 220
     44a:	f0 e0       	ldi	r31, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	05 c0       	rjmp	.+10     	; 0x458 <CALLBACK_USB_GetDescriptor+0x4c>
     44e:	e2 ec       	ldi	r30, 0xC2	; 194
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	02 c0       	rjmp	.+4      	; 0x458 <CALLBACK_USB_GetDescriptor+0x4c>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	e8 e9       	ldi	r30, 0x98	; 152
     456:	f0 e0       	ldi	r31, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	84 91       	lpm	r24, Z
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9f 01       	movw	r18, r30
     45e:	04 c0       	rjmp	.+8      	; 0x468 <CALLBACK_USB_GetDescriptor+0x5c>
     460:	80 e0       	ldi	r24, 0x00	; 0
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	fa 01       	movw	r30, r20
     46a:	31 83       	std	Z+1, r19	; 0x01
     46c:	20 83       	st	Z, r18
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	08 95       	ret

00000470 <Endpoint_Write_Control_Stream_LE>:
     470:	20 91 1d 01 	lds	r18, 0x011D
     474:	30 91 1e 01 	lds	r19, 0x011E
     478:	26 17       	cp	r18, r22
     47a:	37 07       	cpc	r19, r23
     47c:	48 f0       	brcs	.+18     	; 0x490 <Endpoint_Write_Control_Stream_LE+0x20>
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	39 f4       	brne	.+14     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x22>
     484:	20 91 e8 00 	lds	r18, 0x00E8
     488:	2e 77       	andi	r18, 0x7E	; 126
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	20 93 e8 00 	sts	0x00E8, r18
     48e:	01 c0       	rjmp	.+2      	; 0x492 <Endpoint_Write_Control_Stream_LE+0x22>
     490:	b9 01       	movw	r22, r18
     492:	fc 01       	movw	r30, r24
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	61 15       	cp	r22, r1
     498:	71 05       	cpc	r23, r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	99 f1       	breq	.+102    	; 0x502 <Endpoint_Write_Control_Stream_LE+0x92>
     49c:	80 91 16 01 	lds	r24, 0x0116
     4a0:	88 23       	and	r24, r24
     4a2:	e9 f1       	breq	.+122    	; 0x51e <Endpoint_Write_Control_Stream_LE+0xae>
     4a4:	85 30       	cpi	r24, 0x05	; 5
     4a6:	e9 f1       	breq	.+122    	; 0x522 <Endpoint_Write_Control_Stream_LE+0xb2>
     4a8:	80 91 e8 00 	lds	r24, 0x00E8
				break;
     4ac:	83 fd       	sbrc	r24, 3
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	3b c0       	rjmp	.+118    	; 0x526 <Endpoint_Write_Control_Stream_LE+0xb6>
     4b0:	80 91 e8 00 	lds	r24, 0x00E8
     4b4:	82 ff       	sbrs	r24, 2
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x54>
     4b8:	80 91 e8 00 	lds	r24, 0x00E8
     4bc:	82 ff       	sbrs	r24, 2
     4be:	24 c0       	rjmp	.+72     	; 0x508 <Endpoint_Write_Control_Stream_LE+0x98>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	80 91 e8 00 	lds	r24, 0x00E8
     4c8:	80 ff       	sbrs	r24, 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	e5 cf       	rjmp	.-54     	; 0x496 <Endpoint_Write_Control_Stream_LE+0x26>
     4cc:	80 91 f2 00 	lds	r24, 0x00F2
     4d0:	90 91 f3 00 	lds	r25, 0x00F3
     4d4:	61 15       	cp	r22, r1
     4d6:	71 05       	cpc	r23, r1
     4d8:	51 f0       	breq	.+20     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x7e>
     4da:	88 30       	cpi	r24, 0x08	; 8
     4dc:	91 05       	cpc	r25, r1
     4de:	38 f4       	brcc	.+14     	; 0x4ee <Endpoint_Write_Control_Stream_LE+0x7e>
     4e0:	21 91       	ld	r18, Z+
     4e2:	20 93 f1 00 	sts	0x00F1, r18
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e6:	61 50       	subi	r22, 0x01	; 1
     4e8:	71 09       	sbc	r23, r1
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	f3 cf       	rjmp	.-26     	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0x64>
     4ee:	21 e0       	ldi	r18, 0x01	; 1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	08 97       	sbiw	r24, 0x08	; 8
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x86>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	80 91 e8 00 	lds	r24, 0x00E8
     4fa:	8e 77       	andi	r24, 0x7E	; 126
     4fc:	80 93 e8 00 	sts	0x00E8, r24
     500:	ca cf       	rjmp	.-108    	; 0x496 <Endpoint_Write_Control_Stream_LE+0x26>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	21 11       	cpse	r18, r1
     504:	cb cf       	rjmp	.-106    	; 0x49c <Endpoint_Write_Control_Stream_LE+0x2c>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	d8 cf       	rjmp	.-80     	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x48>
     508:	80 91 16 01 	lds	r24, 0x0116
     50c:	88 23       	and	r24, r24
     50e:	39 f0       	breq	.+14     	; 0x51e <Endpoint_Write_Control_Stream_LE+0xae>
     510:	85 30       	cpi	r24, 0x05	; 5
     512:	39 f0       	breq	.+14     	; 0x522 <Endpoint_Write_Control_Stream_LE+0xb2>
     514:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	83 ff       	sbrs	r24, 3
     51a:	ce cf       	rjmp	.-100    	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x48>
     51c:	04 c0       	rjmp	.+8      	; 0x526 <Endpoint_Write_Control_Stream_LE+0xb6>

					if (UsageListSize)
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	08 95       	ret
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	08 95       	ret
     526:	81 e0       	ldi	r24, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	08 95       	ret

0000052a <Endpoint_Read_Control_Stream_LE>:
     52a:	61 15       	cp	r22, r1
     52c:	71 05       	cpc	r23, r1
     52e:	29 f4       	brne	.+10     	; 0x53a <Endpoint_Read_Control_Stream_LE+0x10>
     530:	20 91 e8 00 	lds	r18, 0x00E8
     534:	2b 77       	andi	r18, 0x7B	; 123
     536:	20 93 e8 00 	sts	0x00E8, r18
     53a:	61 15       	cp	r22, r1
     53c:	71 05       	cpc	r23, r1

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	31 f1       	breq	.+76     	; 0x58c <Endpoint_Read_Control_Stream_LE+0x62>
     540:	20 91 16 01 	lds	r18, 0x0116
     544:	22 23       	and	r18, r18
     546:	59 f1       	breq	.+86     	; 0x59e <Endpoint_Read_Control_Stream_LE+0x74>
     548:	25 30       	cpi	r18, 0x05	; 5
						  UsageList[i - 1] = UsageList[i];
     54a:	59 f1       	breq	.+86     	; 0x5a2 <Endpoint_Read_Control_Stream_LE+0x78>
     54c:	20 91 e8 00 	lds	r18, 0x00E8
     550:	23 fd       	sbrc	r18, 3

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	21 c0       	rjmp	.+66     	; 0x596 <Endpoint_Read_Control_Stream_LE+0x6c>
     554:	20 91 e8 00 	lds	r18, 0x00E8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     558:	22 ff       	sbrs	r18, 2
     55a:	f2 cf       	rjmp	.-28     	; 0x540 <Endpoint_Read_Control_Stream_LE+0x16>
     55c:	fc 01       	movw	r30, r24
     55e:	cf 01       	movw	r24, r30
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	20 91 f2 00 	lds	r18, 0x00F2
     564:	30 91 f3 00 	lds	r19, 0x00F3
     568:	23 2b       	or	r18, r19
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	11 f3       	breq	.-60     	; 0x530 <Endpoint_Read_Control_Stream_LE+0x6>
     56c:	80 91 f1 00 	lds	r24, 0x00F1
     570:	81 93       	st	Z+, r24
     572:	cf 01       	movw	r24, r30
     574:	61 50       	subi	r22, 0x01	; 1
     576:	71 09       	sbc	r23, r1
     578:	61 15       	cp	r22, r1
     57a:	71 05       	cpc	r23, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	81 f7       	brne	.-32     	; 0x55e <Endpoint_Read_Control_Stream_LE+0x34>
     57e:	d8 cf       	rjmp	.-80     	; 0x530 <Endpoint_Read_Control_Stream_LE+0x6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	80 91 16 01 	lds	r24, 0x0116
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	88 23       	and	r24, r24
     586:	59 f0       	breq	.+22     	; 0x59e <Endpoint_Read_Control_Stream_LE+0x74>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	59 f0       	breq	.+22     	; 0x5a2 <Endpoint_Read_Control_Stream_LE+0x78>
     58c:	80 91 e8 00 	lds	r24, 0x00E8
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     590:	80 ff       	sbrs	r24, 0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	f6 cf       	rjmp	.-20     	; 0x580 <Endpoint_Read_Control_Stream_LE+0x56>
     594:	02 c0       	rjmp	.+4      	; 0x59a <Endpoint_Read_Control_Stream_LE+0x70>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	08 95       	ret
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	08 95       	ret
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	08 95       	ret

000005a6 <Endpoint_Write_Control_PStream_LE>:
     5a6:	20 91 1d 01 	lds	r18, 0x011D
     5aa:	30 91 1e 01 	lds	r19, 0x011E

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	26 17       	cp	r18, r22
     5b0:	37 07       	cpc	r19, r23
     5b2:	48 f0       	brcs	.+18     	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x20>
     5b4:	61 15       	cp	r22, r1
     5b6:	71 05       	cpc	r23, r1
     5b8:	39 f4       	brne	.+14     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x22>
     5ba:	20 91 e8 00 	lds	r18, 0x00E8

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	2e 77       	andi	r18, 0x7E	; 126
     5c0:	20 93 e8 00 	sts	0x00E8, r18
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x22>
     5c6:	b9 01       	movw	r22, r18
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	61 15       	cp	r22, r1
     5ce:	71 05       	cpc	r23, r1
     5d0:	b1 f1       	breq	.+108    	; 0x63e <Endpoint_Write_Control_PStream_LE+0x98>
     5d2:	80 91 16 01 	lds	r24, 0x0116
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x36>
     5da:	3f c0       	rjmp	.+126    	; 0x65a <Endpoint_Write_Control_PStream_LE+0xb4>
     5dc:	85 30       	cpi	r24, 0x05	; 5
     5de:	09 f4       	brne	.+2      	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x3c>
     5e0:	3e c0       	rjmp	.+124    	; 0x65e <Endpoint_Write_Control_PStream_LE+0xb8>
     5e2:	80 91 e8 00 	lds	r24, 0x00E8
     5e6:	83 fd       	sbrc	r24, 3
     5e8:	3c c0       	rjmp	.+120    	; 0x662 <Endpoint_Write_Control_PStream_LE+0xbc>
     5ea:	80 91 e8 00 	lds	r24, 0x00E8
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	06 c0       	rjmp	.+12     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0x58>
     5f2:	80 91 e8 00 	lds	r24, 0x00E8

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f6:	82 ff       	sbrs	r24, 2
     5f8:	25 c0       	rjmp	.+74     	; 0x644 <Endpoint_Write_Control_PStream_LE+0x9e>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret
					  return HID_PARSE_InsufficientReportItems;
     5fe:	80 91 e8 00 	lds	r24, 0x00E8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	80 ff       	sbrs	r24, 0
     604:	e3 cf       	rjmp	.-58     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x26>
     606:	80 91 f2 00 	lds	r24, 0x00F2
     60a:	90 91 f3 00 	lds	r25, 0x00F3
     60e:	61 15       	cp	r22, r1
     610:	71 05       	cpc	r23, r1
     612:	59 f0       	breq	.+22     	; 0x62a <Endpoint_Write_Control_PStream_LE+0x84>
     614:	88 30       	cpi	r24, 0x08	; 8
     616:	91 05       	cpc	r25, r1
     618:	40 f4       	brcc	.+16     	; 0x62a <Endpoint_Write_Control_PStream_LE+0x84>
     61a:	24 91       	lpm	r18, Z
     61c:	20 93 f1 00 	sts	0x00F1, r18
     620:	31 96       	adiw	r30, 0x01	; 1
     622:	61 50       	subi	r22, 0x01	; 1
     624:	71 09       	sbc	r23, r1
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	f2 cf       	rjmp	.-28     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x68>
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	08 97       	sbiw	r24, 0x08	; 8
     62e:	09 f0       	breq	.+2      	; 0x632 <Endpoint_Write_Control_PStream_LE+0x8c>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	80 91 e8 00 	lds	r24, 0x00E8
     636:	8e 77       	andi	r24, 0x7E	; 126
     638:	80 93 e8 00 	sts	0x00E8, r24
     63c:	c7 cf       	rjmp	.-114    	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x26>
     63e:	21 11       	cpse	r18, r1
     640:	c8 cf       	rjmp	.-112    	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x2c>
     642:	d7 cf       	rjmp	.-82     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x4c>
     644:	80 91 16 01 	lds	r24, 0x0116
     648:	88 23       	and	r24, r24
     64a:	39 f0       	breq	.+14     	; 0x65a <Endpoint_Write_Control_PStream_LE+0xb4>
     64c:	85 30       	cpi	r24, 0x05	; 5
     64e:	39 f0       	breq	.+14     	; 0x65e <Endpoint_Write_Control_PStream_LE+0xb8>
     650:	80 91 e8 00 	lds	r24, 0x00E8
     654:	83 ff       	sbrs	r24, 3
     656:	cd cf       	rjmp	.-102    	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x4c>
     658:	04 c0       	rjmp	.+8      	; 0x662 <Endpoint_Write_Control_PStream_LE+0xbc>
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	08 95       	ret
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	08 95       	ret
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	08 95       	ret

00000666 <Endpoint_ConfigureEndpoint_Prv>:
     666:	98 2f       	mov	r25, r24
     668:	97 30       	cpi	r25, 0x07	; 7
     66a:	58 f5       	brcc	.+86     	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     66c:	90 93 e9 00 	sts	0x00E9, r25
     670:	98 17       	cp	r25, r24
     672:	39 f0       	breq	.+14     	; 0x682 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     674:	70 91 ec 00 	lds	r23, 0x00EC
     678:	20 91 ed 00 	lds	r18, 0x00ED
     67c:	50 91 f0 00 	lds	r21, 0x00F0
     680:	03 c0       	rjmp	.+6      	; 0x688 <Endpoint_ConfigureEndpoint_Prv+0x22>
     682:	24 2f       	mov	r18, r20
     684:	76 2f       	mov	r23, r22
     686:	50 e0       	ldi	r21, 0x00	; 0
					  ParserData->TotalReportItems++;
     688:	21 ff       	sbrs	r18, 1
     68a:	19 c0       	rjmp	.+50     	; 0x6be <Endpoint_ConfigureEndpoint_Prv+0x58>
     68c:	30 91 eb 00 	lds	r19, 0x00EB
     690:	3e 7f       	andi	r19, 0xFE	; 254

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	30 93 eb 00 	sts	0x00EB, r19
     696:	30 91 ed 00 	lds	r19, 0x00ED
     69a:	3d 7f       	andi	r19, 0xFD	; 253
     69c:	30 93 ed 00 	sts	0x00ED, r19
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	30 91 eb 00 	lds	r19, 0x00EB
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	31 60       	ori	r19, 0x01	; 1
     6a6:	30 93 eb 00 	sts	0x00EB, r19
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	70 93 ec 00 	sts	0x00EC, r23
     6ae:	20 93 ed 00 	sts	0x00ED, r18
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	50 93 f0 00 	sts	0x00F0, r21
     6b6:	20 91 ee 00 	lds	r18, 0x00EE
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	27 ff       	sbrs	r18, 7
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <Endpoint_ConfigureEndpoint_Prv+0x66>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	9f 5f       	subi	r25, 0xFF	; 255
     6c0:	d3 cf       	rjmp	.-90     	; 0x668 <Endpoint_ConfigureEndpoint_Prv+0x2>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	80 93 e9 00 	sts	0x00E9, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	08 95       	ret
     6cc:	80 e0       	ldi	r24, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	08 95       	ret

000006d0 <Endpoint_ConfigureEndpointTable>:
     6d0:	0f 93       	push	r16
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	df 93       	push	r29

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	06 2f       	mov	r16, r22
     6da:	ec 01       	movw	r28, r24
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	10 17       	cp	r17, r16
     6e0:	71 f1       	breq	.+92     	; 0x73e <Endpoint_ConfigureEndpointTable+0x6e>
     6e2:	98 81       	ld	r25, Y
     6e4:	99 23       	and	r25, r25
     6e6:	41 f1       	breq	.+80     	; 0x738 <Endpoint_ConfigureEndpointTable+0x68>
     6e8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ea:	e9 81       	ldd	r30, Y+1	; 0x01
     6ec:	fa 81       	ldd	r31, Y+2	; 0x02
     6ee:	7b 81       	ldd	r23, Y+3	; 0x03
     6f0:	89 2f       	mov	r24, r25
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	87 30       	cpi	r24, 0x07	; 7
     6f6:	10 f0       	brcs	.+4      	; 0x6fc <Endpoint_ConfigureEndpointTable+0x2c>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	22 c0       	rjmp	.+68     	; 0x740 <Endpoint_ConfigureEndpointTable+0x70>
     6fc:	22 30       	cpi	r18, 0x02	; 2
     6fe:	10 f0       	brcs	.+4      	; 0x704 <Endpoint_ConfigureEndpointTable+0x34>
     700:	56 e0       	ldi	r21, 0x06	; 6
     702:	01 c0       	rjmp	.+2      	; 0x706 <Endpoint_ConfigureEndpointTable+0x36>
     704:	52 e0       	ldi	r21, 0x02	; 2
     706:	28 e0       	ldi	r18, 0x08	; 8
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     70c:	2e 17       	cp	r18, r30
     70e:	3f 07       	cpc	r19, r31
     710:	20 f4       	brcc	.+8      	; 0x71a <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     712:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	f9 cf       	rjmp	.-14     	; 0x70c <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     71a:	42 95       	swap	r20
     71c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     71e:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     720:	69 2f       	mov	r22, r25
     722:	66 1f       	adc	r22, r22
     724:	66 27       	eor	r22, r22
     726:	66 1f       	adc	r22, r22
     728:	90 e4       	ldi	r25, 0x40	; 64
     72a:	79 9f       	mul	r23, r25
     72c:	90 01       	movw	r18, r0
     72e:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     730:	62 2b       	or	r22, r18
     732:	99 df       	rcall	.-206    	; 0x666 <Endpoint_ConfigureEndpoint_Prv>
     734:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     736:	01 f3       	breq	.-64     	; 0x6f8 <Endpoint_ConfigureEndpointTable+0x28>
     738:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     73a:	25 96       	adiw	r28, 0x05	; 5
     73c:	d0 cf       	rjmp	.-96     	; 0x6de <Endpoint_ConfigureEndpointTable+0xe>
     73e:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     740:	df 91       	pop	r29
}
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <Endpoint_ClearStatusStage>:
     74a:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     74e:	87 fd       	sbrc	r24, 7
     750:	05 c0       	rjmp	.+10     	; 0x75c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     752:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     756:	80 ff       	sbrs	r24, 0
     758:	0e c0       	rjmp	.+28     	; 0x776 <Endpoint_ClearStatusStage+0x2c>
     75a:	12 c0       	rjmp	.+36     	; 0x780 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     75c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     760:	82 fd       	sbrc	r24, 2
     762:	05 c0       	rjmp	.+10     	; 0x76e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     764:	80 91 16 01 	lds	r24, 0x0116
     768:	81 11       	cpse	r24, r1
     76a:	f8 cf       	rjmp	.-16     	; 0x75c <Endpoint_ClearStatusStage+0x12>
     76c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     76e:	80 91 e8 00 	lds	r24, 0x00E8
     772:	8b 77       	andi	r24, 0x7B	; 123
     774:	08 c0       	rjmp	.+16     	; 0x786 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     776:	80 91 16 01 	lds	r24, 0x0116
     77a:	81 11       	cpse	r24, r1
     77c:	ea cf       	rjmp	.-44     	; 0x752 <Endpoint_ClearStatusStage+0x8>
     77e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     780:	80 91 e8 00 	lds	r24, 0x00E8
     784:	8e 77       	andi	r24, 0x7E	; 126
     786:	80 93 e8 00 	sts	0x00E8, r24
     78a:	08 95       	ret

0000078c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     794:	4e d0       	rcall	.+156    	; 0x832 <USB_INT_DisableAllInterrupts>
     796:	55 d0       	rcall	.+170    	; 0x842 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     798:	c8 ed       	ldi	r28, 0xD8	; 216
     79a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     79c:	88 81       	ld	r24, Y
     79e:	8f 77       	andi	r24, 0x7F	; 127
     7a0:	88 83       	st	Y, r24
     7a2:	88 81       	ld	r24, Y
     7a4:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7a6:	88 83       	st	Y, r24
     7a8:	88 81       	ld	r24, Y
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7ac:	88 83       	st	Y, r24
     7ae:	e7 ed       	ldi	r30, 0xD7	; 215
     7b0:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7b2:	80 81       	ld	r24, Z
     7b4:	80 68       	ori	r24, 0x80	; 128
     7b6:	80 83       	st	Z, r24
     7b8:	19 bc       	out	0x29, r1	; 41
     7ba:	10 92 16 01 	sts	0x0116, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7be:	10 92 12 01 	sts	0x0112, r1
	USB_Device_ConfigurationNumber  = 0;
     7c2:	10 92 14 01 	sts	0x0114, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7c6:	10 92 13 01 	sts	0x0113, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7ca:	00 ee       	ldi	r16, 0xE0	; 224
     7cc:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7ce:	f8 01       	movw	r30, r16
     7d0:	80 81       	ld	r24, Z
     7d2:	8b 7f       	andi	r24, 0xFB	; 251
     7d4:	80 83       	st	Z, r24
     7d6:	88 81       	ld	r24, Y
     7d8:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7da:	88 83       	st	Y, r24
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	41 df       	rcall	.-382    	; 0x666 <Endpoint_ConfigureEndpoint_Prv>
     7e4:	e1 ee       	ldi	r30, 0xE1	; 225
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	80 83       	st	Z, r24
     7ee:	e2 ee       	ldi	r30, 0xE2	; 226
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7f4:	81 60       	ori	r24, 0x01	; 1
     7f6:	80 83       	st	Z, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	88 60       	ori	r24, 0x08	; 8
     7fc:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7fe:	f8 01       	movw	r30, r16
     800:	80 81       	ld	r24, Z
     802:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     804:	80 83       	st	Z, r24
     806:	88 81       	ld	r24, Y
     808:	80 61       	ori	r24, 0x10	; 16
     80a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <USB_Init>:
     816:	e8 ed       	ldi	r30, 0xD8	; 216
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     81c:	8f 7e       	andi	r24, 0xEF	; 239
     81e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     820:	e7 ed       	ldi	r30, 0xD7	; 215
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	81 60       	ori	r24, 0x01	; 1
     828:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 15 01 	sts	0x0115, r24

	USB_ResetInterface();
     830:	ad cf       	rjmp	.-166    	; 0x78c <USB_ResetInterface>

00000832 <USB_INT_DisableAllInterrupts>:
     832:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8c 7f       	andi	r24, 0xFC	; 252
     83a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     83c:	10 92 e2 00 	sts	0x00E2, r1
     840:	08 95       	ret

00000842 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     842:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     846:	10 92 e1 00 	sts	0x00E1, r1
     84a:	08 95       	ret

0000084c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	0b b6       	in	r0, 0x3b	; 59
     858:	0f 92       	push	r0
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     872:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     876:	82 ff       	sbrs	r24, 2
     878:	0a c0       	rjmp	.+20     	; 0x88e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     87a:	80 91 e2 00 	lds	r24, 0x00E2
     87e:	82 ff       	sbrs	r24, 2
     880:	06 c0       	rjmp	.+12     	; 0x88e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     882:	80 91 e1 00 	lds	r24, 0x00E1
     886:	8b 7f       	andi	r24, 0xFB	; 251
     888:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     88c:	fa d1       	rcall	.+1012   	; 0xc82 <USB_Event_Stub>
     88e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     892:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     894:	1d c0       	rjmp	.+58     	; 0x8d0 <__vector_10+0x84>
     896:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     89a:	80 ff       	sbrs	r24, 0
     89c:	19 c0       	rjmp	.+50     	; 0x8d0 <__vector_10+0x84>
     89e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8a2:	8e 7f       	andi	r24, 0xFE	; 254
     8a4:	80 93 da 00 	sts	0x00DA, r24
     8a8:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8ac:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <__vector_10+0x7c>
     8b0:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8b2:	89 bd       	out	0x29, r24	; 41
     8b4:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8b6:	89 bd       	out	0x29, r24	; 41
     8b8:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8ba:	00 fe       	sbrs	r0, 0
     8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <__vector_10+0x6c>
     8be:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8c0:	80 93 16 01 	sts	0x0116, r24
     8c4:	21 dd       	rcall	.-1470   	; 0x308 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__vector_10+0x84>
     8c8:	19 bc       	out	0x29, r1	; 41
     8ca:	10 92 16 01 	sts	0x0116, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8ce:	3e dd       	rcall	.-1412   	; 0x34c <EVENT_USB_Device_Disconnect>
     8d0:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8d4:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8d6:	18 c0       	rjmp	.+48     	; 0x908 <__vector_10+0xbc>
     8d8:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8dc:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8de:	14 c0       	rjmp	.+40     	; 0x908 <__vector_10+0xbc>
     8e0:	80 91 e2 00 	lds	r24, 0x00E2
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8e6:	80 93 e2 00 	sts	0x00E2, r24
     8ea:	80 91 e2 00 	lds	r24, 0x00E2
     8ee:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8f0:	80 93 e2 00 	sts	0x00E2, r24
     8f4:	80 91 d8 00 	lds	r24, 0x00D8
     8f8:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8fa:	80 93 d8 00 	sts	0x00D8, r24
     8fe:	19 bc       	out	0x29, r1	; 41
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	80 93 16 01 	sts	0x0116, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     906:	bd d1       	rcall	.+890    	; 0xc82 <USB_Event_Stub>
     908:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     90c:	84 ff       	sbrs	r24, 4
     90e:	2f c0       	rjmp	.+94     	; 0x96e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     910:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     914:	84 ff       	sbrs	r24, 4
     916:	2b c0       	rjmp	.+86     	; 0x96e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     918:	8c e0       	ldi	r24, 0x0C	; 12
     91a:	89 bd       	out	0x29, r24	; 41
     91c:	8e e0       	ldi	r24, 0x0E	; 14
     91e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     920:	09 b4       	in	r0, 0x29	; 41
     922:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     924:	fd cf       	rjmp	.-6      	; 0x920 <__vector_10+0xd4>
     926:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     92a:	8f 7d       	andi	r24, 0xDF	; 223
     92c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     930:	80 91 e1 00 	lds	r24, 0x00E1
     934:	8f 7e       	andi	r24, 0xEF	; 239
     936:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     93a:	80 91 e2 00 	lds	r24, 0x00E2
     93e:	8f 7e       	andi	r24, 0xEF	; 239
     940:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     944:	80 91 e2 00 	lds	r24, 0x00E2
     948:	81 60       	ori	r24, 0x01	; 1
     94a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     94e:	80 91 12 01 	lds	r24, 0x0112
     952:	88 23       	and	r24, r24
     954:	11 f0       	breq	.+4      	; 0x95a <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	07 c0       	rjmp	.+14     	; 0x968 <__vector_10+0x11c>
     95a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     95e:	87 ff       	sbrs	r24, 7
     960:	02 c0       	rjmp	.+4      	; 0x966 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	01 c0       	rjmp	.+2      	; 0x968 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 16 01 	sts	0x0116, r24
     96c:	8a d1       	rcall	.+788    	; 0xc82 <USB_Event_Stub>
     96e:	80 91 e1 00 	lds	r24, 0x00E1
     972:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     974:	22 c0       	rjmp	.+68     	; 0x9ba <__vector_10+0x16e>
     976:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     97a:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     97c:	1e c0       	rjmp	.+60     	; 0x9ba <__vector_10+0x16e>
     97e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     982:	87 7f       	andi	r24, 0xF7	; 247
     984:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 16 01 	sts	0x0116, r24
     98e:	10 92 12 01 	sts	0x0112, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     992:	80 91 e1 00 	lds	r24, 0x00E1
     996:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     998:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     99c:	80 91 e2 00 	lds	r24, 0x00E2
     9a0:	8e 7f       	andi	r24, 0xFE	; 254
     9a2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9a6:	80 91 e2 00 	lds	r24, 0x00E2
     9aa:	80 61       	ori	r24, 0x10	; 16
     9ac:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9b0:	42 e0       	ldi	r20, 0x02	; 2
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	57 de       	rcall	.-850    	; 0x666 <Endpoint_ConfigureEndpoint_Prv>
     9b8:	64 d1       	rcall	.+712    	; 0xc82 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9ba:	ff 91       	pop	r31
     9bc:	ef 91       	pop	r30
     9be:	bf 91       	pop	r27
     9c0:	af 91       	pop	r26
     9c2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9c4:	8f 91       	pop	r24
     9c6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9c8:	6f 91       	pop	r22
     9ca:	5f 91       	pop	r21
     9cc:	4f 91       	pop	r20
     9ce:	3f 91       	pop	r19
     9d0:	2f 91       	pop	r18
     9d2:	0f 90       	pop	r0
     9d4:	0b be       	out	0x3b, r0	; 59
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <USB_Device_ProcessControlRequest>:
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	aa 97       	sbiw	r28, 0x2a	; 42
     9ec:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	e7 e1       	ldi	r30, 0x17	; 23
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9fa:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9fe:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	ef 31       	cpi	r30, 0x1F	; 31
     a04:	f2 07       	cpc	r31, r18
     a06:	c9 f7       	brne	.-14     	; 0x9fa <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a08:	b3 dc       	rcall	.-1690   	; 0x370 <EVENT_USB_Device_ControlRequest>
     a0a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a0e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a10:	20 c1       	rjmp	.+576    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a12:	90 91 17 01 	lds	r25, 0x0117
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a16:	80 91 18 01 	lds	r24, 0x0118

		switch (USB_ControlRequest.bRequest)
     a1a:	85 30       	cpi	r24, 0x05	; 5
     a1c:	09 f4       	brne	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x40>
     a1e:	77 c0       	rjmp	.+238    	; 0xb0e <USB_Device_ProcessControlRequest+0x12e>
     a20:	30 f4       	brcc	.+12     	; 0xa2e <USB_Device_ProcessControlRequest+0x4e>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	81 f1       	breq	.+96     	; 0xa86 <USB_Device_ProcessControlRequest+0xa6>
     a26:	68 f0       	brcs	.+26     	; 0xa42 <USB_Device_ProcessControlRequest+0x62>
     a28:	83 30       	cpi	r24, 0x03	; 3
     a2a:	69 f1       	breq	.+90     	; 0xa86 <USB_Device_ProcessControlRequest+0xa6>
     a2c:	12 c1       	rjmp	.+548    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a2e:	88 30       	cpi	r24, 0x08	; 8
     a30:	09 f4       	brne	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0x54>
     a32:	e1 c0       	rjmp	.+450    	; 0xbf6 <USB_Device_ProcessControlRequest+0x216>
     a34:	89 30       	cpi	r24, 0x09	; 9
     a36:	09 f4       	brne	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0x5a>
     a38:	f0 c0       	rjmp	.+480    	; 0xc1a <USB_Device_ProcessControlRequest+0x23a>
     a3a:	86 30       	cpi	r24, 0x06	; 6
     a3c:	09 f0       	breq	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0x60>
     a3e:	09 c1       	rjmp	.+530    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a40:	88 c0       	rjmp	.+272    	; 0xb52 <USB_Device_ProcessControlRequest+0x172>
     a42:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a44:	81 f0       	breq	.+32     	; 0xa66 <USB_Device_ProcessControlRequest+0x86>
     a46:	92 38       	cpi	r25, 0x82	; 130
     a48:	09 f0       	breq	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x6c>
     a4a:	03 c1       	rjmp	.+518    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a4c:	80 91 1b 01 	lds	r24, 0x011B
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a50:	8f 70       	andi	r24, 0x0F	; 15
     a52:	80 93 e9 00 	sts	0x00E9, r24
     a56:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a5a:	85 fb       	bst	r24, 5
     a5c:	88 27       	eor	r24, r24
     a5e:	80 f9       	bld	r24, 0
     a60:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <USB_Device_ProcessControlRequest+0x92>
     a66:	80 91 13 01 	lds	r24, 0x0113
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a6a:	90 91 14 01 	lds	r25, 0x0114
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a6e:	91 11       	cpse	r25, r1
     a70:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a72:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a76:	97 7f       	andi	r25, 0xF7	; 247
     a78:	90 93 e8 00 	sts	0x00E8, r25
     a7c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a80:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a84:	c3 c0       	rjmp	.+390    	; 0xc0c <USB_Device_ProcessControlRequest+0x22c>
     a86:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a88:	2d 7f       	andi	r18, 0xFD	; 253
     a8a:	09 f0       	breq	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0xae>
     a8c:	e2 c0       	rjmp	.+452    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a8e:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a90:	19 f0       	breq	.+6      	; 0xa98 <USB_Device_ProcessControlRequest+0xb8>
     a92:	92 30       	cpi	r25, 0x02	; 2
     a94:	61 f0       	breq	.+24     	; 0xaae <USB_Device_ProcessControlRequest+0xce>
     a96:	dd c0       	rjmp	.+442    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     a98:	90 91 19 01 	lds	r25, 0x0119
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a9c:	91 30       	cpi	r25, 0x01	; 1
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0xc2>
     aa0:	d8 c0       	rjmp	.+432    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     aa2:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0xc8>
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	90 93 14 01 	sts	0x0114, r25
     aac:	2a c0       	rjmp	.+84     	; 0xb02 <USB_Device_ProcessControlRequest+0x122>
     aae:	90 91 19 01 	lds	r25, 0x0119

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ab2:	91 11       	cpse	r25, r1
     ab4:	26 c0       	rjmp	.+76     	; 0xb02 <USB_Device_ProcessControlRequest+0x122>
     ab6:	20 91 1b 01 	lds	r18, 0x011B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aba:	2f 70       	andi	r18, 0x0F	; 15
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     abe:	c9 c0       	rjmp	.+402    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     ac0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ac4:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ac8:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aca:	1b c0       	rjmp	.+54     	; 0xb02 <USB_Device_ProcessControlRequest+0x122>
     acc:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ace:	21 f4       	brne	.+8      	; 0xad8 <USB_Device_ProcessControlRequest+0xf8>
     ad0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ad4:	80 62       	ori	r24, 0x20	; 32
     ad6:	13 c0       	rjmp	.+38     	; 0xafe <USB_Device_ProcessControlRequest+0x11e>
     ad8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     adc:	80 61       	ori	r24, 0x10	; 16
     ade:	80 93 eb 00 	sts	0x00EB, r24
     ae2:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 2e       	mov	r0, r18
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0x10c>
     aea:	88 0f       	add	r24, r24
     aec:	0a 94       	dec	r0
     aee:	ea f7       	brpl	.-6      	; 0xaea <USB_Device_ProcessControlRequest+0x10a>
     af0:	80 93 ea 00 	sts	0x00EA, r24
     af4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     af8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	80 93 eb 00 	sts	0x00EB, r24
     b02:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b06:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	82 c0       	rjmp	.+260    	; 0xc12 <USB_Device_ProcessControlRequest+0x232>
     b0e:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b10:	a0 c0       	rjmp	.+320    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     b12:	10 91 19 01 	lds	r17, 0x0119
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b16:	1f 77       	andi	r17, 0x7F	; 127
     b18:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b1c:	80 78       	andi	r24, 0x80	; 128
     b1e:	81 2b       	or	r24, r17
     b20:	80 93 e3 00 	sts	0x00E3, r24
     b24:	80 91 e8 00 	lds	r24, 0x00E8
     b28:	87 7f       	andi	r24, 0xF7	; 247
     b2a:	80 93 e8 00 	sts	0x00E8, r24
     b2e:	0d de       	rcall	.-998    	; 0x74a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b30:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b34:	80 ff       	sbrs	r24, 0
     b36:	fc cf       	rjmp	.-8      	; 0xb30 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     b38:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	80 93 e3 00 	sts	0x00E3, r24
     b42:	11 23       	and	r17, r17
     b44:	11 f0       	breq	.+4      	; 0xb4a <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <USB_Device_ProcessControlRequest+0x16c>
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	80 93 16 01 	sts	0x0116, r24
     b50:	80 c0       	rjmp	.+256    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     b52:	90 58       	subi	r25, 0x80	; 128
     b54:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b56:	08 f0       	brcs	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x17a>
     b58:	7c c0       	rjmp	.+248    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     b5a:	80 91 19 01 	lds	r24, 0x0119
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b5e:	90 91 1a 01 	lds	r25, 0x011A
     b62:	8c 3d       	cpi	r24, 0xDC	; 220
     b64:	23 e0       	ldi	r18, 0x03	; 3
     b66:	92 07       	cpc	r25, r18
     b68:	71 f5       	brne	.+92     	; 0xbc6 <USB_Device_ProcessControlRequest+0x1e6>
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b6e:	8a e2       	ldi	r24, 0x2A	; 42
     b70:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b72:	4f b7       	in	r20, 0x3f	; 63
     b74:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b76:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b78:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b7e:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b80:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	50 93 57 00 	sts	0x0057, r21
     b88:	e4 91       	lpm	r30, Z
     b8a:	20 ff       	sbrs	r18, 0
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     b8e:	e2 95       	swap	r30
     b90:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     b92:	3f 5f       	subi	r19, 0xFF	; 255
     b94:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b96:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	ea 30       	cpi	r30, 0x0A	; 10
     b9c:	10 f0       	brcs	.+4      	; 0xba2 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b9e:	c7 96       	adiw	r24, 0x37	; 55
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x1c4>
     ba2:	c0 96       	adiw	r24, 0x30	; 48
     ba4:	8d 93       	st	X+, r24
     ba6:	9d 93       	st	X+, r25
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bac:	49 f7       	brne	.-46     	; 0xb80 <USB_Device_ProcessControlRequest+0x1a0>
     bae:	4f bf       	out	0x3f, r20	; 63
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	80 93 e8 00 	sts	0x00E8, r24
     bba:	6a e2       	ldi	r22, 0x2A	; 42
     bbc:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	56 dc       	rcall	.-1876   	; 0x470 <Endpoint_Write_Control_Stream_LE>
     bc4:	12 c0       	rjmp	.+36     	; 0xbea <USB_Device_ProcessControlRequest+0x20a>
     bc6:	ae 01       	movw	r20, r28
     bc8:	4f 5f       	subi	r20, 0xFF	; 255
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bcc:	60 91 1b 01 	lds	r22, 0x011B
     bd0:	1d dc       	rcall	.-1990   	; 0x40c <CALLBACK_USB_GetDescriptor>
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x1f8>
     bd6:	3d c0       	rjmp	.+122    	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     bd8:	20 91 e8 00 	lds	r18, 0x00E8
     bdc:	27 7f       	andi	r18, 0xF7	; 247
     bde:	20 93 e8 00 	sts	0x00E8, r18
     be2:	bc 01       	movw	r22, r24
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	de dc       	rcall	.-1604   	; 0x5a6 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bea:	80 91 e8 00 	lds	r24, 0x00E8
     bee:	8b 77       	andi	r24, 0x7B	; 123
     bf0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bf4:	2e c0       	rjmp	.+92     	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     bf6:	90 38       	cpi	r25, 0x80	; 128
     bf8:	61 f5       	brne	.+88     	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
     bfe:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c00:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c04:	80 91 12 01 	lds	r24, 0x0112
     c08:	80 93 f1 00 	sts	0x00F1, r24
     c0c:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c10:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c12:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c16:	99 dd       	rcall	.-1230   	; 0x74a <Endpoint_ClearStatusStage>
     c18:	1c c0       	rjmp	.+56     	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     c1a:	91 11       	cpse	r25, r1
     c1c:	1a c0       	rjmp	.+52     	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
     c1e:	90 91 19 01 	lds	r25, 0x0119
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c22:	92 30       	cpi	r25, 0x02	; 2
     c24:	b0 f4       	brcc	.+44     	; 0xc52 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c26:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c2a:	87 7f       	andi	r24, 0xF7	; 247
     c2c:	80 93 e8 00 	sts	0x00E8, r24
     c30:	90 93 12 01 	sts	0x0112, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c34:	8a dd       	rcall	.-1260   	; 0x74a <Endpoint_ClearStatusStage>
     c36:	80 91 12 01 	lds	r24, 0x0112
     c3a:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <USB_Device_ProcessControlRequest+0x266>
     c3e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c42:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <USB_Device_ProcessControlRequest+0x26a>
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <USB_Device_ProcessControlRequest+0x26c>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c4c:	80 93 16 01 	sts	0x0116, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c50:	86 db       	rcall	.-2292   	; 0x35e <EVENT_USB_Device_ConfigurationChanged>
     c52:	80 91 e8 00 	lds	r24, 0x00E8
     c56:	83 ff       	sbrs	r24, 3
     c58:	0a c0       	rjmp	.+20     	; 0xc6e <USB_Device_ProcessControlRequest+0x28e>
     c5a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c64:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c68:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c6a:	80 93 eb 00 	sts	0x00EB, r24
     c6e:	aa 96       	adiw	r28, 0x2a	; 42
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c7e:	1f 91       	pop	r17
     c80:	08 95       	ret

00000c82 <USB_Event_Stub>:
     c82:	08 95       	ret

00000c84 <USB_USBTask>:
     c84:	cf 93       	push	r28
     c86:	80 91 16 01 	lds	r24, 0x0116
     c8a:	88 23       	and	r24, r24
     c8c:	a9 f0       	breq	.+42     	; 0xcb8 <USB_USBTask+0x34>
     c8e:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c92:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c94:	90 91 ec 00 	lds	r25, 0x00EC
     c98:	90 ff       	sbrs	r25, 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <USB_USBTask+0x1c>
     c9c:	90 e8       	ldi	r25, 0x80	; 128
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <USB_USBTask+0x1e>
     ca0:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca2:	c9 2f       	mov	r28, r25
     ca4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ca6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     caa:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     cae:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     cb0:	97 de       	rcall	.-722    	; 0x9e0 <USB_Device_ProcessControlRequest>
     cb2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cb4:	c0 93 e9 00 	sts	0x00E9, r28
     cb8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cba:	08 95       	ret

00000cbc <Audio_Device_ConfigureEndpoints>:
     cbc:	cf 93       	push	r28
			break;
	}
}

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
     cc2:	1c 86       	std	Y+12, r1	; 0x0c

	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8d 83       	std	Y+5, r24	; 0x05
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;
     cc8:	8a 87       	std	Y+10, r24	; 0x0a

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	ce 01       	movw	r24, r28
     cce:	02 96       	adiw	r24, 0x02	; 2
     cd0:	ff dc       	rcall	.-1538   	; 0x6d0 <Endpoint_ConfigureEndpointTable>
     cd2:	88 23       	and	r24, r24
     cd4:	31 f0       	breq	.+12     	; 0xce2 <Audio_Device_ConfigureEndpoints+0x26>
     cd6:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
     cd8:	ce 01       	movw	r24, r28
     cda:	07 96       	adiw	r24, 0x07	; 7
     cdc:	df 91       	pop	r29
	  return false;

	return true;
}
     cde:	cf 91       	pop	r28
     ce0:	f7 cc       	rjmp	.-1554   	; 0x6d0 <Endpoint_ConfigureEndpointTable>
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	df 91       	pop	r29
	  return false;

	return true;
}
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <Audio_Device_Event_Stub>:
     cea:	08 95       	ret

00000cec <Audio_Device_ProcessControlRequest>:
     cec:	4f 92       	push	r4
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     cee:	5f 92       	push	r5
     cf0:	6f 92       	push	r6
     cf2:	7f 92       	push	r7
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <Audio_Device_ProcessControlRequest+0x22>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	6c 01       	movw	r12, r24
				}
			}

			break;
	}
}
     d14:	8d b6       	in	r8, 0x3d	; 61
     d16:	9e b6       	in	r9, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d18:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d1c:	83 ff       	sbrs	r24, 3
     d1e:	34 c1       	rjmp	.+616    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     d20:	90 91 17 01 	lds	r25, 0x0117
     d24:	89 2f       	mov	r24, r25
     d26:	8f 71       	andi	r24, 0x1F	; 31
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	41 f4       	brne	.+16     	; 0xd3c <Audio_Device_ProcessControlRequest+0x50>
	{
		uint8_t InterfaceIndex = (USB_ControlRequest.wIndex & 0xFF);
     d2c:	20 91 1b 01 	lds	r18, 0x011B

		if ((InterfaceIndex != AudioInterfaceInfo->Config.ControlInterfaceNumber) &&
     d30:	f6 01       	movw	r30, r12
     d32:	30 81       	ld	r19, Z
     d34:	23 17       	cp	r18, r19
     d36:	69 f0       	breq	.+26     	; 0xd52 <Audio_Device_ProcessControlRequest+0x66>
     d38:	31 81       	ldd	r19, Z+1	; 0x01
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <Audio_Device_ProcessControlRequest+0x62>
		    (InterfaceIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber))
		{
			return;
		}
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	49 f4       	brne	.+18     	; 0xd52 <Audio_Device_ProcessControlRequest+0x66>
	{
		uint8_t EndpointAddress = (USB_ControlRequest.wIndex & 0xFF);
     d40:	20 91 1b 01 	lds	r18, 0x011B

		if ((EndpointAddress != AudioInterfaceInfo->Config.DataINEndpoint.Address) &&
     d44:	f6 01       	movw	r30, r12
     d46:	32 81       	ldd	r19, Z+2	; 0x02
     d48:	23 17       	cp	r18, r19
     d4a:	19 f0       	breq	.+6      	; 0xd52 <Audio_Device_ProcessControlRequest+0x66>
     d4c:	37 81       	ldd	r19, Z+7	; 0x07
     d4e:	23 13       	cpse	r18, r19
     d50:	1b c1       	rjmp	.+566    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
     d52:	50 90 18 01 	lds	r5, 0x0118
     d56:	fb e0       	ldi	r31, 0x0B	; 11
     d58:	5f 16       	cp	r5, r31
     d5a:	99 f0       	breq	.+38     	; 0xd82 <Audio_Device_ProcessControlRequest+0x96>
     d5c:	f5 15       	cp	r31, r5
     d5e:	28 f0       	brcs	.+10     	; 0xd6a <Audio_Device_ProcessControlRequest+0x7e>
     d60:	9f ef       	ldi	r25, 0xFF	; 255
     d62:	95 0d       	add	r25, r5
     d64:	94 30       	cpi	r25, 0x04	; 4
     d66:	60 f1       	brcs	.+88     	; 0xdc0 <Audio_Device_ProcessControlRequest+0xd4>
     d68:	0f c1       	rjmp	.+542    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     d6a:	21 e8       	ldi	r18, 0x81	; 129
     d6c:	52 16       	cp	r5, r18
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <Audio_Device_ProcessControlRequest+0x86>
     d70:	0b c1       	rjmp	.+534    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     d72:	34 e8       	ldi	r19, 0x84	; 132
     d74:	35 15       	cp	r19, r5
     d76:	08 f0       	brcs	.+2      	; 0xd7a <Audio_Device_ProcessControlRequest+0x8e>
     d78:	aa c0       	rjmp	.+340    	; 0xece <Audio_Device_ProcessControlRequest+0x1e2>
     d7a:	6f ef       	ldi	r22, 0xFF	; 255
     d7c:	56 16       	cp	r5, r22
     d7e:	a9 f0       	breq	.+42     	; 0xdaa <Audio_Device_ProcessControlRequest+0xbe>
     d80:	03 c1       	rjmp	.+518    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     d82:	91 30       	cpi	r25, 0x01	; 1
     d84:	09 f0       	breq	.+2      	; 0xd88 <Audio_Device_ProcessControlRequest+0x9c>
     d86:	00 c1       	rjmp	.+512    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d88:	80 91 e8 00 	lds	r24, 0x00E8
     d8c:	87 7f       	andi	r24, 0xF7	; 247
     d8e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     d92:	db dc       	rcall	.-1610   	; 0x74a <Endpoint_ClearStatusStage>
     d94:	90 91 19 01 	lds	r25, 0x0119

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	91 11       	cpse	r25, r1
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <Audio_Device_ProcessControlRequest+0xb4>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	f6 01       	movw	r30, r12
     da2:	84 87       	std	Z+12, r24	; 0x0c
     da4:	c6 01       	movw	r24, r12
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
     da6:	a1 df       	rcall	.-190    	; 0xcea <Audio_Device_Event_Stub>
     da8:	ef c0       	rjmp	.+478    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     daa:	91 52       	subi	r25, 0x21	; 33
     dac:	92 30       	cpi	r25, 0x02	; 2
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <Audio_Device_ProcessControlRequest+0xc6>
     db0:	eb c0       	rjmp	.+470    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	87 7f       	andi	r24, 0xF7	; 247
     db8:	80 93 e8 00 	sts	0x00E8, r24
     dbc:	c6 dc       	rcall	.-1652   	; 0x74a <Endpoint_ClearStatusStage>
     dbe:	e4 c0       	rjmp	.+456    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <Audio_Device_ProcessControlRequest+0xda>
     dc4:	42 c0       	rjmp	.+132    	; 0xe4a <Audio_Device_ProcessControlRequest+0x15e>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     dc6:	70 90 1b 01 	lds	r7, 0x011B
     dca:	60 90 1a 01 	lds	r6, 0x011A
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     dce:	e1 2c       	mov	r14, r1
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
     dd0:	f1 2c       	mov	r15, r1
     dd2:	00 e0       	ldi	r16, 0x00	; 0

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	26 2d       	mov	r18, r6
     dd8:	47 2d       	mov	r20, r7
     dda:	65 2d       	mov	r22, r5
     ddc:	c6 01       	movw	r24, r12
     dde:	cb da       	rcall	.-2666   	; 0x376 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <Audio_Device_ProcessControlRequest+0xfa>
     de4:	d1 c0       	rjmp	.+418    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     de6:	ad b6       	in	r10, 0x3d	; 61
     de8:	be b6       	in	r11, 0x3e	; 62
     dea:	80 91 1d 01 	lds	r24, 0x011D
     dee:	90 91 1e 01 	lds	r25, 0x011E
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	2d b7       	in	r18, 0x3d	; 61
     df8:	3e b7       	in	r19, 0x3e	; 62
     dfa:	28 1b       	sub	r18, r24
     dfc:	39 0b       	sbc	r19, r25
					uint8_t  Value[ValueLength];
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	3e bf       	out	0x3e, r19	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	2d bf       	out	0x3d, r18	; 61
     e08:	6d b7       	in	r22, 0x3d	; 61
     e0a:	7e b7       	in	r23, 0x3e	; 62
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	7b 01       	movw	r14, r22
     e12:	80 91 e8 00 	lds	r24, 0x00E8
     e16:	87 7f       	andi	r24, 0xF7	; 247
     e18:	80 93 e8 00 	sts	0x00E8, r24
     e1c:	69 81       	ldd	r22, Y+1	; 0x01
     e1e:	7a 81       	ldd	r23, Y+2	; 0x02
     e20:	c7 01       	movw	r24, r14
     e22:	83 db       	rcall	.-2298   	; 0x52a <Endpoint_Read_Control_Stream_LE>

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     e24:	80 91 e8 00 	lds	r24, 0x00E8
     e28:	8e 77       	andi	r24, 0x7E	; 126
     e2a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e2e:	8e 01       	movw	r16, r28
     e30:	0f 5f       	subi	r16, 0xFF	; 255
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	26 2d       	mov	r18, r6
     e36:	47 2d       	mov	r20, r7
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     e38:	65 2d       	mov	r22, r5
     e3a:	c6 01       	movw	r24, r12
     e3c:	9c da       	rcall	.-2760   	; 0x376 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	be be       	out	0x3e, r11	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	ad be       	out	0x3d, r10	; 61
     e48:	9f c0       	rjmp	.+318    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <Audio_Device_ProcessControlRequest+0x164>
     e4e:	9c c0       	rjmp	.+312    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     e50:	40 90 1c 01 	lds	r4, 0x011C
     e54:	a0 90 19 01 	lds	r10, 0x0119
					                                             EndpointControl, &ValueLength, Value);
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     e58:	b0 90 1a 01 	lds	r11, 0x011A
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
     e5c:	e1 2c       	mov	r14, r1
     e5e:	f1 2c       	mov	r15, r1
				uint16_t Parameter = USB_ControlRequest.wValue;
     e60:	00 e0       	ldi	r16, 0x00	; 0
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	95 01       	movw	r18, r10
     e66:	44 2d       	mov	r20, r4

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     e68:	65 2d       	mov	r22, r5
     e6a:	c6 01       	movw	r24, r12
     e6c:	cd da       	rcall	.-2662   	; 0x408 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <Audio_Device_ProcessControlRequest+0x188>
     e72:	8a c0       	rjmp	.+276    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     e74:	6d b6       	in	r6, 0x3d	; 61
     e76:	7e b6       	in	r7, 0x3e	; 62
     e78:	80 91 1d 01 	lds	r24, 0x011D
     e7c:	90 91 1e 01 	lds	r25, 0x011E
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	ed b7       	in	r30, 0x3d	; 61
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     e86:	fe b7       	in	r31, 0x3e	; 62
     e88:	e8 1b       	sub	r30, r24
     e8a:	f9 0b       	sbc	r31, r25
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	fe bf       	out	0x3e, r31	; 62
					uint8_t  Value[ValueLength];
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	ed bf       	out	0x3d, r30	; 61
     e96:	2d b7       	in	r18, 0x3d	; 61
     e98:	3e b7       	in	r19, 0x3e	; 62
     e9a:	2f 5f       	subi	r18, 0xFF	; 255
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	79 01       	movw	r14, r18
     ea0:	80 91 e8 00 	lds	r24, 0x00E8
     ea4:	87 7f       	andi	r24, 0xF7	; 247
     ea6:	80 93 e8 00 	sts	0x00E8, r24
     eaa:	69 81       	ldd	r22, Y+1	; 0x01
     eac:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eae:	c9 01       	movw	r24, r18
     eb0:	3c db       	rcall	.-2440   	; 0x52a <Endpoint_Read_Control_Stream_LE>
     eb2:	80 91 e8 00 	lds	r24, 0x00E8
     eb6:	8e 77       	andi	r24, 0x7E	; 126

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     eb8:	80 93 e8 00 	sts	0x00E8, r24
     ebc:	8e 01       	movw	r16, r28
     ebe:	0f 5f       	subi	r16, 0xFF	; 255
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec2:	95 01       	movw	r18, r10
     ec4:	44 2d       	mov	r20, r4
     ec6:	65 2d       	mov	r22, r5
     ec8:	c6 01       	movw	r24, r12
     eca:	9e da       	rcall	.-2756   	; 0x408 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     ecc:	58 c0       	rjmp	.+176    	; 0xf7e <Audio_Device_ProcessControlRequest+0x292>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	09 f5       	brne	.+66     	; 0xf14 <Audio_Device_ProcessControlRequest+0x228>
     ed2:	6d b6       	in	r6, 0x3d	; 61
     ed4:	7e b6       	in	r7, 0x3e	; 62
     ed6:	40 91 1b 01 	lds	r20, 0x011B
     eda:	20 91 1a 01 	lds	r18, 0x011A
     ede:	80 91 1d 01 	lds	r24, 0x011D
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     ee2:	90 91 1e 01 	lds	r25, 0x011E
     ee6:	9a 83       	std	Y+2, r25	; 0x02
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6d b7       	in	r22, 0x3d	; 61
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
     eec:	7e b7       	in	r23, 0x3e	; 62
     eee:	68 1b       	sub	r22, r24
				uint16_t ValueLength      = USB_ControlRequest.wLength;
     ef0:	79 0b       	sbc	r23, r25
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	7e bf       	out	0x3e, r23	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	6d bf       	out	0x3d, r22	; 61
				uint8_t  Value[ValueLength];
     efc:	8d b7       	in	r24, 0x3d	; 61
     efe:	9e b7       	in	r25, 0x3e	; 62
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	5c 01       	movw	r10, r24
     f04:	7c 01       	movw	r14, r24
     f06:	8e 01       	movw	r16, r28
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	65 2d       	mov	r22, r5
     f0e:	c6 01       	movw	r24, r12
     f10:	32 da       	rcall	.-2972   	; 0x376 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     f12:	25 c0       	rjmp	.+74     	; 0xf5e <Audio_Device_ProcessControlRequest+0x272>
     f14:	81 30       	cpi	r24, 0x01	; 1

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     f16:	c1 f5       	brne	.+112    	; 0xf88 <Audio_Device_ProcessControlRequest+0x29c>
     f18:	6d b6       	in	r6, 0x3d	; 61
     f1a:	7e b6       	in	r7, 0x3e	; 62
     f1c:	40 91 1c 01 	lds	r20, 0x011C
     f20:	20 91 19 01 	lds	r18, 0x0119
     f24:	30 91 1a 01 	lds	r19, 0x011A
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearOUT();
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     f28:	80 91 1d 01 	lds	r24, 0x011D
     f2c:	90 91 1e 01 	lds	r25, 0x011E
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
				uint16_t Parameter   = USB_ControlRequest.wValue;
     f34:	ed b7       	in	r30, 0x3d	; 61
     f36:	fe b7       	in	r31, 0x3e	; 62
     f38:	e8 1b       	sub	r30, r24
     f3a:	f9 0b       	sbc	r31, r25
				uint16_t ValueLength = USB_ControlRequest.wLength;
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	fe bf       	out	0x3e, r31	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	ed bf       	out	0x3d, r30	; 61
     f46:	6d b7       	in	r22, 0x3d	; 61
				uint8_t  Value[ValueLength];
     f48:	7e b7       	in	r23, 0x3e	; 62
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	5b 01       	movw	r10, r22
     f50:	7b 01       	movw	r14, r22
     f52:	8e 01       	movw	r16, r28
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	65 2d       	mov	r22, r5
     f5a:	c6 01       	movw	r24, r12
     f5c:	55 da       	rcall	.-2902   	; 0x408 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     f5e:	88 23       	and	r24, r24
     f60:	71 f0       	breq	.+28     	; 0xf7e <Audio_Device_ProcessControlRequest+0x292>
     f62:	80 91 e8 00 	lds	r24, 0x00E8

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     f66:	87 7f       	andi	r24, 0xF7	; 247
     f68:	80 93 e8 00 	sts	0x00E8, r24
     f6c:	69 81       	ldd	r22, Y+1	; 0x01
     f6e:	7a 81       	ldd	r23, Y+2	; 0x02
     f70:	c5 01       	movw	r24, r10
     f72:	7e da       	rcall	.-2820   	; 0x470 <Endpoint_Write_Control_Stream_LE>
     f74:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f78:	8b 77       	andi	r24, 0x7B	; 123
     f7a:	80 93 e8 00 	sts	0x00E8, r24
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     f82:	7e be       	out	0x3e, r7	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	6d be       	out	0x3d, r6	; 61
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f8c:	9e be       	out	0x3e, r9	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d be       	out	0x3d, r8	; 61
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
				}
			}

			break;
	}
}
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	6f 90       	pop	r6
     fb2:	5f 90       	pop	r5
     fb4:	4f 90       	pop	r4
     fb6:	08 95       	ret

00000fb8 <__udivmodsi4>:
     fb8:	a1 e2       	ldi	r26, 0x21	; 33
     fba:	1a 2e       	mov	r1, r26
     fbc:	aa 1b       	sub	r26, r26
     fbe:	bb 1b       	sub	r27, r27
     fc0:	fd 01       	movw	r30, r26
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <__udivmodsi4_ep>

00000fc4 <__udivmodsi4_loop>:
     fc4:	aa 1f       	adc	r26, r26
     fc6:	bb 1f       	adc	r27, r27
     fc8:	ee 1f       	adc	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	a2 17       	cp	r26, r18
     fce:	b3 07       	cpc	r27, r19
     fd0:	e4 07       	cpc	r30, r20
     fd2:	f5 07       	cpc	r31, r21
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__udivmodsi4_ep>
     fd6:	a2 1b       	sub	r26, r18
     fd8:	b3 0b       	sbc	r27, r19
     fda:	e4 0b       	sbc	r30, r20
     fdc:	f5 0b       	sbc	r31, r21

00000fde <__udivmodsi4_ep>:
     fde:	66 1f       	adc	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	1a 94       	dec	r1
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <__udivmodsi4_loop>
     fea:	60 95       	com	r22
     fec:	70 95       	com	r23
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	bd 01       	movw	r22, r26
     ff8:	cf 01       	movw	r24, r30
     ffa:	08 95       	ret

00000ffc <_exit>:
     ffc:	f8 94       	cli

00000ffe <__stop_program>:
     ffe:	ff cf       	rjmp	.-2      	; 0xffe <__stop_program>


GenericHIDHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000180e  000018a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  000018b4  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005186  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  00005197  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000591d  00000000  00000000  0000554f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ac4  00000000  00000000  0000ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002693  00000000  00000000  0000c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a34  00000000  00000000  0000efc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002642  00000000  00000000  0000f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e73  00000000  00000000  0001203a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  00015ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c6       	rjmp	.+3198   	; 0xca8 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4579>:
      98:	0d 0a 00                                            ...

0000009b <__c.4574>:
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      9b:	30 78 25 30 32 58 20 00                             0x%02X .

000000a3 <__c.4567>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a3:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b3:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c3:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d3:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e3:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f3:	1b 5b 33 37 6d 00                                   .[37m.

000000f9 <__c.4560>:
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f9:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     109:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     119:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000128 <__c.4555>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000141 <__c.4553>:
     141:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     151:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     161:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     171:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
				ReportSize     -= 1;
				ReportData     += 1;
     181:	37 6d 00                                            7m.

00000184 <__c.4551>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     194:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000019e <__c.4549>:
     19e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ae:	69 63 65 2e 0d 0a 00                                ice....

000001b5 <__c.4547>:
				break;
     1b5:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c5:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1d5:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001df <__c.4544>:
     1df:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1ef:	61 74 61 2e 0d 0a 00                                ata....

000001f6 <__c.4539>:
     1f6:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     206:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000215 <__c.4534>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     215:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     225:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000232 <__c.4525>:
     232:	1b 5b 33 36 6d 47 65 6e 65 72 69 63 20 48 49 44     .[36mGeneric HID
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     242:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025e <__ctors_end>:
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	ee e0       	ldi	r30, 0x0E	; 14
				break;
     272:	f8 e1       	ldi	r31, 0x18	; 24

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a2 31       	cpi	r26, 0x12	; 18
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
				break;
     284:	11 e0       	ldi	r17, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	a2 e1       	ldi	r26, 0x12	; 18
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a4 33       	cpi	r26, 0x34	; 52
				break;
     290:	b1 07       	cpc	r27, r17

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	10 d1       	rcall	.+544    	; 0x4b6 <main>
     296:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <LEDs_SetAllLEDs>:
     29c:	9b b1       	in	r25, 0x0b	; 11
     29e:	9f 70       	andi	r25, 0x0F	; 15
				break;
     2a0:	98 2b       	or	r25, r24

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	9b b9       	out	0x0b, r25	; 11
     2a4:	08 95       	ret

000002a6 <SetupHardware>:
     2a6:	84 b7       	in	r24, 0x34	; 52
     2a8:	87 7f       	andi	r24, 0xF7	; 247
     2aa:	84 bf       	out	0x34, r24	; 52
				break;
     2ac:	88 e1       	ldi	r24, 0x18	; 24

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	80 93 60 00 	sts	0x0060, r24
     2b6:	10 92 60 00 	sts	0x0060, r1
     2ba:	0f be       	out	0x3f, r0	; 63
				break;
     2bc:	90 e0       	ldi	r25, 0x00	; 0
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	80 e8       	ldi	r24, 0x80	; 128
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	80 93 61 00 	sts	0x0061, r24
     2c8:	90 93 61 00 	sts	0x0061, r25
				break;
     2cc:	0f be       	out	0x3f, r0	; 63
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	83 e3       	ldi	r24, 0x33	; 51
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	90 93 cd 00 	sts	0x00CD, r25
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 93 cc 00 	sts	0x00CC, r24
     2da:	86 e0       	ldi	r24, 0x06	; 6

				if (ParserData->UsingReportIDs)
     2dc:	80 93 ca 00 	sts	0x00CA, r24
     2e0:	10 92 c8 00 	sts	0x00C8, r1
     2e4:	88 e1       	ldi	r24, 0x18	; 24
     2e6:	80 93 c9 00 	sts	0x00C9, r24
     2ea:	53 9a       	sbi	0x0a, 3	; 10
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	5a 9a       	sbi	0x0b, 2	; 11
     2ee:	8a b1       	in	r24, 0x0a	; 10
     2f0:	80 6f       	ori	r24, 0xF0	; 240
     2f2:	8a b9       	out	0x0a, r24	; 10
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	bb d4       	rcall	.+2422   	; 0xc72 <USB_Init>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	80 c7       	rjmp	.+3840   	; 0x1202 <Serial_CreateStream>

00000302 <EVENT_USB_Host_DeviceAttached>:
     302:	85 e1       	ldi	r24, 0x15	; 21
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	be d7       	rcall	.+3964   	; 0x1284 <puts_P>
     308:	80 ea       	ldi	r24, 0xA0	; 160
     30a:	c8 cf       	rjmp	.-112    	; 0x29c <LEDs_SetAllLEDs>

0000030c <EVENT_USB_Host_DeviceUnattached>:
     30c:	86 ef       	ldi	r24, 0xF6	; 246
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	b9 d7       	rcall	.+3954   	; 0x1284 <puts_P>
     312:	80 e1       	ldi	r24, 0x10	; 16
     314:	c3 cf       	rjmp	.-122    	; 0x29c <LEDs_SetAllLEDs>

00000316 <EVENT_USB_Host_DeviceEnumerationComplete>:
     316:	cf 93       	push	r28
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	8f ed       	ldi	r24, 0xDF	; 223
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	b3 d7       	rcall	.+3942   	; 0x1284 <puts_P>
     31e:	ec d0       	rcall	.+472    	; 0x4f8 <ProcessConfigurationDescriptor>
     320:	c8 2f       	mov	r28, r24
     322:	88 23       	and	r24, r24
     324:	a9 f0       	breq	.+42     	; 0x350 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	19 f4       	brne	.+6      	; 0x330 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
     32a:	85 eb       	ldi	r24, 0xB5	; 181
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	02 c0       	rjmp	.+4      	; 0x334 <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
     330:	8e e9       	ldi	r24, 0x9E	; 158
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	a7 d7       	rcall	.+3918   	; 0x1284 <puts_P>
     336:	1f 92       	push	r1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	cf 93       	push	r28
     33a:	84 e8       	ldi	r24, 0x84	; 132
     33c:	91 e0       	ldi	r25, 0x01	; 1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	7d d7       	rcall	.+3834   	; 0x123e <printf_P>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	80 e9       	ldi	r24, 0x90	; 144
     34e:	0d c0       	rjmp	.+26     	; 0x36a <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	08 d7       	rcall	.+3600   	; 0x1164 <USB_Host_SetDeviceConfiguration>
     354:	88 23       	and	r24, r24
     356:	29 f0       	breq	.+10     	; 0x362 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     358:	1f 92       	push	r1
     35a:	8f 93       	push	r24
     35c:	81 e4       	ldi	r24, 0x41	; 65
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	ee cf       	rjmp	.-36     	; 0x33e <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     362:	88 e2       	ldi	r24, 0x28	; 40
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	8e d7       	rcall	.+3868   	; 0x1284 <puts_P>
     368:	80 e6       	ldi	r24, 0x60	; 96
     36a:	cf 91       	pop	r28
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	97 cf       	rjmp	.-210    	; 0x29c <LEDs_SetAllLEDs>

0000036e <EVENT_USB_Host_HostError>:
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	1f 92       	push	r1
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	13 d4       	rcall	.+2086   	; 0xba2 <USB_Disable>
     37c:	1f 92       	push	r1
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	8f 93       	push	r24
     382:	89 ef       	ldi	r24, 0xF9	; 249
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	9f 93       	push	r25
				break;
     388:	8f 93       	push	r24

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	59 d7       	rcall	.+3762   	; 0x123e <printf_P>
     38c:	80 e9       	ldi	r24, 0x90	; 144
     38e:	86 df       	rcall	.-244    	; 0x29c <LEDs_SetAllLEDs>
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	0f 90       	pop	r0
     398:	ff cf       	rjmp	.-2      	; 0x398 <EVENT_USB_Host_HostError+0x2a>

0000039a <EVENT_USB_Host_DeviceEnumerationFailed>:
     39a:	90 91 1f 01 	lds	r25, 0x011F
     39e:	1f 92       	push	r1
     3a0:	9f 93       	push	r25
     3a2:	1f 92       	push	r1
     3a4:	6f 93       	push	r22
     3a6:	1f 92       	push	r1
     3a8:	8f 93       	push	r24
     3aa:	83 ea       	ldi	r24, 0xA3	; 163
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	9f 93       	push	r25
				break;
     3b0:	8f 93       	push	r24
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	45 d7       	rcall	.+3722   	; 0x123e <printf_P>
     3b4:	8d b7       	in	r24, 0x3d	; 61
     3b6:	9e b7       	in	r25, 0x3e	; 62
     3b8:	08 96       	adiw	r24, 0x08	; 8
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	9e bf       	out	0x3e, r25	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	8d bf       	out	0x3d, r24	; 61
     3c4:	80 e9       	ldi	r24, 0x90	; 144
     3c6:	6a cf       	rjmp	.-300    	; 0x29c <LEDs_SetAllLEDs>

000003c8 <ReadNextReport>:
     3c8:	8f 92       	push	r8
     3ca:	9f 92       	push	r9
     3cc:	af 92       	push	r10
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	bf 92       	push	r11
     3d0:	cf 92       	push	r12
     3d2:	df 92       	push	r13

					while (CurrCollectionPath->Parent != NULL)
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	cd b6       	in	r12, 0x3d	; 61
     3e6:	de b6       	in	r13, 0x3e	; 62
     3e8:	80 91 1f 01 	lds	r24, 0x011F
     3ec:	8b 30       	cpi	r24, 0x0B	; 11
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <ReadNextReport+0x2a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	50 c0       	rjmp	.+160    	; 0x492 <ReadNextReport+0xca>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	80 93 a7 00 	sts	0x00A7, r24
     3f8:	80 91 a9 00 	lds	r24, 0x00A9
     3fc:	8f 7b       	andi	r24, 0xBF	; 191
     3fe:	80 93 a9 00 	sts	0x00A9, r24
     402:	80 91 a6 00 	lds	r24, 0x00A6
     406:	80 ff       	sbrs	r24, 0
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	3f c0       	rjmp	.+126    	; 0x488 <ReadNextReport+0xc0>
     40a:	80 91 a6 00 	lds	r24, 0x00A6
     40e:	85 ff       	sbrs	r24, 5
     410:	36 c0       	rjmp	.+108    	; 0x47e <ReadNextReport+0xb6>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	ad b6       	in	r10, 0x3d	; 61
     414:	be b6       	in	r11, 0x3e	; 62
     416:	e0 90 f6 00 	lds	r14, 0x00F6
     41a:	f0 90 f7 00 	lds	r15, 0x00F7
     41e:	8d b7       	in	r24, 0x3d	; 61

				if (UsageListSize)
     420:	9e b7       	in	r25, 0x3e	; 62
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	9e bf       	out	0x3e, r25	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	8d bf       	out	0x3d, r24	; 61
     430:	0d b7       	in	r16, 0x3d	; 61
     432:	1e b7       	in	r17, 0x3e	; 62
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	1f 4f       	sbci	r17, 0xFF	; 255
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	b7 01       	movw	r22, r14
     43e:	c8 01       	movw	r24, r16

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	b9 d2       	rcall	.+1394   	; 0x9b4 <Pipe_Read_Stream_LE>
     442:	e0 0e       	add	r14, r16
     444:	f1 1e       	adc	r15, r17
     446:	8b e9       	ldi	r24, 0x9B	; 155
     448:	88 2e       	mov	r8, r24
     44a:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	98 2e       	mov	r9, r24
     44e:	0e 15       	cp	r16, r14
     450:	1f 05       	cpc	r17, r15
     452:	69 f0       	breq	.+26     	; 0x46e <ReadNextReport+0xa6>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	f8 01       	movw	r30, r16
     456:	81 91       	ld	r24, Z+
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	8f 01       	movw	r16, r30
     45a:	1f 92       	push	r1
     45c:	8f 93       	push	r24
     45e:	9f 92       	push	r9
     460:	8f 92       	push	r8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	ed d6       	rcall	.+3546   	; 0x123e <printf_P>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	f0 cf       	rjmp	.-32     	; 0x44e <ReadNextReport+0x86>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	88 e9       	ldi	r24, 0x98	; 152
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	08 d7       	rcall	.+3600   	; 0x1284 <puts_P>
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	be be       	out	0x3e, r11	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	ad be       	out	0x3d, r10	; 61
     47e:	80 91 a6 00 	lds	r24, 0x00A6
     482:	8e 77       	andi	r24, 0x7E	; 126
     484:	80 93 a6 00 	sts	0x00A6, r24
     488:	80 91 a9 00 	lds	r24, 0x00A9
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48c:	80 64       	ori	r24, 0x40	; 64
     48e:	80 93 a9 00 	sts	0x00A9, r24
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de be       	out	0x3e, r13	; 62
     498:	0f be       	out	0x3f, r0	; 63
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	cd be       	out	0x3d, r12	; 61
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
				break;
     4ac:	bf 90       	pop	r11
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	af 90       	pop	r10
     4b0:	9f 90       	pop	r9
     4b2:	8f 90       	pop	r8
     4b4:	08 95       	ret

000004b6 <main>:
     4b6:	f7 de       	rcall	.-530    	; 0x2a6 <SetupHardware>
     4b8:	82 e3       	ldi	r24, 0x32	; 50
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	e3 d6       	rcall	.+3526   	; 0x1284 <puts_P>
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	ed de       	rcall	.-550    	; 0x29c <LEDs_SetAllLEDs>
     4c2:	78 94       	sei
     4c4:	81 df       	rcall	.-254    	; 0x3c8 <ReadNextReport>
     4c6:	75 d6       	rcall	.+3306   	; 0x11b2 <USB_USBTask>
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <main+0xe>

000004ca <DComp_NextHIDInterface>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	fc 01       	movw	r30, r24
     4cc:	21 81       	ldd	r18, Z+1	; 0x01
     4ce:	24 30       	cpi	r18, 0x04	; 4
     4d0:	29 f4       	brne	.+10     	; 0x4dc <DComp_NextHIDInterface+0x12>
     4d2:	85 81       	ldd	r24, Z+5	; 0x05
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	11 f4       	brne	.+4      	; 0x4dc <DComp_NextHIDInterface+0x12>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	08 95       	ret
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	08 95       	ret

000004e0 <DComp_NextHIDInterfaceDataEndpoint>:
     4e0:	fc 01       	movw	r30, r24
     4e2:	81 81       	ldd	r24, Z+1	; 0x01
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	85 30       	cpi	r24, 0x05	; 5
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <DComp_NextHIDInterfaceDataEndpoint+0x10>
     4e8:	84 30       	cpi	r24, 0x04	; 4
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <DComp_NextHIDInterfaceDataEndpoint+0x14>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	08 95       	ret
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	08 95       	ret
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	08 95       	ret

000004f8 <ProcessConfigurationDescriptor>:
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	c4 50       	subi	r28, 0x04	; 4
     512:	d2 40       	sbci	r29, 0x02	; 2
     514:	0f b6       	in	r0, 0x3f	; 63
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61

					if (UsageListSize)
     51e:	ae 01       	movw	r20, r28
     520:	4f 5f       	subi	r20, 0xFF	; 255
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	cd 5f       	subi	r28, 0xFD	; 253
     526:	dd 4f       	sbci	r29, 0xFD	; 253
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	59 83       	std	Y+1, r21	; 0x01
     52a:	48 83       	st	Y, r20
     52c:	c3 50       	subi	r28, 0x03	; 3
     52e:	d2 40       	sbci	r29, 0x02	; 2
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	32 e0       	ldi	r19, 0x02	; 2
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7d 4f       	sbci	r23, 0xFD	; 253
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	64 d4       	rcall	.+2248   	; 0xe06 <USB_Host_GetDeviceConfigDescriptor>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	09 f4       	brne	.+2      	; 0x544 <ProcessConfigurationDescriptor+0x4c>
     542:	61 c0       	rjmp	.+194    	; 0x606 <ProcessConfigurationDescriptor+0x10e>
     544:	86 30       	cpi	r24, 0x06	; 6
     546:	21 f0       	breq	.+8      	; 0x550 <ProcessConfigurationDescriptor+0x58>
     548:	88 23       	and	r24, r24
						  UsageList[i - 1] = UsageList[i];
     54a:	21 f0       	breq	.+8      	; 0x554 <ProcessConfigurationDescriptor+0x5c>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	60 c0       	rjmp	.+192    	; 0x610 <ProcessConfigurationDescriptor+0x118>
     550:	83 e0       	ldi	r24, 0x03	; 3

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	5e c0       	rjmp	.+188    	; 0x610 <ProcessConfigurationDescriptor+0x118>
     554:	a1 2c       	mov	r10, r1
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	b1 2c       	mov	r11, r1
     558:	c1 2c       	mov	r12, r1
     55a:	d1 2c       	mov	r13, r1
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	01 15       	cp	r16, r1
     562:	11 05       	cpc	r17, r1
     564:	21 f4       	brne	.+8      	; 0x56e <ProcessConfigurationDescriptor+0x76>
     566:	c1 14       	cp	r12, r1
     568:	d1 04       	cpc	r13, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	69 f0       	breq	.+26     	; 0x586 <ProcessConfigurationDescriptor+0x8e>
     56c:	34 c0       	rjmp	.+104    	; 0x5d6 <ProcessConfigurationDescriptor+0xde>
     56e:	40 e7       	ldi	r20, 0x70	; 112
     570:	52 e0       	ldi	r21, 0x02	; 2
     572:	be 01       	movw	r22, r28
     574:	6d 5f       	subi	r22, 0xFD	; 253
     576:	7d 4f       	sbci	r23, 0xFD	; 253
     578:	ce 01       	movw	r24, r28
     57a:	8f 5f       	subi	r24, 0xFF	; 255
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	9d 4f       	sbci	r25, 0xFD	; 253
     57e:	9d d4       	rcall	.+2362   	; 0xeba <USB_GetNextDescriptorComp>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	81 11       	cpse	r24, r1
     582:	f1 cf       	rjmp	.-30     	; 0x566 <ProcessConfigurationDescriptor+0x6e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	15 c0       	rjmp	.+42     	; 0x5b0 <ProcessConfigurationDescriptor+0xb8>
     586:	45 e6       	ldi	r20, 0x65	; 101
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	52 e0       	ldi	r21, 0x02	; 2
     58a:	be 01       	movw	r22, r28
     58c:	6d 5f       	subi	r22, 0xFD	; 253
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	7d 4f       	sbci	r23, 0xFD	; 253
     590:	ce 01       	movw	r24, r28

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	9d 4f       	sbci	r25, 0xFD	; 253
     596:	91 d4       	rcall	.+2338   	; 0xeba <USB_GetNextDescriptorComp>
     598:	81 11       	cpse	r24, r1
     59a:	37 c0       	rjmp	.+110    	; 0x60a <ProcessConfigurationDescriptor+0x112>
     59c:	cd 5f       	subi	r28, 0xFD	; 253
     59e:	dd 4f       	sbci	r29, 0xFD	; 253
     5a0:	08 81       	ld	r16, Y
     5a2:	19 81       	ldd	r17, Y+1	; 0x01
     5a4:	c3 50       	subi	r28, 0x03	; 3
     5a6:	d2 40       	sbci	r29, 0x02	; 2
     5a8:	e1 2c       	mov	r14, r1
     5aa:	f1 2c       	mov	r15, r1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	57 01       	movw	r10, r14
     5ae:	d8 cf       	rjmp	.-80     	; 0x560 <ProcessConfigurationDescriptor+0x68>
     5b0:	cd 5f       	subi	r28, 0xFD	; 253
     5b2:	dd 4f       	sbci	r29, 0xFD	; 253
     5b4:	e8 80       	ld	r14, Y
     5b6:	f9 80       	ldd	r15, Y+1	; 0x01
     5b8:	c3 50       	subi	r28, 0x03	; 3
     5ba:	d2 40       	sbci	r29, 0x02	; 2

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	f7 01       	movw	r30, r14
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	87 ff       	sbrs	r24, 7
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <ProcessConfigurationDescriptor+0xd0>
     5c4:	67 01       	movw	r12, r14
     5c6:	75 01       	movw	r14, r10
     5c8:	c1 14       	cp	r12, r1
     5ca:	d1 04       	cpc	r13, r1
     5cc:	79 f3       	breq	.-34     	; 0x5ac <ProcessConfigurationDescriptor+0xb4>
     5ce:	e1 14       	cp	r14, r1
     5d0:	f1 04       	cpc	r15, r1
     5d2:	61 f3       	breq	.-40     	; 0x5ac <ProcessConfigurationDescriptor+0xb4>
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <ProcessConfigurationDescriptor+0xe0>
     5d6:	75 01       	movw	r14, r10
     5d8:	f6 01       	movw	r30, r12
     5da:	24 81       	ldd	r18, Z+4	; 0x04
     5dc:	35 81       	ldd	r19, Z+5	; 0x05
     5de:	01 e0       	ldi	r16, 0x01	; 1
     5e0:	42 81       	ldd	r20, Z+2	; 0x02
     5e2:	63 e0       	ldi	r22, 0x03	; 3
     5e4:	81 e8       	ldi	r24, 0x81	; 129
     5e6:	33 d2       	rcall	.+1126   	; 0xa4e <Pipe_ConfigurePipe>
     5e8:	f6 01       	movw	r30, r12
     5ea:	86 81       	ldd	r24, Z+6	; 0x06
     5ec:	80 93 ad 00 	sts	0x00AD, r24
     5f0:	e1 14       	cp	r14, r1
     5f2:	f1 04       	cpc	r15, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	61 f0       	breq	.+24     	; 0x60e <ProcessConfigurationDescriptor+0x116>
     5f6:	f7 01       	movw	r30, r14
     5f8:	24 81       	ldd	r18, Z+4	; 0x04
     5fa:	35 81       	ldd	r19, Z+5	; 0x05
     5fc:	42 81       	ldd	r20, Z+2	; 0x02
					  return HID_PARSE_InsufficientReportItems;
     5fe:	63 e0       	ldi	r22, 0x03	; 3
     600:	82 e0       	ldi	r24, 0x02	; 2

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	25 d2       	rcall	.+1098   	; 0xa4e <Pipe_ConfigurePipe>
     604:	04 c0       	rjmp	.+8      	; 0x60e <ProcessConfigurationDescriptor+0x116>
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	03 c0       	rjmp	.+6      	; 0x610 <ProcessConfigurationDescriptor+0x118>
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	01 c0       	rjmp	.+2      	; 0x610 <ProcessConfigurationDescriptor+0x118>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	cc 5f       	subi	r28, 0xFC	; 252
     612:	dd 4f       	sbci	r29, 0xFD	; 253
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	08 95       	ret

00000634 <USB_Host_ResetDevice>:
     634:	80 91 9e 00 	lds	r24, 0x009E
     638:	81 70       	andi	r24, 0x01	; 1
     63a:	90 91 a0 00 	lds	r25, 0x00A0
     63e:	9d 7f       	andi	r25, 0xFD	; 253
     640:	90 93 a0 00 	sts	0x00A0, r25
     644:	90 91 9e 00 	lds	r25, 0x009E
     648:	92 60       	ori	r25, 0x02	; 2
     64a:	90 93 9e 00 	sts	0x009E, r25
     64e:	90 91 9e 00 	lds	r25, 0x009E
     652:	91 fd       	sbrc	r25, 1
     654:	fc cf       	rjmp	.-8      	; 0x64e <USB_Host_ResetDevice+0x1a>
     656:	90 91 9e 00 	lds	r25, 0x009E
     65a:	91 60       	ori	r25, 0x01	; 1
     65c:	90 93 9e 00 	sts	0x009E, r25
     660:	10 92 15 01 	sts	0x0115, r1
     664:	90 91 a0 00 	lds	r25, 0x00A0
     668:	90 72       	andi	r25, 0x20	; 32
     66a:	20 91 a0 00 	lds	r18, 0x00A0
     66e:	2f 7d       	andi	r18, 0xDF	; 223
     670:	20 93 a0 00 	sts	0x00A0, r18
     674:	20 91 9f 00 	lds	r18, 0x009F
     678:	2f 7d       	andi	r18, 0xDF	; 223
     67a:	20 93 9f 00 	sts	0x009F, r18
     67e:	2a e0       	ldi	r18, 0x0A	; 10
     680:	30 91 9f 00 	lds	r19, 0x009F
     684:	35 ff       	sbrs	r19, 5
     686:	0b c0       	rjmp	.+22     	; 0x69e <USB_Host_ResetDevice+0x6a>
					  ParserData->TotalReportItems++;
     688:	20 91 9f 00 	lds	r18, 0x009F
     68c:	2f 7d       	andi	r18, 0xDF	; 223
     68e:	20 93 9f 00 	sts	0x009F, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	20 91 9f 00 	lds	r18, 0x009F
     696:	2d 7f       	andi	r18, 0xFD	; 253
     698:	20 93 9f 00 	sts	0x009F, r18
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <USB_Host_ResetDevice+0x7a>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	ef ec       	ldi	r30, 0xCF	; 207
     6a0:	f7 e0       	ldi	r31, 0x07	; 7
     6a2:	31 97       	sbiw	r30, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <USB_Host_ResetDevice+0x6e>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <USB_Host_ResetDevice+0x74>
     6a8:	00 00       	nop
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	21 50       	subi	r18, 0x01	; 1
     6ac:	49 f7       	brne	.-46     	; 0x680 <USB_Host_ResetDevice+0x4c>
     6ae:	99 23       	and	r25, r25
     6b0:	29 f0       	breq	.+10     	; 0x6bc <USB_Host_ResetDevice+0x88>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	90 91 a0 00 	lds	r25, 0x00A0
     6b6:	90 62       	ori	r25, 0x20	; 32
     6b8:	90 93 a0 00 	sts	0x00A0, r25
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	81 11       	cpse	r24, r1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <USB_Host_ResetDevice+0x96>
     6c0:	80 91 9e 00 	lds	r24, 0x009E
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	8e 7f       	andi	r24, 0xFE	; 254
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	80 93 9e 00 	sts	0x009E, r24
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	80 91 a0 00 	lds	r24, 0x00A0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	80 93 a0 00 	sts	0x00A0, r24
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	08 95       	ret

000006d6 <USB_Host_WaitMS>:
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	20 91 9e 00 	lds	r18, 0x009E

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	90 91 a0 00 	lds	r25, 0x00A0
     6e0:	90 72       	andi	r25, 0x20	; 32
     6e2:	30 91 a0 00 	lds	r19, 0x00A0
     6e6:	3f 7d       	andi	r19, 0xDF	; 223
     6e8:	30 93 a0 00 	sts	0x00A0, r19
     6ec:	30 91 9f 00 	lds	r19, 0x009F
     6f0:	3f 7d       	andi	r19, 0xDF	; 223
     6f2:	30 93 9f 00 	sts	0x009F, r19
     6f6:	30 91 9e 00 	lds	r19, 0x009E
     6fa:	31 60       	ori	r19, 0x01	; 1
     6fc:	30 93 9e 00 	sts	0x009E, r19
     700:	88 23       	and	r24, r24
     702:	39 f1       	breq	.+78     	; 0x752 <USB_Host_WaitMS+0x7c>
     704:	30 91 9f 00 	lds	r19, 0x009F
     708:	35 ff       	sbrs	r19, 5
     70a:	06 c0       	rjmp	.+12     	; 0x718 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     70c:	30 91 9f 00 	lds	r19, 0x009F
     710:	3f 7d       	andi	r19, 0xDF	; 223
     712:	30 93 9f 00 	sts	0x009F, r19
	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     716:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     718:	30 91 1f 01 	lds	r19, 0x011F
     71c:	31 30       	cpi	r19, 0x01	; 1
     71e:	c1 f0       	breq	.+48     	; 0x750 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     720:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     724:	34 ff       	sbrs	r19, 4
     726:	09 c0       	rjmp	.+18     	; 0x73a <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     728:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     72c:	80 91 a6 00 	lds	r24, 0x00A6
     730:	8f 7e       	andi	r24, 0xEF	; 239
     732:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     736:	82 e0       	ldi	r24, 0x02	; 2

			break;
     738:	0c c0       	rjmp	.+24     	; 0x752 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     73a:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     73e:	31 ff       	sbrs	r19, 1
     740:	df cf       	rjmp	.-66     	; 0x700 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     742:	80 91 a6 00 	lds	r24, 0x00A6
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     74c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     74e:	01 c0       	rjmp	.+2      	; 0x752 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     750:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     752:	21 11       	cpse	r18, r1
     754:	05 c0       	rjmp	.+10     	; 0x760 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     756:	20 91 9e 00 	lds	r18, 0x009E
     75a:	2e 7f       	andi	r18, 0xFE	; 254
     75c:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     760:	99 23       	and	r25, r25
     762:	29 f0       	breq	.+10     	; 0x76e <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     764:	90 91 a0 00 	lds	r25, 0x00A0
     768:	90 62       	ori	r25, 0x20	; 32
     76a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     76e:	08 95       	ret

00000770 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	28 97       	sbiw	r28, 0x08	; 8
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     788:	80 91 1f 01 	lds	r24, 0x011F
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	09 f4       	brne	.+2      	; 0x792 <USB_Host_ProcessNextHostState+0x22>
     790:	9c c0       	rjmp	.+312    	; 0x8ca <USB_Host_ProcessNextHostState+0x15a>
     792:	68 f4       	brcc	.+26     	; 0x7ae <USB_Host_ProcessNextHostState+0x3e>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	e1 f1       	breq	.+120    	; 0x810 <USB_Host_ProcessNextHostState+0xa0>
     798:	18 f4       	brcc	.+6      	; 0x7a0 <USB_Host_ProcessNextHostState+0x30>
     79a:	88 23       	and	r24, r24
     79c:	d9 f0       	breq	.+54     	; 0x7d4 <USB_Host_ProcessNextHostState+0x64>
     79e:	ff c0       	rjmp	.+510    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     7a0:	83 30       	cpi	r24, 0x03	; 3
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <USB_Host_ProcessNextHostState+0x36>
     7a4:	3f c0       	rjmp	.+126    	; 0x824 <USB_Host_ProcessNextHostState+0xb4>
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	09 f4       	brne	.+2      	; 0x7ac <USB_Host_ProcessNextHostState+0x3c>
     7aa:	67 c0       	rjmp	.+206    	; 0x87a <USB_Host_ProcessNextHostState+0x10a>
     7ac:	f8 c0       	rjmp	.+496    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     7ae:	87 30       	cpi	r24, 0x07	; 7
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <USB_Host_ProcessNextHostState+0x44>
     7b2:	a6 c0       	rjmp	.+332    	; 0x900 <USB_Host_ProcessNextHostState+0x190>
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <USB_Host_ProcessNextHostState+0x48>
     7b6:	96 c0       	rjmp	.+300    	; 0x8e4 <USB_Host_ProcessNextHostState+0x174>
     7b8:	88 30       	cpi	r24, 0x08	; 8
     7ba:	09 f4       	brne	.+2      	; 0x7be <USB_Host_ProcessNextHostState+0x4e>
     7bc:	bf c0       	rjmp	.+382    	; 0x93c <USB_Host_ProcessNextHostState+0x1cc>
     7be:	89 30       	cpi	r24, 0x09	; 9
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <USB_Host_ProcessNextHostState+0x54>
     7c2:	ed c0       	rjmp	.+474    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7ca:	8a e0       	ldi	r24, 0x0A	; 10
     7cc:	80 93 1f 01 	sts	0x011F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7d0:	a2 dd       	rcall	.-1212   	; 0x316 <EVENT_USB_Host_DeviceEnumerationComplete>
     7d2:	e5 c0       	rjmp	.+458    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
			break;
     7d4:	00 91 13 01 	lds	r16, 0x0113
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7d8:	10 91 14 01 	lds	r17, 0x0114
     7dc:	01 15       	cp	r16, r1
     7de:	11 05       	cpc	r17, r1
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <USB_Host_ProcessNextHostState+0x74>
     7e2:	dd c0       	rjmp	.+442    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7e6:	77 df       	rcall	.-274    	; 0x6d6 <USB_Host_WaitMS>
     7e8:	88 23       	and	r24, r24
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <USB_Host_ProcessNextHostState+0x88>
     7ec:	90 91 12 01 	lds	r25, 0x0112
				{
					USB_HostState = PostWaitState;
     7f0:	90 93 1f 01 	sts	0x011F, r25
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	c5 c0       	rjmp	.+394    	; 0x982 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7f8:	01 50       	subi	r16, 0x01	; 1
					break;
     7fa:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     7fc:	10 93 14 01 	sts	0x0114, r17
     800:	00 93 13 01 	sts	0x0113, r16
     804:	01 2b       	or	r16, r17
     806:	09 f0       	breq	.+2      	; 0x80a <USB_Host_ProcessNextHostState+0x9a>
     808:	ca c0       	rjmp	.+404    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     80a:	80 91 12 01 	lds	r24, 0x0112
				  USB_HostState = PostWaitState;
     80e:	07 c0       	rjmp	.+14     	; 0x81e <USB_Host_ProcessNextHostState+0xae>
     810:	88 ee       	ldi	r24, 0xE8	; 232
     812:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     814:	90 93 14 01 	sts	0x0114, r25
     818:	80 93 13 01 	sts	0x0113, r24
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	80 93 1f 01 	sts	0x011F, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     822:	bd c0       	rjmp	.+378    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     824:	80 91 13 01 	lds	r24, 0x0113
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     828:	90 91 14 01 	lds	r25, 0x0114
     82c:	9c 01       	movw	r18, r24
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	31 09       	sbc	r19, r1
     832:	30 93 14 01 	sts	0x0114, r19
     836:	20 93 13 01 	sts	0x0113, r18
     83a:	89 2b       	or	r24, r25
     83c:	39 f0       	breq	.+14     	; 0x84c <USB_Host_ProcessNextHostState+0xdc>
     83e:	8f ec       	ldi	r24, 0xCF	; 207
     840:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <USB_Host_ProcessNextHostState+0xd2>
     846:	00 c0       	rjmp	.+0      	; 0x848 <USB_Host_ProcessNextHostState+0xd8>
     848:	00 00       	nop
     84a:	a9 c0       	rjmp	.+338    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     84c:	77 98       	cbi	0x0e, 7	; 14
     84e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     852:	80 61       	ori	r24, 0x10	; 16
     854:	80 93 d8 00 	sts	0x00D8, r24
     858:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     85c:	8b 7f       	andi	r24, 0xFB	; 251
     85e:	80 93 dd 00 	sts	0x00DD, r24
     862:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     866:	80 61       	ori	r24, 0x10	; 16
     868:	80 93 d7 00 	sts	0x00D7, r24
     86c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     870:	82 60       	ori	r24, 0x02	; 2
     872:	80 93 dd 00 	sts	0x00DD, r24
     876:	84 e0       	ldi	r24, 0x04	; 4
     878:	d2 cf       	rjmp	.-92     	; 0x81e <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     87a:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     87e:	80 ff       	sbrs	r24, 0
     880:	8e c0       	rjmp	.+284    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     882:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     886:	8e 7f       	andi	r24, 0xFE	; 254
     888:	80 93 9f 00 	sts	0x009F, r24
     88c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     890:	8d 7f       	andi	r24, 0xFD	; 253
     892:	80 93 9f 00 	sts	0x009F, r24
     896:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     89a:	8d 7f       	andi	r24, 0xFD	; 253
     89c:	80 93 df 00 	sts	0x00DF, r24
     8a0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8a4:	82 60       	ori	r24, 0x02	; 2
     8a6:	80 93 de 00 	sts	0x00DE, r24
     8aa:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8ae:	81 60       	ori	r24, 0x01	; 1
     8b0:	80 93 9e 00 	sts	0x009E, r24
     8b4:	34 d1       	rcall	.+616    	; 0xb1e <Pipe_ClearPipes>
     8b6:	10 92 1f 01 	sts	0x011F, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8ba:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 14 01 	sts	0x0114, r25
     8c2:	80 93 13 01 	sts	0x0113, r24
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	0a c0       	rjmp	.+20     	; 0x8de <USB_Host_ProcessNextHostState+0x16e>
     8ca:	b4 de       	rcall	.-664    	; 0x634 <USB_Host_ResetDevice>
     8cc:	10 92 1f 01 	sts	0x011F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8d0:	88 ec       	ldi	r24, 0xC8	; 200
     8d2:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8d4:	90 93 14 01 	sts	0x0114, r25
     8d8:	80 93 13 01 	sts	0x0113, r24
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	80 93 12 01 	sts	0x0112, r24
     8e2:	5d c0       	rjmp	.+186    	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     8e4:	01 e0       	ldi	r16, 0x01	; 1
     8e6:	20 e4       	ldi	r18, 0x40	; 64
     8e8:	30 e0       	ldi	r19, 0x00	; 0
			break;
     8ea:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	ae d0       	rcall	.+348    	; 0xa4e <Pipe_ConfigurePipe>
     8f2:	81 11       	cpse	r24, r1
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <USB_Host_ProcessNextHostState+0x18c>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	43 c0       	rjmp	.+134    	; 0x982 <USB_Host_ProcessNextHostState+0x212>
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	8f cf       	rjmp	.-226    	; 0x81e <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     900:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     902:	e1 e0       	ldi	r30, 0x01	; 1
     904:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     906:	a7 e1       	ldi	r26, 0x17	; 23
     908:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     90a:	01 90       	ld	r0, Z+
     90c:	0d 92       	st	X+, r0
     90e:	8a 95       	dec	r24
     910:	e1 f7       	brne	.-8      	; 0x90a <USB_Host_ProcessNextHostState+0x19a>
     912:	10 92 a7 00 	sts	0x00A7, r1
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	29 d3       	rcall	.+1618   	; 0xf6e <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     91c:	81 11       	cpse	r24, r1
     91e:	30 c0       	rjmp	.+96     	; 0x980 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     920:	88 85       	ldd	r24, Y+8	; 0x08
     922:	80 93 00 01 	sts	0x0100, r24
     926:	86 de       	rcall	.-756    	; 0x634 <USB_Host_ResetDevice>
     928:	10 92 1f 01 	sts	0x011F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     92c:	88 ec       	ldi	r24, 0xC8	; 200
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 14 01 	sts	0x0114, r25

			USB_Host_ResetDevice();
     934:	80 93 13 01 	sts	0x0113, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	d1 cf       	rjmp	.-94     	; 0x8de <USB_Host_ProcessNextHostState+0x16e>
     93c:	20 91 00 01 	lds	r18, 0x0100
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	01 e0       	ldi	r16, 0x01	; 1
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     94a:	81 d0       	rcall	.+258    	; 0xa4e <Pipe_ConfigurePipe>
     94c:	88 23       	and	r24, r24
     94e:	99 f2       	breq	.-90     	; 0x8f6 <USB_Host_ProcessNextHostState+0x186>
     950:	88 e0       	ldi	r24, 0x08	; 8
     952:	e9 e0       	ldi	r30, 0x09	; 9
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	a7 e1       	ldi	r26, 0x17	; 23
     958:	b1 e0       	ldi	r27, 0x01	; 1
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     960:	e1 f7       	brne	.-8      	; 0x95a <USB_Host_ProcessNextHostState+0x1ea>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	03 d3       	rcall	.+1542   	; 0xf6e <USB_Host_SendControlRequest>
     968:	81 11       	cpse	r24, r1
     96a:	0a c0       	rjmp	.+20     	; 0x980 <USB_Host_ProcessNextHostState+0x210>
     96c:	10 92 1f 01 	sts	0x011F, r1
     970:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 14 01 	sts	0x0114, r25
     978:	80 93 13 01 	sts	0x0113, r24
     97c:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     97e:	af cf       	rjmp	.-162    	; 0x8de <USB_Host_ProcessNextHostState+0x16e>
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	20 91 1f 01 	lds	r18, 0x011F
     986:	21 30       	cpi	r18, 0x01	; 1
     988:	51 f0       	breq	.+20     	; 0x99e <USB_Host_ProcessNextHostState+0x22e>
     98a:	68 2f       	mov	r22, r24
     98c:	89 2f       	mov	r24, r25
     98e:	05 dd       	rcall	.-1526   	; 0x39a <EVENT_USB_Host_DeviceEnumerationFailed>
     990:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 93 dd 00 	sts	0x00DD, r24
     99a:	b8 dc       	rcall	.-1680   	; 0x30c <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     99c:	1a d1       	rcall	.+564    	; 0xbd2 <USB_ResetInterface>
     99e:	28 96       	adiw	r28, 0x08	; 8
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16

		USB_ResetInterface();
     9b2:	08 95       	ret

000009b4 <Pipe_Read_Stream_LE>:
     9b4:	cf 92       	push	r12
	}
}
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	7c 01       	movw	r14, r24
     9c6:	8b 01       	movw	r16, r22
     9c8:	ea 01       	movw	r28, r20
     9ca:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9ce:	8f 7c       	andi	r24, 0xCF	; 207
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9d6:	b7 d0       	rcall	.+366    	; 0xb46 <Pipe_WaitUntilReady>
     9d8:	81 11       	cpse	r24, r1
     9da:	30 c0       	rjmp	.+96     	; 0xa3c <Pipe_Read_Stream_LE+0x88>
     9dc:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9de:	31 f0       	breq	.+12     	; 0x9ec <Pipe_Read_Stream_LE+0x38>
     9e0:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     9e2:	99 81       	ldd	r25, Y+1	; 0x01
     9e4:	08 1b       	sub	r16, r24
     9e6:	19 0b       	sbc	r17, r25
     9e8:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9ea:	f9 1e       	adc	r15, r25
     9ec:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9ee:	d1 2c       	mov	r13, r1
     9f0:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     9f2:	11 05       	cpc	r17, r1
     9f4:	11 f1       	breq	.+68     	; 0xa3a <Pipe_Read_Stream_LE+0x86>
     9f6:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9fa:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9fc:	13 c0       	rjmp	.+38     	; 0xa24 <Pipe_Read_Stream_LE+0x70>
     9fe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a02:	8e 77       	andi	r24, 0x7E	; 126
     a04:	80 93 a6 00 	sts	0x00A6, r24
     a08:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     a0a:	41 f0       	breq	.+16     	; 0xa1c <Pipe_Read_Stream_LE+0x68>
     a0c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     a0e:	99 81       	ldd	r25, Y+1	; 0x01
     a10:	8c 0d       	add	r24, r12
     a12:	9d 1d       	adc	r25, r13
     a14:	99 83       	std	Y+1, r25	; 0x01
     a16:	88 83       	st	Y, r24
     a18:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a1a:	10 c0       	rjmp	.+32     	; 0xa3c <Pipe_Read_Stream_LE+0x88>
     a1c:	94 d0       	rcall	.+296    	; 0xb46 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a1e:	88 23       	and	r24, r24
     a20:	39 f3       	breq	.-50     	; 0x9f0 <Pipe_Read_Stream_LE+0x3c>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <Pipe_Read_Stream_LE+0x88>
     a24:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     a28:	f7 01       	movw	r30, r14
     a2a:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a2c:	7f 01       	movw	r14, r30
     a2e:	01 50       	subi	r16, 0x01	; 1
     a30:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a32:	ff ef       	ldi	r31, 0xFF	; 255
     a34:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     a36:	df 0a       	sbc	r13, r31
     a38:	db cf       	rjmp	.-74     	; 0x9f0 <Pipe_Read_Stream_LE+0x3c>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     a3e:	cf 91       	pop	r28
}
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <Pipe_ConfigurePipe>:
     a4e:	0f 93       	push	r16
     a50:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a52:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a54:	87 ff       	sbrs	r24, 7
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <Pipe_ConfigurePipe+0xe>
     a58:	80 e1       	ldi	r24, 0x10	; 16
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <Pipe_ConfigurePipe+0x10>
     a5c:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     a5e:	e7 30       	cpi	r30, 0x07	; 7
     a60:	10 f0       	brcs	.+4      	; 0xa66 <Pipe_ConfigurePipe+0x18>
	  return false;
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	5a c0       	rjmp	.+180    	; 0xb1a <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     a66:	61 11       	cpse	r22, r1
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     a6a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a6c:	90 e4       	ldi	r25, 0x40	; 64
     a6e:	69 9f       	mul	r22, r25
     a70:	b0 01       	movw	r22, r0
     a72:	11 24       	eor	r1, r1
     a74:	4f 70       	andi	r20, 0x0F	; 15
     a76:	46 2b       	or	r20, r22
     a78:	48 2b       	or	r20, r24
     a7a:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a7c:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a80:	5e 13       	cpse	r21, r30
     a82:	19 c0       	rjmp	.+50     	; 0xab6 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     a84:	02 30       	cpi	r16, 0x02	; 2
     a86:	10 f0       	brcs	.+4      	; 0xa8c <Pipe_ConfigurePipe+0x3e>
     a88:	76 e0       	ldi	r23, 0x06	; 6
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <Pipe_ConfigurePipe+0x40>
     a8c:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     a92:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a94:	82 17       	cp	r24, r18
     a96:	93 07       	cpc	r25, r19
     a98:	40 f0       	brcs	.+16     	; 0xaaa <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a9a:	86 2f       	mov	r24, r22
     a9c:	82 95       	swap	r24
     a9e:	80 7f       	andi	r24, 0xF0	; 240
     aa0:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     aa2:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     aa4:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     aaa:	65 30       	cpi	r22, 0x05	; 5
     aac:	b1 f3       	breq	.-20     	; 0xa9a <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     aae:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	ef cf       	rjmp	.-34     	; 0xa94 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ab6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     aba:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     abe:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     ac2:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ac6:	81 fd       	sbrc	r24, 1
     ac8:	07 c0       	rjmp	.+14     	; 0xad8 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     aca:	5f 5f       	subi	r21, 0xFF	; 255
     acc:	57 30       	cpi	r21, 0x07	; 7
     ace:	b1 f6       	brne	.-84     	; 0xa7c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ad0:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	21 c0       	rjmp	.+66     	; 0xb1a <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ad8:	90 91 a9 00 	lds	r25, 0x00A9
     adc:	9e 7f       	andi	r25, 0xFE	; 254
     ade:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ae2:	90 91 ab 00 	lds	r25, 0x00AB
     ae6:	9d 7f       	andi	r25, 0xFD	; 253
     ae8:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     aec:	90 91 a9 00 	lds	r25, 0x00A9
     af0:	91 60       	ori	r25, 0x01	; 1
     af2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     af6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     afa:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     afe:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     b02:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b06:	80 91 a9 00 	lds	r24, 0x00A9
     b0a:	80 62       	ori	r24, 0x20	; 32
     b0c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b10:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     b14:	87 fd       	sbrc	r24, 7
     b16:	d9 cf       	rjmp	.-78     	; 0xaca <Pipe_ConfigurePipe+0x7c>
     b18:	a4 cf       	rjmp	.-184    	; 0xa62 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b1e:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b22:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b24:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b28:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b2c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b30:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b34:	90 91 a9 00 	lds	r25, 0x00A9
     b38:	9e 7f       	andi	r25, 0xFE	; 254
     b3a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b3e:	8f 5f       	subi	r24, 0xFF	; 255
     b40:	87 30       	cpi	r24, 0x07	; 7
     b42:	81 f7       	brne	.-32     	; 0xb24 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b44:	08 95       	ret

00000b46 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b46:	80 91 a2 00 	lds	r24, 0x00A2
     b4a:	90 91 a3 00 	lds	r25, 0x00A3
     b4e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b50:	20 91 aa 00 	lds	r18, 0x00AA
     b54:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b56:	20 31       	cpi	r18, 0x10	; 16
     b58:	29 f4       	brne	.+10     	; 0xb64 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b5a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b5e:	20 ff       	sbrs	r18, 0
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <Pipe_WaitUntilReady+0x26>
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b64:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b68:	22 fd       	sbrc	r18, 2
     b6a:	13 c0       	rjmp	.+38     	; 0xb92 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b6c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b70:	21 fd       	sbrc	r18, 1
     b72:	11 c0       	rjmp	.+34     	; 0xb96 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b74:	20 91 1f 01 	lds	r18, 0x011F
     b78:	21 30       	cpi	r18, 0x01	; 1
     b7a:	79 f0       	breq	.+30     	; 0xb9a <Pipe_WaitUntilReady+0x54>
     b7c:	20 91 a2 00 	lds	r18, 0x00A2
     b80:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	19 f3       	breq	.-58     	; 0xb50 <Pipe_WaitUntilReady+0xa>
     b8a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b8c:	41 f0       	breq	.+16     	; 0xb9e <Pipe_WaitUntilReady+0x58>
     b8e:	c9 01       	movw	r24, r18
     b90:	df cf       	rjmp	.-66     	; 0xb50 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     b9e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     ba0:	08 95       	ret

00000ba2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ba2:	75 d0       	rcall	.+234    	; 0xc8e <USB_INT_DisableAllInterrupts>
     ba4:	7c d0       	rcall	.+248    	; 0xc9e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ba6:	e0 ee       	ldi	r30, 0xE0	; 224
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	80 83       	st	Z, r24
     bb0:	e8 ed       	ldi	r30, 0xD8	; 216
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bb4:	80 81       	ld	r24, Z
     bb6:	8f 77       	andi	r24, 0x7F	; 127
     bb8:	80 83       	st	Z, r24
     bba:	19 bc       	out	0x29, r1	; 41
     bbc:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bbe:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     bc0:	8c 91       	ld	r24, X
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	8c 93       	st	X, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bca:	80 83       	st	Z, r24
     bcc:	10 92 16 01 	sts	0x0116, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bd0:	08 95       	ret

00000bd2 <USB_ResetInterface>:
     bd2:	5d d0       	rcall	.+186    	; 0xc8e <USB_INT_DisableAllInterrupts>
     bd4:	64 d0       	rcall	.+200    	; 0xc9e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bd6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	80 93 d8 00 	sts	0x00D8, r24
     be0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	80 93 d8 00 	sts	0x00D8, r24
     bea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	80 93 d8 00 	sts	0x00D8, r24
     bf4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	80 93 d7 00 	sts	0x00D7, r24
     bfe:	8c e0       	ldi	r24, 0x0C	; 12
     c00:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c02:	8e e0       	ldi	r24, 0x0E	; 14
     c04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c06:	09 b4       	in	r0, 0x29	; 41
     c08:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <USB_ResetInterface+0x34>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 1f 01 	sts	0x011F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c12:	10 92 15 01 	sts	0x0115, r1
	USB_Host_ConfigurationNumber = 0;
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c1c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c20:	80 64       	ori	r24, 0x40	; 64
     c22:	80 93 d8 00 	sts	0x00D8, r24
     c26:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 93 dd 00 	sts	0x00DD, r24
     c30:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c34:	84 60       	ori	r24, 0x04	; 4
     c36:	80 93 dd 00 	sts	0x00DD, r24
     c3a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c3e:	8f 7e       	andi	r24, 0xEF	; 239
     c40:	80 93 d7 00 	sts	0x00D7, r24
     c44:	6f 9a       	sbi	0x0d, 7	; 13
     c46:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c48:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 93 de 00 	sts	0x00DE, r24
     c52:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	80 93 de 00 	sts	0x00DE, r24
     c5c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	80 93 e0 00 	sts	0x00E0, r24
     c66:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c6a:	80 61       	ori	r24, 0x10	; 16
     c6c:	80 93 d8 00 	sts	0x00D8, r24
     c70:	08 95       	ret

00000c72 <USB_Init>:
     c72:	e8 ed       	ldi	r30, 0xD8	; 216
     c74:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c76:	80 81       	ld	r24, Z
     c78:	8f 7e       	andi	r24, 0xEF	; 239
     c7a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c7c:	e7 ed       	ldi	r30, 0xD7	; 215
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 16 01 	sts	0x0116, r24

	USB_ResetInterface();
     c8c:	a2 cf       	rjmp	.-188    	; 0xbd2 <USB_ResetInterface>

00000c8e <USB_INT_DisableAllInterrupts>:
     c8e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8c 7f       	andi	r24, 0xFC	; 252
     c96:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c98:	10 92 a0 00 	sts	0x00A0, r1
     c9c:	08 95       	ret

00000c9e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c9e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     ca2:	10 92 9f 00 	sts	0x009F, r1
     ca6:	08 95       	ret

00000ca8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cce:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cd2:	85 ff       	sbrs	r24, 5
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cd6:	80 91 a0 00 	lds	r24, 0x00A0
     cda:	85 ff       	sbrs	r24, 5
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cde:	80 91 9f 00 	lds	r24, 0x009F
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ce8:	1a d1       	rcall	.+564    	; 0xf1e <USB_Event_Stub>
     cea:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cee:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cf0:	15 c0       	rjmp	.+42     	; 0xd1c <__vector_10+0x74>
     cf2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cf6:	81 ff       	sbrs	r24, 1
     cf8:	11 c0       	rjmp	.+34     	; 0xd1c <__vector_10+0x74>
     cfa:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	80 93 9f 00 	sts	0x009F, r24
     d04:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	80 93 9f 00 	sts	0x009F, r24
     d0e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 a0 00 	sts	0x00A0, r24
     d18:	f9 da       	rcall	.-2574   	; 0x30c <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d1a:	5b df       	rcall	.-330    	; 0xbd2 <USB_ResetInterface>
     d1c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d20:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <__vector_10+0xa6>
     d24:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d28:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <__vector_10+0xa6>
     d2c:	80 91 df 00 	lds	r24, 0x00DF
     d30:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d32:	80 93 df 00 	sts	0x00DF, r24
     d36:	77 98       	cbi	0x0e, 7	; 14
     d38:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d3c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d3e:	80 93 dd 00 	sts	0x00DD, r24
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	14 db       	rcall	.-2520   	; 0x36e <EVENT_USB_Host_HostError>
     d46:	e2 da       	rcall	.-2620   	; 0x30c <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 1f 01 	sts	0x011F, r24
		EVENT_USB_Host_DeviceUnattached();
     d4e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d52:	80 ff       	sbrs	r24, 0
     d54:	17 c0       	rjmp	.+46     	; 0xd84 <__vector_10+0xdc>
     d56:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d5a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d5c:	13 c0       	rjmp	.+38     	; 0xd84 <__vector_10+0xdc>
     d5e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d68:	80 91 de 00 	lds	r24, 0x00DE
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d72:	c7 da       	rcall	.-2674   	; 0x302 <EVENT_USB_Host_DeviceAttached>
     d74:	80 91 a0 00 	lds	r24, 0x00A0
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d7e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d80:	80 93 1f 01 	sts	0x011F, r24
     d84:	80 91 df 00 	lds	r24, 0x00DF
     d88:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <__vector_10+0x100>
     d8c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d90:	82 ff       	sbrs	r24, 2
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d94:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d98:	8b 7f       	andi	r24, 0xFB	; 251
     d9a:	80 93 df 00 	sts	0x00DF, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	fb da       	rcall	.-2570   	; 0x39a <EVENT_USB_Host_DeviceEnumerationFailed>
     da4:	b3 da       	rcall	.-2714   	; 0x30c <EVENT_USB_Host_DeviceUnattached>
     da6:	15 df       	rcall	.-470    	; 0xbd2 <USB_ResetInterface>
     da8:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23

		USB_ResetInterface();
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0b be       	out	0x3b, r0	; 59
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <USB_GetNextDescriptor>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	fc 01       	movw	r30, r24
     dd4:	eb 01       	movw	r28, r22
     dd6:	a8 81       	ld	r26, Y
     dd8:	b9 81       	ldd	r27, Y+1	; 0x01
     dda:	8c 91       	ld	r24, X
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	08 f4       	brcc	.+2      	; 0xdea <USB_GetNextDescriptor+0x1c>
     de8:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dea:	a2 0f       	add	r26, r18
     dec:	b3 1f       	adc	r27, r19
     dee:	eb 01       	movw	r28, r22
     df0:	b9 83       	std	Y+1, r27	; 0x01
     df2:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	82 1b       	sub	r24, r18
     dfa:	93 0b       	sbc	r25, r19
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
			}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	29 97       	sbiw	r28, 0x09	; 9
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	7b 01       	movw	r14, r22
     e28:	8a 01       	movw	r16, r20
     e2a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e2c:	90 e8       	ldi	r25, 0x80	; 128
     e2e:	90 93 17 01 	sts	0x0117, r25
     e32:	96 e0       	ldi	r25, 0x06	; 6
     e34:	90 93 18 01 	sts	0x0118, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e38:	e8 2f       	mov	r30, r24
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e40:	f0 93 1a 01 	sts	0x011A, r31
     e44:	e0 93 19 01 	sts	0x0119, r30
     e48:	10 92 1c 01 	sts	0x011C, r1
     e4c:	10 92 1b 01 	sts	0x011B, r1
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 1e 01 	sts	0x011E, r25
     e58:	80 93 1d 01 	sts	0x011D, r24
     e5c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	84 d0       	rcall	.+264    	; 0xf6e <USB_Host_SendControlRequest>
     e66:	81 11       	cpse	r24, r1
     e68:	19 c0       	rjmp	.+50     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
     e6a:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e6c:	fc 81       	ldd	r31, Y+4	; 0x04
     e6e:	d7 01       	movw	r26, r14
     e70:	ed 93       	st	X+, r30
     e72:	fc 93       	st	X, r31
     e74:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     e76:	df 06       	cpc	r13, r31
     e78:	70 f0       	brcs	.+28     	; 0xe96 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e7a:	f0 93 1e 01 	sts	0x011E, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e7e:	e0 93 1d 01 	sts	0x011D, r30
     e82:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e84:	74 d0       	rcall	.+232    	; 0xf6e <USB_Host_SendControlRequest>
     e86:	81 11       	cpse	r24, r1
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	21 f0       	breq	.+8      	; 0xe9a <USB_Host_GetDeviceConfigDescriptor+0x94>
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     e9e:	0f b6       	in	r0, 0x3f	; 63
}
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	08 95       	ret

00000eba <USB_GetNextDescriptorComp>:
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	8c 01       	movw	r16, r24
     ed0:	eb 01       	movw	r28, r22
     ed2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ed4:	f8 01       	movw	r30, r16
     ed6:	e0 80       	ld	r14, Z
     ed8:	f1 80       	ldd	r15, Z+1	; 0x01
     eda:	e1 14       	cp	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	99 f0       	breq	.+38     	; 0xf06 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee0:	a8 80       	ld	r10, Y
     ee2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     ee4:	be 01       	movw	r22, r28
     ee6:	c8 01       	movw	r24, r16
     ee8:	72 df       	rcall	.-284    	; 0xdce <USB_GetNextDescriptor>
     eea:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	f6 01       	movw	r30, r12
     ef0:	09 95       	icall
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	79 f3       	breq	.-34     	; 0xed4 <USB_GetNextDescriptorComp+0x1a>
     ef6:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ef8:	39 f4       	brne	.+14     	; 0xf08 <USB_GetNextDescriptorComp+0x4e>
     efa:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     efc:	a8 82       	st	Y, r10
     efe:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     f00:	f1 82       	std	Z+1, r15	; 0x01
     f02:	e0 82       	st	Z, r14
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <USB_GetNextDescriptorComp+0x4e>
     f06:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f08:	df 91       	pop	r29
}
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	08 95       	ret

00000f1e <USB_Event_Stub>:
     f1e:	08 95       	ret

00000f20 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f28:	c9 ee       	ldi	r28, 0xE9	; 233
     f2a:	d3 e0       	ldi	r29, 0x03	; 3
     f2c:	11 11       	cpse	r17, r1
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f30:	80 91 a6 00 	lds	r24, 0x00A6
     f34:	83 fd       	sbrc	r24, 3
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	cd db       	rcall	.-2150   	; 0x6d6 <USB_Host_WaitMS>
     f3c:	81 11       	cpse	r24, r1
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <USB_Host_WaitForIOS+0x46>
     f40:	21 97       	sbiw	r28, 0x01	; 1
     f42:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f44:	99 f7       	brne	.-26     	; 0xf2c <USB_Host_WaitForIOS+0xc>
     f46:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <USB_Host_WaitForIOS+0x46>
     f4a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f4c:	29 f4       	brne	.+10     	; 0xf58 <USB_Host_WaitForIOS+0x38>
     f4e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f52:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f54:	f1 cf       	rjmp	.-30     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <USB_Host_WaitForIOS+0x44>
     f58:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f5a:	71 f7       	brne	.-36     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f5c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f60:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f62:	ea cf       	rjmp	.-44     	; 0xf38 <USB_Host_WaitForIOS+0x18>
     f64:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f66:	df 91       	pop	r29
}
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	08 95       	ret

00000f6e <USB_Host_SendControlRequest>:
     f6e:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7a:	f0 90 9e 00 	lds	r15, 0x009E
     f7e:	8f 2d       	mov	r24, r15
     f80:	81 70       	andi	r24, 0x01	; 1
     f82:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f84:	c0 91 1d 01 	lds	r28, 0x011D
     f88:	d0 91 1e 01 	lds	r29, 0x011E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f8c:	80 91 9e 00 	lds	r24, 0x009E
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	9e db       	rcall	.-2244   	; 0x6d6 <USB_Host_WaitMS>
     f9a:	81 11       	cpse	r24, r1
     f9c:	cc c0       	rjmp	.+408    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     f9e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa2:	8f 7c       	andi	r24, 0xCF	; 207
     fa4:	80 93 aa 00 	sts	0x00AA, r24
     fa8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fac:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     fb0:	8f 7e       	andi	r24, 0xEF	; 239
     fb2:	80 93 a6 00 	sts	0x00A6, r24
     fb6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	80 93 a9 00 	sts	0x00A9, r24
     fc0:	e7 e1       	ldi	r30, 0x17	; 23
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fc6:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fca:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fcc:	ef 31       	cpi	r30, 0x1F	; 31
     fce:	f8 07       	cpc	r31, r24
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <USB_Host_SendControlRequest+0x56>
     fd2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fd6:	87 77       	andi	r24, 0x77	; 119
     fd8:	80 93 a6 00 	sts	0x00A6, r24
     fdc:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fde:	a0 df       	rcall	.-192    	; 0xf20 <USB_Host_WaitForIOS>
     fe0:	81 11       	cpse	r24, r1
     fe2:	a9 c0       	rjmp	.+338    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     fe4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	80 93 a9 00 	sts	0x00A9, r24
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	72 db       	rcall	.-2332   	; 0x6d6 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff2:	81 11       	cpse	r24, r1
     ff4:	a0 c0       	rjmp	.+320    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
     ff6:	80 91 17 01 	lds	r24, 0x0117
     ffa:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ffc:	4e c0       	rjmp	.+156    	; 0x109a <USB_Host_SendControlRequest+0x12c>
     ffe:	80 91 aa 00 	lds	r24, 0x00AA
    1002:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	80 93 aa 00 	sts	0x00AA, r24
    100a:	01 15       	cp	r16, r1
    100c:	11 05       	cpc	r17, r1
    100e:	09 f0       	breq	.+2      	; 0x1012 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1010:	3a c0       	rjmp	.+116    	; 0x1086 <USB_Host_SendControlRequest+0x118>
    1012:	80 91 aa 00 	lds	r24, 0x00AA
    1016:	8f 7c       	andi	r24, 0xCF	; 207
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	80 93 aa 00 	sts	0x00AA, r24
    101e:	80 91 a9 00 	lds	r24, 0x00A9
    1022:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1024:	80 93 a9 00 	sts	0x00A9, r24
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	7a df       	rcall	.-268    	; 0xf20 <USB_Host_WaitForIOS>
    102c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102e:	83 c0       	rjmp	.+262    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1030:	80 91 a6 00 	lds	r24, 0x00A6
    1034:	8b 77       	andi	r24, 0x7B	; 123
    1036:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	71 df       	rcall	.-286    	; 0xf20 <USB_Host_WaitForIOS>
    103e:	7b c0       	rjmp	.+246    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1040:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1044:	8f 7b       	andi	r24, 0xBF	; 191
    1046:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	69 df       	rcall	.-302    	; 0xf20 <USB_Host_WaitForIOS>
    104e:	81 11       	cpse	r24, r1
    1050:	72 c0       	rjmp	.+228    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1052:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1056:	90 91 f7 00 	lds	r25, 0x00F7
    105a:	89 2b       	or	r24, r25
    105c:	11 f4       	brne	.+4      	; 0x1062 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    105e:	c0 e0       	ldi	r28, 0x00	; 0
    1060:	d0 e0       	ldi	r29, 0x00	; 0
    1062:	f8 01       	movw	r30, r16
    1064:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1066:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    106a:	90 91 f7 00 	lds	r25, 0x00F7
    106e:	89 2b       	or	r24, r25
    1070:	69 f4       	brne	.+26     	; 0x108c <USB_Host_SendControlRequest+0x11e>
    1072:	80 91 a9 00 	lds	r24, 0x00A9
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    107c:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1080:	8e 77       	andi	r24, 0x7E	; 126
    1082:	80 93 a6 00 	sts	0x00A6, r24
    1086:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1088:	d9 f6       	brne	.-74     	; 0x1040 <USB_Host_SendControlRequest+0xd2>
    108a:	c3 cf       	rjmp	.-122    	; 0x1012 <USB_Host_SendControlRequest+0xa4>
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	89 f3       	breq	.-30     	; 0x1072 <USB_Host_SendControlRequest+0x104>
    1090:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1094:	81 93       	st	Z+, r24
    1096:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1098:	e5 cf       	rjmp	.-54     	; 0x1064 <USB_Host_SendControlRequest+0xf6>
    109a:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    109c:	11 05       	cpc	r17, r1
    109e:	b1 f1       	breq	.+108    	; 0x110c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    10a0:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    10a4:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10a6:	80 62       	ori	r24, 0x20	; 32
    10a8:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ac:	80 91 a9 00 	lds	r24, 0x00A9
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	80 93 a9 00 	sts	0x00A9, r24
    10b6:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b8:	20 97       	sbiw	r28, 0x00	; 0
    10ba:	01 f1       	breq	.+64     	; 0x10fc <USB_Host_SendControlRequest+0x18e>
    10bc:	31 df       	rcall	.-414    	; 0xf20 <USB_Host_WaitForIOS>
    10be:	81 11       	cpse	r24, r1
    10c0:	3a c0       	rjmp	.+116    	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c2:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10c4:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c8:	30 91 f7 00 	lds	r19, 0x00F7
    10cc:	80 91 00 01 	lds	r24, 0x0100
    10d0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	58 f4       	brcc	.+22     	; 0x10ee <USB_Host_SendControlRequest+0x180>
    10d8:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	8c 01       	movw	r16, r24
    10de:	20 81       	ld	r18, Z
    10e0:	20 93 af 00 	sts	0x00AF, r18
    10e4:	21 97       	sbiw	r28, 0x01	; 1
    10e6:	20 97       	sbiw	r28, 0x00	; 0
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <USB_Host_SendControlRequest+0x182>
    10ea:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    10ec:	eb cf       	rjmp	.-42     	; 0x10c4 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10ee:	8f 01       	movw	r16, r30
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10f4:	8b 77       	andi	r24, 0x7B	; 123
    10f6:	80 93 a6 00 	sts	0x00A6, r24
    10fa:	dd cf       	rjmp	.-70     	; 0x10b6 <USB_Host_SendControlRequest+0x148>
    10fc:	11 df       	rcall	.-478    	; 0xf20 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fe:	81 11       	cpse	r24, r1
    1100:	1a c0       	rjmp	.+52     	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    1102:	80 91 a9 00 	lds	r24, 0x00A9
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    110c:	80 91 aa 00 	lds	r24, 0x00AA
    1110:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 93 aa 00 	sts	0x00AA, r24
    1118:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    111c:	8f 7b       	andi	r24, 0xBF	; 191
    111e:	80 93 a9 00 	sts	0x00A9, r24
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	fd de       	rcall	.-518    	; 0xf20 <USB_Host_WaitForIOS>
    1126:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <USB_Host_SendControlRequest+0x1c8>
    112a:	80 91 a6 00 	lds	r24, 0x00A6
    112e:	8e 77       	andi	r24, 0x7E	; 126
    1130:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 91 a9 00 	lds	r25, 0x00A9
    113a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    113c:	90 93 a9 00 	sts	0x00A9, r25
    1140:	f1 10       	cpse	r15, r1
    1142:	05 c0       	rjmp	.+10     	; 0x114e <USB_Host_SendControlRequest+0x1e0>
    1144:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1148:	9e 7f       	andi	r25, 0xFE	; 254
    114a:	90 93 9e 00 	sts	0x009E, r25
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1154:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1160:	ff 90       	pop	r15
    1162:	08 95       	ret

00001164 <USB_Host_SetDeviceConfiguration>:
    1164:	cf 93       	push	r28
				UPRST = 0;
    1166:	c8 2f       	mov	r28, r24
    1168:	10 92 17 01 	sts	0x0117, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    116c:	89 e0       	ldi	r24, 0x09	; 9
    116e:	80 93 18 01 	sts	0x0118, r24
    1172:	2c 2f       	mov	r18, r28
    1174:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1176:	30 93 1a 01 	sts	0x011A, r19
    117a:	20 93 19 01 	sts	0x0119, r18
    117e:	10 92 1c 01 	sts	0x011C, r1
    1182:	10 92 1b 01 	sts	0x011B, r1
    1186:	10 92 1e 01 	sts	0x011E, r1
    118a:	10 92 1d 01 	sts	0x011D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    118e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	eb de       	rcall	.-554    	; 0xf6e <USB_Host_SendControlRequest>
    1198:	81 11       	cpse	r24, r1
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <USB_Host_SetDeviceConfiguration+0x4a>
    119c:	c0 93 15 01 	sts	0x0115, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11a0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <USB_Host_SetDeviceConfiguration+0x44>
    11a4:	9b e0       	ldi	r25, 0x0B	; 11
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <USB_Host_SetDeviceConfiguration+0x46>
    11a8:	9a e0       	ldi	r25, 0x0A	; 10
    11aa:	90 93 1f 01 	sts	0x011F, r25
    11ae:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    11b0:	08 95       	ret

000011b2 <USB_USBTask>:
    11b2:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11b4:	c0 91 a7 00 	lds	r28, 0x00A7
    11b8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    11ba:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11be:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11c2:	d6 da       	rcall	.-2644   	; 0x770 <USB_Host_ProcessNextHostState>
    11c4:	c0 93 a7 00 	sts	0x00A7, r28
    11c8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11ca:	08 95       	ret

000011cc <Serial_putchar>:
    11cc:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    11d0:	95 ff       	sbrs	r25, 5
    11d2:	fc cf       	rjmp	.-8      	; 0x11cc <Serial_putchar>
				UDR1 = DataByte;
    11d4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	08 95       	ret

000011de <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11de:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11e2:	87 ff       	sbrs	r24, 7
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <Serial_getchar+0x18>
    11e6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    11ea:	87 ff       	sbrs	r24, 7
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    11ee:	80 91 ce 00 	lds	r24, 0x00CE
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	08 95       	ret
	  return _FDEV_EOF;
    11f6:	8e ef       	ldi	r24, 0xFE	; 254
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1200:	08 95       	ret

00001202 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1202:	fc 01       	movw	r30, r24
	if (!(Stream))
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	59 f4       	brne	.+22     	; 0x121e <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	90 93 2f 01 	sts	0x012F, r25
    1210:	80 93 2e 01 	sts	0x012E, r24
		stdout = Stream;
    1214:	90 93 31 01 	sts	0x0131, r25
    1218:	80 93 30 01 	sts	0x0130, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    121c:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    121e:	8e e0       	ldi	r24, 0x0E	; 14
    1220:	df 01       	movw	r26, r30
    1222:	1d 92       	st	X+, r1
    1224:	8a 95       	dec	r24
    1226:	e9 f7       	brne	.-6      	; 0x1222 <Serial_CreateStream+0x20>
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	83 83       	std	Z+3, r24	; 0x03
    122c:	86 ee       	ldi	r24, 0xE6	; 230
    122e:	98 e0       	ldi	r25, 0x08	; 8
    1230:	91 87       	std	Z+9, r25	; 0x09
    1232:	80 87       	std	Z+8, r24	; 0x08
    1234:	8f ee       	ldi	r24, 0xEF	; 239
    1236:	98 e0       	ldi	r25, 0x08	; 8
    1238:	93 87       	std	Z+11, r25	; 0x0b
    123a:	82 87       	std	Z+10, r24	; 0x0a
    123c:	08 95       	ret

0000123e <printf_P>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	fe 01       	movw	r30, r28
    124c:	37 96       	adiw	r30, 0x07	; 7
    124e:	61 91       	ld	r22, Z+
    1250:	71 91       	ld	r23, Z+
    1252:	00 e3       	ldi	r16, 0x30	; 48
    1254:	11 e0       	ldi	r17, 0x01	; 1
    1256:	d8 01       	movw	r26, r16
    1258:	8d 91       	ld	r24, X+
    125a:	9c 91       	ld	r25, X
    125c:	dc 01       	movw	r26, r24
    125e:	13 96       	adiw	r26, 0x03	; 3
    1260:	2c 91       	ld	r18, X
    1262:	13 97       	sbiw	r26, 0x03	; 3
    1264:	28 60       	ori	r18, 0x08	; 8
    1266:	13 96       	adiw	r26, 0x03	; 3
    1268:	2c 93       	st	X, r18
    126a:	af 01       	movw	r20, r30
    126c:	3a d0       	rcall	.+116    	; 0x12e2 <vfprintf>
    126e:	d8 01       	movw	r26, r16
    1270:	ed 91       	ld	r30, X+
    1272:	fc 91       	ld	r31, X
    1274:	23 81       	ldd	r18, Z+3	; 0x03
    1276:	27 7f       	andi	r18, 0xF7	; 247
    1278:	23 83       	std	Z+3, r18	; 0x03
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <puts_P>:
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	e0 91 30 01 	lds	r30, 0x0130
    1292:	f0 91 31 01 	lds	r31, 0x0131
    1296:	83 81       	ldd	r24, Z+3	; 0x03
    1298:	81 ff       	sbrs	r24, 1
    129a:	1c c0       	rjmp	.+56     	; 0x12d4 <puts_P+0x50>
    129c:	00 e0       	ldi	r16, 0x00	; 0
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	fe 01       	movw	r30, r28
    12a2:	84 91       	lpm	r24, Z
    12a4:	60 91 30 01 	lds	r22, 0x0130
    12a8:	70 91 31 01 	lds	r23, 0x0131
    12ac:	db 01       	movw	r26, r22
    12ae:	18 96       	adiw	r26, 0x08	; 8
    12b0:	ed 91       	ld	r30, X+
    12b2:	fc 91       	ld	r31, X
    12b4:	19 97       	sbiw	r26, 0x09	; 9
    12b6:	88 23       	and	r24, r24
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <puts_P+0x44>
    12ba:	09 95       	icall
    12bc:	89 2b       	or	r24, r25
    12be:	11 f0       	breq	.+4      	; 0x12c4 <puts_P+0x40>
    12c0:	0f ef       	ldi	r16, 0xFF	; 255
    12c2:	1f ef       	ldi	r17, 0xFF	; 255
    12c4:	21 96       	adiw	r28, 0x01	; 1
    12c6:	ec cf       	rjmp	.-40     	; 0x12a0 <puts_P+0x1c>
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	09 95       	icall
    12cc:	89 2b       	or	r24, r25
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <puts_P+0x50>
    12d0:	c8 01       	movw	r24, r16
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <puts_P+0x54>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <vfprintf>:
    12e2:	2f 92       	push	r2
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2c 97       	sbiw	r28, 0x0c	; 12
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	7c 01       	movw	r14, r24
    1318:	6b 01       	movw	r12, r22
    131a:	8a 01       	movw	r16, r20
    131c:	fc 01       	movw	r30, r24
    131e:	17 82       	std	Z+7, r1	; 0x07
    1320:	16 82       	std	Z+6, r1	; 0x06
    1322:	83 81       	ldd	r24, Z+3	; 0x03
    1324:	81 ff       	sbrs	r24, 1
    1326:	b0 c1       	rjmp	.+864    	; 0x1688 <vfprintf+0x3a6>
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	4c 01       	movw	r8, r24
    132e:	f7 01       	movw	r30, r14
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	f6 01       	movw	r30, r12
    1334:	93 fd       	sbrc	r25, 3
    1336:	85 91       	lpm	r24, Z+
    1338:	93 ff       	sbrs	r25, 3
    133a:	81 91       	ld	r24, Z+
    133c:	6f 01       	movw	r12, r30
    133e:	88 23       	and	r24, r24
    1340:	09 f4       	brne	.+2      	; 0x1344 <vfprintf+0x62>
    1342:	9e c1       	rjmp	.+828    	; 0x1680 <vfprintf+0x39e>
    1344:	85 32       	cpi	r24, 0x25	; 37
    1346:	39 f4       	brne	.+14     	; 0x1356 <vfprintf+0x74>
    1348:	93 fd       	sbrc	r25, 3
    134a:	85 91       	lpm	r24, Z+
    134c:	93 ff       	sbrs	r25, 3
    134e:	81 91       	ld	r24, Z+
    1350:	6f 01       	movw	r12, r30
    1352:	85 32       	cpi	r24, 0x25	; 37
    1354:	21 f4       	brne	.+8      	; 0x135e <vfprintf+0x7c>
    1356:	b7 01       	movw	r22, r14
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	c7 d1       	rcall	.+910    	; 0x16ea <fputc>
    135c:	e8 cf       	rjmp	.-48     	; 0x132e <vfprintf+0x4c>
    135e:	51 2c       	mov	r5, r1
    1360:	31 2c       	mov	r3, r1
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	20 32       	cpi	r18, 0x20	; 32
    1366:	a0 f4       	brcc	.+40     	; 0x1390 <vfprintf+0xae>
    1368:	8b 32       	cpi	r24, 0x2B	; 43
    136a:	69 f0       	breq	.+26     	; 0x1386 <vfprintf+0xa4>
    136c:	30 f4       	brcc	.+12     	; 0x137a <vfprintf+0x98>
    136e:	80 32       	cpi	r24, 0x20	; 32
    1370:	59 f0       	breq	.+22     	; 0x1388 <vfprintf+0xa6>
    1372:	83 32       	cpi	r24, 0x23	; 35
    1374:	69 f4       	brne	.+26     	; 0x1390 <vfprintf+0xae>
    1376:	20 61       	ori	r18, 0x10	; 16
    1378:	2c c0       	rjmp	.+88     	; 0x13d2 <vfprintf+0xf0>
    137a:	8d 32       	cpi	r24, 0x2D	; 45
    137c:	39 f0       	breq	.+14     	; 0x138c <vfprintf+0xaa>
    137e:	80 33       	cpi	r24, 0x30	; 48
    1380:	39 f4       	brne	.+14     	; 0x1390 <vfprintf+0xae>
    1382:	21 60       	ori	r18, 0x01	; 1
    1384:	26 c0       	rjmp	.+76     	; 0x13d2 <vfprintf+0xf0>
    1386:	22 60       	ori	r18, 0x02	; 2
    1388:	24 60       	ori	r18, 0x04	; 4
    138a:	23 c0       	rjmp	.+70     	; 0x13d2 <vfprintf+0xf0>
    138c:	28 60       	ori	r18, 0x08	; 8
    138e:	21 c0       	rjmp	.+66     	; 0x13d2 <vfprintf+0xf0>
    1390:	27 fd       	sbrc	r18, 7
    1392:	27 c0       	rjmp	.+78     	; 0x13e2 <vfprintf+0x100>
    1394:	30 ed       	ldi	r19, 0xD0	; 208
    1396:	38 0f       	add	r19, r24
    1398:	3a 30       	cpi	r19, 0x0A	; 10
    139a:	78 f4       	brcc	.+30     	; 0x13ba <vfprintf+0xd8>
    139c:	26 ff       	sbrs	r18, 6
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0xca>
    13a0:	fa e0       	ldi	r31, 0x0A	; 10
    13a2:	5f 9e       	mul	r5, r31
    13a4:	30 0d       	add	r19, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	53 2e       	mov	r5, r19
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <vfprintf+0xf0>
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	38 9e       	mul	r3, r24
    13b0:	30 0d       	add	r19, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	33 2e       	mov	r3, r19
    13b6:	20 62       	ori	r18, 0x20	; 32
    13b8:	0c c0       	rjmp	.+24     	; 0x13d2 <vfprintf+0xf0>
    13ba:	8e 32       	cpi	r24, 0x2E	; 46
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <vfprintf+0xe4>
    13be:	26 fd       	sbrc	r18, 6
    13c0:	5f c1       	rjmp	.+702    	; 0x1680 <vfprintf+0x39e>
    13c2:	20 64       	ori	r18, 0x40	; 64
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <vfprintf+0xf0>
    13c6:	8c 36       	cpi	r24, 0x6C	; 108
    13c8:	11 f4       	brne	.+4      	; 0x13ce <vfprintf+0xec>
    13ca:	20 68       	ori	r18, 0x80	; 128
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <vfprintf+0xf0>
    13ce:	88 36       	cpi	r24, 0x68	; 104
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <vfprintf+0x100>
    13d2:	f6 01       	movw	r30, r12
    13d4:	93 fd       	sbrc	r25, 3
    13d6:	85 91       	lpm	r24, Z+
    13d8:	93 ff       	sbrs	r25, 3
    13da:	81 91       	ld	r24, Z+
    13dc:	6f 01       	movw	r12, r30
    13de:	81 11       	cpse	r24, r1
    13e0:	c1 cf       	rjmp	.-126    	; 0x1364 <vfprintf+0x82>
    13e2:	98 2f       	mov	r25, r24
    13e4:	9f 7d       	andi	r25, 0xDF	; 223
    13e6:	95 54       	subi	r25, 0x45	; 69
    13e8:	93 30       	cpi	r25, 0x03	; 3
    13ea:	28 f4       	brcc	.+10     	; 0x13f6 <vfprintf+0x114>
    13ec:	0c 5f       	subi	r16, 0xFC	; 252
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	ff e3       	ldi	r31, 0x3F	; 63
    13f2:	f9 83       	std	Y+1, r31	; 0x01
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x12e>
    13f6:	83 36       	cpi	r24, 0x63	; 99
    13f8:	31 f0       	breq	.+12     	; 0x1406 <vfprintf+0x124>
    13fa:	83 37       	cpi	r24, 0x73	; 115
    13fc:	71 f0       	breq	.+28     	; 0x141a <vfprintf+0x138>
    13fe:	83 35       	cpi	r24, 0x53	; 83
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfprintf+0x122>
    1402:	57 c0       	rjmp	.+174    	; 0x14b2 <vfprintf+0x1d0>
    1404:	21 c0       	rjmp	.+66     	; 0x1448 <vfprintf+0x166>
    1406:	f8 01       	movw	r30, r16
    1408:	80 81       	ld	r24, Z
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	0e 5f       	subi	r16, 0xFE	; 254
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	44 24       	eor	r4, r4
    1412:	43 94       	inc	r4
    1414:	51 2c       	mov	r5, r1
    1416:	54 01       	movw	r10, r8
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <vfprintf+0x160>
    141a:	38 01       	movw	r6, r16
    141c:	f2 e0       	ldi	r31, 0x02	; 2
    141e:	6f 0e       	add	r6, r31
    1420:	71 1c       	adc	r7, r1
    1422:	f8 01       	movw	r30, r16
    1424:	a0 80       	ld	r10, Z
    1426:	b1 80       	ldd	r11, Z+1	; 0x01
    1428:	26 ff       	sbrs	r18, 6
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <vfprintf+0x150>
    142c:	65 2d       	mov	r22, r5
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x154>
    1432:	6f ef       	ldi	r22, 0xFF	; 255
    1434:	7f ef       	ldi	r23, 0xFF	; 255
    1436:	c5 01       	movw	r24, r10
    1438:	2c 87       	std	Y+12, r18	; 0x0c
    143a:	4c d1       	rcall	.+664    	; 0x16d4 <strnlen>
    143c:	2c 01       	movw	r4, r24
    143e:	83 01       	movw	r16, r6
    1440:	2c 85       	ldd	r18, Y+12	; 0x0c
    1442:	2f 77       	andi	r18, 0x7F	; 127
    1444:	22 2e       	mov	r2, r18
    1446:	16 c0       	rjmp	.+44     	; 0x1474 <vfprintf+0x192>
    1448:	38 01       	movw	r6, r16
    144a:	f2 e0       	ldi	r31, 0x02	; 2
    144c:	6f 0e       	add	r6, r31
    144e:	71 1c       	adc	r7, r1
    1450:	f8 01       	movw	r30, r16
    1452:	a0 80       	ld	r10, Z
    1454:	b1 80       	ldd	r11, Z+1	; 0x01
    1456:	26 ff       	sbrs	r18, 6
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <vfprintf+0x17e>
    145a:	65 2d       	mov	r22, r5
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x182>
    1460:	6f ef       	ldi	r22, 0xFF	; 255
    1462:	7f ef       	ldi	r23, 0xFF	; 255
    1464:	c5 01       	movw	r24, r10
    1466:	2c 87       	std	Y+12, r18	; 0x0c
    1468:	2a d1       	rcall	.+596    	; 0x16be <strnlen_P>
    146a:	2c 01       	movw	r4, r24
    146c:	2c 85       	ldd	r18, Y+12	; 0x0c
    146e:	20 68       	ori	r18, 0x80	; 128
    1470:	22 2e       	mov	r2, r18
    1472:	83 01       	movw	r16, r6
    1474:	23 fc       	sbrc	r2, 3
    1476:	19 c0       	rjmp	.+50     	; 0x14aa <vfprintf+0x1c8>
    1478:	83 2d       	mov	r24, r3
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	48 16       	cp	r4, r24
    147e:	59 06       	cpc	r5, r25
    1480:	a0 f4       	brcc	.+40     	; 0x14aa <vfprintf+0x1c8>
    1482:	b7 01       	movw	r22, r14
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	30 d1       	rcall	.+608    	; 0x16ea <fputc>
    148a:	3a 94       	dec	r3
    148c:	f5 cf       	rjmp	.-22     	; 0x1478 <vfprintf+0x196>
    148e:	f5 01       	movw	r30, r10
    1490:	27 fc       	sbrc	r2, 7
    1492:	85 91       	lpm	r24, Z+
    1494:	27 fe       	sbrs	r2, 7
    1496:	81 91       	ld	r24, Z+
    1498:	5f 01       	movw	r10, r30
    149a:	b7 01       	movw	r22, r14
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	25 d1       	rcall	.+586    	; 0x16ea <fputc>
    14a0:	31 10       	cpse	r3, r1
    14a2:	3a 94       	dec	r3
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	4f 1a       	sub	r4, r31
    14a8:	51 08       	sbc	r5, r1
    14aa:	41 14       	cp	r4, r1
    14ac:	51 04       	cpc	r5, r1
    14ae:	79 f7       	brne	.-34     	; 0x148e <vfprintf+0x1ac>
    14b0:	de c0       	rjmp	.+444    	; 0x166e <vfprintf+0x38c>
    14b2:	84 36       	cpi	r24, 0x64	; 100
    14b4:	11 f0       	breq	.+4      	; 0x14ba <vfprintf+0x1d8>
    14b6:	89 36       	cpi	r24, 0x69	; 105
    14b8:	31 f5       	brne	.+76     	; 0x1506 <vfprintf+0x224>
    14ba:	f8 01       	movw	r30, r16
    14bc:	27 ff       	sbrs	r18, 7
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <vfprintf+0x1ec>
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	0c 5f       	subi	r16, 0xFC	; 252
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <vfprintf+0x1fc>
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	88 27       	eor	r24, r24
    14d4:	77 fd       	sbrc	r23, 7
    14d6:	80 95       	com	r24
    14d8:	98 2f       	mov	r25, r24
    14da:	0e 5f       	subi	r16, 0xFE	; 254
    14dc:	1f 4f       	sbci	r17, 0xFF	; 255
    14de:	2f 76       	andi	r18, 0x6F	; 111
    14e0:	b2 2e       	mov	r11, r18
    14e2:	97 ff       	sbrs	r25, 7
    14e4:	09 c0       	rjmp	.+18     	; 0x14f8 <vfprintf+0x216>
    14e6:	90 95       	com	r25
    14e8:	80 95       	com	r24
    14ea:	70 95       	com	r23
    14ec:	61 95       	neg	r22
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	20 68       	ori	r18, 0x80	; 128
    14f6:	b2 2e       	mov	r11, r18
    14f8:	2a e0       	ldi	r18, 0x0A	; 10
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	a4 01       	movw	r20, r8
    14fe:	27 d1       	rcall	.+590    	; 0x174e <__ultoa_invert>
    1500:	a8 2e       	mov	r10, r24
    1502:	a8 18       	sub	r10, r8
    1504:	43 c0       	rjmp	.+134    	; 0x158c <vfprintf+0x2aa>
    1506:	85 37       	cpi	r24, 0x75	; 117
    1508:	29 f4       	brne	.+10     	; 0x1514 <vfprintf+0x232>
    150a:	2f 7e       	andi	r18, 0xEF	; 239
    150c:	b2 2e       	mov	r11, r18
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	25 c0       	rjmp	.+74     	; 0x155e <vfprintf+0x27c>
    1514:	f2 2f       	mov	r31, r18
    1516:	f9 7f       	andi	r31, 0xF9	; 249
    1518:	bf 2e       	mov	r11, r31
    151a:	8f 36       	cpi	r24, 0x6F	; 111
    151c:	c1 f0       	breq	.+48     	; 0x154e <vfprintf+0x26c>
    151e:	18 f4       	brcc	.+6      	; 0x1526 <vfprintf+0x244>
    1520:	88 35       	cpi	r24, 0x58	; 88
    1522:	79 f0       	breq	.+30     	; 0x1542 <vfprintf+0x260>
    1524:	ad c0       	rjmp	.+346    	; 0x1680 <vfprintf+0x39e>
    1526:	80 37       	cpi	r24, 0x70	; 112
    1528:	19 f0       	breq	.+6      	; 0x1530 <vfprintf+0x24e>
    152a:	88 37       	cpi	r24, 0x78	; 120
    152c:	21 f0       	breq	.+8      	; 0x1536 <vfprintf+0x254>
    152e:	a8 c0       	rjmp	.+336    	; 0x1680 <vfprintf+0x39e>
    1530:	2f 2f       	mov	r18, r31
    1532:	20 61       	ori	r18, 0x10	; 16
    1534:	b2 2e       	mov	r11, r18
    1536:	b4 fe       	sbrs	r11, 4
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <vfprintf+0x272>
    153a:	8b 2d       	mov	r24, r11
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	b8 2e       	mov	r11, r24
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <vfprintf+0x272>
    1542:	24 ff       	sbrs	r18, 4
    1544:	0a c0       	rjmp	.+20     	; 0x155a <vfprintf+0x278>
    1546:	9f 2f       	mov	r25, r31
    1548:	96 60       	ori	r25, 0x06	; 6
    154a:	b9 2e       	mov	r11, r25
    154c:	06 c0       	rjmp	.+12     	; 0x155a <vfprintf+0x278>
    154e:	28 e0       	ldi	r18, 0x08	; 8
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	05 c0       	rjmp	.+10     	; 0x155e <vfprintf+0x27c>
    1554:	20 e1       	ldi	r18, 0x10	; 16
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x27c>
    155a:	20 e1       	ldi	r18, 0x10	; 16
    155c:	32 e0       	ldi	r19, 0x02	; 2
    155e:	f8 01       	movw	r30, r16
    1560:	b7 fe       	sbrs	r11, 7
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <vfprintf+0x290>
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	0c 5f       	subi	r16, 0xFC	; 252
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	06 c0       	rjmp	.+12     	; 0x157e <vfprintf+0x29c>
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 5f       	subi	r16, 0xFE	; 254
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	a4 01       	movw	r20, r8
    1580:	e6 d0       	rcall	.+460    	; 0x174e <__ultoa_invert>
    1582:	a8 2e       	mov	r10, r24
    1584:	a8 18       	sub	r10, r8
    1586:	fb 2d       	mov	r31, r11
    1588:	ff 77       	andi	r31, 0x7F	; 127
    158a:	bf 2e       	mov	r11, r31
    158c:	b6 fe       	sbrs	r11, 6
    158e:	0b c0       	rjmp	.+22     	; 0x15a6 <vfprintf+0x2c4>
    1590:	2b 2d       	mov	r18, r11
    1592:	2e 7f       	andi	r18, 0xFE	; 254
    1594:	a5 14       	cp	r10, r5
    1596:	50 f4       	brcc	.+20     	; 0x15ac <vfprintf+0x2ca>
    1598:	b4 fe       	sbrs	r11, 4
    159a:	0a c0       	rjmp	.+20     	; 0x15b0 <vfprintf+0x2ce>
    159c:	b2 fc       	sbrc	r11, 2
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x2ce>
    15a0:	2b 2d       	mov	r18, r11
    15a2:	2e 7e       	andi	r18, 0xEE	; 238
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <vfprintf+0x2ce>
    15a6:	7a 2c       	mov	r7, r10
    15a8:	2b 2d       	mov	r18, r11
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x2d0>
    15ac:	7a 2c       	mov	r7, r10
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <vfprintf+0x2d0>
    15b0:	75 2c       	mov	r7, r5
    15b2:	24 ff       	sbrs	r18, 4
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <vfprintf+0x2ee>
    15b6:	fe 01       	movw	r30, r28
    15b8:	ea 0d       	add	r30, r10
    15ba:	f1 1d       	adc	r31, r1
    15bc:	80 81       	ld	r24, Z
    15be:	80 33       	cpi	r24, 0x30	; 48
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <vfprintf+0x2e4>
    15c2:	29 7e       	andi	r18, 0xE9	; 233
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <vfprintf+0x2f6>
    15c6:	22 ff       	sbrs	r18, 2
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0x2f4>
    15ca:	73 94       	inc	r7
    15cc:	73 94       	inc	r7
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <vfprintf+0x2f6>
    15d0:	82 2f       	mov	r24, r18
    15d2:	86 78       	andi	r24, 0x86	; 134
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <vfprintf+0x2f6>
    15d6:	73 94       	inc	r7
    15d8:	23 fd       	sbrc	r18, 3
    15da:	12 c0       	rjmp	.+36     	; 0x1600 <vfprintf+0x31e>
    15dc:	20 ff       	sbrs	r18, 0
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <vfprintf+0x30a>
    15e0:	5a 2c       	mov	r5, r10
    15e2:	73 14       	cp	r7, r3
    15e4:	18 f4       	brcc	.+6      	; 0x15ec <vfprintf+0x30a>
    15e6:	53 0c       	add	r5, r3
    15e8:	57 18       	sub	r5, r7
    15ea:	73 2c       	mov	r7, r3
    15ec:	73 14       	cp	r7, r3
    15ee:	60 f4       	brcc	.+24     	; 0x1608 <vfprintf+0x326>
    15f0:	b7 01       	movw	r22, r14
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	2c 87       	std	Y+12, r18	; 0x0c
    15f8:	78 d0       	rcall	.+240    	; 0x16ea <fputc>
    15fa:	73 94       	inc	r7
    15fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fe:	f6 cf       	rjmp	.-20     	; 0x15ec <vfprintf+0x30a>
    1600:	73 14       	cp	r7, r3
    1602:	10 f4       	brcc	.+4      	; 0x1608 <vfprintf+0x326>
    1604:	37 18       	sub	r3, r7
    1606:	01 c0       	rjmp	.+2      	; 0x160a <vfprintf+0x328>
    1608:	31 2c       	mov	r3, r1
    160a:	24 ff       	sbrs	r18, 4
    160c:	11 c0       	rjmp	.+34     	; 0x1630 <vfprintf+0x34e>
    160e:	b7 01       	movw	r22, r14
    1610:	80 e3       	ldi	r24, 0x30	; 48
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	2c 87       	std	Y+12, r18	; 0x0c
    1616:	69 d0       	rcall	.+210    	; 0x16ea <fputc>
    1618:	2c 85       	ldd	r18, Y+12	; 0x0c
    161a:	22 ff       	sbrs	r18, 2
    161c:	16 c0       	rjmp	.+44     	; 0x164a <vfprintf+0x368>
    161e:	21 ff       	sbrs	r18, 1
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <vfprintf+0x346>
    1622:	88 e5       	ldi	r24, 0x58	; 88
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 c0       	rjmp	.+4      	; 0x162c <vfprintf+0x34a>
    1628:	88 e7       	ldi	r24, 0x78	; 120
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	b7 01       	movw	r22, r14
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <vfprintf+0x366>
    1630:	82 2f       	mov	r24, r18
    1632:	86 78       	andi	r24, 0x86	; 134
    1634:	51 f0       	breq	.+20     	; 0x164a <vfprintf+0x368>
    1636:	21 fd       	sbrc	r18, 1
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x35c>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x35e>
    163e:	8b e2       	ldi	r24, 0x2B	; 43
    1640:	27 fd       	sbrc	r18, 7
    1642:	8d e2       	ldi	r24, 0x2D	; 45
    1644:	b7 01       	movw	r22, r14
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	50 d0       	rcall	.+160    	; 0x16ea <fputc>
    164a:	a5 14       	cp	r10, r5
    164c:	30 f4       	brcc	.+12     	; 0x165a <vfprintf+0x378>
    164e:	b7 01       	movw	r22, r14
    1650:	80 e3       	ldi	r24, 0x30	; 48
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	4a d0       	rcall	.+148    	; 0x16ea <fputc>
    1656:	5a 94       	dec	r5
    1658:	f8 cf       	rjmp	.-16     	; 0x164a <vfprintf+0x368>
    165a:	aa 94       	dec	r10
    165c:	f4 01       	movw	r30, r8
    165e:	ea 0d       	add	r30, r10
    1660:	f1 1d       	adc	r31, r1
    1662:	80 81       	ld	r24, Z
    1664:	b7 01       	movw	r22, r14
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	40 d0       	rcall	.+128    	; 0x16ea <fputc>
    166a:	a1 10       	cpse	r10, r1
    166c:	f6 cf       	rjmp	.-20     	; 0x165a <vfprintf+0x378>
    166e:	33 20       	and	r3, r3
    1670:	09 f4       	brne	.+2      	; 0x1674 <vfprintf+0x392>
    1672:	5d ce       	rjmp	.-838    	; 0x132e <vfprintf+0x4c>
    1674:	b7 01       	movw	r22, r14
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	37 d0       	rcall	.+110    	; 0x16ea <fputc>
    167c:	3a 94       	dec	r3
    167e:	f7 cf       	rjmp	.-18     	; 0x166e <vfprintf+0x38c>
    1680:	f7 01       	movw	r30, r14
    1682:	86 81       	ldd	r24, Z+6	; 0x06
    1684:	97 81       	ldd	r25, Z+7	; 0x07
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x3aa>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	2c 96       	adiw	r28, 0x0c	; 12
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	bf 90       	pop	r11
    16aa:	af 90       	pop	r10
    16ac:	9f 90       	pop	r9
    16ae:	8f 90       	pop	r8
    16b0:	7f 90       	pop	r7
    16b2:	6f 90       	pop	r6
    16b4:	5f 90       	pop	r5
    16b6:	4f 90       	pop	r4
    16b8:	3f 90       	pop	r3
    16ba:	2f 90       	pop	r2
    16bc:	08 95       	ret

000016be <strnlen_P>:
    16be:	fc 01       	movw	r30, r24
    16c0:	05 90       	lpm	r0, Z+
    16c2:	61 50       	subi	r22, 0x01	; 1
    16c4:	70 40       	sbci	r23, 0x00	; 0
    16c6:	01 10       	cpse	r0, r1
    16c8:	d8 f7       	brcc	.-10     	; 0x16c0 <strnlen_P+0x2>
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	8e 0f       	add	r24, r30
    16d0:	9f 1f       	adc	r25, r31
    16d2:	08 95       	ret

000016d4 <strnlen>:
    16d4:	fc 01       	movw	r30, r24
    16d6:	61 50       	subi	r22, 0x01	; 1
    16d8:	70 40       	sbci	r23, 0x00	; 0
    16da:	01 90       	ld	r0, Z+
    16dc:	01 10       	cpse	r0, r1
    16de:	d8 f7       	brcc	.-10     	; 0x16d6 <strnlen+0x2>
    16e0:	80 95       	com	r24
    16e2:	90 95       	com	r25
    16e4:	8e 0f       	add	r24, r30
    16e6:	9f 1f       	adc	r25, r31
    16e8:	08 95       	ret

000016ea <fputc>:
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	18 2f       	mov	r17, r24
    16f4:	09 2f       	mov	r16, r25
    16f6:	eb 01       	movw	r28, r22
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 fd       	sbrc	r24, 1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <fputc+0x1a>
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	9f ef       	ldi	r25, 0xFF	; 255
    1702:	20 c0       	rjmp	.+64     	; 0x1744 <fputc+0x5a>
    1704:	82 ff       	sbrs	r24, 2
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <fputc+0x3e>
    1708:	4e 81       	ldd	r20, Y+6	; 0x06
    170a:	5f 81       	ldd	r21, Y+7	; 0x07
    170c:	2c 81       	ldd	r18, Y+4	; 0x04
    170e:	3d 81       	ldd	r19, Y+5	; 0x05
    1710:	42 17       	cp	r20, r18
    1712:	53 07       	cpc	r21, r19
    1714:	7c f4       	brge	.+30     	; 0x1734 <fputc+0x4a>
    1716:	e8 81       	ld	r30, Y
    1718:	f9 81       	ldd	r31, Y+1	; 0x01
    171a:	9f 01       	movw	r18, r30
    171c:	2f 5f       	subi	r18, 0xFF	; 255
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	39 83       	std	Y+1, r19	; 0x01
    1722:	28 83       	st	Y, r18
    1724:	10 83       	st	Z, r17
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <fputc+0x4a>
    1728:	e8 85       	ldd	r30, Y+8	; 0x08
    172a:	f9 85       	ldd	r31, Y+9	; 0x09
    172c:	81 2f       	mov	r24, r17
    172e:	09 95       	icall
    1730:	89 2b       	or	r24, r25
    1732:	29 f7       	brne	.-54     	; 0x16fe <fputc+0x14>
    1734:	2e 81       	ldd	r18, Y+6	; 0x06
    1736:	3f 81       	ldd	r19, Y+7	; 0x07
    1738:	2f 5f       	subi	r18, 0xFF	; 255
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	3f 83       	std	Y+7, r19	; 0x07
    173e:	2e 83       	std	Y+6, r18	; 0x06
    1740:	81 2f       	mov	r24, r17
    1742:	90 2f       	mov	r25, r16
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <__ultoa_invert>:
    174e:	fa 01       	movw	r30, r20
    1750:	aa 27       	eor	r26, r26
    1752:	28 30       	cpi	r18, 0x08	; 8
    1754:	51 f1       	breq	.+84     	; 0x17aa <__ultoa_invert+0x5c>
    1756:	20 31       	cpi	r18, 0x10	; 16
    1758:	81 f1       	breq	.+96     	; 0x17ba <__ultoa_invert+0x6c>
    175a:	e8 94       	clt
    175c:	6f 93       	push	r22
    175e:	6e 7f       	andi	r22, 0xFE	; 254
    1760:	6e 5f       	subi	r22, 0xFE	; 254
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	8f 4f       	sbci	r24, 0xFF	; 255
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	af 4f       	sbci	r26, 0xFF	; 255
    176a:	b1 e0       	ldi	r27, 0x01	; 1
    176c:	3e d0       	rcall	.+124    	; 0x17ea <__ultoa_invert+0x9c>
    176e:	b4 e0       	ldi	r27, 0x04	; 4
    1770:	3c d0       	rcall	.+120    	; 0x17ea <__ultoa_invert+0x9c>
    1772:	67 0f       	add	r22, r23
    1774:	78 1f       	adc	r23, r24
    1776:	89 1f       	adc	r24, r25
    1778:	9a 1f       	adc	r25, r26
    177a:	a1 1d       	adc	r26, r1
    177c:	68 0f       	add	r22, r24
    177e:	79 1f       	adc	r23, r25
    1780:	8a 1f       	adc	r24, r26
    1782:	91 1d       	adc	r25, r1
    1784:	a1 1d       	adc	r26, r1
    1786:	6a 0f       	add	r22, r26
    1788:	71 1d       	adc	r23, r1
    178a:	81 1d       	adc	r24, r1
    178c:	91 1d       	adc	r25, r1
    178e:	a1 1d       	adc	r26, r1
    1790:	20 d0       	rcall	.+64     	; 0x17d2 <__ultoa_invert+0x84>
    1792:	09 f4       	brne	.+2      	; 0x1796 <__ultoa_invert+0x48>
    1794:	68 94       	set
    1796:	3f 91       	pop	r19
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	26 9f       	mul	r18, r22
    179c:	11 24       	eor	r1, r1
    179e:	30 19       	sub	r19, r0
    17a0:	30 5d       	subi	r19, 0xD0	; 208
    17a2:	31 93       	st	Z+, r19
    17a4:	de f6       	brtc	.-74     	; 0x175c <__ultoa_invert+0xe>
    17a6:	cf 01       	movw	r24, r30
    17a8:	08 95       	ret
    17aa:	46 2f       	mov	r20, r22
    17ac:	47 70       	andi	r20, 0x07	; 7
    17ae:	40 5d       	subi	r20, 0xD0	; 208
    17b0:	41 93       	st	Z+, r20
    17b2:	b3 e0       	ldi	r27, 0x03	; 3
    17b4:	0f d0       	rcall	.+30     	; 0x17d4 <__ultoa_invert+0x86>
    17b6:	c9 f7       	brne	.-14     	; 0x17aa <__ultoa_invert+0x5c>
    17b8:	f6 cf       	rjmp	.-20     	; 0x17a6 <__ultoa_invert+0x58>
    17ba:	46 2f       	mov	r20, r22
    17bc:	4f 70       	andi	r20, 0x0F	; 15
    17be:	40 5d       	subi	r20, 0xD0	; 208
    17c0:	4a 33       	cpi	r20, 0x3A	; 58
    17c2:	18 f0       	brcs	.+6      	; 0x17ca <__ultoa_invert+0x7c>
    17c4:	49 5d       	subi	r20, 0xD9	; 217
    17c6:	31 fd       	sbrc	r19, 1
    17c8:	40 52       	subi	r20, 0x20	; 32
    17ca:	41 93       	st	Z+, r20
    17cc:	02 d0       	rcall	.+4      	; 0x17d2 <__ultoa_invert+0x84>
    17ce:	a9 f7       	brne	.-22     	; 0x17ba <__ultoa_invert+0x6c>
    17d0:	ea cf       	rjmp	.-44     	; 0x17a6 <__ultoa_invert+0x58>
    17d2:	b4 e0       	ldi	r27, 0x04	; 4
    17d4:	a6 95       	lsr	r26
    17d6:	97 95       	ror	r25
    17d8:	87 95       	ror	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	ba 95       	dec	r27
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__ultoa_invert+0x86>
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	61 05       	cpc	r22, r1
    17e6:	71 05       	cpc	r23, r1
    17e8:	08 95       	ret
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	0a 2e       	mov	r0, r26
    17f0:	06 94       	lsr	r0
    17f2:	57 95       	ror	r21
    17f4:	47 95       	ror	r20
    17f6:	37 95       	ror	r19
    17f8:	27 95       	ror	r18
    17fa:	ba 95       	dec	r27
    17fc:	c9 f7       	brne	.-14     	; 0x17f0 <__ultoa_invert+0xa2>
    17fe:	62 0f       	add	r22, r18
    1800:	73 1f       	adc	r23, r19
    1802:	84 1f       	adc	r24, r20
    1804:	95 1f       	adc	r25, r21
    1806:	a0 1d       	adc	r26, r0
    1808:	08 95       	ret

0000180a <_exit>:
    180a:	f8 94       	cli

0000180c <__stop_program>:
    180c:	ff cf       	rjmp	.-2      	; 0x180c <__stop_program>


AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001aa6  00001b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800186  00800186  00001bc0  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005657  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f46e  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000376e  00000000  00000000  0001536e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055d9  00000000  00000000  00018adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001808  00000000  00000000  0001e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f85  00000000  00000000  0001f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac63  00000000  00000000  00024845  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c5       	rjmp	.+2850   	; 0xb4c <__vector_10>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4560>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4553>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4548>:
     11d:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 45     Android Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4546>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     14a:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15a:	6f 6e 2e 0d 0a 00                                   on....

00000160 <__c.4544>:
     160:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 6e 64 72     Not a Valid Andr
				ReportSize     -= 1;
				ReportData     += 1;
     180:	6f 69 64 20 41 63 63 65 73 73 6f 72 79 20 43 6c     oid Accessory Cl
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     190:	61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00           ass Device....

0000019e <__c.4542>:
     19e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ae:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1be:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001cb <__c.4538>:
     1cb:	4e 6f 74 20 69 6e 20 41 63 63 65 73 73 6f 72 79     Not in Accessory
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1db:	20 6d 6f 64 65 2c 20 73 77 69 74 63 68 69 6e 67      mode, switching
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1eb:	2e 2e 2e 0d 0a 00                                   ......

000001f1 <__c.4536>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f1:	4e 6f 74 20 61 6e 20 41 6e 64 72 6f 69 64 20 64     Not an Android d
     201:	65 76 69 63 65 2e 0d 0a 00                          evice....

0000020a <__c.4533>:
     20a:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     21a:	20 44 65 76 69 63 65 20 44 65 73 63 72 69 70 74      Device Descript
     22a:	6f 72 2e 0d 0a 00                                   or....

00000230 <__c.4527>:
     230:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     240:	68 65 64 2e 0d 0a 00                                hed....

00000247 <__c.4522>:
     247:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     257:	0d 0a 00                                            ...

0000025a <__c.4509>:
     25a:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     26a:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27a:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28a:	00 00                                               ..

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
				break;
     290:	cf ef       	ldi	r28, 0xFF	; 255

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	d0 e2       	ldi	r29, 0x20	; 32
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e6 ea       	ldi	r30, 0xA6	; 166
				break;
     2a0:	fa e1       	ldi	r31, 0x1A	; 26

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
				break;
     2ac:	a6 38       	cpi	r26, 0x86	; 134

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	a6 e8       	ldi	r26, 0x86	; 134
     2b6:	b1 e0       	ldi	r27, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
				break;
     2bc:	a8 3a       	cpi	r26, 0xA8	; 168
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	b1 07       	cpc	r27, r17
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	56 d0       	rcall	.+172    	; 0x370 <main>
     2c4:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <LEDs_SetAllLEDs>:
     2ca:	9b b1       	in	r25, 0x0b	; 11
				break;
     2cc:	9f 70       	andi	r25, 0x0F	; 15
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	98 2b       	or	r25, r24
     2d0:	9b b9       	out	0x0b, r25	; 11
     2d2:	08 95       	ret

000002d4 <SetupHardware>:
				break;
     2d4:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	87 7f       	andi	r24, 0xF7	; 247
     2d8:	84 bf       	out	0x34, r24	; 52
     2da:	88 e1       	ldi	r24, 0x18	; 24

				if (ParserData->UsingReportIDs)
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	80 93 60 00 	sts	0x0060, r24
     2e4:	10 92 60 00 	sts	0x0060, r1
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	80 e8       	ldi	r24, 0x80	; 128
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	80 93 61 00 	sts	0x0061, r24
     2f6:	90 93 61 00 	sts	0x0061, r25
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	90 93 cd 00 	sts	0x00CD, r25
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	80 93 cc 00 	sts	0x00CC, r24
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	80 93 ca 00 	sts	0x00CA, r24
     30e:	10 92 c8 00 	sts	0x00C8, r1
     312:	88 e1       	ldi	r24, 0x18	; 24
     314:	80 93 c9 00 	sts	0x00C9, r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	53 9a       	sbi	0x0a, 3	; 10
     31a:	5a 9a       	sbi	0x0b, 2	; 11
     31c:	8a b1       	in	r24, 0x0a	; 10
     31e:	80 6f       	ori	r24, 0xF0	; 240
     320:	8a b9       	out	0x0a, r24	; 10
     322:	8b b1       	in	r24, 0x0b	; 11
     324:	8f 70       	andi	r24, 0x0F	; 15
     326:	8b b9       	out	0x0b, r24	; 11
     328:	f6 d3       	rcall	.+2028   	; 0xb16 <USB_Init>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <Serial_CreateStream>

00000332 <AOAHost_Task>:
     332:	80 91 93 01 	lds	r24, 0x0193
     336:	8b 30       	cpi	r24, 0x0B	; 11
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	d1 f4       	brne	.+52     	; 0x36e <AOAHost_Task+0x3c>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	91 e0       	ldi	r25, 0x01	; 1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	e6 d7       	rcall	.+4044   	; 0x130c <AOA_Host_BytesReceived>
     340:	89 2b       	or	r24, r25
     342:	a9 f0       	breq	.+42     	; 0x36e <AOAHost_Task+0x3c>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 be 09 	call	0x137c	; 0x137c <AOA_Host_ReceiveByte>
     34c:	97 fd       	sbrc	r25, 7
     34e:	0f c0       	rjmp	.+30     	; 0x36e <AOAHost_Task+0x3c>
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	11 f0       	breq	.+4      	; 0x358 <AOAHost_Task+0x26>
     354:	30 e1       	ldi	r19, 0x10	; 16
     356:	01 c0       	rjmp	.+2      	; 0x35a <AOAHost_Task+0x28>
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	2b b1       	in	r18, 0x0b	; 11
     35c:	2f 7e       	andi	r18, 0xEF	; 239
     35e:	23 2b       	or	r18, r19
     360:	2b b9       	out	0x0b, r18	; 11
     362:	60 91 a4 01 	lds	r22, 0x01A4
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     366:	70 91 a5 01 	lds	r23, 0x01A5
     36a:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <fputc>
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	08 95       	ret

00000370 <main>:
     370:	b1 df       	rcall	.-158    	; 0x2d4 <SetupHardware>
     372:	8a e5       	ldi	r24, 0x5A	; 90
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	a6 df       	rcall	.-180    	; 0x2ca <LEDs_SetAllLEDs>
     37e:	78 94       	sei
     380:	d8 df       	rcall	.-80     	; 0x332 <AOAHost_Task>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 29 0a 	call	0x1452	; 0x1452 <AOA_Host_USBTask>
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	7e d6       	rcall	.+3324   	; 0x1088 <USB_USBTask>
     38c:	f9 cf       	rjmp	.-14     	; 0x380 <main+0x10>

0000038e <EVENT_USB_Host_DeviceAttached>:
     38e:	87 e4       	ldi	r24, 0x47	; 71
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	80 ea       	ldi	r24, 0xA0	; 160
     398:	98 cf       	rjmp	.-208    	; 0x2ca <LEDs_SetAllLEDs>

0000039a <EVENT_USB_Host_DeviceUnattached>:
     39a:	80 e3       	ldi	r24, 0x30	; 48
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>
     3a2:	80 e1       	ldi	r24, 0x10	; 16
     3a4:	92 cf       	rjmp	.-220    	; 0x2ca <LEDs_SetAllLEDs>

000003a6 <EVENT_USB_Host_DeviceEnumerationComplete>:
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	c5 51       	subi	r28, 0x15	; 21
				break;
     3b0:	d2 40       	sbci	r29, 0x02	; 2
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	85 df       	rcall	.-246    	; 0x2ca <LEDs_SetAllLEDs>
     3c0:	22 e1       	ldi	r18, 0x12	; 18
     3c2:	ae 01       	movw	r20, r28
     3c4:	4f 5f       	subi	r20, 0xFF	; 255
     3c6:	5d 4f       	sbci	r21, 0xFD	; 253
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	44 d6       	rcall	.+3208   	; 0x1056 <USB_Host_GetDescriptor>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	88 23       	and	r24, r24
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>
     3d2:	8a e0       	ldi	r24, 0x0A	; 10

					while (CurrCollectionPath->Parent != NULL)
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	43 c0       	rjmp	.+134    	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
     3d8:	ae 01       	movw	r20, r28
     3da:	4b 5e       	subi	r20, 0xEB	; 235
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	5d 4f       	sbci	r21, 0xFD	; 253
     3de:	be 01       	movw	r22, r28
     3e0:	6f 5f       	subi	r22, 0xFF	; 255
     3e2:	7d 4f       	sbci	r23, 0xFD	; 253
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	81 d6       	rcall	.+3330   	; 0x10ec <AOA_Host_ValidateAccessoryDevice>
     3ea:	81 11       	cpse	r24, r1
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     3ee:	81 ef       	ldi	r24, 0xF1	; 241
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	35 c0       	rjmp	.+106    	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	cb 5e       	subi	r28, 0xEB	; 235
     3f6:	dd 4f       	sbci	r29, 0xFD	; 253
     3f8:	88 81       	ld	r24, Y
     3fa:	c5 51       	subi	r28, 0x15	; 21
     3fc:	d2 40       	sbci	r29, 0x02	; 2
     3fe:	88 23       	and	r24, r24
     400:	41 f0       	breq	.+16     	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     402:	8b ec       	ldi	r24, 0xCB	; 203
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>
				}

				CurrCollectionPath->Type       = ReportItemData;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0d d7       	rcall	.+3610   	; 0x122a <AOA_Host_StartAccessoryMode>
     410:	30 c0       	rjmp	.+96     	; 0x472 <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	32 e0       	ldi	r19, 0x02	; 2
     416:	ae 01       	movw	r20, r28
     418:	4f 5f       	subi	r20, 0xFF	; 255
     41a:	5f 4f       	sbci	r21, 0xFF	; 255
     41c:	be 01       	movw	r22, r28
     41e:	6d 5e       	subi	r22, 0xED	; 237

				if (UsageListSize)
     420:	7d 4f       	sbci	r23, 0xFD	; 253
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	42 d4       	rcall	.+2180   	; 0xcaa <USB_Host_GetDeviceConfigDescriptor>
     426:	88 23       	and	r24, r24
     428:	19 f0       	breq	.+6      	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	8e e9       	ldi	r24, 0x9E	; 158
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	17 c0       	rjmp	.+46     	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
     430:	cd 5e       	subi	r28, 0xED	; 237
     432:	dd 4f       	sbci	r29, 0xFD	; 253
     434:	68 81       	ld	r22, Y
     436:	79 81       	ldd	r23, Y+1	; 0x01
     438:	c3 51       	subi	r28, 0x13	; 19
     43a:	d2 40       	sbci	r29, 0x02	; 2
     43c:	ae 01       	movw	r20, r28
     43e:	4f 5f       	subi	r20, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	63 d6       	rcall	.+3270   	; 0x110e <AOA_Host_ConfigurePipes>
     448:	88 23       	and	r24, r24
     44a:	19 f0       	breq	.+6      	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0xac>
					  UsageList[i - 1] = UsageList[i];
     44c:	80 e6       	ldi	r24, 0x60	; 96
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	06 c0       	rjmp	.+12     	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
     452:	81 e0       	ldi	r24, 0x01	; 1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	d9 d5       	rcall	.+2994   	; 0x1008 <USB_Host_SetDeviceConfiguration>
     456:	88 23       	and	r24, r24
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	31 f0       	breq	.+12     	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     45a:	8a e3       	ldi	r24, 0x3A	; 58
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 e9       	ldi	r24, 0x90	; 144
     464:	05 c0       	rjmp	.+10     	; 0x470 <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
     466:	8d e1       	ldi	r24, 0x1D	; 29
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <puts_P>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	80 e6       	ldi	r24, 0x60	; 96
     470:	2c df       	rcall	.-424    	; 0x2ca <LEDs_SetAllLEDs>
     472:	cb 5e       	subi	r28, 0xEB	; 235
     474:	dd 4f       	sbci	r29, 0xFD	; 253
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <EVENT_USB_Host_HostError>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	1f 92       	push	r1
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	d9 d2       	rcall	.+1458   	; 0xa46 <USB_Disable>
     494:	1f 92       	push	r1
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	8f 93       	push	r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	8e ee       	ldi	r24, 0xEE	; 238
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	0e 94 9d 0a 	call	0x153a	; 0x153a <printf_P>
     4a6:	80 e9       	ldi	r24, 0x90	; 144
     4a8:	10 df       	rcall	.-480    	; 0x2ca <LEDs_SetAllLEDs>
     4aa:	0f 90       	pop	r0
				break;
     4ac:	0f 90       	pop	r0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <EVENT_USB_Host_HostError+0x2c>

000004b4 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4b4:	90 91 93 01 	lds	r25, 0x0193
     4b8:	1f 92       	push	r1
     4ba:	9f 93       	push	r25
     4bc:	1f 92       	push	r1
     4be:	6f 93       	push	r22
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	88 e9       	ldi	r24, 0x98	; 152
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	9f 93       	push	r25
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	8f 93       	push	r24
     4cc:	0e 94 9d 0a 	call	0x153a	; 0x153a <printf_P>
     4d0:	8d b7       	in	r24, 0x3d	; 61
     4d2:	9e b7       	in	r25, 0x3e	; 62
     4d4:	08 96       	adiw	r24, 0x08	; 8
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	9e bf       	out	0x3e, r25	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	8d bf       	out	0x3d, r24	; 61
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	f3 ce       	rjmp	.-538    	; 0x2ca <LEDs_SetAllLEDs>

000004e4 <USB_Host_ResetDevice>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	80 91 9e 00 	lds	r24, 0x009E
     4e8:	81 70       	andi	r24, 0x01	; 1
     4ea:	90 91 a0 00 	lds	r25, 0x00A0
     4ee:	9d 7f       	andi	r25, 0xFD	; 253
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	90 93 a0 00 	sts	0x00A0, r25
     4f4:	90 91 9e 00 	lds	r25, 0x009E
     4f8:	92 60       	ori	r25, 0x02	; 2
     4fa:	90 93 9e 00 	sts	0x009E, r25
     4fe:	90 91 9e 00 	lds	r25, 0x009E
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	91 fd       	sbrc	r25, 1
     504:	fc cf       	rjmp	.-8      	; 0x4fe <USB_Host_ResetDevice+0x1a>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	90 91 9e 00 	lds	r25, 0x009E
     50a:	91 60       	ori	r25, 0x01	; 1
     50c:	90 93 9e 00 	sts	0x009E, r25
     510:	10 92 89 01 	sts	0x0189, r1
     514:	90 91 a0 00 	lds	r25, 0x00A0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     518:	90 72       	andi	r25, 0x20	; 32
     51a:	20 91 a0 00 	lds	r18, 0x00A0

					if (UsageListSize)
     51e:	2f 7d       	andi	r18, 0xDF	; 223
     520:	20 93 a0 00 	sts	0x00A0, r18
     524:	20 91 9f 00 	lds	r18, 0x009F
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	2f 7d       	andi	r18, 0xDF	; 223
     52a:	20 93 9f 00 	sts	0x009F, r18
     52e:	2a e0       	ldi	r18, 0x0A	; 10
     530:	30 91 9f 00 	lds	r19, 0x009F
     534:	35 ff       	sbrs	r19, 5
     536:	0b c0       	rjmp	.+22     	; 0x54e <USB_Host_ResetDevice+0x6a>
     538:	20 91 9f 00 	lds	r18, 0x009F
     53c:	2f 7d       	andi	r18, 0xDF	; 223

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	20 93 9f 00 	sts	0x009F, r18
     542:	20 91 9f 00 	lds	r18, 0x009F
     546:	2d 7f       	andi	r18, 0xFD	; 253
     548:	20 93 9f 00 	sts	0x009F, r18
						  UsageList[i - 1] = UsageList[i];
     54c:	08 c0       	rjmp	.+16     	; 0x55e <USB_Host_ResetDevice+0x7a>
     54e:	ef ec       	ldi	r30, 0xCF	; 207
     550:	f7 e0       	ldi	r31, 0x07	; 7

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <USB_Host_ResetDevice+0x6e>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	00 c0       	rjmp	.+0      	; 0x558 <USB_Host_ResetDevice+0x74>
     558:	00 00       	nop
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	49 f7       	brne	.-46     	; 0x530 <USB_Host_ResetDevice+0x4c>
     55e:	99 23       	and	r25, r25
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	29 f0       	breq	.+10     	; 0x56c <USB_Host_ResetDevice+0x88>
     562:	90 91 a0 00 	lds	r25, 0x00A0
     566:	90 62       	ori	r25, 0x20	; 32
     568:	90 93 a0 00 	sts	0x00A0, r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56c:	81 11       	cpse	r24, r1
     56e:	05 c0       	rjmp	.+10     	; 0x57a <USB_Host_ResetDevice+0x96>
     570:	80 91 9e 00 	lds	r24, 0x009E
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	80 93 9e 00 	sts	0x009E, r24
     57a:	80 91 a0 00 	lds	r24, 0x00A0
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	82 60       	ori	r24, 0x02	; 2
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	80 93 a0 00 	sts	0x00A0, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	08 95       	ret

00000586 <USB_Host_WaitMS>:
     586:	20 91 9e 00 	lds	r18, 0x009E
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	21 70       	andi	r18, 0x01	; 1
     58c:	90 91 a0 00 	lds	r25, 0x00A0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     590:	90 72       	andi	r25, 0x20	; 32

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	30 91 a0 00 	lds	r19, 0x00A0
     596:	3f 7d       	andi	r19, 0xDF	; 223
     598:	30 93 a0 00 	sts	0x00A0, r19
     59c:	30 91 9f 00 	lds	r19, 0x009F
     5a0:	3f 7d       	andi	r19, 0xDF	; 223
     5a2:	30 93 9f 00 	sts	0x009F, r19
     5a6:	30 91 9e 00 	lds	r19, 0x009E
     5aa:	31 60       	ori	r19, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	30 93 9e 00 	sts	0x009E, r19
     5b0:	88 23       	and	r24, r24
     5b2:	39 f1       	breq	.+78     	; 0x602 <USB_Host_WaitMS+0x7c>
     5b4:	30 91 9f 00 	lds	r19, 0x009F
     5b8:	35 ff       	sbrs	r19, 5
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <USB_Host_WaitMS+0x42>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	30 91 9f 00 	lds	r19, 0x009F
     5c0:	3f 7d       	andi	r19, 0xDF	; 223
     5c2:	30 93 9f 00 	sts	0x009F, r19
     5c6:	81 50       	subi	r24, 0x01	; 1
     5c8:	30 91 93 01 	lds	r19, 0x0193
     5cc:	31 30       	cpi	r19, 0x01	; 1
     5ce:	c1 f0       	breq	.+48     	; 0x600 <USB_Host_WaitMS+0x7a>
     5d0:	30 91 a6 00 	lds	r19, 0x00A6
     5d4:	34 ff       	sbrs	r19, 4
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <USB_Host_WaitMS+0x64>
     5d8:	10 92 f5 00 	sts	0x00F5, r1
     5dc:	80 91 a6 00 	lds	r24, 0x00A6
     5e0:	8f 7e       	andi	r24, 0xEF	; 239
     5e2:	80 93 a6 00 	sts	0x00A6, r24
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	0c c0       	rjmp	.+24     	; 0x602 <USB_Host_WaitMS+0x7c>
     5ea:	30 91 a6 00 	lds	r19, 0x00A6
     5ee:	31 ff       	sbrs	r19, 1
     5f0:	df cf       	rjmp	.-66     	; 0x5b0 <USB_Host_WaitMS+0x2a>
     5f2:	80 91 a6 00 	lds	r24, 0x00A6

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f6:	8d 7f       	andi	r24, 0xFD	; 253
     5f8:	80 93 a6 00 	sts	0x00A6, r24
     5fc:	83 e0       	ldi	r24, 0x03	; 3
					  return HID_PARSE_InsufficientReportItems;
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <USB_Host_WaitMS+0x7c>
     600:	81 e0       	ldi	r24, 0x01	; 1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	21 11       	cpse	r18, r1
     604:	05 c0       	rjmp	.+10     	; 0x610 <USB_Host_WaitMS+0x8a>
     606:	20 91 9e 00 	lds	r18, 0x009E
     60a:	2e 7f       	andi	r18, 0xFE	; 254
     60c:	20 93 9e 00 	sts	0x009E, r18
     610:	99 23       	and	r25, r25
     612:	29 f0       	breq	.+10     	; 0x61e <USB_Host_WaitMS+0x98>
     614:	90 91 a0 00 	lds	r25, 0x00A0
     618:	90 62       	ori	r25, 0x20	; 32
     61a:	90 93 a0 00 	sts	0x00A0, r25
     61e:	08 95       	ret

00000620 <USB_Host_ProcessNextHostState>:
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	28 97       	sbiw	r28, 0x08	; 8
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	80 91 93 01 	lds	r24, 0x0193
     63c:	85 30       	cpi	r24, 0x05	; 5
     63e:	09 f4       	brne	.+2      	; 0x642 <USB_Host_ProcessNextHostState+0x22>
     640:	9a c0       	rjmp	.+308    	; 0x776 <USB_Host_ProcessNextHostState+0x156>
     642:	68 f4       	brcc	.+26     	; 0x65e <USB_Host_ProcessNextHostState+0x3e>
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	e1 f1       	breq	.+120    	; 0x6c0 <USB_Host_ProcessNextHostState+0xa0>
     648:	18 f4       	brcc	.+6      	; 0x650 <USB_Host_ProcessNextHostState+0x30>
     64a:	88 23       	and	r24, r24
     64c:	d9 f0       	breq	.+54     	; 0x684 <USB_Host_ProcessNextHostState+0x64>
     64e:	fd c0       	rjmp	.+506    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	09 f4       	brne	.+2      	; 0x656 <USB_Host_ProcessNextHostState+0x36>
     654:	3d c0       	rjmp	.+122    	; 0x6d0 <USB_Host_ProcessNextHostState+0xb0>
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	09 f4       	brne	.+2      	; 0x65c <USB_Host_ProcessNextHostState+0x3c>
     65a:	65 c0       	rjmp	.+202    	; 0x726 <USB_Host_ProcessNextHostState+0x106>
     65c:	f6 c0       	rjmp	.+492    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     65e:	87 30       	cpi	r24, 0x07	; 7
     660:	09 f4       	brne	.+2      	; 0x664 <USB_Host_ProcessNextHostState+0x44>
     662:	a4 c0       	rjmp	.+328    	; 0x7ac <USB_Host_ProcessNextHostState+0x18c>
     664:	08 f4       	brcc	.+2      	; 0x668 <USB_Host_ProcessNextHostState+0x48>
     666:	94 c0       	rjmp	.+296    	; 0x790 <USB_Host_ProcessNextHostState+0x170>
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	09 f4       	brne	.+2      	; 0x66e <USB_Host_ProcessNextHostState+0x4e>
     66c:	bd c0       	rjmp	.+378    	; 0x7e8 <USB_Host_ProcessNextHostState+0x1c8>
     66e:	89 30       	cpi	r24, 0x09	; 9
     670:	09 f0       	breq	.+2      	; 0x674 <USB_Host_ProcessNextHostState+0x54>
     672:	eb c0       	rjmp	.+470    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 a1 00 	sts	0x00A1, r24
     67a:	8a e0       	ldi	r24, 0x0A	; 10
     67c:	80 93 93 01 	sts	0x0193, r24
     680:	92 de       	rcall	.-732    	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationComplete>
     682:	e3 c0       	rjmp	.+454    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     684:	00 91 87 01 	lds	r16, 0x0187
					  ParserData->TotalReportItems++;
     688:	10 91 88 01 	lds	r17, 0x0188
     68c:	01 15       	cp	r16, r1
     68e:	11 05       	cpc	r17, r1
     690:	09 f4       	brne	.+2      	; 0x694 <USB_Host_ProcessNextHostState+0x74>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	db c0       	rjmp	.+438    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	77 df       	rcall	.-274    	; 0x586 <USB_Host_WaitMS>
     698:	88 23       	and	r24, r24
     69a:	31 f0       	breq	.+12     	; 0x6a8 <USB_Host_ProcessNextHostState+0x88>
     69c:	90 91 86 01 	lds	r25, 0x0186
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	90 93 93 01 	sts	0x0193, r25
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	c3 c0       	rjmp	.+390    	; 0x82e <USB_Host_ProcessNextHostState+0x20e>
     6a8:	01 50       	subi	r16, 0x01	; 1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	11 09       	sbc	r17, r1
     6ac:	10 93 88 01 	sts	0x0188, r17
     6b0:	00 93 87 01 	sts	0x0187, r16
		}
	}

	if (!(ParserData->TotalReportItems))
     6b4:	01 2b       	or	r16, r17
     6b6:	09 f0       	breq	.+2      	; 0x6ba <USB_Host_ProcessNextHostState+0x9a>
     6b8:	c8 c0       	rjmp	.+400    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	80 91 86 01 	lds	r24, 0x0186

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <USB_Host_ProcessNextHostState+0xaa>
     6c0:	10 92 88 01 	sts	0x0188, r1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	10 92 87 01 	sts	0x0187, r1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c8:	83 e0       	ldi	r24, 0x03	; 3
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	80 93 93 01 	sts	0x0193, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	bd c0       	rjmp	.+378    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     6d0:	80 91 87 01 	lds	r24, 0x0187
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	90 91 88 01 	lds	r25, 0x0188
}
     6d8:	9c 01       	movw	r18, r24
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	31 09       	sbc	r19, r1
     6de:	30 93 88 01 	sts	0x0188, r19
     6e2:	20 93 87 01 	sts	0x0187, r18
     6e6:	89 2b       	or	r24, r25
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <USB_Host_ProcessNextHostState+0xd8>
     6ea:	8f ec       	ldi	r24, 0xCF	; 207
     6ec:	97 e0       	ldi	r25, 0x07	; 7
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <USB_Host_ProcessNextHostState+0xce>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <USB_Host_ProcessNextHostState+0xd4>
     6f4:	00 00       	nop
     6f6:	a9 c0       	rjmp	.+338    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     6f8:	77 98       	cbi	0x0e, 7	; 14
     6fa:	80 91 d8 00 	lds	r24, 0x00D8
     6fe:	80 61       	ori	r24, 0x10	; 16
     700:	80 93 d8 00 	sts	0x00D8, r24
     704:	80 91 dd 00 	lds	r24, 0x00DD
     708:	8b 7f       	andi	r24, 0xFB	; 251
     70a:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     70e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     712:	80 61       	ori	r24, 0x10	; 16
     714:	80 93 d7 00 	sts	0x00D7, r24
     718:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     71c:	82 60       	ori	r24, 0x02	; 2
     71e:	80 93 dd 00 	sts	0x00DD, r24
     722:	84 e0       	ldi	r24, 0x04	; 4
     724:	d2 cf       	rjmp	.-92     	; 0x6ca <USB_Host_ProcessNextHostState+0xaa>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     726:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     72a:	80 ff       	sbrs	r24, 0
     72c:	8e c0       	rjmp	.+284    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     72e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     732:	8e 7f       	andi	r24, 0xFE	; 254
     734:	80 93 9f 00 	sts	0x009F, r24
     738:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     73c:	8d 7f       	andi	r24, 0xFD	; 253
     73e:	80 93 9f 00 	sts	0x009F, r24
     742:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	80 93 df 00 	sts	0x00DF, r24
     74c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 93 de 00 	sts	0x00DE, r24
     756:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	80 93 9e 00 	sts	0x009E, r24
     760:	06 d1       	rcall	.+524    	; 0x96e <Pipe_ClearPipes>
     762:	10 92 93 01 	sts	0x0193, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     766:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 88 01 	sts	0x0188, r25
     76e:	80 93 87 01 	sts	0x0187, r24
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	0a c0       	rjmp	.+20     	; 0x78a <USB_Host_ProcessNextHostState+0x16a>
     776:	b6 de       	rcall	.-660    	; 0x4e4 <USB_Host_ResetDevice>
     778:	10 92 93 01 	sts	0x0193, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     77c:	88 ec       	ldi	r24, 0xC8	; 200
     77e:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     780:	90 93 88 01 	sts	0x0188, r25
     784:	80 93 87 01 	sts	0x0187, r24
     788:	86 e0       	ldi	r24, 0x06	; 6
     78a:	80 93 86 01 	sts	0x0186, r24
     78e:	5d c0       	rjmp	.+186    	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     790:	01 e0       	ldi	r16, 0x01	; 1
     792:	20 e4       	ldi	r18, 0x40	; 64
     794:	30 e0       	ldi	r19, 0x00	; 0
			break;
     796:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	61 d0       	rcall	.+194    	; 0x860 <Pipe_ConfigurePipe>
     79e:	81 11       	cpse	r24, r1
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <USB_Host_ProcessNextHostState+0x188>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	94 e0       	ldi	r25, 0x04	; 4
     7a6:	43 c0       	rjmp	.+134    	; 0x82e <USB_Host_ProcessNextHostState+0x20e>
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	8f cf       	rjmp	.-226    	; 0x6ca <USB_Host_ProcessNextHostState+0xaa>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7ac:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7ae:	eb e1       	ldi	r30, 0x1B	; 27
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7b2:	ab e8       	ldi	r26, 0x8B	; 139
     7b4:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	8a 95       	dec	r24
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <USB_Host_ProcessNextHostState+0x196>
     7be:	10 92 a7 00 	sts	0x00A7, r1
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	25 d3       	rcall	.+1610   	; 0xe12 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7c8:	81 11       	cpse	r24, r1
     7ca:	30 c0       	rjmp	.+96     	; 0x82c <USB_Host_ProcessNextHostState+0x20c>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7cc:	88 85       	ldd	r24, Y+8	; 0x08
     7ce:	80 93 1a 01 	sts	0x011A, r24
     7d2:	88 de       	rcall	.-752    	; 0x4e4 <USB_Host_ResetDevice>
     7d4:	10 92 93 01 	sts	0x0193, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7d8:	88 ec       	ldi	r24, 0xC8	; 200
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	90 93 88 01 	sts	0x0188, r25

			USB_Host_ResetDevice();
     7e0:	80 93 87 01 	sts	0x0187, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     7e4:	88 e0       	ldi	r24, 0x08	; 8
     7e6:	d1 cf       	rjmp	.-94     	; 0x78a <USB_Host_ProcessNextHostState+0x16a>
     7e8:	20 91 1a 01 	lds	r18, 0x011A
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	01 e0       	ldi	r16, 0x01	; 1
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     7f6:	34 d0       	rcall	.+104    	; 0x860 <Pipe_ConfigurePipe>
     7f8:	88 23       	and	r24, r24
     7fa:	99 f2       	breq	.-90     	; 0x7a2 <USB_Host_ProcessNextHostState+0x182>
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	e3 e2       	ldi	r30, 0x23	; 35
     800:	f1 e0       	ldi	r31, 0x01	; 1
     802:	ab e8       	ldi	r26, 0x8B	; 139
     804:	b1 e0       	ldi	r27, 0x01	; 1
     806:	01 90       	ld	r0, Z+
     808:	0d 92       	st	X+, r0
     80a:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     80c:	e1 f7       	brne	.-8      	; 0x806 <USB_Host_ProcessNextHostState+0x1e6>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	ff d2       	rcall	.+1534   	; 0xe12 <USB_Host_SendControlRequest>
     814:	81 11       	cpse	r24, r1
     816:	0a c0       	rjmp	.+20     	; 0x82c <USB_Host_ProcessNextHostState+0x20c>
     818:	10 92 93 01 	sts	0x0193, r1
     81c:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 88 01 	sts	0x0188, r25
     824:	80 93 87 01 	sts	0x0187, r24
     828:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     82a:	af cf       	rjmp	.-162    	; 0x78a <USB_Host_ProcessNextHostState+0x16a>
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	20 91 93 01 	lds	r18, 0x0193
     832:	21 30       	cpi	r18, 0x01	; 1
     834:	51 f0       	breq	.+20     	; 0x84a <USB_Host_ProcessNextHostState+0x22a>
     836:	68 2f       	mov	r22, r24
     838:	89 2f       	mov	r24, r25
     83a:	3c de       	rcall	.-904    	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationFailed>
     83c:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     840:	81 60       	ori	r24, 0x01	; 1
     842:	80 93 dd 00 	sts	0x00DD, r24
     846:	a9 dd       	rcall	.-1198   	; 0x39a <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     848:	16 d1       	rcall	.+556    	; 0xa76 <USB_ResetInterface>
     84a:	28 96       	adiw	r28, 0x08	; 8
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16

		USB_ResetInterface();
     85e:	08 95       	ret

00000860 <Pipe_ConfigurePipe>:
     860:	0f 93       	push	r16
	}
}
     862:	e8 2f       	mov	r30, r24
     864:	ef 70       	andi	r30, 0x0F	; 15
     866:	87 ff       	sbrs	r24, 7
     868:	02 c0       	rjmp	.+4      	; 0x86e <Pipe_ConfigurePipe+0xe>
     86a:	80 e1       	ldi	r24, 0x10	; 16
     86c:	01 c0       	rjmp	.+2      	; 0x870 <Pipe_ConfigurePipe+0x10>
     86e:	80 e2       	ldi	r24, 0x20	; 32
     870:	e7 30       	cpi	r30, 0x07	; 7
     872:	10 f0       	brcs	.+4      	; 0x878 <Pipe_ConfigurePipe+0x18>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	5a c0       	rjmp	.+180    	; 0x92c <Pipe_ConfigurePipe+0xcc>
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;

	if (Number >= PIPE_TOTAL_PIPES)
	  return false;

	if (Type == EP_TYPE_CONTROL)
     878:	61 11       	cpse	r22, r1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     87c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     87e:	90 e4       	ldi	r25, 0x40	; 64
     880:	69 9f       	mul	r22, r25
     882:	b0 01       	movw	r22, r0
     884:	11 24       	eor	r1, r1
     886:	4f 70       	andi	r20, 0x0F	; 15
     888:	46 2b       	or	r20, r22
     88a:	48 2b       	or	r20, r24
     88c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     88e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     892:	5e 13       	cpse	r21, r30
     894:	19 c0       	rjmp	.+50     	; 0x8c8 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     896:	02 30       	cpi	r16, 0x02	; 2
     898:	10 f0       	brcs	.+4      	; 0x89e <Pipe_ConfigurePipe+0x3e>
     89a:	76 e0       	ldi	r23, 0x06	; 6
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <Pipe_ConfigurePipe+0x40>
     89e:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     8a4:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	40 f0       	brcs	.+16     	; 0x8bc <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     8ac:	86 2f       	mov	r24, r22
     8ae:	82 95       	swap	r24
     8b0:	80 7f       	andi	r24, 0xF0	; 240
     8b2:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8b4:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     8b6:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e c0       	rjmp	.+28     	; 0x8d8 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8bc:	65 30       	cpi	r22, 0x05	; 5
     8be:	b1 f3       	breq	.-20     	; 0x8ac <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     8c0:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	ef cf       	rjmp	.-34     	; 0x8a6 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     8c8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     8cc:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     8d0:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     8d4:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     8d8:	81 fd       	sbrc	r24, 1
     8da:	07 c0       	rjmp	.+14     	; 0x8ea <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8dc:	5f 5f       	subi	r21, 0xFF	; 255
     8de:	57 30       	cpi	r21, 0x07	; 7
     8e0:	b1 f6       	brne	.-84     	; 0x88e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8e2:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	21 c0       	rjmp	.+66     	; 0x92c <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8ea:	90 91 a9 00 	lds	r25, 0x00A9
     8ee:	9e 7f       	andi	r25, 0xFE	; 254
     8f0:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     8f4:	90 91 ab 00 	lds	r25, 0x00AB
     8f8:	9d 7f       	andi	r25, 0xFD	; 253
     8fa:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     8fe:	90 91 a9 00 	lds	r25, 0x00A9
     902:	91 60       	ori	r25, 0x01	; 1
     904:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     908:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     90c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     910:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     914:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     918:	80 91 a9 00 	lds	r24, 0x00A9
     91c:	80 62       	ori	r24, 0x20	; 32
     91e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     922:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     926:	87 fd       	sbrc	r24, 7
     928:	d9 cf       	rjmp	.-78     	; 0x8dc <Pipe_ConfigurePipe+0x7c>
     92a:	a4 cf       	rjmp	.-184    	; 0x874 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	f6 2e       	mov	r15, r22
     93c:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	1f 15       	cp	r17, r15
     942:	71 f0       	breq	.+28     	; 0x960 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     944:	88 81       	ld	r24, Y
     946:	88 23       	and	r24, r24
     948:	41 f0       	breq	.+16     	; 0x95a <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	3a 81       	ldd	r19, Y+2	; 0x02
     94e:	0d 81       	ldd	r16, Y+5	; 0x05
     950:	4b 81       	ldd	r20, Y+3	; 0x03
     952:	6c 81       	ldd	r22, Y+4	; 0x04
     954:	85 df       	rcall	.-246    	; 0x860 <Pipe_ConfigurePipe>
     956:	88 23       	and	r24, r24
     958:	21 f0       	breq	.+8      	; 0x962 <Pipe_ConfigurePipeTable+0x32>
     95a:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     95c:	26 96       	adiw	r28, 0x06	; 6
     95e:	f0 cf       	rjmp	.-32     	; 0x940 <Pipe_ConfigurePipeTable+0x10>
     960:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     962:	df 91       	pop	r29
}
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	08 95       	ret

0000096e <Pipe_ClearPipes>:
     96e:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     972:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     974:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     978:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     97c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     980:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     984:	90 91 a9 00 	lds	r25, 0x00A9
     988:	9e 7f       	andi	r25, 0xFE	; 254
     98a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	87 30       	cpi	r24, 0x07	; 7
     992:	81 f7       	brne	.-32     	; 0x974 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     994:	08 95       	ret

00000996 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     996:	90 91 a7 00 	lds	r25, 0x00A7
     99a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     99c:	20 91 aa 00 	lds	r18, 0x00AA
     9a0:	20 ff       	sbrs	r18, 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <Pipe_IsEndpointBound+0x12>
     9a4:	20 e8       	ldi	r18, 0x80	; 128
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <Pipe_IsEndpointBound+0x14>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     9aa:	42 2f       	mov	r20, r18
     9ac:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ae:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9b0:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9b4:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9b8:	27 ff       	sbrs	r18, 7
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     9bc:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9c0:	53 2f       	mov	r21, r19
     9c2:	5f 70       	andi	r21, 0x0F	; 15
     9c4:	35 ff       	sbrs	r19, 5
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <Pipe_IsEndpointBound+0x36>
     9c8:	20 e8       	ldi	r18, 0x80	; 128
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <Pipe_IsEndpointBound+0x38>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9d0:	28 17       	cp	r18, r24
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d4:	9f 5f       	subi	r25, 0xFF	; 255
     9d6:	97 30       	cpi	r25, 0x07	; 7
     9d8:	59 f7       	brne	.-42     	; 0x9b0 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9da:	94 2f       	mov	r25, r20
     9dc:	9f 70       	andi	r25, 0x0F	; 15
     9de:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9e8:	08 95       	ret

000009ea <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9ea:	80 91 a2 00 	lds	r24, 0x00A2
     9ee:	90 91 a3 00 	lds	r25, 0x00A3
     9f2:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9f4:	20 91 aa 00 	lds	r18, 0x00AA
     9f8:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     9fa:	20 31       	cpi	r18, 0x10	; 16
     9fc:	29 f4       	brne	.+10     	; 0xa08 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     9fe:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a02:	20 ff       	sbrs	r18, 0
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <Pipe_WaitUntilReady+0x26>
     a06:	17 c0       	rjmp	.+46     	; 0xa36 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a08:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a0c:	22 fd       	sbrc	r18, 2
     a0e:	13 c0       	rjmp	.+38     	; 0xa36 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a10:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a14:	21 fd       	sbrc	r18, 1
     a16:	11 c0       	rjmp	.+34     	; 0xa3a <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a18:	20 91 93 01 	lds	r18, 0x0193
     a1c:	21 30       	cpi	r18, 0x01	; 1
     a1e:	79 f0       	breq	.+30     	; 0xa3e <Pipe_WaitUntilReady+0x54>
     a20:	20 91 a2 00 	lds	r18, 0x00A2
     a24:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	19 f3       	breq	.-58     	; 0x9f4 <Pipe_WaitUntilReady+0xa>
     a2e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a30:	41 f0       	breq	.+16     	; 0xa42 <Pipe_WaitUntilReady+0x58>
     a32:	c9 01       	movw	r24, r18
     a34:	df cf       	rjmp	.-66     	; 0x9f4 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     a42:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     a44:	08 95       	ret

00000a46 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a46:	75 d0       	rcall	.+234    	; 0xb32 <USB_INT_DisableAllInterrupts>
     a48:	7c d0       	rcall	.+248    	; 0xb42 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a4a:	e0 ee       	ldi	r30, 0xE0	; 224
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a4e:	80 81       	ld	r24, Z
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
     a54:	e8 ed       	ldi	r30, 0xD8	; 216
     a56:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a58:	80 81       	ld	r24, Z
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	80 83       	st	Z, r24
     a5e:	19 bc       	out	0x29, r1	; 41
     a60:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a62:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     a64:	8c 91       	ld	r24, X
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	8c 93       	st	X, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a6e:	80 83       	st	Z, r24
     a70:	10 92 8a 01 	sts	0x018A, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a74:	08 95       	ret

00000a76 <USB_ResetInterface>:
     a76:	5d d0       	rcall	.+186    	; 0xb32 <USB_INT_DisableAllInterrupts>
     a78:	64 d0       	rcall	.+200    	; 0xb42 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a7a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a7e:	8f 77       	andi	r24, 0x7F	; 127
     a80:	80 93 d8 00 	sts	0x00D8, r24
     a84:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     a88:	80 68       	ori	r24, 0x80	; 128
     a8a:	80 93 d8 00 	sts	0x00D8, r24
     a8e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	80 93 d8 00 	sts	0x00D8, r24
     a98:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a9c:	8f 77       	andi	r24, 0x7F	; 127
     a9e:	80 93 d7 00 	sts	0x00D7, r24
     aa2:	8c e0       	ldi	r24, 0x0C	; 12
     aa4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aa6:	8e e0       	ldi	r24, 0x0E	; 14
     aa8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     aaa:	09 b4       	in	r0, 0x29	; 41
     aac:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <USB_ResetInterface+0x34>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 93 01 	sts	0x0193, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ab6:	10 92 89 01 	sts	0x0189, r1
	USB_Host_ConfigurationNumber = 0;
     aba:	80 e4       	ldi	r24, 0x40	; 64
     abc:	80 93 1a 01 	sts	0x011A, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ac0:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ac4:	80 64       	ori	r24, 0x40	; 64
     ac6:	80 93 d8 00 	sts	0x00D8, r24
     aca:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	80 93 dd 00 	sts	0x00DD, r24
     ad4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ad8:	84 60       	ori	r24, 0x04	; 4
     ada:	80 93 dd 00 	sts	0x00DD, r24
     ade:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     ae2:	8f 7e       	andi	r24, 0xEF	; 239
     ae4:	80 93 d7 00 	sts	0x00D7, r24
     ae8:	6f 9a       	sbi	0x0d, 7	; 13
     aea:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     aec:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	80 93 de 00 	sts	0x00DE, r24
     af6:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	80 93 de 00 	sts	0x00DE, r24
     b00:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b04:	8e 7f       	andi	r24, 0xFE	; 254
     b06:	80 93 e0 00 	sts	0x00E0, r24
     b0a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b0e:	80 61       	ori	r24, 0x10	; 16
     b10:	80 93 d8 00 	sts	0x00D8, r24
     b14:	08 95       	ret

00000b16 <USB_Init>:
     b16:	e8 ed       	ldi	r30, 0xD8	; 216
     b18:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7e       	andi	r24, 0xEF	; 239
     b1e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b20:	e7 ed       	ldi	r30, 0xD7	; 215
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	80 93 8a 01 	sts	0x018A, r24

	USB_ResetInterface();
     b30:	a2 cf       	rjmp	.-188    	; 0xa76 <USB_ResetInterface>

00000b32 <USB_INT_DisableAllInterrupts>:
     b32:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8c 7f       	andi	r24, 0xFC	; 252
     b3a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b3c:	10 92 a0 00 	sts	0x00A0, r1
     b40:	08 95       	ret

00000b42 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b42:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b46:	10 92 9f 00 	sts	0x009F, r1
     b4a:	08 95       	ret

00000b4c <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0b b6       	in	r0, 0x3b	; 59
     b58:	0f 92       	push	r0
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b72:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b76:	85 ff       	sbrs	r24, 5
     b78:	0a c0       	rjmp	.+20     	; 0xb8e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b7a:	80 91 a0 00 	lds	r24, 0x00A0
     b7e:	85 ff       	sbrs	r24, 5
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b82:	80 91 9f 00 	lds	r24, 0x009F
     b86:	8f 7d       	andi	r24, 0xDF	; 223
     b88:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b8c:	1a d1       	rcall	.+564    	; 0xdc2 <USB_Event_Stub>
     b8e:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b92:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b94:	15 c0       	rjmp	.+42     	; 0xbc0 <__vector_10+0x74>
     b96:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b9a:	81 ff       	sbrs	r24, 1
     b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__vector_10+0x74>
     b9e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ba2:	8d 7f       	andi	r24, 0xFD	; 253
     ba4:	80 93 9f 00 	sts	0x009F, r24
     ba8:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	80 93 9f 00 	sts	0x009F, r24
     bb2:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bb6:	8d 7f       	andi	r24, 0xFD	; 253
     bb8:	80 93 a0 00 	sts	0x00A0, r24
     bbc:	ee db       	rcall	.-2084   	; 0x39a <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bbe:	5b df       	rcall	.-330    	; 0xa76 <USB_ResetInterface>
     bc0:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     bc4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bc6:	15 c0       	rjmp	.+42     	; 0xbf2 <__vector_10+0xa6>
     bc8:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bcc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     bce:	11 c0       	rjmp	.+34     	; 0xbf2 <__vector_10+0xa6>
     bd0:	80 91 df 00 	lds	r24, 0x00DF
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bd6:	80 93 df 00 	sts	0x00DF, r24
     bda:	77 98       	cbi	0x0e, 7	; 14
     bdc:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     be0:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     be2:	80 93 dd 00 	sts	0x00DD, r24
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	4e dc       	rcall	.-1892   	; 0x486 <EVENT_USB_Host_HostError>
     bea:	d7 db       	rcall	.-2130   	; 0x39a <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 93 01 	sts	0x0193, r24
		EVENT_USB_Host_DeviceUnattached();
     bf2:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <__vector_10+0xdc>
     bfa:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     bfe:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c00:	13 c0       	rjmp	.+38     	; 0xc28 <__vector_10+0xdc>
     c02:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c06:	8e 7f       	andi	r24, 0xFE	; 254
     c08:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c0c:	80 91 de 00 	lds	r24, 0x00DE
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c16:	bb db       	rcall	.-2186   	; 0x38e <EVENT_USB_Host_DeviceAttached>
     c18:	80 91 a0 00 	lds	r24, 0x00A0
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c22:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c24:	80 93 93 01 	sts	0x0193, r24
     c28:	80 91 df 00 	lds	r24, 0x00DF
     c2c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c2e:	0e c0       	rjmp	.+28     	; 0xc4c <__vector_10+0x100>
     c30:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c34:	82 ff       	sbrs	r24, 2
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c38:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c3c:	8b 7f       	andi	r24, 0xFB	; 251
     c3e:	80 93 df 00 	sts	0x00DF, r24
     c42:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	36 dc       	rcall	.-1940   	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationFailed>
     c48:	a8 db       	rcall	.-2224   	; 0x39a <EVENT_USB_Host_DeviceUnattached>
     c4a:	15 df       	rcall	.-470    	; 0xa76 <USB_ResetInterface>
     c4c:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23

		USB_ResetInterface();
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0b be       	out	0x3b, r0	; 59
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <USB_GetNextDescriptor>:
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	fc 01       	movw	r30, r24
     c78:	eb 01       	movw	r28, r22
     c7a:	a8 81       	ld	r26, Y
     c7c:	b9 81       	ldd	r27, Y+1	; 0x01
     c7e:	8c 91       	ld	r24, X
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	82 17       	cp	r24, r18
     c88:	93 07       	cpc	r25, r19
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <USB_GetNextDescriptor+0x1c>
     c8c:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     c8e:	a2 0f       	add	r26, r18
     c90:	b3 1f       	adc	r27, r19
     c92:	eb 01       	movw	r28, r22
     c94:	b9 83       	std	Y+1, r27	; 0x01
     c96:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	82 1b       	sub	r24, r18
     c9e:	93 0b       	sbc	r25, r19
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	80 83       	st	Z, r24
			}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	29 97       	sbiw	r28, 0x09	; 9
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	7b 01       	movw	r14, r22
     ccc:	8a 01       	movw	r16, r20
     cce:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cd0:	90 e8       	ldi	r25, 0x80	; 128
     cd2:	90 93 8b 01 	sts	0x018B, r25
     cd6:	96 e0       	ldi	r25, 0x06	; 6
     cd8:	90 93 8c 01 	sts	0x018C, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     cdc:	e8 2f       	mov	r30, r24
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ce4:	f0 93 8e 01 	sts	0x018E, r31
     ce8:	e0 93 8d 01 	sts	0x018D, r30
     cec:	10 92 90 01 	sts	0x0190, r1
     cf0:	10 92 8f 01 	sts	0x018F, r1
     cf4:	89 e0       	ldi	r24, 0x09	; 9
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 92 01 	sts	0x0192, r25
     cfc:	80 93 91 01 	sts	0x0191, r24
     d00:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	84 d0       	rcall	.+264    	; 0xe12 <USB_Host_SendControlRequest>
     d0a:	81 11       	cpse	r24, r1
     d0c:	19 c0       	rjmp	.+50     	; 0xd40 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d0e:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d10:	fc 81       	ldd	r31, Y+4	; 0x04
     d12:	d7 01       	movw	r26, r14
     d14:	ed 93       	st	X+, r30
     d16:	fc 93       	st	X, r31
     d18:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     d1a:	df 06       	cpc	r13, r31
     d1c:	70 f0       	brcs	.+28     	; 0xd3a <USB_Host_GetDeviceConfigDescriptor+0x90>
     d1e:	f0 93 92 01 	sts	0x0192, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d22:	e0 93 91 01 	sts	0x0191, r30
     d26:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d28:	74 d0       	rcall	.+232    	; 0xe12 <USB_Host_SendControlRequest>
     d2a:	81 11       	cpse	r24, r1
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d2e:	f8 01       	movw	r30, r16
     d30:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	21 f0       	breq	.+8      	; 0xd3e <USB_Host_GetDeviceConfigDescriptor+0x94>
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     d3a:	85 e0       	ldi	r24, 0x05	; 5
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     d42:	0f b6       	in	r0, 0x3f	; 63
}
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	08 95       	ret

00000d5e <USB_GetNextDescriptorComp>:
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	8c 01       	movw	r16, r24
     d74:	eb 01       	movw	r28, r22
     d76:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d78:	f8 01       	movw	r30, r16
     d7a:	e0 80       	ld	r14, Z
     d7c:	f1 80       	ldd	r15, Z+1	; 0x01
     d7e:	e1 14       	cp	r14, r1
     d80:	f1 04       	cpc	r15, r1
     d82:	99 f0       	breq	.+38     	; 0xdaa <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d84:	a8 80       	ld	r10, Y
     d86:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     d88:	be 01       	movw	r22, r28
     d8a:	c8 01       	movw	r24, r16
     d8c:	72 df       	rcall	.-284    	; 0xc72 <USB_GetNextDescriptor>
     d8e:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	f6 01       	movw	r30, r12
     d94:	09 95       	icall
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	79 f3       	breq	.-34     	; 0xd78 <USB_GetNextDescriptorComp+0x1a>
     d9a:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d9c:	39 f4       	brne	.+14     	; 0xdac <USB_GetNextDescriptorComp+0x4e>
     d9e:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     da0:	a8 82       	st	Y, r10
     da2:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     da4:	f1 82       	std	Z+1, r15	; 0x01
     da6:	e0 82       	st	Z, r14
     da8:	01 c0       	rjmp	.+2      	; 0xdac <USB_GetNextDescriptorComp+0x4e>
     daa:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dac:	df 91       	pop	r29
}
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	08 95       	ret

00000dc2 <USB_Event_Stub>:
     dc2:	08 95       	ret

00000dc4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     dcc:	c9 ee       	ldi	r28, 0xE9	; 233
     dce:	d3 e0       	ldi	r29, 0x03	; 3
     dd0:	11 11       	cpse	r17, r1
     dd2:	0d c0       	rjmp	.+26     	; 0xdee <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     dd4:	80 91 a6 00 	lds	r24, 0x00A6
     dd8:	83 fd       	sbrc	r24, 3
     dda:	16 c0       	rjmp	.+44     	; 0xe08 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	d3 db       	rcall	.-2138   	; 0x586 <USB_Host_WaitMS>
     de0:	81 11       	cpse	r24, r1
     de2:	13 c0       	rjmp	.+38     	; 0xe0a <USB_Host_WaitForIOS+0x46>
     de4:	21 97       	sbiw	r28, 0x01	; 1
     de6:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     de8:	99 f7       	brne	.-26     	; 0xdd0 <USB_Host_WaitForIOS+0xc>
     dea:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     dec:	0e c0       	rjmp	.+28     	; 0xe0a <USB_Host_WaitForIOS+0x46>
     dee:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     df0:	29 f4       	brne	.+10     	; 0xdfc <USB_Host_WaitForIOS+0x38>
     df2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     df6:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     df8:	f1 cf       	rjmp	.-30     	; 0xddc <USB_Host_WaitForIOS+0x18>
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <USB_Host_WaitForIOS+0x44>
     dfc:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     dfe:	71 f7       	brne	.-36     	; 0xddc <USB_Host_WaitForIOS+0x18>
     e00:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e04:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e06:	ea cf       	rjmp	.-44     	; 0xddc <USB_Host_WaitForIOS+0x18>
     e08:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e0a:	df 91       	pop	r29
}
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	08 95       	ret

00000e12 <USB_Host_SendControlRequest>:
     e12:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e1e:	f0 90 9e 00 	lds	r15, 0x009E
     e22:	8f 2d       	mov	r24, r15
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e28:	c0 91 91 01 	lds	r28, 0x0191
     e2c:	d0 91 92 01 	lds	r29, 0x0192
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e30:	80 91 9e 00 	lds	r24, 0x009E
     e34:	81 60       	ori	r24, 0x01	; 1
     e36:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	a4 db       	rcall	.-2232   	; 0x586 <USB_Host_WaitMS>
     e3e:	81 11       	cpse	r24, r1
     e40:	cc c0       	rjmp	.+408    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     e42:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e46:	8f 7c       	andi	r24, 0xCF	; 207
     e48:	80 93 aa 00 	sts	0x00AA, r24
     e4c:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e50:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	80 93 a6 00 	sts	0x00A6, r24
     e5a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e5e:	8f 7b       	andi	r24, 0xBF	; 191
     e60:	80 93 a9 00 	sts	0x00A9, r24
     e64:	eb e8       	ldi	r30, 0x8B	; 139
     e66:	f1 e0       	ldi	r31, 0x01	; 1
     e68:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e6a:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e70:	e3 39       	cpi	r30, 0x93	; 147
     e72:	f8 07       	cpc	r31, r24
     e74:	c9 f7       	brne	.-14     	; 0xe68 <USB_Host_SendControlRequest+0x56>
     e76:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e7a:	87 77       	andi	r24, 0x77	; 119
     e7c:	80 93 a6 00 	sts	0x00A6, r24
     e80:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e82:	a0 df       	rcall	.-192    	; 0xdc4 <USB_Host_WaitForIOS>
     e84:	81 11       	cpse	r24, r1
     e86:	a9 c0       	rjmp	.+338    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     e88:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	80 93 a9 00 	sts	0x00A9, r24
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	78 db       	rcall	.-2320   	; 0x586 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e96:	81 11       	cpse	r24, r1
     e98:	a0 c0       	rjmp	.+320    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     e9a:	80 91 8b 01 	lds	r24, 0x018B
     e9e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ea0:	4e c0       	rjmp	.+156    	; 0xf3e <USB_Host_SendControlRequest+0x12c>
     ea2:	80 91 aa 00 	lds	r24, 0x00AA
     ea6:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ea8:	80 61       	ori	r24, 0x10	; 16
     eaa:	80 93 aa 00 	sts	0x00AA, r24
     eae:	01 15       	cp	r16, r1
     eb0:	11 05       	cpc	r17, r1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     eb4:	3a c0       	rjmp	.+116    	; 0xf2a <USB_Host_SendControlRequest+0x118>
     eb6:	80 91 aa 00 	lds	r24, 0x00AA
     eba:	8f 7c       	andi	r24, 0xCF	; 207
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	80 93 aa 00 	sts	0x00AA, r24
     ec2:	80 91 a9 00 	lds	r24, 0x00A9
     ec6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ec8:	80 93 a9 00 	sts	0x00A9, r24
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	7a df       	rcall	.-268    	; 0xdc4 <USB_Host_WaitForIOS>
     ed0:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ed2:	83 c0       	rjmp	.+262    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     ed4:	80 91 a6 00 	lds	r24, 0x00A6
     ed8:	8b 77       	andi	r24, 0x7B	; 123
     eda:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	71 df       	rcall	.-286    	; 0xdc4 <USB_Host_WaitForIOS>
     ee2:	7b c0       	rjmp	.+246    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     ee4:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	69 df       	rcall	.-302    	; 0xdc4 <USB_Host_WaitForIOS>
     ef2:	81 11       	cpse	r24, r1
     ef4:	72 c0       	rjmp	.+228    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     ef6:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     efa:	90 91 f7 00 	lds	r25, 0x00F7
     efe:	89 2b       	or	r24, r25
     f00:	11 f4       	brne	.+4      	; 0xf06 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	f8 01       	movw	r30, r16
     f08:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f0a:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
     f0e:	90 91 f7 00 	lds	r25, 0x00F7
     f12:	89 2b       	or	r24, r25
     f14:	69 f4       	brne	.+26     	; 0xf30 <USB_Host_SendControlRequest+0x11e>
     f16:	80 91 a9 00 	lds	r24, 0x00A9
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
     f20:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f24:	8e 77       	andi	r24, 0x7E	; 126
     f26:	80 93 a6 00 	sts	0x00A6, r24
     f2a:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f2c:	d9 f6       	brne	.-74     	; 0xee4 <USB_Host_SendControlRequest+0xd2>
     f2e:	c3 cf       	rjmp	.-122    	; 0xeb6 <USB_Host_SendControlRequest+0xa4>
     f30:	20 97       	sbiw	r28, 0x00	; 0
     f32:	89 f3       	breq	.-30     	; 0xf16 <USB_Host_SendControlRequest+0x104>
     f34:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f38:	81 93       	st	Z+, r24
     f3a:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f3c:	e5 cf       	rjmp	.-54     	; 0xf08 <USB_Host_SendControlRequest+0xf6>
     f3e:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f40:	11 05       	cpc	r17, r1
     f42:	b1 f1       	breq	.+108    	; 0xfb0 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
     f44:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
     f48:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     f4a:	80 62       	ori	r24, 0x20	; 32
     f4c:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f50:	80 91 a9 00 	lds	r24, 0x00A9
     f54:	8f 7b       	andi	r24, 0xBF	; 191
     f56:	80 93 a9 00 	sts	0x00A9, r24
     f5a:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f5c:	20 97       	sbiw	r28, 0x00	; 0
     f5e:	01 f1       	breq	.+64     	; 0xfa0 <USB_Host_SendControlRequest+0x18e>
     f60:	31 df       	rcall	.-414    	; 0xdc4 <USB_Host_WaitForIOS>
     f62:	81 11       	cpse	r24, r1
     f64:	3a c0       	rjmp	.+116    	; 0xfda <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f66:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f68:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f6c:	30 91 f7 00 	lds	r19, 0x00F7
     f70:	80 91 1a 01 	lds	r24, 0x011A
     f74:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	58 f4       	brcc	.+22     	; 0xf92 <USB_Host_SendControlRequest+0x180>
     f7c:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	8c 01       	movw	r16, r24
     f82:	20 81       	ld	r18, Z
     f84:	20 93 af 00 	sts	0x00AF, r18
     f88:	21 97       	sbiw	r28, 0x01	; 1
     f8a:	20 97       	sbiw	r28, 0x00	; 0
     f8c:	19 f0       	breq	.+6      	; 0xf94 <USB_Host_SendControlRequest+0x182>
     f8e:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
     f90:	eb cf       	rjmp	.-42     	; 0xf68 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f92:	8f 01       	movw	r16, r30
     f94:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f98:	8b 77       	andi	r24, 0x7B	; 123
     f9a:	80 93 a6 00 	sts	0x00A6, r24
     f9e:	dd cf       	rjmp	.-70     	; 0xf5a <USB_Host_SendControlRequest+0x148>
     fa0:	11 df       	rcall	.-478    	; 0xdc4 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fa2:	81 11       	cpse	r24, r1
     fa4:	1a c0       	rjmp	.+52     	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     fa6:	80 91 a9 00 	lds	r24, 0x00A9
     faa:	80 64       	ori	r24, 0x40	; 64
     fac:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb0:	80 91 aa 00 	lds	r24, 0x00AA
     fb4:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fb6:	80 61       	ori	r24, 0x10	; 16
     fb8:	80 93 aa 00 	sts	0x00AA, r24
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc0:	8f 7b       	andi	r24, 0xBF	; 191
     fc2:	80 93 a9 00 	sts	0x00A9, r24
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	fd de       	rcall	.-518    	; 0xdc4 <USB_Host_WaitForIOS>
     fca:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <USB_Host_SendControlRequest+0x1c8>
     fce:	80 91 a6 00 	lds	r24, 0x00A6
     fd2:	8e 77       	andi	r24, 0x7E	; 126
     fd4:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 91 a9 00 	lds	r25, 0x00A9
     fde:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fe0:	90 93 a9 00 	sts	0x00A9, r25
     fe4:	f1 10       	cpse	r15, r1
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <USB_Host_SendControlRequest+0x1e0>
     fe8:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fec:	9e 7f       	andi	r25, 0xFE	; 254
     fee:	90 93 9e 00 	sts	0x009E, r25
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
     ff8:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1004:	ff 90       	pop	r15
    1006:	08 95       	ret

00001008 <USB_Host_SetDeviceConfiguration>:
    1008:	cf 93       	push	r28
				UPRST = 0;
    100a:	c8 2f       	mov	r28, r24
    100c:	10 92 8b 01 	sts	0x018B, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1010:	89 e0       	ldi	r24, 0x09	; 9
    1012:	80 93 8c 01 	sts	0x018C, r24
    1016:	2c 2f       	mov	r18, r28
    1018:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    101a:	30 93 8e 01 	sts	0x018E, r19
    101e:	20 93 8d 01 	sts	0x018D, r18
    1022:	10 92 90 01 	sts	0x0190, r1
    1026:	10 92 8f 01 	sts	0x018F, r1
    102a:	10 92 92 01 	sts	0x0192, r1
    102e:	10 92 91 01 	sts	0x0191, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1032:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	eb de       	rcall	.-554    	; 0xe12 <USB_Host_SendControlRequest>
    103c:	81 11       	cpse	r24, r1
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <USB_Host_SetDeviceConfiguration+0x4a>
    1040:	c0 93 89 01 	sts	0x0189, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1044:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1046:	11 f0       	breq	.+4      	; 0x104c <USB_Host_SetDeviceConfiguration+0x44>
    1048:	9b e0       	ldi	r25, 0x0B	; 11
    104a:	01 c0       	rjmp	.+2      	; 0x104e <USB_Host_SetDeviceConfiguration+0x46>
    104c:	9a e0       	ldi	r25, 0x0A	; 10
    104e:	90 93 93 01 	sts	0x0193, r25
    1052:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1054:	08 95       	ret

00001056 <USB_Host_GetDescriptor>:
    1056:	90 e8       	ldi	r25, 0x80	; 128
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1058:	90 93 8b 01 	sts	0x018B, r25
    105c:	96 e0       	ldi	r25, 0x06	; 6
    105e:	90 93 8c 01 	sts	0x018C, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	78 2b       	or	r23, r24
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1066:	70 93 8e 01 	sts	0x018E, r23
    106a:	60 93 8d 01 	sts	0x018D, r22
    106e:	10 92 90 01 	sts	0x0190, r1
    1072:	10 92 8f 01 	sts	0x018F, r1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	30 93 92 01 	sts	0x0192, r19
    107c:	20 93 91 01 	sts	0x0191, r18
    1080:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1084:	ca 01       	movw	r24, r20
    1086:	c5 ce       	rjmp	.-630    	; 0xe12 <USB_Host_SendControlRequest>

00001088 <USB_USBTask>:
    1088:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    108a:	c0 91 a7 00 	lds	r28, 0x00A7
    108e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1090:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1094:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1098:	c3 da       	rcall	.-2682   	; 0x620 <USB_Host_ProcessNextHostState>
    109a:	c0 93 a7 00 	sts	0x00A7, r28
    109e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10a0:	08 95       	ret

000010a2 <DCOMP_AOA_Host_NextAndroidAccessoryInterface>:
    10a2:	fc 01       	movw	r30, r24

static uint8_t DCOMP_AOA_Host_NextAndroidAccessoryInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10a4:	81 81       	ldd	r24, Z+1	; 0x01
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	51 f4       	brne	.+20     	; 0x10be <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
    10aa:	85 81       	ldd	r24, Z+5	; 0x05
    10ac:	8f 3f       	cpi	r24, 0xFF	; 255
    10ae:	39 f4       	brne	.+14     	; 0x10be <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1c>
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	8f 3f       	cpi	r24, 0xFF	; 255
    10b4:	21 f4       	brne	.+8      	; 0x10be <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1c>
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
    10b6:	87 81       	ldd	r24, Z+7	; 0x07
    10b8:	81 11       	cpse	r24, r1
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1c>
    10bc:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10be:	82 e0       	ldi	r24, 0x02	; 2
}
    10c0:	08 95       	ret

000010c2 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint>:

static uint8_t DCOMP_AOA_Host_NextInterfaceBulkEndpoint(void* const CurrentDescriptor)
{
    10c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10c4:	81 81       	ldd	r24, Z+1	; 0x01
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	49 f4       	brne	.+18     	; 0x10dc <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    10ca:	83 81       	ldd	r24, Z+3	; 0x03
    10cc:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	49 f4       	brne	.+18     	; 0x10e4 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x22>
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	60 dc       	rcall	.-1856   	; 0x996 <Pipe_IsEndpointBound>
    10d6:	81 11       	cpse	r24, r1
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x22>
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x26>
    10dc:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    10de:	11 f4       	brne	.+4      	; 0x10e4 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x22>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    10e2:	08 95       	ret
    10e4:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10e6:	08 95       	ret
    10e8:	80 e0       	ldi	r24, 0x00	; 0
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		  return DESCRIPTOR_SEARCH_Found;
    10ea:	08 95       	ret

000010ec <AOA_Host_ValidateAccessoryDevice>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10ec:	fb 01       	movw	r30, r22
                                      const USB_Descriptor_Device_t* const DeviceDescriptor,
                                      bool* const NeedModeSwitch)
{
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
    10ee:	81 81       	ldd	r24, Z+1	; 0x01
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	59 f4       	brne	.+22     	; 0x110a <AOA_Host_ValidateAccessoryDevice+0x1e>
	  return false;

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
    10f4:	82 85       	ldd	r24, Z+10	; 0x0a
    10f6:	93 85       	ldd	r25, Z+11	; 0x0b
    10f8:	9d 52       	subi	r25, 0x2D	; 45
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	02 97       	sbiw	r24, 0x02	; 2
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <AOA_Host_ValidateAccessoryDevice+0x16>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	fa 01       	movw	r30, r20
    1104:	20 83       	st	Z, r18
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	08 95       	ret
                                      bool* const NeedModeSwitch)
{
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
	  return false;
    110a:	80 e0       	ldi	r24, 0x00	; 0

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
}
    110c:	08 95       	ret

0000110e <AOA_Host_ConfigurePipes>:

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <AOA_Host_ConfigurePipes+0x16>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <AOA_Host_ConfigurePipes+0x18>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	8c 01       	movw	r16, r24
    112c:	7a 83       	std	Y+2, r23	; 0x02
    112e:	69 83       	std	Y+1, r22	; 0x01
    1130:	fa 01       	movw	r30, r20
    1132:	5c 83       	std	Y+4, r21	; 0x04
    1134:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
    1136:	dc 01       	movw	r26, r24
    1138:	59 96       	adiw	r26, 0x19	; 25
    113a:	1c 92       	st	X, r1
    113c:	1e 92       	st	-X, r1
    113e:	58 97       	sbiw	r26, 0x18	; 24

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	09 f0       	breq	.+2      	; 0x1148 <AOA_Host_ConfigurePipes+0x3a>
    1146:	61 c0       	rjmp	.+194    	; 0x120a <AOA_Host_ConfigurePipes+0xfc>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1148:	41 e5       	ldi	r20, 0x51	; 81
    114a:	58 e0       	ldi	r21, 0x08	; 8
    114c:	be 01       	movw	r22, r28
    114e:	6d 5f       	subi	r22, 0xFD	; 253
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	03 de       	rcall	.-1018   	; 0xd5e <USB_GetNextDescriptorComp>
    1158:	88 23       	and	r24, r24
    115a:	11 f0       	breq	.+4      	; 0x1160 <AOA_Host_ConfigurePipes+0x52>
    115c:	82 e0       	ldi	r24, 0x02	; 2
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
    115e:	56 c0       	rjmp	.+172    	; 0x120c <AOA_Host_ConfigurePipes+0xfe>
    1160:	cb 80       	ldd	r12, Y+3	; 0x03
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1162:	dc 80       	ldd	r13, Y+4	; 0x04
    1164:	a1 2c       	mov	r10, r1
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
    1166:	b1 2c       	mov	r11, r1
    1168:	e1 2c       	mov	r14, r1

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
    116a:	f1 2c       	mov	r15, r1
    116c:	41 e6       	ldi	r20, 0x61	; 97

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    116e:	58 e0       	ldi	r21, 0x08	; 8
    1170:	be 01       	movw	r22, r28
    1172:	6d 5f       	subi	r22, 0xFD	; 253
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	f1 dd       	rcall	.-1054   	; 0xd5e <USB_GetNextDescriptorComp>
    117c:	81 11       	cpse	r24, r1
    117e:	ee cf       	rjmp	.-36     	; 0x115c <AOA_Host_ConfigurePipes+0x4e>
    1180:	eb 81       	ldd	r30, Y+3	; 0x03
    1182:	fc 81       	ldd	r31, Y+4	; 0x04
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1188:	02 c0       	rjmp	.+4      	; 0x118e <AOA_Host_ConfigurePipes+0x80>
    118a:	7f 01       	movw	r14, r30
    118c:	f5 01       	movw	r30, r10
		  DataINEndpoint  = EndpointData;
    118e:	e1 14       	cp	r14, r1
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1190:	f1 04       	cpc	r15, r1
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1192:	11 f4       	brne	.+4      	; 0x1198 <AOA_Host_ConfigurePipes+0x8a>
    1194:	5f 01       	movw	r10, r30
    1196:	ea cf       	rjmp	.-44     	; 0x116c <AOA_Host_ConfigurePipes+0x5e>
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	e1 f3       	breq	.-8      	; 0x1194 <AOA_Host_ConfigurePipes+0x86>
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    119c:	d7 01       	movw	r26, r14
    119e:	14 96       	adiw	r26, 0x04	; 4
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    11a0:	8d 91       	ld	r24, X+
    11a2:	9c 91       	ld	r25, X
    11a4:	15 97       	sbiw	r26, 0x05	; 5
    11a6:	d8 01       	movw	r26, r16
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
    11ae:	11 97       	sbiw	r26, 0x01	; 1
    11b0:	d7 01       	movw	r26, r14
    11b2:	12 96       	adiw	r26, 0x02	; 2
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    11b4:	8c 91       	ld	r24, X
    11b6:	d8 01       	movw	r26, r16
    11b8:	13 96       	adiw	r26, 0x03	; 3
    11ba:	8c 93       	st	X, r24
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	22 e0       	ldi	r18, 0x02	; 2
    11c0:	14 96       	adiw	r26, 0x04	; 4
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    11c2:	2c 93       	st	X, r18
    11c4:	14 97       	sbiw	r26, 0x04	; 4
    11c6:	84 81       	ldd	r24, Z+4	; 0x04
    11c8:	95 81       	ldd	r25, Z+5	; 0x05

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    11ca:	18 96       	adiw	r26, 0x08	; 8
    11cc:	9c 93       	st	X, r25
    11ce:	8e 93       	st	-X, r24
    11d0:	17 97       	sbiw	r26, 0x07	; 7
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	19 96       	adiw	r26, 0x09	; 9
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    11d6:	8c 93       	st	X, r24
    11d8:	19 97       	sbiw	r26, 0x09	; 9
    11da:	1a 96       	adiw	r26, 0x0a	; 10
    11dc:	2c 93       	st	X, r18
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	c8 01       	movw	r24, r16

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
    11e2:	a6 db       	rcall	.-2228   	; 0x930 <Pipe_ConfigurePipeTable>
    11e4:	81 11       	cpse	r24, r1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <AOA_Host_ConfigurePipes+0xde>
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	10 c0       	rjmp	.+32     	; 0x120c <AOA_Host_ConfigurePipes+0xfe>
    11ec:	61 e0       	ldi	r22, 0x01	; 1
	  return AOA_ENUMERROR_PipeConfigurationFailed;
    11ee:	c8 01       	movw	r24, r16
    11f0:	06 96       	adiw	r24, 0x06	; 6

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
    11f2:	9e db       	rcall	.-2244   	; 0x930 <Pipe_ConfigurePipeTable>
    11f4:	88 23       	and	r24, r24
    11f6:	c1 f3       	breq	.-16     	; 0x11e8 <AOA_Host_ConfigurePipes+0xda>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	f8 01       	movw	r30, r16
    11fc:	80 8f       	std	Z+24, r24	; 0x18
    11fe:	d6 01       	movw	r26, r12
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
    1200:	12 96       	adiw	r26, 0x02	; 2
    1202:	8c 91       	ld	r24, X
    1204:	81 8f       	std	Z+25, r24	; 0x19
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <AOA_Host_ConfigurePipes+0xfe>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0f 90       	pop	r0

	return AOA_ENUMERROR_NoError;
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AOA_ENUMERROR_InvalidConfigDescriptor;
    1212:	0f 90       	pop	r0

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;

	return AOA_ENUMERROR_NoError;
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	08 95       	ret

0000122a <AOA_Host_StartAccessoryMode>:
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
	AOA_Host_Flush(AOAInterfaceInfo);
	#endif
}

uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	00 d0       	rcall	.+0      	; 0x123c <AOA_Host_StartAccessoryMode+0x12>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	7c 01       	movw	r14, r24
	return USB_Host_SendControlRequest(NULL);
}

static uint8_t AOA_Host_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1242:	28 e0       	ldi	r18, 0x08	; 8
    1244:	eb e2       	ldi	r30, 0x2B	; 43
    1246:	f1 e0       	ldi	r31, 0x01	; 1
    1248:	ab e8       	ldi	r26, 0x8B	; 139
    124a:	b1 e0       	ldi	r27, 0x01	; 1
    124c:	01 90       	ld	r0, Z+
    124e:	0d 92       	st	X+, r0
    1250:	2a 95       	dec	r18
    1252:	e1 f7       	brne	.-8      	; 0x124c <AOA_Host_StartAccessoryMode+0x22>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1254:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	da dd       	rcall	.-1100   	; 0xe12 <USB_Host_SendControlRequest>
    125e:	81 11       	cpse	r24, r1
uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	uint8_t ErrorCode;

	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
    1260:	4a c0       	rjmp	.+148    	; 0x12f6 <AOA_Host_StartAccessoryMode+0xcc>
    1262:	29 81       	ldd	r18, Y+1	; 0x01
	  return ErrorCode;

	if ((AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1)) && (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV2)))
    1264:	3a 81       	ldd	r19, Y+2	; 0x02
    1266:	21 50       	subi	r18, 0x01	; 1
    1268:	31 09       	sbc	r19, r1
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	08 f0       	brcs	.+2      	; 0x1272 <AOA_Host_StartAccessoryMode+0x48>
    1270:	41 c0       	rjmp	.+130    	; 0x12f4 <AOA_Host_StartAccessoryMode+0xca>
    1272:	87 01       	movw	r16, r14
    1274:	e1 2c       	mov	r14, r1
    1276:	f1 2c       	mov	r15, r1
    1278:	80 e4       	ldi	r24, 0x40	; 64
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    127a:	d8 2e       	mov	r13, r24
    127c:	94 e3       	ldi	r25, 0x34	; 52
    127e:	c9 2e       	mov	r12, r25
    1280:	f8 01       	movw	r30, r16
}

static uint8_t AOA_Host_SendPropertyString(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                           const uint8_t StringIndex)
{
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];
    1282:	84 85       	ldd	r24, Z+12	; 0x0c
    1284:	95 85       	ldd	r25, Z+13	; 0x0d
    1286:	00 97       	sbiw	r24, 0x00	; 0

	if (String == NULL)
    1288:	11 f4       	brne	.+4      	; 0x128e <AOA_Host_StartAccessoryMode+0x64>
    128a:	8c e5       	ldi	r24, 0x5C	; 92
	  String = "";
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	fc 01       	movw	r30, r24
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    1290:	01 90       	ld	r0, Z+
    1292:	00 20       	and	r0, r0
    1294:	e9 f7       	brne	.-6      	; 0x1290 <AOA_Host_StartAccessoryMode+0x66>
    1296:	d0 92 8b 01 	sts	0x018B, r13
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    129a:	c0 92 8c 01 	sts	0x018C, r12
    129e:	10 92 8e 01 	sts	0x018E, r1
    12a2:	10 92 8d 01 	sts	0x018D, r1
    12a6:	f0 92 90 01 	sts	0x0190, r15
    12aa:	e0 92 8f 01 	sts	0x018F, r14
    12ae:	e8 1b       	sub	r30, r24
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    12b0:	f9 0b       	sbc	r31, r25
    12b2:	f0 93 92 01 	sts	0x0192, r31
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    12b6:	e0 93 91 01 	sts	0x0191, r30
    12ba:	10 92 a7 00 	sts	0x00A7, r1
    12be:	a9 dd       	rcall	.-1198   	; 0xe12 <USB_Host_SendControlRequest>
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
    12c0:	81 11       	cpse	r24, r1
    12c2:	19 c0       	rjmp	.+50     	; 0x12f6 <AOA_Host_StartAccessoryMode+0xcc>
	if ((AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1)) && (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV2)))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
    12c4:	ff ef       	ldi	r31, 0xFF	; 255
    12c6:	ef 1a       	sub	r14, r31
    12c8:	ff 0a       	sbc	r15, r31
    12ca:	0e 5f       	subi	r16, 0xFE	; 254
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	86 e0       	ldi	r24, 0x06	; 6
    12d0:	e8 16       	cp	r14, r24
	  return ErrorCode;

	if ((AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1)) && (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV2)))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
    12d2:	f1 04       	cpc	r15, r1
    12d4:	a9 f6       	brne	.-86     	; 0x1280 <AOA_Host_StartAccessoryMode+0x56>
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	e3 e3       	ldi	r30, 0x33	; 51
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
		  return ErrorCode;
	}

	USB_ControlRequest = (USB_Request_Header_t)
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	ab e8       	ldi	r26, 0x8B	; 139
    12de:	b1 e0       	ldi	r27, 0x01	; 1
    12e0:	01 90       	ld	r0, Z+
    12e2:	0d 92       	st	X+, r0
    12e4:	8a 95       	dec	r24
    12e6:	e1 f7       	brne	.-8      	; 0x12e0 <AOA_Host_StartAccessoryMode+0xb6>
    12e8:	10 92 a7 00 	sts	0x00A7, r1
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
    12f0:	90 dd       	rcall	.-1248   	; 0xe12 <USB_Host_SendControlRequest>
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <AOA_Host_StartAccessoryMode+0xcc>
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
	  return ErrorCode;

	if ((AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1)) && (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV2)))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;
    12fa:	df 91       	pop	r29
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <AOA_Host_BytesReceived>:
    130c:	20 91 93 01 	lds	r18, 0x0193
    1310:	2b 30       	cpi	r18, 0x0B	; 11
	return PIPE_READYWAIT_NoError;
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    1312:	89 f5       	brne	.+98     	; 0x1376 <AOA_Host_BytesReceived+0x6a>
    1314:	fc 01       	movw	r30, r24
    1316:	20 8d       	ldd	r18, Z+24	; 0x18
    1318:	22 23       	and	r18, r18
    131a:	69 f1       	breq	.+90     	; 0x1376 <AOA_Host_BytesReceived+0x6a>
    131c:	80 81       	ld	r24, Z
    131e:	8f 70       	andi	r24, 0x0F	; 15
    1320:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1324:	80 91 a9 00 	lds	r24, 0x00A9
    1328:	8f 7b       	andi	r24, 0xBF	; 191
    132a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    132e:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1332:	80 ff       	sbrs	r24, 0
    1334:	1b c0       	rjmp	.+54     	; 0x136c <AOA_Host_BytesReceived+0x60>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1336:	80 91 f6 00 	lds	r24, 0x00F6
    133a:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	59 f4       	brne	.+22     	; 0x1358 <AOA_Host_BytesReceived+0x4c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1342:	20 91 a6 00 	lds	r18, 0x00A6
    1346:	2e 77       	andi	r18, 0x7E	; 126
    1348:	20 93 a6 00 	sts	0x00A6, r18

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    134c:	20 91 a9 00 	lds	r18, 0x00A9
    1350:	20 64       	ori	r18, 0x40	; 64
    1352:	20 93 a9 00 	sts	0x00A9, r18
		{
			Pipe_ClearIN();
			Pipe_Freeze();
			return 0;
    1356:	08 95       	ret
    1358:	80 91 a9 00 	lds	r24, 0x00A9
    135c:	80 64       	ori	r24, 0x40	; 64
    135e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1362:	80 91 f6 00 	lds	r24, 0x00F6
    1366:	90 91 f7 00 	lds	r25, 0x00F7
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    136a:	08 95       	ret

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    136c:	80 91 a9 00 	lds	r24, 0x00A9
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    137a:	08 95       	ret

0000137c <AOA_Host_ReceiveByte>:

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    137c:	20 91 93 01 	lds	r18, 0x0193
    1380:	2b 30       	cpi	r18, 0x0B	; 11
    1382:	91 f5       	brne	.+100    	; 0x13e8 <AOA_Host_ReceiveByte+0x6c>
    1384:	fc 01       	movw	r30, r24
    1386:	20 8d       	ldd	r18, Z+24	; 0x18
    1388:	22 23       	and	r18, r18
    138a:	71 f1       	breq	.+92     	; 0x13e8 <AOA_Host_ReceiveByte+0x6c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    138c:	80 81       	ld	r24, Z
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1394:	80 91 a9 00 	lds	r24, 0x00A9
    1398:	8f 7b       	andi	r24, 0xBF	; 191
    139a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    139e:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    13a2:	80 ff       	sbrs	r24, 0
    13a4:	18 c0       	rjmp	.+48     	; 0x13d6 <AOA_Host_ReceiveByte+0x5a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a6:	80 91 f6 00 	lds	r24, 0x00F6
    13aa:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    13ae:	89 2b       	or	r24, r25
    13b0:	21 f0       	breq	.+8      	; 0x13ba <AOA_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13b2:	20 91 af 00 	lds	r18, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <AOA_Host_ReceiveByte+0x42>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13be:	80 91 f6 00 	lds	r24, 0x00F6
    13c2:	90 91 f7 00 	lds	r25, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    13c6:	89 2b       	or	r24, r25
    13c8:	41 f4       	brne	.+16     	; 0x13da <AOA_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13ca:	80 91 a6 00 	lds	r24, 0x00A6
    13ce:	8e 77       	andi	r24, 0x7E	; 126
    13d0:	80 93 a6 00 	sts	0x00A6, r24
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <AOA_Host_ReceiveByte+0x5e>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    13d6:	2f ef       	ldi	r18, 0xFF	; 255
    13d8:	3f ef       	ldi	r19, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13da:	80 91 a9 00 	lds	r24, 0x00A9
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	80 93 a9 00 	sts	0x00A9, r24
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    13e4:	c9 01       	movw	r24, r18
    13e6:	08 95       	ret
}

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    13ec:	08 95       	ret

000013ee <AOA_Host_Flush>:

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    13ee:	20 91 93 01 	lds	r18, 0x0193
    13f2:	2b 30       	cpi	r18, 0x0B	; 11
    13f4:	51 f5       	brne	.+84     	; 0x144a <AOA_Host_Flush+0x5c>
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 8d       	ldd	r18, Z+24	; 0x18
    13fa:	22 23       	and	r18, r18
    13fc:	31 f1       	breq	.+76     	; 0x144a <AOA_Host_Flush+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13fe:	86 81       	ldd	r24, Z+6	; 0x06
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1406:	80 91 a9 00 	lds	r24, 0x00A9
    140a:	8f 7b       	andi	r24, 0xBF	; 191
    140c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1410:	80 91 f6 00 	lds	r24, 0x00F6
    1414:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1418:	89 2b       	or	r24, r25
    141a:	c9 f0       	breq	.+50     	; 0x144e <AOA_Host_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    141c:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1420:	80 91 a6 00 	lds	r24, 0x00A6
    1424:	8b 77       	andi	r24, 0x7B	; 123
    1426:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    142a:	95 fd       	sbrc	r25, 5
    142c:	08 c0       	rjmp	.+16     	; 0x143e <AOA_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    142e:	dd da       	rcall	.-2630   	; 0x9ea <Pipe_WaitUntilReady>
    1430:	81 11       	cpse	r24, r1
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <AOA_Host_Flush+0x62>
    1434:	80 91 a6 00 	lds	r24, 0x00A6
    1438:	8b 77       	andi	r24, 0x7B	; 123
    143a:	80 93 a6 00 	sts	0x00A6, r24
    143e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	80 93 a9 00 	sts	0x00A9, r24
    1448:	02 c0       	rjmp	.+4      	; 0x144e <AOA_Host_Flush+0x60>
    144a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    144c:	08 95       	ret
    144e:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    1450:	08 95       	ret

00001452 <AOA_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    1452:	20 91 93 01 	lds	r18, 0x0193
	return DESCRIPTOR_SEARCH_NotFound;
}

void AOA_Host_USBTask(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    1456:	2b 30       	cpi	r18, 0x0B	; 11
    1458:	21 f4       	brne	.+8      	; 0x1462 <AOA_Host_USBTask+0x10>
    145a:	fc 01       	movw	r30, r24
    145c:	20 8d       	ldd	r18, Z+24	; 0x18
    145e:	21 11       	cpse	r18, r1
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	AOA_Host_Flush(AOAInterfaceInfo);
    1460:	c6 cf       	rjmp	.-116    	; 0x13ee <AOA_Host_Flush>
    1462:	08 95       	ret

00001464 <Serial_putchar>:
    1464:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1468:	95 ff       	sbrs	r25, 5
    146a:	fc cf       	rjmp	.-8      	; 0x1464 <Serial_putchar>
				UDR1 = DataByte;
    146c:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 95       	ret

00001476 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1476:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    147a:	87 ff       	sbrs	r24, 7
    147c:	08 c0       	rjmp	.+16     	; 0x148e <Serial_getchar+0x18>
    147e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1482:	87 ff       	sbrs	r24, 7
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1486:	80 91 ce 00 	lds	r24, 0x00CE
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 95       	ret
	  return _FDEV_EOF;
    148e:	8e ef       	ldi	r24, 0xFE	; 254
    1490:	9f ef       	ldi	r25, 0xFF	; 255
    1492:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1498:	08 95       	ret

0000149a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    149a:	fc 01       	movw	r30, r24
	if (!(Stream))
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	59 f4       	brne	.+22     	; 0x14b6 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14a0:	84 e9       	ldi	r24, 0x94	; 148
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	90 93 a3 01 	sts	0x01A3, r25
    14a8:	80 93 a2 01 	sts	0x01A2, r24
		stdout = Stream;
    14ac:	90 93 a5 01 	sts	0x01A5, r25
    14b0:	80 93 a4 01 	sts	0x01A4, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    14b4:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    14b6:	8e e0       	ldi	r24, 0x0E	; 14
    14b8:	df 01       	movw	r26, r30
    14ba:	1d 92       	st	X+, r1
    14bc:	8a 95       	dec	r24
    14be:	e9 f7       	brne	.-6      	; 0x14ba <Serial_CreateStream+0x20>
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	83 83       	std	Z+3, r24	; 0x03
    14c4:	82 e3       	ldi	r24, 0x32	; 50
    14c6:	9a e0       	ldi	r25, 0x0A	; 10
    14c8:	91 87       	std	Z+9, r25	; 0x09
    14ca:	80 87       	std	Z+8, r24	; 0x08
    14cc:	8b e3       	ldi	r24, 0x3B	; 59
    14ce:	9a e0       	ldi	r25, 0x0A	; 10
    14d0:	93 87       	std	Z+11, r25	; 0x0b
    14d2:	82 87       	std	Z+10, r24	; 0x0a
    14d4:	08 95       	ret

000014d6 <fputc>:
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	18 2f       	mov	r17, r24
    14e0:	09 2f       	mov	r16, r25
    14e2:	eb 01       	movw	r28, r22
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	81 fd       	sbrc	r24, 1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <fputc+0x1a>
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	9f ef       	ldi	r25, 0xFF	; 255
    14ee:	20 c0       	rjmp	.+64     	; 0x1530 <fputc+0x5a>
    14f0:	82 ff       	sbrs	r24, 2
    14f2:	10 c0       	rjmp	.+32     	; 0x1514 <fputc+0x3e>
    14f4:	4e 81       	ldd	r20, Y+6	; 0x06
    14f6:	5f 81       	ldd	r21, Y+7	; 0x07
    14f8:	2c 81       	ldd	r18, Y+4	; 0x04
    14fa:	3d 81       	ldd	r19, Y+5	; 0x05
    14fc:	42 17       	cp	r20, r18
    14fe:	53 07       	cpc	r21, r19
    1500:	7c f4       	brge	.+30     	; 0x1520 <fputc+0x4a>
    1502:	e8 81       	ld	r30, Y
    1504:	f9 81       	ldd	r31, Y+1	; 0x01
    1506:	9f 01       	movw	r18, r30
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	39 83       	std	Y+1, r19	; 0x01
    150e:	28 83       	st	Y, r18
    1510:	10 83       	st	Z, r17
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <fputc+0x4a>
    1514:	e8 85       	ldd	r30, Y+8	; 0x08
    1516:	f9 85       	ldd	r31, Y+9	; 0x09
    1518:	81 2f       	mov	r24, r17
    151a:	09 95       	icall
    151c:	89 2b       	or	r24, r25
    151e:	29 f7       	brne	.-54     	; 0x14ea <fputc+0x14>
    1520:	2e 81       	ldd	r18, Y+6	; 0x06
    1522:	3f 81       	ldd	r19, Y+7	; 0x07
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	3f 83       	std	Y+7, r19	; 0x07
    152a:	2e 83       	std	Y+6, r18	; 0x06
    152c:	81 2f       	mov	r24, r17
    152e:	90 2f       	mov	r25, r16
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <printf_P>:
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	fe 01       	movw	r30, r28
    1548:	37 96       	adiw	r30, 0x07	; 7
    154a:	61 91       	ld	r22, Z+
    154c:	71 91       	ld	r23, Z+
    154e:	04 ea       	ldi	r16, 0xA4	; 164
    1550:	11 e0       	ldi	r17, 0x01	; 1
    1552:	d8 01       	movw	r26, r16
    1554:	8d 91       	ld	r24, X+
    1556:	9c 91       	ld	r25, X
    1558:	dc 01       	movw	r26, r24
    155a:	13 96       	adiw	r26, 0x03	; 3
    155c:	2c 91       	ld	r18, X
    155e:	13 97       	sbiw	r26, 0x03	; 3
    1560:	28 60       	ori	r18, 0x08	; 8
    1562:	13 96       	adiw	r26, 0x03	; 3
    1564:	2c 93       	st	X, r18
    1566:	af 01       	movw	r20, r30
    1568:	3a d0       	rcall	.+116    	; 0x15de <vfprintf>
    156a:	d8 01       	movw	r26, r16
    156c:	ed 91       	ld	r30, X+
    156e:	fc 91       	ld	r31, X
    1570:	23 81       	ldd	r18, Z+3	; 0x03
    1572:	27 7f       	andi	r18, 0xF7	; 247
    1574:	23 83       	std	Z+3, r18	; 0x03
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <puts_P>:
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	e0 91 a4 01 	lds	r30, 0x01A4
    158e:	f0 91 a5 01 	lds	r31, 0x01A5
    1592:	83 81       	ldd	r24, Z+3	; 0x03
    1594:	81 ff       	sbrs	r24, 1
    1596:	1c c0       	rjmp	.+56     	; 0x15d0 <puts_P+0x50>
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	fe 01       	movw	r30, r28
    159e:	84 91       	lpm	r24, Z
    15a0:	60 91 a4 01 	lds	r22, 0x01A4
    15a4:	70 91 a5 01 	lds	r23, 0x01A5
    15a8:	db 01       	movw	r26, r22
    15aa:	18 96       	adiw	r26, 0x08	; 8
    15ac:	ed 91       	ld	r30, X+
    15ae:	fc 91       	ld	r31, X
    15b0:	19 97       	sbiw	r26, 0x09	; 9
    15b2:	88 23       	and	r24, r24
    15b4:	39 f0       	breq	.+14     	; 0x15c4 <puts_P+0x44>
    15b6:	09 95       	icall
    15b8:	89 2b       	or	r24, r25
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <puts_P+0x40>
    15bc:	0f ef       	ldi	r16, 0xFF	; 255
    15be:	1f ef       	ldi	r17, 0xFF	; 255
    15c0:	21 96       	adiw	r28, 0x01	; 1
    15c2:	ec cf       	rjmp	.-40     	; 0x159c <puts_P+0x1c>
    15c4:	8a e0       	ldi	r24, 0x0A	; 10
    15c6:	09 95       	icall
    15c8:	89 2b       	or	r24, r25
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <puts_P+0x50>
    15cc:	c8 01       	movw	r24, r16
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <puts_P+0x54>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <vfprintf>:
    15de:	2f 92       	push	r2
    15e0:	3f 92       	push	r3
    15e2:	4f 92       	push	r4
    15e4:	5f 92       	push	r5
    15e6:	6f 92       	push	r6
    15e8:	7f 92       	push	r7
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	2c 97       	sbiw	r28, 0x0c	; 12
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	7c 01       	movw	r14, r24
    1614:	6b 01       	movw	r12, r22
    1616:	8a 01       	movw	r16, r20
    1618:	fc 01       	movw	r30, r24
    161a:	17 82       	std	Z+7, r1	; 0x07
    161c:	16 82       	std	Z+6, r1	; 0x06
    161e:	83 81       	ldd	r24, Z+3	; 0x03
    1620:	81 ff       	sbrs	r24, 1
    1622:	b0 c1       	rjmp	.+864    	; 0x1984 <vfprintf+0x3a6>
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	4c 01       	movw	r8, r24
    162a:	f7 01       	movw	r30, r14
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	f6 01       	movw	r30, r12
    1630:	93 fd       	sbrc	r25, 3
    1632:	85 91       	lpm	r24, Z+
    1634:	93 ff       	sbrs	r25, 3
    1636:	81 91       	ld	r24, Z+
    1638:	6f 01       	movw	r12, r30
    163a:	88 23       	and	r24, r24
    163c:	09 f4       	brne	.+2      	; 0x1640 <vfprintf+0x62>
    163e:	9e c1       	rjmp	.+828    	; 0x197c <vfprintf+0x39e>
    1640:	85 32       	cpi	r24, 0x25	; 37
    1642:	39 f4       	brne	.+14     	; 0x1652 <vfprintf+0x74>
    1644:	93 fd       	sbrc	r25, 3
    1646:	85 91       	lpm	r24, Z+
    1648:	93 ff       	sbrs	r25, 3
    164a:	81 91       	ld	r24, Z+
    164c:	6f 01       	movw	r12, r30
    164e:	85 32       	cpi	r24, 0x25	; 37
    1650:	21 f4       	brne	.+8      	; 0x165a <vfprintf+0x7c>
    1652:	b7 01       	movw	r22, r14
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	3f df       	rcall	.-386    	; 0x14d6 <fputc>
    1658:	e8 cf       	rjmp	.-48     	; 0x162a <vfprintf+0x4c>
    165a:	51 2c       	mov	r5, r1
    165c:	31 2c       	mov	r3, r1
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	20 32       	cpi	r18, 0x20	; 32
    1662:	a0 f4       	brcc	.+40     	; 0x168c <vfprintf+0xae>
    1664:	8b 32       	cpi	r24, 0x2B	; 43
    1666:	69 f0       	breq	.+26     	; 0x1682 <vfprintf+0xa4>
    1668:	30 f4       	brcc	.+12     	; 0x1676 <vfprintf+0x98>
    166a:	80 32       	cpi	r24, 0x20	; 32
    166c:	59 f0       	breq	.+22     	; 0x1684 <vfprintf+0xa6>
    166e:	83 32       	cpi	r24, 0x23	; 35
    1670:	69 f4       	brne	.+26     	; 0x168c <vfprintf+0xae>
    1672:	20 61       	ori	r18, 0x10	; 16
    1674:	2c c0       	rjmp	.+88     	; 0x16ce <vfprintf+0xf0>
    1676:	8d 32       	cpi	r24, 0x2D	; 45
    1678:	39 f0       	breq	.+14     	; 0x1688 <vfprintf+0xaa>
    167a:	80 33       	cpi	r24, 0x30	; 48
    167c:	39 f4       	brne	.+14     	; 0x168c <vfprintf+0xae>
    167e:	21 60       	ori	r18, 0x01	; 1
    1680:	26 c0       	rjmp	.+76     	; 0x16ce <vfprintf+0xf0>
    1682:	22 60       	ori	r18, 0x02	; 2
    1684:	24 60       	ori	r18, 0x04	; 4
    1686:	23 c0       	rjmp	.+70     	; 0x16ce <vfprintf+0xf0>
    1688:	28 60       	ori	r18, 0x08	; 8
    168a:	21 c0       	rjmp	.+66     	; 0x16ce <vfprintf+0xf0>
    168c:	27 fd       	sbrc	r18, 7
    168e:	27 c0       	rjmp	.+78     	; 0x16de <vfprintf+0x100>
    1690:	30 ed       	ldi	r19, 0xD0	; 208
    1692:	38 0f       	add	r19, r24
    1694:	3a 30       	cpi	r19, 0x0A	; 10
    1696:	78 f4       	brcc	.+30     	; 0x16b6 <vfprintf+0xd8>
    1698:	26 ff       	sbrs	r18, 6
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <vfprintf+0xca>
    169c:	fa e0       	ldi	r31, 0x0A	; 10
    169e:	5f 9e       	mul	r5, r31
    16a0:	30 0d       	add	r19, r0
    16a2:	11 24       	eor	r1, r1
    16a4:	53 2e       	mov	r5, r19
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <vfprintf+0xf0>
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	38 9e       	mul	r3, r24
    16ac:	30 0d       	add	r19, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	33 2e       	mov	r3, r19
    16b2:	20 62       	ori	r18, 0x20	; 32
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <vfprintf+0xf0>
    16b6:	8e 32       	cpi	r24, 0x2E	; 46
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <vfprintf+0xe4>
    16ba:	26 fd       	sbrc	r18, 6
    16bc:	5f c1       	rjmp	.+702    	; 0x197c <vfprintf+0x39e>
    16be:	20 64       	ori	r18, 0x40	; 64
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0xf0>
    16c2:	8c 36       	cpi	r24, 0x6C	; 108
    16c4:	11 f4       	brne	.+4      	; 0x16ca <vfprintf+0xec>
    16c6:	20 68       	ori	r18, 0x80	; 128
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <vfprintf+0xf0>
    16ca:	88 36       	cpi	r24, 0x68	; 104
    16cc:	41 f4       	brne	.+16     	; 0x16de <vfprintf+0x100>
    16ce:	f6 01       	movw	r30, r12
    16d0:	93 fd       	sbrc	r25, 3
    16d2:	85 91       	lpm	r24, Z+
    16d4:	93 ff       	sbrs	r25, 3
    16d6:	81 91       	ld	r24, Z+
    16d8:	6f 01       	movw	r12, r30
    16da:	81 11       	cpse	r24, r1
    16dc:	c1 cf       	rjmp	.-126    	; 0x1660 <vfprintf+0x82>
    16de:	98 2f       	mov	r25, r24
    16e0:	9f 7d       	andi	r25, 0xDF	; 223
    16e2:	95 54       	subi	r25, 0x45	; 69
    16e4:	93 30       	cpi	r25, 0x03	; 3
    16e6:	28 f4       	brcc	.+10     	; 0x16f2 <vfprintf+0x114>
    16e8:	0c 5f       	subi	r16, 0xFC	; 252
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	ff e3       	ldi	r31, 0x3F	; 63
    16ee:	f9 83       	std	Y+1, r31	; 0x01
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <vfprintf+0x12e>
    16f2:	83 36       	cpi	r24, 0x63	; 99
    16f4:	31 f0       	breq	.+12     	; 0x1702 <vfprintf+0x124>
    16f6:	83 37       	cpi	r24, 0x73	; 115
    16f8:	71 f0       	breq	.+28     	; 0x1716 <vfprintf+0x138>
    16fa:	83 35       	cpi	r24, 0x53	; 83
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0x122>
    16fe:	57 c0       	rjmp	.+174    	; 0x17ae <vfprintf+0x1d0>
    1700:	21 c0       	rjmp	.+66     	; 0x1744 <vfprintf+0x166>
    1702:	f8 01       	movw	r30, r16
    1704:	80 81       	ld	r24, Z
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	0e 5f       	subi	r16, 0xFE	; 254
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	44 24       	eor	r4, r4
    170e:	43 94       	inc	r4
    1710:	51 2c       	mov	r5, r1
    1712:	54 01       	movw	r10, r8
    1714:	14 c0       	rjmp	.+40     	; 0x173e <vfprintf+0x160>
    1716:	38 01       	movw	r6, r16
    1718:	f2 e0       	ldi	r31, 0x02	; 2
    171a:	6f 0e       	add	r6, r31
    171c:	71 1c       	adc	r7, r1
    171e:	f8 01       	movw	r30, r16
    1720:	a0 80       	ld	r10, Z
    1722:	b1 80       	ldd	r11, Z+1	; 0x01
    1724:	26 ff       	sbrs	r18, 6
    1726:	03 c0       	rjmp	.+6      	; 0x172e <vfprintf+0x150>
    1728:	65 2d       	mov	r22, r5
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x154>
    172e:	6f ef       	ldi	r22, 0xFF	; 255
    1730:	7f ef       	ldi	r23, 0xFF	; 255
    1732:	c5 01       	movw	r24, r10
    1734:	2c 87       	std	Y+12, r18	; 0x0c
    1736:	4c d1       	rcall	.+664    	; 0x19d0 <strnlen>
    1738:	2c 01       	movw	r4, r24
    173a:	83 01       	movw	r16, r6
    173c:	2c 85       	ldd	r18, Y+12	; 0x0c
    173e:	2f 77       	andi	r18, 0x7F	; 127
    1740:	22 2e       	mov	r2, r18
    1742:	16 c0       	rjmp	.+44     	; 0x1770 <vfprintf+0x192>
    1744:	38 01       	movw	r6, r16
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	6f 0e       	add	r6, r31
    174a:	71 1c       	adc	r7, r1
    174c:	f8 01       	movw	r30, r16
    174e:	a0 80       	ld	r10, Z
    1750:	b1 80       	ldd	r11, Z+1	; 0x01
    1752:	26 ff       	sbrs	r18, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x17e>
    1756:	65 2d       	mov	r22, r5
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x182>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c5 01       	movw	r24, r10
    1762:	2c 87       	std	Y+12, r18	; 0x0c
    1764:	2a d1       	rcall	.+596    	; 0x19ba <strnlen_P>
    1766:	2c 01       	movw	r4, r24
    1768:	2c 85       	ldd	r18, Y+12	; 0x0c
    176a:	20 68       	ori	r18, 0x80	; 128
    176c:	22 2e       	mov	r2, r18
    176e:	83 01       	movw	r16, r6
    1770:	23 fc       	sbrc	r2, 3
    1772:	19 c0       	rjmp	.+50     	; 0x17a6 <vfprintf+0x1c8>
    1774:	83 2d       	mov	r24, r3
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	48 16       	cp	r4, r24
    177a:	59 06       	cpc	r5, r25
    177c:	a0 f4       	brcc	.+40     	; 0x17a6 <vfprintf+0x1c8>
    177e:	b7 01       	movw	r22, r14
    1780:	80 e2       	ldi	r24, 0x20	; 32
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a8 de       	rcall	.-688    	; 0x14d6 <fputc>
    1786:	3a 94       	dec	r3
    1788:	f5 cf       	rjmp	.-22     	; 0x1774 <vfprintf+0x196>
    178a:	f5 01       	movw	r30, r10
    178c:	27 fc       	sbrc	r2, 7
    178e:	85 91       	lpm	r24, Z+
    1790:	27 fe       	sbrs	r2, 7
    1792:	81 91       	ld	r24, Z+
    1794:	5f 01       	movw	r10, r30
    1796:	b7 01       	movw	r22, r14
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9d de       	rcall	.-710    	; 0x14d6 <fputc>
    179c:	31 10       	cpse	r3, r1
    179e:	3a 94       	dec	r3
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	4f 1a       	sub	r4, r31
    17a4:	51 08       	sbc	r5, r1
    17a6:	41 14       	cp	r4, r1
    17a8:	51 04       	cpc	r5, r1
    17aa:	79 f7       	brne	.-34     	; 0x178a <vfprintf+0x1ac>
    17ac:	de c0       	rjmp	.+444    	; 0x196a <vfprintf+0x38c>
    17ae:	84 36       	cpi	r24, 0x64	; 100
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <vfprintf+0x1d8>
    17b2:	89 36       	cpi	r24, 0x69	; 105
    17b4:	31 f5       	brne	.+76     	; 0x1802 <vfprintf+0x224>
    17b6:	f8 01       	movw	r30, r16
    17b8:	27 ff       	sbrs	r18, 7
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x1ec>
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	0c 5f       	subi	r16, 0xFC	; 252
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <vfprintf+0x1fc>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	88 27       	eor	r24, r24
    17d0:	77 fd       	sbrc	r23, 7
    17d2:	80 95       	com	r24
    17d4:	98 2f       	mov	r25, r24
    17d6:	0e 5f       	subi	r16, 0xFE	; 254
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	2f 76       	andi	r18, 0x6F	; 111
    17dc:	b2 2e       	mov	r11, r18
    17de:	97 ff       	sbrs	r25, 7
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <vfprintf+0x216>
    17e2:	90 95       	com	r25
    17e4:	80 95       	com	r24
    17e6:	70 95       	com	r23
    17e8:	61 95       	neg	r22
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	20 68       	ori	r18, 0x80	; 128
    17f2:	b2 2e       	mov	r11, r18
    17f4:	2a e0       	ldi	r18, 0x0A	; 10
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a4 01       	movw	r20, r8
    17fa:	f5 d0       	rcall	.+490    	; 0x19e6 <__ultoa_invert>
    17fc:	a8 2e       	mov	r10, r24
    17fe:	a8 18       	sub	r10, r8
    1800:	43 c0       	rjmp	.+134    	; 0x1888 <vfprintf+0x2aa>
    1802:	85 37       	cpi	r24, 0x75	; 117
    1804:	29 f4       	brne	.+10     	; 0x1810 <vfprintf+0x232>
    1806:	2f 7e       	andi	r18, 0xEF	; 239
    1808:	b2 2e       	mov	r11, r18
    180a:	2a e0       	ldi	r18, 0x0A	; 10
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	25 c0       	rjmp	.+74     	; 0x185a <vfprintf+0x27c>
    1810:	f2 2f       	mov	r31, r18
    1812:	f9 7f       	andi	r31, 0xF9	; 249
    1814:	bf 2e       	mov	r11, r31
    1816:	8f 36       	cpi	r24, 0x6F	; 111
    1818:	c1 f0       	breq	.+48     	; 0x184a <vfprintf+0x26c>
    181a:	18 f4       	brcc	.+6      	; 0x1822 <vfprintf+0x244>
    181c:	88 35       	cpi	r24, 0x58	; 88
    181e:	79 f0       	breq	.+30     	; 0x183e <vfprintf+0x260>
    1820:	ad c0       	rjmp	.+346    	; 0x197c <vfprintf+0x39e>
    1822:	80 37       	cpi	r24, 0x70	; 112
    1824:	19 f0       	breq	.+6      	; 0x182c <vfprintf+0x24e>
    1826:	88 37       	cpi	r24, 0x78	; 120
    1828:	21 f0       	breq	.+8      	; 0x1832 <vfprintf+0x254>
    182a:	a8 c0       	rjmp	.+336    	; 0x197c <vfprintf+0x39e>
    182c:	2f 2f       	mov	r18, r31
    182e:	20 61       	ori	r18, 0x10	; 16
    1830:	b2 2e       	mov	r11, r18
    1832:	b4 fe       	sbrs	r11, 4
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <vfprintf+0x272>
    1836:	8b 2d       	mov	r24, r11
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	b8 2e       	mov	r11, r24
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <vfprintf+0x272>
    183e:	24 ff       	sbrs	r18, 4
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <vfprintf+0x278>
    1842:	9f 2f       	mov	r25, r31
    1844:	96 60       	ori	r25, 0x06	; 6
    1846:	b9 2e       	mov	r11, r25
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <vfprintf+0x278>
    184a:	28 e0       	ldi	r18, 0x08	; 8
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	05 c0       	rjmp	.+10     	; 0x185a <vfprintf+0x27c>
    1850:	20 e1       	ldi	r18, 0x10	; 16
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x27c>
    1856:	20 e1       	ldi	r18, 0x10	; 16
    1858:	32 e0       	ldi	r19, 0x02	; 2
    185a:	f8 01       	movw	r30, r16
    185c:	b7 fe       	sbrs	r11, 7
    185e:	07 c0       	rjmp	.+14     	; 0x186e <vfprintf+0x290>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	0c 5f       	subi	r16, 0xFC	; 252
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	06 c0       	rjmp	.+12     	; 0x187a <vfprintf+0x29c>
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 5f       	subi	r16, 0xFE	; 254
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	a4 01       	movw	r20, r8
    187c:	b4 d0       	rcall	.+360    	; 0x19e6 <__ultoa_invert>
    187e:	a8 2e       	mov	r10, r24
    1880:	a8 18       	sub	r10, r8
    1882:	fb 2d       	mov	r31, r11
    1884:	ff 77       	andi	r31, 0x7F	; 127
    1886:	bf 2e       	mov	r11, r31
    1888:	b6 fe       	sbrs	r11, 6
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <vfprintf+0x2c4>
    188c:	2b 2d       	mov	r18, r11
    188e:	2e 7f       	andi	r18, 0xFE	; 254
    1890:	a5 14       	cp	r10, r5
    1892:	50 f4       	brcc	.+20     	; 0x18a8 <vfprintf+0x2ca>
    1894:	b4 fe       	sbrs	r11, 4
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <vfprintf+0x2ce>
    1898:	b2 fc       	sbrc	r11, 2
    189a:	08 c0       	rjmp	.+16     	; 0x18ac <vfprintf+0x2ce>
    189c:	2b 2d       	mov	r18, r11
    189e:	2e 7e       	andi	r18, 0xEE	; 238
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <vfprintf+0x2ce>
    18a2:	7a 2c       	mov	r7, r10
    18a4:	2b 2d       	mov	r18, r11
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <vfprintf+0x2d0>
    18a8:	7a 2c       	mov	r7, r10
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vfprintf+0x2d0>
    18ac:	75 2c       	mov	r7, r5
    18ae:	24 ff       	sbrs	r18, 4
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <vfprintf+0x2ee>
    18b2:	fe 01       	movw	r30, r28
    18b4:	ea 0d       	add	r30, r10
    18b6:	f1 1d       	adc	r31, r1
    18b8:	80 81       	ld	r24, Z
    18ba:	80 33       	cpi	r24, 0x30	; 48
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <vfprintf+0x2e4>
    18be:	29 7e       	andi	r18, 0xE9	; 233
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <vfprintf+0x2f6>
    18c2:	22 ff       	sbrs	r18, 2
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <vfprintf+0x2f4>
    18c6:	73 94       	inc	r7
    18c8:	73 94       	inc	r7
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <vfprintf+0x2f6>
    18cc:	82 2f       	mov	r24, r18
    18ce:	86 78       	andi	r24, 0x86	; 134
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <vfprintf+0x2f6>
    18d2:	73 94       	inc	r7
    18d4:	23 fd       	sbrc	r18, 3
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <vfprintf+0x31e>
    18d8:	20 ff       	sbrs	r18, 0
    18da:	06 c0       	rjmp	.+12     	; 0x18e8 <vfprintf+0x30a>
    18dc:	5a 2c       	mov	r5, r10
    18de:	73 14       	cp	r7, r3
    18e0:	18 f4       	brcc	.+6      	; 0x18e8 <vfprintf+0x30a>
    18e2:	53 0c       	add	r5, r3
    18e4:	57 18       	sub	r5, r7
    18e6:	73 2c       	mov	r7, r3
    18e8:	73 14       	cp	r7, r3
    18ea:	60 f4       	brcc	.+24     	; 0x1904 <vfprintf+0x326>
    18ec:	b7 01       	movw	r22, r14
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	2c 87       	std	Y+12, r18	; 0x0c
    18f4:	f0 dd       	rcall	.-1056   	; 0x14d6 <fputc>
    18f6:	73 94       	inc	r7
    18f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fa:	f6 cf       	rjmp	.-20     	; 0x18e8 <vfprintf+0x30a>
    18fc:	73 14       	cp	r7, r3
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <vfprintf+0x326>
    1900:	37 18       	sub	r3, r7
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x328>
    1904:	31 2c       	mov	r3, r1
    1906:	24 ff       	sbrs	r18, 4
    1908:	11 c0       	rjmp	.+34     	; 0x192c <vfprintf+0x34e>
    190a:	b7 01       	movw	r22, r14
    190c:	80 e3       	ldi	r24, 0x30	; 48
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2c 87       	std	Y+12, r18	; 0x0c
    1912:	e1 dd       	rcall	.-1086   	; 0x14d6 <fputc>
    1914:	2c 85       	ldd	r18, Y+12	; 0x0c
    1916:	22 ff       	sbrs	r18, 2
    1918:	16 c0       	rjmp	.+44     	; 0x1946 <vfprintf+0x368>
    191a:	21 ff       	sbrs	r18, 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x346>
    191e:	88 e5       	ldi	r24, 0x58	; 88
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x34a>
    1924:	88 e7       	ldi	r24, 0x78	; 120
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	b7 01       	movw	r22, r14
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <vfprintf+0x366>
    192c:	82 2f       	mov	r24, r18
    192e:	86 78       	andi	r24, 0x86	; 134
    1930:	51 f0       	breq	.+20     	; 0x1946 <vfprintf+0x368>
    1932:	21 fd       	sbrc	r18, 1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x35c>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	01 c0       	rjmp	.+2      	; 0x193c <vfprintf+0x35e>
    193a:	8b e2       	ldi	r24, 0x2B	; 43
    193c:	27 fd       	sbrc	r18, 7
    193e:	8d e2       	ldi	r24, 0x2D	; 45
    1940:	b7 01       	movw	r22, r14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	c8 dd       	rcall	.-1136   	; 0x14d6 <fputc>
    1946:	a5 14       	cp	r10, r5
    1948:	30 f4       	brcc	.+12     	; 0x1956 <vfprintf+0x378>
    194a:	b7 01       	movw	r22, r14
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	c2 dd       	rcall	.-1148   	; 0x14d6 <fputc>
    1952:	5a 94       	dec	r5
    1954:	f8 cf       	rjmp	.-16     	; 0x1946 <vfprintf+0x368>
    1956:	aa 94       	dec	r10
    1958:	f4 01       	movw	r30, r8
    195a:	ea 0d       	add	r30, r10
    195c:	f1 1d       	adc	r31, r1
    195e:	80 81       	ld	r24, Z
    1960:	b7 01       	movw	r22, r14
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b8 dd       	rcall	.-1168   	; 0x14d6 <fputc>
    1966:	a1 10       	cpse	r10, r1
    1968:	f6 cf       	rjmp	.-20     	; 0x1956 <vfprintf+0x378>
    196a:	33 20       	and	r3, r3
    196c:	09 f4       	brne	.+2      	; 0x1970 <vfprintf+0x392>
    196e:	5d ce       	rjmp	.-838    	; 0x162a <vfprintf+0x4c>
    1970:	b7 01       	movw	r22, r14
    1972:	80 e2       	ldi	r24, 0x20	; 32
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	af dd       	rcall	.-1186   	; 0x14d6 <fputc>
    1978:	3a 94       	dec	r3
    197a:	f7 cf       	rjmp	.-18     	; 0x196a <vfprintf+0x38c>
    197c:	f7 01       	movw	r30, r14
    197e:	86 81       	ldd	r24, Z+6	; 0x06
    1980:	97 81       	ldd	r25, Z+7	; 0x07
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0x3aa>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	2c 96       	adiw	r28, 0x0c	; 12
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	7f 90       	pop	r7
    19ae:	6f 90       	pop	r6
    19b0:	5f 90       	pop	r5
    19b2:	4f 90       	pop	r4
    19b4:	3f 90       	pop	r3
    19b6:	2f 90       	pop	r2
    19b8:	08 95       	ret

000019ba <strnlen_P>:
    19ba:	fc 01       	movw	r30, r24
    19bc:	05 90       	lpm	r0, Z+
    19be:	61 50       	subi	r22, 0x01	; 1
    19c0:	70 40       	sbci	r23, 0x00	; 0
    19c2:	01 10       	cpse	r0, r1
    19c4:	d8 f7       	brcc	.-10     	; 0x19bc <strnlen_P+0x2>
    19c6:	80 95       	com	r24
    19c8:	90 95       	com	r25
    19ca:	8e 0f       	add	r24, r30
    19cc:	9f 1f       	adc	r25, r31
    19ce:	08 95       	ret

000019d0 <strnlen>:
    19d0:	fc 01       	movw	r30, r24
    19d2:	61 50       	subi	r22, 0x01	; 1
    19d4:	70 40       	sbci	r23, 0x00	; 0
    19d6:	01 90       	ld	r0, Z+
    19d8:	01 10       	cpse	r0, r1
    19da:	d8 f7       	brcc	.-10     	; 0x19d2 <strnlen+0x2>
    19dc:	80 95       	com	r24
    19de:	90 95       	com	r25
    19e0:	8e 0f       	add	r24, r30
    19e2:	9f 1f       	adc	r25, r31
    19e4:	08 95       	ret

000019e6 <__ultoa_invert>:
    19e6:	fa 01       	movw	r30, r20
    19e8:	aa 27       	eor	r26, r26
    19ea:	28 30       	cpi	r18, 0x08	; 8
    19ec:	51 f1       	breq	.+84     	; 0x1a42 <__ultoa_invert+0x5c>
    19ee:	20 31       	cpi	r18, 0x10	; 16
    19f0:	81 f1       	breq	.+96     	; 0x1a52 <__ultoa_invert+0x6c>
    19f2:	e8 94       	clt
    19f4:	6f 93       	push	r22
    19f6:	6e 7f       	andi	r22, 0xFE	; 254
    19f8:	6e 5f       	subi	r22, 0xFE	; 254
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	af 4f       	sbci	r26, 0xFF	; 255
    1a02:	b1 e0       	ldi	r27, 0x01	; 1
    1a04:	3e d0       	rcall	.+124    	; 0x1a82 <__ultoa_invert+0x9c>
    1a06:	b4 e0       	ldi	r27, 0x04	; 4
    1a08:	3c d0       	rcall	.+120    	; 0x1a82 <__ultoa_invert+0x9c>
    1a0a:	67 0f       	add	r22, r23
    1a0c:	78 1f       	adc	r23, r24
    1a0e:	89 1f       	adc	r24, r25
    1a10:	9a 1f       	adc	r25, r26
    1a12:	a1 1d       	adc	r26, r1
    1a14:	68 0f       	add	r22, r24
    1a16:	79 1f       	adc	r23, r25
    1a18:	8a 1f       	adc	r24, r26
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	6a 0f       	add	r22, r26
    1a20:	71 1d       	adc	r23, r1
    1a22:	81 1d       	adc	r24, r1
    1a24:	91 1d       	adc	r25, r1
    1a26:	a1 1d       	adc	r26, r1
    1a28:	20 d0       	rcall	.+64     	; 0x1a6a <__ultoa_invert+0x84>
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <__ultoa_invert+0x48>
    1a2c:	68 94       	set
    1a2e:	3f 91       	pop	r19
    1a30:	2a e0       	ldi	r18, 0x0A	; 10
    1a32:	26 9f       	mul	r18, r22
    1a34:	11 24       	eor	r1, r1
    1a36:	30 19       	sub	r19, r0
    1a38:	30 5d       	subi	r19, 0xD0	; 208
    1a3a:	31 93       	st	Z+, r19
    1a3c:	de f6       	brtc	.-74     	; 0x19f4 <__ultoa_invert+0xe>
    1a3e:	cf 01       	movw	r24, r30
    1a40:	08 95       	ret
    1a42:	46 2f       	mov	r20, r22
    1a44:	47 70       	andi	r20, 0x07	; 7
    1a46:	40 5d       	subi	r20, 0xD0	; 208
    1a48:	41 93       	st	Z+, r20
    1a4a:	b3 e0       	ldi	r27, 0x03	; 3
    1a4c:	0f d0       	rcall	.+30     	; 0x1a6c <__ultoa_invert+0x86>
    1a4e:	c9 f7       	brne	.-14     	; 0x1a42 <__ultoa_invert+0x5c>
    1a50:	f6 cf       	rjmp	.-20     	; 0x1a3e <__ultoa_invert+0x58>
    1a52:	46 2f       	mov	r20, r22
    1a54:	4f 70       	andi	r20, 0x0F	; 15
    1a56:	40 5d       	subi	r20, 0xD0	; 208
    1a58:	4a 33       	cpi	r20, 0x3A	; 58
    1a5a:	18 f0       	brcs	.+6      	; 0x1a62 <__ultoa_invert+0x7c>
    1a5c:	49 5d       	subi	r20, 0xD9	; 217
    1a5e:	31 fd       	sbrc	r19, 1
    1a60:	40 52       	subi	r20, 0x20	; 32
    1a62:	41 93       	st	Z+, r20
    1a64:	02 d0       	rcall	.+4      	; 0x1a6a <__ultoa_invert+0x84>
    1a66:	a9 f7       	brne	.-22     	; 0x1a52 <__ultoa_invert+0x6c>
    1a68:	ea cf       	rjmp	.-44     	; 0x1a3e <__ultoa_invert+0x58>
    1a6a:	b4 e0       	ldi	r27, 0x04	; 4
    1a6c:	a6 95       	lsr	r26
    1a6e:	97 95       	ror	r25
    1a70:	87 95       	ror	r24
    1a72:	77 95       	ror	r23
    1a74:	67 95       	ror	r22
    1a76:	ba 95       	dec	r27
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__ultoa_invert+0x86>
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 05       	cpc	r22, r1
    1a7e:	71 05       	cpc	r23, r1
    1a80:	08 95       	ret
    1a82:	9b 01       	movw	r18, r22
    1a84:	ac 01       	movw	r20, r24
    1a86:	0a 2e       	mov	r0, r26
    1a88:	06 94       	lsr	r0
    1a8a:	57 95       	ror	r21
    1a8c:	47 95       	ror	r20
    1a8e:	37 95       	ror	r19
    1a90:	27 95       	ror	r18
    1a92:	ba 95       	dec	r27
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__ultoa_invert+0xa2>
    1a96:	62 0f       	add	r22, r18
    1a98:	73 1f       	adc	r23, r19
    1a9a:	84 1f       	adc	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	a0 1d       	adc	r26, r0
    1aa0:	08 95       	ret

00001aa2 <_exit>:
    1aa2:	f8 94       	cli

00001aa4 <__stop_program>:
    1aa4:	ff cf       	rjmp	.-2      	; 0x1aa4 <__stop_program>

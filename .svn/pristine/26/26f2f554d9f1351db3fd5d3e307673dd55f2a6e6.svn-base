
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000e6e  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a63e  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ae7  00000000  00000000  0000c716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f9f  00000000  00000000  0000f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef4  00000000  00000000  0001319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004130  00000000  00000000  00014090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006692  00000000  00000000  000181c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f0  00000000  00000000  0001e852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	c1 c0       	rjmp	.+386    	; 0x188 <__bad_interrupt>
   6:	00 00       	nop
   8:	bf c0       	rjmp	.+382    	; 0x188 <__bad_interrupt>
   a:	00 00       	nop
   c:	bd c0       	rjmp	.+378    	; 0x188 <__bad_interrupt>
   e:	00 00       	nop
  10:	bb c0       	rjmp	.+374    	; 0x188 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__bad_interrupt>
  16:	00 00       	nop
  18:	b7 c0       	rjmp	.+366    	; 0x188 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b5 c0       	rjmp	.+362    	; 0x188 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b3 c0       	rjmp	.+358    	; 0x188 <__bad_interrupt>
  22:	00 00       	nop
  24:	b1 c0       	rjmp	.+354    	; 0x188 <__bad_interrupt>
  26:	00 00       	nop
  28:	17 c4       	rjmp	.+2094   	; 0x858 <__vector_10>
  2a:	00 00       	nop
  2c:	ad c0       	rjmp	.+346    	; 0x188 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ab c0       	rjmp	.+342    	; 0x188 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	a7 c0       	rjmp	.+334    	; 0x188 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a5 c0       	rjmp	.+330    	; 0x188 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a3 c0       	rjmp	.+326    	; 0x188 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c0       	rjmp	.+314    	; 0x188 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9b c0       	rjmp	.+310    	; 0x188 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	99 c0       	rjmp	.+306    	; 0x188 <__bad_interrupt>
  56:	00 00       	nop
  58:	97 c0       	rjmp	.+302    	; 0x188 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__bad_interrupt>
  5e:	00 00       	nop
  60:	93 c0       	rjmp	.+294    	; 0x188 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	91 c0       	rjmp	.+290    	; 0x188 <__bad_interrupt>
  66:	00 00       	nop
  68:	8f c0       	rjmp	.+286    	; 0x188 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	8d c0       	rjmp	.+282    	; 0x188 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8b c0       	rjmp	.+278    	; 0x188 <__bad_interrupt>
  72:	00 00       	nop
  74:	89 c0       	rjmp	.+274    	; 0x188 <__bad_interrupt>
  76:	00 00       	nop
  78:	87 c0       	rjmp	.+270    	; 0x188 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	85 c0       	rjmp	.+266    	; 0x188 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	83 c0       	rjmp	.+262    	; 0x188 <__bad_interrupt>
  82:	00 00       	nop
  84:	81 c0       	rjmp	.+258    	; 0x188 <__bad_interrupt>
  86:	00 00       	nop
  88:	7f c0       	rjmp	.+254    	; 0x188 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	7d c0       	rjmp	.+250    	; 0x188 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7b c0       	rjmp	.+246    	; 0x188 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	79 c0       	rjmp	.+242    	; 0x188 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000b8 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
	{
		uint8_t  HIDReportItem  = *ReportData;
  e6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 106:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 116:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 136:	05 25 01 01 03                                      .%...

0000013b <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
 14b:	00 01 00                                            ...

0000014e <__ctors_end>:
				break;
 14e:	11 24       	eor	r1, r1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	ee ec       	ldi	r30, 0xCE	; 206
				ReportSize     -= 2;
 162:	fd e0       	ldi	r31, 0x0D	; 13
 164:	00 e0       	ldi	r16, 0x00	; 0
				ReportData     += 2;
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
				break;
 16c:	0d 92       	st	X+, r0

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	ac 30       	cpi	r26, 0x0C	; 12
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>

00000174 <__do_clear_bss>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	ac e0       	ldi	r26, 0x0C	; 12
 178:	b1 e0       	ldi	r27, 0x01	; 1
				ReportSize     -= 1;
 17a:	01 c0       	rjmp	.+2      	; 0x17e <.do_clear_bss_start>

0000017c <.do_clear_bss_loop>:
 17c:	1d 92       	st	X+, r1

0000017e <.do_clear_bss_start>:
				ReportData     += 1;
 17e:	aa 31       	cpi	r26, 0x1A	; 26
 180:	b1 07       	cpc	r27, r17
 182:	e1 f7       	brne	.-8      	; 0x17c <.do_clear_bss_loop>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	91 d0       	rcall	.+290    	; 0x2a8 <main>
 186:	21 c6       	rjmp	.+3138   	; 0xdca <_exit>

00000188 <__bad_interrupt>:
 188:	3b cf       	rjmp	.-394    	; 0x0 <__vectors>

0000018a <LEDs_SetAllLEDs>:
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	98 2b       	or	r25, r24
 190:	9b b9       	out	0x0b, r25	; 11
 192:	08 95       	ret

00000194 <SetupHardware>:
 194:	84 b7       	in	r24, 0x34	; 52
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	84 bf       	out	0x34, r24	; 52
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	80 93 60 00 	sts	0x0060, r24
 1a4:	10 92 60 00 	sts	0x0060, r1
 1a8:	0f be       	out	0x3f, r0	; 63

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	80 93 61 00 	sts	0x0061, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	90 93 61 00 	sts	0x0061, r25
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	8f 71       	andi	r24, 0x1F	; 31
 1c0:	84 b9       	out	0x04, r24	; 4
 1c2:	8d b1       	in	r24, 0x0d	; 13
 1c4:	8f 7c       	andi	r24, 0xCF	; 207
 1c6:	8d b9       	out	0x0d, r24	; 13
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	80 6e       	ori	r24, 0xE0	; 224
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	8e b1       	in	r24, 0x0e	; 14
 1d0:	80 63       	ori	r24, 0x30	; 48
 1d2:	8e b9       	out	0x0e, r24	; 14
 1d4:	8a b1       	in	r24, 0x0a	; 10
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	80 6f       	ori	r24, 0xF0	; 240
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	8b b1       	in	r24, 0x0b	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	6a 98       	cbi	0x0d, 2	; 13
 1e2:	72 9a       	sbi	0x0e, 2	; 14
 1e4:	1e c3       	rjmp	.+1596   	; 0x822 <USB_Init>

000001e6 <CheckJoystickMovement>:
 1e6:	1f 93       	push	r17
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
				break;
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <CheckJoystickMovement+0x8>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <CheckJoystickMovement+0xa>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	83 b1       	in	r24, 0x03	; 3
 1f6:	1c b1       	in	r17, 0x0c	; 12
 1f8:	10 95       	com	r17
 1fa:	10 73       	andi	r17, 0x30	; 48
 1fc:	16 95       	lsr	r17
 1fe:	80 95       	com	r24
 200:	80 7e       	andi	r24, 0xE0	; 224
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	18 2b       	or	r17, r24
 204:	20 91 0c 01 	lds	r18, 0x010C
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	21 27       	eor	r18, r17
 20a:	62 99       	sbic	0x0c, 2	; 12
 20c:	02 c0       	rjmp	.+4      	; 0x212 <CheckJoystickMovement+0x2c>
 20e:	39 e0       	ldi	r19, 0x09	; 9
 210:	01 c0       	rjmp	.+2      	; 0x214 <CheckJoystickMovement+0x2e>
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	26 ff       	sbrs	r18, 6
 216:	04 c0       	rjmp	.+8      	; 0x220 <CheckJoystickMovement+0x3a>
 218:	16 ff       	sbrs	r17, 6
 21a:	04 c0       	rjmp	.+8      	; 0x224 <CheckJoystickMovement+0x3e>
 21c:	80 e9       	ldi	r24, 0x90	; 144
 21e:	03 c0       	rjmp	.+6      	; 0x226 <CheckJoystickMovement+0x40>
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	01 c0       	rjmp	.+2      	; 0x226 <CheckJoystickMovement+0x40>
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	27 ff       	sbrs	r18, 7
 228:	05 c0       	rjmp	.+10     	; 0x234 <CheckJoystickMovement+0x4e>
 22a:	9d e3       	ldi	r25, 0x3D	; 61
 22c:	17 ff       	sbrs	r17, 7
 22e:	04 c0       	rjmp	.+8      	; 0x238 <CheckJoystickMovement+0x52>
 230:	80 e9       	ldi	r24, 0x90	; 144
 232:	03 c0       	rjmp	.+6      	; 0x23a <CheckJoystickMovement+0x54>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	9c e3       	ldi	r25, 0x3C	; 60
 236:	01 c0       	rjmp	.+2      	; 0x23a <CheckJoystickMovement+0x54>
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	23 ff       	sbrs	r18, 3
 23c:	06 c0       	rjmp	.+12     	; 0x24a <CheckJoystickMovement+0x64>
 23e:	9e e3       	ldi	r25, 0x3E	; 62
 240:	13 ff       	sbrs	r17, 3
 242:	02 c0       	rjmp	.+4      	; 0x248 <CheckJoystickMovement+0x62>
 244:	80 e9       	ldi	r24, 0x90	; 144
 246:	01 c0       	rjmp	.+2      	; 0x24a <CheckJoystickMovement+0x64>
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	24 ff       	sbrs	r18, 4
 24c:	06 c0       	rjmp	.+12     	; 0x25a <CheckJoystickMovement+0x74>
 24e:	9f e3       	ldi	r25, 0x3F	; 63
 250:	14 ff       	sbrs	r17, 4
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	02 c0       	rjmp	.+4      	; 0x258 <CheckJoystickMovement+0x72>
 254:	80 e9       	ldi	r24, 0x90	; 144
 256:	01 c0       	rjmp	.+2      	; 0x25a <CheckJoystickMovement+0x74>
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	25 ff       	sbrs	r18, 5
 25c:	04 c0       	rjmp	.+8      	; 0x266 <CheckJoystickMovement+0x80>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	15 ff       	sbrs	r17, 5
 260:	20 c0       	rjmp	.+64     	; 0x2a2 <CheckJoystickMovement+0xbc>
 262:	80 e9       	ldi	r24, 0x90	; 144
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <CheckJoystickMovement+0xbe>
 266:	88 23       	and	r24, r24
 268:	91 f0       	breq	.+36     	; 0x28e <CheckJoystickMovement+0xa8>
 26a:	28 2f       	mov	r18, r24
 26c:	22 95       	swap	r18
 26e:	2f 70       	andi	r18, 0x0F	; 15
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	29 83       	std	Y+1, r18	; 0x01
				break;
 272:	83 2b       	or	r24, r19

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	8a 83       	std	Y+2, r24	; 0x02
 276:	9b 83       	std	Y+3, r25	; 0x03
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	8c 83       	std	Y+4, r24	; 0x04
 27c:	be 01       	movw	r22, r28
 27e:	6f 5f       	subi	r22, 0xFF	; 255
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	80 e0       	ldi	r24, 0x00	; 0
				break;
 284:	91 e0       	ldi	r25, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	37 d5       	rcall	.+2670   	; 0xcf6 <MIDI_Device_SendEventPacket>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	53 d5       	rcall	.+2726   	; 0xd34 <MIDI_Device_Flush>
 28e:	10 93 0c 01 	sts	0x010C, r17
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
				break;
 2a0:	08 95       	ret

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	9b e3       	ldi	r25, 0x3B	; 59
 2a6:	e1 cf       	rjmp	.-62     	; 0x26a <CheckJoystickMovement+0x84>

000002a8 <main>:
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
				break;
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <main+0x6>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <main+0x8>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	6f df       	rcall	.-290    	; 0x194 <SetupHardware>
 2b6:	80 e1       	ldi	r24, 0x10	; 16
 2b8:	68 df       	rcall	.-304    	; 0x18a <LEDs_SetAllLEDs>
 2ba:	78 94       	sei
				break;
 2bc:	94 df       	rcall	.-216    	; 0x1e6 <CheckJoystickMovement>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	5c d5       	rcall	.+2744   	; 0xd82 <MIDI_Device_ReceiveEventPacket>
 2ca:	88 23       	and	r24, r24
				break;
 2cc:	81 f0       	breq	.+32     	; 0x2ee <main+0x46>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	89 30       	cpi	r24, 0x09	; 9
 2d2:	51 f4       	brne	.+20     	; 0x2e8 <main+0x40>
				break;
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	88 23       	and	r24, r24
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <main+0x40>
 2da:	8b 81       	ldd	r24, Y+3	; 0x03

				if (ParserData->UsingReportIDs)
 2dc:	81 34       	cpi	r24, 0x41	; 65
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <main+0x3c>
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <main+0x42>
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <main+0x42>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	4f df       	rcall	.-354    	; 0x18a <LEDs_SetAllLEDs>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	e8 cf       	rjmp	.-48     	; 0x2be <main+0x16>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	39 d5       	rcall	.+2674   	; 0xd66 <MIDI_Device_USBTask>
 2f4:	cd d4       	rcall	.+2458   	; 0xc90 <USB_USBTask>
 2f6:	e2 cf       	rjmp	.-60     	; 0x2bc <main+0x14>

000002f8 <EVENT_USB_Device_Connect>:
 2f8:	80 ea       	ldi	r24, 0xA0	; 160
 2fa:	47 cf       	rjmp	.-370    	; 0x18a <LEDs_SetAllLEDs>

000002fc <EVENT_USB_Device_Disconnect>:
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	45 cf       	rjmp	.-374    	; 0x18a <LEDs_SetAllLEDs>

00000300 <EVENT_USB_Device_ConfigurationChanged>:
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	91 e0       	ldi	r25, 0x01	; 1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	e1 d4       	rcall	.+2498   	; 0xcc8 <MIDI_Device_ConfigureEndpoints>
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <EVENT_USB_Device_ConfigurationChanged+0xe>
 30a:	80 e6       	ldi	r24, 0x60	; 96
 30c:	01 c0       	rjmp	.+2      	; 0x310 <EVENT_USB_Device_ConfigurationChanged+0x10>
 30e:	80 e9       	ldi	r24, 0x90	; 144
 310:	3c cf       	rjmp	.-392    	; 0x18a <LEDs_SetAllLEDs>

00000312 <EVENT_USB_Device_ControlRequest>:
 312:	08 95       	ret

00000314 <CALLBACK_USB_GetDescriptor>:
 314:	29 2f       	mov	r18, r25
 316:	33 27       	eor	r19, r19
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	22 30       	cpi	r18, 0x02	; 2
 31a:	31 05       	cpc	r19, r1
 31c:	59 f0       	breq	.+22     	; 0x334 <CALLBACK_USB_GetDescriptor+0x20>
 31e:	23 30       	cpi	r18, 0x03	; 3
 320:	31 05       	cpc	r19, r1
 322:	69 f0       	breq	.+26     	; 0x33e <CALLBACK_USB_GetDescriptor+0x2a>
 324:	21 30       	cpi	r18, 0x01	; 1
 326:	31 05       	cpc	r19, r1
 328:	f9 f4       	brne	.+62     	; 0x368 <CALLBACK_USB_GetDescriptor+0x54>
 32a:	82 e1       	ldi	r24, 0x12	; 18
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	2b e3       	ldi	r18, 0x3B	; 59
 330:	31 e0       	ldi	r19, 0x01	; 1
 332:	1e c0       	rjmp	.+60     	; 0x370 <CALLBACK_USB_GetDescriptor+0x5c>
 334:	85 e6       	ldi	r24, 0x65	; 101
 336:	90 e0       	ldi	r25, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	26 ed       	ldi	r18, 0xD6	; 214
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	19 c0       	rjmp	.+50     	; 0x370 <CALLBACK_USB_GetDescriptor+0x5c>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	99 27       	eor	r25, r25
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	91 05       	cpc	r25, r1
 344:	41 f0       	breq	.+16     	; 0x356 <CALLBACK_USB_GetDescriptor+0x42>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	91 05       	cpc	r25, r1
 34a:	41 f0       	breq	.+16     	; 0x35c <CALLBACK_USB_GetDescriptor+0x48>
 34c:	89 2b       	or	r24, r25
 34e:	61 f4       	brne	.+24     	; 0x368 <CALLBACK_USB_GetDescriptor+0x54>
 350:	e2 ed       	ldi	r30, 0xD2	; 210
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	05 c0       	rjmp	.+10     	; 0x360 <CALLBACK_USB_GetDescriptor+0x4c>
 356:	e8 eb       	ldi	r30, 0xB8	; 184
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <CALLBACK_USB_GetDescriptor+0x4c>
 35c:	e8 e9       	ldi	r30, 0x98	; 152
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	84 91       	lpm	r24, Z
 362:	90 e0       	ldi	r25, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	9f 01       	movw	r18, r30
 366:	04 c0       	rjmp	.+8      	; 0x370 <CALLBACK_USB_GetDescriptor+0x5c>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	fa 01       	movw	r30, r20
 372:	31 83       	std	Z+1, r19	; 0x01
 374:	20 83       	st	Z, r18
 376:	08 95       	ret

00000378 <Endpoint_Write_Stream_LE>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
				break;
 388:	7c 01       	movw	r14, r24

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	8b 01       	movw	r16, r22
 38c:	ea 01       	movw	r28, r20
 38e:	d4 d1       	rcall	.+936    	; 0x738 <Endpoint_WaitUntilReady>
 390:	81 11       	cpse	r24, r1
 392:	31 c0       	rjmp	.+98     	; 0x3f6 <Endpoint_Write_Stream_LE+0x7e>
 394:	20 97       	sbiw	r28, 0x00	; 0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	31 f0       	breq	.+12     	; 0x3a4 <Endpoint_Write_Stream_LE+0x2c>
 398:	88 81       	ld	r24, Y
 39a:	99 81       	ldd	r25, Y+1	; 0x01
 39c:	08 1b       	sub	r16, r24
 39e:	19 0b       	sbc	r17, r25
 3a0:	e8 0e       	add	r14, r24
 3a2:	f9 1e       	adc	r15, r25
 3a4:	c1 2c       	mov	r12, r1
 3a6:	d1 2c       	mov	r13, r1
 3a8:	01 15       	cp	r16, r1
 3aa:	11 05       	cpc	r17, r1
 3ac:	19 f1       	breq	.+70     	; 0x3f4 <Endpoint_Write_Stream_LE+0x7c>
 3ae:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	85 fd       	sbrc	r24, 5
 3b4:	14 c0       	rjmp	.+40     	; 0x3de <Endpoint_Write_Stream_LE+0x66>
 3b6:	80 91 e8 00 	lds	r24, 0x00E8
 3ba:	8e 77       	andi	r24, 0x7E	; 126
 3bc:	80 93 e8 00 	sts	0x00E8, r24
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3c0:	67 d4       	rcall	.+2254   	; 0xc90 <USB_USBTask>
 3c2:	20 97       	sbiw	r28, 0x00	; 0
 3c4:	41 f0       	breq	.+16     	; 0x3d6 <Endpoint_Write_Stream_LE+0x5e>
 3c6:	88 81       	ld	r24, Y
 3c8:	99 81       	ldd	r25, Y+1	; 0x01
 3ca:	8c 0d       	add	r24, r12
 3cc:	9d 1d       	adc	r25, r13
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	99 83       	std	Y+1, r25	; 0x01
 3d0:	88 83       	st	Y, r24
 3d2:	85 e0       	ldi	r24, 0x05	; 5

					while (CurrCollectionPath->Parent != NULL)
 3d4:	10 c0       	rjmp	.+32     	; 0x3f6 <Endpoint_Write_Stream_LE+0x7e>
 3d6:	b0 d1       	rcall	.+864    	; 0x738 <Endpoint_WaitUntilReady>
 3d8:	88 23       	and	r24, r24
 3da:	31 f3       	breq	.-52     	; 0x3a8 <Endpoint_Write_Stream_LE+0x30>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <Endpoint_Write_Stream_LE+0x7e>
 3de:	f7 01       	movw	r30, r14
 3e0:	81 91       	ld	r24, Z+
 3e2:	7f 01       	movw	r14, r30
 3e4:	80 93 f1 00 	sts	0x00F1, r24
 3e8:	01 50       	subi	r16, 0x01	; 1
 3ea:	11 09       	sbc	r17, r1
 3ec:	ff ef       	ldi	r31, 0xFF	; 255
 3ee:	cf 1a       	sub	r12, r31
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	df 0a       	sbc	r13, r31
 3f2:	da cf       	rjmp	.-76     	; 0x3a8 <Endpoint_Write_Stream_LE+0x30>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <Endpoint_Read_Stream_LE>:
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	cf 92       	push	r12
 40a:	df 92       	push	r13
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	7c 01       	movw	r14, r24
 41a:	8b 01       	movw	r16, r22
 41c:	ea 01       	movw	r28, r20
 41e:	8c d1       	rcall	.+792    	; 0x738 <Endpoint_WaitUntilReady>

				if (UsageListSize)
 420:	81 11       	cpse	r24, r1
 422:	31 c0       	rjmp	.+98     	; 0x486 <Endpoint_Read_Stream_LE+0x7e>
 424:	20 97       	sbiw	r28, 0x00	; 0
 426:	31 f0       	breq	.+12     	; 0x434 <Endpoint_Read_Stream_LE+0x2c>
 428:	88 81       	ld	r24, Y
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	99 81       	ldd	r25, Y+1	; 0x01
 42c:	08 1b       	sub	r16, r24
 42e:	19 0b       	sbc	r17, r25
 430:	e8 0e       	add	r14, r24
 432:	f9 1e       	adc	r15, r25
 434:	c1 2c       	mov	r12, r1
 436:	d1 2c       	mov	r13, r1
 438:	01 15       	cp	r16, r1
 43a:	11 05       	cpc	r17, r1
 43c:	19 f1       	breq	.+70     	; 0x484 <Endpoint_Read_Stream_LE+0x7c>
 43e:	80 91 e8 00 	lds	r24, 0x00E8

					for (uint8_t i = 1; i < UsageListSize; i++)
 442:	85 fd       	sbrc	r24, 5
 444:	14 c0       	rjmp	.+40     	; 0x46e <Endpoint_Read_Stream_LE+0x66>
 446:	80 91 e8 00 	lds	r24, 0x00E8
 44a:	8b 77       	andi	r24, 0x7B	; 123
					  UsageList[i - 1] = UsageList[i];
 44c:	80 93 e8 00 	sts	0x00E8, r24
 450:	1f d4       	rcall	.+2110   	; 0xc90 <USB_USBTask>
 452:	20 97       	sbiw	r28, 0x00	; 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	41 f0       	breq	.+16     	; 0x466 <Endpoint_Read_Stream_LE+0x5e>
 456:	88 81       	ld	r24, Y
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	99 81       	ldd	r25, Y+1	; 0x01
 45a:	8c 0d       	add	r24, r12
 45c:	9d 1d       	adc	r25, r13
 45e:	99 83       	std	Y+1, r25	; 0x01
 460:	88 83       	st	Y, r24
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	10 c0       	rjmp	.+32     	; 0x486 <Endpoint_Read_Stream_LE+0x7e>
 466:	68 d1       	rcall	.+720    	; 0x738 <Endpoint_WaitUntilReady>
 468:	88 23       	and	r24, r24
 46a:	31 f3       	breq	.-52     	; 0x438 <Endpoint_Read_Stream_LE+0x30>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <Endpoint_Read_Stream_LE+0x7e>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	80 91 f1 00 	lds	r24, 0x00F1
 472:	f7 01       	movw	r30, r14
 474:	81 93       	st	Z+, r24
 476:	7f 01       	movw	r14, r30
 478:	01 50       	subi	r16, 0x01	; 1
 47a:	11 09       	sbc	r17, r1
 47c:	ff ef       	ldi	r31, 0xFF	; 255
 47e:	cf 1a       	sub	r12, r31
 480:	df 0a       	sbc	r13, r31
 482:	da cf       	rjmp	.-76     	; 0x438 <Endpoint_Read_Stream_LE+0x30>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	08 95       	ret

00000498 <Endpoint_Write_Control_Stream_LE>:
 498:	20 91 18 01 	lds	r18, 0x0118
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49c:	30 91 19 01 	lds	r19, 0x0119
 4a0:	26 17       	cp	r18, r22
 4a2:	37 07       	cpc	r19, r23
 4a4:	48 f0       	brcs	.+18     	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x20>
 4a6:	61 15       	cp	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	39 f4       	brne	.+14     	; 0x4ba <Endpoint_Write_Control_Stream_LE+0x22>
				break;
 4ac:	20 91 e8 00 	lds	r18, 0x00E8
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4b0:	2e 77       	andi	r18, 0x7E	; 126
 4b2:	20 93 e8 00 	sts	0x00E8, r18
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <Endpoint_Write_Control_Stream_LE+0x22>
 4b8:	b9 01       	movw	r22, r18
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	61 15       	cp	r22, r1
 4c0:	71 05       	cpc	r23, r1
 4c2:	99 f1       	breq	.+102    	; 0x52a <Endpoint_Write_Control_Stream_LE+0x92>
 4c4:	80 91 11 01 	lds	r24, 0x0111
 4c8:	88 23       	and	r24, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	e9 f1       	breq	.+122    	; 0x546 <Endpoint_Write_Control_Stream_LE+0xae>
 4cc:	85 30       	cpi	r24, 0x05	; 5
 4ce:	e9 f1       	breq	.+122    	; 0x54a <Endpoint_Write_Control_Stream_LE+0xb2>
 4d0:	80 91 e8 00 	lds	r24, 0x00E8
 4d4:	83 fd       	sbrc	r24, 3
 4d6:	3b c0       	rjmp	.+118    	; 0x54e <Endpoint_Write_Control_Stream_LE+0xb6>
 4d8:	80 91 e8 00 	lds	r24, 0x00E8
 4dc:	82 ff       	sbrs	r24, 2
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x54>
 4e0:	80 91 e8 00 	lds	r24, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	82 ff       	sbrs	r24, 2
 4e6:	24 c0       	rjmp	.+72     	; 0x530 <Endpoint_Write_Control_Stream_LE+0x98>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret
 4ec:	80 91 e8 00 	lds	r24, 0x00E8
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	80 ff       	sbrs	r24, 0
 4f2:	e5 cf       	rjmp	.-54     	; 0x4be <Endpoint_Write_Control_Stream_LE+0x26>
 4f4:	80 91 f2 00 	lds	r24, 0x00F2
 4f8:	90 91 f3 00 	lds	r25, 0x00F3
 4fc:	61 15       	cp	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	51 f0       	breq	.+20     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x7e>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	88 30       	cpi	r24, 0x08	; 8
 504:	91 05       	cpc	r25, r1
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	38 f4       	brcc	.+14     	; 0x516 <Endpoint_Write_Control_Stream_LE+0x7e>
 508:	21 91       	ld	r18, Z+
 50a:	20 93 f1 00 	sts	0x00F1, r18
 50e:	61 50       	subi	r22, 0x01	; 1
 510:	71 09       	sbc	r23, r1
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	f3 cf       	rjmp	.-26     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x64>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	08 97       	sbiw	r24, 0x08	; 8
 51a:	09 f0       	breq	.+2      	; 0x51e <Endpoint_Write_Control_Stream_LE+0x86>
 51c:	20 e0       	ldi	r18, 0x00	; 0

					if (UsageListSize)
 51e:	80 91 e8 00 	lds	r24, 0x00E8
 522:	8e 77       	andi	r24, 0x7E	; 126
 524:	80 93 e8 00 	sts	0x00E8, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	ca cf       	rjmp	.-108    	; 0x4be <Endpoint_Write_Control_Stream_LE+0x26>
 52a:	21 11       	cpse	r18, r1
 52c:	cb cf       	rjmp	.-106    	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x2c>
 52e:	d8 cf       	rjmp	.-80     	; 0x4e0 <Endpoint_Write_Control_Stream_LE+0x48>
 530:	80 91 11 01 	lds	r24, 0x0111
 534:	88 23       	and	r24, r24
 536:	39 f0       	breq	.+14     	; 0x546 <Endpoint_Write_Control_Stream_LE+0xae>
 538:	85 30       	cpi	r24, 0x05	; 5
 53a:	39 f0       	breq	.+14     	; 0x54a <Endpoint_Write_Control_Stream_LE+0xb2>
 53c:	80 91 e8 00 	lds	r24, 0x00E8

						for (uint8_t i = 1; i < UsageListSize; i++)
 540:	83 ff       	sbrs	r24, 3
 542:	ce cf       	rjmp	.-100    	; 0x4e0 <Endpoint_Write_Control_Stream_LE+0x48>
 544:	04 c0       	rjmp	.+8      	; 0x54e <Endpoint_Write_Control_Stream_LE+0xb6>
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	08 95       	ret
						  UsageList[i - 1] = UsageList[i];
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	08 95       	ret
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	08 95       	ret

00000552 <Endpoint_Write_Control_PStream_LE>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	20 91 18 01 	lds	r18, 0x0118
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	30 91 19 01 	lds	r19, 0x0119
 55a:	26 17       	cp	r18, r22
 55c:	37 07       	cpc	r19, r23
 55e:	48 f0       	brcs	.+18     	; 0x572 <Endpoint_Write_Control_PStream_LE+0x20>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	61 15       	cp	r22, r1
 562:	71 05       	cpc	r23, r1
 564:	39 f4       	brne	.+14     	; 0x574 <Endpoint_Write_Control_PStream_LE+0x22>
 566:	20 91 e8 00 	lds	r18, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	2e 77       	andi	r18, 0x7E	; 126
 56c:	20 93 e8 00 	sts	0x00E8, r18
 570:	01 c0       	rjmp	.+2      	; 0x574 <Endpoint_Write_Control_PStream_LE+0x22>
 572:	b9 01       	movw	r22, r18
 574:	fc 01       	movw	r30, r24
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	61 15       	cp	r22, r1
 57a:	71 05       	cpc	r23, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	b1 f1       	breq	.+108    	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x98>
 57e:	80 91 11 01 	lds	r24, 0x0111
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 582:	88 23       	and	r24, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	09 f4       	brne	.+2      	; 0x588 <Endpoint_Write_Control_PStream_LE+0x36>
 586:	3f c0       	rjmp	.+126    	; 0x606 <Endpoint_Write_Control_PStream_LE+0xb4>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	85 30       	cpi	r24, 0x05	; 5
 58a:	09 f4       	brne	.+2      	; 0x58e <Endpoint_Write_Control_PStream_LE+0x3c>
 58c:	3e c0       	rjmp	.+124    	; 0x60a <Endpoint_Write_Control_PStream_LE+0xb8>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	80 91 e8 00 	lds	r24, 0x00E8

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	83 fd       	sbrc	r24, 3
 594:	3c c0       	rjmp	.+120    	; 0x60e <Endpoint_Write_Control_PStream_LE+0xbc>
 596:	80 91 e8 00 	lds	r24, 0x00E8
 59a:	82 ff       	sbrs	r24, 2
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x58>
 59e:	80 91 e8 00 	lds	r24, 0x00E8
 5a2:	82 ff       	sbrs	r24, 2
 5a4:	25 c0       	rjmp	.+74     	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x9e>
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
 5aa:	80 91 e8 00 	lds	r24, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ae:	80 ff       	sbrs	r24, 0
 5b0:	e3 cf       	rjmp	.-58     	; 0x578 <Endpoint_Write_Control_PStream_LE+0x26>
 5b2:	80 91 f2 00 	lds	r24, 0x00F2
 5b6:	90 91 f3 00 	lds	r25, 0x00F3
 5ba:	61 15       	cp	r22, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	71 05       	cpc	r23, r1
 5be:	59 f0       	breq	.+22     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x84>
 5c0:	88 30       	cpi	r24, 0x08	; 8
 5c2:	91 05       	cpc	r25, r1
 5c4:	40 f4       	brcc	.+16     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x84>
 5c6:	24 91       	lpm	r18, Z
 5c8:	20 93 f1 00 	sts	0x00F1, r18
 5cc:	31 96       	adiw	r30, 0x01	; 1
 5ce:	61 50       	subi	r22, 0x01	; 1
 5d0:	71 09       	sbc	r23, r1
 5d2:	01 96       	adiw	r24, 0x01	; 1
 5d4:	f2 cf       	rjmp	.-28     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0x68>
 5d6:	21 e0       	ldi	r18, 0x01	; 1
 5d8:	08 97       	sbiw	r24, 0x08	; 8
 5da:	09 f0       	breq	.+2      	; 0x5de <Endpoint_Write_Control_PStream_LE+0x8c>
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	80 91 e8 00 	lds	r24, 0x00E8
 5e2:	8e 77       	andi	r24, 0x7E	; 126
 5e4:	80 93 e8 00 	sts	0x00E8, r24
 5e8:	c7 cf       	rjmp	.-114    	; 0x578 <Endpoint_Write_Control_PStream_LE+0x26>
 5ea:	21 11       	cpse	r18, r1
 5ec:	c8 cf       	rjmp	.-112    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x2c>
 5ee:	d7 cf       	rjmp	.-82     	; 0x59e <Endpoint_Write_Control_PStream_LE+0x4c>
 5f0:	80 91 11 01 	lds	r24, 0x0111

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	88 23       	and	r24, r24
 5f6:	39 f0       	breq	.+14     	; 0x606 <Endpoint_Write_Control_PStream_LE+0xb4>
 5f8:	85 30       	cpi	r24, 0x05	; 5
 5fa:	39 f0       	breq	.+14     	; 0x60a <Endpoint_Write_Control_PStream_LE+0xb8>
 5fc:	80 91 e8 00 	lds	r24, 0x00E8
					  return HID_PARSE_InsufficientReportItems;
 600:	83 ff       	sbrs	r24, 3

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	cd cf       	rjmp	.-102    	; 0x59e <Endpoint_Write_Control_PStream_LE+0x4c>
 604:	04 c0       	rjmp	.+8      	; 0x60e <Endpoint_Write_Control_PStream_LE+0xbc>
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	08 95       	ret
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	08 95       	ret
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	08 95       	ret

00000612 <Endpoint_ConfigureEndpoint_Prv>:
 612:	98 2f       	mov	r25, r24
 614:	97 30       	cpi	r25, 0x07	; 7
 616:	58 f5       	brcc	.+86     	; 0x66e <Endpoint_ConfigureEndpoint_Prv+0x5c>
 618:	90 93 e9 00 	sts	0x00E9, r25
 61c:	98 17       	cp	r25, r24
 61e:	39 f0       	breq	.+14     	; 0x62e <Endpoint_ConfigureEndpoint_Prv+0x1c>
 620:	70 91 ec 00 	lds	r23, 0x00EC
 624:	20 91 ed 00 	lds	r18, 0x00ED
 628:	50 91 f0 00 	lds	r21, 0x00F0
 62c:	03 c0       	rjmp	.+6      	; 0x634 <Endpoint_ConfigureEndpoint_Prv+0x22>
 62e:	24 2f       	mov	r18, r20
 630:	76 2f       	mov	r23, r22
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	21 ff       	sbrs	r18, 1
 636:	19 c0       	rjmp	.+50     	; 0x66a <Endpoint_ConfigureEndpoint_Prv+0x58>
 638:	30 91 eb 00 	lds	r19, 0x00EB
 63c:	3e 7f       	andi	r19, 0xFE	; 254
 63e:	30 93 eb 00 	sts	0x00EB, r19
 642:	30 91 ed 00 	lds	r19, 0x00ED
 646:	3d 7f       	andi	r19, 0xFD	; 253
 648:	30 93 ed 00 	sts	0x00ED, r19
 64c:	30 91 eb 00 	lds	r19, 0x00EB
 650:	31 60       	ori	r19, 0x01	; 1
 652:	30 93 eb 00 	sts	0x00EB, r19
 656:	70 93 ec 00 	sts	0x00EC, r23
 65a:	20 93 ed 00 	sts	0x00ED, r18
 65e:	50 93 f0 00 	sts	0x00F0, r21
 662:	20 91 ee 00 	lds	r18, 0x00EE
 666:	27 ff       	sbrs	r18, 7
 668:	07 c0       	rjmp	.+14     	; 0x678 <Endpoint_ConfigureEndpoint_Prv+0x66>
 66a:	9f 5f       	subi	r25, 0xFF	; 255
 66c:	d3 cf       	rjmp	.-90     	; 0x614 <Endpoint_ConfigureEndpoint_Prv+0x2>
 66e:	8f 70       	andi	r24, 0x0F	; 15
 670:	80 93 e9 00 	sts	0x00E9, r24
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	08 95       	ret
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret

0000067c <Endpoint_ConfigureEndpointTable>:
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	06 2f       	mov	r16, r22
 686:	ec 01       	movw	r28, r24
					  ParserData->TotalReportItems++;
 688:	10 e0       	ldi	r17, 0x00	; 0
 68a:	10 17       	cp	r17, r16
 68c:	71 f1       	breq	.+92     	; 0x6ea <Endpoint_ConfigureEndpointTable+0x6e>
 68e:	98 81       	ld	r25, Y
 690:	99 23       	and	r25, r25

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	41 f1       	breq	.+80     	; 0x6e4 <Endpoint_ConfigureEndpointTable+0x68>
 694:	2c 81       	ldd	r18, Y+4	; 0x04
 696:	e9 81       	ldd	r30, Y+1	; 0x01
 698:	fa 81       	ldd	r31, Y+2	; 0x02
 69a:	7b 81       	ldd	r23, Y+3	; 0x03
 69c:	89 2f       	mov	r24, r25
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	8f 70       	andi	r24, 0x0F	; 15
 6a0:	87 30       	cpi	r24, 0x07	; 7
 6a2:	10 f0       	brcs	.+4      	; 0x6a8 <Endpoint_ConfigureEndpointTable+0x2c>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	22 c0       	rjmp	.+68     	; 0x6ec <Endpoint_ConfigureEndpointTable+0x70>
 6a8:	22 30       	cpi	r18, 0x02	; 2
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	10 f0       	brcs	.+4      	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x34>
 6ac:	56 e0       	ldi	r21, 0x06	; 6
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <Endpoint_ConfigureEndpointTable+0x36>
 6b0:	52 e0       	ldi	r21, 0x02	; 2
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	28 e0       	ldi	r18, 0x08	; 8
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	2e 17       	cp	r18, r30
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	3f 07       	cpc	r19, r31
 6bc:	20 f4       	brcc	.+8      	; 0x6c6 <Endpoint_ConfigureEndpointTable+0x4a>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	4f 5f       	subi	r20, 0xFF	; 255
 6c0:	22 0f       	add	r18, r18
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	33 1f       	adc	r19, r19
 6c4:	f9 cf       	rjmp	.-14     	; 0x6b8 <Endpoint_ConfigureEndpointTable+0x3c>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	42 95       	swap	r20
 6c8:	40 7f       	andi	r20, 0xF0	; 240
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	45 2b       	or	r20, r21
 6cc:	69 2f       	mov	r22, r25

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	66 1f       	adc	r22, r22
 6d0:	66 27       	eor	r22, r22
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	66 1f       	adc	r22, r22
 6d4:	90 e4       	ldi	r25, 0x40	; 64
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	79 9f       	mul	r23, r25

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	90 01       	movw	r18, r0
 6da:	11 24       	eor	r1, r1
 6dc:	62 2b       	or	r22, r18
 6de:	99 df       	rcall	.-206    	; 0x612 <Endpoint_ConfigureEndpoint_Prv>
 6e0:	88 23       	and	r24, r24
 6e2:	01 f3       	breq	.-64     	; 0x6a4 <Endpoint_ConfigureEndpointTable+0x28>
 6e4:	1f 5f       	subi	r17, 0xFF	; 255
 6e6:	25 96       	adiw	r28, 0x05	; 5
 6e8:	d0 cf       	rjmp	.-96     	; 0x68a <Endpoint_ConfigureEndpointTable+0xe>
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	08 95       	ret

000006f6 <Endpoint_ClearStatusStage>:
 6f6:	80 91 12 01 	lds	r24, 0x0112
 6fa:	87 fd       	sbrc	r24, 7
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <Endpoint_ClearStatusStage+0x12>
 6fe:	80 91 e8 00 	lds	r24, 0x00E8
 702:	80 ff       	sbrs	r24, 0
 704:	0e c0       	rjmp	.+28     	; 0x722 <Endpoint_ClearStatusStage+0x2c>
 706:	12 c0       	rjmp	.+36     	; 0x72c <Endpoint_ClearStatusStage+0x36>
 708:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 70c:	82 fd       	sbrc	r24, 2
 70e:	05 c0       	rjmp	.+10     	; 0x71a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 710:	80 91 11 01 	lds	r24, 0x0111
 714:	81 11       	cpse	r24, r1
 716:	f8 cf       	rjmp	.-16     	; 0x708 <Endpoint_ClearStatusStage+0x12>
 718:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 71a:	80 91 e8 00 	lds	r24, 0x00E8
 71e:	8b 77       	andi	r24, 0x7B	; 123
 720:	08 c0       	rjmp	.+16     	; 0x732 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 722:	80 91 11 01 	lds	r24, 0x0111
 726:	81 11       	cpse	r24, r1
 728:	ea cf       	rjmp	.-44     	; 0x6fe <Endpoint_ClearStatusStage+0x8>
 72a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 72c:	80 91 e8 00 	lds	r24, 0x00E8
 730:	8e 77       	andi	r24, 0x7E	; 126
 732:	80 93 e8 00 	sts	0x00E8, r24
 736:	08 95       	ret

00000738 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 738:	80 91 e4 00 	lds	r24, 0x00E4
 73c:	90 91 e5 00 	lds	r25, 0x00E5
 740:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 742:	20 91 ec 00 	lds	r18, 0x00EC
 746:	20 ff       	sbrs	r18, 0
 748:	21 c0       	rjmp	.+66     	; 0x78c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 74a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 74e:	20 fd       	sbrc	r18, 0
 750:	21 c0       	rjmp	.+66     	; 0x794 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 752:	20 91 11 01 	lds	r18, 0x0111

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 756:	22 23       	and	r18, r18
 758:	89 f0       	breq	.+34     	; 0x77c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 75a:	25 30       	cpi	r18, 0x05	; 5
 75c:	89 f0       	breq	.+34     	; 0x780 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 75e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 762:	25 fd       	sbrc	r18, 5
 764:	0f c0       	rjmp	.+30     	; 0x784 <Endpoint_WaitUntilReady+0x4c>
 766:	20 91 e4 00 	lds	r18, 0x00E4
 76a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	39 f3       	breq	.-50     	; 0x742 <Endpoint_WaitUntilReady+0xa>
 774:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 776:	41 f0       	breq	.+16     	; 0x788 <Endpoint_WaitUntilReady+0x50>
 778:	c9 01       	movw	r24, r18
 77a:	e3 cf       	rjmp	.-58     	; 0x742 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 788:	84 e0       	ldi	r24, 0x04	; 4
 78a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 78c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 790:	22 ff       	sbrs	r18, 2
 792:	df cf       	rjmp	.-66     	; 0x752 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret

00000798 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7a0:	4e d0       	rcall	.+156    	; 0x83e <USB_INT_DisableAllInterrupts>
 7a2:	55 d0       	rcall	.+170    	; 0x84e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7a4:	c8 ed       	ldi	r28, 0xD8	; 216
 7a6:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7a8:	88 81       	ld	r24, Y
 7aa:	8f 77       	andi	r24, 0x7F	; 127
 7ac:	88 83       	st	Y, r24
 7ae:	88 81       	ld	r24, Y
 7b0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7b2:	88 83       	st	Y, r24
 7b4:	88 81       	ld	r24, Y
 7b6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7b8:	88 83       	st	Y, r24
 7ba:	e7 ed       	ldi	r30, 0xD7	; 215
 7bc:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7be:	80 81       	ld	r24, Z
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	80 83       	st	Z, r24
 7c4:	19 bc       	out	0x29, r1	; 41
 7c6:	10 92 11 01 	sts	0x0111, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7ca:	10 92 0d 01 	sts	0x010D, r1
	USB_Device_ConfigurationNumber  = 0;
 7ce:	10 92 0f 01 	sts	0x010F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7d2:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7d6:	00 ee       	ldi	r16, 0xE0	; 224
 7d8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7da:	f8 01       	movw	r30, r16
 7dc:	80 81       	ld	r24, Z
 7de:	8b 7f       	andi	r24, 0xFB	; 251
 7e0:	80 83       	st	Z, r24
 7e2:	88 81       	ld	r24, Y
 7e4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7e6:	88 83       	st	Y, r24
 7e8:	42 e0       	ldi	r20, 0x02	; 2
 7ea:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	11 df       	rcall	.-478    	; 0x612 <Endpoint_ConfigureEndpoint_Prv>
 7f0:	e1 ee       	ldi	r30, 0xE1	; 225
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7f6:	8e 7f       	andi	r24, 0xFE	; 254
 7f8:	80 83       	st	Z, r24
 7fa:	e2 ee       	ldi	r30, 0xE2	; 226
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 800:	81 60       	ori	r24, 0x01	; 1
 802:	80 83       	st	Z, r24
 804:	80 81       	ld	r24, Z
 806:	88 60       	ori	r24, 0x08	; 8
 808:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 80a:	f8 01       	movw	r30, r16
 80c:	80 81       	ld	r24, Z
 80e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 810:	80 83       	st	Z, r24
 812:	88 81       	ld	r24, Y
 814:	80 61       	ori	r24, 0x10	; 16
 816:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 81e:	0f 91       	pop	r16
 820:	08 95       	ret

00000822 <USB_Init>:
 822:	e8 ed       	ldi	r30, 0xD8	; 216
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 828:	8f 7e       	andi	r24, 0xEF	; 239
 82a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 82c:	e7 ed       	ldi	r30, 0xD7	; 215
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	81 60       	ori	r24, 0x01	; 1
 834:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	80 93 10 01 	sts	0x0110, r24

	USB_ResetInterface();
 83c:	ad cf       	rjmp	.-166    	; 0x798 <USB_ResetInterface>

0000083e <USB_INT_DisableAllInterrupts>:
 83e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	8c 7f       	andi	r24, 0xFC	; 252
 846:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 848:	10 92 e2 00 	sts	0x00E2, r1
 84c:	08 95       	ret

0000084e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 84e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 852:	10 92 e1 00 	sts	0x00E1, r1
 856:	08 95       	ret

00000858 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	0b b6       	in	r0, 0x3b	; 59
 864:	0f 92       	push	r0
 866:	2f 93       	push	r18
 868:	3f 93       	push	r19
 86a:	4f 93       	push	r20
 86c:	5f 93       	push	r21
 86e:	6f 93       	push	r22
 870:	7f 93       	push	r23
 872:	8f 93       	push	r24
 874:	9f 93       	push	r25
 876:	af 93       	push	r26
 878:	bf 93       	push	r27
 87a:	ef 93       	push	r30
 87c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 87e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 882:	82 ff       	sbrs	r24, 2
 884:	0a c0       	rjmp	.+20     	; 0x89a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 886:	80 91 e2 00 	lds	r24, 0x00E2
 88a:	82 ff       	sbrs	r24, 2
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 88e:	80 91 e1 00 	lds	r24, 0x00E1
 892:	8b 7f       	andi	r24, 0xFB	; 251
 894:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 898:	fa d1       	rcall	.+1012   	; 0xc8e <USB_Event_Stub>
 89a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 89e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8a0:	1d c0       	rjmp	.+58     	; 0x8dc <__vector_10+0x84>
 8a2:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8a6:	80 ff       	sbrs	r24, 0
 8a8:	19 c0       	rjmp	.+50     	; 0x8dc <__vector_10+0x84>
 8aa:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8ae:	8e 7f       	andi	r24, 0xFE	; 254
 8b0:	80 93 da 00 	sts	0x00DA, r24
 8b4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8b8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <__vector_10+0x7c>
 8bc:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8be:	89 bd       	out	0x29, r24	; 41
 8c0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8c2:	89 bd       	out	0x29, r24	; 41
 8c4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8c6:	00 fe       	sbrs	r0, 0
 8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <__vector_10+0x6c>
 8ca:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8cc:	80 93 11 01 	sts	0x0111, r24
 8d0:	13 dd       	rcall	.-1498   	; 0x2f8 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8d2:	04 c0       	rjmp	.+8      	; 0x8dc <__vector_10+0x84>
 8d4:	19 bc       	out	0x29, r1	; 41
 8d6:	10 92 11 01 	sts	0x0111, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8da:	10 dd       	rcall	.-1504   	; 0x2fc <EVENT_USB_Device_Disconnect>
 8dc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8e0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8e2:	18 c0       	rjmp	.+48     	; 0x914 <__vector_10+0xbc>
 8e4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8e8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8ea:	14 c0       	rjmp	.+40     	; 0x914 <__vector_10+0xbc>
 8ec:	80 91 e2 00 	lds	r24, 0x00E2
 8f0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8f2:	80 93 e2 00 	sts	0x00E2, r24
 8f6:	80 91 e2 00 	lds	r24, 0x00E2
 8fa:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8fc:	80 93 e2 00 	sts	0x00E2, r24
 900:	80 91 d8 00 	lds	r24, 0x00D8
 904:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 906:	80 93 d8 00 	sts	0x00D8, r24
 90a:	19 bc       	out	0x29, r1	; 41
 90c:	85 e0       	ldi	r24, 0x05	; 5
 90e:	80 93 11 01 	sts	0x0111, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 912:	bd d1       	rcall	.+890    	; 0xc8e <USB_Event_Stub>
 914:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 918:	84 ff       	sbrs	r24, 4
 91a:	2f c0       	rjmp	.+94     	; 0x97a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 91c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 920:	84 ff       	sbrs	r24, 4
 922:	2b c0       	rjmp	.+86     	; 0x97a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 924:	8c e0       	ldi	r24, 0x0C	; 12
 926:	89 bd       	out	0x29, r24	; 41
 928:	8e e0       	ldi	r24, 0x0E	; 14
 92a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 92c:	09 b4       	in	r0, 0x29	; 41
 92e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 930:	fd cf       	rjmp	.-6      	; 0x92c <__vector_10+0xd4>
 932:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 936:	8f 7d       	andi	r24, 0xDF	; 223
 938:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 93c:	80 91 e1 00 	lds	r24, 0x00E1
 940:	8f 7e       	andi	r24, 0xEF	; 239
 942:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 946:	80 91 e2 00 	lds	r24, 0x00E2
 94a:	8f 7e       	andi	r24, 0xEF	; 239
 94c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 950:	80 91 e2 00 	lds	r24, 0x00E2
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 95a:	80 91 0d 01 	lds	r24, 0x010D
 95e:	88 23       	and	r24, r24
 960:	11 f0       	breq	.+4      	; 0x966 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 962:	84 e0       	ldi	r24, 0x04	; 4
 964:	07 c0       	rjmp	.+14     	; 0x974 <__vector_10+0x11c>
 966:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 96a:	87 ff       	sbrs	r24, 7
 96c:	02 c0       	rjmp	.+4      	; 0x972 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 96e:	83 e0       	ldi	r24, 0x03	; 3
 970:	01 c0       	rjmp	.+2      	; 0x974 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	80 93 11 01 	sts	0x0111, r24
 978:	8a d1       	rcall	.+788    	; 0xc8e <USB_Event_Stub>
 97a:	80 91 e1 00 	lds	r24, 0x00E1
 97e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 980:	22 c0       	rjmp	.+68     	; 0x9c6 <__vector_10+0x16e>
 982:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 986:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 988:	1e c0       	rjmp	.+60     	; 0x9c6 <__vector_10+0x16e>
 98a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 98e:	87 7f       	andi	r24, 0xF7	; 247
 990:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 994:	82 e0       	ldi	r24, 0x02	; 2
 996:	80 93 11 01 	sts	0x0111, r24
 99a:	10 92 0d 01 	sts	0x010D, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 99e:	80 91 e1 00 	lds	r24, 0x00E1
 9a2:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9a4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9a8:	80 91 e2 00 	lds	r24, 0x00E2
 9ac:	8e 7f       	andi	r24, 0xFE	; 254
 9ae:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9b2:	80 91 e2 00 	lds	r24, 0x00E2
 9b6:	80 61       	ori	r24, 0x10	; 16
 9b8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9bc:	42 e0       	ldi	r20, 0x02	; 2
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	27 de       	rcall	.-946    	; 0x612 <Endpoint_ConfigureEndpoint_Prv>
 9c4:	64 d1       	rcall	.+712    	; 0xc8e <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0b be       	out	0x3b, r0	; 59
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <USB_Device_ProcessControlRequest>:
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	cd b7       	in	r28, 0x3d	; 61
 9f4:	de b7       	in	r29, 0x3e	; 62
 9f6:	aa 97       	sbiw	r28, 0x2a	; 42
 9f8:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	e2 e1       	ldi	r30, 0x12	; 18
 a04:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a06:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a0a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a0c:	21 e0       	ldi	r18, 0x01	; 1
 a0e:	ea 31       	cpi	r30, 0x1A	; 26
 a10:	f2 07       	cpc	r31, r18
 a12:	c9 f7       	brne	.-14     	; 0xa06 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a14:	7e dc       	rcall	.-1796   	; 0x312 <EVENT_USB_Device_ControlRequest>
 a16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a1a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a1c:	20 c1       	rjmp	.+576    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 a1e:	90 91 12 01 	lds	r25, 0x0112
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a22:	80 91 13 01 	lds	r24, 0x0113

		switch (USB_ControlRequest.bRequest)
 a26:	85 30       	cpi	r24, 0x05	; 5
 a28:	09 f4       	brne	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x40>
 a2a:	77 c0       	rjmp	.+238    	; 0xb1a <USB_Device_ProcessControlRequest+0x12e>
 a2c:	30 f4       	brcc	.+12     	; 0xa3a <USB_Device_ProcessControlRequest+0x4e>
 a2e:	81 30       	cpi	r24, 0x01	; 1
 a30:	81 f1       	breq	.+96     	; 0xa92 <USB_Device_ProcessControlRequest+0xa6>
 a32:	68 f0       	brcs	.+26     	; 0xa4e <USB_Device_ProcessControlRequest+0x62>
 a34:	83 30       	cpi	r24, 0x03	; 3
 a36:	69 f1       	breq	.+90     	; 0xa92 <USB_Device_ProcessControlRequest+0xa6>
 a38:	12 c1       	rjmp	.+548    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 a3a:	88 30       	cpi	r24, 0x08	; 8
 a3c:	09 f4       	brne	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0x54>
 a3e:	e1 c0       	rjmp	.+450    	; 0xc02 <USB_Device_ProcessControlRequest+0x216>
 a40:	89 30       	cpi	r24, 0x09	; 9
 a42:	09 f4       	brne	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0x5a>
 a44:	f0 c0       	rjmp	.+480    	; 0xc26 <USB_Device_ProcessControlRequest+0x23a>
 a46:	86 30       	cpi	r24, 0x06	; 6
 a48:	09 f0       	breq	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x60>
 a4a:	09 c1       	rjmp	.+530    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 a4c:	88 c0       	rjmp	.+272    	; 0xb5e <USB_Device_ProcessControlRequest+0x172>
 a4e:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a50:	81 f0       	breq	.+32     	; 0xa72 <USB_Device_ProcessControlRequest+0x86>
 a52:	92 38       	cpi	r25, 0x82	; 130
 a54:	09 f0       	breq	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0x6c>
 a56:	03 c1       	rjmp	.+518    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 a58:	80 91 16 01 	lds	r24, 0x0116
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5c:	8f 70       	andi	r24, 0x0F	; 15
 a5e:	80 93 e9 00 	sts	0x00E9, r24
 a62:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a66:	85 fb       	bst	r24, 5
 a68:	88 27       	eor	r24, r24
 a6a:	80 f9       	bld	r24, 0
 a6c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <USB_Device_ProcessControlRequest+0x92>
 a72:	80 91 0e 01 	lds	r24, 0x010E
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a76:	90 91 0f 01 	lds	r25, 0x010F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a7a:	91 11       	cpse	r25, r1
 a7c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a7e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a82:	97 7f       	andi	r25, 0xF7	; 247
 a84:	90 93 e8 00 	sts	0x00E8, r25
 a88:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a8c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a90:	c3 c0       	rjmp	.+390    	; 0xc18 <USB_Device_ProcessControlRequest+0x22c>
 a92:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a94:	2d 7f       	andi	r18, 0xFD	; 253
 a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0xae>
 a98:	e2 c0       	rjmp	.+452    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 a9a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a9c:	19 f0       	breq	.+6      	; 0xaa4 <USB_Device_ProcessControlRequest+0xb8>
 a9e:	92 30       	cpi	r25, 0x02	; 2
 aa0:	61 f0       	breq	.+24     	; 0xaba <USB_Device_ProcessControlRequest+0xce>
 aa2:	dd c0       	rjmp	.+442    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 aa4:	90 91 14 01 	lds	r25, 0x0114
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aa8:	91 30       	cpi	r25, 0x01	; 1
 aaa:	09 f0       	breq	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0xc2>
 aac:	d8 c0       	rjmp	.+432    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 aae:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ab0:	09 f0       	breq	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0xc8>
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	90 93 0f 01 	sts	0x010F, r25
 ab8:	2a c0       	rjmp	.+84     	; 0xb0e <USB_Device_ProcessControlRequest+0x122>
 aba:	90 91 14 01 	lds	r25, 0x0114

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 abe:	91 11       	cpse	r25, r1
 ac0:	26 c0       	rjmp	.+76     	; 0xb0e <USB_Device_ProcessControlRequest+0x122>
 ac2:	20 91 16 01 	lds	r18, 0x0116
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ac6:	2f 70       	andi	r18, 0x0F	; 15
 ac8:	09 f4       	brne	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 aca:	c9 c0       	rjmp	.+402    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 acc:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ad0:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ad4:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ad6:	1b c0       	rjmp	.+54     	; 0xb0e <USB_Device_ProcessControlRequest+0x122>
 ad8:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ada:	21 f4       	brne	.+8      	; 0xae4 <USB_Device_ProcessControlRequest+0xf8>
 adc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ae0:	80 62       	ori	r24, 0x20	; 32
 ae2:	13 c0       	rjmp	.+38     	; 0xb0a <USB_Device_ProcessControlRequest+0x11e>
 ae4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ae8:	80 61       	ori	r24, 0x10	; 16
 aea:	80 93 eb 00 	sts	0x00EB, r24
 aee:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	02 2e       	mov	r0, r18
 af4:	01 c0       	rjmp	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0x10c>
 af6:	88 0f       	add	r24, r24
 af8:	0a 94       	dec	r0
 afa:	ea f7       	brpl	.-6      	; 0xaf6 <USB_Device_ProcessControlRequest+0x10a>
 afc:	80 93 ea 00 	sts	0x00EA, r24
 b00:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b04:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b08:	88 60       	ori	r24, 0x08	; 8
 b0a:	80 93 eb 00 	sts	0x00EB, r24
 b0e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b12:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b16:	87 7f       	andi	r24, 0xF7	; 247
 b18:	82 c0       	rjmp	.+260    	; 0xc1e <USB_Device_ProcessControlRequest+0x232>
 b1a:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b1c:	a0 c0       	rjmp	.+320    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 b1e:	10 91 14 01 	lds	r17, 0x0114
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b22:	1f 77       	andi	r17, 0x7F	; 127
 b24:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b28:	80 78       	andi	r24, 0x80	; 128
 b2a:	81 2b       	or	r24, r17
 b2c:	80 93 e3 00 	sts	0x00E3, r24
 b30:	80 91 e8 00 	lds	r24, 0x00E8
 b34:	87 7f       	andi	r24, 0xF7	; 247
 b36:	80 93 e8 00 	sts	0x00E8, r24
 b3a:	dd dd       	rcall	.-1094   	; 0x6f6 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b3c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b40:	80 ff       	sbrs	r24, 0
 b42:	fc cf       	rjmp	.-8      	; 0xb3c <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b44:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b48:	80 68       	ori	r24, 0x80	; 128
 b4a:	80 93 e3 00 	sts	0x00E3, r24
 b4e:	11 23       	and	r17, r17
 b50:	11 f0       	breq	.+4      	; 0xb56 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b52:	83 e0       	ldi	r24, 0x03	; 3
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <USB_Device_ProcessControlRequest+0x16c>
 b56:	82 e0       	ldi	r24, 0x02	; 2
 b58:	80 93 11 01 	sts	0x0111, r24
 b5c:	80 c0       	rjmp	.+256    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 b5e:	90 58       	subi	r25, 0x80	; 128
 b60:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b62:	08 f0       	brcs	.+2      	; 0xb66 <USB_Device_ProcessControlRequest+0x17a>
 b64:	7c c0       	rjmp	.+248    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 b66:	80 91 14 01 	lds	r24, 0x0114
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b6a:	90 91 15 01 	lds	r25, 0x0115
 b6e:	8c 3d       	cpi	r24, 0xDC	; 220
 b70:	23 e0       	ldi	r18, 0x03	; 3
 b72:	92 07       	cpc	r25, r18
 b74:	71 f5       	brne	.+92     	; 0xbd2 <USB_Device_ProcessControlRequest+0x1e6>
 b76:	83 e0       	ldi	r24, 0x03	; 3
 b78:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b7a:	8a e2       	ldi	r24, 0x2A	; 42
 b7c:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b7e:	4f b7       	in	r20, 0x3f	; 63
 b80:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b82:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b84:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b86:	20 e0       	ldi	r18, 0x00	; 0
 b88:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b8a:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b8c:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	50 93 57 00 	sts	0x0057, r21
 b94:	e4 91       	lpm	r30, Z
 b96:	20 ff       	sbrs	r18, 0
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b9a:	e2 95       	swap	r30
 b9c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b9e:	3f 5f       	subi	r19, 0xFF	; 255
 ba0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ba2:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	ea 30       	cpi	r30, 0x0A	; 10
 ba8:	10 f0       	brcs	.+4      	; 0xbae <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 baa:	c7 96       	adiw	r24, 0x37	; 55
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0x1c4>
 bae:	c0 96       	adiw	r24, 0x30	; 48
 bb0:	8d 93       	st	X+, r24
 bb2:	9d 93       	st	X+, r25
 bb4:	2f 5f       	subi	r18, 0xFF	; 255
 bb6:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bb8:	49 f7       	brne	.-46     	; 0xb8c <USB_Device_ProcessControlRequest+0x1a0>
 bba:	4f bf       	out	0x3f, r20	; 63
 bbc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc0:	87 7f       	andi	r24, 0xF7	; 247
 bc2:	80 93 e8 00 	sts	0x00E8, r24
 bc6:	6a e2       	ldi	r22, 0x2A	; 42
 bc8:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bca:	ce 01       	movw	r24, r28
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	64 dc       	rcall	.-1848   	; 0x498 <Endpoint_Write_Control_Stream_LE>
 bd0:	12 c0       	rjmp	.+36     	; 0xbf6 <USB_Device_ProcessControlRequest+0x20a>
 bd2:	ae 01       	movw	r20, r28
 bd4:	4f 5f       	subi	r20, 0xFF	; 255
 bd6:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bd8:	60 91 16 01 	lds	r22, 0x0116
 bdc:	9b db       	rcall	.-2250   	; 0x314 <CALLBACK_USB_GetDescriptor>
 bde:	00 97       	sbiw	r24, 0x00	; 0
 be0:	09 f4       	brne	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x1f8>
 be2:	3d c0       	rjmp	.+122    	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 be4:	20 91 e8 00 	lds	r18, 0x00E8
 be8:	27 7f       	andi	r18, 0xF7	; 247
 bea:	20 93 e8 00 	sts	0x00E8, r18
 bee:	bc 01       	movw	r22, r24
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	9a 81       	ldd	r25, Y+2	; 0x02
 bf4:	ae dc       	rcall	.-1700   	; 0x552 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bf6:	80 91 e8 00 	lds	r24, 0x00E8
 bfa:	8b 77       	andi	r24, 0x7B	; 123
 bfc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c00:	2e c0       	rjmp	.+92     	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 c02:	90 38       	cpi	r25, 0x80	; 128
 c04:	61 f5       	brne	.+88     	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 c06:	80 91 e8 00 	lds	r24, 0x00E8
 c0a:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c0c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c10:	80 91 0d 01 	lds	r24, 0x010D
 c14:	80 93 f1 00 	sts	0x00F1, r24
 c18:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c1c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c1e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c22:	69 dd       	rcall	.-1326   	; 0x6f6 <Endpoint_ClearStatusStage>
 c24:	1c c0       	rjmp	.+56     	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 c26:	91 11       	cpse	r25, r1
 c28:	1a c0       	rjmp	.+52     	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
 c2a:	90 91 14 01 	lds	r25, 0x0114
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c2e:	92 30       	cpi	r25, 0x02	; 2
 c30:	b0 f4       	brcc	.+44     	; 0xc5e <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c32:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	80 93 e8 00 	sts	0x00E8, r24
 c3c:	90 93 0d 01 	sts	0x010D, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c40:	5a dd       	rcall	.-1356   	; 0x6f6 <Endpoint_ClearStatusStage>
 c42:	80 91 0d 01 	lds	r24, 0x010D
 c46:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <USB_Device_ProcessControlRequest+0x266>
 c4a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c4e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <USB_Device_ProcessControlRequest+0x26a>
 c52:	84 e0       	ldi	r24, 0x04	; 4
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <USB_Device_ProcessControlRequest+0x26c>
 c56:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c58:	80 93 11 01 	sts	0x0111, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c5c:	51 db       	rcall	.-2398   	; 0x300 <EVENT_USB_Device_ConfigurationChanged>
 c5e:	80 91 e8 00 	lds	r24, 0x00E8
 c62:	83 ff       	sbrs	r24, 3
 c64:	0a c0       	rjmp	.+20     	; 0xc7a <USB_Device_ProcessControlRequest+0x28e>
 c66:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c6a:	87 7f       	andi	r24, 0xF7	; 247
 c6c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c70:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c74:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c76:	80 93 eb 00 	sts	0x00EB, r24
 c7a:	aa 96       	adiw	r28, 0x2a	; 42
 c7c:	0f b6       	in	r0, 0x3f	; 63
 c7e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c80:	de bf       	out	0x3e, r29	; 62
 c82:	0f be       	out	0x3f, r0	; 63
 c84:	cd bf       	out	0x3d, r28	; 61
 c86:	df 91       	pop	r29
 c88:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c8a:	1f 91       	pop	r17
 c8c:	08 95       	ret

00000c8e <USB_Event_Stub>:
 c8e:	08 95       	ret

00000c90 <USB_USBTask>:
 c90:	cf 93       	push	r28
 c92:	80 91 11 01 	lds	r24, 0x0111
 c96:	88 23       	and	r24, r24
 c98:	a9 f0       	breq	.+42     	; 0xcc4 <USB_USBTask+0x34>
 c9a:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c9e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ca0:	90 91 ec 00 	lds	r25, 0x00EC
 ca4:	90 ff       	sbrs	r25, 0
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <USB_USBTask+0x1c>
 ca8:	90 e8       	ldi	r25, 0x80	; 128
 caa:	01 c0       	rjmp	.+2      	; 0xcae <USB_USBTask+0x1e>
 cac:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cae:	c9 2f       	mov	r28, r25
 cb0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cb2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cb6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cba:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 cbc:	97 de       	rcall	.-722    	; 0x9ec <USB_Device_ProcessControlRequest>
 cbe:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc0:	c0 93 e9 00 	sts	0x00E9, r28
 cc4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cc6:	08 95       	ret

00000cc8 <MIDI_Device_ConfigureEndpoints>:
 cc8:	cf 93       	push	r28
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 cca:	df 93       	push	r29
 ccc:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 cce:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 cd0:	82 e0       	ldi	r24, 0x02	; 2
 cd2:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 cd4:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 cd6:	61 e0       	ldi	r22, 0x01	; 1
 cd8:	ce 01       	movw	r24, r28
 cda:	01 96       	adiw	r24, 0x01	; 1
 cdc:	cf dc       	rcall	.-1634   	; 0x67c <Endpoint_ConfigureEndpointTable>
 cde:	88 23       	and	r24, r24
 ce0:	31 f0       	breq	.+12     	; 0xcee <MIDI_Device_ConfigureEndpoints+0x26>
 ce2:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 ce4:	ce 01       	movw	r24, r28
 ce6:	06 96       	adiw	r24, 0x06	; 6
 ce8:	df 91       	pop	r29
	  return false;

	return true;
}
 cea:	cf 91       	pop	r28
 cec:	c7 cc       	rjmp	.-1650   	; 0x67c <Endpoint_ConfigureEndpointTable>
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 cee:	80 e0       	ldi	r24, 0x00	; 0
 cf0:	df 91       	pop	r29
	  return false;

	return true;
}
 cf2:	cf 91       	pop	r28
 cf4:	08 95       	ret

00000cf6 <MIDI_Device_SendEventPacket>:
 cf6:	fc 01       	movw	r30, r24
 cf8:	cb 01       	movw	r24, r22
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cfa:	20 91 11 01 	lds	r18, 0x0111
 cfe:	24 30       	cpi	r18, 0x04	; 4
 d00:	a9 f4       	brne	.+42     	; 0xd2c <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d02:	21 81       	ldd	r18, Z+1	; 0x01
 d04:	2f 70       	andi	r18, 0x0F	; 15
 d06:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d0a:	40 e0       	ldi	r20, 0x00	; 0
 d0c:	50 e0       	ldi	r21, 0x00	; 0
 d0e:	64 e0       	ldi	r22, 0x04	; 4
 d10:	70 e0       	ldi	r23, 0x00	; 0
 d12:	32 db       	rcall	.-2460   	; 0x378 <Endpoint_Write_Stream_LE>
 d14:	81 11       	cpse	r24, r1
 d16:	0d c0       	rjmp	.+26     	; 0xd32 <MIDI_Device_SendEventPacket+0x3c>
 d18:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d1c:	85 fd       	sbrc	r24, 5
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d1e:	08 c0       	rjmp	.+16     	; 0xd30 <MIDI_Device_SendEventPacket+0x3a>
 d20:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d24:	8e 77       	andi	r24, 0x7E	; 126
 d26:	80 93 e8 00 	sts	0x00E8, r24
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <MIDI_Device_SendEventPacket+0x3a>
 d2c:	82 e0       	ldi	r24, 0x02	; 2

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d2e:	08 95       	ret
 d30:	80 e0       	ldi	r24, 0x00	; 0
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
 d32:	08 95       	ret

00000d34 <MIDI_Device_Flush>:
}
 d34:	20 91 11 01 	lds	r18, 0x0111

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d38:	24 30       	cpi	r18, 0x04	; 4
 d3a:	89 f4       	brne	.+34     	; 0xd5e <MIDI_Device_Flush+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d3c:	fc 01       	movw	r30, r24
 d3e:	81 81       	ldd	r24, Z+1	; 0x01
 d40:	8f 70       	andi	r24, 0x0F	; 15
 d42:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 d46:	80 91 f2 00 	lds	r24, 0x00F2
 d4a:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 d4e:	89 2b       	or	r24, r25
 d50:	41 f0       	breq	.+16     	; 0xd62 <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d52:	80 91 e8 00 	lds	r24, 0x00E8
 d56:	8e 77       	andi	r24, 0x7E	; 126
 d58:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d5c:	ed cc       	rjmp	.-1574   	; 0x738 <Endpoint_WaitUntilReady>
 d5e:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d60:	08 95       	ret
 d62:	80 e0       	ldi	r24, 0x00	; 0

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d64:	08 95       	ret

00000d66 <MIDI_Device_USBTask>:
}
 d66:	20 91 11 01 	lds	r18, 0x0111
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d6a:	24 30       	cpi	r18, 0x04	; 4
 d6c:	49 f4       	brne	.+18     	; 0xd80 <MIDI_Device_USBTask+0x1a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d6e:	fc 01       	movw	r30, r24
 d70:	21 81       	ldd	r18, Z+1	; 0x01
 d72:	2f 70       	andi	r18, 0x0F	; 15
 d74:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d78:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 d7c:	20 fd       	sbrc	r18, 0
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d7e:	da cf       	rjmp	.-76     	; 0xd34 <MIDI_Device_Flush>
 d80:	08 95       	ret

00000d82 <MIDI_Device_ReceiveEventPacket>:
 d82:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 d84:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d86:	20 91 11 01 	lds	r18, 0x0111
 d8a:	24 30       	cpi	r18, 0x04	; 4
 d8c:	11 f0       	breq	.+4      	; 0xd92 <MIDI_Device_ReceiveEventPacket+0x10>
	  return false;
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d92:	26 81       	ldd	r18, Z+6	; 0x06
 d94:	2f 70       	andi	r18, 0x0F	; 15
 d96:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d9a:	20 91 e8 00 	lds	r18, 0x00E8

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsOUTReceived()))
 d9e:	22 ff       	sbrs	r18, 2
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <MIDI_Device_ReceiveEventPacket+0xc>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 da2:	20 91 e8 00 	lds	r18, 0x00E8
		return false;

	if (!(Endpoint_IsReadWriteAllowed()))
 da6:	25 ff       	sbrs	r18, 5
 da8:	f2 cf       	rjmp	.-28     	; 0xd8e <MIDI_Device_ReceiveEventPacket+0xc>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 daa:	40 e0       	ldi	r20, 0x00	; 0
 dac:	50 e0       	ldi	r21, 0x00	; 0
 dae:	64 e0       	ldi	r22, 0x04	; 4
 db0:	70 e0       	ldi	r23, 0x00	; 0
 db2:	2a db       	rcall	.-2476   	; 0x408 <Endpoint_Read_Stream_LE>
 db4:	80 91 e8 00 	lds	r24, 0x00E8
 db8:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 dba:	05 c0       	rjmp	.+10     	; 0xdc6 <MIDI_Device_ReceiveEventPacket+0x44>
 dbc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dc0:	8b 77       	andi	r24, 0x7B	; 123
 dc2:	80 93 e8 00 	sts	0x00E8, r24
 dc6:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 dc8:	08 95       	ret

00000dca <_exit>:
}
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>


StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800112  00800112  00001ed4  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000057a6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000408  00000000  00000000  000057b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000625e  00000000  00000000  00005bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d60  00000000  00000000  0000be1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a11  00000000  00000000  0000db7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b0c  00000000  00000000  00010590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028f5  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000042f8  00000000  00000000  00013991  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000480  00000000  00000000  00017c89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	9f c1       	rjmp	.+830    	; 0x340 <__ctors_end>
       2:	00 00       	nop
       4:	bb c1       	rjmp	.+886    	; 0x37c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c1       	rjmp	.+882    	; 0x37c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c1       	rjmp	.+878    	; 0x37c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c1       	rjmp	.+874    	; 0x37c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c1       	rjmp	.+870    	; 0x37c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c1       	rjmp	.+866    	; 0x37c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c1       	rjmp	.+862    	; 0x37c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c1       	rjmp	.+858    	; 0x37c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c1       	rjmp	.+854    	; 0x37c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_10>
      2c:	a7 c1       	rjmp	.+846    	; 0x37c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c1       	rjmp	.+842    	; 0x37c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c1       	rjmp	.+838    	; 0x37c <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	a1 c1       	rjmp	.+834    	; 0x37c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c1       	rjmp	.+830    	; 0x37c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c1       	rjmp	.+826    	; 0x37c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c1       	rjmp	.+822    	; 0x37c <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	99 c1       	rjmp	.+818    	; 0x37c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c1       	rjmp	.+814    	; 0x37c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c1       	rjmp	.+810    	; 0x37c <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	93 c1       	rjmp	.+806    	; 0x37c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c1       	rjmp	.+802    	; 0x37c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c1       	rjmp	.+798    	; 0x37c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c1       	rjmp	.+794    	; 0x37c <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	8b c1       	rjmp	.+790    	; 0x37c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c1       	rjmp	.+786    	; 0x37c <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	87 c1       	rjmp	.+782    	; 0x37c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c1       	rjmp	.+778    	; 0x37c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c1       	rjmp	.+774    	; 0x37c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c1       	rjmp	.+770    	; 0x37c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c1       	rjmp	.+766    	; 0x37c <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	7d c1       	rjmp	.+762    	; 0x37c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c1       	rjmp	.+758    	; 0x37c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c1       	rjmp	.+754    	; 0x37c <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	77 c1       	rjmp	.+750    	; 0x37c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c1       	rjmp	.+746    	; 0x37c <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	73 c1       	rjmp	.+742    	; 0x37c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4631>:
      98:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	37 6d 00                                            7m.

000000cb <__c.4629>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      cb:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      db:	00                                                  .

000000dc <__c.4627>:
      dc:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ec:	20 4f 4b 00                                          OK.

000000f0 <__c.4612>:
      f0:	44 6f 6e 65 2e 0d 0a 00                             Done....

000000f8 <__c.4609>:
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f8:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     108:	2e 2e 0d 0a 00                                      .....

0000010d <__c.4606>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10d:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     11d:	2e 2e 0d 0a 00                                      .....

00000122 <__c.4604>:
     122:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     132:	6e 3a 20 25 73 0d 0a 00                             n: %s...

0000013a <__c.4601>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     13a:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

00000149 <__c.4598>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     149:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     159:	20 25 73 0d 0a 00                                    %s...

0000015f <__c.4591>:
     15f:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16f:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

0000017b <__c.4585>:
				ReportSize     -= 1;
     17b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     19b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ab:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bb:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1cb:	1b 5b 33 37 6d 00                                   .[37m.

000001d1 <__c.4578>:
     1d1:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e1:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f1:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000200 <__c.4573>:
     200:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     210:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     220:	00                                                  .

00000221 <__c.4571>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     241:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     251:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     261:	37 6d 00                                            7m.

00000264 <__c.4569>:
     264:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000027e <__c.4567>:
     27e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28e:	69 63 65 2e 0d 0a 00                                ice....

00000295 <__c.4565>:
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     295:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a5:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b5:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002bf <__c.4562>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2bf:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2cf:	61 74 61 2e 0d 0a 00                                ata....

000002d6 <__c.4557>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un

				if (ParserData->UsingReportIDs)
     2e6:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f6:	00                                                  .

000002f7 <__c.4552>:
     2f7:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     307:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000314 <__c.4543>:
     314:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     324:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     334:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000340 <__ctors_end>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	d0 e2       	ldi	r29, 0x20	; 32
     348:	de bf       	out	0x3e, r29	; 62
     34a:	cd bf       	out	0x3d, r28	; 61

0000034c <__do_copy_data>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	ee e2       	ldi	r30, 0x2E	; 46
     354:	fe e1       	ldi	r31, 0x1E	; 30
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	a2 31       	cpi	r26, 0x12	; 18
     362:	b1 07       	cpc	r27, r17
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>

00000366 <__do_clear_bss>:
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	a2 e1       	ldi	r26, 0x12	; 18
     36a:	b1 e0       	ldi	r27, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	ac 37       	cpi	r26, 0x7C	; 124
     372:	b1 07       	cpc	r27, r17
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	7f d2       	rcall	.+1278   	; 0x876 <main>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <_exit>

0000037c <__bad_interrupt>:
     37c:	41 ce       	rjmp	.-894    	; 0x0 <__vectors>

0000037e <LEDs_SetAllLEDs>:
     37e:	9b b1       	in	r25, 0x0b	; 11
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 2b       	or	r25, r24
     384:	9b b9       	out	0x0b, r25	; 11
     386:	08 95       	ret

00000388 <SetupHardware>:
				break;
     388:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	87 7f       	andi	r24, 0xF7	; 247
     38c:	84 bf       	out	0x34, r24	; 52
     38e:	88 e1       	ldi	r24, 0x18	; 24
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	80 93 60 00 	sts	0x0060, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     398:	10 92 60 00 	sts	0x0060, r1
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	80 e8       	ldi	r24, 0x80	; 128
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	80 93 61 00 	sts	0x0061, r24
     3aa:	90 93 61 00 	sts	0x0061, r25
     3ae:	0f be       	out	0x3f, r0	; 63
				break;
     3b0:	83 e3       	ldi	r24, 0x33	; 51
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 cd 00 	sts	0x00CD, r25
     3b8:	80 93 cc 00 	sts	0x00CC, r24
     3bc:	86 e0       	ldi	r24, 0x06	; 6
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	80 93 ca 00 	sts	0x00CA, r24
     3c2:	10 92 c8 00 	sts	0x00C8, r1
     3c6:	88 e1       	ldi	r24, 0x18	; 24
     3c8:	80 93 c9 00 	sts	0x00C9, r24
     3cc:	53 9a       	sbi	0x0a, 3	; 10
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	5a 9a       	sbi	0x0b, 2	; 11
     3d0:	8a b1       	in	r24, 0x0a	; 10
     3d2:	80 6f       	ori	r24, 0xF0	; 240

					while (CurrCollectionPath->Parent != NULL)
     3d4:	8a b9       	out	0x0a, r24	; 10
     3d6:	8b b1       	in	r24, 0x0b	; 11
     3d8:	8f 70       	andi	r24, 0x0F	; 15
     3da:	8b b9       	out	0x0b, r24	; 11
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	42 d7       	rcall	.+3716   	; 0x1262 <USB_Init>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <Serial_CreateStream>

000003e6 <EVENT_USB_Host_DeviceAttached>:
     3e6:	87 ef       	ldi	r24, 0xF7	; 247
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     3ee:	80 ea       	ldi	r24, 0xA0	; 160
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	c6 cf       	rjmp	.-116    	; 0x37e <LEDs_SetAllLEDs>

000003f2 <EVENT_USB_Host_DeviceUnattached>:
     3f2:	86 ed       	ldi	r24, 0xD6	; 214
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	c0 cf       	rjmp	.-128    	; 0x37e <LEDs_SetAllLEDs>

000003fe <EVENT_USB_Host_DeviceEnumerationComplete>:
     3fe:	cf 93       	push	r28
     400:	8f eb       	ldi	r24, 0xBF	; 191
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	64 d2       	rcall	.+1224   	; 0x8d2 <ProcessConfigurationDescriptor>
     40a:	c8 2f       	mov	r28, r24
     40c:	88 23       	and	r24, r24
     40e:	b9 f0       	breq	.+46     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     410:	81 30       	cpi	r24, 0x01	; 1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	19 f4       	brne	.+6      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     414:	85 e9       	ldi	r24, 0x95	; 149
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	02 c0       	rjmp	.+4      	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     41a:	8e e7       	ldi	r24, 0x7E	; 126
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>

				if (UsageListSize)
     422:	1f 92       	push	r1
     424:	cf 93       	push	r28
     426:	84 e6       	ldi	r24, 0x64	; 100
     428:	92 e0       	ldi	r25, 0x02	; 2
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	80 e9       	ldi	r24, 0x90	; 144
     43c:	0f c0       	rjmp	.+30     	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     43e:	81 e0       	ldi	r24, 0x01	; 1

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	0e 94 aa 0b 	call	0x1754	; 0x1754 <USB_Host_SetDeviceConfiguration>
     444:	88 23       	and	r24, r24
     446:	29 f0       	breq	.+10     	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     448:	1f 92       	push	r1
     44a:	8f 93       	push	r24
					  UsageList[i - 1] = UsageList[i];
     44c:	81 e2       	ldi	r24, 0x21	; 33
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	ec cf       	rjmp	.-40     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     452:	80 e0       	ldi	r24, 0x00	; 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     45a:	80 e6       	ldi	r24, 0x60	; 96
     45c:	cf 91       	pop	r28
     45e:	8f cf       	rjmp	.-226    	; 0x37e <LEDs_SetAllLEDs>

00000460 <EVENT_USB_Host_HostError>:
     460:	cf 93       	push	r28
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	df 93       	push	r29
     464:	1f 92       	push	r1
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	89 83       	std	Y+1, r24	; 0x01
     46c:	92 d6       	rcall	.+3364   	; 0x1192 <USB_Disable>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	1f 92       	push	r1
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	8f 93       	push	r24
     474:	81 ed       	ldi	r24, 0xD1	; 209
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     480:	80 e9       	ldi	r24, 0x90	; 144
     482:	7d df       	rcall	.-262    	; 0x37e <LEDs_SetAllLEDs>
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	0f 90       	pop	r0
     48c:	ff cf       	rjmp	.-2      	; 0x48c <EVENT_USB_Host_HostError+0x2c>

0000048e <EVENT_USB_Host_DeviceEnumerationFailed>:
     48e:	90 91 67 01 	lds	r25, 0x0167
     492:	1f 92       	push	r1
     494:	9f 93       	push	r25
     496:	1f 92       	push	r1
     498:	6f 93       	push	r22
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	1f 92       	push	r1
     49c:	8f 93       	push	r24
     49e:	8b e7       	ldi	r24, 0x7B	; 123
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     4aa:	8d b7       	in	r24, 0x3d	; 61
				break;
     4ac:	9e b7       	in	r25, 0x3e	; 62
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	08 96       	adiw	r24, 0x08	; 8
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	9e bf       	out	0x3e, r25	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	8d bf       	out	0x3d, r24	; 61
     4ba:	80 e9       	ldi	r24, 0x90	; 144
     4bc:	60 cf       	rjmp	.-320    	; 0x37e <LEDs_SetAllLEDs>

000004be <UnicodeToASCII>:
     4be:	fc 01       	movw	r30, r24
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	dc 01       	movw	r26, r24
     4c4:	9c 91       	ld	r25, X
     4c6:	db 01       	movw	r26, r22
     4c8:	89 2f       	mov	r24, r25
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <UnicodeToASCII+0x18>
     4ce:	20 81       	ld	r18, Z
     4d0:	2d 93       	st	X+, r18
     4d2:	32 96       	adiw	r30, 0x02	; 2
     4d4:	fa cf       	rjmp	.-12     	; 0x4ca <UnicodeToASCII+0xc>
     4d6:	fb 01       	movw	r30, r22
     4d8:	e9 0f       	add	r30, r25
     4da:	f1 1d       	adc	r31, r1
     4dc:	10 82       	st	Z, r1
     4de:	08 95       	ret

000004e0 <ShowCommandError>:
     4e0:	66 23       	and	r22, r22
     4e2:	19 f0       	breq	.+6      	; 0x4ea <ShowCommandError+0xa>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	2c ed       	ldi	r18, 0xDC	; 220
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <ShowCommandError+0xe>
     4ea:	2b ec       	ldi	r18, 0xCB	; 203
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	1f 92       	push	r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	8f 93       	push	r24
     4f2:	3f 93       	push	r19
     4f4:	2f 93       	push	r18
     4f6:	88 e9       	ldi	r24, 0x98	; 152
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	80 e9       	ldi	r24, 0x90	; 144
     510:	36 cf       	rjmp	.-404    	; 0x37e <LEDs_SetAllLEDs>

00000512 <StillImageHost_Task>:
     512:	3f 92       	push	r3
     514:	4f 92       	push	r4
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	5f 92       	push	r5
     518:	6f 92       	push	r6
     51a:	7f 92       	push	r7
     51c:	8f 92       	push	r8

					if (UsageListSize)
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	0d b7       	in	r16, 0x3d	; 61
     53a:	1e b7       	in	r17, 0x3e	; 62
     53c:	80 91 67 01 	lds	r24, 0x0167

						for (uint8_t i = 1; i < UsageListSize; i++)
     540:	8b 30       	cpi	r24, 0x0B	; 11
     542:	09 f0       	breq	.+2      	; 0x546 <StillImageHost_Task+0x34>
     544:	7c c1       	rjmp	.+760    	; 0x83e <StillImageHost_Task+0x32c>
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	1a df       	rcall	.-460    	; 0x37e <LEDs_SetAllLEDs>
						  UsageList[i - 1] = UsageList[i];
     54a:	8f e5       	ldi	r24, 0x5F	; 95
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	78 e1       	ldi	r23, 0x18	; 24
     554:	37 2e       	mov	r3, r23
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	ed e2       	ldi	r30, 0x2D	; 45
     558:	ae 2e       	mov	r10, r30
     55a:	e1 e0       	ldi	r30, 0x01	; 1
     55c:	be 2e       	mov	r11, r30
     55e:	f5 01       	movw	r30, r10
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	23 2d       	mov	r18, r3
     562:	11 92       	st	Z+, r1
     564:	2a 95       	dec	r18
     566:	e9 f7       	brne	.-6      	; 0x562 <StillImageHost_Task+0x50>
     568:	8c e0       	ldi	r24, 0x0C	; 12
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	80 93 2d 01 	sts	0x012D, r24
     574:	90 93 2e 01 	sts	0x012E, r25
     578:	a0 93 2f 01 	sts	0x012F, r26
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	b0 93 30 01 	sts	0x0130, r27
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	90 93 32 01 	sts	0x0132, r25
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	80 93 31 01 	sts	0x0131, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	90 e1       	ldi	r25, 0x10	; 16
     590:	90 93 34 01 	sts	0x0134, r25

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     594:	80 93 33 01 	sts	0x0133, r24
     598:	42 d2       	rcall	.+1156   	; 0xa1e <SImage_SendBlockHeader>
     59a:	6b d2       	rcall	.+1238   	; 0xa72 <SImage_ReceiveBlockHeader>
     59c:	81 11       	cpse	r24, r1
     59e:	34 c1       	rjmp	.+616    	; 0x808 <StillImageHost_Task+0x2f6>
     5a0:	60 91 45 01 	lds	r22, 0x0145
     5a4:	70 91 46 01 	lds	r23, 0x0146
     5a8:	6c 50       	subi	r22, 0x0C	; 12
     5aa:	71 09       	sbc	r23, r1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	4d b7       	in	r20, 0x3d	; 61
     5ae:	5e b7       	in	r21, 0x3e	; 62
     5b0:	46 1b       	sub	r20, r22
     5b2:	57 0b       	sbc	r21, r23
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	5e bf       	out	0x3e, r21	; 62
     5ba:	0f be       	out	0x3f, r0	; 63

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	4d bf       	out	0x3d, r20	; 61
     5be:	8d b7       	in	r24, 0x3d	; 61
     5c0:	9e b7       	in	r25, 0x3e	; 62
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	7c 01       	movw	r14, r24
     5c6:	ce d2       	rcall	.+1436   	; 0xb64 <SImage_ReadData>
     5c8:	80 91 a6 00 	lds	r24, 0x00A6
     5cc:	8e 77       	andi	r24, 0x7E	; 126
     5ce:	80 93 a6 00 	sts	0x00A6, r24
     5d2:	f7 01       	movw	r30, r14
     5d4:	80 85       	ldd	r24, Z+8	; 0x08
     5d6:	e8 0f       	add	r30, r24
     5d8:	f1 1d       	adc	r31, r1
     5da:	e8 0f       	add	r30, r24
     5dc:	f1 1d       	adc	r31, r1
     5de:	39 96       	adiw	r30, 0x09	; 9
     5e0:	a2 81       	ldd	r26, Z+2	; 0x02
     5e2:	b3 81       	ldd	r27, Z+3	; 0x03
     5e4:	aa 0f       	add	r26, r26
     5e6:	bb 1f       	adc	r27, r27
     5e8:	ae 0f       	add	r26, r30
     5ea:	bf 1f       	adc	r27, r31
     5ec:	16 96       	adiw	r26, 0x06	; 6
     5ee:	ed 91       	ld	r30, X+
     5f0:	fc 91       	ld	r31, X
     5f2:	11 97       	sbiw	r26, 0x01	; 1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	34 96       	adiw	r30, 0x04	; 4
     5fa:	ea 0f       	add	r30, r26
     5fc:	fb 1f       	adc	r31, r27
					  return HID_PARSE_InsufficientReportItems;
     5fe:	a0 81       	ld	r26, Z
     600:	b1 81       	ldd	r27, Z+1	; 0x01

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	aa 0f       	add	r26, r26
     604:	bb 1f       	adc	r27, r27
     606:	14 96       	adiw	r26, 0x04	; 4
     608:	ae 0f       	add	r26, r30
     60a:	bf 1f       	adc	r27, r31
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	11 97       	sbiw	r26, 0x01	; 1
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	34 96       	adiw	r30, 0x04	; 4
     618:	ea 0f       	add	r30, r26
     61a:	fb 1f       	adc	r31, r27
     61c:	e0 80       	ld	r14, Z
     61e:	f1 80       	ldd	r15, Z+1	; 0x01
     620:	ee 0c       	add	r14, r14
     622:	ff 1c       	adc	r15, r15
     624:	24 e0       	ldi	r18, 0x04	; 4
     626:	e2 0e       	add	r14, r18
     628:	f1 1c       	adc	r15, r1
     62a:	ee 0e       	add	r14, r30
     62c:	ff 1e       	adc	r15, r31
     62e:	f7 01       	movw	r30, r14
     630:	80 81       	ld	r24, Z
     632:	2d b7       	in	r18, 0x3d	; 61
     634:	3e b7       	in	r19, 0x3e	; 62
     636:	28 1b       	sub	r18, r24
     638:	31 09       	sbc	r19, r1
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	3e bf       	out	0x3e, r19	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	2d bf       	out	0x3d, r18	; 61
     644:	4d b7       	in	r20, 0x3d	; 61
     646:	5e b7       	in	r21, 0x3e	; 62
     648:	4f 5f       	subi	r20, 0xFF	; 255
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	6a 01       	movw	r12, r20
     64e:	ba 01       	movw	r22, r20
     650:	c7 01       	movw	r24, r14
     652:	35 df       	rcall	.-406    	; 0x4be <UnicodeToASCII>
     654:	df 92       	push	r13
     656:	cf 92       	push	r12
     658:	89 e4       	ldi	r24, 0x49	; 73
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     664:	f7 01       	movw	r30, r14
     666:	80 81       	ld	r24, Z
     668:	e8 0e       	add	r14, r24
     66a:	f1 1c       	adc	r15, r1
     66c:	e8 0e       	add	r14, r24
     66e:	f1 1c       	adc	r15, r1
     670:	97 01       	movw	r18, r14
     672:	2f 5f       	subi	r18, 0xFF	; 255
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	79 01       	movw	r14, r18
     678:	f9 01       	movw	r30, r18
     67a:	80 81       	ld	r24, Z
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	2d b7       	in	r18, 0x3d	; 61
     686:	3e b7       	in	r19, 0x3e	; 62
					  ParserData->TotalReportItems++;
     688:	28 1b       	sub	r18, r24
     68a:	31 09       	sbc	r19, r1
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	3e bf       	out	0x3e, r19	; 62

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	0f be       	out	0x3f, r0	; 63
     694:	2d bf       	out	0x3d, r18	; 61
     696:	4d b7       	in	r20, 0x3d	; 61
     698:	5e b7       	in	r21, 0x3e	; 62
     69a:	4f 5f       	subi	r20, 0xFF	; 255
     69c:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	6a 01       	movw	r12, r20
     6a0:	ba 01       	movw	r22, r20
     6a2:	c7 01       	movw	r24, r14
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	0c df       	rcall	.-488    	; 0x4be <UnicodeToASCII>
     6a6:	df 92       	push	r13
     6a8:	cf 92       	push	r12
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	8a e3       	ldi	r24, 0x3A	; 58
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     6b6:	f7 01       	movw	r30, r14
     6b8:	20 81       	ld	r18, Z
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	c7 01       	movw	r24, r14
     6bc:	82 0f       	add	r24, r18

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	91 1d       	adc	r25, r1
     6c0:	82 0f       	add	r24, r18
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	91 1d       	adc	r25, r1
     6c4:	01 96       	adiw	r24, 0x01	; 1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 81       	ld	r18, Z
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	4d b7       	in	r20, 0x3d	; 61
     6d4:	5e b7       	in	r21, 0x3e	; 62
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	42 1b       	sub	r20, r18

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	51 09       	sbc	r21, r1
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	5e bf       	out	0x3e, r21	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	4d bf       	out	0x3d, r20	; 61
     6e4:	ed b7       	in	r30, 0x3d	; 61
     6e6:	fe b7       	in	r31, 0x3e	; 62
     6e8:	31 96       	adiw	r30, 0x01	; 1
     6ea:	7f 01       	movw	r14, r30
     6ec:	bf 01       	movw	r22, r30
     6ee:	e7 de       	rcall	.-562    	; 0x4be <UnicodeToASCII>
     6f0:	ff 92       	push	r15
     6f2:	ef 92       	push	r14
     6f4:	82 e2       	ldi	r24, 0x22	; 34
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	0e 94 2f 0c 	call	0x185e	; 0x185e <printf_P>
     700:	b8 d1       	rcall	.+880    	; 0xa72 <SImage_ReceiveBlockHeader>
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	81 11       	cpse	r24, r1
	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     70c:	7d c0       	rjmp	.+250    	; 0x808 <StillImageHost_Task+0x2f6>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     70e:	80 91 49 01 	lds	r24, 0x0149
     712:	90 91 4a 01 	lds	r25, 0x014A
     716:	03 97       	sbiw	r24, 0x03	; 3
     718:	09 f0       	breq	.+2      	; 0x71c <StillImageHost_Task+0x20a>
     71a:	84 c0       	rjmp	.+264    	; 0x824 <StillImageHost_Task+0x312>
     71c:	e0 90 4b 01 	lds	r14, 0x014B
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     720:	f0 90 4c 01 	lds	r15, 0x014C
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	ef 16       	cp	r14, r31
     728:	f1 04       	cpc	r15, r1
     72a:	09 f0       	breq	.+2      	; 0x72e <StillImageHost_Task+0x21c>
     72c:	7b c0       	rjmp	.+246    	; 0x824 <StillImageHost_Task+0x312>
     72e:	8d e0       	ldi	r24, 0x0D	; 13
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     736:	f5 01       	movw	r30, r10
     738:	23 2d       	mov	r18, r3
     73a:	11 92       	st	Z+, r1
     73c:	2a 95       	dec	r18
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     73e:	e9 f7       	brne	.-6      	; 0x73a <StillImageHost_Task+0x228>
     740:	80 e1       	ldi	r24, 0x10	; 16
     742:	48 2e       	mov	r4, r24
     744:	51 2c       	mov	r5, r1

	PIMA_SendBlock = (PIMA_Container_t)
     746:	61 2c       	mov	r6, r1
     748:	71 2c       	mov	r7, r1
     74a:	40 92 2d 01 	sts	0x012D, r4
     74e:	50 92 2e 01 	sts	0x012E, r5
     752:	60 92 2f 01 	sts	0x012F, r6
     756:	70 92 30 01 	sts	0x0130, r7
     75a:	f0 92 32 01 	sts	0x0132, r15
     75e:	e0 92 31 01 	sts	0x0131, r14
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	90 e1       	ldi	r25, 0x10	; 16
     766:	90 93 34 01 	sts	0x0134, r25
     76a:	80 93 33 01 	sts	0x0133, r24
     76e:	c1 2c       	mov	r12, r1
     770:	d1 2c       	mov	r13, r1
     772:	76 01       	movw	r14, r12
     774:	c3 94       	inc	r12
     776:	c0 92 39 01 	sts	0x0139, r12
     77a:	d0 92 3a 01 	sts	0x013A, r13
     77e:	e0 92 3b 01 	sts	0x013B, r14
     782:	f0 92 3c 01 	sts	0x013C, r15
     786:	4b d1       	rcall	.+662    	; 0xa1e <SImage_SendBlockHeader>
     788:	74 d1       	rcall	.+744    	; 0xa72 <SImage_ReceiveBlockHeader>
     78a:	81 11       	cpse	r24, r1
     78c:	3d c0       	rjmp	.+122    	; 0x808 <StillImageHost_Task+0x2f6>
     78e:	80 91 49 01 	lds	r24, 0x0149
     792:	90 91 4a 01 	lds	r25, 0x014A
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     796:	03 97       	sbiw	r24, 0x03	; 3
     798:	09 f0       	breq	.+2      	; 0x79c <StillImageHost_Task+0x28a>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     79a:	44 c0       	rjmp	.+136    	; 0x824 <StillImageHost_Task+0x312>
     79c:	80 90 4b 01 	lds	r8, 0x014B
     7a0:	90 90 4c 01 	lds	r9, 0x014C
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7a4:	31 e0       	ldi	r19, 0x01	; 1
     7a6:	83 16       	cp	r8, r19
     7a8:	91 04       	cpc	r9, r1
     7aa:	e1 f5       	brne	.+120    	; 0x824 <StillImageHost_Task+0x312>
     7ac:	88 ef       	ldi	r24, 0xF8	; 248
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     7b4:	f5 01       	movw	r30, r10
     7b6:	11 92       	st	Z+, r1
     7b8:	3a 94       	dec	r3
     7ba:	e9 f7       	brne	.-6      	; 0x7b6 <StillImageHost_Task+0x2a4>
     7bc:	40 92 2d 01 	sts	0x012D, r4
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     7c0:	50 92 2e 01 	sts	0x012E, r5
     7c4:	60 92 2f 01 	sts	0x012F, r6

	PIMA_SendBlock = (PIMA_Container_t)
     7c8:	70 92 30 01 	sts	0x0130, r7
     7cc:	90 92 32 01 	sts	0x0132, r9
     7d0:	80 92 31 01 	sts	0x0131, r8
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	90 e1       	ldi	r25, 0x10	; 16
     7d8:	90 93 34 01 	sts	0x0134, r25
     7dc:	80 93 33 01 	sts	0x0133, r24
     7e0:	c0 92 35 01 	sts	0x0135, r12
     7e4:	d0 92 36 01 	sts	0x0136, r13
     7e8:	e0 92 37 01 	sts	0x0137, r14
     7ec:	f0 92 38 01 	sts	0x0138, r15
     7f0:	c0 92 39 01 	sts	0x0139, r12
     7f4:	d0 92 3a 01 	sts	0x013A, r13
     7f8:	e0 92 3b 01 	sts	0x013B, r14
     7fc:	f0 92 3c 01 	sts	0x013C, r15
     800:	0e d1       	rcall	.+540    	; 0xa1e <SImage_SendBlockHeader>
     802:	37 d1       	rcall	.+622    	; 0xa72 <SImage_ReceiveBlockHeader>
     804:	88 23       	and	r24, r24
     806:	11 f0       	breq	.+4      	; 0x80c <StillImageHost_Task+0x2fa>
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0f c0       	rjmp	.+30     	; 0x82a <StillImageHost_Task+0x318>
     80c:	80 91 49 01 	lds	r24, 0x0149
     810:	90 91 4a 01 	lds	r25, 0x014A
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     814:	03 97       	sbiw	r24, 0x03	; 3
     816:	31 f4       	brne	.+12     	; 0x824 <StillImageHost_Task+0x312>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     818:	80 91 4b 01 	lds	r24, 0x014B
     81c:	90 91 4c 01 	lds	r25, 0x014C
	{
		ShowCommandError(ErrorCode, false);
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	29 f0       	breq	.+10     	; 0x82e <StillImageHost_Task+0x31c>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	80 91 4b 01 	lds	r24, 0x014B
     82a:	5a de       	rcall	.-844    	; 0x4e0 <ShowCommandError>
     82c:	06 c0       	rjmp	.+12     	; 0x83a <StillImageHost_Task+0x328>
     82e:	80 ef       	ldi	r24, 0xF0	; 240
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     836:	80 e6       	ldi	r24, 0x60	; 96
     838:	a2 dd       	rcall	.-1212   	; 0x37e <LEDs_SetAllLEDs>
     83a:	80 e0       	ldi	r24, 0x00	; 0
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     83c:	8b d7       	rcall	.+3862   	; 0x1754 <USB_Host_SetDeviceConfiguration>
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	1e bf       	out	0x3e, r17	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	0d bf       	out	0x3d, r16	; 61
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	1e bf       	out	0x3e, r17	; 62
     84e:	0f be       	out	0x3f, r0	; 63

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     850:	0d bf       	out	0x3d, r16	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
	USB_Host_SetDeviceConfiguration(0);
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     866:	9f 90       	pop	r9
     868:	8f 90       	pop	r8
     86a:	7f 90       	pop	r7
     86c:	6f 90       	pop	r6
     86e:	5f 90       	pop	r5
     870:	4f 90       	pop	r4
     872:	3f 90       	pop	r3
     874:	08 95       	ret

00000876 <main>:
     876:	88 dd       	rcall	.-1264   	; 0x388 <SetupHardware>
     878:	84 e1       	ldi	r24, 0x14	; 20
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <puts_P>
     880:	80 e1       	ldi	r24, 0x10	; 16
     882:	7d dd       	rcall	.-1286   	; 0x37e <LEDs_SetAllLEDs>
     884:	78 94       	sei
     886:	45 de       	rcall	.-886    	; 0x512 <StillImageHost_Task>
     888:	a4 d7       	rcall	.+3912   	; 0x17d2 <USB_USBTask>
     88a:	fd cf       	rjmp	.-6      	; 0x886 <main+0x10>

0000088c <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     88c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	84 30       	cpi	r24, 0x04	; 4
     892:	59 f4       	brne	.+22     	; 0x8aa <DComp_NextStillImageInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     894:	85 81       	ldd	r24, Z+5	; 0x05
     896:	86 30       	cpi	r24, 0x06	; 6
     898:	41 f4       	brne	.+16     	; 0x8aa <DComp_NextStillImageInterface+0x1e>
     89a:	86 81       	ldd	r24, Z+6	; 0x06
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	29 f4       	brne	.+10     	; 0x8aa <DComp_NextStillImageInterface+0x1e>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
     8a0:	87 81       	ldd	r24, Z+7	; 0x07
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	11 f4       	brne	.+4      	; 0x8aa <DComp_NextStillImageInterface+0x1e>
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     8aa:	82 e0       	ldi	r24, 0x02	; 2
}
     8ac:	08 95       	ret

000008ae <DComp_NextStillImageInterfaceDataEndpoint>:
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8ae:	fc 01       	movw	r30, r24
     8b0:	21 81       	ldd	r18, Z+1	; 0x01
     8b2:	25 30       	cpi	r18, 0x05	; 5
     8b4:	41 f4       	brne	.+16     	; 0x8c6 <DComp_NextStillImageInterfaceDataEndpoint+0x18>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     8b6:	83 81       	ldd	r24, Z+3	; 0x03
     8b8:	83 70       	andi	r24, 0x03	; 3
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	02 97       	sbiw	r24, 0x02	; 2
     8be:	02 97       	sbiw	r24, 0x02	; 2
     8c0:	30 f0       	brcs	.+12     	; 0x8ce <DComp_NextStillImageInterfaceDataEndpoint+0x20>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     8c6:	24 30       	cpi	r18, 0x04	; 4
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <DComp_NextStillImageInterfaceDataEndpoint+0x14>
	{
		return DESCRIPTOR_SEARCH_Fail;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8d0:	08 95       	ret

000008d2 <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	c4 50       	subi	r28, 0x04	; 4
     8ec:	d2 40       	sbci	r29, 0x02	; 2
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     8f8:	ae 01       	movw	r20, r28
     8fa:	4f 5f       	subi	r20, 0xFF	; 255
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	cd 5f       	subi	r28, 0xFD	; 253
     900:	dd 4f       	sbci	r29, 0xFD	; 253
     902:	59 83       	std	Y+1, r21	; 0x01
     904:	48 83       	st	Y, r20
     906:	c3 50       	subi	r28, 0x03	; 3
     908:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	32 e0       	ldi	r19, 0x02	; 2
     90e:	be 01       	movw	r22, r28
     910:	6f 5f       	subi	r22, 0xFF	; 255
     912:	7d 4f       	sbci	r23, 0xFD	; 253
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	6f d5       	rcall	.+2782   	; 0x13f6 <USB_Host_GetDeviceConfigDescriptor>
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	09 f4       	brne	.+2      	; 0x91e <ProcessConfigurationDescriptor+0x4c>
     91c:	6b c0       	rjmp	.+214    	; 0x9f4 <ProcessConfigurationDescriptor+0x122>
     91e:	86 30       	cpi	r24, 0x06	; 6
     920:	21 f0       	breq	.+8      	; 0x92a <ProcessConfigurationDescriptor+0x58>
     922:	88 23       	and	r24, r24
     924:	21 f0       	breq	.+8      	; 0x92e <ProcessConfigurationDescriptor+0x5c>
     926:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     928:	68 c0       	rjmp	.+208    	; 0x9fa <ProcessConfigurationDescriptor+0x128>
     92a:	83 e0       	ldi	r24, 0x03	; 3
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     92c:	66 c0       	rjmp	.+204    	; 0x9fa <ProcessConfigurationDescriptor+0x128>
     92e:	e1 2c       	mov	r14, r1
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     930:	f1 2c       	mov	r15, r1
     932:	c1 2c       	mov	r12, r1
     934:	d1 2c       	mov	r13, r1
     936:	a1 2c       	mov	r10, r1
     938:	b1 2c       	mov	r11, r1
     93a:	00 e0       	ldi	r16, 0x00	; 0
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	01 15       	cp	r16, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     940:	11 05       	cpc	r17, r1
     942:	c1 f4       	brne	.+48     	; 0x974 <ProcessConfigurationDescriptor+0xa2>
     944:	46 e4       	ldi	r20, 0x46	; 70
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     946:	54 e0       	ldi	r21, 0x04	; 4
     948:	be 01       	movw	r22, r28
     94a:	6d 5f       	subi	r22, 0xFD	; 253
     94c:	7d 4f       	sbci	r23, 0xFD	; 253
     94e:	ce 01       	movw	r24, r28
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	9d 4f       	sbci	r25, 0xFD	; 253
     954:	aa d5       	rcall	.+2900   	; 0x14aa <USB_GetNextDescriptorComp>
     956:	81 11       	cpse	r24, r1
     958:	4f c0       	rjmp	.+158    	; 0x9f8 <ProcessConfigurationDescriptor+0x126>
     95a:	cd 5f       	subi	r28, 0xFD	; 253
     95c:	dd 4f       	sbci	r29, 0xFD	; 253
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     95e:	08 81       	ld	r16, Y
     960:	19 81       	ldd	r17, Y+1	; 0x01
     962:	c3 50       	subi	r28, 0x03	; 3
     964:	d2 40       	sbci	r29, 0x02	; 2
     966:	a1 2c       	mov	r10, r1
     968:	b1 2c       	mov	r11, r1

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     96a:	c1 2c       	mov	r12, r1
     96c:	d1 2c       	mov	r13, r1
			DataOUTEndpoint = NULL;
     96e:	e1 2c       	mov	r14, r1
     970:	f1 2c       	mov	r15, r1
			EventsEndpoint  = NULL;
     972:	e5 cf       	rjmp	.-54     	; 0x93e <ProcessConfigurationDescriptor+0x6c>
     974:	47 e5       	ldi	r20, 0x57	; 87
     976:	54 e0       	ldi	r21, 0x04	; 4

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     978:	be 01       	movw	r22, r28
     97a:	6d 5f       	subi	r22, 0xFD	; 253
     97c:	7d 4f       	sbci	r23, 0xFD	; 253
     97e:	ce 01       	movw	r24, r28
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	9d 4f       	sbci	r25, 0xFD	; 253
     984:	92 d5       	rcall	.+2852   	; 0x14aa <USB_GetNextDescriptorComp>
     986:	81 11       	cpse	r24, r1
     988:	dd cf       	rjmp	.-70     	; 0x944 <ProcessConfigurationDescriptor+0x72>
     98a:	cd 5f       	subi	r28, 0xFD	; 253
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     98c:	dd 4f       	sbci	r29, 0xFD	; 253
     98e:	e8 81       	ld	r30, Y
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     990:	f9 81       	ldd	r31, Y+1	; 0x01
     992:	c3 50       	subi	r28, 0x03	; 3
     994:	d2 40       	sbci	r29, 0x02	; 2
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	87 ff       	sbrs	r24, 7
     99a:	06 c0       	rjmp	.+12     	; 0x9a8 <ProcessConfigurationDescriptor+0xd6>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	83 70       	andi	r24, 0x03	; 3
     9a0:	83 30       	cpi	r24, 0x03	; 3
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     9a2:	21 f4       	brne	.+8      	; 0x9ac <ProcessConfigurationDescriptor+0xda>
     9a4:	7f 01       	movw	r14, r30
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <ProcessConfigurationDescriptor+0xdc>
     9a8:	6f 01       	movw	r12, r30
			  EventsEndpoint = EndpointData;
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <ProcessConfigurationDescriptor+0xdc>
     9ac:	5f 01       	movw	r10, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     9ae:	a1 14       	cp	r10, r1
     9b0:	b1 04       	cpc	r11, r1
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     9b2:	29 f2       	breq	.-118    	; 0x93e <ProcessConfigurationDescriptor+0x6c>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     9b4:	c1 14       	cp	r12, r1
     9b6:	d1 04       	cpc	r13, r1
     9b8:	09 f4       	brne	.+2      	; 0x9bc <ProcessConfigurationDescriptor+0xea>
     9ba:	c1 cf       	rjmp	.-126    	; 0x93e <ProcessConfigurationDescriptor+0x6c>
     9bc:	f5 01       	movw	r30, r10
     9be:	24 81       	ldd	r18, Z+4	; 0x04
     9c0:	35 81       	ldd	r19, Z+5	; 0x05
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     9c2:	01 e0       	ldi	r16, 0x01	; 1
     9c4:	42 81       	ldd	r20, Z+2	; 0x02
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	81 e8       	ldi	r24, 0x81	; 129
     9ca:	39 d3       	rcall	.+1650   	; 0x103e <Pipe_ConfigurePipe>
     9cc:	f6 01       	movw	r30, r12
     9ce:	24 81       	ldd	r18, Z+4	; 0x04
     9d0:	35 81       	ldd	r19, Z+5	; 0x05
     9d2:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     9d4:	62 e0       	ldi	r22, 0x02	; 2
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	32 d3       	rcall	.+1636   	; 0x103e <Pipe_ConfigurePipe>
     9da:	f7 01       	movw	r30, r14
     9dc:	24 81       	ldd	r18, Z+4	; 0x04
     9de:	35 81       	ldd	r19, Z+5	; 0x05
     9e0:	42 81       	ldd	r20, Z+2	; 0x02
     9e2:	63 e0       	ldi	r22, 0x03	; 3

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
     9e4:	83 e8       	ldi	r24, 0x83	; 131
     9e6:	2b d3       	rcall	.+1622   	; 0x103e <Pipe_ConfigurePipe>
     9e8:	f7 01       	movw	r30, r14
     9ea:	86 81       	ldd	r24, Z+6	; 0x06
     9ec:	80 93 ad 00 	sts	0x00AD, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <ProcessConfigurationDescriptor+0x128>
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <ProcessConfigurationDescriptor+0x128>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	cc 5f       	subi	r28, 0xFC	; 252

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     9fc:	dd 4f       	sbci	r29, 0xFD	; 253
     9fe:	0f b6       	in	r0, 0x3f	; 63
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextStillImageInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     a04:	0f be       	out	0x3f, r0	; 63
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	08 95       	ret

00000a1e <SImage_SendBlockHeader>:
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     a24:	80 91 a9 00 	lds	r24, 0x00A9
     a28:	8f 7b       	andi	r24, 0xBF	; 191
     a2a:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0), NULL);
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	6c e0       	ldi	r22, 0x0C	; 12
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8d e2       	ldi	r24, 0x2D	; 45
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	67 d2       	rcall	.+1230   	; 0xf0a <Pipe_Write_Stream_LE>
     a3c:	80 91 31 01 	lds	r24, 0x0131

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     a40:	90 91 32 01 	lds	r25, 0x0132
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	79 f4       	brne	.+30     	; 0xa66 <SImage_SendBlockHeader+0x48>
     a48:	60 91 2d 01 	lds	r22, 0x012D
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     a4c:	6c 50       	subi	r22, 0x0C	; 12
     a4e:	31 f0       	breq	.+12     	; 0xa5c <SImage_SendBlockHeader+0x3e>

		/* Check if any parameters in the command block */
		if (ParamBytes)
     a50:	70 e0       	ldi	r23, 0x00	; 0
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes, NULL);
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	89 e3       	ldi	r24, 0x39	; 57
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	57 d2       	rcall	.+1198   	; 0xf0a <Pipe_Write_Stream_LE>
     a5c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     a60:	8b 77       	andi	r24, 0x7B	; 123
     a62:	80 93 a6 00 	sts	0x00A6, r24
     a66:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	80 93 a9 00 	sts	0x00A9, r24
     a70:	08 95       	ret

00000a72 <SImage_ReceiveBlockHeader>:
     a72:	20 91 a2 00 	lds	r18, 0x00A2
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a76:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     a80:	80 91 a9 00 	lds	r24, 0x00A9
     a84:	8f 7b       	andi	r24, 0xBF	; 191
     a86:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReceiveBlockHeader(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	71 e0       	ldi	r23, 0x01	; 1
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a92:	40 91 a6 00 	lds	r20, 0x00A6
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     a96:	40 fd       	sbrc	r20, 0
     a98:	40 c0       	rjmp	.+128    	; 0xb1a <SImage_ReceiveBlockHeader+0xa8>
     a9a:	40 91 a2 00 	lds	r20, 0x00A2
     a9e:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     aa2:	42 17       	cp	r20, r18
     aa4:	53 07       	cpc	r21, r19
     aa6:	29 f0       	breq	.+10     	; 0xab2 <SImage_ReceiveBlockHeader+0x40>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     aa8:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	09 f4       	brne	.+2      	; 0xab0 <SImage_ReceiveBlockHeader+0x3e>
     aae:	58 c0       	rjmp	.+176    	; 0xb60 <SImage_ReceiveBlockHeader+0xee>
     ab0:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ab2:	40 91 a9 00 	lds	r20, 0x00A9
     ab6:	40 64       	ori	r20, 0x40	; 64
     ab8:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     abc:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ac0:	40 91 a9 00 	lds	r20, 0x00A9
     ac4:	4f 7b       	andi	r20, 0xBF	; 191
     ac6:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     aca:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     ace:	41 fd       	sbrc	r20, 1
     ad0:	10 c0       	rjmp	.+32     	; 0xaf2 <SImage_ReceiveBlockHeader+0x80>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ad2:	40 91 a9 00 	lds	r20, 0x00A9
     ad6:	40 64       	ori	r20, 0x40	; 64
     ad8:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     adc:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ae0:	40 91 a9 00 	lds	r20, 0x00A9
     ae4:	4f 7b       	andi	r20, 0xBF	; 191
     ae6:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     aea:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     aee:	41 ff       	sbrs	r20, 1
     af0:	0d c0       	rjmp	.+26     	; 0xb0c <SImage_ReceiveBlockHeader+0x9a>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     af2:	90 91 aa 00 	lds	r25, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     af6:	29 2f       	mov	r18, r25
     af8:	2f 70       	andi	r18, 0x0F	; 15
     afa:	95 ff       	sbrs	r25, 5
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <SImage_ReceiveBlockHeader+0x90>
     afe:	80 e8       	ldi	r24, 0x80	; 128
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <SImage_ReceiveBlockHeader+0x92>
     b02:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     b04:	82 2b       	or	r24, r18
     b06:	4d d6       	rcall	.+3226   	; 0x17a2 <USB_Host_ClearEndpointStall>
     b08:	81 e0       	ldi	r24, 0x01	; 1

			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
     b0a:	08 95       	ret
     b0c:	40 91 67 01 	lds	r20, 0x0167
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     b10:	41 30       	cpi	r20, 0x01	; 1
     b12:	09 f0       	breq	.+2      	; 0xb16 <SImage_ReceiveBlockHeader+0xa4>
     b14:	be cf       	rjmp	.-132    	; 0xa92 <SImage_ReceiveBlockHeader+0x20>
     b16:	82 e0       	ldi	r24, 0x02	; 2
		  return PIPE_RWSTREAM_DeviceDisconnected;
     b18:	08 95       	ret

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     b1a:	40 e0       	ldi	r20, 0x00	; 0
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0), NULL);
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	6c e0       	ldi	r22, 0x0C	; 12
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	85 e4       	ldi	r24, 0x45	; 69
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	3e d2       	rcall	.+1148   	; 0xfa4 <Pipe_Read_Stream_LE>
     b28:	80 91 49 01 	lds	r24, 0x0149

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     b2c:	90 91 4a 01 	lds	r25, 0x014A
     b30:	03 97       	sbiw	r24, 0x03	; 3
     b32:	79 f4       	brne	.+30     	; 0xb52 <SImage_ReceiveBlockHeader+0xe0>
     b34:	60 91 45 01 	lds	r22, 0x0145
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     b38:	6c 50       	subi	r22, 0x0C	; 12
     b3a:	31 f0       	breq	.+12     	; 0xb48 <SImage_ReceiveBlockHeader+0xd6>
     b3c:	70 e0       	ldi	r23, 0x00	; 0

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     b3e:	40 e0       	ldi	r20, 0x00	; 0
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes, NULL);
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	81 e5       	ldi	r24, 0x51	; 81
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	2e d2       	rcall	.+1116   	; 0xfa4 <Pipe_Read_Stream_LE>
     b48:	80 91 a6 00 	lds	r24, 0x00A6
     b4c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b4e:	80 93 a6 00 	sts	0x00A6, r24
     b52:	80 91 a9 00 	lds	r24, 0x00A9
     b56:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b58:	80 93 a9 00 	sts	0x00A9, r24
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret
     b60:	83 e0       	ldi	r24, 0x03	; 3
	}

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     b62:	08 95       	ret

00000b64 <SImage_ReadData>:
     b64:	cf 93       	push	r28
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     b66:	df 93       	push	r29
     b68:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b6a:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b6e:	c9 ea       	ldi	r28, 0xA9	; 169
     b70:	d0 e0       	ldi	r29, 0x00	; 0
     b72:	28 81       	ld	r18, Y
     b74:	2f 7b       	andi	r18, 0xBF	; 191
     b76:	28 83       	st	Y, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	13 d2       	rcall	.+1062   	; 0xfa4 <Pipe_Read_Stream_LE>
     b7e:	98 81       	ld	r25, Y

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b80:	90 64       	ori	r25, 0x40	; 64
     b82:	98 83       	st	Y, r25
     b84:	df 91       	pop	r29

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <USB_Host_ResetDevice>:
     b8a:	80 91 9e 00 	lds	r24, 0x009E
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b8e:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b90:	90 91 a0 00 	lds	r25, 0x00A0
     b94:	9d 7f       	andi	r25, 0xFD	; 253
     b96:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     b9a:	90 91 9e 00 	lds	r25, 0x009E
     b9e:	92 60       	ori	r25, 0x02	; 2
     ba0:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     ba4:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     ba8:	91 fd       	sbrc	r25, 1
     baa:	fc cf       	rjmp	.-8      	; 0xba4 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bac:	90 91 9e 00 	lds	r25, 0x009E
     bb0:	91 60       	ori	r25, 0x01	; 1
     bb2:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     bb6:	10 92 5d 01 	sts	0x015D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bba:	90 91 a0 00 	lds	r25, 0x00A0
     bbe:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     bc0:	20 91 a0 00 	lds	r18, 0x00A0
     bc4:	2f 7d       	andi	r18, 0xDF	; 223
     bc6:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bca:	20 91 9f 00 	lds	r18, 0x009F
     bce:	2f 7d       	andi	r18, 0xDF	; 223
     bd0:	20 93 9f 00 	sts	0x009F, r18
     bd4:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bd6:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bda:	35 ff       	sbrs	r19, 5
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bde:	20 91 9f 00 	lds	r18, 0x009F
     be2:	2f 7d       	andi	r18, 0xDF	; 223
     be4:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     be8:	20 91 9f 00 	lds	r18, 0x009F
     bec:	2d 7f       	andi	r18, 0xFD	; 253
     bee:	20 93 9f 00 	sts	0x009F, r18
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf4:	ef ec       	ldi	r30, 0xCF	; 207
     bf6:	f7 e0       	ldi	r31, 0x07	; 7
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <USB_Host_ResetDevice+0x6e>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <USB_Host_ResetDevice+0x74>
     bfe:	00 00       	nop
     c00:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     c02:	49 f7       	brne	.-46     	; 0xbd6 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     c04:	99 23       	and	r25, r25
     c06:	29 f0       	breq	.+10     	; 0xc12 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c08:	90 91 a0 00 	lds	r25, 0x00A0
     c0c:	90 62       	ori	r25, 0x20	; 32
     c0e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     c12:	81 11       	cpse	r24, r1
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c16:	80 91 9e 00 	lds	r24, 0x009E
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c20:	80 91 a0 00 	lds	r24, 0x00A0
     c24:	82 60       	ori	r24, 0x02	; 2
     c26:	80 93 a0 00 	sts	0x00A0, r24
     c2a:	08 95       	ret

00000c2c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c2c:	20 91 9e 00 	lds	r18, 0x009E
     c30:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c32:	90 91 a0 00 	lds	r25, 0x00A0
     c36:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c38:	30 91 a0 00 	lds	r19, 0x00A0
     c3c:	3f 7d       	andi	r19, 0xDF	; 223
     c3e:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c42:	30 91 9f 00 	lds	r19, 0x009F
     c46:	3f 7d       	andi	r19, 0xDF	; 223
     c48:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c4c:	30 91 9e 00 	lds	r19, 0x009E
     c50:	31 60       	ori	r19, 0x01	; 1
     c52:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     c56:	88 23       	and	r24, r24
     c58:	39 f1       	breq	.+78     	; 0xca8 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c5a:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c5e:	35 ff       	sbrs	r19, 5
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c62:	30 91 9f 00 	lds	r19, 0x009F
     c66:	3f 7d       	andi	r19, 0xDF	; 223
     c68:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     c6c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     c6e:	30 91 67 01 	lds	r19, 0x0167
     c72:	31 30       	cpi	r19, 0x01	; 1
     c74:	c1 f0       	breq	.+48     	; 0xca6 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     c76:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     c7a:	34 ff       	sbrs	r19, 4
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     c7e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     c82:	80 91 a6 00 	lds	r24, 0x00A6
     c86:	8f 7e       	andi	r24, 0xEF	; 239
     c88:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     c8c:	82 e0       	ldi	r24, 0x02	; 2

			break;
     c8e:	0c c0       	rjmp	.+24     	; 0xca8 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c90:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     c94:	31 ff       	sbrs	r19, 1
     c96:	df cf       	rjmp	.-66     	; 0xc56 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     c98:	80 91 a6 00 	lds	r24, 0x00A6
     c9c:	8d 7f       	andi	r24, 0xFD	; 253
     c9e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     ca2:	83 e0       	ldi	r24, 0x03	; 3

			break;
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     ca6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     ca8:	21 11       	cpse	r18, r1
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cac:	20 91 9e 00 	lds	r18, 0x009E
     cb0:	2e 7f       	andi	r18, 0xFE	; 254
     cb2:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     cb6:	99 23       	and	r25, r25
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     cba:	90 91 a0 00 	lds	r25, 0x00A0
     cbe:	90 62       	ori	r25, 0x20	; 32
     cc0:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     cc4:	08 95       	ret

00000cc6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	28 97       	sbiw	r28, 0x08	; 8
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     cde:	80 91 67 01 	lds	r24, 0x0167
     ce2:	85 30       	cpi	r24, 0x05	; 5
     ce4:	09 f4       	brne	.+2      	; 0xce8 <USB_Host_ProcessNextHostState+0x22>
     ce6:	9c c0       	rjmp	.+312    	; 0xe20 <USB_Host_ProcessNextHostState+0x15a>
     ce8:	68 f4       	brcc	.+26     	; 0xd04 <USB_Host_ProcessNextHostState+0x3e>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	e1 f1       	breq	.+120    	; 0xd66 <USB_Host_ProcessNextHostState+0xa0>
     cee:	18 f4       	brcc	.+6      	; 0xcf6 <USB_Host_ProcessNextHostState+0x30>
     cf0:	88 23       	and	r24, r24
     cf2:	d9 f0       	breq	.+54     	; 0xd2a <USB_Host_ProcessNextHostState+0x64>
     cf4:	ff c0       	rjmp	.+510    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	09 f4       	brne	.+2      	; 0xcfc <USB_Host_ProcessNextHostState+0x36>
     cfa:	3f c0       	rjmp	.+126    	; 0xd7a <USB_Host_ProcessNextHostState+0xb4>
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	09 f4       	brne	.+2      	; 0xd02 <USB_Host_ProcessNextHostState+0x3c>
     d00:	67 c0       	rjmp	.+206    	; 0xdd0 <USB_Host_ProcessNextHostState+0x10a>
     d02:	f8 c0       	rjmp	.+496    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     d04:	87 30       	cpi	r24, 0x07	; 7
     d06:	09 f4       	brne	.+2      	; 0xd0a <USB_Host_ProcessNextHostState+0x44>
     d08:	a6 c0       	rjmp	.+332    	; 0xe56 <USB_Host_ProcessNextHostState+0x190>
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <USB_Host_ProcessNextHostState+0x48>
     d0c:	96 c0       	rjmp	.+300    	; 0xe3a <USB_Host_ProcessNextHostState+0x174>
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	09 f4       	brne	.+2      	; 0xd14 <USB_Host_ProcessNextHostState+0x4e>
     d12:	bf c0       	rjmp	.+382    	; 0xe92 <USB_Host_ProcessNextHostState+0x1cc>
     d14:	89 30       	cpi	r24, 0x09	; 9
     d16:	09 f0       	breq	.+2      	; 0xd1a <USB_Host_ProcessNextHostState+0x54>
     d18:	ed c0       	rjmp	.+474    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     d20:	8a e0       	ldi	r24, 0x0A	; 10
     d22:	80 93 67 01 	sts	0x0167, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     d26:	6b db       	rcall	.-2346   	; 0x3fe <EVENT_USB_Host_DeviceEnumerationComplete>
     d28:	e5 c0       	rjmp	.+458    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
			break;
     d2a:	00 91 13 01 	lds	r16, 0x0113
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     d2e:	10 91 14 01 	lds	r17, 0x0114
     d32:	01 15       	cp	r16, r1
     d34:	11 05       	cpc	r17, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <USB_Host_ProcessNextHostState+0x74>
     d38:	dd c0       	rjmp	.+442    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d3c:	77 df       	rcall	.-274    	; 0xc2c <USB_Host_WaitMS>
     d3e:	88 23       	and	r24, r24
     d40:	31 f0       	breq	.+12     	; 0xd4e <USB_Host_ProcessNextHostState+0x88>
     d42:	90 91 12 01 	lds	r25, 0x0112
				{
					USB_HostState = PostWaitState;
     d46:	90 93 67 01 	sts	0x0167, r25
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	c5 c0       	rjmp	.+394    	; 0xed8 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     d4e:	01 50       	subi	r16, 0x01	; 1
					break;
     d50:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     d52:	10 93 14 01 	sts	0x0114, r17
     d56:	00 93 13 01 	sts	0x0113, r16
     d5a:	01 2b       	or	r16, r17
     d5c:	09 f0       	breq	.+2      	; 0xd60 <USB_Host_ProcessNextHostState+0x9a>
     d5e:	ca c0       	rjmp	.+404    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     d60:	80 91 12 01 	lds	r24, 0x0112
				  USB_HostState = PostWaitState;
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <USB_Host_ProcessNextHostState+0xae>
     d66:	88 ee       	ldi	r24, 0xE8	; 232
     d68:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     d6a:	90 93 14 01 	sts	0x0114, r25
     d6e:	80 93 13 01 	sts	0x0113, r24
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 93 67 01 	sts	0x0167, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d78:	bd c0       	rjmp	.+378    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     d7a:	80 91 13 01 	lds	r24, 0x0113
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     d7e:	90 91 14 01 	lds	r25, 0x0114
     d82:	9c 01       	movw	r18, r24
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	31 09       	sbc	r19, r1
     d88:	30 93 14 01 	sts	0x0114, r19
     d8c:	20 93 13 01 	sts	0x0113, r18
     d90:	89 2b       	or	r24, r25
     d92:	39 f0       	breq	.+14     	; 0xda2 <USB_Host_ProcessNextHostState+0xdc>
     d94:	8f ec       	ldi	r24, 0xCF	; 207
     d96:	97 e0       	ldi	r25, 0x07	; 7
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <USB_Host_ProcessNextHostState+0xd2>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <USB_Host_ProcessNextHostState+0xd8>
     d9e:	00 00       	nop
     da0:	a9 c0       	rjmp	.+338    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     da2:	77 98       	cbi	0x0e, 7	; 14
     da4:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     da8:	80 61       	ori	r24, 0x10	; 16
     daa:	80 93 d8 00 	sts	0x00D8, r24
     dae:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     db2:	8b 7f       	andi	r24, 0xFB	; 251
     db4:	80 93 dd 00 	sts	0x00DD, r24
     db8:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     dbc:	80 61       	ori	r24, 0x10	; 16
     dbe:	80 93 d7 00 	sts	0x00D7, r24
     dc2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	80 93 dd 00 	sts	0x00DD, r24
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	d2 cf       	rjmp	.-92     	; 0xd74 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     dd0:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     dd4:	80 ff       	sbrs	r24, 0
     dd6:	8e c0       	rjmp	.+284    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     dd8:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ddc:	8e 7f       	andi	r24, 0xFE	; 254
     dde:	80 93 9f 00 	sts	0x009F, r24
     de2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     de6:	8d 7f       	andi	r24, 0xFD	; 253
     de8:	80 93 9f 00 	sts	0x009F, r24
     dec:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	80 93 df 00 	sts	0x00DF, r24
     df6:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     dfa:	82 60       	ori	r24, 0x02	; 2
     dfc:	80 93 de 00 	sts	0x00DE, r24
     e00:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 93 9e 00 	sts	0x009E, r24
     e0a:	81 d1       	rcall	.+770    	; 0x110e <Pipe_ClearPipes>
     e0c:	10 92 67 01 	sts	0x0167, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     e10:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	90 93 14 01 	sts	0x0114, r25
     e18:	80 93 13 01 	sts	0x0113, r24
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	0a c0       	rjmp	.+20     	; 0xe34 <USB_Host_ProcessNextHostState+0x16e>
     e20:	b4 de       	rcall	.-664    	; 0xb8a <USB_Host_ResetDevice>
     e22:	10 92 67 01 	sts	0x0167, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     e26:	88 ec       	ldi	r24, 0xC8	; 200
     e28:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     e2a:	90 93 14 01 	sts	0x0114, r25
     e2e:	80 93 13 01 	sts	0x0113, r24
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	80 93 12 01 	sts	0x0112, r24
     e38:	5d c0       	rjmp	.+186    	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     e3a:	01 e0       	ldi	r16, 0x01	; 1
     e3c:	20 e4       	ldi	r18, 0x40	; 64
     e3e:	30 e0       	ldi	r19, 0x00	; 0
			break;
     e40:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	fb d0       	rcall	.+502    	; 0x103e <Pipe_ConfigurePipe>
     e48:	81 11       	cpse	r24, r1
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <USB_Host_ProcessNextHostState+0x18c>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	94 e0       	ldi	r25, 0x04	; 4
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <USB_Host_ProcessNextHostState+0x212>
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	8f cf       	rjmp	.-226    	; 0xd74 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     e56:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     e58:	e1 e0       	ldi	r30, 0x01	; 1
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     e5c:	af e5       	ldi	r26, 0x5F	; 95
     e5e:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     e60:	01 90       	ld	r0, Z+
     e62:	0d 92       	st	X+, r0
     e64:	8a 95       	dec	r24
     e66:	e1 f7       	brne	.-8      	; 0xe60 <USB_Host_ProcessNextHostState+0x19a>
     e68:	10 92 a7 00 	sts	0x00A7, r1
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	76 d3       	rcall	.+1772   	; 0x155e <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e72:	81 11       	cpse	r24, r1
     e74:	30 c0       	rjmp	.+96     	; 0xed6 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     e76:	88 85       	ldd	r24, Y+8	; 0x08
     e78:	80 93 00 01 	sts	0x0100, r24
     e7c:	86 de       	rcall	.-756    	; 0xb8a <USB_Host_ResetDevice>
     e7e:	10 92 67 01 	sts	0x0167, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     e82:	88 ec       	ldi	r24, 0xC8	; 200
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 14 01 	sts	0x0114, r25

			USB_Host_ResetDevice();
     e8a:	80 93 13 01 	sts	0x0113, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	d1 cf       	rjmp	.-94     	; 0xe34 <USB_Host_ProcessNextHostState+0x16e>
     e92:	20 91 00 01 	lds	r18, 0x0100
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     ea0:	ce d0       	rcall	.+412    	; 0x103e <Pipe_ConfigurePipe>
     ea2:	88 23       	and	r24, r24
     ea4:	99 f2       	breq	.-90     	; 0xe4c <USB_Host_ProcessNextHostState+0x186>
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	e9 e0       	ldi	r30, 0x09	; 9
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	af e5       	ldi	r26, 0x5F	; 95
     eae:	b1 e0       	ldi	r27, 0x01	; 1
     eb0:	01 90       	ld	r0, Z+
     eb2:	0d 92       	st	X+, r0
     eb4:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <USB_Host_ProcessNextHostState+0x1ea>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	50 d3       	rcall	.+1696   	; 0x155e <USB_Host_SendControlRequest>
     ebe:	81 11       	cpse	r24, r1
     ec0:	0a c0       	rjmp	.+20     	; 0xed6 <USB_Host_ProcessNextHostState+0x210>
     ec2:	10 92 67 01 	sts	0x0167, r1
     ec6:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 14 01 	sts	0x0114, r25
     ece:	80 93 13 01 	sts	0x0113, r24
     ed2:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ed4:	af cf       	rjmp	.-162    	; 0xe34 <USB_Host_ProcessNextHostState+0x16e>
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	20 91 67 01 	lds	r18, 0x0167
     edc:	21 30       	cpi	r18, 0x01	; 1
     ede:	51 f0       	breq	.+20     	; 0xef4 <USB_Host_ProcessNextHostState+0x22e>
     ee0:	68 2f       	mov	r22, r24
     ee2:	89 2f       	mov	r24, r25
     ee4:	d4 da       	rcall	.-2648   	; 0x48e <EVENT_USB_Host_DeviceEnumerationFailed>
     ee6:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	80 93 dd 00 	sts	0x00DD, r24
     ef0:	80 da       	rcall	.-2816   	; 0x3f2 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     ef2:	67 d1       	rcall	.+718    	; 0x11c2 <USB_ResetInterface>
     ef4:	28 96       	adiw	r28, 0x08	; 8
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16

		USB_ResetInterface();
     f08:	08 95       	ret

00000f0a <Pipe_Write_Stream_LE>:
     f0a:	cf 92       	push	r12
	}
}
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	7c 01       	movw	r14, r24
     f1c:	8b 01       	movw	r16, r22
     f1e:	ea 01       	movw	r28, r20
     f20:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f24:	8f 7c       	andi	r24, 0xCF	; 207
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     f2c:	04 d1       	rcall	.+520    	; 0x1136 <Pipe_WaitUntilReady>
     f2e:	81 11       	cpse	r24, r1
     f30:	30 c0       	rjmp	.+96     	; 0xf92 <Pipe_Write_Stream_LE+0x88>
     f32:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f34:	31 f0       	breq	.+12     	; 0xf42 <Pipe_Write_Stream_LE+0x38>
     f36:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	08 1b       	sub	r16, r24
     f3c:	19 0b       	sbc	r17, r25
     f3e:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f40:	f9 1e       	adc	r15, r25
     f42:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f44:	d1 2c       	mov	r13, r1
     f46:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f48:	11 05       	cpc	r17, r1
     f4a:	11 f1       	breq	.+68     	; 0xf90 <Pipe_Write_Stream_LE+0x86>
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     f50:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     f52:	13 c0       	rjmp	.+38     	; 0xf7a <Pipe_Write_Stream_LE+0x70>
     f54:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f58:	8b 77       	andi	r24, 0x7B	; 123
     f5a:	80 93 a6 00 	sts	0x00A6, r24
     f5e:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     f60:	41 f0       	breq	.+16     	; 0xf72 <Pipe_Write_Stream_LE+0x68>
     f62:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	8c 0d       	add	r24, r12
     f68:	9d 1d       	adc	r25, r13
     f6a:	99 83       	std	Y+1, r25	; 0x01
     f6c:	88 83       	st	Y, r24
     f6e:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     f70:	10 c0       	rjmp	.+32     	; 0xf92 <Pipe_Write_Stream_LE+0x88>
     f72:	e1 d0       	rcall	.+450    	; 0x1136 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     f74:	88 23       	and	r24, r24
     f76:	39 f3       	breq	.-50     	; 0xf46 <Pipe_Write_Stream_LE+0x3c>
     f78:	0c c0       	rjmp	.+24     	; 0xf92 <Pipe_Write_Stream_LE+0x88>
     f7a:	f7 01       	movw	r30, r14
     f7c:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f7e:	7f 01       	movw	r14, r30
     f80:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f84:	01 50       	subi	r16, 0x01	; 1
     f86:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f88:	ff ef       	ldi	r31, 0xFF	; 255
     f8a:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     f8c:	df 0a       	sbc	r13, r31
     f8e:	db cf       	rjmp	.-74     	; 0xf46 <Pipe_Write_Stream_LE+0x3c>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     f94:	cf 91       	pop	r28
}
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	08 95       	ret

00000fa4 <Pipe_Read_Stream_LE>:
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	7c 01       	movw	r14, r24
     fb6:	8b 01       	movw	r16, r22
     fb8:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fba:	80 91 aa 00 	lds	r24, 0x00AA
     fbe:	8f 7c       	andi	r24, 0xCF	; 207
     fc0:	80 61       	ori	r24, 0x10	; 16
     fc2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     fc6:	b7 d0       	rcall	.+366    	; 0x1136 <Pipe_WaitUntilReady>
     fc8:	81 11       	cpse	r24, r1
     fca:	30 c0       	rjmp	.+96     	; 0x102c <Pipe_Read_Stream_LE+0x88>
     fcc:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     fce:	31 f0       	breq	.+12     	; 0xfdc <Pipe_Read_Stream_LE+0x38>
     fd0:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     fd2:	99 81       	ldd	r25, Y+1	; 0x01
     fd4:	08 1b       	sub	r16, r24
     fd6:	19 0b       	sbc	r17, r25
     fd8:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     fda:	f9 1e       	adc	r15, r25
     fdc:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fde:	d1 2c       	mov	r13, r1
     fe0:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     fe2:	11 05       	cpc	r17, r1
     fe4:	11 f1       	breq	.+68     	; 0x102a <Pipe_Read_Stream_LE+0x86>
     fe6:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     fea:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     fec:	13 c0       	rjmp	.+38     	; 0x1014 <Pipe_Read_Stream_LE+0x70>
     fee:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ff2:	8e 77       	andi	r24, 0x7E	; 126
     ff4:	80 93 a6 00 	sts	0x00A6, r24
     ff8:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ffa:	41 f0       	breq	.+16     	; 0x100c <Pipe_Read_Stream_LE+0x68>
     ffc:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	8c 0d       	add	r24, r12
    1002:	9d 1d       	adc	r25, r13
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	88 83       	st	Y, r24
    1008:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    100a:	10 c0       	rjmp	.+32     	; 0x102c <Pipe_Read_Stream_LE+0x88>
    100c:	94 d0       	rcall	.+296    	; 0x1136 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    100e:	88 23       	and	r24, r24
    1010:	39 f3       	breq	.-50     	; 0xfe0 <Pipe_Read_Stream_LE+0x3c>
    1012:	0c c0       	rjmp	.+24     	; 0x102c <Pipe_Read_Stream_LE+0x88>
    1014:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1018:	f7 01       	movw	r30, r14
    101a:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    101c:	7f 01       	movw	r14, r30
    101e:	01 50       	subi	r16, 0x01	; 1
    1020:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1022:	ff ef       	ldi	r31, 0xFF	; 255
    1024:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1026:	df 0a       	sbc	r13, r31
    1028:	db cf       	rjmp	.-74     	; 0xfe0 <Pipe_Read_Stream_LE+0x3c>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    102e:	cf 91       	pop	r28
}
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <Pipe_ConfigurePipe>:
    103e:	0f 93       	push	r16
    1040:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1042:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1044:	87 ff       	sbrs	r24, 7
    1046:	02 c0       	rjmp	.+4      	; 0x104c <Pipe_ConfigurePipe+0xe>
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	01 c0       	rjmp	.+2      	; 0x104e <Pipe_ConfigurePipe+0x10>
    104c:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    104e:	e7 30       	cpi	r30, 0x07	; 7
    1050:	10 f0       	brcs	.+4      	; 0x1056 <Pipe_ConfigurePipe+0x18>
	  return false;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	5a c0       	rjmp	.+180    	; 0x110a <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    1056:	61 11       	cpse	r22, r1
    1058:	01 c0       	rjmp	.+2      	; 0x105c <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    105a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    105c:	90 e4       	ldi	r25, 0x40	; 64
    105e:	69 9f       	mul	r22, r25
    1060:	b0 01       	movw	r22, r0
    1062:	11 24       	eor	r1, r1
    1064:	4f 70       	andi	r20, 0x0F	; 15
    1066:	46 2b       	or	r20, r22
    1068:	48 2b       	or	r20, r24
    106a:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    106c:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1070:	5e 13       	cpse	r21, r30
    1072:	19 c0       	rjmp	.+50     	; 0x10a6 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    1074:	02 30       	cpi	r16, 0x02	; 2
    1076:	10 f0       	brcs	.+4      	; 0x107c <Pipe_ConfigurePipe+0x3e>
    1078:	76 e0       	ldi	r23, 0x06	; 6
    107a:	01 c0       	rjmp	.+2      	; 0x107e <Pipe_ConfigurePipe+0x40>
    107c:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    107e:	88 e0       	ldi	r24, 0x08	; 8
    1080:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1082:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1084:	82 17       	cp	r24, r18
    1086:	93 07       	cpc	r25, r19
    1088:	40 f0       	brcs	.+16     	; 0x109a <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    108a:	86 2f       	mov	r24, r22
    108c:	82 95       	swap	r24
    108e:	80 7f       	andi	r24, 0xF0	; 240
    1090:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1092:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1094:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	0e c0       	rjmp	.+28     	; 0x10b6 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    109a:	65 30       	cpi	r22, 0x05	; 5
    109c:	b1 f3       	breq	.-20     	; 0x108a <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    109e:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	ef cf       	rjmp	.-34     	; 0x1084 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    10a6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    10aa:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    10ae:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    10b2:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    10b6:	81 fd       	sbrc	r24, 1
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    10ba:	5f 5f       	subi	r21, 0xFF	; 255
    10bc:	57 30       	cpi	r21, 0x07	; 7
    10be:	b1 f6       	brne	.-84     	; 0x106c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10c0:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	21 c0       	rjmp	.+66     	; 0x110a <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    10c8:	90 91 a9 00 	lds	r25, 0x00A9
    10cc:	9e 7f       	andi	r25, 0xFE	; 254
    10ce:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    10d2:	90 91 ab 00 	lds	r25, 0x00AB
    10d6:	9d 7f       	andi	r25, 0xFD	; 253
    10d8:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    10dc:	90 91 a9 00 	lds	r25, 0x00A9
    10e0:	91 60       	ori	r25, 0x01	; 1
    10e2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    10e6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    10ea:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    10ee:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    10f2:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    10f6:	80 91 a9 00 	lds	r24, 0x00A9
    10fa:	80 62       	ori	r24, 0x20	; 32
    10fc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1100:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1104:	87 fd       	sbrc	r24, 7
    1106:	d9 cf       	rjmp	.-78     	; 0x10ba <Pipe_ConfigurePipe+0x7c>
    1108:	a4 cf       	rjmp	.-184    	; 0x1052 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    110e:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1112:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1114:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1118:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    111c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1120:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1124:	90 91 a9 00 	lds	r25, 0x00A9
    1128:	9e 7f       	andi	r25, 0xFE	; 254
    112a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	87 30       	cpi	r24, 0x07	; 7
    1132:	81 f7       	brne	.-32     	; 0x1114 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1134:	08 95       	ret

00001136 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1136:	80 91 a2 00 	lds	r24, 0x00A2
    113a:	90 91 a3 00 	lds	r25, 0x00A3
    113e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1140:	20 91 aa 00 	lds	r18, 0x00AA
    1144:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1146:	20 31       	cpi	r18, 0x10	; 16
    1148:	29 f4       	brne	.+10     	; 0x1154 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    114a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    114e:	20 ff       	sbrs	r18, 0
    1150:	05 c0       	rjmp	.+10     	; 0x115c <Pipe_WaitUntilReady+0x26>
    1152:	17 c0       	rjmp	.+46     	; 0x1182 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1154:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1158:	22 fd       	sbrc	r18, 2
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    115c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1160:	21 fd       	sbrc	r18, 1
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1164:	20 91 67 01 	lds	r18, 0x0167
    1168:	21 30       	cpi	r18, 0x01	; 1
    116a:	79 f0       	breq	.+30     	; 0x118a <Pipe_WaitUntilReady+0x54>
    116c:	20 91 a2 00 	lds	r18, 0x00A2
    1170:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	19 f3       	breq	.-58     	; 0x1140 <Pipe_WaitUntilReady+0xa>
    117a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    117c:	41 f0       	breq	.+16     	; 0x118e <Pipe_WaitUntilReady+0x58>
    117e:	c9 01       	movw	r24, r18
    1180:	df cf       	rjmp	.-66     	; 0x1140 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    118e:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    1190:	08 95       	ret

00001192 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1192:	75 d0       	rcall	.+234    	; 0x127e <USB_INT_DisableAllInterrupts>
    1194:	7c d0       	rcall	.+248    	; 0x128e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1196:	e0 ee       	ldi	r30, 0xE0	; 224
    1198:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    119a:	80 81       	ld	r24, Z
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 83       	st	Z, r24
    11a0:	e8 ed       	ldi	r30, 0xD8	; 216
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 77       	andi	r24, 0x7F	; 127
    11a8:	80 83       	st	Z, r24
    11aa:	19 bc       	out	0x29, r1	; 41
    11ac:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    11ae:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    11b0:	8c 91       	ld	r24, X
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	8c 93       	st	X, r24
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    11ba:	80 83       	st	Z, r24
    11bc:	10 92 5e 01 	sts	0x015E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    11c0:	08 95       	ret

000011c2 <USB_ResetInterface>:
    11c2:	5d d0       	rcall	.+186    	; 0x127e <USB_INT_DisableAllInterrupts>
    11c4:	64 d0       	rcall	.+200    	; 0x128e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    11c6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	80 93 d8 00 	sts	0x00D8, r24
    11d0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	80 93 d8 00 	sts	0x00D8, r24
    11da:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    11de:	8f 7d       	andi	r24, 0xDF	; 223
    11e0:	80 93 d8 00 	sts	0x00D8, r24
    11e4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    11e8:	8f 77       	andi	r24, 0x7F	; 127
    11ea:	80 93 d7 00 	sts	0x00D7, r24
    11ee:	8c e0       	ldi	r24, 0x0C	; 12
    11f0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11f2:	8e e0       	ldi	r24, 0x0E	; 14
    11f4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11f6:	09 b4       	in	r0, 0x29	; 41
    11f8:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    11fa:	fd cf       	rjmp	.-6      	; 0x11f6 <USB_ResetInterface+0x34>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 67 01 	sts	0x0167, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1202:	10 92 5d 01 	sts	0x015D, r1
	USB_Host_ConfigurationNumber = 0;
    1206:	80 e4       	ldi	r24, 0x40	; 64
    1208:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    120c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	80 93 d8 00 	sts	0x00D8, r24
    1216:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	80 93 dd 00 	sts	0x00DD, r24
    1220:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	80 93 dd 00 	sts	0x00DD, r24
    122a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    122e:	8f 7e       	andi	r24, 0xEF	; 239
    1230:	80 93 d7 00 	sts	0x00D7, r24
    1234:	6f 9a       	sbi	0x0d, 7	; 13
    1236:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1238:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	80 93 de 00 	sts	0x00DE, r24
    1242:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	80 93 de 00 	sts	0x00DE, r24
    124c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1250:	8e 7f       	andi	r24, 0xFE	; 254
    1252:	80 93 e0 00 	sts	0x00E0, r24
    1256:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	80 93 d8 00 	sts	0x00D8, r24
    1260:	08 95       	ret

00001262 <USB_Init>:
    1262:	e8 ed       	ldi	r30, 0xD8	; 216
    1264:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1266:	80 81       	ld	r24, Z
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    126c:	e7 ed       	ldi	r30, 0xD7	; 215
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
    127c:	a2 cf       	rjmp	.-188    	; 0x11c2 <USB_ResetInterface>

0000127e <USB_INT_DisableAllInterrupts>:
    127e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8c 7f       	andi	r24, 0xFC	; 252
    1286:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1288:	10 92 a0 00 	sts	0x00A0, r1
    128c:	08 95       	ret

0000128e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    128e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1292:	10 92 9f 00 	sts	0x009F, r1
    1296:	08 95       	ret

00001298 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	0b b6       	in	r0, 0x3b	; 59
    12a4:	0f 92       	push	r0
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12be:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    12c2:	85 ff       	sbrs	r24, 5
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12c6:	80 91 a0 00 	lds	r24, 0x00A0
    12ca:	85 ff       	sbrs	r24, 5
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12ce:	80 91 9f 00 	lds	r24, 0x009F
    12d2:	8f 7d       	andi	r24, 0xDF	; 223
    12d4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    12d8:	1a d1       	rcall	.+564    	; 0x150e <USB_Event_Stub>
    12da:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    12de:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    12e0:	15 c0       	rjmp	.+42     	; 0x130c <__vector_10+0x74>
    12e2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    12e6:	81 ff       	sbrs	r24, 1
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <__vector_10+0x74>
    12ea:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    12ee:	8d 7f       	andi	r24, 0xFD	; 253
    12f0:	80 93 9f 00 	sts	0x009F, r24
    12f4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	80 93 9f 00 	sts	0x009F, r24
    12fe:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1302:	8d 7f       	andi	r24, 0xFD	; 253
    1304:	80 93 a0 00 	sts	0x00A0, r24
    1308:	74 d8       	rcall	.-3864   	; 0x3f2 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    130a:	5b df       	rcall	.-330    	; 0x11c2 <USB_ResetInterface>
    130c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    1310:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1312:	15 c0       	rjmp	.+42     	; 0x133e <__vector_10+0xa6>
    1314:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1318:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    131a:	11 c0       	rjmp	.+34     	; 0x133e <__vector_10+0xa6>
    131c:	80 91 df 00 	lds	r24, 0x00DF
    1320:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1322:	80 93 df 00 	sts	0x00DF, r24
    1326:	77 98       	cbi	0x0e, 7	; 14
    1328:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    132c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    132e:	80 93 dd 00 	sts	0x00DD, r24
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	95 d8       	rcall	.-3798   	; 0x460 <EVENT_USB_Host_HostError>
    1336:	5d d8       	rcall	.-3910   	; 0x3f2 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 67 01 	sts	0x0167, r24
		EVENT_USB_Host_DeviceUnattached();
    133e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    1342:	80 ff       	sbrs	r24, 0
    1344:	17 c0       	rjmp	.+46     	; 0x1374 <__vector_10+0xdc>
    1346:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    134a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    134c:	13 c0       	rjmp	.+38     	; 0x1374 <__vector_10+0xdc>
    134e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1352:	8e 7f       	andi	r24, 0xFE	; 254
    1354:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1358:	80 91 de 00 	lds	r24, 0x00DE
    135c:	8e 7f       	andi	r24, 0xFE	; 254
    135e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1362:	41 d8       	rcall	.-3966   	; 0x3e6 <EVENT_USB_Host_DeviceAttached>
    1364:	80 91 a0 00 	lds	r24, 0x00A0
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    136e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1370:	80 93 67 01 	sts	0x0167, r24
    1374:	80 91 df 00 	lds	r24, 0x00DF
    1378:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <__vector_10+0x100>
    137c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1380:	82 ff       	sbrs	r24, 2
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1384:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1388:	8b 7f       	andi	r24, 0xFB	; 251
    138a:	80 93 df 00 	sts	0x00DF, r24
    138e:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	7d d8       	rcall	.-3846   	; 0x48e <EVENT_USB_Host_DeviceEnumerationFailed>
    1394:	2e d8       	rcall	.-4004   	; 0x3f2 <EVENT_USB_Host_DeviceUnattached>
    1396:	15 df       	rcall	.-470    	; 0x11c2 <USB_ResetInterface>
    1398:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23

		USB_ResetInterface();
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0b be       	out	0x3b, r0	; 59
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <USB_GetNextDescriptor>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	fc 01       	movw	r30, r24
    13c4:	eb 01       	movw	r28, r22
    13c6:	a8 81       	ld	r26, Y
    13c8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ca:	8c 91       	ld	r24, X
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
    13d0:	31 81       	ldd	r19, Z+1	; 0x01
    13d2:	82 17       	cp	r24, r18
    13d4:	93 07       	cpc	r25, r19
    13d6:	08 f4       	brcc	.+2      	; 0x13da <USB_GetNextDescriptor+0x1c>
    13d8:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    13da:	a2 0f       	add	r26, r18
    13dc:	b3 1f       	adc	r27, r19
    13de:	eb 01       	movw	r28, r22
    13e0:	b9 83       	std	Y+1, r27	; 0x01
    13e2:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	82 1b       	sub	r24, r18
    13ea:	93 0b       	sbc	r25, r19
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
			}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    13f6:	cf 92       	push	r12
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	29 97       	sbiw	r28, 0x09	; 9
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	7b 01       	movw	r14, r22
    1418:	8a 01       	movw	r16, r20
    141a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    141c:	90 e8       	ldi	r25, 0x80	; 128
    141e:	90 93 5f 01 	sts	0x015F, r25
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	90 93 60 01 	sts	0x0160, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1428:	e8 2f       	mov	r30, r24
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1430:	f0 93 62 01 	sts	0x0162, r31
    1434:	e0 93 61 01 	sts	0x0161, r30
    1438:	10 92 64 01 	sts	0x0164, r1
    143c:	10 92 63 01 	sts	0x0163, r1
    1440:	89 e0       	ldi	r24, 0x09	; 9
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	90 93 66 01 	sts	0x0166, r25
    1448:	80 93 65 01 	sts	0x0165, r24
    144c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	84 d0       	rcall	.+264    	; 0x155e <USB_Host_SendControlRequest>
    1456:	81 11       	cpse	r24, r1
    1458:	19 c0       	rjmp	.+50     	; 0x148c <USB_Host_GetDeviceConfigDescriptor+0x96>
    145a:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    145c:	fc 81       	ldd	r31, Y+4	; 0x04
    145e:	d7 01       	movw	r26, r14
    1460:	ed 93       	st	X+, r30
    1462:	fc 93       	st	X, r31
    1464:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    1466:	df 06       	cpc	r13, r31
    1468:	70 f0       	brcs	.+28     	; 0x1486 <USB_Host_GetDeviceConfigDescriptor+0x90>
    146a:	f0 93 66 01 	sts	0x0166, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    146e:	e0 93 65 01 	sts	0x0165, r30
    1472:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1474:	74 d0       	rcall	.+232    	; 0x155e <USB_Host_SendControlRequest>
    1476:	81 11       	cpse	r24, r1
    1478:	09 c0       	rjmp	.+18     	; 0x148c <USB_Host_GetDeviceConfigDescriptor+0x96>
    147a:	f8 01       	movw	r30, r16
    147c:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	21 f0       	breq	.+8      	; 0x148a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1482:	86 e0       	ldi	r24, 0x06	; 6
    1484:	03 c0       	rjmp	.+6      	; 0x148c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	01 c0       	rjmp	.+2      	; 0x148c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    148e:	0f b6       	in	r0, 0x3f	; 63
}
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	df 90       	pop	r13
    14a6:	cf 90       	pop	r12
    14a8:	08 95       	ret

000014aa <USB_GetNextDescriptorComp>:
    14aa:	af 92       	push	r10
    14ac:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	8c 01       	movw	r16, r24
    14c0:	eb 01       	movw	r28, r22
    14c2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    14c4:	f8 01       	movw	r30, r16
    14c6:	e0 80       	ld	r14, Z
    14c8:	f1 80       	ldd	r15, Z+1	; 0x01
    14ca:	e1 14       	cp	r14, r1
    14cc:	f1 04       	cpc	r15, r1
    14ce:	99 f0       	breq	.+38     	; 0x14f6 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    14d0:	a8 80       	ld	r10, Y
    14d2:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    14d4:	be 01       	movw	r22, r28
    14d6:	c8 01       	movw	r24, r16
    14d8:	72 df       	rcall	.-284    	; 0x13be <USB_GetNextDescriptor>
    14da:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	f6 01       	movw	r30, r12
    14e0:	09 95       	icall
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	79 f3       	breq	.-34     	; 0x14c4 <USB_GetNextDescriptorComp+0x1a>
    14e6:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    14e8:	39 f4       	brne	.+14     	; 0x14f8 <USB_GetNextDescriptorComp+0x4e>
    14ea:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    14ec:	a8 82       	st	Y, r10
    14ee:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    14f0:	f1 82       	std	Z+1, r15	; 0x01
    14f2:	e0 82       	st	Z, r14
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <USB_GetNextDescriptorComp+0x4e>
    14f6:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    14f8:	df 91       	pop	r29
}
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	08 95       	ret

0000150e <USB_Event_Stub>:
    150e:	08 95       	ret

00001510 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1518:	c9 ee       	ldi	r28, 0xE9	; 233
    151a:	d3 e0       	ldi	r29, 0x03	; 3
    151c:	11 11       	cpse	r17, r1
    151e:	0d c0       	rjmp	.+26     	; 0x153a <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1520:	80 91 a6 00 	lds	r24, 0x00A6
    1524:	83 fd       	sbrc	r24, 3
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 db       	rcall	.-2304   	; 0xc2c <USB_Host_WaitMS>
    152c:	81 11       	cpse	r24, r1
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <USB_Host_WaitForIOS+0x46>
    1530:	21 97       	sbiw	r28, 0x01	; 1
    1532:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1534:	99 f7       	brne	.-26     	; 0x151c <USB_Host_WaitForIOS+0xc>
    1536:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <USB_Host_WaitForIOS+0x46>
    153a:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    153c:	29 f4       	brne	.+10     	; 0x1548 <USB_Host_WaitForIOS+0x38>
    153e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1542:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1544:	f1 cf       	rjmp	.-30     	; 0x1528 <USB_Host_WaitForIOS+0x18>
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <USB_Host_WaitForIOS+0x44>
    1548:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    154a:	71 f7       	brne	.-36     	; 0x1528 <USB_Host_WaitForIOS+0x18>
    154c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1550:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1552:	ea cf       	rjmp	.-44     	; 0x1528 <USB_Host_WaitForIOS+0x18>
    1554:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1556:	df 91       	pop	r29
}
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	08 95       	ret

0000155e <USB_Host_SendControlRequest>:
    155e:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    156a:	f0 90 9e 00 	lds	r15, 0x009E
    156e:	8f 2d       	mov	r24, r15
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1574:	c0 91 65 01 	lds	r28, 0x0165
    1578:	d0 91 66 01 	lds	r29, 0x0166
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    157c:	80 91 9e 00 	lds	r24, 0x009E
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	51 db       	rcall	.-2398   	; 0xc2c <USB_Host_WaitMS>
    158a:	81 11       	cpse	r24, r1
    158c:	cc c0       	rjmp	.+408    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    158e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1592:	8f 7c       	andi	r24, 0xCF	; 207
    1594:	80 93 aa 00 	sts	0x00AA, r24
    1598:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    159c:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    15a0:	8f 7e       	andi	r24, 0xEF	; 239
    15a2:	80 93 a6 00 	sts	0x00A6, r24
    15a6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15aa:	8f 7b       	andi	r24, 0xBF	; 191
    15ac:	80 93 a9 00 	sts	0x00A9, r24
    15b0:	ef e5       	ldi	r30, 0x5F	; 95
    15b2:	f1 e0       	ldi	r31, 0x01	; 1
    15b4:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    15b6:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    15bc:	e7 36       	cpi	r30, 0x67	; 103
    15be:	f8 07       	cpc	r31, r24
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <USB_Host_SendControlRequest+0x56>
    15c2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    15c6:	87 77       	andi	r24, 0x77	; 119
    15c8:	80 93 a6 00 	sts	0x00A6, r24
    15cc:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    15ce:	a0 df       	rcall	.-192    	; 0x1510 <USB_Host_WaitForIOS>
    15d0:	81 11       	cpse	r24, r1
    15d2:	a9 c0       	rjmp	.+338    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    15d4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	80 93 a9 00 	sts	0x00A9, r24
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	25 db       	rcall	.-2486   	; 0xc2c <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    15e2:	81 11       	cpse	r24, r1
    15e4:	a0 c0       	rjmp	.+320    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    15e6:	80 91 5f 01 	lds	r24, 0x015F
    15ea:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    15ec:	4e c0       	rjmp	.+156    	; 0x168a <USB_Host_SendControlRequest+0x12c>
    15ee:	80 91 aa 00 	lds	r24, 0x00AA
    15f2:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15f4:	80 61       	ori	r24, 0x10	; 16
    15f6:	80 93 aa 00 	sts	0x00AA, r24
    15fa:	01 15       	cp	r16, r1
    15fc:	11 05       	cpc	r17, r1
    15fe:	09 f0       	breq	.+2      	; 0x1602 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1600:	3a c0       	rjmp	.+116    	; 0x1676 <USB_Host_SendControlRequest+0x118>
    1602:	80 91 aa 00 	lds	r24, 0x00AA
    1606:	8f 7c       	andi	r24, 0xCF	; 207
    1608:	80 62       	ori	r24, 0x20	; 32
    160a:	80 93 aa 00 	sts	0x00AA, r24
    160e:	80 91 a9 00 	lds	r24, 0x00A9
    1612:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1614:	80 93 a9 00 	sts	0x00A9, r24
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	7a df       	rcall	.-268    	; 0x1510 <USB_Host_WaitForIOS>
    161c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    161e:	83 c0       	rjmp	.+262    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    1620:	80 91 a6 00 	lds	r24, 0x00A6
    1624:	8b 77       	andi	r24, 0x7B	; 123
    1626:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	71 df       	rcall	.-286    	; 0x1510 <USB_Host_WaitForIOS>
    162e:	7b c0       	rjmp	.+246    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    1630:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	69 df       	rcall	.-302    	; 0x1510 <USB_Host_WaitForIOS>
    163e:	81 11       	cpse	r24, r1
    1640:	72 c0       	rjmp	.+228    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    1642:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1646:	90 91 f7 00 	lds	r25, 0x00F7
    164a:	89 2b       	or	r24, r25
    164c:	11 f4       	brne	.+4      	; 0x1652 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    164e:	c0 e0       	ldi	r28, 0x00	; 0
    1650:	d0 e0       	ldi	r29, 0x00	; 0
    1652:	f8 01       	movw	r30, r16
    1654:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1656:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    165a:	90 91 f7 00 	lds	r25, 0x00F7
    165e:	89 2b       	or	r24, r25
    1660:	69 f4       	brne	.+26     	; 0x167c <USB_Host_SendControlRequest+0x11e>
    1662:	80 91 a9 00 	lds	r24, 0x00A9
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    166c:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1670:	8e 77       	andi	r24, 0x7E	; 126
    1672:	80 93 a6 00 	sts	0x00A6, r24
    1676:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1678:	d9 f6       	brne	.-74     	; 0x1630 <USB_Host_SendControlRequest+0xd2>
    167a:	c3 cf       	rjmp	.-122    	; 0x1602 <USB_Host_SendControlRequest+0xa4>
    167c:	20 97       	sbiw	r28, 0x00	; 0
    167e:	89 f3       	breq	.-30     	; 0x1662 <USB_Host_SendControlRequest+0x104>
    1680:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1684:	81 93       	st	Z+, r24
    1686:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1688:	e5 cf       	rjmp	.-54     	; 0x1654 <USB_Host_SendControlRequest+0xf6>
    168a:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    168c:	11 05       	cpc	r17, r1
    168e:	b1 f1       	breq	.+108    	; 0x16fc <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1690:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1694:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1696:	80 62       	ori	r24, 0x20	; 32
    1698:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    169c:	80 91 a9 00 	lds	r24, 0x00A9
    16a0:	8f 7b       	andi	r24, 0xBF	; 191
    16a2:	80 93 a9 00 	sts	0x00A9, r24
    16a6:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16a8:	20 97       	sbiw	r28, 0x00	; 0
    16aa:	01 f1       	breq	.+64     	; 0x16ec <USB_Host_SendControlRequest+0x18e>
    16ac:	31 df       	rcall	.-414    	; 0x1510 <USB_Host_WaitForIOS>
    16ae:	81 11       	cpse	r24, r1
    16b0:	3a c0       	rjmp	.+116    	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    16b2:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    16b4:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    16b8:	30 91 f7 00 	lds	r19, 0x00F7
    16bc:	80 91 00 01 	lds	r24, 0x0100
    16c0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    16c2:	28 17       	cp	r18, r24
    16c4:	39 07       	cpc	r19, r25
    16c6:	58 f4       	brcc	.+22     	; 0x16de <USB_Host_SendControlRequest+0x180>
    16c8:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	8c 01       	movw	r16, r24
    16ce:	20 81       	ld	r18, Z
    16d0:	20 93 af 00 	sts	0x00AF, r18
    16d4:	21 97       	sbiw	r28, 0x01	; 1
    16d6:	20 97       	sbiw	r28, 0x00	; 0
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <USB_Host_SendControlRequest+0x182>
    16da:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    16dc:	eb cf       	rjmp	.-42     	; 0x16b4 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    16de:	8f 01       	movw	r16, r30
    16e0:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    16e4:	8b 77       	andi	r24, 0x7B	; 123
    16e6:	80 93 a6 00 	sts	0x00A6, r24
    16ea:	dd cf       	rjmp	.-70     	; 0x16a6 <USB_Host_SendControlRequest+0x148>
    16ec:	11 df       	rcall	.-478    	; 0x1510 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    16ee:	81 11       	cpse	r24, r1
    16f0:	1a c0       	rjmp	.+52     	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    16f2:	80 91 a9 00 	lds	r24, 0x00A9
    16f6:	80 64       	ori	r24, 0x40	; 64
    16f8:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    16fc:	80 91 aa 00 	lds	r24, 0x00AA
    1700:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1702:	80 61       	ori	r24, 0x10	; 16
    1704:	80 93 aa 00 	sts	0x00AA, r24
    1708:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    170c:	8f 7b       	andi	r24, 0xBF	; 191
    170e:	80 93 a9 00 	sts	0x00A9, r24
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	fd de       	rcall	.-518    	; 0x1510 <USB_Host_WaitForIOS>
    1716:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <USB_Host_SendControlRequest+0x1c8>
    171a:	80 91 a6 00 	lds	r24, 0x00A6
    171e:	8e 77       	andi	r24, 0x7E	; 126
    1720:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 91 a9 00 	lds	r25, 0x00A9
    172a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    172c:	90 93 a9 00 	sts	0x00A9, r25
    1730:	f1 10       	cpse	r15, r1
    1732:	05 c0       	rjmp	.+10     	; 0x173e <USB_Host_SendControlRequest+0x1e0>
    1734:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1738:	9e 7f       	andi	r25, 0xFE	; 254
    173a:	90 93 9e 00 	sts	0x009E, r25
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1744:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1750:	ff 90       	pop	r15
    1752:	08 95       	ret

00001754 <USB_Host_SetDeviceConfiguration>:
    1754:	cf 93       	push	r28
				UPRST = 0;
    1756:	c8 2f       	mov	r28, r24
    1758:	10 92 5f 01 	sts	0x015F, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    175c:	89 e0       	ldi	r24, 0x09	; 9
    175e:	80 93 60 01 	sts	0x0160, r24
    1762:	2c 2f       	mov	r18, r28
    1764:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1766:	30 93 62 01 	sts	0x0162, r19
    176a:	20 93 61 01 	sts	0x0161, r18
    176e:	10 92 64 01 	sts	0x0164, r1
    1772:	10 92 63 01 	sts	0x0163, r1
    1776:	10 92 66 01 	sts	0x0166, r1
    177a:	10 92 65 01 	sts	0x0165, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    177e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	eb de       	rcall	.-554    	; 0x155e <USB_Host_SendControlRequest>
    1788:	81 11       	cpse	r24, r1
    178a:	09 c0       	rjmp	.+18     	; 0x179e <USB_Host_SetDeviceConfiguration+0x4a>
    178c:	c0 93 5d 01 	sts	0x015D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1790:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1792:	11 f0       	breq	.+4      	; 0x1798 <USB_Host_SetDeviceConfiguration+0x44>
    1794:	9b e0       	ldi	r25, 0x0B	; 11
    1796:	01 c0       	rjmp	.+2      	; 0x179a <USB_Host_SetDeviceConfiguration+0x46>
    1798:	9a e0       	ldi	r25, 0x0A	; 10
    179a:	90 93 67 01 	sts	0x0167, r25
    179e:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    17a0:	08 95       	ret

000017a2 <USB_Host_ClearEndpointStall>:
    17a2:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    17a4:	90 93 5f 01 	sts	0x015F, r25
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	90 93 60 01 	sts	0x0160, r25
    17ae:	10 92 62 01 	sts	0x0162, r1
    17b2:	10 92 61 01 	sts	0x0161, r1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	90 93 64 01 	sts	0x0164, r25
    17bc:	80 93 63 01 	sts	0x0163, r24
    17c0:	10 92 66 01 	sts	0x0166, r1
    17c4:	10 92 65 01 	sts	0x0165, r1
    17c8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	c6 ce       	rjmp	.-628    	; 0x155e <USB_Host_SendControlRequest>

000017d2 <USB_USBTask>:
    17d2:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    17d4:	c0 91 a7 00 	lds	r28, 0x00A7
    17d8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    17da:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17de:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    17e2:	71 da       	rcall	.-2846   	; 0xcc6 <USB_Host_ProcessNextHostState>
    17e4:	c0 93 a7 00 	sts	0x00A7, r28
    17e8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    17ea:	08 95       	ret

000017ec <Serial_putchar>:
    17ec:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    17f0:	95 ff       	sbrs	r25, 5
    17f2:	fc cf       	rjmp	.-8      	; 0x17ec <Serial_putchar>
				UDR1 = DataByte;
    17f4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	08 95       	ret

000017fe <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    17fe:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1802:	87 ff       	sbrs	r24, 7
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <Serial_getchar+0x18>
    1806:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    180a:	87 ff       	sbrs	r24, 7
    180c:	07 c0       	rjmp	.+14     	; 0x181c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    180e:	80 91 ce 00 	lds	r24, 0x00CE
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	08 95       	ret
	  return _FDEV_EOF;
    1816:	8e ef       	ldi	r24, 0xFE	; 254
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1820:	08 95       	ret

00001822 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1822:	fc 01       	movw	r30, r24
	if (!(Stream))
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	59 f4       	brne	.+22     	; 0x183e <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1828:	88 e6       	ldi	r24, 0x68	; 104
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	90 93 77 01 	sts	0x0177, r25
    1830:	80 93 76 01 	sts	0x0176, r24
		stdout = Stream;
    1834:	90 93 79 01 	sts	0x0179, r25
    1838:	80 93 78 01 	sts	0x0178, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    183c:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    183e:	8e e0       	ldi	r24, 0x0E	; 14
    1840:	df 01       	movw	r26, r30
    1842:	1d 92       	st	X+, r1
    1844:	8a 95       	dec	r24
    1846:	e9 f7       	brne	.-6      	; 0x1842 <Serial_CreateStream+0x20>
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	83 83       	std	Z+3, r24	; 0x03
    184c:	86 ef       	ldi	r24, 0xF6	; 246
    184e:	9b e0       	ldi	r25, 0x0B	; 11
    1850:	91 87       	std	Z+9, r25	; 0x09
    1852:	80 87       	std	Z+8, r24	; 0x08
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	9b e0       	ldi	r25, 0x0B	; 11
    1858:	93 87       	std	Z+11, r25	; 0x0b
    185a:	82 87       	std	Z+10, r24	; 0x0a
    185c:	08 95       	ret

0000185e <printf_P>:
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	fe 01       	movw	r30, r28
    186c:	37 96       	adiw	r30, 0x07	; 7
    186e:	61 91       	ld	r22, Z+
    1870:	71 91       	ld	r23, Z+
    1872:	08 e7       	ldi	r16, 0x78	; 120
    1874:	11 e0       	ldi	r17, 0x01	; 1
    1876:	d8 01       	movw	r26, r16
    1878:	8d 91       	ld	r24, X+
    187a:	9c 91       	ld	r25, X
    187c:	dc 01       	movw	r26, r24
    187e:	13 96       	adiw	r26, 0x03	; 3
    1880:	2c 91       	ld	r18, X
    1882:	13 97       	sbiw	r26, 0x03	; 3
    1884:	28 60       	ori	r18, 0x08	; 8
    1886:	13 96       	adiw	r26, 0x03	; 3
    1888:	2c 93       	st	X, r18
    188a:	af 01       	movw	r20, r30
    188c:	3a d0       	rcall	.+116    	; 0x1902 <vfprintf>
    188e:	d8 01       	movw	r26, r16
    1890:	ed 91       	ld	r30, X+
    1892:	fc 91       	ld	r31, X
    1894:	23 81       	ldd	r18, Z+3	; 0x03
    1896:	27 7f       	andi	r18, 0xF7	; 247
    1898:	23 83       	std	Z+3, r18	; 0x03
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <puts_P>:
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	ec 01       	movw	r28, r24
    18ae:	e0 91 78 01 	lds	r30, 0x0178
    18b2:	f0 91 79 01 	lds	r31, 0x0179
    18b6:	83 81       	ldd	r24, Z+3	; 0x03
    18b8:	81 ff       	sbrs	r24, 1
    18ba:	1c c0       	rjmp	.+56     	; 0x18f4 <puts_P+0x50>
    18bc:	00 e0       	ldi	r16, 0x00	; 0
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	fe 01       	movw	r30, r28
    18c2:	84 91       	lpm	r24, Z
    18c4:	60 91 78 01 	lds	r22, 0x0178
    18c8:	70 91 79 01 	lds	r23, 0x0179
    18cc:	db 01       	movw	r26, r22
    18ce:	18 96       	adiw	r26, 0x08	; 8
    18d0:	ed 91       	ld	r30, X+
    18d2:	fc 91       	ld	r31, X
    18d4:	19 97       	sbiw	r26, 0x09	; 9
    18d6:	88 23       	and	r24, r24
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <puts_P+0x44>
    18da:	09 95       	icall
    18dc:	89 2b       	or	r24, r25
    18de:	11 f0       	breq	.+4      	; 0x18e4 <puts_P+0x40>
    18e0:	0f ef       	ldi	r16, 0xFF	; 255
    18e2:	1f ef       	ldi	r17, 0xFF	; 255
    18e4:	21 96       	adiw	r28, 0x01	; 1
    18e6:	ec cf       	rjmp	.-40     	; 0x18c0 <puts_P+0x1c>
    18e8:	8a e0       	ldi	r24, 0x0A	; 10
    18ea:	09 95       	icall
    18ec:	89 2b       	or	r24, r25
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <puts_P+0x50>
    18f0:	c8 01       	movw	r24, r16
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <puts_P+0x54>
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <vfprintf>:
    1902:	2f 92       	push	r2
    1904:	3f 92       	push	r3
    1906:	4f 92       	push	r4
    1908:	5f 92       	push	r5
    190a:	6f 92       	push	r6
    190c:	7f 92       	push	r7
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	2c 97       	sbiw	r28, 0x0c	; 12
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	7c 01       	movw	r14, r24
    1938:	6b 01       	movw	r12, r22
    193a:	8a 01       	movw	r16, r20
    193c:	fc 01       	movw	r30, r24
    193e:	17 82       	std	Z+7, r1	; 0x07
    1940:	16 82       	std	Z+6, r1	; 0x06
    1942:	83 81       	ldd	r24, Z+3	; 0x03
    1944:	81 ff       	sbrs	r24, 1
    1946:	b0 c1       	rjmp	.+864    	; 0x1ca8 <vfprintf+0x3a6>
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	4c 01       	movw	r8, r24
    194e:	f7 01       	movw	r30, r14
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	f6 01       	movw	r30, r12
    1954:	93 fd       	sbrc	r25, 3
    1956:	85 91       	lpm	r24, Z+
    1958:	93 ff       	sbrs	r25, 3
    195a:	81 91       	ld	r24, Z+
    195c:	6f 01       	movw	r12, r30
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <vfprintf+0x62>
    1962:	9e c1       	rjmp	.+828    	; 0x1ca0 <vfprintf+0x39e>
    1964:	85 32       	cpi	r24, 0x25	; 37
    1966:	39 f4       	brne	.+14     	; 0x1976 <vfprintf+0x74>
    1968:	93 fd       	sbrc	r25, 3
    196a:	85 91       	lpm	r24, Z+
    196c:	93 ff       	sbrs	r25, 3
    196e:	81 91       	ld	r24, Z+
    1970:	6f 01       	movw	r12, r30
    1972:	85 32       	cpi	r24, 0x25	; 37
    1974:	21 f4       	brne	.+8      	; 0x197e <vfprintf+0x7c>
    1976:	b7 01       	movw	r22, r14
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	c7 d1       	rcall	.+910    	; 0x1d0a <fputc>
    197c:	e8 cf       	rjmp	.-48     	; 0x194e <vfprintf+0x4c>
    197e:	51 2c       	mov	r5, r1
    1980:	31 2c       	mov	r3, r1
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	20 32       	cpi	r18, 0x20	; 32
    1986:	a0 f4       	brcc	.+40     	; 0x19b0 <vfprintf+0xae>
    1988:	8b 32       	cpi	r24, 0x2B	; 43
    198a:	69 f0       	breq	.+26     	; 0x19a6 <vfprintf+0xa4>
    198c:	30 f4       	brcc	.+12     	; 0x199a <vfprintf+0x98>
    198e:	80 32       	cpi	r24, 0x20	; 32
    1990:	59 f0       	breq	.+22     	; 0x19a8 <vfprintf+0xa6>
    1992:	83 32       	cpi	r24, 0x23	; 35
    1994:	69 f4       	brne	.+26     	; 0x19b0 <vfprintf+0xae>
    1996:	20 61       	ori	r18, 0x10	; 16
    1998:	2c c0       	rjmp	.+88     	; 0x19f2 <vfprintf+0xf0>
    199a:	8d 32       	cpi	r24, 0x2D	; 45
    199c:	39 f0       	breq	.+14     	; 0x19ac <vfprintf+0xaa>
    199e:	80 33       	cpi	r24, 0x30	; 48
    19a0:	39 f4       	brne	.+14     	; 0x19b0 <vfprintf+0xae>
    19a2:	21 60       	ori	r18, 0x01	; 1
    19a4:	26 c0       	rjmp	.+76     	; 0x19f2 <vfprintf+0xf0>
    19a6:	22 60       	ori	r18, 0x02	; 2
    19a8:	24 60       	ori	r18, 0x04	; 4
    19aa:	23 c0       	rjmp	.+70     	; 0x19f2 <vfprintf+0xf0>
    19ac:	28 60       	ori	r18, 0x08	; 8
    19ae:	21 c0       	rjmp	.+66     	; 0x19f2 <vfprintf+0xf0>
    19b0:	27 fd       	sbrc	r18, 7
    19b2:	27 c0       	rjmp	.+78     	; 0x1a02 <vfprintf+0x100>
    19b4:	30 ed       	ldi	r19, 0xD0	; 208
    19b6:	38 0f       	add	r19, r24
    19b8:	3a 30       	cpi	r19, 0x0A	; 10
    19ba:	78 f4       	brcc	.+30     	; 0x19da <vfprintf+0xd8>
    19bc:	26 ff       	sbrs	r18, 6
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0xca>
    19c0:	fa e0       	ldi	r31, 0x0A	; 10
    19c2:	5f 9e       	mul	r5, r31
    19c4:	30 0d       	add	r19, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	53 2e       	mov	r5, r19
    19ca:	13 c0       	rjmp	.+38     	; 0x19f2 <vfprintf+0xf0>
    19cc:	8a e0       	ldi	r24, 0x0A	; 10
    19ce:	38 9e       	mul	r3, r24
    19d0:	30 0d       	add	r19, r0
    19d2:	11 24       	eor	r1, r1
    19d4:	33 2e       	mov	r3, r19
    19d6:	20 62       	ori	r18, 0x20	; 32
    19d8:	0c c0       	rjmp	.+24     	; 0x19f2 <vfprintf+0xf0>
    19da:	8e 32       	cpi	r24, 0x2E	; 46
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <vfprintf+0xe4>
    19de:	26 fd       	sbrc	r18, 6
    19e0:	5f c1       	rjmp	.+702    	; 0x1ca0 <vfprintf+0x39e>
    19e2:	20 64       	ori	r18, 0x40	; 64
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <vfprintf+0xf0>
    19e6:	8c 36       	cpi	r24, 0x6C	; 108
    19e8:	11 f4       	brne	.+4      	; 0x19ee <vfprintf+0xec>
    19ea:	20 68       	ori	r18, 0x80	; 128
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0xf0>
    19ee:	88 36       	cpi	r24, 0x68	; 104
    19f0:	41 f4       	brne	.+16     	; 0x1a02 <vfprintf+0x100>
    19f2:	f6 01       	movw	r30, r12
    19f4:	93 fd       	sbrc	r25, 3
    19f6:	85 91       	lpm	r24, Z+
    19f8:	93 ff       	sbrs	r25, 3
    19fa:	81 91       	ld	r24, Z+
    19fc:	6f 01       	movw	r12, r30
    19fe:	81 11       	cpse	r24, r1
    1a00:	c1 cf       	rjmp	.-126    	; 0x1984 <vfprintf+0x82>
    1a02:	98 2f       	mov	r25, r24
    1a04:	9f 7d       	andi	r25, 0xDF	; 223
    1a06:	95 54       	subi	r25, 0x45	; 69
    1a08:	93 30       	cpi	r25, 0x03	; 3
    1a0a:	28 f4       	brcc	.+10     	; 0x1a16 <vfprintf+0x114>
    1a0c:	0c 5f       	subi	r16, 0xFC	; 252
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	ff e3       	ldi	r31, 0x3F	; 63
    1a12:	f9 83       	std	Y+1, r31	; 0x01
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <vfprintf+0x12e>
    1a16:	83 36       	cpi	r24, 0x63	; 99
    1a18:	31 f0       	breq	.+12     	; 0x1a26 <vfprintf+0x124>
    1a1a:	83 37       	cpi	r24, 0x73	; 115
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <vfprintf+0x138>
    1a1e:	83 35       	cpi	r24, 0x53	; 83
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <vfprintf+0x122>
    1a22:	57 c0       	rjmp	.+174    	; 0x1ad2 <vfprintf+0x1d0>
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <vfprintf+0x166>
    1a26:	f8 01       	movw	r30, r16
    1a28:	80 81       	ld	r24, Z
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	0e 5f       	subi	r16, 0xFE	; 254
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	44 24       	eor	r4, r4
    1a32:	43 94       	inc	r4
    1a34:	51 2c       	mov	r5, r1
    1a36:	54 01       	movw	r10, r8
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <vfprintf+0x160>
    1a3a:	38 01       	movw	r6, r16
    1a3c:	f2 e0       	ldi	r31, 0x02	; 2
    1a3e:	6f 0e       	add	r6, r31
    1a40:	71 1c       	adc	r7, r1
    1a42:	f8 01       	movw	r30, r16
    1a44:	a0 80       	ld	r10, Z
    1a46:	b1 80       	ldd	r11, Z+1	; 0x01
    1a48:	26 ff       	sbrs	r18, 6
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <vfprintf+0x150>
    1a4c:	65 2d       	mov	r22, r5
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <vfprintf+0x154>
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	7f ef       	ldi	r23, 0xFF	; 255
    1a56:	c5 01       	movw	r24, r10
    1a58:	2c 87       	std	Y+12, r18	; 0x0c
    1a5a:	4c d1       	rcall	.+664    	; 0x1cf4 <strnlen>
    1a5c:	2c 01       	movw	r4, r24
    1a5e:	83 01       	movw	r16, r6
    1a60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a62:	2f 77       	andi	r18, 0x7F	; 127
    1a64:	22 2e       	mov	r2, r18
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <vfprintf+0x192>
    1a68:	38 01       	movw	r6, r16
    1a6a:	f2 e0       	ldi	r31, 0x02	; 2
    1a6c:	6f 0e       	add	r6, r31
    1a6e:	71 1c       	adc	r7, r1
    1a70:	f8 01       	movw	r30, r16
    1a72:	a0 80       	ld	r10, Z
    1a74:	b1 80       	ldd	r11, Z+1	; 0x01
    1a76:	26 ff       	sbrs	r18, 6
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <vfprintf+0x17e>
    1a7a:	65 2d       	mov	r22, r5
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0x182>
    1a80:	6f ef       	ldi	r22, 0xFF	; 255
    1a82:	7f ef       	ldi	r23, 0xFF	; 255
    1a84:	c5 01       	movw	r24, r10
    1a86:	2c 87       	std	Y+12, r18	; 0x0c
    1a88:	2a d1       	rcall	.+596    	; 0x1cde <strnlen_P>
    1a8a:	2c 01       	movw	r4, r24
    1a8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a8e:	20 68       	ori	r18, 0x80	; 128
    1a90:	22 2e       	mov	r2, r18
    1a92:	83 01       	movw	r16, r6
    1a94:	23 fc       	sbrc	r2, 3
    1a96:	19 c0       	rjmp	.+50     	; 0x1aca <vfprintf+0x1c8>
    1a98:	83 2d       	mov	r24, r3
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	48 16       	cp	r4, r24
    1a9e:	59 06       	cpc	r5, r25
    1aa0:	a0 f4       	brcc	.+40     	; 0x1aca <vfprintf+0x1c8>
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	80 e2       	ldi	r24, 0x20	; 32
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	30 d1       	rcall	.+608    	; 0x1d0a <fputc>
    1aaa:	3a 94       	dec	r3
    1aac:	f5 cf       	rjmp	.-22     	; 0x1a98 <vfprintf+0x196>
    1aae:	f5 01       	movw	r30, r10
    1ab0:	27 fc       	sbrc	r2, 7
    1ab2:	85 91       	lpm	r24, Z+
    1ab4:	27 fe       	sbrs	r2, 7
    1ab6:	81 91       	ld	r24, Z+
    1ab8:	5f 01       	movw	r10, r30
    1aba:	b7 01       	movw	r22, r14
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	25 d1       	rcall	.+586    	; 0x1d0a <fputc>
    1ac0:	31 10       	cpse	r3, r1
    1ac2:	3a 94       	dec	r3
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	4f 1a       	sub	r4, r31
    1ac8:	51 08       	sbc	r5, r1
    1aca:	41 14       	cp	r4, r1
    1acc:	51 04       	cpc	r5, r1
    1ace:	79 f7       	brne	.-34     	; 0x1aae <vfprintf+0x1ac>
    1ad0:	de c0       	rjmp	.+444    	; 0x1c8e <vfprintf+0x38c>
    1ad2:	84 36       	cpi	r24, 0x64	; 100
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <vfprintf+0x1d8>
    1ad6:	89 36       	cpi	r24, 0x69	; 105
    1ad8:	31 f5       	brne	.+76     	; 0x1b26 <vfprintf+0x224>
    1ada:	f8 01       	movw	r30, r16
    1adc:	27 ff       	sbrs	r18, 7
    1ade:	07 c0       	rjmp	.+14     	; 0x1aee <vfprintf+0x1ec>
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	0c 5f       	subi	r16, 0xFC	; 252
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <vfprintf+0x1fc>
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	88 27       	eor	r24, r24
    1af4:	77 fd       	sbrc	r23, 7
    1af6:	80 95       	com	r24
    1af8:	98 2f       	mov	r25, r24
    1afa:	0e 5f       	subi	r16, 0xFE	; 254
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	2f 76       	andi	r18, 0x6F	; 111
    1b00:	b2 2e       	mov	r11, r18
    1b02:	97 ff       	sbrs	r25, 7
    1b04:	09 c0       	rjmp	.+18     	; 0x1b18 <vfprintf+0x216>
    1b06:	90 95       	com	r25
    1b08:	80 95       	com	r24
    1b0a:	70 95       	com	r23
    1b0c:	61 95       	neg	r22
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	8f 4f       	sbci	r24, 0xFF	; 255
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	20 68       	ori	r18, 0x80	; 128
    1b16:	b2 2e       	mov	r11, r18
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	a4 01       	movw	r20, r8
    1b1e:	27 d1       	rcall	.+590    	; 0x1d6e <__ultoa_invert>
    1b20:	a8 2e       	mov	r10, r24
    1b22:	a8 18       	sub	r10, r8
    1b24:	43 c0       	rjmp	.+134    	; 0x1bac <vfprintf+0x2aa>
    1b26:	85 37       	cpi	r24, 0x75	; 117
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <vfprintf+0x232>
    1b2a:	2f 7e       	andi	r18, 0xEF	; 239
    1b2c:	b2 2e       	mov	r11, r18
    1b2e:	2a e0       	ldi	r18, 0x0A	; 10
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	25 c0       	rjmp	.+74     	; 0x1b7e <vfprintf+0x27c>
    1b34:	f2 2f       	mov	r31, r18
    1b36:	f9 7f       	andi	r31, 0xF9	; 249
    1b38:	bf 2e       	mov	r11, r31
    1b3a:	8f 36       	cpi	r24, 0x6F	; 111
    1b3c:	c1 f0       	breq	.+48     	; 0x1b6e <vfprintf+0x26c>
    1b3e:	18 f4       	brcc	.+6      	; 0x1b46 <vfprintf+0x244>
    1b40:	88 35       	cpi	r24, 0x58	; 88
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <vfprintf+0x260>
    1b44:	ad c0       	rjmp	.+346    	; 0x1ca0 <vfprintf+0x39e>
    1b46:	80 37       	cpi	r24, 0x70	; 112
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <vfprintf+0x24e>
    1b4a:	88 37       	cpi	r24, 0x78	; 120
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <vfprintf+0x254>
    1b4e:	a8 c0       	rjmp	.+336    	; 0x1ca0 <vfprintf+0x39e>
    1b50:	2f 2f       	mov	r18, r31
    1b52:	20 61       	ori	r18, 0x10	; 16
    1b54:	b2 2e       	mov	r11, r18
    1b56:	b4 fe       	sbrs	r11, 4
    1b58:	0d c0       	rjmp	.+26     	; 0x1b74 <vfprintf+0x272>
    1b5a:	8b 2d       	mov	r24, r11
    1b5c:	84 60       	ori	r24, 0x04	; 4
    1b5e:	b8 2e       	mov	r11, r24
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <vfprintf+0x272>
    1b62:	24 ff       	sbrs	r18, 4
    1b64:	0a c0       	rjmp	.+20     	; 0x1b7a <vfprintf+0x278>
    1b66:	9f 2f       	mov	r25, r31
    1b68:	96 60       	ori	r25, 0x06	; 6
    1b6a:	b9 2e       	mov	r11, r25
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <vfprintf+0x278>
    1b6e:	28 e0       	ldi	r18, 0x08	; 8
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <vfprintf+0x27c>
    1b74:	20 e1       	ldi	r18, 0x10	; 16
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x27c>
    1b7a:	20 e1       	ldi	r18, 0x10	; 16
    1b7c:	32 e0       	ldi	r19, 0x02	; 2
    1b7e:	f8 01       	movw	r30, r16
    1b80:	b7 fe       	sbrs	r11, 7
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <vfprintf+0x290>
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0c 5f       	subi	r16, 0xFC	; 252
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <vfprintf+0x29c>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 5f       	subi	r16, 0xFE	; 254
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	a4 01       	movw	r20, r8
    1ba0:	e6 d0       	rcall	.+460    	; 0x1d6e <__ultoa_invert>
    1ba2:	a8 2e       	mov	r10, r24
    1ba4:	a8 18       	sub	r10, r8
    1ba6:	fb 2d       	mov	r31, r11
    1ba8:	ff 77       	andi	r31, 0x7F	; 127
    1baa:	bf 2e       	mov	r11, r31
    1bac:	b6 fe       	sbrs	r11, 6
    1bae:	0b c0       	rjmp	.+22     	; 0x1bc6 <vfprintf+0x2c4>
    1bb0:	2b 2d       	mov	r18, r11
    1bb2:	2e 7f       	andi	r18, 0xFE	; 254
    1bb4:	a5 14       	cp	r10, r5
    1bb6:	50 f4       	brcc	.+20     	; 0x1bcc <vfprintf+0x2ca>
    1bb8:	b4 fe       	sbrs	r11, 4
    1bba:	0a c0       	rjmp	.+20     	; 0x1bd0 <vfprintf+0x2ce>
    1bbc:	b2 fc       	sbrc	r11, 2
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <vfprintf+0x2ce>
    1bc0:	2b 2d       	mov	r18, r11
    1bc2:	2e 7e       	andi	r18, 0xEE	; 238
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <vfprintf+0x2ce>
    1bc6:	7a 2c       	mov	r7, r10
    1bc8:	2b 2d       	mov	r18, r11
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <vfprintf+0x2d0>
    1bcc:	7a 2c       	mov	r7, r10
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <vfprintf+0x2d0>
    1bd0:	75 2c       	mov	r7, r5
    1bd2:	24 ff       	sbrs	r18, 4
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <vfprintf+0x2ee>
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ea 0d       	add	r30, r10
    1bda:	f1 1d       	adc	r31, r1
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 33       	cpi	r24, 0x30	; 48
    1be0:	11 f4       	brne	.+4      	; 0x1be6 <vfprintf+0x2e4>
    1be2:	29 7e       	andi	r18, 0xE9	; 233
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <vfprintf+0x2f6>
    1be6:	22 ff       	sbrs	r18, 2
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <vfprintf+0x2f4>
    1bea:	73 94       	inc	r7
    1bec:	73 94       	inc	r7
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <vfprintf+0x2f6>
    1bf0:	82 2f       	mov	r24, r18
    1bf2:	86 78       	andi	r24, 0x86	; 134
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <vfprintf+0x2f6>
    1bf6:	73 94       	inc	r7
    1bf8:	23 fd       	sbrc	r18, 3
    1bfa:	12 c0       	rjmp	.+36     	; 0x1c20 <vfprintf+0x31e>
    1bfc:	20 ff       	sbrs	r18, 0
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <vfprintf+0x30a>
    1c00:	5a 2c       	mov	r5, r10
    1c02:	73 14       	cp	r7, r3
    1c04:	18 f4       	brcc	.+6      	; 0x1c0c <vfprintf+0x30a>
    1c06:	53 0c       	add	r5, r3
    1c08:	57 18       	sub	r5, r7
    1c0a:	73 2c       	mov	r7, r3
    1c0c:	73 14       	cp	r7, r3
    1c0e:	60 f4       	brcc	.+24     	; 0x1c28 <vfprintf+0x326>
    1c10:	b7 01       	movw	r22, r14
    1c12:	80 e2       	ldi	r24, 0x20	; 32
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	2c 87       	std	Y+12, r18	; 0x0c
    1c18:	78 d0       	rcall	.+240    	; 0x1d0a <fputc>
    1c1a:	73 94       	inc	r7
    1c1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c1e:	f6 cf       	rjmp	.-20     	; 0x1c0c <vfprintf+0x30a>
    1c20:	73 14       	cp	r7, r3
    1c22:	10 f4       	brcc	.+4      	; 0x1c28 <vfprintf+0x326>
    1c24:	37 18       	sub	r3, r7
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <vfprintf+0x328>
    1c28:	31 2c       	mov	r3, r1
    1c2a:	24 ff       	sbrs	r18, 4
    1c2c:	11 c0       	rjmp	.+34     	; 0x1c50 <vfprintf+0x34e>
    1c2e:	b7 01       	movw	r22, r14
    1c30:	80 e3       	ldi	r24, 0x30	; 48
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	2c 87       	std	Y+12, r18	; 0x0c
    1c36:	69 d0       	rcall	.+210    	; 0x1d0a <fputc>
    1c38:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c3a:	22 ff       	sbrs	r18, 2
    1c3c:	16 c0       	rjmp	.+44     	; 0x1c6a <vfprintf+0x368>
    1c3e:	21 ff       	sbrs	r18, 1
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <vfprintf+0x346>
    1c42:	88 e5       	ldi	r24, 0x58	; 88
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <vfprintf+0x34a>
    1c48:	88 e7       	ldi	r24, 0x78	; 120
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	b7 01       	movw	r22, r14
    1c4e:	0c c0       	rjmp	.+24     	; 0x1c68 <vfprintf+0x366>
    1c50:	82 2f       	mov	r24, r18
    1c52:	86 78       	andi	r24, 0x86	; 134
    1c54:	51 f0       	breq	.+20     	; 0x1c6a <vfprintf+0x368>
    1c56:	21 fd       	sbrc	r18, 1
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <vfprintf+0x35c>
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <vfprintf+0x35e>
    1c5e:	8b e2       	ldi	r24, 0x2B	; 43
    1c60:	27 fd       	sbrc	r18, 7
    1c62:	8d e2       	ldi	r24, 0x2D	; 45
    1c64:	b7 01       	movw	r22, r14
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	50 d0       	rcall	.+160    	; 0x1d0a <fputc>
    1c6a:	a5 14       	cp	r10, r5
    1c6c:	30 f4       	brcc	.+12     	; 0x1c7a <vfprintf+0x378>
    1c6e:	b7 01       	movw	r22, r14
    1c70:	80 e3       	ldi	r24, 0x30	; 48
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	4a d0       	rcall	.+148    	; 0x1d0a <fputc>
    1c76:	5a 94       	dec	r5
    1c78:	f8 cf       	rjmp	.-16     	; 0x1c6a <vfprintf+0x368>
    1c7a:	aa 94       	dec	r10
    1c7c:	f4 01       	movw	r30, r8
    1c7e:	ea 0d       	add	r30, r10
    1c80:	f1 1d       	adc	r31, r1
    1c82:	80 81       	ld	r24, Z
    1c84:	b7 01       	movw	r22, r14
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	40 d0       	rcall	.+128    	; 0x1d0a <fputc>
    1c8a:	a1 10       	cpse	r10, r1
    1c8c:	f6 cf       	rjmp	.-20     	; 0x1c7a <vfprintf+0x378>
    1c8e:	33 20       	and	r3, r3
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <vfprintf+0x392>
    1c92:	5d ce       	rjmp	.-838    	; 0x194e <vfprintf+0x4c>
    1c94:	b7 01       	movw	r22, r14
    1c96:	80 e2       	ldi	r24, 0x20	; 32
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	37 d0       	rcall	.+110    	; 0x1d0a <fputc>
    1c9c:	3a 94       	dec	r3
    1c9e:	f7 cf       	rjmp	.-18     	; 0x1c8e <vfprintf+0x38c>
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	86 81       	ldd	r24, Z+6	; 0x06
    1ca4:	97 81       	ldd	r25, Z+7	; 0x07
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x3aa>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	2c 96       	adiw	r28, 0x0c	; 12
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	7f 90       	pop	r7
    1cd2:	6f 90       	pop	r6
    1cd4:	5f 90       	pop	r5
    1cd6:	4f 90       	pop	r4
    1cd8:	3f 90       	pop	r3
    1cda:	2f 90       	pop	r2
    1cdc:	08 95       	ret

00001cde <strnlen_P>:
    1cde:	fc 01       	movw	r30, r24
    1ce0:	05 90       	lpm	r0, Z+
    1ce2:	61 50       	subi	r22, 0x01	; 1
    1ce4:	70 40       	sbci	r23, 0x00	; 0
    1ce6:	01 10       	cpse	r0, r1
    1ce8:	d8 f7       	brcc	.-10     	; 0x1ce0 <strnlen_P+0x2>
    1cea:	80 95       	com	r24
    1cec:	90 95       	com	r25
    1cee:	8e 0f       	add	r24, r30
    1cf0:	9f 1f       	adc	r25, r31
    1cf2:	08 95       	ret

00001cf4 <strnlen>:
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	61 50       	subi	r22, 0x01	; 1
    1cf8:	70 40       	sbci	r23, 0x00	; 0
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	01 10       	cpse	r0, r1
    1cfe:	d8 f7       	brcc	.-10     	; 0x1cf6 <strnlen+0x2>
    1d00:	80 95       	com	r24
    1d02:	90 95       	com	r25
    1d04:	8e 0f       	add	r24, r30
    1d06:	9f 1f       	adc	r25, r31
    1d08:	08 95       	ret

00001d0a <fputc>:
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	18 2f       	mov	r17, r24
    1d14:	09 2f       	mov	r16, r25
    1d16:	eb 01       	movw	r28, r22
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	81 fd       	sbrc	r24, 1
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <fputc+0x1a>
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	9f ef       	ldi	r25, 0xFF	; 255
    1d22:	20 c0       	rjmp	.+64     	; 0x1d64 <fputc+0x5a>
    1d24:	82 ff       	sbrs	r24, 2
    1d26:	10 c0       	rjmp	.+32     	; 0x1d48 <fputc+0x3e>
    1d28:	4e 81       	ldd	r20, Y+6	; 0x06
    1d2a:	5f 81       	ldd	r21, Y+7	; 0x07
    1d2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d30:	42 17       	cp	r20, r18
    1d32:	53 07       	cpc	r21, r19
    1d34:	7c f4       	brge	.+30     	; 0x1d54 <fputc+0x4a>
    1d36:	e8 81       	ld	r30, Y
    1d38:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3a:	9f 01       	movw	r18, r30
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	39 83       	std	Y+1, r19	; 0x01
    1d42:	28 83       	st	Y, r18
    1d44:	10 83       	st	Z, r17
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <fputc+0x4a>
    1d48:	e8 85       	ldd	r30, Y+8	; 0x08
    1d4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1d4c:	81 2f       	mov	r24, r17
    1d4e:	09 95       	icall
    1d50:	89 2b       	or	r24, r25
    1d52:	29 f7       	brne	.-54     	; 0x1d1e <fputc+0x14>
    1d54:	2e 81       	ldd	r18, Y+6	; 0x06
    1d56:	3f 81       	ldd	r19, Y+7	; 0x07
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	3f 83       	std	Y+7, r19	; 0x07
    1d5e:	2e 83       	std	Y+6, r18	; 0x06
    1d60:	81 2f       	mov	r24, r17
    1d62:	90 2f       	mov	r25, r16
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <__ultoa_invert>:
    1d6e:	fa 01       	movw	r30, r20
    1d70:	aa 27       	eor	r26, r26
    1d72:	28 30       	cpi	r18, 0x08	; 8
    1d74:	51 f1       	breq	.+84     	; 0x1dca <__ultoa_invert+0x5c>
    1d76:	20 31       	cpi	r18, 0x10	; 16
    1d78:	81 f1       	breq	.+96     	; 0x1dda <__ultoa_invert+0x6c>
    1d7a:	e8 94       	clt
    1d7c:	6f 93       	push	r22
    1d7e:	6e 7f       	andi	r22, 0xFE	; 254
    1d80:	6e 5f       	subi	r22, 0xFE	; 254
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	8f 4f       	sbci	r24, 0xFF	; 255
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	af 4f       	sbci	r26, 0xFF	; 255
    1d8a:	b1 e0       	ldi	r27, 0x01	; 1
    1d8c:	3e d0       	rcall	.+124    	; 0x1e0a <__ultoa_invert+0x9c>
    1d8e:	b4 e0       	ldi	r27, 0x04	; 4
    1d90:	3c d0       	rcall	.+120    	; 0x1e0a <__ultoa_invert+0x9c>
    1d92:	67 0f       	add	r22, r23
    1d94:	78 1f       	adc	r23, r24
    1d96:	89 1f       	adc	r24, r25
    1d98:	9a 1f       	adc	r25, r26
    1d9a:	a1 1d       	adc	r26, r1
    1d9c:	68 0f       	add	r22, r24
    1d9e:	79 1f       	adc	r23, r25
    1da0:	8a 1f       	adc	r24, r26
    1da2:	91 1d       	adc	r25, r1
    1da4:	a1 1d       	adc	r26, r1
    1da6:	6a 0f       	add	r22, r26
    1da8:	71 1d       	adc	r23, r1
    1daa:	81 1d       	adc	r24, r1
    1dac:	91 1d       	adc	r25, r1
    1dae:	a1 1d       	adc	r26, r1
    1db0:	20 d0       	rcall	.+64     	; 0x1df2 <__ultoa_invert+0x84>
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__ultoa_invert+0x48>
    1db4:	68 94       	set
    1db6:	3f 91       	pop	r19
    1db8:	2a e0       	ldi	r18, 0x0A	; 10
    1dba:	26 9f       	mul	r18, r22
    1dbc:	11 24       	eor	r1, r1
    1dbe:	30 19       	sub	r19, r0
    1dc0:	30 5d       	subi	r19, 0xD0	; 208
    1dc2:	31 93       	st	Z+, r19
    1dc4:	de f6       	brtc	.-74     	; 0x1d7c <__ultoa_invert+0xe>
    1dc6:	cf 01       	movw	r24, r30
    1dc8:	08 95       	ret
    1dca:	46 2f       	mov	r20, r22
    1dcc:	47 70       	andi	r20, 0x07	; 7
    1dce:	40 5d       	subi	r20, 0xD0	; 208
    1dd0:	41 93       	st	Z+, r20
    1dd2:	b3 e0       	ldi	r27, 0x03	; 3
    1dd4:	0f d0       	rcall	.+30     	; 0x1df4 <__ultoa_invert+0x86>
    1dd6:	c9 f7       	brne	.-14     	; 0x1dca <__ultoa_invert+0x5c>
    1dd8:	f6 cf       	rjmp	.-20     	; 0x1dc6 <__ultoa_invert+0x58>
    1dda:	46 2f       	mov	r20, r22
    1ddc:	4f 70       	andi	r20, 0x0F	; 15
    1dde:	40 5d       	subi	r20, 0xD0	; 208
    1de0:	4a 33       	cpi	r20, 0x3A	; 58
    1de2:	18 f0       	brcs	.+6      	; 0x1dea <__ultoa_invert+0x7c>
    1de4:	49 5d       	subi	r20, 0xD9	; 217
    1de6:	31 fd       	sbrc	r19, 1
    1de8:	40 52       	subi	r20, 0x20	; 32
    1dea:	41 93       	st	Z+, r20
    1dec:	02 d0       	rcall	.+4      	; 0x1df2 <__ultoa_invert+0x84>
    1dee:	a9 f7       	brne	.-22     	; 0x1dda <__ultoa_invert+0x6c>
    1df0:	ea cf       	rjmp	.-44     	; 0x1dc6 <__ultoa_invert+0x58>
    1df2:	b4 e0       	ldi	r27, 0x04	; 4
    1df4:	a6 95       	lsr	r26
    1df6:	97 95       	ror	r25
    1df8:	87 95       	ror	r24
    1dfa:	77 95       	ror	r23
    1dfc:	67 95       	ror	r22
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0x86>
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	61 05       	cpc	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	08 95       	ret
    1e0a:	9b 01       	movw	r18, r22
    1e0c:	ac 01       	movw	r20, r24
    1e0e:	0a 2e       	mov	r0, r26
    1e10:	06 94       	lsr	r0
    1e12:	57 95       	ror	r21
    1e14:	47 95       	ror	r20
    1e16:	37 95       	ror	r19
    1e18:	27 95       	ror	r18
    1e1a:	ba 95       	dec	r27
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__ultoa_invert+0xa2>
    1e1e:	62 0f       	add	r22, r18
    1e20:	73 1f       	adc	r23, r19
    1e22:	84 1f       	adc	r24, r20
    1e24:	95 1f       	adc	r25, r21
    1e26:	a0 1d       	adc	r26, r0
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>

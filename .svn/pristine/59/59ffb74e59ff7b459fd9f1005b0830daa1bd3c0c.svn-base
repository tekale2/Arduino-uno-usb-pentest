
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001984  00001a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800118  00800118  00001a30  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b0  00000000  00000000  00005313  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000584a  00000000  00000000  000056c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a52  00000000  00000000  0000af0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002687  00000000  00000000  0000c95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009fc  00000000  00000000  0000efe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002650  00000000  00000000  0000f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e53  00000000  00000000  00012034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e8  00000000  00000000  00015e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
       2:	00 00       	nop
       4:	5c c1       	rjmp	.+696    	; 0x2be <__bad_interrupt>
       6:	00 00       	nop
       8:	5a c1       	rjmp	.+692    	; 0x2be <__bad_interrupt>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c1       	rjmp	.+684    	; 0x2be <__bad_interrupt>
      12:	00 00       	nop
      14:	54 c1       	rjmp	.+680    	; 0x2be <__bad_interrupt>
      16:	00 00       	nop
      18:	52 c1       	rjmp	.+676    	; 0x2be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	50 c1       	rjmp	.+672    	; 0x2be <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c1       	rjmp	.+668    	; 0x2be <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	fa c6       	rjmp	.+3572   	; 0xe1e <__vector_10>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c1       	rjmp	.+608    	; 0x2be <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	1e c1       	rjmp	.+572    	; 0x2be <__bad_interrupt>
      82:	00 00       	nop
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4592>:
      98:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	0d 0a 00                                            ...

000000cb <__c.4584>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      cb:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      db:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      eb:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      fb:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10b:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     11b:	1b 5b 33 37 6d 00                                   .[37m.

00000121 <__c.4577>:
     121:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     131:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     141:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000150 <__c.4572>:
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     160:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

0000016a <__c.4570>:
				ReportSize     -= 2;
				ReportData     += 2;
     16a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	37 6d 00                                            7m.

000001ad <__c.4568>:
     1ad:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bd:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c7 <__c.4566>:
     1c7:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d7:	69 63 65 2e 0d 0a 00                                ice....

000001de <__c.4564>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1de:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ee:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1fe:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000208 <__c.4561>:
     208:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     218:	61 74 61 2e 0d 0a 00                                ata....

0000021f <__c.4556>:
     21f:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     22f:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23f:	00                                                  .

00000240 <__c.4551>:
     240:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     250:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000025d <__c.4542>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     25d:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     26d:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27d:	33 37 6d 00 00                                      37m..

00000282 <__ctors_end>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     282:	11 24       	eor	r1, r1
				break;
     284:	1f be       	out	0x3f, r1	; 63

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d0 e2       	ldi	r29, 0x20	; 32
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
				break;
     290:	a0 e0       	ldi	r26, 0x00	; 0

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	e4 e8       	ldi	r30, 0x84	; 132
     296:	f9 e1       	ldi	r31, 0x19	; 25
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
				break;
     2a0:	0d 92       	st	X+, r0

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	a8 31       	cpi	r26, 0x18	; 24
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>

000002a8 <__do_clear_bss>:
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	a8 e1       	ldi	r26, 0x18	; 24
				break;
     2ac:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	ab 33       	cpi	r26, 0x3B	; 59
     2b4:	b1 07       	cpc	r27, r17
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	70 d1       	rcall	.+736    	; 0x59a <main>
     2ba:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <_exit>

000002be <__bad_interrupt>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <LEDs_SetAllLEDs>:
     2c0:	9b b1       	in	r25, 0x0b	; 11
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	98 2b       	or	r25, r24
     2c6:	9b b9       	out	0x0b, r25	; 11
     2c8:	08 95       	ret

000002ca <SetupHardware>:
     2ca:	84 b7       	in	r24, 0x34	; 52
				break;
     2cc:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	84 bf       	out	0x34, r24	; 52
     2d0:	88 e1       	ldi	r24, 0x18	; 24
     2d2:	0f b6       	in	r0, 0x3f	; 63
				break;
     2d4:	f8 94       	cli

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	80 93 60 00 	sts	0x0060, r24
     2da:	10 92 60 00 	sts	0x0060, r1

				if (ParserData->UsingReportIDs)
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	80 e8       	ldi	r24, 0x80	; 128
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	80 93 61 00 	sts	0x0061, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	90 93 61 00 	sts	0x0061, r25
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	83 e3       	ldi	r24, 0x33	; 51
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 cd 00 	sts	0x00CD, r25
     2fa:	80 93 cc 00 	sts	0x00CC, r24
     2fe:	86 e0       	ldi	r24, 0x06	; 6
     300:	80 93 ca 00 	sts	0x00CA, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	10 92 c8 00 	sts	0x00C8, r1
     308:	88 e1       	ldi	r24, 0x18	; 24
     30a:	80 93 c9 00 	sts	0x00C9, r24
     30e:	53 9a       	sbi	0x0a, 3	; 10
     310:	5a 9a       	sbi	0x0b, 2	; 11
     312:	8a b1       	in	r24, 0x0a	; 10
     314:	80 6f       	ori	r24, 0xF0	; 240
     316:	8a b9       	out	0x0a, r24	; 10
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	8b b1       	in	r24, 0x0b	; 11
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	8b b9       	out	0x0b, r24	; 11
     31e:	6a 98       	cbi	0x0d, 2	; 13
     320:	72 9a       	sbi	0x0e, 2	; 14
     322:	84 b1       	in	r24, 0x04	; 4
     324:	8f 71       	andi	r24, 0x1F	; 31
     326:	84 b9       	out	0x04, r24	; 4
     328:	8d b1       	in	r24, 0x0d	; 13
     32a:	8f 7c       	andi	r24, 0xCF	; 207
     32c:	8d b9       	out	0x0d, r24	; 13
     32e:	85 b1       	in	r24, 0x05	; 5
     330:	80 6e       	ori	r24, 0xE0	; 224
     332:	85 b9       	out	0x05, r24	; 5
     334:	8e b1       	in	r24, 0x0e	; 14
     336:	80 63       	ori	r24, 0x30	; 48
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	8e b9       	out	0x0e, r24	; 14
     33a:	56 d5       	rcall	.+2732   	; 0xde8 <USB_Init>
     33c:	80 e0       	ldi	r24, 0x00	; 0
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <Serial_CreateStream>

00000344 <EVENT_USB_Host_DeviceAttached>:
     344:	80 e4       	ldi	r24, 0x40	; 64
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 fd 09 	call	0x13fa	; 0x13fa <puts_P>
     34c:	80 ea       	ldi	r24, 0xA0	; 160
     34e:	b8 cf       	rjmp	.-144    	; 0x2c0 <LEDs_SetAllLEDs>

00000350 <EVENT_USB_Host_DeviceUnattached>:
     350:	8f e1       	ldi	r24, 0x1F	; 31
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 fd 09 	call	0x13fa	; 0x13fa <puts_P>
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	b2 cf       	rjmp	.-156    	; 0x2c0 <LEDs_SetAllLEDs>

0000035c <EVENT_USB_Host_DeviceEnumerationComplete>:
     35c:	cf 93       	push	r28
     35e:	88 e0       	ldi	r24, 0x08	; 8
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	0e 94 fd 09 	call	0x13fa	; 0x13fa <puts_P>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     366:	43 d1       	rcall	.+646    	; 0x5ee <ProcessConfigurationDescriptor>
     368:	c8 2f       	mov	r28, r24
     36a:	88 23       	and	r24, r24
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	b9 f0       	breq	.+46     	; 0x39c <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	19 f4       	brne	.+6      	; 0x378 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     372:	8e ed       	ldi	r24, 0xDE	; 222
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	02 c0       	rjmp	.+4      	; 0x37c <EVENT_USB_Host_DeviceEnumerationComplete+0x20>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	87 ec       	ldi	r24, 0xC7	; 199
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <puts_P>
     380:	1f 92       	push	r1
     382:	cf 93       	push	r28
     384:	8d ea       	ldi	r24, 0xAD	; 173
     386:	91 e0       	ldi	r25, 0x01	; 1
				break;
     388:	9f 93       	push	r25

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	8f 93       	push	r24
     38c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <printf_P>
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	0f 90       	pop	r0
     398:	80 e9       	ldi	r24, 0x90	; 144
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	9d d7       	rcall	.+3898   	; 0x12da <USB_Host_SetDeviceConfiguration>
     3a0:	88 23       	and	r24, r24
     3a2:	29 f0       	breq	.+10     	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     3a4:	1f 92       	push	r1
     3a6:	8f 93       	push	r24
     3a8:	8a e6       	ldi	r24, 0x6A	; 106
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	ed cf       	rjmp	.-38     	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     3ae:	80 e5       	ldi	r24, 0x50	; 80
				break;
     3b0:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <puts_P>
     3b6:	80 e6       	ldi	r24, 0x60	; 96
     3b8:	cf 91       	pop	r28
     3ba:	82 cf       	rjmp	.-252    	; 0x2c0 <LEDs_SetAllLEDs>

000003bc <EVENT_USB_Host_HostError>:
     3bc:	cf 93       	push	r28
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	df 93       	push	r29
     3c0:	1f 92       	push	r1
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	a7 d4       	rcall	.+2382   	; 0xd18 <USB_Disable>
     3ca:	1f 92       	push	r1
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	8f 93       	push	r24
     3d0:	81 e2       	ldi	r24, 0x21	; 33
     3d2:	91 e0       	ldi	r25, 0x01	; 1

					while (CurrCollectionPath->Parent != NULL)
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	ed d7       	rcall	.+4058   	; 0x13b4 <printf_P>
     3da:	80 e9       	ldi	r24, 0x90	; 144
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	71 df       	rcall	.-286    	; 0x2c0 <LEDs_SetAllLEDs>
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <EVENT_USB_Host_HostError+0x2a>

000003e8 <EVENT_USB_Host_DeviceEnumerationFailed>:
     3e8:	90 91 26 01 	lds	r25, 0x0126
     3ec:	1f 92       	push	r1
     3ee:	9f 93       	push	r25
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	1f 92       	push	r1
     3f2:	6f 93       	push	r22
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	1f 92       	push	r1
     3f6:	8f 93       	push	r24
     3f8:	8b ec       	ldi	r24, 0xCB	; 203
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	d9 d7       	rcall	.+4018   	; 0x13b4 <printf_P>
     402:	8d b7       	in	r24, 0x3d	; 61
     404:	9e b7       	in	r25, 0x3e	; 62
     406:	08 96       	adiw	r24, 0x08	; 8
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	9e bf       	out	0x3e, r25	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	8d bf       	out	0x3d, r24	; 61
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	80 e9       	ldi	r24, 0x90	; 144
     414:	55 cf       	rjmp	.-342    	; 0x2c0 <LEDs_SetAllLEDs>

00000416 <MIDIHost_Task>:
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <MIDIHost_Task+0x8>
     41e:	00 d0       	rcall	.+0      	; 0x420 <MIDIHost_Task+0xa>

				if (UsageListSize)
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	80 91 26 01 	lds	r24, 0x0126
     428:	8b 30       	cpi	r24, 0x0B	; 11
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	09 f0       	breq	.+2      	; 0x42e <MIDIHost_Task+0x18>
     42c:	ae c0       	rjmp	.+348    	; 0x58a <MIDIHost_Task+0x174>
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 a7 00 	sts	0x00A7, r24
     434:	80 91 a9 00 	lds	r24, 0x00A9
     438:	8f 7b       	andi	r24, 0xBF	; 191
     43a:	80 93 a9 00 	sts	0x00A9, r24
     43e:	80 91 a6 00 	lds	r24, 0x00A6

					for (uint8_t i = 1; i < UsageListSize; i++)
     442:	80 ff       	sbrs	r24, 0
     444:	36 c0       	rjmp	.+108    	; 0x4b2 <MIDIHost_Task+0x9c>
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	64 e0       	ldi	r22, 0x04	; 4
					  UsageList[i - 1] = UsageList[i];
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	6b d3       	rcall	.+1750   	; 0xb2a <Pipe_Read_Stream_LE>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	80 91 f6 00 	lds	r24, 0x00F6
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	90 91 f7 00 	lds	r25, 0x00F7
     45c:	89 2b       	or	r24, r25
     45e:	29 f4       	brne	.+10     	; 0x46a <MIDIHost_Task+0x54>
     460:	80 91 a6 00 	lds	r24, 0x00A6
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     464:	8e 77       	andi	r24, 0x7E	; 126
     466:	80 93 a6 00 	sts	0x00A6, r24
     46a:	29 81       	ldd	r18, Y+1	; 0x01
     46c:	88 ef       	ldi	r24, 0xF8	; 248
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	82 0f       	add	r24, r18
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	f8 f4       	brcc	.+62     	; 0x4b2 <MIDIHost_Task+0x9c>
     474:	5c 81       	ldd	r21, Y+4	; 0x04
     476:	4b 81       	ldd	r20, Y+3	; 0x03
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	8f 70       	andi	r24, 0x0F	; 15
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	29 30       	cpi	r18, 0x09	; 9
     482:	19 f4       	brne	.+6      	; 0x48a <MIDIHost_Task+0x74>
     484:	21 e1       	ldi	r18, 0x11	; 17
     486:	31 e0       	ldi	r19, 0x01	; 1
     488:	02 c0       	rjmp	.+4      	; 0x48e <MIDIHost_Task+0x78>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	24 e1       	ldi	r18, 0x14	; 20
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	1f 92       	push	r1
     490:	5f 93       	push	r21
     492:	1f 92       	push	r1
     494:	4f 93       	push	r20
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	3f 93       	push	r19
     49c:	2f 93       	push	r18
     49e:	88 e9       	ldi	r24, 0x98	; 152
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	86 d7       	rcall	.+3852   	; 0x13b4 <printf_P>
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
				break;
     4ac:	de bf       	out	0x3e, r29	; 62
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	80 91 a9 00 	lds	r24, 0x00A9
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	80 93 a9 00 	sts	0x00A9, r24
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	80 93 a7 00 	sts	0x00A7, r24
     4c2:	80 91 a9 00 	lds	r24, 0x00A9
     4c6:	8f 7b       	andi	r24, 0xBF	; 191
     4c8:	80 93 a9 00 	sts	0x00A9, r24
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cc:	80 91 a6 00 	lds	r24, 0x00A6
     4d0:	82 ff       	sbrs	r24, 2
     4d2:	5b c0       	rjmp	.+182    	; 0x58a <MIDIHost_Task+0x174>
     4d4:	83 b1       	in	r24, 0x03	; 3
     4d6:	1c b1       	in	r17, 0x0c	; 12
     4d8:	10 95       	com	r17
     4da:	10 73       	andi	r17, 0x30	; 48
     4dc:	16 95       	lsr	r17
     4de:	80 95       	com	r24
     4e0:	80 7e       	andi	r24, 0xE0	; 224
     4e2:	18 2b       	or	r17, r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	20 91 18 01 	lds	r18, 0x0118
     4e8:	21 27       	eor	r18, r17
     4ea:	62 99       	sbic	0x0c, 2	; 12
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <MIDIHost_Task+0xdc>
     4ee:	39 e0       	ldi	r19, 0x09	; 9
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <MIDIHost_Task+0xde>
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	26 ff       	sbrs	r18, 6
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <MIDIHost_Task+0xea>
     4f8:	16 ff       	sbrs	r17, 6
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <MIDIHost_Task+0xee>
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <MIDIHost_Task+0xf0>
     500:	80 e0       	ldi	r24, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	01 c0       	rjmp	.+2      	; 0x506 <MIDIHost_Task+0xf0>
     504:	80 e8       	ldi	r24, 0x80	; 128
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	27 ff       	sbrs	r18, 7
     508:	05 c0       	rjmp	.+10     	; 0x514 <MIDIHost_Task+0xfe>
     50a:	9d e3       	ldi	r25, 0x3D	; 61
     50c:	17 ff       	sbrs	r17, 7
     50e:	04 c0       	rjmp	.+8      	; 0x518 <MIDIHost_Task+0x102>
     510:	80 e9       	ldi	r24, 0x90	; 144
     512:	03 c0       	rjmp	.+6      	; 0x51a <MIDIHost_Task+0x104>
     514:	9c e3       	ldi	r25, 0x3C	; 60
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	01 c0       	rjmp	.+2      	; 0x51a <MIDIHost_Task+0x104>
     518:	80 e8       	ldi	r24, 0x80	; 128
     51a:	23 ff       	sbrs	r18, 3
     51c:	06 c0       	rjmp	.+12     	; 0x52a <MIDIHost_Task+0x114>

					if (UsageListSize)
     51e:	9e e3       	ldi	r25, 0x3E	; 62
     520:	13 ff       	sbrs	r17, 3
     522:	02 c0       	rjmp	.+4      	; 0x528 <MIDIHost_Task+0x112>
     524:	80 e9       	ldi	r24, 0x90	; 144
     526:	01 c0       	rjmp	.+2      	; 0x52a <MIDIHost_Task+0x114>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	80 e8       	ldi	r24, 0x80	; 128
     52a:	24 ff       	sbrs	r18, 4
     52c:	06 c0       	rjmp	.+12     	; 0x53a <MIDIHost_Task+0x124>
     52e:	9f e3       	ldi	r25, 0x3F	; 63
     530:	14 ff       	sbrs	r17, 4
     532:	02 c0       	rjmp	.+4      	; 0x538 <MIDIHost_Task+0x122>
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	01 c0       	rjmp	.+2      	; 0x53a <MIDIHost_Task+0x124>
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	25 ff       	sbrs	r18, 5
     53c:	04 c0       	rjmp	.+8      	; 0x546 <MIDIHost_Task+0x130>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	15 ff       	sbrs	r17, 5
     540:	21 c0       	rjmp	.+66     	; 0x584 <MIDIHost_Task+0x16e>
     542:	80 e9       	ldi	r24, 0x90	; 144
     544:	20 c0       	rjmp	.+64     	; 0x586 <MIDIHost_Task+0x170>
     546:	88 23       	and	r24, r24
     548:	a9 f0       	breq	.+42     	; 0x574 <MIDIHost_Task+0x15e>
						  UsageList[i - 1] = UsageList[i];
     54a:	28 2f       	mov	r18, r24
     54c:	22 95       	swap	r18
     54e:	2f 70       	andi	r18, 0x0F	; 15
     550:	29 83       	std	Y+1, r18	; 0x01

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	83 2b       	or	r24, r19
     554:	8a 83       	std	Y+2, r24	; 0x02
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	9b 83       	std	Y+3, r25	; 0x03
     558:	80 e4       	ldi	r24, 0x40	; 64
     55a:	8c 83       	std	Y+4, r24	; 0x04
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	64 e0       	ldi	r22, 0x04	; 4
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 d2       	rcall	.+1318   	; 0xa90 <Pipe_Write_Stream_LE>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	80 91 a6 00 	lds	r24, 0x00A6
     56e:	8b 77       	andi	r24, 0x7B	; 123
     570:	80 93 a6 00 	sts	0x00A6, r24
     574:	80 91 a9 00 	lds	r24, 0x00A9
     578:	80 64       	ori	r24, 0x40	; 64
     57a:	80 93 a9 00 	sts	0x00A9, r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	10 93 18 01 	sts	0x0118, r17
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	03 c0       	rjmp	.+6      	; 0x58a <MIDIHost_Task+0x174>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	9b e3       	ldi	r25, 0x3B	; 59
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	e0 cf       	rjmp	.-64     	; 0x54a <MIDIHost_Task+0x134>
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	08 95       	ret

0000059a <main>:
     59a:	97 de       	rcall	.-722    	; 0x2ca <SetupHardware>
     59c:	8d e5       	ldi	r24, 0x5D	; 93
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	2c d7       	rcall	.+3672   	; 0x13fa <puts_P>
     5a2:	80 e1       	ldi	r24, 0x10	; 16
     5a4:	8d de       	rcall	.-742    	; 0x2c0 <LEDs_SetAllLEDs>
     5a6:	78 94       	sei
     5a8:	36 df       	rcall	.-404    	; 0x416 <MIDIHost_Task>
     5aa:	be d6       	rcall	.+3452   	; 0x1328 <USB_USBTask>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <main+0xe>

000005ae <DComp_NextMIDIStreamingInterface>:
     5ae:	fc 01       	movw	r30, r24
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	84 30       	cpi	r24, 0x04	; 4
     5b4:	51 f4       	brne	.+20     	; 0x5ca <DComp_NextMIDIStreamingInterface+0x1c>
     5b6:	85 81       	ldd	r24, Z+5	; 0x05
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	39 f4       	brne	.+14     	; 0x5ca <DComp_NextMIDIStreamingInterface+0x1c>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	86 81       	ldd	r24, Z+6	; 0x06
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	21 f4       	brne	.+8      	; 0x5ca <DComp_NextMIDIStreamingInterface+0x1c>
     5c2:	87 81       	ldd	r24, Z+7	; 0x07
     5c4:	81 11       	cpse	r24, r1
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <DComp_NextMIDIStreamingInterface+0x1c>
     5c8:	08 95       	ret
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	08 95       	ret

000005ce <DComp_NextMIDIStreamingDataEndpoint>:
     5ce:	fc 01       	movw	r30, r24
     5d0:	21 81       	ldd	r18, Z+1	; 0x01
     5d2:	25 30       	cpi	r18, 0x05	; 5
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <DComp_NextMIDIStreamingDataEndpoint+0x14>
     5d6:	83 81       	ldd	r24, Z+3	; 0x03
     5d8:	83 70       	andi	r24, 0x03	; 3
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	31 f0       	breq	.+12     	; 0x5ea <DComp_NextMIDIStreamingDataEndpoint+0x1c>
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	08 95       	ret
     5e2:	24 30       	cpi	r18, 0x04	; 4
     5e4:	e1 f7       	brne	.-8      	; 0x5de <DComp_NextMIDIStreamingDataEndpoint+0x10>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	08 95       	ret
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret

000005ee <ProcessConfigurationDescriptor>:
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	cf 92       	push	r12

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
					  return HID_PARSE_InsufficientReportItems;
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	c4 50       	subi	r28, 0x04	; 4
     608:	d2 40       	sbci	r29, 0x02	; 2
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	ae 01       	movw	r20, r28
     616:	4f 5f       	subi	r20, 0xFF	; 255
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	cd 5f       	subi	r28, 0xFD	; 253
     61c:	dd 4f       	sbci	r29, 0xFD	; 253
     61e:	59 83       	std	Y+1, r21	; 0x01
     620:	48 83       	st	Y, r20
     622:	c3 50       	subi	r28, 0x03	; 3
     624:	d2 40       	sbci	r29, 0x02	; 2
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	32 e0       	ldi	r19, 0x02	; 2
     62a:	be 01       	movw	r22, r28
     62c:	6f 5f       	subi	r22, 0xFF	; 255
     62e:	7d 4f       	sbci	r23, 0xFD	; 253
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	a4 d4       	rcall	.+2376   	; 0xf7c <USB_Host_GetDeviceConfigDescriptor>
     634:	85 30       	cpi	r24, 0x05	; 5
     636:	09 f4       	brne	.+2      	; 0x63a <ProcessConfigurationDescriptor+0x4c>
     638:	56 c0       	rjmp	.+172    	; 0x6e6 <ProcessConfigurationDescriptor+0xf8>
     63a:	86 30       	cpi	r24, 0x06	; 6
     63c:	21 f0       	breq	.+8      	; 0x646 <ProcessConfigurationDescriptor+0x58>
     63e:	88 23       	and	r24, r24
     640:	21 f0       	breq	.+8      	; 0x64a <ProcessConfigurationDescriptor+0x5c>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	53 c0       	rjmp	.+166    	; 0x6ec <ProcessConfigurationDescriptor+0xfe>
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	51 c0       	rjmp	.+162    	; 0x6ec <ProcessConfigurationDescriptor+0xfe>
     64a:	a1 2c       	mov	r10, r1
     64c:	b1 2c       	mov	r11, r1
     64e:	c1 2c       	mov	r12, r1
     650:	d1 2c       	mov	r13, r1
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	01 15       	cp	r16, r1
     658:	11 05       	cpc	r17, r1
     65a:	b9 f4       	brne	.+46     	; 0x68a <ProcessConfigurationDescriptor+0x9c>
     65c:	47 ed       	ldi	r20, 0xD7	; 215
     65e:	52 e0       	ldi	r21, 0x02	; 2
     660:	be 01       	movw	r22, r28
     662:	6d 5f       	subi	r22, 0xFD	; 253
     664:	7d 4f       	sbci	r23, 0xFD	; 253
     666:	ce 01       	movw	r24, r28
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	9d 4f       	sbci	r25, 0xFD	; 253
     66c:	e1 d4       	rcall	.+2498   	; 0x1030 <USB_GetNextDescriptorComp>
     66e:	81 11       	cpse	r24, r1
     670:	3c c0       	rjmp	.+120    	; 0x6ea <ProcessConfigurationDescriptor+0xfc>
     672:	cd 5f       	subi	r28, 0xFD	; 253
     674:	dd 4f       	sbci	r29, 0xFD	; 253
     676:	08 81       	ld	r16, Y
     678:	19 81       	ldd	r17, Y+1	; 0x01
     67a:	c3 50       	subi	r28, 0x03	; 3
     67c:	d2 40       	sbci	r29, 0x02	; 2
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	e1 2c       	mov	r14, r1
     684:	f1 2c       	mov	r15, r1
     686:	57 01       	movw	r10, r14
					  ParserData->TotalReportItems++;
     688:	e6 cf       	rjmp	.-52     	; 0x656 <ProcessConfigurationDescriptor+0x68>
     68a:	47 ee       	ldi	r20, 0xE7	; 231
     68c:	52 e0       	ldi	r21, 0x02	; 2
     68e:	be 01       	movw	r22, r28
     690:	6d 5f       	subi	r22, 0xFD	; 253

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	7d 4f       	sbci	r23, 0xFD	; 253
     694:	ce 01       	movw	r24, r28
     696:	8f 5f       	subi	r24, 0xFF	; 255
     698:	9d 4f       	sbci	r25, 0xFD	; 253
     69a:	ca d4       	rcall	.+2452   	; 0x1030 <USB_GetNextDescriptorComp>
     69c:	81 11       	cpse	r24, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	de cf       	rjmp	.-68     	; 0x65c <ProcessConfigurationDescriptor+0x6e>
     6a0:	cd 5f       	subi	r28, 0xFD	; 253
     6a2:	dd 4f       	sbci	r29, 0xFD	; 253
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	e8 80       	ld	r14, Y
     6a6:	f9 80       	ldd	r15, Y+1	; 0x01
     6a8:	c3 50       	subi	r28, 0x03	; 3
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	d2 40       	sbci	r29, 0x02	; 2
     6ac:	f7 01       	movw	r30, r14
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	87 ff       	sbrs	r24, 7
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <ProcessConfigurationDescriptor+0xca>
     6b4:	67 01       	movw	r12, r14
     6b6:	75 01       	movw	r14, r10
     6b8:	c1 14       	cp	r12, r1
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	d1 04       	cpc	r13, r1
     6bc:	21 f3       	breq	.-56     	; 0x686 <ProcessConfigurationDescriptor+0x98>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	e1 14       	cp	r14, r1
     6c0:	f1 04       	cpc	r15, r1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	09 f3       	breq	.-62     	; 0x686 <ProcessConfigurationDescriptor+0x98>
     6c4:	f6 01       	movw	r30, r12
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	24 81       	ldd	r18, Z+4	; 0x04
     6c8:	35 81       	ldd	r19, Z+5	; 0x05
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	01 e0       	ldi	r16, 0x01	; 1
     6cc:	42 81       	ldd	r20, Z+2	; 0x02

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	62 e0       	ldi	r22, 0x02	; 2
     6d0:	81 e8       	ldi	r24, 0x81	; 129
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	78 d2       	rcall	.+1264   	; 0xbc4 <Pipe_ConfigurePipe>
     6d4:	f7 01       	movw	r30, r14
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	24 81       	ldd	r18, Z+4	; 0x04

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	35 81       	ldd	r19, Z+5	; 0x05
     6da:	42 81       	ldd	r20, Z+2	; 0x02
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	71 d2       	rcall	.+1250   	; 0xbc4 <Pipe_ConfigurePipe>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <ProcessConfigurationDescriptor+0xfe>
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <ProcessConfigurationDescriptor+0xfe>
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	cc 5f       	subi	r28, 0xFC	; 252
     6ee:	dd 4f       	sbci	r29, 0xFD	; 253
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     70c:	af 90       	pop	r10
     70e:	08 95       	ret

00000710 <USB_Host_ResetDevice>:
     710:	80 91 9e 00 	lds	r24, 0x009E
     714:	81 70       	andi	r24, 0x01	; 1
     716:	90 91 a0 00 	lds	r25, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     71a:	9d 7f       	andi	r25, 0xFD	; 253
     71c:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     720:	90 91 9e 00 	lds	r25, 0x009E
     724:	92 60       	ori	r25, 0x02	; 2
     726:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     72a:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     72e:	91 fd       	sbrc	r25, 1
     730:	fc cf       	rjmp	.-8      	; 0x72a <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     732:	90 91 9e 00 	lds	r25, 0x009E
     736:	91 60       	ori	r25, 0x01	; 1
     738:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     73c:	10 92 1c 01 	sts	0x011C, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     740:	90 91 a0 00 	lds	r25, 0x00A0
     744:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     746:	20 91 a0 00 	lds	r18, 0x00A0
     74a:	2f 7d       	andi	r18, 0xDF	; 223
     74c:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     750:	20 91 9f 00 	lds	r18, 0x009F
     754:	2f 7d       	andi	r18, 0xDF	; 223
     756:	20 93 9f 00 	sts	0x009F, r18
     75a:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     75c:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     760:	35 ff       	sbrs	r19, 5
     762:	0b c0       	rjmp	.+22     	; 0x77a <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     764:	20 91 9f 00 	lds	r18, 0x009F
     768:	2f 7d       	andi	r18, 0xDF	; 223
     76a:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     76e:	20 91 9f 00 	lds	r18, 0x009F
     772:	2d 7f       	andi	r18, 0xFD	; 253
     774:	20 93 9f 00 	sts	0x009F, r18
     778:	08 c0       	rjmp	.+16     	; 0x78a <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77a:	ef ec       	ldi	r30, 0xCF	; 207
     77c:	f7 e0       	ldi	r31, 0x07	; 7
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <USB_Host_ResetDevice+0x6e>
     782:	00 c0       	rjmp	.+0      	; 0x784 <USB_Host_ResetDevice+0x74>
     784:	00 00       	nop
     786:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     788:	49 f7       	brne	.-46     	; 0x75c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     78a:	99 23       	and	r25, r25
     78c:	29 f0       	breq	.+10     	; 0x798 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     78e:	90 91 a0 00 	lds	r25, 0x00A0
     792:	90 62       	ori	r25, 0x20	; 32
     794:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     798:	81 11       	cpse	r24, r1
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     79c:	80 91 9e 00 	lds	r24, 0x009E
     7a0:	8e 7f       	andi	r24, 0xFE	; 254
     7a2:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     7a6:	80 91 a0 00 	lds	r24, 0x00A0
     7aa:	82 60       	ori	r24, 0x02	; 2
     7ac:	80 93 a0 00 	sts	0x00A0, r24
     7b0:	08 95       	ret

000007b2 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7b2:	20 91 9e 00 	lds	r18, 0x009E
     7b6:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7b8:	90 91 a0 00 	lds	r25, 0x00A0
     7bc:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7be:	30 91 a0 00 	lds	r19, 0x00A0
     7c2:	3f 7d       	andi	r19, 0xDF	; 223
     7c4:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7c8:	30 91 9f 00 	lds	r19, 0x009F
     7cc:	3f 7d       	andi	r19, 0xDF	; 223
     7ce:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7d2:	30 91 9e 00 	lds	r19, 0x009E
     7d6:	31 60       	ori	r19, 0x01	; 1
     7d8:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7dc:	88 23       	and	r24, r24
     7de:	39 f1       	breq	.+78     	; 0x82e <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7e0:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7e4:	35 ff       	sbrs	r19, 5
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7e8:	30 91 9f 00 	lds	r19, 0x009F
     7ec:	3f 7d       	andi	r19, 0xDF	; 223
     7ee:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     7f2:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     7f4:	30 91 26 01 	lds	r19, 0x0126
     7f8:	31 30       	cpi	r19, 0x01	; 1
     7fa:	c1 f0       	breq	.+48     	; 0x82c <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     7fc:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     800:	34 ff       	sbrs	r19, 4
     802:	09 c0       	rjmp	.+18     	; 0x816 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     804:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     808:	80 91 a6 00 	lds	r24, 0x00A6
     80c:	8f 7e       	andi	r24, 0xEF	; 239
     80e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     812:	82 e0       	ldi	r24, 0x02	; 2

			break;
     814:	0c c0       	rjmp	.+24     	; 0x82e <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     816:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     81a:	31 ff       	sbrs	r19, 1
     81c:	df cf       	rjmp	.-66     	; 0x7dc <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     81e:	80 91 a6 00 	lds	r24, 0x00A6
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     828:	83 e0       	ldi	r24, 0x03	; 3

			break;
     82a:	01 c0       	rjmp	.+2      	; 0x82e <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     82c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     82e:	21 11       	cpse	r18, r1
     830:	05 c0       	rjmp	.+10     	; 0x83c <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     832:	20 91 9e 00 	lds	r18, 0x009E
     836:	2e 7f       	andi	r18, 0xFE	; 254
     838:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     83c:	99 23       	and	r25, r25
     83e:	29 f0       	breq	.+10     	; 0x84a <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     840:	90 91 a0 00 	lds	r25, 0x00A0
     844:	90 62       	ori	r25, 0x20	; 32
     846:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     84a:	08 95       	ret

0000084c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	28 97       	sbiw	r28, 0x08	; 8
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     864:	80 91 26 01 	lds	r24, 0x0126
     868:	85 30       	cpi	r24, 0x05	; 5
     86a:	09 f4       	brne	.+2      	; 0x86e <USB_Host_ProcessNextHostState+0x22>
     86c:	9c c0       	rjmp	.+312    	; 0x9a6 <USB_Host_ProcessNextHostState+0x15a>
     86e:	68 f4       	brcc	.+26     	; 0x88a <USB_Host_ProcessNextHostState+0x3e>
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	e1 f1       	breq	.+120    	; 0x8ec <USB_Host_ProcessNextHostState+0xa0>
     874:	18 f4       	brcc	.+6      	; 0x87c <USB_Host_ProcessNextHostState+0x30>
     876:	88 23       	and	r24, r24
     878:	d9 f0       	breq	.+54     	; 0x8b0 <USB_Host_ProcessNextHostState+0x64>
     87a:	ff c0       	rjmp	.+510    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_Host_ProcessNextHostState+0x36>
     880:	3f c0       	rjmp	.+126    	; 0x900 <USB_Host_ProcessNextHostState+0xb4>
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	09 f4       	brne	.+2      	; 0x888 <USB_Host_ProcessNextHostState+0x3c>
     886:	67 c0       	rjmp	.+206    	; 0x956 <USB_Host_ProcessNextHostState+0x10a>
     888:	f8 c0       	rjmp	.+496    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     88a:	87 30       	cpi	r24, 0x07	; 7
     88c:	09 f4       	brne	.+2      	; 0x890 <USB_Host_ProcessNextHostState+0x44>
     88e:	a6 c0       	rjmp	.+332    	; 0x9dc <USB_Host_ProcessNextHostState+0x190>
     890:	08 f4       	brcc	.+2      	; 0x894 <USB_Host_ProcessNextHostState+0x48>
     892:	96 c0       	rjmp	.+300    	; 0x9c0 <USB_Host_ProcessNextHostState+0x174>
     894:	88 30       	cpi	r24, 0x08	; 8
     896:	09 f4       	brne	.+2      	; 0x89a <USB_Host_ProcessNextHostState+0x4e>
     898:	bf c0       	rjmp	.+382    	; 0xa18 <USB_Host_ProcessNextHostState+0x1cc>
     89a:	89 30       	cpi	r24, 0x09	; 9
     89c:	09 f0       	breq	.+2      	; 0x8a0 <USB_Host_ProcessNextHostState+0x54>
     89e:	ed c0       	rjmp	.+474    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	80 93 26 01 	sts	0x0126, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8ac:	57 dd       	rcall	.-1362   	; 0x35c <EVENT_USB_Host_DeviceEnumerationComplete>
     8ae:	e5 c0       	rjmp	.+458    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
			break;
     8b0:	00 91 1a 01 	lds	r16, 0x011A
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     8b4:	10 91 1b 01 	lds	r17, 0x011B
     8b8:	01 15       	cp	r16, r1
     8ba:	11 05       	cpc	r17, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <USB_Host_ProcessNextHostState+0x74>
     8be:	dd c0       	rjmp	.+442    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8c2:	77 df       	rcall	.-274    	; 0x7b2 <USB_Host_WaitMS>
     8c4:	88 23       	and	r24, r24
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <USB_Host_ProcessNextHostState+0x88>
     8c8:	90 91 19 01 	lds	r25, 0x0119
				{
					USB_HostState = PostWaitState;
     8cc:	90 93 26 01 	sts	0x0126, r25
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	c5 c0       	rjmp	.+394    	; 0xa5e <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     8d4:	01 50       	subi	r16, 0x01	; 1
					break;
     8d6:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     8d8:	10 93 1b 01 	sts	0x011B, r17
     8dc:	00 93 1a 01 	sts	0x011A, r16
     8e0:	01 2b       	or	r16, r17
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <USB_Host_ProcessNextHostState+0x9a>
     8e4:	ca c0       	rjmp	.+404    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     8e6:	80 91 19 01 	lds	r24, 0x0119
				  USB_HostState = PostWaitState;
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <USB_Host_ProcessNextHostState+0xae>
     8ec:	88 ee       	ldi	r24, 0xE8	; 232
     8ee:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8f0:	90 93 1b 01 	sts	0x011B, r25
     8f4:	80 93 1a 01 	sts	0x011A, r24
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	80 93 26 01 	sts	0x0126, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8fe:	bd c0       	rjmp	.+378    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     900:	80 91 1a 01 	lds	r24, 0x011A
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     904:	90 91 1b 01 	lds	r25, 0x011B
     908:	9c 01       	movw	r18, r24
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	31 09       	sbc	r19, r1
     90e:	30 93 1b 01 	sts	0x011B, r19
     912:	20 93 1a 01 	sts	0x011A, r18
     916:	89 2b       	or	r24, r25
     918:	39 f0       	breq	.+14     	; 0x928 <USB_Host_ProcessNextHostState+0xdc>
     91a:	8f ec       	ldi	r24, 0xCF	; 207
     91c:	97 e0       	ldi	r25, 0x07	; 7
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <USB_Host_ProcessNextHostState+0xd2>
     922:	00 c0       	rjmp	.+0      	; 0x924 <USB_Host_ProcessNextHostState+0xd8>
     924:	00 00       	nop
     926:	a9 c0       	rjmp	.+338    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     928:	77 98       	cbi	0x0e, 7	; 14
     92a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	80 93 d8 00 	sts	0x00D8, r24
     934:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     938:	8b 7f       	andi	r24, 0xFB	; 251
     93a:	80 93 dd 00 	sts	0x00DD, r24
     93e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     942:	80 61       	ori	r24, 0x10	; 16
     944:	80 93 d7 00 	sts	0x00D7, r24
     948:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	80 93 dd 00 	sts	0x00DD, r24
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	d2 cf       	rjmp	.-92     	; 0x8fa <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     956:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     95a:	80 ff       	sbrs	r24, 0
     95c:	8e c0       	rjmp	.+284    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     95e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     962:	8e 7f       	andi	r24, 0xFE	; 254
     964:	80 93 9f 00 	sts	0x009F, r24
     968:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     96c:	8d 7f       	andi	r24, 0xFD	; 253
     96e:	80 93 9f 00 	sts	0x009F, r24
     972:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	80 93 df 00 	sts	0x00DF, r24
     97c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     980:	82 60       	ori	r24, 0x02	; 2
     982:	80 93 de 00 	sts	0x00DE, r24
     986:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	80 93 9e 00 	sts	0x009E, r24
     990:	81 d1       	rcall	.+770    	; 0xc94 <Pipe_ClearPipes>
     992:	10 92 26 01 	sts	0x0126, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     996:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 1b 01 	sts	0x011B, r25
     99e:	80 93 1a 01 	sts	0x011A, r24
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	0a c0       	rjmp	.+20     	; 0x9ba <USB_Host_ProcessNextHostState+0x16e>
     9a6:	b4 de       	rcall	.-664    	; 0x710 <USB_Host_ResetDevice>
     9a8:	10 92 26 01 	sts	0x0126, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9ac:	88 ec       	ldi	r24, 0xC8	; 200
     9ae:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9b0:	90 93 1b 01 	sts	0x011B, r25
     9b4:	80 93 1a 01 	sts	0x011A, r24
     9b8:	86 e0       	ldi	r24, 0x06	; 6
     9ba:	80 93 19 01 	sts	0x0119, r24
     9be:	5d c0       	rjmp	.+186    	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     9c0:	01 e0       	ldi	r16, 0x01	; 1
     9c2:	20 e4       	ldi	r18, 0x40	; 64
     9c4:	30 e0       	ldi	r19, 0x00	; 0
			break;
     9c6:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	fb d0       	rcall	.+502    	; 0xbc4 <Pipe_ConfigurePipe>
     9ce:	81 11       	cpse	r24, r1
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <USB_Host_ProcessNextHostState+0x18c>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	43 c0       	rjmp	.+134    	; 0xa5e <USB_Host_ProcessNextHostState+0x212>
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	8f cf       	rjmp	.-226    	; 0x8fa <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     9dc:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     9de:	e1 e0       	ldi	r30, 0x01	; 1
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9e2:	ae e1       	ldi	r26, 0x1E	; 30
     9e4:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9e6:	01 90       	ld	r0, Z+
     9e8:	0d 92       	st	X+, r0
     9ea:	8a 95       	dec	r24
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <USB_Host_ProcessNextHostState+0x19a>
     9ee:	10 92 a7 00 	sts	0x00A7, r1
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	76 d3       	rcall	.+1772   	; 0x10e4 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9f8:	81 11       	cpse	r24, r1
     9fa:	30 c0       	rjmp	.+96     	; 0xa5c <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9fc:	88 85       	ldd	r24, Y+8	; 0x08
     9fe:	80 93 00 01 	sts	0x0100, r24
     a02:	86 de       	rcall	.-756    	; 0x710 <USB_Host_ResetDevice>
     a04:	10 92 26 01 	sts	0x0126, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a08:	88 ec       	ldi	r24, 0xC8	; 200
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 1b 01 	sts	0x011B, r25

			USB_Host_ResetDevice();
     a10:	80 93 1a 01 	sts	0x011A, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	d1 cf       	rjmp	.-94     	; 0x9ba <USB_Host_ProcessNextHostState+0x16e>
     a18:	20 91 00 01 	lds	r18, 0x0100
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	01 e0       	ldi	r16, 0x01	; 1
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     a26:	ce d0       	rcall	.+412    	; 0xbc4 <Pipe_ConfigurePipe>
     a28:	88 23       	and	r24, r24
     a2a:	99 f2       	breq	.-90     	; 0x9d2 <USB_Host_ProcessNextHostState+0x186>
     a2c:	88 e0       	ldi	r24, 0x08	; 8
     a2e:	e9 e0       	ldi	r30, 0x09	; 9
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	ae e1       	ldi	r26, 0x1E	; 30
     a34:	b1 e0       	ldi	r27, 0x01	; 1
     a36:	01 90       	ld	r0, Z+
     a38:	0d 92       	st	X+, r0
     a3a:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <USB_Host_ProcessNextHostState+0x1ea>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	50 d3       	rcall	.+1696   	; 0x10e4 <USB_Host_SendControlRequest>
     a44:	81 11       	cpse	r24, r1
     a46:	0a c0       	rjmp	.+20     	; 0xa5c <USB_Host_ProcessNextHostState+0x210>
     a48:	10 92 26 01 	sts	0x0126, r1
     a4c:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	90 93 1b 01 	sts	0x011B, r25
     a54:	80 93 1a 01 	sts	0x011A, r24
     a58:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a5a:	af cf       	rjmp	.-162    	; 0x9ba <USB_Host_ProcessNextHostState+0x16e>
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	20 91 26 01 	lds	r18, 0x0126
     a62:	21 30       	cpi	r18, 0x01	; 1
     a64:	51 f0       	breq	.+20     	; 0xa7a <USB_Host_ProcessNextHostState+0x22e>
     a66:	68 2f       	mov	r22, r24
     a68:	89 2f       	mov	r24, r25
     a6a:	be dc       	rcall	.-1668   	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationFailed>
     a6c:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a70:	81 60       	ori	r24, 0x01	; 1
     a72:	80 93 dd 00 	sts	0x00DD, r24
     a76:	6c dc       	rcall	.-1832   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a78:	67 d1       	rcall	.+718    	; 0xd48 <USB_ResetInterface>
     a7a:	28 96       	adiw	r28, 0x08	; 8
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16

		USB_ResetInterface();
     a8e:	08 95       	ret

00000a90 <Pipe_Write_Stream_LE>:
     a90:	cf 92       	push	r12
	}
}
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	7c 01       	movw	r14, r24
     aa2:	8b 01       	movw	r16, r22
     aa4:	ea 01       	movw	r28, r20
     aa6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     aaa:	8f 7c       	andi	r24, 0xCF	; 207
     aac:	80 62       	ori	r24, 0x20	; 32
     aae:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ab2:	04 d1       	rcall	.+520    	; 0xcbc <Pipe_WaitUntilReady>
     ab4:	81 11       	cpse	r24, r1
     ab6:	30 c0       	rjmp	.+96     	; 0xb18 <Pipe_Write_Stream_LE+0x88>
     ab8:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     aba:	31 f0       	breq	.+12     	; 0xac8 <Pipe_Write_Stream_LE+0x38>
     abc:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     abe:	99 81       	ldd	r25, Y+1	; 0x01
     ac0:	08 1b       	sub	r16, r24
     ac2:	19 0b       	sbc	r17, r25
     ac4:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ac6:	f9 1e       	adc	r15, r25
     ac8:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     aca:	d1 2c       	mov	r13, r1
     acc:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ace:	11 05       	cpc	r17, r1
     ad0:	11 f1       	breq	.+68     	; 0xb16 <Pipe_Write_Stream_LE+0x86>
     ad2:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ad6:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <Pipe_Write_Stream_LE+0x70>
     ada:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ade:	8b 77       	andi	r24, 0x7B	; 123
     ae0:	80 93 a6 00 	sts	0x00A6, r24
     ae4:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ae6:	41 f0       	breq	.+16     	; 0xaf8 <Pipe_Write_Stream_LE+0x68>
     ae8:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     aea:	99 81       	ldd	r25, Y+1	; 0x01
     aec:	8c 0d       	add	r24, r12
     aee:	9d 1d       	adc	r25, r13
     af0:	99 83       	std	Y+1, r25	; 0x01
     af2:	88 83       	st	Y, r24
     af4:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     af6:	10 c0       	rjmp	.+32     	; 0xb18 <Pipe_Write_Stream_LE+0x88>
     af8:	e1 d0       	rcall	.+450    	; 0xcbc <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     afa:	88 23       	and	r24, r24
     afc:	39 f3       	breq	.-50     	; 0xacc <Pipe_Write_Stream_LE+0x3c>
     afe:	0c c0       	rjmp	.+24     	; 0xb18 <Pipe_Write_Stream_LE+0x88>
     b00:	f7 01       	movw	r30, r14
     b02:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     b04:	7f 01       	movw	r14, r30
     b06:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     b0a:	01 50       	subi	r16, 0x01	; 1
     b0c:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b0e:	ff ef       	ldi	r31, 0xFF	; 255
     b10:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     b12:	df 0a       	sbc	r13, r31
     b14:	db cf       	rjmp	.-74     	; 0xacc <Pipe_Write_Stream_LE+0x3c>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     b1a:	cf 91       	pop	r28
}
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	08 95       	ret

00000b2a <Pipe_Read_Stream_LE>:
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	7c 01       	movw	r14, r24
     b3c:	8b 01       	movw	r16, r22
     b3e:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     b40:	80 91 aa 00 	lds	r24, 0x00AA
     b44:	8f 7c       	andi	r24, 0xCF	; 207
     b46:	80 61       	ori	r24, 0x10	; 16
     b48:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b4c:	b7 d0       	rcall	.+366    	; 0xcbc <Pipe_WaitUntilReady>
     b4e:	81 11       	cpse	r24, r1
     b50:	30 c0       	rjmp	.+96     	; 0xbb2 <Pipe_Read_Stream_LE+0x88>
     b52:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b54:	31 f0       	breq	.+12     	; 0xb62 <Pipe_Read_Stream_LE+0x38>
     b56:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     b58:	99 81       	ldd	r25, Y+1	; 0x01
     b5a:	08 1b       	sub	r16, r24
     b5c:	19 0b       	sbc	r17, r25
     b5e:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b60:	f9 1e       	adc	r15, r25
     b62:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b64:	d1 2c       	mov	r13, r1
     b66:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b68:	11 05       	cpc	r17, r1
     b6a:	11 f1       	breq	.+68     	; 0xbb0 <Pipe_Read_Stream_LE+0x86>
     b6c:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b70:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b72:	13 c0       	rjmp	.+38     	; 0xb9a <Pipe_Read_Stream_LE+0x70>
     b74:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b78:	8e 77       	andi	r24, 0x7E	; 126
     b7a:	80 93 a6 00 	sts	0x00A6, r24
     b7e:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b80:	41 f0       	breq	.+16     	; 0xb92 <Pipe_Read_Stream_LE+0x68>
     b82:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     b84:	99 81       	ldd	r25, Y+1	; 0x01
     b86:	8c 0d       	add	r24, r12
     b88:	9d 1d       	adc	r25, r13
     b8a:	99 83       	std	Y+1, r25	; 0x01
     b8c:	88 83       	st	Y, r24
     b8e:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     b90:	10 c0       	rjmp	.+32     	; 0xbb2 <Pipe_Read_Stream_LE+0x88>
     b92:	94 d0       	rcall	.+296    	; 0xcbc <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b94:	88 23       	and	r24, r24
     b96:	39 f3       	breq	.-50     	; 0xb66 <Pipe_Read_Stream_LE+0x3c>
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <Pipe_Read_Stream_LE+0x88>
     b9a:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     b9e:	f7 01       	movw	r30, r14
     ba0:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ba2:	7f 01       	movw	r14, r30
     ba4:	01 50       	subi	r16, 0x01	; 1
     ba6:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ba8:	ff ef       	ldi	r31, 0xFF	; 255
     baa:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     bac:	df 0a       	sbc	r13, r31
     bae:	db cf       	rjmp	.-74     	; 0xb66 <Pipe_Read_Stream_LE+0x3c>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     bb4:	cf 91       	pop	r28
}
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <Pipe_ConfigurePipe>:
     bc4:	0f 93       	push	r16
     bc6:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     bc8:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     bca:	87 ff       	sbrs	r24, 7
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Pipe_ConfigurePipe+0xe>
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <Pipe_ConfigurePipe+0x10>
     bd2:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     bd4:	e7 30       	cpi	r30, 0x07	; 7
     bd6:	10 f0       	brcs	.+4      	; 0xbdc <Pipe_ConfigurePipe+0x18>
	  return false;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	5a c0       	rjmp	.+180    	; 0xc90 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     bdc:	61 11       	cpse	r22, r1
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     be0:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     be2:	90 e4       	ldi	r25, 0x40	; 64
     be4:	69 9f       	mul	r22, r25
     be6:	b0 01       	movw	r22, r0
     be8:	11 24       	eor	r1, r1
     bea:	4f 70       	andi	r20, 0x0F	; 15
     bec:	46 2b       	or	r20, r22
     bee:	48 2b       	or	r20, r24
     bf0:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bf2:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bf6:	5e 13       	cpse	r21, r30
     bf8:	19 c0       	rjmp	.+50     	; 0xc2c <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     bfa:	02 30       	cpi	r16, 0x02	; 2
     bfc:	10 f0       	brcs	.+4      	; 0xc02 <Pipe_ConfigurePipe+0x3e>
     bfe:	76 e0       	ldi	r23, 0x06	; 6
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <Pipe_ConfigurePipe+0x40>
     c02:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     c04:	88 e0       	ldi	r24, 0x08	; 8
     c06:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c08:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	40 f0       	brcs	.+16     	; 0xc20 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c10:	86 2f       	mov	r24, r22
     c12:	82 95       	swap	r24
     c14:	80 7f       	andi	r24, 0xF0	; 240
     c16:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c18:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c1a:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c20:	65 30       	cpi	r22, 0x05	; 5
     c22:	b1 f3       	breq	.-20     	; 0xc10 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     c24:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	ef cf       	rjmp	.-34     	; 0xc0a <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c2c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c30:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c34:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     c38:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c3c:	81 fd       	sbrc	r24, 1
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c40:	5f 5f       	subi	r21, 0xFF	; 255
     c42:	57 30       	cpi	r21, 0x07	; 7
     c44:	b1 f6       	brne	.-84     	; 0xbf2 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c46:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	21 c0       	rjmp	.+66     	; 0xc90 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c4e:	90 91 a9 00 	lds	r25, 0x00A9
     c52:	9e 7f       	andi	r25, 0xFE	; 254
     c54:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c58:	90 91 ab 00 	lds	r25, 0x00AB
     c5c:	9d 7f       	andi	r25, 0xFD	; 253
     c5e:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c62:	90 91 a9 00 	lds	r25, 0x00A9
     c66:	91 60       	ori	r25, 0x01	; 1
     c68:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c6c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c70:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c74:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     c78:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c7c:	80 91 a9 00 	lds	r24, 0x00A9
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c86:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c8a:	87 fd       	sbrc	r24, 7
     c8c:	d9 cf       	rjmp	.-78     	; 0xc40 <Pipe_ConfigurePipe+0x7c>
     c8e:	a4 cf       	rjmp	.-184    	; 0xbd8 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c94:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c98:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c9a:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c9e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ca2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ca6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     caa:	90 91 a9 00 	lds	r25, 0x00A9
     cae:	9e 7f       	andi	r25, 0xFE	; 254
     cb0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	87 30       	cpi	r24, 0x07	; 7
     cb8:	81 f7       	brne	.-32     	; 0xc9a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cba:	08 95       	ret

00000cbc <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     cbc:	80 91 a2 00 	lds	r24, 0x00A2
     cc0:	90 91 a3 00 	lds	r25, 0x00A3
     cc4:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     cc6:	20 91 aa 00 	lds	r18, 0x00AA
     cca:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ccc:	20 31       	cpi	r18, 0x10	; 16
     cce:	29 f4       	brne	.+10     	; 0xcda <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     cd0:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     cd4:	20 ff       	sbrs	r18, 0
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <Pipe_WaitUntilReady+0x26>
     cd8:	17 c0       	rjmp	.+46     	; 0xd08 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     cda:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     cde:	22 fd       	sbrc	r18, 2
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ce2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ce6:	21 fd       	sbrc	r18, 1
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     cea:	20 91 26 01 	lds	r18, 0x0126
     cee:	21 30       	cpi	r18, 0x01	; 1
     cf0:	79 f0       	breq	.+30     	; 0xd10 <Pipe_WaitUntilReady+0x54>
     cf2:	20 91 a2 00 	lds	r18, 0x00A2
     cf6:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cfa:	28 17       	cp	r18, r24
     cfc:	39 07       	cpc	r19, r25
     cfe:	19 f3       	breq	.-58     	; 0xcc6 <Pipe_WaitUntilReady+0xa>
     d00:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d02:	41 f0       	breq	.+16     	; 0xd14 <Pipe_WaitUntilReady+0x58>
     d04:	c9 01       	movw	r24, r18
     d06:	df cf       	rjmp	.-66     	; 0xcc6 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     d14:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     d16:	08 95       	ret

00000d18 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d18:	75 d0       	rcall	.+234    	; 0xe04 <USB_INT_DisableAllInterrupts>
     d1a:	7c d0       	rcall	.+248    	; 0xe14 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d1c:	e0 ee       	ldi	r30, 0xE0	; 224
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
     d26:	e8 ed       	ldi	r30, 0xD8	; 216
     d28:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d2a:	80 81       	ld	r24, Z
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	80 83       	st	Z, r24
     d30:	19 bc       	out	0x29, r1	; 41
     d32:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d34:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d36:	8c 91       	ld	r24, X
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	8c 93       	st	X, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d40:	80 83       	st	Z, r24
     d42:	10 92 1d 01 	sts	0x011D, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d46:	08 95       	ret

00000d48 <USB_ResetInterface>:
     d48:	5d d0       	rcall	.+186    	; 0xe04 <USB_INT_DisableAllInterrupts>
     d4a:	64 d0       	rcall	.+200    	; 0xe14 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d4c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d50:	8f 77       	andi	r24, 0x7F	; 127
     d52:	80 93 d8 00 	sts	0x00D8, r24
     d56:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	80 93 d8 00 	sts	0x00D8, r24
     d60:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d64:	8f 7d       	andi	r24, 0xDF	; 223
     d66:	80 93 d8 00 	sts	0x00D8, r24
     d6a:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d6e:	8f 77       	andi	r24, 0x7F	; 127
     d70:	80 93 d7 00 	sts	0x00D7, r24
     d74:	8c e0       	ldi	r24, 0x0C	; 12
     d76:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d78:	8e e0       	ldi	r24, 0x0E	; 14
     d7a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d7c:	09 b4       	in	r0, 0x29	; 41
     d7e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d80:	fd cf       	rjmp	.-6      	; 0xd7c <USB_ResetInterface+0x34>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 26 01 	sts	0x0126, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d88:	10 92 1c 01 	sts	0x011C, r1
	USB_Host_ConfigurationNumber = 0;
     d8c:	80 e4       	ldi	r24, 0x40	; 64
     d8e:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d92:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	80 93 d8 00 	sts	0x00D8, r24
     d9c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 93 dd 00 	sts	0x00DD, r24
     da6:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     daa:	84 60       	ori	r24, 0x04	; 4
     dac:	80 93 dd 00 	sts	0x00DD, r24
     db0:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     db4:	8f 7e       	andi	r24, 0xEF	; 239
     db6:	80 93 d7 00 	sts	0x00D7, r24
     dba:	6f 9a       	sbi	0x0d, 7	; 13
     dbc:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     dbe:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 93 de 00 	sts	0x00DE, r24
     dc8:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     dcc:	84 60       	ori	r24, 0x04	; 4
     dce:	80 93 de 00 	sts	0x00DE, r24
     dd2:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     dd6:	8e 7f       	andi	r24, 0xFE	; 254
     dd8:	80 93 e0 00 	sts	0x00E0, r24
     ddc:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     de0:	80 61       	ori	r24, 0x10	; 16
     de2:	80 93 d8 00 	sts	0x00D8, r24
     de6:	08 95       	ret

00000de8 <USB_Init>:
     de8:	e8 ed       	ldi	r30, 0xD8	; 216
     dea:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     dec:	80 81       	ld	r24, Z
     dee:	8f 7e       	andi	r24, 0xEF	; 239
     df0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     df2:	e7 ed       	ldi	r30, 0xD7	; 215
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 1d 01 	sts	0x011D, r24

	USB_ResetInterface();
     e02:	a2 cf       	rjmp	.-188    	; 0xd48 <USB_ResetInterface>

00000e04 <USB_INT_DisableAllInterrupts>:
     e04:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8c 7f       	andi	r24, 0xFC	; 252
     e0c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e0e:	10 92 a0 00 	sts	0x00A0, r1
     e12:	08 95       	ret

00000e14 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e14:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e18:	10 92 9f 00 	sts	0x009F, r1
     e1c:	08 95       	ret

00000e1e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	0b b6       	in	r0, 0x3b	; 59
     e2a:	0f 92       	push	r0
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e44:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e48:	85 ff       	sbrs	r24, 5
     e4a:	0a c0       	rjmp	.+20     	; 0xe60 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e4c:	80 91 a0 00 	lds	r24, 0x00A0
     e50:	85 ff       	sbrs	r24, 5
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e54:	80 91 9f 00 	lds	r24, 0x009F
     e58:	8f 7d       	andi	r24, 0xDF	; 223
     e5a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e5e:	1a d1       	rcall	.+564    	; 0x1094 <USB_Event_Stub>
     e60:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e64:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e66:	15 c0       	rjmp	.+42     	; 0xe92 <__vector_10+0x74>
     e68:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e6c:	81 ff       	sbrs	r24, 1
     e6e:	11 c0       	rjmp	.+34     	; 0xe92 <__vector_10+0x74>
     e70:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e74:	8d 7f       	andi	r24, 0xFD	; 253
     e76:	80 93 9f 00 	sts	0x009F, r24
     e7a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e7e:	8e 7f       	andi	r24, 0xFE	; 254
     e80:	80 93 9f 00 	sts	0x009F, r24
     e84:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	80 93 a0 00 	sts	0x00A0, r24
     e8e:	60 da       	rcall	.-2880   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e90:	5b df       	rcall	.-330    	; 0xd48 <USB_ResetInterface>
     e92:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e96:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e98:	15 c0       	rjmp	.+42     	; 0xec4 <__vector_10+0xa6>
     e9a:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e9e:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ea0:	11 c0       	rjmp	.+34     	; 0xec4 <__vector_10+0xa6>
     ea2:	80 91 df 00 	lds	r24, 0x00DF
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ea8:	80 93 df 00 	sts	0x00DF, r24
     eac:	77 98       	cbi	0x0e, 7	; 14
     eae:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     eb2:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     eb4:	80 93 dd 00 	sts	0x00DD, r24
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	80 da       	rcall	.-2816   	; 0x3bc <EVENT_USB_Host_HostError>
     ebc:	49 da       	rcall	.-2926   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 26 01 	sts	0x0126, r24
		EVENT_USB_Host_DeviceUnattached();
     ec4:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     ec8:	80 ff       	sbrs	r24, 0
     eca:	17 c0       	rjmp	.+46     	; 0xefa <__vector_10+0xdc>
     ecc:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ed0:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ed2:	13 c0       	rjmp	.+38     	; 0xefa <__vector_10+0xdc>
     ed4:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ede:	80 91 de 00 	lds	r24, 0x00DE
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     ee8:	2d da       	rcall	.-2982   	; 0x344 <EVENT_USB_Host_DeviceAttached>
     eea:	80 91 a0 00 	lds	r24, 0x00A0
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ef4:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ef6:	80 93 26 01 	sts	0x0126, r24
     efa:	80 91 df 00 	lds	r24, 0x00DF
     efe:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f00:	0e c0       	rjmp	.+28     	; 0xf1e <__vector_10+0x100>
     f02:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f06:	82 ff       	sbrs	r24, 2
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f0a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	80 93 df 00 	sts	0x00DF, r24
     f14:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	67 da       	rcall	.-2866   	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationFailed>
     f1a:	1a da       	rcall	.-3020   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
     f1c:	15 df       	rcall	.-470    	; 0xd48 <USB_ResetInterface>
     f1e:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23

		USB_ResetInterface();
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <USB_GetNextDescriptor>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	fc 01       	movw	r30, r24
     f4a:	eb 01       	movw	r28, r22
     f4c:	a8 81       	ld	r26, Y
     f4e:	b9 81       	ldd	r27, Y+1	; 0x01
     f50:	8c 91       	ld	r24, X
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	82 17       	cp	r24, r18
     f5a:	93 07       	cpc	r25, r19
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <USB_GetNextDescriptor+0x1c>
     f5e:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f60:	a2 0f       	add	r26, r18
     f62:	b3 1f       	adc	r27, r19
     f64:	eb 01       	movw	r28, r22
     f66:	b9 83       	std	Y+1, r27	; 0x01
     f68:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	82 1b       	sub	r24, r18
     f70:	93 0b       	sbc	r25, r19
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	80 83       	st	Z, r24
			}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	29 97       	sbiw	r28, 0x09	; 9
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	7b 01       	movw	r14, r22
     f9e:	8a 01       	movw	r16, r20
     fa0:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fa2:	90 e8       	ldi	r25, 0x80	; 128
     fa4:	90 93 1e 01 	sts	0x011E, r25
     fa8:	96 e0       	ldi	r25, 0x06	; 6
     faa:	90 93 1f 01 	sts	0x011F, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fae:	e8 2f       	mov	r30, r24
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fb6:	f0 93 21 01 	sts	0x0121, r31
     fba:	e0 93 20 01 	sts	0x0120, r30
     fbe:	10 92 23 01 	sts	0x0123, r1
     fc2:	10 92 22 01 	sts	0x0122, r1
     fc6:	89 e0       	ldi	r24, 0x09	; 9
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	90 93 25 01 	sts	0x0125, r25
     fce:	80 93 24 01 	sts	0x0124, r24
     fd2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	84 d0       	rcall	.+264    	; 0x10e4 <USB_Host_SendControlRequest>
     fdc:	81 11       	cpse	r24, r1
     fde:	19 c0       	rjmp	.+50     	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x96>
     fe0:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fe2:	fc 81       	ldd	r31, Y+4	; 0x04
     fe4:	d7 01       	movw	r26, r14
     fe6:	ed 93       	st	X+, r30
     fe8:	fc 93       	st	X, r31
     fea:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     fec:	df 06       	cpc	r13, r31
     fee:	70 f0       	brcs	.+28     	; 0x100c <USB_Host_GetDeviceConfigDescriptor+0x90>
     ff0:	f0 93 25 01 	sts	0x0125, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ff4:	e0 93 24 01 	sts	0x0124, r30
     ff8:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ffa:	74 d0       	rcall	.+232    	; 0x10e4 <USB_Host_SendControlRequest>
     ffc:	81 11       	cpse	r24, r1
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1000:	f8 01       	movw	r30, r16
    1002:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	21 f0       	breq	.+8      	; 0x1010 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1014:	0f b6       	in	r0, 0x3f	; 63
}
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	08 95       	ret

00001030 <USB_GetNextDescriptorComp>:
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	8c 01       	movw	r16, r24
    1046:	eb 01       	movw	r28, r22
    1048:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    104a:	f8 01       	movw	r30, r16
    104c:	e0 80       	ld	r14, Z
    104e:	f1 80       	ldd	r15, Z+1	; 0x01
    1050:	e1 14       	cp	r14, r1
    1052:	f1 04       	cpc	r15, r1
    1054:	99 f0       	breq	.+38     	; 0x107c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1056:	a8 80       	ld	r10, Y
    1058:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    105a:	be 01       	movw	r22, r28
    105c:	c8 01       	movw	r24, r16
    105e:	72 df       	rcall	.-284    	; 0xf44 <USB_GetNextDescriptor>
    1060:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1062:	99 81       	ldd	r25, Y+1	; 0x01
    1064:	f6 01       	movw	r30, r12
    1066:	09 95       	icall
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	79 f3       	breq	.-34     	; 0x104a <USB_GetNextDescriptorComp+0x1a>
    106c:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    106e:	39 f4       	brne	.+14     	; 0x107e <USB_GetNextDescriptorComp+0x4e>
    1070:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1072:	a8 82       	st	Y, r10
    1074:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1076:	f1 82       	std	Z+1, r15	; 0x01
    1078:	e0 82       	st	Z, r14
    107a:	01 c0       	rjmp	.+2      	; 0x107e <USB_GetNextDescriptorComp+0x4e>
    107c:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    107e:	df 91       	pop	r29
}
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	08 95       	ret

00001094 <USB_Event_Stub>:
    1094:	08 95       	ret

00001096 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    109e:	c9 ee       	ldi	r28, 0xE9	; 233
    10a0:	d3 e0       	ldi	r29, 0x03	; 3
    10a2:	11 11       	cpse	r17, r1
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10a6:	80 91 a6 00 	lds	r24, 0x00A6
    10aa:	83 fd       	sbrc	r24, 3
    10ac:	16 c0       	rjmp	.+44     	; 0x10da <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 db       	rcall	.-2304   	; 0x7b2 <USB_Host_WaitMS>
    10b2:	81 11       	cpse	r24, r1
    10b4:	13 c0       	rjmp	.+38     	; 0x10dc <USB_Host_WaitForIOS+0x46>
    10b6:	21 97       	sbiw	r28, 0x01	; 1
    10b8:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10ba:	99 f7       	brne	.-26     	; 0x10a2 <USB_Host_WaitForIOS+0xc>
    10bc:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <USB_Host_WaitForIOS+0x46>
    10c0:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10c2:	29 f4       	brne	.+10     	; 0x10ce <USB_Host_WaitForIOS+0x38>
    10c4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10c8:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    10ca:	f1 cf       	rjmp	.-30     	; 0x10ae <USB_Host_WaitForIOS+0x18>
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <USB_Host_WaitForIOS+0x44>
    10ce:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10d0:	71 f7       	brne	.-36     	; 0x10ae <USB_Host_WaitForIOS+0x18>
    10d2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10d6:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    10d8:	ea cf       	rjmp	.-44     	; 0x10ae <USB_Host_WaitForIOS+0x18>
    10da:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    10dc:	df 91       	pop	r29
}
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	08 95       	ret

000010e4 <USB_Host_SendControlRequest>:
    10e4:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10f0:	f0 90 9e 00 	lds	r15, 0x009E
    10f4:	8f 2d       	mov	r24, r15
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10fa:	c0 91 24 01 	lds	r28, 0x0124
    10fe:	d0 91 25 01 	lds	r29, 0x0125
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1102:	80 91 9e 00 	lds	r24, 0x009E
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	51 db       	rcall	.-2398   	; 0x7b2 <USB_Host_WaitMS>
    1110:	81 11       	cpse	r24, r1
    1112:	cc c0       	rjmp	.+408    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    1114:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1118:	8f 7c       	andi	r24, 0xCF	; 207
    111a:	80 93 aa 00 	sts	0x00AA, r24
    111e:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1122:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	80 93 a6 00 	sts	0x00A6, r24
    112c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1130:	8f 7b       	andi	r24, 0xBF	; 191
    1132:	80 93 a9 00 	sts	0x00A9, r24
    1136:	ee e1       	ldi	r30, 0x1E	; 30
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    113c:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1140:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1142:	e6 32       	cpi	r30, 0x26	; 38
    1144:	f8 07       	cpc	r31, r24
    1146:	c9 f7       	brne	.-14     	; 0x113a <USB_Host_SendControlRequest+0x56>
    1148:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    114c:	87 77       	andi	r24, 0x77	; 119
    114e:	80 93 a6 00 	sts	0x00A6, r24
    1152:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1154:	a0 df       	rcall	.-192    	; 0x1096 <USB_Host_WaitForIOS>
    1156:	81 11       	cpse	r24, r1
    1158:	a9 c0       	rjmp	.+338    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    115a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	80 93 a9 00 	sts	0x00A9, r24
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	25 db       	rcall	.-2486   	; 0x7b2 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1168:	81 11       	cpse	r24, r1
    116a:	a0 c0       	rjmp	.+320    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    116c:	80 91 1e 01 	lds	r24, 0x011E
    1170:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1172:	4e c0       	rjmp	.+156    	; 0x1210 <USB_Host_SendControlRequest+0x12c>
    1174:	80 91 aa 00 	lds	r24, 0x00AA
    1178:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117a:	80 61       	ori	r24, 0x10	; 16
    117c:	80 93 aa 00 	sts	0x00AA, r24
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1186:	3a c0       	rjmp	.+116    	; 0x11fc <USB_Host_SendControlRequest+0x118>
    1188:	80 91 aa 00 	lds	r24, 0x00AA
    118c:	8f 7c       	andi	r24, 0xCF	; 207
    118e:	80 62       	ori	r24, 0x20	; 32
    1190:	80 93 aa 00 	sts	0x00AA, r24
    1194:	80 91 a9 00 	lds	r24, 0x00A9
    1198:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    119a:	80 93 a9 00 	sts	0x00A9, r24
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	7a df       	rcall	.-268    	; 0x1096 <USB_Host_WaitForIOS>
    11a2:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a4:	83 c0       	rjmp	.+262    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    11a6:	80 91 a6 00 	lds	r24, 0x00A6
    11aa:	8b 77       	andi	r24, 0x7B	; 123
    11ac:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	71 df       	rcall	.-286    	; 0x1096 <USB_Host_WaitForIOS>
    11b4:	7b c0       	rjmp	.+246    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    11b6:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ba:	8f 7b       	andi	r24, 0xBF	; 191
    11bc:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	69 df       	rcall	.-302    	; 0x1096 <USB_Host_WaitForIOS>
    11c4:	81 11       	cpse	r24, r1
    11c6:	72 c0       	rjmp	.+228    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    11c8:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11cc:	90 91 f7 00 	lds	r25, 0x00F7
    11d0:	89 2b       	or	r24, r25
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d4:	c0 e0       	ldi	r28, 0x00	; 0
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
    11d8:	f8 01       	movw	r30, r16
    11da:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11dc:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    11e0:	90 91 f7 00 	lds	r25, 0x00F7
    11e4:	89 2b       	or	r24, r25
    11e6:	69 f4       	brne	.+26     	; 0x1202 <USB_Host_SendControlRequest+0x11e>
    11e8:	80 91 a9 00 	lds	r24, 0x00A9
    11ec:	80 64       	ori	r24, 0x40	; 64
    11ee:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    11f2:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11f6:	8e 77       	andi	r24, 0x7E	; 126
    11f8:	80 93 a6 00 	sts	0x00A6, r24
    11fc:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11fe:	d9 f6       	brne	.-74     	; 0x11b6 <USB_Host_SendControlRequest+0xd2>
    1200:	c3 cf       	rjmp	.-122    	; 0x1188 <USB_Host_SendControlRequest+0xa4>
    1202:	20 97       	sbiw	r28, 0x00	; 0
    1204:	89 f3       	breq	.-30     	; 0x11e8 <USB_Host_SendControlRequest+0x104>
    1206:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    120a:	81 93       	st	Z+, r24
    120c:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    120e:	e5 cf       	rjmp	.-54     	; 0x11da <USB_Host_SendControlRequest+0xf6>
    1210:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1212:	11 05       	cpc	r17, r1
    1214:	b1 f1       	breq	.+108    	; 0x1282 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1216:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    121a:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    121c:	80 62       	ori	r24, 0x20	; 32
    121e:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1222:	80 91 a9 00 	lds	r24, 0x00A9
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 93 a9 00 	sts	0x00A9, r24
    122c:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    122e:	20 97       	sbiw	r28, 0x00	; 0
    1230:	01 f1       	breq	.+64     	; 0x1272 <USB_Host_SendControlRequest+0x18e>
    1232:	31 df       	rcall	.-414    	; 0x1096 <USB_Host_WaitForIOS>
    1234:	81 11       	cpse	r24, r1
    1236:	3a c0       	rjmp	.+116    	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1238:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    123a:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    123e:	30 91 f7 00 	lds	r19, 0x00F7
    1242:	80 91 00 01 	lds	r24, 0x0100
    1246:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1248:	28 17       	cp	r18, r24
    124a:	39 07       	cpc	r19, r25
    124c:	58 f4       	brcc	.+22     	; 0x1264 <USB_Host_SendControlRequest+0x180>
    124e:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	8c 01       	movw	r16, r24
    1254:	20 81       	ld	r18, Z
    1256:	20 93 af 00 	sts	0x00AF, r18
    125a:	21 97       	sbiw	r28, 0x01	; 1
    125c:	20 97       	sbiw	r28, 0x00	; 0
    125e:	19 f0       	breq	.+6      	; 0x1266 <USB_Host_SendControlRequest+0x182>
    1260:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1262:	eb cf       	rjmp	.-42     	; 0x123a <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1264:	8f 01       	movw	r16, r30
    1266:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    126a:	8b 77       	andi	r24, 0x7B	; 123
    126c:	80 93 a6 00 	sts	0x00A6, r24
    1270:	dd cf       	rjmp	.-70     	; 0x122c <USB_Host_SendControlRequest+0x148>
    1272:	11 df       	rcall	.-478    	; 0x1096 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1274:	81 11       	cpse	r24, r1
    1276:	1a c0       	rjmp	.+52     	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    1278:	80 91 a9 00 	lds	r24, 0x00A9
    127c:	80 64       	ori	r24, 0x40	; 64
    127e:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1282:	80 91 aa 00 	lds	r24, 0x00AA
    1286:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1288:	80 61       	ori	r24, 0x10	; 16
    128a:	80 93 aa 00 	sts	0x00AA, r24
    128e:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1292:	8f 7b       	andi	r24, 0xBF	; 191
    1294:	80 93 a9 00 	sts	0x00A9, r24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	fd de       	rcall	.-518    	; 0x1096 <USB_Host_WaitForIOS>
    129c:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <USB_Host_SendControlRequest+0x1c8>
    12a0:	80 91 a6 00 	lds	r24, 0x00A6
    12a4:	8e 77       	andi	r24, 0x7E	; 126
    12a6:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 91 a9 00 	lds	r25, 0x00A9
    12b0:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12b2:	90 93 a9 00 	sts	0x00A9, r25
    12b6:	f1 10       	cpse	r15, r1
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <USB_Host_SendControlRequest+0x1e0>
    12ba:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12be:	9e 7f       	andi	r25, 0xFE	; 254
    12c0:	90 93 9e 00 	sts	0x009E, r25
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    12ca:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    12d6:	ff 90       	pop	r15
    12d8:	08 95       	ret

000012da <USB_Host_SetDeviceConfiguration>:
    12da:	cf 93       	push	r28
				UPRST = 0;
    12dc:	c8 2f       	mov	r28, r24
    12de:	10 92 1e 01 	sts	0x011E, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    12e2:	89 e0       	ldi	r24, 0x09	; 9
    12e4:	80 93 1f 01 	sts	0x011F, r24
    12e8:	2c 2f       	mov	r18, r28
    12ea:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12ec:	30 93 21 01 	sts	0x0121, r19
    12f0:	20 93 20 01 	sts	0x0120, r18
    12f4:	10 92 23 01 	sts	0x0123, r1
    12f8:	10 92 22 01 	sts	0x0122, r1
    12fc:	10 92 25 01 	sts	0x0125, r1
    1300:	10 92 24 01 	sts	0x0124, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1304:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	eb de       	rcall	.-554    	; 0x10e4 <USB_Host_SendControlRequest>
    130e:	81 11       	cpse	r24, r1
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <USB_Host_SetDeviceConfiguration+0x4a>
    1312:	c0 93 1c 01 	sts	0x011C, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1316:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1318:	11 f0       	breq	.+4      	; 0x131e <USB_Host_SetDeviceConfiguration+0x44>
    131a:	9b e0       	ldi	r25, 0x0B	; 11
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <USB_Host_SetDeviceConfiguration+0x46>
    131e:	9a e0       	ldi	r25, 0x0A	; 10
    1320:	90 93 26 01 	sts	0x0126, r25
    1324:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1326:	08 95       	ret

00001328 <USB_USBTask>:
    1328:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    132a:	c0 91 a7 00 	lds	r28, 0x00A7
    132e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1330:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1334:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1338:	89 da       	rcall	.-2798   	; 0x84c <USB_Host_ProcessNextHostState>
    133a:	c0 93 a7 00 	sts	0x00A7, r28
    133e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1340:	08 95       	ret

00001342 <Serial_putchar>:
    1342:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1346:	95 ff       	sbrs	r25, 5
    1348:	fc cf       	rjmp	.-8      	; 0x1342 <Serial_putchar>
				UDR1 = DataByte;
    134a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	08 95       	ret

00001354 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1354:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1358:	87 ff       	sbrs	r24, 7
    135a:	08 c0       	rjmp	.+16     	; 0x136c <Serial_getchar+0x18>
    135c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1360:	87 ff       	sbrs	r24, 7
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1364:	80 91 ce 00 	lds	r24, 0x00CE
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	08 95       	ret
	  return _FDEV_EOF;
    136c:	8e ef       	ldi	r24, 0xFE	; 254
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1376:	08 95       	ret

00001378 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1378:	fc 01       	movw	r30, r24
	if (!(Stream))
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	59 f4       	brne	.+22     	; 0x1394 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    137e:	87 e2       	ldi	r24, 0x27	; 39
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	90 93 36 01 	sts	0x0136, r25
    1386:	80 93 35 01 	sts	0x0135, r24
		stdout = Stream;
    138a:	90 93 38 01 	sts	0x0138, r25
    138e:	80 93 37 01 	sts	0x0137, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1392:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1394:	8e e0       	ldi	r24, 0x0E	; 14
    1396:	df 01       	movw	r26, r30
    1398:	1d 92       	st	X+, r1
    139a:	8a 95       	dec	r24
    139c:	e9 f7       	brne	.-6      	; 0x1398 <Serial_CreateStream+0x20>
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	83 83       	std	Z+3, r24	; 0x03
    13a2:	81 ea       	ldi	r24, 0xA1	; 161
    13a4:	99 e0       	ldi	r25, 0x09	; 9
    13a6:	91 87       	std	Z+9, r25	; 0x09
    13a8:	80 87       	std	Z+8, r24	; 0x08
    13aa:	8a ea       	ldi	r24, 0xAA	; 170
    13ac:	99 e0       	ldi	r25, 0x09	; 9
    13ae:	93 87       	std	Z+11, r25	; 0x0b
    13b0:	82 87       	std	Z+10, r24	; 0x0a
    13b2:	08 95       	ret

000013b4 <printf_P>:
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	fe 01       	movw	r30, r28
    13c2:	37 96       	adiw	r30, 0x07	; 7
    13c4:	61 91       	ld	r22, Z+
    13c6:	71 91       	ld	r23, Z+
    13c8:	07 e3       	ldi	r16, 0x37	; 55
    13ca:	11 e0       	ldi	r17, 0x01	; 1
    13cc:	d8 01       	movw	r26, r16
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	dc 01       	movw	r26, r24
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	2c 91       	ld	r18, X
    13d8:	13 97       	sbiw	r26, 0x03	; 3
    13da:	28 60       	ori	r18, 0x08	; 8
    13dc:	13 96       	adiw	r26, 0x03	; 3
    13de:	2c 93       	st	X, r18
    13e0:	af 01       	movw	r20, r30
    13e2:	3a d0       	rcall	.+116    	; 0x1458 <vfprintf>
    13e4:	d8 01       	movw	r26, r16
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	23 81       	ldd	r18, Z+3	; 0x03
    13ec:	27 7f       	andi	r18, 0xF7	; 247
    13ee:	23 83       	std	Z+3, r18	; 0x03
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret

000013fa <puts_P>:
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
    1404:	e0 91 37 01 	lds	r30, 0x0137
    1408:	f0 91 38 01 	lds	r31, 0x0138
    140c:	83 81       	ldd	r24, Z+3	; 0x03
    140e:	81 ff       	sbrs	r24, 1
    1410:	1c c0       	rjmp	.+56     	; 0x144a <puts_P+0x50>
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	fe 01       	movw	r30, r28
    1418:	84 91       	lpm	r24, Z
    141a:	60 91 37 01 	lds	r22, 0x0137
    141e:	70 91 38 01 	lds	r23, 0x0138
    1422:	db 01       	movw	r26, r22
    1424:	18 96       	adiw	r26, 0x08	; 8
    1426:	ed 91       	ld	r30, X+
    1428:	fc 91       	ld	r31, X
    142a:	19 97       	sbiw	r26, 0x09	; 9
    142c:	88 23       	and	r24, r24
    142e:	39 f0       	breq	.+14     	; 0x143e <puts_P+0x44>
    1430:	09 95       	icall
    1432:	89 2b       	or	r24, r25
    1434:	11 f0       	breq	.+4      	; 0x143a <puts_P+0x40>
    1436:	0f ef       	ldi	r16, 0xFF	; 255
    1438:	1f ef       	ldi	r17, 0xFF	; 255
    143a:	21 96       	adiw	r28, 0x01	; 1
    143c:	ec cf       	rjmp	.-40     	; 0x1416 <puts_P+0x1c>
    143e:	8a e0       	ldi	r24, 0x0A	; 10
    1440:	09 95       	icall
    1442:	89 2b       	or	r24, r25
    1444:	11 f4       	brne	.+4      	; 0x144a <puts_P+0x50>
    1446:	c8 01       	movw	r24, r16
    1448:	02 c0       	rjmp	.+4      	; 0x144e <puts_P+0x54>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <vfprintf>:
    1458:	2f 92       	push	r2
    145a:	3f 92       	push	r3
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2c 97       	sbiw	r28, 0x0c	; 12
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	7c 01       	movw	r14, r24
    148e:	6b 01       	movw	r12, r22
    1490:	8a 01       	movw	r16, r20
    1492:	fc 01       	movw	r30, r24
    1494:	17 82       	std	Z+7, r1	; 0x07
    1496:	16 82       	std	Z+6, r1	; 0x06
    1498:	83 81       	ldd	r24, Z+3	; 0x03
    149a:	81 ff       	sbrs	r24, 1
    149c:	b0 c1       	rjmp	.+864    	; 0x17fe <vfprintf+0x3a6>
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	4c 01       	movw	r8, r24
    14a4:	f7 01       	movw	r30, r14
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	f6 01       	movw	r30, r12
    14aa:	93 fd       	sbrc	r25, 3
    14ac:	85 91       	lpm	r24, Z+
    14ae:	93 ff       	sbrs	r25, 3
    14b0:	81 91       	ld	r24, Z+
    14b2:	6f 01       	movw	r12, r30
    14b4:	88 23       	and	r24, r24
    14b6:	09 f4       	brne	.+2      	; 0x14ba <vfprintf+0x62>
    14b8:	9e c1       	rjmp	.+828    	; 0x17f6 <vfprintf+0x39e>
    14ba:	85 32       	cpi	r24, 0x25	; 37
    14bc:	39 f4       	brne	.+14     	; 0x14cc <vfprintf+0x74>
    14be:	93 fd       	sbrc	r25, 3
    14c0:	85 91       	lpm	r24, Z+
    14c2:	93 ff       	sbrs	r25, 3
    14c4:	81 91       	ld	r24, Z+
    14c6:	6f 01       	movw	r12, r30
    14c8:	85 32       	cpi	r24, 0x25	; 37
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <vfprintf+0x7c>
    14cc:	b7 01       	movw	r22, r14
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	c7 d1       	rcall	.+910    	; 0x1860 <fputc>
    14d2:	e8 cf       	rjmp	.-48     	; 0x14a4 <vfprintf+0x4c>
    14d4:	51 2c       	mov	r5, r1
    14d6:	31 2c       	mov	r3, r1
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	20 32       	cpi	r18, 0x20	; 32
    14dc:	a0 f4       	brcc	.+40     	; 0x1506 <vfprintf+0xae>
    14de:	8b 32       	cpi	r24, 0x2B	; 43
    14e0:	69 f0       	breq	.+26     	; 0x14fc <vfprintf+0xa4>
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <vfprintf+0x98>
    14e4:	80 32       	cpi	r24, 0x20	; 32
    14e6:	59 f0       	breq	.+22     	; 0x14fe <vfprintf+0xa6>
    14e8:	83 32       	cpi	r24, 0x23	; 35
    14ea:	69 f4       	brne	.+26     	; 0x1506 <vfprintf+0xae>
    14ec:	20 61       	ori	r18, 0x10	; 16
    14ee:	2c c0       	rjmp	.+88     	; 0x1548 <vfprintf+0xf0>
    14f0:	8d 32       	cpi	r24, 0x2D	; 45
    14f2:	39 f0       	breq	.+14     	; 0x1502 <vfprintf+0xaa>
    14f4:	80 33       	cpi	r24, 0x30	; 48
    14f6:	39 f4       	brne	.+14     	; 0x1506 <vfprintf+0xae>
    14f8:	21 60       	ori	r18, 0x01	; 1
    14fa:	26 c0       	rjmp	.+76     	; 0x1548 <vfprintf+0xf0>
    14fc:	22 60       	ori	r18, 0x02	; 2
    14fe:	24 60       	ori	r18, 0x04	; 4
    1500:	23 c0       	rjmp	.+70     	; 0x1548 <vfprintf+0xf0>
    1502:	28 60       	ori	r18, 0x08	; 8
    1504:	21 c0       	rjmp	.+66     	; 0x1548 <vfprintf+0xf0>
    1506:	27 fd       	sbrc	r18, 7
    1508:	27 c0       	rjmp	.+78     	; 0x1558 <vfprintf+0x100>
    150a:	30 ed       	ldi	r19, 0xD0	; 208
    150c:	38 0f       	add	r19, r24
    150e:	3a 30       	cpi	r19, 0x0A	; 10
    1510:	78 f4       	brcc	.+30     	; 0x1530 <vfprintf+0xd8>
    1512:	26 ff       	sbrs	r18, 6
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <vfprintf+0xca>
    1516:	fa e0       	ldi	r31, 0x0A	; 10
    1518:	5f 9e       	mul	r5, r31
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	53 2e       	mov	r5, r19
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <vfprintf+0xf0>
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	38 9e       	mul	r3, r24
    1526:	30 0d       	add	r19, r0
    1528:	11 24       	eor	r1, r1
    152a:	33 2e       	mov	r3, r19
    152c:	20 62       	ori	r18, 0x20	; 32
    152e:	0c c0       	rjmp	.+24     	; 0x1548 <vfprintf+0xf0>
    1530:	8e 32       	cpi	r24, 0x2E	; 46
    1532:	21 f4       	brne	.+8      	; 0x153c <vfprintf+0xe4>
    1534:	26 fd       	sbrc	r18, 6
    1536:	5f c1       	rjmp	.+702    	; 0x17f6 <vfprintf+0x39e>
    1538:	20 64       	ori	r18, 0x40	; 64
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <vfprintf+0xf0>
    153c:	8c 36       	cpi	r24, 0x6C	; 108
    153e:	11 f4       	brne	.+4      	; 0x1544 <vfprintf+0xec>
    1540:	20 68       	ori	r18, 0x80	; 128
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <vfprintf+0xf0>
    1544:	88 36       	cpi	r24, 0x68	; 104
    1546:	41 f4       	brne	.+16     	; 0x1558 <vfprintf+0x100>
    1548:	f6 01       	movw	r30, r12
    154a:	93 fd       	sbrc	r25, 3
    154c:	85 91       	lpm	r24, Z+
    154e:	93 ff       	sbrs	r25, 3
    1550:	81 91       	ld	r24, Z+
    1552:	6f 01       	movw	r12, r30
    1554:	81 11       	cpse	r24, r1
    1556:	c1 cf       	rjmp	.-126    	; 0x14da <vfprintf+0x82>
    1558:	98 2f       	mov	r25, r24
    155a:	9f 7d       	andi	r25, 0xDF	; 223
    155c:	95 54       	subi	r25, 0x45	; 69
    155e:	93 30       	cpi	r25, 0x03	; 3
    1560:	28 f4       	brcc	.+10     	; 0x156c <vfprintf+0x114>
    1562:	0c 5f       	subi	r16, 0xFC	; 252
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	ff e3       	ldi	r31, 0x3F	; 63
    1568:	f9 83       	std	Y+1, r31	; 0x01
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <vfprintf+0x12e>
    156c:	83 36       	cpi	r24, 0x63	; 99
    156e:	31 f0       	breq	.+12     	; 0x157c <vfprintf+0x124>
    1570:	83 37       	cpi	r24, 0x73	; 115
    1572:	71 f0       	breq	.+28     	; 0x1590 <vfprintf+0x138>
    1574:	83 35       	cpi	r24, 0x53	; 83
    1576:	09 f0       	breq	.+2      	; 0x157a <vfprintf+0x122>
    1578:	57 c0       	rjmp	.+174    	; 0x1628 <vfprintf+0x1d0>
    157a:	21 c0       	rjmp	.+66     	; 0x15be <vfprintf+0x166>
    157c:	f8 01       	movw	r30, r16
    157e:	80 81       	ld	r24, Z
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	0e 5f       	subi	r16, 0xFE	; 254
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	44 24       	eor	r4, r4
    1588:	43 94       	inc	r4
    158a:	51 2c       	mov	r5, r1
    158c:	54 01       	movw	r10, r8
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <vfprintf+0x160>
    1590:	38 01       	movw	r6, r16
    1592:	f2 e0       	ldi	r31, 0x02	; 2
    1594:	6f 0e       	add	r6, r31
    1596:	71 1c       	adc	r7, r1
    1598:	f8 01       	movw	r30, r16
    159a:	a0 80       	ld	r10, Z
    159c:	b1 80       	ldd	r11, Z+1	; 0x01
    159e:	26 ff       	sbrs	r18, 6
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x150>
    15a2:	65 2d       	mov	r22, r5
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x154>
    15a8:	6f ef       	ldi	r22, 0xFF	; 255
    15aa:	7f ef       	ldi	r23, 0xFF	; 255
    15ac:	c5 01       	movw	r24, r10
    15ae:	2c 87       	std	Y+12, r18	; 0x0c
    15b0:	4c d1       	rcall	.+664    	; 0x184a <strnlen>
    15b2:	2c 01       	movw	r4, r24
    15b4:	83 01       	movw	r16, r6
    15b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b8:	2f 77       	andi	r18, 0x7F	; 127
    15ba:	22 2e       	mov	r2, r18
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <vfprintf+0x192>
    15be:	38 01       	movw	r6, r16
    15c0:	f2 e0       	ldi	r31, 0x02	; 2
    15c2:	6f 0e       	add	r6, r31
    15c4:	71 1c       	adc	r7, r1
    15c6:	f8 01       	movw	r30, r16
    15c8:	a0 80       	ld	r10, Z
    15ca:	b1 80       	ldd	r11, Z+1	; 0x01
    15cc:	26 ff       	sbrs	r18, 6
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <vfprintf+0x17e>
    15d0:	65 2d       	mov	r22, r5
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0x182>
    15d6:	6f ef       	ldi	r22, 0xFF	; 255
    15d8:	7f ef       	ldi	r23, 0xFF	; 255
    15da:	c5 01       	movw	r24, r10
    15dc:	2c 87       	std	Y+12, r18	; 0x0c
    15de:	2a d1       	rcall	.+596    	; 0x1834 <strnlen_P>
    15e0:	2c 01       	movw	r4, r24
    15e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e4:	20 68       	ori	r18, 0x80	; 128
    15e6:	22 2e       	mov	r2, r18
    15e8:	83 01       	movw	r16, r6
    15ea:	23 fc       	sbrc	r2, 3
    15ec:	19 c0       	rjmp	.+50     	; 0x1620 <vfprintf+0x1c8>
    15ee:	83 2d       	mov	r24, r3
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	48 16       	cp	r4, r24
    15f4:	59 06       	cpc	r5, r25
    15f6:	a0 f4       	brcc	.+40     	; 0x1620 <vfprintf+0x1c8>
    15f8:	b7 01       	movw	r22, r14
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	30 d1       	rcall	.+608    	; 0x1860 <fputc>
    1600:	3a 94       	dec	r3
    1602:	f5 cf       	rjmp	.-22     	; 0x15ee <vfprintf+0x196>
    1604:	f5 01       	movw	r30, r10
    1606:	27 fc       	sbrc	r2, 7
    1608:	85 91       	lpm	r24, Z+
    160a:	27 fe       	sbrs	r2, 7
    160c:	81 91       	ld	r24, Z+
    160e:	5f 01       	movw	r10, r30
    1610:	b7 01       	movw	r22, r14
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	25 d1       	rcall	.+586    	; 0x1860 <fputc>
    1616:	31 10       	cpse	r3, r1
    1618:	3a 94       	dec	r3
    161a:	f1 e0       	ldi	r31, 0x01	; 1
    161c:	4f 1a       	sub	r4, r31
    161e:	51 08       	sbc	r5, r1
    1620:	41 14       	cp	r4, r1
    1622:	51 04       	cpc	r5, r1
    1624:	79 f7       	brne	.-34     	; 0x1604 <vfprintf+0x1ac>
    1626:	de c0       	rjmp	.+444    	; 0x17e4 <vfprintf+0x38c>
    1628:	84 36       	cpi	r24, 0x64	; 100
    162a:	11 f0       	breq	.+4      	; 0x1630 <vfprintf+0x1d8>
    162c:	89 36       	cpi	r24, 0x69	; 105
    162e:	31 f5       	brne	.+76     	; 0x167c <vfprintf+0x224>
    1630:	f8 01       	movw	r30, r16
    1632:	27 ff       	sbrs	r18, 7
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x1ec>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	0c 5f       	subi	r16, 0xFC	; 252
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <vfprintf+0x1fc>
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	88 27       	eor	r24, r24
    164a:	77 fd       	sbrc	r23, 7
    164c:	80 95       	com	r24
    164e:	98 2f       	mov	r25, r24
    1650:	0e 5f       	subi	r16, 0xFE	; 254
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	2f 76       	andi	r18, 0x6F	; 111
    1656:	b2 2e       	mov	r11, r18
    1658:	97 ff       	sbrs	r25, 7
    165a:	09 c0       	rjmp	.+18     	; 0x166e <vfprintf+0x216>
    165c:	90 95       	com	r25
    165e:	80 95       	com	r24
    1660:	70 95       	com	r23
    1662:	61 95       	neg	r22
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	20 68       	ori	r18, 0x80	; 128
    166c:	b2 2e       	mov	r11, r18
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	a4 01       	movw	r20, r8
    1674:	27 d1       	rcall	.+590    	; 0x18c4 <__ultoa_invert>
    1676:	a8 2e       	mov	r10, r24
    1678:	a8 18       	sub	r10, r8
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <vfprintf+0x2aa>
    167c:	85 37       	cpi	r24, 0x75	; 117
    167e:	29 f4       	brne	.+10     	; 0x168a <vfprintf+0x232>
    1680:	2f 7e       	andi	r18, 0xEF	; 239
    1682:	b2 2e       	mov	r11, r18
    1684:	2a e0       	ldi	r18, 0x0A	; 10
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	25 c0       	rjmp	.+74     	; 0x16d4 <vfprintf+0x27c>
    168a:	f2 2f       	mov	r31, r18
    168c:	f9 7f       	andi	r31, 0xF9	; 249
    168e:	bf 2e       	mov	r11, r31
    1690:	8f 36       	cpi	r24, 0x6F	; 111
    1692:	c1 f0       	breq	.+48     	; 0x16c4 <vfprintf+0x26c>
    1694:	18 f4       	brcc	.+6      	; 0x169c <vfprintf+0x244>
    1696:	88 35       	cpi	r24, 0x58	; 88
    1698:	79 f0       	breq	.+30     	; 0x16b8 <vfprintf+0x260>
    169a:	ad c0       	rjmp	.+346    	; 0x17f6 <vfprintf+0x39e>
    169c:	80 37       	cpi	r24, 0x70	; 112
    169e:	19 f0       	breq	.+6      	; 0x16a6 <vfprintf+0x24e>
    16a0:	88 37       	cpi	r24, 0x78	; 120
    16a2:	21 f0       	breq	.+8      	; 0x16ac <vfprintf+0x254>
    16a4:	a8 c0       	rjmp	.+336    	; 0x17f6 <vfprintf+0x39e>
    16a6:	2f 2f       	mov	r18, r31
    16a8:	20 61       	ori	r18, 0x10	; 16
    16aa:	b2 2e       	mov	r11, r18
    16ac:	b4 fe       	sbrs	r11, 4
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <vfprintf+0x272>
    16b0:	8b 2d       	mov	r24, r11
    16b2:	84 60       	ori	r24, 0x04	; 4
    16b4:	b8 2e       	mov	r11, r24
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <vfprintf+0x272>
    16b8:	24 ff       	sbrs	r18, 4
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <vfprintf+0x278>
    16bc:	9f 2f       	mov	r25, r31
    16be:	96 60       	ori	r25, 0x06	; 6
    16c0:	b9 2e       	mov	r11, r25
    16c2:	06 c0       	rjmp	.+12     	; 0x16d0 <vfprintf+0x278>
    16c4:	28 e0       	ldi	r18, 0x08	; 8
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <vfprintf+0x27c>
    16ca:	20 e1       	ldi	r18, 0x10	; 16
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0x27c>
    16d0:	20 e1       	ldi	r18, 0x10	; 16
    16d2:	32 e0       	ldi	r19, 0x02	; 2
    16d4:	f8 01       	movw	r30, r16
    16d6:	b7 fe       	sbrs	r11, 7
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <vfprintf+0x290>
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0c 5f       	subi	r16, 0xFC	; 252
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	06 c0       	rjmp	.+12     	; 0x16f4 <vfprintf+0x29c>
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 5f       	subi	r16, 0xFE	; 254
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	a4 01       	movw	r20, r8
    16f6:	e6 d0       	rcall	.+460    	; 0x18c4 <__ultoa_invert>
    16f8:	a8 2e       	mov	r10, r24
    16fa:	a8 18       	sub	r10, r8
    16fc:	fb 2d       	mov	r31, r11
    16fe:	ff 77       	andi	r31, 0x7F	; 127
    1700:	bf 2e       	mov	r11, r31
    1702:	b6 fe       	sbrs	r11, 6
    1704:	0b c0       	rjmp	.+22     	; 0x171c <vfprintf+0x2c4>
    1706:	2b 2d       	mov	r18, r11
    1708:	2e 7f       	andi	r18, 0xFE	; 254
    170a:	a5 14       	cp	r10, r5
    170c:	50 f4       	brcc	.+20     	; 0x1722 <vfprintf+0x2ca>
    170e:	b4 fe       	sbrs	r11, 4
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <vfprintf+0x2ce>
    1712:	b2 fc       	sbrc	r11, 2
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <vfprintf+0x2ce>
    1716:	2b 2d       	mov	r18, r11
    1718:	2e 7e       	andi	r18, 0xEE	; 238
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <vfprintf+0x2ce>
    171c:	7a 2c       	mov	r7, r10
    171e:	2b 2d       	mov	r18, r11
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <vfprintf+0x2d0>
    1722:	7a 2c       	mov	r7, r10
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <vfprintf+0x2d0>
    1726:	75 2c       	mov	r7, r5
    1728:	24 ff       	sbrs	r18, 4
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x2ee>
    172c:	fe 01       	movw	r30, r28
    172e:	ea 0d       	add	r30, r10
    1730:	f1 1d       	adc	r31, r1
    1732:	80 81       	ld	r24, Z
    1734:	80 33       	cpi	r24, 0x30	; 48
    1736:	11 f4       	brne	.+4      	; 0x173c <vfprintf+0x2e4>
    1738:	29 7e       	andi	r18, 0xE9	; 233
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x2f6>
    173c:	22 ff       	sbrs	r18, 2
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x2f4>
    1740:	73 94       	inc	r7
    1742:	73 94       	inc	r7
    1744:	04 c0       	rjmp	.+8      	; 0x174e <vfprintf+0x2f6>
    1746:	82 2f       	mov	r24, r18
    1748:	86 78       	andi	r24, 0x86	; 134
    174a:	09 f0       	breq	.+2      	; 0x174e <vfprintf+0x2f6>
    174c:	73 94       	inc	r7
    174e:	23 fd       	sbrc	r18, 3
    1750:	12 c0       	rjmp	.+36     	; 0x1776 <vfprintf+0x31e>
    1752:	20 ff       	sbrs	r18, 0
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x30a>
    1756:	5a 2c       	mov	r5, r10
    1758:	73 14       	cp	r7, r3
    175a:	18 f4       	brcc	.+6      	; 0x1762 <vfprintf+0x30a>
    175c:	53 0c       	add	r5, r3
    175e:	57 18       	sub	r5, r7
    1760:	73 2c       	mov	r7, r3
    1762:	73 14       	cp	r7, r3
    1764:	60 f4       	brcc	.+24     	; 0x177e <vfprintf+0x326>
    1766:	b7 01       	movw	r22, r14
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	2c 87       	std	Y+12, r18	; 0x0c
    176e:	78 d0       	rcall	.+240    	; 0x1860 <fputc>
    1770:	73 94       	inc	r7
    1772:	2c 85       	ldd	r18, Y+12	; 0x0c
    1774:	f6 cf       	rjmp	.-20     	; 0x1762 <vfprintf+0x30a>
    1776:	73 14       	cp	r7, r3
    1778:	10 f4       	brcc	.+4      	; 0x177e <vfprintf+0x326>
    177a:	37 18       	sub	r3, r7
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <vfprintf+0x328>
    177e:	31 2c       	mov	r3, r1
    1780:	24 ff       	sbrs	r18, 4
    1782:	11 c0       	rjmp	.+34     	; 0x17a6 <vfprintf+0x34e>
    1784:	b7 01       	movw	r22, r14
    1786:	80 e3       	ldi	r24, 0x30	; 48
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	2c 87       	std	Y+12, r18	; 0x0c
    178c:	69 d0       	rcall	.+210    	; 0x1860 <fputc>
    178e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1790:	22 ff       	sbrs	r18, 2
    1792:	16 c0       	rjmp	.+44     	; 0x17c0 <vfprintf+0x368>
    1794:	21 ff       	sbrs	r18, 1
    1796:	03 c0       	rjmp	.+6      	; 0x179e <vfprintf+0x346>
    1798:	88 e5       	ldi	r24, 0x58	; 88
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x34a>
    179e:	88 e7       	ldi	r24, 0x78	; 120
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	b7 01       	movw	r22, r14
    17a4:	0c c0       	rjmp	.+24     	; 0x17be <vfprintf+0x366>
    17a6:	82 2f       	mov	r24, r18
    17a8:	86 78       	andi	r24, 0x86	; 134
    17aa:	51 f0       	breq	.+20     	; 0x17c0 <vfprintf+0x368>
    17ac:	21 fd       	sbrc	r18, 1
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0x35c>
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <vfprintf+0x35e>
    17b4:	8b e2       	ldi	r24, 0x2B	; 43
    17b6:	27 fd       	sbrc	r18, 7
    17b8:	8d e2       	ldi	r24, 0x2D	; 45
    17ba:	b7 01       	movw	r22, r14
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	50 d0       	rcall	.+160    	; 0x1860 <fputc>
    17c0:	a5 14       	cp	r10, r5
    17c2:	30 f4       	brcc	.+12     	; 0x17d0 <vfprintf+0x378>
    17c4:	b7 01       	movw	r22, r14
    17c6:	80 e3       	ldi	r24, 0x30	; 48
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	4a d0       	rcall	.+148    	; 0x1860 <fputc>
    17cc:	5a 94       	dec	r5
    17ce:	f8 cf       	rjmp	.-16     	; 0x17c0 <vfprintf+0x368>
    17d0:	aa 94       	dec	r10
    17d2:	f4 01       	movw	r30, r8
    17d4:	ea 0d       	add	r30, r10
    17d6:	f1 1d       	adc	r31, r1
    17d8:	80 81       	ld	r24, Z
    17da:	b7 01       	movw	r22, r14
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	40 d0       	rcall	.+128    	; 0x1860 <fputc>
    17e0:	a1 10       	cpse	r10, r1
    17e2:	f6 cf       	rjmp	.-20     	; 0x17d0 <vfprintf+0x378>
    17e4:	33 20       	and	r3, r3
    17e6:	09 f4       	brne	.+2      	; 0x17ea <vfprintf+0x392>
    17e8:	5d ce       	rjmp	.-838    	; 0x14a4 <vfprintf+0x4c>
    17ea:	b7 01       	movw	r22, r14
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	37 d0       	rcall	.+110    	; 0x1860 <fputc>
    17f2:	3a 94       	dec	r3
    17f4:	f7 cf       	rjmp	.-18     	; 0x17e4 <vfprintf+0x38c>
    17f6:	f7 01       	movw	r30, r14
    17f8:	86 81       	ldd	r24, Z+6	; 0x06
    17fa:	97 81       	ldd	r25, Z+7	; 0x07
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <vfprintf+0x3aa>
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	9f ef       	ldi	r25, 0xFF	; 255
    1802:	2c 96       	adiw	r28, 0x0c	; 12
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	9f 90       	pop	r9
    1824:	8f 90       	pop	r8
    1826:	7f 90       	pop	r7
    1828:	6f 90       	pop	r6
    182a:	5f 90       	pop	r5
    182c:	4f 90       	pop	r4
    182e:	3f 90       	pop	r3
    1830:	2f 90       	pop	r2
    1832:	08 95       	ret

00001834 <strnlen_P>:
    1834:	fc 01       	movw	r30, r24
    1836:	05 90       	lpm	r0, Z+
    1838:	61 50       	subi	r22, 0x01	; 1
    183a:	70 40       	sbci	r23, 0x00	; 0
    183c:	01 10       	cpse	r0, r1
    183e:	d8 f7       	brcc	.-10     	; 0x1836 <strnlen_P+0x2>
    1840:	80 95       	com	r24
    1842:	90 95       	com	r25
    1844:	8e 0f       	add	r24, r30
    1846:	9f 1f       	adc	r25, r31
    1848:	08 95       	ret

0000184a <strnlen>:
    184a:	fc 01       	movw	r30, r24
    184c:	61 50       	subi	r22, 0x01	; 1
    184e:	70 40       	sbci	r23, 0x00	; 0
    1850:	01 90       	ld	r0, Z+
    1852:	01 10       	cpse	r0, r1
    1854:	d8 f7       	brcc	.-10     	; 0x184c <strnlen+0x2>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	8e 0f       	add	r24, r30
    185c:	9f 1f       	adc	r25, r31
    185e:	08 95       	ret

00001860 <fputc>:
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	18 2f       	mov	r17, r24
    186a:	09 2f       	mov	r16, r25
    186c:	eb 01       	movw	r28, r22
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	81 fd       	sbrc	r24, 1
    1872:	03 c0       	rjmp	.+6      	; 0x187a <fputc+0x1a>
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	9f ef       	ldi	r25, 0xFF	; 255
    1878:	20 c0       	rjmp	.+64     	; 0x18ba <fputc+0x5a>
    187a:	82 ff       	sbrs	r24, 2
    187c:	10 c0       	rjmp	.+32     	; 0x189e <fputc+0x3e>
    187e:	4e 81       	ldd	r20, Y+6	; 0x06
    1880:	5f 81       	ldd	r21, Y+7	; 0x07
    1882:	2c 81       	ldd	r18, Y+4	; 0x04
    1884:	3d 81       	ldd	r19, Y+5	; 0x05
    1886:	42 17       	cp	r20, r18
    1888:	53 07       	cpc	r21, r19
    188a:	7c f4       	brge	.+30     	; 0x18aa <fputc+0x4a>
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	9f 01       	movw	r18, r30
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	39 83       	std	Y+1, r19	; 0x01
    1898:	28 83       	st	Y, r18
    189a:	10 83       	st	Z, r17
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <fputc+0x4a>
    189e:	e8 85       	ldd	r30, Y+8	; 0x08
    18a0:	f9 85       	ldd	r31, Y+9	; 0x09
    18a2:	81 2f       	mov	r24, r17
    18a4:	09 95       	icall
    18a6:	89 2b       	or	r24, r25
    18a8:	29 f7       	brne	.-54     	; 0x1874 <fputc+0x14>
    18aa:	2e 81       	ldd	r18, Y+6	; 0x06
    18ac:	3f 81       	ldd	r19, Y+7	; 0x07
    18ae:	2f 5f       	subi	r18, 0xFF	; 255
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	3f 83       	std	Y+7, r19	; 0x07
    18b4:	2e 83       	std	Y+6, r18	; 0x06
    18b6:	81 2f       	mov	r24, r17
    18b8:	90 2f       	mov	r25, r16
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <__ultoa_invert>:
    18c4:	fa 01       	movw	r30, r20
    18c6:	aa 27       	eor	r26, r26
    18c8:	28 30       	cpi	r18, 0x08	; 8
    18ca:	51 f1       	breq	.+84     	; 0x1920 <__ultoa_invert+0x5c>
    18cc:	20 31       	cpi	r18, 0x10	; 16
    18ce:	81 f1       	breq	.+96     	; 0x1930 <__ultoa_invert+0x6c>
    18d0:	e8 94       	clt
    18d2:	6f 93       	push	r22
    18d4:	6e 7f       	andi	r22, 0xFE	; 254
    18d6:	6e 5f       	subi	r22, 0xFE	; 254
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	8f 4f       	sbci	r24, 0xFF	; 255
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	af 4f       	sbci	r26, 0xFF	; 255
    18e0:	b1 e0       	ldi	r27, 0x01	; 1
    18e2:	3e d0       	rcall	.+124    	; 0x1960 <__ultoa_invert+0x9c>
    18e4:	b4 e0       	ldi	r27, 0x04	; 4
    18e6:	3c d0       	rcall	.+120    	; 0x1960 <__ultoa_invert+0x9c>
    18e8:	67 0f       	add	r22, r23
    18ea:	78 1f       	adc	r23, r24
    18ec:	89 1f       	adc	r24, r25
    18ee:	9a 1f       	adc	r25, r26
    18f0:	a1 1d       	adc	r26, r1
    18f2:	68 0f       	add	r22, r24
    18f4:	79 1f       	adc	r23, r25
    18f6:	8a 1f       	adc	r24, r26
    18f8:	91 1d       	adc	r25, r1
    18fa:	a1 1d       	adc	r26, r1
    18fc:	6a 0f       	add	r22, r26
    18fe:	71 1d       	adc	r23, r1
    1900:	81 1d       	adc	r24, r1
    1902:	91 1d       	adc	r25, r1
    1904:	a1 1d       	adc	r26, r1
    1906:	20 d0       	rcall	.+64     	; 0x1948 <__ultoa_invert+0x84>
    1908:	09 f4       	brne	.+2      	; 0x190c <__ultoa_invert+0x48>
    190a:	68 94       	set
    190c:	3f 91       	pop	r19
    190e:	2a e0       	ldi	r18, 0x0A	; 10
    1910:	26 9f       	mul	r18, r22
    1912:	11 24       	eor	r1, r1
    1914:	30 19       	sub	r19, r0
    1916:	30 5d       	subi	r19, 0xD0	; 208
    1918:	31 93       	st	Z+, r19
    191a:	de f6       	brtc	.-74     	; 0x18d2 <__ultoa_invert+0xe>
    191c:	cf 01       	movw	r24, r30
    191e:	08 95       	ret
    1920:	46 2f       	mov	r20, r22
    1922:	47 70       	andi	r20, 0x07	; 7
    1924:	40 5d       	subi	r20, 0xD0	; 208
    1926:	41 93       	st	Z+, r20
    1928:	b3 e0       	ldi	r27, 0x03	; 3
    192a:	0f d0       	rcall	.+30     	; 0x194a <__ultoa_invert+0x86>
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__ultoa_invert+0x5c>
    192e:	f6 cf       	rjmp	.-20     	; 0x191c <__ultoa_invert+0x58>
    1930:	46 2f       	mov	r20, r22
    1932:	4f 70       	andi	r20, 0x0F	; 15
    1934:	40 5d       	subi	r20, 0xD0	; 208
    1936:	4a 33       	cpi	r20, 0x3A	; 58
    1938:	18 f0       	brcs	.+6      	; 0x1940 <__ultoa_invert+0x7c>
    193a:	49 5d       	subi	r20, 0xD9	; 217
    193c:	31 fd       	sbrc	r19, 1
    193e:	40 52       	subi	r20, 0x20	; 32
    1940:	41 93       	st	Z+, r20
    1942:	02 d0       	rcall	.+4      	; 0x1948 <__ultoa_invert+0x84>
    1944:	a9 f7       	brne	.-22     	; 0x1930 <__ultoa_invert+0x6c>
    1946:	ea cf       	rjmp	.-44     	; 0x191c <__ultoa_invert+0x58>
    1948:	b4 e0       	ldi	r27, 0x04	; 4
    194a:	a6 95       	lsr	r26
    194c:	97 95       	ror	r25
    194e:	87 95       	ror	r24
    1950:	77 95       	ror	r23
    1952:	67 95       	ror	r22
    1954:	ba 95       	dec	r27
    1956:	c9 f7       	brne	.-14     	; 0x194a <__ultoa_invert+0x86>
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	61 05       	cpc	r22, r1
    195c:	71 05       	cpc	r23, r1
    195e:	08 95       	ret
    1960:	9b 01       	movw	r18, r22
    1962:	ac 01       	movw	r20, r24
    1964:	0a 2e       	mov	r0, r26
    1966:	06 94       	lsr	r0
    1968:	57 95       	ror	r21
    196a:	47 95       	ror	r20
    196c:	37 95       	ror	r19
    196e:	27 95       	ror	r18
    1970:	ba 95       	dec	r27
    1972:	c9 f7       	brne	.-14     	; 0x1966 <__ultoa_invert+0xa2>
    1974:	62 0f       	add	r22, r18
    1976:	73 1f       	adc	r23, r19
    1978:	84 1f       	adc	r24, r20
    197a:	95 1f       	adc	r25, r21
    197c:	a0 1d       	adc	r26, r0
    197e:	08 95       	ret

00001980 <_exit>:
    1980:	f8 94       	cli

00001982 <__stop_program>:
    1982:	ff cf       	rjmp	.-2      	; 0x1982 <__stop_program>


AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001988  00001a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800122  00800122  00001a3e  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  000043c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  000054e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f4b4  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003808  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000565c  00000000  00000000  00018a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001868  00000000  00000000  0001e098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005102  00000000  00000000  0001f900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ada0  00000000  00000000  00024a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f7a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c1       	rjmp	.+626    	; 0x298 <__bad_interrupt>
      26:	00 00       	nop
      28:	9d c5       	rjmp	.+2874   	; 0xb64 <__vector_10>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c1       	rjmp	.+602    	; 0x298 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	27 c1       	rjmp	.+590    	; 0x2a4 <__vector_21>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1d c1       	rjmp	.+570    	; 0x298 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	19 c1       	rjmp	.+562    	; 0x298 <__bad_interrupt>
      66:	00 00       	nop
      68:	17 c1       	rjmp	.+558    	; 0x298 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	05 c1       	rjmp	.+522    	; 0x298 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c1       	rjmp	.+518    	; 0x298 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	01 c1       	rjmp	.+514    	; 0x298 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4559>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4552>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4547>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4545>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4542>:
				ReportSize     -= 2;
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4540>:
				ReportSize     -= 1;
				ReportData     += 1;
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4538>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 49 6e 70 75 74 20 44 65 76 69 63 65 2e 0d     o Input Device..
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d7:	0a 00                                               ..

000001d9 <__c.4536>:
     1d9:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e9:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f9:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000206 <__c.4529>:
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     206:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     216:	68 65 64 2e 0d 0a 00                                hed....

0000021d <__c.4524>:
     21d:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22d:	0d 0a 00                                            ...

00000230 <__c.4507>:
     230:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     240:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     250:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025c <__ctors_end>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     25c:	11 24       	eor	r1, r1
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e2       	ldi	r29, 0x20	; 32
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e8 e8       	ldi	r30, 0x88	; 136
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	f9 e1       	ldi	r31, 0x19	; 25
				break;
     272:	00 e0       	ldi	r16, 0x00	; 0

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	a2 32       	cpi	r26, 0x22	; 34
     27e:	b1 07       	cpc	r27, r17
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	11 e0       	ldi	r17, 0x01	; 1
				break;
     284:	a2 e2       	ldi	r26, 0x22	; 34

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a4 34       	cpi	r26, 0x44	; 68
     28e:	b1 07       	cpc	r27, r17
				break;
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	be d0       	rcall	.+380    	; 0x410 <main>
     294:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <LEDs_SetAllLEDs>:
     29a:	9b b1       	in	r25, 0x0b	; 11
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	98 2b       	or	r25, r24
				break;
     2a0:	9b b9       	out	0x0b, r25	; 11

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	08 95       	ret

000002a4 <__vector_21>:
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
				break;
     2ac:	11 24       	eor	r1, r1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	0b b6       	in	r0, 0x3b	; 59
     2b0:	0f 92       	push	r0
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
				break;
     2bc:	7f 93       	push	r23
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	cf 93       	push	r28
     2c8:	ef 93       	push	r30
     2ca:	ff 93       	push	r31
				break;
     2cc:	80 91 a7 00 	lds	r24, 0x00A7
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	90 91 aa 00 	lds	r25, 0x00AA
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	90 ff       	sbrs	r25, 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__vector_21+0x3a>
     2da:	90 e8       	ldi	r25, 0x80	; 128

				if (ParserData->UsingReportIDs)
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <__vector_21+0x3c>
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	c9 2f       	mov	r28, r25
     2e2:	c8 2b       	or	r28, r24
     2e4:	80 91 2f 01 	lds	r24, 0x012F
     2e8:	8b 30       	cpi	r24, 0x0B	; 11
     2ea:	09 f0       	breq	.+2      	; 0x2ee <__vector_21+0x4a>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	4c c0       	rjmp	.+152    	; 0x386 <__vector_21+0xe2>
     2ee:	80 91 0c 01 	lds	r24, 0x010C
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <__vector_21+0x54>
     2f6:	47 c0       	rjmp	.+142    	; 0x386 <__vector_21+0xe2>
     2f8:	80 91 00 01 	lds	r24, 0x0100
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 93 a7 00 	sts	0x00A7, r24
     302:	80 91 a9 00 	lds	r24, 0x00A9
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     306:	8f 7b       	andi	r24, 0xBF	; 191
     308:	80 93 a9 00 	sts	0x00A9, r24
     30c:	90 91 a6 00 	lds	r25, 0x00A6
     310:	80 91 a9 00 	lds	r24, 0x00A9
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 a9 00 	sts	0x00A9, r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31a:	90 ff       	sbrs	r25, 0
     31c:	34 c0       	rjmp	.+104    	; 0x386 <__vector_21+0xe2>
     31e:	80 91 af 00 	lds	r24, 0x00AF
     322:	20 91 af 00 	lds	r18, 0x00AF
     326:	80 91 f6 00 	lds	r24, 0x00F6
     32a:	90 91 f7 00 	lds	r25, 0x00F7
     32e:	89 2b       	or	r24, r25
     330:	79 f4       	brne	.+30     	; 0x350 <__vector_21+0xac>
     332:	80 91 a9 00 	lds	r24, 0x00A9
     336:	8f 7b       	andi	r24, 0xBF	; 191
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	80 93 a9 00 	sts	0x00A9, r24
     33c:	80 91 a6 00 	lds	r24, 0x00A6
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     340:	8e 77       	andi	r24, 0x7E	; 126
     342:	80 93 a6 00 	sts	0x00A6, r24
     346:	80 91 a9 00 	lds	r24, 0x00A9
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	80 93 a9 00 	sts	0x00A9, r24
     350:	82 2f       	mov	r24, r18
     352:	99 27       	eor	r25, r25
     354:	87 fd       	sbrc	r24, 7
     356:	90 95       	com	r25
     358:	80 58       	subi	r24, 0x80	; 128
     35a:	90 93 99 00 	sts	0x0099, r25
     35e:	80 93 98 00 	sts	0x0098, r24
     362:	21 31       	cpi	r18, 0x11	; 17
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	44 f4       	brge	.+16     	; 0x376 <__vector_21+0xd2>
     366:	29 30       	cpi	r18, 0x09	; 9
     368:	44 f4       	brge	.+16     	; 0x37a <__vector_21+0xd6>
     36a:	25 30       	cpi	r18, 0x05	; 5
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	44 f4       	brge	.+16     	; 0x37e <__vector_21+0xda>
     36e:	23 30       	cpi	r18, 0x03	; 3
     370:	44 f4       	brge	.+16     	; 0x382 <__vector_21+0xde>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	07 c0       	rjmp	.+14     	; 0x384 <__vector_21+0xe0>
     376:	80 ef       	ldi	r24, 0xF0	; 240

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_21+0xe0>
     37a:	80 eb       	ldi	r24, 0xB0	; 176
     37c:	03 c0       	rjmp	.+6      	; 0x384 <__vector_21+0xe0>
     37e:	80 e3       	ldi	r24, 0x30	; 48
     380:	01 c0       	rjmp	.+2      	; 0x384 <__vector_21+0xe0>
     382:	80 e1       	ldi	r24, 0x10	; 16
     384:	8a df       	rcall	.-236    	; 0x29a <LEDs_SetAllLEDs>
     386:	cf 70       	andi	r28, 0x0F	; 15
				break;
     388:	c0 93 a7 00 	sts	0x00A7, r28

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	cf 91       	pop	r28
     392:	bf 91       	pop	r27
     394:	af 91       	pop	r26
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	7f 91       	pop	r23
     39c:	6f 91       	pop	r22
     39e:	5f 91       	pop	r21
     3a0:	4f 91       	pop	r20
     3a2:	3f 91       	pop	r19
     3a4:	2f 91       	pop	r18
     3a6:	0f 90       	pop	r0
     3a8:	0b be       	out	0x3b, r0	; 59
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
				break;
     3b0:	1f 90       	pop	r1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	18 95       	reti

000003b4 <SetupHardware>:
     3b4:	84 b7       	in	r24, 0x34	; 52
     3b6:	87 7f       	andi	r24, 0xF7	; 247
     3b8:	84 bf       	out	0x34, r24	; 52
     3ba:	88 e1       	ldi	r24, 0x18	; 24
     3bc:	0f b6       	in	r0, 0x3f	; 63
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	f8 94       	cli
     3c0:	80 93 60 00 	sts	0x0060, r24
     3c4:	10 92 60 00 	sts	0x0060, r1
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	80 e8       	ldi	r24, 0x80	; 128
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	80 93 61 00 	sts	0x0061, r24

					while (CurrCollectionPath->Parent != NULL)
     3d6:	90 93 61 00 	sts	0x0061, r25
     3da:	0f be       	out	0x3f, r0	; 63
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 cd 00 	sts	0x00CD, r25
     3e4:	80 93 cc 00 	sts	0x00CC, r24
     3e8:	86 e0       	ldi	r24, 0x06	; 6
     3ea:	80 93 ca 00 	sts	0x00CA, r24
     3ee:	10 92 c8 00 	sts	0x00C8, r1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f2:	88 e1       	ldi	r24, 0x18	; 24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	80 93 c9 00 	sts	0x00C9, r24
     3f8:	53 9a       	sbi	0x0a, 3	; 10
     3fa:	5a 9a       	sbi	0x0b, 2	; 11
     3fc:	8a b1       	in	r24, 0x0a	; 10
     3fe:	80 6f       	ori	r24, 0xF0	; 240
     400:	8a b9       	out	0x0a, r24	; 10
     402:	8b b1       	in	r24, 0x0b	; 11
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	8b b9       	out	0x0b, r24	; 11
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	92 d3       	rcall	.+1828   	; 0xb2e <USB_Init>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	b6 c7       	rjmp	.+3948   	; 0x137c <Serial_CreateStream>

00000410 <main>:
     410:	d1 df       	rcall	.-94     	; 0x3b4 <SetupHardware>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	f3 d7       	rcall	.+4070   	; 0x13fe <puts_P>
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	3f df       	rcall	.-386    	; 0x29a <LEDs_SetAllLEDs>
     41c:	78 94       	sei
     41e:	40 d6       	rcall	.+3200   	; 0x10a0 <USB_USBTask>

				if (UsageListSize)
     420:	fe cf       	rjmp	.-4      	; 0x41e <main+0xe>

00000422 <EVENT_USB_Host_DeviceAttached>:
     422:	8d e1       	ldi	r24, 0x1D	; 29
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	eb d7       	rcall	.+4054   	; 0x13fe <puts_P>
     428:	80 ea       	ldi	r24, 0xA0	; 160
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	37 cf       	rjmp	.-402    	; 0x29a <LEDs_SetAllLEDs>

0000042c <EVENT_USB_Host_DeviceUnattached>:
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	e6 d7       	rcall	.+4044   	; 0x13fe <puts_P>
     432:	80 e1       	ldi	r24, 0x10	; 16
     434:	32 cf       	rjmp	.-412    	; 0x29a <LEDs_SetAllLEDs>

00000436 <EVENT_USB_Host_DeviceEnumerationComplete>:
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	c5 50       	subi	r28, 0x05	; 5
     448:	d2 40       	sbci	r29, 0x02	; 2
     44a:	0f b6       	in	r0, 0x3f	; 63
					  UsageList[i - 1] = UsageList[i];
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	80 ea       	ldi	r24, 0xA0	; 160
     456:	21 df       	rcall	.-446    	; 0x29a <LEDs_SetAllLEDs>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	32 e0       	ldi	r19, 0x02	; 2
     45c:	ae 01       	movw	r20, r28
     45e:	4f 5f       	subi	r20, 0xFF	; 255
     460:	5f 4f       	sbci	r21, 0xFF	; 255
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	be 01       	movw	r22, r28
     464:	6c 5f       	subi	r22, 0xFC	; 252
     466:	7d 4f       	sbci	r23, 0xFD	; 253
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	2b d4       	rcall	.+2134   	; 0xcc2 <USB_Host_GetDeviceConfigDescriptor>
     46c:	88 23       	and	r24, r24
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	19 f0       	breq	.+6      	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     470:	89 ed       	ldi	r24, 0xD9	; 217
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	17 c0       	rjmp	.+46     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     476:	cc 5f       	subi	r28, 0xFC	; 252
     478:	dd 4f       	sbci	r29, 0xFD	; 253
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	c4 50       	subi	r28, 0x04	; 4
     480:	d2 40       	sbci	r29, 0x02	; 2
     482:	ae 01       	movw	r20, r28
     484:	4f 5f       	subi	r20, 0xFF	; 255
     486:	5f 4f       	sbci	r21, 0xFF	; 255
     488:	80 e0       	ldi	r24, 0x00	; 0
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	46 d6       	rcall	.+3212   	; 0x111a <Audio_Host_ConfigurePipes>
     48e:	88 23       	and	r24, r24
     490:	19 f0       	breq	.+6      	; 0x498 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     492:	87 ea       	ldi	r24, 0xA7	; 167
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     498:	81 e0       	ldi	r24, 0x01	; 1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	c2 d5       	rcall	.+2948   	; 0x1020 <USB_Host_SetDeviceConfiguration>
     49c:	88 23       	and	r24, r24
     49e:	29 f0       	breq	.+10     	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4a0:	81 e8       	ldi	r24, 0x81	; 129
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	ac d7       	rcall	.+3928   	; 0x13fe <puts_P>
     4a6:	80 e9       	ldi	r24, 0x90	; 144
     4a8:	43 c0       	rjmp	.+134    	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
     4aa:	61 e0       	ldi	r22, 0x01	; 1
				break;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	04 d7       	rcall	.+3592   	; 0x12ba <Audio_Host_StartStopStreaming>
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     4b6:	82 e6       	ldi	r24, 0x62	; 98
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	22 c0       	rjmp	.+68     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
     4bc:	80 e8       	ldi	r24, 0x80	; 128
     4be:	cf 5f       	subi	r28, 0xFF	; 255
     4c0:	dd 4f       	sbci	r29, 0xFD	; 253
     4c2:	88 83       	st	Y, r24
     4c4:	c1 50       	subi	r28, 0x01	; 1
     4c6:	d2 40       	sbci	r29, 0x02	; 2
     4c8:	8b eb       	ldi	r24, 0xBB	; 187
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	ce 5f       	subi	r28, 0xFE	; 254
     4cc:	dd 4f       	sbci	r29, 0xFD	; 253
     4ce:	88 83       	st	Y, r24
     4d0:	c2 50       	subi	r28, 0x02	; 2
     4d2:	d2 40       	sbci	r29, 0x02	; 2
     4d4:	cd 5f       	subi	r28, 0xFD	; 253
     4d6:	dd 4f       	sbci	r29, 0xFD	; 253
     4d8:	18 82       	st	Y, r1
     4da:	c3 50       	subi	r28, 0x03	; 3
     4dc:	d2 40       	sbci	r29, 0x02	; 2
     4de:	ce 01       	movw	r24, r28
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	9d 4f       	sbci	r25, 0xFD	; 253
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	7c 01       	movw	r14, r24
     4e6:	03 e0       	ldi	r16, 0x03	; 3
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	60 91 00 01 	lds	r22, 0x0100
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	ee d6       	rcall	.+3548   	; 0x12d4 <Audio_Host_GetSetEndpointProperty>
     4f8:	88 23       	and	r24, r24
     4fa:	41 f0       	breq	.+16     	; 0x50c <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
     4fc:	88 e3       	ldi	r24, 0x38	; 56
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	7e d7       	rcall	.+3836   	; 0x13fe <puts_P>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 e9       	ldi	r24, 0x90	; 144
     504:	ca de       	rcall	.-620    	; 0x29a <LEDs_SetAllLEDs>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	8b d5       	rcall	.+2838   	; 0x1020 <USB_Host_SetDeviceConfiguration>
     50a:	13 c0       	rjmp	.+38     	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	80 93 6e 00 	sts	0x006E, r24
     512:	93 e1       	ldi	r25, 0x13	; 19
     514:	97 bd       	out	0x27, r25	; 39
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	84 bd       	out	0x24, r24	; 36
     518:	85 bd       	out	0x25, r24	; 37
     51a:	3e 9a       	sbi	0x07, 6	; 7
     51c:	81 ec       	ldi	r24, 0xC1	; 193

					if (UsageListSize)
     51e:	80 93 90 00 	sts	0x0090, r24
     522:	89 e0       	ldi	r24, 0x09	; 9
     524:	80 93 91 00 	sts	0x0091, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	8d e1       	ldi	r24, 0x1D	; 29
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	68 d7       	rcall	.+3792   	; 0x13fe <puts_P>
     52e:	80 e6       	ldi	r24, 0x60	; 96
     530:	b4 de       	rcall	.-664    	; 0x29a <LEDs_SetAllLEDs>
     532:	cb 5f       	subi	r28, 0xFB	; 251
     534:	dd 4f       	sbci	r29, 0xFD	; 253
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
						  UsageList[i - 1] = UsageList[i];
     54a:	ef 90       	pop	r14
     54c:	08 95       	ret

0000054e <EVENT_USB_Host_HostError>:
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	1f 92       	push	r1
     554:	cd b7       	in	r28, 0x3d	; 61
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	de b7       	in	r29, 0x3e	; 62
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	81 d2       	rcall	.+1282   	; 0xa5e <USB_Disable>
     55c:	1f 92       	push	r1
     55e:	89 81       	ldd	r24, Y+1	; 0x01
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	8f 93       	push	r24
     562:	8e ee       	ldi	r24, 0xEE	; 238
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	26 d7       	rcall	.+3660   	; 0x13b8 <printf_P>
     56c:	80 e9       	ldi	r24, 0x90	; 144
     56e:	95 de       	rcall	.-726    	; 0x29a <LEDs_SetAllLEDs>
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	ff cf       	rjmp	.-2      	; 0x578 <EVENT_USB_Host_HostError+0x2a>

0000057a <EVENT_USB_Host_DeviceEnumerationFailed>:
     57a:	90 91 2f 01 	lds	r25, 0x012F
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	1f 92       	push	r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	9f 93       	push	r25
     582:	1f 92       	push	r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	6f 93       	push	r22
     586:	1f 92       	push	r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	8f 93       	push	r24
     58a:	88 e9       	ldi	r24, 0x98	; 152
     58c:	90 e0       	ldi	r25, 0x00	; 0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	12 d7       	rcall	.+3620   	; 0x13b8 <printf_P>
     594:	8d b7       	in	r24, 0x3d	; 61
     596:	9e b7       	in	r25, 0x3e	; 62
     598:	08 96       	adiw	r24, 0x08	; 8
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	9e bf       	out	0x3e, r25	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	8d bf       	out	0x3d, r24	; 61
     5a4:	80 e9       	ldi	r24, 0x90	; 144
     5a6:	79 ce       	rjmp	.-782    	; 0x29a <LEDs_SetAllLEDs>

000005a8 <USB_Host_ResetDevice>:
     5a8:	80 91 9e 00 	lds	r24, 0x009E

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	90 91 a0 00 	lds	r25, 0x00A0
     5b2:	9d 7f       	andi	r25, 0xFD	; 253
     5b4:	90 93 a0 00 	sts	0x00A0, r25
     5b8:	90 91 9e 00 	lds	r25, 0x009E

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	92 60       	ori	r25, 0x02	; 2
     5be:	90 93 9e 00 	sts	0x009E, r25
     5c2:	90 91 9e 00 	lds	r25, 0x009E
     5c6:	91 fd       	sbrc	r25, 1
     5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <USB_Host_ResetDevice+0x1a>
     5ca:	90 91 9e 00 	lds	r25, 0x009E
     5ce:	91 60       	ori	r25, 0x01	; 1
     5d0:	90 93 9e 00 	sts	0x009E, r25
     5d4:	10 92 25 01 	sts	0x0125, r1
     5d8:	90 91 a0 00 	lds	r25, 0x00A0
     5dc:	90 72       	andi	r25, 0x20	; 32
     5de:	20 91 a0 00 	lds	r18, 0x00A0
     5e2:	2f 7d       	andi	r18, 0xDF	; 223
     5e4:	20 93 a0 00 	sts	0x00A0, r18
     5e8:	20 91 9f 00 	lds	r18, 0x009F
     5ec:	2f 7d       	andi	r18, 0xDF	; 223
     5ee:	20 93 9f 00 	sts	0x009F, r18
     5f2:	2a e0       	ldi	r18, 0x0A	; 10

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	30 91 9f 00 	lds	r19, 0x009F
     5f8:	35 ff       	sbrs	r19, 5
     5fa:	0b c0       	rjmp	.+22     	; 0x612 <USB_Host_ResetDevice+0x6a>
     5fc:	20 91 9f 00 	lds	r18, 0x009F
					  return HID_PARSE_InsufficientReportItems;
     600:	2f 7d       	andi	r18, 0xDF	; 223

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	20 93 9f 00 	sts	0x009F, r18
     606:	20 91 9f 00 	lds	r18, 0x009F
     60a:	2d 7f       	andi	r18, 0xFD	; 253
     60c:	20 93 9f 00 	sts	0x009F, r18
     610:	08 c0       	rjmp	.+16     	; 0x622 <USB_Host_ResetDevice+0x7a>
     612:	ef ec       	ldi	r30, 0xCF	; 207
     614:	f7 e0       	ldi	r31, 0x07	; 7
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <USB_Host_ResetDevice+0x6e>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <USB_Host_ResetDevice+0x74>
     61c:	00 00       	nop
     61e:	21 50       	subi	r18, 0x01	; 1
     620:	49 f7       	brne	.-46     	; 0x5f4 <USB_Host_ResetDevice+0x4c>
     622:	99 23       	and	r25, r25
     624:	29 f0       	breq	.+10     	; 0x630 <USB_Host_ResetDevice+0x88>
     626:	90 91 a0 00 	lds	r25, 0x00A0
     62a:	90 62       	ori	r25, 0x20	; 32
     62c:	90 93 a0 00 	sts	0x00A0, r25
     630:	81 11       	cpse	r24, r1
     632:	05 c0       	rjmp	.+10     	; 0x63e <USB_Host_ResetDevice+0x96>
     634:	80 91 9e 00 	lds	r24, 0x009E
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	80 93 9e 00 	sts	0x009E, r24
     63e:	80 91 a0 00 	lds	r24, 0x00A0
     642:	82 60       	ori	r24, 0x02	; 2
     644:	80 93 a0 00 	sts	0x00A0, r24
     648:	08 95       	ret

0000064a <USB_Host_WaitMS>:
     64a:	20 91 9e 00 	lds	r18, 0x009E
     64e:	21 70       	andi	r18, 0x01	; 1
     650:	90 91 a0 00 	lds	r25, 0x00A0
     654:	90 72       	andi	r25, 0x20	; 32
     656:	30 91 a0 00 	lds	r19, 0x00A0
     65a:	3f 7d       	andi	r19, 0xDF	; 223
     65c:	30 93 a0 00 	sts	0x00A0, r19
     660:	30 91 9f 00 	lds	r19, 0x009F
     664:	3f 7d       	andi	r19, 0xDF	; 223
     666:	30 93 9f 00 	sts	0x009F, r19
     66a:	30 91 9e 00 	lds	r19, 0x009E
     66e:	31 60       	ori	r19, 0x01	; 1
     670:	30 93 9e 00 	sts	0x009E, r19
     674:	88 23       	and	r24, r24
     676:	39 f1       	breq	.+78     	; 0x6c6 <USB_Host_WaitMS+0x7c>
     678:	30 91 9f 00 	lds	r19, 0x009F
     67c:	35 ff       	sbrs	r19, 5
     67e:	06 c0       	rjmp	.+12     	; 0x68c <USB_Host_WaitMS+0x42>
     680:	30 91 9f 00 	lds	r19, 0x009F
     684:	3f 7d       	andi	r19, 0xDF	; 223
     686:	30 93 9f 00 	sts	0x009F, r19
					  ParserData->TotalReportItems++;
     68a:	81 50       	subi	r24, 0x01	; 1
     68c:	30 91 2f 01 	lds	r19, 0x012F
     690:	31 30       	cpi	r19, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	c1 f0       	breq	.+48     	; 0x6c4 <USB_Host_WaitMS+0x7a>
     694:	30 91 a6 00 	lds	r19, 0x00A6
     698:	34 ff       	sbrs	r19, 4
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <USB_Host_WaitMS+0x64>
     69c:	10 92 f5 00 	sts	0x00F5, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	80 91 a6 00 	lds	r24, 0x00A6
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	8f 7e       	andi	r24, 0xEF	; 239
     6a6:	80 93 a6 00 	sts	0x00A6, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0c c0       	rjmp	.+24     	; 0x6c6 <USB_Host_WaitMS+0x7c>
     6ae:	30 91 a6 00 	lds	r19, 0x00A6
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	31 ff       	sbrs	r19, 1
     6b4:	df cf       	rjmp	.-66     	; 0x674 <USB_Host_WaitMS+0x2a>
     6b6:	80 91 a6 00 	lds	r24, 0x00A6
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	8d 7f       	andi	r24, 0xFD	; 253
     6bc:	80 93 a6 00 	sts	0x00A6, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6c0:	83 e0       	ldi	r24, 0x03	; 3
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <USB_Host_WaitMS+0x7c>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	21 11       	cpse	r18, r1
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <USB_Host_WaitMS+0x8a>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	20 91 9e 00 	lds	r18, 0x009E

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	2e 7f       	andi	r18, 0xFE	; 254
     6d0:	20 93 9e 00 	sts	0x009E, r18
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	99 23       	and	r25, r25
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	29 f0       	breq	.+10     	; 0x6e2 <USB_Host_WaitMS+0x98>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	90 91 a0 00 	lds	r25, 0x00A0
     6dc:	90 62       	ori	r25, 0x20	; 32
     6de:	90 93 a0 00 	sts	0x00A0, r25
     6e2:	08 95       	ret

000006e4 <USB_Host_ProcessNextHostState>:
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	28 97       	sbiw	r28, 0x08	; 8
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	80 91 2f 01 	lds	r24, 0x012F
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	09 f4       	brne	.+2      	; 0x706 <USB_Host_ProcessNextHostState+0x22>
     704:	9c c0       	rjmp	.+312    	; 0x83e <USB_Host_ProcessNextHostState+0x15a>
     706:	68 f4       	brcc	.+26     	; 0x722 <USB_Host_ProcessNextHostState+0x3e>
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	e1 f1       	breq	.+120    	; 0x784 <USB_Host_ProcessNextHostState+0xa0>
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     70c:	18 f4       	brcc	.+6      	; 0x714 <USB_Host_ProcessNextHostState+0x30>
     70e:	88 23       	and	r24, r24
     710:	d9 f0       	breq	.+54     	; 0x748 <USB_Host_ProcessNextHostState+0x64>
     712:	ff c0       	rjmp	.+510    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	09 f4       	brne	.+2      	; 0x71a <USB_Host_ProcessNextHostState+0x36>
     718:	3f c0       	rjmp	.+126    	; 0x798 <USB_Host_ProcessNextHostState+0xb4>
     71a:	84 30       	cpi	r24, 0x04	; 4
     71c:	09 f4       	brne	.+2      	; 0x720 <USB_Host_ProcessNextHostState+0x3c>
     71e:	67 c0       	rjmp	.+206    	; 0x7ee <USB_Host_ProcessNextHostState+0x10a>
     720:	f8 c0       	rjmp	.+496    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     722:	87 30       	cpi	r24, 0x07	; 7
     724:	09 f4       	brne	.+2      	; 0x728 <USB_Host_ProcessNextHostState+0x44>
     726:	a6 c0       	rjmp	.+332    	; 0x874 <USB_Host_ProcessNextHostState+0x190>
     728:	08 f4       	brcc	.+2      	; 0x72c <USB_Host_ProcessNextHostState+0x48>
     72a:	96 c0       	rjmp	.+300    	; 0x858 <USB_Host_ProcessNextHostState+0x174>
     72c:	88 30       	cpi	r24, 0x08	; 8
     72e:	09 f4       	brne	.+2      	; 0x732 <USB_Host_ProcessNextHostState+0x4e>
     730:	bf c0       	rjmp	.+382    	; 0x8b0 <USB_Host_ProcessNextHostState+0x1cc>
     732:	89 30       	cpi	r24, 0x09	; 9
     734:	09 f0       	breq	.+2      	; 0x738 <USB_Host_ProcessNextHostState+0x54>
     736:	ed c0       	rjmp	.+474    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	80 93 2f 01 	sts	0x012F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     744:	78 de       	rcall	.-784    	; 0x436 <EVENT_USB_Host_DeviceEnumerationComplete>
     746:	e5 c0       	rjmp	.+458    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
			break;
     748:	00 91 23 01 	lds	r16, 0x0123
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     74c:	10 91 24 01 	lds	r17, 0x0124
     750:	01 15       	cp	r16, r1
     752:	11 05       	cpc	r17, r1
     754:	09 f4       	brne	.+2      	; 0x758 <USB_Host_ProcessNextHostState+0x74>
     756:	dd c0       	rjmp	.+442    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     758:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     75a:	77 df       	rcall	.-274    	; 0x64a <USB_Host_WaitMS>
     75c:	88 23       	and	r24, r24
     75e:	31 f0       	breq	.+12     	; 0x76c <USB_Host_ProcessNextHostState+0x88>
     760:	90 91 22 01 	lds	r25, 0x0122
				{
					USB_HostState = PostWaitState;
     764:	90 93 2f 01 	sts	0x012F, r25
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	c5 c0       	rjmp	.+394    	; 0x8f6 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     76c:	01 50       	subi	r16, 0x01	; 1
					break;
     76e:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     770:	10 93 24 01 	sts	0x0124, r17
     774:	00 93 23 01 	sts	0x0123, r16
     778:	01 2b       	or	r16, r17
     77a:	09 f0       	breq	.+2      	; 0x77e <USB_Host_ProcessNextHostState+0x9a>
     77c:	ca c0       	rjmp	.+404    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     77e:	80 91 22 01 	lds	r24, 0x0122
				  USB_HostState = PostWaitState;
     782:	07 c0       	rjmp	.+14     	; 0x792 <USB_Host_ProcessNextHostState+0xae>
     784:	88 ee       	ldi	r24, 0xE8	; 232
     786:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     788:	90 93 24 01 	sts	0x0124, r25
     78c:	80 93 23 01 	sts	0x0123, r24
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 2f 01 	sts	0x012F, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     796:	bd c0       	rjmp	.+378    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     798:	80 91 23 01 	lds	r24, 0x0123
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     79c:	90 91 24 01 	lds	r25, 0x0124
     7a0:	9c 01       	movw	r18, r24
     7a2:	21 50       	subi	r18, 0x01	; 1
     7a4:	31 09       	sbc	r19, r1
     7a6:	30 93 24 01 	sts	0x0124, r19
     7aa:	20 93 23 01 	sts	0x0123, r18
     7ae:	89 2b       	or	r24, r25
     7b0:	39 f0       	breq	.+14     	; 0x7c0 <USB_Host_ProcessNextHostState+0xdc>
     7b2:	8f ec       	ldi	r24, 0xCF	; 207
     7b4:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <USB_Host_ProcessNextHostState+0xd2>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <USB_Host_ProcessNextHostState+0xd8>
     7bc:	00 00       	nop
     7be:	a9 c0       	rjmp	.+338    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     7c0:	77 98       	cbi	0x0e, 7	; 14
     7c2:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7c6:	80 61       	ori	r24, 0x10	; 16
     7c8:	80 93 d8 00 	sts	0x00D8, r24
     7cc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7d0:	8b 7f       	andi	r24, 0xFB	; 251
     7d2:	80 93 dd 00 	sts	0x00DD, r24
     7d6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     7da:	80 61       	ori	r24, 0x10	; 16
     7dc:	80 93 d7 00 	sts	0x00D7, r24
     7e0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7e4:	82 60       	ori	r24, 0x02	; 2
     7e6:	80 93 dd 00 	sts	0x00DD, r24
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	d2 cf       	rjmp	.-92     	; 0x792 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7ee:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7f2:	80 ff       	sbrs	r24, 0
     7f4:	8e c0       	rjmp	.+284    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7f6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	80 93 9f 00 	sts	0x009F, r24
     800:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     804:	8d 7f       	andi	r24, 0xFD	; 253
     806:	80 93 9f 00 	sts	0x009F, r24
     80a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     80e:	8d 7f       	andi	r24, 0xFD	; 253
     810:	80 93 df 00 	sts	0x00DF, r24
     814:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     818:	82 60       	ori	r24, 0x02	; 2
     81a:	80 93 de 00 	sts	0x00DE, r24
     81e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 93 9e 00 	sts	0x009E, r24
     828:	06 d1       	rcall	.+524    	; 0xa36 <Pipe_ClearPipes>
     82a:	10 92 2f 01 	sts	0x012F, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     82e:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 24 01 	sts	0x0124, r25
     836:	80 93 23 01 	sts	0x0123, r24
     83a:	85 e0       	ldi	r24, 0x05	; 5
     83c:	0a c0       	rjmp	.+20     	; 0x852 <USB_Host_ProcessNextHostState+0x16e>
     83e:	b4 de       	rcall	.-664    	; 0x5a8 <USB_Host_ResetDevice>
     840:	10 92 2f 01 	sts	0x012F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     844:	88 ec       	ldi	r24, 0xC8	; 200
     846:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     848:	90 93 24 01 	sts	0x0124, r25
     84c:	80 93 23 01 	sts	0x0123, r24
     850:	86 e0       	ldi	r24, 0x06	; 6
     852:	80 93 22 01 	sts	0x0122, r24
     856:	5d c0       	rjmp	.+186    	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     858:	01 e0       	ldi	r16, 0x01	; 1
     85a:	20 e4       	ldi	r18, 0x40	; 64
     85c:	30 e0       	ldi	r19, 0x00	; 0
			break;
     85e:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	61 d0       	rcall	.+194    	; 0x928 <Pipe_ConfigurePipe>
     866:	81 11       	cpse	r24, r1
     868:	03 c0       	rjmp	.+6      	; 0x870 <USB_Host_ProcessNextHostState+0x18c>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	43 c0       	rjmp	.+134    	; 0x8f6 <USB_Host_ProcessNextHostState+0x212>
     870:	87 e0       	ldi	r24, 0x07	; 7
     872:	8f cf       	rjmp	.-226    	; 0x792 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     874:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     876:	e1 e1       	ldi	r30, 0x11	; 17
     878:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     87a:	a7 e2       	ldi	r26, 0x27	; 39
     87c:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
     884:	e1 f7       	brne	.-8      	; 0x87e <USB_Host_ProcessNextHostState+0x19a>
     886:	10 92 a7 00 	sts	0x00A7, r1
     88a:	ce 01       	movw	r24, r28
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	cd d2       	rcall	.+1434   	; 0xe2a <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     890:	81 11       	cpse	r24, r1
     892:	30 c0       	rjmp	.+96     	; 0x8f4 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     894:	88 85       	ldd	r24, Y+8	; 0x08
     896:	80 93 10 01 	sts	0x0110, r24
     89a:	86 de       	rcall	.-756    	; 0x5a8 <USB_Host_ResetDevice>
     89c:	10 92 2f 01 	sts	0x012F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 24 01 	sts	0x0124, r25

			USB_Host_ResetDevice();
     8a8:	80 93 23 01 	sts	0x0123, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	d1 cf       	rjmp	.-94     	; 0x852 <USB_Host_ProcessNextHostState+0x16e>
     8b0:	20 91 10 01 	lds	r18, 0x0110
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	01 e0       	ldi	r16, 0x01	; 1
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8be:	34 d0       	rcall	.+104    	; 0x928 <Pipe_ConfigurePipe>
     8c0:	88 23       	and	r24, r24
     8c2:	99 f2       	breq	.-90     	; 0x86a <USB_Host_ProcessNextHostState+0x186>
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	e9 e1       	ldi	r30, 0x19	; 25
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	a7 e2       	ldi	r26, 0x27	; 39
     8cc:	b1 e0       	ldi	r27, 0x01	; 1
     8ce:	01 90       	ld	r0, Z+
     8d0:	0d 92       	st	X+, r0
     8d2:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <USB_Host_ProcessNextHostState+0x1ea>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a7 d2       	rcall	.+1358   	; 0xe2a <USB_Host_SendControlRequest>
     8dc:	81 11       	cpse	r24, r1
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <USB_Host_ProcessNextHostState+0x210>
     8e0:	10 92 2f 01 	sts	0x012F, r1
     8e4:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 24 01 	sts	0x0124, r25
     8ec:	80 93 23 01 	sts	0x0123, r24
     8f0:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8f2:	af cf       	rjmp	.-162    	; 0x852 <USB_Host_ProcessNextHostState+0x16e>
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	20 91 2f 01 	lds	r18, 0x012F
     8fa:	21 30       	cpi	r18, 0x01	; 1
     8fc:	51 f0       	breq	.+20     	; 0x912 <USB_Host_ProcessNextHostState+0x22e>
     8fe:	68 2f       	mov	r22, r24
     900:	89 2f       	mov	r24, r25
     902:	3b de       	rcall	.-906    	; 0x57a <EVENT_USB_Host_DeviceEnumerationFailed>
     904:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     908:	81 60       	ori	r24, 0x01	; 1
     90a:	80 93 dd 00 	sts	0x00DD, r24
     90e:	8e dd       	rcall	.-1252   	; 0x42c <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     910:	be d0       	rcall	.+380    	; 0xa8e <USB_ResetInterface>
     912:	28 96       	adiw	r28, 0x08	; 8
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16

		USB_ResetInterface();
     926:	08 95       	ret

00000928 <Pipe_ConfigurePipe>:
     928:	0f 93       	push	r16
	}
}
     92a:	e8 2f       	mov	r30, r24
     92c:	ef 70       	andi	r30, 0x0F	; 15
     92e:	87 ff       	sbrs	r24, 7
     930:	02 c0       	rjmp	.+4      	; 0x936 <Pipe_ConfigurePipe+0xe>
     932:	80 e1       	ldi	r24, 0x10	; 16
     934:	01 c0       	rjmp	.+2      	; 0x938 <Pipe_ConfigurePipe+0x10>
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	e7 30       	cpi	r30, 0x07	; 7
     93a:	10 f0       	brcs	.+4      	; 0x940 <Pipe_ConfigurePipe+0x18>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	5a c0       	rjmp	.+180    	; 0x9f4 <Pipe_ConfigurePipe+0xcc>
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;

	if (Number >= PIPE_TOTAL_PIPES)
	  return false;

	if (Type == EP_TYPE_CONTROL)
     940:	61 11       	cpse	r22, r1
     942:	01 c0       	rjmp	.+2      	; 0x946 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     944:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     946:	90 e4       	ldi	r25, 0x40	; 64
     948:	69 9f       	mul	r22, r25
     94a:	b0 01       	movw	r22, r0
     94c:	11 24       	eor	r1, r1
     94e:	4f 70       	andi	r20, 0x0F	; 15
     950:	46 2b       	or	r20, r22
     952:	48 2b       	or	r20, r24
     954:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     956:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     95a:	5e 13       	cpse	r21, r30
     95c:	19 c0       	rjmp	.+50     	; 0x990 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     95e:	02 30       	cpi	r16, 0x02	; 2
     960:	10 f0       	brcs	.+4      	; 0x966 <Pipe_ConfigurePipe+0x3e>
     962:	76 e0       	ldi	r23, 0x06	; 6
     964:	01 c0       	rjmp	.+2      	; 0x968 <Pipe_ConfigurePipe+0x40>
     966:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     96c:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     96e:	82 17       	cp	r24, r18
     970:	93 07       	cpc	r25, r19
     972:	40 f0       	brcs	.+16     	; 0x984 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     974:	86 2f       	mov	r24, r22
     976:	82 95       	swap	r24
     978:	80 7f       	andi	r24, 0xF0	; 240
     97a:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     97c:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     97e:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	0e c0       	rjmp	.+28     	; 0x9a0 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     984:	65 30       	cpi	r22, 0x05	; 5
     986:	b1 f3       	breq	.-20     	; 0x974 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     988:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	ef cf       	rjmp	.-34     	; 0x96e <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     990:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     994:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     998:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     99c:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9a0:	81 fd       	sbrc	r24, 1
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9a4:	5f 5f       	subi	r21, 0xFF	; 255
     9a6:	57 30       	cpi	r21, 0x07	; 7
     9a8:	b1 f6       	brne	.-84     	; 0x956 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9aa:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	21 c0       	rjmp	.+66     	; 0x9f4 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9b2:	90 91 a9 00 	lds	r25, 0x00A9
     9b6:	9e 7f       	andi	r25, 0xFE	; 254
     9b8:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9bc:	90 91 ab 00 	lds	r25, 0x00AB
     9c0:	9d 7f       	andi	r25, 0xFD	; 253
     9c2:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9c6:	90 91 a9 00 	lds	r25, 0x00A9
     9ca:	91 60       	ori	r25, 0x01	; 1
     9cc:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     9d0:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     9d4:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     9d8:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     9dc:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9e0:	80 91 a9 00 	lds	r24, 0x00A9
     9e4:	80 62       	ori	r24, 0x20	; 32
     9e6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9ea:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     9ee:	87 fd       	sbrc	r24, 7
     9f0:	d9 cf       	rjmp	.-78     	; 0x9a4 <Pipe_ConfigurePipe+0x7c>
     9f2:	a4 cf       	rjmp	.-184    	; 0x93c <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	f6 2e       	mov	r15, r22
     a04:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	1f 15       	cp	r17, r15
     a0a:	71 f0       	breq	.+28     	; 0xa28 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     a0c:	88 81       	ld	r24, Y
     a0e:	88 23       	and	r24, r24
     a10:	41 f0       	breq	.+16     	; 0xa22 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a12:	29 81       	ldd	r18, Y+1	; 0x01
     a14:	3a 81       	ldd	r19, Y+2	; 0x02
     a16:	0d 81       	ldd	r16, Y+5	; 0x05
     a18:	4b 81       	ldd	r20, Y+3	; 0x03
     a1a:	6c 81       	ldd	r22, Y+4	; 0x04
     a1c:	85 df       	rcall	.-246    	; 0x928 <Pipe_ConfigurePipe>
     a1e:	88 23       	and	r24, r24
     a20:	21 f0       	breq	.+8      	; 0xa2a <Pipe_ConfigurePipeTable+0x32>
     a22:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a24:	26 96       	adiw	r28, 0x06	; 6
     a26:	f0 cf       	rjmp	.-32     	; 0xa08 <Pipe_ConfigurePipeTable+0x10>
     a28:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     a2a:	df 91       	pop	r29
}
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	08 95       	ret

00000a36 <Pipe_ClearPipes>:
     a36:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a3a:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a3c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a40:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a44:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a48:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a4c:	90 91 a9 00 	lds	r25, 0x00A9
     a50:	9e 7f       	andi	r25, 0xFE	; 254
     a52:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a56:	8f 5f       	subi	r24, 0xFF	; 255
     a58:	87 30       	cpi	r24, 0x07	; 7
     a5a:	81 f7       	brne	.-32     	; 0xa3c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a5c:	08 95       	ret

00000a5e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a5e:	75 d0       	rcall	.+234    	; 0xb4a <USB_INT_DisableAllInterrupts>
     a60:	7c d0       	rcall	.+248    	; 0xb5a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a62:	e0 ee       	ldi	r30, 0xE0	; 224
     a64:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a66:	80 81       	ld	r24, Z
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	80 83       	st	Z, r24
     a6c:	e8 ed       	ldi	r30, 0xD8	; 216
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a70:	80 81       	ld	r24, Z
     a72:	8f 77       	andi	r24, 0x7F	; 127
     a74:	80 83       	st	Z, r24
     a76:	19 bc       	out	0x29, r1	; 41
     a78:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a7a:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     a7c:	8c 91       	ld	r24, X
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	8c 93       	st	X, r24
     a82:	80 81       	ld	r24, Z
     a84:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a86:	80 83       	st	Z, r24
     a88:	10 92 26 01 	sts	0x0126, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a8c:	08 95       	ret

00000a8e <USB_ResetInterface>:
     a8e:	5d d0       	rcall	.+186    	; 0xb4a <USB_INT_DisableAllInterrupts>
     a90:	64 d0       	rcall	.+200    	; 0xb5a <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     a92:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a96:	8f 77       	andi	r24, 0x7F	; 127
     a98:	80 93 d8 00 	sts	0x00D8, r24
     a9c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     aa0:	80 68       	ori	r24, 0x80	; 128
     aa2:	80 93 d8 00 	sts	0x00D8, r24
     aa6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     aaa:	8f 7d       	andi	r24, 0xDF	; 223
     aac:	80 93 d8 00 	sts	0x00D8, r24
     ab0:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ab4:	8f 77       	andi	r24, 0x7F	; 127
     ab6:	80 93 d7 00 	sts	0x00D7, r24
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     abe:	8e e0       	ldi	r24, 0x0E	; 14
     ac0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ac2:	09 b4       	in	r0, 0x29	; 41
     ac4:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <USB_ResetInterface+0x34>
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 2f 01 	sts	0x012F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ace:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ConfigurationNumber = 0;
     ad2:	80 e4       	ldi	r24, 0x40	; 64
     ad4:	80 93 10 01 	sts	0x0110, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ad8:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     adc:	80 64       	ori	r24, 0x40	; 64
     ade:	80 93 d8 00 	sts	0x00D8, r24
     ae2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 dd 00 	sts	0x00DD, r24
     aec:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	80 93 dd 00 	sts	0x00DD, r24
     af6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     afa:	8f 7e       	andi	r24, 0xEF	; 239
     afc:	80 93 d7 00 	sts	0x00D7, r24
     b00:	6f 9a       	sbi	0x0d, 7	; 13
     b02:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     b04:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 93 de 00 	sts	0x00DE, r24
     b0e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	80 93 de 00 	sts	0x00DE, r24
     b18:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	80 93 e0 00 	sts	0x00E0, r24
     b22:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b26:	80 61       	ori	r24, 0x10	; 16
     b28:	80 93 d8 00 	sts	0x00D8, r24
     b2c:	08 95       	ret

00000b2e <USB_Init>:
     b2e:	e8 ed       	ldi	r30, 0xD8	; 216
     b30:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b32:	80 81       	ld	r24, Z
     b34:	8f 7e       	andi	r24, 0xEF	; 239
     b36:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b38:	e7 ed       	ldi	r30, 0xD7	; 215
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
     b48:	a2 cf       	rjmp	.-188    	; 0xa8e <USB_ResetInterface>

00000b4a <USB_INT_DisableAllInterrupts>:
     b4a:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	8c 7f       	andi	r24, 0xFC	; 252
     b52:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b54:	10 92 a0 00 	sts	0x00A0, r1
     b58:	08 95       	ret

00000b5a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b5a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b5e:	10 92 9f 00 	sts	0x009F, r1
     b62:	08 95       	ret

00000b64 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b8a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b8e:	85 ff       	sbrs	r24, 5
     b90:	0a c0       	rjmp	.+20     	; 0xba6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b92:	80 91 a0 00 	lds	r24, 0x00A0
     b96:	85 ff       	sbrs	r24, 5
     b98:	06 c0       	rjmp	.+12     	; 0xba6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b9a:	80 91 9f 00 	lds	r24, 0x009F
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ba4:	1a d1       	rcall	.+564    	; 0xdda <USB_Event_Stub>
     ba6:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     baa:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bac:	15 c0       	rjmp	.+42     	; 0xbd8 <__vector_10+0x74>
     bae:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bb2:	81 ff       	sbrs	r24, 1
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <__vector_10+0x74>
     bb6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bba:	8d 7f       	andi	r24, 0xFD	; 253
     bbc:	80 93 9f 00 	sts	0x009F, r24
     bc0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 93 9f 00 	sts	0x009F, r24
     bca:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bce:	8d 7f       	andi	r24, 0xFD	; 253
     bd0:	80 93 a0 00 	sts	0x00A0, r24
     bd4:	2b dc       	rcall	.-1962   	; 0x42c <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bd6:	5b df       	rcall	.-330    	; 0xa8e <USB_ResetInterface>
     bd8:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     bdc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bde:	15 c0       	rjmp	.+42     	; 0xc0a <__vector_10+0xa6>
     be0:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     be4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <__vector_10+0xa6>
     be8:	80 91 df 00 	lds	r24, 0x00DF
     bec:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bee:	80 93 df 00 	sts	0x00DF, r24
     bf2:	77 98       	cbi	0x0e, 7	; 14
     bf4:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     bf8:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfa:	80 93 dd 00 	sts	0x00DD, r24
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	a6 dc       	rcall	.-1716   	; 0x54e <EVENT_USB_Host_HostError>
     c02:	14 dc       	rcall	.-2008   	; 0x42c <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 2f 01 	sts	0x012F, r24
		EVENT_USB_Host_DeviceUnattached();
     c0a:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     c0e:	80 ff       	sbrs	r24, 0
     c10:	17 c0       	rjmp	.+46     	; 0xc40 <__vector_10+0xdc>
     c12:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c16:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c18:	13 c0       	rjmp	.+38     	; 0xc40 <__vector_10+0xdc>
     c1a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c24:	80 91 de 00 	lds	r24, 0x00DE
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c2e:	f9 db       	rcall	.-2062   	; 0x422 <EVENT_USB_Host_DeviceAttached>
     c30:	80 91 a0 00 	lds	r24, 0x00A0
     c34:	82 60       	ori	r24, 0x02	; 2
     c36:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c3a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c3c:	80 93 2f 01 	sts	0x012F, r24
     c40:	80 91 df 00 	lds	r24, 0x00DF
     c44:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c46:	0e c0       	rjmp	.+28     	; 0xc64 <__vector_10+0x100>
     c48:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c4c:	82 ff       	sbrs	r24, 2
     c4e:	0a c0       	rjmp	.+20     	; 0xc64 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c50:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	80 93 df 00 	sts	0x00DF, r24
     c5a:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	8d dc       	rcall	.-1766   	; 0x57a <EVENT_USB_Host_DeviceEnumerationFailed>
     c60:	e5 db       	rcall	.-2102   	; 0x42c <EVENT_USB_Host_DeviceUnattached>
     c62:	15 df       	rcall	.-470    	; 0xa8e <USB_ResetInterface>
     c64:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23

		USB_ResetInterface();
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0b be       	out	0x3b, r0	; 59
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <USB_GetNextDescriptor>:
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	fc 01       	movw	r30, r24
     c90:	eb 01       	movw	r28, r22
     c92:	a8 81       	ld	r26, Y
     c94:	b9 81       	ldd	r27, Y+1	; 0x01
     c96:	8c 91       	ld	r24, X
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	82 17       	cp	r24, r18
     ca0:	93 07       	cpc	r25, r19
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <USB_GetNextDescriptor+0x1c>
     ca4:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ca6:	a2 0f       	add	r26, r18
     ca8:	b3 1f       	adc	r27, r19
     caa:	eb 01       	movw	r28, r22
     cac:	b9 83       	std	Y+1, r27	; 0x01
     cae:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	82 1b       	sub	r24, r18
     cb6:	93 0b       	sbc	r25, r19
     cb8:	91 83       	std	Z+1, r25	; 0x01
     cba:	80 83       	st	Z, r24
			}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	29 97       	sbiw	r28, 0x09	; 9
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	7b 01       	movw	r14, r22
     ce4:	8a 01       	movw	r16, r20
     ce6:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ce8:	90 e8       	ldi	r25, 0x80	; 128
     cea:	90 93 27 01 	sts	0x0127, r25
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	90 93 28 01 	sts	0x0128, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     cf4:	e8 2f       	mov	r30, r24
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cfc:	f0 93 2a 01 	sts	0x012A, r31
     d00:	e0 93 29 01 	sts	0x0129, r30
     d04:	10 92 2c 01 	sts	0x012C, r1
     d08:	10 92 2b 01 	sts	0x012B, r1
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 2e 01 	sts	0x012E, r25
     d14:	80 93 2d 01 	sts	0x012D, r24
     d18:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	84 d0       	rcall	.+264    	; 0xe2a <USB_Host_SendControlRequest>
     d22:	81 11       	cpse	r24, r1
     d24:	19 c0       	rjmp	.+50     	; 0xd58 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	d7 01       	movw	r26, r14
     d2c:	ed 93       	st	X+, r30
     d2e:	fc 93       	st	X, r31
     d30:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     d32:	df 06       	cpc	r13, r31
     d34:	70 f0       	brcs	.+28     	; 0xd52 <USB_Host_GetDeviceConfigDescriptor+0x90>
     d36:	f0 93 2e 01 	sts	0x012E, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d3a:	e0 93 2d 01 	sts	0x012D, r30
     d3e:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d40:	74 d0       	rcall	.+232    	; 0xe2a <USB_Host_SendControlRequest>
     d42:	81 11       	cpse	r24, r1
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <USB_Host_GetDeviceConfigDescriptor+0x96>
     d46:	f8 01       	movw	r30, r16
     d48:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	21 f0       	breq	.+8      	; 0xd56 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     d52:	85 e0       	ldi	r24, 0x05	; 5
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     d5a:	0f b6       	in	r0, 0x3f	; 63
}
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret

00000d76 <USB_GetNextDescriptorComp>:
     d76:	af 92       	push	r10
     d78:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	8c 01       	movw	r16, r24
     d8c:	eb 01       	movw	r28, r22
     d8e:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d90:	f8 01       	movw	r30, r16
     d92:	e0 80       	ld	r14, Z
     d94:	f1 80       	ldd	r15, Z+1	; 0x01
     d96:	e1 14       	cp	r14, r1
     d98:	f1 04       	cpc	r15, r1
     d9a:	99 f0       	breq	.+38     	; 0xdc2 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d9c:	a8 80       	ld	r10, Y
     d9e:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     da0:	be 01       	movw	r22, r28
     da2:	c8 01       	movw	r24, r16
     da4:	72 df       	rcall	.-284    	; 0xc8a <USB_GetNextDescriptor>
     da6:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     da8:	99 81       	ldd	r25, Y+1	; 0x01
     daa:	f6 01       	movw	r30, r12
     dac:	09 95       	icall
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	79 f3       	breq	.-34     	; 0xd90 <USB_GetNextDescriptorComp+0x1a>
     db2:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     db4:	39 f4       	brne	.+14     	; 0xdc4 <USB_GetNextDescriptorComp+0x4e>
     db6:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     db8:	a8 82       	st	Y, r10
     dba:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     dbc:	f1 82       	std	Z+1, r15	; 0x01
     dbe:	e0 82       	st	Z, r14
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <USB_GetNextDescriptorComp+0x4e>
     dc2:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dc4:	df 91       	pop	r29
}
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	08 95       	ret

00000dda <USB_Event_Stub>:
     dda:	08 95       	ret

00000ddc <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     de4:	c9 ee       	ldi	r28, 0xE9	; 233
     de6:	d3 e0       	ldi	r29, 0x03	; 3
     de8:	11 11       	cpse	r17, r1
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     dec:	80 91 a6 00 	lds	r24, 0x00A6
     df0:	83 fd       	sbrc	r24, 3
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	29 dc       	rcall	.-1966   	; 0x64a <USB_Host_WaitMS>
     df8:	81 11       	cpse	r24, r1
     dfa:	13 c0       	rjmp	.+38     	; 0xe22 <USB_Host_WaitForIOS+0x46>
     dfc:	21 97       	sbiw	r28, 0x01	; 1
     dfe:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e00:	99 f7       	brne	.-26     	; 0xde8 <USB_Host_WaitForIOS+0xc>
     e02:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <USB_Host_WaitForIOS+0x46>
     e06:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e08:	29 f4       	brne	.+10     	; 0xe14 <USB_Host_WaitForIOS+0x38>
     e0a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e0e:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e10:	f1 cf       	rjmp	.-30     	; 0xdf4 <USB_Host_WaitForIOS+0x18>
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <USB_Host_WaitForIOS+0x44>
     e14:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e16:	71 f7       	brne	.-36     	; 0xdf4 <USB_Host_WaitForIOS+0x18>
     e18:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e1c:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e1e:	ea cf       	rjmp	.-44     	; 0xdf4 <USB_Host_WaitForIOS+0x18>
     e20:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e22:	df 91       	pop	r29
}
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <USB_Host_SendControlRequest>:
     e2a:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e36:	f0 90 9e 00 	lds	r15, 0x009E
     e3a:	8f 2d       	mov	r24, r15
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e40:	c0 91 2d 01 	lds	r28, 0x012D
     e44:	d0 91 2e 01 	lds	r29, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e48:	80 91 9e 00 	lds	r24, 0x009E
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	fa db       	rcall	.-2060   	; 0x64a <USB_Host_WaitMS>
     e56:	81 11       	cpse	r24, r1
     e58:	cc c0       	rjmp	.+408    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     e5a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e5e:	8f 7c       	andi	r24, 0xCF	; 207
     e60:	80 93 aa 00 	sts	0x00AA, r24
     e64:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e68:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     e6c:	8f 7e       	andi	r24, 0xEF	; 239
     e6e:	80 93 a6 00 	sts	0x00A6, r24
     e72:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e76:	8f 7b       	andi	r24, 0xBF	; 191
     e78:	80 93 a9 00 	sts	0x00A9, r24
     e7c:	e7 e2       	ldi	r30, 0x27	; 39
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e82:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e86:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e88:	ef 32       	cpi	r30, 0x2F	; 47
     e8a:	f8 07       	cpc	r31, r24
     e8c:	c9 f7       	brne	.-14     	; 0xe80 <USB_Host_SendControlRequest+0x56>
     e8e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e92:	87 77       	andi	r24, 0x77	; 119
     e94:	80 93 a6 00 	sts	0x00A6, r24
     e98:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e9a:	a0 df       	rcall	.-192    	; 0xddc <USB_Host_WaitForIOS>
     e9c:	81 11       	cpse	r24, r1
     e9e:	a9 c0       	rjmp	.+338    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     ea0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	80 93 a9 00 	sts	0x00A9, r24
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	ce db       	rcall	.-2148   	; 0x64a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eae:	81 11       	cpse	r24, r1
     eb0:	a0 c0       	rjmp	.+320    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     eb2:	80 91 27 01 	lds	r24, 0x0127
     eb6:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eb8:	4e c0       	rjmp	.+156    	; 0xf56 <USB_Host_SendControlRequest+0x12c>
     eba:	80 91 aa 00 	lds	r24, 0x00AA
     ebe:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	80 93 aa 00 	sts	0x00AA, r24
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	09 f0       	breq	.+2      	; 0xece <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ecc:	3a c0       	rjmp	.+116    	; 0xf42 <USB_Host_SendControlRequest+0x118>
     ece:	80 91 aa 00 	lds	r24, 0x00AA
     ed2:	8f 7c       	andi	r24, 0xCF	; 207
     ed4:	80 62       	ori	r24, 0x20	; 32
     ed6:	80 93 aa 00 	sts	0x00AA, r24
     eda:	80 91 a9 00 	lds	r24, 0x00A9
     ede:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ee0:	80 93 a9 00 	sts	0x00A9, r24
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	7a df       	rcall	.-268    	; 0xddc <USB_Host_WaitForIOS>
     ee8:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     eea:	83 c0       	rjmp	.+262    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     eec:	80 91 a6 00 	lds	r24, 0x00A6
     ef0:	8b 77       	andi	r24, 0x7B	; 123
     ef2:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	71 df       	rcall	.-286    	; 0xddc <USB_Host_WaitForIOS>
     efa:	7b c0       	rjmp	.+246    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     efc:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f00:	8f 7b       	andi	r24, 0xBF	; 191
     f02:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	69 df       	rcall	.-302    	; 0xddc <USB_Host_WaitForIOS>
     f0a:	81 11       	cpse	r24, r1
     f0c:	72 c0       	rjmp	.+228    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     f0e:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f12:	90 91 f7 00 	lds	r25, 0x00F7
     f16:	89 2b       	or	r24, r25
     f18:	11 f4       	brne	.+4      	; 0xf1e <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
     f1e:	f8 01       	movw	r30, r16
     f20:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f22:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
     f26:	90 91 f7 00 	lds	r25, 0x00F7
     f2a:	89 2b       	or	r24, r25
     f2c:	69 f4       	brne	.+26     	; 0xf48 <USB_Host_SendControlRequest+0x11e>
     f2e:	80 91 a9 00 	lds	r24, 0x00A9
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
     f38:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f3c:	8e 77       	andi	r24, 0x7E	; 126
     f3e:	80 93 a6 00 	sts	0x00A6, r24
     f42:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f44:	d9 f6       	brne	.-74     	; 0xefc <USB_Host_SendControlRequest+0xd2>
     f46:	c3 cf       	rjmp	.-122    	; 0xece <USB_Host_SendControlRequest+0xa4>
     f48:	20 97       	sbiw	r28, 0x00	; 0
     f4a:	89 f3       	breq	.-30     	; 0xf2e <USB_Host_SendControlRequest+0x104>
     f4c:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f50:	81 93       	st	Z+, r24
     f52:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f54:	e5 cf       	rjmp	.-54     	; 0xf20 <USB_Host_SendControlRequest+0xf6>
     f56:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f58:	11 05       	cpc	r17, r1
     f5a:	b1 f1       	breq	.+108    	; 0xfc8 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
     f5c:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
     f60:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f68:	80 91 a9 00 	lds	r24, 0x00A9
     f6c:	8f 7b       	andi	r24, 0xBF	; 191
     f6e:	80 93 a9 00 	sts	0x00A9, r24
     f72:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f74:	20 97       	sbiw	r28, 0x00	; 0
     f76:	01 f1       	breq	.+64     	; 0xfb8 <USB_Host_SendControlRequest+0x18e>
     f78:	31 df       	rcall	.-414    	; 0xddc <USB_Host_WaitForIOS>
     f7a:	81 11       	cpse	r24, r1
     f7c:	3a c0       	rjmp	.+116    	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f7e:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f80:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f84:	30 91 f7 00 	lds	r19, 0x00F7
     f88:	80 91 10 01 	lds	r24, 0x0110
     f8c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	58 f4       	brcc	.+22     	; 0xfaa <USB_Host_SendControlRequest+0x180>
     f94:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	8c 01       	movw	r16, r24
     f9a:	20 81       	ld	r18, Z
     f9c:	20 93 af 00 	sts	0x00AF, r18
     fa0:	21 97       	sbiw	r28, 0x01	; 1
     fa2:	20 97       	sbiw	r28, 0x00	; 0
     fa4:	19 f0       	breq	.+6      	; 0xfac <USB_Host_SendControlRequest+0x182>
     fa6:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
     fa8:	eb cf       	rjmp	.-42     	; 0xf80 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     faa:	8f 01       	movw	r16, r30
     fac:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fb0:	8b 77       	andi	r24, 0x7B	; 123
     fb2:	80 93 a6 00 	sts	0x00A6, r24
     fb6:	dd cf       	rjmp	.-70     	; 0xf72 <USB_Host_SendControlRequest+0x148>
     fb8:	11 df       	rcall	.-478    	; 0xddc <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fba:	81 11       	cpse	r24, r1
     fbc:	1a c0       	rjmp	.+52     	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     fbe:	80 91 a9 00 	lds	r24, 0x00A9
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc8:	80 91 aa 00 	lds	r24, 0x00AA
     fcc:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fce:	80 61       	ori	r24, 0x10	; 16
     fd0:	80 93 aa 00 	sts	0x00AA, r24
     fd4:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	80 93 a9 00 	sts	0x00A9, r24
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	fd de       	rcall	.-518    	; 0xddc <USB_Host_WaitForIOS>
     fe2:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <USB_Host_SendControlRequest+0x1c8>
     fe6:	80 91 a6 00 	lds	r24, 0x00A6
     fea:	8e 77       	andi	r24, 0x7E	; 126
     fec:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 91 a9 00 	lds	r25, 0x00A9
     ff6:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ff8:	90 93 a9 00 	sts	0x00A9, r25
     ffc:	f1 10       	cpse	r15, r1
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <USB_Host_SendControlRequest+0x1e0>
    1000:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1004:	9e 7f       	andi	r25, 0xFE	; 254
    1006:	90 93 9e 00 	sts	0x009E, r25
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1010:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    101c:	ff 90       	pop	r15
    101e:	08 95       	ret

00001020 <USB_Host_SetDeviceConfiguration>:
    1020:	cf 93       	push	r28
				UPRST = 0;
    1022:	c8 2f       	mov	r28, r24
    1024:	10 92 27 01 	sts	0x0127, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	80 93 28 01 	sts	0x0128, r24
    102e:	2c 2f       	mov	r18, r28
    1030:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1032:	30 93 2a 01 	sts	0x012A, r19
    1036:	20 93 29 01 	sts	0x0129, r18
    103a:	10 92 2c 01 	sts	0x012C, r1
    103e:	10 92 2b 01 	sts	0x012B, r1
    1042:	10 92 2e 01 	sts	0x012E, r1
    1046:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    104a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	eb de       	rcall	.-554    	; 0xe2a <USB_Host_SendControlRequest>
    1054:	81 11       	cpse	r24, r1
    1056:	09 c0       	rjmp	.+18     	; 0x106a <USB_Host_SetDeviceConfiguration+0x4a>
    1058:	c0 93 25 01 	sts	0x0125, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    105c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    105e:	11 f0       	breq	.+4      	; 0x1064 <USB_Host_SetDeviceConfiguration+0x44>
    1060:	9b e0       	ldi	r25, 0x0B	; 11
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <USB_Host_SetDeviceConfiguration+0x46>
    1064:	9a e0       	ldi	r25, 0x0A	; 10
    1066:	90 93 2f 01 	sts	0x012F, r25
    106a:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    106c:	08 95       	ret

0000106e <USB_Host_SetInterfaceAltSetting>:
    106e:	91 e0       	ldi	r25, 0x01	; 1
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1070:	90 93 27 01 	sts	0x0127, r25
    1074:	9b e0       	ldi	r25, 0x0B	; 11
    1076:	90 93 28 01 	sts	0x0128, r25
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	70 93 2a 01 	sts	0x012A, r23
    1080:	60 93 29 01 	sts	0x0129, r22
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 2c 01 	sts	0x012C, r25
    108a:	80 93 2b 01 	sts	0x012B, r24
    108e:	10 92 2e 01 	sts	0x012E, r1
    1092:	10 92 2d 01 	sts	0x012D, r1
    1096:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	c5 ce       	rjmp	.-630    	; 0xe2a <USB_Host_SendControlRequest>

000010a0 <USB_USBTask>:
    10a0:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10a2:	c0 91 a7 00 	lds	r28, 0x00A7
    10a6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10a8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ac:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10b0:	19 db       	rcall	.-2510   	; 0x6e4 <USB_Host_ProcessNextHostState>
    10b2:	c0 93 a7 00 	sts	0x00A7, r28
    10b6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10b8:	08 95       	ret

000010ba <DCOMP_Audio_Host_NextAudioControlInterface>:
    10ba:	fc 01       	movw	r30, r24

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
    10be:	84 30       	cpi	r24, 0x04	; 4
    10c0:	51 f4       	brne	.+20     	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    10c2:	85 81       	ldd	r24, Z+5	; 0x05
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	39 f4       	brne	.+14     	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    10c8:	86 81       	ldd	r24, Z+6	; 0x06
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    10ce:	87 81       	ldd	r24, Z+7	; 0x07
    10d0:	81 11       	cpse	r24, r1
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    10d4:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10d6:	82 e0       	ldi	r24, 0x02	; 2
}
    10d8:	08 95       	ret

000010da <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    10da:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	51 f4       	brne	.+20     	; 0x10f6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    10e2:	85 81       	ldd	r24, Z+5	; 0x05
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
    10e8:	86 81       	ldd	r24, Z+6	; 0x06
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    10ee:	87 81       	ldd	r24, Z+7	; 0x07
    10f0:	81 11       	cpse	r24, r1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
    10f4:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10f6:	82 e0       	ldi	r24, 0x02	; 2
}
    10f8:	08 95       	ret

000010fa <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10fa:	fc 01       	movw	r30, r24
    10fc:	21 81       	ldd	r18, Z+1	; 0x01
    10fe:	25 30       	cpi	r18, 0x05	; 5
    1100:	31 f4       	brne	.+12     	; 0x110e <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    1102:	83 81       	ldd	r24, Z+3	; 0x03
    1104:	83 70       	andi	r24, 0x03	; 3
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	31 f0       	breq	.+12     	; 0x1116 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    110e:	24 30       	cpi	r18, 0x04	; 4
    1110:	e1 f7       	brne	.-8      	; 0x110a <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x10>
	{
		return DESCRIPTOR_SEARCH_Fail;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    1116:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1118:	08 95       	ret

0000111a <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    111a:	8f 92       	push	r8
    111c:	9f 92       	push	r9
    111e:	af 92       	push	r10
    1120:	bf 92       	push	r11
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	00 d0       	rcall	.+0      	; 0x1134 <Audio_Host_ConfigurePipes+0x1a>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <Audio_Host_ConfigurePipes+0x1c>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	8c 01       	movw	r16, r24
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	69 83       	std	Y+1, r22	; 0x01
    1140:	fa 01       	movw	r30, r20
    1142:	5c 83       	std	Y+4, r21	; 0x04
    1144:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    1146:	dc 01       	movw	r26, r24
    1148:	1c 96       	adiw	r26, 0x0c	; 12
    114a:	1d 92       	st	X+, r1
    114c:	1d 92       	st	X+, r1
    114e:	1d 92       	st	X+, r1
    1150:	1c 92       	st	X, r1
    1152:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	09 f0       	breq	.+2      	; 0x115c <Audio_Host_ConfigurePipes+0x42>
    115a:	9d c0       	rjmp	.+314    	; 0x1296 <Audio_Host_ConfigurePipes+0x17c>
    115c:	81 2c       	mov	r8, r1
    115e:	91 2c       	mov	r9, r1
    1160:	a1 2c       	mov	r10, r1
    1162:	b1 2c       	mov	r11, r1
    1164:	c1 2c       	mov	r12, r1
    1166:	d1 2c       	mov	r13, r1
    1168:	e1 2c       	mov	r14, r1
    116a:	f1 2c       	mov	r15, r1
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    116c:	f8 01       	movw	r30, r16
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <Audio_Host_ConfigurePipes+0x5c>
    1174:	43 c0       	rjmp	.+134    	; 0x11fc <Audio_Host_ConfigurePipes+0xe2>
    1176:	e1 14       	cp	r14, r1
    1178:	f1 04       	cpc	r15, r1
    117a:	09 f0       	breq	.+2      	; 0x117e <Audio_Host_ConfigurePipes+0x64>
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <Audio_Host_ConfigurePipes+0xe2>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    117e:	a1 14       	cp	r10, r1
    1180:	b1 04       	cpc	r11, r1
    1182:	a1 f0       	breq	.+40     	; 0x11ac <Audio_Host_ConfigurePipes+0x92>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1184:	4d e7       	ldi	r20, 0x7D	; 125
    1186:	58 e0       	ldi	r21, 0x08	; 8
    1188:	be 01       	movw	r22, r28
    118a:	6d 5f       	subi	r22, 0xFD	; 253
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	f1 dd       	rcall	.-1054   	; 0xd76 <USB_GetNextDescriptorComp>
    1194:	88 23       	and	r24, r24
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1196:	49 f1       	breq	.+82     	; 0x11ea <Audio_Host_ConfigurePipes+0xd0>
    1198:	4d e6       	ldi	r20, 0x6D	; 109
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    119a:	58 e0       	ldi	r21, 0x08	; 8
    119c:	be 01       	movw	r22, r28
    119e:	6d 5f       	subi	r22, 0xFD	; 253
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	e7 dd       	rcall	.-1074   	; 0xd76 <USB_GetNextDescriptorComp>
    11a8:	88 23       	and	r24, r24
    11aa:	c1 f0       	breq	.+48     	; 0x11dc <Audio_Host_ConfigurePipes+0xc2>
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    11ac:	4d e5       	ldi	r20, 0x5D	; 93
    11ae:	58 e0       	ldi	r21, 0x08	; 8
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11b0:	be 01       	movw	r22, r28
    11b2:	6d 5f       	subi	r22, 0xFD	; 253
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	ce 01       	movw	r24, r28
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	dd dd       	rcall	.-1094   	; 0xd76 <USB_GetNextDescriptorComp>
    11bc:	88 23       	and	r24, r24
    11be:	11 f0       	breq	.+4      	; 0x11c4 <Audio_Host_ConfigurePipes+0xaa>
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	6a c0       	rjmp	.+212    	; 0x1298 <Audio_Host_ConfigurePipes+0x17e>
    11c4:	ab 80       	ldd	r10, Y+3	; 0x03
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    11c6:	bc 80       	ldd	r11, Y+4	; 0x04
    11c8:	4d e6       	ldi	r20, 0x6D	; 109
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11ca:	58 e0       	ldi	r21, 0x08	; 8
    11cc:	be 01       	movw	r22, r28

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11ce:	6d 5f       	subi	r22, 0xFD	; 253
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	cf dd       	rcall	.-1122   	; 0xd76 <USB_GetNextDescriptorComp>
    11d8:	81 11       	cpse	r24, r1
    11da:	f2 cf       	rjmp	.-28     	; 0x11c0 <Audio_Host_ConfigurePipes+0xa6>
    11dc:	8b 80       	ldd	r8, Y+3	; 0x03
    11de:	9c 80       	ldd	r9, Y+4	; 0x04
    11e0:	e0 e0       	ldi	r30, 0x00	; 0
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11e4:	e1 2c       	mov	r14, r1
    11e6:	f1 2c       	mov	r15, r1

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <Audio_Host_ConfigurePipes+0xde>
    11ea:	eb 81       	ldd	r30, Y+3	; 0x03
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    11ec:	fc 81       	ldd	r31, Y+4	; 0x04
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
			DataOUTEndpoint = NULL;

			continue;
    11f0:	87 ff       	sbrs	r24, 7
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <Audio_Host_ConfigurePipes+0xde>
    11f4:	7f 01       	movw	r14, r30

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11f6:	f6 01       	movw	r30, r12
    11f8:	6f 01       	movw	r12, r30
    11fa:	b8 cf       	rjmp	.-144    	; 0x116c <Audio_Host_ConfigurePipes+0x52>
		  DataINEndpoint  = EndpointData;
    11fc:	d8 01       	movw	r26, r16
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11fe:	16 96       	adiw	r26, 0x06	; 6
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1200:	8c 91       	ld	r24, X
    1202:	81 11       	cpse	r24, r1
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    1204:	2b c0       	rjmp	.+86     	; 0x125c <Audio_Host_ConfigurePipes+0x142>
    1206:	f7 01       	movw	r30, r14
    1208:	84 81       	ldd	r24, Z+4	; 0x04
    120a:	95 81       	ldd	r25, Z+5	; 0x05
    120c:	d8 01       	movw	r26, r16
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	9c 93       	st	X, r25
    1212:	8e 93       	st	-X, r24
    1214:	11 97       	sbiw	r26, 0x01	; 1
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	13 96       	adiw	r26, 0x03	; 3
    121a:	8c 93       	st	X, r24
    121c:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    121e:	ff 24       	eor	r15, r15
    1220:	f3 94       	inc	r15
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	fc 92       	st	X, r15
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    1226:	14 97       	sbiw	r26, 0x04	; 4
    1228:	22 e0       	ldi	r18, 0x02	; 2
    122a:	15 96       	adiw	r26, 0x05	; 5
    122c:	2c 93       	st	X, r18
    122e:	15 97       	sbiw	r26, 0x05	; 5
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    1230:	f6 01       	movw	r30, r12
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	95 81       	ldd	r25, Z+5	; 0x05
    1236:	18 96       	adiw	r26, 0x08	; 8

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1238:	9c 93       	st	X, r25
    123a:	8e 93       	st	-X, r24
    123c:	17 97       	sbiw	r26, 0x07	; 7
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	19 96       	adiw	r26, 0x09	; 9
    1242:	8c 93       	st	X, r24
    1244:	19 97       	sbiw	r26, 0x09	; 9
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1246:	1a 96       	adiw	r26, 0x0a	; 10
    1248:	fc 92       	st	X, r15
    124a:	1a 97       	sbiw	r26, 0x0a	; 10
    124c:	1b 96       	adiw	r26, 0x0b	; 11
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    124e:	2c 93       	st	X, r18
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	c8 01       	movw	r24, r16
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    1254:	d1 db       	rcall	.-2142   	; 0x9f8 <Pipe_ConfigurePipeTable>
    1256:	88 23       	and	r24, r24

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    1258:	31 f0       	breq	.+12     	; 0x1266 <Audio_Host_ConfigurePipes+0x14c>
    125a:	07 c0       	rjmp	.+14     	; 0x126a <Audio_Host_ConfigurePipes+0x150>
    125c:	c1 14       	cp	r12, r1
    125e:	d1 04       	cpc	r13, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <Audio_Host_ConfigurePipes+0x14a>
    1262:	8d cf       	rjmp	.-230    	; 0x117e <Audio_Host_ConfigurePipes+0x64>
    1264:	d0 cf       	rjmp	.-96     	; 0x1206 <Audio_Host_ConfigurePipes+0xec>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	17 c0       	rjmp	.+46     	; 0x1298 <Audio_Host_ConfigurePipes+0x17e>
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	c8 01       	movw	r24, r16
    126e:	06 96       	adiw	r24, 0x06	; 6
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;
    1270:	c3 db       	rcall	.-2170   	; 0x9f8 <Pipe_ConfigurePipeTable>
    1272:	88 23       	and	r24, r24

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    1274:	c1 f3       	breq	.-16     	; 0x1266 <Audio_Host_ConfigurePipes+0x14c>
    1276:	d5 01       	movw	r26, r10
    1278:	12 96       	adiw	r26, 0x02	; 2
    127a:	8c 91       	ld	r24, X
    127c:	f8 01       	movw	r30, r16
    127e:	85 87       	std	Z+13, r24	; 0x0d
    1280:	d4 01       	movw	r26, r8
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    1282:	12 96       	adiw	r26, 0x02	; 2
    1284:	8c 91       	ld	r24, X
    1286:	12 97       	sbiw	r26, 0x02	; 2
    1288:	86 87       	std	Z+14, r24	; 0x0e
    128a:	13 96       	adiw	r26, 0x03	; 3
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    128c:	8c 91       	ld	r24, X
    128e:	87 87       	std	Z+15, r24	; 0x0f
    1290:	f4 86       	std	Z+12, r15	; 0x0c
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <Audio_Host_ConfigurePipes+0x17e>
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
	AudioInterfaceInfo->State.IsActive = true;
    129c:	0f 90       	pop	r0

	return AUDIO_ENUMERROR_NoError;
    129e:	0f 90       	pop	r0
    12a0:	df 91       	pop	r29
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    12a2:	cf 91       	pop	r28
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	08 95       	ret

000012ba <Audio_Host_StartStopStreaming>:
    12ba:	fc 01       	movw	r30, r24
    12bc:	84 85       	ldd	r24, Z+12	; 0x0c
    12be:	88 23       	and	r24, r24
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <Audio_Host_StartStopStreaming+0x16>
    12c2:	66 23       	and	r22, r22
    12c4:	11 f0       	breq	.+4      	; 0x12ca <Audio_Host_StartStopStreaming+0x10>
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    12c6:	67 85       	ldd	r22, Z+15	; 0x0f
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <Audio_Host_StartStopStreaming+0x12>
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	86 85       	ldd	r24, Z+14	; 0x0e
    12ce:	cf ce       	rjmp	.-610    	; 0x106e <USB_Host_SetInterfaceAltSetting>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    12d2:	08 95       	ret

000012d4 <Audio_Host_GetSetEndpointProperty>:
    12d4:	ef 92       	push	r14
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    12dc:	fc 01       	movw	r30, r24
    12de:	84 85       	ldd	r24, Z+12	; 0x0c
    12e0:	88 23       	and	r24, r24
    12e2:	59 f1       	breq	.+86     	; 0x133a <Audio_Host_GetSetEndpointProperty+0x66>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    12e4:	47 ff       	sbrs	r20, 7
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    12e8:	92 ea       	ldi	r25, 0xA2	; 162
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    12ec:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12ee:	6f 70       	andi	r22, 0x0F	; 15
    12f0:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    12f4:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    12f8:	53 2f       	mov	r21, r19
    12fa:	5f 70       	andi	r21, 0x0F	; 15
    12fc:	35 ff       	sbrs	r19, 5
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <Audio_Host_GetSetEndpointProperty+0x30>
    1300:	80 e8       	ldi	r24, 0x80	; 128
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <Audio_Host_GetSetEndpointProperty+0x32>
    1304:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    1306:	90 93 27 01 	sts	0x0127, r25
    130a:	40 93 28 01 	sts	0x0128, r20
    130e:	10 92 29 01 	sts	0x0129, r1
    1312:	20 93 2a 01 	sts	0x012A, r18
    1316:	85 2b       	or	r24, r21
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	90 93 2c 01 	sts	0x012C, r25
    131e:	80 93 2b 01 	sts	0x012B, r24
    1322:	10 93 2e 01 	sts	0x012E, r17
    1326:	00 93 2d 01 	sts	0x012D, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    132a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    132e:	c7 01       	movw	r24, r14
}
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    1338:	78 cd       	rjmp	.-1296   	; 0xe2a <USB_Host_SendControlRequest>
    133a:	81 e0       	ldi	r24, 0x01	; 1
}
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <Serial_putchar>:
    1346:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    134a:	95 ff       	sbrs	r25, 5
    134c:	fc cf       	rjmp	.-8      	; 0x1346 <Serial_putchar>
				UDR1 = DataByte;
    134e:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	08 95       	ret

00001358 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1358:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    135c:	87 ff       	sbrs	r24, 7
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <Serial_getchar+0x18>
    1360:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1364:	87 ff       	sbrs	r24, 7
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1368:	80 91 ce 00 	lds	r24, 0x00CE
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	08 95       	ret
	  return _FDEV_EOF;
    1370:	8e ef       	ldi	r24, 0xFE	; 254
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    137a:	08 95       	ret

0000137c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    137c:	fc 01       	movw	r30, r24
	if (!(Stream))
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	59 f4       	brne	.+22     	; 0x1398 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1382:	80 e3       	ldi	r24, 0x30	; 48
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	90 93 3f 01 	sts	0x013F, r25
    138a:	80 93 3e 01 	sts	0x013E, r24
		stdout = Stream;
    138e:	90 93 41 01 	sts	0x0141, r25
    1392:	80 93 40 01 	sts	0x0140, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1396:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1398:	8e e0       	ldi	r24, 0x0E	; 14
    139a:	df 01       	movw	r26, r30
    139c:	1d 92       	st	X+, r1
    139e:	8a 95       	dec	r24
    13a0:	e9 f7       	brne	.-6      	; 0x139c <Serial_CreateStream+0x20>
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	83 83       	std	Z+3, r24	; 0x03
    13a6:	83 ea       	ldi	r24, 0xA3	; 163
    13a8:	99 e0       	ldi	r25, 0x09	; 9
    13aa:	91 87       	std	Z+9, r25	; 0x09
    13ac:	80 87       	std	Z+8, r24	; 0x08
    13ae:	8c ea       	ldi	r24, 0xAC	; 172
    13b0:	99 e0       	ldi	r25, 0x09	; 9
    13b2:	93 87       	std	Z+11, r25	; 0x0b
    13b4:	82 87       	std	Z+10, r24	; 0x0a
    13b6:	08 95       	ret

000013b8 <printf_P>:
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	fe 01       	movw	r30, r28
    13c6:	37 96       	adiw	r30, 0x07	; 7
    13c8:	61 91       	ld	r22, Z+
    13ca:	71 91       	ld	r23, Z+
    13cc:	00 e4       	ldi	r16, 0x40	; 64
    13ce:	11 e0       	ldi	r17, 0x01	; 1
    13d0:	d8 01       	movw	r26, r16
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	dc 01       	movw	r26, r24
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	2c 91       	ld	r18, X
    13dc:	13 97       	sbiw	r26, 0x03	; 3
    13de:	28 60       	ori	r18, 0x08	; 8
    13e0:	13 96       	adiw	r26, 0x03	; 3
    13e2:	2c 93       	st	X, r18
    13e4:	af 01       	movw	r20, r30
    13e6:	3a d0       	rcall	.+116    	; 0x145c <vfprintf>
    13e8:	d8 01       	movw	r26, r16
    13ea:	ed 91       	ld	r30, X+
    13ec:	fc 91       	ld	r31, X
    13ee:	23 81       	ldd	r18, Z+3	; 0x03
    13f0:	27 7f       	andi	r18, 0xF7	; 247
    13f2:	23 83       	std	Z+3, r18	; 0x03
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <puts_P>:
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	e0 91 40 01 	lds	r30, 0x0140
    140c:	f0 91 41 01 	lds	r31, 0x0141
    1410:	83 81       	ldd	r24, Z+3	; 0x03
    1412:	81 ff       	sbrs	r24, 1
    1414:	1c c0       	rjmp	.+56     	; 0x144e <puts_P+0x50>
    1416:	00 e0       	ldi	r16, 0x00	; 0
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	fe 01       	movw	r30, r28
    141c:	84 91       	lpm	r24, Z
    141e:	60 91 40 01 	lds	r22, 0x0140
    1422:	70 91 41 01 	lds	r23, 0x0141
    1426:	db 01       	movw	r26, r22
    1428:	18 96       	adiw	r26, 0x08	; 8
    142a:	ed 91       	ld	r30, X+
    142c:	fc 91       	ld	r31, X
    142e:	19 97       	sbiw	r26, 0x09	; 9
    1430:	88 23       	and	r24, r24
    1432:	39 f0       	breq	.+14     	; 0x1442 <puts_P+0x44>
    1434:	09 95       	icall
    1436:	89 2b       	or	r24, r25
    1438:	11 f0       	breq	.+4      	; 0x143e <puts_P+0x40>
    143a:	0f ef       	ldi	r16, 0xFF	; 255
    143c:	1f ef       	ldi	r17, 0xFF	; 255
    143e:	21 96       	adiw	r28, 0x01	; 1
    1440:	ec cf       	rjmp	.-40     	; 0x141a <puts_P+0x1c>
    1442:	8a e0       	ldi	r24, 0x0A	; 10
    1444:	09 95       	icall
    1446:	89 2b       	or	r24, r25
    1448:	11 f4       	brne	.+4      	; 0x144e <puts_P+0x50>
    144a:	c8 01       	movw	r24, r16
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <puts_P+0x54>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	9f ef       	ldi	r25, 0xFF	; 255
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <vfprintf>:
    145c:	2f 92       	push	r2
    145e:	3f 92       	push	r3
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	2c 97       	sbiw	r28, 0x0c	; 12
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	7c 01       	movw	r14, r24
    1492:	6b 01       	movw	r12, r22
    1494:	8a 01       	movw	r16, r20
    1496:	fc 01       	movw	r30, r24
    1498:	17 82       	std	Z+7, r1	; 0x07
    149a:	16 82       	std	Z+6, r1	; 0x06
    149c:	83 81       	ldd	r24, Z+3	; 0x03
    149e:	81 ff       	sbrs	r24, 1
    14a0:	b0 c1       	rjmp	.+864    	; 0x1802 <vfprintf+0x3a6>
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	4c 01       	movw	r8, r24
    14a8:	f7 01       	movw	r30, r14
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	f6 01       	movw	r30, r12
    14ae:	93 fd       	sbrc	r25, 3
    14b0:	85 91       	lpm	r24, Z+
    14b2:	93 ff       	sbrs	r25, 3
    14b4:	81 91       	ld	r24, Z+
    14b6:	6f 01       	movw	r12, r30
    14b8:	88 23       	and	r24, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <vfprintf+0x62>
    14bc:	9e c1       	rjmp	.+828    	; 0x17fa <vfprintf+0x39e>
    14be:	85 32       	cpi	r24, 0x25	; 37
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <vfprintf+0x74>
    14c2:	93 fd       	sbrc	r25, 3
    14c4:	85 91       	lpm	r24, Z+
    14c6:	93 ff       	sbrs	r25, 3
    14c8:	81 91       	ld	r24, Z+
    14ca:	6f 01       	movw	r12, r30
    14cc:	85 32       	cpi	r24, 0x25	; 37
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <vfprintf+0x7c>
    14d0:	b7 01       	movw	r22, r14
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	c7 d1       	rcall	.+910    	; 0x1864 <fputc>
    14d6:	e8 cf       	rjmp	.-48     	; 0x14a8 <vfprintf+0x4c>
    14d8:	51 2c       	mov	r5, r1
    14da:	31 2c       	mov	r3, r1
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	20 32       	cpi	r18, 0x20	; 32
    14e0:	a0 f4       	brcc	.+40     	; 0x150a <vfprintf+0xae>
    14e2:	8b 32       	cpi	r24, 0x2B	; 43
    14e4:	69 f0       	breq	.+26     	; 0x1500 <vfprintf+0xa4>
    14e6:	30 f4       	brcc	.+12     	; 0x14f4 <vfprintf+0x98>
    14e8:	80 32       	cpi	r24, 0x20	; 32
    14ea:	59 f0       	breq	.+22     	; 0x1502 <vfprintf+0xa6>
    14ec:	83 32       	cpi	r24, 0x23	; 35
    14ee:	69 f4       	brne	.+26     	; 0x150a <vfprintf+0xae>
    14f0:	20 61       	ori	r18, 0x10	; 16
    14f2:	2c c0       	rjmp	.+88     	; 0x154c <vfprintf+0xf0>
    14f4:	8d 32       	cpi	r24, 0x2D	; 45
    14f6:	39 f0       	breq	.+14     	; 0x1506 <vfprintf+0xaa>
    14f8:	80 33       	cpi	r24, 0x30	; 48
    14fa:	39 f4       	brne	.+14     	; 0x150a <vfprintf+0xae>
    14fc:	21 60       	ori	r18, 0x01	; 1
    14fe:	26 c0       	rjmp	.+76     	; 0x154c <vfprintf+0xf0>
    1500:	22 60       	ori	r18, 0x02	; 2
    1502:	24 60       	ori	r18, 0x04	; 4
    1504:	23 c0       	rjmp	.+70     	; 0x154c <vfprintf+0xf0>
    1506:	28 60       	ori	r18, 0x08	; 8
    1508:	21 c0       	rjmp	.+66     	; 0x154c <vfprintf+0xf0>
    150a:	27 fd       	sbrc	r18, 7
    150c:	27 c0       	rjmp	.+78     	; 0x155c <vfprintf+0x100>
    150e:	30 ed       	ldi	r19, 0xD0	; 208
    1510:	38 0f       	add	r19, r24
    1512:	3a 30       	cpi	r19, 0x0A	; 10
    1514:	78 f4       	brcc	.+30     	; 0x1534 <vfprintf+0xd8>
    1516:	26 ff       	sbrs	r18, 6
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0xca>
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	5f 9e       	mul	r5, r31
    151e:	30 0d       	add	r19, r0
    1520:	11 24       	eor	r1, r1
    1522:	53 2e       	mov	r5, r19
    1524:	13 c0       	rjmp	.+38     	; 0x154c <vfprintf+0xf0>
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	38 9e       	mul	r3, r24
    152a:	30 0d       	add	r19, r0
    152c:	11 24       	eor	r1, r1
    152e:	33 2e       	mov	r3, r19
    1530:	20 62       	ori	r18, 0x20	; 32
    1532:	0c c0       	rjmp	.+24     	; 0x154c <vfprintf+0xf0>
    1534:	8e 32       	cpi	r24, 0x2E	; 46
    1536:	21 f4       	brne	.+8      	; 0x1540 <vfprintf+0xe4>
    1538:	26 fd       	sbrc	r18, 6
    153a:	5f c1       	rjmp	.+702    	; 0x17fa <vfprintf+0x39e>
    153c:	20 64       	ori	r18, 0x40	; 64
    153e:	06 c0       	rjmp	.+12     	; 0x154c <vfprintf+0xf0>
    1540:	8c 36       	cpi	r24, 0x6C	; 108
    1542:	11 f4       	brne	.+4      	; 0x1548 <vfprintf+0xec>
    1544:	20 68       	ori	r18, 0x80	; 128
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0xf0>
    1548:	88 36       	cpi	r24, 0x68	; 104
    154a:	41 f4       	brne	.+16     	; 0x155c <vfprintf+0x100>
    154c:	f6 01       	movw	r30, r12
    154e:	93 fd       	sbrc	r25, 3
    1550:	85 91       	lpm	r24, Z+
    1552:	93 ff       	sbrs	r25, 3
    1554:	81 91       	ld	r24, Z+
    1556:	6f 01       	movw	r12, r30
    1558:	81 11       	cpse	r24, r1
    155a:	c1 cf       	rjmp	.-126    	; 0x14de <vfprintf+0x82>
    155c:	98 2f       	mov	r25, r24
    155e:	9f 7d       	andi	r25, 0xDF	; 223
    1560:	95 54       	subi	r25, 0x45	; 69
    1562:	93 30       	cpi	r25, 0x03	; 3
    1564:	28 f4       	brcc	.+10     	; 0x1570 <vfprintf+0x114>
    1566:	0c 5f       	subi	r16, 0xFC	; 252
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	ff e3       	ldi	r31, 0x3F	; 63
    156c:	f9 83       	std	Y+1, r31	; 0x01
    156e:	0d c0       	rjmp	.+26     	; 0x158a <vfprintf+0x12e>
    1570:	83 36       	cpi	r24, 0x63	; 99
    1572:	31 f0       	breq	.+12     	; 0x1580 <vfprintf+0x124>
    1574:	83 37       	cpi	r24, 0x73	; 115
    1576:	71 f0       	breq	.+28     	; 0x1594 <vfprintf+0x138>
    1578:	83 35       	cpi	r24, 0x53	; 83
    157a:	09 f0       	breq	.+2      	; 0x157e <vfprintf+0x122>
    157c:	57 c0       	rjmp	.+174    	; 0x162c <vfprintf+0x1d0>
    157e:	21 c0       	rjmp	.+66     	; 0x15c2 <vfprintf+0x166>
    1580:	f8 01       	movw	r30, r16
    1582:	80 81       	ld	r24, Z
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	0e 5f       	subi	r16, 0xFE	; 254
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	44 24       	eor	r4, r4
    158c:	43 94       	inc	r4
    158e:	51 2c       	mov	r5, r1
    1590:	54 01       	movw	r10, r8
    1592:	14 c0       	rjmp	.+40     	; 0x15bc <vfprintf+0x160>
    1594:	38 01       	movw	r6, r16
    1596:	f2 e0       	ldi	r31, 0x02	; 2
    1598:	6f 0e       	add	r6, r31
    159a:	71 1c       	adc	r7, r1
    159c:	f8 01       	movw	r30, r16
    159e:	a0 80       	ld	r10, Z
    15a0:	b1 80       	ldd	r11, Z+1	; 0x01
    15a2:	26 ff       	sbrs	r18, 6
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <vfprintf+0x150>
    15a6:	65 2d       	mov	r22, r5
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <vfprintf+0x154>
    15ac:	6f ef       	ldi	r22, 0xFF	; 255
    15ae:	7f ef       	ldi	r23, 0xFF	; 255
    15b0:	c5 01       	movw	r24, r10
    15b2:	2c 87       	std	Y+12, r18	; 0x0c
    15b4:	4c d1       	rcall	.+664    	; 0x184e <strnlen>
    15b6:	2c 01       	movw	r4, r24
    15b8:	83 01       	movw	r16, r6
    15ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    15bc:	2f 77       	andi	r18, 0x7F	; 127
    15be:	22 2e       	mov	r2, r18
    15c0:	16 c0       	rjmp	.+44     	; 0x15ee <vfprintf+0x192>
    15c2:	38 01       	movw	r6, r16
    15c4:	f2 e0       	ldi	r31, 0x02	; 2
    15c6:	6f 0e       	add	r6, r31
    15c8:	71 1c       	adc	r7, r1
    15ca:	f8 01       	movw	r30, r16
    15cc:	a0 80       	ld	r10, Z
    15ce:	b1 80       	ldd	r11, Z+1	; 0x01
    15d0:	26 ff       	sbrs	r18, 6
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <vfprintf+0x17e>
    15d4:	65 2d       	mov	r22, r5
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <vfprintf+0x182>
    15da:	6f ef       	ldi	r22, 0xFF	; 255
    15dc:	7f ef       	ldi	r23, 0xFF	; 255
    15de:	c5 01       	movw	r24, r10
    15e0:	2c 87       	std	Y+12, r18	; 0x0c
    15e2:	2a d1       	rcall	.+596    	; 0x1838 <strnlen_P>
    15e4:	2c 01       	movw	r4, r24
    15e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15e8:	20 68       	ori	r18, 0x80	; 128
    15ea:	22 2e       	mov	r2, r18
    15ec:	83 01       	movw	r16, r6
    15ee:	23 fc       	sbrc	r2, 3
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <vfprintf+0x1c8>
    15f2:	83 2d       	mov	r24, r3
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	48 16       	cp	r4, r24
    15f8:	59 06       	cpc	r5, r25
    15fa:	a0 f4       	brcc	.+40     	; 0x1624 <vfprintf+0x1c8>
    15fc:	b7 01       	movw	r22, r14
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	30 d1       	rcall	.+608    	; 0x1864 <fputc>
    1604:	3a 94       	dec	r3
    1606:	f5 cf       	rjmp	.-22     	; 0x15f2 <vfprintf+0x196>
    1608:	f5 01       	movw	r30, r10
    160a:	27 fc       	sbrc	r2, 7
    160c:	85 91       	lpm	r24, Z+
    160e:	27 fe       	sbrs	r2, 7
    1610:	81 91       	ld	r24, Z+
    1612:	5f 01       	movw	r10, r30
    1614:	b7 01       	movw	r22, r14
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	25 d1       	rcall	.+586    	; 0x1864 <fputc>
    161a:	31 10       	cpse	r3, r1
    161c:	3a 94       	dec	r3
    161e:	f1 e0       	ldi	r31, 0x01	; 1
    1620:	4f 1a       	sub	r4, r31
    1622:	51 08       	sbc	r5, r1
    1624:	41 14       	cp	r4, r1
    1626:	51 04       	cpc	r5, r1
    1628:	79 f7       	brne	.-34     	; 0x1608 <vfprintf+0x1ac>
    162a:	de c0       	rjmp	.+444    	; 0x17e8 <vfprintf+0x38c>
    162c:	84 36       	cpi	r24, 0x64	; 100
    162e:	11 f0       	breq	.+4      	; 0x1634 <vfprintf+0x1d8>
    1630:	89 36       	cpi	r24, 0x69	; 105
    1632:	31 f5       	brne	.+76     	; 0x1680 <vfprintf+0x224>
    1634:	f8 01       	movw	r30, r16
    1636:	27 ff       	sbrs	r18, 7
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <vfprintf+0x1ec>
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	0c 5f       	subi	r16, 0xFC	; 252
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <vfprintf+0x1fc>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	88 27       	eor	r24, r24
    164e:	77 fd       	sbrc	r23, 7
    1650:	80 95       	com	r24
    1652:	98 2f       	mov	r25, r24
    1654:	0e 5f       	subi	r16, 0xFE	; 254
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	2f 76       	andi	r18, 0x6F	; 111
    165a:	b2 2e       	mov	r11, r18
    165c:	97 ff       	sbrs	r25, 7
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <vfprintf+0x216>
    1660:	90 95       	com	r25
    1662:	80 95       	com	r24
    1664:	70 95       	com	r23
    1666:	61 95       	neg	r22
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	8f 4f       	sbci	r24, 0xFF	; 255
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	20 68       	ori	r18, 0x80	; 128
    1670:	b2 2e       	mov	r11, r18
    1672:	2a e0       	ldi	r18, 0x0A	; 10
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	a4 01       	movw	r20, r8
    1678:	27 d1       	rcall	.+590    	; 0x18c8 <__ultoa_invert>
    167a:	a8 2e       	mov	r10, r24
    167c:	a8 18       	sub	r10, r8
    167e:	43 c0       	rjmp	.+134    	; 0x1706 <vfprintf+0x2aa>
    1680:	85 37       	cpi	r24, 0x75	; 117
    1682:	29 f4       	brne	.+10     	; 0x168e <vfprintf+0x232>
    1684:	2f 7e       	andi	r18, 0xEF	; 239
    1686:	b2 2e       	mov	r11, r18
    1688:	2a e0       	ldi	r18, 0x0A	; 10
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	25 c0       	rjmp	.+74     	; 0x16d8 <vfprintf+0x27c>
    168e:	f2 2f       	mov	r31, r18
    1690:	f9 7f       	andi	r31, 0xF9	; 249
    1692:	bf 2e       	mov	r11, r31
    1694:	8f 36       	cpi	r24, 0x6F	; 111
    1696:	c1 f0       	breq	.+48     	; 0x16c8 <vfprintf+0x26c>
    1698:	18 f4       	brcc	.+6      	; 0x16a0 <vfprintf+0x244>
    169a:	88 35       	cpi	r24, 0x58	; 88
    169c:	79 f0       	breq	.+30     	; 0x16bc <vfprintf+0x260>
    169e:	ad c0       	rjmp	.+346    	; 0x17fa <vfprintf+0x39e>
    16a0:	80 37       	cpi	r24, 0x70	; 112
    16a2:	19 f0       	breq	.+6      	; 0x16aa <vfprintf+0x24e>
    16a4:	88 37       	cpi	r24, 0x78	; 120
    16a6:	21 f0       	breq	.+8      	; 0x16b0 <vfprintf+0x254>
    16a8:	a8 c0       	rjmp	.+336    	; 0x17fa <vfprintf+0x39e>
    16aa:	2f 2f       	mov	r18, r31
    16ac:	20 61       	ori	r18, 0x10	; 16
    16ae:	b2 2e       	mov	r11, r18
    16b0:	b4 fe       	sbrs	r11, 4
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <vfprintf+0x272>
    16b4:	8b 2d       	mov	r24, r11
    16b6:	84 60       	ori	r24, 0x04	; 4
    16b8:	b8 2e       	mov	r11, r24
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <vfprintf+0x272>
    16bc:	24 ff       	sbrs	r18, 4
    16be:	0a c0       	rjmp	.+20     	; 0x16d4 <vfprintf+0x278>
    16c0:	9f 2f       	mov	r25, r31
    16c2:	96 60       	ori	r25, 0x06	; 6
    16c4:	b9 2e       	mov	r11, r25
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0x278>
    16c8:	28 e0       	ldi	r18, 0x08	; 8
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <vfprintf+0x27c>
    16ce:	20 e1       	ldi	r18, 0x10	; 16
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x27c>
    16d4:	20 e1       	ldi	r18, 0x10	; 16
    16d6:	32 e0       	ldi	r19, 0x02	; 2
    16d8:	f8 01       	movw	r30, r16
    16da:	b7 fe       	sbrs	r11, 7
    16dc:	07 c0       	rjmp	.+14     	; 0x16ec <vfprintf+0x290>
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0c 5f       	subi	r16, 0xFC	; 252
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <vfprintf+0x29c>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 5f       	subi	r16, 0xFE	; 254
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	a4 01       	movw	r20, r8
    16fa:	e6 d0       	rcall	.+460    	; 0x18c8 <__ultoa_invert>
    16fc:	a8 2e       	mov	r10, r24
    16fe:	a8 18       	sub	r10, r8
    1700:	fb 2d       	mov	r31, r11
    1702:	ff 77       	andi	r31, 0x7F	; 127
    1704:	bf 2e       	mov	r11, r31
    1706:	b6 fe       	sbrs	r11, 6
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <vfprintf+0x2c4>
    170a:	2b 2d       	mov	r18, r11
    170c:	2e 7f       	andi	r18, 0xFE	; 254
    170e:	a5 14       	cp	r10, r5
    1710:	50 f4       	brcc	.+20     	; 0x1726 <vfprintf+0x2ca>
    1712:	b4 fe       	sbrs	r11, 4
    1714:	0a c0       	rjmp	.+20     	; 0x172a <vfprintf+0x2ce>
    1716:	b2 fc       	sbrc	r11, 2
    1718:	08 c0       	rjmp	.+16     	; 0x172a <vfprintf+0x2ce>
    171a:	2b 2d       	mov	r18, r11
    171c:	2e 7e       	andi	r18, 0xEE	; 238
    171e:	05 c0       	rjmp	.+10     	; 0x172a <vfprintf+0x2ce>
    1720:	7a 2c       	mov	r7, r10
    1722:	2b 2d       	mov	r18, r11
    1724:	03 c0       	rjmp	.+6      	; 0x172c <vfprintf+0x2d0>
    1726:	7a 2c       	mov	r7, r10
    1728:	01 c0       	rjmp	.+2      	; 0x172c <vfprintf+0x2d0>
    172a:	75 2c       	mov	r7, r5
    172c:	24 ff       	sbrs	r18, 4
    172e:	0d c0       	rjmp	.+26     	; 0x174a <vfprintf+0x2ee>
    1730:	fe 01       	movw	r30, r28
    1732:	ea 0d       	add	r30, r10
    1734:	f1 1d       	adc	r31, r1
    1736:	80 81       	ld	r24, Z
    1738:	80 33       	cpi	r24, 0x30	; 48
    173a:	11 f4       	brne	.+4      	; 0x1740 <vfprintf+0x2e4>
    173c:	29 7e       	andi	r18, 0xE9	; 233
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <vfprintf+0x2f6>
    1740:	22 ff       	sbrs	r18, 2
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <vfprintf+0x2f4>
    1744:	73 94       	inc	r7
    1746:	73 94       	inc	r7
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <vfprintf+0x2f6>
    174a:	82 2f       	mov	r24, r18
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	09 f0       	breq	.+2      	; 0x1752 <vfprintf+0x2f6>
    1750:	73 94       	inc	r7
    1752:	23 fd       	sbrc	r18, 3
    1754:	12 c0       	rjmp	.+36     	; 0x177a <vfprintf+0x31e>
    1756:	20 ff       	sbrs	r18, 0
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <vfprintf+0x30a>
    175a:	5a 2c       	mov	r5, r10
    175c:	73 14       	cp	r7, r3
    175e:	18 f4       	brcc	.+6      	; 0x1766 <vfprintf+0x30a>
    1760:	53 0c       	add	r5, r3
    1762:	57 18       	sub	r5, r7
    1764:	73 2c       	mov	r7, r3
    1766:	73 14       	cp	r7, r3
    1768:	60 f4       	brcc	.+24     	; 0x1782 <vfprintf+0x326>
    176a:	b7 01       	movw	r22, r14
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	2c 87       	std	Y+12, r18	; 0x0c
    1772:	78 d0       	rcall	.+240    	; 0x1864 <fputc>
    1774:	73 94       	inc	r7
    1776:	2c 85       	ldd	r18, Y+12	; 0x0c
    1778:	f6 cf       	rjmp	.-20     	; 0x1766 <vfprintf+0x30a>
    177a:	73 14       	cp	r7, r3
    177c:	10 f4       	brcc	.+4      	; 0x1782 <vfprintf+0x326>
    177e:	37 18       	sub	r3, r7
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <vfprintf+0x328>
    1782:	31 2c       	mov	r3, r1
    1784:	24 ff       	sbrs	r18, 4
    1786:	11 c0       	rjmp	.+34     	; 0x17aa <vfprintf+0x34e>
    1788:	b7 01       	movw	r22, r14
    178a:	80 e3       	ldi	r24, 0x30	; 48
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	2c 87       	std	Y+12, r18	; 0x0c
    1790:	69 d0       	rcall	.+210    	; 0x1864 <fputc>
    1792:	2c 85       	ldd	r18, Y+12	; 0x0c
    1794:	22 ff       	sbrs	r18, 2
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <vfprintf+0x368>
    1798:	21 ff       	sbrs	r18, 1
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <vfprintf+0x346>
    179c:	88 e5       	ldi	r24, 0x58	; 88
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x34a>
    17a2:	88 e7       	ldi	r24, 0x78	; 120
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	b7 01       	movw	r22, r14
    17a8:	0c c0       	rjmp	.+24     	; 0x17c2 <vfprintf+0x366>
    17aa:	82 2f       	mov	r24, r18
    17ac:	86 78       	andi	r24, 0x86	; 134
    17ae:	51 f0       	breq	.+20     	; 0x17c4 <vfprintf+0x368>
    17b0:	21 fd       	sbrc	r18, 1
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x35c>
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x35e>
    17b8:	8b e2       	ldi	r24, 0x2B	; 43
    17ba:	27 fd       	sbrc	r18, 7
    17bc:	8d e2       	ldi	r24, 0x2D	; 45
    17be:	b7 01       	movw	r22, r14
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	50 d0       	rcall	.+160    	; 0x1864 <fputc>
    17c4:	a5 14       	cp	r10, r5
    17c6:	30 f4       	brcc	.+12     	; 0x17d4 <vfprintf+0x378>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	4a d0       	rcall	.+148    	; 0x1864 <fputc>
    17d0:	5a 94       	dec	r5
    17d2:	f8 cf       	rjmp	.-16     	; 0x17c4 <vfprintf+0x368>
    17d4:	aa 94       	dec	r10
    17d6:	f4 01       	movw	r30, r8
    17d8:	ea 0d       	add	r30, r10
    17da:	f1 1d       	adc	r31, r1
    17dc:	80 81       	ld	r24, Z
    17de:	b7 01       	movw	r22, r14
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	40 d0       	rcall	.+128    	; 0x1864 <fputc>
    17e4:	a1 10       	cpse	r10, r1
    17e6:	f6 cf       	rjmp	.-20     	; 0x17d4 <vfprintf+0x378>
    17e8:	33 20       	and	r3, r3
    17ea:	09 f4       	brne	.+2      	; 0x17ee <vfprintf+0x392>
    17ec:	5d ce       	rjmp	.-838    	; 0x14a8 <vfprintf+0x4c>
    17ee:	b7 01       	movw	r22, r14
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	37 d0       	rcall	.+110    	; 0x1864 <fputc>
    17f6:	3a 94       	dec	r3
    17f8:	f7 cf       	rjmp	.-18     	; 0x17e8 <vfprintf+0x38c>
    17fa:	f7 01       	movw	r30, r14
    17fc:	86 81       	ldd	r24, Z+6	; 0x06
    17fe:	97 81       	ldd	r25, Z+7	; 0x07
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x3aa>
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	2c 96       	adiw	r28, 0x0c	; 12
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	08 95       	ret

00001838 <strnlen_P>:
    1838:	fc 01       	movw	r30, r24
    183a:	05 90       	lpm	r0, Z+
    183c:	61 50       	subi	r22, 0x01	; 1
    183e:	70 40       	sbci	r23, 0x00	; 0
    1840:	01 10       	cpse	r0, r1
    1842:	d8 f7       	brcc	.-10     	; 0x183a <strnlen_P+0x2>
    1844:	80 95       	com	r24
    1846:	90 95       	com	r25
    1848:	8e 0f       	add	r24, r30
    184a:	9f 1f       	adc	r25, r31
    184c:	08 95       	ret

0000184e <strnlen>:
    184e:	fc 01       	movw	r30, r24
    1850:	61 50       	subi	r22, 0x01	; 1
    1852:	70 40       	sbci	r23, 0x00	; 0
    1854:	01 90       	ld	r0, Z+
    1856:	01 10       	cpse	r0, r1
    1858:	d8 f7       	brcc	.-10     	; 0x1850 <strnlen+0x2>
    185a:	80 95       	com	r24
    185c:	90 95       	com	r25
    185e:	8e 0f       	add	r24, r30
    1860:	9f 1f       	adc	r25, r31
    1862:	08 95       	ret

00001864 <fputc>:
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	18 2f       	mov	r17, r24
    186e:	09 2f       	mov	r16, r25
    1870:	eb 01       	movw	r28, r22
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	81 fd       	sbrc	r24, 1
    1876:	03 c0       	rjmp	.+6      	; 0x187e <fputc+0x1a>
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	9f ef       	ldi	r25, 0xFF	; 255
    187c:	20 c0       	rjmp	.+64     	; 0x18be <fputc+0x5a>
    187e:	82 ff       	sbrs	r24, 2
    1880:	10 c0       	rjmp	.+32     	; 0x18a2 <fputc+0x3e>
    1882:	4e 81       	ldd	r20, Y+6	; 0x06
    1884:	5f 81       	ldd	r21, Y+7	; 0x07
    1886:	2c 81       	ldd	r18, Y+4	; 0x04
    1888:	3d 81       	ldd	r19, Y+5	; 0x05
    188a:	42 17       	cp	r20, r18
    188c:	53 07       	cpc	r21, r19
    188e:	7c f4       	brge	.+30     	; 0x18ae <fputc+0x4a>
    1890:	e8 81       	ld	r30, Y
    1892:	f9 81       	ldd	r31, Y+1	; 0x01
    1894:	9f 01       	movw	r18, r30
    1896:	2f 5f       	subi	r18, 0xFF	; 255
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	39 83       	std	Y+1, r19	; 0x01
    189c:	28 83       	st	Y, r18
    189e:	10 83       	st	Z, r17
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <fputc+0x4a>
    18a2:	e8 85       	ldd	r30, Y+8	; 0x08
    18a4:	f9 85       	ldd	r31, Y+9	; 0x09
    18a6:	81 2f       	mov	r24, r17
    18a8:	09 95       	icall
    18aa:	89 2b       	or	r24, r25
    18ac:	29 f7       	brne	.-54     	; 0x1878 <fputc+0x14>
    18ae:	2e 81       	ldd	r18, Y+6	; 0x06
    18b0:	3f 81       	ldd	r19, Y+7	; 0x07
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	3f 83       	std	Y+7, r19	; 0x07
    18b8:	2e 83       	std	Y+6, r18	; 0x06
    18ba:	81 2f       	mov	r24, r17
    18bc:	90 2f       	mov	r25, r16
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <__ultoa_invert>:
    18c8:	fa 01       	movw	r30, r20
    18ca:	aa 27       	eor	r26, r26
    18cc:	28 30       	cpi	r18, 0x08	; 8
    18ce:	51 f1       	breq	.+84     	; 0x1924 <__ultoa_invert+0x5c>
    18d0:	20 31       	cpi	r18, 0x10	; 16
    18d2:	81 f1       	breq	.+96     	; 0x1934 <__ultoa_invert+0x6c>
    18d4:	e8 94       	clt
    18d6:	6f 93       	push	r22
    18d8:	6e 7f       	andi	r22, 0xFE	; 254
    18da:	6e 5f       	subi	r22, 0xFE	; 254
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	af 4f       	sbci	r26, 0xFF	; 255
    18e4:	b1 e0       	ldi	r27, 0x01	; 1
    18e6:	3e d0       	rcall	.+124    	; 0x1964 <__ultoa_invert+0x9c>
    18e8:	b4 e0       	ldi	r27, 0x04	; 4
    18ea:	3c d0       	rcall	.+120    	; 0x1964 <__ultoa_invert+0x9c>
    18ec:	67 0f       	add	r22, r23
    18ee:	78 1f       	adc	r23, r24
    18f0:	89 1f       	adc	r24, r25
    18f2:	9a 1f       	adc	r25, r26
    18f4:	a1 1d       	adc	r26, r1
    18f6:	68 0f       	add	r22, r24
    18f8:	79 1f       	adc	r23, r25
    18fa:	8a 1f       	adc	r24, r26
    18fc:	91 1d       	adc	r25, r1
    18fe:	a1 1d       	adc	r26, r1
    1900:	6a 0f       	add	r22, r26
    1902:	71 1d       	adc	r23, r1
    1904:	81 1d       	adc	r24, r1
    1906:	91 1d       	adc	r25, r1
    1908:	a1 1d       	adc	r26, r1
    190a:	20 d0       	rcall	.+64     	; 0x194c <__ultoa_invert+0x84>
    190c:	09 f4       	brne	.+2      	; 0x1910 <__ultoa_invert+0x48>
    190e:	68 94       	set
    1910:	3f 91       	pop	r19
    1912:	2a e0       	ldi	r18, 0x0A	; 10
    1914:	26 9f       	mul	r18, r22
    1916:	11 24       	eor	r1, r1
    1918:	30 19       	sub	r19, r0
    191a:	30 5d       	subi	r19, 0xD0	; 208
    191c:	31 93       	st	Z+, r19
    191e:	de f6       	brtc	.-74     	; 0x18d6 <__ultoa_invert+0xe>
    1920:	cf 01       	movw	r24, r30
    1922:	08 95       	ret
    1924:	46 2f       	mov	r20, r22
    1926:	47 70       	andi	r20, 0x07	; 7
    1928:	40 5d       	subi	r20, 0xD0	; 208
    192a:	41 93       	st	Z+, r20
    192c:	b3 e0       	ldi	r27, 0x03	; 3
    192e:	0f d0       	rcall	.+30     	; 0x194e <__ultoa_invert+0x86>
    1930:	c9 f7       	brne	.-14     	; 0x1924 <__ultoa_invert+0x5c>
    1932:	f6 cf       	rjmp	.-20     	; 0x1920 <__ultoa_invert+0x58>
    1934:	46 2f       	mov	r20, r22
    1936:	4f 70       	andi	r20, 0x0F	; 15
    1938:	40 5d       	subi	r20, 0xD0	; 208
    193a:	4a 33       	cpi	r20, 0x3A	; 58
    193c:	18 f0       	brcs	.+6      	; 0x1944 <__ultoa_invert+0x7c>
    193e:	49 5d       	subi	r20, 0xD9	; 217
    1940:	31 fd       	sbrc	r19, 1
    1942:	40 52       	subi	r20, 0x20	; 32
    1944:	41 93       	st	Z+, r20
    1946:	02 d0       	rcall	.+4      	; 0x194c <__ultoa_invert+0x84>
    1948:	a9 f7       	brne	.-22     	; 0x1934 <__ultoa_invert+0x6c>
    194a:	ea cf       	rjmp	.-44     	; 0x1920 <__ultoa_invert+0x58>
    194c:	b4 e0       	ldi	r27, 0x04	; 4
    194e:	a6 95       	lsr	r26
    1950:	97 95       	ror	r25
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	ba 95       	dec	r27
    195a:	c9 f7       	brne	.-14     	; 0x194e <__ultoa_invert+0x86>
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	61 05       	cpc	r22, r1
    1960:	71 05       	cpc	r23, r1
    1962:	08 95       	ret
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	0a 2e       	mov	r0, r26
    196a:	06 94       	lsr	r0
    196c:	57 95       	ror	r21
    196e:	47 95       	ror	r20
    1970:	37 95       	ror	r19
    1972:	27 95       	ror	r18
    1974:	ba 95       	dec	r27
    1976:	c9 f7       	brne	.-14     	; 0x196a <__ultoa_invert+0xa2>
    1978:	62 0f       	add	r22, r18
    197a:	73 1f       	adc	r23, r19
    197c:	84 1f       	adc	r24, r20
    197e:	95 1f       	adc	r25, r21
    1980:	a0 1d       	adc	r26, r0
    1982:	08 95       	ret

00001984 <_exit>:
    1984:	f8 94       	cli

00001986 <__stop_program>:
    1986:	ff cf       	rjmp	.-2      	; 0x1986 <__stop_program>

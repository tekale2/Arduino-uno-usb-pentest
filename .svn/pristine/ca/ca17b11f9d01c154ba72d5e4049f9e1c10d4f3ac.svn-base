
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000014c4  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080017e  0080017e  000015d6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000678  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aa9c  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bba  00000000  00000000  0000d304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004121  00000000  00000000  0000febe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f84  00000000  00000000  00013fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004280  00000000  00000000  00014f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000688f  00000000  00000000  000191e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  0001fa73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	c9 c0       	rjmp	.+402    	; 0x194 <__ctors_end>
       2:	00 00       	nop
       4:	e5 c0       	rjmp	.+458    	; 0x1d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	e3 c0       	rjmp	.+454    	; 0x1d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e1 c0       	rjmp	.+450    	; 0x1d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	df c0       	rjmp	.+446    	; 0x1d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	dd c0       	rjmp	.+442    	; 0x1d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	db c0       	rjmp	.+438    	; 0x1d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d9 c0       	rjmp	.+434    	; 0x1d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d7 c0       	rjmp	.+430    	; 0x1d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	d5 c0       	rjmp	.+426    	; 0x1d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	44 c4       	rjmp	.+2184   	; 0x8b2 <__vector_10>
      2a:	00 00       	nop
      2c:	11 c5       	rjmp	.+2594   	; 0xa50 <__vector_11>
      2e:	00 00       	nop
      30:	cf c0       	rjmp	.+414    	; 0x1d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	cd c0       	rjmp	.+410    	; 0x1d0 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	cb c0       	rjmp	.+406    	; 0x1d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c9 c0       	rjmp	.+402    	; 0x1d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c7 c0       	rjmp	.+398    	; 0x1d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	c5 c0       	rjmp	.+394    	; 0x1d0 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	c3 c0       	rjmp	.+390    	; 0x1d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c1 c0       	rjmp	.+386    	; 0x1d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bf c0       	rjmp	.+382    	; 0x1d0 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	bd c0       	rjmp	.+378    	; 0x1d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	bb c0       	rjmp	.+374    	; 0x1d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b9 c0       	rjmp	.+370    	; 0x1d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b7 c0       	rjmp	.+366    	; 0x1d0 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	b5 c0       	rjmp	.+362    	; 0x1d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	b3 c0       	rjmp	.+358    	; 0x1d0 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	b1 c0       	rjmp	.+354    	; 0x1d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	af c0       	rjmp	.+350    	; 0x1d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	ad c0       	rjmp	.+346    	; 0x1d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	ab c0       	rjmp	.+342    	; 0x1d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a9 c0       	rjmp	.+338    	; 0x1d0 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	a7 c0       	rjmp	.+334    	; 0x1d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	a5 c0       	rjmp	.+330    	; 0x1d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	a3 c0       	rjmp	.+326    	; 0x1d0 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	a1 c0       	rjmp	.+322    	; 0x1d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9f c0       	rjmp	.+318    	; 0x1d0 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	9d c0       	rjmp	.+314    	; 0x1d0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	00 00                                               ..

000000ca <ManufacturerString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f8:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     108:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     118:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	05 83 02 10 00 05 09 04 02 00 01 03 01 02 00 09     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 05        !....":........

00000147 <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     147:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     157:	dc 01                                               ..

00000159 <MouseReport>:
     159:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
				ReportSize     -= 2;
				ReportData     += 2;
     169:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     179:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     189:	01 00 95 02 75 08 81 06 c0 c0 00                    ....u......

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e2       	ldi	r29, 0x20	; 32
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e4 ec       	ldi	r30, 0xC4	; 196
     1a8:	f4 e1       	ldi	r31, 0x14	; 20

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0b bf       	out	0x3b, r16	; 59
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x14>
     1b0:	07 90       	elpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
				break;
     1b4:	ae 37       	cpi	r26, 0x7E	; 126
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0x10>

000001ba <__do_clear_bss>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	ae e7       	ldi	r26, 0x7E	; 126
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	af 38       	cpi	r26, 0x8F	; 143
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	5f d0       	rcall	.+190    	; 0x28a <main>
     1cc:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

000001d0 <__bad_interrupt>:
     1d0:	17 cf       	rjmp	.-466    	; 0x0 <__vectors>

000001d2 <LEDs_SetAllLEDs>:
     1d2:	9b b1       	in	r25, 0x0b	; 11
     1d4:	9f 70       	andi	r25, 0x0F	; 15
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	98 2b       	or	r25, r24
     1d8:	9b b9       	out	0x0b, r25	; 11
     1da:	08 95       	ret

000001dc <Joystick_GetStatus>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	93 b1       	in	r25, 0x03	; 3
     1de:	8c b1       	in	r24, 0x0c	; 12
     1e0:	80 95       	com	r24
     1e2:	80 73       	andi	r24, 0x30	; 48
     1e4:	86 95       	lsr	r24
     1e6:	90 95       	com	r25
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	90 7e       	andi	r25, 0xE0	; 224
     1ea:	89 2b       	or	r24, r25
				break;
     1ec:	08 95       	ret

000001ee <SetupHardware>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	84 b7       	in	r24, 0x34	; 52
     1f0:	87 7f       	andi	r24, 0xF7	; 247
     1f2:	84 bf       	out	0x34, r24	; 52
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	80 93 60 00 	sts	0x0060, r24
     1fe:	10 92 60 00 	sts	0x0060, r1
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	0f be       	out	0x3f, r0	; 63
     204:	90 e0       	ldi	r25, 0x00	; 0
				break;
     206:	80 e8       	ldi	r24, 0x80	; 128
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	80 93 61 00 	sts	0x0061, r24
     210:	90 93 61 00 	sts	0x0061, r25
     214:	0f be       	out	0x3f, r0	; 63
     216:	84 b1       	in	r24, 0x04	; 4
     218:	8f 71       	andi	r24, 0x1F	; 31
     21a:	84 b9       	out	0x04, r24	; 4
     21c:	8d b1       	in	r24, 0x0d	; 13
     21e:	8f 7c       	andi	r24, 0xCF	; 207
     220:	8d b9       	out	0x0d, r24	; 13
     222:	85 b1       	in	r24, 0x05	; 5
     224:	80 6e       	ori	r24, 0xE0	; 224
     226:	85 b9       	out	0x05, r24	; 5
     228:	8e b1       	in	r24, 0x0e	; 14
     22a:	80 63       	ori	r24, 0x30	; 48
     22c:	8e b9       	out	0x0e, r24	; 14
     22e:	8a b1       	in	r24, 0x0a	; 10
     230:	80 6f       	ori	r24, 0xF0	; 240
     232:	8a b9       	out	0x0a, r24	; 10
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	8b b1       	in	r24, 0x0b	; 11
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	8b b9       	out	0x0b, r24	; 11
     23a:	20 c3       	rjmp	.+1600   	; 0x87c <USB_Init>

0000023c <CheckJoystickMovement>:
     23c:	cf df       	rcall	.-98     	; 0x1dc <Joystick_GetStatus>
     23e:	87 fd       	sbrc	r24, 7
     240:	0b c0       	rjmp	.+22     	; 0x258 <CheckJoystickMovement+0x1c>
     242:	84 fd       	sbrc	r24, 4
     244:	0c c0       	rjmp	.+24     	; 0x25e <CheckJoystickMovement+0x22>
     246:	86 fd       	sbrc	r24, 6
     248:	0d c0       	rjmp	.+26     	; 0x264 <CheckJoystickMovement+0x28>
     24a:	83 fd       	sbrc	r24, 3
     24c:	0e c0       	rjmp	.+28     	; 0x26a <CheckJoystickMovement+0x2e>
     24e:	85 fd       	sbrc	r24, 5
     250:	0f c0       	rjmp	.+30     	; 0x270 <CheckJoystickMovement+0x34>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	10 92 7e 01 	sts	0x017E, r1
     256:	08 95       	ret
     258:	6f e6       	ldi	r22, 0x6F	; 111
     25a:	71 e0       	ldi	r23, 0x01	; 1
     25c:	0b c0       	rjmp	.+22     	; 0x274 <CheckJoystickMovement+0x38>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	6f e5       	ldi	r22, 0x5F	; 95
     260:	71 e0       	ldi	r23, 0x01	; 1
     262:	08 c0       	rjmp	.+16     	; 0x274 <CheckJoystickMovement+0x38>
     264:	6f e4       	ldi	r22, 0x4F	; 79
     266:	71 e0       	ldi	r23, 0x01	; 1
     268:	05 c0       	rjmp	.+10     	; 0x274 <CheckJoystickMovement+0x38>
     26a:	6e e3       	ldi	r22, 0x3E	; 62
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	02 c0       	rjmp	.+4      	; 0x274 <CheckJoystickMovement+0x38>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	6b e2       	ldi	r22, 0x2B	; 43
				break;
     272:	71 e0       	ldi	r23, 0x01	; 1

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	80 91 7e 01 	lds	r24, 0x017E
     278:	81 11       	cpse	r24, r1
     27a:	06 c0       	rjmp	.+12     	; 0x288 <CheckJoystickMovement+0x4c>
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 7e 01 	sts	0x017E, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     282:	80 e1       	ldi	r24, 0x10	; 16
				break;
     284:	91 e0       	ldi	r25, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	b6 c5       	rjmp	.+2924   	; 0xdf4 <CDC_Device_SendString>
     288:	08 95       	ret

0000028a <main>:
     28a:	b1 df       	rcall	.-158    	; 0x1ee <SetupHardware>
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	a1 df       	rcall	.-190    	; 0x1d2 <LEDs_SetAllLEDs>
				break;
     290:	78 94       	sei

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	d4 df       	rcall	.-88     	; 0x23c <CheckJoystickMovement>
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	10 d6       	rcall	.+3104   	; 0xeba <CDC_Device_ReceiveByte>
     29a:	80 e1       	ldi	r24, 0x10	; 16
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	f7 d5       	rcall	.+3054   	; 0xe8e <CDC_Device_USBTask>
				break;
     2a0:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 84 09 	call	0x1308	; 0x1308 <HID_Device_USBTask>
     2a8:	64 d5       	rcall	.+2760   	; 0xd72 <USB_USBTask>
     2aa:	f3 cf       	rjmp	.-26     	; 0x292 <main+0x8>

000002ac <EVENT_USB_Device_Connect>:
				break;
     2ac:	80 ea       	ldi	r24, 0xA0	; 160

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	91 cf       	rjmp	.-222    	; 0x1d2 <LEDs_SetAllLEDs>

000002b0 <EVENT_USB_Device_Disconnect>:
     2b0:	80 e1       	ldi	r24, 0x10	; 16
     2b2:	8f cf       	rjmp	.-226    	; 0x1d2 <LEDs_SetAllLEDs>

000002b4 <EVENT_USB_Device_ConfigurationChanged>:
     2b4:	cf 93       	push	r28
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 71 09 	call	0x12e2	; 0x12e2 <HID_Device_ConfigureEndpoints>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	c8 2f       	mov	r28, r24
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	72 d5       	rcall	.+2788   	; 0xdaa <CDC_Device_ConfigureEndpoints>
     2c6:	90 91 e2 00 	lds	r25, 0x00E2
     2ca:	94 60       	ori	r25, 0x04	; 4
				break;
     2cc:	90 93 e2 00 	sts	0x00E2, r25
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d0:	88 23       	and	r24, r24
     2d2:	21 f0       	breq	.+8      	; 0x2dc <EVENT_USB_Device_ConfigurationChanged+0x28>
				break;
     2d4:	cc 23       	and	r28, r28

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	11 f0       	breq	.+4      	; 0x2dc <EVENT_USB_Device_ConfigurationChanged+0x28>
     2d8:	80 e6       	ldi	r24, 0x60	; 96
     2da:	01 c0       	rjmp	.+2      	; 0x2de <EVENT_USB_Device_ConfigurationChanged+0x2a>

				if (ParserData->UsingReportIDs)
     2dc:	80 e9       	ldi	r24, 0x90	; 144
     2de:	cf 91       	pop	r28
     2e0:	78 cf       	rjmp	.-272    	; 0x1d2 <LEDs_SetAllLEDs>

000002e2 <EVENT_USB_Device_ControlRequest>:
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	1b d6       	rcall	.+3126   	; 0xf1e <CDC_Device_ProcessControlRequest>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	c8 c6       	rjmp	.+3472   	; 0x107e <HID_Device_ProcessControlRequest>

000002ee <EVENT_USB_Device_StartOfFrame>:
     2ee:	80 91 0e 01 	lds	r24, 0x010E
     2f2:	90 91 0f 01 	lds	r25, 0x010F
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	29 f0       	breq	.+10     	; 0x304 <EVENT_USB_Device_StartOfFrame+0x16>
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	90 93 0f 01 	sts	0x010F, r25
     300:	80 93 0e 01 	sts	0x010E, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	08 95       	ret

00000306 <CALLBACK_HID_Device_CreateHIDReport>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	e9 01       	movw	r28, r18
     310:	65 df       	rcall	.-310    	; 0x1dc <Joystick_GetStatus>
     312:	9c b1       	in	r25, 0x0c	; 12
     314:	90 95       	com	r25
     316:	87 ff       	sbrs	r24, 7
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	02 c0       	rjmp	.+4      	; 0x31e <CALLBACK_HID_Device_CreateHIDReport+0x18>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	03 c0       	rjmp	.+6      	; 0x324 <CALLBACK_HID_Device_CreateHIDReport+0x1e>
     31e:	84 ff       	sbrs	r24, 4
     320:	02 c0       	rjmp	.+4      	; 0x326 <CALLBACK_HID_Device_CreateHIDReport+0x20>
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	2a 83       	std	Y+2, r18	; 0x02
     326:	86 ff       	sbrs	r24, 6
     328:	02 c0       	rjmp	.+4      	; 0x32e <CALLBACK_HID_Device_CreateHIDReport+0x28>
     32a:	2f ef       	ldi	r18, 0xFF	; 255
     32c:	03 c0       	rjmp	.+6      	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
     32e:	83 ff       	sbrs	r24, 3
     330:	02 c0       	rjmp	.+4      	; 0x336 <CALLBACK_HID_Device_CreateHIDReport+0x30>
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	29 83       	std	Y+1, r18	; 0x01
     336:	85 ff       	sbrs	r24, 5
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	03 c0       	rjmp	.+6      	; 0x340 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
     33a:	88 81       	ld	r24, Y
     33c:	81 60       	ori	r24, 0x01	; 1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	88 83       	st	Y, r24
     340:	92 ff       	sbrs	r25, 2
     342:	03 c0       	rjmp	.+6      	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x44>
     344:	88 81       	ld	r24, Y
     346:	82 60       	ori	r24, 0x02	; 2
     348:	88 83       	st	Y, r24
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	f8 01       	movw	r30, r16
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	08 95       	ret

00000360 <CALLBACK_HID_Device_ProcessHIDReport>:
     360:	08 95       	ret

00000362 <CALLBACK_USB_GetDescriptor>:
     362:	29 2f       	mov	r18, r25
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	33 27       	eor	r19, r19
     366:	23 30       	cpi	r18, 0x03	; 3
     368:	31 05       	cpc	r19, r1
     36a:	b9 f0       	breq	.+46     	; 0x39a <CALLBACK_USB_GetDescriptor+0x38>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	5c f4       	brge	.+22     	; 0x384 <CALLBACK_USB_GetDescriptor+0x22>
     36e:	21 30       	cpi	r18, 0x01	; 1
     370:	31 05       	cpc	r19, r1
     372:	69 f1       	breq	.+90     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x6c>
     374:	22 30       	cpi	r18, 0x02	; 2
     376:	31 05       	cpc	r19, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	79 f5       	brne	.+94     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x76>
     37a:	8f e5       	ldi	r24, 0x5F	; 95
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	28 ee       	ldi	r18, 0xE8	; 232
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	2e c0       	rjmp	.+92     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x7e>
     384:	21 32       	cpi	r18, 0x21	; 33
     386:	31 05       	cpc	r19, r1
				break;
     388:	e9 f0       	breq	.+58     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x62>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	22 32       	cpi	r18, 0x22	; 34
     38c:	31 05       	cpc	r19, r1
     38e:	21 f5       	brne	.+72     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x76>
     390:	8a e3       	ldi	r24, 0x3A	; 58
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	29 e5       	ldi	r18, 0x59	; 89
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	31 e0       	ldi	r19, 0x01	; 1
     398:	23 c0       	rjmp	.+70     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x7e>
     39a:	99 27       	eor	r25, r25
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	91 05       	cpc	r25, r1
     3a0:	41 f0       	breq	.+16     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x50>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	91 05       	cpc	r25, r1
     3a6:	41 f0       	breq	.+16     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x56>
     3a8:	89 2b       	or	r24, r25
     3aa:	b1 f4       	brne	.+44     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x76>
     3ac:	e4 ee       	ldi	r30, 0xE4	; 228
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
				break;
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x5a>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	ea ec       	ldi	r30, 0xCA	; 202
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <CALLBACK_USB_GetDescriptor+0x5a>
     3b8:	e8 e9       	ldi	r30, 0x98	; 152
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	84 91       	lpm	r24, Z
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9f 01       	movw	r18, r30
     3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x7e>
     3c4:	89 e0       	ldi	r24, 0x09	; 9
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	27 e3       	ldi	r18, 0x37	; 55
     3ca:	31 e0       	ldi	r19, 0x01	; 1
     3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x7e>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	82 e1       	ldi	r24, 0x12	; 18
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	27 e4       	ldi	r18, 0x47	; 71

					while (CurrCollectionPath->Parent != NULL)
     3d4:	31 e0       	ldi	r19, 0x01	; 1
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x7e>
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	fa 01       	movw	r30, r20
     3e2:	31 83       	std	Z+1, r19	; 0x01
     3e4:	20 83       	st	Z, r18
     3e6:	08 95       	ret

000003e8 <Endpoint_Write_Stream_LE>:
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	7c 01       	movw	r14, r24
     3fa:	8b 01       	movw	r16, r22
     3fc:	ea 01       	movw	r28, r20
     3fe:	c9 d1       	rcall	.+914    	; 0x792 <Endpoint_WaitUntilReady>
     400:	81 11       	cpse	r24, r1
     402:	30 c0       	rjmp	.+96     	; 0x464 <Endpoint_Write_Stream_LE+0x7c>
     404:	20 97       	sbiw	r28, 0x00	; 0
     406:	31 f0       	breq	.+12     	; 0x414 <Endpoint_Write_Stream_LE+0x2c>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	88 81       	ld	r24, Y
     40a:	99 81       	ldd	r25, Y+1	; 0x01
     40c:	08 1b       	sub	r16, r24
     40e:	19 0b       	sbc	r17, r25
     410:	e8 0e       	add	r14, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	f9 1e       	adc	r15, r25
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1
     418:	01 15       	cp	r16, r1
     41a:	11 05       	cpc	r17, r1
     41c:	11 f1       	breq	.+68     	; 0x462 <Endpoint_Write_Stream_LE+0x7a>
     41e:	80 91 e8 00 	lds	r24, 0x00E8

				if (UsageListSize)
     422:	85 fd       	sbrc	r24, 5
     424:	13 c0       	rjmp	.+38     	; 0x44c <Endpoint_Write_Stream_LE+0x64>
     426:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	8e 77       	andi	r24, 0x7E	; 126
     42c:	80 93 e8 00 	sts	0x00E8, r24
     430:	20 97       	sbiw	r28, 0x00	; 0
     432:	41 f0       	breq	.+16     	; 0x444 <Endpoint_Write_Stream_LE+0x5c>
     434:	88 81       	ld	r24, Y
     436:	99 81       	ldd	r25, Y+1	; 0x01
     438:	8c 0d       	add	r24, r12
     43a:	9d 1d       	adc	r25, r13
     43c:	99 83       	std	Y+1, r25	; 0x01
     43e:	88 83       	st	Y, r24

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	85 e0       	ldi	r24, 0x05	; 5
     442:	10 c0       	rjmp	.+32     	; 0x464 <Endpoint_Write_Stream_LE+0x7c>
     444:	a6 d1       	rcall	.+844    	; 0x792 <Endpoint_WaitUntilReady>
     446:	88 23       	and	r24, r24
     448:	39 f3       	breq	.-50     	; 0x418 <Endpoint_Write_Stream_LE+0x30>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <Endpoint_Write_Stream_LE+0x7c>
					  UsageList[i - 1] = UsageList[i];
     44c:	f7 01       	movw	r30, r14
     44e:	81 91       	ld	r24, Z+
     450:	7f 01       	movw	r14, r30
     452:	80 93 f1 00 	sts	0x00F1, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     456:	01 50       	subi	r16, 0x01	; 1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	11 09       	sbc	r17, r1
     45a:	ff ef       	ldi	r31, 0xFF	; 255
     45c:	cf 1a       	sub	r12, r31
     45e:	df 0a       	sbc	r13, r31
     460:	db cf       	rjmp	.-74     	; 0x418 <Endpoint_Write_Stream_LE+0x30>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	08 95       	ret

00000476 <Endpoint_Write_Control_Stream_LE>:
     476:	20 91 8d 01 	lds	r18, 0x018D
     47a:	30 91 8e 01 	lds	r19, 0x018E
     47e:	26 17       	cp	r18, r22
     480:	37 07       	cpc	r19, r23
     482:	48 f0       	brcs	.+18     	; 0x496 <Endpoint_Write_Control_Stream_LE+0x20>
     484:	61 15       	cp	r22, r1
     486:	71 05       	cpc	r23, r1
     488:	39 f4       	brne	.+14     	; 0x498 <Endpoint_Write_Control_Stream_LE+0x22>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	20 91 e8 00 	lds	r18, 0x00E8
     48e:	2e 77       	andi	r18, 0x7E	; 126
     490:	20 93 e8 00 	sts	0x00E8, r18
     494:	01 c0       	rjmp	.+2      	; 0x498 <Endpoint_Write_Control_Stream_LE+0x22>
     496:	b9 01       	movw	r22, r18
     498:	fc 01       	movw	r30, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	61 15       	cp	r22, r1
     49e:	71 05       	cpc	r23, r1
     4a0:	99 f1       	breq	.+102    	; 0x508 <Endpoint_Write_Control_Stream_LE+0x92>
     4a2:	80 91 86 01 	lds	r24, 0x0186
     4a6:	88 23       	and	r24, r24
     4a8:	e9 f1       	breq	.+122    	; 0x524 <Endpoint_Write_Control_Stream_LE+0xae>
     4aa:	85 30       	cpi	r24, 0x05	; 5
				break;
     4ac:	e9 f1       	breq	.+122    	; 0x528 <Endpoint_Write_Control_Stream_LE+0xb2>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	80 91 e8 00 	lds	r24, 0x00E8
     4b2:	83 fd       	sbrc	r24, 3
     4b4:	3b c0       	rjmp	.+118    	; 0x52c <Endpoint_Write_Control_Stream_LE+0xb6>
     4b6:	80 91 e8 00 	lds	r24, 0x00E8
     4ba:	82 ff       	sbrs	r24, 2
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <Endpoint_Write_Control_Stream_LE+0x54>
     4be:	80 91 e8 00 	lds	r24, 0x00E8
     4c2:	82 ff       	sbrs	r24, 2
     4c4:	24 c0       	rjmp	.+72     	; 0x50e <Endpoint_Write_Control_Stream_LE+0x98>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	08 95       	ret
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	80 91 e8 00 	lds	r24, 0x00E8
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	e5 cf       	rjmp	.-54     	; 0x49c <Endpoint_Write_Control_Stream_LE+0x26>
     4d2:	80 91 f2 00 	lds	r24, 0x00F2
     4d6:	90 91 f3 00 	lds	r25, 0x00F3
     4da:	61 15       	cp	r22, r1
     4dc:	71 05       	cpc	r23, r1
     4de:	51 f0       	breq	.+20     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x7e>
     4e0:	88 30       	cpi	r24, 0x08	; 8
     4e2:	91 05       	cpc	r25, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	38 f4       	brcc	.+14     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x7e>
     4e6:	21 91       	ld	r18, Z+
     4e8:	20 93 f1 00 	sts	0x00F1, r18
     4ec:	61 50       	subi	r22, 0x01	; 1
     4ee:	71 09       	sbc	r23, r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	f3 cf       	rjmp	.-26     	; 0x4da <Endpoint_Write_Control_Stream_LE+0x64>
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	08 97       	sbiw	r24, 0x08	; 8
     4f8:	09 f0       	breq	.+2      	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x86>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	80 91 e8 00 	lds	r24, 0x00E8
     500:	8e 77       	andi	r24, 0x7E	; 126
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 93 e8 00 	sts	0x00E8, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	ca cf       	rjmp	.-108    	; 0x49c <Endpoint_Write_Control_Stream_LE+0x26>
     508:	21 11       	cpse	r18, r1
     50a:	cb cf       	rjmp	.-106    	; 0x4a2 <Endpoint_Write_Control_Stream_LE+0x2c>
     50c:	d8 cf       	rjmp	.-80     	; 0x4be <Endpoint_Write_Control_Stream_LE+0x48>
     50e:	80 91 86 01 	lds	r24, 0x0186
     512:	88 23       	and	r24, r24
     514:	39 f0       	breq	.+14     	; 0x524 <Endpoint_Write_Control_Stream_LE+0xae>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	85 30       	cpi	r24, 0x05	; 5
     518:	39 f0       	breq	.+14     	; 0x528 <Endpoint_Write_Control_Stream_LE+0xb2>
     51a:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
     51e:	83 ff       	sbrs	r24, 3
     520:	ce cf       	rjmp	.-100    	; 0x4be <Endpoint_Write_Control_Stream_LE+0x48>
     522:	04 c0       	rjmp	.+8      	; 0x52c <Endpoint_Write_Control_Stream_LE+0xb6>
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	08 95       	ret
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	08 95       	ret
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	08 95       	ret

00000530 <Endpoint_Read_Control_Stream_LE>:
     530:	61 15       	cp	r22, r1
     532:	71 05       	cpc	r23, r1
     534:	29 f4       	brne	.+10     	; 0x540 <Endpoint_Read_Control_Stream_LE+0x10>
     536:	20 91 e8 00 	lds	r18, 0x00E8
     53a:	2b 77       	andi	r18, 0x7B	; 123
     53c:	20 93 e8 00 	sts	0x00E8, r18

						for (uint8_t i = 1; i < UsageListSize; i++)
     540:	61 15       	cp	r22, r1
     542:	71 05       	cpc	r23, r1
     544:	31 f1       	breq	.+76     	; 0x592 <Endpoint_Read_Control_Stream_LE+0x62>
     546:	20 91 86 01 	lds	r18, 0x0186
						  UsageList[i - 1] = UsageList[i];
     54a:	22 23       	and	r18, r18
     54c:	59 f1       	breq	.+86     	; 0x5a4 <Endpoint_Read_Control_Stream_LE+0x74>
     54e:	25 30       	cpi	r18, 0x05	; 5
     550:	59 f1       	breq	.+86     	; 0x5a8 <Endpoint_Read_Control_Stream_LE+0x78>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	20 91 e8 00 	lds	r18, 0x00E8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	23 fd       	sbrc	r18, 3
     558:	21 c0       	rjmp	.+66     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x6c>
     55a:	20 91 e8 00 	lds	r18, 0x00E8
     55e:	22 ff       	sbrs	r18, 2
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	f2 cf       	rjmp	.-28     	; 0x546 <Endpoint_Read_Control_Stream_LE+0x16>
     562:	fc 01       	movw	r30, r24
     564:	cf 01       	movw	r24, r30
     566:	20 91 f2 00 	lds	r18, 0x00F2
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	30 91 f3 00 	lds	r19, 0x00F3
     56e:	23 2b       	or	r18, r19
     570:	11 f3       	breq	.-60     	; 0x536 <Endpoint_Read_Control_Stream_LE+0x6>
     572:	80 91 f1 00 	lds	r24, 0x00F1
     576:	81 93       	st	Z+, r24
     578:	cf 01       	movw	r24, r30
     57a:	61 50       	subi	r22, 0x01	; 1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	71 09       	sbc	r23, r1
     57e:	61 15       	cp	r22, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	71 05       	cpc	r23, r1
     582:	81 f7       	brne	.-32     	; 0x564 <Endpoint_Read_Control_Stream_LE+0x34>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	d8 cf       	rjmp	.-80     	; 0x536 <Endpoint_Read_Control_Stream_LE+0x6>
     586:	80 91 86 01 	lds	r24, 0x0186
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	88 23       	and	r24, r24
     58c:	59 f0       	breq	.+22     	; 0x5a4 <Endpoint_Read_Control_Stream_LE+0x74>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	85 30       	cpi	r24, 0x05	; 5
     590:	59 f0       	breq	.+22     	; 0x5a8 <Endpoint_Read_Control_Stream_LE+0x78>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	80 91 e8 00 	lds	r24, 0x00E8
     596:	80 ff       	sbrs	r24, 0
     598:	f6 cf       	rjmp	.-20     	; 0x586 <Endpoint_Read_Control_Stream_LE+0x56>
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <Endpoint_Read_Control_Stream_LE+0x70>
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	08 95       	ret
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	08 95       	ret
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	08 95       	ret
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	08 95       	ret

000005ac <Endpoint_Write_Control_PStream_LE>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	20 91 8d 01 	lds	r18, 0x018D
     5b0:	30 91 8e 01 	lds	r19, 0x018E
     5b4:	26 17       	cp	r18, r22
     5b6:	37 07       	cpc	r19, r23
     5b8:	48 f0       	brcs	.+18     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x20>
     5ba:	61 15       	cp	r22, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	71 05       	cpc	r23, r1
     5be:	39 f4       	brne	.+14     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x22>
     5c0:	20 91 e8 00 	lds	r18, 0x00E8
     5c4:	2e 77       	andi	r18, 0x7E	; 126
     5c6:	20 93 e8 00 	sts	0x00E8, r18
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x22>
     5cc:	b9 01       	movw	r22, r18
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	61 15       	cp	r22, r1
     5d4:	71 05       	cpc	r23, r1
     5d6:	b1 f1       	breq	.+108    	; 0x644 <Endpoint_Write_Control_PStream_LE+0x98>
     5d8:	80 91 86 01 	lds	r24, 0x0186
     5dc:	88 23       	and	r24, r24
     5de:	09 f4       	brne	.+2      	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0x36>
     5e0:	3f c0       	rjmp	.+126    	; 0x660 <Endpoint_Write_Control_PStream_LE+0xb4>
     5e2:	85 30       	cpi	r24, 0x05	; 5
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x3c>
     5e6:	3e c0       	rjmp	.+124    	; 0x664 <Endpoint_Write_Control_PStream_LE+0xb8>
     5e8:	80 91 e8 00 	lds	r24, 0x00E8
     5ec:	83 fd       	sbrc	r24, 3
     5ee:	3c c0       	rjmp	.+120    	; 0x668 <Endpoint_Write_Control_PStream_LE+0xbc>
     5f0:	80 91 e8 00 	lds	r24, 0x00E8

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	82 ff       	sbrs	r24, 2
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <Endpoint_Write_Control_PStream_LE+0x58>
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	82 ff       	sbrs	r24, 2
					  return HID_PARSE_InsufficientReportItems;
     5fe:	25 c0       	rjmp	.+74     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x9e>
     600:	80 e0       	ldi	r24, 0x00	; 0

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	08 95       	ret
     604:	80 91 e8 00 	lds	r24, 0x00E8
     608:	80 ff       	sbrs	r24, 0
     60a:	e3 cf       	rjmp	.-58     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x26>
     60c:	80 91 f2 00 	lds	r24, 0x00F2
     610:	90 91 f3 00 	lds	r25, 0x00F3
     614:	61 15       	cp	r22, r1
     616:	71 05       	cpc	r23, r1
     618:	59 f0       	breq	.+22     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x84>
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	91 05       	cpc	r25, r1
     61e:	40 f4       	brcc	.+16     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x84>
     620:	24 91       	lpm	r18, Z
     622:	20 93 f1 00 	sts	0x00F1, r18
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	61 50       	subi	r22, 0x01	; 1
     62a:	71 09       	sbc	r23, r1
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	f2 cf       	rjmp	.-28     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x68>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	08 97       	sbiw	r24, 0x08	; 8
     634:	09 f0       	breq	.+2      	; 0x638 <Endpoint_Write_Control_PStream_LE+0x8c>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	80 91 e8 00 	lds	r24, 0x00E8
     63c:	8e 77       	andi	r24, 0x7E	; 126
     63e:	80 93 e8 00 	sts	0x00E8, r24
     642:	c7 cf       	rjmp	.-114    	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x26>
     644:	21 11       	cpse	r18, r1
     646:	c8 cf       	rjmp	.-112    	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x2c>
     648:	d7 cf       	rjmp	.-82     	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x4c>
     64a:	80 91 86 01 	lds	r24, 0x0186
     64e:	88 23       	and	r24, r24
     650:	39 f0       	breq	.+14     	; 0x660 <Endpoint_Write_Control_PStream_LE+0xb4>
     652:	85 30       	cpi	r24, 0x05	; 5
     654:	39 f0       	breq	.+14     	; 0x664 <Endpoint_Write_Control_PStream_LE+0xb8>
     656:	80 91 e8 00 	lds	r24, 0x00E8
     65a:	83 ff       	sbrs	r24, 3
     65c:	cd cf       	rjmp	.-102    	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x4c>
     65e:	04 c0       	rjmp	.+8      	; 0x668 <Endpoint_Write_Control_PStream_LE+0xbc>
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	08 95       	ret
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	08 95       	ret
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret

0000066c <Endpoint_ConfigureEndpoint_Prv>:
     66c:	98 2f       	mov	r25, r24
     66e:	97 30       	cpi	r25, 0x07	; 7
     670:	58 f5       	brcc	.+86     	; 0x6c8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     672:	90 93 e9 00 	sts	0x00E9, r25
     676:	98 17       	cp	r25, r24
     678:	39 f0       	breq	.+14     	; 0x688 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     67a:	70 91 ec 00 	lds	r23, 0x00EC
     67e:	20 91 ed 00 	lds	r18, 0x00ED
     682:	50 91 f0 00 	lds	r21, 0x00F0
     686:	03 c0       	rjmp	.+6      	; 0x68e <Endpoint_ConfigureEndpoint_Prv+0x22>
					  ParserData->TotalReportItems++;
     688:	24 2f       	mov	r18, r20
     68a:	76 2f       	mov	r23, r22
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	21 ff       	sbrs	r18, 1
     690:	19 c0       	rjmp	.+50     	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv+0x58>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	30 91 eb 00 	lds	r19, 0x00EB
     696:	3e 7f       	andi	r19, 0xFE	; 254
     698:	30 93 eb 00 	sts	0x00EB, r19
     69c:	30 91 ed 00 	lds	r19, 0x00ED
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a0:	3d 7f       	andi	r19, 0xFD	; 253
     6a2:	30 93 ed 00 	sts	0x00ED, r19
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	30 91 eb 00 	lds	r19, 0x00EB
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	31 60       	ori	r19, 0x01	; 1
     6ac:	30 93 eb 00 	sts	0x00EB, r19
     6b0:	70 93 ec 00 	sts	0x00EC, r23
		}
	}

	if (!(ParserData->TotalReportItems))
     6b4:	20 93 ed 00 	sts	0x00ED, r18
     6b8:	50 93 f0 00 	sts	0x00F0, r21
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	20 91 ee 00 	lds	r18, 0x00EE

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6c0:	27 ff       	sbrs	r18, 7
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv+0x66>
     6c4:	9f 5f       	subi	r25, 0xFF	; 255
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	d3 cf       	rjmp	.-90     	; 0x66e <Endpoint_ConfigureEndpoint_Prv+0x2>
     6c8:	8f 70       	andi	r24, 0x0F	; 15
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	80 93 e9 00 	sts	0x00E9, r24

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	08 95       	ret
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	08 95       	ret

000006d6 <Endpoint_ConfigureEndpointTable>:
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	0f 93       	push	r16

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	06 2f       	mov	r16, r22
     6e0:	ec 01       	movw	r28, r24
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	10 17       	cp	r17, r16
     6e6:	71 f1       	breq	.+92     	; 0x744 <Endpoint_ConfigureEndpointTable+0x6e>
     6e8:	98 81       	ld	r25, Y
     6ea:	99 23       	and	r25, r25
     6ec:	41 f1       	breq	.+80     	; 0x73e <Endpoint_ConfigureEndpointTable+0x68>
     6ee:	2c 81       	ldd	r18, Y+4	; 0x04
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	fa 81       	ldd	r31, Y+2	; 0x02
     6f4:	7b 81       	ldd	r23, Y+3	; 0x03
     6f6:	89 2f       	mov	r24, r25
     6f8:	8f 70       	andi	r24, 0x0F	; 15
     6fa:	87 30       	cpi	r24, 0x07	; 7
     6fc:	10 f0       	brcs	.+4      	; 0x702 <Endpoint_ConfigureEndpointTable+0x2c>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	22 c0       	rjmp	.+68     	; 0x746 <Endpoint_ConfigureEndpointTable+0x70>
     702:	22 30       	cpi	r18, 0x02	; 2
     704:	10 f0       	brcs	.+4      	; 0x70a <Endpoint_ConfigureEndpointTable+0x34>
     706:	56 e0       	ldi	r21, 0x06	; 6
     708:	01 c0       	rjmp	.+2      	; 0x70c <Endpoint_ConfigureEndpointTable+0x36>
     70a:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     70c:	28 e0       	ldi	r18, 0x08	; 8
     70e:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     710:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     712:	2e 17       	cp	r18, r30
     714:	3f 07       	cpc	r19, r31
     716:	20 f4       	brcc	.+8      	; 0x720 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     718:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	f9 cf       	rjmp	.-14     	; 0x712 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     720:	42 95       	swap	r20
     722:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     724:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     726:	69 2f       	mov	r22, r25
     728:	66 1f       	adc	r22, r22
     72a:	66 27       	eor	r22, r22
     72c:	66 1f       	adc	r22, r22
     72e:	90 e4       	ldi	r25, 0x40	; 64
     730:	79 9f       	mul	r23, r25
     732:	90 01       	movw	r18, r0
     734:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     736:	62 2b       	or	r22, r18
     738:	99 df       	rcall	.-206    	; 0x66c <Endpoint_ConfigureEndpoint_Prv>
     73a:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     73c:	01 f3       	breq	.-64     	; 0x6fe <Endpoint_ConfigureEndpointTable+0x28>
     73e:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     740:	25 96       	adiw	r28, 0x05	; 5
     742:	d0 cf       	rjmp	.-96     	; 0x6e4 <Endpoint_ConfigureEndpointTable+0xe>
     744:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     746:	df 91       	pop	r29
}
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <Endpoint_ClearStatusStage>:
     750:	80 91 87 01 	lds	r24, 0x0187
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     754:	87 fd       	sbrc	r24, 7
     756:	05 c0       	rjmp	.+10     	; 0x762 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     758:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     75c:	80 ff       	sbrs	r24, 0
     75e:	0e c0       	rjmp	.+28     	; 0x77c <Endpoint_ClearStatusStage+0x2c>
     760:	12 c0       	rjmp	.+36     	; 0x786 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     762:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     766:	82 fd       	sbrc	r24, 2
     768:	05 c0       	rjmp	.+10     	; 0x774 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     76a:	80 91 86 01 	lds	r24, 0x0186
     76e:	81 11       	cpse	r24, r1
     770:	f8 cf       	rjmp	.-16     	; 0x762 <Endpoint_ClearStatusStage+0x12>
     772:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     774:	80 91 e8 00 	lds	r24, 0x00E8
     778:	8b 77       	andi	r24, 0x7B	; 123
     77a:	08 c0       	rjmp	.+16     	; 0x78c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     77c:	80 91 86 01 	lds	r24, 0x0186
     780:	81 11       	cpse	r24, r1
     782:	ea cf       	rjmp	.-44     	; 0x758 <Endpoint_ClearStatusStage+0x8>
     784:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     786:	80 91 e8 00 	lds	r24, 0x00E8
     78a:	8e 77       	andi	r24, 0x7E	; 126
     78c:	80 93 e8 00 	sts	0x00E8, r24
     790:	08 95       	ret

00000792 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     792:	80 91 e4 00 	lds	r24, 0x00E4
     796:	90 91 e5 00 	lds	r25, 0x00E5
     79a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     79c:	20 91 ec 00 	lds	r18, 0x00EC
     7a0:	20 ff       	sbrs	r18, 0
     7a2:	21 c0       	rjmp	.+66     	; 0x7e6 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7a4:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7a8:	20 fd       	sbrc	r18, 0
     7aa:	21 c0       	rjmp	.+66     	; 0x7ee <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ac:	20 91 86 01 	lds	r18, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7b0:	22 23       	and	r18, r18
     7b2:	89 f0       	breq	.+34     	; 0x7d6 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7b4:	25 30       	cpi	r18, 0x05	; 5
     7b6:	89 f0       	breq	.+34     	; 0x7da <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7b8:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7bc:	25 fd       	sbrc	r18, 5
     7be:	0f c0       	rjmp	.+30     	; 0x7de <Endpoint_WaitUntilReady+0x4c>
     7c0:	20 91 e4 00 	lds	r18, 0x00E4
     7c4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7c8:	28 17       	cp	r18, r24
     7ca:	39 07       	cpc	r19, r25
     7cc:	39 f3       	breq	.-50     	; 0x79c <Endpoint_WaitUntilReady+0xa>
     7ce:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7d0:	41 f0       	breq	.+16     	; 0x7e2 <Endpoint_WaitUntilReady+0x50>
     7d2:	c9 01       	movw	r24, r18
     7d4:	e3 cf       	rjmp	.-58     	; 0x79c <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7ea:	22 ff       	sbrs	r18, 2
     7ec:	df cf       	rjmp	.-66     	; 0x7ac <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	08 95       	ret

000007f2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7fa:	4e d0       	rcall	.+156    	; 0x898 <USB_INT_DisableAllInterrupts>
     7fc:	55 d0       	rcall	.+170    	; 0x8a8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7fe:	c8 ed       	ldi	r28, 0xD8	; 216
     800:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     802:	88 81       	ld	r24, Y
     804:	8f 77       	andi	r24, 0x7F	; 127
     806:	88 83       	st	Y, r24
     808:	88 81       	ld	r24, Y
     80a:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     80c:	88 83       	st	Y, r24
     80e:	88 81       	ld	r24, Y
     810:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     812:	88 83       	st	Y, r24
     814:	e7 ed       	ldi	r30, 0xD7	; 215
     816:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     818:	80 81       	ld	r24, Z
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	80 83       	st	Z, r24
     81e:	19 bc       	out	0x29, r1	; 41
     820:	10 92 86 01 	sts	0x0186, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     824:	10 92 82 01 	sts	0x0182, r1
	USB_Device_ConfigurationNumber  = 0;
     828:	10 92 84 01 	sts	0x0184, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     82c:	10 92 83 01 	sts	0x0183, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     830:	00 ee       	ldi	r16, 0xE0	; 224
     832:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     834:	f8 01       	movw	r30, r16
     836:	80 81       	ld	r24, Z
     838:	8b 7f       	andi	r24, 0xFB	; 251
     83a:	80 83       	st	Z, r24
     83c:	88 81       	ld	r24, Y
     83e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     840:	88 83       	st	Y, r24
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	11 df       	rcall	.-478    	; 0x66c <Endpoint_ConfigureEndpoint_Prv>
     84a:	e1 ee       	ldi	r30, 0xE1	; 225
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     850:	8e 7f       	andi	r24, 0xFE	; 254
     852:	80 83       	st	Z, r24
     854:	e2 ee       	ldi	r30, 0xE2	; 226
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     85a:	81 60       	ori	r24, 0x01	; 1
     85c:	80 83       	st	Z, r24
     85e:	80 81       	ld	r24, Z
     860:	88 60       	ori	r24, 0x08	; 8
     862:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     864:	f8 01       	movw	r30, r16
     866:	80 81       	ld	r24, Z
     868:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     86a:	80 83       	st	Z, r24
     86c:	88 81       	ld	r24, Y
     86e:	80 61       	ori	r24, 0x10	; 16
     870:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <USB_Init>:
     87c:	e8 ed       	ldi	r30, 0xD8	; 216
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     882:	8f 7e       	andi	r24, 0xEF	; 239
     884:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     886:	e7 ed       	ldi	r30, 0xD7	; 215
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 85 01 	sts	0x0185, r24

	USB_ResetInterface();
     896:	ad cf       	rjmp	.-166    	; 0x7f2 <USB_ResetInterface>

00000898 <USB_INT_DisableAllInterrupts>:
     898:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	8c 7f       	andi	r24, 0xFC	; 252
     8a0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8a2:	10 92 e2 00 	sts	0x00E2, r1
     8a6:	08 95       	ret

000008a8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     8a8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8ac:	10 92 e1 00 	sts	0x00E1, r1
     8b0:	08 95       	ret

000008b2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	0b b6       	in	r0, 0x3b	; 59
     8be:	0f 92       	push	r0
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8d8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8dc:	82 ff       	sbrs	r24, 2
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8e0:	80 91 e2 00 	lds	r24, 0x00E2
     8e4:	82 ff       	sbrs	r24, 2
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8e8:	80 91 e1 00 	lds	r24, 0x00E1
     8ec:	8b 7f       	andi	r24, 0xFB	; 251
     8ee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8f2:	fd dc       	rcall	.-1542   	; 0x2ee <EVENT_USB_Device_StartOfFrame>
     8f4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8f8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8fa:	1d c0       	rjmp	.+58     	; 0x936 <__vector_10+0x84>
     8fc:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     900:	80 ff       	sbrs	r24, 0
     902:	19 c0       	rjmp	.+50     	; 0x936 <__vector_10+0x84>
     904:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     908:	8e 7f       	andi	r24, 0xFE	; 254
     90a:	80 93 da 00 	sts	0x00DA, r24
     90e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     912:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     914:	0c c0       	rjmp	.+24     	; 0x92e <__vector_10+0x7c>
     916:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     918:	89 bd       	out	0x29, r24	; 41
     91a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     91c:	89 bd       	out	0x29, r24	; 41
     91e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     920:	00 fe       	sbrs	r0, 0
     922:	fd cf       	rjmp	.-6      	; 0x91e <__vector_10+0x6c>
     924:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     926:	80 93 86 01 	sts	0x0186, r24
     92a:	c0 dc       	rcall	.-1664   	; 0x2ac <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__vector_10+0x84>
     92e:	19 bc       	out	0x29, r1	; 41
     930:	10 92 86 01 	sts	0x0186, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     934:	bd dc       	rcall	.-1670   	; 0x2b0 <EVENT_USB_Device_Disconnect>
     936:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     93a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     93c:	18 c0       	rjmp	.+48     	; 0x96e <__vector_10+0xbc>
     93e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     942:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     944:	14 c0       	rjmp	.+40     	; 0x96e <__vector_10+0xbc>
     946:	80 91 e2 00 	lds	r24, 0x00E2
     94a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     94c:	80 93 e2 00 	sts	0x00E2, r24
     950:	80 91 e2 00 	lds	r24, 0x00E2
     954:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     956:	80 93 e2 00 	sts	0x00E2, r24
     95a:	80 91 d8 00 	lds	r24, 0x00D8
     95e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     960:	80 93 d8 00 	sts	0x00D8, r24
     964:	19 bc       	out	0x29, r1	; 41
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	80 93 86 01 	sts	0x0186, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     96c:	01 d2       	rcall	.+1026   	; 0xd70 <USB_Event_Stub>
     96e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     972:	84 ff       	sbrs	r24, 4
     974:	2f c0       	rjmp	.+94     	; 0x9d4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     976:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     97a:	84 ff       	sbrs	r24, 4
     97c:	2b c0       	rjmp	.+86     	; 0x9d4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     97e:	8c e0       	ldi	r24, 0x0C	; 12
     980:	89 bd       	out	0x29, r24	; 41
     982:	8e e0       	ldi	r24, 0x0E	; 14
     984:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     986:	09 b4       	in	r0, 0x29	; 41
     988:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     98a:	fd cf       	rjmp	.-6      	; 0x986 <__vector_10+0xd4>
     98c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     996:	80 91 e1 00 	lds	r24, 0x00E1
     99a:	8f 7e       	andi	r24, 0xEF	; 239
     99c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9a0:	80 91 e2 00 	lds	r24, 0x00E2
     9a4:	8f 7e       	andi	r24, 0xEF	; 239
     9a6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9aa:	80 91 e2 00 	lds	r24, 0x00E2
     9ae:	81 60       	ori	r24, 0x01	; 1
     9b0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9b4:	80 91 82 01 	lds	r24, 0x0182
     9b8:	88 23       	and	r24, r24
     9ba:	11 f0       	breq	.+4      	; 0x9c0 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <__vector_10+0x11c>
     9c0:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     9c4:	87 ff       	sbrs	r24, 7
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 86 01 	sts	0x0186, r24
     9d2:	ce d1       	rcall	.+924    	; 0xd70 <USB_Event_Stub>
     9d4:	80 91 e1 00 	lds	r24, 0x00E1
     9d8:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     9da:	27 c0       	rjmp	.+78     	; 0xa2a <__vector_10+0x178>
     9dc:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9e0:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9e2:	23 c0       	rjmp	.+70     	; 0xa2a <__vector_10+0x178>
     9e4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9e8:	87 7f       	andi	r24, 0xF7	; 247
     9ea:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	80 93 86 01 	sts	0x0186, r24
     9f4:	10 92 82 01 	sts	0x0182, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9f8:	80 91 e1 00 	lds	r24, 0x00E1
     9fc:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9fe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a02:	80 91 e2 00 	lds	r24, 0x00E2
     a06:	8e 7f       	andi	r24, 0xFE	; 254
     a08:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a0c:	80 91 e2 00 	lds	r24, 0x00E2
     a10:	80 61       	ori	r24, 0x10	; 16
     a12:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a16:	42 e0       	ldi	r20, 0x02	; 2
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	27 de       	rcall	.-946    	; 0x66c <Endpoint_ConfigureEndpoint_Prv>
     a1e:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a22:	88 60       	ori	r24, 0x08	; 8
     a24:	80 93 f0 00 	sts	0x00F0, r24
     a28:	a3 d1       	rcall	.+838    	; 0xd70 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_11>:
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	0b b6       	in	r0, 0x3b	; 59
     a5c:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	cf 93       	push	r28
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a78:	c0 91 e9 00 	lds	r28, 0x00E9
     a7c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a7e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a82:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a86:	80 91 f0 00 	lds	r24, 0x00F0
     a8a:	87 7f       	andi	r24, 0xF7	; 247
     a8c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a90:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a92:	1d d0       	rcall	.+58     	; 0xace <USB_Device_ProcessControlRequest>
     a94:	10 92 e9 00 	sts	0x00E9, r1
     a98:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a9c:	88 60       	ori	r24, 0x08	; 8
     a9e:	80 93 f0 00 	sts	0x00F0, r24
     aa2:	c0 93 e9 00 	sts	0x00E9, r28
     aa6:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     aa8:	ef 91       	pop	r30
     aaa:	cf 91       	pop	r28
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0b be       	out	0x3b, r0	; 59
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <USB_Device_ProcessControlRequest>:
     ace:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	aa 97       	sbiw	r28, 0x2a	; 42
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	e7 e8       	ldi	r30, 0x87	; 135
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ae8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     aec:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	ef 38       	cpi	r30, 0x8F	; 143
     af2:	f2 07       	cpc	r31, r18
     af4:	c9 f7       	brne	.-14     	; 0xae8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     af6:	f5 db       	rcall	.-2070   	; 0x2e2 <EVENT_USB_Device_ControlRequest>
     af8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     afc:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     afe:	20 c1       	rjmp	.+576    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b00:	90 91 87 01 	lds	r25, 0x0187
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b04:	80 91 88 01 	lds	r24, 0x0188

		switch (USB_ControlRequest.bRequest)
     b08:	85 30       	cpi	r24, 0x05	; 5
     b0a:	09 f4       	brne	.+2      	; 0xb0e <USB_Device_ProcessControlRequest+0x40>
     b0c:	77 c0       	rjmp	.+238    	; 0xbfc <USB_Device_ProcessControlRequest+0x12e>
     b0e:	30 f4       	brcc	.+12     	; 0xb1c <USB_Device_ProcessControlRequest+0x4e>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	81 f1       	breq	.+96     	; 0xb74 <USB_Device_ProcessControlRequest+0xa6>
     b14:	68 f0       	brcs	.+26     	; 0xb30 <USB_Device_ProcessControlRequest+0x62>
     b16:	83 30       	cpi	r24, 0x03	; 3
     b18:	69 f1       	breq	.+90     	; 0xb74 <USB_Device_ProcessControlRequest+0xa6>
     b1a:	12 c1       	rjmp	.+548    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b1c:	88 30       	cpi	r24, 0x08	; 8
     b1e:	09 f4       	brne	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x54>
     b20:	e1 c0       	rjmp	.+450    	; 0xce4 <USB_Device_ProcessControlRequest+0x216>
     b22:	89 30       	cpi	r24, 0x09	; 9
     b24:	09 f4       	brne	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x5a>
     b26:	f0 c0       	rjmp	.+480    	; 0xd08 <USB_Device_ProcessControlRequest+0x23a>
     b28:	86 30       	cpi	r24, 0x06	; 6
     b2a:	09 f0       	breq	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x60>
     b2c:	09 c1       	rjmp	.+530    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b2e:	88 c0       	rjmp	.+272    	; 0xc40 <USB_Device_ProcessControlRequest+0x172>
     b30:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b32:	81 f0       	breq	.+32     	; 0xb54 <USB_Device_ProcessControlRequest+0x86>
     b34:	92 38       	cpi	r25, 0x82	; 130
     b36:	09 f0       	breq	.+2      	; 0xb3a <USB_Device_ProcessControlRequest+0x6c>
     b38:	03 c1       	rjmp	.+518    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b3a:	80 91 8b 01 	lds	r24, 0x018B
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b3e:	8f 70       	andi	r24, 0x0F	; 15
     b40:	80 93 e9 00 	sts	0x00E9, r24
     b44:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b48:	85 fb       	bst	r24, 5
     b4a:	88 27       	eor	r24, r24
     b4c:	80 f9       	bld	r24, 0
     b4e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <USB_Device_ProcessControlRequest+0x92>
     b54:	80 91 83 01 	lds	r24, 0x0183
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b58:	90 91 84 01 	lds	r25, 0x0184
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b5c:	91 11       	cpse	r25, r1
     b5e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b60:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b64:	97 7f       	andi	r25, 0xF7	; 247
     b66:	90 93 e8 00 	sts	0x00E8, r25
     b6a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b6e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b72:	c3 c0       	rjmp	.+390    	; 0xcfa <USB_Device_ProcessControlRequest+0x22c>
     b74:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b76:	2d 7f       	andi	r18, 0xFD	; 253
     b78:	09 f0       	breq	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0xae>
     b7a:	e2 c0       	rjmp	.+452    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b7c:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b7e:	19 f0       	breq	.+6      	; 0xb86 <USB_Device_ProcessControlRequest+0xb8>
     b80:	92 30       	cpi	r25, 0x02	; 2
     b82:	61 f0       	breq	.+24     	; 0xb9c <USB_Device_ProcessControlRequest+0xce>
     b84:	dd c0       	rjmp	.+442    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b86:	90 91 89 01 	lds	r25, 0x0189
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b8a:	91 30       	cpi	r25, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0xc2>
     b8e:	d8 c0       	rjmp	.+432    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     b90:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b92:	09 f0       	breq	.+2      	; 0xb96 <USB_Device_ProcessControlRequest+0xc8>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 84 01 	sts	0x0184, r25
     b9a:	2a c0       	rjmp	.+84     	; 0xbf0 <USB_Device_ProcessControlRequest+0x122>
     b9c:	90 91 89 01 	lds	r25, 0x0189

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ba0:	91 11       	cpse	r25, r1
     ba2:	26 c0       	rjmp	.+76     	; 0xbf0 <USB_Device_ProcessControlRequest+0x122>
     ba4:	20 91 8b 01 	lds	r18, 0x018B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ba8:	2f 70       	andi	r18, 0x0F	; 15
     baa:	09 f4       	brne	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bac:	c9 c0       	rjmp	.+402    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     bae:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb2:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bb6:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <USB_Device_ProcessControlRequest+0x122>
     bba:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <USB_Device_ProcessControlRequest+0xf8>
     bbe:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	13 c0       	rjmp	.+38     	; 0xbec <USB_Device_ProcessControlRequest+0x11e>
     bc6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     bca:	80 61       	ori	r24, 0x10	; 16
     bcc:	80 93 eb 00 	sts	0x00EB, r24
     bd0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <USB_Device_ProcessControlRequest+0x10c>
     bd8:	88 0f       	add	r24, r24
     bda:	0a 94       	dec	r0
     bdc:	ea f7       	brpl	.-6      	; 0xbd8 <USB_Device_ProcessControlRequest+0x10a>
     bde:	80 93 ea 00 	sts	0x00EA, r24
     be2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     be6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	80 93 eb 00 	sts	0x00EB, r24
     bf0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	82 c0       	rjmp	.+260    	; 0xd00 <USB_Device_ProcessControlRequest+0x232>
     bfc:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bfe:	a0 c0       	rjmp	.+320    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     c00:	10 91 89 01 	lds	r17, 0x0189
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c04:	1f 77       	andi	r17, 0x7F	; 127
     c06:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c0a:	80 78       	andi	r24, 0x80	; 128
     c0c:	81 2b       	or	r24, r17
     c0e:	80 93 e3 00 	sts	0x00E3, r24
     c12:	80 91 e8 00 	lds	r24, 0x00E8
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	80 93 e8 00 	sts	0x00E8, r24
     c1c:	99 dd       	rcall	.-1230   	; 0x750 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c22:	80 ff       	sbrs	r24, 0
     c24:	fc cf       	rjmp	.-8      	; 0xc1e <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     c26:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     c2a:	80 68       	ori	r24, 0x80	; 128
     c2c:	80 93 e3 00 	sts	0x00E3, r24
     c30:	11 23       	and	r17, r17
     c32:	11 f0       	breq	.+4      	; 0xc38 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0x16c>
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	80 93 86 01 	sts	0x0186, r24
     c3e:	80 c0       	rjmp	.+256    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     c40:	90 58       	subi	r25, 0x80	; 128
     c42:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c44:	08 f0       	brcs	.+2      	; 0xc48 <USB_Device_ProcessControlRequest+0x17a>
     c46:	7c c0       	rjmp	.+248    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     c48:	80 91 89 01 	lds	r24, 0x0189
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c4c:	90 91 8a 01 	lds	r25, 0x018A
     c50:	8c 3d       	cpi	r24, 0xDC	; 220
     c52:	23 e0       	ldi	r18, 0x03	; 3
     c54:	92 07       	cpc	r25, r18
     c56:	71 f5       	brne	.+92     	; 0xcb4 <USB_Device_ProcessControlRequest+0x1e6>
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c5c:	8a e2       	ldi	r24, 0x2A	; 42
     c5e:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c60:	4f b7       	in	r20, 0x3f	; 63
     c62:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c64:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c66:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c6c:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c6e:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	50 93 57 00 	sts	0x0057, r21
     c76:	e4 91       	lpm	r30, Z
     c78:	20 ff       	sbrs	r18, 0
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
     c7c:	e2 95       	swap	r30
     c7e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c80:	3f 5f       	subi	r19, 0xFF	; 255
     c82:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c84:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	ea 30       	cpi	r30, 0x0A	; 10
     c8a:	10 f0       	brcs	.+4      	; 0xc90 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c8c:	c7 96       	adiw	r24, 0x37	; 55
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <USB_Device_ProcessControlRequest+0x1c4>
     c90:	c0 96       	adiw	r24, 0x30	; 48
     c92:	8d 93       	st	X+, r24
     c94:	9d 93       	st	X+, r25
     c96:	2f 5f       	subi	r18, 0xFF	; 255
     c98:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c9a:	49 f7       	brne	.-46     	; 0xc6e <USB_Device_ProcessControlRequest+0x1a0>
     c9c:	4f bf       	out	0x3f, r20	; 63
     c9e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca2:	87 7f       	andi	r24, 0xF7	; 247
     ca4:	80 93 e8 00 	sts	0x00E8, r24
     ca8:	6a e2       	ldi	r22, 0x2A	; 42
     caa:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	e2 db       	rcall	.-2108   	; 0x476 <Endpoint_Write_Control_Stream_LE>
     cb2:	12 c0       	rjmp	.+36     	; 0xcd8 <USB_Device_ProcessControlRequest+0x20a>
     cb4:	ae 01       	movw	r20, r28
     cb6:	4f 5f       	subi	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     cba:	60 91 8b 01 	lds	r22, 0x018B
     cbe:	51 db       	rcall	.-2398   	; 0x362 <CALLBACK_USB_GetDescriptor>
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x1f8>
     cc4:	3d c0       	rjmp	.+122    	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     cc6:	20 91 e8 00 	lds	r18, 0x00E8
     cca:	27 7f       	andi	r18, 0xF7	; 247
     ccc:	20 93 e8 00 	sts	0x00E8, r18
     cd0:	bc 01       	movw	r22, r24
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	6a dc       	rcall	.-1836   	; 0x5ac <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
     cdc:	8b 77       	andi	r24, 0x7B	; 123
     cde:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ce2:	2e c0       	rjmp	.+92     	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     ce4:	90 38       	cpi	r25, 0x80	; 128
     ce6:	61 f5       	brne	.+88     	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     ce8:	80 91 e8 00 	lds	r24, 0x00E8
     cec:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf2:	80 91 82 01 	lds	r24, 0x0182
     cf6:	80 93 f1 00 	sts	0x00F1, r24
     cfa:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cfe:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d00:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d04:	25 dd       	rcall	.-1462   	; 0x750 <Endpoint_ClearStatusStage>
     d06:	1c c0       	rjmp	.+56     	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     d08:	91 11       	cpse	r25, r1
     d0a:	1a c0       	rjmp	.+52     	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
     d0c:	90 91 89 01 	lds	r25, 0x0189
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d10:	92 30       	cpi	r25, 0x02	; 2
     d12:	b0 f4       	brcc	.+44     	; 0xd40 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d14:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	80 93 e8 00 	sts	0x00E8, r24
     d1e:	90 93 82 01 	sts	0x0182, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d22:	16 dd       	rcall	.-1492   	; 0x750 <Endpoint_ClearStatusStage>
     d24:	80 91 82 01 	lds	r24, 0x0182
     d28:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <USB_Device_ProcessControlRequest+0x266>
     d2c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d30:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <USB_Device_ProcessControlRequest+0x26a>
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <USB_Device_ProcessControlRequest+0x26c>
     d38:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d3a:	80 93 86 01 	sts	0x0186, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d3e:	ba da       	rcall	.-2700   	; 0x2b4 <EVENT_USB_Device_ConfigurationChanged>
     d40:	80 91 e8 00 	lds	r24, 0x00E8
     d44:	83 ff       	sbrs	r24, 3
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <USB_Device_ProcessControlRequest+0x28e>
     d48:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d4c:	87 7f       	andi	r24, 0xF7	; 247
     d4e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d52:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d56:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d58:	80 93 eb 00 	sts	0x00EB, r24
     d5c:	aa 96       	adiw	r28, 0x2a	; 42
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d6c:	1f 91       	pop	r17
     d6e:	08 95       	ret

00000d70 <USB_Event_Stub>:
     d70:	08 95       	ret

00000d72 <USB_USBTask>:
     d72:	cf 93       	push	r28
     d74:	80 91 86 01 	lds	r24, 0x0186
     d78:	88 23       	and	r24, r24
     d7a:	a9 f0       	breq	.+42     	; 0xda6 <USB_USBTask+0x34>
     d7c:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d80:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d82:	90 91 ec 00 	lds	r25, 0x00EC
     d86:	90 ff       	sbrs	r25, 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <USB_USBTask+0x1c>
     d8a:	90 e8       	ldi	r25, 0x80	; 128
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <USB_USBTask+0x1e>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d90:	c9 2f       	mov	r28, r25
     d92:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d94:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d98:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d9c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d9e:	97 de       	rcall	.-722    	; 0xace <USB_Device_ProcessControlRequest>
     da0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da2:	c0 93 e9 00 	sts	0x00E9, r28
     da6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     da8:	08 95       	ret

00000daa <CDC_Device_ConfigureEndpoints>:
     daa:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     db0:	fc 01       	movw	r30, r24
     db2:	70 96       	adiw	r30, 0x10	; 16
     db4:	8b e0       	ldi	r24, 0x0B	; 11
     db6:	df 01       	movw	r26, r30
     db8:	1d 92       	st	X+, r1
     dba:	8a 95       	dec	r24
     dbc:	e9 f7       	brne	.-6      	; 0xdb8 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     dc2:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	83 dc       	rcall	.-1786   	; 0x6d6 <Endpoint_ConfigureEndpointTable>
     dd0:	88 23       	and	r24, r24
     dd2:	61 f0       	breq	.+24     	; 0xdec <CDC_Device_ConfigureEndpoints+0x42>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     dd6:	ce 01       	movw	r24, r28
     dd8:	06 96       	adiw	r24, 0x06	; 6
     dda:	7d dc       	rcall	.-1798   	; 0x6d6 <Endpoint_ConfigureEndpointTable>
     ddc:	88 23       	and	r24, r24
     dde:	31 f0       	breq	.+12     	; 0xdec <CDC_Device_ConfigureEndpoints+0x42>
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     de4:	0b 96       	adiw	r24, 0x0b	; 11
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
	  return false;

	return true;
}
     dea:	75 cc       	rjmp	.-1814   	; 0x6d6 <Endpoint_ConfigureEndpointTable>
     dec:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
	  return false;

	return true;
}
     df2:	08 95       	ret

00000df4 <CDC_Device_SendString>:
     df4:	db 01       	movw	r26, r22
     df6:	20 91 86 01 	lds	r18, 0x0186
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     dfa:	24 30       	cpi	r18, 0x04	; 4
     dfc:	d1 f4       	brne	.+52     	; 0xe32 <CDC_Device_SendString+0x3e>
     dfe:	fc 01       	movw	r30, r24
     e00:	44 89       	ldd	r20, Z+20	; 0x14
     e02:	55 89       	ldd	r21, Z+21	; 0x15
     e04:	66 89       	ldd	r22, Z+22	; 0x16
     e06:	77 89       	ldd	r23, Z+23	; 0x17
     e08:	45 2b       	or	r20, r21
     e0a:	46 2b       	or	r20, r22
     e0c:	47 2b       	or	r20, r23
     e0e:	89 f0       	breq	.+34     	; 0xe32 <CDC_Device_SendString+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e10:	81 81       	ldd	r24, Z+1	; 0x01
     e12:	8f 70       	andi	r24, 0x0F	; 15
     e14:	80 93 e9 00 	sts	0x00E9, r24
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
     e18:	fd 01       	movw	r30, r26
     e1a:	01 90       	ld	r0, Z+
     e1c:	00 20       	and	r0, r0
     e1e:	e9 f7       	brne	.-6      	; 0xe1a <CDC_Device_SendString+0x26>
     e20:	bf 01       	movw	r22, r30
     e22:	61 50       	subi	r22, 0x01	; 1
     e24:	71 09       	sbc	r23, r1
     e26:	6a 1b       	sub	r22, r26
     e28:	7b 0b       	sbc	r23, r27
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	cd 01       	movw	r24, r26
     e30:	db ca       	rjmp	.-2634   	; 0x3e8 <Endpoint_Write_Stream_LE>
     e32:	82 e0       	ldi	r24, 0x02	; 2
}
     e34:	08 95       	ret

00000e36 <CDC_Device_Flush>:
     e36:	20 91 86 01 	lds	r18, 0x0186
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e3a:	24 30       	cpi	r18, 0x04	; 4
     e3c:	31 f5       	brne	.+76     	; 0xe8a <CDC_Device_Flush+0x54>
     e3e:	fc 01       	movw	r30, r24
     e40:	44 89       	ldd	r20, Z+20	; 0x14
     e42:	55 89       	ldd	r21, Z+21	; 0x15
     e44:	66 89       	ldd	r22, Z+22	; 0x16
     e46:	77 89       	ldd	r23, Z+23	; 0x17
     e48:	45 2b       	or	r20, r21
     e4a:	46 2b       	or	r20, r22
     e4c:	47 2b       	or	r20, r23
     e4e:	e9 f0       	breq	.+58     	; 0xe8a <CDC_Device_Flush+0x54>
     e50:	81 81       	ldd	r24, Z+1	; 0x01
     e52:	8f 70       	andi	r24, 0x0F	; 15
     e54:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     e58:	80 91 f2 00 	lds	r24, 0x00F2
     e5c:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e60:	89 2b       	or	r24, r25
     e62:	89 f0       	breq	.+34     	; 0xe86 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e64:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e68:	80 91 e8 00 	lds	r24, 0x00E8
     e6c:	8e 77       	andi	r24, 0x7E	; 126
     e6e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e72:	95 fd       	sbrc	r25, 5
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e76:	8d dc       	rcall	.-1766   	; 0x792 <Endpoint_WaitUntilReady>
     e78:	81 11       	cpse	r24, r1
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <CDC_Device_Flush+0x56>
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
     e80:	8e 77       	andi	r24, 0x7E	; 126
     e82:	80 93 e8 00 	sts	0x00E8, r24
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	08 95       	ret
     e8a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e8c:	08 95       	ret

00000e8e <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e8e:	20 91 86 01 	lds	r18, 0x0186
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e92:	24 30       	cpi	r18, 0x04	; 4
     e94:	89 f4       	brne	.+34     	; 0xeb8 <CDC_Device_USBTask+0x2a>
     e96:	fc 01       	movw	r30, r24
     e98:	44 89       	ldd	r20, Z+20	; 0x14
     e9a:	55 89       	ldd	r21, Z+21	; 0x15
     e9c:	66 89       	ldd	r22, Z+22	; 0x16
     e9e:	77 89       	ldd	r23, Z+23	; 0x17
     ea0:	45 2b       	or	r20, r21
     ea2:	46 2b       	or	r20, r22
     ea4:	47 2b       	or	r20, r23
     ea6:	41 f0       	breq	.+16     	; 0xeb8 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea8:	21 81       	ldd	r18, Z+1	; 0x01
     eaa:	2f 70       	andi	r18, 0x0F	; 15
     eac:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eb0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     eb4:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     eb6:	bf cf       	rjmp	.-130    	; 0xe36 <CDC_Device_Flush>
     eb8:	08 95       	ret

00000eba <CDC_Device_ReceiveByte>:
     eba:	20 91 86 01 	lds	r18, 0x0186
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ebe:	24 30       	cpi	r18, 0x04	; 4
     ec0:	19 f0       	breq	.+6      	; 0xec8 <CDC_Device_ReceiveByte+0xe>
	  return -1;
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	9f ef       	ldi	r25, 0xFF	; 255
     ec6:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ec8:	fc 01       	movw	r30, r24
     eca:	44 89       	ldd	r20, Z+20	; 0x14
     ecc:	55 89       	ldd	r21, Z+21	; 0x15
     ece:	66 89       	ldd	r22, Z+22	; 0x16
     ed0:	77 89       	ldd	r23, Z+23	; 0x17
     ed2:	45 2b       	or	r20, r21
     ed4:	46 2b       	or	r20, r22
     ed6:	47 2b       	or	r20, r23
     ed8:	a1 f3       	breq	.-24     	; 0xec2 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eda:	86 81       	ldd	r24, Z+6	; 0x06
     edc:	8f 70       	andi	r24, 0x0F	; 15
     ede:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ee2:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     ee6:	82 ff       	sbrs	r24, 2
     ee8:	ec cf       	rjmp	.-40     	; 0xec2 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     eea:	80 91 f2 00 	lds	r24, 0x00F2
     eee:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     ef2:	89 2b       	or	r24, r25
     ef4:	21 f0       	breq	.+8      	; 0xefe <CDC_Device_ReceiveByte+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ef6:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <CDC_Device_ReceiveByte+0x48>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     efe:	2f ef       	ldi	r18, 0xFF	; 255
     f00:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f02:	80 91 f2 00 	lds	r24, 0x00F2
     f06:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     f0a:	89 2b       	or	r24, r25
     f0c:	29 f4       	brne	.+10     	; 0xf18 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f0e:	80 91 e8 00 	lds	r24, 0x00E8
     f12:	8b 77       	andi	r24, 0x7B	; 123
     f14:	80 93 e8 00 	sts	0x00E8, r24
     f18:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     f1a:	08 95       	ret

00000f1c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     f1c:	08 95       	ret

00000f1e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f24:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     f28:	83 ff       	sbrs	r24, 3
     f2a:	a6 c0       	rjmp	.+332    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     f2c:	88 81       	ld	r24, Y
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	20 91 8b 01 	lds	r18, 0x018B
     f34:	30 91 8c 01 	lds	r19, 0x018C
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	09 f0       	breq	.+2      	; 0xf40 <CDC_Device_ProcessControlRequest+0x22>
     f3e:	9c c0       	rjmp	.+312    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     f40:	80 91 88 01 	lds	r24, 0x0188
     f44:	81 32       	cpi	r24, 0x21	; 33
     f46:	61 f0       	breq	.+24     	; 0xf60 <CDC_Device_ProcessControlRequest+0x42>
     f48:	20 f4       	brcc	.+8      	; 0xf52 <CDC_Device_ProcessControlRequest+0x34>
     f4a:	80 32       	cpi	r24, 0x20	; 32
     f4c:	09 f4       	brne	.+2      	; 0xf50 <CDC_Device_ProcessControlRequest+0x32>
     f4e:	3e c0       	rjmp	.+124    	; 0xfcc <CDC_Device_ProcessControlRequest+0xae>
     f50:	93 c0       	rjmp	.+294    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
     f52:	82 32       	cpi	r24, 0x22	; 34
     f54:	09 f4       	brne	.+2      	; 0xf58 <CDC_Device_ProcessControlRequest+0x3a>
     f56:	6c c0       	rjmp	.+216    	; 0x1030 <CDC_Device_ProcessControlRequest+0x112>
     f58:	83 32       	cpi	r24, 0x23	; 35
     f5a:	09 f4       	brne	.+2      	; 0xf5e <CDC_Device_ProcessControlRequest+0x40>
     f5c:	7d c0       	rjmp	.+250    	; 0x1058 <CDC_Device_ProcessControlRequest+0x13a>
     f5e:	8c c0       	rjmp	.+280    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f60:	80 91 87 01 	lds	r24, 0x0187
     f64:	81 3a       	cpi	r24, 0xA1	; 161
     f66:	09 f0       	breq	.+2      	; 0xf6a <CDC_Device_ProcessControlRequest+0x4c>
     f68:	87 c0       	rjmp	.+270    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6a:	80 91 e8 00 	lds	r24, 0x00E8
     f6e:	87 7f       	andi	r24, 0xF7	; 247
     f70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f74:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f78:	80 ff       	sbrs	r24, 0
     f7a:	fc cf       	rjmp	.-8      	; 0xf74 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f7c:	4c 89       	ldd	r20, Y+20	; 0x14
     f7e:	5d 89       	ldd	r21, Y+21	; 0x15
     f80:	6e 89       	ldd	r22, Y+22	; 0x16
     f82:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f84:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f88:	bb 27       	eor	r27, r27
     f8a:	a7 2f       	mov	r26, r23
     f8c:	96 2f       	mov	r25, r22
     f8e:	85 2f       	mov	r24, r21
     f90:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     f94:	cb 01       	movw	r24, r22
     f96:	aa 27       	eor	r26, r26
     f98:	bb 27       	eor	r27, r27
     f9a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     f9e:	47 2f       	mov	r20, r23
     fa0:	55 27       	eor	r21, r21
     fa2:	66 27       	eor	r22, r22
     fa4:	77 27       	eor	r23, r23
     fa6:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     faa:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fac:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     fb0:	89 8d       	ldd	r24, Y+25	; 0x19
     fb2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     fb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fbc:	80 91 e8 00 	lds	r24, 0x00E8
     fc0:	8e 77       	andi	r24, 0x7E	; 126
     fc2:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     fca:	c2 cb       	rjmp	.-2172   	; 0x750 <Endpoint_ClearStatusStage>
     fcc:	80 91 87 01 	lds	r24, 0x0187
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fd0:	81 32       	cpi	r24, 0x21	; 33
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <CDC_Device_ProcessControlRequest+0xb8>
     fd4:	51 c0       	rjmp	.+162    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
     fd6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	80 93 e8 00 	sts	0x00E8, r24
     fe0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fe4:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <CDC_Device_ProcessControlRequest+0xd4>
     fe8:	80 91 86 01 	lds	r24, 0x0186
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     fec:	81 11       	cpse	r24, r1
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <CDC_Device_ProcessControlRequest+0xc2>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
     ff2:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ff6:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     ffa:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     ffe:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1002:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1004:	2d 8b       	std	Y+21, r18	; 0x15
    1006:	9e 8b       	std	Y+22, r25	; 0x16
    1008:	8f 8b       	std	Y+23, r24	; 0x17
    100a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    100e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1010:	80 91 f1 00 	lds	r24, 0x00F1
    1014:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1016:	80 91 f1 00 	lds	r24, 0x00F1
    101a:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    101c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1020:	8b 77       	andi	r24, 0x7B	; 123
    1022:	80 93 e8 00 	sts	0x00E8, r24
    1026:	94 db       	rcall	.-2264   	; 0x750 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1028:	ce 01       	movw	r24, r28
    102a:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    102c:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    102e:	76 cf       	rjmp	.-276    	; 0xf1c <CDC_Device_Event_Stub>
    1030:	80 91 87 01 	lds	r24, 0x0187
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1034:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1036:	01 f5       	brne	.+64     	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
    1038:	80 91 e8 00 	lds	r24, 0x00E8
    103c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    103e:	80 93 e8 00 	sts	0x00E8, r24
    1042:	86 db       	rcall	.-2292   	; 0x750 <Endpoint_ClearStatusStage>
    1044:	80 91 89 01 	lds	r24, 0x0189
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1048:	90 91 8a 01 	lds	r25, 0x018A

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    104c:	99 8b       	std	Y+17, r25	; 0x11
    104e:	88 8b       	std	Y+16, r24	; 0x10
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	62 cf       	rjmp	.-316    	; 0xf1c <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1058:	80 91 87 01 	lds	r24, 0x0187
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    105c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    105e:	61 f4       	brne	.+24     	; 0x1078 <CDC_Device_ProcessControlRequest+0x15a>
    1060:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	80 93 e8 00 	sts	0x00E8, r24
    106a:	72 db       	rcall	.-2332   	; 0x750 <Endpoint_ClearStatusStage>
    106c:	60 91 89 01 	lds	r22, 0x0189
    1070:	ce 01       	movw	r24, r28
    1072:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1074:	cf 91       	pop	r28
    1076:	52 cf       	rjmp	.-348    	; 0xf1c <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <HID_Device_ProcessControlRequest>:
			}

			break;
	}
}
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
			}

			break;
	}
}
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	00 d0       	rcall	.+0      	; 0x109c <HID_Device_ProcessControlRequest+0x1e>
    109c:	1f 92       	push	r1
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    10a4:	ad b6       	in	r10, 0x3d	; 61
    10a6:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10a8:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    10ac:	83 ff       	sbrs	r24, 3
    10ae:	02 c1       	rjmp	.+516    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    10b0:	f7 01       	movw	r30, r14
    10b2:	80 81       	ld	r24, Z
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	20 91 8b 01 	lds	r18, 0x018B
    10ba:	30 91 8c 01 	lds	r19, 0x018C
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <HID_Device_ProcessControlRequest+0x48>
    10c4:	f7 c0       	rjmp	.+494    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
    10c6:	80 91 88 01 	lds	r24, 0x0188
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <HID_Device_ProcessControlRequest+0x52>
    10ce:	99 c0       	rjmp	.+306    	; 0x1202 <HID_Device_ProcessControlRequest+0x184>
    10d0:	30 f4       	brcc	.+12     	; 0x10de <HID_Device_ProcessControlRequest+0x60>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <HID_Device_ProcessControlRequest+0x74>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	09 f4       	brne	.+2      	; 0x10dc <HID_Device_ProcessControlRequest+0x5e>
    10da:	d0 c0       	rjmp	.+416    	; 0x127c <HID_Device_ProcessControlRequest+0x1fe>
    10dc:	eb c0       	rjmp	.+470    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    10de:	8a 30       	cpi	r24, 0x0A	; 10
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <HID_Device_ProcessControlRequest+0x66>
    10e2:	b4 c0       	rjmp	.+360    	; 0x124c <HID_Device_ProcessControlRequest+0x1ce>
    10e4:	8b 30       	cpi	r24, 0x0B	; 11
    10e6:	09 f4       	brne	.+2      	; 0x10ea <HID_Device_ProcessControlRequest+0x6c>
    10e8:	9d c0       	rjmp	.+314    	; 0x1224 <HID_Device_ProcessControlRequest+0x1a6>
    10ea:	89 30       	cpi	r24, 0x09	; 9
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <HID_Device_ProcessControlRequest+0x72>
    10ee:	e2 c0       	rjmp	.+452    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    10f0:	4b c0       	rjmp	.+150    	; 0x1188 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10f2:	80 91 87 01 	lds	r24, 0x0187
    10f6:	81 3a       	cpi	r24, 0xA1	; 161
    10f8:	09 f0       	breq	.+2      	; 0x10fc <HID_Device_ProcessControlRequest+0x7e>
    10fa:	dc c0       	rjmp	.+440    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    10fc:	8d b6       	in	r8, 0x3d	; 61
    10fe:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1100:	1a 82       	std	Y+2, r1	; 0x02
    1102:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1104:	80 91 89 01 	lds	r24, 0x0189
    1108:	10 91 8a 01 	lds	r17, 0x018A
    110c:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    110e:	f7 01       	movw	r30, r14
    1110:	40 85       	ldd	r20, Z+8	; 0x08
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	8d b7       	in	r24, 0x3d	; 61
    1116:	9e b7       	in	r25, 0x3e	; 62
    1118:	84 1b       	sub	r24, r20
    111a:	95 0b       	sbc	r25, r21
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	9e bf       	out	0x3e, r25	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	8d bf       	out	0x3d, r24	; 61
    1126:	ed b7       	in	r30, 0x3d	; 61
    1128:	fe b7       	in	r31, 0x3e	; 62
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cf 01       	movw	r24, r30
    1134:	be d1       	rcall	.+892    	; 0x14b2 <memset>
    1136:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1138:	41 0f       	add	r20, r17
    113a:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    113c:	0f 5f       	subi	r16, 0xFF	; 255
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	96 01       	movw	r18, r12
    1142:	be 01       	movw	r22, r28
    1144:	6d 5f       	subi	r22, 0xFD	; 253
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	c7 01       	movw	r24, r14
    114a:	dd d8       	rcall	.-3654   	; 0x306 <CALLBACK_HID_Device_CreateHIDReport>
    114c:	f7 01       	movw	r30, r14
    114e:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1150:	97 81       	ldd	r25, Z+7	; 0x07
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	21 f0       	breq	.+8      	; 0x115e <HID_Device_ProcessControlRequest+0xe0>
    1156:	40 85       	ldd	r20, Z+8	; 0x08
    1158:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    115a:	b6 01       	movw	r22, r12
    115c:	a1 d1       	rcall	.+834    	; 0x14a0 <memcpy>
    115e:	10 92 e9 00 	sts	0x00E9, r1
    1162:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1166:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1168:	80 93 e8 00 	sts	0x00E8, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 11       	cpse	r24, r1
    1170:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1174:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1176:	7a 81       	ldd	r23, Y+2	; 0x02
    1178:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    117a:	7d d9       	rcall	.-3334   	; 0x476 <Endpoint_Write_Control_Stream_LE>
    117c:	80 91 e8 00 	lds	r24, 0x00E8
    1180:	8b 77       	andi	r24, 0x7B	; 123
    1182:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1186:	37 c0       	rjmp	.+110    	; 0x11f6 <HID_Device_ProcessControlRequest+0x178>
    1188:	80 91 87 01 	lds	r24, 0x0187
    118c:	81 32       	cpi	r24, 0x21	; 33
    118e:	09 f0       	breq	.+2      	; 0x1192 <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1190:	91 c0       	rjmp	.+290    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    1192:	8d b6       	in	r8, 0x3d	; 61
    1194:	9e b6       	in	r9, 0x3e	; 62
    1196:	00 91 8d 01 	lds	r16, 0x018D
    119a:	10 91 8e 01 	lds	r17, 0x018E
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    119e:	70 90 89 01 	lds	r7, 0x0189
    11a2:	60 90 8a 01 	lds	r6, 0x018A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    11a6:	8d b7       	in	r24, 0x3d	; 61
    11a8:	9e b7       	in	r25, 0x3e	; 62
    11aa:	80 1b       	sub	r24, r16
    11ac:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	9e bf       	out	0x3e, r25	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	8d bf       	out	0x3d, r24	; 61
    11b8:	ed b7       	in	r30, 0x3d	; 61
    11ba:	fe b7       	in	r31, 0x3e	; 62
    11bc:	31 96       	adiw	r30, 0x01	; 1
    11be:	6f 01       	movw	r12, r30
    11c0:	80 91 e8 00 	lds	r24, 0x00E8
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11ca:	b8 01       	movw	r22, r16
    11cc:	cf 01       	movw	r24, r30
    11ce:	b0 d9       	rcall	.-3232   	; 0x530 <Endpoint_Read_Control_Stream_LE>
    11d0:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    11d4:	8e 77       	andi	r24, 0x7E	; 126
    11d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	71 10       	cpse	r7, r1
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <HID_Device_ProcessControlRequest+0x164>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    11e4:	02 1b       	sub	r16, r18
    11e6:	13 0b       	sbc	r17, r19
    11e8:	2c 0d       	add	r18, r12
    11ea:	3d 1d       	adc	r19, r13
    11ec:	4f ef       	ldi	r20, 0xFF	; 255
    11ee:	46 0d       	add	r20, r6
    11f0:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    11f2:	c7 01       	movw	r24, r14
    11f4:	b5 d8       	rcall	.-3734   	; 0x360 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    11fa:	9e be       	out	0x3e, r9	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	8d be       	out	0x3d, r8	; 61
    1200:	59 c0       	rjmp	.+178    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    1202:	80 91 87 01 	lds	r24, 0x0187
    1206:	81 3a       	cpi	r24, 0xA1	; 161
    1208:	09 f0       	breq	.+2      	; 0x120c <HID_Device_ProcessControlRequest+0x18e>
    120a:	54 c0       	rjmp	.+168    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    120c:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1210:	87 7f       	andi	r24, 0xF7	; 247
    1212:	80 93 e8 00 	sts	0x00E8, r24
    1216:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    121a:	80 ff       	sbrs	r24, 0
    121c:	fc cf       	rjmp	.-8      	; 0x1216 <HID_Device_ProcessControlRequest+0x198>
    121e:	f7 01       	movw	r30, r14
    1220:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1222:	40 c0       	rjmp	.+128    	; 0x12a4 <HID_Device_ProcessControlRequest+0x226>
    1224:	80 91 87 01 	lds	r24, 0x0187
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1228:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    122a:	09 f0       	breq	.+2      	; 0x122e <HID_Device_ProcessControlRequest+0x1b0>
    122c:	43 c0       	rjmp	.+134    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    122e:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1232:	87 7f       	andi	r24, 0xF7	; 247
    1234:	80 93 e8 00 	sts	0x00E8, r24
    1238:	8b da       	rcall	.-2794   	; 0x750 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    123a:	90 91 89 01 	lds	r25, 0x0189
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	91 11       	cpse	r25, r1
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1248:	81 87       	std	Z+9, r24	; 0x09
    124a:	34 c0       	rjmp	.+104    	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    124c:	80 91 87 01 	lds	r24, 0x0187
    1250:	81 32       	cpi	r24, 0x21	; 33
    1252:	81 f5       	brne	.+96     	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    1254:	80 91 e8 00 	lds	r24, 0x00E8
    1258:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    125a:	80 93 e8 00 	sts	0x00E8, r24
    125e:	78 da       	rcall	.-2832   	; 0x750 <Endpoint_ClearStatusStage>
    1260:	80 91 89 01 	lds	r24, 0x0189
    1264:	90 91 8a 01 	lds	r25, 0x018A
    1268:	88 27       	eor	r24, r24
    126a:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1270:	3a 95       	dec	r19
    1272:	e1 f7       	brne	.-8      	; 0x126c <HID_Device_ProcessControlRequest+0x1ee>
    1274:	f7 01       	movw	r30, r14
    1276:	95 87       	std	Z+13, r25	; 0x0d
    1278:	84 87       	std	Z+12, r24	; 0x0c
    127a:	1c c0       	rjmp	.+56     	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    127c:	80 91 87 01 	lds	r24, 0x0187
    1280:	81 3a       	cpi	r24, 0xA1	; 161
    1282:	c1 f4       	brne	.+48     	; 0x12b4 <HID_Device_ProcessControlRequest+0x236>
    1284:	80 91 e8 00 	lds	r24, 0x00E8
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    128e:	80 91 e8 00 	lds	r24, 0x00E8
    1292:	80 ff       	sbrs	r24, 0
    1294:	fc cf       	rjmp	.-8      	; 0x128e <HID_Device_ProcessControlRequest+0x210>
    1296:	f7 01       	movw	r30, r14
    1298:	84 85       	ldd	r24, Z+12	; 0x0c
    129a:	95 85       	ldd	r25, Z+13	; 0x0d
    129c:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    129e:	87 95       	ror	r24
    12a0:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    12a2:	87 95       	ror	r24
    12a4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    12a8:	80 91 e8 00 	lds	r24, 0x00E8
    12ac:	8e 77       	andi	r24, 0x7E	; 126
    12ae:	80 93 e8 00 	sts	0x00E8, r24
    12b2:	4e da       	rcall	.-2916   	; 0x750 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b8:	be be       	out	0x3e, r11	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	ad be       	out	0x3d, r10	; 61
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
			}

			break;
	}
}
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	7f 90       	pop	r7
    12de:	6f 90       	pop	r6
    12e0:	08 95       	ret

000012e2 <HID_Device_ConfigureEndpoints>:
    12e2:	fc 01       	movw	r30, r24
    12e4:	39 96       	adiw	r30, 0x09	; 9
    12e6:	27 e0       	ldi	r18, 0x07	; 7
    12e8:	df 01       	movw	r26, r30
    12ea:	1d 92       	st	X+, r1
    12ec:	2a 95       	dec	r18
    12ee:	e9 f7       	brne	.-6      	; 0x12ea <HID_Device_ConfigureEndpoints+0x8>
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    12f4:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    12f6:	24 ef       	ldi	r18, 0xF4	; 244
    12f8:	31 e0       	ldi	r19, 0x01	; 1
    12fa:	35 87       	std	Z+13, r19	; 0x0d
    12fc:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    12fe:	23 e0       	ldi	r18, 0x03	; 3
    1300:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1302:	61 e0       	ldi	r22, 0x01	; 1
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	e7 c9       	rjmp	.-3122   	; 0x6d6 <Endpoint_ConfigureEndpointTable>

00001308 <HID_Device_USBTask>:
    1308:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    130a:	6f 92       	push	r6
    130c:	7f 92       	push	r7
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	00 d0       	rcall	.+0      	; 0x1328 <HID_Device_USBTask+0x20>
    1328:	1f 92       	push	r1
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1330:	ad b6       	in	r10, 0x3d	; 61
    1332:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1334:	80 91 86 01 	lds	r24, 0x0186
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	09 f0       	breq	.+2      	; 0x133e <HID_Device_USBTask+0x36>
    133c:	8c c0       	rjmp	.+280    	; 0x1456 <HID_Device_USBTask+0x14e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    133e:	80 91 e4 00 	lds	r24, 0x00E4
    1342:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1346:	f7 01       	movw	r30, r14
    1348:	22 85       	ldd	r18, Z+10	; 0x0a
    134a:	33 85       	ldd	r19, Z+11	; 0x0b
    134c:	28 17       	cp	r18, r24
    134e:	39 07       	cpc	r19, r25
    1350:	09 f4       	brne	.+2      	; 0x1354 <HID_Device_USBTask+0x4c>
    1352:	81 c0       	rjmp	.+258    	; 0x1456 <HID_Device_USBTask+0x14e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	8f 70       	andi	r24, 0x0F	; 15
    1358:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    135c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1360:	85 ff       	sbrs	r24, 5
    1362:	79 c0       	rjmp	.+242    	; 0x1456 <HID_Device_USBTask+0x14e>
    1364:	8d b6       	in	r8, 0x3d	; 61
    1366:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1368:	40 85       	ldd	r20, Z+8	; 0x08
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	8d b7       	in	r24, 0x3d	; 61
    136e:	9e b7       	in	r25, 0x3e	; 62
    1370:	84 1b       	sub	r24, r20
    1372:	95 0b       	sbc	r25, r21
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	9e bf       	out	0x3e, r25	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	8d bf       	out	0x3d, r24	; 61
    137e:	ed b7       	in	r30, 0x3d	; 61
    1380:	fe b7       	in	r31, 0x3e	; 62
    1382:	31 96       	adiw	r30, 0x01	; 1
    1384:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1386:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1388:	1a 82       	std	Y+2, r1	; 0x02
    138a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	cf 01       	movw	r24, r30
    1392:	8f d0       	rcall	.+286    	; 0x14b2 <memset>
    1394:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1396:	0f 5f       	subi	r16, 0xFF	; 255
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	96 01       	movw	r18, r12
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	be 01       	movw	r22, r28
    13a0:	6d 5f       	subi	r22, 0xFD	; 253
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	c7 01       	movw	r24, r14
    13a6:	0e 94 83 01 	call	0x306	; 0x306 <CALLBACK_HID_Device_CreateHIDReport>
    13aa:	68 2e       	mov	r6, r24
    13ac:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    13ae:	84 85       	ldd	r24, Z+12	; 0x0c
    13b0:	95 85       	ldd	r25, Z+13	; 0x0d
    13b2:	89 2b       	or	r24, r25
    13b4:	41 f0       	breq	.+16     	; 0x13c6 <HID_Device_USBTask+0xbe>
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	86 85       	ldd	r24, Z+14	; 0x0e
    13ba:	97 85       	ldd	r25, Z+15	; 0x0f
    13bc:	89 2b       	or	r24, r25
    13be:	09 f0       	breq	.+2      	; 0x13c2 <HID_Device_USBTask+0xba>
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	72 2e       	mov	r7, r18
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <HID_Device_USBTask+0xc0>
    13c6:	71 2c       	mov	r7, r1
    13c8:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    13ca:	06 81       	ldd	r16, Z+6	; 0x06
    13cc:	17 81       	ldd	r17, Z+7	; 0x07
    13ce:	01 15       	cp	r16, r1
    13d0:	11 05       	cpc	r17, r1
    13d2:	89 f0       	breq	.+34     	; 0x13f6 <HID_Device_USBTask+0xee>
    13d4:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    13d6:	5a 81       	ldd	r21, Y+2	; 0x02
    13d8:	b8 01       	movw	r22, r16
    13da:	c6 01       	movw	r24, r12
    13dc:	54 d0       	rcall	.+168    	; 0x1486 <memcmp>
    13de:	55 24       	eor	r5, r5
    13e0:	53 94       	inc	r5
    13e2:	89 2b       	or	r24, r25
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <HID_Device_USBTask+0xe0>
    13e6:	51 2c       	mov	r5, r1
    13e8:	f7 01       	movw	r30, r14
    13ea:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	b6 01       	movw	r22, r12
    13f0:	c8 01       	movw	r24, r16
    13f2:	56 d0       	rcall	.+172    	; 0x14a0 <memcpy>
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <HID_Device_USBTask+0xf0>
    13f6:	51 2c       	mov	r5, r1
    13f8:	29 81       	ldd	r18, Y+1	; 0x01
    13fa:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    13fc:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    13fe:	f9 f0       	breq	.+62     	; 0x143e <HID_Device_USBTask+0x136>
    1400:	61 10       	cpse	r6, r1
    1402:	04 c0       	rjmp	.+8      	; 0x140c <HID_Device_USBTask+0x104>
    1404:	51 10       	cpse	r5, r1
    1406:	02 c0       	rjmp	.+4      	; 0x140c <HID_Device_USBTask+0x104>
    1408:	70 fe       	sbrs	r7, 0
    140a:	19 c0       	rjmp	.+50     	; 0x143e <HID_Device_USBTask+0x136>
    140c:	f7 01       	movw	r30, r14
    140e:	84 85       	ldd	r24, Z+12	; 0x0c
    1410:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1412:	97 87       	std	Z+15, r25	; 0x0f
    1414:	86 87       	std	Z+14, r24	; 0x0e
    1416:	81 81       	ldd	r24, Z+1	; 0x01
    1418:	8f 70       	andi	r24, 0x0F	; 15
    141a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	81 11       	cpse	r24, r1
    1422:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1426:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1428:	7a 81       	ldd	r23, Y+2	; 0x02
    142a:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	c6 01       	movw	r24, r12
    1430:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Endpoint_Write_Stream_LE>
    1434:	80 91 e8 00 	lds	r24, 0x00E8
    1438:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    143a:	80 93 e8 00 	sts	0x00E8, r24
    143e:	80 91 e4 00 	lds	r24, 0x00E4
    1442:	90 91 e5 00 	lds	r25, 0x00E5
    1446:	f7 01       	movw	r30, r14
    1448:	93 87       	std	Z+11, r25	; 0x0b
    144a:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	9e be       	out	0x3e, r9	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	8d be       	out	0x3d, r8	; 61
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	be be       	out	0x3e, r11	; 62
	}
}
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	ad be       	out	0x3d, r10	; 61
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	08 95       	ret

00001486 <memcmp>:
    1486:	fb 01       	movw	r30, r22
    1488:	dc 01       	movw	r26, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <memcmp+0xe>
    148c:	8d 91       	ld	r24, X+
    148e:	01 90       	ld	r0, Z+
    1490:	80 19       	sub	r24, r0
    1492:	21 f4       	brne	.+8      	; 0x149c <memcmp+0x16>
    1494:	41 50       	subi	r20, 0x01	; 1
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	c8 f7       	brcc	.-14     	; 0x148c <memcmp+0x6>
    149a:	88 1b       	sub	r24, r24
    149c:	99 0b       	sbc	r25, r25
    149e:	08 95       	ret

000014a0 <memcpy>:
    14a0:	fb 01       	movw	r30, r22
    14a2:	dc 01       	movw	r26, r24
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <memcpy+0xa>
    14a6:	01 90       	ld	r0, Z+
    14a8:	0d 92       	st	X+, r0
    14aa:	41 50       	subi	r20, 0x01	; 1
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <memcpy+0x6>
    14b0:	08 95       	ret

000014b2 <memset>:
    14b2:	dc 01       	movw	r26, r24
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <memset+0x6>
    14b6:	6d 93       	st	X+, r22
    14b8:	41 50       	subi	r20, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	e0 f7       	brcc	.-8      	; 0x14b6 <memset+0x4>
    14be:	08 95       	ret

000014c0 <_exit>:
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>

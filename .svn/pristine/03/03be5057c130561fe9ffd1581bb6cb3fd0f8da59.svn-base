
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00002a74  00002b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001e4  008001e4  00002bec  2**0
                  ALLOC
  3 .stab         00002e98  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011cd  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006c51  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bb0  00000000  00000000  00006c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000189e0  00000000  00000000  00007812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058ab  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008e9f  00000000  00000000  00025a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000023dc  00000000  00000000  0002e93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006d50  00000000  00000000  00030d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010388  00000000  00000000  00037a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e98  00000000  00000000  00047df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_10>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
	{
		uint8_t InterfaceIndex = (USB_ControlRequest.wIndex & 0xFF);
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop

		if ((InterfaceIndex != AudioInterfaceInfo->Config.ControlInterfaceNumber) &&
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
		    (InterfaceIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber))
		{
			return;
		}
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
	{
		uint8_t EndpointAddress = (USB_ControlRequest.wIndex & 0xFF);
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop

		if ((EndpointAddress != AudioInterfaceInfo->Config.DataINEndpoint.Address) &&
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c c1       	rjmp	.+536    	; 0x2a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0a c1       	rjmp	.+532    	; 0x2a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 c1       	rjmp	.+528    	; 0x2a6 <__bad_interrupt>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
      96:	00 00       	nop

00000098 <__c.5345>:
      98:	1b 5b 33 33 6d 55 49 44 20 43 68 61 6e 67 65 20     .[33mUID Change 
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
      a8:	74 6f 20 25 53 20 6d 6f 64 65 0d 0a 1b 5b 33 37     to %S mode...[37

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
      b8:	6d 00                                               m.

000000ba <__c.5349>:
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
      ba:	48 6f 73 74 00                                      Host.

000000bf <__c.5347>:
      bf:	44 65 76 69 63 65 00                                Device.

000000c6 <__c.5336>:
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
      c6:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
      d6:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
		case AUDIO_REQ_SetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
      e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000f2 <ProductString>:

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
      f2:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     102:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
					uint8_t  Value[ValueLength];
     112:	00 00                                               ..

00000114 <ManufacturerString>:
     114:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     124:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012e <LanguageString>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     12e:	04 03 09 04                                         ....

00000132 <ConfigurationDescriptor>:
     132:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     142:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     152:	00 05                                               ..

00000154 <DeviceDescriptor>:
     154:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     164:	00 01                                               ..

00000166 <MouseReport>:
     166:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
				uint16_t Parameter = USB_ControlRequest.wValue;
     176:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     186:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     196:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001a0 <__c.5366>:
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     1a0:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
					uint8_t  Value[ValueLength];
     1b0:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001ba <__c.5359>:
     1ba:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     1ca:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     1da:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     1ea:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     1fa:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
				uint16_t ValueLength      = USB_ControlRequest.wLength;
     20a:	1b 5b 33 37 6d 00                                   .[37m.

00000210 <__c.5352>:
				uint8_t  Value[ValueLength];
     210:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     220:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     230:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000023f <__c.5342>:
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearOUT();
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     23f:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
				uint16_t Parameter   = USB_ControlRequest.wValue;
     24f:	68 65 64 2e 0d 0a 00                                hed....

00000256 <__c.5337>:
				uint16_t ValueLength = USB_ControlRequest.wLength;
     256:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
				uint8_t  Value[ValueLength];
     266:	0d 0a 00 00                                         ....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d0 e2       	ldi	r29, 0x20	; 32
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e4 e7       	ldi	r30, 0x74	; 116
     27e:	fa e2       	ldi	r31, 0x2A	; 42
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a4 3e       	cpi	r26, 0xE4	; 228
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	12 e0       	ldi	r17, 0x02	; 2
     292:	a4 ee       	ldi	r26, 0xE4	; 228
     294:	b1 e0       	ldi	r27, 0x01	; 1
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	ae 30       	cpi	r26, 0x0E	; 14
     29c:	b1 07       	cpc	r27, r17
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     2a0:	41 d0       	rcall	.+130    	; 0x324 <main>
     2a2:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <SetupHardware>:
     2a8:	84 b7       	in	r24, 0x34	; 52
     2aa:	87 7f       	andi	r24, 0xF7	; 247
     2ac:	84 bf       	out	0x34, r24	; 52
     2ae:	88 e1       	ldi	r24, 0x18	; 24
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
				}
			}

			break;
	}
}
     2b4:	80 93 60 00 	sts	0x0060, r24
     2b8:	10 92 60 00 	sts	0x0060, r1
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	80 93 61 00 	sts	0x0061, r24
     2ca:	90 93 61 00 	sts	0x0061, r25
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	83 e3       	ldi	r24, 0x33	; 51
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 cd 00 	sts	0x00CD, r25
     2d8:	80 93 cc 00 	sts	0x00CC, r24
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	80 93 ca 00 	sts	0x00CA, r24
     2e2:	10 92 c8 00 	sts	0x00C8, r1
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2e6:	88 e1       	ldi	r24, 0x18	; 24
     2e8:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     2ec:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ee:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2f0:	8a b1       	in	r24, 0x0a	; 10
     2f2:	80 6f       	ori	r24, 0xF0	; 240
     2f4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2f6:	8b b1       	in	r24, 0x0b	; 11
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     2fc:	84 b1       	in	r24, 0x04	; 4
     2fe:	8f 71       	andi	r24, 0x1F	; 31
     300:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     302:	8d b1       	in	r24, 0x0d	; 13
     304:	8f 7c       	andi	r24, 0xCF	; 207
     306:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     308:	85 b1       	in	r24, 0x05	; 5
     30a:	80 6e       	ori	r24, 0xE0	; 224
     30c:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     30e:	8e b1       	in	r24, 0x0e	; 14
     310:	80 63       	ori	r24, 0x30	; 48
     312:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     314:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     316:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	96 d7       	rcall	.+3884   	; 0x1248 <USB_Init>
     31c:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <Serial_CreateStream>

00000324 <main>:
     324:	c1 df       	rcall	.-126    	; 0x2a8 <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     326:	86 ec       	ldi	r24, 0xC6	; 198

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 75 12 	call	0x24ea	; 0x24ea <puts_P>
     32e:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	80 61       	ori	r24, 0x10	; 16
     334:	8b b9       	out	0x0b, r24	; 11
     336:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     338:	80 91 ea 01 	lds	r24, 0x01EA
	GlobalInterruptEnable();

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <main+0x20>
     340:	52 d1       	rcall	.+676    	; 0x5e6 <MouseHost_Task>
		{
			MouseHost_Task();
     342:	04 c0       	rjmp	.+8      	; 0x34c <main+0x28>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     348:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <HID_Device_USBTask>
     34c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <USB_USBTask>
		}

		USB_USBTask();
     350:	f3 cf       	rjmp	.-26     	; 0x338 <main+0x14>

00000352 <EVENT_USB_UIDChange>:
     352:	80 91 ea 01 	lds	r24, 0x01EA
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	19 f4       	brne	.+6      	; 0x360 <EVENT_USB_UIDChange+0xe>
     35a:	8f eb       	ldi	r24, 0xBF	; 191
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <EVENT_USB_UIDChange+0x12>
     360:	8a eb       	ldi	r24, 0xBA	; 186
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	88 e9       	ldi	r24, 0x98	; 152
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 25 12 	call	0x244a	; 0x244a <printf_P>
     374:	8b b1       	in	r24, 0x0b	; 11
     376:	8f 70       	andi	r24, 0x0F	; 15
     378:	80 61       	ori	r24, 0x10	; 16
     37a:	8b b9       	out	0x0b, r24	; 11
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	08 95       	ret

00000386 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     386:	29 2f       	mov	r18, r25
     388:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     38a:	23 30       	cpi	r18, 0x03	; 3
     38c:	31 05       	cpc	r19, r1
     38e:	b9 f0       	breq	.+46     	; 0x3be <CALLBACK_USB_GetDescriptor+0x38>
     390:	5c f4       	brge	.+22     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x22>
     392:	21 30       	cpi	r18, 0x01	; 1
     394:	31 05       	cpc	r19, r1
     396:	69 f1       	breq	.+90     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x6c>
     398:	22 30       	cpi	r18, 0x02	; 2
     39a:	31 05       	cpc	r19, r1
     39c:	79 f5       	brne	.+94     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     39e:	82 e2       	ldi	r24, 0x22	; 34
     3a0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3a2:	22 e3       	ldi	r18, 0x32	; 50
     3a4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3a6:	2e c0       	rjmp	.+92     	; 0x404 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3a8:	21 32       	cpi	r18, 0x21	; 33
     3aa:	31 05       	cpc	r19, r1
     3ac:	e9 f0       	breq	.+58     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x62>
     3ae:	22 32       	cpi	r18, 0x22	; 34
     3b0:	31 05       	cpc	r19, r1
     3b2:	21 f5       	brne	.+72     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3b4:	8a e3       	ldi	r24, 0x3A	; 58
     3b6:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3b8:	26 e6       	ldi	r18, 0x66	; 102
     3ba:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     3bc:	23 c0       	rjmp	.+70     	; 0x404 <CALLBACK_USB_GetDescriptor+0x7e>
     3be:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	91 05       	cpc	r25, r1
     3c4:	41 f0       	breq	.+16     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x50>
     3c6:	82 30       	cpi	r24, 0x02	; 2
     3c8:	91 05       	cpc	r25, r1
     3ca:	41 f0       	breq	.+16     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x56>
     3cc:	89 2b       	or	r24, r25
     3ce:	b1 f4       	brne	.+44     	; 0x3fc <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3d0:	ee e2       	ldi	r30, 0x2E	; 46
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3d6:	e4 e1       	ldi	r30, 0x14	; 20
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3dc:	e2 ef       	ldi	r30, 0xF2	; 242
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	84 91       	lpm	r24, Z
     3e2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     3e4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3e6:	0e c0       	rjmp	.+28     	; 0x404 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3e8:	89 e0       	ldi	r24, 0x09	; 9
     3ea:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3ec:	24 e4       	ldi	r18, 0x44	; 68
     3ee:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3f0:	09 c0       	rjmp	.+18     	; 0x404 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3f2:	82 e1       	ldi	r24, 0x12	; 18
     3f4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3f6:	24 e5       	ldi	r18, 0x54	; 84
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     404:	fa 01       	movw	r30, r20
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
	return Size;
}
     40a:	08 95       	ret

0000040c <LEDs_SetAllLEDs>:
     40c:	9b b1       	in	r25, 0x0b	; 11
     40e:	9f 70       	andi	r25, 0x0F	; 15
     410:	98 2b       	or	r25, r24
     412:	9b b9       	out	0x0b, r25	; 11
     414:	08 95       	ret

00000416 <EVENT_USB_Device_Connect>:


/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     416:	80 ea       	ldi	r24, 0xA0	; 160
     418:	f9 cf       	rjmp	.-14     	; 0x40c <LEDs_SetAllLEDs>

0000041a <EVENT_USB_Device_Disconnect>:
     41a:	80 e1       	ldi	r24, 0x10	; 16
}

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41c:	f7 cf       	rjmp	.-18     	; 0x40c <LEDs_SetAllLEDs>

0000041e <EVENT_USB_Device_ConfigurationChanged>:
     41e:	80 e6       	ldi	r24, 0x60	; 96
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     420:	f5 df       	rcall	.-22     	; 0x40c <LEDs_SetAllLEDs>
     422:	80 e0       	ldi	r24, 0x00	; 0

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <HID_Device_ConfigureEndpoints>
     42a:	81 11       	cpse	r24, r1
     42c:	02 c0       	rjmp	.+4      	; 0x432 <EVENT_USB_Device_ConfigurationChanged+0x14>
     42e:	80 e9       	ldi	r24, 0x90	; 144
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     430:	ed df       	rcall	.-38     	; 0x40c <LEDs_SetAllLEDs>
     432:	80 91 e2 00 	lds	r24, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     436:	84 60       	ori	r24, 0x04	; 4
     438:	80 93 e2 00 	sts	0x00E2, r24
     43c:	08 95       	ret

0000043e <EVENT_USB_Device_ControlRequest>:
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	91 e0       	ldi	r25, 0x01	; 1
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     442:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <HID_Device_ProcessControlRequest>

00000446 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     446:	80 91 0e 01 	lds	r24, 0x010E
     44a:	90 91 0f 01 	lds	r25, 0x010F
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	29 f0       	breq	.+10     	; 0x45c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	90 93 0f 01 	sts	0x010F, r25
     458:	80 93 0e 01 	sts	0x010E, r24
     45c:	08 95       	ret

0000045e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     464:	93 b1       	in	r25, 0x03	; 3
     466:	8c b1       	in	r24, 0x0c	; 12
     468:	80 95       	com	r24
     46a:	80 73       	andi	r24, 0x30	; 48
     46c:	86 95       	lsr	r24
     46e:	90 95       	com	r25
     470:	90 7e       	andi	r25, 0xE0	; 224
     472:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     474:	9c b1       	in	r25, 0x0c	; 12
     476:	90 95       	com	r25
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     478:	87 ff       	sbrs	r24, 7
     47a:	02 c0       	rjmp	.+4      	; 0x480 <CALLBACK_HID_Device_CreateHIDReport+0x22>
	  MouseReport->Y = -1;
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	03 c0       	rjmp	.+6      	; 0x486 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	else if (JoyStatus_LCL & JOY_DOWN)
     480:	84 ff       	sbrs	r24, 4
     482:	02 c0       	rjmp	.+4      	; 0x488 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
	  MouseReport->Y =  1;
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     488:	83 ff       	sbrs	r24, 3
     48a:	02 c0       	rjmp	.+4      	; 0x490 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	  MouseReport->X =  1;
     48c:	21 e0       	ldi	r18, 0x01	; 1
     48e:	03 c0       	rjmp	.+6      	; 0x496 <CALLBACK_HID_Device_CreateHIDReport+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
     490:	86 ff       	sbrs	r24, 6
     492:	02 c0       	rjmp	.+4      	; 0x498 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X = -1;
     494:	2f ef       	ldi	r18, 0xFF	; 255
     496:	21 83       	std	Z+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     498:	85 ff       	sbrs	r24, 5
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->Button |= (1 << 0);
     49c:	80 81       	ld	r24, Z
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     4a2:	92 ff       	sbrs	r25, 2
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  MouseReport->Button |= (1 << 1);
     4a6:	80 81       	ld	r24, Z
     4a8:	82 60       	ori	r24, 0x02	; 2
     4aa:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	f8 01       	movw	r30, r16
     4b2:	91 83       	std	Z+1, r25	; 0x01
     4b4:	80 83       	st	Z, r24
	return true;
}
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	08 95       	ret

000004be <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     4be:	08 95       	ret

000004c0 <LEDs_SetAllLEDs>:
     4c0:	9b b1       	in	r25, 0x0b	; 11
     4c2:	9f 70       	andi	r25, 0x0F	; 15
     4c4:	98 2b       	or	r25, r24
     4c6:	9b b9       	out	0x0b, r25	; 11
     4c8:	08 95       	ret

000004ca <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4ca:	86 e5       	ldi	r24, 0x56	; 86
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4d2:	80 ea       	ldi	r24, 0xA0	; 160
     4d4:	f5 cf       	rjmp	.-22     	; 0x4c0 <LEDs_SetAllLEDs>

000004d6 <EVENT_USB_Host_DeviceUnattached>:
     4d6:	8f e3       	ldi	r24, 0x3F	; 63
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	0e 94 75 12 	call	0x24ea	; 0x24ea <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	ef cf       	rjmp	.-34     	; 0x4c0 <LEDs_SetAllLEDs>

000004e2 <EVENT_USB_Host_DeviceEnumerationComplete>:
     4e2:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	c2 50       	subi	r28, 0x02	; 2
     4ec:	d2 40       	sbci	r29, 0x02	; 2
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	e2 df       	rcall	.-60     	; 0x4c0 <LEDs_SetAllLEDs>
     4fc:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4fe:	32 e0       	ldi	r19, 0x02	; 2
     500:	ae 01       	movw	r20, r28
     502:	4f 5f       	subi	r20, 0xFF	; 255
     504:	5f 4f       	sbci	r21, 0xFF	; 255
     506:	be 01       	movw	r22, r28
     508:	6f 5f       	subi	r22, 0xFF	; 255
     50a:	7d 4f       	sbci	r23, 0xFD	; 253
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <USB_Host_GetDeviceConfigDescriptor>
     512:	88 23       	and	r24, r24
     514:	19 f0       	breq	.+6      	; 0x51c <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     516:	88 e3       	ldi	r24, 0x38	; 56
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		printf("Error Retrieving Configuration Descriptor.\r\n");
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	22 c0       	rjmp	.+68     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     51c:	cf 5f       	subi	r28, 0xFF	; 255
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     51e:	dd 4f       	sbci	r29, 0xFD	; 253
     520:	68 81       	ld	r22, Y
     522:	79 81       	ldd	r23, Y+1	; 0x01
     524:	c1 50       	subi	r28, 0x01	; 1
     526:	d2 40       	sbci	r29, 0x02	; 2
     528:	ae 01       	movw	r20, r28
     52a:	4f 5f       	subi	r20, 0xFF	; 255
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	80 e1       	ldi	r24, 0x10	; 16
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <HID_Host_ConfigurePipes>
     536:	88 23       	and	r24, r24
     538:	19 f0       	breq	.+6      	; 0x540 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     53a:	84 e6       	ldi	r24, 0x64	; 100
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		printf("Attached Device Not a Valid Mouse.\r\n");
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	10 c0       	rjmp	.+32     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     540:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     542:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <USB_Host_SetDeviceConfiguration>
     546:	88 23       	and	r24, r24
     548:	19 f0       	breq	.+6      	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     54a:	88 e8       	ldi	r24, 0x88	; 136
	{
		printf("Error Setting Device Configuration.\r\n");
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	08 c0       	rjmp	.+16     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     550:	80 e1       	ldi	r24, 0x10	; 16
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 a4 11 	call	0x2348	; 0x2348 <HID_Host_SetBootProtocol>
     558:	88 23       	and	r24, r24
     55a:	31 f0       	breq	.+12     	; 0x568 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     55c:	8d ea       	ldi	r24, 0xAD	; 173
	{
		printf("Could not Set Boot Protocol Mode.\r\n");
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 48 12 	call	0x2490	; 0x2490 <puts>
     564:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     566:	05 c0       	rjmp	.+10     	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     568:	80 ed       	ldi	r24, 0xD0	; 208
		return;
	}

	printf("Mouse Enumerated.\r\n");
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 48 12 	call	0x2490	; 0x2490 <puts>
     570:	80 e6       	ldi	r24, 0x60	; 96
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     572:	a6 df       	rcall	.-180    	; 0x4c0 <LEDs_SetAllLEDs>
     574:	ce 5f       	subi	r28, 0xFE	; 254
     576:	dd 4f       	sbci	r29, 0xFD	; 253
}
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <EVENT_USB_Host_HostError>:
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     58c:	1f 92       	push	r1
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	b0 d5       	rcall	.+2912   	; 0x10f6 <USB_Disable>
     596:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	8f 93       	push	r24
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	0e 94 25 12 	call	0x244a	; 0x244a <printf_P>
     5a8:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5aa:	8a df       	rcall	.-236    	; 0x4c0 <LEDs_SetAllLEDs>
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <EVENT_USB_Host_HostError+0x2c>

000005b6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5b6:	90 91 f9 01 	lds	r25, 0x01F9
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5ba:	1f 92       	push	r1
     5bc:	9f 93       	push	r25
     5be:	1f 92       	push	r1
     5c0:	6f 93       	push	r22
     5c2:	1f 92       	push	r1
     5c4:	8f 93       	push	r24
     5c6:	8a eb       	ldi	r24, 0xBA	; 186
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	0e 94 25 12 	call	0x244a	; 0x244a <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5d2:	8d b7       	in	r24, 0x3d	; 61
     5d4:	9e b7       	in	r25, 0x3e	; 62
     5d6:	08 96       	adiw	r24, 0x08	; 8
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	9e bf       	out	0x3e, r25	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	8d bf       	out	0x3d, r24	; 61
     5e2:	80 e9       	ldi	r24, 0x90	; 144
     5e4:	6d cf       	rjmp	.-294    	; 0x4c0 <LEDs_SetAllLEDs>

000005e6 <MouseHost_Task>:
     5e6:	cf 93       	push	r28

/** Host USB management task. This task handles the control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHost_Task(void)
{
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <MouseHost_Task+0x6>
     5ec:	1f 92       	push	r1
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     5f2:	80 91 f9 01 	lds	r24, 0x01F9
     5f6:	8b 30       	cpi	r24, 0x0B	; 11
     5f8:	09 f0       	breq	.+2      	; 0x5fc <MouseHost_Task+0x16>
     5fa:	3c c0       	rjmp	.+120    	; 0x674 <MouseHost_Task+0x8e>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     5fc:	80 e1       	ldi	r24, 0x10	; 16
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 88 11 	call	0x2310	; 0x2310 <HID_Host_IsReportReceived>
     604:	88 23       	and	r24, r24
     606:	b1 f1       	breq	.+108    	; 0x674 <MouseHost_Task+0x8e>
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     608:	be 01       	movw	r22, r28
     60a:	6f 5f       	subi	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 e1       	ldi	r24, 0x10	; 16
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 42 11 	call	0x2284	; 0x2284 <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	1f 92       	push	r1
     61a:	8f 93       	push	r24
     61c:	2b 81       	ldd	r18, Y+3	; 0x03
     61e:	82 2f       	mov	r24, r18
     620:	99 27       	eor	r25, r25
     622:	87 fd       	sbrc	r24, 7
     624:	90 95       	com	r25
     626:	9f 93       	push	r25
     628:	2f 93       	push	r18
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	82 2f       	mov	r24, r18
     62e:	99 27       	eor	r25, r25
     630:	87 fd       	sbrc	r24, 7
     632:	90 95       	com	r25
     634:	9f 93       	push	r25
     636:	2f 93       	push	r18
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 25 12 	call	0x244a	; 0x244a <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	18 16       	cp	r1, r24
     652:	24 f0       	brlt	.+8      	; 0x65c <MouseHost_Task+0x76>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     654:	88 23       	and	r24, r24
     656:	19 f0       	breq	.+6      	; 0x65e <MouseHost_Task+0x78>
		  LEDMask |= LEDS_LED2;
     658:	80 e2       	ldi	r24, 0x20	; 32
     65a:	01 c0       	rjmp	.+2      	; 0x65e <MouseHost_Task+0x78>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     65c:	80 e1       	ldi	r24, 0x10	; 16
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;

		if (MouseReport.Y > 0)
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	19 16       	cp	r1, r25
     662:	14 f4       	brge	.+4      	; 0x668 <MouseHost_Task+0x82>
		  LEDMask |= LEDS_LED3;
     664:	80 68       	ori	r24, 0x80	; 128
     666:	02 c0       	rjmp	.+4      	; 0x66c <MouseHost_Task+0x86>
		else if (MouseReport.Y < 0)
     668:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     66a:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     66c:	99 81       	ldd	r25, Y+1	; 0x01
     66e:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     670:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     672:	26 df       	rcall	.-436    	; 0x4c0 <LEDs_SetAllLEDs>
     674:	0f 90       	pop	r0
	}
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <USB_GetHIDReportSize>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     680:	fc 01       	movw	r30, r24
     682:	e4 0f       	add	r30, r20
     684:	f1 1d       	adc	r31, r1
     686:	e4 0f       	add	r30, r20
					  ParserData->TotalReportItems++;
     688:	f1 1d       	adc	r31, r1
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	df 01       	movw	r26, r30
     690:	a2 0f       	add	r26, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	b3 1f       	adc	r27, r19
     694:	af 56       	subi	r26, 0x6F	; 111
     696:	bc 4f       	sbci	r27, 0xFC	; 252
     698:	4d 91       	ld	r20, X+
     69a:	5c 91       	ld	r21, X
     69c:	dc 01       	movw	r26, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	a2 0f       	add	r26, r18
     6a0:	b3 1f       	adc	r27, r19
     6a2:	a0 57       	subi	r26, 0x70	; 112
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	bc 4f       	sbci	r27, 0xFC	; 252
     6a6:	7c 91       	ld	r23, X
     6a8:	76 13       	cpse	r23, r22
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	12 c0       	rjmp	.+36     	; 0x6d0 <USB_GetHIDReportSize+0x50>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	ca 01       	movw	r24, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	87 70       	andi	r24, 0x07	; 7
     6b4:	99 27       	eor	r25, r25
     6b6:	89 2b       	or	r24, r25
     6b8:	11 f4       	brne	.+4      	; 0x6be <USB_GetHIDReportSize+0x3e>
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	ca 01       	movw	r24, r20
     6c0:	43 e0       	ldi	r20, 0x03	; 3
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	4a 95       	dec	r20
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <USB_GetHIDReportSize+0x42>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	08 95       	ret
     6d0:	29 5f       	subi	r18, 0xF9	; 249
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	3f 4f       	sbci	r19, 0xFF	; 255
     6d4:	26 34       	cpi	r18, 0x46	; 70
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	31 05       	cpc	r19, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	d1 f6       	brne	.-76     	; 0x68e <USB_GetHIDReportSize+0xe>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret

000006e0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	7c 01       	movw	r14, r24
     6f2:	8b 01       	movw	r16, r22
     6f4:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     6f6:	cb d1       	rcall	.+918    	; 0xa8e <Endpoint_WaitUntilReady>
     6f8:	81 11       	cpse	r24, r1
     6fa:	32 c0       	rjmp	.+100    	; 0x760 <Endpoint_Write_Stream_LE+0x80>
     6fc:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     6fe:	31 f0       	breq	.+12     	; 0x70c <Endpoint_Write_Stream_LE+0x2c>
     700:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     702:	99 81       	ldd	r25, Y+1	; 0x01
     704:	08 1b       	sub	r16, r24
     706:	19 0b       	sbc	r17, r25
     708:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     70a:	f9 1e       	adc	r15, r25
     70c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     70e:	d1 2c       	mov	r13, r1
     710:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     712:	11 05       	cpc	r17, r1
     714:	21 f1       	breq	.+72     	; 0x75e <Endpoint_Write_Stream_LE+0x7e>
     716:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     71a:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     71c:	15 c0       	rjmp	.+42     	; 0x748 <Endpoint_Write_Stream_LE+0x68>
     71e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     722:	8e 77       	andi	r24, 0x7E	; 126
     724:	80 93 e8 00 	sts	0x00E8, r24
     728:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     72c:	20 97       	sbiw	r28, 0x00	; 0
			#endif

			if (BytesProcessed != NULL)
     72e:	41 f0       	breq	.+16     	; 0x740 <Endpoint_Write_Stream_LE+0x60>
     730:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     732:	99 81       	ldd	r25, Y+1	; 0x01
     734:	8c 0d       	add	r24, r12
     736:	9d 1d       	adc	r25, r13
     738:	99 83       	std	Y+1, r25	; 0x01
     73a:	88 83       	st	Y, r24
     73c:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     73e:	10 c0       	rjmp	.+32     	; 0x760 <Endpoint_Write_Stream_LE+0x80>
     740:	a6 d1       	rcall	.+844    	; 0xa8e <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     742:	88 23       	and	r24, r24
     744:	29 f3       	breq	.-54     	; 0x710 <Endpoint_Write_Stream_LE+0x30>
     746:	0c c0       	rjmp	.+24     	; 0x760 <Endpoint_Write_Stream_LE+0x80>
     748:	f7 01       	movw	r30, r14
     74a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     74c:	7f 01       	movw	r14, r30
     74e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     752:	01 50       	subi	r16, 0x01	; 1
     754:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     756:	ff ef       	ldi	r31, 0xFF	; 255
     758:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     75a:	df 0a       	sbc	r13, r31
     75c:	d9 cf       	rjmp	.-78     	; 0x710 <Endpoint_Write_Stream_LE+0x30>
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     762:	cf 91       	pop	r28
}
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	08 95       	ret

00000772 <Endpoint_Write_Control_Stream_LE>:
     772:	20 91 f7 01 	lds	r18, 0x01F7
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     776:	30 91 f8 01 	lds	r19, 0x01F8
     77a:	26 17       	cp	r18, r22
     77c:	37 07       	cpc	r19, r23
     77e:	48 f0       	brcs	.+18     	; 0x792 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     780:	61 15       	cp	r22, r1
     782:	71 05       	cpc	r23, r1
     784:	39 f4       	brne	.+14     	; 0x794 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     786:	20 91 e8 00 	lds	r18, 0x00E8
     78a:	2e 77       	andi	r18, 0x7E	; 126
     78c:	20 93 e8 00 	sts	0x00E8, r18
     790:	01 c0       	rjmp	.+2      	; 0x794 <Endpoint_Write_Control_Stream_LE+0x22>
     792:	b9 01       	movw	r22, r18
     794:	fc 01       	movw	r30, r24
     796:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     798:	61 15       	cp	r22, r1
     79a:	71 05       	cpc	r23, r1
     79c:	99 f1       	breq	.+102    	; 0x804 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     79e:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7a2:	88 23       	and	r24, r24
     7a4:	e9 f1       	breq	.+122    	; 0x820 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7a6:	85 30       	cpi	r24, 0x05	; 5
     7a8:	e9 f1       	breq	.+122    	; 0x824 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7ae:	83 fd       	sbrc	r24, 3
     7b0:	3b c0       	rjmp	.+118    	; 0x828 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7b6:	82 ff       	sbrs	r24, 2
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0x54>
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7be:	82 ff       	sbrs	r24, 2
     7c0:	24 c0       	rjmp	.+72     	; 0x80a <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7c6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     7ca:	80 ff       	sbrs	r24, 0
     7cc:	e5 cf       	rjmp	.-54     	; 0x798 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     7ce:	80 91 f2 00 	lds	r24, 0x00F2
     7d2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7d6:	61 15       	cp	r22, r1
     7d8:	71 05       	cpc	r23, r1
     7da:	51 f0       	breq	.+20     	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x7e>
     7dc:	88 30       	cpi	r24, 0x08	; 8
     7de:	91 05       	cpc	r25, r1
     7e0:	38 f4       	brcc	.+14     	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7e2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7e4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     7e8:	61 50       	subi	r22, 0x01	; 1
     7ea:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	f3 cf       	rjmp	.-26     	; 0x7d6 <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	08 97       	sbiw	r24, 0x08	; 8
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <Endpoint_Write_Control_Stream_LE+0x86>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f8:	80 91 e8 00 	lds	r24, 0x00E8
     7fc:	8e 77       	andi	r24, 0x7E	; 126
     7fe:	80 93 e8 00 	sts	0x00E8, r24
     802:	ca cf       	rjmp	.-108    	; 0x798 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     804:	21 11       	cpse	r18, r1
     806:	cb cf       	rjmp	.-106    	; 0x79e <Endpoint_Write_Control_Stream_LE+0x2c>
     808:	d8 cf       	rjmp	.-80     	; 0x7ba <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     80a:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     80e:	88 23       	and	r24, r24
     810:	39 f0       	breq	.+14     	; 0x820 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     812:	85 30       	cpi	r24, 0x05	; 5
     814:	39 f0       	breq	.+14     	; 0x824 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     816:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     81a:	83 ff       	sbrs	r24, 3
     81c:	ce cf       	rjmp	.-100    	; 0x7ba <Endpoint_Write_Control_Stream_LE+0x48>
     81e:	04 c0       	rjmp	.+8      	; 0x828 <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     828:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     82a:	08 95       	ret

0000082c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	29 f4       	brne	.+10     	; 0x83c <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     832:	20 91 e8 00 	lds	r18, 0x00E8
     836:	2b 77       	andi	r18, 0x7B	; 123
     838:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
     83c:	61 15       	cp	r22, r1
     83e:	71 05       	cpc	r23, r1
     840:	31 f1       	breq	.+76     	; 0x88e <Endpoint_Read_Control_Stream_LE+0x62>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     842:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     846:	22 23       	and	r18, r18
     848:	59 f1       	breq	.+86     	; 0x8a0 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     84a:	25 30       	cpi	r18, 0x05	; 5
     84c:	59 f1       	breq	.+86     	; 0x8a4 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     84e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     852:	23 fd       	sbrc	r18, 3
     854:	21 c0       	rjmp	.+66     	; 0x898 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     856:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     85a:	22 ff       	sbrs	r18, 2
     85c:	f2 cf       	rjmp	.-28     	; 0x842 <Endpoint_Read_Control_Stream_LE+0x16>
     85e:	fc 01       	movw	r30, r24
     860:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     862:	20 91 f2 00 	lds	r18, 0x00F2
     866:	30 91 f3 00 	lds	r19, 0x00F3
		{
			while (Length && Endpoint_BytesInEndpoint())
     86a:	23 2b       	or	r18, r19
     86c:	11 f3       	breq	.-60     	; 0x832 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     86e:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     872:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     874:	cf 01       	movw	r24, r30
				Length--;
     876:	61 50       	subi	r22, 0x01	; 1
     878:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     87a:	61 15       	cp	r22, r1
     87c:	71 05       	cpc	r23, r1
     87e:	81 f7       	brne	.-32     	; 0x860 <Endpoint_Read_Control_Stream_LE+0x34>
     880:	d8 cf       	rjmp	.-80     	; 0x832 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     882:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     886:	88 23       	and	r24, r24
     888:	59 f0       	breq	.+22     	; 0x8a0 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     88a:	85 30       	cpi	r24, 0x05	; 5
     88c:	59 f0       	breq	.+22     	; 0x8a4 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     88e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     892:	80 ff       	sbrs	r24, 0
     894:	f6 cf       	rjmp	.-20     	; 0x882 <Endpoint_Read_Control_Stream_LE+0x56>
     896:	02 c0       	rjmp	.+4      	; 0x89c <Endpoint_Read_Control_Stream_LE+0x70>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8a4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8a6:	08 95       	ret

000008a8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8a8:	20 91 f7 01 	lds	r18, 0x01F7
     8ac:	30 91 f8 01 	lds	r19, 0x01F8
     8b0:	26 17       	cp	r18, r22
     8b2:	37 07       	cpc	r19, r23
     8b4:	48 f0       	brcs	.+18     	; 0x8c8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8b6:	61 15       	cp	r22, r1
     8b8:	71 05       	cpc	r23, r1
     8ba:	39 f4       	brne	.+14     	; 0x8ca <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8bc:	20 91 e8 00 	lds	r18, 0x00E8
     8c0:	2e 77       	andi	r18, 0x7E	; 126
     8c2:	20 93 e8 00 	sts	0x00E8, r18
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <Endpoint_Write_Control_PStream_LE+0x22>
     8c8:	b9 01       	movw	r22, r18
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8ce:	61 15       	cp	r22, r1
     8d0:	71 05       	cpc	r23, r1
     8d2:	b1 f1       	breq	.+108    	; 0x940 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8d4:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <Endpoint_Write_Control_PStream_LE+0x36>
     8dc:	3f c0       	rjmp	.+126    	; 0x95c <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8de:	85 30       	cpi	r24, 0x05	; 5
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <Endpoint_Write_Control_PStream_LE+0x3c>
     8e2:	3e c0       	rjmp	.+124    	; 0x960 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8e4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8e8:	83 fd       	sbrc	r24, 3
     8ea:	3c c0       	rjmp	.+120    	; 0x964 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8f0:	82 ff       	sbrs	r24, 2
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <Endpoint_Write_Control_PStream_LE+0x58>
     8f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8f8:	82 ff       	sbrs	r24, 2
     8fa:	25 c0       	rjmp	.+74     	; 0x946 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     900:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     904:	80 ff       	sbrs	r24, 0
     906:	e3 cf       	rjmp	.-58     	; 0x8ce <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     908:	80 91 f2 00 	lds	r24, 0x00F2
     90c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     910:	61 15       	cp	r22, r1
     912:	71 05       	cpc	r23, r1
     914:	59 f0       	breq	.+22     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x84>
     916:	88 30       	cpi	r24, 0x08	; 8
     918:	91 05       	cpc	r25, r1
     91a:	40 f4       	brcc	.+16     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     91c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     91e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     922:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     924:	61 50       	subi	r22, 0x01	; 1
     926:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	f2 cf       	rjmp	.-28     	; 0x910 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	08 97       	sbiw	r24, 0x08	; 8
     930:	09 f0       	breq	.+2      	; 0x934 <Endpoint_Write_Control_PStream_LE+0x8c>
     932:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     934:	80 91 e8 00 	lds	r24, 0x00E8
     938:	8e 77       	andi	r24, 0x7E	; 126
     93a:	80 93 e8 00 	sts	0x00E8, r24
     93e:	c7 cf       	rjmp	.-114    	; 0x8ce <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     940:	21 11       	cpse	r18, r1
     942:	c8 cf       	rjmp	.-112    	; 0x8d4 <Endpoint_Write_Control_PStream_LE+0x2c>
     944:	d7 cf       	rjmp	.-82     	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     946:	80 91 f0 01 	lds	r24, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     94a:	88 23       	and	r24, r24
     94c:	39 f0       	breq	.+14     	; 0x95c <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     94e:	85 30       	cpi	r24, 0x05	; 5
     950:	39 f0       	breq	.+14     	; 0x960 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     952:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     956:	83 ff       	sbrs	r24, 3
     958:	cd cf       	rjmp	.-102    	; 0x8f4 <Endpoint_Write_Control_PStream_LE+0x4c>
     95a:	04 c0       	rjmp	.+8      	; 0x964 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     964:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     966:	08 95       	ret

00000968 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     968:	98 2f       	mov	r25, r24
     96a:	97 30       	cpi	r25, 0x07	; 7
     96c:	58 f5       	brcc	.+86     	; 0x9c4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     96e:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     972:	98 17       	cp	r25, r24
     974:	39 f0       	breq	.+14     	; 0x984 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     976:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     97a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     97e:	50 91 f0 00 	lds	r21, 0x00F0
     982:	03 c0       	rjmp	.+6      	; 0x98a <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     984:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     986:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     988:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     98a:	21 ff       	sbrs	r18, 1
     98c:	19 c0       	rjmp	.+50     	; 0x9c0 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     98e:	30 91 eb 00 	lds	r19, 0x00EB
     992:	3e 7f       	andi	r19, 0xFE	; 254
     994:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     998:	30 91 ed 00 	lds	r19, 0x00ED
     99c:	3d 7f       	andi	r19, 0xFD	; 253
     99e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     9a2:	30 91 eb 00 	lds	r19, 0x00EB
     9a6:	31 60       	ori	r19, 0x01	; 1
     9a8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     9ac:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     9b0:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     9b4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     9b8:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     9bc:	27 ff       	sbrs	r18, 7
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	d3 cf       	rjmp	.-90     	; 0x96a <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9c4:	8f 70       	andi	r24, 0x0F	; 15
     9c6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     9d0:	08 95       	ret

000009d2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	06 2f       	mov	r16, r22
     9dc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	10 17       	cp	r17, r16
     9e2:	71 f1       	breq	.+92     	; 0xa40 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
     9e4:	98 81       	ld	r25, Y
     9e6:	99 23       	and	r25, r25
     9e8:	41 f1       	breq	.+80     	; 0xa3a <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     9ea:	2c 81       	ldd	r18, Y+4	; 0x04
     9ec:	e9 81       	ldd	r30, Y+1	; 0x01
     9ee:	fa 81       	ldd	r31, Y+2	; 0x02
     9f0:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     9f2:	89 2f       	mov	r24, r25
     9f4:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     9f6:	87 30       	cpi	r24, 0x07	; 7
     9f8:	10 f0       	brcs	.+4      	; 0x9fe <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	22 c0       	rjmp	.+68     	; 0xa42 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9fe:	22 30       	cpi	r18, 0x02	; 2
     a00:	10 f0       	brcs	.+4      	; 0xa06 <Endpoint_ConfigureEndpointTable+0x34>
     a02:	56 e0       	ldi	r21, 0x06	; 6
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <Endpoint_ConfigureEndpointTable+0x36>
     a06:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     a08:	28 e0       	ldi	r18, 0x08	; 8
     a0a:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     a0c:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     a0e:	2e 17       	cp	r18, r30
     a10:	3f 07       	cpc	r19, r31
     a12:	20 f4       	brcc	.+8      	; 0xa1c <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     a14:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     a16:	22 0f       	add	r18, r18
     a18:	33 1f       	adc	r19, r19
     a1a:	f9 cf       	rjmp	.-14     	; 0xa0e <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     a1c:	42 95       	swap	r20
     a1e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a20:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     a22:	69 2f       	mov	r22, r25
     a24:	66 1f       	adc	r22, r22
     a26:	66 27       	eor	r22, r22
     a28:	66 1f       	adc	r22, r22
     a2a:	90 e4       	ldi	r25, 0x40	; 64
     a2c:	79 9f       	mul	r23, r25
     a2e:	90 01       	movw	r18, r0
     a30:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a32:	62 2b       	or	r22, r18
     a34:	99 df       	rcall	.-206    	; 0x968 <Endpoint_ConfigureEndpoint_Prv>
     a36:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     a38:	01 f3       	breq	.-64     	; 0x9fa <Endpoint_ConfigureEndpointTable+0x28>
     a3a:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a3c:	25 96       	adiw	r28, 0x05	; 5
     a3e:	d0 cf       	rjmp	.-96     	; 0x9e0 <Endpoint_ConfigureEndpointTable+0xe>
     a40:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     a42:	df 91       	pop	r29
}
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret

00000a4c <Endpoint_ClearStatusStage>:
     a4c:	80 91 f1 01 	lds	r24, 0x01F1
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a50:	87 fd       	sbrc	r24, 7
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a54:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a58:	80 ff       	sbrs	r24, 0
     a5a:	0e c0       	rjmp	.+28     	; 0xa78 <Endpoint_ClearStatusStage+0x2c>
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a5e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     a62:	82 fd       	sbrc	r24, 2
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a66:	80 91 f0 01 	lds	r24, 0x01F0
     a6a:	81 11       	cpse	r24, r1
     a6c:	f8 cf       	rjmp	.-16     	; 0xa5e <Endpoint_ClearStatusStage+0x12>
     a6e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a70:	80 91 e8 00 	lds	r24, 0x00E8
     a74:	8b 77       	andi	r24, 0x7B	; 123
     a76:	08 c0       	rjmp	.+16     	; 0xa88 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a78:	80 91 f0 01 	lds	r24, 0x01F0
     a7c:	81 11       	cpse	r24, r1
     a7e:	ea cf       	rjmp	.-44     	; 0xa54 <Endpoint_ClearStatusStage+0x8>
     a80:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a82:	80 91 e8 00 	lds	r24, 0x00E8
     a86:	8e 77       	andi	r24, 0x7E	; 126
     a88:	80 93 e8 00 	sts	0x00E8, r24
     a8c:	08 95       	ret

00000a8e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     a8e:	80 91 e4 00 	lds	r24, 0x00E4
     a92:	90 91 e5 00 	lds	r25, 0x00E5
     a96:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a98:	20 91 ec 00 	lds	r18, 0x00EC
     a9c:	20 ff       	sbrs	r18, 0
     a9e:	21 c0       	rjmp	.+66     	; 0xae2 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     aa0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     aa4:	20 fd       	sbrc	r18, 0
     aa6:	21 c0       	rjmp	.+66     	; 0xaea <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aa8:	20 91 f0 01 	lds	r18, 0x01F0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     aac:	22 23       	and	r18, r18
     aae:	89 f0       	breq	.+34     	; 0xad2 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab0:	25 30       	cpi	r18, 0x05	; 5
     ab2:	89 f0       	breq	.+34     	; 0xad6 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ab4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     ab8:	25 fd       	sbrc	r18, 5
     aba:	0f c0       	rjmp	.+30     	; 0xada <Endpoint_WaitUntilReady+0x4c>
     abc:	20 91 e4 00 	lds	r18, 0x00E4
     ac0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	39 f3       	breq	.-50     	; 0xa98 <Endpoint_WaitUntilReady+0xa>
     aca:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     acc:	41 f0       	breq	.+16     	; 0xade <Endpoint_WaitUntilReady+0x50>
     ace:	c9 01       	movw	r24, r18
     ad0:	e3 cf       	rjmp	.-58     	; 0xa98 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ae2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ae6:	22 ff       	sbrs	r18, 2
     ae8:	df cf       	rjmp	.-66     	; 0xaa8 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret

00000aee <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     aee:	80 91 9e 00 	lds	r24, 0x009E
     af2:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     af4:	90 91 a0 00 	lds	r25, 0x00A0
     af8:	9d 7f       	andi	r25, 0xFD	; 253
     afa:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     afe:	90 91 9e 00 	lds	r25, 0x009E
     b02:	92 60       	ori	r25, 0x02	; 2
     b04:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     b08:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     b0c:	91 fd       	sbrc	r25, 1
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b10:	90 91 9e 00 	lds	r25, 0x009E
     b14:	91 60       	ori	r25, 0x01	; 1
     b16:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     b1a:	10 92 ee 01 	sts	0x01EE, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b1e:	90 91 a0 00 	lds	r25, 0x00A0
     b22:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     b24:	20 91 a0 00 	lds	r18, 0x00A0
     b28:	2f 7d       	andi	r18, 0xDF	; 223
     b2a:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b2e:	20 91 9f 00 	lds	r18, 0x009F
     b32:	2f 7d       	andi	r18, 0xDF	; 223
     b34:	20 93 9f 00 	sts	0x009F, r18
     b38:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b3a:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     b3e:	35 ff       	sbrs	r19, 5
     b40:	0b c0       	rjmp	.+22     	; 0xb58 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b42:	20 91 9f 00 	lds	r18, 0x009F
     b46:	2f 7d       	andi	r18, 0xDF	; 223
     b48:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b4c:	20 91 9f 00 	lds	r18, 0x009F
     b50:	2d 7f       	andi	r18, 0xFD	; 253
     b52:	20 93 9f 00 	sts	0x009F, r18
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b58:	ef ec       	ldi	r30, 0xCF	; 207
     b5a:	f7 e0       	ldi	r31, 0x07	; 7
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <USB_Host_ResetDevice+0x6e>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <USB_Host_ResetDevice+0x74>
     b62:	00 00       	nop
     b64:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     b66:	49 f7       	brne	.-46     	; 0xb3a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     b68:	99 23       	and	r25, r25
     b6a:	29 f0       	breq	.+10     	; 0xb76 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     b6c:	90 91 a0 00 	lds	r25, 0x00A0
     b70:	90 62       	ori	r25, 0x20	; 32
     b72:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     b76:	81 11       	cpse	r24, r1
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     b7a:	80 91 9e 00 	lds	r24, 0x009E
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b84:	80 91 a0 00 	lds	r24, 0x00A0
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	80 93 a0 00 	sts	0x00A0, r24
     b8e:	08 95       	ret

00000b90 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b90:	20 91 9e 00 	lds	r18, 0x009E
     b94:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b96:	90 91 a0 00 	lds	r25, 0x00A0
     b9a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     b9c:	30 91 a0 00 	lds	r19, 0x00A0
     ba0:	3f 7d       	andi	r19, 0xDF	; 223
     ba2:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ba6:	30 91 9f 00 	lds	r19, 0x009F
     baa:	3f 7d       	andi	r19, 0xDF	; 223
     bac:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bb0:	30 91 9e 00 	lds	r19, 0x009E
     bb4:	31 60       	ori	r19, 0x01	; 1
     bb6:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     bba:	88 23       	and	r24, r24
     bbc:	59 f1       	breq	.+86     	; 0xc14 <USB_Host_WaitMS+0x84>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bbe:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bc2:	35 ff       	sbrs	r19, 5
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bc6:	30 91 9f 00 	lds	r19, 0x009F
     bca:	3f 7d       	andi	r19, 0xDF	; 223
     bcc:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     bd0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     bd2:	30 91 f9 01 	lds	r19, 0x01F9
     bd6:	31 30       	cpi	r19, 0x01	; 1
     bd8:	e1 f0       	breq	.+56     	; 0xc12 <USB_Host_WaitMS+0x82>
     bda:	30 91 ea 01 	lds	r19, 0x01EA
     bde:	32 30       	cpi	r19, 0x02	; 2
     be0:	c1 f4       	brne	.+48     	; 0xc12 <USB_Host_WaitMS+0x82>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     be2:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     be6:	34 ff       	sbrs	r19, 4
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <USB_Host_WaitMS+0x6c>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     bea:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     bee:	80 91 a6 00 	lds	r24, 0x00A6
     bf2:	8f 7e       	andi	r24, 0xEF	; 239
     bf4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     bf8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     bfa:	0c c0       	rjmp	.+24     	; 0xc14 <USB_Host_WaitMS+0x84>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bfc:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     c00:	31 ff       	sbrs	r19, 1
     c02:	db cf       	rjmp	.-74     	; 0xbba <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     c04:	80 91 a6 00 	lds	r24, 0x00A6
     c08:	8d 7f       	andi	r24, 0xFD	; 253
     c0a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     c0e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <USB_Host_WaitMS+0x84>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     c12:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     c14:	21 11       	cpse	r18, r1
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <USB_Host_WaitMS+0x92>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c18:	20 91 9e 00 	lds	r18, 0x009E
     c1c:	2e 7f       	andi	r18, 0xFE	; 254
     c1e:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     c22:	99 23       	and	r25, r25
     c24:	29 f0       	breq	.+10     	; 0xc30 <USB_Host_WaitMS+0xa0>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c26:	90 91 a0 00 	lds	r25, 0x00A0
     c2a:	90 62       	ori	r25, 0x20	; 32
     c2c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     c30:	08 95       	ret

00000c32 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	28 97       	sbiw	r28, 0x08	; 8
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     c4a:	80 91 f9 01 	lds	r24, 0x01F9
     c4e:	85 30       	cpi	r24, 0x05	; 5
     c50:	09 f4       	brne	.+2      	; 0xc54 <USB_Host_ProcessNextHostState+0x22>
     c52:	9c c0       	rjmp	.+312    	; 0xd8c <USB_Host_ProcessNextHostState+0x15a>
     c54:	68 f4       	brcc	.+26     	; 0xc70 <USB_Host_ProcessNextHostState+0x3e>
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	e1 f1       	breq	.+120    	; 0xcd2 <USB_Host_ProcessNextHostState+0xa0>
     c5a:	18 f4       	brcc	.+6      	; 0xc62 <USB_Host_ProcessNextHostState+0x30>
     c5c:	88 23       	and	r24, r24
     c5e:	d9 f0       	breq	.+54     	; 0xc96 <USB_Host_ProcessNextHostState+0x64>
     c60:	ff c0       	rjmp	.+510    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	09 f4       	brne	.+2      	; 0xc68 <USB_Host_ProcessNextHostState+0x36>
     c66:	3f c0       	rjmp	.+126    	; 0xce6 <USB_Host_ProcessNextHostState+0xb4>
     c68:	84 30       	cpi	r24, 0x04	; 4
     c6a:	09 f4       	brne	.+2      	; 0xc6e <USB_Host_ProcessNextHostState+0x3c>
     c6c:	67 c0       	rjmp	.+206    	; 0xd3c <USB_Host_ProcessNextHostState+0x10a>
     c6e:	f8 c0       	rjmp	.+496    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	09 f4       	brne	.+2      	; 0xc76 <USB_Host_ProcessNextHostState+0x44>
     c74:	a6 c0       	rjmp	.+332    	; 0xdc2 <USB_Host_ProcessNextHostState+0x190>
     c76:	08 f4       	brcc	.+2      	; 0xc7a <USB_Host_ProcessNextHostState+0x48>
     c78:	96 c0       	rjmp	.+300    	; 0xda6 <USB_Host_ProcessNextHostState+0x174>
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	09 f4       	brne	.+2      	; 0xc80 <USB_Host_ProcessNextHostState+0x4e>
     c7e:	bf c0       	rjmp	.+382    	; 0xdfe <USB_Host_ProcessNextHostState+0x1cc>
     c80:	89 30       	cpi	r24, 0x09	; 9
     c82:	09 f0       	breq	.+2      	; 0xc86 <USB_Host_ProcessNextHostState+0x54>
     c84:	ed c0       	rjmp	.+474    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	80 93 f9 01 	sts	0x01F9, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     c92:	27 dc       	rcall	.-1970   	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete>
     c94:	e5 c0       	rjmp	.+458    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
			break;
     c96:	00 91 e8 01 	lds	r16, 0x01E8
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     c9a:	10 91 e9 01 	lds	r17, 0x01E9
     c9e:	01 15       	cp	r16, r1
     ca0:	11 05       	cpc	r17, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <USB_Host_ProcessNextHostState+0x74>
     ca4:	dd c0       	rjmp	.+442    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ca8:	73 df       	rcall	.-282    	; 0xb90 <USB_Host_WaitMS>
     caa:	88 23       	and	r24, r24
     cac:	31 f0       	breq	.+12     	; 0xcba <USB_Host_ProcessNextHostState+0x88>
     cae:	90 91 e7 01 	lds	r25, 0x01E7
				{
					USB_HostState = PostWaitState;
     cb2:	90 93 f9 01 	sts	0x01F9, r25
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	c5 c0       	rjmp	.+394    	; 0xe44 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     cba:	01 50       	subi	r16, 0x01	; 1
					break;
     cbc:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     cbe:	10 93 e9 01 	sts	0x01E9, r17
     cc2:	00 93 e8 01 	sts	0x01E8, r16
     cc6:	01 2b       	or	r16, r17
     cc8:	09 f0       	breq	.+2      	; 0xccc <USB_Host_ProcessNextHostState+0x9a>
     cca:	ca c0       	rjmp	.+404    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     ccc:	80 91 e7 01 	lds	r24, 0x01E7
				  USB_HostState = PostWaitState;
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <USB_Host_ProcessNextHostState+0xae>
     cd2:	88 ee       	ldi	r24, 0xE8	; 232
     cd4:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     cd6:	90 93 e9 01 	sts	0x01E9, r25
     cda:	80 93 e8 01 	sts	0x01E8, r24
     cde:	83 e0       	ldi	r24, 0x03	; 3
     ce0:	80 93 f9 01 	sts	0x01F9, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ce4:	bd c0       	rjmp	.+378    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     ce6:	80 91 e8 01 	lds	r24, 0x01E8
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     cea:	90 91 e9 01 	lds	r25, 0x01E9
     cee:	9c 01       	movw	r18, r24
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	31 09       	sbc	r19, r1
     cf4:	30 93 e9 01 	sts	0x01E9, r19
     cf8:	20 93 e8 01 	sts	0x01E8, r18
     cfc:	89 2b       	or	r24, r25
     cfe:	39 f0       	breq	.+14     	; 0xd0e <USB_Host_ProcessNextHostState+0xdc>
     d00:	8f ec       	ldi	r24, 0xCF	; 207
     d02:	97 e0       	ldi	r25, 0x07	; 7
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <USB_Host_ProcessNextHostState+0xd2>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <USB_Host_ProcessNextHostState+0xd8>
     d0a:	00 00       	nop
     d0c:	a9 c0       	rjmp	.+338    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     d0e:	77 98       	cbi	0x0e, 7	; 14
     d10:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d14:	80 61       	ori	r24, 0x10	; 16
     d16:	80 93 d8 00 	sts	0x00D8, r24
     d1a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     d1e:	8b 7f       	andi	r24, 0xFB	; 251
     d20:	80 93 dd 00 	sts	0x00DD, r24
     d24:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     d28:	80 61       	ori	r24, 0x10	; 16
     d2a:	80 93 d7 00 	sts	0x00D7, r24
     d2e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	80 93 dd 00 	sts	0x00DD, r24
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	d2 cf       	rjmp	.-92     	; 0xce0 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     d3c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     d40:	80 ff       	sbrs	r24, 0
     d42:	8e c0       	rjmp	.+284    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     d44:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d48:	8e 7f       	andi	r24, 0xFE	; 254
     d4a:	80 93 9f 00 	sts	0x009F, r24
     d4e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d52:	8d 7f       	andi	r24, 0xFD	; 253
     d54:	80 93 9f 00 	sts	0x009F, r24
     d58:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d5c:	8d 7f       	andi	r24, 0xFD	; 253
     d5e:	80 93 df 00 	sts	0x00DF, r24
     d62:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 93 de 00 	sts	0x00DE, r24
     d6c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	80 93 9e 00 	sts	0x009E, r24
     d76:	53 d1       	rcall	.+678    	; 0x101e <Pipe_ClearPipes>
     d78:	10 92 f9 01 	sts	0x01F9, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     d7c:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	90 93 e9 01 	sts	0x01E9, r25
     d84:	80 93 e8 01 	sts	0x01E8, r24
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	0a c0       	rjmp	.+20     	; 0xda0 <USB_Host_ProcessNextHostState+0x16e>
     d8c:	b0 de       	rcall	.-672    	; 0xaee <USB_Host_ResetDevice>
     d8e:	10 92 f9 01 	sts	0x01F9, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     d92:	88 ec       	ldi	r24, 0xC8	; 200
     d94:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     d96:	90 93 e9 01 	sts	0x01E9, r25
     d9a:	80 93 e8 01 	sts	0x01E8, r24
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	80 93 e7 01 	sts	0x01E7, r24
     da4:	5d c0       	rjmp	.+186    	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     da6:	01 e0       	ldi	r16, 0x01	; 1
     da8:	20 e4       	ldi	r18, 0x40	; 64
     daa:	30 e0       	ldi	r19, 0x00	; 0
			break;
     dac:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	ae d0       	rcall	.+348    	; 0xf10 <Pipe_ConfigurePipe>
     db4:	81 11       	cpse	r24, r1
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <USB_Host_ProcessNextHostState+0x18c>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	94 e0       	ldi	r25, 0x04	; 4
     dbc:	43 c0       	rjmp	.+134    	; 0xe44 <USB_Host_ProcessNextHostState+0x212>
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	8f cf       	rjmp	.-226    	; 0xce0 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     dc2:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     dc4:	e8 e2       	ldi	r30, 0x28	; 40
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     dc8:	a1 ef       	ldi	r26, 0xF1	; 241
     dca:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     dcc:	01 90       	ld	r0, Z+
     dce:	0d 92       	st	X+, r0
     dd0:	8a 95       	dec	r24
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <USB_Host_ProcessNextHostState+0x19a>
     dd4:	10 92 a7 00 	sts	0x00A7, r1
     dd8:	ce 01       	movw	r24, r28
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	f6 d5       	rcall	.+3052   	; 0x19ca <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dde:	81 11       	cpse	r24, r1
     de0:	30 c0       	rjmp	.+96     	; 0xe42 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     de2:	88 85       	ldd	r24, Y+8	; 0x08
     de4:	80 93 27 01 	sts	0x0127, r24
     de8:	82 de       	rcall	.-764    	; 0xaee <USB_Host_ResetDevice>
     dea:	10 92 f9 01 	sts	0x01F9, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     dee:	88 ec       	ldi	r24, 0xC8	; 200
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	90 93 e9 01 	sts	0x01E9, r25

			USB_Host_ResetDevice();
     df6:	80 93 e8 01 	sts	0x01E8, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	d1 cf       	rjmp	.-94     	; 0xda0 <USB_Host_ProcessNextHostState+0x16e>
     dfe:	20 91 27 01 	lds	r18, 0x0127
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	01 e0       	ldi	r16, 0x01	; 1
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     e0c:	81 d0       	rcall	.+258    	; 0xf10 <Pipe_ConfigurePipe>
     e0e:	88 23       	and	r24, r24
     e10:	99 f2       	breq	.-90     	; 0xdb8 <USB_Host_ProcessNextHostState+0x186>
     e12:	88 e0       	ldi	r24, 0x08	; 8
     e14:	e0 e3       	ldi	r30, 0x30	; 48
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	a1 ef       	ldi	r26, 0xF1	; 241
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
     e1c:	01 90       	ld	r0, Z+
     e1e:	0d 92       	st	X+, r0
     e20:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     e22:	e1 f7       	brne	.-8      	; 0xe1c <USB_Host_ProcessNextHostState+0x1ea>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	d0 d5       	rcall	.+2976   	; 0x19ca <USB_Host_SendControlRequest>
     e2a:	81 11       	cpse	r24, r1
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <USB_Host_ProcessNextHostState+0x210>
     e2e:	10 92 f9 01 	sts	0x01F9, r1
     e32:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 e9 01 	sts	0x01E9, r25
     e3a:	80 93 e8 01 	sts	0x01E8, r24
     e3e:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     e40:	af cf       	rjmp	.-162    	; 0xda0 <USB_Host_ProcessNextHostState+0x16e>
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	20 91 f9 01 	lds	r18, 0x01F9
     e48:	21 30       	cpi	r18, 0x01	; 1
     e4a:	51 f0       	breq	.+20     	; 0xe60 <USB_Host_ProcessNextHostState+0x22e>
     e4c:	68 2f       	mov	r22, r24
     e4e:	89 2f       	mov	r24, r25
     e50:	b2 db       	rcall	.-2204   	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationFailed>
     e52:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	80 93 dd 00 	sts	0x00DD, r24
     e5c:	3c db       	rcall	.-2440   	; 0x4d6 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     e5e:	65 d1       	rcall	.+714    	; 0x112a <USB_ResetInterface>
     e60:	28 96       	adiw	r28, 0x08	; 8
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16

		USB_ResetInterface();
     e74:	08 95       	ret

00000e76 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	7c 01       	movw	r14, r24
     e88:	8b 01       	movw	r16, r22
     e8a:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e8c:	80 91 aa 00 	lds	r24, 0x00AA
     e90:	8f 7c       	andi	r24, 0xCF	; 207
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e98:	00 d1       	rcall	.+512    	; 0x109a <Pipe_WaitUntilReady>
     e9a:	81 11       	cpse	r24, r1
     e9c:	30 c0       	rjmp	.+96     	; 0xefe <Pipe_Read_Stream_LE+0x88>
     e9e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ea0:	31 f0       	breq	.+12     	; 0xeae <Pipe_Read_Stream_LE+0x38>
     ea2:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     ea4:	99 81       	ldd	r25, Y+1	; 0x01
     ea6:	08 1b       	sub	r16, r24
     ea8:	19 0b       	sbc	r17, r25
     eaa:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     eac:	f9 1e       	adc	r15, r25
     eae:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     eb0:	d1 2c       	mov	r13, r1
     eb2:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     eb4:	11 05       	cpc	r17, r1
     eb6:	11 f1       	breq	.+68     	; 0xefc <Pipe_Read_Stream_LE+0x86>
     eb8:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ebc:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <Pipe_Read_Stream_LE+0x70>
     ec0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ec4:	8e 77       	andi	r24, 0x7E	; 126
     ec6:	80 93 a6 00 	sts	0x00A6, r24
     eca:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ecc:	41 f0       	breq	.+16     	; 0xede <Pipe_Read_Stream_LE+0x68>
     ece:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     ed0:	99 81       	ldd	r25, Y+1	; 0x01
     ed2:	8c 0d       	add	r24, r12
     ed4:	9d 1d       	adc	r25, r13
     ed6:	99 83       	std	Y+1, r25	; 0x01
     ed8:	88 83       	st	Y, r24
     eda:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     edc:	10 c0       	rjmp	.+32     	; 0xefe <Pipe_Read_Stream_LE+0x88>
     ede:	dd d0       	rcall	.+442    	; 0x109a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ee0:	88 23       	and	r24, r24
     ee2:	39 f3       	breq	.-50     	; 0xeb2 <Pipe_Read_Stream_LE+0x3c>
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <Pipe_Read_Stream_LE+0x88>
     ee6:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     eea:	f7 01       	movw	r30, r14
     eec:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     eee:	7f 01       	movw	r14, r30
     ef0:	01 50       	subi	r16, 0x01	; 1
     ef2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ef4:	ff ef       	ldi	r31, 0xFF	; 255
     ef6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ef8:	df 0a       	sbc	r13, r31
     efa:	db cf       	rjmp	.-74     	; 0xeb2 <Pipe_Read_Stream_LE+0x3c>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     f00:	cf 91       	pop	r28
}
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	08 95       	ret

00000f10 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     f10:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     f12:	e8 2f       	mov	r30, r24
     f14:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     f16:	87 ff       	sbrs	r24, 7
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <Pipe_ConfigurePipe+0xe>
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <Pipe_ConfigurePipe+0x10>
     f1e:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     f20:	e7 30       	cpi	r30, 0x07	; 7
     f22:	10 f0       	brcs	.+4      	; 0xf28 <Pipe_ConfigurePipe+0x18>
	  return false;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	5a c0       	rjmp	.+180    	; 0xfdc <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     f28:	61 11       	cpse	r22, r1
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     f2c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     f2e:	90 e4       	ldi	r25, 0x40	; 64
     f30:	69 9f       	mul	r22, r25
     f32:	b0 01       	movw	r22, r0
     f34:	11 24       	eor	r1, r1
     f36:	4f 70       	andi	r20, 0x0F	; 15
     f38:	46 2b       	or	r20, r22
     f3a:	48 2b       	or	r20, r24
     f3c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f3e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     f42:	5e 13       	cpse	r21, r30
     f44:	19 c0       	rjmp	.+50     	; 0xf78 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     f46:	02 30       	cpi	r16, 0x02	; 2
     f48:	10 f0       	brcs	.+4      	; 0xf4e <Pipe_ConfigurePipe+0x3e>
     f4a:	76 e0       	ldi	r23, 0x06	; 6
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <Pipe_ConfigurePipe+0x40>
     f4e:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     f54:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	40 f0       	brcs	.+16     	; 0xf6c <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     f5c:	86 2f       	mov	r24, r22
     f5e:	82 95       	swap	r24
     f60:	80 7f       	andi	r24, 0xF0	; 240
     f62:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     f64:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     f66:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f6c:	65 30       	cpi	r22, 0x05	; 5
     f6e:	b1 f3       	breq	.-20     	; 0xf5c <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     f70:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	ef cf       	rjmp	.-34     	; 0xf56 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     f78:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     f7c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     f80:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     f84:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     f88:	81 fd       	sbrc	r24, 1
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     f8c:	5f 5f       	subi	r21, 0xFF	; 255
     f8e:	57 30       	cpi	r21, 0x07	; 7
     f90:	b1 f6       	brne	.-84     	; 0xf3e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f92:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	21 c0       	rjmp	.+66     	; 0xfdc <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f9a:	90 91 a9 00 	lds	r25, 0x00A9
     f9e:	9e 7f       	andi	r25, 0xFE	; 254
     fa0:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     fa4:	90 91 ab 00 	lds	r25, 0x00AB
     fa8:	9d 7f       	andi	r25, 0xFD	; 253
     faa:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     fae:	90 91 a9 00 	lds	r25, 0x00A9
     fb2:	91 60       	ori	r25, 0x01	; 1
     fb4:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     fb8:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     fbc:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     fc0:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     fc4:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     fc8:	80 91 a9 00 	lds	r24, 0x00A9
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     fd2:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     fd6:	87 fd       	sbrc	r24, 7
     fd8:	d9 cf       	rjmp	.-78     	; 0xf8c <Pipe_ConfigurePipe+0x7c>
     fda:	a4 cf       	rjmp	.-184    	; 0xf24 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     fdc:	0f 91       	pop	r16
     fde:	08 95       	ret

00000fe0 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	f6 2e       	mov	r15, r22
     fec:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	1f 15       	cp	r17, r15
     ff2:	71 f0       	breq	.+28     	; 0x1010 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     ff4:	88 81       	ld	r24, Y
     ff6:	88 23       	and	r24, r24
     ff8:	41 f0       	breq	.+16     	; 0x100a <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	0d 81       	ldd	r16, Y+5	; 0x05
    1000:	4b 81       	ldd	r20, Y+3	; 0x03
    1002:	6c 81       	ldd	r22, Y+4	; 0x04
    1004:	85 df       	rcall	.-246    	; 0xf10 <Pipe_ConfigurePipe>
    1006:	88 23       	and	r24, r24
    1008:	21 f0       	breq	.+8      	; 0x1012 <Pipe_ConfigurePipeTable+0x32>
    100a:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    100c:	26 96       	adiw	r28, 0x06	; 6
    100e:	f0 cf       	rjmp	.-32     	; 0xff0 <Pipe_ConfigurePipeTable+0x10>
    1010:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
    1012:	df 91       	pop	r29
}
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	08 95       	ret

0000101e <Pipe_ClearPipes>:
    101e:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1022:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1024:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1028:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    102c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1030:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1034:	90 91 a9 00 	lds	r25, 0x00A9
    1038:	9e 7f       	andi	r25, 0xFE	; 254
    103a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	87 30       	cpi	r24, 0x07	; 7
    1042:	81 f7       	brne	.-32     	; 0x1024 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1044:	08 95       	ret

00001046 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1046:	90 91 a7 00 	lds	r25, 0x00A7
    104a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    104c:	20 91 aa 00 	lds	r18, 0x00AA
    1050:	20 ff       	sbrs	r18, 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <Pipe_IsEndpointBound+0x12>
    1054:	20 e8       	ldi	r18, 0x80	; 128
    1056:	01 c0       	rjmp	.+2      	; 0x105a <Pipe_IsEndpointBound+0x14>
    1058:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    105a:	42 2f       	mov	r20, r18
    105c:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    105e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1060:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1064:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1068:	27 ff       	sbrs	r18, 7
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    106c:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1070:	53 2f       	mov	r21, r19
    1072:	5f 70       	andi	r21, 0x0F	; 15
    1074:	35 ff       	sbrs	r19, 5
    1076:	02 c0       	rjmp	.+4      	; 0x107c <Pipe_IsEndpointBound+0x36>
    1078:	20 e8       	ldi	r18, 0x80	; 128
    107a:	01 c0       	rjmp	.+2      	; 0x107e <Pipe_IsEndpointBound+0x38>
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1080:	28 17       	cp	r18, r24
    1082:	49 f0       	breq	.+18     	; 0x1096 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	97 30       	cpi	r25, 0x07	; 7
    1088:	59 f7       	brne	.-42     	; 0x1060 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    108a:	94 2f       	mov	r25, r20
    108c:	9f 70       	andi	r25, 0x0F	; 15
    108e:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1096:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1098:	08 95       	ret

0000109a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    109a:	80 91 a2 00 	lds	r24, 0x00A2
    109e:	90 91 a3 00 	lds	r25, 0x00A3
    10a2:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    10a4:	20 91 aa 00 	lds	r18, 0x00AA
    10a8:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    10aa:	20 31       	cpi	r18, 0x10	; 16
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10ae:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    10b2:	20 ff       	sbrs	r18, 0
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <Pipe_WaitUntilReady+0x26>
    10b6:	17 c0       	rjmp	.+46     	; 0x10e6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10b8:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    10bc:	22 fd       	sbrc	r18, 2
    10be:	13 c0       	rjmp	.+38     	; 0x10e6 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    10c0:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    10c4:	21 fd       	sbrc	r18, 1
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    10c8:	20 91 f9 01 	lds	r18, 0x01F9
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	79 f0       	breq	.+30     	; 0x10ee <Pipe_WaitUntilReady+0x54>
    10d0:	20 91 a2 00 	lds	r18, 0x00A2
    10d4:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	19 f3       	breq	.-58     	; 0x10a4 <Pipe_WaitUntilReady+0xa>
    10de:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    10e0:	41 f0       	breq	.+16     	; 0x10f2 <Pipe_WaitUntilReady+0x58>
    10e2:	c9 01       	movw	r24, r18
    10e4:	df cf       	rjmp	.-66     	; 0x10a4 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    10f2:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    10f4:	08 95       	ret

000010f6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    10f6:	d1 d0       	rcall	.+418    	; 0x129a <USB_INT_DisableAllInterrupts>
    10f8:	dc d0       	rcall	.+440    	; 0x12b2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10fa:	e0 ee       	ldi	r30, 0xE0	; 224
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    10fe:	80 81       	ld	r24, Z
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	80 83       	st	Z, r24
    1104:	e8 ed       	ldi	r30, 0xD8	; 216
    1106:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1108:	80 81       	ld	r24, Z
    110a:	8f 77       	andi	r24, 0x7F	; 127
    110c:	80 83       	st	Z, r24
    110e:	19 bc       	out	0x29, r1	; 41
    1110:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1112:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1114:	8c 91       	ld	r24, X
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	8c 93       	st	X, r24
    111a:	80 81       	ld	r24, Z
    111c:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    111e:	80 83       	st	Z, r24
    1120:	10 92 ea 01 	sts	0x01EA, r1
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
    1124:	10 92 ef 01 	sts	0x01EF, r1
	#endif

	USB_IsInitialized = false;
    1128:	08 95       	ret

0000112a <USB_ResetInterface>:
    112a:	cf 93       	push	r28
    112c:	c0 91 d7 00 	lds	r28, 0x00D7
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1130:	b4 d0       	rcall	.+360    	; 0x129a <USB_INT_DisableAllInterrupts>
    1132:	bf d0       	rcall	.+382    	; 0x12b2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1134:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1138:	8f 77       	andi	r24, 0x7F	; 127
    113a:	80 93 d8 00 	sts	0x00D8, r24
    113e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1142:	80 68       	ori	r24, 0x80	; 128
    1144:	80 93 d8 00 	sts	0x00D8, r24
    1148:	c6 ff       	sbrs	r28, 6
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <USB_ResetInterface+0x2c>

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
    114c:	80 91 d8 00 	lds	r24, 0x00D8
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	80 93 d8 00 	sts	0x00D8, r24
    1156:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    115a:	8f 7d       	andi	r24, 0xDF	; 223
    115c:	80 93 d8 00 	sts	0x00D8, r24
    1160:	80 91 ea 01 	lds	r24, 0x01EA
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	61 f5       	brne	.+88     	; 0x11c0 <USB_ResetInterface+0x96>
    1168:	80 91 d7 00 	lds	r24, 0x00D7
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    116c:	80 68       	ori	r24, 0x80	; 128
    116e:	80 93 d7 00 	sts	0x00D7, r24
    1172:	19 bc       	out	0x29, r1	; 41
    1174:	10 92 f0 01 	sts	0x01F0, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1178:	10 92 eb 01 	sts	0x01EB, r1
	USB_Device_ConfigurationNumber  = 0;
    117c:	10 92 ed 01 	sts	0x01ED, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1180:	10 92 ec 01 	sts	0x01EC, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1184:	80 91 e0 00 	lds	r24, 0x00E0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	80 93 e0 00 	sts	0x00E0, r24
    118e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	80 93 d8 00 	sts	0x00D8, r24
    1198:	42 e0       	ldi	r20, 0x02	; 2
    119a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	e4 db       	rcall	.-2104   	; 0x968 <Endpoint_ConfigureEndpoint_Prv>
    11a0:	80 91 e1 00 	lds	r24, 0x00E1
    11a4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11a6:	80 93 e1 00 	sts	0x00E1, r24
    11aa:	80 91 e2 00 	lds	r24, 0x00E2
    11ae:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    11b0:	80 93 e2 00 	sts	0x00E2, r24
    11b4:	80 91 e2 00 	lds	r24, 0x00E2
    11b8:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    11ba:	80 93 e2 00 	sts	0x00E2, r24
    11be:	38 c0       	rjmp	.+112    	; 0x1230 <USB_ResetInterface+0x106>
    11c0:	80 91 ea 01 	lds	r24, 0x01EA
    11c4:	82 30       	cpi	r24, 0x02	; 2
		}

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
    11c6:	c9 f5       	brne	.+114    	; 0x123a <USB_ResetInterface+0x110>
    11c8:	80 91 d7 00 	lds	r24, 0x00D7
    11cc:	8f 77       	andi	r24, 0x7F	; 127
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    11ce:	80 93 d7 00 	sts	0x00D7, r24
    11d2:	8c e0       	ldi	r24, 0x0C	; 12
    11d4:	89 bd       	out	0x29, r24	; 41
    11d6:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11d8:	89 bd       	out	0x29, r24	; 41
    11da:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11dc:	00 fe       	sbrs	r0, 0
    11de:	fd cf       	rjmp	.-6      	; 0x11da <USB_ResetInterface+0xb0>

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 f9 01 	sts	0x01F9, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    11e6:	10 92 ee 01 	sts	0x01EE, r1
    11ea:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ConfigurationNumber = 0;
    11ec:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    11f0:	80 91 d8 00 	lds	r24, 0x00D8
    11f4:	80 64       	ori	r24, 0x40	; 64
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    11f6:	80 93 d8 00 	sts	0x00D8, r24
    11fa:	80 91 dd 00 	lds	r24, 0x00DD
    11fe:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1200:	80 93 dd 00 	sts	0x00DD, r24
    1204:	80 91 dd 00 	lds	r24, 0x00DD
    1208:	84 60       	ori	r24, 0x04	; 4
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    120a:	80 93 dd 00 	sts	0x00DD, r24
    120e:	80 91 d7 00 	lds	r24, 0x00D7
    1212:	8f 7e       	andi	r24, 0xEF	; 239
				UHWCON &= ~(1 << UVCONE);
    1214:	80 93 d7 00 	sts	0x00D7, r24
    1218:	6f 9a       	sbi	0x0d, 7	; 13
    121a:	77 9a       	sbi	0x0e, 7	; 14
    121c:	80 91 de 00 	lds	r24, 0x00DE
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    1220:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1222:	80 93 de 00 	sts	0x00DE, r24
    1226:	80 91 de 00 	lds	r24, 0x00DE
    122a:	84 60       	ori	r24, 0x04	; 4
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    122c:	80 93 de 00 	sts	0x00DE, r24
    1230:	80 91 e0 00 	lds	r24, 0x00E0
    1234:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1236:	80 93 e0 00 	sts	0x00E0, r24
    123a:	80 91 d8 00 	lds	r24, 0x00D8
    123e:	80 61       	ori	r24, 0x10	; 16

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1240:	80 93 d8 00 	sts	0x00D8, r24
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <USB_Init>:
    1248:	90 91 d8 00 	lds	r25, 0x00D8
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    124c:	9f 7e       	andi	r25, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    124e:	90 93 d8 00 	sts	0x00D8, r25

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1252:	90 91 d7 00 	lds	r25, 0x00D7
    1256:	91 60       	ori	r25, 0x01	; 1
    1258:	90 93 d7 00 	sts	0x00D7, r25
		PLLFRQ = (1 << PDIV2);
		#endif
	}

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 f4       	brne	.+36     	; 0x1284 <USB_Init+0x3c>
	{
		UHWCON |=  (1 << UIDE);
    1260:	80 91 d7 00 	lds	r24, 0x00D7
    1264:	80 64       	ori	r24, 0x40	; 64
    1266:	80 93 d7 00 	sts	0x00D7, r24
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    126a:	80 91 d8 00 	lds	r24, 0x00D8
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	80 93 d8 00 	sts	0x00D8, r24

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    1274:	80 91 d9 00 	lds	r24, 0x00D9
    1278:	81 ff       	sbrs	r24, 1
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <USB_Init+0x38>
				  return USB_MODE_Device;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	07 c0       	rjmp	.+14     	; 0x128e <USB_Init+0x46>
				else
				  return USB_MODE_Host;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	05 c0       	rjmp	.+10     	; 0x128e <USB_Init+0x46>
		USB_INT_Enable(USB_INT_IDTI);
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	else
	{
		UHWCON &= ~(1 << UIDE);
    1284:	90 91 d7 00 	lds	r25, 0x00D7
    1288:	9f 7b       	andi	r25, 0xBF	; 191
    128a:	90 93 d7 00 	sts	0x00D7, r25
		USB_CurrentMode = Mode;
    128e:	80 93 ea 01 	sts	0x01EA, r24
	}
	#endif

	USB_IsInitialized = true;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 ef 01 	sts	0x01EF, r24

	USB_ResetInterface();
    1298:	48 cf       	rjmp	.-368    	; 0x112a <USB_ResetInterface>

0000129a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    129a:	e8 ed       	ldi	r30, 0xD8	; 216
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8c 7f       	andi	r24, 0xFC	; 252
    12a2:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
    12a4:	10 92 de 00 	sts	0x00DE, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    12a8:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12ac:	10 92 e2 00 	sts	0x00E2, r1
    12b0:	08 95       	ret

000012b2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    12b2:	10 92 da 00 	sts	0x00DA, r1
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
    12b6:	10 92 df 00 	sts	0x00DF, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    12ba:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    12be:	10 92 e1 00 	sts	0x00E1, r1
    12c2:	08 95       	ret

000012c4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	0b b6       	in	r0, 0x3b	; 59
    12d0:	0f 92       	push	r0
    12d2:	2f 93       	push	r18
    12d4:	3f 93       	push	r19
    12d6:	4f 93       	push	r20
    12d8:	5f 93       	push	r21
    12da:	6f 93       	push	r22
    12dc:	7f 93       	push	r23
    12de:	8f 93       	push	r24
    12e0:	9f 93       	push	r25
    12e2:	af 93       	push	r26
    12e4:	bf 93       	push	r27
    12e6:	ef 93       	push	r30
    12e8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    12ea:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    12ee:	82 ff       	sbrs	r24, 2
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    12f2:	80 91 e2 00 	lds	r24, 0x00E2
    12f6:	82 ff       	sbrs	r24, 2
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    12fa:	80 91 e1 00 	lds	r24, 0x00E1
    12fe:	8b 7f       	andi	r24, 0xFB	; 251
    1300:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1304:	a0 d8       	rcall	.-3776   	; 0x446 <EVENT_USB_Device_StartOfFrame>
    1306:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    130a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    130c:	1d c0       	rjmp	.+58     	; 0x1348 <__vector_10+0x84>
    130e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1312:	80 ff       	sbrs	r24, 0
    1314:	19 c0       	rjmp	.+50     	; 0x1348 <__vector_10+0x84>
    1316:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	80 93 da 00 	sts	0x00DA, r24
    1320:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1324:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1326:	0c c0       	rjmp	.+24     	; 0x1340 <__vector_10+0x7c>
    1328:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    132a:	89 bd       	out	0x29, r24	; 41
    132c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    132e:	89 bd       	out	0x29, r24	; 41
    1330:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1332:	00 fe       	sbrs	r0, 0
    1334:	fd cf       	rjmp	.-6      	; 0x1330 <__vector_10+0x6c>
    1336:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1338:	80 93 f0 01 	sts	0x01F0, r24
    133c:	6c d8       	rcall	.-3880   	; 0x416 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <__vector_10+0x84>
    1340:	19 bc       	out	0x29, r1	; 41
    1342:	10 92 f0 01 	sts	0x01F0, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1346:	69 d8       	rcall	.-3886   	; 0x41a <EVENT_USB_Device_Disconnect>
    1348:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    134c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    134e:	18 c0       	rjmp	.+48     	; 0x1380 <__vector_10+0xbc>
    1350:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1354:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <__vector_10+0xbc>
    1358:	80 91 e2 00 	lds	r24, 0x00E2
    135c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    135e:	80 93 e2 00 	sts	0x00E2, r24
    1362:	80 91 e2 00 	lds	r24, 0x00E2
    1366:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1368:	80 93 e2 00 	sts	0x00E2, r24
    136c:	80 91 d8 00 	lds	r24, 0x00D8
    1370:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1372:	80 93 d8 00 	sts	0x00D8, r24
    1376:	19 bc       	out	0x29, r1	; 41
    1378:	85 e0       	ldi	r24, 0x05	; 5
    137a:	80 93 f0 01 	sts	0x01F0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    137e:	fd d2       	rcall	.+1530   	; 0x197a <USB_Event_Stub>
    1380:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    1384:	84 ff       	sbrs	r24, 4
    1386:	2f c0       	rjmp	.+94     	; 0x13e6 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1388:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    138c:	84 ff       	sbrs	r24, 4
    138e:	2b c0       	rjmp	.+86     	; 0x13e6 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1390:	8c e0       	ldi	r24, 0x0C	; 12
    1392:	89 bd       	out	0x29, r24	; 41
    1394:	8e e0       	ldi	r24, 0x0E	; 14
    1396:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1398:	09 b4       	in	r0, 0x29	; 41
    139a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    139c:	fd cf       	rjmp	.-6      	; 0x1398 <__vector_10+0xd4>
    139e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13a8:	80 91 e1 00 	lds	r24, 0x00E1
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    13b2:	80 91 e2 00 	lds	r24, 0x00E2
    13b6:	8f 7e       	andi	r24, 0xEF	; 239
    13b8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    13bc:	80 91 e2 00 	lds	r24, 0x00E2
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13c6:	80 91 eb 01 	lds	r24, 0x01EB
    13ca:	88 23       	and	r24, r24
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <__vector_10+0x11c>
    13d2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    13d6:	87 ff       	sbrs	r24, 7
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 f0 01 	sts	0x01F0, r24
    13e4:	ca d2       	rcall	.+1428   	; 0x197a <USB_Event_Stub>
    13e6:	80 91 e1 00 	lds	r24, 0x00E1
    13ea:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    13ec:	22 c0       	rjmp	.+68     	; 0x1432 <__vector_10+0x16e>
    13ee:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    13f2:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    13f4:	1e c0       	rjmp	.+60     	; 0x1432 <__vector_10+0x16e>
    13f6:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    13fa:	87 7f       	andi	r24, 0xF7	; 247
    13fc:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 f0 01 	sts	0x01F0, r24
    1406:	10 92 eb 01 	sts	0x01EB, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    140a:	80 91 e1 00 	lds	r24, 0x00E1
    140e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    1410:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1414:	80 91 e2 00 	lds	r24, 0x00E2
    1418:	8e 7f       	andi	r24, 0xFE	; 254
    141a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    141e:	80 91 e2 00 	lds	r24, 0x00E2
    1422:	80 61       	ori	r24, 0x10	; 16
    1424:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1428:	42 e0       	ldi	r20, 0x02	; 2
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	9c da       	rcall	.-2760   	; 0x968 <Endpoint_ConfigureEndpoint_Prv>
    1430:	a4 d2       	rcall	.+1352   	; 0x197a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1432:	80 91 9f 00 	lds	r24, 0x009F
    1436:	85 ff       	sbrs	r24, 5
    1438:	0a c0       	rjmp	.+20     	; 0x144e <__vector_10+0x18a>
    143a:	80 91 a0 00 	lds	r24, 0x00A0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    143e:	85 ff       	sbrs	r24, 5
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1440:	06 c0       	rjmp	.+12     	; 0x144e <__vector_10+0x18a>
    1442:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1446:	8f 7d       	andi	r24, 0xDF	; 223
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1448:	80 93 9f 00 	sts	0x009F, r24
    144c:	96 d2       	rcall	.+1324   	; 0x197a <USB_Event_Stub>
    144e:	80 91 9f 00 	lds	r24, 0x009F
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1452:	81 ff       	sbrs	r24, 1
    1454:	15 c0       	rjmp	.+42     	; 0x1480 <__vector_10+0x1bc>
    1456:	80 91 a0 00 	lds	r24, 0x00A0
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    145a:	81 ff       	sbrs	r24, 1
    145c:	11 c0       	rjmp	.+34     	; 0x1480 <__vector_10+0x1bc>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    145e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1462:	8d 7f       	andi	r24, 0xFD	; 253
    1464:	80 93 9f 00 	sts	0x009F, r24
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1468:	80 91 9f 00 	lds	r24, 0x009F
    146c:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    146e:	80 93 9f 00 	sts	0x009F, r24
    1472:	80 91 a0 00 	lds	r24, 0x00A0
    1476:	8d 7f       	andi	r24, 0xFD	; 253
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1478:	80 93 a0 00 	sts	0x00A0, r24
    147c:	2c d8       	rcall	.-4008   	; 0x4d6 <EVENT_USB_Host_DeviceUnattached>
    147e:	55 de       	rcall	.-854    	; 0x112a <USB_ResetInterface>
    1480:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1484:	81 ff       	sbrs	r24, 1
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <__vector_10+0x1ee>
    1488:	80 91 de 00 	lds	r24, 0x00DE
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    148c:	81 ff       	sbrs	r24, 1
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <__vector_10+0x1ee>

		USB_ResetInterface();
    1490:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1494:	8d 7f       	andi	r24, 0xFD	; 253
    1496:	80 93 df 00 	sts	0x00DF, r24
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    149a:	77 98       	cbi	0x0e, 7	; 14
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    149c:	80 91 dd 00 	lds	r24, 0x00DD
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	80 93 dd 00 	sts	0x00DD, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	6f d8       	rcall	.-3874   	; 0x588 <EVENT_USB_Host_HostError>
    14aa:	15 d8       	rcall	.-4054   	; 0x4d6 <EVENT_USB_Host_DeviceUnattached>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    14ae:	80 93 f9 01 	sts	0x01F9, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14b2:	80 91 df 00 	lds	r24, 0x00DF
    14b6:	80 ff       	sbrs	r24, 0
    14b8:	18 c0       	rjmp	.+48     	; 0x14ea <__vector_10+0x226>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    14ba:	80 91 de 00 	lds	r24, 0x00DE
    14be:	80 ff       	sbrs	r24, 0
		EVENT_USB_Host_DeviceUnattached();
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <__vector_10+0x226>
    14c2:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	80 93 df 00 	sts	0x00DF, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    14cc:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    14d0:	8e 7f       	andi	r24, 0xFE	; 254
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    14d2:	80 93 de 00 	sts	0x00DE, r24
    14d6:	0e 94 65 02 	call	0x4ca	; 0x4ca <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    14da:	80 91 a0 00 	lds	r24, 0x00A0
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	80 93 a0 00 	sts	0x00A0, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	80 93 f9 01 	sts	0x01F9, r24
    14ea:	80 91 df 00 	lds	r24, 0x00DF
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    14ee:	82 ff       	sbrs	r24, 2
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <__vector_10+0x24c>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    14f2:	80 91 de 00 	lds	r24, 0x00DE
    14f6:	82 ff       	sbrs	r24, 2
    14f8:	0b c0       	rjmp	.+22     	; 0x1510 <__vector_10+0x24c>
    14fa:	80 91 df 00 	lds	r24, 0x00DF

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    14fe:	8b 7f       	andi	r24, 0xFB	; 251
    1500:	80 93 df 00 	sts	0x00DF, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1504:	60 e0       	ldi	r22, 0x00	; 0
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	56 d8       	rcall	.-3924   	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationFailed>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    150a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <EVENT_USB_Host_DeviceUnattached>
    150e:	0d de       	rcall	.-998    	; 0x112a <USB_ResetInterface>
    1510:	80 91 da 00 	lds	r24, 0x00DA
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1514:	81 ff       	sbrs	r24, 1
    1516:	20 c0       	rjmp	.+64     	; 0x1558 <__vector_10+0x294>
    1518:	80 91 d8 00 	lds	r24, 0x00D8
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    151c:	81 ff       	sbrs	r24, 1
    151e:	1c c0       	rjmp	.+56     	; 0x1558 <__vector_10+0x294>
    1520:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Host_DeviceUnattached();
    1524:	8d 7f       	andi	r24, 0xFD	; 253
    1526:	80 93 da 00 	sts	0x00DA, r24

		USB_ResetInterface();
    152a:	80 91 f0 01 	lds	r24, 0x01F0
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
    152e:	81 11       	cpse	r24, r1
	}
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    1530:	0e 94 0d 02 	call	0x41a	; 0x41a <EVENT_USB_Device_Disconnect>
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
    1534:	80 91 f9 01 	lds	r24, 0x01F9
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	11 f0       	breq	.+4      	; 0x1540 <__vector_10+0x27c>
						USBINT &= ~(1 << VBUSTI);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBINT &= ~(1 << IDTI);
    153c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <EVENT_USB_Host_DeviceUnattached>
    1540:	80 91 d9 00 	lds	r24, 0x00D9
    1544:	81 ff       	sbrs	r24, 1
	{
		USB_INT_Clear(USB_INT_IDTI);

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    1546:	02 c0       	rjmp	.+4      	; 0x154c <__vector_10+0x288>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	01 c0       	rjmp	.+2      	; 0x154e <__vector_10+0x28a>
		  EVENT_USB_Device_Disconnect();
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	80 93 ea 01 	sts	0x01EA, r24

		if (USB_HostState != HOST_STATE_Unattached)
    1552:	eb dd       	rcall	.-1066   	; 0x112a <USB_ResetInterface>
    1554:	0e 94 a9 01 	call	0x352	; 0x352 <EVENT_USB_UIDChange>
		  EVENT_USB_Host_DeviceUnattached();
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
				  return USB_MODE_Device;
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
				else
				  return USB_MODE_Host;
    1568:	5f 91       	pop	r21

		USB_CurrentMode = USB_GetUSBModeFromUID();
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
		USB_ResetInterface();
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0

		EVENT_USB_UIDChange();
    1572:	0b be       	out	0x3b, r0	; 59
    1574:	0f 90       	pop	r0
	}
	#endif
}
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1584:	eb 01       	movw	r28, r22
    1586:	a8 81       	ld	r26, Y
    1588:	b9 81       	ldd	r27, Y+1	; 0x01
    158a:	8c 91       	ld	r24, X
    158c:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    158e:	20 81       	ld	r18, Z
    1590:	31 81       	ldd	r19, Z+1	; 0x01
    1592:	82 17       	cp	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	08 f4       	brcc	.+2      	; 0x159a <USB_GetNextDescriptor+0x1c>
    1598:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    159a:	a2 0f       	add	r26, r18
    159c:	b3 1f       	adc	r27, r19
    159e:	eb 01       	movw	r28, r22
    15a0:	b9 83       	std	Y+1, r27	; 0x01
    15a2:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	82 1b       	sub	r24, r18
    15aa:	93 0b       	sbc	r25, r19
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
			}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	29 97       	sbiw	r28, 0x09	; 9
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	7b 01       	movw	r14, r22
    15d8:	8a 01       	movw	r16, r20
    15da:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    15dc:	90 e8       	ldi	r25, 0x80	; 128
    15de:	90 93 f1 01 	sts	0x01F1, r25
    15e2:	96 e0       	ldi	r25, 0x06	; 6
    15e4:	90 93 f2 01 	sts	0x01F2, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    15e8:	e8 2f       	mov	r30, r24
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	31 97       	sbiw	r30, 0x01	; 1
    15ee:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    15f0:	f0 93 f4 01 	sts	0x01F4, r31
    15f4:	e0 93 f3 01 	sts	0x01F3, r30
    15f8:	10 92 f6 01 	sts	0x01F6, r1
    15fc:	10 92 f5 01 	sts	0x01F5, r1
    1600:	89 e0       	ldi	r24, 0x09	; 9
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	90 93 f8 01 	sts	0x01F8, r25
    1608:	80 93 f7 01 	sts	0x01F7, r24
    160c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	da d1       	rcall	.+948    	; 0x19ca <USB_Host_SendControlRequest>
    1616:	81 11       	cpse	r24, r1
    1618:	19 c0       	rjmp	.+50     	; 0x164c <USB_Host_GetDeviceConfigDescriptor+0x96>
    161a:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    161c:	fc 81       	ldd	r31, Y+4	; 0x04
    161e:	d7 01       	movw	r26, r14
    1620:	ed 93       	st	X+, r30
    1622:	fc 93       	st	X, r31
    1624:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    1626:	df 06       	cpc	r13, r31
    1628:	70 f0       	brcs	.+28     	; 0x1646 <USB_Host_GetDeviceConfigDescriptor+0x90>
    162a:	f0 93 f8 01 	sts	0x01F8, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    162e:	e0 93 f7 01 	sts	0x01F7, r30
    1632:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1634:	ca d1       	rcall	.+916    	; 0x19ca <USB_Host_SendControlRequest>
    1636:	81 11       	cpse	r24, r1
    1638:	09 c0       	rjmp	.+18     	; 0x164c <USB_Host_GetDeviceConfigDescriptor+0x96>
    163a:	f8 01       	movw	r30, r16
    163c:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	21 f0       	breq	.+8      	; 0x164a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	03 c0       	rjmp	.+6      	; 0x164c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	01 c0       	rjmp	.+2      	; 0x164c <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    164e:	0f b6       	in	r0, 0x3f	; 63
}
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	08 95       	ret

0000166a <USB_GetNextDescriptorComp>:
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	8c 01       	movw	r16, r24
    1680:	eb 01       	movw	r28, r22
    1682:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1684:	f8 01       	movw	r30, r16
    1686:	e0 80       	ld	r14, Z
    1688:	f1 80       	ldd	r15, Z+1	; 0x01
    168a:	e1 14       	cp	r14, r1
    168c:	f1 04       	cpc	r15, r1
    168e:	99 f0       	breq	.+38     	; 0x16b6 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1690:	a8 80       	ld	r10, Y
    1692:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1694:	be 01       	movw	r22, r28
    1696:	c8 01       	movw	r24, r16
    1698:	72 df       	rcall	.-284    	; 0x157e <USB_GetNextDescriptor>
    169a:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    169c:	99 81       	ldd	r25, Y+1	; 0x01
    169e:	f6 01       	movw	r30, r12
    16a0:	09 95       	icall
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	79 f3       	breq	.-34     	; 0x1684 <USB_GetNextDescriptorComp+0x1a>
    16a6:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    16a8:	39 f4       	brne	.+14     	; 0x16b8 <USB_GetNextDescriptorComp+0x4e>
    16aa:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    16ac:	a8 82       	st	Y, r10
    16ae:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    16b0:	f1 82       	std	Z+1, r15	; 0x01
    16b2:	e0 82       	st	Z, r14
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <USB_GetNextDescriptorComp+0x4e>
    16b6:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    16b8:	df 91       	pop	r29
}
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	bf 90       	pop	r11
    16ca:	af 90       	pop	r10
    16cc:	08 95       	ret

000016ce <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	aa 97       	sbiw	r28, 0x2a	; 42
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	e1 ef       	ldi	r30, 0xF1	; 241
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16e8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    16ec:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    16ee:	21 e0       	ldi	r18, 0x01	; 1
    16f0:	e9 3f       	cpi	r30, 0xF9	; 249
    16f2:	f2 07       	cpc	r31, r18
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16fa:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    16fe:	83 ff       	sbrs	r24, 3
    1700:	24 c1       	rjmp	.+584    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1702:	90 91 f1 01 	lds	r25, 0x01F1

		switch (USB_ControlRequest.bRequest)
    1706:	80 91 f2 01 	lds	r24, 0x01F2
    170a:	85 30       	cpi	r24, 0x05	; 5
    170c:	09 f4       	brne	.+2      	; 0x1710 <USB_Device_ProcessControlRequest+0x42>
    170e:	77 c0       	rjmp	.+238    	; 0x17fe <USB_Device_ProcessControlRequest+0x130>
    1710:	30 f4       	brcc	.+12     	; 0x171e <USB_Device_ProcessControlRequest+0x50>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	81 f1       	breq	.+96     	; 0x1776 <USB_Device_ProcessControlRequest+0xa8>
    1716:	68 f0       	brcs	.+26     	; 0x1732 <USB_Device_ProcessControlRequest+0x64>
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	69 f1       	breq	.+90     	; 0x1776 <USB_Device_ProcessControlRequest+0xa8>
    171c:	16 c1       	rjmp	.+556    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	09 f4       	brne	.+2      	; 0x1724 <USB_Device_ProcessControlRequest+0x56>
    1722:	e4 c0       	rjmp	.+456    	; 0x18ec <USB_Device_ProcessControlRequest+0x21e>
    1724:	89 30       	cpi	r24, 0x09	; 9
    1726:	09 f4       	brne	.+2      	; 0x172a <USB_Device_ProcessControlRequest+0x5c>
    1728:	f3 c0       	rjmp	.+486    	; 0x1910 <USB_Device_ProcessControlRequest+0x242>
    172a:	86 30       	cpi	r24, 0x06	; 6
    172c:	09 f0       	breq	.+2      	; 0x1730 <USB_Device_ProcessControlRequest+0x62>
    172e:	0d c1       	rjmp	.+538    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    1730:	88 c0       	rjmp	.+272    	; 0x1842 <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1732:	90 38       	cpi	r25, 0x80	; 128
    1734:	81 f0       	breq	.+32     	; 0x1756 <USB_Device_ProcessControlRequest+0x88>
    1736:	92 38       	cpi	r25, 0x82	; 130
    1738:	09 f0       	breq	.+2      	; 0x173c <USB_Device_ProcessControlRequest+0x6e>
    173a:	07 c1       	rjmp	.+526    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    173c:	80 91 f5 01 	lds	r24, 0x01F5
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1746:	80 91 eb 00 	lds	r24, 0x00EB
    174a:	85 fb       	bst	r24, 5
    174c:	88 27       	eor	r24, r24
    174e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1750:	10 92 e9 00 	sts	0x00E9, r1
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1756:	80 91 ec 01 	lds	r24, 0x01EC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    175a:	90 91 ed 01 	lds	r25, 0x01ED
    175e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1760:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1762:	90 91 e8 00 	lds	r25, 0x00E8
    1766:	97 7f       	andi	r25, 0xF7	; 247
    1768:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    176c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1770:	10 92 f1 00 	sts	0x00F1, r1
    1774:	c6 c0       	rjmp	.+396    	; 0x1902 <USB_Device_ProcessControlRequest+0x234>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1776:	29 2f       	mov	r18, r25
    1778:	2d 7f       	andi	r18, 0xFD	; 253
    177a:	09 f0       	breq	.+2      	; 0x177e <USB_Device_ProcessControlRequest+0xb0>
    177c:	e6 c0       	rjmp	.+460    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    177e:	99 23       	and	r25, r25
    1780:	19 f0       	breq	.+6      	; 0x1788 <USB_Device_ProcessControlRequest+0xba>
    1782:	92 30       	cpi	r25, 0x02	; 2
    1784:	61 f0       	breq	.+24     	; 0x179e <USB_Device_ProcessControlRequest+0xd0>
    1786:	e1 c0       	rjmp	.+450    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1788:	90 91 f3 01 	lds	r25, 0x01F3
    178c:	91 30       	cpi	r25, 0x01	; 1
    178e:	09 f0       	breq	.+2      	; 0x1792 <USB_Device_ProcessControlRequest+0xc4>
    1790:	dc c0       	rjmp	.+440    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	09 f0       	breq	.+2      	; 0x1798 <USB_Device_ProcessControlRequest+0xca>
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	90 93 ed 01 	sts	0x01ED, r25
    179c:	2a c0       	rjmp	.+84     	; 0x17f2 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    179e:	90 91 f3 01 	lds	r25, 0x01F3
    17a2:	91 11       	cpse	r25, r1
    17a4:	26 c0       	rjmp	.+76     	; 0x17f2 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    17a6:	20 91 f5 01 	lds	r18, 0x01F5
    17aa:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <USB_Device_ProcessControlRequest+0xe2>
    17ae:	cd c0       	rjmp	.+410    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17b0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    17b4:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    17b8:	90 ff       	sbrs	r25, 0
    17ba:	1b c0       	rjmp	.+54     	; 0x17f2 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	21 f4       	brne	.+8      	; 0x17c8 <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    17c0:	80 91 eb 00 	lds	r24, 0x00EB
    17c4:	80 62       	ori	r24, 0x20	; 32
    17c6:	13 c0       	rjmp	.+38     	; 0x17ee <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    17c8:	80 91 eb 00 	lds	r24, 0x00EB
    17cc:	80 61       	ori	r24, 0x10	; 16
    17ce:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <USB_Device_ProcessControlRequest+0x10e>
    17da:	88 0f       	add	r24, r24
    17dc:	0a 94       	dec	r0
    17de:	ea f7       	brpl	.-6      	; 0x17da <USB_Device_ProcessControlRequest+0x10c>
    17e0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    17e4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    17e8:	80 91 eb 00 	lds	r24, 0x00EB
    17ec:	88 60       	ori	r24, 0x08	; 8
    17ee:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17f2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	85 c0       	rjmp	.+266    	; 0x1908 <USB_Device_ProcessControlRequest+0x23a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17fe:	91 11       	cpse	r25, r1
    1800:	a4 c0       	rjmp	.+328    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1802:	10 91 f3 01 	lds	r17, 0x01F3
    1806:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1808:	80 91 e3 00 	lds	r24, 0x00E3
    180c:	80 78       	andi	r24, 0x80	; 128
    180e:	81 2b       	or	r24, r17
    1810:	80 93 e3 00 	sts	0x00E3, r24
    1814:	80 91 e8 00 	lds	r24, 0x00E8
    1818:	87 7f       	andi	r24, 0xF7	; 247
    181a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    181e:	16 d9       	rcall	.-3540   	; 0xa4c <Endpoint_ClearStatusStage>
    1820:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1824:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    1826:	fc cf       	rjmp	.-8      	; 0x1820 <USB_Device_ProcessControlRequest+0x152>
    1828:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    182c:	80 68       	ori	r24, 0x80	; 128
    182e:	80 93 e3 00 	sts	0x00E3, r24
    1832:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1834:	11 f0       	breq	.+4      	; 0x183a <USB_Device_ProcessControlRequest+0x16c>
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	01 c0       	rjmp	.+2      	; 0x183c <USB_Device_ProcessControlRequest+0x16e>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	80 93 f0 01 	sts	0x01F0, r24
    1840:	84 c0       	rjmp	.+264    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    1842:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1844:	92 30       	cpi	r25, 0x02	; 2
    1846:	08 f0       	brcs	.+2      	; 0x184a <USB_Device_ProcessControlRequest+0x17c>
    1848:	80 c0       	rjmp	.+256    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    184a:	80 91 f3 01 	lds	r24, 0x01F3
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    184e:	90 91 f4 01 	lds	r25, 0x01F4
    1852:	8c 3d       	cpi	r24, 0xDC	; 220
    1854:	23 e0       	ldi	r18, 0x03	; 3
    1856:	92 07       	cpc	r25, r18
    1858:	79 f5       	brne	.+94     	; 0x18b8 <USB_Device_ProcessControlRequest+0x1ea>
    185a:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1864:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1866:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1868:	13 96       	adiw	r26, 0x03	; 3
    186a:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    186c:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    186e:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1870:	e3 2f       	mov	r30, r19
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	50 93 57 00 	sts	0x0057, r21
    1878:	e4 91       	lpm	r30, Z
    187a:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <USB_Device_ProcessControlRequest+0x1b6>
    187e:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1880:	ef 70       	andi	r30, 0x0F	; 15
    1882:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    1884:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1886:	8e 2f       	mov	r24, r30
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    188c:	10 f0       	brcs	.+4      	; 0x1892 <USB_Device_ProcessControlRequest+0x1c4>
    188e:	c7 96       	adiw	r24, 0x37	; 55
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <USB_Device_ProcessControlRequest+0x1c6>
    1892:	c0 96       	adiw	r24, 0x30	; 48
    1894:	8d 93       	st	X+, r24
    1896:	9d 93       	st	X+, r25
    1898:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    189a:	24 31       	cpi	r18, 0x14	; 20
    189c:	49 f7       	brne	.-46     	; 0x1870 <USB_Device_ProcessControlRequest+0x1a2>
    189e:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    18a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18a4:	87 7f       	andi	r24, 0xF7	; 247
    18a6:	80 93 e8 00 	sts	0x00E8, r24
    18aa:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	0e 94 b9 03 	call	0x772	; 0x772 <Endpoint_Write_Control_Stream_LE>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <USB_Device_ProcessControlRequest+0x212>
    18b8:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    18ba:	4f 5f       	subi	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	60 91 f5 01 	lds	r22, 0x01F5
    18c2:	0e 94 c3 01 	call	0x386	; 0x386 <CALLBACK_USB_GetDescriptor>
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	09 f4       	brne	.+2      	; 0x18cc <USB_Device_ProcessControlRequest+0x1fe>
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    18cc:	20 91 e8 00 	lds	r18, 0x00E8
    18d0:	27 7f       	andi	r18, 0xF7	; 247
    18d2:	20 93 e8 00 	sts	0x00E8, r18
    18d6:	bc 01       	movw	r22, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Endpoint_Write_Control_PStream_LE>
    18e0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18e4:	8b 77       	andi	r24, 0x7B	; 123
    18e6:	80 93 e8 00 	sts	0x00E8, r24
    18ea:	2f c0       	rjmp	.+94     	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    18ec:	90 38       	cpi	r25, 0x80	; 128
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    18ee:	69 f5       	brne	.+90     	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    18f0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18f4:	87 7f       	andi	r24, 0xF7	; 247
    18f6:	80 93 e8 00 	sts	0x00E8, r24
    18fa:	80 91 eb 01 	lds	r24, 0x01EB

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    18fe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1902:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1906:	8e 77       	andi	r24, 0x7E	; 126
    1908:	80 93 e8 00 	sts	0x00E8, r24
    190c:	9f d8       	rcall	.-3778   	; 0xa4c <Endpoint_ClearStatusStage>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    190e:	1d c0       	rjmp	.+58     	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    1910:	91 11       	cpse	r25, r1
    1912:	1b c0       	rjmp	.+54     	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1914:	90 91 f3 01 	lds	r25, 0x01F3
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1918:	92 30       	cpi	r25, 0x02	; 2
    191a:	b8 f4       	brcc	.+46     	; 0x194a <USB_Device_ProcessControlRequest+0x27c>
    191c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1920:	87 7f       	andi	r24, 0xF7	; 247
    1922:	80 93 e8 00 	sts	0x00E8, r24
    1926:	90 93 eb 01 	sts	0x01EB, r25
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    192a:	90 d8       	rcall	.-3808   	; 0xa4c <Endpoint_ClearStatusStage>
    192c:	80 91 eb 01 	lds	r24, 0x01EB

	Endpoint_ClearStatusStage();
    1930:	81 11       	cpse	r24, r1

	if (USB_Device_ConfigurationNumber)
    1932:	04 c0       	rjmp	.+8      	; 0x193c <USB_Device_ProcessControlRequest+0x26e>
    1934:	80 91 e3 00 	lds	r24, 0x00E3
    1938:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <USB_Device_ProcessControlRequest+0x272>
    193c:	84 e0       	ldi	r24, 0x04	; 4
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <USB_Device_ProcessControlRequest+0x274>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 f0 01 	sts	0x01F0, r24
    1946:	0e 94 0f 02 	call	0x41e	; 0x41e <EVENT_USB_Device_ConfigurationChanged>
    194a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    194e:	83 ff       	sbrs	r24, 3
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1950:	0a c0       	rjmp	.+20     	; 0x1966 <USB_Device_ProcessControlRequest+0x298>
    1952:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1956:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1958:	80 93 e8 00 	sts	0x00E8, r24
    195c:	80 91 eb 00 	lds	r24, 0x00EB
    1960:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1962:	80 93 eb 00 	sts	0x00EB, r24
    1966:	aa 96       	adiw	r28, 0x2a	; 42
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	08 95       	ret

0000197a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    197a:	08 95       	ret

0000197c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1984:	c9 ee       	ldi	r28, 0xE9	; 233
    1986:	d3 e0       	ldi	r29, 0x03	; 3
    1988:	11 11       	cpse	r17, r1
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    198c:	80 91 a6 00 	lds	r24, 0x00A6
    1990:	83 fd       	sbrc	r24, 3
    1992:	16 c0       	rjmp	.+44     	; 0x19c0 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	fc d8       	rcall	.-3592   	; 0xb90 <USB_Host_WaitMS>
    1998:	81 11       	cpse	r24, r1
    199a:	13 c0       	rjmp	.+38     	; 0x19c2 <USB_Host_WaitForIOS+0x46>
    199c:	21 97       	sbiw	r28, 0x01	; 1
    199e:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    19a0:	99 f7       	brne	.-26     	; 0x1988 <USB_Host_WaitForIOS+0xc>
    19a2:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    19a4:	0e c0       	rjmp	.+28     	; 0x19c2 <USB_Host_WaitForIOS+0x46>
    19a6:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <USB_Host_WaitForIOS+0x38>
    19aa:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    19ae:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    19b0:	f1 cf       	rjmp	.-30     	; 0x1994 <USB_Host_WaitForIOS+0x18>
    19b2:	06 c0       	rjmp	.+12     	; 0x19c0 <USB_Host_WaitForIOS+0x44>
    19b4:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    19b6:	71 f7       	brne	.-36     	; 0x1994 <USB_Host_WaitForIOS+0x18>
    19b8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    19bc:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    19be:	ea cf       	rjmp	.-44     	; 0x1994 <USB_Host_WaitForIOS+0x18>
    19c0:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    19c2:	df 91       	pop	r29
}
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	08 95       	ret

000019ca <USB_Host_SendControlRequest>:
    19ca:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    19d6:	f0 90 9e 00 	lds	r15, 0x009E
    19da:	8f 2d       	mov	r24, r15
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    19e0:	c0 91 f7 01 	lds	r28, 0x01F7
    19e4:	d0 91 f8 01 	lds	r29, 0x01F8
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    19e8:	80 91 9e 00 	lds	r24, 0x009E
    19ec:	81 60       	ori	r24, 0x01	; 1
    19ee:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	cd d8       	rcall	.-3686   	; 0xb90 <USB_Host_WaitMS>
    19f6:	81 11       	cpse	r24, r1
    19f8:	cc c0       	rjmp	.+408    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    19fa:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19fe:	8f 7c       	andi	r24, 0xCF	; 207
    1a00:	80 93 aa 00 	sts	0x00AA, r24
    1a04:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1a08:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1a0c:	8f 7e       	andi	r24, 0xEF	; 239
    1a0e:	80 93 a6 00 	sts	0x00A6, r24
    1a12:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a16:	8f 7b       	andi	r24, 0xBF	; 191
    1a18:	80 93 a9 00 	sts	0x00A9, r24
    1a1c:	e1 ef       	ldi	r30, 0xF1	; 241
    1a1e:	f1 e0       	ldi	r31, 0x01	; 1
    1a20:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1a22:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1a28:	e9 3f       	cpi	r30, 0xF9	; 249
    1a2a:	f8 07       	cpc	r31, r24
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <USB_Host_SendControlRequest+0x56>
    1a2e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1a32:	87 77       	andi	r24, 0x77	; 119
    1a34:	80 93 a6 00 	sts	0x00A6, r24
    1a38:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1a3a:	a0 df       	rcall	.-192    	; 0x197c <USB_Host_WaitForIOS>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	a9 c0       	rjmp	.+338    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1a40:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a44:	80 64       	ori	r24, 0x40	; 64
    1a46:	80 93 a9 00 	sts	0x00A9, r24
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	a1 d8       	rcall	.-3774   	; 0xb90 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a4e:	81 11       	cpse	r24, r1
    1a50:	a0 c0       	rjmp	.+320    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1a52:	80 91 f1 01 	lds	r24, 0x01F1
    1a56:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1a58:	4e c0       	rjmp	.+156    	; 0x1af6 <USB_Host_SendControlRequest+0x12c>
    1a5a:	80 91 aa 00 	lds	r24, 0x00AA
    1a5e:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a60:	80 61       	ori	r24, 0x10	; 16
    1a62:	80 93 aa 00 	sts	0x00AA, r24
    1a66:	01 15       	cp	r16, r1
    1a68:	11 05       	cpc	r17, r1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1a6c:	3a c0       	rjmp	.+116    	; 0x1ae2 <USB_Host_SendControlRequest+0x118>
    1a6e:	80 91 aa 00 	lds	r24, 0x00AA
    1a72:	8f 7c       	andi	r24, 0xCF	; 207
    1a74:	80 62       	ori	r24, 0x20	; 32
    1a76:	80 93 aa 00 	sts	0x00AA, r24
    1a7a:	80 91 a9 00 	lds	r24, 0x00A9
    1a7e:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a80:	80 93 a9 00 	sts	0x00A9, r24
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	7a df       	rcall	.-268    	; 0x197c <USB_Host_WaitForIOS>
    1a88:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a8a:	83 c0       	rjmp	.+262    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1a8c:	80 91 a6 00 	lds	r24, 0x00A6
    1a90:	8b 77       	andi	r24, 0x7B	; 123
    1a92:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	71 df       	rcall	.-286    	; 0x197c <USB_Host_WaitForIOS>
    1a9a:	7b c0       	rjmp	.+246    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1a9c:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1aa0:	8f 7b       	andi	r24, 0xBF	; 191
    1aa2:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	69 df       	rcall	.-302    	; 0x197c <USB_Host_WaitForIOS>
    1aaa:	81 11       	cpse	r24, r1
    1aac:	72 c0       	rjmp	.+228    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1aae:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ab2:	90 91 f7 00 	lds	r25, 0x00F7
    1ab6:	89 2b       	or	r24, r25
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1aba:	c0 e0       	ldi	r28, 0x00	; 0
    1abc:	d0 e0       	ldi	r29, 0x00	; 0
    1abe:	f8 01       	movw	r30, r16
    1ac0:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1ac2:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1ac6:	90 91 f7 00 	lds	r25, 0x00F7
    1aca:	89 2b       	or	r24, r25
    1acc:	69 f4       	brne	.+26     	; 0x1ae8 <USB_Host_SendControlRequest+0x11e>
    1ace:	80 91 a9 00 	lds	r24, 0x00A9
    1ad2:	80 64       	ori	r24, 0x40	; 64
    1ad4:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1ad8:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1adc:	8e 77       	andi	r24, 0x7E	; 126
    1ade:	80 93 a6 00 	sts	0x00A6, r24
    1ae2:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1ae4:	d9 f6       	brne	.-74     	; 0x1a9c <USB_Host_SendControlRequest+0xd2>
    1ae6:	c3 cf       	rjmp	.-122    	; 0x1a6e <USB_Host_SendControlRequest+0xa4>
    1ae8:	20 97       	sbiw	r28, 0x00	; 0
    1aea:	89 f3       	breq	.-30     	; 0x1ace <USB_Host_SendControlRequest+0x104>
    1aec:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1af0:	81 93       	st	Z+, r24
    1af2:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1af4:	e5 cf       	rjmp	.-54     	; 0x1ac0 <USB_Host_SendControlRequest+0xf6>
    1af6:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1af8:	11 05       	cpc	r17, r1
    1afa:	b1 f1       	breq	.+108    	; 0x1b68 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1afc:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1b00:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1b02:	80 62       	ori	r24, 0x20	; 32
    1b04:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b08:	80 91 a9 00 	lds	r24, 0x00A9
    1b0c:	8f 7b       	andi	r24, 0xBF	; 191
    1b0e:	80 93 a9 00 	sts	0x00A9, r24
    1b12:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b14:	20 97       	sbiw	r28, 0x00	; 0
    1b16:	01 f1       	breq	.+64     	; 0x1b58 <USB_Host_SendControlRequest+0x18e>
    1b18:	31 df       	rcall	.-414    	; 0x197c <USB_Host_WaitForIOS>
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	3a c0       	rjmp	.+116    	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b1e:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1b20:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b24:	30 91 f7 00 	lds	r19, 0x00F7
    1b28:	80 91 27 01 	lds	r24, 0x0127
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b2e:	28 17       	cp	r18, r24
    1b30:	39 07       	cpc	r19, r25
    1b32:	58 f4       	brcc	.+22     	; 0x1b4a <USB_Host_SendControlRequest+0x180>
    1b34:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	8c 01       	movw	r16, r24
    1b3a:	20 81       	ld	r18, Z
    1b3c:	20 93 af 00 	sts	0x00AF, r18
    1b40:	21 97       	sbiw	r28, 0x01	; 1
    1b42:	20 97       	sbiw	r28, 0x00	; 0
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <USB_Host_SendControlRequest+0x182>
    1b46:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1b48:	eb cf       	rjmp	.-42     	; 0x1b20 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b4a:	8f 01       	movw	r16, r30
    1b4c:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b50:	8b 77       	andi	r24, 0x7B	; 123
    1b52:	80 93 a6 00 	sts	0x00A6, r24
    1b56:	dd cf       	rjmp	.-70     	; 0x1b12 <USB_Host_SendControlRequest+0x148>
    1b58:	11 df       	rcall	.-478    	; 0x197c <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	1a c0       	rjmp	.+52     	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1b5e:	80 91 a9 00 	lds	r24, 0x00A9
    1b62:	80 64       	ori	r24, 0x40	; 64
    1b64:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b68:	80 91 aa 00 	lds	r24, 0x00AA
    1b6c:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b6e:	80 61       	ori	r24, 0x10	; 16
    1b70:	80 93 aa 00 	sts	0x00AA, r24
    1b74:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b78:	8f 7b       	andi	r24, 0xBF	; 191
    1b7a:	80 93 a9 00 	sts	0x00A9, r24
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	fd de       	rcall	.-518    	; 0x197c <USB_Host_WaitForIOS>
    1b82:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <USB_Host_SendControlRequest+0x1c8>
    1b86:	80 91 a6 00 	lds	r24, 0x00A6
    1b8a:	8e 77       	andi	r24, 0x7E	; 126
    1b8c:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 91 a9 00 	lds	r25, 0x00A9
    1b96:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b98:	90 93 a9 00 	sts	0x00A9, r25
    1b9c:	f1 10       	cpse	r15, r1
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <USB_Host_SendControlRequest+0x1e0>
    1ba0:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ba4:	9e 7f       	andi	r25, 0xFE	; 254
    1ba6:	90 93 9e 00 	sts	0x009E, r25
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1bb0:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1bbc:	ff 90       	pop	r15
    1bbe:	08 95       	ret

00001bc0 <USB_Host_SetDeviceConfiguration>:
    1bc0:	cf 93       	push	r28
				UPRST = 0;
    1bc2:	c8 2f       	mov	r28, r24
    1bc4:	10 92 f1 01 	sts	0x01F1, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1bc8:	89 e0       	ldi	r24, 0x09	; 9
    1bca:	80 93 f2 01 	sts	0x01F2, r24
    1bce:	2c 2f       	mov	r18, r28
    1bd0:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1bd2:	30 93 f4 01 	sts	0x01F4, r19
    1bd6:	20 93 f3 01 	sts	0x01F3, r18
    1bda:	10 92 f6 01 	sts	0x01F6, r1
    1bde:	10 92 f5 01 	sts	0x01F5, r1
    1be2:	10 92 f8 01 	sts	0x01F8, r1
    1be6:	10 92 f7 01 	sts	0x01F7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1bea:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	eb de       	rcall	.-554    	; 0x19ca <USB_Host_SendControlRequest>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <USB_Host_SetDeviceConfiguration+0x4a>
    1bf8:	c0 93 ee 01 	sts	0x01EE, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1bfc:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <USB_Host_SetDeviceConfiguration+0x44>
    1c00:	9b e0       	ldi	r25, 0x0B	; 11
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <USB_Host_SetDeviceConfiguration+0x46>
    1c04:	9a e0       	ldi	r25, 0x0A	; 10
    1c06:	90 93 f9 01 	sts	0x01F9, r25
    1c0a:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1c0c:	08 95       	ret

00001c0e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1c0e:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
    1c10:	80 91 ea 01 	lds	r24, 0x01EA
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	d1 f4       	brne	.+52     	; 0x1c4c <USB_USBTask+0x3e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c18:	80 91 f0 01 	lds	r24, 0x01F0
    1c1c:	88 23       	and	r24, r24
    1c1e:	29 f1       	breq	.+74     	; 0x1c6a <USB_USBTask+0x5c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c20:	80 91 e9 00 	lds	r24, 0x00E9
    1c24:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c26:	90 91 ec 00 	lds	r25, 0x00EC
    1c2a:	90 ff       	sbrs	r25, 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <USB_USBTask+0x24>
    1c2e:	90 e8       	ldi	r25, 0x80	; 128
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <USB_USBTask+0x26>
    1c32:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1c34:	c9 2f       	mov	r28, r25
    1c36:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c3c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1c40:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1c42:	45 dd       	rcall	.-1398   	; 0x16ce <USB_Device_ProcessControlRequest>
    1c44:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c46:	c0 93 e9 00 	sts	0x00E9, r28
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <USB_USBTask+0x5c>
    1c4c:	80 91 ea 01 	lds	r24, 0x01EA
void USB_USBTask(void)
{
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	59 f4       	brne	.+22     	; 0x1c6a <USB_USBTask+0x5c>
    1c54:	c0 91 a7 00 	lds	r28, 0x00A7
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1c58:	cf 70       	andi	r28, 0x0F	; 15
    1c5a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1c5e:	10 92 a7 00 	sts	0x00A7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c62:	0e 94 19 06 	call	0xc32	; 0xc32 <USB_Host_ProcessNextHostState>
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1c66:	c0 93 a7 00 	sts	0x00A7, r28
    1c6a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1c6c:	08 95       	ret

00001c6e <HID_Device_ProcessControlRequest>:
    1c6e:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <HID_Device_ProcessControlRequest+0x1e>
    1c8c:	1f 92       	push	r1
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1c94:	ad b6       	in	r10, 0x3d	; 61
    1c96:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c98:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1c9c:	83 ff       	sbrs	r24, 3
    1c9e:	09 c1       	rjmp	.+530    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	80 81       	ld	r24, Z
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	20 91 f5 01 	lds	r18, 0x01F5
    1caa:	30 91 f6 01 	lds	r19, 0x01F6
    1cae:	28 17       	cp	r18, r24
    1cb0:	39 07       	cpc	r19, r25
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <HID_Device_ProcessControlRequest+0x48>
    1cb4:	fe c0       	rjmp	.+508    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
	  return;

	switch (USB_ControlRequest.bRequest)
    1cb6:	80 91 f2 01 	lds	r24, 0x01F2
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <HID_Device_ProcessControlRequest+0x52>
    1cbe:	9d c0       	rjmp	.+314    	; 0x1dfa <HID_Device_ProcessControlRequest+0x18c>
    1cc0:	30 f4       	brcc	.+12     	; 0x1cce <HID_Device_ProcessControlRequest+0x60>
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <HID_Device_ProcessControlRequest+0x74>
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <HID_Device_ProcessControlRequest+0x5e>
    1cca:	d6 c0       	rjmp	.+428    	; 0x1e78 <HID_Device_ProcessControlRequest+0x20a>
    1ccc:	f2 c0       	rjmp	.+484    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1cce:	8a 30       	cpi	r24, 0x0A	; 10
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <HID_Device_ProcessControlRequest+0x66>
    1cd2:	b9 c0       	rjmp	.+370    	; 0x1e46 <HID_Device_ProcessControlRequest+0x1d8>
    1cd4:	8b 30       	cpi	r24, 0x0B	; 11
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <HID_Device_ProcessControlRequest+0x6c>
    1cd8:	a1 c0       	rjmp	.+322    	; 0x1e1c <HID_Device_ProcessControlRequest+0x1ae>
    1cda:	89 30       	cpi	r24, 0x09	; 9
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <HID_Device_ProcessControlRequest+0x72>
    1cde:	e9 c0       	rjmp	.+466    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1ce0:	4d c0       	rjmp	.+154    	; 0x1d7c <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ce2:	80 91 f1 01 	lds	r24, 0x01F1
    1ce6:	81 3a       	cpi	r24, 0xA1	; 161
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <HID_Device_ProcessControlRequest+0x7e>
    1cea:	e3 c0       	rjmp	.+454    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1cec:	8d b6       	in	r8, 0x3d	; 61
    1cee:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    1cf2:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1cf4:	80 91 f3 01 	lds	r24, 0x01F3
    1cf8:	10 91 f4 01 	lds	r17, 0x01F4
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1cfe:	f7 01       	movw	r30, r14
    1d00:	40 85       	ldd	r20, Z+8	; 0x08
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	8d b7       	in	r24, 0x3d	; 61
    1d06:	9e b7       	in	r25, 0x3e	; 62
    1d08:	84 1b       	sub	r24, r20
    1d0a:	95 0b       	sbc	r25, r21
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	9e bf       	out	0x3e, r25	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	8d bf       	out	0x3d, r24	; 61
    1d16:	ed b7       	in	r30, 0x3d	; 61
    1d18:	fe b7       	in	r31, 0x3e	; 62
    1d1a:	31 96       	adiw	r30, 0x01	; 1
    1d1c:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	cf 01       	movw	r24, r30
    1d24:	8b d3       	rcall	.+1814   	; 0x243c <memset>
    1d26:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1d28:	41 0f       	add	r20, r17
    1d2a:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1d2c:	0f 5f       	subi	r16, 0xFF	; 255
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	96 01       	movw	r18, r12
    1d32:	be 01       	movw	r22, r28
    1d34:	6d 5f       	subi	r22, 0xFD	; 253
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	c7 01       	movw	r24, r14
    1d3a:	0e 94 2f 02 	call	0x45e	; 0x45e <CALLBACK_HID_Device_CreateHIDReport>
    1d3e:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1d40:	86 81       	ldd	r24, Z+6	; 0x06
    1d42:	97 81       	ldd	r25, Z+7	; 0x07
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <HID_Device_ProcessControlRequest+0xe2>
    1d48:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	6d d3       	rcall	.+1754   	; 0x242a <memcpy>
    1d50:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d54:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d58:	87 7f       	andi	r24, 0xF7	; 247
    1d5a:	80 93 e8 00 	sts	0x00E8, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	81 11       	cpse	r24, r1

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1d62:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d66:	69 81       	ldd	r22, Y+1	; 0x01
    1d68:	7a 81       	ldd	r23, Y+2	; 0x02
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1d6a:	c6 01       	movw	r24, r12
    1d6c:	0e 94 b9 03 	call	0x772	; 0x772 <Endpoint_Write_Control_Stream_LE>
    1d70:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d74:	8b 77       	andi	r24, 0x7B	; 123
    1d76:	80 93 e8 00 	sts	0x00E8, r24
    1d7a:	39 c0       	rjmp	.+114    	; 0x1dee <HID_Device_ProcessControlRequest+0x180>
    1d7c:	80 91 f1 01 	lds	r24, 0x01F1
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d80:	81 32       	cpi	r24, 0x21	; 33
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <HID_Device_ProcessControlRequest+0x118>
    1d84:	96 c0       	rjmp	.+300    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1d86:	8d b6       	in	r8, 0x3d	; 61
    1d88:	9e b6       	in	r9, 0x3e	; 62
    1d8a:	00 91 f7 01 	lds	r16, 0x01F7
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1d8e:	10 91 f8 01 	lds	r17, 0x01F8
    1d92:	70 90 f3 01 	lds	r7, 0x01F3
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1d96:	60 90 f4 01 	lds	r6, 0x01F4
    1d9a:	8d b7       	in	r24, 0x3d	; 61
    1d9c:	9e b7       	in	r25, 0x3e	; 62
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1d9e:	80 1b       	sub	r24, r16
    1da0:	91 0b       	sbc	r25, r17
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	9e bf       	out	0x3e, r25	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	8d bf       	out	0x3d, r24	; 61
    1dac:	ed b7       	in	r30, 0x3d	; 61
    1dae:	fe b7       	in	r31, 0x3e	; 62
    1db0:	31 96       	adiw	r30, 0x01	; 1
    1db2:	6f 01       	movw	r12, r30
    1db4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1db8:	87 7f       	andi	r24, 0xF7	; 247
    1dba:	80 93 e8 00 	sts	0x00E8, r24
    1dbe:	b8 01       	movw	r22, r16
    1dc0:	cf 01       	movw	r24, r30

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1dc2:	0e 94 16 04 	call	0x82c	; 0x82c <Endpoint_Read_Control_Stream_LE>
    1dc6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dca:	8e 77       	andi	r24, 0x7E	; 126
    1dcc:	80 93 e8 00 	sts	0x00E8, r24
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	71 10       	cpse	r7, r1
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <HID_Device_ProcessControlRequest+0x16a>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	02 1b       	sub	r16, r18
    1ddc:	13 0b       	sbc	r17, r19
    1dde:	2c 0d       	add	r18, r12
    1de0:	3d 1d       	adc	r19, r13
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1de2:	4f ef       	ldi	r20, 0xFF	; 255
    1de4:	46 0d       	add	r20, r6
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1de6:	67 2d       	mov	r22, r7
    1de8:	c7 01       	movw	r24, r14

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1dea:	0e 94 5f 02 	call	0x4be	; 0x4be <CALLBACK_HID_Device_ProcessHIDReport>
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	9e be       	out	0x3e, r9	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	8d be       	out	0x3d, r8	; 61
    1df8:	5c c0       	rjmp	.+184    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1dfa:	80 91 f1 01 	lds	r24, 0x01F1
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dfe:	81 3a       	cpi	r24, 0xA1	; 161
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <HID_Device_ProcessControlRequest+0x196>
    1e02:	57 c0       	rjmp	.+174    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e08:	87 7f       	andi	r24, 0xF7	; 247
    1e0a:	80 93 e8 00 	sts	0x00E8, r24
    1e0e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e12:	80 ff       	sbrs	r24, 0
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <HID_Device_ProcessControlRequest+0x1a0>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1e16:	f7 01       	movw	r30, r14
    1e18:	81 85       	ldd	r24, Z+9	; 0x09
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1e1a:	42 c0       	rjmp	.+132    	; 0x1ea0 <HID_Device_ProcessControlRequest+0x232>
    1e1c:	80 91 f1 01 	lds	r24, 0x01F1
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e20:	81 32       	cpi	r24, 0x21	; 33
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <HID_Device_ProcessControlRequest+0x1b8>
    1e24:	46 c0       	rjmp	.+140    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e26:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	80 93 e8 00 	sts	0x00E8, r24
    1e30:	0e 94 26 05 	call	0xa4c	; 0xa4c <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1e34:	90 91 f3 01 	lds	r25, 0x01F3

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	91 11       	cpse	r25, r1
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <HID_Device_ProcessControlRequest+0x1d2>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	f7 01       	movw	r30, r14
    1e42:	81 87       	std	Z+9, r24	; 0x09
    1e44:	36 c0       	rjmp	.+108    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e46:	80 91 f1 01 	lds	r24, 0x01F1
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e4a:	81 32       	cpi	r24, 0x21	; 33
    1e4c:	91 f5       	brne	.+100    	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	80 93 e8 00 	sts	0x00E8, r24
    1e58:	0e 94 26 05 	call	0xa4c	; 0xa4c <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1e5c:	80 91 f3 01 	lds	r24, 0x01F3

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1e60:	90 91 f4 01 	lds	r25, 0x01F4
    1e64:	88 27       	eor	r24, r24
    1e66:	36 e0       	ldi	r19, 0x06	; 6
    1e68:	96 95       	lsr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	3a 95       	dec	r19
    1e6e:	e1 f7       	brne	.-8      	; 0x1e68 <HID_Device_ProcessControlRequest+0x1fa>
    1e70:	f7 01       	movw	r30, r14
    1e72:	95 87       	std	Z+13, r25	; 0x0d
    1e74:	84 87       	std	Z+12, r24	; 0x0c
    1e76:	1d c0       	rjmp	.+58     	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e78:	80 91 f1 01 	lds	r24, 0x01F1
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e7c:	81 3a       	cpi	r24, 0xA1	; 161
    1e7e:	c9 f4       	brne	.+50     	; 0x1eb2 <HID_Device_ProcessControlRequest+0x244>
    1e80:	80 91 e8 00 	lds	r24, 0x00E8
    1e84:	87 7f       	andi	r24, 0xF7	; 247
    1e86:	80 93 e8 00 	sts	0x00E8, r24
    1e8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e8e:	80 ff       	sbrs	r24, 0
    1e90:	fc cf       	rjmp	.-8      	; 0x1e8a <HID_Device_ProcessControlRequest+0x21c>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1e92:	f7 01       	movw	r30, r14
    1e94:	84 85       	ldd	r24, Z+12	; 0x0c
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1e96:	95 85       	ldd	r25, Z+13	; 0x0d
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ea4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ea8:	8e 77       	andi	r24, 0x7E	; 126
    1eaa:	80 93 e8 00 	sts	0x00E8, r24
    1eae:	0e 94 26 05 	call	0xa4c	; 0xa4c <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
			}

			break;
	}
}
    1eb6:	be be       	out	0x3e, r11	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	ad be       	out	0x3d, r10	; 61
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	9f 90       	pop	r9
    1ed8:	8f 90       	pop	r8
    1eda:	7f 90       	pop	r7
    1edc:	6f 90       	pop	r6
    1ede:	08 95       	ret

00001ee0 <HID_Device_ConfigureEndpoints>:
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	39 96       	adiw	r30, 0x09	; 9

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1ee4:	27 e0       	ldi	r18, 0x07	; 7
    1ee6:	df 01       	movw	r26, r30
    1ee8:	1d 92       	st	X+, r1
    1eea:	2a 95       	dec	r18
    1eec:	e9 f7       	brne	.-6      	; 0x1ee8 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1ef4:	24 ef       	ldi	r18, 0xF4	; 244
    1ef6:	31 e0       	ldi	r19, 0x01	; 1
    1ef8:	35 87       	std	Z+13, r19	; 0x0d
    1efa:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1efc:	23 e0       	ldi	r18, 0x03	; 3
    1efe:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <Endpoint_ConfigureEndpointTable>

00001f08 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1f08:	5f 92       	push	r5
    1f0a:	6f 92       	push	r6
    1f0c:	7f 92       	push	r7
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <HID_Device_USBTask+0x20>
    1f28:	1f 92       	push	r1
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1f30:	ad b6       	in	r10, 0x3d	; 61
    1f32:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1f34:	80 91 f0 01 	lds	r24, 0x01F0
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <HID_Device_USBTask+0x36>
    1f3c:	8c c0       	rjmp	.+280    	; 0x2056 <HID_Device_USBTask+0x14e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f3e:	80 91 e4 00 	lds	r24, 0x00E4
    1f42:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1f46:	f7 01       	movw	r30, r14
    1f48:	22 85       	ldd	r18, Z+10	; 0x0a
    1f4a:	33 85       	ldd	r19, Z+11	; 0x0b
    1f4c:	28 17       	cp	r18, r24
    1f4e:	39 07       	cpc	r19, r25
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <HID_Device_USBTask+0x4c>
    1f52:	81 c0       	rjmp	.+258    	; 0x2056 <HID_Device_USBTask+0x14e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f54:	81 81       	ldd	r24, Z+1	; 0x01
    1f56:	8f 70       	andi	r24, 0x0F	; 15
    1f58:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f5c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1f60:	85 ff       	sbrs	r24, 5
    1f62:	79 c0       	rjmp	.+242    	; 0x2056 <HID_Device_USBTask+0x14e>
    1f64:	8d b6       	in	r8, 0x3d	; 61
    1f66:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1f68:	40 85       	ldd	r20, Z+8	; 0x08
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	8d b7       	in	r24, 0x3d	; 61
    1f6e:	9e b7       	in	r25, 0x3e	; 62
    1f70:	84 1b       	sub	r24, r20
    1f72:	95 0b       	sbc	r25, r21
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	9e bf       	out	0x3e, r25	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	8d bf       	out	0x3d, r24	; 61
    1f7e:	ed b7       	in	r30, 0x3d	; 61
    1f80:	fe b7       	in	r31, 0x3e	; 62
    1f82:	31 96       	adiw	r30, 0x01	; 1
    1f84:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1f86:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1f88:	1a 82       	std	Y+2, r1	; 0x02
    1f8a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	cf 01       	movw	r24, r30
    1f92:	54 d2       	rcall	.+1192   	; 0x243c <memset>
    1f94:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1f96:	0f 5f       	subi	r16, 0xFF	; 255
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	96 01       	movw	r18, r12
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	be 01       	movw	r22, r28
    1fa0:	6d 5f       	subi	r22, 0xFD	; 253
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	c7 01       	movw	r24, r14
    1fa6:	0e 94 2f 02 	call	0x45e	; 0x45e <CALLBACK_HID_Device_CreateHIDReport>
    1faa:	68 2e       	mov	r6, r24
    1fac:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1fae:	84 85       	ldd	r24, Z+12	; 0x0c
    1fb0:	95 85       	ldd	r25, Z+13	; 0x0d
    1fb2:	89 2b       	or	r24, r25
    1fb4:	41 f0       	breq	.+16     	; 0x1fc6 <HID_Device_USBTask+0xbe>
    1fb6:	21 e0       	ldi	r18, 0x01	; 1
    1fb8:	86 85       	ldd	r24, Z+14	; 0x0e
    1fba:	97 85       	ldd	r25, Z+15	; 0x0f
    1fbc:	89 2b       	or	r24, r25
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <HID_Device_USBTask+0xba>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	72 2e       	mov	r7, r18
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <HID_Device_USBTask+0xc0>
    1fc6:	71 2c       	mov	r7, r1
    1fc8:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1fca:	06 81       	ldd	r16, Z+6	; 0x06
    1fcc:	17 81       	ldd	r17, Z+7	; 0x07
    1fce:	01 15       	cp	r16, r1
    1fd0:	11 05       	cpc	r17, r1
    1fd2:	89 f0       	breq	.+34     	; 0x1ff6 <HID_Device_USBTask+0xee>
    1fd4:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1fd6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fd8:	b8 01       	movw	r22, r16
    1fda:	c6 01       	movw	r24, r12
    1fdc:	19 d2       	rcall	.+1074   	; 0x2410 <memcmp>
    1fde:	55 24       	eor	r5, r5
    1fe0:	53 94       	inc	r5
    1fe2:	89 2b       	or	r24, r25
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <HID_Device_USBTask+0xe0>
    1fe6:	51 2c       	mov	r5, r1
    1fe8:	f7 01       	movw	r30, r14
    1fea:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	b6 01       	movw	r22, r12
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	1b d2       	rcall	.+1078   	; 0x242a <memcpy>
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <HID_Device_USBTask+0xf0>
    1ff6:	51 2c       	mov	r5, r1
    1ff8:	29 81       	ldd	r18, Y+1	; 0x01
    1ffa:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1ffc:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1ffe:	f9 f0       	breq	.+62     	; 0x203e <HID_Device_USBTask+0x136>
    2000:	61 10       	cpse	r6, r1
    2002:	04 c0       	rjmp	.+8      	; 0x200c <HID_Device_USBTask+0x104>
    2004:	51 10       	cpse	r5, r1
    2006:	02 c0       	rjmp	.+4      	; 0x200c <HID_Device_USBTask+0x104>
    2008:	70 fe       	sbrs	r7, 0
    200a:	19 c0       	rjmp	.+50     	; 0x203e <HID_Device_USBTask+0x136>
    200c:	f7 01       	movw	r30, r14
    200e:	84 85       	ldd	r24, Z+12	; 0x0c
    2010:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2012:	97 87       	std	Z+15, r25	; 0x0f
    2014:	86 87       	std	Z+14, r24	; 0x0e
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	81 11       	cpse	r24, r1
    2022:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2026:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2028:	7a 81       	ldd	r23, Y+2	; 0x02
    202a:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	c6 01       	movw	r24, r12
    2030:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Endpoint_Write_Stream_LE>
    2034:	80 91 e8 00 	lds	r24, 0x00E8
    2038:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    203a:	80 93 e8 00 	sts	0x00E8, r24
    203e:	80 91 e4 00 	lds	r24, 0x00E4
    2042:	90 91 e5 00 	lds	r25, 0x00E5
    2046:	f7 01       	movw	r30, r14
    2048:	93 87       	std	Z+11, r25	; 0x0b
    204a:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	9e be       	out	0x3e, r9	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	8d be       	out	0x3d, r8	; 61
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	be be       	out	0x3e, r11	; 62
	}
}
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	ad be       	out	0x3d, r10	; 61
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	bf 90       	pop	r11
    2078:	af 90       	pop	r10
    207a:	9f 90       	pop	r9
    207c:	8f 90       	pop	r8
    207e:	7f 90       	pop	r7
    2080:	6f 90       	pop	r6
    2082:	5f 90       	pop	r5
    2084:	08 95       	ret

00002086 <DCOMP_HID_Host_NextHIDInterface>:
    2086:	fc 01       	movw	r30, r24
    2088:	21 81       	ldd	r18, Z+1	; 0x01
    208a:	24 30       	cpi	r18, 0x04	; 4

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    208c:	29 f4       	brne	.+10     	; 0x2098 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    208e:	85 81       	ldd	r24, Z+5	; 0x05
    2090:	83 30       	cpi	r24, 0x03	; 3
    2092:	11 f4       	brne	.+4      	; 0x2098 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    2098:	82 e0       	ldi	r24, 0x02	; 2
}
    209a:	08 95       	ret

0000209c <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    209c:	fc 01       	movw	r30, r24
    209e:	81 81       	ldd	r24, Z+1	; 0x01
    20a0:	81 32       	cpi	r24, 0x21	; 33
    20a2:	21 f0       	breq	.+8      	; 0x20ac <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	21 f4       	brne	.+8      	; 0x20b0 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    20b0:	82 e0       	ldi	r24, 0x02	; 2
}
    20b2:	08 95       	ret

000020b4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    20b4:	fc 01       	movw	r30, r24
    20b6:	21 81       	ldd	r18, Z+1	; 0x01
    20b8:	25 30       	cpi	r18, 0x05	; 5
    20ba:	39 f4       	brne	.+14     	; 0x20ca <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	0e 94 23 08 	call	0x1046	; 0x1046 <Pipe_IsEndpointBound>
    20c2:	88 23       	and	r24, r24
    20c4:	31 f0       	breq	.+12     	; 0x20d2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    20ca:	24 30       	cpi	r18, 0x04	; 4
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		return DESCRIPTOR_SEARCH_Fail;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    20d2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    20d4:	08 95       	ret

000020d6 <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    20d6:	6f 92       	push	r6
    20d8:	7f 92       	push	r7
    20da:	8f 92       	push	r8
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <HID_Host_ConfigurePipes+0x1e>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <HID_Host_ConfigurePipes+0x20>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	8c 01       	movw	r16, r24
    20fc:	7a 83       	std	Y+2, r23	; 0x02
    20fe:	69 83       	std	Y+1, r22	; 0x01
    2100:	5c 83       	std	Y+4, r21	; 0x04
    2102:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2104:	fc 01       	movw	r30, r24
    2106:	3f 96       	adiw	r30, 0x0f	; 15
    2108:	88 e0       	ldi	r24, 0x08	; 8
    210a:	df 01       	movw	r26, r30
    210c:	1d 92       	st	X+, r1
    210e:	8a 95       	dec	r24
    2110:	e9 f7       	brne	.-6      	; 0x210c <__stack+0xd>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    2112:	eb 81       	ldd	r30, Y+3	; 0x03
    2114:	fc 81       	ldd	r31, Y+4	; 0x04
    2116:	81 81       	ldd	r24, Z+1	; 0x01
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	09 f0       	breq	.+2      	; 0x211e <__stack+0x1f>
    211c:	9f c0       	rjmp	.+318    	; 0x225c <__stack+0x15d>
    211e:	81 2c       	mov	r8, r1
    2120:	91 2c       	mov	r9, r1
    2122:	c1 2c       	mov	r12, r1
    2124:	d1 2c       	mov	r13, r1
    2126:	61 2c       	mov	r6, r1
    2128:	71 2c       	mov	r7, r1
    212a:	a1 2c       	mov	r10, r1
    212c:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    212e:	c1 14       	cp	r12, r1
    2130:	d1 04       	cpc	r13, r1
    2132:	21 f4       	brne	.+8      	; 0x213c <__stack+0x3d>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    2134:	a1 14       	cp	r10, r1
    2136:	b1 04       	cpc	r11, r1
    2138:	b9 f0       	breq	.+46     	; 0x2168 <__stack+0x69>
    213a:	41 c0       	rjmp	.+130    	; 0x21be <__stack+0xbf>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    213c:	4a e5       	ldi	r20, 0x5A	; 90
    213e:	50 e1       	ldi	r21, 0x10	; 16
    2140:	be 01       	movw	r22, r28
    2142:	6d 5f       	subi	r22, 0xFD	; 253
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	ce 01       	movw	r24, r28
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	8f da       	rcall	.-2786   	; 0x166a <USB_GetNextDescriptorComp>
    214c:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    214e:	f2 cf       	rjmp	.-28     	; 0x2134 <__stack+0x35>
    2150:	27 c0       	rjmp	.+78     	; 0x21a0 <__stack+0xa1>
    2152:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2154:	dc 80       	ldd	r13, Y+4	; 0x04
    2156:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    2158:	84 85       	ldd	r24, Z+12	; 0x0c
    215a:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    215c:	89 f0       	breq	.+34     	; 0x2180 <__stack+0x81>
    215e:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    2160:	17 96       	adiw	r26, 0x07	; 7
    2162:	9c 91       	ld	r25, X
    2164:	98 17       	cp	r25, r24
    2166:	61 f0       	breq	.+24     	; 0x2180 <__stack+0x81>
    2168:	43 e4       	ldi	r20, 0x43	; 67
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    216a:	50 e1       	ldi	r21, 0x10	; 16
    216c:	be 01       	movw	r22, r28
    216e:	6d 5f       	subi	r22, 0xFD	; 253
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	79 da       	rcall	.-2830   	; 0x166a <USB_GetNextDescriptorComp>
    2178:	88 23       	and	r24, r24
    217a:	59 f3       	breq	.-42     	; 0x2152 <__stack+0x53>
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	6f c0       	rjmp	.+222    	; 0x225e <__stack+0x15f>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    2180:	4e e4       	ldi	r20, 0x4E	; 78
    2182:	50 e1       	ldi	r21, 0x10	; 16

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2184:	be 01       	movw	r22, r28
    2186:	6d 5f       	subi	r22, 0xFD	; 253
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	6d da       	rcall	.-2854   	; 0x166a <USB_GetNextDescriptorComp>
    2190:	81 11       	cpse	r24, r1
    2192:	f4 cf       	rjmp	.-24     	; 0x217c <__stack+0x7d>
    2194:	8b 80       	ldd	r8, Y+3	; 0x03
    2196:	9c 80       	ldd	r9, Y+4	; 0x04
    2198:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    219a:	f1 2c       	mov	r15, r1
    219c:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    219e:	c7 cf       	rjmp	.-114    	; 0x212e <__stack+0x2f>
    21a0:	eb 80       	ldd	r14, Y+3	; 0x03
    21a2:	fc 80       	ldd	r15, Y+4	; 0x04
    21a4:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <__stack+0xb1>
    21ac:	57 01       	movw	r10, r14
    21ae:	73 01       	movw	r14, r6
    21b0:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    21b2:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    21b4:	99 f3       	breq	.-26     	; 0x219c <__stack+0x9d>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    21b6:	e1 14       	cp	r14, r1
    21b8:	f1 04       	cpc	r15, r1
    21ba:	81 f3       	breq	.-32     	; 0x219c <__stack+0x9d>
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <__stack+0xc1>
    21be:	73 01       	movw	r14, r6
    21c0:	d5 01       	movw	r26, r10
    21c2:	14 96       	adiw	r26, 0x04	; 4
    21c4:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    21c6:	9c 91       	ld	r25, X
    21c8:	15 97       	sbiw	r26, 0x05	; 5
    21ca:	f8 01       	movw	r30, r16
    21cc:	92 83       	std	Z+2, r25	; 0x02
    21ce:	81 83       	std	Z+1, r24	; 0x01
    21d0:	12 96       	adiw	r26, 0x02	; 2
    21d2:	8c 91       	ld	r24, X
    21d4:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	b8 2e       	mov	r11, r24
    21da:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    21dc:	61 e0       	ldi	r22, 0x01	; 1
    21de:	c8 01       	movw	r24, r16
    21e0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    21e4:	81 11       	cpse	r24, r1
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <__stack+0xed>
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	39 c0       	rjmp	.+114    	; 0x225e <__stack+0x15f>
    21ec:	e1 14       	cp	r14, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    21ee:	f1 04       	cpc	r15, r1
    21f0:	f9 f4       	brne	.+62     	; 0x2230 <__stack+0x131>

	if (DataOUTEndpoint)
    21f2:	d6 01       	movw	r26, r12
    21f4:	12 96       	adiw	r26, 0x02	; 2
    21f6:	8c 91       	ld	r24, X

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 8b       	std	Z+16, r24	; 0x10
    21fc:	d4 01       	movw	r26, r8
    21fe:	17 96       	adiw	r26, 0x07	; 7
    2200:	8d 91       	ld	r24, X+
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    2202:	9c 91       	ld	r25, X
    2204:	18 97       	sbiw	r26, 0x08	; 8
    2206:	95 8b       	std	Z+21, r25	; 0x15
    2208:	84 8b       	std	Z+20, r24	; 0x14
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	f6 01       	movw	r30, r12
    220e:	96 81       	ldd	r25, Z+6	; 0x06
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    2210:	91 11       	cpse	r25, r1
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <__stack+0x117>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	d8 01       	movw	r26, r16
    2218:	51 96       	adiw	r26, 0x11	; 17
    221a:	8c 93       	st	X, r24
    221c:	51 97       	sbiw	r26, 0x11	; 17
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	56 96       	adiw	r26, 0x16	; 22
    2222:	8c 93       	st	X, r24
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    2224:	56 97       	sbiw	r26, 0x16	; 22
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	1f 96       	adiw	r26, 0x0f	; 15
    222a:	8c 93       	st	X, r24
	HIDInterfaceInfo->State.IsActive             = true;
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	17 c0       	rjmp	.+46     	; 0x225e <__stack+0x15f>
    2230:	f7 01       	movw	r30, r14

	return HID_ENUMERROR_NoError;
    2232:	84 81       	ldd	r24, Z+4	; 0x04
    2234:	95 81       	ldd	r25, Z+5	; 0x05
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    2236:	d8 01       	movw	r26, r16
    2238:	18 96       	adiw	r26, 0x08	; 8
    223a:	9c 93       	st	X, r25
    223c:	8e 93       	st	-X, r24
    223e:	17 97       	sbiw	r26, 0x07	; 7
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	19 96       	adiw	r26, 0x09	; 9
    2244:	8c 93       	st	X, r24
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    2246:	19 97       	sbiw	r26, 0x09	; 9
    2248:	1a 96       	adiw	r26, 0x0a	; 10
    224a:	bc 92       	st	X, r11
    224c:	61 e0       	ldi	r22, 0x01	; 1
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    224e:	c8 01       	movw	r24, r16
    2250:	06 96       	adiw	r24, 0x06	; 6

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    2252:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <Pipe_ConfigurePipeTable>
    2256:	88 23       	and	r24, r24
    2258:	39 f2       	breq	.-114    	; 0x21e8 <__stack+0xe9>
    225a:	cb cf       	rjmp	.-106    	; 0x21f2 <__stack+0xf3>
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    2262:	0f 90       	pop	r0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    2264:	0f 90       	pop	r0
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	7f 90       	pop	r7
    2280:	6f 90       	pop	r6
    2282:	08 95       	ret

00002284 <HID_Host_ReceiveReport>:
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	fc 01       	movw	r30, r24
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    228a:	eb 01       	movw	r28, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    228c:	80 91 f9 01 	lds	r24, 0x01F9
    2290:	8b 30       	cpi	r24, 0x0B	; 11
    2292:	d1 f5       	brne	.+116    	; 0x2308 <HID_Host_ReceiveReport+0x84>
    2294:	87 85       	ldd	r24, Z+15	; 0x0f
    2296:	88 23       	and	r24, r24
    2298:	b9 f1       	breq	.+110    	; 0x2308 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    229a:	80 81       	ld	r24, Z
    229c:	8f 70       	andi	r24, 0x0F	; 15
    229e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    22a2:	80 91 a9 00 	lds	r24, 0x00A9
    22a6:	8f 7b       	andi	r24, 0xBF	; 191
    22a8:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    22ac:	83 89       	ldd	r24, Z+19	; 0x13
    22ae:	81 11       	cpse	r24, r1
    22b0:	13 c0       	rjmp	.+38     	; 0x22d8 <HID_Host_ReceiveReport+0x54>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    22b2:	a5 85       	ldd	r26, Z+13	; 0x0d
    22b4:	b6 85       	ldd	r27, Z+14	; 0x0e
    22b6:	a8 52       	subi	r26, 0x28	; 40
    22b8:	bc 4f       	sbci	r27, 0xFC	; 252
    22ba:	8c 91       	ld	r24, X
    22bc:	88 23       	and	r24, r24
    22be:	29 f0       	breq	.+10     	; 0x22ca <HID_Host_ReceiveReport+0x46>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    22c0:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    22c4:	68 83       	st	Y, r22
    22c6:	21 96       	adiw	r28, 0x01	; 1
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <HID_Host_ReceiveReport+0x48>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    22ca:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	85 85       	ldd	r24, Z+13	; 0x0d
    22d0:	96 85       	ldd	r25, Z+14	; 0x0e
    22d2:	0e 94 40 03 	call	0x680	; 0x680 <USB_GetHIDReportSize>
    22d6:	04 c0       	rjmp	.+8      	; 0x22e0 <HID_Host_ReceiveReport+0x5c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    22d8:	80 91 f6 00 	lds	r24, 0x00F6
    22dc:	90 91 f7 00 	lds	r25, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	bc 01       	movw	r22, r24
    22e6:	ce 01       	movw	r24, r28
    22e8:	0e 94 3b 07 	call	0xe76	; 0xe76 <Pipe_Read_Stream_LE>
    22ec:	81 11       	cpse	r24, r1
    22ee:	0d c0       	rjmp	.+26     	; 0x230a <HID_Host_ReceiveReport+0x86>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    22f0:	80 91 a6 00 	lds	r24, 0x00A6
    22f4:	8e 77       	andi	r24, 0x7E	; 126
    22f6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    22fa:	80 91 a9 00 	lds	r24, 0x00A9
    22fe:	80 64       	ori	r24, 0x40	; 64
    2300:	80 93 a9 00 	sts	0x00A9, r24
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	01 c0       	rjmp	.+2      	; 0x230a <HID_Host_ReceiveReport+0x86>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    2308:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2310:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    2312:	80 91 f9 01 	lds	r24, 0x01F9
    2316:	8b 30       	cpi	r24, 0x0B	; 11
    2318:	a9 f4       	brne	.+42     	; 0x2344 <HID_Host_IsReportReceived+0x34>
    231a:	87 85       	ldd	r24, Z+15	; 0x0f
    231c:	88 23       	and	r24, r24
    231e:	99 f0       	breq	.+38     	; 0x2346 <HID_Host_IsReportReceived+0x36>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    2320:	80 81       	ld	r24, Z
    2322:	8f 70       	andi	r24, 0x0F	; 15
    2324:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2328:	80 91 a9 00 	lds	r24, 0x00A9
    232c:	8f 7b       	andi	r24, 0xBF	; 191
    232e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    2332:	80 91 a6 00 	lds	r24, 0x00A6
    2336:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2338:	90 91 a9 00 	lds	r25, 0x00A9
    233c:	90 64       	ori	r25, 0x40	; 64
    233e:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    2342:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    2344:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    2346:	08 95       	ret

00002348 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    234e:	89 89       	ldd	r24, Y+17	; 0x11
    2350:	88 23       	and	r24, r24
    2352:	09 f1       	breq	.+66     	; 0x2396 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    2354:	88 89       	ldd	r24, Y+16	; 0x10
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	21 e2       	ldi	r18, 0x21	; 33
    235a:	20 93 f1 01 	sts	0x01F1, r18
    235e:	2b e0       	ldi	r18, 0x0B	; 11
    2360:	20 93 f2 01 	sts	0x01F2, r18
    2364:	10 92 f4 01 	sts	0x01F4, r1
    2368:	10 92 f3 01 	sts	0x01F3, r1
    236c:	90 93 f6 01 	sts	0x01F6, r25
    2370:	80 93 f5 01 	sts	0x01F5, r24
    2374:	10 92 f8 01 	sts	0x01F8, r1
    2378:	10 92 f7 01 	sts	0x01F7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    237c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	22 db       	rcall	.-2492   	; 0x19ca <USB_Host_SendControlRequest>
    2386:	81 11       	cpse	r24, r1
    2388:	07 c0       	rjmp	.+14     	; 0x2398 <HID_Host_SetBootProtocol+0x50>
    238a:	88 e0       	ldi	r24, 0x08	; 8
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    238c:	8e 8b       	std	Y+22, r24	; 0x16
    238e:	81 e0       	ldi	r24, 0x01	; 1
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	80 e0       	ldi	r24, 0x00	; 0

	return HOST_SENDCONTROL_Successful;
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <HID_Host_SetBootProtocol+0x50>
    2396:	80 e8       	ldi	r24, 0x80	; 128
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    2398:	df 91       	pop	r29

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <Serial_putchar>:
    239e:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    23a2:	95 ff       	sbrs	r25, 5
    23a4:	fc cf       	rjmp	.-8      	; 0x239e <Serial_putchar>
				UDR1 = DataByte;
    23a6:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	08 95       	ret

000023b0 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    23b0:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    23b4:	87 ff       	sbrs	r24, 7
    23b6:	08 c0       	rjmp	.+16     	; 0x23c8 <Serial_getchar+0x18>
    23b8:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    23bc:	87 ff       	sbrs	r24, 7
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    23c0:	80 91 ce 00 	lds	r24, 0x00CE
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	08 95       	ret
	  return _FDEV_EOF;
    23c8:	8e ef       	ldi	r24, 0xFE	; 254
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    23d2:	08 95       	ret

000023d4 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    23d4:	fc 01       	movw	r30, r24
	if (!(Stream))
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	59 f4       	brne	.+22     	; 0x23f0 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    23da:	8a ef       	ldi	r24, 0xFA	; 250
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	90 93 09 02 	sts	0x0209, r25
    23e2:	80 93 08 02 	sts	0x0208, r24
		stdout = Stream;
    23e6:	90 93 0b 02 	sts	0x020B, r25
    23ea:	80 93 0a 02 	sts	0x020A, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    23ee:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    23f0:	8e e0       	ldi	r24, 0x0E	; 14
    23f2:	df 01       	movw	r26, r30
    23f4:	1d 92       	st	X+, r1
    23f6:	8a 95       	dec	r24
    23f8:	e9 f7       	brne	.-6      	; 0x23f4 <Serial_CreateStream+0x20>
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	83 83       	std	Z+3, r24	; 0x03
    23fe:	8f ec       	ldi	r24, 0xCF	; 207
    2400:	91 e1       	ldi	r25, 0x11	; 17
    2402:	91 87       	std	Z+9, r25	; 0x09
    2404:	80 87       	std	Z+8, r24	; 0x08
    2406:	88 ed       	ldi	r24, 0xD8	; 216
    2408:	91 e1       	ldi	r25, 0x11	; 17
    240a:	93 87       	std	Z+11, r25	; 0x0b
    240c:	82 87       	std	Z+10, r24	; 0x0a
    240e:	08 95       	ret

00002410 <memcmp>:
    2410:	fb 01       	movw	r30, r22
    2412:	dc 01       	movw	r26, r24
    2414:	04 c0       	rjmp	.+8      	; 0x241e <memcmp+0xe>
    2416:	8d 91       	ld	r24, X+
    2418:	01 90       	ld	r0, Z+
    241a:	80 19       	sub	r24, r0
    241c:	21 f4       	brne	.+8      	; 0x2426 <memcmp+0x16>
    241e:	41 50       	subi	r20, 0x01	; 1
    2420:	50 40       	sbci	r21, 0x00	; 0
    2422:	c8 f7       	brcc	.-14     	; 0x2416 <memcmp+0x6>
    2424:	88 1b       	sub	r24, r24
    2426:	99 0b       	sbc	r25, r25
    2428:	08 95       	ret

0000242a <memcpy>:
    242a:	fb 01       	movw	r30, r22
    242c:	dc 01       	movw	r26, r24
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <memcpy+0xa>
    2430:	01 90       	ld	r0, Z+
    2432:	0d 92       	st	X+, r0
    2434:	41 50       	subi	r20, 0x01	; 1
    2436:	50 40       	sbci	r21, 0x00	; 0
    2438:	d8 f7       	brcc	.-10     	; 0x2430 <memcpy+0x6>
    243a:	08 95       	ret

0000243c <memset>:
    243c:	dc 01       	movw	r26, r24
    243e:	01 c0       	rjmp	.+2      	; 0x2442 <memset+0x6>
    2440:	6d 93       	st	X+, r22
    2442:	41 50       	subi	r20, 0x01	; 1
    2444:	50 40       	sbci	r21, 0x00	; 0
    2446:	e0 f7       	brcc	.-8      	; 0x2440 <memset+0x4>
    2448:	08 95       	ret

0000244a <printf_P>:
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	fe 01       	movw	r30, r28
    2458:	37 96       	adiw	r30, 0x07	; 7
    245a:	61 91       	ld	r22, Z+
    245c:	71 91       	ld	r23, Z+
    245e:	0a e0       	ldi	r16, 0x0A	; 10
    2460:	12 e0       	ldi	r17, 0x02	; 2
    2462:	d8 01       	movw	r26, r16
    2464:	8d 91       	ld	r24, X+
    2466:	9c 91       	ld	r25, X
    2468:	dc 01       	movw	r26, r24
    246a:	13 96       	adiw	r26, 0x03	; 3
    246c:	2c 91       	ld	r18, X
    246e:	13 97       	sbiw	r26, 0x03	; 3
    2470:	28 60       	ori	r18, 0x08	; 8
    2472:	13 96       	adiw	r26, 0x03	; 3
    2474:	2c 93       	st	X, r18
    2476:	af 01       	movw	r20, r30
    2478:	67 d0       	rcall	.+206    	; 0x2548 <vfprintf>
    247a:	d8 01       	movw	r26, r16
    247c:	ed 91       	ld	r30, X+
    247e:	fc 91       	ld	r31, X
    2480:	23 81       	ldd	r18, Z+3	; 0x03
    2482:	27 7f       	andi	r18, 0xF7	; 247
    2484:	23 83       	std	Z+3, r18	; 0x03
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	08 95       	ret

00002490 <puts>:
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	e0 91 0a 02 	lds	r30, 0x020A
    249c:	f0 91 0b 02 	lds	r31, 0x020B
    24a0:	23 81       	ldd	r18, Z+3	; 0x03
    24a2:	21 ff       	sbrs	r18, 1
    24a4:	1b c0       	rjmp	.+54     	; 0x24dc <puts+0x4c>
    24a6:	ec 01       	movw	r28, r24
    24a8:	00 e0       	ldi	r16, 0x00	; 0
    24aa:	10 e0       	ldi	r17, 0x00	; 0
    24ac:	89 91       	ld	r24, Y+
    24ae:	60 91 0a 02 	lds	r22, 0x020A
    24b2:	70 91 0b 02 	lds	r23, 0x020B
    24b6:	db 01       	movw	r26, r22
    24b8:	18 96       	adiw	r26, 0x08	; 8
    24ba:	ed 91       	ld	r30, X+
    24bc:	fc 91       	ld	r31, X
    24be:	19 97       	sbiw	r26, 0x09	; 9
    24c0:	88 23       	and	r24, r24
    24c2:	31 f0       	breq	.+12     	; 0x24d0 <puts+0x40>
    24c4:	09 95       	icall
    24c6:	89 2b       	or	r24, r25
    24c8:	89 f3       	breq	.-30     	; 0x24ac <puts+0x1c>
    24ca:	0f ef       	ldi	r16, 0xFF	; 255
    24cc:	1f ef       	ldi	r17, 0xFF	; 255
    24ce:	ee cf       	rjmp	.-36     	; 0x24ac <puts+0x1c>
    24d0:	8a e0       	ldi	r24, 0x0A	; 10
    24d2:	09 95       	icall
    24d4:	89 2b       	or	r24, r25
    24d6:	11 f4       	brne	.+4      	; 0x24dc <puts+0x4c>
    24d8:	c8 01       	movw	r24, r16
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <puts+0x50>
    24dc:	8f ef       	ldi	r24, 0xFF	; 255
    24de:	9f ef       	ldi	r25, 0xFF	; 255
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	08 95       	ret

000024ea <puts_P>:
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	ec 01       	movw	r28, r24
    24f4:	e0 91 0a 02 	lds	r30, 0x020A
    24f8:	f0 91 0b 02 	lds	r31, 0x020B
    24fc:	83 81       	ldd	r24, Z+3	; 0x03
    24fe:	81 ff       	sbrs	r24, 1
    2500:	1c c0       	rjmp	.+56     	; 0x253a <puts_P+0x50>
    2502:	00 e0       	ldi	r16, 0x00	; 0
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	fe 01       	movw	r30, r28
    2508:	84 91       	lpm	r24, Z
    250a:	60 91 0a 02 	lds	r22, 0x020A
    250e:	70 91 0b 02 	lds	r23, 0x020B
    2512:	db 01       	movw	r26, r22
    2514:	18 96       	adiw	r26, 0x08	; 8
    2516:	ed 91       	ld	r30, X+
    2518:	fc 91       	ld	r31, X
    251a:	19 97       	sbiw	r26, 0x09	; 9
    251c:	88 23       	and	r24, r24
    251e:	39 f0       	breq	.+14     	; 0x252e <puts_P+0x44>
    2520:	09 95       	icall
    2522:	89 2b       	or	r24, r25
    2524:	11 f0       	breq	.+4      	; 0x252a <puts_P+0x40>
    2526:	0f ef       	ldi	r16, 0xFF	; 255
    2528:	1f ef       	ldi	r17, 0xFF	; 255
    252a:	21 96       	adiw	r28, 0x01	; 1
    252c:	ec cf       	rjmp	.-40     	; 0x2506 <puts_P+0x1c>
    252e:	8a e0       	ldi	r24, 0x0A	; 10
    2530:	09 95       	icall
    2532:	89 2b       	or	r24, r25
    2534:	11 f4       	brne	.+4      	; 0x253a <puts_P+0x50>
    2536:	c8 01       	movw	r24, r16
    2538:	02 c0       	rjmp	.+4      	; 0x253e <puts_P+0x54>
    253a:	8f ef       	ldi	r24, 0xFF	; 255
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	08 95       	ret

00002548 <vfprintf>:
    2548:	2f 92       	push	r2
    254a:	3f 92       	push	r3
    254c:	4f 92       	push	r4
    254e:	5f 92       	push	r5
    2550:	6f 92       	push	r6
    2552:	7f 92       	push	r7
    2554:	8f 92       	push	r8
    2556:	9f 92       	push	r9
    2558:	af 92       	push	r10
    255a:	bf 92       	push	r11
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	2c 97       	sbiw	r28, 0x0c	; 12
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	7c 01       	movw	r14, r24
    257e:	6b 01       	movw	r12, r22
    2580:	8a 01       	movw	r16, r20
    2582:	fc 01       	movw	r30, r24
    2584:	17 82       	std	Z+7, r1	; 0x07
    2586:	16 82       	std	Z+6, r1	; 0x06
    2588:	83 81       	ldd	r24, Z+3	; 0x03
    258a:	81 ff       	sbrs	r24, 1
    258c:	b0 c1       	rjmp	.+864    	; 0x28ee <vfprintf+0x3a6>
    258e:	ce 01       	movw	r24, r28
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	4c 01       	movw	r8, r24
    2594:	f7 01       	movw	r30, r14
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	f6 01       	movw	r30, r12
    259a:	93 fd       	sbrc	r25, 3
    259c:	85 91       	lpm	r24, Z+
    259e:	93 ff       	sbrs	r25, 3
    25a0:	81 91       	ld	r24, Z+
    25a2:	6f 01       	movw	r12, r30
    25a4:	88 23       	and	r24, r24
    25a6:	09 f4       	brne	.+2      	; 0x25aa <vfprintf+0x62>
    25a8:	9e c1       	rjmp	.+828    	; 0x28e6 <vfprintf+0x39e>
    25aa:	85 32       	cpi	r24, 0x25	; 37
    25ac:	39 f4       	brne	.+14     	; 0x25bc <vfprintf+0x74>
    25ae:	93 fd       	sbrc	r25, 3
    25b0:	85 91       	lpm	r24, Z+
    25b2:	93 ff       	sbrs	r25, 3
    25b4:	81 91       	ld	r24, Z+
    25b6:	6f 01       	movw	r12, r30
    25b8:	85 32       	cpi	r24, 0x25	; 37
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <vfprintf+0x7c>
    25bc:	b7 01       	movw	r22, r14
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	c7 d1       	rcall	.+910    	; 0x2950 <fputc>
    25c2:	e8 cf       	rjmp	.-48     	; 0x2594 <vfprintf+0x4c>
    25c4:	51 2c       	mov	r5, r1
    25c6:	31 2c       	mov	r3, r1
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	20 32       	cpi	r18, 0x20	; 32
    25cc:	a0 f4       	brcc	.+40     	; 0x25f6 <vfprintf+0xae>
    25ce:	8b 32       	cpi	r24, 0x2B	; 43
    25d0:	69 f0       	breq	.+26     	; 0x25ec <vfprintf+0xa4>
    25d2:	30 f4       	brcc	.+12     	; 0x25e0 <vfprintf+0x98>
    25d4:	80 32       	cpi	r24, 0x20	; 32
    25d6:	59 f0       	breq	.+22     	; 0x25ee <vfprintf+0xa6>
    25d8:	83 32       	cpi	r24, 0x23	; 35
    25da:	69 f4       	brne	.+26     	; 0x25f6 <vfprintf+0xae>
    25dc:	20 61       	ori	r18, 0x10	; 16
    25de:	2c c0       	rjmp	.+88     	; 0x2638 <vfprintf+0xf0>
    25e0:	8d 32       	cpi	r24, 0x2D	; 45
    25e2:	39 f0       	breq	.+14     	; 0x25f2 <vfprintf+0xaa>
    25e4:	80 33       	cpi	r24, 0x30	; 48
    25e6:	39 f4       	brne	.+14     	; 0x25f6 <vfprintf+0xae>
    25e8:	21 60       	ori	r18, 0x01	; 1
    25ea:	26 c0       	rjmp	.+76     	; 0x2638 <vfprintf+0xf0>
    25ec:	22 60       	ori	r18, 0x02	; 2
    25ee:	24 60       	ori	r18, 0x04	; 4
    25f0:	23 c0       	rjmp	.+70     	; 0x2638 <vfprintf+0xf0>
    25f2:	28 60       	ori	r18, 0x08	; 8
    25f4:	21 c0       	rjmp	.+66     	; 0x2638 <vfprintf+0xf0>
    25f6:	27 fd       	sbrc	r18, 7
    25f8:	27 c0       	rjmp	.+78     	; 0x2648 <vfprintf+0x100>
    25fa:	30 ed       	ldi	r19, 0xD0	; 208
    25fc:	38 0f       	add	r19, r24
    25fe:	3a 30       	cpi	r19, 0x0A	; 10
    2600:	78 f4       	brcc	.+30     	; 0x2620 <vfprintf+0xd8>
    2602:	26 ff       	sbrs	r18, 6
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <vfprintf+0xca>
    2606:	fa e0       	ldi	r31, 0x0A	; 10
    2608:	5f 9e       	mul	r5, r31
    260a:	30 0d       	add	r19, r0
    260c:	11 24       	eor	r1, r1
    260e:	53 2e       	mov	r5, r19
    2610:	13 c0       	rjmp	.+38     	; 0x2638 <vfprintf+0xf0>
    2612:	8a e0       	ldi	r24, 0x0A	; 10
    2614:	38 9e       	mul	r3, r24
    2616:	30 0d       	add	r19, r0
    2618:	11 24       	eor	r1, r1
    261a:	33 2e       	mov	r3, r19
    261c:	20 62       	ori	r18, 0x20	; 32
    261e:	0c c0       	rjmp	.+24     	; 0x2638 <vfprintf+0xf0>
    2620:	8e 32       	cpi	r24, 0x2E	; 46
    2622:	21 f4       	brne	.+8      	; 0x262c <vfprintf+0xe4>
    2624:	26 fd       	sbrc	r18, 6
    2626:	5f c1       	rjmp	.+702    	; 0x28e6 <vfprintf+0x39e>
    2628:	20 64       	ori	r18, 0x40	; 64
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <vfprintf+0xf0>
    262c:	8c 36       	cpi	r24, 0x6C	; 108
    262e:	11 f4       	brne	.+4      	; 0x2634 <vfprintf+0xec>
    2630:	20 68       	ori	r18, 0x80	; 128
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <vfprintf+0xf0>
    2634:	88 36       	cpi	r24, 0x68	; 104
    2636:	41 f4       	brne	.+16     	; 0x2648 <vfprintf+0x100>
    2638:	f6 01       	movw	r30, r12
    263a:	93 fd       	sbrc	r25, 3
    263c:	85 91       	lpm	r24, Z+
    263e:	93 ff       	sbrs	r25, 3
    2640:	81 91       	ld	r24, Z+
    2642:	6f 01       	movw	r12, r30
    2644:	81 11       	cpse	r24, r1
    2646:	c1 cf       	rjmp	.-126    	; 0x25ca <vfprintf+0x82>
    2648:	98 2f       	mov	r25, r24
    264a:	9f 7d       	andi	r25, 0xDF	; 223
    264c:	95 54       	subi	r25, 0x45	; 69
    264e:	93 30       	cpi	r25, 0x03	; 3
    2650:	28 f4       	brcc	.+10     	; 0x265c <vfprintf+0x114>
    2652:	0c 5f       	subi	r16, 0xFC	; 252
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	ff e3       	ldi	r31, 0x3F	; 63
    2658:	f9 83       	std	Y+1, r31	; 0x01
    265a:	0d c0       	rjmp	.+26     	; 0x2676 <vfprintf+0x12e>
    265c:	83 36       	cpi	r24, 0x63	; 99
    265e:	31 f0       	breq	.+12     	; 0x266c <vfprintf+0x124>
    2660:	83 37       	cpi	r24, 0x73	; 115
    2662:	71 f0       	breq	.+28     	; 0x2680 <vfprintf+0x138>
    2664:	83 35       	cpi	r24, 0x53	; 83
    2666:	09 f0       	breq	.+2      	; 0x266a <vfprintf+0x122>
    2668:	57 c0       	rjmp	.+174    	; 0x2718 <vfprintf+0x1d0>
    266a:	21 c0       	rjmp	.+66     	; 0x26ae <vfprintf+0x166>
    266c:	f8 01       	movw	r30, r16
    266e:	80 81       	ld	r24, Z
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	0e 5f       	subi	r16, 0xFE	; 254
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	44 24       	eor	r4, r4
    2678:	43 94       	inc	r4
    267a:	51 2c       	mov	r5, r1
    267c:	54 01       	movw	r10, r8
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <vfprintf+0x160>
    2680:	38 01       	movw	r6, r16
    2682:	f2 e0       	ldi	r31, 0x02	; 2
    2684:	6f 0e       	add	r6, r31
    2686:	71 1c       	adc	r7, r1
    2688:	f8 01       	movw	r30, r16
    268a:	a0 80       	ld	r10, Z
    268c:	b1 80       	ldd	r11, Z+1	; 0x01
    268e:	26 ff       	sbrs	r18, 6
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <vfprintf+0x150>
    2692:	65 2d       	mov	r22, r5
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	02 c0       	rjmp	.+4      	; 0x269c <vfprintf+0x154>
    2698:	6f ef       	ldi	r22, 0xFF	; 255
    269a:	7f ef       	ldi	r23, 0xFF	; 255
    269c:	c5 01       	movw	r24, r10
    269e:	2c 87       	std	Y+12, r18	; 0x0c
    26a0:	4c d1       	rcall	.+664    	; 0x293a <strnlen>
    26a2:	2c 01       	movw	r4, r24
    26a4:	83 01       	movw	r16, r6
    26a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    26a8:	2f 77       	andi	r18, 0x7F	; 127
    26aa:	22 2e       	mov	r2, r18
    26ac:	16 c0       	rjmp	.+44     	; 0x26da <vfprintf+0x192>
    26ae:	38 01       	movw	r6, r16
    26b0:	f2 e0       	ldi	r31, 0x02	; 2
    26b2:	6f 0e       	add	r6, r31
    26b4:	71 1c       	adc	r7, r1
    26b6:	f8 01       	movw	r30, r16
    26b8:	a0 80       	ld	r10, Z
    26ba:	b1 80       	ldd	r11, Z+1	; 0x01
    26bc:	26 ff       	sbrs	r18, 6
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <vfprintf+0x17e>
    26c0:	65 2d       	mov	r22, r5
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <vfprintf+0x182>
    26c6:	6f ef       	ldi	r22, 0xFF	; 255
    26c8:	7f ef       	ldi	r23, 0xFF	; 255
    26ca:	c5 01       	movw	r24, r10
    26cc:	2c 87       	std	Y+12, r18	; 0x0c
    26ce:	2a d1       	rcall	.+596    	; 0x2924 <strnlen_P>
    26d0:	2c 01       	movw	r4, r24
    26d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26d4:	20 68       	ori	r18, 0x80	; 128
    26d6:	22 2e       	mov	r2, r18
    26d8:	83 01       	movw	r16, r6
    26da:	23 fc       	sbrc	r2, 3
    26dc:	19 c0       	rjmp	.+50     	; 0x2710 <vfprintf+0x1c8>
    26de:	83 2d       	mov	r24, r3
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	48 16       	cp	r4, r24
    26e4:	59 06       	cpc	r5, r25
    26e6:	a0 f4       	brcc	.+40     	; 0x2710 <vfprintf+0x1c8>
    26e8:	b7 01       	movw	r22, r14
    26ea:	80 e2       	ldi	r24, 0x20	; 32
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	30 d1       	rcall	.+608    	; 0x2950 <fputc>
    26f0:	3a 94       	dec	r3
    26f2:	f5 cf       	rjmp	.-22     	; 0x26de <vfprintf+0x196>
    26f4:	f5 01       	movw	r30, r10
    26f6:	27 fc       	sbrc	r2, 7
    26f8:	85 91       	lpm	r24, Z+
    26fa:	27 fe       	sbrs	r2, 7
    26fc:	81 91       	ld	r24, Z+
    26fe:	5f 01       	movw	r10, r30
    2700:	b7 01       	movw	r22, r14
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	25 d1       	rcall	.+586    	; 0x2950 <fputc>
    2706:	31 10       	cpse	r3, r1
    2708:	3a 94       	dec	r3
    270a:	f1 e0       	ldi	r31, 0x01	; 1
    270c:	4f 1a       	sub	r4, r31
    270e:	51 08       	sbc	r5, r1
    2710:	41 14       	cp	r4, r1
    2712:	51 04       	cpc	r5, r1
    2714:	79 f7       	brne	.-34     	; 0x26f4 <vfprintf+0x1ac>
    2716:	de c0       	rjmp	.+444    	; 0x28d4 <vfprintf+0x38c>
    2718:	84 36       	cpi	r24, 0x64	; 100
    271a:	11 f0       	breq	.+4      	; 0x2720 <vfprintf+0x1d8>
    271c:	89 36       	cpi	r24, 0x69	; 105
    271e:	31 f5       	brne	.+76     	; 0x276c <vfprintf+0x224>
    2720:	f8 01       	movw	r30, r16
    2722:	27 ff       	sbrs	r18, 7
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <vfprintf+0x1ec>
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	0c 5f       	subi	r16, 0xFC	; 252
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	08 c0       	rjmp	.+16     	; 0x2744 <vfprintf+0x1fc>
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	88 27       	eor	r24, r24
    273a:	77 fd       	sbrc	r23, 7
    273c:	80 95       	com	r24
    273e:	98 2f       	mov	r25, r24
    2740:	0e 5f       	subi	r16, 0xFE	; 254
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	2f 76       	andi	r18, 0x6F	; 111
    2746:	b2 2e       	mov	r11, r18
    2748:	97 ff       	sbrs	r25, 7
    274a:	09 c0       	rjmp	.+18     	; 0x275e <vfprintf+0x216>
    274c:	90 95       	com	r25
    274e:	80 95       	com	r24
    2750:	70 95       	com	r23
    2752:	61 95       	neg	r22
    2754:	7f 4f       	sbci	r23, 0xFF	; 255
    2756:	8f 4f       	sbci	r24, 0xFF	; 255
    2758:	9f 4f       	sbci	r25, 0xFF	; 255
    275a:	20 68       	ori	r18, 0x80	; 128
    275c:	b2 2e       	mov	r11, r18
    275e:	2a e0       	ldi	r18, 0x0A	; 10
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	a4 01       	movw	r20, r8
    2764:	27 d1       	rcall	.+590    	; 0x29b4 <__ultoa_invert>
    2766:	a8 2e       	mov	r10, r24
    2768:	a8 18       	sub	r10, r8
    276a:	43 c0       	rjmp	.+134    	; 0x27f2 <vfprintf+0x2aa>
    276c:	85 37       	cpi	r24, 0x75	; 117
    276e:	29 f4       	brne	.+10     	; 0x277a <vfprintf+0x232>
    2770:	2f 7e       	andi	r18, 0xEF	; 239
    2772:	b2 2e       	mov	r11, r18
    2774:	2a e0       	ldi	r18, 0x0A	; 10
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	25 c0       	rjmp	.+74     	; 0x27c4 <vfprintf+0x27c>
    277a:	f2 2f       	mov	r31, r18
    277c:	f9 7f       	andi	r31, 0xF9	; 249
    277e:	bf 2e       	mov	r11, r31
    2780:	8f 36       	cpi	r24, 0x6F	; 111
    2782:	c1 f0       	breq	.+48     	; 0x27b4 <vfprintf+0x26c>
    2784:	18 f4       	brcc	.+6      	; 0x278c <vfprintf+0x244>
    2786:	88 35       	cpi	r24, 0x58	; 88
    2788:	79 f0       	breq	.+30     	; 0x27a8 <vfprintf+0x260>
    278a:	ad c0       	rjmp	.+346    	; 0x28e6 <vfprintf+0x39e>
    278c:	80 37       	cpi	r24, 0x70	; 112
    278e:	19 f0       	breq	.+6      	; 0x2796 <vfprintf+0x24e>
    2790:	88 37       	cpi	r24, 0x78	; 120
    2792:	21 f0       	breq	.+8      	; 0x279c <vfprintf+0x254>
    2794:	a8 c0       	rjmp	.+336    	; 0x28e6 <vfprintf+0x39e>
    2796:	2f 2f       	mov	r18, r31
    2798:	20 61       	ori	r18, 0x10	; 16
    279a:	b2 2e       	mov	r11, r18
    279c:	b4 fe       	sbrs	r11, 4
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <vfprintf+0x272>
    27a0:	8b 2d       	mov	r24, r11
    27a2:	84 60       	ori	r24, 0x04	; 4
    27a4:	b8 2e       	mov	r11, r24
    27a6:	09 c0       	rjmp	.+18     	; 0x27ba <vfprintf+0x272>
    27a8:	24 ff       	sbrs	r18, 4
    27aa:	0a c0       	rjmp	.+20     	; 0x27c0 <vfprintf+0x278>
    27ac:	9f 2f       	mov	r25, r31
    27ae:	96 60       	ori	r25, 0x06	; 6
    27b0:	b9 2e       	mov	r11, r25
    27b2:	06 c0       	rjmp	.+12     	; 0x27c0 <vfprintf+0x278>
    27b4:	28 e0       	ldi	r18, 0x08	; 8
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <vfprintf+0x27c>
    27ba:	20 e1       	ldi	r18, 0x10	; 16
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <vfprintf+0x27c>
    27c0:	20 e1       	ldi	r18, 0x10	; 16
    27c2:	32 e0       	ldi	r19, 0x02	; 2
    27c4:	f8 01       	movw	r30, r16
    27c6:	b7 fe       	sbrs	r11, 7
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <vfprintf+0x290>
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	0c 5f       	subi	r16, 0xFC	; 252
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <vfprintf+0x29c>
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 5f       	subi	r16, 0xFE	; 254
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	a4 01       	movw	r20, r8
    27e6:	e6 d0       	rcall	.+460    	; 0x29b4 <__ultoa_invert>
    27e8:	a8 2e       	mov	r10, r24
    27ea:	a8 18       	sub	r10, r8
    27ec:	fb 2d       	mov	r31, r11
    27ee:	ff 77       	andi	r31, 0x7F	; 127
    27f0:	bf 2e       	mov	r11, r31
    27f2:	b6 fe       	sbrs	r11, 6
    27f4:	0b c0       	rjmp	.+22     	; 0x280c <vfprintf+0x2c4>
    27f6:	2b 2d       	mov	r18, r11
    27f8:	2e 7f       	andi	r18, 0xFE	; 254
    27fa:	a5 14       	cp	r10, r5
    27fc:	50 f4       	brcc	.+20     	; 0x2812 <vfprintf+0x2ca>
    27fe:	b4 fe       	sbrs	r11, 4
    2800:	0a c0       	rjmp	.+20     	; 0x2816 <vfprintf+0x2ce>
    2802:	b2 fc       	sbrc	r11, 2
    2804:	08 c0       	rjmp	.+16     	; 0x2816 <vfprintf+0x2ce>
    2806:	2b 2d       	mov	r18, r11
    2808:	2e 7e       	andi	r18, 0xEE	; 238
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x2ce>
    280c:	7a 2c       	mov	r7, r10
    280e:	2b 2d       	mov	r18, r11
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <vfprintf+0x2d0>
    2812:	7a 2c       	mov	r7, r10
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <vfprintf+0x2d0>
    2816:	75 2c       	mov	r7, r5
    2818:	24 ff       	sbrs	r18, 4
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <vfprintf+0x2ee>
    281c:	fe 01       	movw	r30, r28
    281e:	ea 0d       	add	r30, r10
    2820:	f1 1d       	adc	r31, r1
    2822:	80 81       	ld	r24, Z
    2824:	80 33       	cpi	r24, 0x30	; 48
    2826:	11 f4       	brne	.+4      	; 0x282c <vfprintf+0x2e4>
    2828:	29 7e       	andi	r18, 0xE9	; 233
    282a:	09 c0       	rjmp	.+18     	; 0x283e <vfprintf+0x2f6>
    282c:	22 ff       	sbrs	r18, 2
    282e:	06 c0       	rjmp	.+12     	; 0x283c <vfprintf+0x2f4>
    2830:	73 94       	inc	r7
    2832:	73 94       	inc	r7
    2834:	04 c0       	rjmp	.+8      	; 0x283e <vfprintf+0x2f6>
    2836:	82 2f       	mov	r24, r18
    2838:	86 78       	andi	r24, 0x86	; 134
    283a:	09 f0       	breq	.+2      	; 0x283e <vfprintf+0x2f6>
    283c:	73 94       	inc	r7
    283e:	23 fd       	sbrc	r18, 3
    2840:	12 c0       	rjmp	.+36     	; 0x2866 <vfprintf+0x31e>
    2842:	20 ff       	sbrs	r18, 0
    2844:	06 c0       	rjmp	.+12     	; 0x2852 <vfprintf+0x30a>
    2846:	5a 2c       	mov	r5, r10
    2848:	73 14       	cp	r7, r3
    284a:	18 f4       	brcc	.+6      	; 0x2852 <vfprintf+0x30a>
    284c:	53 0c       	add	r5, r3
    284e:	57 18       	sub	r5, r7
    2850:	73 2c       	mov	r7, r3
    2852:	73 14       	cp	r7, r3
    2854:	60 f4       	brcc	.+24     	; 0x286e <vfprintf+0x326>
    2856:	b7 01       	movw	r22, r14
    2858:	80 e2       	ldi	r24, 0x20	; 32
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	2c 87       	std	Y+12, r18	; 0x0c
    285e:	78 d0       	rcall	.+240    	; 0x2950 <fputc>
    2860:	73 94       	inc	r7
    2862:	2c 85       	ldd	r18, Y+12	; 0x0c
    2864:	f6 cf       	rjmp	.-20     	; 0x2852 <vfprintf+0x30a>
    2866:	73 14       	cp	r7, r3
    2868:	10 f4       	brcc	.+4      	; 0x286e <vfprintf+0x326>
    286a:	37 18       	sub	r3, r7
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <vfprintf+0x328>
    286e:	31 2c       	mov	r3, r1
    2870:	24 ff       	sbrs	r18, 4
    2872:	11 c0       	rjmp	.+34     	; 0x2896 <vfprintf+0x34e>
    2874:	b7 01       	movw	r22, r14
    2876:	80 e3       	ldi	r24, 0x30	; 48
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	2c 87       	std	Y+12, r18	; 0x0c
    287c:	69 d0       	rcall	.+210    	; 0x2950 <fputc>
    287e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2880:	22 ff       	sbrs	r18, 2
    2882:	16 c0       	rjmp	.+44     	; 0x28b0 <vfprintf+0x368>
    2884:	21 ff       	sbrs	r18, 1
    2886:	03 c0       	rjmp	.+6      	; 0x288e <vfprintf+0x346>
    2888:	88 e5       	ldi	r24, 0x58	; 88
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <vfprintf+0x34a>
    288e:	88 e7       	ldi	r24, 0x78	; 120
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	b7 01       	movw	r22, r14
    2894:	0c c0       	rjmp	.+24     	; 0x28ae <vfprintf+0x366>
    2896:	82 2f       	mov	r24, r18
    2898:	86 78       	andi	r24, 0x86	; 134
    289a:	51 f0       	breq	.+20     	; 0x28b0 <vfprintf+0x368>
    289c:	21 fd       	sbrc	r18, 1
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <vfprintf+0x35c>
    28a0:	80 e2       	ldi	r24, 0x20	; 32
    28a2:	01 c0       	rjmp	.+2      	; 0x28a6 <vfprintf+0x35e>
    28a4:	8b e2       	ldi	r24, 0x2B	; 43
    28a6:	27 fd       	sbrc	r18, 7
    28a8:	8d e2       	ldi	r24, 0x2D	; 45
    28aa:	b7 01       	movw	r22, r14
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	50 d0       	rcall	.+160    	; 0x2950 <fputc>
    28b0:	a5 14       	cp	r10, r5
    28b2:	30 f4       	brcc	.+12     	; 0x28c0 <vfprintf+0x378>
    28b4:	b7 01       	movw	r22, r14
    28b6:	80 e3       	ldi	r24, 0x30	; 48
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	4a d0       	rcall	.+148    	; 0x2950 <fputc>
    28bc:	5a 94       	dec	r5
    28be:	f8 cf       	rjmp	.-16     	; 0x28b0 <vfprintf+0x368>
    28c0:	aa 94       	dec	r10
    28c2:	f4 01       	movw	r30, r8
    28c4:	ea 0d       	add	r30, r10
    28c6:	f1 1d       	adc	r31, r1
    28c8:	80 81       	ld	r24, Z
    28ca:	b7 01       	movw	r22, r14
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	40 d0       	rcall	.+128    	; 0x2950 <fputc>
    28d0:	a1 10       	cpse	r10, r1
    28d2:	f6 cf       	rjmp	.-20     	; 0x28c0 <vfprintf+0x378>
    28d4:	33 20       	and	r3, r3
    28d6:	09 f4       	brne	.+2      	; 0x28da <vfprintf+0x392>
    28d8:	5d ce       	rjmp	.-838    	; 0x2594 <vfprintf+0x4c>
    28da:	b7 01       	movw	r22, r14
    28dc:	80 e2       	ldi	r24, 0x20	; 32
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	37 d0       	rcall	.+110    	; 0x2950 <fputc>
    28e2:	3a 94       	dec	r3
    28e4:	f7 cf       	rjmp	.-18     	; 0x28d4 <vfprintf+0x38c>
    28e6:	f7 01       	movw	r30, r14
    28e8:	86 81       	ldd	r24, Z+6	; 0x06
    28ea:	97 81       	ldd	r25, Z+7	; 0x07
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <vfprintf+0x3aa>
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	2c 96       	adiw	r28, 0x0c	; 12
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	8f 90       	pop	r8
    2916:	7f 90       	pop	r7
    2918:	6f 90       	pop	r6
    291a:	5f 90       	pop	r5
    291c:	4f 90       	pop	r4
    291e:	3f 90       	pop	r3
    2920:	2f 90       	pop	r2
    2922:	08 95       	ret

00002924 <strnlen_P>:
    2924:	fc 01       	movw	r30, r24
    2926:	05 90       	lpm	r0, Z+
    2928:	61 50       	subi	r22, 0x01	; 1
    292a:	70 40       	sbci	r23, 0x00	; 0
    292c:	01 10       	cpse	r0, r1
    292e:	d8 f7       	brcc	.-10     	; 0x2926 <strnlen_P+0x2>
    2930:	80 95       	com	r24
    2932:	90 95       	com	r25
    2934:	8e 0f       	add	r24, r30
    2936:	9f 1f       	adc	r25, r31
    2938:	08 95       	ret

0000293a <strnlen>:
    293a:	fc 01       	movw	r30, r24
    293c:	61 50       	subi	r22, 0x01	; 1
    293e:	70 40       	sbci	r23, 0x00	; 0
    2940:	01 90       	ld	r0, Z+
    2942:	01 10       	cpse	r0, r1
    2944:	d8 f7       	brcc	.-10     	; 0x293c <strnlen+0x2>
    2946:	80 95       	com	r24
    2948:	90 95       	com	r25
    294a:	8e 0f       	add	r24, r30
    294c:	9f 1f       	adc	r25, r31
    294e:	08 95       	ret

00002950 <fputc>:
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	18 2f       	mov	r17, r24
    295a:	09 2f       	mov	r16, r25
    295c:	eb 01       	movw	r28, r22
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	81 fd       	sbrc	r24, 1
    2962:	03 c0       	rjmp	.+6      	; 0x296a <fputc+0x1a>
    2964:	8f ef       	ldi	r24, 0xFF	; 255
    2966:	9f ef       	ldi	r25, 0xFF	; 255
    2968:	20 c0       	rjmp	.+64     	; 0x29aa <fputc+0x5a>
    296a:	82 ff       	sbrs	r24, 2
    296c:	10 c0       	rjmp	.+32     	; 0x298e <fputc+0x3e>
    296e:	4e 81       	ldd	r20, Y+6	; 0x06
    2970:	5f 81       	ldd	r21, Y+7	; 0x07
    2972:	2c 81       	ldd	r18, Y+4	; 0x04
    2974:	3d 81       	ldd	r19, Y+5	; 0x05
    2976:	42 17       	cp	r20, r18
    2978:	53 07       	cpc	r21, r19
    297a:	7c f4       	brge	.+30     	; 0x299a <fputc+0x4a>
    297c:	e8 81       	ld	r30, Y
    297e:	f9 81       	ldd	r31, Y+1	; 0x01
    2980:	9f 01       	movw	r18, r30
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	39 83       	std	Y+1, r19	; 0x01
    2988:	28 83       	st	Y, r18
    298a:	10 83       	st	Z, r17
    298c:	06 c0       	rjmp	.+12     	; 0x299a <fputc+0x4a>
    298e:	e8 85       	ldd	r30, Y+8	; 0x08
    2990:	f9 85       	ldd	r31, Y+9	; 0x09
    2992:	81 2f       	mov	r24, r17
    2994:	09 95       	icall
    2996:	89 2b       	or	r24, r25
    2998:	29 f7       	brne	.-54     	; 0x2964 <fputc+0x14>
    299a:	2e 81       	ldd	r18, Y+6	; 0x06
    299c:	3f 81       	ldd	r19, Y+7	; 0x07
    299e:	2f 5f       	subi	r18, 0xFF	; 255
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	3f 83       	std	Y+7, r19	; 0x07
    29a4:	2e 83       	std	Y+6, r18	; 0x06
    29a6:	81 2f       	mov	r24, r17
    29a8:	90 2f       	mov	r25, r16
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <__ultoa_invert>:
    29b4:	fa 01       	movw	r30, r20
    29b6:	aa 27       	eor	r26, r26
    29b8:	28 30       	cpi	r18, 0x08	; 8
    29ba:	51 f1       	breq	.+84     	; 0x2a10 <__ultoa_invert+0x5c>
    29bc:	20 31       	cpi	r18, 0x10	; 16
    29be:	81 f1       	breq	.+96     	; 0x2a20 <__ultoa_invert+0x6c>
    29c0:	e8 94       	clt
    29c2:	6f 93       	push	r22
    29c4:	6e 7f       	andi	r22, 0xFE	; 254
    29c6:	6e 5f       	subi	r22, 0xFE	; 254
    29c8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ca:	8f 4f       	sbci	r24, 0xFF	; 255
    29cc:	9f 4f       	sbci	r25, 0xFF	; 255
    29ce:	af 4f       	sbci	r26, 0xFF	; 255
    29d0:	b1 e0       	ldi	r27, 0x01	; 1
    29d2:	3e d0       	rcall	.+124    	; 0x2a50 <__ultoa_invert+0x9c>
    29d4:	b4 e0       	ldi	r27, 0x04	; 4
    29d6:	3c d0       	rcall	.+120    	; 0x2a50 <__ultoa_invert+0x9c>
    29d8:	67 0f       	add	r22, r23
    29da:	78 1f       	adc	r23, r24
    29dc:	89 1f       	adc	r24, r25
    29de:	9a 1f       	adc	r25, r26
    29e0:	a1 1d       	adc	r26, r1
    29e2:	68 0f       	add	r22, r24
    29e4:	79 1f       	adc	r23, r25
    29e6:	8a 1f       	adc	r24, r26
    29e8:	91 1d       	adc	r25, r1
    29ea:	a1 1d       	adc	r26, r1
    29ec:	6a 0f       	add	r22, r26
    29ee:	71 1d       	adc	r23, r1
    29f0:	81 1d       	adc	r24, r1
    29f2:	91 1d       	adc	r25, r1
    29f4:	a1 1d       	adc	r26, r1
    29f6:	20 d0       	rcall	.+64     	; 0x2a38 <__ultoa_invert+0x84>
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__ultoa_invert+0x48>
    29fa:	68 94       	set
    29fc:	3f 91       	pop	r19
    29fe:	2a e0       	ldi	r18, 0x0A	; 10
    2a00:	26 9f       	mul	r18, r22
    2a02:	11 24       	eor	r1, r1
    2a04:	30 19       	sub	r19, r0
    2a06:	30 5d       	subi	r19, 0xD0	; 208
    2a08:	31 93       	st	Z+, r19
    2a0a:	de f6       	brtc	.-74     	; 0x29c2 <__ultoa_invert+0xe>
    2a0c:	cf 01       	movw	r24, r30
    2a0e:	08 95       	ret
    2a10:	46 2f       	mov	r20, r22
    2a12:	47 70       	andi	r20, 0x07	; 7
    2a14:	40 5d       	subi	r20, 0xD0	; 208
    2a16:	41 93       	st	Z+, r20
    2a18:	b3 e0       	ldi	r27, 0x03	; 3
    2a1a:	0f d0       	rcall	.+30     	; 0x2a3a <__ultoa_invert+0x86>
    2a1c:	c9 f7       	brne	.-14     	; 0x2a10 <__ultoa_invert+0x5c>
    2a1e:	f6 cf       	rjmp	.-20     	; 0x2a0c <__ultoa_invert+0x58>
    2a20:	46 2f       	mov	r20, r22
    2a22:	4f 70       	andi	r20, 0x0F	; 15
    2a24:	40 5d       	subi	r20, 0xD0	; 208
    2a26:	4a 33       	cpi	r20, 0x3A	; 58
    2a28:	18 f0       	brcs	.+6      	; 0x2a30 <__ultoa_invert+0x7c>
    2a2a:	49 5d       	subi	r20, 0xD9	; 217
    2a2c:	31 fd       	sbrc	r19, 1
    2a2e:	40 52       	subi	r20, 0x20	; 32
    2a30:	41 93       	st	Z+, r20
    2a32:	02 d0       	rcall	.+4      	; 0x2a38 <__ultoa_invert+0x84>
    2a34:	a9 f7       	brne	.-22     	; 0x2a20 <__ultoa_invert+0x6c>
    2a36:	ea cf       	rjmp	.-44     	; 0x2a0c <__ultoa_invert+0x58>
    2a38:	b4 e0       	ldi	r27, 0x04	; 4
    2a3a:	a6 95       	lsr	r26
    2a3c:	97 95       	ror	r25
    2a3e:	87 95       	ror	r24
    2a40:	77 95       	ror	r23
    2a42:	67 95       	ror	r22
    2a44:	ba 95       	dec	r27
    2a46:	c9 f7       	brne	.-14     	; 0x2a3a <__ultoa_invert+0x86>
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	61 05       	cpc	r22, r1
    2a4c:	71 05       	cpc	r23, r1
    2a4e:	08 95       	ret
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	0a 2e       	mov	r0, r26
    2a56:	06 94       	lsr	r0
    2a58:	57 95       	ror	r21
    2a5a:	47 95       	ror	r20
    2a5c:	37 95       	ror	r19
    2a5e:	27 95       	ror	r18
    2a60:	ba 95       	dec	r27
    2a62:	c9 f7       	brne	.-14     	; 0x2a56 <__ultoa_invert+0xa2>
    2a64:	62 0f       	add	r22, r18
    2a66:	73 1f       	adc	r23, r19
    2a68:	84 1f       	adc	r24, r20
    2a6a:	95 1f       	adc	r25, r21
    2a6c:	a0 1d       	adc	r26, r0
    2a6e:	08 95       	ret

00002a70 <_exit>:
    2a70:	f8 94       	cli

00002a72 <__stop_program>:
    2a72:	ff cf       	rjmp	.-2      	; 0x2a72 <__stop_program>

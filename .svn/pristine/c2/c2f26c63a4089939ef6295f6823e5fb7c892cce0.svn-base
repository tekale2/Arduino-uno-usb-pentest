
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000c62  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000340  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000523e  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001543  00000000  00000000  00006b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000240b  00000000  00000000  00008059  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008bc  00000000  00000000  0000a464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025b3  00000000  00000000  0000ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003afd  00000000  00000000  0000d2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d8  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	98 c3       	rjmp	.+1840   	; 0x75a <__vector_10>
  2a:	00 00       	nop
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
  42:	00 00       	nop
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
  66:	00 00       	nop
  68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6b c0       	rjmp	.+214    	; 0x168 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	69 c0       	rjmp	.+210    	; 0x168 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	00 00 09 21 11 01 00 01 22 36 00 07 05 81 03 08     ...!...."6......
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
  fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
 100:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 110:	00 01                                               ..

00000112 <JoystickReport>:
 112:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
 122:	15 9c 25 64 35 ff 45 01 95 03 75 08 81 02 c0 05     ..%d5.E...u.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 132:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 75     ...)...%.u.....u
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 142:	06 95 01 81 01 c0                                   ......

00000148 <__ctors_end>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
				break;
 14e:	d0 e2       	ldi	r29, 0x20	; 32

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_clear_bss>:
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	af 30       	cpi	r26, 0x0F	; 15
 160:	b1 07       	cpc	r27, r17
				ReportSize     -= 2;
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	c5 d0       	rcall	.+394    	; 0x2f0 <main>
				ReportData     += 2;
 166:	31 c5       	rjmp	.+2658   	; 0xbca <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <LEDs_SetAllLEDs>:
 16a:	9b b1       	in	r25, 0x0b	; 11
				break;
 16c:	9f 70       	andi	r25, 0x0F	; 15

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	98 2b       	or	r25, r24
 170:	9b b9       	out	0x0b, r25	; 11
 172:	08 95       	ret

00000174 <SetupHardware>:
 174:	84 b7       	in	r24, 0x34	; 52
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	84 bf       	out	0x34, r24	; 52
				ReportSize     -= 1;
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	0f b6       	in	r0, 0x3f	; 63
				ReportData     += 1;
 17e:	f8 94       	cli
 180:	80 93 60 00 	sts	0x0060, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	10 92 60 00 	sts	0x0060, r1
 188:	0f be       	out	0x3f, r0	; 63
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	80 93 61 00 	sts	0x0061, r24
 196:	90 93 61 00 	sts	0x0061, r25
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	8f 71       	andi	r24, 0x1F	; 31
 1a0:	84 b9       	out	0x04, r24	; 4
 1a2:	8d b1       	in	r24, 0x0d	; 13
 1a4:	8f 7c       	andi	r24, 0xCF	; 207
 1a6:	8d b9       	out	0x0d, r24	; 13
 1a8:	85 b1       	in	r24, 0x05	; 5

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	80 6e       	ori	r24, 0xE0	; 224
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	8e b1       	in	r24, 0x0e	; 14
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	8e b9       	out	0x0e, r24	; 14
				break;
 1b4:	8a b1       	in	r24, 0x0a	; 10
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	80 6f       	ori	r24, 0xF0	; 240
 1b8:	8a b9       	out	0x0a, r24	; 10
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	6a 98       	cbi	0x0d, 2	; 13
 1c2:	72 9a       	sbi	0x0e, 2	; 14
 1c4:	af c2       	rjmp	.+1374   	; 0x724 <USB_Init>

000001c6 <EVENT_USB_Device_Connect>:
 1c6:	80 ea       	ldi	r24, 0xA0	; 160
 1c8:	d0 cf       	rjmp	.-96     	; 0x16a <LEDs_SetAllLEDs>

000001ca <EVENT_USB_Device_Disconnect>:
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	ce cf       	rjmp	.-100    	; 0x16a <LEDs_SetAllLEDs>

000001ce <EVENT_USB_Device_ConfigurationChanged>:
 1ce:	42 e0       	ldi	r20, 0x02	; 2
 1d0:	61 ec       	ldi	r22, 0xC1	; 193
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	dc d1       	rcall	.+952    	; 0x58e <Endpoint_ConfigureEndpoint_Prv>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	88 23       	and	r24, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <EVENT_USB_Device_ConfigurationChanged+0x10>
 1da:	80 e6       	ldi	r24, 0x60	; 96
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <EVENT_USB_Device_ConfigurationChanged+0x12>
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	c4 cf       	rjmp	.-120    	; 0x16a <LEDs_SetAllLEDs>

000001e2 <GetNextReport>:
 1e2:	fc 01       	movw	r30, r24
 1e4:	83 b1       	in	r24, 0x03	; 3
 1e6:	9c b1       	in	r25, 0x0c	; 12
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	90 95       	com	r25
 1ea:	90 73       	andi	r25, 0x30	; 48
				break;
 1ec:	96 95       	lsr	r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	80 95       	com	r24
 1f0:	80 7e       	andi	r24, 0xE0	; 224
 1f2:	98 2b       	or	r25, r24
 1f4:	2c b1       	in	r18, 0x0c	; 12
 1f6:	20 95       	com	r18
 1f8:	24 70       	andi	r18, 0x04	; 4
 1fa:	10 82       	st	Z, r1
 1fc:	11 82       	std	Z+1, r1	; 0x01
 1fe:	12 82       	std	Z+2, r1	; 0x02
 200:	13 82       	std	Z+3, r1	; 0x03
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	97 ff       	sbrs	r25, 7
 204:	02 c0       	rjmp	.+4      	; 0x20a <GetNextReport+0x28>
				break;
 206:	8c e9       	ldi	r24, 0x9C	; 156
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	03 c0       	rjmp	.+6      	; 0x210 <GetNextReport+0x2e>
 20a:	94 ff       	sbrs	r25, 4
 20c:	02 c0       	rjmp	.+4      	; 0x212 <GetNextReport+0x30>
 20e:	84 e6       	ldi	r24, 0x64	; 100
 210:	81 83       	std	Z+1, r24	; 0x01
 212:	96 ff       	sbrs	r25, 6
 214:	02 c0       	rjmp	.+4      	; 0x21a <GetNextReport+0x38>
 216:	8c e9       	ldi	r24, 0x9C	; 156
 218:	03 c0       	rjmp	.+6      	; 0x220 <GetNextReport+0x3e>
 21a:	93 ff       	sbrs	r25, 3
 21c:	02 c0       	rjmp	.+4      	; 0x222 <GetNextReport+0x40>
 21e:	84 e6       	ldi	r24, 0x64	; 100
 220:	80 83       	st	Z, r24
 222:	95 ff       	sbrs	r25, 5
 224:	03 c0       	rjmp	.+6      	; 0x22c <GetNextReport+0x4a>
 226:	83 81       	ldd	r24, Z+3	; 0x03
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	83 83       	std	Z+3, r24	; 0x03
 22c:	22 23       	and	r18, r18
 22e:	19 f0       	breq	.+6      	; 0x236 <GetNextReport+0x54>
 230:	83 81       	ldd	r24, Z+3	; 0x03
 232:	81 60       	ori	r24, 0x01	; 1
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	83 83       	std	Z+3, r24	; 0x03
 236:	30 91 01 01 	lds	r19, 0x0101
 23a:	39 27       	eor	r19, r25
 23c:	80 91 00 01 	lds	r24, 0x0100
 240:	82 27       	eor	r24, r18
 242:	38 2b       	or	r19, r24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	09 f4       	brne	.+2      	; 0x24a <GetNextReport+0x68>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25
 24e:	20 93 00 01 	sts	0x0100, r18
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	08 95       	ret

00000254 <EVENT_USB_Device_ControlRequest>:
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <EVENT_USB_Device_ControlRequest+0x6>
 25a:	00 d0       	rcall	.+0      	; 0x25c <EVENT_USB_Device_ControlRequest+0x8>
 25c:	cd b7       	in	r28, 0x3d	; 61
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	80 91 08 01 	lds	r24, 0x0108
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	b1 f4       	brne	.+44     	; 0x294 <EVENT_USB_Device_ControlRequest+0x40>
 268:	80 91 07 01 	lds	r24, 0x0107
 26c:	81 3a       	cpi	r24, 0xA1	; 161
 26e:	91 f4       	brne	.+36     	; 0x294 <EVENT_USB_Device_ControlRequest+0x40>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	ce 01       	movw	r24, r28
				break;
 272:	01 96       	adiw	r24, 0x01	; 1

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	b6 df       	rcall	.-148    	; 0x1e2 <GetNextReport>
 276:	80 91 e8 00 	lds	r24, 0x00E8
 27a:	87 7f       	andi	r24, 0xF7	; 247
 27c:	80 93 e8 00 	sts	0x00E8, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	70 e0       	ldi	r23, 0x00	; 0
				break;
 284:	ce 01       	movw	r24, r28

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	c5 d0       	rcall	.+394    	; 0x414 <Endpoint_Write_Control_Stream_LE>
 28a:	80 91 e8 00 	lds	r24, 0x00E8
 28e:	8b 77       	andi	r24, 0x7B	; 123
				break;
 290:	80 93 e8 00 	sts	0x00E8, r24

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
				break;
 2a0:	08 95       	ret

000002a2 <HID_Task>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <HID_Task+0x6>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <HID_Task+0x8>
 2aa:	cd b7       	in	r28, 0x3d	; 61
				break;
 2ac:	de b7       	in	r29, 0x3e	; 62

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	80 91 06 01 	lds	r24, 0x0106
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	b1 f4       	brne	.+44     	; 0x2e2 <HID_Task+0x40>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 e9 00 	sts	0x00E9, r24
				break;
 2bc:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	80 ff       	sbrs	r24, 0
 2c2:	0f c0       	rjmp	.+30     	; 0x2e2 <HID_Task+0x40>
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	8c df       	rcall	.-232    	; 0x1e2 <GetNextReport>
 2ca:	40 e0       	ldi	r20, 0x00	; 0
				break;
 2cc:	50 e0       	ldi	r21, 0x00	; 0
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	ce 01       	movw	r24, r28
				break;
 2d4:	01 96       	adiw	r24, 0x01	; 1

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	56 d0       	rcall	.+172    	; 0x384 <Endpoint_Write_Stream_LE>
 2d8:	80 91 e8 00 	lds	r24, 0x00E8

				if (ParserData->UsingReportIDs)
 2dc:	8e 77       	andi	r24, 0x7E	; 126
 2de:	80 93 e8 00 	sts	0x00E8, r24
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
 2f0:	41 df       	rcall	.-382    	; 0x174 <SetupHardware>
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	3a df       	rcall	.-396    	; 0x16a <LEDs_SetAllLEDs>
 2f6:	78 94       	sei
 2f8:	d4 df       	rcall	.-88     	; 0x2a2 <HID_Task>
 2fa:	4b d4       	rcall	.+2198   	; 0xb92 <USB_USBTask>
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <main+0x8>

000002fe <CALLBACK_USB_GetDescriptor>:
 2fe:	29 2f       	mov	r18, r25
 300:	33 27       	eor	r19, r19
 302:	23 30       	cpi	r18, 0x03	; 3
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	31 05       	cpc	r19, r1
 306:	b9 f0       	breq	.+46     	; 0x336 <CALLBACK_USB_GetDescriptor+0x38>
 308:	5c f4       	brge	.+22     	; 0x320 <CALLBACK_USB_GetDescriptor+0x22>
 30a:	21 30       	cpi	r18, 0x01	; 1
 30c:	31 05       	cpc	r19, r1
 30e:	69 f1       	breq	.+90     	; 0x36a <CALLBACK_USB_GetDescriptor+0x6c>
 310:	22 30       	cpi	r18, 0x02	; 2
 312:	31 05       	cpc	r19, r1
 314:	79 f5       	brne	.+94     	; 0x374 <CALLBACK_USB_GetDescriptor+0x76>
 316:	82 e2       	ldi	r24, 0x22	; 34
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	2e ed       	ldi	r18, 0xDE	; 222
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	2e c0       	rjmp	.+92     	; 0x37c <CALLBACK_USB_GetDescriptor+0x7e>
 320:	21 32       	cpi	r18, 0x21	; 33
 322:	31 05       	cpc	r19, r1
 324:	e9 f0       	breq	.+58     	; 0x360 <CALLBACK_USB_GetDescriptor+0x62>
 326:	22 32       	cpi	r18, 0x22	; 34
 328:	31 05       	cpc	r19, r1
 32a:	21 f5       	brne	.+72     	; 0x374 <CALLBACK_USB_GetDescriptor+0x76>
 32c:	86 e3       	ldi	r24, 0x36	; 54
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	22 e1       	ldi	r18, 0x12	; 18
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	23 c0       	rjmp	.+70     	; 0x37c <CALLBACK_USB_GetDescriptor+0x7e>
 336:	99 27       	eor	r25, r25
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 05       	cpc	r25, r1
 33c:	41 f0       	breq	.+16     	; 0x34e <CALLBACK_USB_GetDescriptor+0x50>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	91 05       	cpc	r25, r1
 342:	41 f0       	breq	.+16     	; 0x354 <CALLBACK_USB_GetDescriptor+0x56>
 344:	89 2b       	or	r24, r25
 346:	b1 f4       	brne	.+44     	; 0x374 <CALLBACK_USB_GetDescriptor+0x76>
 348:	ea ed       	ldi	r30, 0xDA	; 218
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	05 c0       	rjmp	.+10     	; 0x358 <CALLBACK_USB_GetDescriptor+0x5a>
 34e:	e0 ec       	ldi	r30, 0xC0	; 192
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <CALLBACK_USB_GetDescriptor+0x5a>
 354:	e8 e9       	ldi	r30, 0x98	; 152
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	84 91       	lpm	r24, Z
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	9f 01       	movw	r18, r30
 35e:	0e c0       	rjmp	.+28     	; 0x37c <CALLBACK_USB_GetDescriptor+0x7e>
 360:	89 e0       	ldi	r24, 0x09	; 9
 362:	90 e0       	ldi	r25, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	20 ef       	ldi	r18, 0xF0	; 240
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	09 c0       	rjmp	.+18     	; 0x37c <CALLBACK_USB_GetDescriptor+0x7e>
 36a:	82 e1       	ldi	r24, 0x12	; 18
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	31 e0       	ldi	r19, 0x01	; 1
 372:	04 c0       	rjmp	.+8      	; 0x37c <CALLBACK_USB_GetDescriptor+0x7e>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	fa 01       	movw	r30, r20
 37e:	31 83       	std	Z+1, r19	; 0x01
 380:	20 83       	st	Z, r18
 382:	08 95       	ret

00000384 <Endpoint_Write_Stream_LE>:
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
				break;
 388:	ef 92       	push	r14

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	7c 01       	movw	r14, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	8b 01       	movw	r16, r22
 398:	ea 01       	movw	r28, r20
 39a:	4f d1       	rcall	.+670    	; 0x63a <Endpoint_WaitUntilReady>
 39c:	81 11       	cpse	r24, r1
 39e:	31 c0       	rjmp	.+98     	; 0x402 <Endpoint_Write_Stream_LE+0x7e>
 3a0:	20 97       	sbiw	r28, 0x00	; 0
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <Endpoint_Write_Stream_LE+0x2c>
 3a4:	88 81       	ld	r24, Y
 3a6:	99 81       	ldd	r25, Y+1	; 0x01
 3a8:	08 1b       	sub	r16, r24
 3aa:	19 0b       	sbc	r17, r25
 3ac:	e8 0e       	add	r14, r24
 3ae:	f9 1e       	adc	r15, r25
				break;
 3b0:	c1 2c       	mov	r12, r1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	d1 2c       	mov	r13, r1
 3b4:	01 15       	cp	r16, r1
 3b6:	11 05       	cpc	r17, r1
 3b8:	19 f1       	breq	.+70     	; 0x400 <Endpoint_Write_Stream_LE+0x7c>
 3ba:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	85 fd       	sbrc	r24, 5
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <Endpoint_Write_Stream_LE+0x66>
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	8e 77       	andi	r24, 0x7E	; 126
 3c8:	80 93 e8 00 	sts	0x00E8, r24
 3cc:	e2 d3       	rcall	.+1988   	; 0xb92 <USB_USBTask>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	20 97       	sbiw	r28, 0x00	; 0
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <Endpoint_Write_Stream_LE+0x5e>
 3d2:	88 81       	ld	r24, Y

					while (CurrCollectionPath->Parent != NULL)
 3d4:	99 81       	ldd	r25, Y+1	; 0x01
 3d6:	8c 0d       	add	r24, r12
 3d8:	9d 1d       	adc	r25, r13
 3da:	99 83       	std	Y+1, r25	; 0x01
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	88 83       	st	Y, r24
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	10 c0       	rjmp	.+32     	; 0x402 <Endpoint_Write_Stream_LE+0x7e>
 3e2:	2b d1       	rcall	.+598    	; 0x63a <Endpoint_WaitUntilReady>
 3e4:	88 23       	and	r24, r24
 3e6:	31 f3       	breq	.-52     	; 0x3b4 <Endpoint_Write_Stream_LE+0x30>
 3e8:	0c c0       	rjmp	.+24     	; 0x402 <Endpoint_Write_Stream_LE+0x7e>
 3ea:	f7 01       	movw	r30, r14
 3ec:	81 91       	ld	r24, Z+
 3ee:	7f 01       	movw	r14, r30
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	80 93 f1 00 	sts	0x00F1, r24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	01 50       	subi	r16, 0x01	; 1
 3f6:	11 09       	sbc	r17, r1
 3f8:	ff ef       	ldi	r31, 0xFF	; 255
 3fa:	cf 1a       	sub	r12, r31
 3fc:	df 0a       	sbc	r13, r31
 3fe:	da cf       	rjmp	.-76     	; 0x3b4 <Endpoint_Write_Stream_LE+0x30>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	08 95       	ret

00000414 <Endpoint_Write_Control_Stream_LE>:
 414:	20 91 0d 01 	lds	r18, 0x010D
 418:	30 91 0e 01 	lds	r19, 0x010E
 41c:	26 17       	cp	r18, r22
 41e:	37 07       	cpc	r19, r23

				if (UsageListSize)
 420:	48 f0       	brcs	.+18     	; 0x434 <Endpoint_Write_Control_Stream_LE+0x20>
 422:	61 15       	cp	r22, r1
 424:	71 05       	cpc	r23, r1
 426:	39 f4       	brne	.+14     	; 0x436 <Endpoint_Write_Control_Stream_LE+0x22>
 428:	20 91 e8 00 	lds	r18, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42c:	2e 77       	andi	r18, 0x7E	; 126
 42e:	20 93 e8 00 	sts	0x00E8, r18
 432:	01 c0       	rjmp	.+2      	; 0x436 <Endpoint_Write_Control_Stream_LE+0x22>
 434:	b9 01       	movw	r22, r18
 436:	fc 01       	movw	r30, r24
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	99 f1       	breq	.+102    	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x92>

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	80 91 06 01 	lds	r24, 0x0106
 444:	88 23       	and	r24, r24
 446:	e9 f1       	breq	.+122    	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0xae>
 448:	85 30       	cpi	r24, 0x05	; 5
 44a:	e9 f1       	breq	.+122    	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0xb2>
					  UsageList[i - 1] = UsageList[i];
 44c:	80 91 e8 00 	lds	r24, 0x00E8
 450:	83 fd       	sbrc	r24, 3
 452:	3b c0       	rjmp	.+118    	; 0x4ca <Endpoint_Write_Control_Stream_LE+0xb6>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	80 91 e8 00 	lds	r24, 0x00E8
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	82 ff       	sbrs	r24, 2
 45a:	06 c0       	rjmp	.+12     	; 0x468 <Endpoint_Write_Control_Stream_LE+0x54>
 45c:	80 91 e8 00 	lds	r24, 0x00E8
 460:	82 ff       	sbrs	r24, 2
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	24 c0       	rjmp	.+72     	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x98>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret
 468:	80 91 e8 00 	lds	r24, 0x00E8
 46c:	80 ff       	sbrs	r24, 0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	e5 cf       	rjmp	.-54     	; 0x43a <Endpoint_Write_Control_Stream_LE+0x26>
 470:	80 91 f2 00 	lds	r24, 0x00F2
 474:	90 91 f3 00 	lds	r25, 0x00F3
 478:	61 15       	cp	r22, r1
 47a:	71 05       	cpc	r23, r1
 47c:	51 f0       	breq	.+20     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x7e>
 47e:	88 30       	cpi	r24, 0x08	; 8
 480:	91 05       	cpc	r25, r1
 482:	38 f4       	brcc	.+14     	; 0x492 <Endpoint_Write_Control_Stream_LE+0x7e>
 484:	21 91       	ld	r18, Z+
 486:	20 93 f1 00 	sts	0x00F1, r18
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	61 50       	subi	r22, 0x01	; 1
 48c:	71 09       	sbc	r23, r1
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	f3 cf       	rjmp	.-26     	; 0x478 <Endpoint_Write_Control_Stream_LE+0x64>
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	08 97       	sbiw	r24, 0x08	; 8
 496:	09 f0       	breq	.+2      	; 0x49a <Endpoint_Write_Control_Stream_LE+0x86>
 498:	20 e0       	ldi	r18, 0x00	; 0
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	80 91 e8 00 	lds	r24, 0x00E8
 49e:	8e 77       	andi	r24, 0x7E	; 126
 4a0:	80 93 e8 00 	sts	0x00E8, r24
 4a4:	ca cf       	rjmp	.-108    	; 0x43a <Endpoint_Write_Control_Stream_LE+0x26>
 4a6:	21 11       	cpse	r18, r1
 4a8:	cb cf       	rjmp	.-106    	; 0x440 <Endpoint_Write_Control_Stream_LE+0x2c>
 4aa:	d8 cf       	rjmp	.-80     	; 0x45c <Endpoint_Write_Control_Stream_LE+0x48>
				break;
 4ac:	80 91 06 01 	lds	r24, 0x0106
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4b0:	88 23       	and	r24, r24
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0xae>
 4b4:	85 30       	cpi	r24, 0x05	; 5
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0xb2>
 4b8:	80 91 e8 00 	lds	r24, 0x00E8
 4bc:	83 ff       	sbrs	r24, 3
 4be:	ce cf       	rjmp	.-100    	; 0x45c <Endpoint_Write_Control_Stream_LE+0x48>
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <Endpoint_Write_Control_Stream_LE+0xb6>
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	08 95       	ret
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	08 95       	ret
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret

000004ce <Endpoint_Write_Control_PStream_LE>:
 4ce:	20 91 0d 01 	lds	r18, 0x010D
 4d2:	30 91 0e 01 	lds	r19, 0x010E
 4d6:	26 17       	cp	r18, r22
 4d8:	37 07       	cpc	r19, r23
 4da:	48 f0       	brcs	.+18     	; 0x4ee <Endpoint_Write_Control_PStream_LE+0x20>
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	39 f4       	brne	.+14     	; 0x4f0 <Endpoint_Write_Control_PStream_LE+0x22>
 4e2:	20 91 e8 00 	lds	r18, 0x00E8
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e6:	2e 77       	andi	r18, 0x7E	; 126
 4e8:	20 93 e8 00 	sts	0x00E8, r18
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <Endpoint_Write_Control_PStream_LE+0x22>
 4ee:	b9 01       	movw	r22, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	b1 f1       	breq	.+108    	; 0x566 <Endpoint_Write_Control_PStream_LE+0x98>
 4fa:	80 91 06 01 	lds	r24, 0x0106
 4fe:	88 23       	and	r24, r24
 500:	09 f4       	brne	.+2      	; 0x504 <Endpoint_Write_Control_PStream_LE+0x36>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	3f c0       	rjmp	.+126    	; 0x582 <Endpoint_Write_Control_PStream_LE+0xb4>
 504:	85 30       	cpi	r24, 0x05	; 5
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	09 f4       	brne	.+2      	; 0x50a <Endpoint_Write_Control_PStream_LE+0x3c>
 508:	3e c0       	rjmp	.+124    	; 0x586 <Endpoint_Write_Control_PStream_LE+0xb8>
 50a:	80 91 e8 00 	lds	r24, 0x00E8
 50e:	83 fd       	sbrc	r24, 3
 510:	3c c0       	rjmp	.+120    	; 0x58a <Endpoint_Write_Control_PStream_LE+0xbc>
 512:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	82 ff       	sbrs	r24, 2
 518:	06 c0       	rjmp	.+12     	; 0x526 <Endpoint_Write_Control_PStream_LE+0x58>
 51a:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
 51e:	82 ff       	sbrs	r24, 2
 520:	25 c0       	rjmp	.+74     	; 0x56c <Endpoint_Write_Control_PStream_LE+0x9e>
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
 526:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 52a:	80 ff       	sbrs	r24, 0
 52c:	e3 cf       	rjmp	.-58     	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x26>
 52e:	80 91 f2 00 	lds	r24, 0x00F2
 532:	90 91 f3 00 	lds	r25, 0x00F3
 536:	61 15       	cp	r22, r1
 538:	71 05       	cpc	r23, r1
 53a:	59 f0       	breq	.+22     	; 0x552 <Endpoint_Write_Control_PStream_LE+0x84>
 53c:	88 30       	cpi	r24, 0x08	; 8

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	91 05       	cpc	r25, r1
 540:	40 f4       	brcc	.+16     	; 0x552 <Endpoint_Write_Control_PStream_LE+0x84>
 542:	24 91       	lpm	r18, Z
 544:	20 93 f1 00 	sts	0x00F1, r18
 548:	31 96       	adiw	r30, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];
 54a:	61 50       	subi	r22, 0x01	; 1
 54c:	71 09       	sbc	r23, r1
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	f2 cf       	rjmp	.-28     	; 0x536 <Endpoint_Write_Control_PStream_LE+0x68>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	08 97       	sbiw	r24, 0x08	; 8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	09 f0       	breq	.+2      	; 0x55a <Endpoint_Write_Control_PStream_LE+0x8c>
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	80 91 e8 00 	lds	r24, 0x00E8
 55e:	8e 77       	andi	r24, 0x7E	; 126
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	80 93 e8 00 	sts	0x00E8, r24
 564:	c7 cf       	rjmp	.-114    	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x26>
 566:	21 11       	cpse	r18, r1
 568:	c8 cf       	rjmp	.-112    	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x2c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	d7 cf       	rjmp	.-82     	; 0x51a <Endpoint_Write_Control_PStream_LE+0x4c>
 56c:	80 91 06 01 	lds	r24, 0x0106
 570:	88 23       	and	r24, r24
 572:	39 f0       	breq	.+14     	; 0x582 <Endpoint_Write_Control_PStream_LE+0xb4>
 574:	85 30       	cpi	r24, 0x05	; 5
 576:	39 f0       	breq	.+14     	; 0x586 <Endpoint_Write_Control_PStream_LE+0xb8>
 578:	80 91 e8 00 	lds	r24, 0x00E8
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	83 ff       	sbrs	r24, 3
 57e:	cd cf       	rjmp	.-102    	; 0x51a <Endpoint_Write_Control_PStream_LE+0x4c>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	04 c0       	rjmp	.+8      	; 0x58a <Endpoint_Write_Control_PStream_LE+0xbc>
 582:	82 e0       	ldi	r24, 0x02	; 2
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	08 95       	ret
 586:	83 e0       	ldi	r24, 0x03	; 3
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	08 95       	ret
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret

0000058e <Endpoint_ConfigureEndpoint_Prv>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	98 2f       	mov	r25, r24
 590:	97 30       	cpi	r25, 0x07	; 7

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	58 f5       	brcc	.+86     	; 0x5ea <Endpoint_ConfigureEndpoint_Prv+0x5c>
 594:	90 93 e9 00 	sts	0x00E9, r25
 598:	98 17       	cp	r25, r24
 59a:	39 f0       	breq	.+14     	; 0x5aa <Endpoint_ConfigureEndpoint_Prv+0x1c>
 59c:	70 91 ec 00 	lds	r23, 0x00EC
 5a0:	20 91 ed 00 	lds	r18, 0x00ED
 5a4:	50 91 f0 00 	lds	r21, 0x00F0
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <Endpoint_ConfigureEndpoint_Prv+0x22>
 5aa:	24 2f       	mov	r18, r20

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	76 2f       	mov	r23, r22
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	21 ff       	sbrs	r18, 1
 5b2:	19 c0       	rjmp	.+50     	; 0x5e6 <Endpoint_ConfigureEndpoint_Prv+0x58>
 5b4:	30 91 eb 00 	lds	r19, 0x00EB
 5b8:	3e 7f       	andi	r19, 0xFE	; 254
 5ba:	30 93 eb 00 	sts	0x00EB, r19

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5be:	30 91 ed 00 	lds	r19, 0x00ED
 5c2:	3d 7f       	andi	r19, 0xFD	; 253
 5c4:	30 93 ed 00 	sts	0x00ED, r19
 5c8:	30 91 eb 00 	lds	r19, 0x00EB
 5cc:	31 60       	ori	r19, 0x01	; 1
 5ce:	30 93 eb 00 	sts	0x00EB, r19
 5d2:	70 93 ec 00 	sts	0x00EC, r23
 5d6:	20 93 ed 00 	sts	0x00ED, r18
 5da:	50 93 f0 00 	sts	0x00F0, r21
 5de:	20 91 ee 00 	lds	r18, 0x00EE
 5e2:	27 ff       	sbrs	r18, 7
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x66>
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	d3 cf       	rjmp	.-90     	; 0x590 <Endpoint_ConfigureEndpoint_Prv+0x2>
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	80 93 e9 00 	sts	0x00E9, r24
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	08 95       	ret

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <Endpoint_ClearStatusStage>:
 5f8:	80 91 07 01 	lds	r24, 0x0107
 5fc:	87 fd       	sbrc	r24, 7
					  return HID_PARSE_InsufficientReportItems;
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <Endpoint_ClearStatusStage+0x12>
 600:	80 91 e8 00 	lds	r24, 0x00E8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 604:	80 ff       	sbrs	r24, 0
 606:	0e c0       	rjmp	.+28     	; 0x624 <Endpoint_ClearStatusStage+0x2c>
 608:	12 c0       	rjmp	.+36     	; 0x62e <Endpoint_ClearStatusStage+0x36>
 60a:	80 91 e8 00 	lds	r24, 0x00E8
 60e:	82 fd       	sbrc	r24, 2
 610:	05 c0       	rjmp	.+10     	; 0x61c <Endpoint_ClearStatusStage+0x24>
 612:	80 91 06 01 	lds	r24, 0x0106
 616:	81 11       	cpse	r24, r1
 618:	f8 cf       	rjmp	.-16     	; 0x60a <Endpoint_ClearStatusStage+0x12>
 61a:	08 95       	ret
 61c:	80 91 e8 00 	lds	r24, 0x00E8
 620:	8b 77       	andi	r24, 0x7B	; 123
 622:	08 c0       	rjmp	.+16     	; 0x634 <Endpoint_ClearStatusStage+0x3c>
 624:	80 91 06 01 	lds	r24, 0x0106
 628:	81 11       	cpse	r24, r1
 62a:	ea cf       	rjmp	.-44     	; 0x600 <Endpoint_ClearStatusStage+0x8>
 62c:	08 95       	ret
 62e:	80 91 e8 00 	lds	r24, 0x00E8
 632:	8e 77       	andi	r24, 0x7E	; 126
 634:	80 93 e8 00 	sts	0x00E8, r24
 638:	08 95       	ret

0000063a <Endpoint_WaitUntilReady>:
 63a:	80 91 e4 00 	lds	r24, 0x00E4
 63e:	90 91 e5 00 	lds	r25, 0x00E5
 642:	45 e6       	ldi	r20, 0x65	; 101
 644:	20 91 ec 00 	lds	r18, 0x00EC
 648:	20 ff       	sbrs	r18, 0
 64a:	21 c0       	rjmp	.+66     	; 0x68e <Endpoint_WaitUntilReady+0x54>
 64c:	20 91 e8 00 	lds	r18, 0x00E8
 650:	20 fd       	sbrc	r18, 0
 652:	21 c0       	rjmp	.+66     	; 0x696 <Endpoint_WaitUntilReady+0x5c>
 654:	20 91 06 01 	lds	r18, 0x0106
 658:	22 23       	and	r18, r18
 65a:	89 f0       	breq	.+34     	; 0x67e <Endpoint_WaitUntilReady+0x44>
 65c:	25 30       	cpi	r18, 0x05	; 5
 65e:	89 f0       	breq	.+34     	; 0x682 <Endpoint_WaitUntilReady+0x48>
 660:	20 91 eb 00 	lds	r18, 0x00EB
 664:	25 fd       	sbrc	r18, 5
 666:	0f c0       	rjmp	.+30     	; 0x686 <Endpoint_WaitUntilReady+0x4c>
 668:	20 91 e4 00 	lds	r18, 0x00E4
 66c:	30 91 e5 00 	lds	r19, 0x00E5
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	39 f3       	breq	.-50     	; 0x644 <Endpoint_WaitUntilReady+0xa>
 676:	41 50       	subi	r20, 0x01	; 1
 678:	41 f0       	breq	.+16     	; 0x68a <Endpoint_WaitUntilReady+0x50>
 67a:	c9 01       	movw	r24, r18
 67c:	e3 cf       	rjmp	.-58     	; 0x644 <Endpoint_WaitUntilReady+0xa>
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	08 95       	ret
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	08 95       	ret
 686:	81 e0       	ldi	r24, 0x01	; 1
					  ParserData->TotalReportItems++;
 688:	08 95       	ret
 68a:	84 e0       	ldi	r24, 0x04	; 4
 68c:	08 95       	ret
 68e:	20 91 e8 00 	lds	r18, 0x00E8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	22 ff       	sbrs	r18, 2
 694:	df cf       	rjmp	.-66     	; 0x654 <Endpoint_WaitUntilReady+0x1a>
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret

0000069a <USB_ResetInterface>:
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	4e d0       	rcall	.+156    	; 0x740 <USB_INT_DisableAllInterrupts>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	55 d0       	rcall	.+170    	; 0x750 <USB_INT_ClearAllInterrupts>
 6a6:	c8 ed       	ldi	r28, 0xD8	; 216
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	88 81       	ld	r24, Y
 6ac:	8f 77       	andi	r24, 0x7F	; 127
 6ae:	88 83       	st	Y, r24
 6b0:	88 81       	ld	r24, Y
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	80 68       	ori	r24, 0x80	; 128
 6b4:	88 83       	st	Y, r24
 6b6:	88 81       	ld	r24, Y
 6b8:	8f 7d       	andi	r24, 0xDF	; 223
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	88 83       	st	Y, r24
 6bc:	e7 ed       	ldi	r30, 0xD7	; 215

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	80 68       	ori	r24, 0x80	; 128
 6c4:	80 83       	st	Z, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	19 bc       	out	0x29, r1	; 41
 6c8:	10 92 06 01 	sts	0x0106, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6cc:	10 92 02 01 	sts	0x0102, r1

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6d0:	10 92 04 01 	sts	0x0104, r1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d4:	10 92 03 01 	sts	0x0103, r1
}
 6d8:	00 ee       	ldi	r16, 0xE0	; 224
 6da:	10 e0       	ldi	r17, 0x00	; 0
 6dc:	f8 01       	movw	r30, r16
 6de:	80 81       	ld	r24, Z
 6e0:	8b 7f       	andi	r24, 0xFB	; 251
 6e2:	80 83       	st	Z, r24
 6e4:	88 81       	ld	r24, Y
 6e6:	81 60       	ori	r24, 0x01	; 1
 6e8:	88 83       	st	Y, r24
 6ea:	42 e0       	ldi	r20, 0x02	; 2
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	4e df       	rcall	.-356    	; 0x58e <Endpoint_ConfigureEndpoint_Prv>
 6f2:	e1 ee       	ldi	r30, 0xE1	; 225
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	8e 7f       	andi	r24, 0xFE	; 254
 6fa:	80 83       	st	Z, r24
 6fc:	e2 ee       	ldi	r30, 0xE2	; 226
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	81 60       	ori	r24, 0x01	; 1
 704:	80 83       	st	Z, r24
 706:	80 81       	ld	r24, Z
 708:	88 60       	ori	r24, 0x08	; 8
 70a:	80 83       	st	Z, r24
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 70c:	f8 01       	movw	r30, r16
 70e:	80 81       	ld	r24, Z
 710:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 712:	80 83       	st	Z, r24
 714:	88 81       	ld	r24, Y
 716:	80 61       	ori	r24, 0x10	; 16
 718:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <USB_Init>:
 724:	e8 ed       	ldi	r30, 0xD8	; 216
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 72a:	8f 7e       	andi	r24, 0xEF	; 239
 72c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 72e:	e7 ed       	ldi	r30, 0xD7	; 215
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	81 60       	ori	r24, 0x01	; 1
 736:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 05 01 	sts	0x0105, r24

	USB_ResetInterface();
 73e:	ad cf       	rjmp	.-166    	; 0x69a <USB_ResetInterface>

00000740 <USB_INT_DisableAllInterrupts>:
 740:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	8c 7f       	andi	r24, 0xFC	; 252
 748:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 74a:	10 92 e2 00 	sts	0x00E2, r1
 74e:	08 95       	ret

00000750 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 750:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 754:	10 92 e1 00 	sts	0x00E1, r1
 758:	08 95       	ret

0000075a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	0b b6       	in	r0, 0x3b	; 59
 766:	0f 92       	push	r0
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	5f 93       	push	r21
 770:	6f 93       	push	r22
 772:	7f 93       	push	r23
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 780:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 784:	82 ff       	sbrs	r24, 2
 786:	0a c0       	rjmp	.+20     	; 0x79c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 788:	80 91 e2 00 	lds	r24, 0x00E2
 78c:	82 ff       	sbrs	r24, 2
 78e:	06 c0       	rjmp	.+12     	; 0x79c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 790:	80 91 e1 00 	lds	r24, 0x00E1
 794:	8b 7f       	andi	r24, 0xFB	; 251
 796:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 79a:	fa d1       	rcall	.+1012   	; 0xb90 <USB_Event_Stub>
 79c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 7a0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 7a2:	1d c0       	rjmp	.+58     	; 0x7de <__vector_10+0x84>
 7a4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 7a8:	80 ff       	sbrs	r24, 0
 7aa:	19 c0       	rjmp	.+50     	; 0x7de <__vector_10+0x84>
 7ac:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 7b0:	8e 7f       	andi	r24, 0xFE	; 254
 7b2:	80 93 da 00 	sts	0x00DA, r24
 7b6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7ba:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <__vector_10+0x7c>
 7be:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7c0:	89 bd       	out	0x29, r24	; 41
 7c2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7c4:	89 bd       	out	0x29, r24	; 41
 7c6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7c8:	00 fe       	sbrs	r0, 0
 7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <__vector_10+0x6c>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7ce:	80 93 06 01 	sts	0x0106, r24
 7d2:	f9 dc       	rcall	.-1550   	; 0x1c6 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <__vector_10+0x84>
 7d6:	19 bc       	out	0x29, r1	; 41
 7d8:	10 92 06 01 	sts	0x0106, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 7dc:	f6 dc       	rcall	.-1556   	; 0x1ca <EVENT_USB_Device_Disconnect>
 7de:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 7e2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7e4:	18 c0       	rjmp	.+48     	; 0x816 <__vector_10+0xbc>
 7e6:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7ec:	14 c0       	rjmp	.+40     	; 0x816 <__vector_10+0xbc>
 7ee:	80 91 e2 00 	lds	r24, 0x00E2
 7f2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7f4:	80 93 e2 00 	sts	0x00E2, r24
 7f8:	80 91 e2 00 	lds	r24, 0x00E2
 7fc:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7fe:	80 93 e2 00 	sts	0x00E2, r24
 802:	80 91 d8 00 	lds	r24, 0x00D8
 806:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 808:	80 93 d8 00 	sts	0x00D8, r24
 80c:	19 bc       	out	0x29, r1	; 41
 80e:	85 e0       	ldi	r24, 0x05	; 5
 810:	80 93 06 01 	sts	0x0106, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 814:	bd d1       	rcall	.+890    	; 0xb90 <USB_Event_Stub>
 816:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 81a:	84 ff       	sbrs	r24, 4
 81c:	2f c0       	rjmp	.+94     	; 0x87c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 81e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 822:	84 ff       	sbrs	r24, 4
 824:	2b c0       	rjmp	.+86     	; 0x87c <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 826:	8c e0       	ldi	r24, 0x0C	; 12
 828:	89 bd       	out	0x29, r24	; 41
 82a:	8e e0       	ldi	r24, 0x0E	; 14
 82c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 82e:	09 b4       	in	r0, 0x29	; 41
 830:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 832:	fd cf       	rjmp	.-6      	; 0x82e <__vector_10+0xd4>
 834:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 838:	8f 7d       	andi	r24, 0xDF	; 223
 83a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 83e:	80 91 e1 00 	lds	r24, 0x00E1
 842:	8f 7e       	andi	r24, 0xEF	; 239
 844:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 848:	80 91 e2 00 	lds	r24, 0x00E2
 84c:	8f 7e       	andi	r24, 0xEF	; 239
 84e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 852:	80 91 e2 00 	lds	r24, 0x00E2
 856:	81 60       	ori	r24, 0x01	; 1
 858:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 85c:	80 91 02 01 	lds	r24, 0x0102
 860:	88 23       	and	r24, r24
 862:	11 f0       	breq	.+4      	; 0x868 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	07 c0       	rjmp	.+14     	; 0x876 <__vector_10+0x11c>
 868:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 86c:	87 ff       	sbrs	r24, 7
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	01 c0       	rjmp	.+2      	; 0x876 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	80 93 06 01 	sts	0x0106, r24
 87a:	8a d1       	rcall	.+788    	; 0xb90 <USB_Event_Stub>
 87c:	80 91 e1 00 	lds	r24, 0x00E1
 880:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 882:	22 c0       	rjmp	.+68     	; 0x8c8 <__vector_10+0x16e>
 884:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 888:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 88a:	1e c0       	rjmp	.+60     	; 0x8c8 <__vector_10+0x16e>
 88c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 890:	87 7f       	andi	r24, 0xF7	; 247
 892:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	80 93 06 01 	sts	0x0106, r24
 89c:	10 92 02 01 	sts	0x0102, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8a0:	80 91 e1 00 	lds	r24, 0x00E1
 8a4:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 8a6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8aa:	80 91 e2 00 	lds	r24, 0x00E2
 8ae:	8e 7f       	andi	r24, 0xFE	; 254
 8b0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8b4:	80 91 e2 00 	lds	r24, 0x00E2
 8b8:	80 61       	ori	r24, 0x10	; 16
 8ba:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8be:	42 e0       	ldi	r20, 0x02	; 2
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	64 de       	rcall	.-824    	; 0x58e <Endpoint_ConfigureEndpoint_Prv>
 8c6:	64 d1       	rcall	.+712    	; 0xb90 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0b be       	out	0x3b, r0	; 59
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <USB_Device_ProcessControlRequest>:
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	aa 97       	sbiw	r28, 0x2a	; 42
 8fa:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
 904:	e7 e0       	ldi	r30, 0x07	; 7
 906:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 908:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 90c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	ef 30       	cpi	r30, 0x0F	; 15
 912:	f2 07       	cpc	r31, r18
 914:	c9 f7       	brne	.-14     	; 0x908 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 916:	9e dc       	rcall	.-1732   	; 0x254 <EVENT_USB_Device_ControlRequest>
 918:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 91c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 91e:	20 c1       	rjmp	.+576    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 920:	90 91 07 01 	lds	r25, 0x0107
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 924:	80 91 08 01 	lds	r24, 0x0108

		switch (USB_ControlRequest.bRequest)
 928:	85 30       	cpi	r24, 0x05	; 5
 92a:	09 f4       	brne	.+2      	; 0x92e <USB_Device_ProcessControlRequest+0x40>
 92c:	77 c0       	rjmp	.+238    	; 0xa1c <USB_Device_ProcessControlRequest+0x12e>
 92e:	30 f4       	brcc	.+12     	; 0x93c <USB_Device_ProcessControlRequest+0x4e>
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	81 f1       	breq	.+96     	; 0x994 <USB_Device_ProcessControlRequest+0xa6>
 934:	68 f0       	brcs	.+26     	; 0x950 <USB_Device_ProcessControlRequest+0x62>
 936:	83 30       	cpi	r24, 0x03	; 3
 938:	69 f1       	breq	.+90     	; 0x994 <USB_Device_ProcessControlRequest+0xa6>
 93a:	12 c1       	rjmp	.+548    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 93c:	88 30       	cpi	r24, 0x08	; 8
 93e:	09 f4       	brne	.+2      	; 0x942 <USB_Device_ProcessControlRequest+0x54>
 940:	e1 c0       	rjmp	.+450    	; 0xb04 <USB_Device_ProcessControlRequest+0x216>
 942:	89 30       	cpi	r24, 0x09	; 9
 944:	09 f4       	brne	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0x5a>
 946:	f0 c0       	rjmp	.+480    	; 0xb28 <USB_Device_ProcessControlRequest+0x23a>
 948:	86 30       	cpi	r24, 0x06	; 6
 94a:	09 f0       	breq	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0x60>
 94c:	09 c1       	rjmp	.+530    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 94e:	88 c0       	rjmp	.+272    	; 0xa60 <USB_Device_ProcessControlRequest+0x172>
 950:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 952:	81 f0       	breq	.+32     	; 0x974 <USB_Device_ProcessControlRequest+0x86>
 954:	92 38       	cpi	r25, 0x82	; 130
 956:	09 f0       	breq	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x6c>
 958:	03 c1       	rjmp	.+518    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 95a:	80 91 0b 01 	lds	r24, 0x010B
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 95e:	8f 70       	andi	r24, 0x0F	; 15
 960:	80 93 e9 00 	sts	0x00E9, r24
 964:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 968:	85 fb       	bst	r24, 5
 96a:	88 27       	eor	r24, r24
 96c:	80 f9       	bld	r24, 0
 96e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 972:	06 c0       	rjmp	.+12     	; 0x980 <USB_Device_ProcessControlRequest+0x92>
 974:	80 91 03 01 	lds	r24, 0x0103
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 978:	90 91 04 01 	lds	r25, 0x0104
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 97c:	91 11       	cpse	r25, r1
 97e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 980:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 984:	97 7f       	andi	r25, 0xF7	; 247
 986:	90 93 e8 00 	sts	0x00E8, r25
 98a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 98e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 992:	c3 c0       	rjmp	.+390    	; 0xb1a <USB_Device_ProcessControlRequest+0x22c>
 994:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 996:	2d 7f       	andi	r18, 0xFD	; 253
 998:	09 f0       	breq	.+2      	; 0x99c <USB_Device_ProcessControlRequest+0xae>
 99a:	e2 c0       	rjmp	.+452    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 99c:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 99e:	19 f0       	breq	.+6      	; 0x9a6 <USB_Device_ProcessControlRequest+0xb8>
 9a0:	92 30       	cpi	r25, 0x02	; 2
 9a2:	61 f0       	breq	.+24     	; 0x9bc <USB_Device_ProcessControlRequest+0xce>
 9a4:	dd c0       	rjmp	.+442    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 9a6:	90 91 09 01 	lds	r25, 0x0109
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9aa:	91 30       	cpi	r25, 0x01	; 1
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <USB_Device_ProcessControlRequest+0xc2>
 9ae:	d8 c0       	rjmp	.+432    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 9b0:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0xc8>
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	90 93 04 01 	sts	0x0104, r25
 9ba:	2a c0       	rjmp	.+84     	; 0xa10 <USB_Device_ProcessControlRequest+0x122>
 9bc:	90 91 09 01 	lds	r25, 0x0109

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9c0:	91 11       	cpse	r25, r1
 9c2:	26 c0       	rjmp	.+76     	; 0xa10 <USB_Device_ProcessControlRequest+0x122>
 9c4:	20 91 0b 01 	lds	r18, 0x010B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9c8:	2f 70       	andi	r18, 0x0F	; 15
 9ca:	09 f4       	brne	.+2      	; 0x9ce <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9cc:	c9 c0       	rjmp	.+402    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 9ce:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9d2:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9d6:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9d8:	1b c0       	rjmp	.+54     	; 0xa10 <USB_Device_ProcessControlRequest+0x122>
 9da:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <USB_Device_ProcessControlRequest+0xf8>
 9de:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9e2:	80 62       	ori	r24, 0x20	; 32
 9e4:	13 c0       	rjmp	.+38     	; 0xa0c <USB_Device_ProcessControlRequest+0x11e>
 9e6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9ea:	80 61       	ori	r24, 0x10	; 16
 9ec:	80 93 eb 00 	sts	0x00EB, r24
 9f0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 2e       	mov	r0, r18
 9f6:	01 c0       	rjmp	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x10c>
 9f8:	88 0f       	add	r24, r24
 9fa:	0a 94       	dec	r0
 9fc:	ea f7       	brpl	.-6      	; 0x9f8 <USB_Device_ProcessControlRequest+0x10a>
 9fe:	80 93 ea 00 	sts	0x00EA, r24
 a02:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 a06:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a0a:	88 60       	ori	r24, 0x08	; 8
 a0c:	80 93 eb 00 	sts	0x00EB, r24
 a10:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a14:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a18:	87 7f       	andi	r24, 0xF7	; 247
 a1a:	82 c0       	rjmp	.+260    	; 0xb20 <USB_Device_ProcessControlRequest+0x232>
 a1c:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a1e:	a0 c0       	rjmp	.+320    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 a20:	10 91 09 01 	lds	r17, 0x0109
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a24:	1f 77       	andi	r17, 0x7F	; 127
 a26:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a2a:	80 78       	andi	r24, 0x80	; 128
 a2c:	81 2b       	or	r24, r17
 a2e:	80 93 e3 00 	sts	0x00E3, r24
 a32:	80 91 e8 00 	lds	r24, 0x00E8
 a36:	87 7f       	andi	r24, 0xF7	; 247
 a38:	80 93 e8 00 	sts	0x00E8, r24
 a3c:	dd dd       	rcall	.-1094   	; 0x5f8 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a42:	80 ff       	sbrs	r24, 0
 a44:	fc cf       	rjmp	.-8      	; 0xa3e <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 a46:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a4a:	80 68       	ori	r24, 0x80	; 128
 a4c:	80 93 e3 00 	sts	0x00E3, r24
 a50:	11 23       	and	r17, r17
 a52:	11 f0       	breq	.+4      	; 0xa58 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a54:	83 e0       	ldi	r24, 0x03	; 3
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0x16c>
 a58:	82 e0       	ldi	r24, 0x02	; 2
 a5a:	80 93 06 01 	sts	0x0106, r24
 a5e:	80 c0       	rjmp	.+256    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 a60:	90 58       	subi	r25, 0x80	; 128
 a62:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a64:	08 f0       	brcs	.+2      	; 0xa68 <USB_Device_ProcessControlRequest+0x17a>
 a66:	7c c0       	rjmp	.+248    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 a68:	80 91 09 01 	lds	r24, 0x0109
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a6c:	90 91 0a 01 	lds	r25, 0x010A
 a70:	8c 3d       	cpi	r24, 0xDC	; 220
 a72:	23 e0       	ldi	r18, 0x03	; 3
 a74:	92 07       	cpc	r25, r18
 a76:	71 f5       	brne	.+92     	; 0xad4 <USB_Device_ProcessControlRequest+0x1e6>
 a78:	83 e0       	ldi	r24, 0x03	; 3
 a7a:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a7c:	8a e2       	ldi	r24, 0x2A	; 42
 a7e:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a80:	4f b7       	in	r20, 0x3f	; 63
 a82:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a84:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a86:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a88:	20 e0       	ldi	r18, 0x00	; 0
 a8a:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a8c:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a8e:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	50 93 57 00 	sts	0x0057, r21
 a96:	e4 91       	lpm	r30, Z
 a98:	20 ff       	sbrs	r18, 0
 a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 a9c:	e2 95       	swap	r30
 a9e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 aa0:	3f 5f       	subi	r19, 0xFF	; 255
 aa2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 aa4:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	ea 30       	cpi	r30, 0x0A	; 10
 aaa:	10 f0       	brcs	.+4      	; 0xab0 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 aac:	c7 96       	adiw	r24, 0x37	; 55
 aae:	01 c0       	rjmp	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x1c4>
 ab0:	c0 96       	adiw	r24, 0x30	; 48
 ab2:	8d 93       	st	X+, r24
 ab4:	9d 93       	st	X+, r25
 ab6:	2f 5f       	subi	r18, 0xFF	; 255
 ab8:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aba:	49 f7       	brne	.-46     	; 0xa8e <USB_Device_ProcessControlRequest+0x1a0>
 abc:	4f bf       	out	0x3f, r20	; 63
 abe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac2:	87 7f       	andi	r24, 0xF7	; 247
 ac4:	80 93 e8 00 	sts	0x00E8, r24
 ac8:	6a e2       	ldi	r22, 0x2A	; 42
 aca:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 acc:	ce 01       	movw	r24, r28
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	a1 dc       	rcall	.-1726   	; 0x414 <Endpoint_Write_Control_Stream_LE>
 ad2:	12 c0       	rjmp	.+36     	; 0xaf8 <USB_Device_ProcessControlRequest+0x20a>
 ad4:	ae 01       	movw	r20, r28
 ad6:	4f 5f       	subi	r20, 0xFF	; 255
 ad8:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ada:	60 91 0b 01 	lds	r22, 0x010B
 ade:	0f dc       	rcall	.-2018   	; 0x2fe <CALLBACK_USB_GetDescriptor>
 ae0:	00 97       	sbiw	r24, 0x00	; 0
 ae2:	09 f4       	brne	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x1f8>
 ae4:	3d c0       	rjmp	.+122    	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 ae6:	20 91 e8 00 	lds	r18, 0x00E8
 aea:	27 7f       	andi	r18, 0xF7	; 247
 aec:	20 93 e8 00 	sts	0x00E8, r18
 af0:	bc 01       	movw	r22, r24
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	9a 81       	ldd	r25, Y+2	; 0x02
 af6:	eb dc       	rcall	.-1578   	; 0x4ce <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 af8:	80 91 e8 00 	lds	r24, 0x00E8
 afc:	8b 77       	andi	r24, 0x7B	; 123
 afe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b02:	2e c0       	rjmp	.+92     	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 b04:	90 38       	cpi	r25, 0x80	; 128
 b06:	61 f5       	brne	.+88     	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 b08:	80 91 e8 00 	lds	r24, 0x00E8
 b0c:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b0e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b12:	80 91 02 01 	lds	r24, 0x0102
 b16:	80 93 f1 00 	sts	0x00F1, r24
 b1a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b1e:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b24:	69 dd       	rcall	.-1326   	; 0x5f8 <Endpoint_ClearStatusStage>
 b26:	1c c0       	rjmp	.+56     	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 b28:	91 11       	cpse	r25, r1
 b2a:	1a c0       	rjmp	.+52     	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
 b2c:	90 91 09 01 	lds	r25, 0x0109
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b30:	92 30       	cpi	r25, 0x02	; 2
 b32:	b0 f4       	brcc	.+44     	; 0xb60 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b34:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b38:	87 7f       	andi	r24, 0xF7	; 247
 b3a:	80 93 e8 00 	sts	0x00E8, r24
 b3e:	90 93 02 01 	sts	0x0102, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b42:	5a dd       	rcall	.-1356   	; 0x5f8 <Endpoint_ClearStatusStage>
 b44:	80 91 02 01 	lds	r24, 0x0102
 b48:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <USB_Device_ProcessControlRequest+0x266>
 b4c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 b50:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <USB_Device_ProcessControlRequest+0x26a>
 b54:	84 e0       	ldi	r24, 0x04	; 4
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x26c>
 b58:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b5a:	80 93 06 01 	sts	0x0106, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b5e:	37 db       	rcall	.-2450   	; 0x1ce <EVENT_USB_Device_ConfigurationChanged>
 b60:	80 91 e8 00 	lds	r24, 0x00E8
 b64:	83 ff       	sbrs	r24, 3
 b66:	0a c0       	rjmp	.+20     	; 0xb7c <USB_Device_ProcessControlRequest+0x28e>
 b68:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 b6c:	87 7f       	andi	r24, 0xF7	; 247
 b6e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b72:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b76:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b78:	80 93 eb 00 	sts	0x00EB, r24
 b7c:	aa 96       	adiw	r28, 0x2a	; 42
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b82:	de bf       	out	0x3e, r29	; 62
 b84:	0f be       	out	0x3f, r0	; 63
 b86:	cd bf       	out	0x3d, r28	; 61
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b8c:	1f 91       	pop	r17
 b8e:	08 95       	ret

00000b90 <USB_Event_Stub>:
 b90:	08 95       	ret

00000b92 <USB_USBTask>:
 b92:	cf 93       	push	r28
 b94:	80 91 06 01 	lds	r24, 0x0106
 b98:	88 23       	and	r24, r24
 b9a:	a9 f0       	breq	.+42     	; 0xbc6 <USB_USBTask+0x34>
 b9c:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ba0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ba2:	90 91 ec 00 	lds	r25, 0x00EC
 ba6:	90 ff       	sbrs	r25, 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <USB_USBTask+0x1c>
 baa:	90 e8       	ldi	r25, 0x80	; 128
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <USB_USBTask+0x1e>
 bae:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bb0:	c9 2f       	mov	r28, r25
 bb2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bb4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bb8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 bbc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 bbe:	97 de       	rcall	.-722    	; 0x8ee <USB_Device_ProcessControlRequest>
 bc0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bc2:	c0 93 e9 00 	sts	0x00E9, r28
 bc6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>

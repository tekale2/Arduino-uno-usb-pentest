
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001a2c  00001ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800122  00800122  00001ae2  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  0000446c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000557b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f583  00000000  00000000  00005e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037c6  00000000  00000000  000153a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000056be  00000000  00000000  00018b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001880  00000000  00000000  0001e22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005186  00000000  00000000  0001faac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ada3  00000000  00000000  00024c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002f9d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	ef c5       	rjmp	.+3038   	; 0xc08 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__vector_21>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4613>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4606>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4601>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4599>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4596>:
				ReportSize     -= 2;
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4594>:
				ReportSize     -= 1;
				ReportData     += 1;
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4592>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 4f 75 74 70 75 74 20 44 65 76 69 63 65 2e     o Output Device.
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d7:	0d 0a 00                                            ...

000001da <__c.4590>:
     1da:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1ea:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1fa:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000207 <__c.4583>:
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     207:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     217:	68 65 64 2e 0d 0a 00                                hed....

0000021e <__c.4578>:
     21e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22e:	0d 0a 00                                            ...

00000231 <__c.4560>:
     231:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     241:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     251:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000025e <__ctors_end>:
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	ec e2       	ldi	r30, 0x2C	; 44
				break;
     272:	fa e1       	ldi	r31, 0x1A	; 26

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a2 32       	cpi	r26, 0x22	; 34
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
				break;
     284:	11 e0       	ldi	r17, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	a2 e2       	ldi	r26, 0x22	; 34
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a7 34       	cpi	r26, 0x47	; 71
				break;
     290:	b1 07       	cpc	r27, r17

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	e5 d0       	rcall	.+458    	; 0x460 <main>
     296:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <LEDs_SetAllLEDs>:
     29c:	9b b1       	in	r25, 0x0b	; 11
     29e:	9f 70       	andi	r25, 0x0F	; 15
				break;
     2a0:	98 2b       	or	r25, r24

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	9b b9       	out	0x0b, r25	; 11
     2a4:	08 95       	ret

000002a6 <__vector_21>:
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
				break;
     2ac:	0f 92       	push	r0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	11 24       	eor	r1, r1
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	1f 93       	push	r17
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
				break;
     2bc:	5f 93       	push	r21
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	cf 93       	push	r28
				break;
     2cc:	df 93       	push	r29
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
     2d2:	80 91 a7 00 	lds	r24, 0x00A7
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	90 91 aa 00 	lds	r25, 0x00AA

				if (ParserData->UsingReportIDs)
     2dc:	90 ff       	sbrs	r25, 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__vector_21+0x3e>
     2e0:	90 e8       	ldi	r25, 0x80	; 128
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <__vector_21+0x40>
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	19 2f       	mov	r17, r25
     2e8:	18 2b       	or	r17, r24
     2ea:	80 91 32 01 	lds	r24, 0x0132
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ee:	8b 30       	cpi	r24, 0x0B	; 11
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <__vector_21+0x4e>
     2f2:	58 c0       	rjmp	.+176    	; 0x3a4 <__vector_21+0xfe>
     2f4:	80 91 0c 01 	lds	r24, 0x010C
     2f8:	88 23       	and	r24, r24
     2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_21+0x58>
     2fc:	53 c0       	rjmp	.+166    	; 0x3a4 <__vector_21+0xfe>
     2fe:	80 91 06 01 	lds	r24, 0x0106
     302:	8f 70       	andi	r24, 0x0F	; 15
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	80 93 a7 00 	sts	0x00A7, r24
     308:	80 91 a6 00 	lds	r24, 0x00A6
     30c:	82 ff       	sbrs	r24, 2
     30e:	4a c0       	rjmp	.+148    	; 0x3a4 <__vector_21+0xfe>
     310:	90 91 24 01 	lds	r25, 0x0124
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	89 0f       	add	r24, r25
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	80 93 24 01 	sts	0x0124, r24
     31c:	9f 3f       	cpi	r25, 0xFF	; 255
     31e:	49 f4       	brne	.+18     	; 0x332 <__vector_21+0x8c>
     320:	80 91 22 01 	lds	r24, 0x0122
     324:	90 91 23 01 	lds	r25, 0x0123
     328:	90 58       	subi	r25, 0x80	; 128
     32a:	90 93 23 01 	sts	0x0123, r25
     32e:	80 93 22 01 	sts	0x0122, r24
     332:	62 99       	sbic	0x0c, 2	; 12
     334:	05 c0       	rjmp	.+10     	; 0x340 <__vector_21+0x9a>
     336:	d0 91 22 01 	lds	r29, 0x0122
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     33a:	c0 91 23 01 	lds	r28, 0x0123
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	02 c0       	rjmp	.+4      	; 0x344 <__vector_21+0x9e>
     340:	d0 e0       	ldi	r29, 0x00	; 0
     342:	c0 e0       	ldi	r28, 0x00	; 0
     344:	d0 93 af 00 	sts	0x00AF, r29
     348:	c0 93 af 00 	sts	0x00AF, r28
     34c:	80 91 a6 00 	lds	r24, 0x00A6
     350:	85 fd       	sbrc	r24, 5
     352:	10 c0       	rjmp	.+32     	; 0x374 <__vector_21+0xce>
     354:	80 91 a9 00 	lds	r24, 0x00A9
     358:	8f 7b       	andi	r24, 0xBF	; 191
     35a:	80 93 a9 00 	sts	0x00A9, r24
     35e:	80 91 a6 00 	lds	r24, 0x00A6
     362:	8b 77       	andi	r24, 0x7B	; 123
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	80 93 a6 00 	sts	0x00A6, r24
     368:	9e d3       	rcall	.+1852   	; 0xaa6 <Pipe_WaitUntilReady>
     36a:	80 91 a9 00 	lds	r24, 0x00A9
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	80 64       	ori	r24, 0x40	; 64
     370:	80 93 a9 00 	sts	0x00A9, r24
     374:	d0 93 af 00 	sts	0x00AF, r29

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	c0 93 af 00 	sts	0x00AF, r28
     37c:	80 91 a6 00 	lds	r24, 0x00A6
     380:	85 fd       	sbrc	r24, 5
     382:	10 c0       	rjmp	.+32     	; 0x3a4 <__vector_21+0xfe>
     384:	80 91 a9 00 	lds	r24, 0x00A9
				break;
     388:	8f 7b       	andi	r24, 0xBF	; 191

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	80 93 a9 00 	sts	0x00A9, r24
     38e:	80 91 a6 00 	lds	r24, 0x00A6
     392:	8b 77       	andi	r24, 0x7B	; 123
     394:	80 93 a6 00 	sts	0x00A6, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     398:	86 d3       	rcall	.+1804   	; 0xaa6 <Pipe_WaitUntilReady>
     39a:	80 91 a9 00 	lds	r24, 0x00A9
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	80 93 a9 00 	sts	0x00A9, r24
     3a4:	1f 70       	andi	r17, 0x0F	; 15
     3a6:	10 93 a7 00 	sts	0x00A7, r17
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	df 91       	pop	r29
				break;
     3b0:	cf 91       	pop	r28
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	1f 91       	pop	r17
     3c8:	0f 90       	pop	r0
     3ca:	0b be       	out	0x3b, r0	; 59
     3cc:	0f 90       	pop	r0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1

					while (CurrCollectionPath->Parent != NULL)
     3d4:	18 95       	reti

000003d6 <SetupHardware>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	84 b7       	in	r24, 0x34	; 52
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	87 7f       	andi	r24, 0xF7	; 247
     3de:	84 bf       	out	0x34, r24	; 52
     3e0:	88 e1       	ldi	r24, 0x18	; 24
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	80 93 60 00 	sts	0x0060, r24
     3ea:	10 92 60 00 	sts	0x0060, r1
     3ee:	0f be       	out	0x3f, r0	; 63
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	80 e8       	ldi	r24, 0x80	; 128
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	80 93 61 00 	sts	0x0061, r24
     3fc:	90 93 61 00 	sts	0x0061, r25
     400:	0f be       	out	0x3f, r0	; 63
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 cd 00 	sts	0x00CD, r25
				}

				CurrCollectionPath->Type       = ReportItemData;
     40a:	80 93 cc 00 	sts	0x00CC, r24
     40e:	86 e0       	ldi	r24, 0x06	; 6
     410:	80 93 ca 00 	sts	0x00CA, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	10 92 c8 00 	sts	0x00C8, r1
     418:	88 e1       	ldi	r24, 0x18	; 24
     41a:	80 93 c9 00 	sts	0x00C9, r24
     41e:	53 9a       	sbi	0x0a, 3	; 10

				if (UsageListSize)
     420:	5a 9a       	sbi	0x0b, 2	; 11
     422:	8a b1       	in	r24, 0x0a	; 10
     424:	80 6f       	ori	r24, 0xF0	; 240
     426:	8a b9       	out	0x0a, r24	; 10
     428:	8b b1       	in	r24, 0x0b	; 11
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	8b b9       	out	0x0b, r24	; 11
     42e:	6a 98       	cbi	0x0d, 2	; 13
     430:	72 9a       	sbi	0x0e, 2	; 14
     432:	ca e7       	ldi	r28, 0x7A	; 122
     434:	d0 e0       	ldi	r29, 0x00	; 0
     436:	85 ea       	ldi	r24, 0xA5	; 165
     438:	88 83       	st	Y, r24
     43a:	82 98       	cbi	0x10, 2	; 16
     43c:	ee e7       	ldi	r30, 0x7E	; 126
     43e:	f0 e0       	ldi	r31, 0x00	; 0

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	80 81       	ld	r24, Z
     442:	84 60       	ori	r24, 0x04	; 4
     444:	80 83       	st	Z, r24
     446:	c5 d3       	rcall	.+1930   	; 0xbd2 <USB_Init>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
     44c:	e9 d7       	rcall	.+4050   	; 0x1420 <Serial_CreateStream>
     44e:	82 e4       	ldi	r24, 0x42	; 66
     450:	80 93 7c 00 	sts	0x007C, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	88 81       	ld	r24, Y
     456:	80 64       	ori	r24, 0x40	; 64
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	88 83       	st	Y, r24
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <main>:
     460:	ba df       	rcall	.-140    	; 0x3d6 <SetupHardware>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	81 e3       	ldi	r24, 0x31	; 49
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
     46a:	80 e1       	ldi	r24, 0x10	; 16
     46c:	17 df       	rcall	.-466    	; 0x29c <LEDs_SetAllLEDs>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	78 94       	sei
     470:	69 d6       	rcall	.+3282   	; 0x1144 <USB_USBTask>
     472:	fe cf       	rjmp	.-4      	; 0x470 <main+0x10>

00000474 <EVENT_USB_Host_DeviceAttached>:
     474:	8e e1       	ldi	r24, 0x1E	; 30
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
     47c:	80 ea       	ldi	r24, 0xA0	; 160
     47e:	0e cf       	rjmp	.-484    	; 0x29c <LEDs_SetAllLEDs>

00000480 <EVENT_USB_Host_DeviceUnattached>:
     480:	87 e0       	ldi	r24, 0x07	; 7
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
     488:	80 e1       	ldi	r24, 0x10	; 16
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	08 cf       	rjmp	.-496    	; 0x29c <LEDs_SetAllLEDs>

0000048c <EVENT_USB_Host_DeviceEnumerationComplete>:
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	c5 50       	subi	r28, 0x05	; 5
     49e:	d2 40       	sbci	r29, 0x02	; 2
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	80 ea       	ldi	r24, 0xA0	; 160
				break;
     4ac:	f7 de       	rcall	.-530    	; 0x29c <LEDs_SetAllLEDs>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	ae 01       	movw	r20, r28
     4b4:	4f 5f       	subi	r20, 0xFF	; 255
     4b6:	5f 4f       	sbci	r21, 0xFF	; 255
     4b8:	be 01       	movw	r22, r28
     4ba:	6c 5f       	subi	r22, 0xFC	; 252
     4bc:	7d 4f       	sbci	r23, 0xFD	; 253
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	52 d4       	rcall	.+2212   	; 0xd66 <USB_Host_GetDeviceConfigDescriptor>
     4c2:	88 23       	and	r24, r24
     4c4:	19 f0       	breq	.+6      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     4c6:	8a ed       	ldi	r24, 0xDA	; 218
     4c8:	91 e0       	ldi	r25, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	17 c0       	rjmp	.+46     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     4cc:	cc 5f       	subi	r28, 0xFC	; 252
     4ce:	dd 4f       	sbci	r29, 0xFD	; 253
     4d0:	68 81       	ld	r22, Y
     4d2:	79 81       	ldd	r23, Y+1	; 0x01
     4d4:	c4 50       	subi	r28, 0x04	; 4
     4d6:	d2 40       	sbci	r29, 0x02	; 2
     4d8:	ae 01       	movw	r20, r28
     4da:	4f 5f       	subi	r20, 0xFF	; 255
     4dc:	5f 4f       	sbci	r21, 0xFF	; 255
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	6d d6       	rcall	.+3290   	; 0x11be <Audio_Host_ConfigurePipes>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	88 23       	and	r24, r24
     4e6:	19 f0       	breq	.+6      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     4e8:	87 ea       	ldi	r24, 0xA7	; 167
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	e9 d5       	rcall	.+3026   	; 0x10c4 <USB_Host_SetDeviceConfiguration>
     4f2:	88 23       	and	r24, r24
     4f4:	29 f0       	breq	.+10     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4f6:	81 e8       	ldi	r24, 0x81	; 129
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	d3 d7       	rcall	.+4006   	; 0x14a2 <puts_P>
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	3c c0       	rjmp	.+120    	; 0x578 <EVENT_USB_Host_DeviceEnumerationComplete+0xec>
     500:	61 e0       	ldi	r22, 0x01	; 1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	91 e0       	ldi	r25, 0x01	; 1
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	2b d7       	rcall	.+3670   	; 0x135e <Audio_Host_StartStopStreaming>
     508:	88 23       	and	r24, r24
     50a:	19 f0       	breq	.+6      	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     50c:	82 e6       	ldi	r24, 0x62	; 98
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	22 c0       	rjmp	.+68     	; 0x556 <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	cf 5f       	subi	r28, 0xFF	; 255
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	dd 4f       	sbci	r29, 0xFD	; 253
     518:	88 83       	st	Y, r24
     51a:	c1 50       	subi	r28, 0x01	; 1
     51c:	d2 40       	sbci	r29, 0x02	; 2

					if (UsageListSize)
     51e:	8b eb       	ldi	r24, 0xBB	; 187
     520:	ce 5f       	subi	r28, 0xFE	; 254
     522:	dd 4f       	sbci	r29, 0xFD	; 253
     524:	88 83       	st	Y, r24
     526:	c2 50       	subi	r28, 0x02	; 2
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	d2 40       	sbci	r29, 0x02	; 2
     52a:	cd 5f       	subi	r28, 0xFD	; 253
     52c:	dd 4f       	sbci	r29, 0xFD	; 253
     52e:	18 82       	st	Y, r1
     530:	c3 50       	subi	r28, 0x03	; 3
     532:	d2 40       	sbci	r29, 0x02	; 2
     534:	ce 01       	movw	r24, r28
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	9d 4f       	sbci	r25, 0xFD	; 253
     53a:	7c 01       	movw	r14, r24
     53c:	03 e0       	ldi	r16, 0x03	; 3

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	10 e0       	ldi	r17, 0x00	; 0
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	60 91 06 01 	lds	r22, 0x0106
     548:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	15 d7       	rcall	.+3626   	; 0x1378 <Audio_Host_GetSetEndpointProperty>
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	88 e3       	ldi	r24, 0x38	; 56
     554:	91 e0       	ldi	r25, 0x01	; 1
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	a5 d7       	rcall	.+3914   	; 0x14a2 <puts_P>
     558:	80 e9       	ldi	r24, 0x90	; 144
     55a:	a0 de       	rcall	.-704    	; 0x29c <LEDs_SetAllLEDs>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	b2 d5       	rcall	.+2916   	; 0x10c4 <USB_Host_SetDeviceConfiguration>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	0c c0       	rjmp	.+24     	; 0x57a <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	80 93 6e 00 	sts	0x006E, r24
     568:	93 e1       	ldi	r25, 0x13	; 19
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	97 bd       	out	0x27, r25	; 39
     56c:	84 bd       	out	0x24, r24	; 36
     56e:	85 bd       	out	0x25, r24	; 37
     570:	8d e1       	ldi	r24, 0x1D	; 29
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	96 d7       	rcall	.+3884   	; 0x14a2 <puts_P>
     576:	80 e6       	ldi	r24, 0x60	; 96
     578:	91 de       	rcall	.-734    	; 0x29c <LEDs_SetAllLEDs>
     57a:	cb 5f       	subi	r28, 0xFB	; 251
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	dd 4f       	sbci	r29, 0xFD	; 253
     57e:	0f b6       	in	r0, 0x3f	; 63
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	ef 90       	pop	r14
     594:	08 95       	ret

00000596 <EVENT_USB_Host_HostError>:
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	1f 92       	push	r1
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	af d2       	rcall	.+1374   	; 0xb02 <USB_Disable>
     5a4:	1f 92       	push	r1
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	8f 93       	push	r24
     5aa:	8e ee       	ldi	r24, 0xEE	; 238

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	54 d7       	rcall	.+3752   	; 0x145c <printf_P>
     5b4:	80 e9       	ldi	r24, 0x90	; 144
     5b6:	72 de       	rcall	.-796    	; 0x29c <LEDs_SetAllLEDs>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <EVENT_USB_Host_HostError+0x2a>

000005c2 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5c2:	90 91 32 01 	lds	r25, 0x0132
     5c6:	1f 92       	push	r1
     5c8:	9f 93       	push	r25
     5ca:	1f 92       	push	r1
     5cc:	6f 93       	push	r22
     5ce:	1f 92       	push	r1
     5d0:	8f 93       	push	r24
     5d2:	88 e9       	ldi	r24, 0x98	; 152
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	40 d7       	rcall	.+3712   	; 0x145c <printf_P>
     5dc:	8d b7       	in	r24, 0x3d	; 61
     5de:	9e b7       	in	r25, 0x3e	; 62
     5e0:	08 96       	adiw	r24, 0x08	; 8
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	9e bf       	out	0x3e, r25	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	8d bf       	out	0x3d, r24	; 61
     5ec:	80 e9       	ldi	r24, 0x90	; 144
     5ee:	56 ce       	rjmp	.-852    	; 0x29c <LEDs_SetAllLEDs>

000005f0 <USB_Host_ResetDevice>:
     5f0:	80 91 9e 00 	lds	r24, 0x009E

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	81 70       	andi	r24, 0x01	; 1
     5f6:	90 91 a0 00 	lds	r25, 0x00A0
     5fa:	9d 7f       	andi	r25, 0xFD	; 253
     5fc:	90 93 a0 00 	sts	0x00A0, r25
					  return HID_PARSE_InsufficientReportItems;
     600:	90 91 9e 00 	lds	r25, 0x009E

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	92 60       	ori	r25, 0x02	; 2
     606:	90 93 9e 00 	sts	0x009E, r25
     60a:	90 91 9e 00 	lds	r25, 0x009E
     60e:	91 fd       	sbrc	r25, 1
     610:	fc cf       	rjmp	.-8      	; 0x60a <USB_Host_ResetDevice+0x1a>
     612:	90 91 9e 00 	lds	r25, 0x009E
     616:	91 60       	ori	r25, 0x01	; 1
     618:	90 93 9e 00 	sts	0x009E, r25
     61c:	10 92 28 01 	sts	0x0128, r1
     620:	90 91 a0 00 	lds	r25, 0x00A0
     624:	90 72       	andi	r25, 0x20	; 32
     626:	20 91 a0 00 	lds	r18, 0x00A0
     62a:	2f 7d       	andi	r18, 0xDF	; 223
     62c:	20 93 a0 00 	sts	0x00A0, r18
     630:	20 91 9f 00 	lds	r18, 0x009F
     634:	2f 7d       	andi	r18, 0xDF	; 223
     636:	20 93 9f 00 	sts	0x009F, r18
     63a:	2a e0       	ldi	r18, 0x0A	; 10
     63c:	30 91 9f 00 	lds	r19, 0x009F
     640:	35 ff       	sbrs	r19, 5
     642:	0b c0       	rjmp	.+22     	; 0x65a <USB_Host_ResetDevice+0x6a>
     644:	20 91 9f 00 	lds	r18, 0x009F
     648:	2f 7d       	andi	r18, 0xDF	; 223
     64a:	20 93 9f 00 	sts	0x009F, r18
     64e:	20 91 9f 00 	lds	r18, 0x009F
     652:	2d 7f       	andi	r18, 0xFD	; 253
     654:	20 93 9f 00 	sts	0x009F, r18
     658:	08 c0       	rjmp	.+16     	; 0x66a <USB_Host_ResetDevice+0x7a>
     65a:	ef ec       	ldi	r30, 0xCF	; 207
     65c:	f7 e0       	ldi	r31, 0x07	; 7
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <USB_Host_ResetDevice+0x6e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <USB_Host_ResetDevice+0x74>
     664:	00 00       	nop
     666:	21 50       	subi	r18, 0x01	; 1
     668:	49 f7       	brne	.-46     	; 0x63c <USB_Host_ResetDevice+0x4c>
     66a:	99 23       	and	r25, r25
     66c:	29 f0       	breq	.+10     	; 0x678 <USB_Host_ResetDevice+0x88>
     66e:	90 91 a0 00 	lds	r25, 0x00A0
     672:	90 62       	ori	r25, 0x20	; 32
     674:	90 93 a0 00 	sts	0x00A0, r25
     678:	81 11       	cpse	r24, r1
     67a:	05 c0       	rjmp	.+10     	; 0x686 <USB_Host_ResetDevice+0x96>
     67c:	80 91 9e 00 	lds	r24, 0x009E
     680:	8e 7f       	andi	r24, 0xFE	; 254
     682:	80 93 9e 00 	sts	0x009E, r24
     686:	80 91 a0 00 	lds	r24, 0x00A0
					  ParserData->TotalReportItems++;
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	80 93 a0 00 	sts	0x00A0, r24
     690:	08 95       	ret

00000692 <USB_Host_WaitMS>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	20 91 9e 00 	lds	r18, 0x009E
     696:	21 70       	andi	r18, 0x01	; 1
     698:	90 91 a0 00 	lds	r25, 0x00A0
     69c:	90 72       	andi	r25, 0x20	; 32
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	30 91 a0 00 	lds	r19, 0x00A0
     6a2:	3f 7d       	andi	r19, 0xDF	; 223
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	30 93 a0 00 	sts	0x00A0, r19
     6a8:	30 91 9f 00 	lds	r19, 0x009F
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6ac:	3f 7d       	andi	r19, 0xDF	; 223
     6ae:	30 93 9f 00 	sts	0x009F, r19
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	30 91 9e 00 	lds	r19, 0x009E
     6b6:	31 60       	ori	r19, 0x01	; 1
     6b8:	30 93 9e 00 	sts	0x009E, r19
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	88 23       	and	r24, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	39 f1       	breq	.+78     	; 0x70e <USB_Host_WaitMS+0x7c>
     6c0:	30 91 9f 00 	lds	r19, 0x009F
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	35 ff       	sbrs	r19, 5
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <USB_Host_WaitMS+0x42>
     6c8:	30 91 9f 00 	lds	r19, 0x009F
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6cc:	3f 7d       	andi	r19, 0xDF	; 223

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	30 93 9f 00 	sts	0x009F, r19
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	81 50       	subi	r24, 0x01	; 1
     6d4:	30 91 32 01 	lds	r19, 0x0132
}
     6d8:	31 30       	cpi	r19, 0x01	; 1
     6da:	c1 f0       	breq	.+48     	; 0x70c <USB_Host_WaitMS+0x7a>
     6dc:	30 91 a6 00 	lds	r19, 0x00A6
     6e0:	34 ff       	sbrs	r19, 4
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <USB_Host_WaitMS+0x64>
     6e4:	10 92 f5 00 	sts	0x00F5, r1
     6e8:	80 91 a6 00 	lds	r24, 0x00A6
     6ec:	8f 7e       	andi	r24, 0xEF	; 239
     6ee:	80 93 a6 00 	sts	0x00A6, r24
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <USB_Host_WaitMS+0x7c>
     6f6:	30 91 a6 00 	lds	r19, 0x00A6
     6fa:	31 ff       	sbrs	r19, 1
     6fc:	df cf       	rjmp	.-66     	; 0x6bc <USB_Host_WaitMS+0x2a>
     6fe:	80 91 a6 00 	lds	r24, 0x00A6
     702:	8d 7f       	andi	r24, 0xFD	; 253
     704:	80 93 a6 00 	sts	0x00A6, r24
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	01 c0       	rjmp	.+2      	; 0x70e <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     70c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     70e:	21 11       	cpse	r18, r1
     710:	05 c0       	rjmp	.+10     	; 0x71c <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     712:	20 91 9e 00 	lds	r18, 0x009E
     716:	2e 7f       	andi	r18, 0xFE	; 254
     718:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     71c:	99 23       	and	r25, r25
     71e:	29 f0       	breq	.+10     	; 0x72a <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     720:	90 91 a0 00 	lds	r25, 0x00A0
     724:	90 62       	ori	r25, 0x20	; 32
     726:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     72a:	08 95       	ret

0000072c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	28 97       	sbiw	r28, 0x08	; 8
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     744:	80 91 32 01 	lds	r24, 0x0132
     748:	85 30       	cpi	r24, 0x05	; 5
     74a:	09 f4       	brne	.+2      	; 0x74e <USB_Host_ProcessNextHostState+0x22>
     74c:	9c c0       	rjmp	.+312    	; 0x886 <USB_Host_ProcessNextHostState+0x15a>
     74e:	68 f4       	brcc	.+26     	; 0x76a <USB_Host_ProcessNextHostState+0x3e>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	e1 f1       	breq	.+120    	; 0x7cc <USB_Host_ProcessNextHostState+0xa0>
     754:	18 f4       	brcc	.+6      	; 0x75c <USB_Host_ProcessNextHostState+0x30>
     756:	88 23       	and	r24, r24
     758:	d9 f0       	breq	.+54     	; 0x790 <USB_Host_ProcessNextHostState+0x64>
     75a:	ff c0       	rjmp	.+510    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     75c:	83 30       	cpi	r24, 0x03	; 3
     75e:	09 f4       	brne	.+2      	; 0x762 <USB_Host_ProcessNextHostState+0x36>
     760:	3f c0       	rjmp	.+126    	; 0x7e0 <USB_Host_ProcessNextHostState+0xb4>
     762:	84 30       	cpi	r24, 0x04	; 4
     764:	09 f4       	brne	.+2      	; 0x768 <USB_Host_ProcessNextHostState+0x3c>
     766:	67 c0       	rjmp	.+206    	; 0x836 <USB_Host_ProcessNextHostState+0x10a>
     768:	f8 c0       	rjmp	.+496    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	09 f4       	brne	.+2      	; 0x770 <USB_Host_ProcessNextHostState+0x44>
     76e:	a6 c0       	rjmp	.+332    	; 0x8bc <USB_Host_ProcessNextHostState+0x190>
     770:	08 f4       	brcc	.+2      	; 0x774 <USB_Host_ProcessNextHostState+0x48>
     772:	96 c0       	rjmp	.+300    	; 0x8a0 <USB_Host_ProcessNextHostState+0x174>
     774:	88 30       	cpi	r24, 0x08	; 8
     776:	09 f4       	brne	.+2      	; 0x77a <USB_Host_ProcessNextHostState+0x4e>
     778:	bf c0       	rjmp	.+382    	; 0x8f8 <USB_Host_ProcessNextHostState+0x1cc>
     77a:	89 30       	cpi	r24, 0x09	; 9
     77c:	09 f0       	breq	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x54>
     77e:	ed c0       	rjmp	.+474    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     786:	8a e0       	ldi	r24, 0x0A	; 10
     788:	80 93 32 01 	sts	0x0132, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     78c:	7f de       	rcall	.-770    	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete>
     78e:	e5 c0       	rjmp	.+458    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
			break;
     790:	00 91 26 01 	lds	r16, 0x0126
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     794:	10 91 27 01 	lds	r17, 0x0127
     798:	01 15       	cp	r16, r1
     79a:	11 05       	cpc	r17, r1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <USB_Host_ProcessNextHostState+0x74>
     79e:	dd c0       	rjmp	.+442    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7a2:	77 df       	rcall	.-274    	; 0x692 <USB_Host_WaitMS>
     7a4:	88 23       	and	r24, r24
     7a6:	31 f0       	breq	.+12     	; 0x7b4 <USB_Host_ProcessNextHostState+0x88>
     7a8:	90 91 25 01 	lds	r25, 0x0125
				{
					USB_HostState = PostWaitState;
     7ac:	90 93 32 01 	sts	0x0132, r25
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	c5 c0       	rjmp	.+394    	; 0x93e <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7b4:	01 50       	subi	r16, 0x01	; 1
					break;
     7b6:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     7b8:	10 93 27 01 	sts	0x0127, r17
     7bc:	00 93 26 01 	sts	0x0126, r16
     7c0:	01 2b       	or	r16, r17
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <USB_Host_ProcessNextHostState+0x9a>
     7c4:	ca c0       	rjmp	.+404    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     7c6:	80 91 25 01 	lds	r24, 0x0125
				  USB_HostState = PostWaitState;
     7ca:	07 c0       	rjmp	.+14     	; 0x7da <USB_Host_ProcessNextHostState+0xae>
     7cc:	88 ee       	ldi	r24, 0xE8	; 232
     7ce:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7d0:	90 93 27 01 	sts	0x0127, r25
     7d4:	80 93 26 01 	sts	0x0126, r24
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	80 93 32 01 	sts	0x0132, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7de:	bd c0       	rjmp	.+378    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     7e0:	80 91 26 01 	lds	r24, 0x0126
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7e4:	90 91 27 01 	lds	r25, 0x0127
     7e8:	9c 01       	movw	r18, r24
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	31 09       	sbc	r19, r1
     7ee:	30 93 27 01 	sts	0x0127, r19
     7f2:	20 93 26 01 	sts	0x0126, r18
     7f6:	89 2b       	or	r24, r25
     7f8:	39 f0       	breq	.+14     	; 0x808 <USB_Host_ProcessNextHostState+0xdc>
     7fa:	8f ec       	ldi	r24, 0xCF	; 207
     7fc:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <USB_Host_ProcessNextHostState+0xd2>
     802:	00 c0       	rjmp	.+0      	; 0x804 <USB_Host_ProcessNextHostState+0xd8>
     804:	00 00       	nop
     806:	a9 c0       	rjmp	.+338    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     808:	77 98       	cbi	0x0e, 7	; 14
     80a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     80e:	80 61       	ori	r24, 0x10	; 16
     810:	80 93 d8 00 	sts	0x00D8, r24
     814:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     818:	8b 7f       	andi	r24, 0xFB	; 251
     81a:	80 93 dd 00 	sts	0x00DD, r24
     81e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     822:	80 61       	ori	r24, 0x10	; 16
     824:	80 93 d7 00 	sts	0x00D7, r24
     828:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	80 93 dd 00 	sts	0x00DD, r24
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	d2 cf       	rjmp	.-92     	; 0x7da <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     836:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     83a:	80 ff       	sbrs	r24, 0
     83c:	8e c0       	rjmp	.+284    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     83e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     842:	8e 7f       	andi	r24, 0xFE	; 254
     844:	80 93 9f 00 	sts	0x009F, r24
     848:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     84c:	8d 7f       	andi	r24, 0xFD	; 253
     84e:	80 93 9f 00 	sts	0x009F, r24
     852:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     856:	8d 7f       	andi	r24, 0xFD	; 253
     858:	80 93 df 00 	sts	0x00DF, r24
     85c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     860:	82 60       	ori	r24, 0x02	; 2
     862:	80 93 de 00 	sts	0x00DE, r24
     866:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 93 9e 00 	sts	0x009E, r24
     870:	06 d1       	rcall	.+524    	; 0xa7e <Pipe_ClearPipes>
     872:	10 92 32 01 	sts	0x0132, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     876:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	90 93 27 01 	sts	0x0127, r25
     87e:	80 93 26 01 	sts	0x0126, r24
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	0a c0       	rjmp	.+20     	; 0x89a <USB_Host_ProcessNextHostState+0x16e>
     886:	b4 de       	rcall	.-664    	; 0x5f0 <USB_Host_ResetDevice>
     888:	10 92 32 01 	sts	0x0132, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     88c:	88 ec       	ldi	r24, 0xC8	; 200
     88e:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     890:	90 93 27 01 	sts	0x0127, r25
     894:	80 93 26 01 	sts	0x0126, r24
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 25 01 	sts	0x0125, r24
     89e:	5d c0       	rjmp	.+186    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     8a0:	01 e0       	ldi	r16, 0x01	; 1
     8a2:	20 e4       	ldi	r18, 0x40	; 64
     8a4:	30 e0       	ldi	r19, 0x00	; 0
			break;
     8a6:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	61 d0       	rcall	.+194    	; 0x970 <Pipe_ConfigurePipe>
     8ae:	81 11       	cpse	r24, r1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <USB_Host_ProcessNextHostState+0x18c>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	43 c0       	rjmp	.+134    	; 0x93e <USB_Host_ProcessNextHostState+0x212>
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	8f cf       	rjmp	.-226    	; 0x7da <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8bc:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8be:	e1 e1       	ldi	r30, 0x11	; 17
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8c2:	aa e2       	ldi	r26, 0x2A	; 42
     8c4:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8c6:	01 90       	ld	r0, Z+
     8c8:	0d 92       	st	X+, r0
     8ca:	8a 95       	dec	r24
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <USB_Host_ProcessNextHostState+0x19a>
     8ce:	10 92 a7 00 	sts	0x00A7, r1
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	fb d2       	rcall	.+1526   	; 0xece <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8d8:	81 11       	cpse	r24, r1
     8da:	30 c0       	rjmp	.+96     	; 0x93c <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8dc:	88 85       	ldd	r24, Y+8	; 0x08
     8de:	80 93 10 01 	sts	0x0110, r24
     8e2:	86 de       	rcall	.-756    	; 0x5f0 <USB_Host_ResetDevice>
     8e4:	10 92 32 01 	sts	0x0132, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8e8:	88 ec       	ldi	r24, 0xC8	; 200
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	90 93 27 01 	sts	0x0127, r25

			USB_Host_ResetDevice();
     8f0:	80 93 26 01 	sts	0x0126, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8f4:	88 e0       	ldi	r24, 0x08	; 8
     8f6:	d1 cf       	rjmp	.-94     	; 0x89a <USB_Host_ProcessNextHostState+0x16e>
     8f8:	20 91 10 01 	lds	r18, 0x0110
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	01 e0       	ldi	r16, 0x01	; 1
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     906:	34 d0       	rcall	.+104    	; 0x970 <Pipe_ConfigurePipe>
     908:	88 23       	and	r24, r24
     90a:	99 f2       	breq	.-90     	; 0x8b2 <USB_Host_ProcessNextHostState+0x186>
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	e9 e1       	ldi	r30, 0x19	; 25
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	aa e2       	ldi	r26, 0x2A	; 42
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	01 90       	ld	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     91c:	e1 f7       	brne	.-8      	; 0x916 <USB_Host_ProcessNextHostState+0x1ea>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	d5 d2       	rcall	.+1450   	; 0xece <USB_Host_SendControlRequest>
     924:	81 11       	cpse	r24, r1
     926:	0a c0       	rjmp	.+20     	; 0x93c <USB_Host_ProcessNextHostState+0x210>
     928:	10 92 32 01 	sts	0x0132, r1
     92c:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 27 01 	sts	0x0127, r25
     934:	80 93 26 01 	sts	0x0126, r24
     938:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     93a:	af cf       	rjmp	.-162    	; 0x89a <USB_Host_ProcessNextHostState+0x16e>
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	20 91 32 01 	lds	r18, 0x0132
     942:	21 30       	cpi	r18, 0x01	; 1
     944:	51 f0       	breq	.+20     	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
     946:	68 2f       	mov	r22, r24
     948:	89 2f       	mov	r24, r25
     94a:	3b de       	rcall	.-906    	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationFailed>
     94c:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     950:	81 60       	ori	r24, 0x01	; 1
     952:	80 93 dd 00 	sts	0x00DD, r24
     956:	94 dd       	rcall	.-1240   	; 0x480 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     958:	ec d0       	rcall	.+472    	; 0xb32 <USB_ResetInterface>
     95a:	28 96       	adiw	r28, 0x08	; 8
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16

		USB_ResetInterface();
     96e:	08 95       	ret

00000970 <Pipe_ConfigurePipe>:
     970:	0f 93       	push	r16
	}
}
     972:	e8 2f       	mov	r30, r24
     974:	ef 70       	andi	r30, 0x0F	; 15
     976:	87 ff       	sbrs	r24, 7
     978:	02 c0       	rjmp	.+4      	; 0x97e <Pipe_ConfigurePipe+0xe>
     97a:	80 e1       	ldi	r24, 0x10	; 16
     97c:	01 c0       	rjmp	.+2      	; 0x980 <Pipe_ConfigurePipe+0x10>
     97e:	80 e2       	ldi	r24, 0x20	; 32
     980:	e7 30       	cpi	r30, 0x07	; 7
     982:	10 f0       	brcs	.+4      	; 0x988 <Pipe_ConfigurePipe+0x18>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	5a c0       	rjmp	.+180    	; 0xa3c <Pipe_ConfigurePipe+0xcc>
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;

	if (Number >= PIPE_TOTAL_PIPES)
	  return false;

	if (Type == EP_TYPE_CONTROL)
     988:	61 11       	cpse	r22, r1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     98c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     98e:	90 e4       	ldi	r25, 0x40	; 64
     990:	69 9f       	mul	r22, r25
     992:	b0 01       	movw	r22, r0
     994:	11 24       	eor	r1, r1
     996:	4f 70       	andi	r20, 0x0F	; 15
     998:	46 2b       	or	r20, r22
     99a:	48 2b       	or	r20, r24
     99c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     99e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9a2:	5e 13       	cpse	r21, r30
     9a4:	19 c0       	rjmp	.+50     	; 0x9d8 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     9a6:	02 30       	cpi	r16, 0x02	; 2
     9a8:	10 f0       	brcs	.+4      	; 0x9ae <Pipe_ConfigurePipe+0x3e>
     9aa:	76 e0       	ldi	r23, 0x06	; 6
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <Pipe_ConfigurePipe+0x40>
     9ae:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     9b4:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9b6:	82 17       	cp	r24, r18
     9b8:	93 07       	cpc	r25, r19
     9ba:	40 f0       	brcs	.+16     	; 0x9cc <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9bc:	86 2f       	mov	r24, r22
     9be:	82 95       	swap	r24
     9c0:	80 7f       	andi	r24, 0xF0	; 240
     9c2:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9c4:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9c6:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9cc:	65 30       	cpi	r22, 0x05	; 5
     9ce:	b1 f3       	breq	.-20     	; 0x9bc <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     9d0:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	ef cf       	rjmp	.-34     	; 0x9b6 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9d8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9dc:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9e0:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     9e4:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9e8:	81 fd       	sbrc	r24, 1
     9ea:	07 c0       	rjmp	.+14     	; 0x9fa <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ec:	5f 5f       	subi	r21, 0xFF	; 255
     9ee:	57 30       	cpi	r21, 0x07	; 7
     9f0:	b1 f6       	brne	.-84     	; 0x99e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9f2:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	21 c0       	rjmp	.+66     	; 0xa3c <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9fa:	90 91 a9 00 	lds	r25, 0x00A9
     9fe:	9e 7f       	andi	r25, 0xFE	; 254
     a00:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a04:	90 91 ab 00 	lds	r25, 0x00AB
     a08:	9d 7f       	andi	r25, 0xFD	; 253
     a0a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a0e:	90 91 a9 00 	lds	r25, 0x00A9
     a12:	91 60       	ori	r25, 0x01	; 1
     a14:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a18:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a1c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a20:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     a24:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a28:	80 91 a9 00 	lds	r24, 0x00A9
     a2c:	80 62       	ori	r24, 0x20	; 32
     a2e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a32:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a36:	87 fd       	sbrc	r24, 7
     a38:	d9 cf       	rjmp	.-78     	; 0x9ec <Pipe_ConfigurePipe+0x7c>
     a3a:	a4 cf       	rjmp	.-184    	; 0x984 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	f6 2e       	mov	r15, r22
     a4c:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	1f 15       	cp	r17, r15
     a52:	71 f0       	breq	.+28     	; 0xa70 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     a54:	88 81       	ld	r24, Y
     a56:	88 23       	and	r24, r24
     a58:	41 f0       	breq	.+16     	; 0xa6a <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a5a:	29 81       	ldd	r18, Y+1	; 0x01
     a5c:	3a 81       	ldd	r19, Y+2	; 0x02
     a5e:	0d 81       	ldd	r16, Y+5	; 0x05
     a60:	4b 81       	ldd	r20, Y+3	; 0x03
     a62:	6c 81       	ldd	r22, Y+4	; 0x04
     a64:	85 df       	rcall	.-246    	; 0x970 <Pipe_ConfigurePipe>
     a66:	88 23       	and	r24, r24
     a68:	21 f0       	breq	.+8      	; 0xa72 <Pipe_ConfigurePipeTable+0x32>
     a6a:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a6c:	26 96       	adiw	r28, 0x06	; 6
     a6e:	f0 cf       	rjmp	.-32     	; 0xa50 <Pipe_ConfigurePipeTable+0x10>
     a70:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     a72:	df 91       	pop	r29
}
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	08 95       	ret

00000a7e <Pipe_ClearPipes>:
     a7e:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a82:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a84:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a88:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a8c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a90:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a94:	90 91 a9 00 	lds	r25, 0x00A9
     a98:	9e 7f       	andi	r25, 0xFE	; 254
     a9a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	87 30       	cpi	r24, 0x07	; 7
     aa2:	81 f7       	brne	.-32     	; 0xa84 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aa4:	08 95       	ret

00000aa6 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aa6:	80 91 a2 00 	lds	r24, 0x00A2
     aaa:	90 91 a3 00 	lds	r25, 0x00A3
     aae:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab0:	20 91 aa 00 	lds	r18, 0x00AA
     ab4:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab6:	20 31       	cpi	r18, 0x10	; 16
     ab8:	29 f4       	brne	.+10     	; 0xac4 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aba:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     abe:	20 ff       	sbrs	r18, 0
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <Pipe_WaitUntilReady+0x26>
     ac2:	17 c0       	rjmp	.+46     	; 0xaf2 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac4:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ac8:	22 fd       	sbrc	r18, 2
     aca:	13 c0       	rjmp	.+38     	; 0xaf2 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     acc:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad0:	21 fd       	sbrc	r18, 1
     ad2:	11 c0       	rjmp	.+34     	; 0xaf6 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ad4:	20 91 32 01 	lds	r18, 0x0132
     ad8:	21 30       	cpi	r18, 0x01	; 1
     ada:	79 f0       	breq	.+30     	; 0xafa <Pipe_WaitUntilReady+0x54>
     adc:	20 91 a2 00 	lds	r18, 0x00A2
     ae0:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	19 f3       	breq	.-58     	; 0xab0 <Pipe_WaitUntilReady+0xa>
     aea:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aec:	41 f0       	breq	.+16     	; 0xafe <Pipe_WaitUntilReady+0x58>
     aee:	c9 01       	movw	r24, r18
     af0:	df cf       	rjmp	.-66     	; 0xab0 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     afe:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     b00:	08 95       	ret

00000b02 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b02:	75 d0       	rcall	.+234    	; 0xbee <USB_INT_DisableAllInterrupts>
     b04:	7c d0       	rcall	.+248    	; 0xbfe <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b06:	e0 ee       	ldi	r30, 0xE0	; 224
     b08:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b0a:	80 81       	ld	r24, Z
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	80 83       	st	Z, r24
     b10:	e8 ed       	ldi	r30, 0xD8	; 216
     b12:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b14:	80 81       	ld	r24, Z
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	80 83       	st	Z, r24
     b1a:	19 bc       	out	0x29, r1	; 41
     b1c:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b1e:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b20:	8c 91       	ld	r24, X
     b22:	8e 7f       	andi	r24, 0xFE	; 254
     b24:	8c 93       	st	X, r24
     b26:	80 81       	ld	r24, Z
     b28:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b2a:	80 83       	st	Z, r24
     b2c:	10 92 29 01 	sts	0x0129, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b30:	08 95       	ret

00000b32 <USB_ResetInterface>:
     b32:	5d d0       	rcall	.+186    	; 0xbee <USB_INT_DisableAllInterrupts>
     b34:	64 d0       	rcall	.+200    	; 0xbfe <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b36:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b3a:	8f 77       	andi	r24, 0x7F	; 127
     b3c:	80 93 d8 00 	sts	0x00D8, r24
     b40:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     b44:	80 68       	ori	r24, 0x80	; 128
     b46:	80 93 d8 00 	sts	0x00D8, r24
     b4a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 93 d8 00 	sts	0x00D8, r24
     b54:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	80 93 d7 00 	sts	0x00D7, r24
     b5e:	8c e0       	ldi	r24, 0x0C	; 12
     b60:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b62:	8e e0       	ldi	r24, 0x0E	; 14
     b64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b66:	09 b4       	in	r0, 0x29	; 41
     b68:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b6a:	fd cf       	rjmp	.-6      	; 0xb66 <USB_ResetInterface+0x34>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 32 01 	sts	0x0132, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b72:	10 92 28 01 	sts	0x0128, r1
	USB_Host_ConfigurationNumber = 0;
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	80 93 10 01 	sts	0x0110, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	80 93 d8 00 	sts	0x00D8, r24
     b86:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 93 dd 00 	sts	0x00DD, r24
     b90:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	80 93 dd 00 	sts	0x00DD, r24
     b9a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	80 93 d7 00 	sts	0x00D7, r24
     ba4:	6f 9a       	sbi	0x0d, 7	; 13
     ba6:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     ba8:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	80 93 de 00 	sts	0x00DE, r24
     bb2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	80 93 de 00 	sts	0x00DE, r24
     bbc:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	80 93 e0 00 	sts	0x00E0, r24
     bc6:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     bca:	80 61       	ori	r24, 0x10	; 16
     bcc:	80 93 d8 00 	sts	0x00D8, r24
     bd0:	08 95       	ret

00000bd2 <USB_Init>:
     bd2:	e8 ed       	ldi	r30, 0xD8	; 216
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 7e       	andi	r24, 0xEF	; 239
     bda:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     bdc:	e7 ed       	ldi	r30, 0xD7	; 215
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	81 60       	ori	r24, 0x01	; 1
     be4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 29 01 	sts	0x0129, r24

	USB_ResetInterface();
     bec:	a2 cf       	rjmp	.-188    	; 0xb32 <USB_ResetInterface>

00000bee <USB_INT_DisableAllInterrupts>:
     bee:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8c 7f       	andi	r24, 0xFC	; 252
     bf6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bf8:	10 92 a0 00 	sts	0x00A0, r1
     bfc:	08 95       	ret

00000bfe <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bfe:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c02:	10 92 9f 00 	sts	0x009F, r1
     c06:	08 95       	ret

00000c08 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c08:	1f 92       	push	r1
     c0a:	0f 92       	push	r0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	0b b6       	in	r0, 0x3b	; 59
     c14:	0f 92       	push	r0
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c2e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c32:	85 ff       	sbrs	r24, 5
     c34:	0a c0       	rjmp	.+20     	; 0xc4a <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c36:	80 91 a0 00 	lds	r24, 0x00A0
     c3a:	85 ff       	sbrs	r24, 5
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c3e:	80 91 9f 00 	lds	r24, 0x009F
     c42:	8f 7d       	andi	r24, 0xDF	; 223
     c44:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c48:	1a d1       	rcall	.+564    	; 0xe7e <USB_Event_Stub>
     c4a:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c4e:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c50:	15 c0       	rjmp	.+42     	; 0xc7c <__vector_10+0x74>
     c52:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c56:	81 ff       	sbrs	r24, 1
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <__vector_10+0x74>
     c5a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	80 93 9f 00 	sts	0x009F, r24
     c64:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 93 9f 00 	sts	0x009F, r24
     c6e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c72:	8d 7f       	andi	r24, 0xFD	; 253
     c74:	80 93 a0 00 	sts	0x00A0, r24
     c78:	03 dc       	rcall	.-2042   	; 0x480 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c7a:	5b df       	rcall	.-330    	; 0xb32 <USB_ResetInterface>
     c7c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     c80:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c82:	15 c0       	rjmp	.+42     	; 0xcae <__vector_10+0xa6>
     c84:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c88:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <__vector_10+0xa6>
     c8c:	80 91 df 00 	lds	r24, 0x00DF
     c90:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c92:	80 93 df 00 	sts	0x00DF, r24
     c96:	77 98       	cbi	0x0e, 7	; 14
     c98:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c9c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c9e:	80 93 dd 00 	sts	0x00DD, r24
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	78 dc       	rcall	.-1808   	; 0x596 <EVENT_USB_Host_HostError>
     ca6:	ec db       	rcall	.-2088   	; 0x480 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 32 01 	sts	0x0132, r24
		EVENT_USB_Host_DeviceUnattached();
     cae:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     cb2:	80 ff       	sbrs	r24, 0
     cb4:	17 c0       	rjmp	.+46     	; 0xce4 <__vector_10+0xdc>
     cb6:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cba:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cbc:	13 c0       	rjmp	.+38     	; 0xce4 <__vector_10+0xdc>
     cbe:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cc8:	80 91 de 00 	lds	r24, 0x00DE
     ccc:	8e 7f       	andi	r24, 0xFE	; 254
     cce:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     cd2:	d0 db       	rcall	.-2144   	; 0x474 <EVENT_USB_Host_DeviceAttached>
     cd4:	80 91 a0 00 	lds	r24, 0x00A0
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cde:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ce0:	80 93 32 01 	sts	0x0132, r24
     ce4:	80 91 df 00 	lds	r24, 0x00DF
     ce8:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cea:	0e c0       	rjmp	.+28     	; 0xd08 <__vector_10+0x100>
     cec:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cf0:	82 ff       	sbrs	r24, 2
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cf4:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cf8:	8b 7f       	andi	r24, 0xFB	; 251
     cfa:	80 93 df 00 	sts	0x00DF, r24
     cfe:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	5f dc       	rcall	.-1858   	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationFailed>
     d04:	bd db       	rcall	.-2182   	; 0x480 <EVENT_USB_Host_DeviceUnattached>
     d06:	15 df       	rcall	.-470    	; 0xb32 <USB_ResetInterface>
     d08:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23

		USB_ResetInterface();
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0b be       	out	0x3b, r0	; 59
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <USB_GetNextDescriptor>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	fc 01       	movw	r30, r24
     d34:	eb 01       	movw	r28, r22
     d36:	a8 81       	ld	r26, Y
     d38:	b9 81       	ldd	r27, Y+1	; 0x01
     d3a:	8c 91       	ld	r24, X
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     d40:	31 81       	ldd	r19, Z+1	; 0x01
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	08 f4       	brcc	.+2      	; 0xd4a <USB_GetNextDescriptor+0x1c>
     d48:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d4a:	a2 0f       	add	r26, r18
     d4c:	b3 1f       	adc	r27, r19
     d4e:	eb 01       	movw	r28, r22
     d50:	b9 83       	std	Y+1, r27	; 0x01
     d52:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	82 1b       	sub	r24, r18
     d5a:	93 0b       	sbc	r25, r19
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
			}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	29 97       	sbiw	r28, 0x09	; 9
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	7b 01       	movw	r14, r22
     d88:	8a 01       	movw	r16, r20
     d8a:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d8c:	90 e8       	ldi	r25, 0x80	; 128
     d8e:	90 93 2a 01 	sts	0x012A, r25
     d92:	96 e0       	ldi	r25, 0x06	; 6
     d94:	90 93 2b 01 	sts	0x012B, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d98:	e8 2f       	mov	r30, r24
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	31 97       	sbiw	r30, 0x01	; 1
     d9e:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     da0:	f0 93 2d 01 	sts	0x012D, r31
     da4:	e0 93 2c 01 	sts	0x012C, r30
     da8:	10 92 2f 01 	sts	0x012F, r1
     dac:	10 92 2e 01 	sts	0x012E, r1
     db0:	89 e0       	ldi	r24, 0x09	; 9
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	90 93 31 01 	sts	0x0131, r25
     db8:	80 93 30 01 	sts	0x0130, r24
     dbc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	84 d0       	rcall	.+264    	; 0xece <USB_Host_SendControlRequest>
     dc6:	81 11       	cpse	r24, r1
     dc8:	19 c0       	rjmp	.+50     	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x96>
     dca:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dcc:	fc 81       	ldd	r31, Y+4	; 0x04
     dce:	d7 01       	movw	r26, r14
     dd0:	ed 93       	st	X+, r30
     dd2:	fc 93       	st	X, r31
     dd4:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     dd6:	df 06       	cpc	r13, r31
     dd8:	70 f0       	brcs	.+28     	; 0xdf6 <USB_Host_GetDeviceConfigDescriptor+0x90>
     dda:	f0 93 31 01 	sts	0x0131, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     dde:	e0 93 30 01 	sts	0x0130, r30
     de2:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     de4:	74 d0       	rcall	.+232    	; 0xece <USB_Host_SendControlRequest>
     de6:	81 11       	cpse	r24, r1
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x96>
     dea:	f8 01       	movw	r30, r16
     dec:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	21 f0       	breq	.+8      	; 0xdfa <USB_Host_GetDeviceConfigDescriptor+0x94>
     df2:	86 e0       	ldi	r24, 0x06	; 6
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     dfe:	0f b6       	in	r0, 0x3f	; 63
}
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	08 95       	ret

00000e1a <USB_GetNextDescriptorComp>:
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	8c 01       	movw	r16, r24
     e30:	eb 01       	movw	r28, r22
     e32:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e34:	f8 01       	movw	r30, r16
     e36:	e0 80       	ld	r14, Z
     e38:	f1 80       	ldd	r15, Z+1	; 0x01
     e3a:	e1 14       	cp	r14, r1
     e3c:	f1 04       	cpc	r15, r1
     e3e:	99 f0       	breq	.+38     	; 0xe66 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e40:	a8 80       	ld	r10, Y
     e42:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     e44:	be 01       	movw	r22, r28
     e46:	c8 01       	movw	r24, r16
     e48:	72 df       	rcall	.-284    	; 0xd2e <USB_GetNextDescriptor>
     e4a:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e4c:	99 81       	ldd	r25, Y+1	; 0x01
     e4e:	f6 01       	movw	r30, r12
     e50:	09 95       	icall
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	79 f3       	breq	.-34     	; 0xe34 <USB_GetNextDescriptorComp+0x1a>
     e56:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e58:	39 f4       	brne	.+14     	; 0xe68 <USB_GetNextDescriptorComp+0x4e>
     e5a:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     e5c:	a8 82       	st	Y, r10
     e5e:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     e60:	f1 82       	std	Z+1, r15	; 0x01
     e62:	e0 82       	st	Z, r14
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <USB_GetNextDescriptorComp+0x4e>
     e66:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e68:	df 91       	pop	r29
}
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	08 95       	ret

00000e7e <USB_Event_Stub>:
     e7e:	08 95       	ret

00000e80 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e88:	c9 ee       	ldi	r28, 0xE9	; 233
     e8a:	d3 e0       	ldi	r29, 0x03	; 3
     e8c:	11 11       	cpse	r17, r1
     e8e:	0d c0       	rjmp	.+26     	; 0xeaa <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e90:	80 91 a6 00 	lds	r24, 0x00A6
     e94:	83 fd       	sbrc	r24, 3
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	fb db       	rcall	.-2058   	; 0x692 <USB_Host_WaitMS>
     e9c:	81 11       	cpse	r24, r1
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <USB_Host_WaitForIOS+0x46>
     ea0:	21 97       	sbiw	r28, 0x01	; 1
     ea2:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ea4:	99 f7       	brne	.-26     	; 0xe8c <USB_Host_WaitForIOS+0xc>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <USB_Host_WaitForIOS+0x46>
     eaa:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     eac:	29 f4       	brne	.+10     	; 0xeb8 <USB_Host_WaitForIOS+0x38>
     eae:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     eb2:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     eb4:	f1 cf       	rjmp	.-30     	; 0xe98 <USB_Host_WaitForIOS+0x18>
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <USB_Host_WaitForIOS+0x44>
     eb8:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     eba:	71 f7       	brne	.-36     	; 0xe98 <USB_Host_WaitForIOS+0x18>
     ebc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ec0:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     ec2:	ea cf       	rjmp	.-44     	; 0xe98 <USB_Host_WaitForIOS+0x18>
     ec4:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     ec6:	df 91       	pop	r29
}
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	08 95       	ret

00000ece <USB_Host_SendControlRequest>:
     ece:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eda:	f0 90 9e 00 	lds	r15, 0x009E
     ede:	8f 2d       	mov	r24, r15
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     ee4:	c0 91 30 01 	lds	r28, 0x0130
     ee8:	d0 91 31 01 	lds	r29, 0x0131
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eec:	80 91 9e 00 	lds	r24, 0x009E
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	cc db       	rcall	.-2152   	; 0x692 <USB_Host_WaitMS>
     efa:	81 11       	cpse	r24, r1
     efc:	cc c0       	rjmp	.+408    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     efe:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f02:	8f 7c       	andi	r24, 0xCF	; 207
     f04:	80 93 aa 00 	sts	0x00AA, r24
     f08:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f0c:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f10:	8f 7e       	andi	r24, 0xEF	; 239
     f12:	80 93 a6 00 	sts	0x00A6, r24
     f16:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f1a:	8f 7b       	andi	r24, 0xBF	; 191
     f1c:	80 93 a9 00 	sts	0x00A9, r24
     f20:	ea e2       	ldi	r30, 0x2A	; 42
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f26:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f2c:	e2 33       	cpi	r30, 0x32	; 50
     f2e:	f8 07       	cpc	r31, r24
     f30:	c9 f7       	brne	.-14     	; 0xf24 <USB_Host_SendControlRequest+0x56>
     f32:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f36:	87 77       	andi	r24, 0x77	; 119
     f38:	80 93 a6 00 	sts	0x00A6, r24
     f3c:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f3e:	a0 df       	rcall	.-192    	; 0xe80 <USB_Host_WaitForIOS>
     f40:	81 11       	cpse	r24, r1
     f42:	a9 c0       	rjmp	.+338    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     f44:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	80 93 a9 00 	sts	0x00A9, r24
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	a0 db       	rcall	.-2240   	; 0x692 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f52:	81 11       	cpse	r24, r1
     f54:	a0 c0       	rjmp	.+320    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     f56:	80 91 2a 01 	lds	r24, 0x012A
     f5a:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f5c:	4e c0       	rjmp	.+156    	; 0xffa <USB_Host_SendControlRequest+0x12c>
     f5e:	80 91 aa 00 	lds	r24, 0x00AA
     f62:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 93 aa 00 	sts	0x00AA, r24
     f6a:	01 15       	cp	r16, r1
     f6c:	11 05       	cpc	r17, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <USB_Host_SendControlRequest+0x118>
     f72:	80 91 aa 00 	lds	r24, 0x00AA
     f76:	8f 7c       	andi	r24, 0xCF	; 207
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	80 93 aa 00 	sts	0x00AA, r24
     f7e:	80 91 a9 00 	lds	r24, 0x00A9
     f82:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f84:	80 93 a9 00 	sts	0x00A9, r24
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	7a df       	rcall	.-268    	; 0xe80 <USB_Host_WaitForIOS>
     f8c:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f8e:	83 c0       	rjmp	.+262    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     f90:	80 91 a6 00 	lds	r24, 0x00A6
     f94:	8b 77       	andi	r24, 0x7B	; 123
     f96:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	71 df       	rcall	.-286    	; 0xe80 <USB_Host_WaitForIOS>
     f9e:	7b c0       	rjmp	.+246    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     fa0:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa4:	8f 7b       	andi	r24, 0xBF	; 191
     fa6:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	69 df       	rcall	.-302    	; 0xe80 <USB_Host_WaitForIOS>
     fae:	81 11       	cpse	r24, r1
     fb0:	72 c0       	rjmp	.+228    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
     fb2:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fb6:	90 91 f7 00 	lds	r25, 0x00F7
     fba:	89 2b       	or	r24, r25
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fbe:	c0 e0       	ldi	r28, 0x00	; 0
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	f8 01       	movw	r30, r16
     fc4:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     fc6:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
     fca:	90 91 f7 00 	lds	r25, 0x00F7
     fce:	89 2b       	or	r24, r25
     fd0:	69 f4       	brne	.+26     	; 0xfec <USB_Host_SendControlRequest+0x11e>
     fd2:	80 91 a9 00 	lds	r24, 0x00A9
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
     fdc:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe0:	8e 77       	andi	r24, 0x7E	; 126
     fe2:	80 93 a6 00 	sts	0x00A6, r24
     fe6:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fe8:	d9 f6       	brne	.-74     	; 0xfa0 <USB_Host_SendControlRequest+0xd2>
     fea:	c3 cf       	rjmp	.-122    	; 0xf72 <USB_Host_SendControlRequest+0xa4>
     fec:	20 97       	sbiw	r28, 0x00	; 0
     fee:	89 f3       	breq	.-30     	; 0xfd2 <USB_Host_SendControlRequest+0x104>
     ff0:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     ff4:	81 93       	st	Z+, r24
     ff6:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     ff8:	e5 cf       	rjmp	.-54     	; 0xfc4 <USB_Host_SendControlRequest+0xf6>
     ffa:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ffc:	11 05       	cpc	r17, r1
     ffe:	b1 f1       	breq	.+108    	; 0x106c <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1000:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1004:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1006:	80 62       	ori	r24, 0x20	; 32
    1008:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    100c:	80 91 a9 00 	lds	r24, 0x00A9
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	80 93 a9 00 	sts	0x00A9, r24
    1016:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1018:	20 97       	sbiw	r28, 0x00	; 0
    101a:	01 f1       	breq	.+64     	; 0x105c <USB_Host_SendControlRequest+0x18e>
    101c:	31 df       	rcall	.-414    	; 0xe80 <USB_Host_WaitForIOS>
    101e:	81 11       	cpse	r24, r1
    1020:	3a c0       	rjmp	.+116    	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1022:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1024:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1028:	30 91 f7 00 	lds	r19, 0x00F7
    102c:	80 91 10 01 	lds	r24, 0x0110
    1030:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	58 f4       	brcc	.+22     	; 0x104e <USB_Host_SendControlRequest+0x180>
    1038:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	8c 01       	movw	r16, r24
    103e:	20 81       	ld	r18, Z
    1040:	20 93 af 00 	sts	0x00AF, r18
    1044:	21 97       	sbiw	r28, 0x01	; 1
    1046:	20 97       	sbiw	r28, 0x00	; 0
    1048:	19 f0       	breq	.+6      	; 0x1050 <USB_Host_SendControlRequest+0x182>
    104a:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    104c:	eb cf       	rjmp	.-42     	; 0x1024 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    104e:	8f 01       	movw	r16, r30
    1050:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1054:	8b 77       	andi	r24, 0x7B	; 123
    1056:	80 93 a6 00 	sts	0x00A6, r24
    105a:	dd cf       	rjmp	.-70     	; 0x1016 <USB_Host_SendControlRequest+0x148>
    105c:	11 df       	rcall	.-478    	; 0xe80 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    105e:	81 11       	cpse	r24, r1
    1060:	1a c0       	rjmp	.+52     	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
    1062:	80 91 a9 00 	lds	r24, 0x00A9
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    106c:	80 91 aa 00 	lds	r24, 0x00AA
    1070:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1072:	80 61       	ori	r24, 0x10	; 16
    1074:	80 93 aa 00 	sts	0x00AA, r24
    1078:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107c:	8f 7b       	andi	r24, 0xBF	; 191
    107e:	80 93 a9 00 	sts	0x00A9, r24
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	fd de       	rcall	.-518    	; 0xe80 <USB_Host_WaitForIOS>
    1086:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <USB_Host_SendControlRequest+0x1c8>
    108a:	80 91 a6 00 	lds	r24, 0x00A6
    108e:	8e 77       	andi	r24, 0x7E	; 126
    1090:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 91 a9 00 	lds	r25, 0x00A9
    109a:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    109c:	90 93 a9 00 	sts	0x00A9, r25
    10a0:	f1 10       	cpse	r15, r1
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <USB_Host_SendControlRequest+0x1e0>
    10a4:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10a8:	9e 7f       	andi	r25, 0xFE	; 254
    10aa:	90 93 9e 00 	sts	0x009E, r25
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10b4:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    10c0:	ff 90       	pop	r15
    10c2:	08 95       	ret

000010c4 <USB_Host_SetDeviceConfiguration>:
    10c4:	cf 93       	push	r28
				UPRST = 0;
    10c6:	c8 2f       	mov	r28, r24
    10c8:	10 92 2a 01 	sts	0x012A, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10cc:	89 e0       	ldi	r24, 0x09	; 9
    10ce:	80 93 2b 01 	sts	0x012B, r24
    10d2:	2c 2f       	mov	r18, r28
    10d4:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10d6:	30 93 2d 01 	sts	0x012D, r19
    10da:	20 93 2c 01 	sts	0x012C, r18
    10de:	10 92 2f 01 	sts	0x012F, r1
    10e2:	10 92 2e 01 	sts	0x012E, r1
    10e6:	10 92 31 01 	sts	0x0131, r1
    10ea:	10 92 30 01 	sts	0x0130, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	eb de       	rcall	.-554    	; 0xece <USB_Host_SendControlRequest>
    10f8:	81 11       	cpse	r24, r1
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <USB_Host_SetDeviceConfiguration+0x4a>
    10fc:	c0 93 28 01 	sts	0x0128, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1100:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1102:	11 f0       	breq	.+4      	; 0x1108 <USB_Host_SetDeviceConfiguration+0x44>
    1104:	9b e0       	ldi	r25, 0x0B	; 11
    1106:	01 c0       	rjmp	.+2      	; 0x110a <USB_Host_SetDeviceConfiguration+0x46>
    1108:	9a e0       	ldi	r25, 0x0A	; 10
    110a:	90 93 32 01 	sts	0x0132, r25
    110e:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1110:	08 95       	ret

00001112 <USB_Host_SetInterfaceAltSetting>:
    1112:	91 e0       	ldi	r25, 0x01	; 1
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1114:	90 93 2a 01 	sts	0x012A, r25
    1118:	9b e0       	ldi	r25, 0x0B	; 11
    111a:	90 93 2b 01 	sts	0x012B, r25
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	70 93 2d 01 	sts	0x012D, r23
    1124:	60 93 2c 01 	sts	0x012C, r22
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 2f 01 	sts	0x012F, r25
    112e:	80 93 2e 01 	sts	0x012E, r24
    1132:	10 92 31 01 	sts	0x0131, r1
    1136:	10 92 30 01 	sts	0x0130, r1
    113a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	c5 ce       	rjmp	.-630    	; 0xece <USB_Host_SendControlRequest>

00001144 <USB_USBTask>:
    1144:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1146:	c0 91 a7 00 	lds	r28, 0x00A7
    114a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    114c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1150:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1154:	eb da       	rcall	.-2602   	; 0x72c <USB_Host_ProcessNextHostState>
    1156:	c0 93 a7 00 	sts	0x00A7, r28
    115a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    115c:	08 95       	ret

0000115e <DCOMP_Audio_Host_NextAudioControlInterface>:
    115e:	fc 01       	movw	r30, r24

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1160:	81 81       	ldd	r24, Z+1	; 0x01
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	51 f4       	brne	.+20     	; 0x117a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    1166:	85 81       	ldd	r24, Z+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	39 f4       	brne	.+14     	; 0x117a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    116c:	86 81       	ldd	r24, Z+6	; 0x06
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	21 f4       	brne	.+8      	; 0x117a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    1172:	87 81       	ldd	r24, Z+7	; 0x07
    1174:	81 11       	cpse	r24, r1
    1176:	01 c0       	rjmp	.+2      	; 0x117a <DCOMP_Audio_Host_NextAudioControlInterface+0x1c>
    1178:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    117a:	82 e0       	ldi	r24, 0x02	; 2
}
    117c:	08 95       	ret

0000117e <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    117e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1180:	81 81       	ldd	r24, Z+1	; 0x01
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	51 f4       	brne	.+20     	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    1186:	85 81       	ldd	r24, Z+5	; 0x05
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	39 f4       	brne	.+14     	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
    118c:	86 81       	ldd	r24, Z+6	; 0x06
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	21 f4       	brne	.+8      	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    1192:	87 81       	ldd	r24, Z+7	; 0x07
    1194:	81 11       	cpse	r24, r1
    1196:	01 c0       	rjmp	.+2      	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x1c>
    1198:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    119a:	82 e0       	ldi	r24, 0x02	; 2
}
    119c:	08 95       	ret

0000119e <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    119e:	fc 01       	movw	r30, r24
    11a0:	21 81       	ldd	r18, Z+1	; 0x01
    11a2:	25 30       	cpi	r18, 0x05	; 5
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	83 70       	andi	r24, 0x03	; 3
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	31 f0       	breq	.+12     	; 0x11ba <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11b2:	24 30       	cpi	r18, 0x04	; 4
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x10>
	{
		return DESCRIPTOR_SEARCH_Fail;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11bc:	08 95       	ret

000011be <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    11be:	8f 92       	push	r8
    11c0:	9f 92       	push	r9
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <Audio_Host_ConfigurePipes+0x1a>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <Audio_Host_ConfigurePipes+0x1c>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8c 01       	movw	r16, r24
    11e0:	7a 83       	std	Y+2, r23	; 0x02
    11e2:	69 83       	std	Y+1, r22	; 0x01
    11e4:	fa 01       	movw	r30, r20
    11e6:	5c 83       	std	Y+4, r21	; 0x04
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    11ea:	dc 01       	movw	r26, r24
    11ec:	1c 96       	adiw	r26, 0x0c	; 12
    11ee:	1d 92       	st	X+, r1
    11f0:	1d 92       	st	X+, r1
    11f2:	1d 92       	st	X+, r1
    11f4:	1c 92       	st	X, r1
    11f6:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11f8:	81 81       	ldd	r24, Z+1	; 0x01
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	09 f0       	breq	.+2      	; 0x1200 <Audio_Host_ConfigurePipes+0x42>
    11fe:	9d c0       	rjmp	.+314    	; 0x133a <Audio_Host_ConfigurePipes+0x17c>
    1200:	81 2c       	mov	r8, r1
    1202:	91 2c       	mov	r9, r1
    1204:	a1 2c       	mov	r10, r1
    1206:	b1 2c       	mov	r11, r1
    1208:	c1 2c       	mov	r12, r1
    120a:	d1 2c       	mov	r13, r1
    120c:	e1 2c       	mov	r14, r1
    120e:	f1 2c       	mov	r15, r1
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    1210:	f8 01       	movw	r30, r16
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <Audio_Host_ConfigurePipes+0x5c>
    1218:	43 c0       	rjmp	.+134    	; 0x12a0 <Audio_Host_ConfigurePipes+0xe2>
    121a:	e1 14       	cp	r14, r1
    121c:	f1 04       	cpc	r15, r1
    121e:	09 f0       	breq	.+2      	; 0x1222 <Audio_Host_ConfigurePipes+0x64>
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <Audio_Host_ConfigurePipes+0xe2>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1222:	a1 14       	cp	r10, r1
    1224:	b1 04       	cpc	r11, r1
    1226:	a1 f0       	breq	.+40     	; 0x1250 <Audio_Host_ConfigurePipes+0x92>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1228:	4f ec       	ldi	r20, 0xCF	; 207
    122a:	58 e0       	ldi	r21, 0x08	; 8
    122c:	be 01       	movw	r22, r28
    122e:	6d 5f       	subi	r22, 0xFD	; 253
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	f1 dd       	rcall	.-1054   	; 0xe1a <USB_GetNextDescriptorComp>
    1238:	88 23       	and	r24, r24
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    123a:	49 f1       	breq	.+82     	; 0x128e <Audio_Host_ConfigurePipes+0xd0>
    123c:	4f eb       	ldi	r20, 0xBF	; 191
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    123e:	58 e0       	ldi	r21, 0x08	; 8
    1240:	be 01       	movw	r22, r28
    1242:	6d 5f       	subi	r22, 0xFD	; 253
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	e7 dd       	rcall	.-1074   	; 0xe1a <USB_GetNextDescriptorComp>
    124c:	88 23       	and	r24, r24
    124e:	c1 f0       	breq	.+48     	; 0x1280 <Audio_Host_ConfigurePipes+0xc2>
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    1250:	4f ea       	ldi	r20, 0xAF	; 175
    1252:	58 e0       	ldi	r21, 0x08	; 8
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1254:	be 01       	movw	r22, r28
    1256:	6d 5f       	subi	r22, 0xFD	; 253
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	dd dd       	rcall	.-1094   	; 0xe1a <USB_GetNextDescriptorComp>
    1260:	88 23       	and	r24, r24
    1262:	11 f0       	breq	.+4      	; 0x1268 <Audio_Host_ConfigurePipes+0xaa>
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	6a c0       	rjmp	.+212    	; 0x133c <Audio_Host_ConfigurePipes+0x17e>
    1268:	ab 80       	ldd	r10, Y+3	; 0x03
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    126a:	bc 80       	ldd	r11, Y+4	; 0x04
    126c:	4f eb       	ldi	r20, 0xBF	; 191
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    126e:	58 e0       	ldi	r21, 0x08	; 8
    1270:	be 01       	movw	r22, r28

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1272:	6d 5f       	subi	r22, 0xFD	; 253
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	cf dd       	rcall	.-1122   	; 0xe1a <USB_GetNextDescriptorComp>
    127c:	81 11       	cpse	r24, r1
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <Audio_Host_ConfigurePipes+0xa6>
    1280:	8b 80       	ldd	r8, Y+3	; 0x03
    1282:	9c 80       	ldd	r9, Y+4	; 0x04
    1284:	e0 e0       	ldi	r30, 0x00	; 0
    1286:	f0 e0       	ldi	r31, 0x00	; 0
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1288:	e1 2c       	mov	r14, r1
    128a:	f1 2c       	mov	r15, r1

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    128c:	07 c0       	rjmp	.+14     	; 0x129c <Audio_Host_ConfigurePipes+0xde>
    128e:	eb 81       	ldd	r30, Y+3	; 0x03
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    1290:	fc 81       	ldd	r31, Y+4	; 0x04
    1292:	82 81       	ldd	r24, Z+2	; 0x02
			DataOUTEndpoint = NULL;

			continue;
    1294:	87 ff       	sbrs	r24, 7
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1296:	02 c0       	rjmp	.+4      	; 0x129c <Audio_Host_ConfigurePipes+0xde>
    1298:	7f 01       	movw	r14, r30

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    129a:	f6 01       	movw	r30, r12
    129c:	6f 01       	movw	r12, r30
    129e:	b8 cf       	rjmp	.-144    	; 0x1210 <Audio_Host_ConfigurePipes+0x52>
		  DataINEndpoint  = EndpointData;
    12a0:	d8 01       	movw	r26, r16
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12a2:	16 96       	adiw	r26, 0x06	; 6
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12a4:	8c 91       	ld	r24, X
    12a6:	81 11       	cpse	r24, r1
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    12a8:	2b c0       	rjmp	.+86     	; 0x1300 <Audio_Host_ConfigurePipes+0x142>
    12aa:	f7 01       	movw	r30, r14
    12ac:	84 81       	ldd	r24, Z+4	; 0x04
    12ae:	95 81       	ldd	r25, Z+5	; 0x05
    12b0:	d8 01       	movw	r26, r16
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	9c 93       	st	X, r25
    12b6:	8e 93       	st	-X, r24
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	8c 93       	st	X, r24
    12c0:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12c2:	ff 24       	eor	r15, r15
    12c4:	f3 94       	inc	r15
    12c6:	14 96       	adiw	r26, 0x04	; 4
    12c8:	fc 92       	st	X, r15
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    12ca:	14 97       	sbiw	r26, 0x04	; 4
    12cc:	22 e0       	ldi	r18, 0x02	; 2
    12ce:	15 96       	adiw	r26, 0x05	; 5
    12d0:	2c 93       	st	X, r18
    12d2:	15 97       	sbiw	r26, 0x05	; 5
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    12d4:	f6 01       	movw	r30, r12
    12d6:	84 81       	ldd	r24, Z+4	; 0x04
    12d8:	95 81       	ldd	r25, Z+5	; 0x05
    12da:	18 96       	adiw	r26, 0x08	; 8

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12dc:	9c 93       	st	X, r25
    12de:	8e 93       	st	-X, r24
    12e0:	17 97       	sbiw	r26, 0x07	; 7
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	19 96       	adiw	r26, 0x09	; 9
    12e6:	8c 93       	st	X, r24
    12e8:	19 97       	sbiw	r26, 0x09	; 9
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    12ea:	1a 96       	adiw	r26, 0x0a	; 10
    12ec:	fc 92       	st	X, r15
    12ee:	1a 97       	sbiw	r26, 0x0a	; 10
    12f0:	1b 96       	adiw	r26, 0x0b	; 11
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    12f2:	2c 93       	st	X, r18
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	c8 01       	movw	r24, r16
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    12f8:	a3 db       	rcall	.-2234   	; 0xa40 <Pipe_ConfigurePipeTable>
    12fa:	88 23       	and	r24, r24

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    12fc:	31 f0       	breq	.+12     	; 0x130a <Audio_Host_ConfigurePipes+0x14c>
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <Audio_Host_ConfigurePipes+0x150>
    1300:	c1 14       	cp	r12, r1
    1302:	d1 04       	cpc	r13, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <Audio_Host_ConfigurePipes+0x14a>
    1306:	8d cf       	rjmp	.-230    	; 0x1222 <Audio_Host_ConfigurePipes+0x64>
    1308:	d0 cf       	rjmp	.-96     	; 0x12aa <Audio_Host_ConfigurePipes+0xec>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	17 c0       	rjmp	.+46     	; 0x133c <Audio_Host_ConfigurePipes+0x17e>
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	c8 01       	movw	r24, r16
    1312:	06 96       	adiw	r24, 0x06	; 6
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;
    1314:	95 db       	rcall	.-2262   	; 0xa40 <Pipe_ConfigurePipeTable>
    1316:	88 23       	and	r24, r24

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    1318:	c1 f3       	breq	.-16     	; 0x130a <Audio_Host_ConfigurePipes+0x14c>
    131a:	d5 01       	movw	r26, r10
    131c:	12 96       	adiw	r26, 0x02	; 2
    131e:	8c 91       	ld	r24, X
    1320:	f8 01       	movw	r30, r16
    1322:	85 87       	std	Z+13, r24	; 0x0d
    1324:	d4 01       	movw	r26, r8
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    1326:	12 96       	adiw	r26, 0x02	; 2
    1328:	8c 91       	ld	r24, X
    132a:	12 97       	sbiw	r26, 0x02	; 2
    132c:	86 87       	std	Z+14, r24	; 0x0e
    132e:	13 96       	adiw	r26, 0x03	; 3
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    1330:	8c 91       	ld	r24, X
    1332:	87 87       	std	Z+15, r24	; 0x0f
    1334:	f4 86       	std	Z+12, r15	; 0x0c
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	01 c0       	rjmp	.+2      	; 0x133c <Audio_Host_ConfigurePipes+0x17e>
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
	AudioInterfaceInfo->State.IsActive = true;
    1340:	0f 90       	pop	r0

	return AUDIO_ENUMERROR_NoError;
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    1346:	cf 91       	pop	r28
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	08 95       	ret

0000135e <Audio_Host_StartStopStreaming>:
    135e:	fc 01       	movw	r30, r24
    1360:	84 85       	ldd	r24, Z+12	; 0x0c
    1362:	88 23       	and	r24, r24
    1364:	39 f0       	breq	.+14     	; 0x1374 <Audio_Host_StartStopStreaming+0x16>
    1366:	66 23       	and	r22, r22
    1368:	11 f0       	breq	.+4      	; 0x136e <Audio_Host_StartStopStreaming+0x10>
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    136a:	67 85       	ldd	r22, Z+15	; 0x0f
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <Audio_Host_StartStopStreaming+0x12>
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	86 85       	ldd	r24, Z+14	; 0x0e
    1372:	cf ce       	rjmp	.-610    	; 0x1112 <USB_Host_SetInterfaceAltSetting>
    1374:	81 e0       	ldi	r24, 0x01	; 1
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    1376:	08 95       	ret

00001378 <Audio_Host_GetSetEndpointProperty>:
    1378:	ef 92       	push	r14
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    1380:	fc 01       	movw	r30, r24
    1382:	84 85       	ldd	r24, Z+12	; 0x0c
    1384:	88 23       	and	r24, r24
    1386:	59 f1       	breq	.+86     	; 0x13de <Audio_Host_GetSetEndpointProperty+0x66>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    1388:	47 ff       	sbrs	r20, 7
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    138c:	92 ea       	ldi	r25, 0xA2	; 162
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    1390:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1392:	6f 70       	andi	r22, 0x0F	; 15
    1394:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1398:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    139c:	53 2f       	mov	r21, r19
    139e:	5f 70       	andi	r21, 0x0F	; 15
    13a0:	35 ff       	sbrs	r19, 5
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <Audio_Host_GetSetEndpointProperty+0x30>
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <Audio_Host_GetSetEndpointProperty+0x32>
    13a8:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    13aa:	90 93 2a 01 	sts	0x012A, r25
    13ae:	40 93 2b 01 	sts	0x012B, r20
    13b2:	10 92 2c 01 	sts	0x012C, r1
    13b6:	20 93 2d 01 	sts	0x012D, r18
    13ba:	85 2b       	or	r24, r21
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	90 93 2f 01 	sts	0x012F, r25
    13c2:	80 93 2e 01 	sts	0x012E, r24
    13c6:	10 93 31 01 	sts	0x0131, r17
    13ca:	00 93 30 01 	sts	0x0130, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13ce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    13d2:	c7 01       	movw	r24, r14
}
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    13dc:	78 cd       	rjmp	.-1296   	; 0xece <USB_Host_SendControlRequest>
    13de:	81 e0       	ldi	r24, 0x01	; 1
}
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	08 95       	ret

000013ea <Serial_putchar>:
    13ea:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    13ee:	95 ff       	sbrs	r25, 5
    13f0:	fc cf       	rjmp	.-8      	; 0x13ea <Serial_putchar>
				UDR1 = DataByte;
    13f2:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	08 95       	ret

000013fc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13fc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1400:	87 ff       	sbrs	r24, 7
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <Serial_getchar+0x18>
    1404:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1408:	87 ff       	sbrs	r24, 7
    140a:	07 c0       	rjmp	.+14     	; 0x141a <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    140c:	80 91 ce 00 	lds	r24, 0x00CE
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	08 95       	ret
	  return _FDEV_EOF;
    1414:	8e ef       	ldi	r24, 0xFE	; 254
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    141e:	08 95       	ret

00001420 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1420:	fc 01       	movw	r30, r24
	if (!(Stream))
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	59 f4       	brne	.+22     	; 0x143c <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1426:	83 e3       	ldi	r24, 0x33	; 51
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	90 93 42 01 	sts	0x0142, r25
    142e:	80 93 41 01 	sts	0x0141, r24
		stdout = Stream;
    1432:	90 93 44 01 	sts	0x0144, r25
    1436:	80 93 43 01 	sts	0x0143, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    143a:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    143c:	8e e0       	ldi	r24, 0x0E	; 14
    143e:	df 01       	movw	r26, r30
    1440:	1d 92       	st	X+, r1
    1442:	8a 95       	dec	r24
    1444:	e9 f7       	brne	.-6      	; 0x1440 <Serial_CreateStream+0x20>
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	83 83       	std	Z+3, r24	; 0x03
    144a:	85 ef       	ldi	r24, 0xF5	; 245
    144c:	99 e0       	ldi	r25, 0x09	; 9
    144e:	91 87       	std	Z+9, r25	; 0x09
    1450:	80 87       	std	Z+8, r24	; 0x08
    1452:	8e ef       	ldi	r24, 0xFE	; 254
    1454:	99 e0       	ldi	r25, 0x09	; 9
    1456:	93 87       	std	Z+11, r25	; 0x0b
    1458:	82 87       	std	Z+10, r24	; 0x0a
    145a:	08 95       	ret

0000145c <printf_P>:
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	fe 01       	movw	r30, r28
    146a:	37 96       	adiw	r30, 0x07	; 7
    146c:	61 91       	ld	r22, Z+
    146e:	71 91       	ld	r23, Z+
    1470:	03 e4       	ldi	r16, 0x43	; 67
    1472:	11 e0       	ldi	r17, 0x01	; 1
    1474:	d8 01       	movw	r26, r16
    1476:	8d 91       	ld	r24, X+
    1478:	9c 91       	ld	r25, X
    147a:	dc 01       	movw	r26, r24
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	2c 91       	ld	r18, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	28 60       	ori	r18, 0x08	; 8
    1484:	13 96       	adiw	r26, 0x03	; 3
    1486:	2c 93       	st	X, r18
    1488:	af 01       	movw	r20, r30
    148a:	3a d0       	rcall	.+116    	; 0x1500 <vfprintf>
    148c:	d8 01       	movw	r26, r16
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	23 81       	ldd	r18, Z+3	; 0x03
    1494:	27 7f       	andi	r18, 0xF7	; 247
    1496:	23 83       	std	Z+3, r18	; 0x03
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <puts_P>:
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	e0 91 43 01 	lds	r30, 0x0143
    14b0:	f0 91 44 01 	lds	r31, 0x0144
    14b4:	83 81       	ldd	r24, Z+3	; 0x03
    14b6:	81 ff       	sbrs	r24, 1
    14b8:	1c c0       	rjmp	.+56     	; 0x14f2 <puts_P+0x50>
    14ba:	00 e0       	ldi	r16, 0x00	; 0
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	fe 01       	movw	r30, r28
    14c0:	84 91       	lpm	r24, Z
    14c2:	60 91 43 01 	lds	r22, 0x0143
    14c6:	70 91 44 01 	lds	r23, 0x0144
    14ca:	db 01       	movw	r26, r22
    14cc:	18 96       	adiw	r26, 0x08	; 8
    14ce:	ed 91       	ld	r30, X+
    14d0:	fc 91       	ld	r31, X
    14d2:	19 97       	sbiw	r26, 0x09	; 9
    14d4:	88 23       	and	r24, r24
    14d6:	39 f0       	breq	.+14     	; 0x14e6 <puts_P+0x44>
    14d8:	09 95       	icall
    14da:	89 2b       	or	r24, r25
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <puts_P+0x40>
    14de:	0f ef       	ldi	r16, 0xFF	; 255
    14e0:	1f ef       	ldi	r17, 0xFF	; 255
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	ec cf       	rjmp	.-40     	; 0x14be <puts_P+0x1c>
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	09 95       	icall
    14ea:	89 2b       	or	r24, r25
    14ec:	11 f4       	brne	.+4      	; 0x14f2 <puts_P+0x50>
    14ee:	c8 01       	movw	r24, r16
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <puts_P+0x54>
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <vfprintf>:
    1500:	2f 92       	push	r2
    1502:	3f 92       	push	r3
    1504:	4f 92       	push	r4
    1506:	5f 92       	push	r5
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2c 97       	sbiw	r28, 0x0c	; 12
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	7c 01       	movw	r14, r24
    1536:	6b 01       	movw	r12, r22
    1538:	8a 01       	movw	r16, r20
    153a:	fc 01       	movw	r30, r24
    153c:	17 82       	std	Z+7, r1	; 0x07
    153e:	16 82       	std	Z+6, r1	; 0x06
    1540:	83 81       	ldd	r24, Z+3	; 0x03
    1542:	81 ff       	sbrs	r24, 1
    1544:	b0 c1       	rjmp	.+864    	; 0x18a6 <vfprintf+0x3a6>
    1546:	ce 01       	movw	r24, r28
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	4c 01       	movw	r8, r24
    154c:	f7 01       	movw	r30, r14
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	f6 01       	movw	r30, r12
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	6f 01       	movw	r12, r30
    155c:	88 23       	and	r24, r24
    155e:	09 f4       	brne	.+2      	; 0x1562 <vfprintf+0x62>
    1560:	9e c1       	rjmp	.+828    	; 0x189e <vfprintf+0x39e>
    1562:	85 32       	cpi	r24, 0x25	; 37
    1564:	39 f4       	brne	.+14     	; 0x1574 <vfprintf+0x74>
    1566:	93 fd       	sbrc	r25, 3
    1568:	85 91       	lpm	r24, Z+
    156a:	93 ff       	sbrs	r25, 3
    156c:	81 91       	ld	r24, Z+
    156e:	6f 01       	movw	r12, r30
    1570:	85 32       	cpi	r24, 0x25	; 37
    1572:	21 f4       	brne	.+8      	; 0x157c <vfprintf+0x7c>
    1574:	b7 01       	movw	r22, r14
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	c7 d1       	rcall	.+910    	; 0x1908 <fputc>
    157a:	e8 cf       	rjmp	.-48     	; 0x154c <vfprintf+0x4c>
    157c:	51 2c       	mov	r5, r1
    157e:	31 2c       	mov	r3, r1
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	20 32       	cpi	r18, 0x20	; 32
    1584:	a0 f4       	brcc	.+40     	; 0x15ae <vfprintf+0xae>
    1586:	8b 32       	cpi	r24, 0x2B	; 43
    1588:	69 f0       	breq	.+26     	; 0x15a4 <vfprintf+0xa4>
    158a:	30 f4       	brcc	.+12     	; 0x1598 <vfprintf+0x98>
    158c:	80 32       	cpi	r24, 0x20	; 32
    158e:	59 f0       	breq	.+22     	; 0x15a6 <vfprintf+0xa6>
    1590:	83 32       	cpi	r24, 0x23	; 35
    1592:	69 f4       	brne	.+26     	; 0x15ae <vfprintf+0xae>
    1594:	20 61       	ori	r18, 0x10	; 16
    1596:	2c c0       	rjmp	.+88     	; 0x15f0 <vfprintf+0xf0>
    1598:	8d 32       	cpi	r24, 0x2D	; 45
    159a:	39 f0       	breq	.+14     	; 0x15aa <vfprintf+0xaa>
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	39 f4       	brne	.+14     	; 0x15ae <vfprintf+0xae>
    15a0:	21 60       	ori	r18, 0x01	; 1
    15a2:	26 c0       	rjmp	.+76     	; 0x15f0 <vfprintf+0xf0>
    15a4:	22 60       	ori	r18, 0x02	; 2
    15a6:	24 60       	ori	r18, 0x04	; 4
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <vfprintf+0xf0>
    15aa:	28 60       	ori	r18, 0x08	; 8
    15ac:	21 c0       	rjmp	.+66     	; 0x15f0 <vfprintf+0xf0>
    15ae:	27 fd       	sbrc	r18, 7
    15b0:	27 c0       	rjmp	.+78     	; 0x1600 <vfprintf+0x100>
    15b2:	30 ed       	ldi	r19, 0xD0	; 208
    15b4:	38 0f       	add	r19, r24
    15b6:	3a 30       	cpi	r19, 0x0A	; 10
    15b8:	78 f4       	brcc	.+30     	; 0x15d8 <vfprintf+0xd8>
    15ba:	26 ff       	sbrs	r18, 6
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <vfprintf+0xca>
    15be:	fa e0       	ldi	r31, 0x0A	; 10
    15c0:	5f 9e       	mul	r5, r31
    15c2:	30 0d       	add	r19, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	53 2e       	mov	r5, r19
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <vfprintf+0xf0>
    15ca:	8a e0       	ldi	r24, 0x0A	; 10
    15cc:	38 9e       	mul	r3, r24
    15ce:	30 0d       	add	r19, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	33 2e       	mov	r3, r19
    15d4:	20 62       	ori	r18, 0x20	; 32
    15d6:	0c c0       	rjmp	.+24     	; 0x15f0 <vfprintf+0xf0>
    15d8:	8e 32       	cpi	r24, 0x2E	; 46
    15da:	21 f4       	brne	.+8      	; 0x15e4 <vfprintf+0xe4>
    15dc:	26 fd       	sbrc	r18, 6
    15de:	5f c1       	rjmp	.+702    	; 0x189e <vfprintf+0x39e>
    15e0:	20 64       	ori	r18, 0x40	; 64
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0xf0>
    15e4:	8c 36       	cpi	r24, 0x6C	; 108
    15e6:	11 f4       	brne	.+4      	; 0x15ec <vfprintf+0xec>
    15e8:	20 68       	ori	r18, 0x80	; 128
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0xf0>
    15ec:	88 36       	cpi	r24, 0x68	; 104
    15ee:	41 f4       	brne	.+16     	; 0x1600 <vfprintf+0x100>
    15f0:	f6 01       	movw	r30, r12
    15f2:	93 fd       	sbrc	r25, 3
    15f4:	85 91       	lpm	r24, Z+
    15f6:	93 ff       	sbrs	r25, 3
    15f8:	81 91       	ld	r24, Z+
    15fa:	6f 01       	movw	r12, r30
    15fc:	81 11       	cpse	r24, r1
    15fe:	c1 cf       	rjmp	.-126    	; 0x1582 <vfprintf+0x82>
    1600:	98 2f       	mov	r25, r24
    1602:	9f 7d       	andi	r25, 0xDF	; 223
    1604:	95 54       	subi	r25, 0x45	; 69
    1606:	93 30       	cpi	r25, 0x03	; 3
    1608:	28 f4       	brcc	.+10     	; 0x1614 <vfprintf+0x114>
    160a:	0c 5f       	subi	r16, 0xFC	; 252
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	ff e3       	ldi	r31, 0x3F	; 63
    1610:	f9 83       	std	Y+1, r31	; 0x01
    1612:	0d c0       	rjmp	.+26     	; 0x162e <vfprintf+0x12e>
    1614:	83 36       	cpi	r24, 0x63	; 99
    1616:	31 f0       	breq	.+12     	; 0x1624 <vfprintf+0x124>
    1618:	83 37       	cpi	r24, 0x73	; 115
    161a:	71 f0       	breq	.+28     	; 0x1638 <vfprintf+0x138>
    161c:	83 35       	cpi	r24, 0x53	; 83
    161e:	09 f0       	breq	.+2      	; 0x1622 <vfprintf+0x122>
    1620:	57 c0       	rjmp	.+174    	; 0x16d0 <vfprintf+0x1d0>
    1622:	21 c0       	rjmp	.+66     	; 0x1666 <vfprintf+0x166>
    1624:	f8 01       	movw	r30, r16
    1626:	80 81       	ld	r24, Z
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	0e 5f       	subi	r16, 0xFE	; 254
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	44 24       	eor	r4, r4
    1630:	43 94       	inc	r4
    1632:	51 2c       	mov	r5, r1
    1634:	54 01       	movw	r10, r8
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <vfprintf+0x160>
    1638:	38 01       	movw	r6, r16
    163a:	f2 e0       	ldi	r31, 0x02	; 2
    163c:	6f 0e       	add	r6, r31
    163e:	71 1c       	adc	r7, r1
    1640:	f8 01       	movw	r30, r16
    1642:	a0 80       	ld	r10, Z
    1644:	b1 80       	ldd	r11, Z+1	; 0x01
    1646:	26 ff       	sbrs	r18, 6
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <vfprintf+0x150>
    164a:	65 2d       	mov	r22, r5
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x154>
    1650:	6f ef       	ldi	r22, 0xFF	; 255
    1652:	7f ef       	ldi	r23, 0xFF	; 255
    1654:	c5 01       	movw	r24, r10
    1656:	2c 87       	std	Y+12, r18	; 0x0c
    1658:	4c d1       	rcall	.+664    	; 0x18f2 <strnlen>
    165a:	2c 01       	movw	r4, r24
    165c:	83 01       	movw	r16, r6
    165e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1660:	2f 77       	andi	r18, 0x7F	; 127
    1662:	22 2e       	mov	r2, r18
    1664:	16 c0       	rjmp	.+44     	; 0x1692 <vfprintf+0x192>
    1666:	38 01       	movw	r6, r16
    1668:	f2 e0       	ldi	r31, 0x02	; 2
    166a:	6f 0e       	add	r6, r31
    166c:	71 1c       	adc	r7, r1
    166e:	f8 01       	movw	r30, r16
    1670:	a0 80       	ld	r10, Z
    1672:	b1 80       	ldd	r11, Z+1	; 0x01
    1674:	26 ff       	sbrs	r18, 6
    1676:	03 c0       	rjmp	.+6      	; 0x167e <vfprintf+0x17e>
    1678:	65 2d       	mov	r22, r5
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x182>
    167e:	6f ef       	ldi	r22, 0xFF	; 255
    1680:	7f ef       	ldi	r23, 0xFF	; 255
    1682:	c5 01       	movw	r24, r10
    1684:	2c 87       	std	Y+12, r18	; 0x0c
    1686:	2a d1       	rcall	.+596    	; 0x18dc <strnlen_P>
    1688:	2c 01       	movw	r4, r24
    168a:	2c 85       	ldd	r18, Y+12	; 0x0c
    168c:	20 68       	ori	r18, 0x80	; 128
    168e:	22 2e       	mov	r2, r18
    1690:	83 01       	movw	r16, r6
    1692:	23 fc       	sbrc	r2, 3
    1694:	19 c0       	rjmp	.+50     	; 0x16c8 <vfprintf+0x1c8>
    1696:	83 2d       	mov	r24, r3
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	48 16       	cp	r4, r24
    169c:	59 06       	cpc	r5, r25
    169e:	a0 f4       	brcc	.+40     	; 0x16c8 <vfprintf+0x1c8>
    16a0:	b7 01       	movw	r22, r14
    16a2:	80 e2       	ldi	r24, 0x20	; 32
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	30 d1       	rcall	.+608    	; 0x1908 <fputc>
    16a8:	3a 94       	dec	r3
    16aa:	f5 cf       	rjmp	.-22     	; 0x1696 <vfprintf+0x196>
    16ac:	f5 01       	movw	r30, r10
    16ae:	27 fc       	sbrc	r2, 7
    16b0:	85 91       	lpm	r24, Z+
    16b2:	27 fe       	sbrs	r2, 7
    16b4:	81 91       	ld	r24, Z+
    16b6:	5f 01       	movw	r10, r30
    16b8:	b7 01       	movw	r22, r14
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	25 d1       	rcall	.+586    	; 0x1908 <fputc>
    16be:	31 10       	cpse	r3, r1
    16c0:	3a 94       	dec	r3
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	4f 1a       	sub	r4, r31
    16c6:	51 08       	sbc	r5, r1
    16c8:	41 14       	cp	r4, r1
    16ca:	51 04       	cpc	r5, r1
    16cc:	79 f7       	brne	.-34     	; 0x16ac <vfprintf+0x1ac>
    16ce:	de c0       	rjmp	.+444    	; 0x188c <vfprintf+0x38c>
    16d0:	84 36       	cpi	r24, 0x64	; 100
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <vfprintf+0x1d8>
    16d4:	89 36       	cpi	r24, 0x69	; 105
    16d6:	31 f5       	brne	.+76     	; 0x1724 <vfprintf+0x224>
    16d8:	f8 01       	movw	r30, r16
    16da:	27 ff       	sbrs	r18, 7
    16dc:	07 c0       	rjmp	.+14     	; 0x16ec <vfprintf+0x1ec>
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0c 5f       	subi	r16, 0xFC	; 252
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <vfprintf+0x1fc>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	88 27       	eor	r24, r24
    16f2:	77 fd       	sbrc	r23, 7
    16f4:	80 95       	com	r24
    16f6:	98 2f       	mov	r25, r24
    16f8:	0e 5f       	subi	r16, 0xFE	; 254
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	2f 76       	andi	r18, 0x6F	; 111
    16fe:	b2 2e       	mov	r11, r18
    1700:	97 ff       	sbrs	r25, 7
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <vfprintf+0x216>
    1704:	90 95       	com	r25
    1706:	80 95       	com	r24
    1708:	70 95       	com	r23
    170a:	61 95       	neg	r22
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8f 4f       	sbci	r24, 0xFF	; 255
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	20 68       	ori	r18, 0x80	; 128
    1714:	b2 2e       	mov	r11, r18
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	a4 01       	movw	r20, r8
    171c:	27 d1       	rcall	.+590    	; 0x196c <__ultoa_invert>
    171e:	a8 2e       	mov	r10, r24
    1720:	a8 18       	sub	r10, r8
    1722:	43 c0       	rjmp	.+134    	; 0x17aa <vfprintf+0x2aa>
    1724:	85 37       	cpi	r24, 0x75	; 117
    1726:	29 f4       	brne	.+10     	; 0x1732 <vfprintf+0x232>
    1728:	2f 7e       	andi	r18, 0xEF	; 239
    172a:	b2 2e       	mov	r11, r18
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	25 c0       	rjmp	.+74     	; 0x177c <vfprintf+0x27c>
    1732:	f2 2f       	mov	r31, r18
    1734:	f9 7f       	andi	r31, 0xF9	; 249
    1736:	bf 2e       	mov	r11, r31
    1738:	8f 36       	cpi	r24, 0x6F	; 111
    173a:	c1 f0       	breq	.+48     	; 0x176c <vfprintf+0x26c>
    173c:	18 f4       	brcc	.+6      	; 0x1744 <vfprintf+0x244>
    173e:	88 35       	cpi	r24, 0x58	; 88
    1740:	79 f0       	breq	.+30     	; 0x1760 <vfprintf+0x260>
    1742:	ad c0       	rjmp	.+346    	; 0x189e <vfprintf+0x39e>
    1744:	80 37       	cpi	r24, 0x70	; 112
    1746:	19 f0       	breq	.+6      	; 0x174e <vfprintf+0x24e>
    1748:	88 37       	cpi	r24, 0x78	; 120
    174a:	21 f0       	breq	.+8      	; 0x1754 <vfprintf+0x254>
    174c:	a8 c0       	rjmp	.+336    	; 0x189e <vfprintf+0x39e>
    174e:	2f 2f       	mov	r18, r31
    1750:	20 61       	ori	r18, 0x10	; 16
    1752:	b2 2e       	mov	r11, r18
    1754:	b4 fe       	sbrs	r11, 4
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <vfprintf+0x272>
    1758:	8b 2d       	mov	r24, r11
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	b8 2e       	mov	r11, r24
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <vfprintf+0x272>
    1760:	24 ff       	sbrs	r18, 4
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <vfprintf+0x278>
    1764:	9f 2f       	mov	r25, r31
    1766:	96 60       	ori	r25, 0x06	; 6
    1768:	b9 2e       	mov	r11, r25
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x278>
    176c:	28 e0       	ldi	r18, 0x08	; 8
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	05 c0       	rjmp	.+10     	; 0x177c <vfprintf+0x27c>
    1772:	20 e1       	ldi	r18, 0x10	; 16
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x27c>
    1778:	20 e1       	ldi	r18, 0x10	; 16
    177a:	32 e0       	ldi	r19, 0x02	; 2
    177c:	f8 01       	movw	r30, r16
    177e:	b7 fe       	sbrs	r11, 7
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <vfprintf+0x290>
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	0c 5f       	subi	r16, 0xFC	; 252
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	06 c0       	rjmp	.+12     	; 0x179c <vfprintf+0x29c>
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 5f       	subi	r16, 0xFE	; 254
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	a4 01       	movw	r20, r8
    179e:	e6 d0       	rcall	.+460    	; 0x196c <__ultoa_invert>
    17a0:	a8 2e       	mov	r10, r24
    17a2:	a8 18       	sub	r10, r8
    17a4:	fb 2d       	mov	r31, r11
    17a6:	ff 77       	andi	r31, 0x7F	; 127
    17a8:	bf 2e       	mov	r11, r31
    17aa:	b6 fe       	sbrs	r11, 6
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x2c4>
    17ae:	2b 2d       	mov	r18, r11
    17b0:	2e 7f       	andi	r18, 0xFE	; 254
    17b2:	a5 14       	cp	r10, r5
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <vfprintf+0x2ca>
    17b6:	b4 fe       	sbrs	r11, 4
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x2ce>
    17ba:	b2 fc       	sbrc	r11, 2
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x2ce>
    17be:	2b 2d       	mov	r18, r11
    17c0:	2e 7e       	andi	r18, 0xEE	; 238
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x2ce>
    17c4:	7a 2c       	mov	r7, r10
    17c6:	2b 2d       	mov	r18, r11
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x2d0>
    17ca:	7a 2c       	mov	r7, r10
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x2d0>
    17ce:	75 2c       	mov	r7, r5
    17d0:	24 ff       	sbrs	r18, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x2ee>
    17d4:	fe 01       	movw	r30, r28
    17d6:	ea 0d       	add	r30, r10
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vfprintf+0x2e4>
    17e0:	29 7e       	andi	r18, 0xE9	; 233
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x2f6>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2f4>
    17e8:	73 94       	inc	r7
    17ea:	73 94       	inc	r7
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x2f6>
    17ee:	82 2f       	mov	r24, r18
    17f0:	86 78       	andi	r24, 0x86	; 134
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x2f6>
    17f4:	73 94       	inc	r7
    17f6:	23 fd       	sbrc	r18, 3
    17f8:	12 c0       	rjmp	.+36     	; 0x181e <vfprintf+0x31e>
    17fa:	20 ff       	sbrs	r18, 0
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x30a>
    17fe:	5a 2c       	mov	r5, r10
    1800:	73 14       	cp	r7, r3
    1802:	18 f4       	brcc	.+6      	; 0x180a <vfprintf+0x30a>
    1804:	53 0c       	add	r5, r3
    1806:	57 18       	sub	r5, r7
    1808:	73 2c       	mov	r7, r3
    180a:	73 14       	cp	r7, r3
    180c:	60 f4       	brcc	.+24     	; 0x1826 <vfprintf+0x326>
    180e:	b7 01       	movw	r22, r14
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	2c 87       	std	Y+12, r18	; 0x0c
    1816:	78 d0       	rcall	.+240    	; 0x1908 <fputc>
    1818:	73 94       	inc	r7
    181a:	2c 85       	ldd	r18, Y+12	; 0x0c
    181c:	f6 cf       	rjmp	.-20     	; 0x180a <vfprintf+0x30a>
    181e:	73 14       	cp	r7, r3
    1820:	10 f4       	brcc	.+4      	; 0x1826 <vfprintf+0x326>
    1822:	37 18       	sub	r3, r7
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <vfprintf+0x328>
    1826:	31 2c       	mov	r3, r1
    1828:	24 ff       	sbrs	r18, 4
    182a:	11 c0       	rjmp	.+34     	; 0x184e <vfprintf+0x34e>
    182c:	b7 01       	movw	r22, r14
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	2c 87       	std	Y+12, r18	; 0x0c
    1834:	69 d0       	rcall	.+210    	; 0x1908 <fputc>
    1836:	2c 85       	ldd	r18, Y+12	; 0x0c
    1838:	22 ff       	sbrs	r18, 2
    183a:	16 c0       	rjmp	.+44     	; 0x1868 <vfprintf+0x368>
    183c:	21 ff       	sbrs	r18, 1
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <vfprintf+0x346>
    1840:	88 e5       	ldi	r24, 0x58	; 88
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <vfprintf+0x34a>
    1846:	88 e7       	ldi	r24, 0x78	; 120
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b7 01       	movw	r22, r14
    184c:	0c c0       	rjmp	.+24     	; 0x1866 <vfprintf+0x366>
    184e:	82 2f       	mov	r24, r18
    1850:	86 78       	andi	r24, 0x86	; 134
    1852:	51 f0       	breq	.+20     	; 0x1868 <vfprintf+0x368>
    1854:	21 fd       	sbrc	r18, 1
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x35c>
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	01 c0       	rjmp	.+2      	; 0x185e <vfprintf+0x35e>
    185c:	8b e2       	ldi	r24, 0x2B	; 43
    185e:	27 fd       	sbrc	r18, 7
    1860:	8d e2       	ldi	r24, 0x2D	; 45
    1862:	b7 01       	movw	r22, r14
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	50 d0       	rcall	.+160    	; 0x1908 <fputc>
    1868:	a5 14       	cp	r10, r5
    186a:	30 f4       	brcc	.+12     	; 0x1878 <vfprintf+0x378>
    186c:	b7 01       	movw	r22, r14
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	4a d0       	rcall	.+148    	; 0x1908 <fputc>
    1874:	5a 94       	dec	r5
    1876:	f8 cf       	rjmp	.-16     	; 0x1868 <vfprintf+0x368>
    1878:	aa 94       	dec	r10
    187a:	f4 01       	movw	r30, r8
    187c:	ea 0d       	add	r30, r10
    187e:	f1 1d       	adc	r31, r1
    1880:	80 81       	ld	r24, Z
    1882:	b7 01       	movw	r22, r14
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	40 d0       	rcall	.+128    	; 0x1908 <fputc>
    1888:	a1 10       	cpse	r10, r1
    188a:	f6 cf       	rjmp	.-20     	; 0x1878 <vfprintf+0x378>
    188c:	33 20       	and	r3, r3
    188e:	09 f4       	brne	.+2      	; 0x1892 <vfprintf+0x392>
    1890:	5d ce       	rjmp	.-838    	; 0x154c <vfprintf+0x4c>
    1892:	b7 01       	movw	r22, r14
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	37 d0       	rcall	.+110    	; 0x1908 <fputc>
    189a:	3a 94       	dec	r3
    189c:	f7 cf       	rjmp	.-18     	; 0x188c <vfprintf+0x38c>
    189e:	f7 01       	movw	r30, r14
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	97 81       	ldd	r25, Z+7	; 0x07
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x3aa>
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	9f ef       	ldi	r25, 0xFF	; 255
    18aa:	2c 96       	adiw	r28, 0x0c	; 12
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	7f 90       	pop	r7
    18d0:	6f 90       	pop	r6
    18d2:	5f 90       	pop	r5
    18d4:	4f 90       	pop	r4
    18d6:	3f 90       	pop	r3
    18d8:	2f 90       	pop	r2
    18da:	08 95       	ret

000018dc <strnlen_P>:
    18dc:	fc 01       	movw	r30, r24
    18de:	05 90       	lpm	r0, Z+
    18e0:	61 50       	subi	r22, 0x01	; 1
    18e2:	70 40       	sbci	r23, 0x00	; 0
    18e4:	01 10       	cpse	r0, r1
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <strnlen_P+0x2>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	8e 0f       	add	r24, r30
    18ee:	9f 1f       	adc	r25, r31
    18f0:	08 95       	ret

000018f2 <strnlen>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	61 50       	subi	r22, 0x01	; 1
    18f6:	70 40       	sbci	r23, 0x00	; 0
    18f8:	01 90       	ld	r0, Z+
    18fa:	01 10       	cpse	r0, r1
    18fc:	d8 f7       	brcc	.-10     	; 0x18f4 <strnlen+0x2>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	8e 0f       	add	r24, r30
    1904:	9f 1f       	adc	r25, r31
    1906:	08 95       	ret

00001908 <fputc>:
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	18 2f       	mov	r17, r24
    1912:	09 2f       	mov	r16, r25
    1914:	eb 01       	movw	r28, r22
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	81 fd       	sbrc	r24, 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <fputc+0x1a>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	20 c0       	rjmp	.+64     	; 0x1962 <fputc+0x5a>
    1922:	82 ff       	sbrs	r24, 2
    1924:	10 c0       	rjmp	.+32     	; 0x1946 <fputc+0x3e>
    1926:	4e 81       	ldd	r20, Y+6	; 0x06
    1928:	5f 81       	ldd	r21, Y+7	; 0x07
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	42 17       	cp	r20, r18
    1930:	53 07       	cpc	r21, r19
    1932:	7c f4       	brge	.+30     	; 0x1952 <fputc+0x4a>
    1934:	e8 81       	ld	r30, Y
    1936:	f9 81       	ldd	r31, Y+1	; 0x01
    1938:	9f 01       	movw	r18, r30
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	39 83       	std	Y+1, r19	; 0x01
    1940:	28 83       	st	Y, r18
    1942:	10 83       	st	Z, r17
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <fputc+0x4a>
    1946:	e8 85       	ldd	r30, Y+8	; 0x08
    1948:	f9 85       	ldd	r31, Y+9	; 0x09
    194a:	81 2f       	mov	r24, r17
    194c:	09 95       	icall
    194e:	89 2b       	or	r24, r25
    1950:	29 f7       	brne	.-54     	; 0x191c <fputc+0x14>
    1952:	2e 81       	ldd	r18, Y+6	; 0x06
    1954:	3f 81       	ldd	r19, Y+7	; 0x07
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	3f 83       	std	Y+7, r19	; 0x07
    195c:	2e 83       	std	Y+6, r18	; 0x06
    195e:	81 2f       	mov	r24, r17
    1960:	90 2f       	mov	r25, r16
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <__ultoa_invert>:
    196c:	fa 01       	movw	r30, r20
    196e:	aa 27       	eor	r26, r26
    1970:	28 30       	cpi	r18, 0x08	; 8
    1972:	51 f1       	breq	.+84     	; 0x19c8 <__ultoa_invert+0x5c>
    1974:	20 31       	cpi	r18, 0x10	; 16
    1976:	81 f1       	breq	.+96     	; 0x19d8 <__ultoa_invert+0x6c>
    1978:	e8 94       	clt
    197a:	6f 93       	push	r22
    197c:	6e 7f       	andi	r22, 0xFE	; 254
    197e:	6e 5f       	subi	r22, 0xFE	; 254
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	af 4f       	sbci	r26, 0xFF	; 255
    1988:	b1 e0       	ldi	r27, 0x01	; 1
    198a:	3e d0       	rcall	.+124    	; 0x1a08 <__ultoa_invert+0x9c>
    198c:	b4 e0       	ldi	r27, 0x04	; 4
    198e:	3c d0       	rcall	.+120    	; 0x1a08 <__ultoa_invert+0x9c>
    1990:	67 0f       	add	r22, r23
    1992:	78 1f       	adc	r23, r24
    1994:	89 1f       	adc	r24, r25
    1996:	9a 1f       	adc	r25, r26
    1998:	a1 1d       	adc	r26, r1
    199a:	68 0f       	add	r22, r24
    199c:	79 1f       	adc	r23, r25
    199e:	8a 1f       	adc	r24, r26
    19a0:	91 1d       	adc	r25, r1
    19a2:	a1 1d       	adc	r26, r1
    19a4:	6a 0f       	add	r22, r26
    19a6:	71 1d       	adc	r23, r1
    19a8:	81 1d       	adc	r24, r1
    19aa:	91 1d       	adc	r25, r1
    19ac:	a1 1d       	adc	r26, r1
    19ae:	20 d0       	rcall	.+64     	; 0x19f0 <__ultoa_invert+0x84>
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <__ultoa_invert+0x48>
    19b2:	68 94       	set
    19b4:	3f 91       	pop	r19
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	26 9f       	mul	r18, r22
    19ba:	11 24       	eor	r1, r1
    19bc:	30 19       	sub	r19, r0
    19be:	30 5d       	subi	r19, 0xD0	; 208
    19c0:	31 93       	st	Z+, r19
    19c2:	de f6       	brtc	.-74     	; 0x197a <__ultoa_invert+0xe>
    19c4:	cf 01       	movw	r24, r30
    19c6:	08 95       	ret
    19c8:	46 2f       	mov	r20, r22
    19ca:	47 70       	andi	r20, 0x07	; 7
    19cc:	40 5d       	subi	r20, 0xD0	; 208
    19ce:	41 93       	st	Z+, r20
    19d0:	b3 e0       	ldi	r27, 0x03	; 3
    19d2:	0f d0       	rcall	.+30     	; 0x19f2 <__ultoa_invert+0x86>
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__ultoa_invert+0x5c>
    19d6:	f6 cf       	rjmp	.-20     	; 0x19c4 <__ultoa_invert+0x58>
    19d8:	46 2f       	mov	r20, r22
    19da:	4f 70       	andi	r20, 0x0F	; 15
    19dc:	40 5d       	subi	r20, 0xD0	; 208
    19de:	4a 33       	cpi	r20, 0x3A	; 58
    19e0:	18 f0       	brcs	.+6      	; 0x19e8 <__ultoa_invert+0x7c>
    19e2:	49 5d       	subi	r20, 0xD9	; 217
    19e4:	31 fd       	sbrc	r19, 1
    19e6:	40 52       	subi	r20, 0x20	; 32
    19e8:	41 93       	st	Z+, r20
    19ea:	02 d0       	rcall	.+4      	; 0x19f0 <__ultoa_invert+0x84>
    19ec:	a9 f7       	brne	.-22     	; 0x19d8 <__ultoa_invert+0x6c>
    19ee:	ea cf       	rjmp	.-44     	; 0x19c4 <__ultoa_invert+0x58>
    19f0:	b4 e0       	ldi	r27, 0x04	; 4
    19f2:	a6 95       	lsr	r26
    19f4:	97 95       	ror	r25
    19f6:	87 95       	ror	r24
    19f8:	77 95       	ror	r23
    19fa:	67 95       	ror	r22
    19fc:	ba 95       	dec	r27
    19fe:	c9 f7       	brne	.-14     	; 0x19f2 <__ultoa_invert+0x86>
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 05       	cpc	r22, r1
    1a04:	71 05       	cpc	r23, r1
    1a06:	08 95       	ret
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	0a 2e       	mov	r0, r26
    1a0e:	06 94       	lsr	r0
    1a10:	57 95       	ror	r21
    1a12:	47 95       	ror	r20
    1a14:	37 95       	ror	r19
    1a16:	27 95       	ror	r18
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0xa2>
    1a1c:	62 0f       	add	r22, r18
    1a1e:	73 1f       	adc	r23, r19
    1a20:	84 1f       	adc	r24, r20
    1a22:	95 1f       	adc	r25, r21
    1a24:	a0 1d       	adc	r26, r0
    1a26:	08 95       	ret

00001a28 <_exit>:
    1a28:	f8 94       	cli

00001a2a <__stop_program>:
    1a2a:	ff cf       	rjmp	.-2      	; 0x1a2a <__stop_program>

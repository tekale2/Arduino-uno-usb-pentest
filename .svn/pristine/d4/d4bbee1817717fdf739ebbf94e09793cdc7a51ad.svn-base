
Magstripe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000122a  000012be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000122a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c2d  00800118  00800118  000012d6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000680  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a644  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b97  00000000  00000000  0000cbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003de2  00000000  00000000  0000f74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f64  00000000  00000000  00013530  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ccc  00000000  00000000  00014494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006836  00000000  00000000  00018160  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e0  00000000  00000000  0001e996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
       2:	00 00       	nop
       4:	db c0       	rjmp	.+438    	; 0x1bc <__bad_interrupt>
       6:	00 00       	nop
       8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
       a:	00 00       	nop
       c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
       e:	00 00       	nop
      10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
      12:	00 00       	nop
      14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>
      1e:	00 00       	nop
      20:	cd c0       	rjmp	.+410    	; 0x1bc <__bad_interrupt>
      22:	00 00       	nop
      24:	cb c0       	rjmp	.+406    	; 0x1bc <__bad_interrupt>
      26:	00 00       	nop
      28:	b0 c4       	rjmp	.+2400   	; 0x98a <__vector_10>
      2a:	00 00       	nop
      2c:	c7 c0       	rjmp	.+398    	; 0x1bc <__bad_interrupt>
      2e:	00 00       	nop
      30:	c5 c0       	rjmp	.+394    	; 0x1bc <__bad_interrupt>
      32:	00 00       	nop
      34:	c3 c0       	rjmp	.+390    	; 0x1bc <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	c1 c0       	rjmp	.+386    	; 0x1bc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bf c0       	rjmp	.+382    	; 0x1bc <__bad_interrupt>
      3e:	00 00       	nop
      40:	bd c0       	rjmp	.+378    	; 0x1bc <__bad_interrupt>
      42:	00 00       	nop
      44:	bb c0       	rjmp	.+374    	; 0x1bc <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	b9 c0       	rjmp	.+370    	; 0x1bc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b7 c0       	rjmp	.+366    	; 0x1bc <__bad_interrupt>
      4e:	00 00       	nop
      50:	b5 c0       	rjmp	.+362    	; 0x1bc <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	b3 c0       	rjmp	.+358    	; 0x1bc <__bad_interrupt>
      56:	00 00       	nop
      58:	b1 c0       	rjmp	.+354    	; 0x1bc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	af c0       	rjmp	.+350    	; 0x1bc <__bad_interrupt>
      5e:	00 00       	nop
      60:	ad c0       	rjmp	.+346    	; 0x1bc <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	ab c0       	rjmp	.+342    	; 0x1bc <__bad_interrupt>
      66:	00 00       	nop
      68:	a9 c0       	rjmp	.+338    	; 0x1bc <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	a7 c0       	rjmp	.+334    	; 0x1bc <__bad_interrupt>
      6e:	00 00       	nop
      70:	a5 c0       	rjmp	.+330    	; 0x1bc <__bad_interrupt>
      72:	00 00       	nop
      74:	a3 c0       	rjmp	.+326    	; 0x1bc <__bad_interrupt>
      76:	00 00       	nop
      78:	a1 c0       	rjmp	.+322    	; 0x1bc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f c0       	rjmp	.+318    	; 0x1bc <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	9d c0       	rjmp	.+314    	; 0x1bc <__bad_interrupt>
      82:	00 00       	nop
      84:	9b c0       	rjmp	.+310    	; 0x1bc <__bad_interrupt>
      86:	00 00       	nop
      88:	99 c0       	rjmp	.+306    	; 0x1bc <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	97 c0       	rjmp	.+302    	; 0x1bc <__bad_interrupt>
      8e:	00 00       	nop
      90:	95 c0       	rjmp	.+298    	; 0x1bc <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	93 c0       	rjmp	.+294    	; 0x1bc <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2a 03 4d 00 61 00 67 00 6e 00 65 00 74 00 69 00     *.M.a.g.n.e.t.i.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	63 00 20 00 43 00 61 00 72 00 64 00 20 00 52 00     c. .C.a.r.d. .R.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	65 00 61 00 64 00 65 00 72 00 00 00                 e.a.d.e.r...

000000c4 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c4:	42 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     B.D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      d4:	6d 00 65 00 72 00 61 00 20 00 61 00 6e 00 64 00     m.e.r.a. .a.n.d.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      e4:	20 00 44 00 65 00 6e 00 76 00 65 00 72 00 20 00      .D.e.n.v.e.r. .
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f4:	47 00 69 00 6e 00 67 00 65 00 72 00 69 00 63 00     G.i.n.g.e.r.i.c.
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     104:	68 00 00 00                                         h...

00000108 <LanguageString>:
     108:	04 03 09 04                                         ....

0000010c <ConfigurationDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10c:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     11c:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     12c:	00 05                                               ..

0000012e <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     13e:	dc 01                                               ..

00000140 <KeyboardReport>:
     140:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     160:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0 00     %.....)...u.....

00000180 <__ctors_end>:
				ReportSize     -= 1;
				ReportData     += 1;
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	d0 e2       	ldi	r29, 0x20	; 32
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	ea e2       	ldi	r30, 0x2A	; 42
     194:	f2 e1       	ldi	r31, 0x12	; 18
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 31       	cpi	r26, 0x18	; 24
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	1d e0       	ldi	r17, 0x0D	; 13
     1a8:	a8 e1       	ldi	r26, 0x18	; 24

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	a5 34       	cpi	r26, 0x45	; 69
     1b2:	b1 07       	cpc	r27, r17
				break;
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	83 d0       	rcall	.+262    	; 0x2be <main>
     1b8:	0c 94 13 09 	jmp	0x1226	; 0x1226 <_exit>

000001bc <__bad_interrupt>:
     1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <SetupHardware>:
     1be:	84 b7       	in	r24, 0x34	; 52
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	84 bf       	out	0x34, r24	; 52
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	10 92 60 00 	sts	0x0060, r1
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	90 e0       	ldi	r25, 0x00	; 0
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	80 e8       	ldi	r24, 0x80	; 128
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	80 93 61 00 	sts	0x0061, r24
     1e0:	90 93 61 00 	sts	0x0061, r25
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	87 b1       	in	r24, 0x07	; 7
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	80 78       	andi	r24, 0x80	; 128
     1ea:	87 b9       	out	0x07, r24	; 7
				break;
     1ec:	88 b1       	in	r24, 0x08	; 8
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	8f 67       	ori	r24, 0x7F	; 127
     1f0:	88 b9       	out	0x08, r24	; 8
     1f2:	b0 c3       	rjmp	.+1888   	; 0x954 <USB_Init>

000001f4 <ReadMagstripeData>:
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
				break;
     206:	cd b7       	in	r28, 0x3d	; 61
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	27 97       	sbiw	r28, 0x07	; 7
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	e2 e1       	ldi	r30, 0x12	; 18
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	de 01       	movw	r26, r28
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	01 90       	ld	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	8a 95       	dec	r24
     226:	e1 f7       	brne	.-8      	; 0x220 <ReadMagstripeData+0x2c>
     228:	26 b1       	in	r18, 0x06	; 6
     22a:	20 95       	com	r18
     22c:	2f 77       	andi	r18, 0x7F	; 127
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	6e 01       	movw	r12, r28
     232:	88 e0       	ldi	r24, 0x08	; 8
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	c8 0e       	add	r12, r24
     236:	d1 1c       	adc	r13, r1
     238:	82 2f       	mov	r24, r18
     23a:	80 74       	andi	r24, 0x40	; 64
     23c:	51 f1       	breq	.+84     	; 0x292 <ReadMagstripeData+0x9e>
     23e:	8e 01       	movw	r16, r28
     240:	0e 5f       	subi	r16, 0xFE	; 254
     242:	1f 4f       	sbci	r17, 0xFF	; 255
     244:	81 e2       	ldi	r24, 0x21	; 33
     246:	e8 2e       	mov	r14, r24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	f8 2e       	mov	r15, r24
     24c:	b2 2e       	mov	r11, r18
     24e:	b9 26       	eor	r11, r25
     250:	f8 01       	movw	r30, r16
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	90 81       	ld	r25, Z
     254:	31 97       	sbiw	r30, 0x01	; 1
     256:	80 81       	ld	r24, Z
     258:	38 2f       	mov	r19, r24
     25a:	32 23       	and	r19, r18
     25c:	59 f0       	breq	.+22     	; 0x274 <ReadMagstripeData+0x80>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	8b 21       	and	r24, r11
     260:	49 f0       	breq	.+18     	; 0x274 <ReadMagstripeData+0x80>
     262:	89 2f       	mov	r24, r25
     264:	82 23       	and	r24, r18
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	09 f4       	brne	.+2      	; 0x26c <ReadMagstripeData+0x78>
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	c7 01       	movw	r24, r14
     26e:	2f 83       	std	Y+7, r18	; 0x07
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	e4 d0       	rcall	.+456    	; 0x43a <BitBuffer_StoreNextBit>
				break;
     272:	2f 81       	ldd	r18, Y+7	; 0x07

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	0e 5f       	subi	r16, 0xFE	; 254
     276:	1f 4f       	sbci	r17, 0xFF	; 255
     278:	f8 ef       	ldi	r31, 0xF8	; 248
     27a:	ef 1a       	sub	r14, r31
     27c:	fb ef       	ldi	r31, 0xFB	; 251
     27e:	ff 0a       	sbc	r15, r31
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	0c 15       	cp	r16, r12
     282:	1d 05       	cpc	r17, r13
				break;
     284:	29 f7       	brne	.-54     	; 0x250 <ReadMagstripeData+0x5c>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	86 b1       	in	r24, 0x06	; 6
     288:	80 95       	com	r24
     28a:	92 2f       	mov	r25, r18
     28c:	28 2f       	mov	r18, r24
     28e:	2f 77       	andi	r18, 0x7F	; 127
				break;
     290:	d3 cf       	rjmp	.-90     	; 0x238 <ReadMagstripeData+0x44>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	81 e2       	ldi	r24, 0x21	; 33
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	90 93 11 01 	sts	0x0111, r25
     29a:	80 93 10 01 	sts	0x0110, r24
     29e:	27 96       	adiw	r28, 0x07	; 7
				break;
     2a0:	0f b6       	in	r0, 0x3f	; 63

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	df 91       	pop	r29
				break;
     2ac:	cf 91       	pop	r28

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
				break;
     2bc:	08 95       	ret

000002be <main>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	7f df       	rcall	.-258    	; 0x1be <SetupHardware>
     2c0:	81 e2       	ldi	r24, 0x21	; 33
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	a2 d0       	rcall	.+324    	; 0x40a <BitBuffer_Init>
     2c6:	89 e2       	ldi	r24, 0x29	; 41
     2c8:	95 e0       	ldi	r25, 0x05	; 5
     2ca:	9f d0       	rcall	.+318    	; 0x40a <BitBuffer_Init>
				break;
     2cc:	81 e3       	ldi	r24, 0x31	; 49
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	99 e0       	ldi	r25, 0x09	; 9
     2d0:	9c d0       	rcall	.+312    	; 0x40a <BitBuffer_Init>
     2d2:	78 94       	sei
				break;
     2d4:	36 9b       	sbis	0x06, 6	; 6

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	8e df       	rcall	.-228    	; 0x1f4 <ReadMagstripeData>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	91 e0       	ldi	r25, 0x01	; 1

				if (ParserData->UsingReportIDs)
     2dc:	cb d6       	rcall	.+3478   	; 0x1074 <HID_Device_USBTask>
     2de:	6a d5       	rcall	.+2772   	; 0xdb4 <USB_USBTask>
     2e0:	f9 cf       	rjmp	.-14     	; 0x2d4 <main+0x16>

000002e2 <EVENT_USB_Device_ConfigurationChanged>:
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	b3 d6       	rcall	.+3430   	; 0x104e <HID_Device_ConfigureEndpoints>
     2e8:	e2 ee       	ldi	r30, 0xE2	; 226
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	80 81       	ld	r24, Z
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <EVENT_USB_Device_ControlRequest>:
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	78 c5       	rjmp	.+2800   	; 0xdea <HID_Device_ProcessControlRequest>

000002fa <EVENT_USB_Device_StartOfFrame>:
     2fa:	80 91 0e 01 	lds	r24, 0x010E
     2fe:	90 91 0f 01 	lds	r25, 0x010F
     302:	00 97       	sbiw	r24, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	29 f0       	breq	.+10     	; 0x310 <EVENT_USB_Device_StartOfFrame+0x16>
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	90 93 0f 01 	sts	0x010F, r25
     30c:	80 93 0e 01 	sts	0x010E, r24
     310:	08 95       	ret

00000312 <CALLBACK_HID_Device_CreateHIDReport>:
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	df 93       	push	r29
     31a:	e9 01       	movw	r28, r18
     31c:	80 91 18 01 	lds	r24, 0x0118
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	89 27       	eor	r24, r25
     324:	80 93 18 01 	sts	0x0118, r24
     328:	81 11       	cpse	r24, r1
     32a:	08 c0       	rjmp	.+16     	; 0x33c <CALLBACK_HID_Device_CreateHIDReport+0x2a>
     32c:	80 91 10 01 	lds	r24, 0x0110
     330:	90 91 11 01 	lds	r25, 0x0111
     334:	2d e0       	ldi	r18, 0x0D	; 13
     336:	89 33       	cpi	r24, 0x39	; 57
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	92 07       	cpc	r25, r18
     33a:	11 f4       	brne	.+4      	; 0x340 <CALLBACK_HID_Device_CreateHIDReport+0x2e>
     33c:	1a 82       	std	Y+2, r1	; 0x02
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	16 c0       	rjmp	.+44     	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x5a>
     340:	fc 01       	movw	r30, r24
     342:	fc 5f       	subi	r31, 0xFC	; 252
     344:	20 81       	ld	r18, Z
     346:	31 81       	ldd	r19, Z+1	; 0x01
     348:	23 2b       	or	r18, r19
     34a:	49 f4       	brne	.+18     	; 0x35e <CALLBACK_HID_Device_CreateHIDReport+0x4c>
     34c:	28 e2       	ldi	r18, 0x28	; 40
     34e:	2a 83       	std	Y+2, r18	; 0x02
     350:	88 5f       	subi	r24, 0xF8	; 248
     352:	9b 4f       	sbci	r25, 0xFB	; 251
     354:	90 93 11 01 	sts	0x0111, r25
     358:	80 93 10 01 	sts	0x0110, r24
     35c:	07 c0       	rjmp	.+14     	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x5a>
     35e:	a1 d0       	rcall	.+322    	; 0x4a2 <BitBuffer_GetNextBit>
     360:	88 23       	and	r24, r24
     362:	11 f0       	breq	.+4      	; 0x368 <CALLBACK_HID_Device_CreateHIDReport+0x56>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	8e e1       	ldi	r24, 0x1E	; 30
     366:	01 c0       	rjmp	.+2      	; 0x36a <CALLBACK_HID_Device_CreateHIDReport+0x58>
     368:	87 e2       	ldi	r24, 0x27	; 39
     36a:	8a 83       	std	Y+2, r24	; 0x02
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	88 e0       	ldi	r24, 0x08	; 8
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	f8 01       	movw	r30, r16
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	80 e0       	ldi	r24, 0x00	; 0

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <CALLBACK_HID_Device_ProcessHIDReport>:
     382:	08 95       	ret

00000384 <CALLBACK_USB_GetDescriptor>:
     384:	29 2f       	mov	r18, r25
     386:	33 27       	eor	r19, r19
				break;
     388:	23 30       	cpi	r18, 0x03	; 3

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	31 05       	cpc	r19, r1
     38c:	b9 f0       	breq	.+46     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x38>
     38e:	5c f4       	brge	.+22     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x22>
     390:	21 30       	cpi	r18, 0x01	; 1
     392:	31 05       	cpc	r19, r1
     394:	69 f1       	breq	.+90     	; 0x3f0 <CALLBACK_USB_GetDescriptor+0x6c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	22 30       	cpi	r18, 0x02	; 2
     398:	31 05       	cpc	r19, r1
     39a:	79 f5       	brne	.+94     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x76>
     39c:	82 e2       	ldi	r24, 0x22	; 34
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2c e0       	ldi	r18, 0x0C	; 12
     3a2:	31 e0       	ldi	r19, 0x01	; 1
     3a4:	2e c0       	rjmp	.+92     	; 0x402 <CALLBACK_USB_GetDescriptor+0x7e>
     3a6:	21 32       	cpi	r18, 0x21	; 33
     3a8:	31 05       	cpc	r19, r1
     3aa:	e9 f0       	breq	.+58     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x62>
     3ac:	22 32       	cpi	r18, 0x22	; 34
     3ae:	31 05       	cpc	r19, r1
				break;
     3b0:	21 f5       	brne	.+72     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x76>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	8f e3       	ldi	r24, 0x3F	; 63
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	20 e4       	ldi	r18, 0x40	; 64
     3b8:	31 e0       	ldi	r19, 0x01	; 1
     3ba:	23 c0       	rjmp	.+70     	; 0x402 <CALLBACK_USB_GetDescriptor+0x7e>
     3bc:	99 27       	eor	r25, r25
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	91 05       	cpc	r25, r1
     3c2:	41 f0       	breq	.+16     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x50>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	91 05       	cpc	r25, r1
     3c8:	41 f0       	breq	.+16     	; 0x3da <CALLBACK_USB_GetDescriptor+0x56>
     3ca:	89 2b       	or	r24, r25
     3cc:	b1 f4       	brne	.+44     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x76>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	e8 e0       	ldi	r30, 0x08	; 8
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <CALLBACK_USB_GetDescriptor+0x5a>

					while (CurrCollectionPath->Parent != NULL)
     3d4:	e4 ec       	ldi	r30, 0xC4	; 196
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <CALLBACK_USB_GetDescriptor+0x5a>
     3da:	e8 e9       	ldi	r30, 0x98	; 152
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	84 91       	lpm	r24, Z
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	9f 01       	movw	r18, r30
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <CALLBACK_USB_GetDescriptor+0x7e>
     3e6:	89 e0       	ldi	r24, 0x09	; 9
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	2e e1       	ldi	r18, 0x1E	; 30
     3ec:	31 e0       	ldi	r19, 0x01	; 1
     3ee:	09 c0       	rjmp	.+18     	; 0x402 <CALLBACK_USB_GetDescriptor+0x7e>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	82 e1       	ldi	r24, 0x12	; 18
     3f2:	90 e0       	ldi	r25, 0x00	; 0
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	2e e2       	ldi	r18, 0x2E	; 46
     3f6:	31 e0       	ldi	r19, 0x01	; 1
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <CALLBACK_USB_GetDescriptor+0x7e>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	fa 01       	movw	r30, r20
     404:	31 83       	std	Z+1, r19	; 0x01
     406:	20 83       	st	Z, r18
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	08 95       	ret

0000040a <BitBuffer_Init>:
     40a:	fc 01       	movw	r30, r24
     40c:	fc 5f       	subi	r31, 0xFC	; 252
     40e:	11 82       	std	Z+1, r1	; 0x01
     410:	10 82       	st	Z, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	fc 01       	movw	r30, r24
     414:	ee 5f       	subi	r30, 0xFE	; 254
     416:	fb 4f       	sbci	r31, 0xFB	; 251
     418:	91 83       	std	Z+1, r25	; 0x01
     41a:	80 83       	st	Z, r24
     41c:	fc 01       	movw	r30, r24
     41e:	ec 5f       	subi	r30, 0xFC	; 252

				if (UsageListSize)
     420:	fb 4f       	sbci	r31, 0xFB	; 251
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	20 83       	st	Z, r18
     426:	fc 01       	movw	r30, r24
     428:	eb 5f       	subi	r30, 0xFB	; 251
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	fb 4f       	sbci	r31, 0xFB	; 251
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	80 83       	st	Z, r24
     430:	fc 01       	movw	r30, r24
     432:	e9 5f       	subi	r30, 0xF9	; 249
     434:	fb 4f       	sbci	r31, 0xFB	; 251
     436:	20 83       	st	Z, r18
     438:	08 95       	ret

0000043a <BitBuffer_StoreNextBit>:
     43a:	fc 01       	movw	r30, r24
     43c:	ec 5f       	subi	r30, 0xFC	; 252
     43e:	fb 4f       	sbci	r31, 0xFB	; 251

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	66 23       	and	r22, r22
     442:	51 f0       	breq	.+20     	; 0x458 <BitBuffer_StoreNextBit+0x1e>
     444:	dc 01       	movw	r26, r24
     446:	ae 5f       	subi	r26, 0xFE	; 254
     448:	bb 4f       	sbci	r27, 0xFB	; 251
     44a:	0d 90       	ld	r0, X+
					  UsageList[i - 1] = UsageList[i];
     44c:	bc 91       	ld	r27, X
     44e:	a0 2d       	mov	r26, r0
     450:	2c 91       	ld	r18, X
     452:	30 81       	ld	r19, Z

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	23 2b       	or	r18, r19
     456:	2c 93       	st	X, r18
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	dc 01       	movw	r26, r24
     45a:	bc 5f       	subi	r27, 0xFC	; 252
     45c:	2d 91       	ld	r18, X+
     45e:	3c 91       	ld	r19, X
     460:	11 97       	sbiw	r26, 0x01	; 1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	2d 93       	st	X+, r18
     468:	3c 93       	st	X, r19
     46a:	20 81       	ld	r18, Z
     46c:	20 38       	cpi	r18, 0x80	; 128
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	b1 f4       	brne	.+44     	; 0x49c <BitBuffer_StoreNextBit+0x62>
     470:	dc 01       	movw	r26, r24
     472:	ae 5f       	subi	r26, 0xFE	; 254
     474:	bb 4f       	sbci	r27, 0xFB	; 251
     476:	2d 91       	ld	r18, X+
     478:	3c 91       	ld	r19, X
     47a:	11 97       	sbiw	r26, 0x01	; 1
     47c:	ac 01       	movw	r20, r24
     47e:	41 50       	subi	r20, 0x01	; 1
     480:	5c 4f       	sbci	r21, 0xFC	; 252
     482:	24 17       	cp	r18, r20
     484:	35 07       	cpc	r19, r21
     486:	29 f0       	breq	.+10     	; 0x492 <BitBuffer_StoreNextBit+0x58>
     488:	2f 5f       	subi	r18, 0xFF	; 255
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	2d 93       	st	X+, r18
     48e:	3c 93       	st	X, r19
     490:	02 c0       	rjmp	.+4      	; 0x496 <BitBuffer_StoreNextBit+0x5c>
     492:	8d 93       	st	X+, r24
     494:	9c 93       	st	X, r25
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	80 83       	st	Z, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	08 95       	ret
     49c:	22 0f       	add	r18, r18
     49e:	20 83       	st	Z, r18
     4a0:	08 95       	ret

000004a2 <BitBuffer_GetNextBit>:
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	dc 01       	movw	r26, r24
     4a8:	ab 5f       	subi	r26, 0xFB	; 251
     4aa:	bb 4f       	sbci	r27, 0xFB	; 251
				break;
     4ac:	cd 91       	ld	r28, X+
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	dc 91       	ld	r29, X
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	38 81       	ld	r19, Y
     4b4:	fc 01       	movw	r30, r24
     4b6:	e9 5f       	subi	r30, 0xF9	; 249
     4b8:	fb 4f       	sbci	r31, 0xFB	; 251
     4ba:	20 81       	ld	r18, Z
     4bc:	43 2f       	mov	r20, r19
     4be:	42 23       	and	r20, r18
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <BitBuffer_GetNextBit+0x24>
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	20 95       	com	r18
     4c8:	23 23       	and	r18, r19
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	28 83       	st	Y, r18
     4cc:	ec 01       	movw	r28, r24
     4ce:	dc 5f       	subi	r29, 0xFC	; 252
     4d0:	28 81       	ld	r18, Y
     4d2:	39 81       	ldd	r19, Y+1	; 0x01
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	31 09       	sbc	r19, r1
     4d8:	39 83       	std	Y+1, r19	; 0x01
     4da:	28 83       	st	Y, r18
     4dc:	20 81       	ld	r18, Z
     4de:	20 38       	cpi	r18, 0x80	; 128
     4e0:	99 f4       	brne	.+38     	; 0x508 <BitBuffer_GetNextBit+0x66>
     4e2:	2d 91       	ld	r18, X+
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	3c 91       	ld	r19, X
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	ac 01       	movw	r20, r24
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	5c 4f       	sbci	r21, 0xFC	; 252
     4ee:	24 17       	cp	r18, r20
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	35 07       	cpc	r19, r21
     4f2:	29 f0       	breq	.+10     	; 0x4fe <BitBuffer_GetNextBit+0x5c>
     4f4:	2f 5f       	subi	r18, 0xFF	; 255
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	2d 93       	st	X+, r18
     4fa:	3c 93       	st	X, r19
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <BitBuffer_GetNextBit+0x60>
     4fe:	8d 93       	st	X+, r24
     500:	9c 93       	st	X, r25
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 83       	st	Z, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	02 c0       	rjmp	.+4      	; 0x50c <BitBuffer_GetNextBit+0x6a>
     508:	22 0f       	add	r18, r18
     50a:	20 83       	st	Z, r18
     50c:	86 2f       	mov	r24, r22
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <Endpoint_Write_Stream_LE>:
     514:	cf 92       	push	r12
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16

					if (UsageListSize)
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	7c 01       	movw	r14, r24
     526:	8b 01       	movw	r16, r22
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	ea 01       	movw	r28, r20
     52a:	a1 d1       	rcall	.+834    	; 0x86e <Endpoint_WaitUntilReady>
     52c:	81 11       	cpse	r24, r1
     52e:	31 c0       	rjmp	.+98     	; 0x592 <Endpoint_Write_Stream_LE+0x7e>
     530:	20 97       	sbiw	r28, 0x00	; 0
     532:	31 f0       	breq	.+12     	; 0x540 <Endpoint_Write_Stream_LE+0x2c>
     534:	88 81       	ld	r24, Y
     536:	99 81       	ldd	r25, Y+1	; 0x01
     538:	08 1b       	sub	r16, r24
     53a:	19 0b       	sbc	r17, r25
     53c:	e8 0e       	add	r14, r24

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	f9 1e       	adc	r15, r25
     540:	c1 2c       	mov	r12, r1
     542:	d1 2c       	mov	r13, r1
     544:	01 15       	cp	r16, r1
     546:	11 05       	cpc	r17, r1
     548:	19 f1       	breq	.+70     	; 0x590 <Endpoint_Write_Stream_LE+0x7c>
						  UsageList[i - 1] = UsageList[i];
     54a:	80 91 e8 00 	lds	r24, 0x00E8
     54e:	85 fd       	sbrc	r24, 5
     550:	14 c0       	rjmp	.+40     	; 0x57a <Endpoint_Write_Stream_LE+0x66>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	80 91 e8 00 	lds	r24, 0x00E8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	8e 77       	andi	r24, 0x7E	; 126
     558:	80 93 e8 00 	sts	0x00E8, r24
     55c:	2b d4       	rcall	.+2134   	; 0xdb4 <USB_USBTask>
     55e:	20 97       	sbiw	r28, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	41 f0       	breq	.+16     	; 0x572 <Endpoint_Write_Stream_LE+0x5e>
     562:	88 81       	ld	r24, Y
     564:	99 81       	ldd	r25, Y+1	; 0x01
     566:	8c 0d       	add	r24, r12
     568:	9d 1d       	adc	r25, r13
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	99 83       	std	Y+1, r25	; 0x01
     56c:	88 83       	st	Y, r24
     56e:	85 e0       	ldi	r24, 0x05	; 5
     570:	10 c0       	rjmp	.+32     	; 0x592 <Endpoint_Write_Stream_LE+0x7e>
     572:	7d d1       	rcall	.+762    	; 0x86e <Endpoint_WaitUntilReady>
     574:	88 23       	and	r24, r24
     576:	31 f3       	breq	.-52     	; 0x544 <Endpoint_Write_Stream_LE+0x30>
     578:	0c c0       	rjmp	.+24     	; 0x592 <Endpoint_Write_Stream_LE+0x7e>
     57a:	f7 01       	movw	r30, r14
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	81 91       	ld	r24, Z+
     57e:	7f 01       	movw	r14, r30
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	80 93 f1 00 	sts	0x00F1, r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	01 50       	subi	r16, 0x01	; 1
     586:	11 09       	sbc	r17, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	ff ef       	ldi	r31, 0xFF	; 255
     58a:	cf 1a       	sub	r12, r31
     58c:	df 0a       	sbc	r13, r31
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	da cf       	rjmp	.-76     	; 0x544 <Endpoint_Write_Stream_LE+0x30>
     590:	80 e0       	ldi	r24, 0x00	; 0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	08 95       	ret

000005a4 <Endpoint_Write_Control_Stream_LE>:
     5a4:	20 91 43 0d 	lds	r18, 0x0D43
     5a8:	30 91 44 0d 	lds	r19, 0x0D44

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	26 17       	cp	r18, r22
     5ae:	37 07       	cpc	r19, r23
     5b0:	48 f0       	brcs	.+18     	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x20>
     5b2:	61 15       	cp	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0x22>
     5b8:	20 91 e8 00 	lds	r18, 0x00E8

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	2e 77       	andi	r18, 0x7E	; 126
     5be:	20 93 e8 00 	sts	0x00E8, r18
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0x22>
     5c4:	b9 01       	movw	r22, r18
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	91 f1       	breq	.+100    	; 0x634 <Endpoint_Write_Control_Stream_LE+0x90>
     5d0:	8e b3       	in	r24, 0x1e	; 30
     5d2:	88 23       	and	r24, r24
     5d4:	e1 f1       	breq	.+120    	; 0x64e <Endpoint_Write_Control_Stream_LE+0xaa>
     5d6:	85 30       	cpi	r24, 0x05	; 5
     5d8:	e1 f1       	breq	.+120    	; 0x652 <Endpoint_Write_Control_Stream_LE+0xae>
     5da:	80 91 e8 00 	lds	r24, 0x00E8
     5de:	83 fd       	sbrc	r24, 3
     5e0:	3a c0       	rjmp	.+116    	; 0x656 <Endpoint_Write_Control_Stream_LE+0xb2>
     5e2:	80 91 e8 00 	lds	r24, 0x00E8
     5e6:	82 ff       	sbrs	r24, 2
     5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0x52>
     5ea:	80 91 e8 00 	lds	r24, 0x00E8
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	24 c0       	rjmp	.+72     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x96>
     5f2:	80 e0       	ldi	r24, 0x00	; 0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	08 95       	ret
     5f6:	80 91 e8 00 	lds	r24, 0x00E8
     5fa:	80 ff       	sbrs	r24, 0
     5fc:	e6 cf       	rjmp	.-52     	; 0x5ca <Endpoint_Write_Control_Stream_LE+0x26>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	80 91 f2 00 	lds	r24, 0x00F2

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	90 91 f3 00 	lds	r25, 0x00F3
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	51 f0       	breq	.+20     	; 0x620 <Endpoint_Write_Control_Stream_LE+0x7c>
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	91 05       	cpc	r25, r1
     610:	38 f4       	brcc	.+14     	; 0x620 <Endpoint_Write_Control_Stream_LE+0x7c>
     612:	21 91       	ld	r18, Z+
     614:	20 93 f1 00 	sts	0x00F1, r18
     618:	61 50       	subi	r22, 0x01	; 1
     61a:	71 09       	sbc	r23, r1
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	f3 cf       	rjmp	.-26     	; 0x606 <Endpoint_Write_Control_Stream_LE+0x62>
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	08 97       	sbiw	r24, 0x08	; 8
     624:	09 f0       	breq	.+2      	; 0x628 <Endpoint_Write_Control_Stream_LE+0x84>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	80 91 e8 00 	lds	r24, 0x00E8
     62c:	8e 77       	andi	r24, 0x7E	; 126
     62e:	80 93 e8 00 	sts	0x00E8, r24
     632:	cb cf       	rjmp	.-106    	; 0x5ca <Endpoint_Write_Control_Stream_LE+0x26>
     634:	21 11       	cpse	r18, r1
     636:	cc cf       	rjmp	.-104    	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0x2c>
     638:	d8 cf       	rjmp	.-80     	; 0x5ea <Endpoint_Write_Control_Stream_LE+0x46>
     63a:	8e b3       	in	r24, 0x1e	; 30
     63c:	88 23       	and	r24, r24
     63e:	39 f0       	breq	.+14     	; 0x64e <Endpoint_Write_Control_Stream_LE+0xaa>
     640:	85 30       	cpi	r24, 0x05	; 5
     642:	39 f0       	breq	.+14     	; 0x652 <Endpoint_Write_Control_Stream_LE+0xae>
     644:	80 91 e8 00 	lds	r24, 0x00E8
     648:	83 ff       	sbrs	r24, 3
     64a:	cf cf       	rjmp	.-98     	; 0x5ea <Endpoint_Write_Control_Stream_LE+0x46>
     64c:	04 c0       	rjmp	.+8      	; 0x656 <Endpoint_Write_Control_Stream_LE+0xb2>
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	08 95       	ret
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	08 95       	ret
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	08 95       	ret

0000065a <Endpoint_Read_Control_Stream_LE>:
     65a:	61 15       	cp	r22, r1
     65c:	71 05       	cpc	r23, r1
     65e:	29 f4       	brne	.+10     	; 0x66a <Endpoint_Read_Control_Stream_LE+0x10>
     660:	20 91 e8 00 	lds	r18, 0x00E8
     664:	2b 77       	andi	r18, 0x7B	; 123
     666:	20 93 e8 00 	sts	0x00E8, r18
     66a:	61 15       	cp	r22, r1
     66c:	71 05       	cpc	r23, r1
     66e:	21 f1       	breq	.+72     	; 0x6b8 <Endpoint_Read_Control_Stream_LE+0x5e>
     670:	2e b3       	in	r18, 0x1e	; 30
     672:	22 23       	and	r18, r18
     674:	51 f1       	breq	.+84     	; 0x6ca <Endpoint_Read_Control_Stream_LE+0x70>
     676:	25 30       	cpi	r18, 0x05	; 5
     678:	51 f1       	breq	.+84     	; 0x6ce <Endpoint_Read_Control_Stream_LE+0x74>
     67a:	20 91 e8 00 	lds	r18, 0x00E8
     67e:	23 fd       	sbrc	r18, 3
     680:	20 c0       	rjmp	.+64     	; 0x6c2 <Endpoint_Read_Control_Stream_LE+0x68>
     682:	20 91 e8 00 	lds	r18, 0x00E8
     686:	22 ff       	sbrs	r18, 2
					  ParserData->TotalReportItems++;
     688:	f3 cf       	rjmp	.-26     	; 0x670 <Endpoint_Read_Control_Stream_LE+0x16>
     68a:	fc 01       	movw	r30, r24
     68c:	cf 01       	movw	r24, r30
     68e:	20 91 f2 00 	lds	r18, 0x00F2

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	30 91 f3 00 	lds	r19, 0x00F3
     696:	23 2b       	or	r18, r19
     698:	19 f3       	breq	.-58     	; 0x660 <Endpoint_Read_Control_Stream_LE+0x6>
     69a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	81 93       	st	Z+, r24
     6a0:	cf 01       	movw	r24, r30
     6a2:	61 50       	subi	r22, 0x01	; 1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	71 09       	sbc	r23, r1
     6a6:	61 15       	cp	r22, r1
     6a8:	71 05       	cpc	r23, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	81 f7       	brne	.-32     	; 0x68c <Endpoint_Read_Control_Stream_LE+0x32>
     6ac:	d9 cf       	rjmp	.-78     	; 0x660 <Endpoint_Read_Control_Stream_LE+0x6>
     6ae:	8e b3       	in	r24, 0x1e	; 30
     6b0:	88 23       	and	r24, r24
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	59 f0       	breq	.+22     	; 0x6ca <Endpoint_Read_Control_Stream_LE+0x70>
     6b4:	85 30       	cpi	r24, 0x05	; 5
     6b6:	59 f0       	breq	.+22     	; 0x6ce <Endpoint_Read_Control_Stream_LE+0x74>
     6b8:	80 91 e8 00 	lds	r24, 0x00E8
	  return HID_PARSE_NoUnfilteredReportItems;
     6bc:	80 ff       	sbrs	r24, 0

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	f7 cf       	rjmp	.-18     	; 0x6ae <Endpoint_Read_Control_Stream_LE+0x54>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <Endpoint_Read_Control_Stream_LE+0x6c>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	08 95       	ret
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	08 95       	ret
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	08 95       	ret

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	08 95       	ret

000006d2 <Endpoint_Write_Control_PStream_LE>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	20 91 43 0d 	lds	r18, 0x0D43
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	30 91 44 0d 	lds	r19, 0x0D44

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6da:	26 17       	cp	r18, r22
     6dc:	37 07       	cpc	r19, r23
     6de:	48 f0       	brcs	.+18     	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x20>
     6e0:	61 15       	cp	r22, r1
     6e2:	71 05       	cpc	r23, r1
     6e4:	39 f4       	brne	.+14     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x22>
     6e6:	20 91 e8 00 	lds	r18, 0x00E8
     6ea:	2e 77       	andi	r18, 0x7E	; 126
     6ec:	20 93 e8 00 	sts	0x00E8, r18
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x22>
     6f2:	b9 01       	movw	r22, r18
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	61 15       	cp	r22, r1
     6fa:	71 05       	cpc	r23, r1
     6fc:	a9 f1       	breq	.+106    	; 0x768 <Endpoint_Write_Control_PStream_LE+0x96>
     6fe:	8e b3       	in	r24, 0x1e	; 30
     700:	88 23       	and	r24, r24
     702:	09 f4       	brne	.+2      	; 0x706 <Endpoint_Write_Control_PStream_LE+0x34>
     704:	3e c0       	rjmp	.+124    	; 0x782 <Endpoint_Write_Control_PStream_LE+0xb0>
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	09 f4       	brne	.+2      	; 0x70c <Endpoint_Write_Control_PStream_LE+0x3a>
     70a:	3d c0       	rjmp	.+122    	; 0x786 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     70c:	80 91 e8 00 	lds	r24, 0x00E8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     710:	83 fd       	sbrc	r24, 3
     712:	3b c0       	rjmp	.+118    	; 0x78a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     714:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     718:	82 ff       	sbrs	r24, 2
     71a:	06 c0       	rjmp	.+12     	; 0x728 <Endpoint_Write_Control_PStream_LE+0x56>
     71c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     720:	82 ff       	sbrs	r24, 2
     722:	25 c0       	rjmp	.+74     	; 0x76e <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     728:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     72c:	80 ff       	sbrs	r24, 0
     72e:	e4 cf       	rjmp	.-56     	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     730:	80 91 f2 00 	lds	r24, 0x00F2
     734:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     738:	61 15       	cp	r22, r1
     73a:	71 05       	cpc	r23, r1
     73c:	59 f0       	breq	.+22     	; 0x754 <Endpoint_Write_Control_PStream_LE+0x82>
     73e:	88 30       	cpi	r24, 0x08	; 8
     740:	91 05       	cpc	r25, r1
     742:	40 f4       	brcc	.+16     	; 0x754 <Endpoint_Write_Control_PStream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     744:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     746:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     74a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     74c:	61 50       	subi	r22, 0x01	; 1
     74e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	f2 cf       	rjmp	.-28     	; 0x738 <Endpoint_Write_Control_PStream_LE+0x66>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	08 97       	sbiw	r24, 0x08	; 8
     758:	09 f0       	breq	.+2      	; 0x75c <Endpoint_Write_Control_PStream_LE+0x8a>
     75a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     75c:	80 91 e8 00 	lds	r24, 0x00E8
     760:	8e 77       	andi	r24, 0x7E	; 126
     762:	80 93 e8 00 	sts	0x00E8, r24
     766:	c8 cf       	rjmp	.-112    	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     768:	21 11       	cpse	r18, r1
     76a:	c9 cf       	rjmp	.-110    	; 0x6fe <Endpoint_Write_Control_PStream_LE+0x2c>
     76c:	d7 cf       	rjmp	.-82     	; 0x71c <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     76e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     770:	88 23       	and	r24, r24
     772:	39 f0       	breq	.+14     	; 0x782 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     774:	85 30       	cpi	r24, 0x05	; 5
     776:	39 f0       	breq	.+14     	; 0x786 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     778:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     77c:	83 ff       	sbrs	r24, 3
     77e:	ce cf       	rjmp	.-100    	; 0x71c <Endpoint_Write_Control_PStream_LE+0x4a>
     780:	04 c0       	rjmp	.+8      	; 0x78a <Endpoint_Write_Control_PStream_LE+0xb8>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     78a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     78c:	08 95       	ret

0000078e <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     78e:	8f 70       	andi	r24, 0x0F	; 15
     790:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     794:	eb ee       	ldi	r30, 0xEB	; 235
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     79e:	ed ee       	ldi	r30, 0xED	; 237
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
     7a4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     7a8:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     7aa:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     7ae:	88 1f       	adc	r24, r24
     7b0:	88 27       	eor	r24, r24
     7b2:	88 1f       	adc	r24, r24
     7b4:	08 95       	ret

000007b6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	06 2f       	mov	r16, r22
     7c0:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	10 17       	cp	r17, r16
     7c6:	71 f1       	breq	.+92     	; 0x824 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
     7c8:	98 81       	ld	r25, Y
     7ca:	99 23       	and	r25, r25
     7cc:	41 f1       	breq	.+80     	; 0x81e <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7ce:	2c 81       	ldd	r18, Y+4	; 0x04
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02
     7d4:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     7d6:	89 2f       	mov	r24, r25
     7d8:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     7da:	87 30       	cpi	r24, 0x07	; 7
     7dc:	10 f0       	brcs	.+4      	; 0x7e2 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	22 c0       	rjmp	.+68     	; 0x826 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e2:	22 30       	cpi	r18, 0x02	; 2
     7e4:	10 f0       	brcs	.+4      	; 0x7ea <Endpoint_ConfigureEndpointTable+0x34>
     7e6:	56 e0       	ldi	r21, 0x06	; 6
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <Endpoint_ConfigureEndpointTable+0x36>
     7ea:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     7ec:	28 e0       	ldi	r18, 0x08	; 8
     7ee:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     7f0:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7f2:	2e 17       	cp	r18, r30
     7f4:	3f 07       	cpc	r19, r31
     7f6:	20 f4       	brcc	.+8      	; 0x800 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
     7f8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	f9 cf       	rjmp	.-14     	; 0x7f2 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
     800:	42 95       	swap	r20
     802:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     804:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     806:	69 2f       	mov	r22, r25
     808:	66 1f       	adc	r22, r22
     80a:	66 27       	eor	r22, r22
     80c:	66 1f       	adc	r22, r22
     80e:	90 e4       	ldi	r25, 0x40	; 64
     810:	79 9f       	mul	r23, r25
     812:	90 01       	movw	r18, r0
     814:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     816:	62 2b       	or	r22, r18
     818:	ba df       	rcall	.-140    	; 0x78e <Endpoint_ConfigureEndpoint_Prv>
     81a:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     81c:	01 f3       	breq	.-64     	; 0x7de <Endpoint_ConfigureEndpointTable+0x28>
     81e:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     820:	25 96       	adiw	r28, 0x05	; 5
     822:	d0 cf       	rjmp	.-96     	; 0x7c4 <Endpoint_ConfigureEndpointTable+0xe>
     824:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     826:	df 91       	pop	r29
}
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <Endpoint_ClearStatusStage>:
     830:	80 91 3d 0d 	lds	r24, 0x0D3D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     834:	87 fd       	sbrc	r24, 7
     836:	05 c0       	rjmp	.+10     	; 0x842 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     838:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     83c:	80 ff       	sbrs	r24, 0
     83e:	0d c0       	rjmp	.+26     	; 0x85a <Endpoint_ClearStatusStage+0x2a>
     840:	10 c0       	rjmp	.+32     	; 0x862 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     842:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     846:	82 fd       	sbrc	r24, 2
     848:	04 c0       	rjmp	.+8      	; 0x852 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     84a:	8e b3       	in	r24, 0x1e	; 30
     84c:	81 11       	cpse	r24, r1
     84e:	f9 cf       	rjmp	.-14     	; 0x842 <Endpoint_ClearStatusStage+0x12>
     850:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     852:	80 91 e8 00 	lds	r24, 0x00E8
     856:	8b 77       	andi	r24, 0x7B	; 123
     858:	07 c0       	rjmp	.+14     	; 0x868 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     85a:	8e b3       	in	r24, 0x1e	; 30
     85c:	81 11       	cpse	r24, r1
     85e:	ec cf       	rjmp	.-40     	; 0x838 <Endpoint_ClearStatusStage+0x8>
     860:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     862:	80 91 e8 00 	lds	r24, 0x00E8
     866:	8e 77       	andi	r24, 0x7E	; 126
     868:	80 93 e8 00 	sts	0x00E8, r24
     86c:	08 95       	ret

0000086e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     86e:	80 91 e4 00 	lds	r24, 0x00E4
     872:	90 91 e5 00 	lds	r25, 0x00E5
     876:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     878:	20 91 ec 00 	lds	r18, 0x00EC
     87c:	20 ff       	sbrs	r18, 0
     87e:	20 c0       	rjmp	.+64     	; 0x8c0 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     880:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     884:	20 fd       	sbrc	r18, 0
     886:	20 c0       	rjmp	.+64     	; 0x8c8 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     888:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     88a:	22 23       	and	r18, r18
     88c:	89 f0       	breq	.+34     	; 0x8b0 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     88e:	25 30       	cpi	r18, 0x05	; 5
     890:	89 f0       	breq	.+34     	; 0x8b4 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     892:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     896:	25 fd       	sbrc	r18, 5
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <Endpoint_WaitUntilReady+0x4a>
     89a:	20 91 e4 00 	lds	r18, 0x00E4
     89e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     8a2:	28 17       	cp	r18, r24
     8a4:	39 07       	cpc	r19, r25
     8a6:	41 f3       	breq	.-48     	; 0x878 <Endpoint_WaitUntilReady+0xa>
     8a8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     8aa:	41 f0       	breq	.+16     	; 0x8bc <Endpoint_WaitUntilReady+0x4e>
     8ac:	c9 01       	movw	r24, r18
     8ae:	e4 cf       	rjmp	.-56     	; 0x878 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8c0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8c4:	22 ff       	sbrs	r18, 2
     8c6:	e0 cf       	rjmp	.-64     	; 0x888 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	08 95       	ret

000008cc <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8d4:	4d d0       	rcall	.+154    	; 0x970 <USB_INT_DisableAllInterrupts>
     8d6:	54 d0       	rcall	.+168    	; 0x980 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8d8:	c8 ed       	ldi	r28, 0xD8	; 216
     8da:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8dc:	88 81       	ld	r24, Y
     8de:	8f 77       	andi	r24, 0x7F	; 127
     8e0:	88 83       	st	Y, r24
     8e2:	88 81       	ld	r24, Y
     8e4:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     8e6:	88 83       	st	Y, r24
     8e8:	88 81       	ld	r24, Y
     8ea:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ec:	88 83       	st	Y, r24
     8ee:	e7 ed       	ldi	r30, 0xD7	; 215
     8f0:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     8f2:	80 81       	ld	r24, Z
     8f4:	80 68       	ori	r24, 0x80	; 128
     8f6:	80 83       	st	Z, r24
     8f8:	19 bc       	out	0x29, r1	; 41
     8fa:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8fc:	10 92 39 0d 	sts	0x0D39, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     900:	10 92 3b 0d 	sts	0x0D3B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     904:	10 92 3a 0d 	sts	0x0D3A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     908:	00 ee       	ldi	r16, 0xE0	; 224
     90a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     90c:	f8 01       	movw	r30, r16
     90e:	80 81       	ld	r24, Z
     910:	8b 7f       	andi	r24, 0xFB	; 251
     912:	80 83       	st	Z, r24
     914:	88 81       	ld	r24, Y
     916:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     918:	88 83       	st	Y, r24
     91a:	42 e0       	ldi	r20, 0x02	; 2
     91c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	36 df       	rcall	.-404    	; 0x78e <Endpoint_ConfigureEndpoint_Prv>
     922:	e1 ee       	ldi	r30, 0xE1	; 225
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     928:	8e 7f       	andi	r24, 0xFE	; 254
     92a:	80 83       	st	Z, r24
     92c:	e2 ee       	ldi	r30, 0xE2	; 226
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 83       	st	Z, r24
     936:	80 81       	ld	r24, Z
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     93c:	f8 01       	movw	r30, r16
     93e:	80 81       	ld	r24, Z
     940:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     942:	80 83       	st	Z, r24
     944:	88 81       	ld	r24, Y
     946:	80 61       	ori	r24, 0x10	; 16
     948:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <USB_Init>:
     954:	e8 ed       	ldi	r30, 0xD8	; 216
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     95a:	8f 7e       	andi	r24, 0xEF	; 239
     95c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     95e:	e7 ed       	ldi	r30, 0xD7	; 215
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 3c 0d 	sts	0x0D3C, r24

	USB_ResetInterface();
     96e:	ae cf       	rjmp	.-164    	; 0x8cc <USB_ResetInterface>

00000970 <USB_INT_DisableAllInterrupts>:
     970:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	8c 7f       	andi	r24, 0xFC	; 252
     978:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     97a:	10 92 e2 00 	sts	0x00E2, r1
     97e:	08 95       	ret

00000980 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     980:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     984:	10 92 e1 00 	sts	0x00E1, r1
     988:	08 95       	ret

0000098a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	0b b6       	in	r0, 0x3b	; 59
     996:	0f 92       	push	r0
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     9b0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     9b4:	82 ff       	sbrs	r24, 2
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     9b8:	80 91 e2 00 	lds	r24, 0x00E2
     9bc:	82 ff       	sbrs	r24, 2
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     9c0:	80 91 e1 00 	lds	r24, 0x00E1
     9c4:	8b 7f       	andi	r24, 0xFB	; 251
     9c6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     9ca:	97 dc       	rcall	.-1746   	; 0x2fa <EVENT_USB_Device_StartOfFrame>
     9cc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     9d0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     9d2:	1b c0       	rjmp	.+54     	; 0xa0a <__vector_10+0x80>
     9d4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     9d8:	80 ff       	sbrs	r24, 0
     9da:	17 c0       	rjmp	.+46     	; 0xa0a <__vector_10+0x80>
     9dc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	80 93 da 00 	sts	0x00DA, r24
     9e6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9ea:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__vector_10+0x7a>
     9ee:	84 e1       	ldi	r24, 0x14	; 20

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9f0:	89 bd       	out	0x29, r24	; 41
     9f2:	86 e1       	ldi	r24, 0x16	; 22
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9f4:	89 bd       	out	0x29, r24	; 41
     9f6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9f8:	00 fe       	sbrs	r0, 0
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <__vector_10+0x6c>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9fe:	8e bb       	out	0x1e, r24	; 30
     a00:	d8 d1       	rcall	.+944    	; 0xdb2 <USB_Event_Stub>
			EVENT_USB_Device_Connect();
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <__vector_10+0x80>
     a04:	19 bc       	out	0x29, r1	; 41
     a06:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a08:	d4 d1       	rcall	.+936    	; 0xdb2 <USB_Event_Stub>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     a0a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     a0e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a10:	17 c0       	rjmp	.+46     	; 0xa40 <__vector_10+0xb6>
     a12:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a16:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a18:	13 c0       	rjmp	.+38     	; 0xa40 <__vector_10+0xb6>
     a1a:	80 91 e2 00 	lds	r24, 0x00E2
     a1e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a20:	80 93 e2 00 	sts	0x00E2, r24
     a24:	80 91 e2 00 	lds	r24, 0x00E2
     a28:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a2a:	80 93 e2 00 	sts	0x00E2, r24
     a2e:	80 91 d8 00 	lds	r24, 0x00D8
     a32:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a34:	80 93 d8 00 	sts	0x00D8, r24
     a38:	19 bc       	out	0x29, r1	; 41
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a3e:	b9 d1       	rcall	.+882    	; 0xdb2 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a40:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     a44:	84 ff       	sbrs	r24, 4
     a46:	2e c0       	rjmp	.+92     	; 0xaa4 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a48:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a4c:	84 ff       	sbrs	r24, 4
     a4e:	2a c0       	rjmp	.+84     	; 0xaa4 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a50:	84 e1       	ldi	r24, 0x14	; 20
     a52:	89 bd       	out	0x29, r24	; 41
     a54:	86 e1       	ldi	r24, 0x16	; 22
     a56:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a58:	09 b4       	in	r0, 0x29	; 41
     a5a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <__vector_10+0xce>
     a5e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a62:	8f 7d       	andi	r24, 0xDF	; 223
     a64:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a68:	80 91 e1 00 	lds	r24, 0x00E1
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a72:	80 91 e2 00 	lds	r24, 0x00E2
     a76:	8f 7e       	andi	r24, 0xEF	; 239
     a78:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a7c:	80 91 e2 00 	lds	r24, 0x00E2
     a80:	81 60       	ori	r24, 0x01	; 1
     a82:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a86:	80 91 39 0d 	lds	r24, 0x0D39
     a8a:	88 23       	and	r24, r24
     a8c:	11 f0       	breq	.+4      	; 0xa92 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <__vector_10+0x116>
     a92:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     a96:	87 ff       	sbrs	r24, 7
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	8e bb       	out	0x1e, r24	; 30
     aa2:	87 d1       	rcall	.+782    	; 0xdb2 <USB_Event_Stub>
     aa4:	80 91 e1 00 	lds	r24, 0x00E1
     aa8:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     aaa:	21 c0       	rjmp	.+66     	; 0xaee <__vector_10+0x164>
     aac:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ab0:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ab2:	1d c0       	rjmp	.+58     	; 0xaee <__vector_10+0x164>
     ab4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ab8:	87 7f       	andi	r24, 0xF7	; 247
     aba:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	8e bb       	out	0x1e, r24	; 30
     ac2:	10 92 39 0d 	sts	0x0D39, r1
     ac6:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     aca:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     acc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ad0:	80 91 e2 00 	lds	r24, 0x00E2
     ad4:	8e 7f       	andi	r24, 0xFE	; 254
     ad6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ada:	80 91 e2 00 	lds	r24, 0x00E2
     ade:	80 61       	ori	r24, 0x10	; 16
     ae0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ae4:	42 e0       	ldi	r20, 0x02	; 2
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	51 de       	rcall	.-862    	; 0x78e <Endpoint_ConfigureEndpoint_Prv>
     aec:	62 d1       	rcall	.+708    	; 0xdb2 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0b be       	out	0x3b, r0	; 59
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <USB_Device_ProcessControlRequest>:
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	aa 97       	sbiw	r28, 0x2a	; 42
     b20:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	ed e3       	ldi	r30, 0x3D	; 61
     b2c:	fd e0       	ldi	r31, 0x0D	; 13
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b2e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b32:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b34:	2d e0       	ldi	r18, 0x0D	; 13
     b36:	e5 34       	cpi	r30, 0x45	; 69
     b38:	f2 07       	cpc	r31, r18
     b3a:	c9 f7       	brne	.-14     	; 0xb2e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b3c:	db db       	rcall	.-2122   	; 0x2f4 <EVENT_USB_Device_ControlRequest>
     b3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b42:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     b44:	1e c1       	rjmp	.+572    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     b46:	90 91 3d 0d 	lds	r25, 0x0D3D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b4a:	80 91 3e 0d 	lds	r24, 0x0D3E

		switch (USB_ControlRequest.bRequest)
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	09 f4       	brne	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0x40>
     b52:	77 c0       	rjmp	.+238    	; 0xc42 <USB_Device_ProcessControlRequest+0x12e>
     b54:	30 f4       	brcc	.+12     	; 0xb62 <USB_Device_ProcessControlRequest+0x4e>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	81 f1       	breq	.+96     	; 0xbba <USB_Device_ProcessControlRequest+0xa6>
     b5a:	68 f0       	brcs	.+26     	; 0xb76 <USB_Device_ProcessControlRequest+0x62>
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	69 f1       	breq	.+90     	; 0xbba <USB_Device_ProcessControlRequest+0xa6>
     b60:	10 c1       	rjmp	.+544    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	09 f4       	brne	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x54>
     b66:	e0 c0       	rjmp	.+448    	; 0xd28 <USB_Device_ProcessControlRequest+0x214>
     b68:	89 30       	cpi	r24, 0x09	; 9
     b6a:	09 f4       	brne	.+2      	; 0xb6e <USB_Device_ProcessControlRequest+0x5a>
     b6c:	ef c0       	rjmp	.+478    	; 0xd4c <USB_Device_ProcessControlRequest+0x238>
     b6e:	86 30       	cpi	r24, 0x06	; 6
     b70:	09 f0       	breq	.+2      	; 0xb74 <USB_Device_ProcessControlRequest+0x60>
     b72:	07 c1       	rjmp	.+526    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     b74:	87 c0       	rjmp	.+270    	; 0xc84 <USB_Device_ProcessControlRequest+0x170>
     b76:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b78:	81 f0       	breq	.+32     	; 0xb9a <USB_Device_ProcessControlRequest+0x86>
     b7a:	92 38       	cpi	r25, 0x82	; 130
     b7c:	09 f0       	breq	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0x6c>
     b7e:	01 c1       	rjmp	.+514    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     b80:	80 91 41 0d 	lds	r24, 0x0D41
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b84:	8f 70       	andi	r24, 0x0F	; 15
     b86:	80 93 e9 00 	sts	0x00E9, r24
     b8a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b8e:	85 fb       	bst	r24, 5
     b90:	88 27       	eor	r24, r24
     b92:	80 f9       	bld	r24, 0
     b94:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b98:	06 c0       	rjmp	.+12     	; 0xba6 <USB_Device_ProcessControlRequest+0x92>
     b9a:	80 91 3a 0d 	lds	r24, 0x0D3A
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b9e:	90 91 3b 0d 	lds	r25, 0x0D3B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ba2:	91 11       	cpse	r25, r1
     ba4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ba6:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     baa:	97 7f       	andi	r25, 0xF7	; 247
     bac:	90 93 e8 00 	sts	0x00E8, r25
     bb0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bb4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     bb8:	c2 c0       	rjmp	.+388    	; 0xd3e <USB_Device_ProcessControlRequest+0x22a>
     bba:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bbc:	2d 7f       	andi	r18, 0xFD	; 253
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <USB_Device_ProcessControlRequest+0xae>
     bc0:	e0 c0       	rjmp	.+448    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     bc2:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bc4:	19 f0       	breq	.+6      	; 0xbcc <USB_Device_ProcessControlRequest+0xb8>
     bc6:	92 30       	cpi	r25, 0x02	; 2
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <USB_Device_ProcessControlRequest+0xce>
     bca:	db c0       	rjmp	.+438    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     bcc:	90 91 3f 0d 	lds	r25, 0x0D3F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     bd0:	91 30       	cpi	r25, 0x01	; 1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <USB_Device_ProcessControlRequest+0xc2>
     bd4:	d6 c0       	rjmp	.+428    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     bd6:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bd8:	09 f0       	breq	.+2      	; 0xbdc <USB_Device_ProcessControlRequest+0xc8>
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	90 93 3b 0d 	sts	0x0D3B, r25
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <USB_Device_ProcessControlRequest+0x122>
     be2:	90 91 3f 0d 	lds	r25, 0x0D3F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     be6:	91 11       	cpse	r25, r1
     be8:	26 c0       	rjmp	.+76     	; 0xc36 <USB_Device_ProcessControlRequest+0x122>
     bea:	20 91 41 0d 	lds	r18, 0x0D41
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bee:	2f 70       	andi	r18, 0x0F	; 15
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bf2:	c7 c0       	rjmp	.+398    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     bf4:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf8:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bfc:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <USB_Device_ProcessControlRequest+0x122>
     c00:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c02:	21 f4       	brne	.+8      	; 0xc0c <USB_Device_ProcessControlRequest+0xf8>
     c04:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c08:	80 62       	ori	r24, 0x20	; 32
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <USB_Device_ProcessControlRequest+0x11e>
     c0c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c10:	80 61       	ori	r24, 0x10	; 16
     c12:	80 93 eb 00 	sts	0x00EB, r24
     c16:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <USB_Device_ProcessControlRequest+0x10c>
     c1e:	88 0f       	add	r24, r24
     c20:	0a 94       	dec	r0
     c22:	ea f7       	brpl	.-6      	; 0xc1e <USB_Device_ProcessControlRequest+0x10a>
     c24:	80 93 ea 00 	sts	0x00EA, r24
     c28:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     c2c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	80 93 eb 00 	sts	0x00EB, r24
     c36:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3e:	87 7f       	andi	r24, 0xF7	; 247
     c40:	81 c0       	rjmp	.+258    	; 0xd44 <USB_Device_ProcessControlRequest+0x230>
     c42:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c44:	9e c0       	rjmp	.+316    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     c46:	10 91 3f 0d 	lds	r17, 0x0D3F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c4a:	1f 77       	andi	r17, 0x7F	; 127
     c4c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c50:	80 78       	andi	r24, 0x80	; 128
     c52:	81 2b       	or	r24, r17
     c54:	80 93 e3 00 	sts	0x00E3, r24
     c58:	80 91 e8 00 	lds	r24, 0x00E8
     c5c:	87 7f       	andi	r24, 0xF7	; 247
     c5e:	80 93 e8 00 	sts	0x00E8, r24
     c62:	e6 dd       	rcall	.-1076   	; 0x830 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c64:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c68:	80 ff       	sbrs	r24, 0
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     c6c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	80 93 e3 00 	sts	0x00E3, r24
     c76:	11 23       	and	r17, r17
     c78:	11 f0       	breq	.+4      	; 0xc7e <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0x16c>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	8e bb       	out	0x1e, r24	; 30
     c82:	7f c0       	rjmp	.+254    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     c84:	90 58       	subi	r25, 0x80	; 128
     c86:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c88:	08 f0       	brcs	.+2      	; 0xc8c <USB_Device_ProcessControlRequest+0x178>
     c8a:	7b c0       	rjmp	.+246    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     c8c:	80 91 3f 0d 	lds	r24, 0x0D3F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c90:	90 91 40 0d 	lds	r25, 0x0D40
     c94:	8c 3d       	cpi	r24, 0xDC	; 220
     c96:	23 e0       	ldi	r18, 0x03	; 3
     c98:	92 07       	cpc	r25, r18
     c9a:	71 f5       	brne	.+92     	; 0xcf8 <USB_Device_ProcessControlRequest+0x1e4>
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ca0:	8a e2       	ldi	r24, 0x2A	; 42
     ca2:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ca4:	4f b7       	in	r20, 0x3f	; 63
     ca6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ca8:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     caa:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cb0:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     cb2:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	50 93 57 00 	sts	0x0057, r21
     cba:	e4 91       	lpm	r30, Z
     cbc:	20 ff       	sbrs	r18, 0
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
     cc0:	e2 95       	swap	r30
     cc2:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     cc4:	3f 5f       	subi	r19, 0xFF	; 255
     cc6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     cc8:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	ea 30       	cpi	r30, 0x0A	; 10
     cce:	10 f0       	brcs	.+4      	; 0xcd4 <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     cd0:	c7 96       	adiw	r24, 0x37	; 55
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <USB_Device_ProcessControlRequest+0x1c2>
     cd4:	c0 96       	adiw	r24, 0x30	; 48
     cd6:	8d 93       	st	X+, r24
     cd8:	9d 93       	st	X+, r25
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cde:	49 f7       	brne	.-46     	; 0xcb2 <USB_Device_ProcessControlRequest+0x19e>
     ce0:	4f bf       	out	0x3f, r20	; 63
     ce2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	80 93 e8 00 	sts	0x00E8, r24
     cec:	6a e2       	ldi	r22, 0x2A	; 42
     cee:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	57 dc       	rcall	.-1874   	; 0x5a4 <Endpoint_Write_Control_Stream_LE>
     cf6:	12 c0       	rjmp	.+36     	; 0xd1c <USB_Device_ProcessControlRequest+0x208>
     cf8:	ae 01       	movw	r20, r28
     cfa:	4f 5f       	subi	r20, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     cfe:	60 91 41 0d 	lds	r22, 0x0D41
     d02:	40 db       	rcall	.-2432   	; 0x384 <CALLBACK_USB_GetDescriptor>
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	09 f4       	brne	.+2      	; 0xd0a <USB_Device_ProcessControlRequest+0x1f6>
     d08:	3c c0       	rjmp	.+120    	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     d0a:	20 91 e8 00 	lds	r18, 0x00E8
     d0e:	27 7f       	andi	r18, 0xF7	; 247
     d10:	20 93 e8 00 	sts	0x00E8, r18
     d14:	bc 01       	movw	r22, r24
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	db dc       	rcall	.-1610   	; 0x6d2 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d1c:	80 91 e8 00 	lds	r24, 0x00E8
     d20:	8b 77       	andi	r24, 0x7B	; 123
     d22:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d26:	2d c0       	rjmp	.+90     	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     d28:	90 38       	cpi	r25, 0x80	; 128
     d2a:	59 f5       	brne	.+86     	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     d2c:	80 91 e8 00 	lds	r24, 0x00E8
     d30:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d32:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d36:	80 91 39 0d 	lds	r24, 0x0D39
     d3a:	80 93 f1 00 	sts	0x00F1, r24
     d3e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d42:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d44:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d48:	73 dd       	rcall	.-1306   	; 0x830 <Endpoint_ClearStatusStage>
     d4a:	1b c0       	rjmp	.+54     	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     d4c:	91 11       	cpse	r25, r1
     d4e:	19 c0       	rjmp	.+50     	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
     d50:	90 91 3f 0d 	lds	r25, 0x0D3F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d54:	92 30       	cpi	r25, 0x02	; 2
     d56:	a8 f4       	brcc	.+42     	; 0xd82 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d58:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	80 93 e8 00 	sts	0x00E8, r24
     d62:	90 93 39 0d 	sts	0x0D39, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d66:	64 dd       	rcall	.-1336   	; 0x830 <Endpoint_ClearStatusStage>
     d68:	80 91 39 0d 	lds	r24, 0x0D39
     d6c:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <USB_Device_ProcessControlRequest+0x264>
     d70:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d74:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <USB_Device_ProcessControlRequest+0x268>
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <USB_Device_ProcessControlRequest+0x26a>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d7e:	8e bb       	out	0x1e, r24	; 30
     d80:	b0 da       	rcall	.-2720   	; 0x2e2 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d82:	80 91 e8 00 	lds	r24, 0x00E8
     d86:	83 ff       	sbrs	r24, 3
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <USB_Device_ProcessControlRequest+0x28a>
     d8a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d8e:	87 7f       	andi	r24, 0xF7	; 247
     d90:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d94:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d98:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9a:	80 93 eb 00 	sts	0x00EB, r24
     d9e:	aa 96       	adiw	r28, 0x2a	; 42
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dae:	1f 91       	pop	r17
     db0:	08 95       	ret

00000db2 <USB_Event_Stub>:
     db2:	08 95       	ret

00000db4 <USB_USBTask>:
     db4:	cf 93       	push	r28
     db6:	8e b3       	in	r24, 0x1e	; 30
     db8:	88 23       	and	r24, r24
     dba:	a9 f0       	breq	.+42     	; 0xde6 <USB_USBTask+0x32>
     dbc:	80 91 e9 00 	lds	r24, 0x00E9
     dc0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dc2:	90 91 ec 00 	lds	r25, 0x00EC
     dc6:	90 ff       	sbrs	r25, 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <USB_USBTask+0x1a>
     dca:	90 e8       	ldi	r25, 0x80	; 128
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <USB_USBTask+0x1c>
     dce:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     dd0:	c9 2f       	mov	r28, r25
     dd2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dd4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     ddc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     dde:	9a de       	rcall	.-716    	; 0xb14 <USB_Device_ProcessControlRequest>
     de0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de2:	c0 93 e9 00 	sts	0x00E9, r28
     de6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     de8:	08 95       	ret

00000dea <HID_Device_ProcessControlRequest>:
     dea:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     dec:	7f 92       	push	r7
     dee:	8f 92       	push	r8
     df0:	9f 92       	push	r9
     df2:	af 92       	push	r10
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	00 d0       	rcall	.+0      	; 0xe08 <HID_Device_ProcessControlRequest+0x1e>
     e08:	1f 92       	push	r1
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     e10:	ad b6       	in	r10, 0x3d	; 61
     e12:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e14:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     e18:	83 ff       	sbrs	r24, 3
     e1a:	02 c1       	rjmp	.+516    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     e1c:	f7 01       	movw	r30, r14
     e1e:	80 81       	ld	r24, Z
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	20 91 41 0d 	lds	r18, 0x0D41
     e26:	30 91 42 0d 	lds	r19, 0x0D42
     e2a:	28 17       	cp	r18, r24
     e2c:	39 07       	cpc	r19, r25
     e2e:	09 f0       	breq	.+2      	; 0xe32 <HID_Device_ProcessControlRequest+0x48>
     e30:	f7 c0       	rjmp	.+494    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     e32:	80 91 3e 0d 	lds	r24, 0x0D3E
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	09 f4       	brne	.+2      	; 0xe3c <HID_Device_ProcessControlRequest+0x52>
     e3a:	99 c0       	rjmp	.+306    	; 0xf6e <HID_Device_ProcessControlRequest+0x184>
     e3c:	30 f4       	brcc	.+12     	; 0xe4a <HID_Device_ProcessControlRequest+0x60>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	71 f0       	breq	.+28     	; 0xe5e <HID_Device_ProcessControlRequest+0x74>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f4       	brne	.+2      	; 0xe48 <HID_Device_ProcessControlRequest+0x5e>
     e46:	d0 c0       	rjmp	.+416    	; 0xfe8 <HID_Device_ProcessControlRequest+0x1fe>
     e48:	eb c0       	rjmp	.+470    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     e4a:	8a 30       	cpi	r24, 0x0A	; 10
     e4c:	09 f4       	brne	.+2      	; 0xe50 <HID_Device_ProcessControlRequest+0x66>
     e4e:	b4 c0       	rjmp	.+360    	; 0xfb8 <HID_Device_ProcessControlRequest+0x1ce>
     e50:	8b 30       	cpi	r24, 0x0B	; 11
     e52:	09 f4       	brne	.+2      	; 0xe56 <HID_Device_ProcessControlRequest+0x6c>
     e54:	9d c0       	rjmp	.+314    	; 0xf90 <HID_Device_ProcessControlRequest+0x1a6>
     e56:	89 30       	cpi	r24, 0x09	; 9
     e58:	09 f0       	breq	.+2      	; 0xe5c <HID_Device_ProcessControlRequest+0x72>
     e5a:	e2 c0       	rjmp	.+452    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     e5c:	4b c0       	rjmp	.+150    	; 0xef4 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e5e:	80 91 3d 0d 	lds	r24, 0x0D3D
     e62:	81 3a       	cpi	r24, 0xA1	; 161
     e64:	09 f0       	breq	.+2      	; 0xe68 <HID_Device_ProcessControlRequest+0x7e>
     e66:	dc c0       	rjmp	.+440    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     e68:	8d b6       	in	r8, 0x3d	; 61
     e6a:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     e6c:	1a 82       	std	Y+2, r1	; 0x02
     e6e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e70:	80 91 3f 0d 	lds	r24, 0x0D3F
     e74:	10 91 40 0d 	lds	r17, 0x0D40
     e78:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     e7a:	f7 01       	movw	r30, r14
     e7c:	40 85       	ldd	r20, Z+8	; 0x08
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	8d b7       	in	r24, 0x3d	; 61
     e82:	9e b7       	in	r25, 0x3e	; 62
     e84:	84 1b       	sub	r24, r20
     e86:	95 0b       	sbc	r25, r21
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	9e bf       	out	0x3e, r25	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	8d bf       	out	0x3d, r24	; 61
     e92:	ed b7       	in	r30, 0x3d	; 61
     e94:	fe b7       	in	r31, 0x3e	; 62
     e96:	31 96       	adiw	r30, 0x01	; 1
     e98:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	cf 01       	movw	r24, r30
     ea0:	bb d1       	rcall	.+886    	; 0x1218 <memset>
     ea2:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ea4:	41 0f       	add	r20, r17
     ea6:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     ea8:	0f 5f       	subi	r16, 0xFF	; 255
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	96 01       	movw	r18, r12
     eae:	be 01       	movw	r22, r28
     eb0:	6d 5f       	subi	r22, 0xFD	; 253
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	c7 01       	movw	r24, r14
     eb6:	2d da       	rcall	.-2982   	; 0x312 <CALLBACK_HID_Device_CreateHIDReport>
     eb8:	f7 01       	movw	r30, r14
     eba:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     ebc:	97 81       	ldd	r25, Z+7	; 0x07
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	21 f0       	breq	.+8      	; 0xeca <HID_Device_ProcessControlRequest+0xe0>
     ec2:	40 85       	ldd	r20, Z+8	; 0x08
     ec4:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     ec6:	b6 01       	movw	r22, r12
     ec8:	9e d1       	rcall	.+828    	; 0x1206 <memcpy>
     eca:	10 92 e9 00 	sts	0x00E9, r1
     ece:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ed2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed4:	80 93 e8 00 	sts	0x00E8, r24
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	81 11       	cpse	r24, r1
     edc:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     ee0:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ee2:	7a 81       	ldd	r23, Y+2	; 0x02
     ee4:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     ee6:	5e db       	rcall	.-2372   	; 0x5a4 <Endpoint_Write_Control_Stream_LE>
     ee8:	80 91 e8 00 	lds	r24, 0x00E8
     eec:	8b 77       	andi	r24, 0x7B	; 123
     eee:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ef2:	37 c0       	rjmp	.+110    	; 0xf62 <HID_Device_ProcessControlRequest+0x178>
     ef4:	80 91 3d 0d 	lds	r24, 0x0D3D
     ef8:	81 32       	cpi	r24, 0x21	; 33
     efa:	09 f0       	breq	.+2      	; 0xefe <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     efc:	91 c0       	rjmp	.+290    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     efe:	8d b6       	in	r8, 0x3d	; 61
     f00:	9e b6       	in	r9, 0x3e	; 62
     f02:	00 91 43 0d 	lds	r16, 0x0D43
     f06:	10 91 44 0d 	lds	r17, 0x0D44
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     f0a:	70 90 3f 0d 	lds	r7, 0x0D3F
     f0e:	60 90 40 0d 	lds	r6, 0x0D40
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f12:	8d b7       	in	r24, 0x3d	; 61
     f14:	9e b7       	in	r25, 0x3e	; 62
     f16:	80 1b       	sub	r24, r16
     f18:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	9e bf       	out	0x3e, r25	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	8d bf       	out	0x3d, r24	; 61
     f24:	ed b7       	in	r30, 0x3d	; 61
     f26:	fe b7       	in	r31, 0x3e	; 62
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	6f 01       	movw	r12, r30
     f2c:	80 91 e8 00 	lds	r24, 0x00E8
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f36:	b8 01       	movw	r22, r16
     f38:	cf 01       	movw	r24, r30
     f3a:	8f db       	rcall	.-2274   	; 0x65a <Endpoint_Read_Control_Stream_LE>
     f3c:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     f40:	8e 77       	andi	r24, 0x7E	; 126
     f42:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	71 10       	cpse	r7, r1
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <HID_Device_ProcessControlRequest+0x164>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     f50:	02 1b       	sub	r16, r18
     f52:	13 0b       	sbc	r17, r19
     f54:	2c 0d       	add	r18, r12
     f56:	3d 1d       	adc	r19, r13
     f58:	4f ef       	ldi	r20, 0xFF	; 255
     f5a:	46 0d       	add	r20, r6
     f5c:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     f5e:	c7 01       	movw	r24, r14
     f60:	10 da       	rcall	.-3040   	; 0x382 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     f66:	9e be       	out	0x3e, r9	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	8d be       	out	0x3d, r8	; 61
     f6c:	59 c0       	rjmp	.+178    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     f6e:	80 91 3d 0d 	lds	r24, 0x0D3D
     f72:	81 3a       	cpi	r24, 0xA1	; 161
     f74:	09 f0       	breq	.+2      	; 0xf78 <HID_Device_ProcessControlRequest+0x18e>
     f76:	54 c0       	rjmp	.+168    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     f78:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 93 e8 00 	sts	0x00E8, r24
     f82:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f86:	80 ff       	sbrs	r24, 0
     f88:	fc cf       	rjmp	.-8      	; 0xf82 <HID_Device_ProcessControlRequest+0x198>
     f8a:	f7 01       	movw	r30, r14
     f8c:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f8e:	40 c0       	rjmp	.+128    	; 0x1010 <HID_Device_ProcessControlRequest+0x226>
     f90:	80 91 3d 0d 	lds	r24, 0x0D3D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f94:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     f96:	09 f0       	breq	.+2      	; 0xf9a <HID_Device_ProcessControlRequest+0x1b0>
     f98:	43 c0       	rjmp	.+134    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f9e:	87 7f       	andi	r24, 0xF7	; 247
     fa0:	80 93 e8 00 	sts	0x00E8, r24
     fa4:	45 dc       	rcall	.-1910   	; 0x830 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fa6:	90 91 3f 0d 	lds	r25, 0x0D3F
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	91 11       	cpse	r25, r1
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     fb4:	81 87       	std	Z+9, r24	; 0x09
     fb6:	34 c0       	rjmp	.+104    	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     fb8:	80 91 3d 0d 	lds	r24, 0x0D3D
     fbc:	81 32       	cpi	r24, 0x21	; 33
     fbe:	81 f5       	brne	.+96     	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     fc0:	80 91 e8 00 	lds	r24, 0x00E8
     fc4:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fc6:	80 93 e8 00 	sts	0x00E8, r24
     fca:	32 dc       	rcall	.-1948   	; 0x830 <Endpoint_ClearStatusStage>
     fcc:	80 91 3f 0d 	lds	r24, 0x0D3F
     fd0:	90 91 40 0d 	lds	r25, 0x0D40
     fd4:	88 27       	eor	r24, r24
     fd6:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     fdc:	3a 95       	dec	r19
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <HID_Device_ProcessControlRequest+0x1ee>
     fe0:	f7 01       	movw	r30, r14
     fe2:	95 87       	std	Z+13, r25	; 0x0d
     fe4:	84 87       	std	Z+12, r24	; 0x0c
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     fe8:	80 91 3d 0d 	lds	r24, 0x0D3D
     fec:	81 3a       	cpi	r24, 0xA1	; 161
     fee:	c1 f4       	brne	.+48     	; 0x1020 <HID_Device_ProcessControlRequest+0x236>
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ffa:	80 91 e8 00 	lds	r24, 0x00E8
     ffe:	80 ff       	sbrs	r24, 0
    1000:	fc cf       	rjmp	.-8      	; 0xffa <HID_Device_ProcessControlRequest+0x210>
    1002:	f7 01       	movw	r30, r14
    1004:	84 85       	ldd	r24, Z+12	; 0x0c
    1006:	95 85       	ldd	r25, Z+13	; 0x0d
    1008:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    100a:	87 95       	ror	r24
    100c:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    100e:	87 95       	ror	r24
    1010:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1014:	80 91 e8 00 	lds	r24, 0x00E8
    1018:	8e 77       	andi	r24, 0x7E	; 126
    101a:	80 93 e8 00 	sts	0x00E8, r24
    101e:	08 dc       	rcall	.-2032   	; 0x830 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1024:	be be       	out	0x3e, r11	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	ad be       	out	0x3d, r10	; 61
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    102e:	0f 90       	pop	r0
    1030:	df 91       	pop	r29
			}

			break;
	}
}
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	7f 90       	pop	r7
    104a:	6f 90       	pop	r6
    104c:	08 95       	ret

0000104e <HID_Device_ConfigureEndpoints>:
    104e:	fc 01       	movw	r30, r24
    1050:	39 96       	adiw	r30, 0x09	; 9
    1052:	27 e0       	ldi	r18, 0x07	; 7
    1054:	df 01       	movw	r26, r30
    1056:	1d 92       	st	X+, r1
    1058:	2a 95       	dec	r18
    105a:	e9 f7       	brne	.-6      	; 0x1056 <HID_Device_ConfigureEndpoints+0x8>
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1060:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1062:	24 ef       	ldi	r18, 0xF4	; 244
    1064:	31 e0       	ldi	r19, 0x01	; 1
    1066:	35 87       	std	Z+13, r19	; 0x0d
    1068:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    106a:	23 e0       	ldi	r18, 0x03	; 3
    106c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	a1 cb       	rjmp	.-2238   	; 0x7b6 <Endpoint_ConfigureEndpointTable>

00001074 <HID_Device_USBTask>:
    1074:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	00 d0       	rcall	.+0      	; 0x1094 <HID_Device_USBTask+0x20>
    1094:	1f 92       	push	r1
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    109c:	ad b6       	in	r10, 0x3d	; 61
    109e:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    10a0:	8e b3       	in	r24, 0x1e	; 30
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <HID_Device_USBTask+0x34>
    10a6:	8a c0       	rjmp	.+276    	; 0x11bc <HID_Device_USBTask+0x148>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    10a8:	80 91 e4 00 	lds	r24, 0x00E4
    10ac:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    10b0:	f7 01       	movw	r30, r14
    10b2:	22 85       	ldd	r18, Z+10	; 0x0a
    10b4:	33 85       	ldd	r19, Z+11	; 0x0b
    10b6:	28 17       	cp	r18, r24
    10b8:	39 07       	cpc	r19, r25
    10ba:	09 f4       	brne	.+2      	; 0x10be <HID_Device_USBTask+0x4a>
    10bc:	7f c0       	rjmp	.+254    	; 0x11bc <HID_Device_USBTask+0x148>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10be:	81 81       	ldd	r24, Z+1	; 0x01
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10c6:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    10ca:	85 ff       	sbrs	r24, 5
    10cc:	77 c0       	rjmp	.+238    	; 0x11bc <HID_Device_USBTask+0x148>
    10ce:	8d b6       	in	r8, 0x3d	; 61
    10d0:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    10d2:	40 85       	ldd	r20, Z+8	; 0x08
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	8d b7       	in	r24, 0x3d	; 61
    10d8:	9e b7       	in	r25, 0x3e	; 62
    10da:	84 1b       	sub	r24, r20
    10dc:	95 0b       	sbc	r25, r21
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	9e bf       	out	0x3e, r25	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	8d bf       	out	0x3d, r24	; 61
    10e8:	ed b7       	in	r30, 0x3d	; 61
    10ea:	fe b7       	in	r31, 0x3e	; 62
    10ec:	31 96       	adiw	r30, 0x01	; 1
    10ee:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    10f0:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    10f2:	1a 82       	std	Y+2, r1	; 0x02
    10f4:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	cf 01       	movw	r24, r30
    10fc:	8d d0       	rcall	.+282    	; 0x1218 <memset>
    10fe:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1100:	0f 5f       	subi	r16, 0xFF	; 255
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	96 01       	movw	r18, r12
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	be 01       	movw	r22, r28
    110a:	6d 5f       	subi	r22, 0xFD	; 253
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	c7 01       	movw	r24, r14
    1110:	00 d9       	rcall	.-3584   	; 0x312 <CALLBACK_HID_Device_CreateHIDReport>
    1112:	68 2e       	mov	r6, r24
    1114:	f7 01       	movw	r30, r14
    1116:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1118:	95 85       	ldd	r25, Z+13	; 0x0d
    111a:	89 2b       	or	r24, r25
    111c:	41 f0       	breq	.+16     	; 0x112e <HID_Device_USBTask+0xba>
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	86 85       	ldd	r24, Z+14	; 0x0e
    1122:	97 85       	ldd	r25, Z+15	; 0x0f
    1124:	89 2b       	or	r24, r25
    1126:	09 f0       	breq	.+2      	; 0x112a <HID_Device_USBTask+0xb6>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	72 2e       	mov	r7, r18
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <HID_Device_USBTask+0xbc>
    112e:	71 2c       	mov	r7, r1
    1130:	f7 01       	movw	r30, r14
    1132:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1134:	17 81       	ldd	r17, Z+7	; 0x07
    1136:	01 15       	cp	r16, r1
    1138:	11 05       	cpc	r17, r1
    113a:	89 f0       	breq	.+34     	; 0x115e <HID_Device_USBTask+0xea>
    113c:	49 81       	ldd	r20, Y+1	; 0x01
    113e:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1140:	b8 01       	movw	r22, r16
    1142:	c6 01       	movw	r24, r12
    1144:	53 d0       	rcall	.+166    	; 0x11ec <memcmp>
    1146:	55 24       	eor	r5, r5
    1148:	53 94       	inc	r5
    114a:	89 2b       	or	r24, r25
    114c:	09 f4       	brne	.+2      	; 0x1150 <HID_Device_USBTask+0xdc>
    114e:	51 2c       	mov	r5, r1
    1150:	f7 01       	movw	r30, r14
    1152:	40 85       	ldd	r20, Z+8	; 0x08
    1154:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1156:	b6 01       	movw	r22, r12
    1158:	c8 01       	movw	r24, r16
    115a:	55 d0       	rcall	.+170    	; 0x1206 <memcpy>
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <HID_Device_USBTask+0xec>
    115e:	51 2c       	mov	r5, r1
    1160:	29 81       	ldd	r18, Y+1	; 0x01
    1162:	3a 81       	ldd	r19, Y+2	; 0x02
    1164:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1166:	f1 f0       	breq	.+60     	; 0x11a4 <HID_Device_USBTask+0x130>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1168:	61 10       	cpse	r6, r1
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <HID_Device_USBTask+0x100>
    116c:	51 10       	cpse	r5, r1
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <HID_Device_USBTask+0x100>
    1170:	70 fe       	sbrs	r7, 0
    1172:	18 c0       	rjmp	.+48     	; 0x11a4 <HID_Device_USBTask+0x130>
    1174:	f7 01       	movw	r30, r14
    1176:	84 85       	ldd	r24, Z+12	; 0x0c
    1178:	95 85       	ldd	r25, Z+13	; 0x0d
    117a:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    117c:	86 87       	std	Z+14, r24	; 0x0e
    117e:	81 81       	ldd	r24, Z+1	; 0x01
    1180:	8f 70       	andi	r24, 0x0F	; 15
    1182:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	81 11       	cpse	r24, r1
    118a:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    118e:	69 81       	ldd	r22, Y+1	; 0x01
    1190:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1196:	c6 01       	movw	r24, r12
    1198:	bd d9       	rcall	.-3206   	; 0x514 <Endpoint_Write_Stream_LE>
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	8e 77       	andi	r24, 0x7E	; 126
    11a0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11a4:	80 91 e4 00 	lds	r24, 0x00E4
    11a8:	90 91 e5 00 	lds	r25, 0x00E5
    11ac:	f7 01       	movw	r30, r14
    11ae:	93 87       	std	Z+11, r25	; 0x0b
    11b0:	82 87       	std	Z+10, r24	; 0x0a
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    11b6:	9e be       	out	0x3e, r9	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	8d be       	out	0x3d, r8	; 61
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	be be       	out	0x3e, r11	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	ad be       	out	0x3d, r10	; 61
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	9f 90       	pop	r9
    11e2:	8f 90       	pop	r8
    11e4:	7f 90       	pop	r7
    11e6:	6f 90       	pop	r6
    11e8:	5f 90       	pop	r5
    11ea:	08 95       	ret

000011ec <memcmp>:
    11ec:	fb 01       	movw	r30, r22
    11ee:	dc 01       	movw	r26, r24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <memcmp+0xe>
    11f2:	8d 91       	ld	r24, X+
    11f4:	01 90       	ld	r0, Z+
    11f6:	80 19       	sub	r24, r0
    11f8:	21 f4       	brne	.+8      	; 0x1202 <memcmp+0x16>
    11fa:	41 50       	subi	r20, 0x01	; 1
    11fc:	50 40       	sbci	r21, 0x00	; 0
    11fe:	c8 f7       	brcc	.-14     	; 0x11f2 <memcmp+0x6>
    1200:	88 1b       	sub	r24, r24
    1202:	99 0b       	sbc	r25, r25
    1204:	08 95       	ret

00001206 <memcpy>:
    1206:	fb 01       	movw	r30, r22
    1208:	dc 01       	movw	r26, r24
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <memcpy+0xa>
    120c:	01 90       	ld	r0, Z+
    120e:	0d 92       	st	X+, r0
    1210:	41 50       	subi	r20, 0x01	; 1
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	d8 f7       	brcc	.-10     	; 0x120c <memcpy+0x6>
    1216:	08 95       	ret

00001218 <memset>:
    1218:	dc 01       	movw	r26, r24
    121a:	01 c0       	rjmp	.+2      	; 0x121e <memset+0x6>
    121c:	6d 93       	st	X+, r22
    121e:	41 50       	subi	r20, 0x01	; 1
    1220:	50 40       	sbci	r21, 0x00	; 0
    1222:	e0 f7       	brcc	.-8      	; 0x121c <memset+0x4>
    1224:	08 95       	ret

00001226 <_exit>:
    1226:	f8 94       	cli

00001228 <__stop_program>:
    1228:	ff cf       	rjmp	.-2      	; 0x1228 <__stop_program>

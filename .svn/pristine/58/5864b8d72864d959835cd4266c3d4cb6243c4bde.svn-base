
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000020e2  00002176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011e  0080011e  00002194  2**0
                  ALLOC
  3 .stab         00002f1c  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113b  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000061eb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000408  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006618  00000000  00000000  00006604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d62  00000000  00000000  0000cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000292f  00000000  00000000  0000e97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb4  00000000  00000000  000112b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b2a  00000000  00000000  00011e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004555  00000000  00000000  0001498e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  00018ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>
       2:	00 00       	nop
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	f6 c1       	rjmp	.+1004   	; 0x3f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_10>
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c1       	rjmp	.+960    	; 0x3f6 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	de c1       	rjmp	.+956    	; 0x3f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4609>:
      98:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

000000b6 <__c.4607>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b6:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c6:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000cf <__c.4605>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      cf:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      df:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ef:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      ff:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

00000107 <__c.4598>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     107:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     117:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     127:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     137:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
				ReportSize     -= 4;
     147:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     157:	1b 5b 33 37 6d 00                                   .[37m.

0000015d <__c.4591>:
     15d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     16d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018c <__c.4586>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18c:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     19c:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001a7 <__c.4584>:
     1a7:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     1b7:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000001c3 <__c.4582>:
     1c3:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     1d3:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     1e3:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     1f3:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000001fc <__c.4579>:
     1fc:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     20c:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     21c:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     22c:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23c:	33 37 6d 00                                         37m.

00000240 <__c.4576>:
     240:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     250:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     260:	74 65 73 2e 0d 0a 00                                tes....

00000267 <__c.4574>:
     267:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     277:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     287:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     297:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000002a2 <__c.4571>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b2:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2e2:	37 6d 00                                            7m.

000002e5 <__c.4569>:
     2e5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002ff <__c.4567>:
     2ff:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     30f:	69 63 65 2e 0d 0a 00                                ice....

00000316 <__c.4565>:
     316:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     326:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     336:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000340 <__c.4562>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     340:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     350:	61 74 61 2e 0d 0a 00                                ata....

00000357 <__c.4557>:
     357:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     367:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
					}
				}

				ParserData->UsingReportIDs = true;
     377:	00                                                  .

00000378 <__c.4552>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
				break;
     388:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000395 <__c.4543>:

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     395:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3a5:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b5:	5b 33 37 6d 00                                      [37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	e2 ee       	ldi	r30, 0xE2	; 226
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	f0 e2       	ldi	r31, 0x20	; 32
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59

					while (CurrCollectionPath->Parent != NULL)
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	ae 31       	cpi	r26, 0x1E	; 30
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>

000003e0 <__do_clear_bss>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	ae e1       	ldi	r26, 0x1E	; 30
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <.do_clear_bss_start>

000003e8 <.do_clear_bss_loop>:
     3e8:	1d 92       	st	X+, r1

000003ea <.do_clear_bss_start>:
     3ea:	a4 34       	cpi	r26, 0x44	; 68
     3ec:	b1 07       	cpc	r27, r17
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <.do_clear_bss_loop>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	c3 d1       	rcall	.+902    	; 0x778 <main>
     3f2:	0c 94 6f 10 	jmp	0x20de	; 0x20de <_exit>

000003f6 <__bad_interrupt>:
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <LEDs_SetAllLEDs>:
     3f8:	9b b1       	in	r25, 0x0b	; 11
     3fa:	9f 70       	andi	r25, 0x0F	; 15
     3fc:	98 2b       	or	r25, r24
     3fe:	9b b9       	out	0x0b, r25	; 11
     400:	08 95       	ret

00000402 <SetupHardware>:
     402:	84 b7       	in	r24, 0x34	; 52
     404:	87 7f       	andi	r24, 0xF7	; 247
     406:	84 bf       	out	0x34, r24	; 52
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	88 e1       	ldi	r24, 0x18	; 24
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	80 93 60 00 	sts	0x0060, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	10 92 60 00 	sts	0x0060, r1
     416:	0f be       	out	0x3f, r0	; 63
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 e8       	ldi	r24, 0x80	; 128
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli

				if (UsageListSize)
     420:	80 93 61 00 	sts	0x0061, r24
     424:	90 93 61 00 	sts	0x0061, r25
     428:	0f be       	out	0x3f, r0	; 63
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 cd 00 	sts	0x00CD, r25
     432:	80 93 cc 00 	sts	0x00CC, r24
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	80 93 ca 00 	sts	0x00CA, r24
     43c:	10 92 c8 00 	sts	0x00C8, r1

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	88 e1       	ldi	r24, 0x18	; 24
     442:	80 93 c9 00 	sts	0x00C9, r24
     446:	53 9a       	sbi	0x0a, 3	; 10
     448:	5a 9a       	sbi	0x0b, 2	; 11
     44a:	8a b1       	in	r24, 0x0a	; 10
					  UsageList[i - 1] = UsageList[i];
     44c:	80 6f       	ori	r24, 0xF0	; 240
     44e:	8a b9       	out	0x0a, r24	; 10
     450:	8b b1       	in	r24, 0x0b	; 11
     452:	8f 70       	andi	r24, 0x0F	; 15

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	8b b9       	out	0x0b, r24	; 11
     456:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <USB_Init>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <Serial_CreateStream>

00000462 <EVENT_USB_Host_DeviceAttached>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	88 e7       	ldi	r24, 0x78	; 120
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
     46a:	80 ea       	ldi	r24, 0xA0	; 160
     46c:	c5 cf       	rjmp	.-118    	; 0x3f8 <LEDs_SetAllLEDs>

0000046e <EVENT_USB_Host_DeviceUnattached>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	87 e5       	ldi	r24, 0x57	; 87
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	bf cf       	rjmp	.-130    	; 0x3f8 <LEDs_SetAllLEDs>

0000047a <EVENT_USB_Host_DeviceEnumerationComplete>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	2a 97       	sbiw	r28, 0x0a	; 10
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	80 e4       	ldi	r24, 0x40	; 64
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
     498:	ae d1       	rcall	.+860    	; 0x7f6 <ProcessConfigurationDescriptor>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	18 2f       	mov	r17, r24
     49c:	88 23       	and	r24, r24
     49e:	a1 f0       	breq	.+40     	; 0x4c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	19 f4       	brne	.+6      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     4a4:	86 e1       	ldi	r24, 0x16	; 22
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
				break;
     4ac:	92 e0       	ldi	r25, 0x02	; 2
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
     4b2:	1f 92       	push	r1
     4b4:	1f 93       	push	r17
     4b6:	85 ee       	ldi	r24, 0xE5	; 229
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     4c2:	80 e9       	ldi	r24, 0x90	; 144
     4c4:	99 df       	rcall	.-206    	; 0x3f8 <LEDs_SetAllLEDs>
     4c6:	57 c0       	rjmp	.+174    	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <USB_Host_SetDeviceConfiguration>
     4ce:	88 23       	and	r24, r24
     4d0:	29 f0       	breq	.+10     	; 0x4dc <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	82 ea       	ldi	r24, 0xA2	; 162
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	ef cf       	rjmp	.-34     	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     4dc:	be 01       	movw	r22, r28
     4de:	67 5f       	subi	r22, 0xF7	; 247
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	94 e0       	ldi	r25, 0x04	; 4
     4e6:	6a d2       	rcall	.+1236   	; 0x9bc <RNDIS_InitializeDevice>
     4e8:	88 23       	and	r24, r24
     4ea:	29 f0       	breq	.+10     	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     4ec:	1f 92       	push	r1
     4ee:	8f 93       	push	r24
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	87 e6       	ldi	r24, 0x67	; 103
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	37 c0       	rjmp	.+110    	; 0x564 <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
     4f6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4f8:	8f 93       	push	r24
     4fa:	89 85       	ldd	r24, Y+9	; 0x09
     4fc:	8f 93       	push	r24
     4fe:	80 e4       	ldi	r24, 0x40	; 64
     500:	92 e0       	ldi	r25, 0x02	; 2
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     50a:	8d e0       	ldi	r24, 0x0D	; 13
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	8d 83       	std	Y+5, r24	; 0x05
     514:	9e 83       	std	Y+6, r25	; 0x06
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	af 83       	std	Y+7, r26	; 0x07
     518:	b8 87       	std	Y+8, r27	; 0x08
     51a:	24 e0       	ldi	r18, 0x04	; 4
     51c:	30 e0       	ldi	r19, 0x00	; 0

					if (UsageListSize)
     51e:	ae 01       	movw	r20, r28
     520:	4b 5f       	subi	r20, 0xFB	; 251
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	6e e0       	ldi	r22, 0x0E	; 14
     526:	71 e0       	ldi	r23, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	cc d2       	rcall	.+1432   	; 0xac6 <RNDIS_SetRNDISProperty>
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	88 23       	and	r24, r24
     538:	29 f0       	breq	.+10     	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
     53a:	1f 92       	push	r1
     53c:	8f 93       	push	r24

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	8c ef       	ldi	r24, 0xFC	; 252
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	10 c0       	rjmp	.+32     	; 0x564 <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
     544:	24 e0       	ldi	r18, 0x04	; 4
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	ae 01       	movw	r20, r28
						  UsageList[i - 1] = UsageList[i];
     54a:	4f 5f       	subi	r20, 0xFF	; 255
     54c:	5f 4f       	sbci	r21, 0xFF	; 255
     54e:	6c e0       	ldi	r22, 0x0C	; 12
     550:	71 e0       	ldi	r23, 0x01	; 1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	5f d3       	rcall	.+1726   	; 0xc16 <RNDIS_QueryRNDISProperty>
     558:	88 23       	and	r24, r24
     55a:	91 f0       	breq	.+36     	; 0x580 <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
     55c:	1f 92       	push	r1
     55e:	8f 93       	push	r24
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	83 ec       	ldi	r24, 0xC3	; 195
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56c:	80 e9       	ldi	r24, 0x90	; 144
     56e:	44 df       	rcall	.-376    	; 0x3f8 <LEDs_SetAllLEDs>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <USB_Host_SetDeviceConfiguration>
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	0f 90       	pop	r0
     57e:	1a c0       	rjmp	.+52     	; 0x5b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x13a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	8f 93       	push	r24
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	8f 93       	push	r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	8f 93       	push	r24
     58c:	89 81       	ldd	r24, Y+1	; 0x01
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	8f 93       	push	r24
     590:	87 ea       	ldi	r24, 0xA7	; 167

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     59c:	8c e8       	ldi	r24, 0x8C	; 140
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
     5a4:	80 e6       	ldi	r24, 0x60	; 96
     5a6:	28 df       	rcall	.-432    	; 0x3f8 <LEDs_SetAllLEDs>
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	2a 96       	adiw	r28, 0x0a	; 10
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	08 95       	ret

000005c8 <EVENT_USB_Host_HostError>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	1f 92       	push	r1
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	05 d7       	rcall	.+3594   	; 0x13e0 <USB_Disable>
     5d6:	1f 92       	push	r1
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	8f 93       	push	r24
     5dc:	8d e5       	ldi	r24, 0x5D	; 93
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     5e8:	80 e9       	ldi	r24, 0x90	; 144
     5ea:	06 df       	rcall	.-500    	; 0x3f8 <LEDs_SetAllLEDs>
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <EVENT_USB_Host_HostError+0x2c>

000005f6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5f6:	90 91 2f 01 	lds	r25, 0x012F
     5fa:	1f 92       	push	r1
     5fc:	9f 93       	push	r25
					  return HID_PARSE_InsufficientReportItems;
     5fe:	1f 92       	push	r1
     600:	6f 93       	push	r22

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	1f 92       	push	r1
     604:	8f 93       	push	r24
     606:	87 e0       	ldi	r24, 0x07	; 7
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     612:	8d b7       	in	r24, 0x3d	; 61
     614:	9e b7       	in	r25, 0x3e	; 62
     616:	08 96       	adiw	r24, 0x08	; 8
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	9e bf       	out	0x3e, r25	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	8d bf       	out	0x3d, r24	; 61
     622:	80 e9       	ldi	r24, 0x90	; 144
     624:	e9 ce       	rjmp	.-558    	; 0x3f8 <LEDs_SetAllLEDs>

00000626 <RNDISHost_Task>:
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	00 d0       	rcall	.+0      	; 0x640 <RNDISHost_Task+0x1a>
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	cd b6       	in	r12, 0x3d	; 61
     646:	de b6       	in	r13, 0x3e	; 62
     648:	80 91 2f 01 	lds	r24, 0x012F
     64c:	8b 30       	cpi	r24, 0x0B	; 11
     64e:	09 f0       	breq	.+2      	; 0x652 <RNDISHost_Task+0x2c>
     650:	7f c0       	rjmp	.+254    	; 0x750 <RNDISHost_Task+0x12a>
     652:	80 e2       	ldi	r24, 0x20	; 32
     654:	d1 de       	rcall	.-606    	; 0x3f8 <LEDs_SetAllLEDs>
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	80 d3       	rcall	.+1792   	; 0xd5c <RNDIS_GetPacketLength>
     65c:	88 23       	and	r24, r24
     65e:	69 f0       	breq	.+26     	; 0x67a <RNDISHost_Task+0x54>
     660:	1f 92       	push	r1
     662:	8f 93       	push	r24
     664:	8f ec       	ldi	r24, 0xCF	; 207
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	6b c0       	rjmp	.+214    	; 0x750 <RNDISHost_Task+0x12a>
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	89 2b       	or	r24, r25
     680:	09 f4       	brne	.+2      	; 0x684 <RNDISHost_Task+0x5e>
     682:	66 c0       	rjmp	.+204    	; 0x750 <RNDISHost_Task+0x12a>
     684:	80 91 a9 00 	lds	r24, 0x00A9
					  ParserData->TotalReportItems++;
     688:	8f 7b       	andi	r24, 0xBF	; 191
     68a:	80 93 a9 00 	sts	0x00A9, r24
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	8f 93       	push	r24

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	8f 93       	push	r24
     696:	86 eb       	ldi	r24, 0xB6	; 182
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <printf_P>
     6a2:	69 81       	ldd	r22, Y+1	; 0x01
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	7a 81       	ldd	r23, Y+2	; 0x02
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	61 30       	cpi	r22, 0x01	; 1
     6b0:	84 e0       	ldi	r24, 0x04	; 4
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	78 07       	cpc	r23, r24
     6b4:	50 f0       	brcs	.+20     	; 0x6ca <RNDISHost_Task+0xa4>
     6b6:	88 e9       	ldi	r24, 0x98	; 152
     6b8:	90 e0       	ldi	r25, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	52 d5       	rcall	.+2724   	; 0x116c <Pipe_Discard_Stream>
     6c8:	33 c0       	rjmp	.+102    	; 0x730 <RNDISHost_Task+0x10a>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	ad b6       	in	r10, 0x3d	; 61
     6cc:	be b6       	in	r11, 0x3e	; 62

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	ed b7       	in	r30, 0x3d	; 61
     6d0:	fe b7       	in	r31, 0x3e	; 62
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	e6 1b       	sub	r30, r22
     6d4:	f7 0b       	sbc	r31, r23
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	0f b6       	in	r0, 0x3f	; 63

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	f8 94       	cli
     6da:	fe bf       	out	0x3e, r31	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	ed bf       	out	0x3d, r30	; 61
     6e0:	0d b7       	in	r16, 0x3d	; 61
     6e2:	1e b7       	in	r17, 0x3e	; 62
     6e4:	0f 5f       	subi	r16, 0xFF	; 255
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	c8 01       	movw	r24, r16
     6ee:	81 d5       	rcall	.+2818   	; 0x11f2 <Pipe_Read_Stream_LE>
     6f0:	78 01       	movw	r14, r16
     6f2:	81 e1       	ldi	r24, 0x11	; 17
     6f4:	88 2e       	mov	r8, r24
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	98 2e       	mov	r9, r24
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	97 01       	movw	r18, r14
     700:	20 1b       	sub	r18, r16
     702:	31 0b       	sbc	r19, r17
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	70 f4       	brcc	.+28     	; 0x726 <RNDISHost_Task+0x100>
     70a:	f7 01       	movw	r30, r14
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     70c:	81 91       	ld	r24, Z+
     70e:	7f 01       	movw	r14, r30
     710:	1f 92       	push	r1
		  printf("0x%02x ", PacketBuffer[i]);
     712:	8f 93       	push	r24
     714:	9f 92       	push	r9
     716:	8f 92       	push	r8
     718:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <printf>
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	ea cf       	rjmp	.-44     	; 0x6fa <RNDISHost_Task+0xd4>
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	be be       	out	0x3e, r11	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	ad be       	out	0x3d, r10	; 61
     730:	80 91 a6 00 	lds	r24, 0x00A6
     734:	8e 77       	andi	r24, 0x7E	; 126
     736:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     73a:	80 91 a9 00 	lds	r24, 0x00A9
     73e:	80 64       	ori	r24, 0x40	; 64
     740:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     744:	89 e1       	ldi	r24, 0x19	; 25
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <puts>
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     74c:	80 e6       	ldi	r24, 0x60	; 96
     74e:	54 de       	rcall	.-856    	; 0x3f8 <LEDs_SetAllLEDs>
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     754:	de be       	out	0x3e, r13	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd be       	out	0x3d, r12	; 61
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	08 95       	ret

00000778 <main>:
     778:	44 de       	rcall	.-888    	; 0x402 <SetupHardware>
     77a:	85 e9       	ldi	r24, 0x95	; 149
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     782:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     784:	39 de       	rcall	.-910    	; 0x3f8 <LEDs_SetAllLEDs>
     786:	78 94       	sei
     788:	4e df       	rcall	.-356    	; 0x626 <RNDISHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     78a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		RNDISHost_Task();
     78e:	fc cf       	rjmp	.-8      	; 0x788 <main+0x10>

00000790 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     790:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     792:	81 81       	ldd	r24, Z+1	; 0x01
     794:	84 30       	cpi	r24, 0x04	; 4
     796:	59 f4       	brne	.+22     	; 0x7ae <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     798:	85 81       	ldd	r24, Z+5	; 0x05
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	41 f4       	brne	.+16     	; 0x7ae <DComp_NextCDCControlInterface+0x1e>
     79e:	86 81       	ldd	r24, Z+6	; 0x06
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	29 f4       	brne	.+10     	; 0x7ae <DComp_NextCDCControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     7a4:	87 81       	ldd	r24, Z+7	; 0x07
     7a6:	8f 3f       	cpi	r24, 0xFF	; 255
     7a8:	11 f4       	brne	.+4      	; 0x7ae <DComp_NextCDCControlInterface+0x1e>
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
}
     7b0:	08 95       	ret

000007b2 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     7b2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	51 f4       	brne	.+20     	; 0x7ce <DComp_NextCDCDataInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     7ba:	85 81       	ldd	r24, Z+5	; 0x05
     7bc:	8a 30       	cpi	r24, 0x0A	; 10
     7be:	39 f4       	brne	.+14     	; 0x7ce <DComp_NextCDCDataInterface+0x1c>
     7c0:	86 81       	ldd	r24, Z+6	; 0x06
     7c2:	81 11       	cpse	r24, r1
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <DComp_NextCDCDataInterface+0x1c>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     7c6:	87 81       	ldd	r24, Z+7	; 0x07
     7c8:	81 11       	cpse	r24, r1
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <DComp_NextCDCDataInterface+0x1c>
     7cc:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
}
     7d0:	08 95       	ret

000007d2 <DComp_NextCDCDataInterfaceEndpoint>:
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     7d2:	fc 01       	movw	r30, r24
     7d4:	21 81       	ldd	r18, Z+1	; 0x01
     7d6:	25 30       	cpi	r18, 0x05	; 5
     7d8:	41 f4       	brne	.+16     	; 0x7ea <DComp_NextCDCDataInterfaceEndpoint+0x18>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     7da:	83 81       	ldd	r24, Z+3	; 0x03
     7dc:	83 70       	andi	r24, 0x03	; 3
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	02 97       	sbiw	r24, 0x02	; 2
     7e2:	02 97       	sbiw	r24, 0x02	; 2
     7e4:	30 f0       	brcs	.+12     	; 0x7f2 <DComp_NextCDCDataInterfaceEndpoint+0x20>
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     7ea:	24 30       	cpi	r18, 0x04	; 4
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <DComp_NextCDCDataInterfaceEndpoint+0x14>
	{
		return DESCRIPTOR_SEARCH_Fail;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     7f4:	08 95       	ret

000007f6 <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	c4 50       	subi	r28, 0x04	; 4
     810:	d2 40       	sbci	r29, 0x02	; 2
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     81c:	ae 01       	movw	r20, r28
     81e:	4f 5f       	subi	r20, 0xFF	; 255
     820:	5f 4f       	sbci	r21, 0xFF	; 255
     822:	cd 5f       	subi	r28, 0xFD	; 253
     824:	dd 4f       	sbci	r29, 0xFD	; 253
     826:	59 83       	std	Y+1, r21	; 0x01
     828:	48 83       	st	Y, r20
     82a:	c3 50       	subi	r28, 0x03	; 3
     82c:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	32 e0       	ldi	r19, 0x02	; 2
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7d 4f       	sbci	r23, 0xFD	; 253
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 d7       	rcall	.+3600   	; 0x164c <USB_Host_GetDeviceConfigDescriptor>
     83c:	85 30       	cpi	r24, 0x05	; 5
     83e:	09 f4       	brne	.+2      	; 0x842 <ProcessConfigurationDescriptor+0x4c>
     840:	81 c0       	rjmp	.+258    	; 0x944 <ProcessConfigurationDescriptor+0x14e>
     842:	86 30       	cpi	r24, 0x06	; 6
     844:	21 f0       	breq	.+8      	; 0x84e <ProcessConfigurationDescriptor+0x58>
     846:	88 23       	and	r24, r24
     848:	21 f0       	breq	.+8      	; 0x852 <ProcessConfigurationDescriptor+0x5c>
     84a:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     84c:	7c c0       	rjmp	.+248    	; 0x946 <ProcessConfigurationDescriptor+0x150>
     84e:	83 e0       	ldi	r24, 0x03	; 3
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     850:	7a c0       	rjmp	.+244    	; 0x946 <ProcessConfigurationDescriptor+0x150>
     852:	e1 2c       	mov	r14, r1
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     854:	f1 2c       	mov	r15, r1
     856:	c1 2c       	mov	r12, r1
     858:	d1 2c       	mov	r13, r1
     85a:	a1 2c       	mov	r10, r1
     85c:	b1 2c       	mov	r11, r1
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	01 15       	cp	r16, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     864:	11 05       	cpc	r17, r1
     866:	21 f4       	brne	.+8      	; 0x870 <ProcessConfigurationDescriptor+0x7a>
     868:	e1 14       	cp	r14, r1
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     86a:	f1 04       	cpc	r15, r1
     86c:	69 f4       	brne	.+26     	; 0x888 <ProcessConfigurationDescriptor+0x92>
     86e:	1e c0       	rjmp	.+60     	; 0x8ac <ProcessConfigurationDescriptor+0xb6>
     870:	49 ee       	ldi	r20, 0xE9	; 233

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     872:	53 e0       	ldi	r21, 0x03	; 3
     874:	be 01       	movw	r22, r28
     876:	6d 5f       	subi	r22, 0xFD	; 253
     878:	7d 4f       	sbci	r23, 0xFD	; 253
     87a:	ce 01       	movw	r24, r28
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	9d 4f       	sbci	r25, 0xFD	; 253
     880:	3f d7       	rcall	.+3710   	; 0x1700 <USB_GetNextDescriptorComp>
     882:	81 11       	cpse	r24, r1
     884:	f1 cf       	rjmp	.-30     	; 0x868 <ProcessConfigurationDescriptor+0x72>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     886:	24 c0       	rjmp	.+72     	; 0x8d0 <ProcessConfigurationDescriptor+0xda>
     888:	49 ed       	ldi	r20, 0xD9	; 217
     88a:	53 e0       	ldi	r21, 0x03	; 3
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     88c:	be 01       	movw	r22, r28
     88e:	6d 5f       	subi	r22, 0xFD	; 253
     890:	7d 4f       	sbci	r23, 0xFD	; 253
     892:	ce 01       	movw	r24, r28
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	9d 4f       	sbci	r25, 0xFD	; 253
     898:	33 d7       	rcall	.+3686   	; 0x1700 <USB_GetNextDescriptorComp>
     89a:	81 11       	cpse	r24, r1
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <ProcessConfigurationDescriptor+0xb2>
     89e:	a1 2c       	mov	r10, r1
     8a0:	b1 2c       	mov	r11, r1
     8a2:	c1 2c       	mov	r12, r1
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
     8a4:	d1 2c       	mov	r13, r1
     8a6:	dd cf       	rjmp	.-70     	; 0x862 <ProcessConfigurationDescriptor+0x6c>
				DataOUTEndpoint      = NULL;
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	4d c0       	rjmp	.+154    	; 0x946 <ProcessConfigurationDescriptor+0x150>
     8ac:	48 ec       	ldi	r20, 0xC8	; 200
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
											  DComp_NextCDCDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     8ae:	53 e0       	ldi	r21, 0x03	; 3
     8b0:	be 01       	movw	r22, r28
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     8b2:	6d 5f       	subi	r22, 0xFD	; 253
     8b4:	7d 4f       	sbci	r23, 0xFD	; 253
     8b6:	ce 01       	movw	r24, r28
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	9d 4f       	sbci	r25, 0xFD	; 253
     8bc:	21 d7       	rcall	.+3650   	; 0x1700 <USB_GetNextDescriptorComp>
     8be:	81 11       	cpse	r24, r1
     8c0:	f3 cf       	rjmp	.-26     	; 0x8a8 <ProcessConfigurationDescriptor+0xb2>
     8c2:	cd 5f       	subi	r28, 0xFD	; 253
     8c4:	dd 4f       	sbci	r29, 0xFD	; 253
     8c6:	08 81       	ld	r16, Y
     8c8:	19 81       	ldd	r17, Y+1	; 0x01
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     8ca:	c3 50       	subi	r28, 0x03	; 3
     8cc:	d2 40       	sbci	r29, 0x02	; 2
     8ce:	12 c0       	rjmp	.+36     	; 0x8f4 <ProcessConfigurationDescriptor+0xfe>
     8d0:	cd 5f       	subi	r28, 0xFD	; 253
     8d2:	dd 4f       	sbci	r29, 0xFD	; 253
     8d4:	e8 81       	ld	r30, Y
     8d6:	f9 81       	ldd	r31, Y+1	; 0x01
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     8d8:	c3 50       	subi	r28, 0x03	; 3
     8da:	d2 40       	sbci	r29, 0x02	; 2
     8dc:	82 81       	ldd	r24, Z+2	; 0x02
     8de:	87 ff       	sbrs	r24, 7
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <ProcessConfigurationDescriptor+0xf8>
     8e2:	83 81       	ldd	r24, Z+3	; 0x03

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     8e4:	83 70       	andi	r24, 0x03	; 3
     8e6:	83 30       	cpi	r24, 0x03	; 3
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <ProcessConfigurationDescriptor+0xfc>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     8ea:	7f 01       	movw	r14, r30
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <ProcessConfigurationDescriptor+0xfe>
     8ee:	6f 01       	movw	r12, r30
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <ProcessConfigurationDescriptor+0xfe>
			  NotificationEndpoint = EndpointData;
     8f2:	5f 01       	movw	r10, r30
     8f4:	a1 14       	cp	r10, r1
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     8f6:	b1 04       	cpc	r11, r1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <ProcessConfigurationDescriptor+0x106>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     8fa:	b3 cf       	rjmp	.-154    	; 0x862 <ProcessConfigurationDescriptor+0x6c>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     8fc:	c1 14       	cp	r12, r1
     8fe:	d1 04       	cpc	r13, r1
     900:	09 f4       	brne	.+2      	; 0x904 <ProcessConfigurationDescriptor+0x10e>
     902:	af cf       	rjmp	.-162    	; 0x862 <ProcessConfigurationDescriptor+0x6c>
     904:	e1 14       	cp	r14, r1
     906:	f1 04       	cpc	r15, r1
     908:	09 f4       	brne	.+2      	; 0x90c <ProcessConfigurationDescriptor+0x116>
     90a:	ab cf       	rjmp	.-170    	; 0x862 <ProcessConfigurationDescriptor+0x6c>
     90c:	f5 01       	movw	r30, r10
     90e:	24 81       	ldd	r18, Z+4	; 0x04
     910:	35 81       	ldd	r19, Z+5	; 0x05
     912:	01 e0       	ldi	r16, 0x01	; 1
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     914:	42 81       	ldd	r20, Z+2	; 0x02
     916:	62 e0       	ldi	r22, 0x02	; 2
     918:	81 e8       	ldi	r24, 0x81	; 129
     91a:	b8 d4       	rcall	.+2416   	; 0x128c <Pipe_ConfigurePipe>
     91c:	f6 01       	movw	r30, r12
     91e:	24 81       	ldd	r18, Z+4	; 0x04
     920:	35 81       	ldd	r19, Z+5	; 0x05
     922:	42 81       	ldd	r20, Z+2	; 0x02
     924:	62 e0       	ldi	r22, 0x02	; 2

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	b1 d4       	rcall	.+2402   	; 0x128c <Pipe_ConfigurePipe>
     92a:	f7 01       	movw	r30, r14
     92c:	24 81       	ldd	r18, Z+4	; 0x04
     92e:	35 81       	ldd	r19, Z+5	; 0x05
     930:	42 81       	ldd	r20, Z+2	; 0x02
     932:	63 e0       	ldi	r22, 0x03	; 3
     934:	83 e8       	ldi	r24, 0x83	; 131

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     936:	aa d4       	rcall	.+2388   	; 0x128c <Pipe_ConfigurePipe>
     938:	f7 01       	movw	r30, r14
     93a:	86 81       	ldd	r24, Z+6	; 0x06
     93c:	80 93 ad 00 	sts	0x00AD, r24
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	01 c0       	rjmp	.+2      	; 0x946 <ProcessConfigurationDescriptor+0x150>
     944:	82 e0       	ldi	r24, 0x02	; 2
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     946:	cc 5f       	subi	r28, 0xFC	; 252
     948:	dd 4f       	sbci	r29, 0xFD	; 253
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     952:	cd bf       	out	0x3d, r28	; 61
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	08 95       	ret

0000096a <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     96a:	21 e2       	ldi	r18, 0x21	; 33
     96c:	20 93 27 01 	sts	0x0127, r18
     970:	10 92 28 01 	sts	0x0128, r1
     974:	10 92 2a 01 	sts	0x012A, r1
     978:	10 92 29 01 	sts	0x0129, r1
     97c:	10 92 2c 01 	sts	0x012C, r1
     980:	10 92 2b 01 	sts	0x012B, r1
     984:	70 93 2e 01 	sts	0x012E, r23
     988:	60 93 2d 01 	sts	0x012D, r22
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     98c:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
     990:	11 c7       	rjmp	.+3618   	; 0x17b4 <USB_Host_SendControlRequest>

00000992 <RNDIS_GetEncapsulatedResponse>:
     992:	21 ea       	ldi	r18, 0xA1	; 161
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     994:	20 93 27 01 	sts	0x0127, r18
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	20 93 28 01 	sts	0x0128, r18
     99e:	10 92 2a 01 	sts	0x012A, r1
     9a2:	10 92 29 01 	sts	0x0129, r1
     9a6:	10 92 2c 01 	sts	0x012C, r1
     9aa:	10 92 2b 01 	sts	0x012B, r1
     9ae:	70 93 2e 01 	sts	0x012E, r23
     9b2:	60 93 2d 01 	sts	0x012D, r22
     9b6:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
     9ba:	fc c6       	rjmp	.+3576   	; 0x17b4 <USB_Host_SendControlRequest>

000009bc <RNDIS_InitializeDevice>:
     9bc:	cf 92       	push	r12
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	cc 54       	subi	r28, 0x4C	; 76
     9d2:	d1 09       	sbc	r29, r1
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     9e0:	42 e0       	ldi	r20, 0x02	; 2
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	4d ab       	std	Y+53, r20	; 0x35
     9ea:	5e ab       	std	Y+54, r21	; 0x36
     9ec:	6f ab       	std	Y+55, r22	; 0x37
     9ee:	78 af       	std	Y+56, r23	; 0x38
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     9f0:	48 e1       	ldi	r20, 0x18	; 24
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	49 af       	std	Y+57, r20	; 0x39
     9fa:	5a af       	std	Y+58, r21	; 0x3a
     9fc:	6b af       	std	Y+59, r22	; 0x3b
     9fe:	7c af       	std	Y+60, r23	; 0x3c
	InitMessage.RequestId       = RequestID++;
     a00:	40 91 1e 01 	lds	r20, 0x011E
     a04:	50 91 1f 01 	lds	r21, 0x011F
     a08:	60 91 20 01 	lds	r22, 0x0120
     a0c:	70 91 21 01 	lds	r23, 0x0121
     a10:	6a 01       	movw	r12, r20
     a12:	7b 01       	movw	r14, r22
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	c2 1a       	sub	r12, r18
     a18:	d2 0a       	sbc	r13, r18
     a1a:	e2 0a       	sbc	r14, r18
     a1c:	f2 0a       	sbc	r15, r18
     a1e:	c0 92 1e 01 	sts	0x011E, r12
     a22:	d0 92 1f 01 	sts	0x011F, r13
     a26:	e0 92 20 01 	sts	0x0120, r14
     a2a:	f0 92 21 01 	sts	0x0121, r15
     a2e:	21 96       	adiw	r28, 0x01	; 1
     a30:	4c af       	std	Y+60, r20	; 0x3c
     a32:	5d af       	std	Y+61, r21	; 0x3d
     a34:	6e af       	std	Y+62, r22	; 0x3e
     a36:	7f af       	std	Y+63, r23	; 0x3f
     a38:	21 97       	sbiw	r28, 0x01	; 1

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	25 96       	adiw	r28, 0x05	; 5
     a44:	4c af       	std	Y+60, r20	; 0x3c
     a46:	5d af       	std	Y+61, r21	; 0x3d
     a48:	6e af       	std	Y+62, r22	; 0x3e
     a4a:	7f af       	std	Y+63, r23	; 0x3f
     a4c:	25 97       	sbiw	r28, 0x05	; 5
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     a4e:	29 96       	adiw	r28, 0x09	; 9
     a50:	1c ae       	std	Y+60, r1	; 0x3c
     a52:	1d ae       	std	Y+61, r1	; 0x3d
     a54:	1e ae       	std	Y+62, r1	; 0x3e
     a56:	1f ae       	std	Y+63, r1	; 0x3f
     a58:	29 97       	sbiw	r28, 0x09	; 9
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     a5a:	a0 e0       	ldi	r26, 0x00	; 0
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	2d 96       	adiw	r28, 0x0d	; 13
     a60:	8c af       	std	Y+60, r24	; 0x3c
     a62:	9d af       	std	Y+61, r25	; 0x3d
     a64:	ae af       	std	Y+62, r26	; 0x3e
     a66:	bf af       	std	Y+63, r27	; 0x3f
     a68:	2d 97       	sbiw	r28, 0x0d	; 13

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     a6a:	68 e1       	ldi	r22, 0x18	; 24
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	ce 01       	movw	r24, r28
     a70:	c5 96       	adiw	r24, 0x35	; 53
     a72:	7b df       	rcall	.-266    	; 0x96a <RNDIS_SendEncapsulatedCommand>
     a74:	81 11       	cpse	r24, r1
     a76:	17 c0       	rjmp	.+46     	; 0xaa6 <RNDIS_InitializeDevice+0xea>
     a78:	64 e3       	ldi	r22, 0x34	; 52
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	88 df       	rcall	.-240    	; 0x992 <RNDIS_GetEncapsulatedResponse>
     a82:	81 11       	cpse	r24, r1
     a84:	10 c0       	rjmp	.+32     	; 0xaa6 <RNDIS_InitializeDevice+0xea>
     a86:	8d 85       	ldd	r24, Y+13	; 0x0d
     a88:	9e 85       	ldd	r25, Y+14	; 0x0e
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     a8a:	af 85       	ldd	r26, Y+15	; 0x0f
     a8c:	b8 89       	ldd	r27, Y+16	; 0x10
     a8e:	89 2b       	or	r24, r25
     a90:	8a 2b       	or	r24, r26
     a92:	8b 2b       	or	r24, r27
     a94:	39 f4       	brne	.+14     	; 0xaa4 <RNDIS_InitializeDevice+0xe8>
     a96:	8d a1       	ldd	r24, Y+37	; 0x25
     a98:	9e a1       	ldd	r25, Y+38	; 0x26
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     a9a:	f8 01       	movw	r30, r16
     a9c:	91 83       	std	Z+1, r25	; 0x01
     a9e:	80 83       	st	Z, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <RNDIS_InitializeDevice+0xea>

	return HOST_SENDCONTROL_Successful;
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	c4 5b       	subi	r28, 0xB4	; 180
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     aa8:	df 4f       	sbci	r29, 0xFF	; 255

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;

	return HOST_SENDCONTROL_Successful;
}
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <RNDIS_SetRNDISProperty>:
     ac6:	6f 92       	push	r6
     ac8:	7f 92       	push	r7
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	60 97       	sbiw	r28, 0x10	; 16
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	3a 01       	movw	r6, r20
     af4:	a9 01       	movw	r20, r18

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     af6:	cd b6       	in	r12, 0x3d	; 61
     af8:	de b6       	in	r13, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     afa:	89 01       	movw	r16, r18
     afc:	04 5e       	subi	r16, 0xE4	; 228
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	2d b7       	in	r18, 0x3d	; 61
     b02:	3e b7       	in	r19, 0x3e	; 62
     b04:	20 1b       	sub	r18, r16
     b06:	31 0b       	sbc	r19, r17
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	3e bf       	out	0x3e, r19	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	2d bf       	out	0x3d, r18	; 61
     b12:	ad b7       	in	r26, 0x3d	; 61
     b14:	be b7       	in	r27, 0x3e	; 62
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	7d 01       	movw	r14, r26

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     b1a:	25 e0       	ldi	r18, 0x05	; 5
     b1c:	82 2e       	mov	r8, r18
     b1e:	91 2c       	mov	r9, r1
     b20:	a1 2c       	mov	r10, r1
     b22:	b1 2c       	mov	r11, r1
     b24:	ed b7       	in	r30, 0x3d	; 61
     b26:	fe b7       	in	r31, 0x3e	; 62
     b28:	81 82       	std	Z+1, r8	; 0x01
     b2a:	92 82       	std	Z+2, r9	; 0x02
     b2c:	a3 82       	std	Z+3, r10	; 0x03
     b2e:	b4 82       	std	Z+4, r11	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	0d 93       	st	X+, r16
     b38:	1d 93       	st	X+, r17
     b3a:	2d 93       	st	X+, r18
     b3c:	3c 93       	st	X, r19
     b3e:	17 97       	sbiw	r26, 0x07	; 7
	SetMessageData.SetMessage.RequestId      = RequestID++;
     b40:	00 91 1e 01 	lds	r16, 0x011E
     b44:	10 91 1f 01 	lds	r17, 0x011F
     b48:	20 91 20 01 	lds	r18, 0x0120
     b4c:	30 91 21 01 	lds	r19, 0x0121
     b50:	48 01       	movw	r8, r16
     b52:	59 01       	movw	r10, r18
     b54:	bf ef       	ldi	r27, 0xFF	; 255
     b56:	8b 1a       	sub	r8, r27
     b58:	9b 0a       	sbc	r9, r27
     b5a:	ab 0a       	sbc	r10, r27
     b5c:	bb 0a       	sbc	r11, r27
     b5e:	80 92 1e 01 	sts	0x011E, r8
     b62:	90 92 1f 01 	sts	0x011F, r9
     b66:	a0 92 20 01 	sts	0x0120, r10
     b6a:	b0 92 21 01 	sts	0x0121, r11
     b6e:	f7 01       	movw	r30, r14
     b70:	00 87       	std	Z+8, r16	; 0x08
     b72:	11 87       	std	Z+9, r17	; 0x09
     b74:	22 87       	std	Z+10, r18	; 0x0a
     b76:	33 87       	std	Z+11, r19	; 0x0b

	SetMessageData.SetMessage.Oid            = Oid;
     b78:	64 87       	std	Z+12, r22	; 0x0c
     b7a:	75 87       	std	Z+13, r23	; 0x0d
     b7c:	86 87       	std	Z+14, r24	; 0x0e
     b7e:	97 87       	std	Z+15, r25	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     b80:	ca 01       	movw	r24, r20
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	80 8b       	std	Z+16, r24	; 0x10
     b88:	91 8b       	std	Z+17, r25	; 0x11
     b8a:	a2 8b       	std	Z+18, r26	; 0x12
     b8c:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     b8e:	84 e1       	ldi	r24, 0x14	; 20
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	84 8b       	std	Z+20, r24	; 0x14
     b98:	95 8b       	std	Z+21, r25	; 0x15
     b9a:	a6 8b       	std	Z+22, r26	; 0x16
     b9c:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     b9e:	10 8e       	std	Z+24, r1	; 0x18
     ba0:	11 8e       	std	Z+25, r1	; 0x19
     ba2:	12 8e       	std	Z+26, r1	; 0x1a
     ba4:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(SetMessageData.ContiguousBuffer, Buffer, Length);
     ba6:	8d b7       	in	r24, 0x3d	; 61
     ba8:	9e b7       	in	r25, 0x3e	; 62
     baa:	4d 96       	adiw	r24, 0x1d	; 29
     bac:	b3 01       	movw	r22, r6
     bae:	6a d7       	rcall	.+3796   	; 0x1a84 <memcpy>
     bb0:	f7 01       	movw	r30, r14

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     bb2:	64 81       	ldd	r22, Z+4	; 0x04
     bb4:	75 81       	ldd	r23, Z+5	; 0x05
     bb6:	c7 01       	movw	r24, r14
     bb8:	d8 de       	rcall	.-592    	; 0x96a <RNDIS_SendEncapsulatedCommand>
     bba:	81 11       	cpse	r24, r1
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <RNDIS_SetRNDISProperty+0x11c>
     bbe:	60 e1       	ldi	r22, 0x10	; 16
     bc0:	70 e0       	ldi	r23, 0x00	; 0
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	e5 de       	rcall	.-566    	; 0x992 <RNDIS_GetEncapsulatedResponse>
     bc8:	81 11       	cpse	r24, r1
     bca:	0b c0       	rjmp	.+22     	; 0xbe2 <RNDIS_SetRNDISProperty+0x11c>
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	af 85       	ldd	r26, Y+15	; 0x0f
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     bd2:	b8 89       	ldd	r27, Y+16	; 0x10
     bd4:	89 2b       	or	r24, r25
     bd6:	8a 2b       	or	r24, r26
     bd8:	8b 2b       	or	r24, r27
     bda:	11 f0       	breq	.+4      	; 0xbe0 <RNDIS_SetRNDISProperty+0x11a>
     bdc:	80 ec       	ldi	r24, 0xC0	; 192
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <RNDIS_SetRNDISProperty+0x11c>
     be0:	80 e0       	ldi	r24, 0x00	; 0
	  return RNDIS_COMMAND_FAILED;
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli

	return HOST_SENDCONTROL_Successful;
     be6:	de be       	out	0x3e, r13	; 62
}
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd be       	out	0x3d, r12	; 61
     bec:	60 96       	adiw	r28, 0x10	; 16
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	af 90       	pop	r10
     c0c:	9f 90       	pop	r9
     c0e:	8f 90       	pop	r8
     c10:	7f 90       	pop	r7
     c12:	6f 90       	pop	r6
     c14:	08 95       	ret

00000c16 <RNDIS_QueryRNDISProperty>:
     c16:	4f 92       	push	r4
     c18:	5f 92       	push	r5
     c1a:	6f 92       	push	r6
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	6c 97       	sbiw	r28, 0x1c	; 28
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	4a 01       	movw	r8, r20
     c48:	79 01       	movw	r14, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     c4a:	ad b6       	in	r10, 0x3d	; 61
     c4c:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     c4e:	69 01       	movw	r12, r18
     c50:	28 e1       	ldi	r18, 0x18	; 24
     c52:	c2 0e       	add	r12, r18
     c54:	d1 1c       	adc	r13, r1
     c56:	ed b7       	in	r30, 0x3d	; 61
     c58:	fe b7       	in	r31, 0x3e	; 62
     c5a:	ec 19       	sub	r30, r12
     c5c:	fd 09       	sbc	r31, r13
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	fe bf       	out	0x3e, r31	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	ed bf       	out	0x3d, r30	; 61
     c68:	0d b7       	in	r16, 0x3d	; 61
     c6a:	1e b7       	in	r17, 0x3e	; 62
     c6c:	0f 5f       	subi	r16, 0xFF	; 255
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     c70:	34 e0       	ldi	r19, 0x04	; 4
     c72:	43 2e       	mov	r4, r19
     c74:	51 2c       	mov	r5, r1
     c76:	61 2c       	mov	r6, r1
     c78:	71 2c       	mov	r7, r1
     c7a:	49 82       	std	Y+1, r4	; 0x01
     c7c:	5a 82       	std	Y+2, r5	; 0x02
     c7e:	6b 82       	std	Y+3, r6	; 0x03
     c80:	7c 82       	std	Y+4, r7	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     c82:	4c e1       	ldi	r20, 0x1C	; 28
     c84:	44 2e       	mov	r4, r20
     c86:	51 2c       	mov	r5, r1
     c88:	61 2c       	mov	r6, r1
     c8a:	71 2c       	mov	r7, r1
     c8c:	4d 82       	std	Y+5, r4	; 0x05
     c8e:	5e 82       	std	Y+6, r5	; 0x06
     c90:	6f 82       	std	Y+7, r6	; 0x07
     c92:	78 86       	std	Y+8, r7	; 0x08
	QueryMessage.RequestId      = RequestID++;
     c94:	40 90 1e 01 	lds	r4, 0x011E
     c98:	50 90 1f 01 	lds	r5, 0x011F
     c9c:	60 90 20 01 	lds	r6, 0x0120
     ca0:	70 90 21 01 	lds	r7, 0x0121
     ca4:	a3 01       	movw	r20, r6
     ca6:	92 01       	movw	r18, r4
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	4f 4f       	sbci	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	20 93 1e 01 	sts	0x011E, r18
     cb4:	30 93 1f 01 	sts	0x011F, r19
     cb8:	40 93 20 01 	sts	0x0120, r20
     cbc:	50 93 21 01 	sts	0x0121, r21
     cc0:	49 86       	std	Y+9, r4	; 0x09
     cc2:	5a 86       	std	Y+10, r5	; 0x0a
     cc4:	6b 86       	std	Y+11, r6	; 0x0b
     cc6:	7c 86       	std	Y+12, r7	; 0x0c

	QueryMessage.Oid            = Oid;
     cc8:	6d 87       	std	Y+13, r22	; 0x0d
     cca:	7e 87       	std	Y+14, r23	; 0x0e
     ccc:	8f 87       	std	Y+15, r24	; 0x0f
     cce:	98 8b       	std	Y+16, r25	; 0x10
	QueryMessage.InformationBufferLength = 0;
     cd0:	19 8a       	std	Y+17, r1	; 0x11
     cd2:	1a 8a       	std	Y+18, r1	; 0x12
     cd4:	1b 8a       	std	Y+19, r1	; 0x13
     cd6:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     cd8:	1d 8a       	std	Y+21, r1	; 0x15
     cda:	1e 8a       	std	Y+22, r1	; 0x16
     cdc:	1f 8a       	std	Y+23, r1	; 0x17
     cde:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     ce0:	19 8e       	std	Y+25, r1	; 0x19
     ce2:	1a 8e       	std	Y+26, r1	; 0x1a
     ce4:	1b 8e       	std	Y+27, r1	; 0x1b
     ce6:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     ce8:	6c e1       	ldi	r22, 0x1C	; 28
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	3c de       	rcall	.-904    	; 0x96a <RNDIS_SendEncapsulatedCommand>
     cf2:	81 11       	cpse	r24, r1
     cf4:	17 c0       	rjmp	.+46     	; 0xd24 <RNDIS_QueryRNDISProperty+0x10e>
     cf6:	b6 01       	movw	r22, r12
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     cf8:	c8 01       	movw	r24, r16
     cfa:	4b de       	rcall	.-874    	; 0x992 <RNDIS_GetEncapsulatedResponse>
     cfc:	81 11       	cpse	r24, r1
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <RNDIS_QueryRNDISProperty+0x10e>
     d00:	f8 01       	movw	r30, r16
     d02:	84 85       	ldd	r24, Z+12	; 0x0c
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     d04:	95 85       	ldd	r25, Z+13	; 0x0d
     d06:	a6 85       	ldd	r26, Z+14	; 0x0e
     d08:	b7 85       	ldd	r27, Z+15	; 0x0f
     d0a:	89 2b       	or	r24, r25
     d0c:	8a 2b       	or	r24, r26
     d0e:	8b 2b       	or	r24, r27
     d10:	41 f4       	brne	.+16     	; 0xd22 <RNDIS_QueryRNDISProperty+0x10c>
     d12:	b8 01       	movw	r22, r16
     d14:	68 5e       	subi	r22, 0xE8	; 232
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	a7 01       	movw	r20, r14
     d1a:	c4 01       	movw	r24, r8
     d1c:	b3 d6       	rcall	.+3430   	; 0x1a84 <memcpy>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <RNDIS_QueryRNDISProperty+0x10e>
     d22:	80 ec       	ldi	r24, 0xC0	; 192

	return HOST_SENDCONTROL_Successful;
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     d28:	be be       	out	0x3e, r11	; 62

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	ad be       	out	0x3d, r10	; 61
     d2e:	6c 96       	adiw	r28, 0x1c	; 28
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	8f 90       	pop	r8
     d52:	7f 90       	pop	r7
     d54:	6f 90       	pop	r6
     d56:	5f 90       	pop	r5
     d58:	4f 90       	pop	r4
     d5a:	08 95       	ret

00000d5c <RNDIS_GetPacketLength>:
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     d62:	df 93       	push	r29
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	ac 97       	sbiw	r28, 0x2c	; 44
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	8c 01       	movw	r16, r24
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d7c:	80 91 aa 00 	lds	r24, 0x00AA
     d80:	8f 7c       	andi	r24, 0xCF	; 207
     d82:	80 61       	ori	r24, 0x10	; 16
     d84:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d88:	80 91 a9 00 	lds	r24, 0x00A9
     d8c:	8f 7b       	andi	r24, 0xBF	; 191
     d8e:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d92:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     d96:	85 fd       	sbrc	r24, 5
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <RNDIS_GetPacketLength+0x46>
	{
		*PacketLength = 0;
     d9a:	f8 01       	movw	r30, r16
     d9c:	11 82       	std	Z+1, r1	; 0x01
     d9e:	10 82       	st	Z, r1
     da0:	14 c0       	rjmp	.+40     	; 0xdca <RNDIS_GetPacketLength+0x6e>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	6c e2       	ldi	r22, 0x2C	; 44
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	21 d2       	rcall	.+1090   	; 0x11f2 <Pipe_Read_Stream_LE>
     db0:	81 11       	cpse	r24, r1
     db2:	11 c0       	rjmp	.+34     	; 0xdd6 <RNDIS_GetPacketLength+0x7a>
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	f8 01       	movw	r30, r16
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	80 83       	st	Z, r24
     dbe:	89 85       	ldd	r24, Y+9	; 0x09

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	84 97       	sbiw	r24, 0x24	; 36
     dc8:	d1 d1       	rcall	.+930    	; 0x116c <Pipe_Discard_Stream>
     dca:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	80 93 a9 00 	sts	0x00A9, r24
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	ac 96       	adiw	r28, 0x2c	; 44
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     dd8:	0f b6       	in	r0, 0x3f	; 63
}
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <USB_Host_ResetDevice>:
     dec:	80 91 9e 00 	lds	r24, 0x009E
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     df0:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     df2:	90 91 a0 00 	lds	r25, 0x00A0
     df6:	9d 7f       	andi	r25, 0xFD	; 253
     df8:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     dfc:	90 91 9e 00 	lds	r25, 0x009E
     e00:	92 60       	ori	r25, 0x02	; 2
     e02:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e06:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e0a:	91 fd       	sbrc	r25, 1
     e0c:	fc cf       	rjmp	.-8      	; 0xe06 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e0e:	90 91 9e 00 	lds	r25, 0x009E
     e12:	91 60       	ori	r25, 0x01	; 1
     e14:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     e18:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e1c:	90 91 a0 00 	lds	r25, 0x00A0
     e20:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e22:	20 91 a0 00 	lds	r18, 0x00A0
     e26:	2f 7d       	andi	r18, 0xDF	; 223
     e28:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e2c:	20 91 9f 00 	lds	r18, 0x009F
     e30:	2f 7d       	andi	r18, 0xDF	; 223
     e32:	20 93 9f 00 	sts	0x009F, r18
     e36:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e38:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e3c:	35 ff       	sbrs	r19, 5
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e40:	20 91 9f 00 	lds	r18, 0x009F
     e44:	2f 7d       	andi	r18, 0xDF	; 223
     e46:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e4a:	20 91 9f 00 	lds	r18, 0x009F
     e4e:	2d 7f       	andi	r18, 0xFD	; 253
     e50:	20 93 9f 00 	sts	0x009F, r18
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e56:	ef ec       	ldi	r30, 0xCF	; 207
     e58:	f7 e0       	ldi	r31, 0x07	; 7
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <USB_Host_ResetDevice+0x6e>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <USB_Host_ResetDevice+0x74>
     e60:	00 00       	nop
     e62:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     e64:	49 f7       	brne	.-46     	; 0xe38 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     e66:	99 23       	and	r25, r25
     e68:	29 f0       	breq	.+10     	; 0xe74 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e6a:	90 91 a0 00 	lds	r25, 0x00A0
     e6e:	90 62       	ori	r25, 0x20	; 32
     e70:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     e74:	81 11       	cpse	r24, r1
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     e78:	80 91 9e 00 	lds	r24, 0x009E
     e7c:	8e 7f       	andi	r24, 0xFE	; 254
     e7e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e82:	80 91 a0 00 	lds	r24, 0x00A0
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	80 93 a0 00 	sts	0x00A0, r24
     e8c:	08 95       	ret

00000e8e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e8e:	20 91 9e 00 	lds	r18, 0x009E
     e92:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e94:	90 91 a0 00 	lds	r25, 0x00A0
     e98:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e9a:	30 91 a0 00 	lds	r19, 0x00A0
     e9e:	3f 7d       	andi	r19, 0xDF	; 223
     ea0:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ea4:	30 91 9f 00 	lds	r19, 0x009F
     ea8:	3f 7d       	andi	r19, 0xDF	; 223
     eaa:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eae:	30 91 9e 00 	lds	r19, 0x009E
     eb2:	31 60       	ori	r19, 0x01	; 1
     eb4:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     eb8:	88 23       	and	r24, r24
     eba:	39 f1       	breq	.+78     	; 0xf0a <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ebc:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     ec0:	35 ff       	sbrs	r19, 5
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ec4:	30 91 9f 00 	lds	r19, 0x009F
     ec8:	3f 7d       	andi	r19, 0xDF	; 223
     eca:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     ece:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     ed0:	30 91 2f 01 	lds	r19, 0x012F
     ed4:	31 30       	cpi	r19, 0x01	; 1
     ed6:	c1 f0       	breq	.+48     	; 0xf08 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     ed8:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     edc:	34 ff       	sbrs	r19, 4
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ee0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     ee4:	80 91 a6 00 	lds	r24, 0x00A6
     ee8:	8f 7e       	andi	r24, 0xEF	; 239
     eea:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     eee:	82 e0       	ldi	r24, 0x02	; 2

			break;
     ef0:	0c c0       	rjmp	.+24     	; 0xf0a <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ef2:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     ef6:	31 ff       	sbrs	r19, 1
     ef8:	df cf       	rjmp	.-66     	; 0xeb8 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     efa:	80 91 a6 00 	lds	r24, 0x00A6
     efe:	8d 7f       	andi	r24, 0xFD	; 253
     f00:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     f04:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     f08:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     f0a:	21 11       	cpse	r18, r1
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f0e:	20 91 9e 00 	lds	r18, 0x009E
     f12:	2e 7f       	andi	r18, 0xFE	; 254
     f14:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f18:	99 23       	and	r25, r25
     f1a:	29 f0       	breq	.+10     	; 0xf26 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f1c:	90 91 a0 00 	lds	r25, 0x00A0
     f20:	90 62       	ori	r25, 0x20	; 32
     f22:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f26:	08 95       	ret

00000f28 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	28 97       	sbiw	r28, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     f40:	80 91 2f 01 	lds	r24, 0x012F
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	09 f4       	brne	.+2      	; 0xf4a <USB_Host_ProcessNextHostState+0x22>
     f48:	9c c0       	rjmp	.+312    	; 0x1082 <USB_Host_ProcessNextHostState+0x15a>
     f4a:	68 f4       	brcc	.+26     	; 0xf66 <USB_Host_ProcessNextHostState+0x3e>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	e1 f1       	breq	.+120    	; 0xfc8 <USB_Host_ProcessNextHostState+0xa0>
     f50:	18 f4       	brcc	.+6      	; 0xf58 <USB_Host_ProcessNextHostState+0x30>
     f52:	88 23       	and	r24, r24
     f54:	d9 f0       	breq	.+54     	; 0xf8c <USB_Host_ProcessNextHostState+0x64>
     f56:	ff c0       	rjmp	.+510    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	09 f4       	brne	.+2      	; 0xf5e <USB_Host_ProcessNextHostState+0x36>
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <USB_Host_ProcessNextHostState+0xb4>
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	09 f4       	brne	.+2      	; 0xf64 <USB_Host_ProcessNextHostState+0x3c>
     f62:	67 c0       	rjmp	.+206    	; 0x1032 <USB_Host_ProcessNextHostState+0x10a>
     f64:	f8 c0       	rjmp	.+496    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
     f66:	87 30       	cpi	r24, 0x07	; 7
     f68:	09 f4       	brne	.+2      	; 0xf6c <USB_Host_ProcessNextHostState+0x44>
     f6a:	a6 c0       	rjmp	.+332    	; 0x10b8 <USB_Host_ProcessNextHostState+0x190>
     f6c:	08 f4       	brcc	.+2      	; 0xf70 <USB_Host_ProcessNextHostState+0x48>
     f6e:	96 c0       	rjmp	.+300    	; 0x109c <USB_Host_ProcessNextHostState+0x174>
     f70:	88 30       	cpi	r24, 0x08	; 8
     f72:	09 f4       	brne	.+2      	; 0xf76 <USB_Host_ProcessNextHostState+0x4e>
     f74:	bf c0       	rjmp	.+382    	; 0x10f4 <USB_Host_ProcessNextHostState+0x1cc>
     f76:	89 30       	cpi	r24, 0x09	; 9
     f78:	09 f0       	breq	.+2      	; 0xf7c <USB_Host_ProcessNextHostState+0x54>
     f7a:	ed c0       	rjmp	.+474    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	80 93 2f 01 	sts	0x012F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     f88:	78 da       	rcall	.-2832   	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete>
     f8a:	e5 c0       	rjmp	.+458    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
			break;
     f8c:	00 91 23 01 	lds	r16, 0x0123
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     f90:	10 91 24 01 	lds	r17, 0x0124
     f94:	01 15       	cp	r16, r1
     f96:	11 05       	cpc	r17, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <USB_Host_ProcessNextHostState+0x74>
     f9a:	dd c0       	rjmp	.+442    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
     f9c:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f9e:	77 df       	rcall	.-274    	; 0xe8e <USB_Host_WaitMS>
     fa0:	88 23       	and	r24, r24
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <USB_Host_ProcessNextHostState+0x88>
     fa4:	90 91 22 01 	lds	r25, 0x0122
				{
					USB_HostState = PostWaitState;
     fa8:	90 93 2f 01 	sts	0x012F, r25
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	c5 c0       	rjmp	.+394    	; 0x113a <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     fb0:	01 50       	subi	r16, 0x01	; 1
					break;
     fb2:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     fb4:	10 93 24 01 	sts	0x0124, r17
     fb8:	00 93 23 01 	sts	0x0123, r16
     fbc:	01 2b       	or	r16, r17
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <USB_Host_ProcessNextHostState+0x9a>
     fc0:	ca c0       	rjmp	.+404    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
     fc2:	80 91 22 01 	lds	r24, 0x0122
				  USB_HostState = PostWaitState;
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <USB_Host_ProcessNextHostState+0xae>
     fc8:	88 ee       	ldi	r24, 0xE8	; 232
     fca:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     fcc:	90 93 24 01 	sts	0x0124, r25
     fd0:	80 93 23 01 	sts	0x0123, r24
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	80 93 2f 01 	sts	0x012F, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     fda:	bd c0       	rjmp	.+378    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
     fdc:	80 91 23 01 	lds	r24, 0x0123
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     fe0:	90 91 24 01 	lds	r25, 0x0124
     fe4:	9c 01       	movw	r18, r24
     fe6:	21 50       	subi	r18, 0x01	; 1
     fe8:	31 09       	sbc	r19, r1
     fea:	30 93 24 01 	sts	0x0124, r19
     fee:	20 93 23 01 	sts	0x0123, r18
     ff2:	89 2b       	or	r24, r25
     ff4:	39 f0       	breq	.+14     	; 0x1004 <USB_Host_ProcessNextHostState+0xdc>
     ff6:	8f ec       	ldi	r24, 0xCF	; 207
     ff8:	97 e0       	ldi	r25, 0x07	; 7
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <USB_Host_ProcessNextHostState+0xd2>
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <USB_Host_ProcessNextHostState+0xd8>
    1000:	00 00       	nop
    1002:	a9 c0       	rjmp	.+338    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
    1004:	77 98       	cbi	0x0e, 7	; 14
    1006:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    100a:	80 61       	ori	r24, 0x10	; 16
    100c:	80 93 d8 00 	sts	0x00D8, r24
    1010:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1014:	8b 7f       	andi	r24, 0xFB	; 251
    1016:	80 93 dd 00 	sts	0x00DD, r24
    101a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    101e:	80 61       	ori	r24, 0x10	; 16
    1020:	80 93 d7 00 	sts	0x00D7, r24
    1024:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	80 93 dd 00 	sts	0x00DD, r24
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	d2 cf       	rjmp	.-92     	; 0xfd6 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1032:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1036:	80 ff       	sbrs	r24, 0
    1038:	8e c0       	rjmp	.+284    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    103a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	80 93 9f 00 	sts	0x009F, r24
    1044:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	80 93 9f 00 	sts	0x009F, r24
    104e:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1052:	8d 7f       	andi	r24, 0xFD	; 253
    1054:	80 93 df 00 	sts	0x00DF, r24
    1058:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	80 93 de 00 	sts	0x00DE, r24
    1062:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1066:	81 60       	ori	r24, 0x01	; 1
    1068:	80 93 9e 00 	sts	0x009E, r24
    106c:	77 d1       	rcall	.+750    	; 0x135c <Pipe_ClearPipes>
    106e:	10 92 2f 01 	sts	0x012F, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1072:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 24 01 	sts	0x0124, r25
    107a:	80 93 23 01 	sts	0x0123, r24
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	0a c0       	rjmp	.+20     	; 0x1096 <USB_Host_ProcessNextHostState+0x16e>
    1082:	b4 de       	rcall	.-664    	; 0xdec <USB_Host_ResetDevice>
    1084:	10 92 2f 01 	sts	0x012F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    108c:	90 93 24 01 	sts	0x0124, r25
    1090:	80 93 23 01 	sts	0x0123, r24
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	80 93 22 01 	sts	0x0122, r24
    109a:	5d c0       	rjmp	.+186    	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
    109c:	01 e0       	ldi	r16, 0x01	; 1
    109e:	20 e4       	ldi	r18, 0x40	; 64
    10a0:	30 e0       	ldi	r19, 0x00	; 0
			break;
    10a2:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	f1 d0       	rcall	.+482    	; 0x128c <Pipe_ConfigurePipe>
    10aa:	81 11       	cpse	r24, r1
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <USB_Host_ProcessNextHostState+0x18c>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	94 e0       	ldi	r25, 0x04	; 4
    10b2:	43 c0       	rjmp	.+134    	; 0x113a <USB_Host_ProcessNextHostState+0x212>
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	8f cf       	rjmp	.-226    	; 0xfd6 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    10b8:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    10ba:	e1 e0       	ldi	r30, 0x01	; 1
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    10be:	a7 e2       	ldi	r26, 0x27	; 39
    10c0:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	8a 95       	dec	r24
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <USB_Host_ProcessNextHostState+0x19a>
    10ca:	10 92 a7 00 	sts	0x00A7, r1
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	70 d3       	rcall	.+1760   	; 0x17b4 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10d4:	81 11       	cpse	r24, r1
    10d6:	30 c0       	rjmp	.+96     	; 0x1138 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    10d8:	88 85       	ldd	r24, Y+8	; 0x08
    10da:	80 93 00 01 	sts	0x0100, r24
    10de:	86 de       	rcall	.-756    	; 0xdec <USB_Host_ResetDevice>
    10e0:	10 92 2f 01 	sts	0x012F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	90 93 24 01 	sts	0x0124, r25

			USB_Host_ResetDevice();
    10ec:	80 93 23 01 	sts	0x0123, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	d1 cf       	rjmp	.-94     	; 0x1096 <USB_Host_ProcessNextHostState+0x16e>
    10f4:	20 91 00 01 	lds	r18, 0x0100
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	01 e0       	ldi	r16, 0x01	; 1
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1102:	c4 d0       	rcall	.+392    	; 0x128c <Pipe_ConfigurePipe>
    1104:	88 23       	and	r24, r24
    1106:	99 f2       	breq	.-90     	; 0x10ae <USB_Host_ProcessNextHostState+0x186>
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	e9 e0       	ldi	r30, 0x09	; 9
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	a7 e2       	ldi	r26, 0x27	; 39
    1110:	b1 e0       	ldi	r27, 0x01	; 1
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1118:	e1 f7       	brne	.-8      	; 0x1112 <USB_Host_ProcessNextHostState+0x1ea>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	4a d3       	rcall	.+1684   	; 0x17b4 <USB_Host_SendControlRequest>
    1120:	81 11       	cpse	r24, r1
    1122:	0a c0       	rjmp	.+20     	; 0x1138 <USB_Host_ProcessNextHostState+0x210>
    1124:	10 92 2f 01 	sts	0x012F, r1
    1128:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 24 01 	sts	0x0124, r25
    1130:	80 93 23 01 	sts	0x0123, r24
    1134:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1136:	af cf       	rjmp	.-162    	; 0x1096 <USB_Host_ProcessNextHostState+0x16e>
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	20 91 2f 01 	lds	r18, 0x012F
    113e:	21 30       	cpi	r18, 0x01	; 1
    1140:	51 f0       	breq	.+20     	; 0x1156 <USB_Host_ProcessNextHostState+0x22e>
    1142:	68 2f       	mov	r22, r24
    1144:	89 2f       	mov	r24, r25
    1146:	57 da       	rcall	.-2898   	; 0x5f6 <EVENT_USB_Host_DeviceEnumerationFailed>
    1148:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	80 93 dd 00 	sts	0x00DD, r24
    1152:	8d d9       	rcall	.-3302   	; 0x46e <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1154:	5d d1       	rcall	.+698    	; 0x1410 <USB_ResetInterface>
    1156:	28 96       	adiw	r28, 0x08	; 8
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16

		USB_ResetInterface();
    116a:	08 95       	ret

0000116c <Pipe_Discard_Stream>:
    116c:	ef 92       	push	r14
	}
}
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	8c 01       	movw	r16, r24
    117a:	eb 01       	movw	r28, r22
    117c:	80 91 aa 00 	lds	r24, 0x00AA
    1180:	8f 7c       	andi	r24, 0xCF	; 207
    1182:	80 61       	ori	r24, 0x10	; 16
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1184:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1188:	fd d0       	rcall	.+506    	; 0x1384 <Pipe_WaitUntilReady>
    118a:	81 11       	cpse	r24, r1
    118c:	2b c0       	rjmp	.+86     	; 0x11e4 <Pipe_Discard_Stream+0x78>
    118e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1190:	21 f0       	breq	.+8      	; 0x119a <Pipe_Discard_Stream+0x2e>
    1192:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
    1194:	99 81       	ldd	r25, Y+1	; 0x01
    1196:	08 1b       	sub	r16, r24
    1198:	19 0b       	sbc	r17, r25
    119a:	e1 2c       	mov	r14, r1

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    119c:	f1 2c       	mov	r15, r1
    119e:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    11a0:	11 05       	cpc	r17, r1
    11a2:	f9 f0       	breq	.+62     	; 0x11e2 <Pipe_Discard_Stream+0x76>
    11a4:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11a8:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <Pipe_Discard_Stream+0x66>
    11ac:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11b0:	8e 77       	andi	r24, 0x7E	; 126
    11b2:	80 93 a6 00 	sts	0x00A6, r24
    11b6:	20 97       	sbiw	r28, 0x00	; 0
		{
			Pipe_ClearIN();

			if (BytesProcessed != NULL)
    11b8:	41 f0       	breq	.+16     	; 0x11ca <Pipe_Discard_Stream+0x5e>
    11ba:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
    11be:	8e 0d       	add	r24, r14
    11c0:	9f 1d       	adc	r25, r15
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	88 83       	st	Y, r24
    11c6:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <Pipe_Discard_Stream+0x78>
    11ca:	dc d0       	rcall	.+440    	; 0x1384 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    11cc:	88 23       	and	r24, r24
    11ce:	39 f3       	breq	.-50     	; 0x119e <Pipe_Discard_Stream+0x32>
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <Pipe_Discard_Stream+0x78>
    11d2:	80 91 af 00 	lds	r24, 0x00AF
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    11d6:	01 50       	subi	r16, 0x01	; 1
    11d8:	11 09       	sbc	r17, r1
		}
		else
		{
			Pipe_Discard_8();

			Length--;
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
    11de:	f8 0a       	sbc	r15, r24
    11e0:	de cf       	rjmp	.-68     	; 0x119e <Pipe_Discard_Stream+0x32>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    11e6:	cf 91       	pop	r28
}
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	08 95       	ret

000011f2 <Pipe_Read_Stream_LE>:
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	7c 01       	movw	r14, r24
    1204:	8b 01       	movw	r16, r22
    1206:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1208:	80 91 aa 00 	lds	r24, 0x00AA
    120c:	8f 7c       	andi	r24, 0xCF	; 207
    120e:	80 61       	ori	r24, 0x10	; 16
    1210:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1214:	b7 d0       	rcall	.+366    	; 0x1384 <Pipe_WaitUntilReady>
    1216:	81 11       	cpse	r24, r1
    1218:	30 c0       	rjmp	.+96     	; 0x127a <Pipe_Read_Stream_LE+0x88>
    121a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    121c:	31 f0       	breq	.+12     	; 0x122a <Pipe_Read_Stream_LE+0x38>
    121e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1220:	99 81       	ldd	r25, Y+1	; 0x01
    1222:	08 1b       	sub	r16, r24
    1224:	19 0b       	sbc	r17, r25
    1226:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1228:	f9 1e       	adc	r15, r25
    122a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    122c:	d1 2c       	mov	r13, r1
    122e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1230:	11 05       	cpc	r17, r1
    1232:	11 f1       	breq	.+68     	; 0x1278 <Pipe_Read_Stream_LE+0x86>
    1234:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1238:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    123a:	13 c0       	rjmp	.+38     	; 0x1262 <Pipe_Read_Stream_LE+0x70>
    123c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1240:	8e 77       	andi	r24, 0x7E	; 126
    1242:	80 93 a6 00 	sts	0x00A6, r24
    1246:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1248:	41 f0       	breq	.+16     	; 0x125a <Pipe_Read_Stream_LE+0x68>
    124a:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    124c:	99 81       	ldd	r25, Y+1	; 0x01
    124e:	8c 0d       	add	r24, r12
    1250:	9d 1d       	adc	r25, r13
    1252:	99 83       	std	Y+1, r25	; 0x01
    1254:	88 83       	st	Y, r24
    1256:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1258:	10 c0       	rjmp	.+32     	; 0x127a <Pipe_Read_Stream_LE+0x88>
    125a:	94 d0       	rcall	.+296    	; 0x1384 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    125c:	88 23       	and	r24, r24
    125e:	39 f3       	breq	.-50     	; 0x122e <Pipe_Read_Stream_LE+0x3c>
    1260:	0c c0       	rjmp	.+24     	; 0x127a <Pipe_Read_Stream_LE+0x88>
    1262:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1266:	f7 01       	movw	r30, r14
    1268:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    126a:	7f 01       	movw	r14, r30
    126c:	01 50       	subi	r16, 0x01	; 1
    126e:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1270:	ff ef       	ldi	r31, 0xFF	; 255
    1272:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1274:	df 0a       	sbc	r13, r31
    1276:	db cf       	rjmp	.-74     	; 0x122e <Pipe_Read_Stream_LE+0x3c>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    127c:	cf 91       	pop	r28
}
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	08 95       	ret

0000128c <Pipe_ConfigurePipe>:
    128c:	0f 93       	push	r16
    128e:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1290:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1292:	87 ff       	sbrs	r24, 7
    1294:	02 c0       	rjmp	.+4      	; 0x129a <Pipe_ConfigurePipe+0xe>
    1296:	80 e1       	ldi	r24, 0x10	; 16
    1298:	01 c0       	rjmp	.+2      	; 0x129c <Pipe_ConfigurePipe+0x10>
    129a:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    129c:	e7 30       	cpi	r30, 0x07	; 7
    129e:	10 f0       	brcs	.+4      	; 0x12a4 <Pipe_ConfigurePipe+0x18>
	  return false;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	5a c0       	rjmp	.+180    	; 0x1358 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    12a4:	61 11       	cpse	r22, r1
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    12a8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    12aa:	90 e4       	ldi	r25, 0x40	; 64
    12ac:	69 9f       	mul	r22, r25
    12ae:	b0 01       	movw	r22, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	4f 70       	andi	r20, 0x0F	; 15
    12b4:	46 2b       	or	r20, r22
    12b6:	48 2b       	or	r20, r24
    12b8:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12ba:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    12be:	5e 13       	cpse	r21, r30
    12c0:	19 c0       	rjmp	.+50     	; 0x12f4 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    12c2:	02 30       	cpi	r16, 0x02	; 2
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <Pipe_ConfigurePipe+0x3e>
    12c6:	76 e0       	ldi	r23, 0x06	; 6
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <Pipe_ConfigurePipe+0x40>
    12ca:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    12d0:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    12d2:	82 17       	cp	r24, r18
    12d4:	93 07       	cpc	r25, r19
    12d6:	40 f0       	brcs	.+16     	; 0x12e8 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    12d8:	86 2f       	mov	r24, r22
    12da:	82 95       	swap	r24
    12dc:	80 7f       	andi	r24, 0xF0	; 240
    12de:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    12e0:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    12e2:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    12e8:	65 30       	cpi	r22, 0x05	; 5
    12ea:	b1 f3       	breq	.-20     	; 0x12d8 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    12ec:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	ef cf       	rjmp	.-34     	; 0x12d2 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    12f4:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    12f8:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    12fc:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1300:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1304:	81 fd       	sbrc	r24, 1
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1308:	5f 5f       	subi	r21, 0xFF	; 255
    130a:	57 30       	cpi	r21, 0x07	; 7
    130c:	b1 f6       	brne	.-84     	; 0x12ba <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    130e:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	21 c0       	rjmp	.+66     	; 0x1358 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1316:	90 91 a9 00 	lds	r25, 0x00A9
    131a:	9e 7f       	andi	r25, 0xFE	; 254
    131c:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1320:	90 91 ab 00 	lds	r25, 0x00AB
    1324:	9d 7f       	andi	r25, 0xFD	; 253
    1326:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    132a:	90 91 a9 00 	lds	r25, 0x00A9
    132e:	91 60       	ori	r25, 0x01	; 1
    1330:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1334:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1338:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    133c:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    1340:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1344:	80 91 a9 00 	lds	r24, 0x00A9
    1348:	80 62       	ori	r24, 0x20	; 32
    134a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    134e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1352:	87 fd       	sbrc	r24, 7
    1354:	d9 cf       	rjmp	.-78     	; 0x1308 <Pipe_ConfigurePipe+0x7c>
    1356:	a4 cf       	rjmp	.-184    	; 0x12a0 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    135c:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1360:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1362:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1366:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    136a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    136e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1372:	90 91 a9 00 	lds	r25, 0x00A9
    1376:	9e 7f       	andi	r25, 0xFE	; 254
    1378:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	87 30       	cpi	r24, 0x07	; 7
    1380:	81 f7       	brne	.-32     	; 0x1362 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1382:	08 95       	ret

00001384 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1384:	80 91 a2 00 	lds	r24, 0x00A2
    1388:	90 91 a3 00 	lds	r25, 0x00A3
    138c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    138e:	20 91 aa 00 	lds	r18, 0x00AA
    1392:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1394:	20 31       	cpi	r18, 0x10	; 16
    1396:	29 f4       	brne	.+10     	; 0x13a2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1398:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    139c:	20 ff       	sbrs	r18, 0
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <Pipe_WaitUntilReady+0x26>
    13a0:	17 c0       	rjmp	.+46     	; 0x13d0 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    13a2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    13a6:	22 fd       	sbrc	r18, 2
    13a8:	13 c0       	rjmp	.+38     	; 0x13d0 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13aa:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    13ae:	21 fd       	sbrc	r18, 1
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    13b2:	20 91 2f 01 	lds	r18, 0x012F
    13b6:	21 30       	cpi	r18, 0x01	; 1
    13b8:	79 f0       	breq	.+30     	; 0x13d8 <Pipe_WaitUntilReady+0x54>
    13ba:	20 91 a2 00 	lds	r18, 0x00A2
    13be:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	19 f3       	breq	.-58     	; 0x138e <Pipe_WaitUntilReady+0xa>
    13c8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    13ca:	41 f0       	breq	.+16     	; 0x13dc <Pipe_WaitUntilReady+0x58>
    13cc:	c9 01       	movw	r24, r18
    13ce:	df cf       	rjmp	.-66     	; 0x138e <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    13dc:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    13de:	08 95       	ret

000013e0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    13e0:	75 d0       	rcall	.+234    	; 0x14cc <USB_INT_DisableAllInterrupts>
    13e2:	7c d0       	rcall	.+248    	; 0x14dc <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13e4:	e0 ee       	ldi	r30, 0xE0	; 224
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 83       	st	Z, r24
    13ee:	e8 ed       	ldi	r30, 0xD8	; 216
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 77       	andi	r24, 0x7F	; 127
    13f6:	80 83       	st	Z, r24
    13f8:	19 bc       	out	0x29, r1	; 41
    13fa:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    13fc:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    13fe:	8c 91       	ld	r24, X
    1400:	8e 7f       	andi	r24, 0xFE	; 254
    1402:	8c 93       	st	X, r24
    1404:	80 81       	ld	r24, Z
    1406:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1408:	80 83       	st	Z, r24
    140a:	10 92 26 01 	sts	0x0126, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    140e:	08 95       	ret

00001410 <USB_ResetInterface>:
    1410:	5d d0       	rcall	.+186    	; 0x14cc <USB_INT_DisableAllInterrupts>
    1412:	64 d0       	rcall	.+200    	; 0x14dc <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1414:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1418:	8f 77       	andi	r24, 0x7F	; 127
    141a:	80 93 d8 00 	sts	0x00D8, r24
    141e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1422:	80 68       	ori	r24, 0x80	; 128
    1424:	80 93 d8 00 	sts	0x00D8, r24
    1428:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    142c:	8f 7d       	andi	r24, 0xDF	; 223
    142e:	80 93 d8 00 	sts	0x00D8, r24
    1432:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1436:	8f 77       	andi	r24, 0x7F	; 127
    1438:	80 93 d7 00 	sts	0x00D7, r24
    143c:	8c e0       	ldi	r24, 0x0C	; 12
    143e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1440:	8e e0       	ldi	r24, 0x0E	; 14
    1442:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1444:	09 b4       	in	r0, 0x29	; 41
    1446:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1448:	fd cf       	rjmp	.-6      	; 0x1444 <USB_ResetInterface+0x34>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 93 2f 01 	sts	0x012F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1450:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ConfigurationNumber = 0;
    1454:	80 e4       	ldi	r24, 0x40	; 64
    1456:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    145a:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    145e:	80 64       	ori	r24, 0x40	; 64
    1460:	80 93 d8 00 	sts	0x00D8, r24
    1464:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1468:	81 60       	ori	r24, 0x01	; 1
    146a:	80 93 dd 00 	sts	0x00DD, r24
    146e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1472:	84 60       	ori	r24, 0x04	; 4
    1474:	80 93 dd 00 	sts	0x00DD, r24
    1478:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    147c:	8f 7e       	andi	r24, 0xEF	; 239
    147e:	80 93 d7 00 	sts	0x00D7, r24
    1482:	6f 9a       	sbi	0x0d, 7	; 13
    1484:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1486:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	80 93 de 00 	sts	0x00DE, r24
    1490:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	80 93 de 00 	sts	0x00DE, r24
    149a:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	80 93 e0 00 	sts	0x00E0, r24
    14a4:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14a8:	80 61       	ori	r24, 0x10	; 16
    14aa:	80 93 d8 00 	sts	0x00D8, r24
    14ae:	08 95       	ret

000014b0 <USB_Init>:
    14b0:	e8 ed       	ldi	r30, 0xD8	; 216
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14b4:	80 81       	ld	r24, Z
    14b6:	8f 7e       	andi	r24, 0xEF	; 239
    14b8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    14ba:	e7 ed       	ldi	r30, 0xD7	; 215
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
    14ca:	a2 cf       	rjmp	.-188    	; 0x1410 <USB_ResetInterface>

000014cc <USB_INT_DisableAllInterrupts>:
    14cc:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8c 7f       	andi	r24, 0xFC	; 252
    14d4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    14d6:	10 92 a0 00 	sts	0x00A0, r1
    14da:	08 95       	ret

000014dc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    14dc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    14e0:	10 92 9f 00 	sts	0x009F, r1
    14e4:	08 95       	ret

000014e6 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	0b b6       	in	r0, 0x3b	; 59
    14f2:	0f 92       	push	r0
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    150c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1510:	85 ff       	sbrs	r24, 5
    1512:	0a c0       	rjmp	.+20     	; 0x1528 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1514:	80 91 a0 00 	lds	r24, 0x00A0
    1518:	85 ff       	sbrs	r24, 5
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    151c:	80 91 9f 00 	lds	r24, 0x009F
    1520:	8f 7d       	andi	r24, 0xDF	; 223
    1522:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1526:	1e d1       	rcall	.+572    	; 0x1764 <USB_Event_Stub>
    1528:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    152c:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    152e:	16 c0       	rjmp	.+44     	; 0x155c <__vector_10+0x76>
    1530:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1534:	81 ff       	sbrs	r24, 1
    1536:	12 c0       	rjmp	.+36     	; 0x155c <__vector_10+0x76>
    1538:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    153c:	8d 7f       	andi	r24, 0xFD	; 253
    153e:	80 93 9f 00 	sts	0x009F, r24
    1542:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1546:	8e 7f       	andi	r24, 0xFE	; 254
    1548:	80 93 9f 00 	sts	0x009F, r24
    154c:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1550:	8d 7f       	andi	r24, 0xFD	; 253
    1552:	80 93 a0 00 	sts	0x00A0, r24
    1556:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    155a:	5a df       	rcall	.-332    	; 0x1410 <USB_ResetInterface>

		USB_ResetInterface();
    155c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1560:	81 ff       	sbrs	r24, 1
    1562:	16 c0       	rjmp	.+44     	; 0x1590 <__vector_10+0xaa>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1564:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1568:	81 ff       	sbrs	r24, 1
    156a:	12 c0       	rjmp	.+36     	; 0x1590 <__vector_10+0xaa>
    156c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1570:	8d 7f       	andi	r24, 0xFD	; 253
    1572:	80 93 df 00 	sts	0x00DF, r24
    1576:	77 98       	cbi	0x0e, 7	; 14
    1578:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	80 93 dd 00 	sts	0x00DD, r24
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	21 d8       	rcall	.-4030   	; 0x5c8 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1586:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
    158a:	81 e0       	ldi	r24, 0x01	; 1
		EVENT_USB_Host_DeviceUnattached();
    158c:	80 93 2f 01 	sts	0x012F, r24

		USB_HostState = HOST_STATE_Unattached;
    1590:	80 91 df 00 	lds	r24, 0x00DF
    1594:	80 ff       	sbrs	r24, 0
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1596:	18 c0       	rjmp	.+48     	; 0x15c8 <__vector_10+0xe2>
    1598:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    159c:	80 ff       	sbrs	r24, 0
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <__vector_10+0xe2>
    15a0:	80 91 df 00 	lds	r24, 0x00DF
    15a4:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    15a6:	80 93 df 00 	sts	0x00DF, r24
    15aa:	80 91 de 00 	lds	r24, 0x00DE
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    15b0:	80 93 de 00 	sts	0x00DE, r24
    15b4:	0e 94 31 02 	call	0x462	; 0x462 <EVENT_USB_Host_DeviceAttached>
    15b8:	80 91 a0 00 	lds	r24, 0x00A0
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    15bc:	82 60       	ori	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    15be:	80 93 a0 00 	sts	0x00A0, r24
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	80 93 2f 01 	sts	0x012F, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    15c8:	80 91 df 00 	lds	r24, 0x00DF
    15cc:	82 ff       	sbrs	r24, 2
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <__vector_10+0x108>
    15d0:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    15d4:	82 ff       	sbrs	r24, 2
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <__vector_10+0x108>
    15d8:	80 91 df 00 	lds	r24, 0x00DF
    15dc:	8b 7f       	andi	r24, 0xFB	; 251
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    15de:	80 93 df 00 	sts	0x00DF, r24
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	07 d8       	rcall	.-4082   	; 0x5f6 <EVENT_USB_Host_DeviceEnumerationFailed>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    15e8:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
    15ec:	11 df       	rcall	.-478    	; 0x1410 <USB_ResetInterface>
    15ee:	ff 91       	pop	r31
		EVENT_USB_Host_DeviceUnattached();
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27

		USB_ResetInterface();
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <USB_GetNextDescriptor>:
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	fc 01       	movw	r30, r24
    161a:	eb 01       	movw	r28, r22
    161c:	a8 81       	ld	r26, Y
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    161e:	b9 81       	ldd	r27, Y+1	; 0x01
    1620:	8c 91       	ld	r24, X
    1622:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    1624:	20 81       	ld	r18, Z
    1626:	31 81       	ldd	r19, Z+1	; 0x01
    1628:	82 17       	cp	r24, r18
    162a:	93 07       	cpc	r25, r19
    162c:	08 f4       	brcc	.+2      	; 0x1630 <USB_GetNextDescriptor+0x1c>
    162e:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1630:	a2 0f       	add	r26, r18
    1632:	b3 1f       	adc	r27, r19
    1634:	eb 01       	movw	r28, r22
    1636:	b9 83       	std	Y+1, r27	; 0x01
    1638:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	82 1b       	sub	r24, r18
    1640:	93 0b       	sbc	r25, r19
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
			}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	29 97       	sbiw	r28, 0x09	; 9
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	7b 01       	movw	r14, r22
    166e:	8a 01       	movw	r16, r20
    1670:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1672:	90 e8       	ldi	r25, 0x80	; 128
    1674:	90 93 27 01 	sts	0x0127, r25
    1678:	96 e0       	ldi	r25, 0x06	; 6
    167a:	90 93 28 01 	sts	0x0128, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    167e:	e8 2f       	mov	r30, r24
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	31 97       	sbiw	r30, 0x01	; 1
    1684:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1686:	f0 93 2a 01 	sts	0x012A, r31
    168a:	e0 93 29 01 	sts	0x0129, r30
    168e:	10 92 2c 01 	sts	0x012C, r1
    1692:	10 92 2b 01 	sts	0x012B, r1
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	90 93 2e 01 	sts	0x012E, r25
    169e:	80 93 2d 01 	sts	0x012D, r24
    16a2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	84 d0       	rcall	.+264    	; 0x17b4 <USB_Host_SendControlRequest>
    16ac:	81 11       	cpse	r24, r1
    16ae:	19 c0       	rjmp	.+50     	; 0x16e2 <USB_Host_GetDeviceConfigDescriptor+0x96>
    16b0:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    16b2:	fc 81       	ldd	r31, Y+4	; 0x04
    16b4:	d7 01       	movw	r26, r14
    16b6:	ed 93       	st	X+, r30
    16b8:	fc 93       	st	X, r31
    16ba:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    16bc:	df 06       	cpc	r13, r31
    16be:	70 f0       	brcs	.+28     	; 0x16dc <USB_Host_GetDeviceConfigDescriptor+0x90>
    16c0:	f0 93 2e 01 	sts	0x012E, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    16c4:	e0 93 2d 01 	sts	0x012D, r30
    16c8:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    16ca:	74 d0       	rcall	.+232    	; 0x17b4 <USB_Host_SendControlRequest>
    16cc:	81 11       	cpse	r24, r1
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <USB_Host_GetDeviceConfigDescriptor+0x96>
    16d0:	f8 01       	movw	r30, r16
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <USB_Host_GetDeviceConfigDescriptor+0x94>
    16d8:	86 e0       	ldi	r24, 0x06	; 6
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    16dc:	85 e0       	ldi	r24, 0x05	; 5
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    16e4:	0f b6       	in	r0, 0x3f	; 63
}
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	08 95       	ret

00001700 <USB_GetNextDescriptorComp>:
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	8c 01       	movw	r16, r24
    1716:	eb 01       	movw	r28, r22
    1718:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    171a:	f8 01       	movw	r30, r16
    171c:	e0 80       	ld	r14, Z
    171e:	f1 80       	ldd	r15, Z+1	; 0x01
    1720:	e1 14       	cp	r14, r1
    1722:	f1 04       	cpc	r15, r1
    1724:	99 f0       	breq	.+38     	; 0x174c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1726:	a8 80       	ld	r10, Y
    1728:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    172a:	be 01       	movw	r22, r28
    172c:	c8 01       	movw	r24, r16
    172e:	72 df       	rcall	.-284    	; 0x1614 <USB_GetNextDescriptor>
    1730:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1732:	99 81       	ldd	r25, Y+1	; 0x01
    1734:	f6 01       	movw	r30, r12
    1736:	09 95       	icall
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	79 f3       	breq	.-34     	; 0x171a <USB_GetNextDescriptorComp+0x1a>
    173c:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    173e:	39 f4       	brne	.+14     	; 0x174e <USB_GetNextDescriptorComp+0x4e>
    1740:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1742:	a8 82       	st	Y, r10
    1744:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1746:	f1 82       	std	Z+1, r15	; 0x01
    1748:	e0 82       	st	Z, r14
    174a:	01 c0       	rjmp	.+2      	; 0x174e <USB_GetNextDescriptorComp+0x4e>
    174c:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    174e:	df 91       	pop	r29
}
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	bf 90       	pop	r11
    1760:	af 90       	pop	r10
    1762:	08 95       	ret

00001764 <USB_Event_Stub>:
    1764:	08 95       	ret

00001766 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    176e:	c9 ee       	ldi	r28, 0xE9	; 233
    1770:	d3 e0       	ldi	r29, 0x03	; 3
    1772:	11 11       	cpse	r17, r1
    1774:	0d c0       	rjmp	.+26     	; 0x1790 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1776:	80 91 a6 00 	lds	r24, 0x00A6
    177a:	83 fd       	sbrc	r24, 3
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	86 db       	rcall	.-2292   	; 0xe8e <USB_Host_WaitMS>
    1782:	81 11       	cpse	r24, r1
    1784:	13 c0       	rjmp	.+38     	; 0x17ac <USB_Host_WaitForIOS+0x46>
    1786:	21 97       	sbiw	r28, 0x01	; 1
    1788:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    178a:	99 f7       	brne	.-26     	; 0x1772 <USB_Host_WaitForIOS+0xc>
    178c:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <USB_Host_WaitForIOS+0x46>
    1790:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1792:	29 f4       	brne	.+10     	; 0x179e <USB_Host_WaitForIOS+0x38>
    1794:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1798:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    179a:	f1 cf       	rjmp	.-30     	; 0x177e <USB_Host_WaitForIOS+0x18>
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <USB_Host_WaitForIOS+0x44>
    179e:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17a0:	71 f7       	brne	.-36     	; 0x177e <USB_Host_WaitForIOS+0x18>
    17a2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17a6:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    17a8:	ea cf       	rjmp	.-44     	; 0x177e <USB_Host_WaitForIOS+0x18>
    17aa:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    17ac:	df 91       	pop	r29
}
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	08 95       	ret

000017b4 <USB_Host_SendControlRequest>:
    17b4:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    17c0:	f0 90 9e 00 	lds	r15, 0x009E
    17c4:	8f 2d       	mov	r24, r15
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    17ca:	c0 91 2d 01 	lds	r28, 0x012D
    17ce:	d0 91 2e 01 	lds	r29, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    17d2:	80 91 9e 00 	lds	r24, 0x009E
    17d6:	81 60       	ori	r24, 0x01	; 1
    17d8:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	57 db       	rcall	.-2386   	; 0xe8e <USB_Host_WaitMS>
    17e0:	81 11       	cpse	r24, r1
    17e2:	cc c0       	rjmp	.+408    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    17e4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17e8:	8f 7c       	andi	r24, 0xCF	; 207
    17ea:	80 93 aa 00 	sts	0x00AA, r24
    17ee:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    17f2:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    17f6:	8f 7e       	andi	r24, 0xEF	; 239
    17f8:	80 93 a6 00 	sts	0x00A6, r24
    17fc:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	80 93 a9 00 	sts	0x00A9, r24
    1806:	e7 e2       	ldi	r30, 0x27	; 39
    1808:	f1 e0       	ldi	r31, 0x01	; 1
    180a:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    180c:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1810:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1812:	ef 32       	cpi	r30, 0x2F	; 47
    1814:	f8 07       	cpc	r31, r24
    1816:	c9 f7       	brne	.-14     	; 0x180a <USB_Host_SendControlRequest+0x56>
    1818:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    181c:	87 77       	andi	r24, 0x77	; 119
    181e:	80 93 a6 00 	sts	0x00A6, r24
    1822:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1824:	a0 df       	rcall	.-192    	; 0x1766 <USB_Host_WaitForIOS>
    1826:	81 11       	cpse	r24, r1
    1828:	a9 c0       	rjmp	.+338    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    182a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	80 93 a9 00 	sts	0x00A9, r24
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	2b db       	rcall	.-2474   	; 0xe8e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1838:	81 11       	cpse	r24, r1
    183a:	a0 c0       	rjmp	.+320    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    183c:	80 91 27 01 	lds	r24, 0x0127
    1840:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1842:	4e c0       	rjmp	.+156    	; 0x18e0 <USB_Host_SendControlRequest+0x12c>
    1844:	80 91 aa 00 	lds	r24, 0x00AA
    1848:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    184a:	80 61       	ori	r24, 0x10	; 16
    184c:	80 93 aa 00 	sts	0x00AA, r24
    1850:	01 15       	cp	r16, r1
    1852:	11 05       	cpc	r17, r1
    1854:	09 f0       	breq	.+2      	; 0x1858 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1856:	3a c0       	rjmp	.+116    	; 0x18cc <USB_Host_SendControlRequest+0x118>
    1858:	80 91 aa 00 	lds	r24, 0x00AA
    185c:	8f 7c       	andi	r24, 0xCF	; 207
    185e:	80 62       	ori	r24, 0x20	; 32
    1860:	80 93 aa 00 	sts	0x00AA, r24
    1864:	80 91 a9 00 	lds	r24, 0x00A9
    1868:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    186a:	80 93 a9 00 	sts	0x00A9, r24
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	7a df       	rcall	.-268    	; 0x1766 <USB_Host_WaitForIOS>
    1872:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1874:	83 c0       	rjmp	.+262    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    1876:	80 91 a6 00 	lds	r24, 0x00A6
    187a:	8b 77       	andi	r24, 0x7B	; 123
    187c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	71 df       	rcall	.-286    	; 0x1766 <USB_Host_WaitForIOS>
    1884:	7b c0       	rjmp	.+246    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    1886:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    188a:	8f 7b       	andi	r24, 0xBF	; 191
    188c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	69 df       	rcall	.-302    	; 0x1766 <USB_Host_WaitForIOS>
    1894:	81 11       	cpse	r24, r1
    1896:	72 c0       	rjmp	.+228    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    1898:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    189c:	90 91 f7 00 	lds	r25, 0x00F7
    18a0:	89 2b       	or	r24, r25
    18a2:	11 f4       	brne	.+4      	; 0x18a8 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18a4:	c0 e0       	ldi	r28, 0x00	; 0
    18a6:	d0 e0       	ldi	r29, 0x00	; 0
    18a8:	f8 01       	movw	r30, r16
    18aa:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    18ac:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    18b0:	90 91 f7 00 	lds	r25, 0x00F7
    18b4:	89 2b       	or	r24, r25
    18b6:	69 f4       	brne	.+26     	; 0x18d2 <USB_Host_SendControlRequest+0x11e>
    18b8:	80 91 a9 00 	lds	r24, 0x00A9
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    18c2:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18c6:	8e 77       	andi	r24, 0x7E	; 126
    18c8:	80 93 a6 00 	sts	0x00A6, r24
    18cc:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18ce:	d9 f6       	brne	.-74     	; 0x1886 <USB_Host_SendControlRequest+0xd2>
    18d0:	c3 cf       	rjmp	.-122    	; 0x1858 <USB_Host_SendControlRequest+0xa4>
    18d2:	20 97       	sbiw	r28, 0x00	; 0
    18d4:	89 f3       	breq	.-30     	; 0x18b8 <USB_Host_SendControlRequest+0x104>
    18d6:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    18da:	81 93       	st	Z+, r24
    18dc:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    18de:	e5 cf       	rjmp	.-54     	; 0x18aa <USB_Host_SendControlRequest+0xf6>
    18e0:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    18e2:	11 05       	cpc	r17, r1
    18e4:	b1 f1       	breq	.+108    	; 0x1952 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    18e6:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    18ea:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18f2:	80 91 a9 00 	lds	r24, 0x00A9
    18f6:	8f 7b       	andi	r24, 0xBF	; 191
    18f8:	80 93 a9 00 	sts	0x00A9, r24
    18fc:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18fe:	20 97       	sbiw	r28, 0x00	; 0
    1900:	01 f1       	breq	.+64     	; 0x1942 <USB_Host_SendControlRequest+0x18e>
    1902:	31 df       	rcall	.-414    	; 0x1766 <USB_Host_WaitForIOS>
    1904:	81 11       	cpse	r24, r1
    1906:	3a c0       	rjmp	.+116    	; 0x197c <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1908:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    190a:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    190e:	30 91 f7 00 	lds	r19, 0x00F7
    1912:	80 91 00 01 	lds	r24, 0x0100
    1916:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	58 f4       	brcc	.+22     	; 0x1934 <USB_Host_SendControlRequest+0x180>
    191e:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	8c 01       	movw	r16, r24
    1924:	20 81       	ld	r18, Z
    1926:	20 93 af 00 	sts	0x00AF, r18
    192a:	21 97       	sbiw	r28, 0x01	; 1
    192c:	20 97       	sbiw	r28, 0x00	; 0
    192e:	19 f0       	breq	.+6      	; 0x1936 <USB_Host_SendControlRequest+0x182>
    1930:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1932:	eb cf       	rjmp	.-42     	; 0x190a <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1934:	8f 01       	movw	r16, r30
    1936:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    193a:	8b 77       	andi	r24, 0x7B	; 123
    193c:	80 93 a6 00 	sts	0x00A6, r24
    1940:	dd cf       	rjmp	.-70     	; 0x18fc <USB_Host_SendControlRequest+0x148>
    1942:	11 df       	rcall	.-478    	; 0x1766 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1944:	81 11       	cpse	r24, r1
    1946:	1a c0       	rjmp	.+52     	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    1948:	80 91 a9 00 	lds	r24, 0x00A9
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1952:	80 91 aa 00 	lds	r24, 0x00AA
    1956:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1958:	80 61       	ori	r24, 0x10	; 16
    195a:	80 93 aa 00 	sts	0x00AA, r24
    195e:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1962:	8f 7b       	andi	r24, 0xBF	; 191
    1964:	80 93 a9 00 	sts	0x00A9, r24
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	fd de       	rcall	.-518    	; 0x1766 <USB_Host_WaitForIOS>
    196c:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    196e:	06 c0       	rjmp	.+12     	; 0x197c <USB_Host_SendControlRequest+0x1c8>
    1970:	80 91 a6 00 	lds	r24, 0x00A6
    1974:	8e 77       	andi	r24, 0x7E	; 126
    1976:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 91 a9 00 	lds	r25, 0x00A9
    1980:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1982:	90 93 a9 00 	sts	0x00A9, r25
    1986:	f1 10       	cpse	r15, r1
    1988:	05 c0       	rjmp	.+10     	; 0x1994 <USB_Host_SendControlRequest+0x1e0>
    198a:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    198e:	9e 7f       	andi	r25, 0xFE	; 254
    1990:	90 93 9e 00 	sts	0x009E, r25
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    199a:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    19a6:	ff 90       	pop	r15
    19a8:	08 95       	ret

000019aa <USB_Host_SetDeviceConfiguration>:
    19aa:	cf 93       	push	r28
				UPRST = 0;
    19ac:	c8 2f       	mov	r28, r24
    19ae:	10 92 27 01 	sts	0x0127, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    19b2:	89 e0       	ldi	r24, 0x09	; 9
    19b4:	80 93 28 01 	sts	0x0128, r24
    19b8:	2c 2f       	mov	r18, r28
    19ba:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    19bc:	30 93 2a 01 	sts	0x012A, r19
    19c0:	20 93 29 01 	sts	0x0129, r18
    19c4:	10 92 2c 01 	sts	0x012C, r1
    19c8:	10 92 2b 01 	sts	0x012B, r1
    19cc:	10 92 2e 01 	sts	0x012E, r1
    19d0:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    19d4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	eb de       	rcall	.-554    	; 0x17b4 <USB_Host_SendControlRequest>
    19de:	81 11       	cpse	r24, r1
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <USB_Host_SetDeviceConfiguration+0x4a>
    19e2:	c0 93 25 01 	sts	0x0125, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    19e6:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    19e8:	11 f0       	breq	.+4      	; 0x19ee <USB_Host_SetDeviceConfiguration+0x44>
    19ea:	9b e0       	ldi	r25, 0x0B	; 11
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <USB_Host_SetDeviceConfiguration+0x46>
    19ee:	9a e0       	ldi	r25, 0x0A	; 10
    19f0:	90 93 2f 01 	sts	0x012F, r25
    19f4:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    19f6:	08 95       	ret

000019f8 <USB_USBTask>:
    19f8:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    19fa:	c0 91 a7 00 	lds	r28, 0x00A7
    19fe:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1a00:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a04:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1a08:	8f da       	rcall	.-2786   	; 0xf28 <USB_Host_ProcessNextHostState>
    1a0a:	c0 93 a7 00 	sts	0x00A7, r28
    1a0e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1a10:	08 95       	ret

00001a12 <Serial_putchar>:
    1a12:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1a16:	95 ff       	sbrs	r25, 5
    1a18:	fc cf       	rjmp	.-8      	; 0x1a12 <Serial_putchar>
				UDR1 = DataByte;
    1a1a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	08 95       	ret

00001a24 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a24:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a28:	87 ff       	sbrs	r24, 7
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <Serial_getchar+0x18>
    1a2c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1a30:	87 ff       	sbrs	r24, 7
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1a34:	80 91 ce 00 	lds	r24, 0x00CE
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	08 95       	ret
	  return _FDEV_EOF;
    1a3c:	8e ef       	ldi	r24, 0xFE	; 254
    1a3e:	9f ef       	ldi	r25, 0xFF	; 255
    1a40:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1a46:	08 95       	ret

00001a48 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1a48:	fc 01       	movw	r30, r24
	if (!(Stream))
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	59 f4       	brne	.+22     	; 0x1a64 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1a4e:	80 e3       	ldi	r24, 0x30	; 48
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	90 93 3f 01 	sts	0x013F, r25
    1a56:	80 93 3e 01 	sts	0x013E, r24
		stdout = Stream;
    1a5a:	90 93 41 01 	sts	0x0141, r25
    1a5e:	80 93 40 01 	sts	0x0140, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1a62:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1a64:	8e e0       	ldi	r24, 0x0E	; 14
    1a66:	df 01       	movw	r26, r30
    1a68:	1d 92       	st	X+, r1
    1a6a:	8a 95       	dec	r24
    1a6c:	e9 f7       	brne	.-6      	; 0x1a68 <Serial_CreateStream+0x20>
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	83 83       	std	Z+3, r24	; 0x03
    1a72:	89 e0       	ldi	r24, 0x09	; 9
    1a74:	9d e0       	ldi	r25, 0x0D	; 13
    1a76:	91 87       	std	Z+9, r25	; 0x09
    1a78:	80 87       	std	Z+8, r24	; 0x08
    1a7a:	82 e1       	ldi	r24, 0x12	; 18
    1a7c:	9d e0       	ldi	r25, 0x0D	; 13
    1a7e:	93 87       	std	Z+11, r25	; 0x0b
    1a80:	82 87       	std	Z+10, r24	; 0x0a
    1a82:	08 95       	ret

00001a84 <memcpy>:
    1a84:	fb 01       	movw	r30, r22
    1a86:	dc 01       	movw	r26, r24
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <memcpy+0xa>
    1a8a:	01 90       	ld	r0, Z+
    1a8c:	0d 92       	st	X+, r0
    1a8e:	41 50       	subi	r20, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	d8 f7       	brcc	.-10     	; 0x1a8a <memcpy+0x6>
    1a94:	08 95       	ret

00001a96 <printf>:
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	35 96       	adiw	r30, 0x05	; 5
    1aa2:	61 91       	ld	r22, Z+
    1aa4:	71 91       	ld	r23, Z+
    1aa6:	af 01       	movw	r20, r30
    1aa8:	80 91 40 01 	lds	r24, 0x0140
    1aac:	90 91 41 01 	lds	r25, 0x0141
    1ab0:	82 d0       	rcall	.+260    	; 0x1bb6 <vfprintf>
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <printf_P>:
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	37 96       	adiw	r30, 0x07	; 7
    1ac8:	61 91       	ld	r22, Z+
    1aca:	71 91       	ld	r23, Z+
    1acc:	00 e4       	ldi	r16, 0x40	; 64
    1ace:	11 e0       	ldi	r17, 0x01	; 1
    1ad0:	d8 01       	movw	r26, r16
    1ad2:	8d 91       	ld	r24, X+
    1ad4:	9c 91       	ld	r25, X
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	13 96       	adiw	r26, 0x03	; 3
    1ada:	2c 91       	ld	r18, X
    1adc:	13 97       	sbiw	r26, 0x03	; 3
    1ade:	28 60       	ori	r18, 0x08	; 8
    1ae0:	13 96       	adiw	r26, 0x03	; 3
    1ae2:	2c 93       	st	X, r18
    1ae4:	af 01       	movw	r20, r30
    1ae6:	67 d0       	rcall	.+206    	; 0x1bb6 <vfprintf>
    1ae8:	d8 01       	movw	r26, r16
    1aea:	ed 91       	ld	r30, X+
    1aec:	fc 91       	ld	r31, X
    1aee:	23 81       	ldd	r18, Z+3	; 0x03
    1af0:	27 7f       	andi	r18, 0xF7	; 247
    1af2:	23 83       	std	Z+3, r18	; 0x03
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <puts>:
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	e0 91 40 01 	lds	r30, 0x0140
    1b0a:	f0 91 41 01 	lds	r31, 0x0141
    1b0e:	23 81       	ldd	r18, Z+3	; 0x03
    1b10:	21 ff       	sbrs	r18, 1
    1b12:	1b c0       	rjmp	.+54     	; 0x1b4a <puts+0x4c>
    1b14:	ec 01       	movw	r28, r24
    1b16:	00 e0       	ldi	r16, 0x00	; 0
    1b18:	10 e0       	ldi	r17, 0x00	; 0
    1b1a:	89 91       	ld	r24, Y+
    1b1c:	60 91 40 01 	lds	r22, 0x0140
    1b20:	70 91 41 01 	lds	r23, 0x0141
    1b24:	db 01       	movw	r26, r22
    1b26:	18 96       	adiw	r26, 0x08	; 8
    1b28:	ed 91       	ld	r30, X+
    1b2a:	fc 91       	ld	r31, X
    1b2c:	19 97       	sbiw	r26, 0x09	; 9
    1b2e:	88 23       	and	r24, r24
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <puts+0x40>
    1b32:	09 95       	icall
    1b34:	89 2b       	or	r24, r25
    1b36:	89 f3       	breq	.-30     	; 0x1b1a <puts+0x1c>
    1b38:	0f ef       	ldi	r16, 0xFF	; 255
    1b3a:	1f ef       	ldi	r17, 0xFF	; 255
    1b3c:	ee cf       	rjmp	.-36     	; 0x1b1a <puts+0x1c>
    1b3e:	8a e0       	ldi	r24, 0x0A	; 10
    1b40:	09 95       	icall
    1b42:	89 2b       	or	r24, r25
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <puts+0x4c>
    1b46:	c8 01       	movw	r24, r16
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <puts+0x50>
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <puts_P>:
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	ec 01       	movw	r28, r24
    1b62:	e0 91 40 01 	lds	r30, 0x0140
    1b66:	f0 91 41 01 	lds	r31, 0x0141
    1b6a:	83 81       	ldd	r24, Z+3	; 0x03
    1b6c:	81 ff       	sbrs	r24, 1
    1b6e:	1c c0       	rjmp	.+56     	; 0x1ba8 <puts_P+0x50>
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	fe 01       	movw	r30, r28
    1b76:	84 91       	lpm	r24, Z
    1b78:	60 91 40 01 	lds	r22, 0x0140
    1b7c:	70 91 41 01 	lds	r23, 0x0141
    1b80:	db 01       	movw	r26, r22
    1b82:	18 96       	adiw	r26, 0x08	; 8
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	19 97       	sbiw	r26, 0x09	; 9
    1b8a:	88 23       	and	r24, r24
    1b8c:	39 f0       	breq	.+14     	; 0x1b9c <puts_P+0x44>
    1b8e:	09 95       	icall
    1b90:	89 2b       	or	r24, r25
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <puts_P+0x40>
    1b94:	0f ef       	ldi	r16, 0xFF	; 255
    1b96:	1f ef       	ldi	r17, 0xFF	; 255
    1b98:	21 96       	adiw	r28, 0x01	; 1
    1b9a:	ec cf       	rjmp	.-40     	; 0x1b74 <puts_P+0x1c>
    1b9c:	8a e0       	ldi	r24, 0x0A	; 10
    1b9e:	09 95       	icall
    1ba0:	89 2b       	or	r24, r25
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <puts_P+0x50>
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <puts_P+0x54>
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <vfprintf>:
    1bb6:	2f 92       	push	r2
    1bb8:	3f 92       	push	r3
    1bba:	4f 92       	push	r4
    1bbc:	5f 92       	push	r5
    1bbe:	6f 92       	push	r6
    1bc0:	7f 92       	push	r7
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	2c 97       	sbiw	r28, 0x0c	; 12
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	7c 01       	movw	r14, r24
    1bec:	6b 01       	movw	r12, r22
    1bee:	8a 01       	movw	r16, r20
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	17 82       	std	Z+7, r1	; 0x07
    1bf4:	16 82       	std	Z+6, r1	; 0x06
    1bf6:	83 81       	ldd	r24, Z+3	; 0x03
    1bf8:	81 ff       	sbrs	r24, 1
    1bfa:	b0 c1       	rjmp	.+864    	; 0x1f5c <vfprintf+0x3a6>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	4c 01       	movw	r8, r24
    1c02:	f7 01       	movw	r30, r14
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	f6 01       	movw	r30, r12
    1c08:	93 fd       	sbrc	r25, 3
    1c0a:	85 91       	lpm	r24, Z+
    1c0c:	93 ff       	sbrs	r25, 3
    1c0e:	81 91       	ld	r24, Z+
    1c10:	6f 01       	movw	r12, r30
    1c12:	88 23       	and	r24, r24
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <vfprintf+0x62>
    1c16:	9e c1       	rjmp	.+828    	; 0x1f54 <vfprintf+0x39e>
    1c18:	85 32       	cpi	r24, 0x25	; 37
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <vfprintf+0x74>
    1c1c:	93 fd       	sbrc	r25, 3
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	93 ff       	sbrs	r25, 3
    1c22:	81 91       	ld	r24, Z+
    1c24:	6f 01       	movw	r12, r30
    1c26:	85 32       	cpi	r24, 0x25	; 37
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <vfprintf+0x7c>
    1c2a:	b7 01       	movw	r22, r14
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	c7 d1       	rcall	.+910    	; 0x1fbe <fputc>
    1c30:	e8 cf       	rjmp	.-48     	; 0x1c02 <vfprintf+0x4c>
    1c32:	51 2c       	mov	r5, r1
    1c34:	31 2c       	mov	r3, r1
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	20 32       	cpi	r18, 0x20	; 32
    1c3a:	a0 f4       	brcc	.+40     	; 0x1c64 <vfprintf+0xae>
    1c3c:	8b 32       	cpi	r24, 0x2B	; 43
    1c3e:	69 f0       	breq	.+26     	; 0x1c5a <vfprintf+0xa4>
    1c40:	30 f4       	brcc	.+12     	; 0x1c4e <vfprintf+0x98>
    1c42:	80 32       	cpi	r24, 0x20	; 32
    1c44:	59 f0       	breq	.+22     	; 0x1c5c <vfprintf+0xa6>
    1c46:	83 32       	cpi	r24, 0x23	; 35
    1c48:	69 f4       	brne	.+26     	; 0x1c64 <vfprintf+0xae>
    1c4a:	20 61       	ori	r18, 0x10	; 16
    1c4c:	2c c0       	rjmp	.+88     	; 0x1ca6 <vfprintf+0xf0>
    1c4e:	8d 32       	cpi	r24, 0x2D	; 45
    1c50:	39 f0       	breq	.+14     	; 0x1c60 <vfprintf+0xaa>
    1c52:	80 33       	cpi	r24, 0x30	; 48
    1c54:	39 f4       	brne	.+14     	; 0x1c64 <vfprintf+0xae>
    1c56:	21 60       	ori	r18, 0x01	; 1
    1c58:	26 c0       	rjmp	.+76     	; 0x1ca6 <vfprintf+0xf0>
    1c5a:	22 60       	ori	r18, 0x02	; 2
    1c5c:	24 60       	ori	r18, 0x04	; 4
    1c5e:	23 c0       	rjmp	.+70     	; 0x1ca6 <vfprintf+0xf0>
    1c60:	28 60       	ori	r18, 0x08	; 8
    1c62:	21 c0       	rjmp	.+66     	; 0x1ca6 <vfprintf+0xf0>
    1c64:	27 fd       	sbrc	r18, 7
    1c66:	27 c0       	rjmp	.+78     	; 0x1cb6 <vfprintf+0x100>
    1c68:	30 ed       	ldi	r19, 0xD0	; 208
    1c6a:	38 0f       	add	r19, r24
    1c6c:	3a 30       	cpi	r19, 0x0A	; 10
    1c6e:	78 f4       	brcc	.+30     	; 0x1c8e <vfprintf+0xd8>
    1c70:	26 ff       	sbrs	r18, 6
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0xca>
    1c74:	fa e0       	ldi	r31, 0x0A	; 10
    1c76:	5f 9e       	mul	r5, r31
    1c78:	30 0d       	add	r19, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	53 2e       	mov	r5, r19
    1c7e:	13 c0       	rjmp	.+38     	; 0x1ca6 <vfprintf+0xf0>
    1c80:	8a e0       	ldi	r24, 0x0A	; 10
    1c82:	38 9e       	mul	r3, r24
    1c84:	30 0d       	add	r19, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	33 2e       	mov	r3, r19
    1c8a:	20 62       	ori	r18, 0x20	; 32
    1c8c:	0c c0       	rjmp	.+24     	; 0x1ca6 <vfprintf+0xf0>
    1c8e:	8e 32       	cpi	r24, 0x2E	; 46
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <vfprintf+0xe4>
    1c92:	26 fd       	sbrc	r18, 6
    1c94:	5f c1       	rjmp	.+702    	; 0x1f54 <vfprintf+0x39e>
    1c96:	20 64       	ori	r18, 0x40	; 64
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0xf0>
    1c9a:	8c 36       	cpi	r24, 0x6C	; 108
    1c9c:	11 f4       	brne	.+4      	; 0x1ca2 <vfprintf+0xec>
    1c9e:	20 68       	ori	r18, 0x80	; 128
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0xf0>
    1ca2:	88 36       	cpi	r24, 0x68	; 104
    1ca4:	41 f4       	brne	.+16     	; 0x1cb6 <vfprintf+0x100>
    1ca6:	f6 01       	movw	r30, r12
    1ca8:	93 fd       	sbrc	r25, 3
    1caa:	85 91       	lpm	r24, Z+
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	81 91       	ld	r24, Z+
    1cb0:	6f 01       	movw	r12, r30
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	c1 cf       	rjmp	.-126    	; 0x1c38 <vfprintf+0x82>
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	9f 7d       	andi	r25, 0xDF	; 223
    1cba:	95 54       	subi	r25, 0x45	; 69
    1cbc:	93 30       	cpi	r25, 0x03	; 3
    1cbe:	28 f4       	brcc	.+10     	; 0x1cca <vfprintf+0x114>
    1cc0:	0c 5f       	subi	r16, 0xFC	; 252
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	ff e3       	ldi	r31, 0x3F	; 63
    1cc6:	f9 83       	std	Y+1, r31	; 0x01
    1cc8:	0d c0       	rjmp	.+26     	; 0x1ce4 <vfprintf+0x12e>
    1cca:	83 36       	cpi	r24, 0x63	; 99
    1ccc:	31 f0       	breq	.+12     	; 0x1cda <vfprintf+0x124>
    1cce:	83 37       	cpi	r24, 0x73	; 115
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <vfprintf+0x138>
    1cd2:	83 35       	cpi	r24, 0x53	; 83
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <vfprintf+0x122>
    1cd6:	57 c0       	rjmp	.+174    	; 0x1d86 <vfprintf+0x1d0>
    1cd8:	21 c0       	rjmp	.+66     	; 0x1d1c <vfprintf+0x166>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 81       	ld	r24, Z
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	0e 5f       	subi	r16, 0xFE	; 254
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	44 24       	eor	r4, r4
    1ce6:	43 94       	inc	r4
    1ce8:	51 2c       	mov	r5, r1
    1cea:	54 01       	movw	r10, r8
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <vfprintf+0x160>
    1cee:	38 01       	movw	r6, r16
    1cf0:	f2 e0       	ldi	r31, 0x02	; 2
    1cf2:	6f 0e       	add	r6, r31
    1cf4:	71 1c       	adc	r7, r1
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	a0 80       	ld	r10, Z
    1cfa:	b1 80       	ldd	r11, Z+1	; 0x01
    1cfc:	26 ff       	sbrs	r18, 6
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <vfprintf+0x150>
    1d00:	65 2d       	mov	r22, r5
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <vfprintf+0x154>
    1d06:	6f ef       	ldi	r22, 0xFF	; 255
    1d08:	7f ef       	ldi	r23, 0xFF	; 255
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	2c 87       	std	Y+12, r18	; 0x0c
    1d0e:	4c d1       	rcall	.+664    	; 0x1fa8 <strnlen>
    1d10:	2c 01       	movw	r4, r24
    1d12:	83 01       	movw	r16, r6
    1d14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d16:	2f 77       	andi	r18, 0x7F	; 127
    1d18:	22 2e       	mov	r2, r18
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <vfprintf+0x192>
    1d1c:	38 01       	movw	r6, r16
    1d1e:	f2 e0       	ldi	r31, 0x02	; 2
    1d20:	6f 0e       	add	r6, r31
    1d22:	71 1c       	adc	r7, r1
    1d24:	f8 01       	movw	r30, r16
    1d26:	a0 80       	ld	r10, Z
    1d28:	b1 80       	ldd	r11, Z+1	; 0x01
    1d2a:	26 ff       	sbrs	r18, 6
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <vfprintf+0x17e>
    1d2e:	65 2d       	mov	r22, r5
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <vfprintf+0x182>
    1d34:	6f ef       	ldi	r22, 0xFF	; 255
    1d36:	7f ef       	ldi	r23, 0xFF	; 255
    1d38:	c5 01       	movw	r24, r10
    1d3a:	2c 87       	std	Y+12, r18	; 0x0c
    1d3c:	2a d1       	rcall	.+596    	; 0x1f92 <strnlen_P>
    1d3e:	2c 01       	movw	r4, r24
    1d40:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d42:	20 68       	ori	r18, 0x80	; 128
    1d44:	22 2e       	mov	r2, r18
    1d46:	83 01       	movw	r16, r6
    1d48:	23 fc       	sbrc	r2, 3
    1d4a:	19 c0       	rjmp	.+50     	; 0x1d7e <vfprintf+0x1c8>
    1d4c:	83 2d       	mov	r24, r3
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	48 16       	cp	r4, r24
    1d52:	59 06       	cpc	r5, r25
    1d54:	a0 f4       	brcc	.+40     	; 0x1d7e <vfprintf+0x1c8>
    1d56:	b7 01       	movw	r22, r14
    1d58:	80 e2       	ldi	r24, 0x20	; 32
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	30 d1       	rcall	.+608    	; 0x1fbe <fputc>
    1d5e:	3a 94       	dec	r3
    1d60:	f5 cf       	rjmp	.-22     	; 0x1d4c <vfprintf+0x196>
    1d62:	f5 01       	movw	r30, r10
    1d64:	27 fc       	sbrc	r2, 7
    1d66:	85 91       	lpm	r24, Z+
    1d68:	27 fe       	sbrs	r2, 7
    1d6a:	81 91       	ld	r24, Z+
    1d6c:	5f 01       	movw	r10, r30
    1d6e:	b7 01       	movw	r22, r14
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	25 d1       	rcall	.+586    	; 0x1fbe <fputc>
    1d74:	31 10       	cpse	r3, r1
    1d76:	3a 94       	dec	r3
    1d78:	f1 e0       	ldi	r31, 0x01	; 1
    1d7a:	4f 1a       	sub	r4, r31
    1d7c:	51 08       	sbc	r5, r1
    1d7e:	41 14       	cp	r4, r1
    1d80:	51 04       	cpc	r5, r1
    1d82:	79 f7       	brne	.-34     	; 0x1d62 <vfprintf+0x1ac>
    1d84:	de c0       	rjmp	.+444    	; 0x1f42 <vfprintf+0x38c>
    1d86:	84 36       	cpi	r24, 0x64	; 100
    1d88:	11 f0       	breq	.+4      	; 0x1d8e <vfprintf+0x1d8>
    1d8a:	89 36       	cpi	r24, 0x69	; 105
    1d8c:	31 f5       	brne	.+76     	; 0x1dda <vfprintf+0x224>
    1d8e:	f8 01       	movw	r30, r16
    1d90:	27 ff       	sbrs	r18, 7
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <vfprintf+0x1ec>
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	0c 5f       	subi	r16, 0xFC	; 252
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	08 c0       	rjmp	.+16     	; 0x1db2 <vfprintf+0x1fc>
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	88 27       	eor	r24, r24
    1da8:	77 fd       	sbrc	r23, 7
    1daa:	80 95       	com	r24
    1dac:	98 2f       	mov	r25, r24
    1dae:	0e 5f       	subi	r16, 0xFE	; 254
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	2f 76       	andi	r18, 0x6F	; 111
    1db4:	b2 2e       	mov	r11, r18
    1db6:	97 ff       	sbrs	r25, 7
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <vfprintf+0x216>
    1dba:	90 95       	com	r25
    1dbc:	80 95       	com	r24
    1dbe:	70 95       	com	r23
    1dc0:	61 95       	neg	r22
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	20 68       	ori	r18, 0x80	; 128
    1dca:	b2 2e       	mov	r11, r18
    1dcc:	2a e0       	ldi	r18, 0x0A	; 10
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	a4 01       	movw	r20, r8
    1dd2:	27 d1       	rcall	.+590    	; 0x2022 <__ultoa_invert>
    1dd4:	a8 2e       	mov	r10, r24
    1dd6:	a8 18       	sub	r10, r8
    1dd8:	43 c0       	rjmp	.+134    	; 0x1e60 <vfprintf+0x2aa>
    1dda:	85 37       	cpi	r24, 0x75	; 117
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <vfprintf+0x232>
    1dde:	2f 7e       	andi	r18, 0xEF	; 239
    1de0:	b2 2e       	mov	r11, r18
    1de2:	2a e0       	ldi	r18, 0x0A	; 10
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	25 c0       	rjmp	.+74     	; 0x1e32 <vfprintf+0x27c>
    1de8:	f2 2f       	mov	r31, r18
    1dea:	f9 7f       	andi	r31, 0xF9	; 249
    1dec:	bf 2e       	mov	r11, r31
    1dee:	8f 36       	cpi	r24, 0x6F	; 111
    1df0:	c1 f0       	breq	.+48     	; 0x1e22 <vfprintf+0x26c>
    1df2:	18 f4       	brcc	.+6      	; 0x1dfa <vfprintf+0x244>
    1df4:	88 35       	cpi	r24, 0x58	; 88
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <vfprintf+0x260>
    1df8:	ad c0       	rjmp	.+346    	; 0x1f54 <vfprintf+0x39e>
    1dfa:	80 37       	cpi	r24, 0x70	; 112
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <vfprintf+0x24e>
    1dfe:	88 37       	cpi	r24, 0x78	; 120
    1e00:	21 f0       	breq	.+8      	; 0x1e0a <vfprintf+0x254>
    1e02:	a8 c0       	rjmp	.+336    	; 0x1f54 <vfprintf+0x39e>
    1e04:	2f 2f       	mov	r18, r31
    1e06:	20 61       	ori	r18, 0x10	; 16
    1e08:	b2 2e       	mov	r11, r18
    1e0a:	b4 fe       	sbrs	r11, 4
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <vfprintf+0x272>
    1e0e:	8b 2d       	mov	r24, r11
    1e10:	84 60       	ori	r24, 0x04	; 4
    1e12:	b8 2e       	mov	r11, r24
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <vfprintf+0x272>
    1e16:	24 ff       	sbrs	r18, 4
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <vfprintf+0x278>
    1e1a:	9f 2f       	mov	r25, r31
    1e1c:	96 60       	ori	r25, 0x06	; 6
    1e1e:	b9 2e       	mov	r11, r25
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x278>
    1e22:	28 e0       	ldi	r18, 0x08	; 8
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <vfprintf+0x27c>
    1e28:	20 e1       	ldi	r18, 0x10	; 16
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x27c>
    1e2e:	20 e1       	ldi	r18, 0x10	; 16
    1e30:	32 e0       	ldi	r19, 0x02	; 2
    1e32:	f8 01       	movw	r30, r16
    1e34:	b7 fe       	sbrs	r11, 7
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <vfprintf+0x290>
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0c 5f       	subi	r16, 0xFC	; 252
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <vfprintf+0x29c>
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 5f       	subi	r16, 0xFE	; 254
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	a4 01       	movw	r20, r8
    1e54:	e6 d0       	rcall	.+460    	; 0x2022 <__ultoa_invert>
    1e56:	a8 2e       	mov	r10, r24
    1e58:	a8 18       	sub	r10, r8
    1e5a:	fb 2d       	mov	r31, r11
    1e5c:	ff 77       	andi	r31, 0x7F	; 127
    1e5e:	bf 2e       	mov	r11, r31
    1e60:	b6 fe       	sbrs	r11, 6
    1e62:	0b c0       	rjmp	.+22     	; 0x1e7a <vfprintf+0x2c4>
    1e64:	2b 2d       	mov	r18, r11
    1e66:	2e 7f       	andi	r18, 0xFE	; 254
    1e68:	a5 14       	cp	r10, r5
    1e6a:	50 f4       	brcc	.+20     	; 0x1e80 <vfprintf+0x2ca>
    1e6c:	b4 fe       	sbrs	r11, 4
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <vfprintf+0x2ce>
    1e70:	b2 fc       	sbrc	r11, 2
    1e72:	08 c0       	rjmp	.+16     	; 0x1e84 <vfprintf+0x2ce>
    1e74:	2b 2d       	mov	r18, r11
    1e76:	2e 7e       	andi	r18, 0xEE	; 238
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <vfprintf+0x2ce>
    1e7a:	7a 2c       	mov	r7, r10
    1e7c:	2b 2d       	mov	r18, r11
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <vfprintf+0x2d0>
    1e80:	7a 2c       	mov	r7, r10
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <vfprintf+0x2d0>
    1e84:	75 2c       	mov	r7, r5
    1e86:	24 ff       	sbrs	r18, 4
    1e88:	0d c0       	rjmp	.+26     	; 0x1ea4 <vfprintf+0x2ee>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ea 0d       	add	r30, r10
    1e8e:	f1 1d       	adc	r31, r1
    1e90:	80 81       	ld	r24, Z
    1e92:	80 33       	cpi	r24, 0x30	; 48
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <vfprintf+0x2e4>
    1e96:	29 7e       	andi	r18, 0xE9	; 233
    1e98:	09 c0       	rjmp	.+18     	; 0x1eac <vfprintf+0x2f6>
    1e9a:	22 ff       	sbrs	r18, 2
    1e9c:	06 c0       	rjmp	.+12     	; 0x1eaa <vfprintf+0x2f4>
    1e9e:	73 94       	inc	r7
    1ea0:	73 94       	inc	r7
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <vfprintf+0x2f6>
    1ea4:	82 2f       	mov	r24, r18
    1ea6:	86 78       	andi	r24, 0x86	; 134
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <vfprintf+0x2f6>
    1eaa:	73 94       	inc	r7
    1eac:	23 fd       	sbrc	r18, 3
    1eae:	12 c0       	rjmp	.+36     	; 0x1ed4 <vfprintf+0x31e>
    1eb0:	20 ff       	sbrs	r18, 0
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <vfprintf+0x30a>
    1eb4:	5a 2c       	mov	r5, r10
    1eb6:	73 14       	cp	r7, r3
    1eb8:	18 f4       	brcc	.+6      	; 0x1ec0 <vfprintf+0x30a>
    1eba:	53 0c       	add	r5, r3
    1ebc:	57 18       	sub	r5, r7
    1ebe:	73 2c       	mov	r7, r3
    1ec0:	73 14       	cp	r7, r3
    1ec2:	60 f4       	brcc	.+24     	; 0x1edc <vfprintf+0x326>
    1ec4:	b7 01       	movw	r22, r14
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	2c 87       	std	Y+12, r18	; 0x0c
    1ecc:	78 d0       	rcall	.+240    	; 0x1fbe <fputc>
    1ece:	73 94       	inc	r7
    1ed0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed2:	f6 cf       	rjmp	.-20     	; 0x1ec0 <vfprintf+0x30a>
    1ed4:	73 14       	cp	r7, r3
    1ed6:	10 f4       	brcc	.+4      	; 0x1edc <vfprintf+0x326>
    1ed8:	37 18       	sub	r3, r7
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <vfprintf+0x328>
    1edc:	31 2c       	mov	r3, r1
    1ede:	24 ff       	sbrs	r18, 4
    1ee0:	11 c0       	rjmp	.+34     	; 0x1f04 <vfprintf+0x34e>
    1ee2:	b7 01       	movw	r22, r14
    1ee4:	80 e3       	ldi	r24, 0x30	; 48
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	2c 87       	std	Y+12, r18	; 0x0c
    1eea:	69 d0       	rcall	.+210    	; 0x1fbe <fputc>
    1eec:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eee:	22 ff       	sbrs	r18, 2
    1ef0:	16 c0       	rjmp	.+44     	; 0x1f1e <vfprintf+0x368>
    1ef2:	21 ff       	sbrs	r18, 1
    1ef4:	03 c0       	rjmp	.+6      	; 0x1efc <vfprintf+0x346>
    1ef6:	88 e5       	ldi	r24, 0x58	; 88
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <vfprintf+0x34a>
    1efc:	88 e7       	ldi	r24, 0x78	; 120
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	b7 01       	movw	r22, r14
    1f02:	0c c0       	rjmp	.+24     	; 0x1f1c <vfprintf+0x366>
    1f04:	82 2f       	mov	r24, r18
    1f06:	86 78       	andi	r24, 0x86	; 134
    1f08:	51 f0       	breq	.+20     	; 0x1f1e <vfprintf+0x368>
    1f0a:	21 fd       	sbrc	r18, 1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x35c>
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <vfprintf+0x35e>
    1f12:	8b e2       	ldi	r24, 0x2B	; 43
    1f14:	27 fd       	sbrc	r18, 7
    1f16:	8d e2       	ldi	r24, 0x2D	; 45
    1f18:	b7 01       	movw	r22, r14
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	50 d0       	rcall	.+160    	; 0x1fbe <fputc>
    1f1e:	a5 14       	cp	r10, r5
    1f20:	30 f4       	brcc	.+12     	; 0x1f2e <vfprintf+0x378>
    1f22:	b7 01       	movw	r22, r14
    1f24:	80 e3       	ldi	r24, 0x30	; 48
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	4a d0       	rcall	.+148    	; 0x1fbe <fputc>
    1f2a:	5a 94       	dec	r5
    1f2c:	f8 cf       	rjmp	.-16     	; 0x1f1e <vfprintf+0x368>
    1f2e:	aa 94       	dec	r10
    1f30:	f4 01       	movw	r30, r8
    1f32:	ea 0d       	add	r30, r10
    1f34:	f1 1d       	adc	r31, r1
    1f36:	80 81       	ld	r24, Z
    1f38:	b7 01       	movw	r22, r14
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	40 d0       	rcall	.+128    	; 0x1fbe <fputc>
    1f3e:	a1 10       	cpse	r10, r1
    1f40:	f6 cf       	rjmp	.-20     	; 0x1f2e <vfprintf+0x378>
    1f42:	33 20       	and	r3, r3
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <vfprintf+0x392>
    1f46:	5d ce       	rjmp	.-838    	; 0x1c02 <vfprintf+0x4c>
    1f48:	b7 01       	movw	r22, r14
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	37 d0       	rcall	.+110    	; 0x1fbe <fputc>
    1f50:	3a 94       	dec	r3
    1f52:	f7 cf       	rjmp	.-18     	; 0x1f42 <vfprintf+0x38c>
    1f54:	f7 01       	movw	r30, r14
    1f56:	86 81       	ldd	r24, Z+6	; 0x06
    1f58:	97 81       	ldd	r25, Z+7	; 0x07
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <vfprintf+0x3aa>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	2c 96       	adiw	r28, 0x0c	; 12
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	df 90       	pop	r13
    1f7a:	cf 90       	pop	r12
    1f7c:	bf 90       	pop	r11
    1f7e:	af 90       	pop	r10
    1f80:	9f 90       	pop	r9
    1f82:	8f 90       	pop	r8
    1f84:	7f 90       	pop	r7
    1f86:	6f 90       	pop	r6
    1f88:	5f 90       	pop	r5
    1f8a:	4f 90       	pop	r4
    1f8c:	3f 90       	pop	r3
    1f8e:	2f 90       	pop	r2
    1f90:	08 95       	ret

00001f92 <strnlen_P>:
    1f92:	fc 01       	movw	r30, r24
    1f94:	05 90       	lpm	r0, Z+
    1f96:	61 50       	subi	r22, 0x01	; 1
    1f98:	70 40       	sbci	r23, 0x00	; 0
    1f9a:	01 10       	cpse	r0, r1
    1f9c:	d8 f7       	brcc	.-10     	; 0x1f94 <strnlen_P+0x2>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	8e 0f       	add	r24, r30
    1fa4:	9f 1f       	adc	r25, r31
    1fa6:	08 95       	ret

00001fa8 <strnlen>:
    1fa8:	fc 01       	movw	r30, r24
    1faa:	61 50       	subi	r22, 0x01	; 1
    1fac:	70 40       	sbci	r23, 0x00	; 0
    1fae:	01 90       	ld	r0, Z+
    1fb0:	01 10       	cpse	r0, r1
    1fb2:	d8 f7       	brcc	.-10     	; 0x1faa <strnlen+0x2>
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	8e 0f       	add	r24, r30
    1fba:	9f 1f       	adc	r25, r31
    1fbc:	08 95       	ret

00001fbe <fputc>:
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	18 2f       	mov	r17, r24
    1fc8:	09 2f       	mov	r16, r25
    1fca:	eb 01       	movw	r28, r22
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	81 fd       	sbrc	r24, 1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <fputc+0x1a>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	9f ef       	ldi	r25, 0xFF	; 255
    1fd6:	20 c0       	rjmp	.+64     	; 0x2018 <fputc+0x5a>
    1fd8:	82 ff       	sbrs	r24, 2
    1fda:	10 c0       	rjmp	.+32     	; 0x1ffc <fputc+0x3e>
    1fdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fde:	5f 81       	ldd	r21, Y+7	; 0x07
    1fe0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe4:	42 17       	cp	r20, r18
    1fe6:	53 07       	cpc	r21, r19
    1fe8:	7c f4       	brge	.+30     	; 0x2008 <fputc+0x4a>
    1fea:	e8 81       	ld	r30, Y
    1fec:	f9 81       	ldd	r31, Y+1	; 0x01
    1fee:	9f 01       	movw	r18, r30
    1ff0:	2f 5f       	subi	r18, 0xFF	; 255
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	39 83       	std	Y+1, r19	; 0x01
    1ff6:	28 83       	st	Y, r18
    1ff8:	10 83       	st	Z, r17
    1ffa:	06 c0       	rjmp	.+12     	; 0x2008 <fputc+0x4a>
    1ffc:	e8 85       	ldd	r30, Y+8	; 0x08
    1ffe:	f9 85       	ldd	r31, Y+9	; 0x09
    2000:	81 2f       	mov	r24, r17
    2002:	09 95       	icall
    2004:	89 2b       	or	r24, r25
    2006:	29 f7       	brne	.-54     	; 0x1fd2 <fputc+0x14>
    2008:	2e 81       	ldd	r18, Y+6	; 0x06
    200a:	3f 81       	ldd	r19, Y+7	; 0x07
    200c:	2f 5f       	subi	r18, 0xFF	; 255
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	3f 83       	std	Y+7, r19	; 0x07
    2012:	2e 83       	std	Y+6, r18	; 0x06
    2014:	81 2f       	mov	r24, r17
    2016:	90 2f       	mov	r25, r16
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	08 95       	ret

00002022 <__ultoa_invert>:
    2022:	fa 01       	movw	r30, r20
    2024:	aa 27       	eor	r26, r26
    2026:	28 30       	cpi	r18, 0x08	; 8
    2028:	51 f1       	breq	.+84     	; 0x207e <__ultoa_invert+0x5c>
    202a:	20 31       	cpi	r18, 0x10	; 16
    202c:	81 f1       	breq	.+96     	; 0x208e <__ultoa_invert+0x6c>
    202e:	e8 94       	clt
    2030:	6f 93       	push	r22
    2032:	6e 7f       	andi	r22, 0xFE	; 254
    2034:	6e 5f       	subi	r22, 0xFE	; 254
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	8f 4f       	sbci	r24, 0xFF	; 255
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	af 4f       	sbci	r26, 0xFF	; 255
    203e:	b1 e0       	ldi	r27, 0x01	; 1
    2040:	3e d0       	rcall	.+124    	; 0x20be <__ultoa_invert+0x9c>
    2042:	b4 e0       	ldi	r27, 0x04	; 4
    2044:	3c d0       	rcall	.+120    	; 0x20be <__ultoa_invert+0x9c>
    2046:	67 0f       	add	r22, r23
    2048:	78 1f       	adc	r23, r24
    204a:	89 1f       	adc	r24, r25
    204c:	9a 1f       	adc	r25, r26
    204e:	a1 1d       	adc	r26, r1
    2050:	68 0f       	add	r22, r24
    2052:	79 1f       	adc	r23, r25
    2054:	8a 1f       	adc	r24, r26
    2056:	91 1d       	adc	r25, r1
    2058:	a1 1d       	adc	r26, r1
    205a:	6a 0f       	add	r22, r26
    205c:	71 1d       	adc	r23, r1
    205e:	81 1d       	adc	r24, r1
    2060:	91 1d       	adc	r25, r1
    2062:	a1 1d       	adc	r26, r1
    2064:	20 d0       	rcall	.+64     	; 0x20a6 <__ultoa_invert+0x84>
    2066:	09 f4       	brne	.+2      	; 0x206a <__ultoa_invert+0x48>
    2068:	68 94       	set
    206a:	3f 91       	pop	r19
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	26 9f       	mul	r18, r22
    2070:	11 24       	eor	r1, r1
    2072:	30 19       	sub	r19, r0
    2074:	30 5d       	subi	r19, 0xD0	; 208
    2076:	31 93       	st	Z+, r19
    2078:	de f6       	brtc	.-74     	; 0x2030 <__ultoa_invert+0xe>
    207a:	cf 01       	movw	r24, r30
    207c:	08 95       	ret
    207e:	46 2f       	mov	r20, r22
    2080:	47 70       	andi	r20, 0x07	; 7
    2082:	40 5d       	subi	r20, 0xD0	; 208
    2084:	41 93       	st	Z+, r20
    2086:	b3 e0       	ldi	r27, 0x03	; 3
    2088:	0f d0       	rcall	.+30     	; 0x20a8 <__ultoa_invert+0x86>
    208a:	c9 f7       	brne	.-14     	; 0x207e <__ultoa_invert+0x5c>
    208c:	f6 cf       	rjmp	.-20     	; 0x207a <__ultoa_invert+0x58>
    208e:	46 2f       	mov	r20, r22
    2090:	4f 70       	andi	r20, 0x0F	; 15
    2092:	40 5d       	subi	r20, 0xD0	; 208
    2094:	4a 33       	cpi	r20, 0x3A	; 58
    2096:	18 f0       	brcs	.+6      	; 0x209e <__ultoa_invert+0x7c>
    2098:	49 5d       	subi	r20, 0xD9	; 217
    209a:	31 fd       	sbrc	r19, 1
    209c:	40 52       	subi	r20, 0x20	; 32
    209e:	41 93       	st	Z+, r20
    20a0:	02 d0       	rcall	.+4      	; 0x20a6 <__ultoa_invert+0x84>
    20a2:	a9 f7       	brne	.-22     	; 0x208e <__ultoa_invert+0x6c>
    20a4:	ea cf       	rjmp	.-44     	; 0x207a <__ultoa_invert+0x58>
    20a6:	b4 e0       	ldi	r27, 0x04	; 4
    20a8:	a6 95       	lsr	r26
    20aa:	97 95       	ror	r25
    20ac:	87 95       	ror	r24
    20ae:	77 95       	ror	r23
    20b0:	67 95       	ror	r22
    20b2:	ba 95       	dec	r27
    20b4:	c9 f7       	brne	.-14     	; 0x20a8 <__ultoa_invert+0x86>
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	61 05       	cpc	r22, r1
    20ba:	71 05       	cpc	r23, r1
    20bc:	08 95       	ret
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	0a 2e       	mov	r0, r26
    20c4:	06 94       	lsr	r0
    20c6:	57 95       	ror	r21
    20c8:	47 95       	ror	r20
    20ca:	37 95       	ror	r19
    20cc:	27 95       	ror	r18
    20ce:	ba 95       	dec	r27
    20d0:	c9 f7       	brne	.-14     	; 0x20c4 <__ultoa_invert+0xa2>
    20d2:	62 0f       	add	r22, r18
    20d4:	73 1f       	adc	r23, r19
    20d6:	84 1f       	adc	r24, r20
    20d8:	95 1f       	adc	r25, r21
    20da:	a0 1d       	adc	r26, r0
    20dc:	08 95       	ret

000020de <_exit>:
    20de:	f8 94       	cli

000020e0 <__stop_program>:
    20e0:	ff cf       	rjmp	.-2      	; 0x20e0 <__stop_program>

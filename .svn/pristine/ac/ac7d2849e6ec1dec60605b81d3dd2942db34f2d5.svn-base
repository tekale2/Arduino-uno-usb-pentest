
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e16  00000eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000eae  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000360  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000055fd  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001637  00000000  00000000  00007223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002568  00000000  00000000  0000885a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000904  00000000  00000000  0000adc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002657  00000000  00000000  0000b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c5f  00000000  00000000  0000dd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  0001197e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	ab c0       	rjmp	.+342    	; 0x158 <__ctors_end>
   2:	00 00       	nop
   4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
   6:	00 00       	nop
   8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
   e:	00 00       	nop
  10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
  12:	00 00       	nop
  14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
  16:	00 00       	nop
  18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ba c0       	rjmp	.+372    	; 0x192 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b8 c0       	rjmp	.+368    	; 0x192 <__bad_interrupt>
  22:	00 00       	nop
  24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>
  26:	00 00       	nop
  28:	af c4       	rjmp	.+2398   	; 0x988 <__vector_10>
  2a:	00 00       	nop
  2c:	b2 c0       	rjmp	.+356    	; 0x192 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b0 c0       	rjmp	.+352    	; 0x192 <__bad_interrupt>
  32:	00 00       	nop
  34:	ae c0       	rjmp	.+348    	; 0x192 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	ac c0       	rjmp	.+344    	; 0x192 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	aa c0       	rjmp	.+340    	; 0x192 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a8 c0       	rjmp	.+336    	; 0x192 <__bad_interrupt>
  42:	00 00       	nop
  44:	a6 c0       	rjmp	.+332    	; 0x192 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	a4 c0       	rjmp	.+328    	; 0x192 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a2 c0       	rjmp	.+324    	; 0x192 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a0 c0       	rjmp	.+320    	; 0x192 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	9e c0       	rjmp	.+316    	; 0x192 <__bad_interrupt>
  56:	00 00       	nop
  58:	9c c0       	rjmp	.+312    	; 0x192 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9a c0       	rjmp	.+308    	; 0x192 <__bad_interrupt>
  5e:	00 00       	nop
  60:	98 c0       	rjmp	.+304    	; 0x192 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	96 c0       	rjmp	.+300    	; 0x192 <__bad_interrupt>
  66:	00 00       	nop
  68:	94 c0       	rjmp	.+296    	; 0x192 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	92 c0       	rjmp	.+292    	; 0x192 <__bad_interrupt>
  6e:	00 00       	nop
  70:	90 c0       	rjmp	.+288    	; 0x192 <__bad_interrupt>
  72:	00 00       	nop
  74:	8e c0       	rjmp	.+284    	; 0x192 <__bad_interrupt>
  76:	00 00       	nop
  78:	8c c0       	rjmp	.+280    	; 0x192 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8a c0       	rjmp	.+276    	; 0x192 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	88 c0       	rjmp	.+272    	; 0x192 <__bad_interrupt>
  82:	00 00       	nop
  84:	86 c0       	rjmp	.+268    	; 0x192 <__bad_interrupt>
  86:	00 00       	nop
  88:	84 c0       	rjmp	.+264    	; 0x192 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	82 c0       	rjmp	.+260    	; 0x192 <__bad_interrupt>
  8e:	00 00       	nop
  90:	80 c0       	rjmp	.+256    	; 0x192 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	7e c0       	rjmp	.+252    	; 0x192 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
  fe:	00 05 07 05 02 03 08 00 05                          .........

00000107 <DeviceDescriptor>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 107:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 117:	00 01                                               ..

00000119 <KeyboardReport>:
 119:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 129:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 139:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
 149:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000158 <__ctors_end>:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d0 e2       	ldi	r29, 0x20	; 32
 160:	de bf       	out	0x3e, r29	; 62
				ReportSize     -= 2;
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	11 e0       	ldi	r17, 0x01	; 1
				ReportData     += 2;
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e6 e1       	ldi	r30, 0x16	; 22
				break;
 16c:	fe e0       	ldi	r31, 0x0E	; 14

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	0b bf       	out	0x3b, r16	; 59
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
 174:	07 90       	elpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a4 30       	cpi	r26, 0x04	; 4
				ReportSize     -= 1;
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
				ReportData     += 1;
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a4 e0       	ldi	r26, 0x04	; 4
 182:	b1 e0       	ldi	r27, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
 186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
 188:	ab 31       	cpi	r26, 0x1B	; 27
 18a:	b1 07       	cpc	r27, r17
 18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
 18e:	c7 d1       	rcall	.+910    	; 0x51e <main>
 190:	40 c6       	rjmp	.+3200   	; 0xe12 <_exit>

00000192 <__bad_interrupt>:
 192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <LEDs_SetAllLEDs>:
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	98 2b       	or	r25, r24
 19a:	9b b9       	out	0x0b, r25	; 11
 19c:	08 95       	ret

0000019e <SetupHardware>:
 19e:	84 b7       	in	r24, 0x34	; 52
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	84 bf       	out	0x34, r24	; 52
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	80 93 60 00 	sts	0x0060, r24
 1ae:	10 92 60 00 	sts	0x0060, r1
 1b2:	0f be       	out	0x3f, r0	; 63
				break;
 1b4:	90 e0       	ldi	r25, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	80 93 61 00 	sts	0x0061, r24
 1c0:	90 93 61 00 	sts	0x0061, r25
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	8f 71       	andi	r24, 0x1F	; 31
 1ca:	84 b9       	out	0x04, r24	; 4
 1cc:	8d b1       	in	r24, 0x0d	; 13
 1ce:	8f 7c       	andi	r24, 0xCF	; 207
 1d0:	8d b9       	out	0x0d, r24	; 13
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	80 6e       	ori	r24, 0xE0	; 224
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	85 b9       	out	0x05, r24	; 5
 1d8:	8e b1       	in	r24, 0x0e	; 14
 1da:	80 63       	ori	r24, 0x30	; 48
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	8e b9       	out	0x0e, r24	; 14
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	80 6f       	ori	r24, 0xF0	; 240
 1e2:	8a b9       	out	0x0a, r24	; 10
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8f 70       	andi	r24, 0x0F	; 15
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	b3 d3       	rcall	.+1894   	; 0x952 <USB_Init>
				break;
 1ec:	6a 98       	cbi	0x0d, 2	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	72 9a       	sbi	0x0e, 2	; 14
 1f0:	08 95       	ret

000001f2 <EVENT_USB_Device_Connect>:
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	cf df       	rcall	.-98     	; 0x194 <LEDs_SetAllLEDs>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 02 01 	sts	0x0102, r24
 1fc:	08 95       	ret

000001fe <EVENT_USB_Device_Disconnect>:
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	c9 cf       	rjmp	.-110    	; 0x194 <LEDs_SetAllLEDs>

00000202 <EVENT_USB_Device_ConfigurationChanged>:
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	cf 93       	push	r28
 204:	42 e0       	ldi	r20, 0x02	; 2
				break;
 206:	61 ec       	ldi	r22, 0xC1	; 193
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	d8 d2       	rcall	.+1456   	; 0x7bc <Endpoint_ConfigureEndpoint_Prv>
 20c:	c8 2f       	mov	r28, r24
 20e:	42 e0       	ldi	r20, 0x02	; 2
 210:	60 ec       	ldi	r22, 0xC0	; 192
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	d3 d2       	rcall	.+1446   	; 0x7bc <Endpoint_ConfigureEndpoint_Prv>
 216:	90 91 e2 00 	lds	r25, 0x00E2
 21a:	94 60       	ori	r25, 0x04	; 4
 21c:	90 93 e2 00 	sts	0x00E2, r25
 220:	88 23       	and	r24, r24
 222:	21 f0       	breq	.+8      	; 0x22c <EVENT_USB_Device_ConfigurationChanged+0x2a>
 224:	cc 23       	and	r28, r28
 226:	11 f0       	breq	.+4      	; 0x22c <EVENT_USB_Device_ConfigurationChanged+0x2a>
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	01 c0       	rjmp	.+2      	; 0x22e <EVENT_USB_Device_ConfigurationChanged+0x2c>
 22c:	80 e9       	ldi	r24, 0x90	; 144
 22e:	cf 91       	pop	r28
 230:	b1 cf       	rjmp	.-158    	; 0x194 <LEDs_SetAllLEDs>

00000232 <EVENT_USB_Device_StartOfFrame>:
 232:	80 91 0c 01 	lds	r24, 0x010C
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 236:	90 91 0d 01 	lds	r25, 0x010D
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	29 f0       	breq	.+10     	; 0x248 <EVENT_USB_Device_StartOfFrame+0x16>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	90 93 0d 01 	sts	0x010D, r25
 244:	80 93 0c 01 	sts	0x010C, r24
 248:	08 95       	ret

0000024a <CreateKeyboardReport>:
 24a:	fc 01       	movw	r30, r24
 24c:	93 b1       	in	r25, 0x03	; 3
 24e:	8c b1       	in	r24, 0x0c	; 12
 250:	80 95       	com	r24
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	80 73       	andi	r24, 0x30	; 48
 254:	86 95       	lsr	r24
 256:	90 95       	com	r25
 258:	90 7e       	andi	r25, 0xE0	; 224
 25a:	89 2b       	or	r24, r25
 25c:	2c b1       	in	r18, 0x0c	; 12
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	20 95       	com	r18
 260:	98 e0       	ldi	r25, 0x08	; 8
 262:	df 01       	movw	r26, r30
 264:	1d 92       	st	X+, r1
 266:	9a 95       	dec	r25
 268:	e9 f7       	brne	.-6      	; 0x264 <CreateKeyboardReport+0x1a>
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	90 83       	st	Z, r25
 26e:	87 ff       	sbrs	r24, 7
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	02 c0       	rjmp	.+4      	; 0x276 <CreateKeyboardReport+0x2c>
				break;
 272:	94 e0       	ldi	r25, 0x04	; 4

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	03 c0       	rjmp	.+6      	; 0x27c <CreateKeyboardReport+0x32>
 276:	84 ff       	sbrs	r24, 4
 278:	04 c0       	rjmp	.+8      	; 0x282 <CreateKeyboardReport+0x38>
 27a:	95 e0       	ldi	r25, 0x05	; 5
 27c:	92 83       	std	Z+2, r25	; 0x02
 27e:	91 e0       	ldi	r25, 0x01	; 1
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	01 c0       	rjmp	.+2      	; 0x284 <CreateKeyboardReport+0x3a>
 282:	90 e0       	ldi	r25, 0x00	; 0
				break;
 284:	86 ff       	sbrs	r24, 6

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	05 c0       	rjmp	.+10     	; 0x292 <CreateKeyboardReport+0x48>
 288:	df 01       	movw	r26, r30
 28a:	a9 0f       	add	r26, r25
 28c:	b1 1d       	adc	r27, r1
 28e:	36 e0       	ldi	r19, 0x06	; 6
				break;
 290:	06 c0       	rjmp	.+12     	; 0x29e <CreateKeyboardReport+0x54>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	83 ff       	sbrs	r24, 3
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <CreateKeyboardReport+0x5a>
 296:	df 01       	movw	r26, r30
 298:	a9 0f       	add	r26, r25
 29a:	b1 1d       	adc	r27, r1
 29c:	37 e0       	ldi	r19, 0x07	; 7
 29e:	12 96       	adiw	r26, 0x02	; 2
				break;
 2a0:	3c 93       	st	X, r19

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <CreateKeyboardReport+0x6c>
 2a8:	df 01       	movw	r26, r30
 2aa:	a9 0f       	add	r26, r25
				break;
 2ac:	b1 1d       	adc	r27, r1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	12 96       	adiw	r26, 0x02	; 2
 2b2:	8c 93       	st	X, r24
 2b4:	9f 5f       	subi	r25, 0xFF	; 255
 2b6:	22 ff       	sbrs	r18, 2
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <CreateKeyboardReport+0x78>
 2ba:	e9 0f       	add	r30, r25
				break;
 2bc:	f1 1d       	adc	r31, r1
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	89 e0       	ldi	r24, 0x09	; 9
 2c0:	82 83       	std	Z+2, r24	; 0x02
 2c2:	08 95       	ret

000002c4 <ProcessLEDReport>:
 2c4:	98 2f       	mov	r25, r24
 2c6:	80 fd       	sbrc	r24, 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <ProcessLEDReport+0xa>
 2ca:	80 e2       	ldi	r24, 0x20	; 32
				break;
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <ProcessLEDReport+0xc>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	91 fd       	sbrc	r25, 1
 2d2:	80 68       	ori	r24, 0x80	; 128
				break;
 2d4:	92 fd       	sbrc	r25, 2

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	5d cf       	rjmp	.-326    	; 0x194 <LEDs_SetAllLEDs>

000002da <EVENT_USB_Device_ControlRequest>:
 2da:	cf 93       	push	r28

				if (ParserData->UsingReportIDs)
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	29 97       	sbiw	r28, 0x09	; 9
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	80 91 14 01 	lds	r24, 0x0114
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <EVENT_USB_Device_ControlRequest+0x1e>
 2f6:	48 c0       	rjmp	.+144    	; 0x388 <EVENT_USB_Device_ControlRequest+0xae>
 2f8:	30 f4       	brcc	.+12     	; 0x306 <EVENT_USB_Device_ControlRequest+0x2c>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	71 f0       	breq	.+28     	; 0x31a <EVENT_USB_Device_ControlRequest+0x40>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	09 f4       	brne	.+2      	; 0x304 <EVENT_USB_Device_ControlRequest+0x2a>
 302:	7e c0       	rjmp	.+252    	; 0x400 <EVENT_USB_Device_ControlRequest+0x126>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	96 c0       	rjmp	.+300    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 306:	8a 30       	cpi	r24, 0x0A	; 10
 308:	09 f4       	brne	.+2      	; 0x30c <EVENT_USB_Device_ControlRequest+0x32>
 30a:	61 c0       	rjmp	.+194    	; 0x3ce <EVENT_USB_Device_ControlRequest+0xf4>
 30c:	8b 30       	cpi	r24, 0x0B	; 11
 30e:	09 f4       	brne	.+2      	; 0x312 <EVENT_USB_Device_ControlRequest+0x38>
 310:	48 c0       	rjmp	.+144    	; 0x3a2 <EVENT_USB_Device_ControlRequest+0xc8>
 312:	89 30       	cpi	r24, 0x09	; 9
 314:	09 f0       	breq	.+2      	; 0x318 <EVENT_USB_Device_ControlRequest+0x3e>
 316:	8d c0       	rjmp	.+282    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	18 c0       	rjmp	.+48     	; 0x34a <EVENT_USB_Device_ControlRequest+0x70>
 31a:	80 91 13 01 	lds	r24, 0x0113
 31e:	81 3a       	cpi	r24, 0xA1	; 161
 320:	09 f0       	breq	.+2      	; 0x324 <EVENT_USB_Device_ControlRequest+0x4a>
 322:	87 c0       	rjmp	.+270    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 df       	rcall	.-224    	; 0x24a <CreateKeyboardReport>
 32a:	80 91 e8 00 	lds	r24, 0x00E8
 32e:	87 7f       	andi	r24, 0xF7	; 247
 330:	80 93 e8 00 	sts	0x00E8, r24
 334:	68 e0       	ldi	r22, 0x08	; 8
 336:	70 e0       	ldi	r23, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	82 d1       	rcall	.+772    	; 0x642 <Endpoint_Write_Control_Stream_LE>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	80 91 e8 00 	lds	r24, 0x00E8
 342:	8b 77       	andi	r24, 0x7B	; 123
 344:	80 93 e8 00 	sts	0x00E8, r24
 348:	74 c0       	rjmp	.+232    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 34a:	80 91 13 01 	lds	r24, 0x0113
 34e:	81 32       	cpi	r24, 0x21	; 33
 350:	09 f0       	breq	.+2      	; 0x354 <EVENT_USB_Device_ControlRequest+0x7a>
 352:	6f c0       	rjmp	.+222    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 354:	80 91 e8 00 	lds	r24, 0x00E8
 358:	87 7f       	andi	r24, 0xF7	; 247
 35a:	80 93 e8 00 	sts	0x00E8, r24
 35e:	80 91 e8 00 	lds	r24, 0x00E8
 362:	82 fd       	sbrc	r24, 2
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	05 c0       	rjmp	.+10     	; 0x370 <EVENT_USB_Device_ControlRequest+0x96>
 366:	80 91 12 01 	lds	r24, 0x0112
 36a:	81 11       	cpse	r24, r1
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	f8 cf       	rjmp	.-16     	; 0x35e <EVENT_USB_Device_ControlRequest+0x84>
 36e:	61 c0       	rjmp	.+194    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 370:	80 91 f1 00 	lds	r24, 0x00F1
 374:	90 91 e8 00 	lds	r25, 0x00E8

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	9b 77       	andi	r25, 0x7B	; 123
 37a:	90 93 e8 00 	sts	0x00E8, r25
 37e:	89 87       	std	Y+9, r24	; 0x09
 380:	52 d2       	rcall	.+1188   	; 0x826 <Endpoint_ClearStatusStage>
 382:	89 85       	ldd	r24, Y+9	; 0x09
 384:	9f df       	rcall	.-194    	; 0x2c4 <ProcessLEDReport>
 386:	55 c0       	rjmp	.+170    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
				break;
 388:	80 91 13 01 	lds	r24, 0x0113

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38c:	81 3a       	cpi	r24, 0xA1	; 161
 38e:	09 f0       	breq	.+2      	; 0x392 <EVENT_USB_Device_ControlRequest+0xb8>
 390:	50 c0       	rjmp	.+160    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 392:	80 91 e8 00 	lds	r24, 0x00E8
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	87 7f       	andi	r24, 0xF7	; 247
 398:	80 93 e8 00 	sts	0x00E8, r24
 39c:	80 91 02 01 	lds	r24, 0x0102
 3a0:	40 c0       	rjmp	.+128    	; 0x422 <EVENT_USB_Device_ControlRequest+0x148>
 3a2:	80 91 13 01 	lds	r24, 0x0113
 3a6:	81 32       	cpi	r24, 0x21	; 33
 3a8:	09 f0       	breq	.+2      	; 0x3ac <EVENT_USB_Device_ControlRequest+0xd2>
 3aa:	43 c0       	rjmp	.+134    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 3ac:	80 91 e8 00 	lds	r24, 0x00E8
				break;
 3b0:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	80 93 e8 00 	sts	0x00E8, r24
 3b6:	37 d2       	rcall	.+1134   	; 0x826 <Endpoint_ClearStatusStage>
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	80 91 15 01 	lds	r24, 0x0115
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	90 91 16 01 	lds	r25, 0x0116
 3c2:	89 2b       	or	r24, r25
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <EVENT_USB_Device_ControlRequest+0xee>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	20 93 02 01 	sts	0x0102, r18
 3cc:	32 c0       	rjmp	.+100    	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	80 91 13 01 	lds	r24, 0x0113
 3d2:	81 32       	cpi	r24, 0x21	; 33

					while (CurrCollectionPath->Parent != NULL)
 3d4:	71 f5       	brne	.+92     	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 3d6:	80 91 e8 00 	lds	r24, 0x00E8
 3da:	87 7f       	andi	r24, 0xF7	; 247
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	80 93 e8 00 	sts	0x00E8, r24
 3e0:	22 d2       	rcall	.+1092   	; 0x826 <Endpoint_ClearStatusStage>
 3e2:	80 91 15 01 	lds	r24, 0x0115
 3e6:	90 91 16 01 	lds	r25, 0x0116
 3ea:	88 27       	eor	r24, r24
 3ec:	36 e0       	ldi	r19, 0x06	; 6
 3ee:	96 95       	lsr	r25
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	87 95       	ror	r24
 3f2:	3a 95       	dec	r19
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <EVENT_USB_Device_ControlRequest+0x114>
 3f6:	90 93 01 01 	sts	0x0101, r25
 3fa:	80 93 00 01 	sts	0x0100, r24
 3fe:	19 c0       	rjmp	.+50     	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
 400:	80 91 13 01 	lds	r24, 0x0113
 404:	81 3a       	cpi	r24, 0xA1	; 161
 406:	a9 f4       	brne	.+42     	; 0x432 <EVENT_USB_Device_ControlRequest+0x158>
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	80 91 e8 00 	lds	r24, 0x00E8
 40c:	87 7f       	andi	r24, 0xF7	; 247
 40e:	80 93 e8 00 	sts	0x00E8, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	80 91 00 01 	lds	r24, 0x0100
 416:	90 91 01 01 	lds	r25, 0x0101
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	96 95       	lsr	r25

				if (UsageListSize)
 420:	87 95       	ror	r24
 422:	80 93 f1 00 	sts	0x00F1, r24
 426:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	8e 77       	andi	r24, 0x7E	; 126
 42c:	80 93 e8 00 	sts	0x00E8, r24
 430:	fa d1       	rcall	.+1012   	; 0x826 <Endpoint_ClearStatusStage>
 432:	29 96       	adiw	r28, 0x09	; 9
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	df 91       	pop	r29

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <SendNextReport>:
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
					  UsageList[i - 1] = UsageList[i];
 44c:	28 97       	sbiw	r28, 0x08	; 8
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	f6 de       	rcall	.-532    	; 0x24a <CreateKeyboardReport>
 45e:	80 91 00 01 	lds	r24, 0x0100
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	90 91 01 01 	lds	r25, 0x0101
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	61 f0       	breq	.+24     	; 0x482 <SendNextReport+0x3e>
 46a:	20 91 0c 01 	lds	r18, 0x010C
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	30 91 0d 01 	lds	r19, 0x010D
 472:	23 2b       	or	r18, r19
 474:	31 f4       	brne	.+12     	; 0x482 <SendNextReport+0x3e>
 476:	90 93 0d 01 	sts	0x010D, r25
 47a:	80 93 0c 01 	sts	0x010C, r24
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	0c c0       	rjmp	.+24     	; 0x49a <SendNextReport+0x56>
 482:	48 e0       	ldi	r20, 0x08	; 8
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	be 01       	movw	r22, r28
 488:	6f 5f       	subi	r22, 0xFF	; 255
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	b3 d4       	rcall	.+2406   	; 0xdf8 <memcmp>
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	89 2b       	or	r24, r25
 496:	09 f4       	brne	.+2      	; 0x49a <SendNextReport+0x56>
 498:	20 e0       	ldi	r18, 0x00	; 0
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 e9 00 	sts	0x00E9, r24
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
 4a4:	85 ff       	sbrs	r24, 5
 4a6:	17 c0       	rjmp	.+46     	; 0x4d6 <SendNextReport+0x92>
 4a8:	22 23       	and	r18, r18
 4aa:	a9 f0       	breq	.+42     	; 0x4d6 <SendNextReport+0x92>
				break;
 4ac:	88 e0       	ldi	r24, 0x08	; 8
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	fe 01       	movw	r30, r28
 4b0:	31 96       	adiw	r30, 0x01	; 1
 4b2:	a4 e0       	ldi	r26, 0x04	; 4
 4b4:	b1 e0       	ldi	r27, 0x01	; 1
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <SendNextReport+0x72>
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	68 e0       	ldi	r22, 0x08	; 8
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	73 d0       	rcall	.+230    	; 0x5b2 <Endpoint_Write_Stream_LE>
 4cc:	80 91 e8 00 	lds	r24, 0x00E8
 4d0:	8e 77       	andi	r24, 0x7E	; 126
 4d2:	80 93 e8 00 	sts	0x00E8, r24
 4d6:	28 96       	adiw	r28, 0x08	; 8
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	df 91       	pop	r29
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <ReceiveNextReport>:
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	80 93 e9 00 	sts	0x00E9, r24
 4ee:	80 91 e8 00 	lds	r24, 0x00E8
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	82 ff       	sbrs	r24, 2
 4f4:	0c c0       	rjmp	.+24     	; 0x50e <ReceiveNextReport+0x26>
 4f6:	80 91 e8 00 	lds	r24, 0x00E8
 4fa:	85 ff       	sbrs	r24, 5
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <ReceiveNextReport+0x1c>
 4fe:	80 91 f1 00 	lds	r24, 0x00F1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	e0 de       	rcall	.-576    	; 0x2c4 <ProcessLEDReport>
 504:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
 508:	8b 77       	andi	r24, 0x7B	; 123
 50a:	80 93 e8 00 	sts	0x00E8, r24
 50e:	08 95       	ret

00000510 <HID_Task>:
 510:	80 91 12 01 	lds	r24, 0x0112
 514:	84 30       	cpi	r24, 0x04	; 4
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	11 f4       	brne	.+4      	; 0x51c <HID_Task+0xc>
 518:	95 df       	rcall	.-214    	; 0x444 <SendNextReport>
 51a:	e6 cf       	rjmp	.-52     	; 0x4e8 <ReceiveNextReport>
 51c:	08 95       	ret

0000051e <main>:

					if (UsageListSize)
 51e:	3f de       	rcall	.-898    	; 0x19e <SetupHardware>
 520:	80 e1       	ldi	r24, 0x10	; 16
 522:	38 de       	rcall	.-912    	; 0x194 <LEDs_SetAllLEDs>
 524:	78 94       	sei
 526:	f4 df       	rcall	.-24     	; 0x510 <HID_Task>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	4b d4       	rcall	.+2198   	; 0xdc0 <USB_USBTask>
 52a:	fd cf       	rjmp	.-6      	; 0x526 <main+0x8>

0000052c <CALLBACK_USB_GetDescriptor>:
 52c:	29 2f       	mov	r18, r25
 52e:	33 27       	eor	r19, r19
 530:	23 30       	cpi	r18, 0x03	; 3
 532:	31 05       	cpc	r19, r1
 534:	b9 f0       	breq	.+46     	; 0x564 <CALLBACK_USB_GetDescriptor+0x38>
 536:	5c f4       	brge	.+22     	; 0x54e <CALLBACK_USB_GetDescriptor+0x22>
 538:	21 30       	cpi	r18, 0x01	; 1
 53a:	31 05       	cpc	r19, r1
 53c:	69 f1       	breq	.+90     	; 0x598 <CALLBACK_USB_GetDescriptor+0x6c>

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	22 30       	cpi	r18, 0x02	; 2
 540:	31 05       	cpc	r19, r1
 542:	79 f5       	brne	.+94     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x76>
 544:	89 e2       	ldi	r24, 0x29	; 41
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2e ed       	ldi	r18, 0xDE	; 222
						  UsageList[i - 1] = UsageList[i];
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	2e c0       	rjmp	.+92     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
 54e:	21 32       	cpi	r18, 0x21	; 33
 550:	31 05       	cpc	r19, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	e9 f0       	breq	.+58     	; 0x58e <CALLBACK_USB_GetDescriptor+0x62>
 554:	22 32       	cpi	r18, 0x22	; 34
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	31 05       	cpc	r19, r1
 558:	21 f5       	brne	.+72     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x76>
 55a:	8f e3       	ldi	r24, 0x3F	; 63
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	29 e1       	ldi	r18, 0x19	; 25
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	31 e0       	ldi	r19, 0x01	; 1
 562:	23 c0       	rjmp	.+70     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
 564:	99 27       	eor	r25, r25
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	91 05       	cpc	r25, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	41 f0       	breq	.+16     	; 0x57c <CALLBACK_USB_GetDescriptor+0x50>
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	91 05       	cpc	r25, r1
 570:	41 f0       	breq	.+16     	; 0x582 <CALLBACK_USB_GetDescriptor+0x56>
 572:	89 2b       	or	r24, r25
 574:	b1 f4       	brne	.+44     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x76>
 576:	ea ed       	ldi	r30, 0xDA	; 218
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	05 c0       	rjmp	.+10     	; 0x586 <CALLBACK_USB_GetDescriptor+0x5a>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	e0 ec       	ldi	r30, 0xC0	; 192
 57e:	f0 e0       	ldi	r31, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	02 c0       	rjmp	.+4      	; 0x586 <CALLBACK_USB_GetDescriptor+0x5a>
 582:	e8 e9       	ldi	r30, 0x98	; 152
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	84 91       	lpm	r24, Z
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	9f 01       	movw	r18, r30
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	89 e0       	ldi	r24, 0x09	; 9
 590:	90 e0       	ldi	r25, 0x00	; 0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	20 ef       	ldi	r18, 0xF0	; 240
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	09 c0       	rjmp	.+18     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
 598:	82 e1       	ldi	r24, 0x12	; 18
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	27 e0       	ldi	r18, 0x07	; 7
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	fa 01       	movw	r30, r20

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	31 83       	std	Z+1, r19	; 0x01
 5ae:	20 83       	st	Z, r18
 5b0:	08 95       	ret

000005b2 <Endpoint_Write_Stream_LE>:
 5b2:	cf 92       	push	r12
 5b4:	df 92       	push	r13
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	0f 93       	push	r16

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	7c 01       	movw	r14, r24
 5c4:	8b 01       	movw	r16, r22
 5c6:	ea 01       	movw	r28, r20
 5c8:	4f d1       	rcall	.+670    	; 0x868 <Endpoint_WaitUntilReady>
 5ca:	81 11       	cpse	r24, r1
 5cc:	31 c0       	rjmp	.+98     	; 0x630 <Endpoint_Write_Stream_LE+0x7e>
 5ce:	20 97       	sbiw	r28, 0x00	; 0
 5d0:	31 f0       	breq	.+12     	; 0x5de <Endpoint_Write_Stream_LE+0x2c>
 5d2:	88 81       	ld	r24, Y
 5d4:	99 81       	ldd	r25, Y+1	; 0x01
 5d6:	08 1b       	sub	r16, r24
 5d8:	19 0b       	sbc	r17, r25
 5da:	e8 0e       	add	r14, r24
 5dc:	f9 1e       	adc	r15, r25
 5de:	c1 2c       	mov	r12, r1
 5e0:	d1 2c       	mov	r13, r1
 5e2:	01 15       	cp	r16, r1
 5e4:	11 05       	cpc	r17, r1
 5e6:	19 f1       	breq	.+70     	; 0x62e <Endpoint_Write_Stream_LE+0x7c>
 5e8:	80 91 e8 00 	lds	r24, 0x00E8
 5ec:	85 fd       	sbrc	r24, 5
 5ee:	14 c0       	rjmp	.+40     	; 0x618 <Endpoint_Write_Stream_LE+0x66>
 5f0:	80 91 e8 00 	lds	r24, 0x00E8

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	8e 77       	andi	r24, 0x7E	; 126
 5f6:	80 93 e8 00 	sts	0x00E8, r24
 5fa:	e2 d3       	rcall	.+1988   	; 0xdc0 <USB_USBTask>
 5fc:	20 97       	sbiw	r28, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
 5fe:	41 f0       	breq	.+16     	; 0x610 <Endpoint_Write_Stream_LE+0x5e>
 600:	88 81       	ld	r24, Y

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	99 81       	ldd	r25, Y+1	; 0x01
 604:	8c 0d       	add	r24, r12
 606:	9d 1d       	adc	r25, r13
 608:	99 83       	std	Y+1, r25	; 0x01
 60a:	88 83       	st	Y, r24
 60c:	85 e0       	ldi	r24, 0x05	; 5
 60e:	10 c0       	rjmp	.+32     	; 0x630 <Endpoint_Write_Stream_LE+0x7e>
 610:	2b d1       	rcall	.+598    	; 0x868 <Endpoint_WaitUntilReady>
 612:	88 23       	and	r24, r24
 614:	31 f3       	breq	.-52     	; 0x5e2 <Endpoint_Write_Stream_LE+0x30>
 616:	0c c0       	rjmp	.+24     	; 0x630 <Endpoint_Write_Stream_LE+0x7e>
 618:	f7 01       	movw	r30, r14
 61a:	81 91       	ld	r24, Z+
 61c:	7f 01       	movw	r14, r30
 61e:	80 93 f1 00 	sts	0x00F1, r24
 622:	01 50       	subi	r16, 0x01	; 1
 624:	11 09       	sbc	r17, r1
 626:	ff ef       	ldi	r31, 0xFF	; 255
 628:	cf 1a       	sub	r12, r31
 62a:	df 0a       	sbc	r13, r31
 62c:	da cf       	rjmp	.-76     	; 0x5e2 <Endpoint_Write_Stream_LE+0x30>
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	08 95       	ret

00000642 <Endpoint_Write_Control_Stream_LE>:
 642:	20 91 19 01 	lds	r18, 0x0119
 646:	30 91 1a 01 	lds	r19, 0x011A
 64a:	26 17       	cp	r18, r22
 64c:	37 07       	cpc	r19, r23
 64e:	48 f0       	brcs	.+18     	; 0x662 <Endpoint_Write_Control_Stream_LE+0x20>
 650:	61 15       	cp	r22, r1
 652:	71 05       	cpc	r23, r1
 654:	39 f4       	brne	.+14     	; 0x664 <Endpoint_Write_Control_Stream_LE+0x22>
 656:	20 91 e8 00 	lds	r18, 0x00E8
 65a:	2e 77       	andi	r18, 0x7E	; 126
 65c:	20 93 e8 00 	sts	0x00E8, r18
 660:	01 c0       	rjmp	.+2      	; 0x664 <Endpoint_Write_Control_Stream_LE+0x22>
 662:	b9 01       	movw	r22, r18
 664:	fc 01       	movw	r30, r24
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	61 15       	cp	r22, r1
 66a:	71 05       	cpc	r23, r1
 66c:	99 f1       	breq	.+102    	; 0x6d4 <Endpoint_Write_Control_Stream_LE+0x92>
 66e:	80 91 12 01 	lds	r24, 0x0112
 672:	88 23       	and	r24, r24
 674:	e9 f1       	breq	.+122    	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0xae>
 676:	85 30       	cpi	r24, 0x05	; 5
 678:	e9 f1       	breq	.+122    	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0xb2>
 67a:	80 91 e8 00 	lds	r24, 0x00E8
 67e:	83 fd       	sbrc	r24, 3
 680:	3b c0       	rjmp	.+118    	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0xb6>
 682:	80 91 e8 00 	lds	r24, 0x00E8
 686:	82 ff       	sbrs	r24, 2
					  ParserData->TotalReportItems++;
 688:	06 c0       	rjmp	.+12     	; 0x696 <Endpoint_Write_Control_Stream_LE+0x54>
 68a:	80 91 e8 00 	lds	r24, 0x00E8
 68e:	82 ff       	sbrs	r24, 2
 690:	24 c0       	rjmp	.+72     	; 0x6da <Endpoint_Write_Control_Stream_LE+0x98>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	08 95       	ret
 696:	80 91 e8 00 	lds	r24, 0x00E8
 69a:	80 ff       	sbrs	r24, 0
 69c:	e5 cf       	rjmp	.-54     	; 0x668 <Endpoint_Write_Control_Stream_LE+0x26>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	80 91 f2 00 	lds	r24, 0x00F2
 6a2:	90 91 f3 00 	lds	r25, 0x00F3
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	61 15       	cp	r22, r1
 6a8:	71 05       	cpc	r23, r1
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	51 f0       	breq	.+20     	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0x7e>
 6ac:	88 30       	cpi	r24, 0x08	; 8
 6ae:	91 05       	cpc	r25, r1
 6b0:	38 f4       	brcc	.+14     	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0x7e>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	21 91       	ld	r18, Z+
 6b4:	20 93 f1 00 	sts	0x00F1, r18
 6b8:	61 50       	subi	r22, 0x01	; 1
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	71 09       	sbc	r23, r1
 6bc:	01 96       	adiw	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	f3 cf       	rjmp	.-26     	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0x64>
 6c0:	21 e0       	ldi	r18, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	08 97       	sbiw	r24, 0x08	; 8
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <Endpoint_Write_Control_Stream_LE+0x86>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	80 91 e8 00 	lds	r24, 0x00E8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6cc:	8e 77       	andi	r24, 0x7E	; 126

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	80 93 e8 00 	sts	0x00E8, r24
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	ca cf       	rjmp	.-108    	; 0x668 <Endpoint_Write_Control_Stream_LE+0x26>
 6d4:	21 11       	cpse	r18, r1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	cb cf       	rjmp	.-106    	; 0x66e <Endpoint_Write_Control_Stream_LE+0x2c>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	d8 cf       	rjmp	.-80     	; 0x68a <Endpoint_Write_Control_Stream_LE+0x48>
 6da:	80 91 12 01 	lds	r24, 0x0112
 6de:	88 23       	and	r24, r24
 6e0:	39 f0       	breq	.+14     	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0xae>
 6e2:	85 30       	cpi	r24, 0x05	; 5
 6e4:	39 f0       	breq	.+14     	; 0x6f4 <Endpoint_Write_Control_Stream_LE+0xb2>
 6e6:	80 91 e8 00 	lds	r24, 0x00E8
 6ea:	83 ff       	sbrs	r24, 3
 6ec:	ce cf       	rjmp	.-100    	; 0x68a <Endpoint_Write_Control_Stream_LE+0x48>
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <Endpoint_Write_Control_Stream_LE+0xb6>
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	08 95       	ret
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	08 95       	ret
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	08 95       	ret

000006fc <Endpoint_Write_Control_PStream_LE>:
 6fc:	20 91 19 01 	lds	r18, 0x0119
 700:	30 91 1a 01 	lds	r19, 0x011A
 704:	26 17       	cp	r18, r22
 706:	37 07       	cpc	r19, r23
 708:	48 f0       	brcs	.+18     	; 0x71c <Endpoint_Write_Control_PStream_LE+0x20>
 70a:	61 15       	cp	r22, r1
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 70c:	71 05       	cpc	r23, r1
 70e:	39 f4       	brne	.+14     	; 0x71e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 710:	20 91 e8 00 	lds	r18, 0x00E8
 714:	2e 77       	andi	r18, 0x7E	; 126
 716:	20 93 e8 00 	sts	0x00E8, r18
 71a:	01 c0       	rjmp	.+2      	; 0x71e <Endpoint_Write_Control_PStream_LE+0x22>
 71c:	b9 01       	movw	r22, r18
 71e:	fc 01       	movw	r30, r24
 720:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 722:	61 15       	cp	r22, r1
 724:	71 05       	cpc	r23, r1
 726:	b1 f1       	breq	.+108    	; 0x794 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 728:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 72c:	88 23       	and	r24, r24
 72e:	09 f4       	brne	.+2      	; 0x732 <Endpoint_Write_Control_PStream_LE+0x36>
 730:	3f c0       	rjmp	.+126    	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 732:	85 30       	cpi	r24, 0x05	; 5
 734:	09 f4       	brne	.+2      	; 0x738 <Endpoint_Write_Control_PStream_LE+0x3c>
 736:	3e c0       	rjmp	.+124    	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 738:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 73c:	83 fd       	sbrc	r24, 3
 73e:	3c c0       	rjmp	.+120    	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 740:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 744:	82 ff       	sbrs	r24, 2
 746:	06 c0       	rjmp	.+12     	; 0x754 <Endpoint_Write_Control_PStream_LE+0x58>
 748:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 74c:	82 ff       	sbrs	r24, 2
 74e:	25 c0       	rjmp	.+74     	; 0x79a <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 754:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 758:	80 ff       	sbrs	r24, 0
 75a:	e3 cf       	rjmp	.-58     	; 0x722 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 75c:	80 91 f2 00 	lds	r24, 0x00F2
 760:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 764:	61 15       	cp	r22, r1
 766:	71 05       	cpc	r23, r1
 768:	59 f0       	breq	.+22     	; 0x780 <Endpoint_Write_Control_PStream_LE+0x84>
 76a:	88 30       	cpi	r24, 0x08	; 8
 76c:	91 05       	cpc	r25, r1
 76e:	40 f4       	brcc	.+16     	; 0x780 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 770:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 772:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 776:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 778:	61 50       	subi	r22, 0x01	; 1
 77a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	f2 cf       	rjmp	.-28     	; 0x764 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 780:	21 e0       	ldi	r18, 0x01	; 1
 782:	08 97       	sbiw	r24, 0x08	; 8
 784:	09 f0       	breq	.+2      	; 0x788 <Endpoint_Write_Control_PStream_LE+0x8c>
 786:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 788:	80 91 e8 00 	lds	r24, 0x00E8
 78c:	8e 77       	andi	r24, 0x7E	; 126
 78e:	80 93 e8 00 	sts	0x00E8, r24
 792:	c7 cf       	rjmp	.-114    	; 0x722 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 794:	21 11       	cpse	r18, r1
 796:	c8 cf       	rjmp	.-112    	; 0x728 <Endpoint_Write_Control_PStream_LE+0x2c>
 798:	d7 cf       	rjmp	.-82     	; 0x748 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 79a:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 79e:	88 23       	and	r24, r24
 7a0:	39 f0       	breq	.+14     	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7a2:	85 30       	cpi	r24, 0x05	; 5
 7a4:	39 f0       	breq	.+14     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7aa:	83 ff       	sbrs	r24, 3
 7ac:	cd cf       	rjmp	.-102    	; 0x748 <Endpoint_Write_Control_PStream_LE+0x4c>
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7b4:	83 e0       	ldi	r24, 0x03	; 3
 7b6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7b8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7ba:	08 95       	ret

000007bc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 7bc:	98 2f       	mov	r25, r24
 7be:	97 30       	cpi	r25, 0x07	; 7
 7c0:	58 f5       	brcc	.+86     	; 0x818 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7c2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 7c6:	98 17       	cp	r25, r24
 7c8:	39 f0       	breq	.+14     	; 0x7d8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 7ca:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 7ce:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 7d2:	50 91 f0 00 	lds	r21, 0x00F0
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 7d8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 7da:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 7dc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 7de:	21 ff       	sbrs	r18, 1
 7e0:	19 c0       	rjmp	.+50     	; 0x814 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 7e2:	30 91 eb 00 	lds	r19, 0x00EB
 7e6:	3e 7f       	andi	r19, 0xFE	; 254
 7e8:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 7ec:	30 91 ed 00 	lds	r19, 0x00ED
 7f0:	3d 7f       	andi	r19, 0xFD	; 253
 7f2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 7f6:	30 91 eb 00 	lds	r19, 0x00EB
 7fa:	31 60       	ori	r19, 0x01	; 1
 7fc:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 800:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 804:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 808:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 80c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 810:	27 ff       	sbrs	r18, 7
 812:	07 c0       	rjmp	.+14     	; 0x822 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	d3 cf       	rjmp	.-90     	; 0x7be <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 818:	8f 70       	andi	r24, 0x0F	; 15
 81a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 822:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 824:	08 95       	ret

00000826 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 826:	80 91 13 01 	lds	r24, 0x0113
 82a:	87 fd       	sbrc	r24, 7
 82c:	05 c0       	rjmp	.+10     	; 0x838 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 82e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 832:	80 ff       	sbrs	r24, 0
 834:	0e c0       	rjmp	.+28     	; 0x852 <Endpoint_ClearStatusStage+0x2c>
 836:	12 c0       	rjmp	.+36     	; 0x85c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 838:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 83c:	82 fd       	sbrc	r24, 2
 83e:	05 c0       	rjmp	.+10     	; 0x84a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 840:	80 91 12 01 	lds	r24, 0x0112
 844:	81 11       	cpse	r24, r1
 846:	f8 cf       	rjmp	.-16     	; 0x838 <Endpoint_ClearStatusStage+0x12>
 848:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 84a:	80 91 e8 00 	lds	r24, 0x00E8
 84e:	8b 77       	andi	r24, 0x7B	; 123
 850:	08 c0       	rjmp	.+16     	; 0x862 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 852:	80 91 12 01 	lds	r24, 0x0112
 856:	81 11       	cpse	r24, r1
 858:	ea cf       	rjmp	.-44     	; 0x82e <Endpoint_ClearStatusStage+0x8>
 85a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 85c:	80 91 e8 00 	lds	r24, 0x00E8
 860:	8e 77       	andi	r24, 0x7E	; 126
 862:	80 93 e8 00 	sts	0x00E8, r24
 866:	08 95       	ret

00000868 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 868:	80 91 e4 00 	lds	r24, 0x00E4
 86c:	90 91 e5 00 	lds	r25, 0x00E5
 870:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 872:	20 91 ec 00 	lds	r18, 0x00EC
 876:	20 ff       	sbrs	r18, 0
 878:	21 c0       	rjmp	.+66     	; 0x8bc <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 87a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 87e:	20 fd       	sbrc	r18, 0
 880:	21 c0       	rjmp	.+66     	; 0x8c4 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 882:	20 91 12 01 	lds	r18, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 886:	22 23       	and	r18, r18
 888:	89 f0       	breq	.+34     	; 0x8ac <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 88a:	25 30       	cpi	r18, 0x05	; 5
 88c:	89 f0       	breq	.+34     	; 0x8b0 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 88e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 892:	25 fd       	sbrc	r18, 5
 894:	0f c0       	rjmp	.+30     	; 0x8b4 <Endpoint_WaitUntilReady+0x4c>
 896:	20 91 e4 00 	lds	r18, 0x00E4
 89a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 89e:	28 17       	cp	r18, r24
 8a0:	39 07       	cpc	r19, r25
 8a2:	39 f3       	breq	.-50     	; 0x872 <Endpoint_WaitUntilReady+0xa>
 8a4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8a6:	41 f0       	breq	.+16     	; 0x8b8 <Endpoint_WaitUntilReady+0x50>
 8a8:	c9 01       	movw	r24, r18
 8aa:	e3 cf       	rjmp	.-58     	; 0x872 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8ac:	82 e0       	ldi	r24, 0x02	; 2
 8ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8bc:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8c0:	22 ff       	sbrs	r18, 2
 8c2:	df cf       	rjmp	.-66     	; 0x882 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	08 95       	ret

000008c8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 8d0:	4e d0       	rcall	.+156    	; 0x96e <USB_INT_DisableAllInterrupts>
 8d2:	55 d0       	rcall	.+170    	; 0x97e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 8d4:	c8 ed       	ldi	r28, 0xD8	; 216
 8d6:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 8d8:	88 81       	ld	r24, Y
 8da:	8f 77       	andi	r24, 0x7F	; 127
 8dc:	88 83       	st	Y, r24
 8de:	88 81       	ld	r24, Y
 8e0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 8e2:	88 83       	st	Y, r24
 8e4:	88 81       	ld	r24, Y
 8e6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8e8:	88 83       	st	Y, r24
 8ea:	e7 ed       	ldi	r30, 0xD7	; 215
 8ec:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 8ee:	80 81       	ld	r24, Z
 8f0:	80 68       	ori	r24, 0x80	; 128
 8f2:	80 83       	st	Z, r24
 8f4:	19 bc       	out	0x29, r1	; 41
 8f6:	10 92 12 01 	sts	0x0112, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 8fa:	10 92 0e 01 	sts	0x010E, r1
	USB_Device_ConfigurationNumber  = 0;
 8fe:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 902:	10 92 0f 01 	sts	0x010F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 906:	00 ee       	ldi	r16, 0xE0	; 224
 908:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 90a:	f8 01       	movw	r30, r16
 90c:	80 81       	ld	r24, Z
 90e:	8b 7f       	andi	r24, 0xFB	; 251
 910:	80 83       	st	Z, r24
 912:	88 81       	ld	r24, Y
 914:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 916:	88 83       	st	Y, r24
 918:	42 e0       	ldi	r20, 0x02	; 2
 91a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	4e df       	rcall	.-356    	; 0x7bc <Endpoint_ConfigureEndpoint_Prv>
 920:	e1 ee       	ldi	r30, 0xE1	; 225
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 926:	8e 7f       	andi	r24, 0xFE	; 254
 928:	80 83       	st	Z, r24
 92a:	e2 ee       	ldi	r30, 0xE2	; 226
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 930:	81 60       	ori	r24, 0x01	; 1
 932:	80 83       	st	Z, r24
 934:	80 81       	ld	r24, Z
 936:	88 60       	ori	r24, 0x08	; 8
 938:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 93a:	f8 01       	movw	r30, r16
 93c:	80 81       	ld	r24, Z
 93e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 940:	80 83       	st	Z, r24
 942:	88 81       	ld	r24, Y
 944:	80 61       	ori	r24, 0x10	; 16
 946:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <USB_Init>:
 952:	e8 ed       	ldi	r30, 0xD8	; 216
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 958:	8f 7e       	andi	r24, 0xEF	; 239
 95a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 95c:	e7 ed       	ldi	r30, 0xD7	; 215
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	81 60       	ori	r24, 0x01	; 1
 964:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	80 93 11 01 	sts	0x0111, r24

	USB_ResetInterface();
 96c:	ad cf       	rjmp	.-166    	; 0x8c8 <USB_ResetInterface>

0000096e <USB_INT_DisableAllInterrupts>:
 96e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	80 81       	ld	r24, Z
 974:	8c 7f       	andi	r24, 0xFC	; 252
 976:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 978:	10 92 e2 00 	sts	0x00E2, r1
 97c:	08 95       	ret

0000097e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 97e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 982:	10 92 e1 00 	sts	0x00E1, r1
 986:	08 95       	ret

00000988 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	0b b6       	in	r0, 0x3b	; 59
 994:	0f 92       	push	r0
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9ae:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9b2:	82 ff       	sbrs	r24, 2
 9b4:	0a c0       	rjmp	.+20     	; 0x9ca <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9b6:	80 91 e2 00 	lds	r24, 0x00E2
 9ba:	82 ff       	sbrs	r24, 2
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9be:	80 91 e1 00 	lds	r24, 0x00E1
 9c2:	8b 7f       	andi	r24, 0xFB	; 251
 9c4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 9c8:	34 dc       	rcall	.-1944   	; 0x232 <EVENT_USB_Device_StartOfFrame>
 9ca:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 9ce:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 9d0:	1d c0       	rjmp	.+58     	; 0xa0c <__vector_10+0x84>
 9d2:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 9d6:	80 ff       	sbrs	r24, 0
 9d8:	19 c0       	rjmp	.+50     	; 0xa0c <__vector_10+0x84>
 9da:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 9de:	8e 7f       	andi	r24, 0xFE	; 254
 9e0:	80 93 da 00 	sts	0x00DA, r24
 9e4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 9e8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 9ea:	0c c0       	rjmp	.+24     	; 0xa04 <__vector_10+0x7c>
 9ec:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9ee:	89 bd       	out	0x29, r24	; 41
 9f0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9f2:	89 bd       	out	0x29, r24	; 41
 9f4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 9f6:	00 fe       	sbrs	r0, 0
 9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <__vector_10+0x6c>
 9fa:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 9fc:	80 93 12 01 	sts	0x0112, r24
 a00:	f8 db       	rcall	.-2064   	; 0x1f2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 a02:	04 c0       	rjmp	.+8      	; 0xa0c <__vector_10+0x84>
 a04:	19 bc       	out	0x29, r1	; 41
 a06:	10 92 12 01 	sts	0x0112, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a0a:	f9 db       	rcall	.-2062   	; 0x1fe <EVENT_USB_Device_Disconnect>
 a0c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 a10:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a12:	18 c0       	rjmp	.+48     	; 0xa44 <__vector_10+0xbc>
 a14:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a18:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a1a:	14 c0       	rjmp	.+40     	; 0xa44 <__vector_10+0xbc>
 a1c:	80 91 e2 00 	lds	r24, 0x00E2
 a20:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a22:	80 93 e2 00 	sts	0x00E2, r24
 a26:	80 91 e2 00 	lds	r24, 0x00E2
 a2a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a2c:	80 93 e2 00 	sts	0x00E2, r24
 a30:	80 91 d8 00 	lds	r24, 0x00D8
 a34:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a36:	80 93 d8 00 	sts	0x00D8, r24
 a3a:	19 bc       	out	0x29, r1	; 41
 a3c:	85 e0       	ldi	r24, 0x05	; 5
 a3e:	80 93 12 01 	sts	0x0112, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a42:	bd d1       	rcall	.+890    	; 0xdbe <USB_Event_Stub>
 a44:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 a48:	84 ff       	sbrs	r24, 4
 a4a:	2f c0       	rjmp	.+94     	; 0xaaa <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a4c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a50:	84 ff       	sbrs	r24, 4
 a52:	2b c0       	rjmp	.+86     	; 0xaaa <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a54:	8c e0       	ldi	r24, 0x0C	; 12
 a56:	89 bd       	out	0x29, r24	; 41
 a58:	8e e0       	ldi	r24, 0x0E	; 14
 a5a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a5c:	09 b4       	in	r0, 0x29	; 41
 a5e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a60:	fd cf       	rjmp	.-6      	; 0xa5c <__vector_10+0xd4>
 a62:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a66:	8f 7d       	andi	r24, 0xDF	; 223
 a68:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a6c:	80 91 e1 00 	lds	r24, 0x00E1
 a70:	8f 7e       	andi	r24, 0xEF	; 239
 a72:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a76:	80 91 e2 00 	lds	r24, 0x00E2
 a7a:	8f 7e       	andi	r24, 0xEF	; 239
 a7c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a80:	80 91 e2 00 	lds	r24, 0x00E2
 a84:	81 60       	ori	r24, 0x01	; 1
 a86:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a8a:	80 91 0e 01 	lds	r24, 0x010E
 a8e:	88 23       	and	r24, r24
 a90:	11 f0       	breq	.+4      	; 0xa96 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a92:	84 e0       	ldi	r24, 0x04	; 4
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <__vector_10+0x11c>
 a96:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 a9a:	87 ff       	sbrs	r24, 7
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	80 93 12 01 	sts	0x0112, r24
 aa8:	8a d1       	rcall	.+788    	; 0xdbe <USB_Event_Stub>
 aaa:	80 91 e1 00 	lds	r24, 0x00E1
 aae:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ab0:	22 c0       	rjmp	.+68     	; 0xaf6 <__vector_10+0x16e>
 ab2:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 ab6:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 ab8:	1e c0       	rjmp	.+60     	; 0xaf6 <__vector_10+0x16e>
 aba:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 abe:	87 7f       	andi	r24, 0xF7	; 247
 ac0:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 ac4:	82 e0       	ldi	r24, 0x02	; 2
 ac6:	80 93 12 01 	sts	0x0112, r24
 aca:	10 92 0e 01 	sts	0x010E, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 ace:	80 91 e1 00 	lds	r24, 0x00E1
 ad2:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 ad4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 ad8:	80 91 e2 00 	lds	r24, 0x00E2
 adc:	8e 7f       	andi	r24, 0xFE	; 254
 ade:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ae2:	80 91 e2 00 	lds	r24, 0x00E2
 ae6:	80 61       	ori	r24, 0x10	; 16
 ae8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 aec:	42 e0       	ldi	r20, 0x02	; 2
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	64 de       	rcall	.-824    	; 0x7bc <Endpoint_ConfigureEndpoint_Prv>
 af4:	64 d1       	rcall	.+712    	; 0xdbe <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	bf 91       	pop	r27
 afc:	af 91       	pop	r26
 afe:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b00:	8f 91       	pop	r24
 b02:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b04:	6f 91       	pop	r22
 b06:	5f 91       	pop	r21
 b08:	4f 91       	pop	r20
 b0a:	3f 91       	pop	r19
 b0c:	2f 91       	pop	r18
 b0e:	0f 90       	pop	r0
 b10:	0b be       	out	0x3b, r0	; 59
 b12:	0f 90       	pop	r0
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	0f 90       	pop	r0
 b18:	1f 90       	pop	r1
 b1a:	18 95       	reti

00000b1c <USB_Device_ProcessControlRequest>:
 b1c:	1f 93       	push	r17
 b1e:	cf 93       	push	r28
 b20:	df 93       	push	r29
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
 b26:	aa 97       	sbiw	r28, 0x2a	; 42
 b28:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b2a:	f8 94       	cli
 b2c:	de bf       	out	0x3e, r29	; 62
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	cd bf       	out	0x3d, r28	; 61
 b32:	e3 e1       	ldi	r30, 0x13	; 19
 b34:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b36:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b3a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b3c:	21 e0       	ldi	r18, 0x01	; 1
 b3e:	eb 31       	cpi	r30, 0x1B	; 27
 b40:	f2 07       	cpc	r31, r18
 b42:	c9 f7       	brne	.-14     	; 0xb36 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b44:	ca db       	rcall	.-2156   	; 0x2da <EVENT_USB_Device_ControlRequest>
 b46:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b4a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 b4c:	20 c1       	rjmp	.+576    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 b4e:	90 91 13 01 	lds	r25, 0x0113
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b52:	80 91 14 01 	lds	r24, 0x0114

		switch (USB_ControlRequest.bRequest)
 b56:	85 30       	cpi	r24, 0x05	; 5
 b58:	09 f4       	brne	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x40>
 b5a:	77 c0       	rjmp	.+238    	; 0xc4a <USB_Device_ProcessControlRequest+0x12e>
 b5c:	30 f4       	brcc	.+12     	; 0xb6a <USB_Device_ProcessControlRequest+0x4e>
 b5e:	81 30       	cpi	r24, 0x01	; 1
 b60:	81 f1       	breq	.+96     	; 0xbc2 <USB_Device_ProcessControlRequest+0xa6>
 b62:	68 f0       	brcs	.+26     	; 0xb7e <USB_Device_ProcessControlRequest+0x62>
 b64:	83 30       	cpi	r24, 0x03	; 3
 b66:	69 f1       	breq	.+90     	; 0xbc2 <USB_Device_ProcessControlRequest+0xa6>
 b68:	12 c1       	rjmp	.+548    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 b6a:	88 30       	cpi	r24, 0x08	; 8
 b6c:	09 f4       	brne	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x54>
 b6e:	e1 c0       	rjmp	.+450    	; 0xd32 <USB_Device_ProcessControlRequest+0x216>
 b70:	89 30       	cpi	r24, 0x09	; 9
 b72:	09 f4       	brne	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x5a>
 b74:	f0 c0       	rjmp	.+480    	; 0xd56 <USB_Device_ProcessControlRequest+0x23a>
 b76:	86 30       	cpi	r24, 0x06	; 6
 b78:	09 f0       	breq	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x60>
 b7a:	09 c1       	rjmp	.+530    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 b7c:	88 c0       	rjmp	.+272    	; 0xc8e <USB_Device_ProcessControlRequest+0x172>
 b7e:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b80:	81 f0       	breq	.+32     	; 0xba2 <USB_Device_ProcessControlRequest+0x86>
 b82:	92 38       	cpi	r25, 0x82	; 130
 b84:	09 f0       	breq	.+2      	; 0xb88 <USB_Device_ProcessControlRequest+0x6c>
 b86:	03 c1       	rjmp	.+518    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 b88:	80 91 17 01 	lds	r24, 0x0117
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b8c:	8f 70       	andi	r24, 0x0F	; 15
 b8e:	80 93 e9 00 	sts	0x00E9, r24
 b92:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b96:	85 fb       	bst	r24, 5
 b98:	88 27       	eor	r24, r24
 b9a:	80 f9       	bld	r24, 0
 b9c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ba0:	06 c0       	rjmp	.+12     	; 0xbae <USB_Device_ProcessControlRequest+0x92>
 ba2:	80 91 0f 01 	lds	r24, 0x010F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 ba6:	90 91 10 01 	lds	r25, 0x0110
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 baa:	91 11       	cpse	r25, r1
 bac:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 bae:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb2:	97 7f       	andi	r25, 0xF7	; 247
 bb4:	90 93 e8 00 	sts	0x00E8, r25
 bb8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 bbc:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 bc0:	c3 c0       	rjmp	.+390    	; 0xd48 <USB_Device_ProcessControlRequest+0x22c>
 bc2:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bc4:	2d 7f       	andi	r18, 0xFD	; 253
 bc6:	09 f0       	breq	.+2      	; 0xbca <USB_Device_ProcessControlRequest+0xae>
 bc8:	e2 c0       	rjmp	.+452    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 bca:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 bcc:	19 f0       	breq	.+6      	; 0xbd4 <USB_Device_ProcessControlRequest+0xb8>
 bce:	92 30       	cpi	r25, 0x02	; 2
 bd0:	61 f0       	breq	.+24     	; 0xbea <USB_Device_ProcessControlRequest+0xce>
 bd2:	dd c0       	rjmp	.+442    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 bd4:	90 91 15 01 	lds	r25, 0x0115
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bd8:	91 30       	cpi	r25, 0x01	; 1
 bda:	09 f0       	breq	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0xc2>
 bdc:	d8 c0       	rjmp	.+432    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 bde:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 be0:	09 f0       	breq	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0xc8>
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	90 93 10 01 	sts	0x0110, r25
 be8:	2a c0       	rjmp	.+84     	; 0xc3e <USB_Device_ProcessControlRequest+0x122>
 bea:	90 91 15 01 	lds	r25, 0x0115

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 bee:	91 11       	cpse	r25, r1
 bf0:	26 c0       	rjmp	.+76     	; 0xc3e <USB_Device_ProcessControlRequest+0x122>
 bf2:	20 91 17 01 	lds	r18, 0x0117
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bf6:	2f 70       	andi	r18, 0x0F	; 15
 bf8:	09 f4       	brne	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 bfa:	c9 c0       	rjmp	.+402    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 bfc:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c00:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c04:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c06:	1b c0       	rjmp	.+54     	; 0xc3e <USB_Device_ProcessControlRequest+0x122>
 c08:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c0a:	21 f4       	brne	.+8      	; 0xc14 <USB_Device_ProcessControlRequest+0xf8>
 c0c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c10:	80 62       	ori	r24, 0x20	; 32
 c12:	13 c0       	rjmp	.+38     	; 0xc3a <USB_Device_ProcessControlRequest+0x11e>
 c14:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c18:	80 61       	ori	r24, 0x10	; 16
 c1a:	80 93 eb 00 	sts	0x00EB, r24
 c1e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	02 2e       	mov	r0, r18
 c24:	01 c0       	rjmp	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x10c>
 c26:	88 0f       	add	r24, r24
 c28:	0a 94       	dec	r0
 c2a:	ea f7       	brpl	.-6      	; 0xc26 <USB_Device_ProcessControlRequest+0x10a>
 c2c:	80 93 ea 00 	sts	0x00EA, r24
 c30:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 c34:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c38:	88 60       	ori	r24, 0x08	; 8
 c3a:	80 93 eb 00 	sts	0x00EB, r24
 c3e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c42:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c46:	87 7f       	andi	r24, 0xF7	; 247
 c48:	82 c0       	rjmp	.+260    	; 0xd4e <USB_Device_ProcessControlRequest+0x232>
 c4a:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c4c:	a0 c0       	rjmp	.+320    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 c4e:	10 91 15 01 	lds	r17, 0x0115
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c52:	1f 77       	andi	r17, 0x7F	; 127
 c54:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c58:	80 78       	andi	r24, 0x80	; 128
 c5a:	81 2b       	or	r24, r17
 c5c:	80 93 e3 00 	sts	0x00E3, r24
 c60:	80 91 e8 00 	lds	r24, 0x00E8
 c64:	87 7f       	andi	r24, 0xF7	; 247
 c66:	80 93 e8 00 	sts	0x00E8, r24
 c6a:	dd dd       	rcall	.-1094   	; 0x826 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c6c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c70:	80 ff       	sbrs	r24, 0
 c72:	fc cf       	rjmp	.-8      	; 0xc6c <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 c74:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 c78:	80 68       	ori	r24, 0x80	; 128
 c7a:	80 93 e3 00 	sts	0x00E3, r24
 c7e:	11 23       	and	r17, r17
 c80:	11 f0       	breq	.+4      	; 0xc86 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	01 c0       	rjmp	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x16c>
 c86:	82 e0       	ldi	r24, 0x02	; 2
 c88:	80 93 12 01 	sts	0x0112, r24
 c8c:	80 c0       	rjmp	.+256    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 c8e:	90 58       	subi	r25, 0x80	; 128
 c90:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c92:	08 f0       	brcs	.+2      	; 0xc96 <USB_Device_ProcessControlRequest+0x17a>
 c94:	7c c0       	rjmp	.+248    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 c96:	80 91 15 01 	lds	r24, 0x0115
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c9a:	90 91 16 01 	lds	r25, 0x0116
 c9e:	8c 3d       	cpi	r24, 0xDC	; 220
 ca0:	23 e0       	ldi	r18, 0x03	; 3
 ca2:	92 07       	cpc	r25, r18
 ca4:	71 f5       	brne	.+92     	; 0xd02 <USB_Device_ProcessControlRequest+0x1e6>
 ca6:	83 e0       	ldi	r24, 0x03	; 3
 ca8:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 caa:	8a e2       	ldi	r24, 0x2A	; 42
 cac:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 cae:	4f b7       	in	r20, 0x3f	; 63
 cb0:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 cb2:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 cb4:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cb6:	20 e0       	ldi	r18, 0x00	; 0
 cb8:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cba:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 cbc:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	50 93 57 00 	sts	0x0057, r21
 cc4:	e4 91       	lpm	r30, Z
 cc6:	20 ff       	sbrs	r18, 0
 cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 cca:	e2 95       	swap	r30
 ccc:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 cce:	3f 5f       	subi	r19, 0xFF	; 255
 cd0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 cd2:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	ea 30       	cpi	r30, 0x0A	; 10
 cd8:	10 f0       	brcs	.+4      	; 0xcde <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 cda:	c7 96       	adiw	r24, 0x37	; 55
 cdc:	01 c0       	rjmp	.+2      	; 0xce0 <USB_Device_ProcessControlRequest+0x1c4>
 cde:	c0 96       	adiw	r24, 0x30	; 48
 ce0:	8d 93       	st	X+, r24
 ce2:	9d 93       	st	X+, r25
 ce4:	2f 5f       	subi	r18, 0xFF	; 255
 ce6:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ce8:	49 f7       	brne	.-46     	; 0xcbc <USB_Device_ProcessControlRequest+0x1a0>
 cea:	4f bf       	out	0x3f, r20	; 63
 cec:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf0:	87 7f       	andi	r24, 0xF7	; 247
 cf2:	80 93 e8 00 	sts	0x00E8, r24
 cf6:	6a e2       	ldi	r22, 0x2A	; 42
 cf8:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cfa:	ce 01       	movw	r24, r28
 cfc:	01 96       	adiw	r24, 0x01	; 1
 cfe:	a1 dc       	rcall	.-1726   	; 0x642 <Endpoint_Write_Control_Stream_LE>
 d00:	12 c0       	rjmp	.+36     	; 0xd26 <USB_Device_ProcessControlRequest+0x20a>
 d02:	ae 01       	movw	r20, r28
 d04:	4f 5f       	subi	r20, 0xFF	; 255
 d06:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d08:	60 91 17 01 	lds	r22, 0x0117
 d0c:	0f dc       	rcall	.-2018   	; 0x52c <CALLBACK_USB_GetDescriptor>
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	09 f4       	brne	.+2      	; 0xd14 <USB_Device_ProcessControlRequest+0x1f8>
 d12:	3d c0       	rjmp	.+122    	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 d14:	20 91 e8 00 	lds	r18, 0x00E8
 d18:	27 7f       	andi	r18, 0xF7	; 247
 d1a:	20 93 e8 00 	sts	0x00E8, r18
 d1e:	bc 01       	movw	r22, r24
 d20:	89 81       	ldd	r24, Y+1	; 0x01
 d22:	9a 81       	ldd	r25, Y+2	; 0x02
 d24:	eb dc       	rcall	.-1578   	; 0x6fc <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d26:	80 91 e8 00 	lds	r24, 0x00E8
 d2a:	8b 77       	andi	r24, 0x7B	; 123
 d2c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d30:	2e c0       	rjmp	.+92     	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 d32:	90 38       	cpi	r25, 0x80	; 128
 d34:	61 f5       	brne	.+88     	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 d36:	80 91 e8 00 	lds	r24, 0x00E8
 d3a:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d3c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d40:	80 91 0e 01 	lds	r24, 0x010E
 d44:	80 93 f1 00 	sts	0x00F1, r24
 d48:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d4c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d4e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d52:	69 dd       	rcall	.-1326   	; 0x826 <Endpoint_ClearStatusStage>
 d54:	1c c0       	rjmp	.+56     	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 d56:	91 11       	cpse	r25, r1
 d58:	1a c0       	rjmp	.+52     	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
 d5a:	90 91 15 01 	lds	r25, 0x0115
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d5e:	92 30       	cpi	r25, 0x02	; 2
 d60:	b0 f4       	brcc	.+44     	; 0xd8e <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d62:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d66:	87 7f       	andi	r24, 0xF7	; 247
 d68:	80 93 e8 00 	sts	0x00E8, r24
 d6c:	90 93 0e 01 	sts	0x010E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d70:	5a dd       	rcall	.-1356   	; 0x826 <Endpoint_ClearStatusStage>
 d72:	80 91 0e 01 	lds	r24, 0x010E
 d76:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d78:	04 c0       	rjmp	.+8      	; 0xd82 <USB_Device_ProcessControlRequest+0x266>
 d7a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 d7e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 d80:	02 c0       	rjmp	.+4      	; 0xd86 <USB_Device_ProcessControlRequest+0x26a>
 d82:	84 e0       	ldi	r24, 0x04	; 4
 d84:	01 c0       	rjmp	.+2      	; 0xd88 <USB_Device_ProcessControlRequest+0x26c>
 d86:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d88:	80 93 12 01 	sts	0x0112, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d8c:	3a da       	rcall	.-2956   	; 0x202 <EVENT_USB_Device_ConfigurationChanged>
 d8e:	80 91 e8 00 	lds	r24, 0x00E8
 d92:	83 ff       	sbrs	r24, 3
 d94:	0a c0       	rjmp	.+20     	; 0xdaa <USB_Device_ProcessControlRequest+0x28e>
 d96:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d9a:	87 7f       	andi	r24, 0xF7	; 247
 d9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 da0:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 da4:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 da6:	80 93 eb 00 	sts	0x00EB, r24
 daa:	aa 96       	adiw	r28, 0x2a	; 42
 dac:	0f b6       	in	r0, 0x3f	; 63
 dae:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 db0:	de bf       	out	0x3e, r29	; 62
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	cd bf       	out	0x3d, r28	; 61
 db6:	df 91       	pop	r29
 db8:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 dba:	1f 91       	pop	r17
 dbc:	08 95       	ret

00000dbe <USB_Event_Stub>:
 dbe:	08 95       	ret

00000dc0 <USB_USBTask>:
 dc0:	cf 93       	push	r28
 dc2:	80 91 12 01 	lds	r24, 0x0112
 dc6:	88 23       	and	r24, r24
 dc8:	a9 f0       	breq	.+42     	; 0xdf4 <USB_USBTask+0x34>
 dca:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 dce:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 dd0:	90 91 ec 00 	lds	r25, 0x00EC
 dd4:	90 ff       	sbrs	r25, 0
 dd6:	02 c0       	rjmp	.+4      	; 0xddc <USB_USBTask+0x1c>
 dd8:	90 e8       	ldi	r25, 0x80	; 128
 dda:	01 c0       	rjmp	.+2      	; 0xdde <USB_USBTask+0x1e>
 ddc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 dde:	c9 2f       	mov	r28, r25
 de0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 de2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 de6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 dea:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 dec:	97 de       	rcall	.-722    	; 0xb1c <USB_Device_ProcessControlRequest>
 dee:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 df0:	c0 93 e9 00 	sts	0x00E9, r28
 df4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 df6:	08 95       	ret

00000df8 <memcmp>:
 df8:	fb 01       	movw	r30, r22
 dfa:	dc 01       	movw	r26, r24
 dfc:	04 c0       	rjmp	.+8      	; 0xe06 <memcmp+0xe>
 dfe:	8d 91       	ld	r24, X+
 e00:	01 90       	ld	r0, Z+
 e02:	80 19       	sub	r24, r0
 e04:	21 f4       	brne	.+8      	; 0xe0e <memcmp+0x16>
 e06:	41 50       	subi	r20, 0x01	; 1
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	c8 f7       	brcc	.-14     	; 0xdfe <memcmp+0x6>
 e0c:	88 1b       	sub	r24, r24
 e0e:	99 0b       	sbc	r25, r25
 e10:	08 95       	ret

00000e12 <_exit>:
 e12:	f8 94       	cli

00000e14 <__stop_program>:
 e14:	ff cf       	rjmp	.-2      	; 0xe14 <__stop_program>

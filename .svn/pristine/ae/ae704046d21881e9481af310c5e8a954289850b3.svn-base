
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000f06  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080016e  0080016e  00001008  2**0
                  ALLOC
  3 .stab         00000fc0  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df3  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002dbb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000658  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a5ac  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002afa  00000000  00000000  0000d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ffb  00000000  00000000  000104ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f28  00000000  00000000  000144c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003eee  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006620  00000000  00000000  000192de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f8  00000000  00000000  0001f8fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
   2:	00 00       	nop
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	29 c3       	rjmp	.+1618   	; 0x67c <__vector_10>
  2a:	00 00       	nop
  2c:	f6 c3       	rjmp	.+2028   	; 0x81a <__vector_11>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop
  74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
  76:	00 00       	nop
  78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
  82:	00 00       	nop
  84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
  86:	00 00       	nop
  88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	68 c0       	rjmp	.+208    	; 0x15e <__bad_interrupt>
  8e:	00 00       	nop
  90:	66 c0       	rjmp	.+204    	; 0x15e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	64 c0       	rjmp	.+200    	; 0x15e <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000b6 <ManufacturerString>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d0 <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	04 03 09 04                                         ....

000000d4 <ConfigurationDescriptor>:
  d4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  e4:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 104:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000112 <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 112:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 122:	dc 01                                               ..

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 12c:	de bf       	out	0x3e, r29	; 62
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	e6 e0       	ldi	r30, 0x06	; 6
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 138:	ff e0       	ldi	r31, 0x0F	; 15
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	ae 36       	cpi	r26, 0x6E	; 110
 146:	b1 07       	cpc	r27, r17
				ReportData     += 4;
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	ae e6       	ldi	r26, 0x6E	; 110
				break;
 14e:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	aa 38       	cpi	r26, 0x8A	; 138
 156:	b1 07       	cpc	r27, r17
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	5c d0       	rcall	.+184    	; 0x214 <main>
 15c:	d2 c6       	rjmp	.+3492   	; 0xf02 <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <LEDs_SetAllLEDs>:
 160:	9b b1       	in	r25, 0x0b	; 11
				ReportSize     -= 2;
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	98 2b       	or	r25, r24
				ReportData     += 2;
 166:	9b b9       	out	0x0b, r25	; 11
 168:	08 95       	ret

0000016a <SetupHardware>:
 16a:	84 b7       	in	r24, 0x34	; 52
				break;
 16c:	87 7f       	andi	r24, 0xF7	; 247

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	84 bf       	out	0x34, r24	; 52
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	80 93 60 00 	sts	0x0060, r24
				ReportSize     -= 1;
 17a:	10 92 60 00 	sts	0x0060, r1
				ReportData     += 1;
 17e:	0f be       	out	0x3f, r0	; 63
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	80 e8       	ldi	r24, 0x80	; 128
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	80 93 61 00 	sts	0x0061, r24
 18c:	90 93 61 00 	sts	0x0061, r25
 190:	0f be       	out	0x3f, r0	; 63
 192:	84 b1       	in	r24, 0x04	; 4
 194:	8f 71       	andi	r24, 0x1F	; 31
 196:	84 b9       	out	0x04, r24	; 4
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	8f 7c       	andi	r24, 0xCF	; 207
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 6e       	ori	r24, 0xE0	; 224
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8e b1       	in	r24, 0x0e	; 14
 1a6:	80 63       	ori	r24, 0x30	; 48
 1a8:	8e b9       	out	0x0e, r24	; 14

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	80 6f       	ori	r24, 0xF0	; 240
 1ae:	8a b9       	out	0x0a, r24	; 10
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
				break;
 1b4:	8b b9       	out	0x0b, r24	; 11
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	47 c2       	rjmp	.+1166   	; 0x646 <USB_Init>

000001b8 <CheckJoystickMovement>:
 1b8:	93 b1       	in	r25, 0x03	; 3
 1ba:	8c b1       	in	r24, 0x0c	; 12
 1bc:	80 95       	com	r24
 1be:	80 73       	andi	r24, 0x30	; 48
 1c0:	86 95       	lsr	r24
 1c2:	90 95       	com	r25
 1c4:	90 7e       	andi	r25, 0xE0	; 224
 1c6:	89 2b       	or	r24, r25
 1c8:	87 fd       	sbrc	r24, 7
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <CheckJoystickMovement+0x2a>
 1cc:	84 fd       	sbrc	r24, 4
 1ce:	0c c0       	rjmp	.+24     	; 0x1e8 <CheckJoystickMovement+0x30>
 1d0:	86 fd       	sbrc	r24, 6
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <CheckJoystickMovement+0x36>
 1d4:	83 fd       	sbrc	r24, 3
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <CheckJoystickMovement+0x3c>
 1d8:	85 fd       	sbrc	r24, 5
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <CheckJoystickMovement+0x42>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	10 92 6e 01 	sts	0x016E, r1
 1e0:	08 95       	ret
 1e2:	8f e5       	ldi	r24, 0x5F	; 95
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0b c0       	rjmp	.+22     	; 0x1fe <CheckJoystickMovement+0x46>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	8f e4       	ldi	r24, 0x4F	; 79
 1ea:	91 e0       	ldi	r25, 0x01	; 1
				break;
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <CheckJoystickMovement+0x46>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	8f e3       	ldi	r24, 0x3F	; 63
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <CheckJoystickMovement+0x46>
 1f4:	8e e2       	ldi	r24, 0x2E	; 46
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <CheckJoystickMovement+0x46>
 1fa:	8b e1       	ldi	r24, 0x1B	; 27
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	20 91 6e 01 	lds	r18, 0x016E
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	21 11       	cpse	r18, r1
 204:	06 c0       	rjmp	.+12     	; 0x212 <CheckJoystickMovement+0x5a>
				break;
 206:	21 e0       	ldi	r18, 0x01	; 1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	20 93 6e 01 	sts	0x016E, r18
 20c:	6f e6       	ldi	r22, 0x6F	; 111
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	4d c6       	rjmp	.+3226   	; 0xeac <fputs>
 212:	08 95       	ret

00000214 <main>:
 214:	aa df       	rcall	.-172    	; 0x16a <SetupHardware>
 216:	6f e6       	ldi	r22, 0x6F	; 111
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	82 d5       	rcall	.+2820   	; 0xd24 <CDC_Device_CreateStream>
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	9e df       	rcall	.-196    	; 0x160 <LEDs_SetAllLEDs>
 224:	78 94       	sei
 226:	c8 df       	rcall	.-112    	; 0x1b8 <CheckJoystickMovement>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	41 d5       	rcall	.+2690   	; 0xcb0 <CDC_Device_ReceiveByte>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	28 d5       	rcall	.+2640   	; 0xc84 <CDC_Device_USBTask>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	83 d4       	rcall	.+2310   	; 0xb3c <USB_USBTask>
 236:	f7 cf       	rjmp	.-18     	; 0x226 <main+0x12>

00000238 <EVENT_USB_Device_Connect>:
 238:	80 ea       	ldi	r24, 0xA0	; 160
 23a:	92 cf       	rjmp	.-220    	; 0x160 <LEDs_SetAllLEDs>

0000023c <EVENT_USB_Device_Disconnect>:
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	90 cf       	rjmp	.-224    	; 0x160 <LEDs_SetAllLEDs>

00000240 <EVENT_USB_Device_ConfigurationChanged>:
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	97 d4       	rcall	.+2350   	; 0xb74 <CDC_Device_ConfigureEndpoints>
 246:	88 23       	and	r24, r24
 248:	11 f0       	breq	.+4      	; 0x24e <EVENT_USB_Device_ConfigurationChanged+0xe>
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	01 c0       	rjmp	.+2      	; 0x250 <EVENT_USB_Device_ConfigurationChanged+0x10>
 24e:	80 e9       	ldi	r24, 0x90	; 144
 250:	87 cf       	rjmp	.-242    	; 0x160 <LEDs_SetAllLEDs>

00000252 <EVENT_USB_Device_ControlRequest>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	7a c5       	rjmp	.+2804   	; 0xd4c <CDC_Device_ProcessControlRequest>

00000258 <CALLBACK_USB_GetDescriptor>:
 258:	29 2f       	mov	r18, r25
 25a:	33 27       	eor	r19, r19
 25c:	22 30       	cpi	r18, 0x02	; 2
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	31 05       	cpc	r19, r1
 260:	59 f0       	breq	.+22     	; 0x278 <CALLBACK_USB_GetDescriptor+0x20>
 262:	23 30       	cpi	r18, 0x03	; 3
 264:	31 05       	cpc	r19, r1
 266:	69 f0       	breq	.+26     	; 0x282 <CALLBACK_USB_GetDescriptor+0x2a>
 268:	21 30       	cpi	r18, 0x01	; 1
 26a:	31 05       	cpc	r19, r1
 26c:	f9 f4       	brne	.+62     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x54>
 26e:	82 e1       	ldi	r24, 0x12	; 18
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	90 e0       	ldi	r25, 0x00	; 0
				break;
 272:	22 e1       	ldi	r18, 0x12	; 18

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	31 e0       	ldi	r19, 0x01	; 1
 276:	1e c0       	rjmp	.+60     	; 0x2b4 <CALLBACK_USB_GetDescriptor+0x5c>
 278:	8e e3       	ldi	r24, 0x3E	; 62
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	24 ed       	ldi	r18, 0xD4	; 212
 27e:	30 e0       	ldi	r19, 0x00	; 0
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <CALLBACK_USB_GetDescriptor+0x5c>
 282:	99 27       	eor	r25, r25
				break;
 284:	81 30       	cpi	r24, 0x01	; 1

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	91 05       	cpc	r25, r1
 288:	41 f0       	breq	.+16     	; 0x29a <CALLBACK_USB_GetDescriptor+0x42>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	91 05       	cpc	r25, r1
 28e:	41 f0       	breq	.+16     	; 0x2a0 <CALLBACK_USB_GetDescriptor+0x48>
				break;
 290:	89 2b       	or	r24, r25

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	61 f4       	brne	.+24     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x54>
 294:	e0 ed       	ldi	r30, 0xD0	; 208
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x4c>
 29a:	e6 eb       	ldi	r30, 0xB6	; 182
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x4c>
				break;
 2a0:	e8 e9       	ldi	r30, 0x98	; 152

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	84 91       	lpm	r24, Z
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9f 01       	movw	r18, r30
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <CALLBACK_USB_GetDescriptor+0x5c>
				break;
 2ac:	80 e0       	ldi	r24, 0x00	; 0

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	fa 01       	movw	r30, r20
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
 2ba:	08 95       	ret

000002bc <Endpoint_Write_Control_Stream_LE>:
				break;
 2bc:	20 91 88 01 	lds	r18, 0x0188
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	30 91 89 01 	lds	r19, 0x0189
 2c4:	26 17       	cp	r18, r22
 2c6:	37 07       	cpc	r19, r23
 2c8:	48 f0       	brcs	.+18     	; 0x2dc <Endpoint_Write_Control_Stream_LE+0x20>
 2ca:	61 15       	cp	r22, r1
				break;
 2cc:	71 05       	cpc	r23, r1
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	39 f4       	brne	.+14     	; 0x2de <Endpoint_Write_Control_Stream_LE+0x22>
 2d0:	20 91 e8 00 	lds	r18, 0x00E8
				break;
 2d4:	2e 77       	andi	r18, 0x7E	; 126

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	20 93 e8 00 	sts	0x00E8, r18
 2da:	01 c0       	rjmp	.+2      	; 0x2de <Endpoint_Write_Control_Stream_LE+0x22>

				if (ParserData->UsingReportIDs)
 2dc:	b9 01       	movw	r22, r18
 2de:	fc 01       	movw	r30, r24
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	61 15       	cp	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	99 f1       	breq	.+102    	; 0x34e <Endpoint_Write_Control_Stream_LE+0x92>
 2e8:	80 91 81 01 	lds	r24, 0x0181
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	88 23       	and	r24, r24
 2ee:	e9 f1       	breq	.+122    	; 0x36a <Endpoint_Write_Control_Stream_LE+0xae>
 2f0:	85 30       	cpi	r24, 0x05	; 5
 2f2:	e9 f1       	breq	.+122    	; 0x36e <Endpoint_Write_Control_Stream_LE+0xb2>
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
 2f8:	83 fd       	sbrc	r24, 3
 2fa:	3b c0       	rjmp	.+118    	; 0x372 <Endpoint_Write_Control_Stream_LE+0xb6>
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
 300:	82 ff       	sbrs	r24, 2
 302:	06 c0       	rjmp	.+12     	; 0x310 <Endpoint_Write_Control_Stream_LE+0x54>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	80 91 e8 00 	lds	r24, 0x00E8
 308:	82 ff       	sbrs	r24, 2
 30a:	24 c0       	rjmp	.+72     	; 0x354 <Endpoint_Write_Control_Stream_LE+0x98>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
 310:	80 91 e8 00 	lds	r24, 0x00E8
 314:	80 ff       	sbrs	r24, 0
 316:	e5 cf       	rjmp	.-54     	; 0x2e2 <Endpoint_Write_Control_Stream_LE+0x26>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	80 91 f2 00 	lds	r24, 0x00F2
 31c:	90 91 f3 00 	lds	r25, 0x00F3
 320:	61 15       	cp	r22, r1
 322:	71 05       	cpc	r23, r1
 324:	51 f0       	breq	.+20     	; 0x33a <Endpoint_Write_Control_Stream_LE+0x7e>
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	91 05       	cpc	r25, r1
 32a:	38 f4       	brcc	.+14     	; 0x33a <Endpoint_Write_Control_Stream_LE+0x7e>
 32c:	21 91       	ld	r18, Z+
 32e:	20 93 f1 00 	sts	0x00F1, r18
 332:	61 50       	subi	r22, 0x01	; 1
 334:	71 09       	sbc	r23, r1
 336:	01 96       	adiw	r24, 0x01	; 1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	f3 cf       	rjmp	.-26     	; 0x320 <Endpoint_Write_Control_Stream_LE+0x64>
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	08 97       	sbiw	r24, 0x08	; 8
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	09 f0       	breq	.+2      	; 0x342 <Endpoint_Write_Control_Stream_LE+0x86>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	80 91 e8 00 	lds	r24, 0x00E8
 346:	8e 77       	andi	r24, 0x7E	; 126
 348:	80 93 e8 00 	sts	0x00E8, r24
 34c:	ca cf       	rjmp	.-108    	; 0x2e2 <Endpoint_Write_Control_Stream_LE+0x26>
 34e:	21 11       	cpse	r18, r1
 350:	cb cf       	rjmp	.-106    	; 0x2e8 <Endpoint_Write_Control_Stream_LE+0x2c>
 352:	d8 cf       	rjmp	.-80     	; 0x304 <Endpoint_Write_Control_Stream_LE+0x48>
 354:	80 91 81 01 	lds	r24, 0x0181
 358:	88 23       	and	r24, r24
 35a:	39 f0       	breq	.+14     	; 0x36a <Endpoint_Write_Control_Stream_LE+0xae>
 35c:	85 30       	cpi	r24, 0x05	; 5
 35e:	39 f0       	breq	.+14     	; 0x36e <Endpoint_Write_Control_Stream_LE+0xb2>
 360:	80 91 e8 00 	lds	r24, 0x00E8
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	83 ff       	sbrs	r24, 3
 366:	ce cf       	rjmp	.-100    	; 0x304 <Endpoint_Write_Control_Stream_LE+0x48>
 368:	04 c0       	rjmp	.+8      	; 0x372 <Endpoint_Write_Control_Stream_LE+0xb6>
 36a:	82 e0       	ldi	r24, 0x02	; 2
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	08 95       	ret
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	08 95       	ret
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret

00000376 <Endpoint_Write_Control_PStream_LE>:
 376:	20 91 88 01 	lds	r18, 0x0188

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 37a:	30 91 89 01 	lds	r19, 0x0189
 37e:	26 17       	cp	r18, r22
 380:	37 07       	cpc	r19, r23
 382:	48 f0       	brcs	.+18     	; 0x396 <Endpoint_Write_Control_PStream_LE+0x20>
 384:	61 15       	cp	r22, r1
 386:	71 05       	cpc	r23, r1
				break;
 388:	39 f4       	brne	.+14     	; 0x398 <Endpoint_Write_Control_PStream_LE+0x22>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	20 91 e8 00 	lds	r18, 0x00E8
 38e:	2e 77       	andi	r18, 0x7E	; 126
 390:	20 93 e8 00 	sts	0x00E8, r18
 394:	01 c0       	rjmp	.+2      	; 0x398 <Endpoint_Write_Control_PStream_LE+0x22>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	b9 01       	movw	r22, r18
 398:	fc 01       	movw	r30, r24
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	61 15       	cp	r22, r1
 39e:	71 05       	cpc	r23, r1
 3a0:	b1 f1       	breq	.+108    	; 0x40e <Endpoint_Write_Control_PStream_LE+0x98>
 3a2:	80 91 81 01 	lds	r24, 0x0181
 3a6:	88 23       	and	r24, r24
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Endpoint_Write_Control_PStream_LE+0x36>
 3aa:	3f c0       	rjmp	.+126    	; 0x42a <Endpoint_Write_Control_PStream_LE+0xb4>
 3ac:	85 30       	cpi	r24, 0x05	; 5
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <Endpoint_Write_Control_PStream_LE+0x3c>
				break;
 3b0:	3e c0       	rjmp	.+124    	; 0x42e <Endpoint_Write_Control_PStream_LE+0xb8>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	80 91 e8 00 	lds	r24, 0x00E8
 3b6:	83 fd       	sbrc	r24, 3
 3b8:	3c c0       	rjmp	.+120    	; 0x432 <Endpoint_Write_Control_PStream_LE+0xbc>
 3ba:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	82 ff       	sbrs	r24, 2
 3c0:	06 c0       	rjmp	.+12     	; 0x3ce <Endpoint_Write_Control_PStream_LE+0x58>
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	82 ff       	sbrs	r24, 2
 3c8:	25 c0       	rjmp	.+74     	; 0x414 <Endpoint_Write_Control_PStream_LE+0x9e>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	80 91 e8 00 	lds	r24, 0x00E8
 3d2:	80 ff       	sbrs	r24, 0

					while (CurrCollectionPath->Parent != NULL)
 3d4:	e3 cf       	rjmp	.-58     	; 0x39c <Endpoint_Write_Control_PStream_LE+0x26>
 3d6:	80 91 f2 00 	lds	r24, 0x00F2
 3da:	90 91 f3 00 	lds	r25, 0x00F3
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3de:	61 15       	cp	r22, r1
 3e0:	71 05       	cpc	r23, r1
 3e2:	59 f0       	breq	.+22     	; 0x3fa <Endpoint_Write_Control_PStream_LE+0x84>
 3e4:	88 30       	cpi	r24, 0x08	; 8
 3e6:	91 05       	cpc	r25, r1
 3e8:	40 f4       	brcc	.+16     	; 0x3fa <Endpoint_Write_Control_PStream_LE+0x84>
 3ea:	24 91       	lpm	r18, Z
 3ec:	20 93 f1 00 	sts	0x00F1, r18
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	31 96       	adiw	r30, 0x01	; 1
 3f2:	61 50       	subi	r22, 0x01	; 1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	71 09       	sbc	r23, r1
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	f2 cf       	rjmp	.-28     	; 0x3de <Endpoint_Write_Control_PStream_LE+0x68>
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	08 97       	sbiw	r24, 0x08	; 8
 3fe:	09 f0       	breq	.+2      	; 0x402 <Endpoint_Write_Control_PStream_LE+0x8c>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	80 91 e8 00 	lds	r24, 0x00E8
 406:	8e 77       	andi	r24, 0x7E	; 126
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	80 93 e8 00 	sts	0x00E8, r24
 40c:	c7 cf       	rjmp	.-114    	; 0x39c <Endpoint_Write_Control_PStream_LE+0x26>
 40e:	21 11       	cpse	r18, r1
 410:	c8 cf       	rjmp	.-112    	; 0x3a2 <Endpoint_Write_Control_PStream_LE+0x2c>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	d7 cf       	rjmp	.-82     	; 0x3c2 <Endpoint_Write_Control_PStream_LE+0x4c>
 414:	80 91 81 01 	lds	r24, 0x0181
 418:	88 23       	and	r24, r24
 41a:	39 f0       	breq	.+14     	; 0x42a <Endpoint_Write_Control_PStream_LE+0xb4>
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	39 f0       	breq	.+14     	; 0x42e <Endpoint_Write_Control_PStream_LE+0xb8>

				if (UsageListSize)
 420:	80 91 e8 00 	lds	r24, 0x00E8
 424:	83 ff       	sbrs	r24, 3
 426:	cd cf       	rjmp	.-102    	; 0x3c2 <Endpoint_Write_Control_PStream_LE+0x4c>
 428:	04 c0       	rjmp	.+8      	; 0x432 <Endpoint_Write_Control_PStream_LE+0xbc>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	08 95       	ret
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	08 95       	ret
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret

00000436 <Endpoint_ConfigureEndpoint_Prv>:
 436:	98 2f       	mov	r25, r24
 438:	97 30       	cpi	r25, 0x07	; 7
 43a:	58 f5       	brcc	.+86     	; 0x492 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 43c:	90 93 e9 00 	sts	0x00E9, r25

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	98 17       	cp	r25, r24
 442:	39 f0       	breq	.+14     	; 0x452 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 444:	70 91 ec 00 	lds	r23, 0x00EC
 448:	20 91 ed 00 	lds	r18, 0x00ED
					  UsageList[i - 1] = UsageList[i];
 44c:	50 91 f0 00 	lds	r21, 0x00F0
 450:	03 c0       	rjmp	.+6      	; 0x458 <Endpoint_ConfigureEndpoint_Prv+0x22>
 452:	24 2f       	mov	r18, r20

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	76 2f       	mov	r23, r22
 456:	50 e0       	ldi	r21, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	21 ff       	sbrs	r18, 1
 45a:	19 c0       	rjmp	.+50     	; 0x48e <Endpoint_ConfigureEndpoint_Prv+0x58>
 45c:	30 91 eb 00 	lds	r19, 0x00EB
 460:	3e 7f       	andi	r19, 0xFE	; 254
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	30 93 eb 00 	sts	0x00EB, r19
 466:	30 91 ed 00 	lds	r19, 0x00ED
 46a:	3d 7f       	andi	r19, 0xFD	; 253
 46c:	30 93 ed 00 	sts	0x00ED, r19
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 470:	30 91 eb 00 	lds	r19, 0x00EB
 474:	31 60       	ori	r19, 0x01	; 1
 476:	30 93 eb 00 	sts	0x00EB, r19
 47a:	70 93 ec 00 	sts	0x00EC, r23
 47e:	20 93 ed 00 	sts	0x00ED, r18
 482:	50 93 f0 00 	sts	0x00F0, r21
 486:	20 91 ee 00 	lds	r18, 0x00EE
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	27 ff       	sbrs	r18, 7
 48c:	07 c0       	rjmp	.+14     	; 0x49c <Endpoint_ConfigureEndpoint_Prv+0x66>
 48e:	9f 5f       	subi	r25, 0xFF	; 255
 490:	d3 cf       	rjmp	.-90     	; 0x438 <Endpoint_ConfigureEndpoint_Prv+0x2>
 492:	8f 70       	andi	r24, 0x0F	; 15
 494:	80 93 e9 00 	sts	0x00E9, r24
 498:	81 e0       	ldi	r24, 0x01	; 1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	08 95       	ret
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret

000004a0 <Endpoint_ConfigureEndpointTable>:
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	06 2f       	mov	r16, r22
 4aa:	ec 01       	movw	r28, r24
				break;
 4ac:	10 e0       	ldi	r17, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	10 17       	cp	r17, r16
 4b0:	71 f1       	breq	.+92     	; 0x50e <Endpoint_ConfigureEndpointTable+0x6e>
 4b2:	98 81       	ld	r25, Y
 4b4:	99 23       	and	r25, r25
 4b6:	41 f1       	breq	.+80     	; 0x508 <Endpoint_ConfigureEndpointTable+0x68>
 4b8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ba:	e9 81       	ldd	r30, Y+1	; 0x01
 4bc:	fa 81       	ldd	r31, Y+2	; 0x02
 4be:	7b 81       	ldd	r23, Y+3	; 0x03
 4c0:	89 2f       	mov	r24, r25
 4c2:	8f 70       	andi	r24, 0x0F	; 15
 4c4:	87 30       	cpi	r24, 0x07	; 7
 4c6:	10 f0       	brcs	.+4      	; 0x4cc <Endpoint_ConfigureEndpointTable+0x2c>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	22 c0       	rjmp	.+68     	; 0x510 <Endpoint_ConfigureEndpointTable+0x70>
 4cc:	22 30       	cpi	r18, 0x02	; 2
 4ce:	10 f0       	brcs	.+4      	; 0x4d4 <Endpoint_ConfigureEndpointTable+0x34>
 4d0:	56 e0       	ldi	r21, 0x06	; 6
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <Endpoint_ConfigureEndpointTable+0x36>
 4d4:	52 e0       	ldi	r21, 0x02	; 2
 4d6:	28 e0       	ldi	r18, 0x08	; 8
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	2e 17       	cp	r18, r30
 4de:	3f 07       	cpc	r19, r31
 4e0:	20 f4       	brcc	.+8      	; 0x4ea <Endpoint_ConfigureEndpointTable+0x4a>
 4e2:	4f 5f       	subi	r20, 0xFF	; 255
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	f9 cf       	rjmp	.-14     	; 0x4dc <Endpoint_ConfigureEndpointTable+0x3c>
 4ea:	42 95       	swap	r20
 4ec:	40 7f       	andi	r20, 0xF0	; 240
 4ee:	45 2b       	or	r20, r21
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	69 2f       	mov	r22, r25
 4f2:	66 1f       	adc	r22, r22
 4f4:	66 27       	eor	r22, r22
 4f6:	66 1f       	adc	r22, r22
 4f8:	90 e4       	ldi	r25, 0x40	; 64
 4fa:	79 9f       	mul	r23, r25
 4fc:	90 01       	movw	r18, r0
 4fe:	11 24       	eor	r1, r1
 500:	62 2b       	or	r22, r18
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	99 df       	rcall	.-206    	; 0x436 <Endpoint_ConfigureEndpoint_Prv>
 504:	88 23       	and	r24, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	01 f3       	breq	.-64     	; 0x4c8 <Endpoint_ConfigureEndpointTable+0x28>
 508:	1f 5f       	subi	r17, 0xFF	; 255
 50a:	25 96       	adiw	r28, 0x05	; 5
 50c:	d0 cf       	rjmp	.-96     	; 0x4ae <Endpoint_ConfigureEndpointTable+0xe>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <Endpoint_ClearStatusStage>:
 51a:	80 91 82 01 	lds	r24, 0x0182

					if (UsageListSize)
 51e:	87 fd       	sbrc	r24, 7
 520:	05 c0       	rjmp	.+10     	; 0x52c <Endpoint_ClearStatusStage+0x12>
 522:	80 91 e8 00 	lds	r24, 0x00E8
 526:	80 ff       	sbrs	r24, 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	0e c0       	rjmp	.+28     	; 0x546 <Endpoint_ClearStatusStage+0x2c>
 52a:	12 c0       	rjmp	.+36     	; 0x550 <Endpoint_ClearStatusStage+0x36>
 52c:	80 91 e8 00 	lds	r24, 0x00E8
 530:	82 fd       	sbrc	r24, 2
 532:	05 c0       	rjmp	.+10     	; 0x53e <Endpoint_ClearStatusStage+0x24>
 534:	80 91 81 01 	lds	r24, 0x0181
 538:	81 11       	cpse	r24, r1
 53a:	f8 cf       	rjmp	.-16     	; 0x52c <Endpoint_ClearStatusStage+0x12>
 53c:	08 95       	ret

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	80 91 e8 00 	lds	r24, 0x00E8
 542:	8b 77       	andi	r24, 0x7B	; 123
 544:	08 c0       	rjmp	.+16     	; 0x556 <Endpoint_ClearStatusStage+0x3c>
 546:	80 91 81 01 	lds	r24, 0x0181
						  UsageList[i - 1] = UsageList[i];
 54a:	81 11       	cpse	r24, r1
 54c:	ea cf       	rjmp	.-44     	; 0x522 <Endpoint_ClearStatusStage+0x8>
 54e:	08 95       	ret
 550:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 554:	8e 77       	andi	r24, 0x7E	; 126
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	80 93 e8 00 	sts	0x00E8, r24
 55a:	08 95       	ret

0000055c <Endpoint_WaitUntilReady>:
 55c:	80 91 e4 00 	lds	r24, 0x00E4
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	90 91 e5 00 	lds	r25, 0x00E5
 564:	45 e6       	ldi	r20, 0x65	; 101
 566:	20 91 ec 00 	lds	r18, 0x00EC
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	20 ff       	sbrs	r18, 0
 56c:	21 c0       	rjmp	.+66     	; 0x5b0 <Endpoint_WaitUntilReady+0x54>
 56e:	20 91 e8 00 	lds	r18, 0x00E8
 572:	20 fd       	sbrc	r18, 0
 574:	21 c0       	rjmp	.+66     	; 0x5b8 <Endpoint_WaitUntilReady+0x5c>
 576:	20 91 81 01 	lds	r18, 0x0181
 57a:	22 23       	and	r18, r18
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	89 f0       	breq	.+34     	; 0x5a0 <Endpoint_WaitUntilReady+0x44>
 57e:	25 30       	cpi	r18, 0x05	; 5
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	89 f0       	breq	.+34     	; 0x5a4 <Endpoint_WaitUntilReady+0x48>
 582:	20 91 eb 00 	lds	r18, 0x00EB
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 586:	25 fd       	sbrc	r18, 5
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <Endpoint_WaitUntilReady+0x4c>
 58a:	20 91 e4 00 	lds	r18, 0x00E4
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	30 91 e5 00 	lds	r19, 0x00E5

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	28 17       	cp	r18, r24
 594:	39 07       	cpc	r19, r25
 596:	39 f3       	breq	.-50     	; 0x566 <Endpoint_WaitUntilReady+0xa>
 598:	41 50       	subi	r20, 0x01	; 1
 59a:	41 f0       	breq	.+16     	; 0x5ac <Endpoint_WaitUntilReady+0x50>
 59c:	c9 01       	movw	r24, r18
 59e:	e3 cf       	rjmp	.-58     	; 0x566 <Endpoint_WaitUntilReady+0xa>
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	08 95       	ret
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	08 95       	ret
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	84 e0       	ldi	r24, 0x04	; 4
 5ae:	08 95       	ret
 5b0:	20 91 e8 00 	lds	r18, 0x00E8
 5b4:	22 ff       	sbrs	r18, 2
 5b6:	df cf       	rjmp	.-66     	; 0x576 <Endpoint_WaitUntilReady+0x1a>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret

000005bc <USB_ResetInterface>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	4e d0       	rcall	.+156    	; 0x662 <USB_INT_DisableAllInterrupts>
 5c6:	55 d0       	rcall	.+170    	; 0x672 <USB_INT_ClearAllInterrupts>
 5c8:	c8 ed       	ldi	r28, 0xD8	; 216
 5ca:	d0 e0       	ldi	r29, 0x00	; 0
 5cc:	88 81       	ld	r24, Y
 5ce:	8f 77       	andi	r24, 0x7F	; 127
 5d0:	88 83       	st	Y, r24
 5d2:	88 81       	ld	r24, Y
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	88 83       	st	Y, r24
 5d8:	88 81       	ld	r24, Y
 5da:	8f 7d       	andi	r24, 0xDF	; 223
 5dc:	88 83       	st	Y, r24
 5de:	e7 ed       	ldi	r30, 0xD7	; 215
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	80 68       	ori	r24, 0x80	; 128
 5e6:	80 83       	st	Z, r24
 5e8:	19 bc       	out	0x29, r1	; 41
 5ea:	10 92 81 01 	sts	0x0181, r1
 5ee:	10 92 7d 01 	sts	0x017D, r1
 5f2:	10 92 7f 01 	sts	0x017F, r1

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f6:	10 92 7e 01 	sts	0x017E, r1
 5fa:	00 ee       	ldi	r16, 0xE0	; 224
 5fc:	10 e0       	ldi	r17, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
 5fe:	f8 01       	movw	r30, r16
 600:	80 81       	ld	r24, Z

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	8b 7f       	andi	r24, 0xFB	; 251
 604:	80 83       	st	Z, r24
 606:	88 81       	ld	r24, Y
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	88 83       	st	Y, r24
 60c:	42 e0       	ldi	r20, 0x02	; 2
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	11 df       	rcall	.-478    	; 0x436 <Endpoint_ConfigureEndpoint_Prv>
 614:	e1 ee       	ldi	r30, 0xE1	; 225
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	80 83       	st	Z, r24
 61e:	e2 ee       	ldi	r30, 0xE2	; 226
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	81 60       	ori	r24, 0x01	; 1
 626:	80 83       	st	Z, r24
 628:	80 81       	ld	r24, Z
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	80 83       	st	Z, r24
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	8e 7f       	andi	r24, 0xFE	; 254
 634:	80 83       	st	Z, r24
 636:	88 81       	ld	r24, Y
 638:	80 61       	ori	r24, 0x10	; 16
 63a:	88 83       	st	Y, r24
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <USB_Init>:
 646:	e8 ed       	ldi	r30, 0xD8	; 216
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	8f 7e       	andi	r24, 0xEF	; 239
 64e:	80 83       	st	Z, r24
 650:	e7 ed       	ldi	r30, 0xD7	; 215
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	81 60       	ori	r24, 0x01	; 1
 658:	80 83       	st	Z, r24
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 80 01 	sts	0x0180, r24
 660:	ad cf       	rjmp	.-166    	; 0x5bc <USB_ResetInterface>

00000662 <USB_INT_DisableAllInterrupts>:
 662:	e8 ed       	ldi	r30, 0xD8	; 216
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	8c 7f       	andi	r24, 0xFC	; 252
 66a:	80 83       	st	Z, r24
 66c:	10 92 e2 00 	sts	0x00E2, r1
 670:	08 95       	ret

00000672 <USB_INT_ClearAllInterrupts>:
 672:	10 92 da 00 	sts	0x00DA, r1
 676:	10 92 e1 00 	sts	0x00E1, r1
 67a:	08 95       	ret

0000067c <__vector_10>:
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
 686:	0b b6       	in	r0, 0x3b	; 59
					  ParserData->TotalReportItems++;
 688:	0f 92       	push	r0
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
 6a2:	80 91 e1 00 	lds	r24, 0x00E1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a6:	82 ff       	sbrs	r24, 2
 6a8:	0a c0       	rjmp	.+20     	; 0x6be <__vector_10+0x42>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	80 91 e2 00 	lds	r24, 0x00E2
 6ae:	82 ff       	sbrs	r24, 2
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <__vector_10+0x42>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	80 91 e1 00 	lds	r24, 0x00E1
 6b6:	8b 7f       	andi	r24, 0xFB	; 251
 6b8:	80 93 e1 00 	sts	0x00E1, r24
	  return HID_PARSE_NoUnfilteredReportItems;
 6bc:	3e d2       	rcall	.+1148   	; 0xb3a <USB_Event_Stub>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	80 91 da 00 	lds	r24, 0x00DA
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	80 ff       	sbrs	r24, 0
 6c4:	1d c0       	rjmp	.+58     	; 0x700 <__vector_10+0x84>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	80 91 d8 00 	lds	r24, 0x00D8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	80 ff       	sbrs	r24, 0
 6cc:	19 c0       	rjmp	.+50     	; 0x700 <__vector_10+0x84>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	80 91 da 00 	lds	r24, 0x00DA
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	80 93 da 00 	sts	0x00DA, r24
}
 6d8:	80 91 d9 00 	lds	r24, 0x00D9
 6dc:	80 ff       	sbrs	r24, 0
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <__vector_10+0x7c>
 6e0:	8c e0       	ldi	r24, 0x0C	; 12
 6e2:	89 bd       	out	0x29, r24	; 41
 6e4:	8e e0       	ldi	r24, 0x0E	; 14
 6e6:	89 bd       	out	0x29, r24	; 41
 6e8:	09 b4       	in	r0, 0x29	; 41
 6ea:	00 fe       	sbrs	r0, 0
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <__vector_10+0x6c>
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 81 01 	sts	0x0181, r24
 6f4:	a1 dd       	rcall	.-1214   	; 0x238 <EVENT_USB_Device_Connect>
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <__vector_10+0x84>
 6f8:	19 bc       	out	0x29, r1	; 41
 6fa:	10 92 81 01 	sts	0x0181, r1
 6fe:	9e dd       	rcall	.-1220   	; 0x23c <EVENT_USB_Device_Disconnect>
 700:	80 91 e1 00 	lds	r24, 0x00E1
 704:	80 ff       	sbrs	r24, 0
 706:	18 c0       	rjmp	.+48     	; 0x738 <__vector_10+0xbc>
 708:	80 91 e2 00 	lds	r24, 0x00E2
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 70c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 70e:	14 c0       	rjmp	.+40     	; 0x738 <__vector_10+0xbc>
 710:	80 91 e2 00 	lds	r24, 0x00E2
 714:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 716:	80 93 e2 00 	sts	0x00E2, r24
 71a:	80 91 e2 00 	lds	r24, 0x00E2
 71e:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 720:	80 93 e2 00 	sts	0x00E2, r24
 724:	80 91 d8 00 	lds	r24, 0x00D8
 728:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 72a:	80 93 d8 00 	sts	0x00D8, r24
 72e:	19 bc       	out	0x29, r1	; 41
 730:	85 e0       	ldi	r24, 0x05	; 5
 732:	80 93 81 01 	sts	0x0181, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 736:	01 d2       	rcall	.+1026   	; 0xb3a <USB_Event_Stub>
 738:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 73c:	84 ff       	sbrs	r24, 4
 73e:	2f c0       	rjmp	.+94     	; 0x79e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 740:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 744:	84 ff       	sbrs	r24, 4
 746:	2b c0       	rjmp	.+86     	; 0x79e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 748:	8c e0       	ldi	r24, 0x0C	; 12
 74a:	89 bd       	out	0x29, r24	; 41
 74c:	8e e0       	ldi	r24, 0x0E	; 14
 74e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 750:	09 b4       	in	r0, 0x29	; 41
 752:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 754:	fd cf       	rjmp	.-6      	; 0x750 <__vector_10+0xd4>
 756:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 75a:	8f 7d       	andi	r24, 0xDF	; 223
 75c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 760:	80 91 e1 00 	lds	r24, 0x00E1
 764:	8f 7e       	andi	r24, 0xEF	; 239
 766:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 76a:	80 91 e2 00 	lds	r24, 0x00E2
 76e:	8f 7e       	andi	r24, 0xEF	; 239
 770:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 774:	80 91 e2 00 	lds	r24, 0x00E2
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 77e:	80 91 7d 01 	lds	r24, 0x017D
 782:	88 23       	and	r24, r24
 784:	11 f0       	breq	.+4      	; 0x78a <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	07 c0       	rjmp	.+14     	; 0x798 <__vector_10+0x11c>
 78a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 78e:	87 ff       	sbrs	r24, 7
 790:	02 c0       	rjmp	.+4      	; 0x796 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	01 c0       	rjmp	.+2      	; 0x798 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	80 93 81 01 	sts	0x0181, r24
 79c:	ce d1       	rcall	.+924    	; 0xb3a <USB_Event_Stub>
 79e:	80 91 e1 00 	lds	r24, 0x00E1
 7a2:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7a4:	27 c0       	rjmp	.+78     	; 0x7f4 <__vector_10+0x178>
 7a6:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7aa:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7ac:	23 c0       	rjmp	.+70     	; 0x7f4 <__vector_10+0x178>
 7ae:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7b2:	87 7f       	andi	r24, 0xF7	; 247
 7b4:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	80 93 81 01 	sts	0x0181, r24
 7be:	10 92 7d 01 	sts	0x017D, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7c2:	80 91 e1 00 	lds	r24, 0x00E1
 7c6:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 7c8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7cc:	80 91 e2 00 	lds	r24, 0x00E2
 7d0:	8e 7f       	andi	r24, 0xFE	; 254
 7d2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7d6:	80 91 e2 00 	lds	r24, 0x00E2
 7da:	80 61       	ori	r24, 0x10	; 16
 7dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7e0:	42 e0       	ldi	r20, 0x02	; 2
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	27 de       	rcall	.-946    	; 0x436 <Endpoint_ConfigureEndpoint_Prv>
 7e8:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7ec:	88 60       	ori	r24, 0x08	; 8
 7ee:	80 93 f0 00 	sts	0x00F0, r24
 7f2:	a3 d1       	rcall	.+838    	; 0xb3a <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0b be       	out	0x3b, r0	; 59
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

0000081a <__vector_11>:
 81a:	1f 92       	push	r1
 81c:	0f 92       	push	r0
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	0b b6       	in	r0, 0x3b	; 59
 826:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	cf 93       	push	r28
 83e:	ef 93       	push	r30
 840:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 842:	c0 91 e9 00 	lds	r28, 0x00E9
 846:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 848:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 84c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 850:	80 91 f0 00 	lds	r24, 0x00F0
 854:	87 7f       	andi	r24, 0xF7	; 247
 856:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 85a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 85c:	1d d0       	rcall	.+58     	; 0x898 <USB_Device_ProcessControlRequest>
 85e:	10 92 e9 00 	sts	0x00E9, r1
 862:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 866:	88 60       	ori	r24, 0x08	; 8
 868:	80 93 f0 00 	sts	0x00F0, r24
 86c:	c0 93 e9 00 	sts	0x00E9, r28
 870:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 872:	ef 91       	pop	r30
 874:	cf 91       	pop	r28
 876:	bf 91       	pop	r27
 878:	af 91       	pop	r26
 87a:	9f 91       	pop	r25
 87c:	8f 91       	pop	r24
 87e:	7f 91       	pop	r23
 880:	6f 91       	pop	r22
 882:	5f 91       	pop	r21
 884:	4f 91       	pop	r20
 886:	3f 91       	pop	r19
 888:	2f 91       	pop	r18
 88a:	0f 90       	pop	r0
 88c:	0b be       	out	0x3b, r0	; 59
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <USB_Device_ProcessControlRequest>:
 898:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
 8a2:	aa 97       	sbiw	r28, 0x2a	; 42
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	e2 e8       	ldi	r30, 0x82	; 130
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8b2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8b6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8b8:	21 e0       	ldi	r18, 0x01	; 1
 8ba:	ea 38       	cpi	r30, 0x8A	; 138
 8bc:	f2 07       	cpc	r31, r18
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 8c0:	c8 dc       	rcall	.-1648   	; 0x252 <EVENT_USB_Device_ControlRequest>
 8c2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8c6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 8c8:	20 c1       	rjmp	.+576    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 8ca:	90 91 82 01 	lds	r25, 0x0182
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8ce:	80 91 83 01 	lds	r24, 0x0183

		switch (USB_ControlRequest.bRequest)
 8d2:	85 30       	cpi	r24, 0x05	; 5
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <USB_Device_ProcessControlRequest+0x40>
 8d6:	77 c0       	rjmp	.+238    	; 0x9c6 <USB_Device_ProcessControlRequest+0x12e>
 8d8:	30 f4       	brcc	.+12     	; 0x8e6 <USB_Device_ProcessControlRequest+0x4e>
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	81 f1       	breq	.+96     	; 0x93e <USB_Device_ProcessControlRequest+0xa6>
 8de:	68 f0       	brcs	.+26     	; 0x8fa <USB_Device_ProcessControlRequest+0x62>
 8e0:	83 30       	cpi	r24, 0x03	; 3
 8e2:	69 f1       	breq	.+90     	; 0x93e <USB_Device_ProcessControlRequest+0xa6>
 8e4:	12 c1       	rjmp	.+548    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 8e6:	88 30       	cpi	r24, 0x08	; 8
 8e8:	09 f4       	brne	.+2      	; 0x8ec <USB_Device_ProcessControlRequest+0x54>
 8ea:	e1 c0       	rjmp	.+450    	; 0xaae <USB_Device_ProcessControlRequest+0x216>
 8ec:	89 30       	cpi	r24, 0x09	; 9
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <USB_Device_ProcessControlRequest+0x5a>
 8f0:	f0 c0       	rjmp	.+480    	; 0xad2 <USB_Device_ProcessControlRequest+0x23a>
 8f2:	86 30       	cpi	r24, 0x06	; 6
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <USB_Device_ProcessControlRequest+0x60>
 8f6:	09 c1       	rjmp	.+530    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 8f8:	88 c0       	rjmp	.+272    	; 0xa0a <USB_Device_ProcessControlRequest+0x172>
 8fa:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8fc:	81 f0       	breq	.+32     	; 0x91e <USB_Device_ProcessControlRequest+0x86>
 8fe:	92 38       	cpi	r25, 0x82	; 130
 900:	09 f0       	breq	.+2      	; 0x904 <USB_Device_ProcessControlRequest+0x6c>
 902:	03 c1       	rjmp	.+518    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 904:	80 91 86 01 	lds	r24, 0x0186
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 908:	8f 70       	andi	r24, 0x0F	; 15
 90a:	80 93 e9 00 	sts	0x00E9, r24
 90e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 912:	85 fb       	bst	r24, 5
 914:	88 27       	eor	r24, r24
 916:	80 f9       	bld	r24, 0
 918:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 91c:	06 c0       	rjmp	.+12     	; 0x92a <USB_Device_ProcessControlRequest+0x92>
 91e:	80 91 7e 01 	lds	r24, 0x017E
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 922:	90 91 7f 01 	lds	r25, 0x017F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 926:	91 11       	cpse	r25, r1
 928:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 92a:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 92e:	97 7f       	andi	r25, 0xF7	; 247
 930:	90 93 e8 00 	sts	0x00E8, r25
 934:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 938:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 93c:	c3 c0       	rjmp	.+390    	; 0xac4 <USB_Device_ProcessControlRequest+0x22c>
 93e:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 940:	2d 7f       	andi	r18, 0xFD	; 253
 942:	09 f0       	breq	.+2      	; 0x946 <USB_Device_ProcessControlRequest+0xae>
 944:	e2 c0       	rjmp	.+452    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 946:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 948:	19 f0       	breq	.+6      	; 0x950 <USB_Device_ProcessControlRequest+0xb8>
 94a:	92 30       	cpi	r25, 0x02	; 2
 94c:	61 f0       	breq	.+24     	; 0x966 <USB_Device_ProcessControlRequest+0xce>
 94e:	dd c0       	rjmp	.+442    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 950:	90 91 84 01 	lds	r25, 0x0184
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 954:	91 30       	cpi	r25, 0x01	; 1
 956:	09 f0       	breq	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0xc2>
 958:	d8 c0       	rjmp	.+432    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 95a:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 95c:	09 f0       	breq	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0xc8>
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	90 93 7f 01 	sts	0x017F, r25
 964:	2a c0       	rjmp	.+84     	; 0x9ba <USB_Device_ProcessControlRequest+0x122>
 966:	90 91 84 01 	lds	r25, 0x0184

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 96a:	91 11       	cpse	r25, r1
 96c:	26 c0       	rjmp	.+76     	; 0x9ba <USB_Device_ProcessControlRequest+0x122>
 96e:	20 91 86 01 	lds	r18, 0x0186
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 972:	2f 70       	andi	r18, 0x0F	; 15
 974:	09 f4       	brne	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 976:	c9 c0       	rjmp	.+402    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 978:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 97c:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 980:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 982:	1b c0       	rjmp	.+54     	; 0x9ba <USB_Device_ProcessControlRequest+0x122>
 984:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 986:	21 f4       	brne	.+8      	; 0x990 <USB_Device_ProcessControlRequest+0xf8>
 988:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 98c:	80 62       	ori	r24, 0x20	; 32
 98e:	13 c0       	rjmp	.+38     	; 0x9b6 <USB_Device_ProcessControlRequest+0x11e>
 990:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 994:	80 61       	ori	r24, 0x10	; 16
 996:	80 93 eb 00 	sts	0x00EB, r24
 99a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 2e       	mov	r0, r18
 9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <USB_Device_ProcessControlRequest+0x10c>
 9a2:	88 0f       	add	r24, r24
 9a4:	0a 94       	dec	r0
 9a6:	ea f7       	brpl	.-6      	; 0x9a2 <USB_Device_ProcessControlRequest+0x10a>
 9a8:	80 93 ea 00 	sts	0x00EA, r24
 9ac:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 9b0:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9b4:	88 60       	ori	r24, 0x08	; 8
 9b6:	80 93 eb 00 	sts	0x00EB, r24
 9ba:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9be:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9c2:	87 7f       	andi	r24, 0xF7	; 247
 9c4:	82 c0       	rjmp	.+260    	; 0xaca <USB_Device_ProcessControlRequest+0x232>
 9c6:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9c8:	a0 c0       	rjmp	.+320    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 9ca:	10 91 84 01 	lds	r17, 0x0184
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9ce:	1f 77       	andi	r17, 0x7F	; 127
 9d0:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 9d4:	80 78       	andi	r24, 0x80	; 128
 9d6:	81 2b       	or	r24, r17
 9d8:	80 93 e3 00 	sts	0x00E3, r24
 9dc:	80 91 e8 00 	lds	r24, 0x00E8
 9e0:	87 7f       	andi	r24, 0xF7	; 247
 9e2:	80 93 e8 00 	sts	0x00E8, r24
 9e6:	99 dd       	rcall	.-1230   	; 0x51a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9e8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9ec:	80 ff       	sbrs	r24, 0
 9ee:	fc cf       	rjmp	.-8      	; 0x9e8 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 9f0:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 9f4:	80 68       	ori	r24, 0x80	; 128
 9f6:	80 93 e3 00 	sts	0x00E3, r24
 9fa:	11 23       	and	r17, r17
 9fc:	11 f0       	breq	.+4      	; 0xa02 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9fe:	83 e0       	ldi	r24, 0x03	; 3
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x16c>
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	80 93 81 01 	sts	0x0181, r24
 a08:	80 c0       	rjmp	.+256    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 a0a:	90 58       	subi	r25, 0x80	; 128
 a0c:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a0e:	08 f0       	brcs	.+2      	; 0xa12 <USB_Device_ProcessControlRequest+0x17a>
 a10:	7c c0       	rjmp	.+248    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 a12:	80 91 84 01 	lds	r24, 0x0184
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a16:	90 91 85 01 	lds	r25, 0x0185
 a1a:	8c 3d       	cpi	r24, 0xDC	; 220
 a1c:	23 e0       	ldi	r18, 0x03	; 3
 a1e:	92 07       	cpc	r25, r18
 a20:	71 f5       	brne	.+92     	; 0xa7e <USB_Device_ProcessControlRequest+0x1e6>
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a26:	8a e2       	ldi	r24, 0x2A	; 42
 a28:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a2a:	4f b7       	in	r20, 0x3f	; 63
 a2c:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a2e:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a30:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a32:	20 e0       	ldi	r18, 0x00	; 0
 a34:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a36:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a38:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	50 93 57 00 	sts	0x0057, r21
 a40:	e4 91       	lpm	r30, Z
 a42:	20 ff       	sbrs	r18, 0
 a44:	03 c0       	rjmp	.+6      	; 0xa4c <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 a46:	e2 95       	swap	r30
 a48:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 a4a:	3f 5f       	subi	r19, 0xFF	; 255
 a4c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a4e:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	ea 30       	cpi	r30, 0x0A	; 10
 a54:	10 f0       	brcs	.+4      	; 0xa5a <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a56:	c7 96       	adiw	r24, 0x37	; 55
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0x1c4>
 a5a:	c0 96       	adiw	r24, 0x30	; 48
 a5c:	8d 93       	st	X+, r24
 a5e:	9d 93       	st	X+, r25
 a60:	2f 5f       	subi	r18, 0xFF	; 255
 a62:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a64:	49 f7       	brne	.-46     	; 0xa38 <USB_Device_ProcessControlRequest+0x1a0>
 a66:	4f bf       	out	0x3f, r20	; 63
 a68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a6c:	87 7f       	andi	r24, 0xF7	; 247
 a6e:	80 93 e8 00 	sts	0x00E8, r24
 a72:	6a e2       	ldi	r22, 0x2A	; 42
 a74:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a76:	ce 01       	movw	r24, r28
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	20 dc       	rcall	.-1984   	; 0x2bc <Endpoint_Write_Control_Stream_LE>
 a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <USB_Device_ProcessControlRequest+0x20a>
 a7e:	ae 01       	movw	r20, r28
 a80:	4f 5f       	subi	r20, 0xFF	; 255
 a82:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a84:	60 91 86 01 	lds	r22, 0x0186
 a88:	e7 db       	rcall	.-2098   	; 0x258 <CALLBACK_USB_GetDescriptor>
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	09 f4       	brne	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0x1f8>
 a8e:	3d c0       	rjmp	.+122    	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 a90:	20 91 e8 00 	lds	r18, 0x00E8
 a94:	27 7f       	andi	r18, 0xF7	; 247
 a96:	20 93 e8 00 	sts	0x00E8, r18
 a9a:	bc 01       	movw	r22, r24
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	9a 81       	ldd	r25, Y+2	; 0x02
 aa0:	6a dc       	rcall	.-1836   	; 0x376 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 aa2:	80 91 e8 00 	lds	r24, 0x00E8
 aa6:	8b 77       	andi	r24, 0x7B	; 123
 aa8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 aac:	2e c0       	rjmp	.+92     	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 aae:	90 38       	cpi	r25, 0x80	; 128
 ab0:	61 f5       	brne	.+88     	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 ab2:	80 91 e8 00 	lds	r24, 0x00E8
 ab6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ab8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 abc:	80 91 7d 01 	lds	r24, 0x017D
 ac0:	80 93 f1 00 	sts	0x00F1, r24
 ac4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ac8:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 aca:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ace:	25 dd       	rcall	.-1462   	; 0x51a <Endpoint_ClearStatusStage>
 ad0:	1c c0       	rjmp	.+56     	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 ad2:	91 11       	cpse	r25, r1
 ad4:	1a c0       	rjmp	.+52     	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
 ad6:	90 91 84 01 	lds	r25, 0x0184
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ada:	92 30       	cpi	r25, 0x02	; 2
 adc:	b0 f4       	brcc	.+44     	; 0xb0a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ade:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ae2:	87 7f       	andi	r24, 0xF7	; 247
 ae4:	80 93 e8 00 	sts	0x00E8, r24
 ae8:	90 93 7d 01 	sts	0x017D, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aec:	16 dd       	rcall	.-1492   	; 0x51a <Endpoint_ClearStatusStage>
 aee:	80 91 7d 01 	lds	r24, 0x017D
 af2:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 af4:	04 c0       	rjmp	.+8      	; 0xafe <USB_Device_ProcessControlRequest+0x266>
 af6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 afa:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <USB_Device_ProcessControlRequest+0x26a>
 afe:	84 e0       	ldi	r24, 0x04	; 4
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0x26c>
 b02:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b04:	80 93 81 01 	sts	0x0181, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b08:	9b db       	rcall	.-2250   	; 0x240 <EVENT_USB_Device_ConfigurationChanged>
 b0a:	80 91 e8 00 	lds	r24, 0x00E8
 b0e:	83 ff       	sbrs	r24, 3
 b10:	0a c0       	rjmp	.+20     	; 0xb26 <USB_Device_ProcessControlRequest+0x28e>
 b12:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 b16:	87 7f       	andi	r24, 0xF7	; 247
 b18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b1c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b20:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b22:	80 93 eb 00 	sts	0x00EB, r24
 b26:	aa 96       	adiw	r28, 0x2a	; 42
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b2c:	de bf       	out	0x3e, r29	; 62
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	cd bf       	out	0x3d, r28	; 61
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b36:	1f 91       	pop	r17
 b38:	08 95       	ret

00000b3a <USB_Event_Stub>:
 b3a:	08 95       	ret

00000b3c <USB_USBTask>:
 b3c:	cf 93       	push	r28
 b3e:	80 91 81 01 	lds	r24, 0x0181
 b42:	88 23       	and	r24, r24
 b44:	a9 f0       	breq	.+42     	; 0xb70 <USB_USBTask+0x34>
 b46:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b4a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b4c:	90 91 ec 00 	lds	r25, 0x00EC
 b50:	90 ff       	sbrs	r25, 0
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <USB_USBTask+0x1c>
 b54:	90 e8       	ldi	r25, 0x80	; 128
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <USB_USBTask+0x1e>
 b58:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b5a:	c9 2f       	mov	r28, r25
 b5c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b62:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 b66:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 b68:	97 de       	rcall	.-722    	; 0x898 <USB_Device_ProcessControlRequest>
 b6a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b6c:	c0 93 e9 00 	sts	0x00E9, r28
 b70:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 b72:	08 95       	ret

00000b74 <CDC_Device_ConfigureEndpoints>:
 b74:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b76:	df 93       	push	r29
 b78:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 b7a:	fc 01       	movw	r30, r24
 b7c:	70 96       	adiw	r30, 0x10	; 16
 b7e:	8b e0       	ldi	r24, 0x0B	; 11
 b80:	df 01       	movw	r26, r30
 b82:	1d 92       	st	X+, r1
 b84:	8a 95       	dec	r24
 b86:	e9 f7       	brne	.-6      	; 0xb82 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 b88:	82 e0       	ldi	r24, 0x02	; 2
 b8a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 b8c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 b8e:	83 e0       	ldi	r24, 0x03	; 3
 b90:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 b92:	61 e0       	ldi	r22, 0x01	; 1
 b94:	ce 01       	movw	r24, r28
 b96:	01 96       	adiw	r24, 0x01	; 1
 b98:	83 dc       	rcall	.-1786   	; 0x4a0 <Endpoint_ConfigureEndpointTable>
 b9a:	88 23       	and	r24, r24
 b9c:	61 f0       	breq	.+24     	; 0xbb6 <CDC_Device_ConfigureEndpoints+0x42>
 b9e:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 ba0:	ce 01       	movw	r24, r28
 ba2:	06 96       	adiw	r24, 0x06	; 6
 ba4:	7d dc       	rcall	.-1798   	; 0x4a0 <Endpoint_ConfigureEndpointTable>
 ba6:	88 23       	and	r24, r24
 ba8:	31 f0       	breq	.+12     	; 0xbb6 <CDC_Device_ConfigureEndpoints+0x42>
 baa:	61 e0       	ldi	r22, 0x01	; 1
 bac:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 bae:	0b 96       	adiw	r24, 0x0b	; 11
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
	  return false;

	return true;
}
 bb4:	75 cc       	rjmp	.-1814   	; 0x4a0 <Endpoint_ConfigureEndpointTable>
 bb6:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
	  return false;

	return true;
}
 bbc:	08 95       	ret

00000bbe <CDC_Device_SendByte>:
 bbe:	cf 93       	push	r28
 bc0:	c6 2f       	mov	r28, r22
 bc2:	20 91 81 01 	lds	r18, 0x0181
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bc6:	24 30       	cpi	r18, 0x04	; 4
 bc8:	f1 f4       	brne	.+60     	; 0xc06 <CDC_Device_SendByte+0x48>
 bca:	fc 01       	movw	r30, r24
 bcc:	44 89       	ldd	r20, Z+20	; 0x14
 bce:	55 89       	ldd	r21, Z+21	; 0x15
 bd0:	66 89       	ldd	r22, Z+22	; 0x16
 bd2:	77 89       	ldd	r23, Z+23	; 0x17
 bd4:	45 2b       	or	r20, r21
 bd6:	46 2b       	or	r20, r22
 bd8:	47 2b       	or	r20, r23
 bda:	a9 f0       	breq	.+42     	; 0xc06 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bdc:	81 81       	ldd	r24, Z+1	; 0x01
 bde:	8f 70       	andi	r24, 0x0F	; 15
 be0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 be4:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 be8:	85 ff       	sbrs	r24, 5
 bea:	04 c0       	rjmp	.+8      	; 0xbf4 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bec:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	0a c0       	rjmp	.+20     	; 0xc08 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf4:	80 91 e8 00 	lds	r24, 0x00E8
 bf8:	8e 77       	andi	r24, 0x7E	; 126
 bfa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 bfe:	ae dc       	rcall	.-1700   	; 0x55c <Endpoint_WaitUntilReady>
 c00:	88 23       	and	r24, r24
 c02:	a1 f3       	breq	.-24     	; 0xbec <CDC_Device_SendByte+0x2e>
 c04:	01 c0       	rjmp	.+2      	; 0xc08 <CDC_Device_SendByte+0x4a>
 c06:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 c08:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 c0a:	08 95       	ret

00000c0c <CDC_Device_putchar>:
 c0c:	fb 01       	movw	r30, r22
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 c0e:	68 2f       	mov	r22, r24
 c10:	84 85       	ldd	r24, Z+12	; 0x0c
 c12:	95 85       	ldd	r25, Z+13	; 0x0d
 c14:	d4 df       	rcall	.-88     	; 0xbbe <CDC_Device_SendByte>
 c16:	21 e0       	ldi	r18, 0x01	; 1
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	81 11       	cpse	r24, r1
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <CDC_Device_putchar+0x16>
 c1e:	20 e0       	ldi	r18, 0x00	; 0
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	88 27       	eor	r24, r24
}
 c24:	99 27       	eor	r25, r25
 c26:	82 1b       	sub	r24, r18
 c28:	93 0b       	sbc	r25, r19
 c2a:	08 95       	ret

00000c2c <CDC_Device_Flush>:
 c2c:	20 91 81 01 	lds	r18, 0x0181
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c30:	24 30       	cpi	r18, 0x04	; 4
 c32:	31 f5       	brne	.+76     	; 0xc80 <CDC_Device_Flush+0x54>
 c34:	fc 01       	movw	r30, r24
 c36:	44 89       	ldd	r20, Z+20	; 0x14
 c38:	55 89       	ldd	r21, Z+21	; 0x15
 c3a:	66 89       	ldd	r22, Z+22	; 0x16
 c3c:	77 89       	ldd	r23, Z+23	; 0x17
 c3e:	45 2b       	or	r20, r21
 c40:	46 2b       	or	r20, r22
 c42:	47 2b       	or	r20, r23
 c44:	e9 f0       	breq	.+58     	; 0xc80 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c46:	81 81       	ldd	r24, Z+1	; 0x01
 c48:	8f 70       	andi	r24, 0x0F	; 15
 c4a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 c4e:	80 91 f2 00 	lds	r24, 0x00F2
 c52:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 c56:	89 2b       	or	r24, r25
 c58:	89 f0       	breq	.+34     	; 0xc7c <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c5a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c5e:	80 91 e8 00 	lds	r24, 0x00E8
 c62:	8e 77       	andi	r24, 0x7E	; 126
 c64:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 c68:	95 fd       	sbrc	r25, 5
 c6a:	08 c0       	rjmp	.+16     	; 0xc7c <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c6c:	77 dc       	rcall	.-1810   	; 0x55c <Endpoint_WaitUntilReady>
 c6e:	81 11       	cpse	r24, r1
 c70:	08 c0       	rjmp	.+16     	; 0xc82 <CDC_Device_Flush+0x56>
 c72:	80 91 e8 00 	lds	r24, 0x00E8
 c76:	8e 77       	andi	r24, 0x7E	; 126
 c78:	80 93 e8 00 	sts	0x00E8, r24
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	08 95       	ret
 c80:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 c82:	08 95       	ret

00000c84 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 c84:	20 91 81 01 	lds	r18, 0x0181
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c88:	24 30       	cpi	r18, 0x04	; 4
 c8a:	89 f4       	brne	.+34     	; 0xcae <CDC_Device_USBTask+0x2a>
 c8c:	fc 01       	movw	r30, r24
 c8e:	44 89       	ldd	r20, Z+20	; 0x14
 c90:	55 89       	ldd	r21, Z+21	; 0x15
 c92:	66 89       	ldd	r22, Z+22	; 0x16
 c94:	77 89       	ldd	r23, Z+23	; 0x17
 c96:	45 2b       	or	r20, r21
 c98:	46 2b       	or	r20, r22
 c9a:	47 2b       	or	r20, r23
 c9c:	41 f0       	breq	.+16     	; 0xcae <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c9e:	21 81       	ldd	r18, Z+1	; 0x01
 ca0:	2f 70       	andi	r18, 0x0F	; 15
 ca2:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ca6:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 caa:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
 cac:	bf cf       	rjmp	.-130    	; 0xc2c <CDC_Device_Flush>
 cae:	08 95       	ret

00000cb0 <CDC_Device_ReceiveByte>:
 cb0:	20 91 81 01 	lds	r18, 0x0181
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cb4:	24 30       	cpi	r18, 0x04	; 4
 cb6:	19 f0       	breq	.+6      	; 0xcbe <CDC_Device_ReceiveByte+0xe>
	  return -1;
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	9f ef       	ldi	r25, 0xFF	; 255
 cbc:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cbe:	fc 01       	movw	r30, r24
 cc0:	44 89       	ldd	r20, Z+20	; 0x14
 cc2:	55 89       	ldd	r21, Z+21	; 0x15
 cc4:	66 89       	ldd	r22, Z+22	; 0x16
 cc6:	77 89       	ldd	r23, Z+23	; 0x17
 cc8:	45 2b       	or	r20, r21
 cca:	46 2b       	or	r20, r22
 ccc:	47 2b       	or	r20, r23
 cce:	a1 f3       	breq	.-24     	; 0xcb8 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd0:	86 81       	ldd	r24, Z+6	; 0x06
 cd2:	8f 70       	andi	r24, 0x0F	; 15
 cd4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cd8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 cdc:	82 ff       	sbrs	r24, 2
 cde:	ec cf       	rjmp	.-40     	; 0xcb8 <CDC_Device_ReceiveByte+0x8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 ce0:	80 91 f2 00 	lds	r24, 0x00F2
 ce4:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 ce8:	89 2b       	or	r24, r25
 cea:	21 f0       	breq	.+8      	; 0xcf4 <CDC_Device_ReceiveByte+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cec:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <CDC_Device_ReceiveByte+0x48>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 cf4:	2f ef       	ldi	r18, 0xFF	; 255
 cf6:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 cf8:	80 91 f2 00 	lds	r24, 0x00F2
 cfc:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 d00:	89 2b       	or	r24, r25
 d02:	29 f4       	brne	.+10     	; 0xd0e <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d04:	80 91 e8 00 	lds	r24, 0x00E8
 d08:	8b 77       	andi	r24, 0x7B	; 123
 d0a:	80 93 e8 00 	sts	0x00E8, r24
 d0e:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 d10:	08 95       	ret

00000d12 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 d12:	fc 01       	movw	r30, r24
 d14:	84 85       	ldd	r24, Z+12	; 0x0c
 d16:	95 85       	ldd	r25, Z+13	; 0x0d
 d18:	cb df       	rcall	.-106    	; 0xcb0 <CDC_Device_ReceiveByte>
 d1a:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <CDC_Device_getchar+0x10>
 d1e:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <CDC_Device_CreateStream>:

	return ReceivedByte;
}
 d24:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
 d26:	2e e0       	ldi	r18, 0x0E	; 14
 d28:	db 01       	movw	r26, r22
 d2a:	1d 92       	st	X+, r1
 d2c:	2a 95       	dec	r18
 d2e:	e9 f7       	brne	.-6      	; 0xd2a <CDC_Device_CreateStream+0x6>
 d30:	23 e0       	ldi	r18, 0x03	; 3
 d32:	23 83       	std	Z+3, r18	; 0x03
 d34:	26 e0       	ldi	r18, 0x06	; 6
 d36:	36 e0       	ldi	r19, 0x06	; 6
 d38:	31 87       	std	Z+9, r19	; 0x09
 d3a:	20 87       	std	Z+8, r18	; 0x08
 d3c:	29 e8       	ldi	r18, 0x89	; 137
 d3e:	36 e0       	ldi	r19, 0x06	; 6
 d40:	33 87       	std	Z+11, r19	; 0x0b
 d42:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 d44:	95 87       	std	Z+13, r25	; 0x0d
 d46:	84 87       	std	Z+12, r24	; 0x0c
 d48:	08 95       	ret

00000d4a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 d4a:	08 95       	ret

00000d4c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d52:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d56:	83 ff       	sbrs	r24, 3
 d58:	a6 c0       	rjmp	.+332    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d5a:	88 81       	ld	r24, Y
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	20 91 86 01 	lds	r18, 0x0186
 d62:	30 91 87 01 	lds	r19, 0x0187
 d66:	28 17       	cp	r18, r24
 d68:	39 07       	cpc	r19, r25
 d6a:	09 f0       	breq	.+2      	; 0xd6e <CDC_Device_ProcessControlRequest+0x22>
 d6c:	9c c0       	rjmp	.+312    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
 d6e:	80 91 83 01 	lds	r24, 0x0183
 d72:	81 32       	cpi	r24, 0x21	; 33
 d74:	61 f0       	breq	.+24     	; 0xd8e <CDC_Device_ProcessControlRequest+0x42>
 d76:	20 f4       	brcc	.+8      	; 0xd80 <CDC_Device_ProcessControlRequest+0x34>
 d78:	80 32       	cpi	r24, 0x20	; 32
 d7a:	09 f4       	brne	.+2      	; 0xd7e <CDC_Device_ProcessControlRequest+0x32>
 d7c:	3e c0       	rjmp	.+124    	; 0xdfa <CDC_Device_ProcessControlRequest+0xae>
 d7e:	93 c0       	rjmp	.+294    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
 d80:	82 32       	cpi	r24, 0x22	; 34
 d82:	09 f4       	brne	.+2      	; 0xd86 <CDC_Device_ProcessControlRequest+0x3a>
 d84:	6c c0       	rjmp	.+216    	; 0xe5e <CDC_Device_ProcessControlRequest+0x112>
 d86:	83 32       	cpi	r24, 0x23	; 35
 d88:	09 f4       	brne	.+2      	; 0xd8c <CDC_Device_ProcessControlRequest+0x40>
 d8a:	7d c0       	rjmp	.+250    	; 0xe86 <CDC_Device_ProcessControlRequest+0x13a>
 d8c:	8c c0       	rjmp	.+280    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d8e:	80 91 82 01 	lds	r24, 0x0182
 d92:	81 3a       	cpi	r24, 0xA1	; 161
 d94:	09 f0       	breq	.+2      	; 0xd98 <CDC_Device_ProcessControlRequest+0x4c>
 d96:	87 c0       	rjmp	.+270    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d98:	80 91 e8 00 	lds	r24, 0x00E8
 d9c:	87 7f       	andi	r24, 0xF7	; 247
 d9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 da2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 da6:	80 ff       	sbrs	r24, 0
 da8:	fc cf       	rjmp	.-8      	; 0xda2 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 daa:	4c 89       	ldd	r20, Y+20	; 0x14
 dac:	5d 89       	ldd	r21, Y+21	; 0x15
 dae:	6e 89       	ldd	r22, Y+22	; 0x16
 db0:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 db2:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 db6:	bb 27       	eor	r27, r27
 db8:	a7 2f       	mov	r26, r23
 dba:	96 2f       	mov	r25, r22
 dbc:	85 2f       	mov	r24, r21
 dbe:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 dc2:	cb 01       	movw	r24, r22
 dc4:	aa 27       	eor	r26, r26
 dc6:	bb 27       	eor	r27, r27
 dc8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 dcc:	47 2f       	mov	r20, r23
 dce:	55 27       	eor	r21, r21
 dd0:	66 27       	eor	r22, r22
 dd2:	77 27       	eor	r23, r23
 dd4:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 dd8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dda:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 dde:	89 8d       	ldd	r24, Y+25	; 0x19
 de0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 de4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 de6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dea:	80 91 e8 00 	lds	r24, 0x00E8
 dee:	8e 77       	andi	r24, 0x7E	; 126
 df0:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 df4:	df 91       	pop	r29
 df6:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 df8:	90 cb       	rjmp	.-2272   	; 0x51a <Endpoint_ClearStatusStage>
 dfa:	80 91 82 01 	lds	r24, 0x0182
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dfe:	81 32       	cpi	r24, 0x21	; 33
 e00:	09 f0       	breq	.+2      	; 0xe04 <CDC_Device_ProcessControlRequest+0xb8>
 e02:	51 c0       	rjmp	.+162    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
 e04:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e08:	87 7f       	andi	r24, 0xF7	; 247
 e0a:	80 93 e8 00 	sts	0x00E8, r24
 e0e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e12:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 e14:	05 c0       	rjmp	.+10     	; 0xe20 <CDC_Device_ProcessControlRequest+0xd4>
 e16:	80 91 81 01 	lds	r24, 0x0181
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 e1a:	81 11       	cpse	r24, r1
 e1c:	f8 cf       	rjmp	.-16     	; 0xe0e <CDC_Device_ProcessControlRequest+0xc2>
 e1e:	43 c0       	rjmp	.+134    	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
 e20:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e24:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 e28:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 e2c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 e30:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 e32:	2d 8b       	std	Y+21, r18	; 0x15
 e34:	9e 8b       	std	Y+22, r25	; 0x16
 e36:	8f 8b       	std	Y+23, r24	; 0x17
 e38:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e3c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 e3e:	80 91 f1 00 	lds	r24, 0x00F1
 e42:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e44:	80 91 f1 00 	lds	r24, 0x00F1
 e48:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 e4a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e4e:	8b 77       	andi	r24, 0x7B	; 123
 e50:	80 93 e8 00 	sts	0x00E8, r24
 e54:	62 db       	rcall	.-2364   	; 0x51a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 e56:	ce 01       	movw	r24, r28
 e58:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e5a:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e5c:	76 cf       	rjmp	.-276    	; 0xd4a <CDC_Device_Event_Stub>
 e5e:	80 91 82 01 	lds	r24, 0x0182
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e62:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e64:	01 f5       	brne	.+64     	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
 e66:	80 91 e8 00 	lds	r24, 0x00E8
 e6a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e6c:	80 93 e8 00 	sts	0x00E8, r24
 e70:	54 db       	rcall	.-2392   	; 0x51a <Endpoint_ClearStatusStage>
 e72:	80 91 84 01 	lds	r24, 0x0184
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e76:	90 91 85 01 	lds	r25, 0x0185

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 e7a:	99 8b       	std	Y+17, r25	; 0x11
 e7c:	88 8b       	std	Y+16, r24	; 0x10
 e7e:	ce 01       	movw	r24, r28
 e80:	df 91       	pop	r29
 e82:	cf 91       	pop	r28
 e84:	62 cf       	rjmp	.-316    	; 0xd4a <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e86:	80 91 82 01 	lds	r24, 0x0182
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e8a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 e8c:	61 f4       	brne	.+24     	; 0xea6 <CDC_Device_ProcessControlRequest+0x15a>
 e8e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e92:	87 7f       	andi	r24, 0xF7	; 247
 e94:	80 93 e8 00 	sts	0x00E8, r24
 e98:	40 db       	rcall	.-2432   	; 0x51a <Endpoint_ClearStatusStage>
 e9a:	60 91 84 01 	lds	r22, 0x0184
 e9e:	ce 01       	movw	r24, r28
 ea0:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ea2:	cf 91       	pop	r28
 ea4:	52 cf       	rjmp	.-348    	; 0xd4a <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 ea6:	df 91       	pop	r29
 ea8:	cf 91       	pop	r28
 eaa:	08 95       	ret

00000eac <fputs>:
			}

			break;
	}
}
 eac:	ef 92       	push	r14
 eae:	ff 92       	push	r15
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 eb0:	0f 93       	push	r16
 eb2:	1f 93       	push	r17
			}

			break;
	}
}
 eb4:	cf 93       	push	r28
 eb6:	df 93       	push	r29
 eb8:	8b 01       	movw	r16, r22
 eba:	db 01       	movw	r26, r22
 ebc:	13 96       	adiw	r26, 0x03	; 3
 ebe:	2c 91       	ld	r18, X
 ec0:	21 ff       	sbrs	r18, 1
 ec2:	16 c0       	rjmp	.+44     	; 0xef0 <fputs+0x44>
 ec4:	ec 01       	movw	r28, r24
 ec6:	e1 2c       	mov	r14, r1
 ec8:	f1 2c       	mov	r15, r1
 eca:	89 91       	ld	r24, Y+
 ecc:	88 23       	and	r24, r24
 ece:	71 f0       	breq	.+28     	; 0xeec <fputs+0x40>
 ed0:	d8 01       	movw	r26, r16
 ed2:	18 96       	adiw	r26, 0x08	; 8
 ed4:	ed 91       	ld	r30, X+
 ed6:	fc 91       	ld	r31, X
 ed8:	19 97       	sbiw	r26, 0x09	; 9
 eda:	b8 01       	movw	r22, r16
 edc:	09 95       	icall
 ede:	89 2b       	or	r24, r25
 ee0:	a1 f3       	breq	.-24     	; 0xeca <fputs+0x1e>
 ee2:	ee 24       	eor	r14, r14
 ee4:	ea 94       	dec	r14
 ee6:	ff 24       	eor	r15, r15
 ee8:	fa 94       	dec	r15
 eea:	ef cf       	rjmp	.-34     	; 0xeca <fputs+0x1e>
 eec:	c7 01       	movw	r24, r14
 eee:	02 c0       	rjmp	.+4      	; 0xef4 <fputs+0x48>
 ef0:	8f ef       	ldi	r24, 0xFF	; 255
 ef2:	9f ef       	ldi	r25, 0xFF	; 255
 ef4:	df 91       	pop	r29
 ef6:	cf 91       	pop	r28
 ef8:	1f 91       	pop	r17
 efa:	0f 91       	pop	r16
 efc:	ff 90       	pop	r15
 efe:	ef 90       	pop	r14
 f00:	08 95       	ret

00000f02 <_exit>:
 f02:	f8 94       	cli

00000f04 <__stop_program>:
 f04:	ff cf       	rjmp	.-2      	; 0xf04 <__stop_program>

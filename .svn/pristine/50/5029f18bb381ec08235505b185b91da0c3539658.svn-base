
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d1a  00000dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000dae  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b3  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005391  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001558  00000000  00000000  00006dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002421  00000000  00000000  00008315  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d4  00000000  00000000  0000a738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000256c  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b7f  00000000  00000000  0000d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  000110f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	9f c0       	rjmp	.+318    	; 0x140 <__ctors_end>
   2:	00 00       	nop
   4:	ad c0       	rjmp	.+346    	; 0x160 <__bad_interrupt>
   6:	00 00       	nop
   8:	ab c0       	rjmp	.+342    	; 0x160 <__bad_interrupt>
   a:	00 00       	nop
   c:	a9 c0       	rjmp	.+338    	; 0x160 <__bad_interrupt>
   e:	00 00       	nop
  10:	a7 c0       	rjmp	.+334    	; 0x160 <__bad_interrupt>
  12:	00 00       	nop
  14:	a5 c0       	rjmp	.+330    	; 0x160 <__bad_interrupt>
  16:	00 00       	nop
  18:	a3 c0       	rjmp	.+326    	; 0x160 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a1 c0       	rjmp	.+322    	; 0x160 <__bad_interrupt>
  1e:	00 00       	nop
  20:	9f c0       	rjmp	.+318    	; 0x160 <__bad_interrupt>
  22:	00 00       	nop
  24:	9d c0       	rjmp	.+314    	; 0x160 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c4       	rjmp	.+2172   	; 0x8a6 <__vector_10>
  2a:	00 00       	nop
  2c:	99 c0       	rjmp	.+306    	; 0x160 <__bad_interrupt>
  2e:	00 00       	nop
  30:	97 c0       	rjmp	.+302    	; 0x160 <__bad_interrupt>
  32:	00 00       	nop
  34:	95 c0       	rjmp	.+298    	; 0x160 <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	93 c0       	rjmp	.+294    	; 0x160 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	91 c0       	rjmp	.+290    	; 0x160 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8f c0       	rjmp	.+286    	; 0x160 <__bad_interrupt>
  42:	00 00       	nop
  44:	8d c0       	rjmp	.+282    	; 0x160 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	8b c0       	rjmp	.+278    	; 0x160 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	89 c0       	rjmp	.+274    	; 0x160 <__bad_interrupt>
  4e:	00 00       	nop
  50:	87 c0       	rjmp	.+270    	; 0x160 <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	85 c0       	rjmp	.+266    	; 0x160 <__bad_interrupt>
  56:	00 00       	nop
  58:	83 c0       	rjmp	.+262    	; 0x160 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	81 c0       	rjmp	.+258    	; 0x160 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7f c0       	rjmp	.+254    	; 0x160 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	7d c0       	rjmp	.+250    	; 0x160 <__bad_interrupt>
  66:	00 00       	nop
  68:	7b c0       	rjmp	.+246    	; 0x160 <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	79 c0       	rjmp	.+242    	; 0x160 <__bad_interrupt>
  6e:	00 00       	nop
  70:	77 c0       	rjmp	.+238    	; 0x160 <__bad_interrupt>
  72:	00 00       	nop
  74:	75 c0       	rjmp	.+234    	; 0x160 <__bad_interrupt>
  76:	00 00       	nop
  78:	73 c0       	rjmp	.+230    	; 0x160 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	71 c0       	rjmp	.+226    	; 0x160 <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	6f c0       	rjmp	.+222    	; 0x160 <__bad_interrupt>
  82:	00 00       	nop
  84:	6d c0       	rjmp	.+218    	; 0x160 <__bad_interrupt>
  86:	00 00       	nop
  88:	6b c0       	rjmp	.+214    	; 0x160 <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	69 c0       	rjmp	.+210    	; 0x160 <__bad_interrupt>
  8e:	00 00       	nop
  90:	67 c0       	rjmp	.+206    	; 0x160 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	65 c0       	rjmp	.+202    	; 0x160 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000c6 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
  e4:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  f4:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 104:	00 05 07 05 02 03 08 00 05                          .........

0000010d <DeviceDescriptor>:
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10d:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
 11d:	00 01                                               ..

0000011f <GenericReport>:
 11f:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12f:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13f:	00                                                  .

00000140 <__ctors_end>:
 140:	11 24       	eor	r1, r1
 142:	1f be       	out	0x3f, r1	; 63
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
 144:	cf ef       	ldi	r28, 0xFF	; 255
 146:	d0 e2       	ldi	r29, 0x20	; 32
				ReportData     += 4;
 148:	de bf       	out	0x3e, r29	; 62
 14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_clear_bss>:
 14c:	11 e0       	ldi	r17, 0x01	; 1
				break;
 14e:	a0 e0       	ldi	r26, 0x00	; 0

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 150:	b1 e0       	ldi	r27, 0x01	; 1
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	ad 30       	cpi	r26, 0x0D	; 13
 158:	b1 07       	cpc	r27, r17
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	e9 d0       	rcall	.+466    	; 0x330 <main>
 15e:	db c5       	rjmp	.+2998   	; 0xd16 <_exit>

00000160 <__bad_interrupt>:
 160:	4f cf       	rjmp	.-354    	; 0x0 <__vectors>

00000162 <LEDs_SetAllLEDs>:
				ReportSize     -= 2;
 162:	9b b1       	in	r25, 0x0b	; 11
 164:	9f 70       	andi	r25, 0x0F	; 15
				ReportData     += 2;
 166:	98 2b       	or	r25, r24
 168:	9b b9       	out	0x0b, r25	; 11
 16a:	08 95       	ret

0000016c <SetupHardware>:
				break;
 16c:	84 b7       	in	r24, 0x34	; 52

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	84 bf       	out	0x34, r24	; 52
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	80 93 60 00 	sts	0x0060, r24
				ReportSize     -= 1;
 17c:	10 92 60 00 	sts	0x0060, r1
				ReportData     += 1;
 180:	0f be       	out	0x3f, r0	; 63
 182:	90 e0       	ldi	r25, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	80 93 61 00 	sts	0x0061, r24
 18e:	90 93 61 00 	sts	0x0061, r25
 192:	0f be       	out	0x3f, r0	; 63
 194:	8a b1       	in	r24, 0x0a	; 10
 196:	80 6f       	ori	r24, 0xF0	; 240
 198:	8a b9       	out	0x0a, r24	; 10
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	67 c3       	rjmp	.+1742   	; 0x870 <USB_Init>

000001a2 <EVENT_USB_Device_Connect>:
 1a2:	80 ea       	ldi	r24, 0xA0	; 160
 1a4:	de cf       	rjmp	.-68     	; 0x162 <LEDs_SetAllLEDs>

000001a6 <EVENT_USB_Device_Disconnect>:
 1a6:	80 e1       	ldi	r24, 0x10	; 16
 1a8:	dc cf       	rjmp	.-72     	; 0x162 <LEDs_SetAllLEDs>

000001aa <EVENT_USB_Device_ConfigurationChanged>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	cf 93       	push	r28
 1ac:	42 e0       	ldi	r20, 0x02	; 2
 1ae:	61 ec       	ldi	r22, 0xC1	; 193
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	93 d2       	rcall	.+1318   	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
				break;
 1b4:	c8 2f       	mov	r28, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	42 e0       	ldi	r20, 0x02	; 2
 1b8:	60 ec       	ldi	r22, 0xC0	; 192
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	8e d2       	rcall	.+1308   	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
 1be:	88 23       	and	r24, r24
 1c0:	21 f0       	breq	.+8      	; 0x1ca <EVENT_USB_Device_ConfigurationChanged+0x20>
 1c2:	cc 23       	and	r28, r28
 1c4:	11 f0       	breq	.+4      	; 0x1ca <EVENT_USB_Device_ConfigurationChanged+0x20>
 1c6:	80 e6       	ldi	r24, 0x60	; 96
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <EVENT_USB_Device_ConfigurationChanged+0x22>
 1ca:	80 e9       	ldi	r24, 0x90	; 144
 1cc:	cf 91       	pop	r28
 1ce:	c9 cf       	rjmp	.-110    	; 0x162 <LEDs_SetAllLEDs>

000001d0 <ProcessGenericHIDReport>:
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	81 11       	cpse	r24, r1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	91 11       	cpse	r25, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	92 81       	ldd	r25, Z+2	; 0x02
 1e0:	91 11       	cpse	r25, r1
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	93 81       	ldd	r25, Z+3	; 0x03
 1e6:	91 11       	cpse	r25, r1
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	bb cf       	rjmp	.-138    	; 0x162 <LEDs_SetAllLEDs>

000001ec <CreateGenericHIDReport>:
				break;
 1ec:	fc 01       	movw	r30, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	84 fb       	bst	r24, 4
 1f2:	99 27       	eor	r25, r25
 1f4:	90 f9       	bld	r25, 0
 1f6:	90 83       	st	Z, r25
 1f8:	85 fb       	bst	r24, 5
 1fa:	99 27       	eor	r25, r25
 1fc:	90 f9       	bld	r25, 0
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	98 2f       	mov	r25, r24
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	99 1f       	adc	r25, r25
 204:	99 27       	eor	r25, r25
				break;
 206:	99 1f       	adc	r25, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	92 83       	std	Z+2, r25	; 0x02
 20a:	86 fb       	bst	r24, 6
 20c:	88 27       	eor	r24, r24
 20e:	80 f9       	bld	r24, 0
 210:	83 83       	std	Z+3, r24	; 0x03
 212:	08 95       	ret

00000214 <EVENT_USB_Device_ControlRequest>:
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	28 97       	sbiw	r28, 0x08	; 8
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	80 91 06 01 	lds	r24, 0x0106
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	19 f0       	breq	.+6      	; 0x236 <EVENT_USB_Device_ControlRequest+0x22>
 230:	89 30       	cpi	r24, 0x09	; 9
 232:	c1 f0       	breq	.+48     	; 0x264 <EVENT_USB_Device_ControlRequest+0x50>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	2d c0       	rjmp	.+90     	; 0x290 <EVENT_USB_Device_ControlRequest+0x7c>
 236:	80 91 05 01 	lds	r24, 0x0105
 23a:	81 3a       	cpi	r24, 0xA1	; 161
 23c:	49 f5       	brne	.+82     	; 0x290 <EVENT_USB_Device_ControlRequest+0x7c>
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	d4 df       	rcall	.-88     	; 0x1ec <CreateGenericHIDReport>
 244:	80 91 e8 00 	lds	r24, 0x00E8
 248:	87 7f       	andi	r24, 0xF7	; 247
 24a:	80 93 e8 00 	sts	0x00E8, r24
 24e:	68 e0       	ldi	r22, 0x08	; 8
 250:	70 e0       	ldi	r23, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	46 d1       	rcall	.+652    	; 0x4e4 <Endpoint_Write_Control_Stream_LE>
 258:	80 91 e8 00 	lds	r24, 0x00E8
 25c:	8b 77       	andi	r24, 0x7B	; 123
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	80 93 e8 00 	sts	0x00E8, r24
 262:	16 c0       	rjmp	.+44     	; 0x290 <EVENT_USB_Device_ControlRequest+0x7c>
 264:	80 91 05 01 	lds	r24, 0x0105
 268:	81 32       	cpi	r24, 0x21	; 33
 26a:	91 f4       	brne	.+36     	; 0x290 <EVENT_USB_Device_ControlRequest+0x7c>
 26c:	80 91 e8 00 	lds	r24, 0x00E8
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	87 7f       	andi	r24, 0xF7	; 247
				break;
 272:	80 93 e8 00 	sts	0x00E8, r24

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 276:	68 e0       	ldi	r22, 0x08	; 8
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	8f d1       	rcall	.+798    	; 0x59e <Endpoint_Read_Control_Stream_LE>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	80 91 e8 00 	lds	r24, 0x00E8
				break;
 284:	8e 77       	andi	r24, 0x7E	; 126

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	80 93 e8 00 	sts	0x00E8, r24
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	a0 df       	rcall	.-192    	; 0x1d0 <ProcessGenericHIDReport>
				break;
 290:	28 96       	adiw	r28, 0x08	; 8

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
				break;
 2a0:	08 95       	ret

000002a2 <HID_Task>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	28 97       	sbiw	r28, 0x08	; 8
				break;
 2ac:	0f b6       	in	r0, 0x3f	; 63

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	80 91 04 01 	lds	r24, 0x0104
 2ba:	84 30       	cpi	r24, 0x04	; 4
				break;
 2bc:	81 f5       	brne	.+96     	; 0x31e <HID_Task+0x7c>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	80 93 e9 00 	sts	0x00E9, r24
 2c4:	80 91 e8 00 	lds	r24, 0x00E8
 2c8:	82 ff       	sbrs	r24, 2
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <HID_Task+0x50>
				break;
 2cc:	80 91 e8 00 	lds	r24, 0x00E8
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2d0:	85 ff       	sbrs	r24, 5
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <HID_Task+0x46>
				break;
 2d4:	40 e0       	ldi	r20, 0x00	; 0

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	68 e0       	ldi	r22, 0x08	; 8
 2da:	70 e0       	ldi	r23, 0x00	; 0

				if (ParserData->UsingReportIDs)
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	b9 d0       	rcall	.+370    	; 0x454 <Endpoint_Read_Stream_LE>
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	74 df       	rcall	.-280    	; 0x1d0 <ProcessGenericHIDReport>
 2e8:	80 91 e8 00 	lds	r24, 0x00E8
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	8b 77       	andi	r24, 0x7B	; 123
 2ee:	80 93 e8 00 	sts	0x00E8, r24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 e9 00 	sts	0x00E9, r24
 2f8:	80 91 e8 00 	lds	r24, 0x00E8
 2fc:	80 ff       	sbrs	r24, 0
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <HID_Task+0x7c>
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	73 df       	rcall	.-282    	; 0x1ec <CreateGenericHIDReport>
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	68 e0       	ldi	r22, 0x08	; 8
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	58 d0       	rcall	.+176    	; 0x3c4 <Endpoint_Write_Stream_LE>
 314:	80 91 e8 00 	lds	r24, 0x00E8
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	8e 77       	andi	r24, 0x7E	; 126
 31a:	80 93 e8 00 	sts	0x00E8, r24
 31e:	28 96       	adiw	r28, 0x08	; 8
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <main>:
 330:	1d df       	rcall	.-454    	; 0x16c <SetupHardware>
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	16 df       	rcall	.-468    	; 0x162 <LEDs_SetAllLEDs>
 336:	78 94       	sei
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	b4 df       	rcall	.-152    	; 0x2a2 <HID_Task>
 33a:	d1 d4       	rcall	.+2466   	; 0xcde <USB_USBTask>
 33c:	fd cf       	rjmp	.-6      	; 0x338 <main+0x8>

0000033e <CALLBACK_USB_GetDescriptor>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	29 2f       	mov	r18, r25
 340:	33 27       	eor	r19, r19
 342:	23 30       	cpi	r18, 0x03	; 3
 344:	31 05       	cpc	r19, r1
 346:	b9 f0       	breq	.+46     	; 0x376 <CALLBACK_USB_GetDescriptor+0x38>
 348:	5c f4       	brge	.+22     	; 0x360 <CALLBACK_USB_GetDescriptor+0x22>
 34a:	21 30       	cpi	r18, 0x01	; 1
 34c:	31 05       	cpc	r19, r1
 34e:	69 f1       	breq	.+90     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x6c>
 350:	22 30       	cpi	r18, 0x02	; 2
 352:	31 05       	cpc	r19, r1
 354:	79 f5       	brne	.+94     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
 356:	89 e2       	ldi	r24, 0x29	; 41
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	24 ee       	ldi	r18, 0xE4	; 228
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	2e c0       	rjmp	.+92     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
 360:	21 32       	cpi	r18, 0x21	; 33
 362:	31 05       	cpc	r19, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	e9 f0       	breq	.+58     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x62>
 366:	22 32       	cpi	r18, 0x22	; 34
 368:	31 05       	cpc	r19, r1
 36a:	21 f5       	brne	.+72     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2f e1       	ldi	r18, 0x1F	; 31
 372:	31 e0       	ldi	r19, 0x01	; 1
 374:	23 c0       	rjmp	.+70     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
 376:	99 27       	eor	r25, r25

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	91 05       	cpc	r25, r1
 37c:	41 f0       	breq	.+16     	; 0x38e <CALLBACK_USB_GetDescriptor+0x50>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	91 05       	cpc	r25, r1
 382:	41 f0       	breq	.+16     	; 0x394 <CALLBACK_USB_GetDescriptor+0x56>
 384:	89 2b       	or	r24, r25
 386:	b1 f4       	brne	.+44     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x76>
				break;
 388:	e0 ee       	ldi	r30, 0xE0	; 224

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	05 c0       	rjmp	.+10     	; 0x398 <CALLBACK_USB_GetDescriptor+0x5a>
 38e:	e6 ec       	ldi	r30, 0xC6	; 198
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <CALLBACK_USB_GetDescriptor+0x5a>
 394:	e8 e9       	ldi	r30, 0x98	; 152
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	84 91       	lpm	r24, Z
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9f 01       	movw	r18, r30
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	26 ef       	ldi	r18, 0xF6	; 246
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	09 c0       	rjmp	.+18     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
 3aa:	82 e1       	ldi	r24, 0x12	; 18
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	2d e0       	ldi	r18, 0x0D	; 13
				break;
 3b0:	31 e0       	ldi	r19, 0x01	; 1
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <CALLBACK_USB_GetDescriptor+0x7e>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	fa 01       	movw	r30, r20
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	31 83       	std	Z+1, r19	; 0x01
 3c0:	20 83       	st	Z, r18
 3c2:	08 95       	ret

000003c4 <Endpoint_Write_Stream_LE>:
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29

					while (CurrCollectionPath->Parent != NULL)
 3d4:	7c 01       	movw	r14, r24
 3d6:	8b 01       	movw	r16, r22
 3d8:	ea 01       	movw	r28, r20
 3da:	d5 d1       	rcall	.+938    	; 0x786 <Endpoint_WaitUntilReady>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	81 11       	cpse	r24, r1
 3de:	31 c0       	rjmp	.+98     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
 3e0:	20 97       	sbiw	r28, 0x00	; 0
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <Endpoint_Write_Stream_LE+0x2c>
 3e4:	88 81       	ld	r24, Y
 3e6:	99 81       	ldd	r25, Y+1	; 0x01
 3e8:	08 1b       	sub	r16, r24
 3ea:	19 0b       	sbc	r17, r25
 3ec:	e8 0e       	add	r14, r24
 3ee:	f9 1e       	adc	r15, r25
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	c1 2c       	mov	r12, r1
 3f2:	d1 2c       	mov	r13, r1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	01 15       	cp	r16, r1
 3f6:	11 05       	cpc	r17, r1
 3f8:	19 f1       	breq	.+70     	; 0x440 <Endpoint_Write_Stream_LE+0x7c>
 3fa:	80 91 e8 00 	lds	r24, 0x00E8
 3fe:	85 fd       	sbrc	r24, 5
 400:	14 c0       	rjmp	.+40     	; 0x42a <Endpoint_Write_Stream_LE+0x66>
 402:	80 91 e8 00 	lds	r24, 0x00E8
 406:	8e 77       	andi	r24, 0x7E	; 126
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	80 93 e8 00 	sts	0x00E8, r24
 40c:	68 d4       	rcall	.+2256   	; 0xcde <USB_USBTask>
 40e:	20 97       	sbiw	r28, 0x00	; 0
 410:	41 f0       	breq	.+16     	; 0x422 <Endpoint_Write_Stream_LE+0x5e>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	88 81       	ld	r24, Y
 414:	99 81       	ldd	r25, Y+1	; 0x01
 416:	8c 0d       	add	r24, r12
 418:	9d 1d       	adc	r25, r13
 41a:	99 83       	std	Y+1, r25	; 0x01
 41c:	88 83       	st	Y, r24
 41e:	85 e0       	ldi	r24, 0x05	; 5

				if (UsageListSize)
 420:	10 c0       	rjmp	.+32     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
 422:	b1 d1       	rcall	.+866    	; 0x786 <Endpoint_WaitUntilReady>
 424:	88 23       	and	r24, r24
 426:	31 f3       	breq	.-52     	; 0x3f4 <Endpoint_Write_Stream_LE+0x30>
 428:	0c c0       	rjmp	.+24     	; 0x442 <Endpoint_Write_Stream_LE+0x7e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	f7 01       	movw	r30, r14
 42c:	81 91       	ld	r24, Z+
 42e:	7f 01       	movw	r14, r30
 430:	80 93 f1 00 	sts	0x00F1, r24
 434:	01 50       	subi	r16, 0x01	; 1
 436:	11 09       	sbc	r17, r1
 438:	ff ef       	ldi	r31, 0xFF	; 255
 43a:	cf 1a       	sub	r12, r31
 43c:	df 0a       	sbc	r13, r31
 43e:	da cf       	rjmp	.-76     	; 0x3f4 <Endpoint_Write_Stream_LE+0x30>

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
					  UsageList[i - 1] = UsageList[i];
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	08 95       	ret

00000454 <Endpoint_Read_Stream_LE>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	cf 92       	push	r12
 456:	df 92       	push	r13
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	df 93       	push	r29
 464:	7c 01       	movw	r14, r24
 466:	8b 01       	movw	r16, r22
 468:	ea 01       	movw	r28, r20
 46a:	8d d1       	rcall	.+794    	; 0x786 <Endpoint_WaitUntilReady>
 46c:	81 11       	cpse	r24, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	31 c0       	rjmp	.+98     	; 0x4d2 <Endpoint_Read_Stream_LE+0x7e>
 470:	20 97       	sbiw	r28, 0x00	; 0
 472:	31 f0       	breq	.+12     	; 0x480 <Endpoint_Read_Stream_LE+0x2c>
 474:	88 81       	ld	r24, Y
 476:	99 81       	ldd	r25, Y+1	; 0x01
 478:	08 1b       	sub	r16, r24
 47a:	19 0b       	sbc	r17, r25
 47c:	e8 0e       	add	r14, r24
 47e:	f9 1e       	adc	r15, r25
 480:	c1 2c       	mov	r12, r1
 482:	d1 2c       	mov	r13, r1
 484:	01 15       	cp	r16, r1
 486:	11 05       	cpc	r17, r1
 488:	19 f1       	breq	.+70     	; 0x4d0 <Endpoint_Read_Stream_LE+0x7c>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	80 91 e8 00 	lds	r24, 0x00E8
 48e:	85 fd       	sbrc	r24, 5
 490:	14 c0       	rjmp	.+40     	; 0x4ba <Endpoint_Read_Stream_LE+0x66>
 492:	80 91 e8 00 	lds	r24, 0x00E8
 496:	8b 77       	andi	r24, 0x7B	; 123
 498:	80 93 e8 00 	sts	0x00E8, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49c:	20 d4       	rcall	.+2112   	; 0xcde <USB_USBTask>
 49e:	20 97       	sbiw	r28, 0x00	; 0
 4a0:	41 f0       	breq	.+16     	; 0x4b2 <Endpoint_Read_Stream_LE+0x5e>
 4a2:	88 81       	ld	r24, Y
 4a4:	99 81       	ldd	r25, Y+1	; 0x01
 4a6:	8c 0d       	add	r24, r12
 4a8:	9d 1d       	adc	r25, r13
 4aa:	99 83       	std	Y+1, r25	; 0x01
				break;
 4ac:	88 83       	st	Y, r24
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	85 e0       	ldi	r24, 0x05	; 5
 4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <Endpoint_Read_Stream_LE+0x7e>
 4b2:	69 d1       	rcall	.+722    	; 0x786 <Endpoint_WaitUntilReady>
 4b4:	88 23       	and	r24, r24
 4b6:	31 f3       	breq	.-52     	; 0x484 <Endpoint_Read_Stream_LE+0x30>
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <Endpoint_Read_Stream_LE+0x7e>
 4ba:	80 91 f1 00 	lds	r24, 0x00F1
 4be:	f7 01       	movw	r30, r14
 4c0:	81 93       	st	Z+, r24
 4c2:	7f 01       	movw	r14, r30
 4c4:	01 50       	subi	r16, 0x01	; 1
 4c6:	11 09       	sbc	r17, r1
 4c8:	ff ef       	ldi	r31, 0xFF	; 255
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	cf 1a       	sub	r12, r31
 4cc:	df 0a       	sbc	r13, r31
 4ce:	da cf       	rjmp	.-76     	; 0x484 <Endpoint_Read_Stream_LE+0x30>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	08 95       	ret

000004e4 <Endpoint_Write_Control_Stream_LE>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	20 91 0b 01 	lds	r18, 0x010B
 4e8:	30 91 0c 01 	lds	r19, 0x010C
 4ec:	26 17       	cp	r18, r22
 4ee:	37 07       	cpc	r19, r23
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	48 f0       	brcs	.+18     	; 0x504 <Endpoint_Write_Control_Stream_LE+0x20>
 4f2:	61 15       	cp	r22, r1
 4f4:	71 05       	cpc	r23, r1
 4f6:	39 f4       	brne	.+14     	; 0x506 <Endpoint_Write_Control_Stream_LE+0x22>
 4f8:	20 91 e8 00 	lds	r18, 0x00E8
 4fc:	2e 77       	andi	r18, 0x7E	; 126
 4fe:	20 93 e8 00 	sts	0x00E8, r18
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	01 c0       	rjmp	.+2      	; 0x506 <Endpoint_Write_Control_Stream_LE+0x22>
 504:	b9 01       	movw	r22, r18
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	fc 01       	movw	r30, r24
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	61 15       	cp	r22, r1
 50c:	71 05       	cpc	r23, r1
 50e:	99 f1       	breq	.+102    	; 0x576 <Endpoint_Write_Control_Stream_LE+0x92>
 510:	80 91 04 01 	lds	r24, 0x0104
 514:	88 23       	and	r24, r24
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	e9 f1       	breq	.+122    	; 0x592 <Endpoint_Write_Control_Stream_LE+0xae>
 518:	85 30       	cpi	r24, 0x05	; 5
 51a:	e9 f1       	breq	.+122    	; 0x596 <Endpoint_Write_Control_Stream_LE+0xb2>
 51c:	80 91 e8 00 	lds	r24, 0x00E8

					if (UsageListSize)
 520:	83 fd       	sbrc	r24, 3
 522:	3b c0       	rjmp	.+118    	; 0x59a <Endpoint_Write_Control_Stream_LE+0xb6>
 524:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	82 ff       	sbrs	r24, 2
 52a:	06 c0       	rjmp	.+12     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x54>
 52c:	80 91 e8 00 	lds	r24, 0x00E8
 530:	82 ff       	sbrs	r24, 2
 532:	24 c0       	rjmp	.+72     	; 0x57c <Endpoint_Write_Control_Stream_LE+0x98>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
 538:	80 91 e8 00 	lds	r24, 0x00E8
 53c:	80 ff       	sbrs	r24, 0

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	e5 cf       	rjmp	.-54     	; 0x50a <Endpoint_Write_Control_Stream_LE+0x26>
 540:	80 91 f2 00 	lds	r24, 0x00F2
 544:	90 91 f3 00 	lds	r25, 0x00F3
 548:	61 15       	cp	r22, r1
						  UsageList[i - 1] = UsageList[i];
 54a:	71 05       	cpc	r23, r1
 54c:	51 f0       	breq	.+20     	; 0x562 <Endpoint_Write_Control_Stream_LE+0x7e>
 54e:	88 30       	cpi	r24, 0x08	; 8
 550:	91 05       	cpc	r25, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	38 f4       	brcc	.+14     	; 0x562 <Endpoint_Write_Control_Stream_LE+0x7e>
 554:	21 91       	ld	r18, Z+
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	20 93 f1 00 	sts	0x00F1, r18
 55a:	61 50       	subi	r22, 0x01	; 1
 55c:	71 09       	sbc	r23, r1
 55e:	01 96       	adiw	r24, 0x01	; 1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	f3 cf       	rjmp	.-26     	; 0x548 <Endpoint_Write_Control_Stream_LE+0x64>
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	08 97       	sbiw	r24, 0x08	; 8
 566:	09 f0       	breq	.+2      	; 0x56a <Endpoint_Write_Control_Stream_LE+0x86>
 568:	20 e0       	ldi	r18, 0x00	; 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	80 91 e8 00 	lds	r24, 0x00E8
 56e:	8e 77       	andi	r24, 0x7E	; 126
 570:	80 93 e8 00 	sts	0x00E8, r24
 574:	ca cf       	rjmp	.-108    	; 0x50a <Endpoint_Write_Control_Stream_LE+0x26>
 576:	21 11       	cpse	r18, r1
 578:	cb cf       	rjmp	.-106    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x2c>
 57a:	d8 cf       	rjmp	.-80     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x48>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	80 91 04 01 	lds	r24, 0x0104
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	88 23       	and	r24, r24
 582:	39 f0       	breq	.+14     	; 0x592 <Endpoint_Write_Control_Stream_LE+0xae>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	85 30       	cpi	r24, 0x05	; 5
 586:	39 f0       	breq	.+14     	; 0x596 <Endpoint_Write_Control_Stream_LE+0xb2>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	80 91 e8 00 	lds	r24, 0x00E8
 58c:	83 ff       	sbrs	r24, 3
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	ce cf       	rjmp	.-100    	; 0x52c <Endpoint_Write_Control_Stream_LE+0x48>
 590:	04 c0       	rjmp	.+8      	; 0x59a <Endpoint_Write_Control_Stream_LE+0xb6>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	08 95       	ret
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	08 95       	ret
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret

0000059e <Endpoint_Read_Control_Stream_LE>:
 59e:	61 15       	cp	r22, r1
 5a0:	71 05       	cpc	r23, r1
 5a2:	29 f4       	brne	.+10     	; 0x5ae <Endpoint_Read_Control_Stream_LE+0x10>
 5a4:	20 91 e8 00 	lds	r18, 0x00E8
 5a8:	2b 77       	andi	r18, 0x7B	; 123
 5aa:	20 93 e8 00 	sts	0x00E8, r18

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ae:	61 15       	cp	r22, r1
 5b0:	71 05       	cpc	r23, r1
 5b2:	31 f1       	breq	.+76     	; 0x600 <Endpoint_Read_Control_Stream_LE+0x62>
 5b4:	20 91 04 01 	lds	r18, 0x0104
 5b8:	22 23       	and	r18, r18
 5ba:	59 f1       	breq	.+86     	; 0x612 <Endpoint_Read_Control_Stream_LE+0x74>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	25 30       	cpi	r18, 0x05	; 5
 5be:	59 f1       	breq	.+86     	; 0x616 <Endpoint_Read_Control_Stream_LE+0x78>
 5c0:	20 91 e8 00 	lds	r18, 0x00E8
 5c4:	23 fd       	sbrc	r18, 3
 5c6:	21 c0       	rjmp	.+66     	; 0x60a <Endpoint_Read_Control_Stream_LE+0x6c>
 5c8:	20 91 e8 00 	lds	r18, 0x00E8
 5cc:	22 ff       	sbrs	r18, 2
 5ce:	f2 cf       	rjmp	.-28     	; 0x5b4 <Endpoint_Read_Control_Stream_LE+0x16>
 5d0:	fc 01       	movw	r30, r24
 5d2:	cf 01       	movw	r24, r30
 5d4:	20 91 f2 00 	lds	r18, 0x00F2
 5d8:	30 91 f3 00 	lds	r19, 0x00F3
 5dc:	23 2b       	or	r18, r19
 5de:	11 f3       	breq	.-60     	; 0x5a4 <Endpoint_Read_Control_Stream_LE+0x6>
 5e0:	80 91 f1 00 	lds	r24, 0x00F1
 5e4:	81 93       	st	Z+, r24
 5e6:	cf 01       	movw	r24, r30
 5e8:	61 50       	subi	r22, 0x01	; 1
 5ea:	71 09       	sbc	r23, r1
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	81 f7       	brne	.-32     	; 0x5d2 <Endpoint_Read_Control_Stream_LE+0x34>
 5f2:	d8 cf       	rjmp	.-80     	; 0x5a4 <Endpoint_Read_Control_Stream_LE+0x6>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	80 91 04 01 	lds	r24, 0x0104
 5f8:	88 23       	and	r24, r24
 5fa:	59 f0       	breq	.+22     	; 0x612 <Endpoint_Read_Control_Stream_LE+0x74>
 5fc:	85 30       	cpi	r24, 0x05	; 5
					  return HID_PARSE_InsufficientReportItems;
 5fe:	59 f0       	breq	.+22     	; 0x616 <Endpoint_Read_Control_Stream_LE+0x78>
 600:	80 91 e8 00 	lds	r24, 0x00E8

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 604:	80 ff       	sbrs	r24, 0
 606:	f6 cf       	rjmp	.-20     	; 0x5f4 <Endpoint_Read_Control_Stream_LE+0x56>
 608:	02 c0       	rjmp	.+4      	; 0x60e <Endpoint_Read_Control_Stream_LE+0x70>
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	08 95       	ret
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	08 95       	ret
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	08 95       	ret
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	08 95       	ret

0000061a <Endpoint_Write_Control_PStream_LE>:
 61a:	20 91 0b 01 	lds	r18, 0x010B
 61e:	30 91 0c 01 	lds	r19, 0x010C
 622:	26 17       	cp	r18, r22
 624:	37 07       	cpc	r19, r23
 626:	48 f0       	brcs	.+18     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x20>
 628:	61 15       	cp	r22, r1
 62a:	71 05       	cpc	r23, r1
 62c:	39 f4       	brne	.+14     	; 0x63c <Endpoint_Write_Control_PStream_LE+0x22>
 62e:	20 91 e8 00 	lds	r18, 0x00E8
 632:	2e 77       	andi	r18, 0x7E	; 126
 634:	20 93 e8 00 	sts	0x00E8, r18
 638:	01 c0       	rjmp	.+2      	; 0x63c <Endpoint_Write_Control_PStream_LE+0x22>
 63a:	b9 01       	movw	r22, r18
 63c:	fc 01       	movw	r30, r24
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	61 15       	cp	r22, r1
 642:	71 05       	cpc	r23, r1
 644:	b1 f1       	breq	.+108    	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x98>
 646:	80 91 04 01 	lds	r24, 0x0104
 64a:	88 23       	and	r24, r24
 64c:	09 f4       	brne	.+2      	; 0x650 <Endpoint_Write_Control_PStream_LE+0x36>
 64e:	3f c0       	rjmp	.+126    	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xb4>
 650:	85 30       	cpi	r24, 0x05	; 5
 652:	09 f4       	brne	.+2      	; 0x656 <Endpoint_Write_Control_PStream_LE+0x3c>
 654:	3e c0       	rjmp	.+124    	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0xb8>
 656:	80 91 e8 00 	lds	r24, 0x00E8
 65a:	83 fd       	sbrc	r24, 3
 65c:	3c c0       	rjmp	.+120    	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0xbc>
 65e:	80 91 e8 00 	lds	r24, 0x00E8
 662:	82 ff       	sbrs	r24, 2
 664:	06 c0       	rjmp	.+12     	; 0x672 <Endpoint_Write_Control_PStream_LE+0x58>
 666:	80 91 e8 00 	lds	r24, 0x00E8
 66a:	82 ff       	sbrs	r24, 2
 66c:	25 c0       	rjmp	.+74     	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0x9e>
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret
 672:	80 91 e8 00 	lds	r24, 0x00E8
 676:	80 ff       	sbrs	r24, 0
 678:	e3 cf       	rjmp	.-58     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x26>
 67a:	80 91 f2 00 	lds	r24, 0x00F2
 67e:	90 91 f3 00 	lds	r25, 0x00F3
 682:	61 15       	cp	r22, r1
 684:	71 05       	cpc	r23, r1
 686:	59 f0       	breq	.+22     	; 0x69e <Endpoint_Write_Control_PStream_LE+0x84>
					  ParserData->TotalReportItems++;
 688:	88 30       	cpi	r24, 0x08	; 8
 68a:	91 05       	cpc	r25, r1
 68c:	40 f4       	brcc	.+16     	; 0x69e <Endpoint_Write_Control_PStream_LE+0x84>
 68e:	24 91       	lpm	r18, Z
 690:	20 93 f1 00 	sts	0x00F1, r18

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 694:	31 96       	adiw	r30, 0x01	; 1
 696:	61 50       	subi	r22, 0x01	; 1
 698:	71 09       	sbc	r23, r1
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	f2 cf       	rjmp	.-28     	; 0x682 <Endpoint_Write_Control_PStream_LE+0x68>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	21 e0       	ldi	r18, 0x01	; 1
 6a0:	08 97       	sbiw	r24, 0x08	; 8
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <Endpoint_Write_Control_PStream_LE+0x8c>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	80 91 e8 00 	lds	r24, 0x00E8
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	8e 77       	andi	r24, 0x7E	; 126
 6ac:	80 93 e8 00 	sts	0x00E8, r24
 6b0:	c7 cf       	rjmp	.-114    	; 0x640 <Endpoint_Write_Control_PStream_LE+0x26>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	21 11       	cpse	r18, r1
 6b4:	c8 cf       	rjmp	.-112    	; 0x646 <Endpoint_Write_Control_PStream_LE+0x2c>
 6b6:	d7 cf       	rjmp	.-82     	; 0x666 <Endpoint_Write_Control_PStream_LE+0x4c>
 6b8:	80 91 04 01 	lds	r24, 0x0104
	  return HID_PARSE_NoUnfilteredReportItems;
 6bc:	88 23       	and	r24, r24

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	39 f0       	breq	.+14     	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xb4>
 6c0:	85 30       	cpi	r24, 0x05	; 5
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0xb8>
 6c4:	80 91 e8 00 	lds	r24, 0x00E8
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c8:	83 ff       	sbrs	r24, 3
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	cd cf       	rjmp	.-102    	; 0x666 <Endpoint_Write_Control_PStream_LE+0x4c>
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0xbc>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	08 95       	ret
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	08 95       	ret
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	81 e0       	ldi	r24, 0x01	; 1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	08 95       	ret

000006da <Endpoint_ConfigureEndpoint_Prv>:
 6da:	98 2f       	mov	r25, r24
 6dc:	97 30       	cpi	r25, 0x07	; 7
 6de:	58 f5       	brcc	.+86     	; 0x736 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 6e0:	90 93 e9 00 	sts	0x00E9, r25
 6e4:	98 17       	cp	r25, r24
 6e6:	39 f0       	breq	.+14     	; 0x6f6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 6e8:	70 91 ec 00 	lds	r23, 0x00EC
 6ec:	20 91 ed 00 	lds	r18, 0x00ED
 6f0:	50 91 f0 00 	lds	r21, 0x00F0
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <Endpoint_ConfigureEndpoint_Prv+0x22>
 6f6:	24 2f       	mov	r18, r20
 6f8:	76 2f       	mov	r23, r22
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	21 ff       	sbrs	r18, 1
 6fe:	19 c0       	rjmp	.+50     	; 0x732 <Endpoint_ConfigureEndpoint_Prv+0x58>
 700:	30 91 eb 00 	lds	r19, 0x00EB
 704:	3e 7f       	andi	r19, 0xFE	; 254
 706:	30 93 eb 00 	sts	0x00EB, r19
 70a:	30 91 ed 00 	lds	r19, 0x00ED

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 70e:	3d 7f       	andi	r19, 0xFD	; 253
 710:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 714:	30 91 eb 00 	lds	r19, 0x00EB
 718:	31 60       	ori	r19, 0x01	; 1
 71a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 71e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 722:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 726:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 72a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 72e:	27 ff       	sbrs	r18, 7
 730:	07 c0       	rjmp	.+14     	; 0x740 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 732:	9f 5f       	subi	r25, 0xFF	; 255
 734:	d3 cf       	rjmp	.-90     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 736:	8f 70       	andi	r24, 0x0F	; 15
 738:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 740:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 742:	08 95       	ret

00000744 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 744:	80 91 05 01 	lds	r24, 0x0105
 748:	87 fd       	sbrc	r24, 7
 74a:	05 c0       	rjmp	.+10     	; 0x756 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 74c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 750:	80 ff       	sbrs	r24, 0
 752:	0e c0       	rjmp	.+28     	; 0x770 <Endpoint_ClearStatusStage+0x2c>
 754:	12 c0       	rjmp	.+36     	; 0x77a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 756:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 75a:	82 fd       	sbrc	r24, 2
 75c:	05 c0       	rjmp	.+10     	; 0x768 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 75e:	80 91 04 01 	lds	r24, 0x0104
 762:	81 11       	cpse	r24, r1
 764:	f8 cf       	rjmp	.-16     	; 0x756 <Endpoint_ClearStatusStage+0x12>
 766:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 768:	80 91 e8 00 	lds	r24, 0x00E8
 76c:	8b 77       	andi	r24, 0x7B	; 123
 76e:	08 c0       	rjmp	.+16     	; 0x780 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 770:	80 91 04 01 	lds	r24, 0x0104
 774:	81 11       	cpse	r24, r1
 776:	ea cf       	rjmp	.-44     	; 0x74c <Endpoint_ClearStatusStage+0x8>
 778:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 77a:	80 91 e8 00 	lds	r24, 0x00E8
 77e:	8e 77       	andi	r24, 0x7E	; 126
 780:	80 93 e8 00 	sts	0x00E8, r24
 784:	08 95       	ret

00000786 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 786:	80 91 e4 00 	lds	r24, 0x00E4
 78a:	90 91 e5 00 	lds	r25, 0x00E5
 78e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 790:	20 91 ec 00 	lds	r18, 0x00EC
 794:	20 ff       	sbrs	r18, 0
 796:	21 c0       	rjmp	.+66     	; 0x7da <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 798:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 79c:	20 fd       	sbrc	r18, 0
 79e:	21 c0       	rjmp	.+66     	; 0x7e2 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7a0:	20 91 04 01 	lds	r18, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7a4:	22 23       	and	r18, r18
 7a6:	89 f0       	breq	.+34     	; 0x7ca <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7a8:	25 30       	cpi	r18, 0x05	; 5
 7aa:	89 f0       	breq	.+34     	; 0x7ce <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7ac:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7b0:	25 fd       	sbrc	r18, 5
 7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <Endpoint_WaitUntilReady+0x4c>
 7b4:	20 91 e4 00 	lds	r18, 0x00E4
 7b8:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7bc:	28 17       	cp	r18, r24
 7be:	39 07       	cpc	r19, r25
 7c0:	39 f3       	breq	.-50     	; 0x790 <Endpoint_WaitUntilReady+0xa>
 7c2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7c4:	41 f0       	breq	.+16     	; 0x7d6 <Endpoint_WaitUntilReady+0x50>
 7c6:	c9 01       	movw	r24, r18
 7c8:	e3 cf       	rjmp	.-58     	; 0x790 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7da:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 7de:	22 ff       	sbrs	r18, 2
 7e0:	df cf       	rjmp	.-66     	; 0x7a0 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret

000007e6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7ee:	4e d0       	rcall	.+156    	; 0x88c <USB_INT_DisableAllInterrupts>
 7f0:	55 d0       	rcall	.+170    	; 0x89c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7f2:	c8 ed       	ldi	r28, 0xD8	; 216
 7f4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7f6:	88 81       	ld	r24, Y
 7f8:	8f 77       	andi	r24, 0x7F	; 127
 7fa:	88 83       	st	Y, r24
 7fc:	88 81       	ld	r24, Y
 7fe:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 800:	88 83       	st	Y, r24
 802:	88 81       	ld	r24, Y
 804:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 806:	88 83       	st	Y, r24
 808:	e7 ed       	ldi	r30, 0xD7	; 215
 80a:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 80c:	80 81       	ld	r24, Z
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	80 83       	st	Z, r24
 812:	19 bc       	out	0x29, r1	; 41
 814:	10 92 04 01 	sts	0x0104, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 818:	10 92 00 01 	sts	0x0100, r1
	USB_Device_ConfigurationNumber  = 0;
 81c:	10 92 02 01 	sts	0x0102, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 820:	10 92 01 01 	sts	0x0101, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 824:	00 ee       	ldi	r16, 0xE0	; 224
 826:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 828:	f8 01       	movw	r30, r16
 82a:	80 81       	ld	r24, Z
 82c:	8b 7f       	andi	r24, 0xFB	; 251
 82e:	80 83       	st	Z, r24
 830:	88 81       	ld	r24, Y
 832:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 834:	88 83       	st	Y, r24
 836:	42 e0       	ldi	r20, 0x02	; 2
 838:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	4e df       	rcall	.-356    	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
 83e:	e1 ee       	ldi	r30, 0xE1	; 225
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 844:	8e 7f       	andi	r24, 0xFE	; 254
 846:	80 83       	st	Z, r24
 848:	e2 ee       	ldi	r30, 0xE2	; 226
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 83       	st	Z, r24
 852:	80 81       	ld	r24, Z
 854:	88 60       	ori	r24, 0x08	; 8
 856:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 858:	f8 01       	movw	r30, r16
 85a:	80 81       	ld	r24, Z
 85c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 85e:	80 83       	st	Z, r24
 860:	88 81       	ld	r24, Y
 862:	80 61       	ori	r24, 0x10	; 16
 864:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <USB_Init>:
 870:	e8 ed       	ldi	r30, 0xD8	; 216
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 876:	8f 7e       	andi	r24, 0xEF	; 239
 878:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 87a:	e7 ed       	ldi	r30, 0xD7	; 215
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	81 60       	ori	r24, 0x01	; 1
 882:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 03 01 	sts	0x0103, r24

	USB_ResetInterface();
 88a:	ad cf       	rjmp	.-166    	; 0x7e6 <USB_ResetInterface>

0000088c <USB_INT_DisableAllInterrupts>:
 88c:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	8c 7f       	andi	r24, 0xFC	; 252
 894:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 896:	10 92 e2 00 	sts	0x00E2, r1
 89a:	08 95       	ret

0000089c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 89c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8a0:	10 92 e1 00 	sts	0x00E1, r1
 8a4:	08 95       	ret

000008a6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	0b b6       	in	r0, 0x3b	; 59
 8b2:	0f 92       	push	r0
 8b4:	2f 93       	push	r18
 8b6:	3f 93       	push	r19
 8b8:	4f 93       	push	r20
 8ba:	5f 93       	push	r21
 8bc:	6f 93       	push	r22
 8be:	7f 93       	push	r23
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	af 93       	push	r26
 8c6:	bf 93       	push	r27
 8c8:	ef 93       	push	r30
 8ca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8d0:	82 ff       	sbrs	r24, 2
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8d4:	80 91 e2 00 	lds	r24, 0x00E2
 8d8:	82 ff       	sbrs	r24, 2
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 8dc:	80 91 e1 00 	lds	r24, 0x00E1
 8e0:	8b 7f       	andi	r24, 0xFB	; 251
 8e2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8e6:	fa d1       	rcall	.+1012   	; 0xcdc <USB_Event_Stub>
 8e8:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 8ec:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8ee:	1d c0       	rjmp	.+58     	; 0x92a <__vector_10+0x84>
 8f0:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8f4:	80 ff       	sbrs	r24, 0
 8f6:	19 c0       	rjmp	.+50     	; 0x92a <__vector_10+0x84>
 8f8:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8fc:	8e 7f       	andi	r24, 0xFE	; 254
 8fe:	80 93 da 00 	sts	0x00DA, r24
 902:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 906:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 908:	0c c0       	rjmp	.+24     	; 0x922 <__vector_10+0x7c>
 90a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 90c:	89 bd       	out	0x29, r24	; 41
 90e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 910:	89 bd       	out	0x29, r24	; 41
 912:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 914:	00 fe       	sbrs	r0, 0
 916:	fd cf       	rjmp	.-6      	; 0x912 <__vector_10+0x6c>
 918:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 91a:	80 93 04 01 	sts	0x0104, r24
 91e:	41 dc       	rcall	.-1918   	; 0x1a2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 920:	04 c0       	rjmp	.+8      	; 0x92a <__vector_10+0x84>
 922:	19 bc       	out	0x29, r1	; 41
 924:	10 92 04 01 	sts	0x0104, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 928:	3e dc       	rcall	.-1924   	; 0x1a6 <EVENT_USB_Device_Disconnect>
 92a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 92e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 930:	18 c0       	rjmp	.+48     	; 0x962 <__vector_10+0xbc>
 932:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 936:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 938:	14 c0       	rjmp	.+40     	; 0x962 <__vector_10+0xbc>
 93a:	80 91 e2 00 	lds	r24, 0x00E2
 93e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 940:	80 93 e2 00 	sts	0x00E2, r24
 944:	80 91 e2 00 	lds	r24, 0x00E2
 948:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 94a:	80 93 e2 00 	sts	0x00E2, r24
 94e:	80 91 d8 00 	lds	r24, 0x00D8
 952:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 954:	80 93 d8 00 	sts	0x00D8, r24
 958:	19 bc       	out	0x29, r1	; 41
 95a:	85 e0       	ldi	r24, 0x05	; 5
 95c:	80 93 04 01 	sts	0x0104, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 960:	bd d1       	rcall	.+890    	; 0xcdc <USB_Event_Stub>
 962:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 966:	84 ff       	sbrs	r24, 4
 968:	2f c0       	rjmp	.+94     	; 0x9c8 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 96a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 96e:	84 ff       	sbrs	r24, 4
 970:	2b c0       	rjmp	.+86     	; 0x9c8 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 972:	8c e0       	ldi	r24, 0x0C	; 12
 974:	89 bd       	out	0x29, r24	; 41
 976:	8e e0       	ldi	r24, 0x0E	; 14
 978:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 97a:	09 b4       	in	r0, 0x29	; 41
 97c:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 97e:	fd cf       	rjmp	.-6      	; 0x97a <__vector_10+0xd4>
 980:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 984:	8f 7d       	andi	r24, 0xDF	; 223
 986:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 98a:	80 91 e1 00 	lds	r24, 0x00E1
 98e:	8f 7e       	andi	r24, 0xEF	; 239
 990:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 994:	80 91 e2 00 	lds	r24, 0x00E2
 998:	8f 7e       	andi	r24, 0xEF	; 239
 99a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 99e:	80 91 e2 00 	lds	r24, 0x00E2
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9a8:	80 91 00 01 	lds	r24, 0x0100
 9ac:	88 23       	and	r24, r24
 9ae:	11 f0       	breq	.+4      	; 0x9b4 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9b0:	84 e0       	ldi	r24, 0x04	; 4
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__vector_10+0x11c>
 9b4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 9b8:	87 ff       	sbrs	r24, 7
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9bc:	83 e0       	ldi	r24, 0x03	; 3
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	80 93 04 01 	sts	0x0104, r24
 9c6:	8a d1       	rcall	.+788    	; 0xcdc <USB_Event_Stub>
 9c8:	80 91 e1 00 	lds	r24, 0x00E1
 9cc:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9ce:	22 c0       	rjmp	.+68     	; 0xa14 <__vector_10+0x16e>
 9d0:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9d4:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9d6:	1e c0       	rjmp	.+60     	; 0xa14 <__vector_10+0x16e>
 9d8:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9dc:	87 7f       	andi	r24, 0xF7	; 247
 9de:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 9e2:	82 e0       	ldi	r24, 0x02	; 2
 9e4:	80 93 04 01 	sts	0x0104, r24
 9e8:	10 92 00 01 	sts	0x0100, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 9ec:	80 91 e1 00 	lds	r24, 0x00E1
 9f0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9f2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9f6:	80 91 e2 00 	lds	r24, 0x00E2
 9fa:	8e 7f       	andi	r24, 0xFE	; 254
 9fc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a00:	80 91 e2 00 	lds	r24, 0x00E2
 a04:	80 61       	ori	r24, 0x10	; 16
 a06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a0a:	42 e0       	ldi	r20, 0x02	; 2
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	64 de       	rcall	.-824    	; 0x6da <Endpoint_ConfigureEndpoint_Prv>
 a12:	64 d1       	rcall	.+712    	; 0xcdc <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a14:	ff 91       	pop	r31
 a16:	ef 91       	pop	r30
 a18:	bf 91       	pop	r27
 a1a:	af 91       	pop	r26
 a1c:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a1e:	8f 91       	pop	r24
 a20:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a22:	6f 91       	pop	r22
 a24:	5f 91       	pop	r21
 a26:	4f 91       	pop	r20
 a28:	3f 91       	pop	r19
 a2a:	2f 91       	pop	r18
 a2c:	0f 90       	pop	r0
 a2e:	0b be       	out	0x3b, r0	; 59
 a30:	0f 90       	pop	r0
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	0f 90       	pop	r0
 a36:	1f 90       	pop	r1
 a38:	18 95       	reti

00000a3a <USB_Device_ProcessControlRequest>:
 a3a:	1f 93       	push	r17
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
 a44:	aa 97       	sbiw	r28, 0x2a	; 42
 a46:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	e5 e0       	ldi	r30, 0x05	; 5
 a52:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a54:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a58:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a5a:	21 e0       	ldi	r18, 0x01	; 1
 a5c:	ed 30       	cpi	r30, 0x0D	; 13
 a5e:	f2 07       	cpc	r31, r18
 a60:	c9 f7       	brne	.-14     	; 0xa54 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a62:	d8 db       	rcall	.-2128   	; 0x214 <EVENT_USB_Device_ControlRequest>
 a64:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a68:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a6a:	20 c1       	rjmp	.+576    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 a6c:	90 91 05 01 	lds	r25, 0x0105
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a70:	80 91 06 01 	lds	r24, 0x0106

		switch (USB_ControlRequest.bRequest)
 a74:	85 30       	cpi	r24, 0x05	; 5
 a76:	09 f4       	brne	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x40>
 a78:	77 c0       	rjmp	.+238    	; 0xb68 <USB_Device_ProcessControlRequest+0x12e>
 a7a:	30 f4       	brcc	.+12     	; 0xa88 <USB_Device_ProcessControlRequest+0x4e>
 a7c:	81 30       	cpi	r24, 0x01	; 1
 a7e:	81 f1       	breq	.+96     	; 0xae0 <USB_Device_ProcessControlRequest+0xa6>
 a80:	68 f0       	brcs	.+26     	; 0xa9c <USB_Device_ProcessControlRequest+0x62>
 a82:	83 30       	cpi	r24, 0x03	; 3
 a84:	69 f1       	breq	.+90     	; 0xae0 <USB_Device_ProcessControlRequest+0xa6>
 a86:	12 c1       	rjmp	.+548    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 a88:	88 30       	cpi	r24, 0x08	; 8
 a8a:	09 f4       	brne	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x54>
 a8c:	e1 c0       	rjmp	.+450    	; 0xc50 <USB_Device_ProcessControlRequest+0x216>
 a8e:	89 30       	cpi	r24, 0x09	; 9
 a90:	09 f4       	brne	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0x5a>
 a92:	f0 c0       	rjmp	.+480    	; 0xc74 <USB_Device_ProcessControlRequest+0x23a>
 a94:	86 30       	cpi	r24, 0x06	; 6
 a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x60>
 a98:	09 c1       	rjmp	.+530    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 a9a:	88 c0       	rjmp	.+272    	; 0xbac <USB_Device_ProcessControlRequest+0x172>
 a9c:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a9e:	81 f0       	breq	.+32     	; 0xac0 <USB_Device_ProcessControlRequest+0x86>
 aa0:	92 38       	cpi	r25, 0x82	; 130
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x6c>
 aa4:	03 c1       	rjmp	.+518    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 aa6:	80 91 09 01 	lds	r24, 0x0109
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aaa:	8f 70       	andi	r24, 0x0F	; 15
 aac:	80 93 e9 00 	sts	0x00E9, r24
 ab0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 ab4:	85 fb       	bst	r24, 5
 ab6:	88 27       	eor	r24, r24
 ab8:	80 f9       	bld	r24, 0
 aba:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 abe:	06 c0       	rjmp	.+12     	; 0xacc <USB_Device_ProcessControlRequest+0x92>
 ac0:	80 91 01 01 	lds	r24, 0x0101
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 ac4:	90 91 02 01 	lds	r25, 0x0102
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ac8:	91 11       	cpse	r25, r1
 aca:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 acc:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad0:	97 7f       	andi	r25, 0xF7	; 247
 ad2:	90 93 e8 00 	sts	0x00E8, r25
 ad6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ada:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ade:	c3 c0       	rjmp	.+390    	; 0xc66 <USB_Device_ProcessControlRequest+0x22c>
 ae0:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ae2:	2d 7f       	andi	r18, 0xFD	; 253
 ae4:	09 f0       	breq	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0xae>
 ae6:	e2 c0       	rjmp	.+452    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 ae8:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 aea:	19 f0       	breq	.+6      	; 0xaf2 <USB_Device_ProcessControlRequest+0xb8>
 aec:	92 30       	cpi	r25, 0x02	; 2
 aee:	61 f0       	breq	.+24     	; 0xb08 <USB_Device_ProcessControlRequest+0xce>
 af0:	dd c0       	rjmp	.+442    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 af2:	90 91 07 01 	lds	r25, 0x0107
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 af6:	91 30       	cpi	r25, 0x01	; 1
 af8:	09 f0       	breq	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0xc2>
 afa:	d8 c0       	rjmp	.+432    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 afc:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 afe:	09 f0       	breq	.+2      	; 0xb02 <USB_Device_ProcessControlRequest+0xc8>
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	90 93 02 01 	sts	0x0102, r25
 b06:	2a c0       	rjmp	.+84     	; 0xb5c <USB_Device_ProcessControlRequest+0x122>
 b08:	90 91 07 01 	lds	r25, 0x0107

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b0c:	91 11       	cpse	r25, r1
 b0e:	26 c0       	rjmp	.+76     	; 0xb5c <USB_Device_ProcessControlRequest+0x122>
 b10:	20 91 09 01 	lds	r18, 0x0109
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b14:	2f 70       	andi	r18, 0x0F	; 15
 b16:	09 f4       	brne	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b18:	c9 c0       	rjmp	.+402    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 b1a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b1e:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b22:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b24:	1b c0       	rjmp	.+54     	; 0xb5c <USB_Device_ProcessControlRequest+0x122>
 b26:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b28:	21 f4       	brne	.+8      	; 0xb32 <USB_Device_ProcessControlRequest+0xf8>
 b2a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b2e:	80 62       	ori	r24, 0x20	; 32
 b30:	13 c0       	rjmp	.+38     	; 0xb58 <USB_Device_ProcessControlRequest+0x11e>
 b32:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b36:	80 61       	ori	r24, 0x10	; 16
 b38:	80 93 eb 00 	sts	0x00EB, r24
 b3c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	02 2e       	mov	r0, r18
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x10c>
 b44:	88 0f       	add	r24, r24
 b46:	0a 94       	dec	r0
 b48:	ea f7       	brpl	.-6      	; 0xb44 <USB_Device_ProcessControlRequest+0x10a>
 b4a:	80 93 ea 00 	sts	0x00EA, r24
 b4e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b52:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b56:	88 60       	ori	r24, 0x08	; 8
 b58:	80 93 eb 00 	sts	0x00EB, r24
 b5c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b60:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b64:	87 7f       	andi	r24, 0xF7	; 247
 b66:	82 c0       	rjmp	.+260    	; 0xc6c <USB_Device_ProcessControlRequest+0x232>
 b68:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b6a:	a0 c0       	rjmp	.+320    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 b6c:	10 91 07 01 	lds	r17, 0x0107
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b70:	1f 77       	andi	r17, 0x7F	; 127
 b72:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b76:	80 78       	andi	r24, 0x80	; 128
 b78:	81 2b       	or	r24, r17
 b7a:	80 93 e3 00 	sts	0x00E3, r24
 b7e:	80 91 e8 00 	lds	r24, 0x00E8
 b82:	87 7f       	andi	r24, 0xF7	; 247
 b84:	80 93 e8 00 	sts	0x00E8, r24
 b88:	dd dd       	rcall	.-1094   	; 0x744 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b8e:	80 ff       	sbrs	r24, 0
 b90:	fc cf       	rjmp	.-8      	; 0xb8a <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 b92:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 b96:	80 68       	ori	r24, 0x80	; 128
 b98:	80 93 e3 00 	sts	0x00E3, r24
 b9c:	11 23       	and	r17, r17
 b9e:	11 f0       	breq	.+4      	; 0xba4 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ba0:	83 e0       	ldi	r24, 0x03	; 3
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <USB_Device_ProcessControlRequest+0x16c>
 ba4:	82 e0       	ldi	r24, 0x02	; 2
 ba6:	80 93 04 01 	sts	0x0104, r24
 baa:	80 c0       	rjmp	.+256    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 bac:	90 58       	subi	r25, 0x80	; 128
 bae:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bb0:	08 f0       	brcs	.+2      	; 0xbb4 <USB_Device_ProcessControlRequest+0x17a>
 bb2:	7c c0       	rjmp	.+248    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 bb4:	80 91 07 01 	lds	r24, 0x0107
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bb8:	90 91 08 01 	lds	r25, 0x0108
 bbc:	8c 3d       	cpi	r24, 0xDC	; 220
 bbe:	23 e0       	ldi	r18, 0x03	; 3
 bc0:	92 07       	cpc	r25, r18
 bc2:	71 f5       	brne	.+92     	; 0xc20 <USB_Device_ProcessControlRequest+0x1e6>
 bc4:	83 e0       	ldi	r24, 0x03	; 3
 bc6:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bc8:	8a e2       	ldi	r24, 0x2A	; 42
 bca:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bcc:	4f b7       	in	r20, 0x3f	; 63
 bce:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bd0:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bd2:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bd8:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bda:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	50 93 57 00 	sts	0x0057, r21
 be2:	e4 91       	lpm	r30, Z
 be4:	20 ff       	sbrs	r18, 0
 be6:	03 c0       	rjmp	.+6      	; 0xbee <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 be8:	e2 95       	swap	r30
 bea:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 bec:	3f 5f       	subi	r19, 0xFF	; 255
 bee:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bf0:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	ea 30       	cpi	r30, 0x0A	; 10
 bf6:	10 f0       	brcs	.+4      	; 0xbfc <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bf8:	c7 96       	adiw	r24, 0x37	; 55
 bfa:	01 c0       	rjmp	.+2      	; 0xbfe <USB_Device_ProcessControlRequest+0x1c4>
 bfc:	c0 96       	adiw	r24, 0x30	; 48
 bfe:	8d 93       	st	X+, r24
 c00:	9d 93       	st	X+, r25
 c02:	2f 5f       	subi	r18, 0xFF	; 255
 c04:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c06:	49 f7       	brne	.-46     	; 0xbda <USB_Device_ProcessControlRequest+0x1a0>
 c08:	4f bf       	out	0x3f, r20	; 63
 c0a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0e:	87 7f       	andi	r24, 0xF7	; 247
 c10:	80 93 e8 00 	sts	0x00E8, r24
 c14:	6a e2       	ldi	r22, 0x2A	; 42
 c16:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c18:	ce 01       	movw	r24, r28
 c1a:	01 96       	adiw	r24, 0x01	; 1
 c1c:	63 dc       	rcall	.-1850   	; 0x4e4 <Endpoint_Write_Control_Stream_LE>
 c1e:	12 c0       	rjmp	.+36     	; 0xc44 <USB_Device_ProcessControlRequest+0x20a>
 c20:	ae 01       	movw	r20, r28
 c22:	4f 5f       	subi	r20, 0xFF	; 255
 c24:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c26:	60 91 09 01 	lds	r22, 0x0109
 c2a:	89 db       	rcall	.-2286   	; 0x33e <CALLBACK_USB_GetDescriptor>
 c2c:	00 97       	sbiw	r24, 0x00	; 0
 c2e:	09 f4       	brne	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0x1f8>
 c30:	3d c0       	rjmp	.+122    	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 c32:	20 91 e8 00 	lds	r18, 0x00E8
 c36:	27 7f       	andi	r18, 0xF7	; 247
 c38:	20 93 e8 00 	sts	0x00E8, r18
 c3c:	bc 01       	movw	r22, r24
 c3e:	89 81       	ldd	r24, Y+1	; 0x01
 c40:	9a 81       	ldd	r25, Y+2	; 0x02
 c42:	eb dc       	rcall	.-1578   	; 0x61a <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c44:	80 91 e8 00 	lds	r24, 0x00E8
 c48:	8b 77       	andi	r24, 0x7B	; 123
 c4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c4e:	2e c0       	rjmp	.+92     	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 c50:	90 38       	cpi	r25, 0x80	; 128
 c52:	61 f5       	brne	.+88     	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 c54:	80 91 e8 00 	lds	r24, 0x00E8
 c58:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c5a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c5e:	80 91 00 01 	lds	r24, 0x0100
 c62:	80 93 f1 00 	sts	0x00F1, r24
 c66:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c6a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c6c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c70:	69 dd       	rcall	.-1326   	; 0x744 <Endpoint_ClearStatusStage>
 c72:	1c c0       	rjmp	.+56     	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 c74:	91 11       	cpse	r25, r1
 c76:	1a c0       	rjmp	.+52     	; 0xcac <USB_Device_ProcessControlRequest+0x272>
 c78:	90 91 07 01 	lds	r25, 0x0107
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c7c:	92 30       	cpi	r25, 0x02	; 2
 c7e:	b0 f4       	brcc	.+44     	; 0xcac <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c80:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c84:	87 7f       	andi	r24, 0xF7	; 247
 c86:	80 93 e8 00 	sts	0x00E8, r24
 c8a:	90 93 00 01 	sts	0x0100, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c8e:	5a dd       	rcall	.-1356   	; 0x744 <Endpoint_ClearStatusStage>
 c90:	80 91 00 01 	lds	r24, 0x0100
 c94:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c96:	04 c0       	rjmp	.+8      	; 0xca0 <USB_Device_ProcessControlRequest+0x266>
 c98:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c9c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c9e:	02 c0       	rjmp	.+4      	; 0xca4 <USB_Device_ProcessControlRequest+0x26a>
 ca0:	84 e0       	ldi	r24, 0x04	; 4
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <USB_Device_ProcessControlRequest+0x26c>
 ca4:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ca6:	80 93 04 01 	sts	0x0104, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 caa:	7f da       	rcall	.-2818   	; 0x1aa <EVENT_USB_Device_ConfigurationChanged>
 cac:	80 91 e8 00 	lds	r24, 0x00E8
 cb0:	83 ff       	sbrs	r24, 3
 cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <USB_Device_ProcessControlRequest+0x28e>
 cb4:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 cb8:	87 7f       	andi	r24, 0xF7	; 247
 cba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cbe:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cc2:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc4:	80 93 eb 00 	sts	0x00EB, r24
 cc8:	aa 96       	adiw	r28, 0x2a	; 42
 cca:	0f b6       	in	r0, 0x3f	; 63
 ccc:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cce:	de bf       	out	0x3e, r29	; 62
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	cd bf       	out	0x3d, r28	; 61
 cd4:	df 91       	pop	r29
 cd6:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cd8:	1f 91       	pop	r17
 cda:	08 95       	ret

00000cdc <USB_Event_Stub>:
 cdc:	08 95       	ret

00000cde <USB_USBTask>:
 cde:	cf 93       	push	r28
 ce0:	80 91 04 01 	lds	r24, 0x0104
 ce4:	88 23       	and	r24, r24
 ce6:	a9 f0       	breq	.+42     	; 0xd12 <USB_USBTask+0x34>
 ce8:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cec:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cee:	90 91 ec 00 	lds	r25, 0x00EC
 cf2:	90 ff       	sbrs	r25, 0
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <USB_USBTask+0x1c>
 cf6:	90 e8       	ldi	r25, 0x80	; 128
 cf8:	01 c0       	rjmp	.+2      	; 0xcfc <USB_USBTask+0x1e>
 cfa:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cfc:	c9 2f       	mov	r28, r25
 cfe:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d00:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d04:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d08:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 d0a:	97 de       	rcall	.-722    	; 0xa3a <USB_Device_ProcessControlRequest>
 d0c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d0e:	c0 93 e9 00 	sts	0x00E9, r28
 d12:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d14:	08 95       	ret

00000d16 <_exit>:
 d16:	f8 94       	cli

00000d18 <__stop_program>:
 d18:	ff cf       	rjmp	.-2      	; 0xd18 <__stop_program>

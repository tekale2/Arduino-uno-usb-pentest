
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001ae6  00001b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080013a  0080013a  00001bb4  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000564b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005ccb  00000000  00000000  00005a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c5e  00000000  00000000  0000b70f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000287c  00000000  00000000  0000d36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a84  00000000  00000000  0000fbec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002720  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003edc  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000410  00000000  00000000  00016c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	ce c1       	rjmp	.+924    	; 0x3a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c1       	rjmp	.+920    	; 0x3a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c1       	rjmp	.+916    	; 0x3a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c1       	rjmp	.+912    	; 0x3a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c1       	rjmp	.+908    	; 0x3a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c1       	rjmp	.+904    	; 0x3a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c1       	rjmp	.+900    	; 0x3a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c1       	rjmp	.+896    	; 0x3a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c1       	rjmp	.+892    	; 0x3a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c7       	rjmp	.+3824   	; 0xf1a <__vector_10>
      2a:	00 00       	nop
      2c:	ba c1       	rjmp	.+884    	; 0x3a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c1       	rjmp	.+880    	; 0x3a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c1       	rjmp	.+876    	; 0x3a2 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b4 c1       	rjmp	.+872    	; 0x3a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c1       	rjmp	.+868    	; 0x3a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c1       	rjmp	.+864    	; 0x3a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c1       	rjmp	.+860    	; 0x3a2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	ac c1       	rjmp	.+856    	; 0x3a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c1       	rjmp	.+848    	; 0x3a2 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	a6 c1       	rjmp	.+844    	; 0x3a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c1       	rjmp	.+840    	; 0x3a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c1       	rjmp	.+836    	; 0x3a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c1       	rjmp	.+832    	; 0x3a2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	9e c1       	rjmp	.+828    	; 0x3a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c1       	rjmp	.+824    	; 0x3a2 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	9a c1       	rjmp	.+820    	; 0x3a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c1       	rjmp	.+816    	; 0x3a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c1       	rjmp	.+812    	; 0x3a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c1       	rjmp	.+808    	; 0x3a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c1       	rjmp	.+804    	; 0x3a2 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	90 c1       	rjmp	.+800    	; 0x3a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c1       	rjmp	.+796    	; 0x3a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c1       	rjmp	.+792    	; 0x3a2 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	8a c1       	rjmp	.+788    	; 0x3a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c1       	rjmp	.+784    	; 0x3a2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	86 c1       	rjmp	.+780    	; 0x3a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4596>:
      98:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	0a 00                                               ..

000000aa <__c.4594>:

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      aa:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
      ba:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      da:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000000e3 <__c.4592>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e3:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f3:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     103:	0a 00                                               ..

00000105 <__c.4584>:
     105:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     115:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     125:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     135:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
				ReportSize     -= 4;
     145:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     155:	1b 5b 33 37 6d 00                                   .[37m.

0000015b <__c.4577>:
     15b:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
				ReportSize     -= 2;
				ReportData     += 2;
     16b:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17b:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018a <__c.4572>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18a:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     19a:	65 64 2e 0d 0a 00                                   ed....

000001a0 <__c.4570>:
     1a0:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b0:	44 3a 20 25 73 0d 0a 00                             D: %s...

000001b8 <__c.4568>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c8:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d8:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

000001f7 <__c.4565>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f7:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     207:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

00000211 <__c.4563>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     211:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     221:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     231:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     241:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000250 <__c.4561>:
     250:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     260:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     290:	37 6d 00                                            7m.

00000293 <__c.4559>:

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     293:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a3:	25 64 0d 0a 00                                      %d...

000002a8 <__c.4557>:
     2a8:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b8:	69 63 65 2e 0d 0a 00                                ice....

000002bf <__c.4555>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2bf:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2cf:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2df:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002e9 <__c.4552>:
     2e9:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f9:	61 74 61 2e 0d 0a 00                                ata....

00000300 <__c.4547>:
     300:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     310:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     320:	00                                                  .

00000321 <__c.4542>:
     321:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     331:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000033e <__c.4533>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     34e:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     35e:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

00000366 <__ctors_end>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	d0 e2       	ldi	r29, 0x20	; 32
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	e6 ee       	ldi	r30, 0xE6	; 230
     37a:	fa e1       	ldi	r31, 0x1A	; 26
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	aa 33       	cpi	r26, 0x3A	; 58
				break;
     388:	b1 07       	cpc	r27, r17

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>

0000038c <__do_clear_bss>:
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	aa e3       	ldi	r26, 0x3A	; 58
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	ae 35       	cpi	r26, 0x5E	; 94
     398:	b1 07       	cpc	r27, r17
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	45 d1       	rcall	.+650    	; 0x628 <main>
     39e:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	2e ce       	rjmp	.-932    	; 0x0 <__vectors>

000003a4 <LEDs_SetAllLEDs>:
     3a4:	9b b1       	in	r25, 0x0b	; 11
     3a6:	9f 70       	andi	r25, 0x0F	; 15
     3a8:	98 2b       	or	r25, r24
     3aa:	9b b9       	out	0x0b, r25	; 11
     3ac:	08 95       	ret

000003ae <SetupHardware>:
     3ae:	84 b7       	in	r24, 0x34	; 52
				break;
     3b0:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	84 bf       	out	0x34, r24	; 52
     3b4:	88 e1       	ldi	r24, 0x18	; 24
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	80 93 60 00 	sts	0x0060, r24
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	10 92 60 00 	sts	0x0060, r1
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	80 93 61 00 	sts	0x0061, r24
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3d0:	90 93 61 00 	sts	0x0061, r25

					while (CurrCollectionPath->Parent != NULL)
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	83 e3       	ldi	r24, 0x33	; 51
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	90 93 cd 00 	sts	0x00CD, r25
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3de:	80 93 cc 00 	sts	0x00CC, r24
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	80 93 ca 00 	sts	0x00CA, r24
     3e8:	10 92 c8 00 	sts	0x00C8, r1
     3ec:	88 e1       	ldi	r24, 0x18	; 24
     3ee:	80 93 c9 00 	sts	0x00C9, r24
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f2:	53 9a       	sbi	0x0a, 3	; 10
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	5a 9a       	sbi	0x0b, 2	; 11
     3f6:	8a b1       	in	r24, 0x0a	; 10
     3f8:	80 6f       	ori	r24, 0xF0	; 240
     3fa:	8a b9       	out	0x0a, r24	; 10
     3fc:	8b b1       	in	r24, 0x0b	; 11
     3fe:	8f 70       	andi	r24, 0x0F	; 15
     400:	8b b9       	out	0x0b, r24	; 11
     402:	70 d5       	rcall	.+2784   	; 0xee4 <USB_Init>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <Serial_CreateStream>

0000040c <EVENT_USB_Host_DeviceAttached>:
     40c:	81 e2       	ldi	r24, 0x21	; 33
     40e:	93 e0       	ldi	r25, 0x03	; 3
     410:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	80 ea       	ldi	r24, 0xA0	; 160
     416:	c6 cf       	rjmp	.-116    	; 0x3a4 <LEDs_SetAllLEDs>

00000418 <EVENT_USB_Host_DeviceUnattached>:
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	93 e0       	ldi	r25, 0x03	; 3
     41c:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>

				if (UsageListSize)
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	c0 cf       	rjmp	.-128    	; 0x3a4 <LEDs_SetAllLEDs>

00000424 <EVENT_USB_Host_DeviceEnumerationComplete>:
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	cc 52       	subi	r28, 0x2C	; 44
     432:	d1 40       	sbci	r29, 0x01	; 1
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	89 ee       	ldi	r24, 0xE9	; 233

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>
     446:	1b d1       	rcall	.+566    	; 0x67e <ProcessConfigurationDescriptor>
     448:	18 2f       	mov	r17, r24
     44a:	88 23       	and	r24, r24
					  UsageList[i - 1] = UsageList[i];
     44c:	99 f0       	breq	.+38     	; 0x474 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	19 f4       	brne	.+6      	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     452:	8f eb       	ldi	r24, 0xBF	; 191

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	02 c0       	rjmp	.+4      	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	88 ea       	ldi	r24, 0xA8	; 168
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>
     460:	1f 92       	push	r1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	1f 93       	push	r17
     464:	83 e9       	ldi	r24, 0x93	; 147
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	0e 94 82 0a 	call	0x1504	; 0x1504 <printf_P>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     470:	80 e9       	ldi	r24, 0x90	; 144
     472:	3e c0       	rjmp	.+124    	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	af d7       	rcall	.+3934   	; 0x13d6 <USB_Host_SetDeviceConfiguration>
     478:	88 23       	and	r24, r24
     47a:	29 f0       	breq	.+10     	; 0x486 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     47c:	1f 92       	push	r1
     47e:	8f 93       	push	r24
     480:	80 e5       	ldi	r24, 0x50	; 80
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	f1 cf       	rjmp	.-30     	; 0x468 <EVENT_USB_Host_DeviceEnumerationComplete+0x44>
     486:	60 91 3d 01 	lds	r22, 0x013D
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	66 23       	and	r22, r22
     48c:	51 f0       	breq	.+20     	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     48e:	80 91 3e 01 	lds	r24, 0x013E
     492:	c8 d7       	rcall	.+3984   	; 0x1424 <USB_Host_SetInterfaceAltSetting>
     494:	88 23       	and	r24, r24
     496:	29 f0       	breq	.+10     	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     498:	1f 92       	push	r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	8f 93       	push	r24
     49c:	81 e1       	ldi	r24, 0x11	; 17
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	11 c0       	rjmp	.+34     	; 0x4c4 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     4a2:	87 ef       	ldi	r24, 0xF7	; 247
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>
     4aa:	6c e2       	ldi	r22, 0x2C	; 44
				break;
     4ac:	71 e0       	ldi	r23, 0x01	; 1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	8e 01       	movw	r16, r28
     4b0:	0f 5f       	subi	r16, 0xFF	; 255
     4b2:	1f 4f       	sbci	r17, 0xFF	; 255
     4b4:	c8 01       	movw	r24, r16
     4b6:	98 d1       	rcall	.+816    	; 0x7e8 <Printer_GetDeviceID>
     4b8:	88 23       	and	r24, r24
     4ba:	69 f0       	breq	.+26     	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
     4bc:	1f 92       	push	r1
     4be:	8f 93       	push	r24
     4c0:	88 eb       	ldi	r24, 0xB8	; 184
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 82 0a 	call	0x1504	; 0x1504 <printf_P>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cc:	80 e9       	ldi	r24, 0x90	; 144
     4ce:	6a df       	rcall	.-300    	; 0x3a4 <LEDs_SetAllLEDs>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	81 d7       	rcall	.+3842   	; 0x13d6 <USB_Host_SetDeviceConfiguration>
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     4d6:	1f 93       	push	r17
     4d8:	0f 93       	push	r16
     4da:	80 ea       	ldi	r24, 0xA0	; 160
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 82 0a 	call	0x1504	; 0x1504 <printf_P>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e6:	8a e8       	ldi	r24, 0x8A	; 138
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts_P>
     4ee:	80 e6       	ldi	r24, 0x60	; 96
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	59 df       	rcall	.-334    	; 0x3a4 <LEDs_SetAllLEDs>
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	c4 5d       	subi	r28, 0xD4	; 212
     4fc:	de 4f       	sbci	r29, 0xFE	; 254
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	08 95       	ret

00000512 <EVENT_USB_Host_HostError>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	89 83       	std	Y+1, r24	; 0x01

					if (UsageListSize)
     51e:	7a d4       	rcall	.+2292   	; 0xe14 <USB_Disable>
     520:	1f 92       	push	r1
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	8f 93       	push	r24
     526:	8b e5       	ldi	r24, 0x5B	; 91
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	ea d7       	rcall	.+4052   	; 0x1504 <printf_P>
     530:	80 e9       	ldi	r24, 0x90	; 144
     532:	38 df       	rcall	.-400    	; 0x3a4 <LEDs_SetAllLEDs>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	ff cf       	rjmp	.-2      	; 0x53c <EVENT_USB_Host_HostError+0x2a>

0000053e <EVENT_USB_Host_DeviceEnumerationFailed>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	90 91 49 01 	lds	r25, 0x0149
     542:	1f 92       	push	r1
     544:	9f 93       	push	r25
     546:	1f 92       	push	r1
     548:	6f 93       	push	r22
						  UsageList[i - 1] = UsageList[i];
     54a:	1f 92       	push	r1
     54c:	8f 93       	push	r24
     54e:	85 e0       	ldi	r24, 0x05	; 5
     550:	91 e0       	ldi	r25, 0x01	; 1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	d6 d7       	rcall	.+4012   	; 0x1504 <printf_P>
     558:	8d b7       	in	r24, 0x3d	; 61
     55a:	9e b7       	in	r25, 0x3e	; 62
     55c:	08 96       	adiw	r24, 0x08	; 8
     55e:	0f b6       	in	r0, 0x3f	; 63
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	f8 94       	cli
     562:	9e bf       	out	0x3e, r25	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	8d bf       	out	0x3d, r24	; 61
     568:	80 e9       	ldi	r24, 0x90	; 144
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	1c cf       	rjmp	.-456    	; 0x3a4 <LEDs_SetAllLEDs>

0000056c <PrinterHost_Task>:
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	a9 97       	sbiw	r28, 0x29	; 41
     57e:	0f b6       	in	r0, 0x3f	; 63
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	80 91 49 01 	lds	r24, 0x0149
     58c:	8b 30       	cpi	r24, 0x0B	; 11
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	09 f0       	breq	.+2      	; 0x592 <PrinterHost_Task+0x26>
     590:	3e c0       	rjmp	.+124    	; 0x60e <PrinterHost_Task+0xa2>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	80 e2       	ldi	r24, 0x20	; 32
     594:	07 df       	rcall	.-498    	; 0x3a4 <LEDs_SetAllLEDs>
     596:	89 e2       	ldi	r24, 0x29	; 41
     598:	e1 e1       	ldi	r30, 0x11	; 17
     59a:	f1 e0       	ldi	r31, 0x01	; 1
     59c:	9e 01       	movw	r18, r28
     59e:	2f 5f       	subi	r18, 0xFF	; 255
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	79 01       	movw	r14, r18
     5a4:	d9 01       	movw	r26, r18
     5a6:	01 90       	ld	r0, Z+
     5a8:	0d 92       	st	X+, r0
     5aa:	8a 95       	dec	r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <PrinterHost_Task+0x3a>
     5ae:	f9 01       	movw	r30, r18
     5b0:	01 90       	ld	r0, Z+
     5b2:	00 20       	and	r0, r0
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <PrinterHost_Task+0x44>
     5b6:	8f 01       	movw	r16, r30
     5b8:	01 50       	subi	r16, 0x01	; 1
     5ba:	11 09       	sbc	r17, r1

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	02 1b       	sub	r16, r18
     5be:	13 0b       	sbc	r17, r19
     5c0:	1f 93       	push	r17
     5c2:	0f 93       	push	r16
     5c4:	83 ee       	ldi	r24, 0xE3	; 227
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	9b d7       	rcall	.+3894   	; 0x1504 <printf_P>
     5ce:	b8 01       	movw	r22, r16
     5d0:	c7 01       	movw	r24, r14
     5d2:	ed d0       	rcall	.+474    	; 0x7ae <Printer_SendData>
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	88 23       	and	r24, r24
     5de:	81 f0       	breq	.+32     	; 0x600 <PrinterHost_Task+0x94>
     5e0:	1f 92       	push	r1
     5e2:	8f 93       	push	r24
     5e4:	8a ea       	ldi	r24, 0xAA	; 170
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	8b d7       	rcall	.+3862   	; 0x1504 <printf_P>
     5ee:	80 e9       	ldi	r24, 0x90	; 144
     5f0:	d9 de       	rcall	.-590    	; 0x3a4 <LEDs_SetAllLEDs>
     5f2:	80 e0       	ldi	r24, 0x00	; 0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	f0 d6       	rcall	.+3552   	; 0x13d6 <USB_Host_SetDeviceConfiguration>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
					  return HID_PARSE_InsufficientReportItems;
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <PrinterHost_Task+0xa2>
     600:	88 e9       	ldi	r24, 0x98	; 152

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a2 d7       	rcall	.+3908   	; 0x154a <puts_P>
     606:	80 e6       	ldi	r24, 0x60	; 96
     608:	cd de       	rcall	.-614    	; 0x3a4 <LEDs_SetAllLEDs>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	e4 d6       	rcall	.+3528   	; 0x13d6 <USB_Host_SetDeviceConfiguration>
     60e:	a9 96       	adiw	r28, 0x29	; 41
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	08 95       	ret

00000628 <main>:
     628:	c2 de       	rcall	.-636    	; 0x3ae <SetupHardware>
     62a:	8e e3       	ldi	r24, 0x3E	; 62
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	8d d7       	rcall	.+3866   	; 0x154a <puts_P>
     630:	80 e1       	ldi	r24, 0x10	; 16
     632:	b8 de       	rcall	.-656    	; 0x3a4 <LEDs_SetAllLEDs>
     634:	78 94       	sei
     636:	9a df       	rcall	.-204    	; 0x56c <PrinterHost_Task>
     638:	0e d7       	rcall	.+3612   	; 0x1456 <USB_USBTask>
     63a:	fd cf       	rjmp	.-6      	; 0x636 <main+0xe>

0000063c <DComp_NextBidirectionalPrinterInterface>:
     63c:	fc 01       	movw	r30, r24
     63e:	81 81       	ldd	r24, Z+1	; 0x01
     640:	84 30       	cpi	r24, 0x04	; 4
     642:	59 f4       	brne	.+22     	; 0x65a <DComp_NextBidirectionalPrinterInterface+0x1e>
     644:	85 81       	ldd	r24, Z+5	; 0x05
     646:	87 30       	cpi	r24, 0x07	; 7
     648:	41 f4       	brne	.+16     	; 0x65a <DComp_NextBidirectionalPrinterInterface+0x1e>
     64a:	86 81       	ldd	r24, Z+6	; 0x06
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	29 f4       	brne	.+10     	; 0x65a <DComp_NextBidirectionalPrinterInterface+0x1e>
     650:	87 81       	ldd	r24, Z+7	; 0x07
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	11 f4       	brne	.+4      	; 0x65a <DComp_NextBidirectionalPrinterInterface+0x1e>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	08 95       	ret

0000065e <DComp_NextPrinterInterfaceBulkDataEndpoint>:
     65e:	fc 01       	movw	r30, r24
     660:	21 81       	ldd	r18, Z+1	; 0x01
     662:	25 30       	cpi	r18, 0x05	; 5
     664:	31 f4       	brne	.+12     	; 0x672 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x14>
     666:	83 81       	ldd	r24, Z+3	; 0x03
     668:	83 70       	andi	r24, 0x03	; 3
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	31 f0       	breq	.+12     	; 0x67a <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	08 95       	ret
     672:	24 30       	cpi	r18, 0x04	; 4
     674:	e1 f7       	brne	.-8      	; 0x66e <DComp_NextPrinterInterfaceBulkDataEndpoint+0x10>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	08 95       	ret
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret

0000067e <ProcessConfigurationDescriptor>:
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
					  ParserData->TotalReportItems++;
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	c4 50       	subi	r28, 0x04	; 4
     698:	d2 40       	sbci	r29, 0x02	; 2
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	ae 01       	movw	r20, r28
     6a6:	4f 5f       	subi	r20, 0xFF	; 255
     6a8:	5f 4f       	sbci	r21, 0xFF	; 255
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	cd 5f       	subi	r28, 0xFD	; 253
     6ac:	dd 4f       	sbci	r29, 0xFD	; 253
     6ae:	59 83       	std	Y+1, r21	; 0x01
     6b0:	48 83       	st	Y, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	c3 50       	subi	r28, 0x03	; 3
     6b4:	d2 40       	sbci	r29, 0x02	; 2
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	32 e0       	ldi	r19, 0x02	; 2
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	7d 4f       	sbci	r23, 0xFD	; 253
     6c0:	81 e0       	ldi	r24, 0x01	; 1
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	da d4       	rcall	.+2484   	; 0x1078 <USB_Host_GetDeviceConfigDescriptor>
     6c4:	85 30       	cpi	r24, 0x05	; 5
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	09 f4       	brne	.+2      	; 0x6ca <ProcessConfigurationDescriptor+0x4c>
     6c8:	5d c0       	rjmp	.+186    	; 0x784 <ProcessConfigurationDescriptor+0x106>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	86 30       	cpi	r24, 0x06	; 6
     6cc:	21 f0       	breq	.+8      	; 0x6d6 <ProcessConfigurationDescriptor+0x58>

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	88 23       	and	r24, r24
     6d0:	21 f0       	breq	.+8      	; 0x6da <ProcessConfigurationDescriptor+0x5c>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	5a c0       	rjmp	.+180    	; 0x78a <ProcessConfigurationDescriptor+0x10c>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	83 e0       	ldi	r24, 0x03	; 3

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	58 c0       	rjmp	.+176    	; 0x78a <ProcessConfigurationDescriptor+0x10c>
     6da:	a1 2c       	mov	r10, r1
     6dc:	b1 2c       	mov	r11, r1
     6de:	c1 2c       	mov	r12, r1
     6e0:	d1 2c       	mov	r13, r1
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	01 15       	cp	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	b9 f4       	brne	.+46     	; 0x71a <ProcessConfigurationDescriptor+0x9c>
     6ec:	4e e1       	ldi	r20, 0x1E	; 30
     6ee:	53 e0       	ldi	r21, 0x03	; 3
     6f0:	be 01       	movw	r22, r28
     6f2:	6d 5f       	subi	r22, 0xFD	; 253
     6f4:	7d 4f       	sbci	r23, 0xFD	; 253
     6f6:	ce 01       	movw	r24, r28
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	9d 4f       	sbci	r25, 0xFD	; 253
     6fc:	17 d5       	rcall	.+2606   	; 0x112c <USB_GetNextDescriptorComp>
     6fe:	81 11       	cpse	r24, r1
     700:	43 c0       	rjmp	.+134    	; 0x788 <ProcessConfigurationDescriptor+0x10a>
     702:	cd 5f       	subi	r28, 0xFD	; 253
     704:	dd 4f       	sbci	r29, 0xFD	; 253
     706:	08 81       	ld	r16, Y
     708:	19 81       	ldd	r17, Y+1	; 0x01
     70a:	c3 50       	subi	r28, 0x03	; 3
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     70c:	d2 40       	sbci	r29, 0x02	; 2
     70e:	c1 2c       	mov	r12, r1
     710:	d1 2c       	mov	r13, r1

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
     712:	e1 2c       	mov	r14, r1
     714:	f1 2c       	mov	r15, r1
			DataOUTEndpoint = NULL;
     716:	57 01       	movw	r10, r14
     718:	e6 cf       	rjmp	.-52     	; 0x6e6 <ProcessConfigurationDescriptor+0x68>
     71a:	4f e2       	ldi	r20, 0x2F	; 47
     71c:	53 e0       	ldi	r21, 0x03	; 3

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     71e:	be 01       	movw	r22, r28
     720:	6d 5f       	subi	r22, 0xFD	; 253
     722:	7d 4f       	sbci	r23, 0xFD	; 253
     724:	ce 01       	movw	r24, r28
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	9d 4f       	sbci	r25, 0xFD	; 253
     72a:	00 d5       	rcall	.+2560   	; 0x112c <USB_GetNextDescriptorComp>
     72c:	81 11       	cpse	r24, r1
     72e:	de cf       	rjmp	.-68     	; 0x6ec <ProcessConfigurationDescriptor+0x6e>
     730:	cd 5f       	subi	r28, 0xFD	; 253
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     732:	dd 4f       	sbci	r29, 0xFD	; 253
     734:	e8 80       	ld	r14, Y
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     736:	f9 80       	ldd	r15, Y+1	; 0x01
     738:	c3 50       	subi	r28, 0x03	; 3
     73a:	d2 40       	sbci	r29, 0x02	; 2
     73c:	f7 01       	movw	r30, r14
     73e:	82 81       	ldd	r24, Z+2	; 0x02
     740:	87 ff       	sbrs	r24, 7

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     742:	02 c0       	rjmp	.+4      	; 0x748 <ProcessConfigurationDescriptor+0xca>
     744:	67 01       	movw	r12, r14
     746:	75 01       	movw	r14, r10
     748:	c1 14       	cp	r12, r1
		  DataINEndpoint  = EndpointData;
     74a:	d1 04       	cpc	r13, r1

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     74c:	21 f3       	breq	.-56     	; 0x716 <ProcessConfigurationDescriptor+0x98>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     74e:	e1 14       	cp	r14, r1
     750:	f1 04       	cpc	r15, r1
     752:	09 f3       	breq	.-62     	; 0x716 <ProcessConfigurationDescriptor+0x98>
     754:	f8 01       	movw	r30, r16
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	80 93 3e 01 	sts	0x013E, r24
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     75c:	83 81       	ldd	r24, Z+3	; 0x03
     75e:	80 93 3d 01 	sts	0x013D, r24
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     762:	f6 01       	movw	r30, r12
     764:	24 81       	ldd	r18, Z+4	; 0x04
     766:	35 81       	ldd	r19, Z+5	; 0x05

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     768:	01 e0       	ldi	r16, 0x01	; 1
     76a:	42 81       	ldd	r20, Z+2	; 0x02
     76c:	62 e0       	ldi	r22, 0x02	; 2
     76e:	81 e8       	ldi	r24, 0x81	; 129
     770:	a7 d2       	rcall	.+1358   	; 0xcc0 <Pipe_ConfigurePipe>
     772:	f7 01       	movw	r30, r14
     774:	24 81       	ldd	r18, Z+4	; 0x04
     776:	35 81       	ldd	r19, Z+5	; 0x05
     778:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     77a:	62 e0       	ldi	r22, 0x02	; 2
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	a0 d2       	rcall	.+1344   	; 0xcc0 <Pipe_ConfigurePipe>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	03 c0       	rjmp	.+6      	; 0x78a <ProcessConfigurationDescriptor+0x10c>
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	01 c0       	rjmp	.+2      	; 0x78a <ProcessConfigurationDescriptor+0x10c>
     788:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     78a:	cc 5f       	subi	r28, 0xFC	; 252
     78c:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextBidirectionalPrinterInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     792:	de bf       	out	0x3e, r29	; 62
	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	08 95       	ret

000007ae <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     7ae:	cf 93       	push	r28
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7b0:	22 e0       	ldi	r18, 0x02	; 2
     7b2:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     7b6:	20 91 a9 00 	lds	r18, 0x00A9
     7ba:	2f 7b       	andi	r18, 0xBF	; 191
     7bc:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize, NULL)) != PIPE_RWSTREAM_NoError)
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	30 d2       	rcall	.+1120   	; 0xc26 <Pipe_Write_Stream_LE>
     7c6:	c8 2f       	mov	r28, r24
     7c8:	81 11       	cpse	r24, r1
     7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <Printer_SendData+0x34>
     7cc:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     7d0:	9b 77       	andi	r25, 0x7B	; 123
     7d2:	90 93 a6 00 	sts	0x00A6, r25
     7d6:	f0 d2       	rcall	.+1504   	; 0xdb8 <Pipe_WaitUntilReady>
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     7d8:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     7dc:	90 64       	ori	r25, 0x40	; 64
     7de:	90 93 a9 00 	sts	0x00A9, r25
     7e2:	8c 2f       	mov	r24, r28
     7e4:	cf 91       	pop	r28

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     7e6:	08 95       	ret

000007e8 <Printer_GetDeviceID>:
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <Printer_GetDeviceID+0xe>
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	8c 01       	movw	r16, r24
     7fc:	7b 01       	movw	r14, r22
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
     7fe:	1a 82       	std	Y+2, r1	; 0x02
     800:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     802:	80 91 3e 01 	lds	r24, 0x013E
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	21 ea       	ldi	r18, 0xA1	; 161
     80a:	20 93 41 01 	sts	0x0141, r18
     80e:	10 92 42 01 	sts	0x0142, r1
     812:	10 92 44 01 	sts	0x0144, r1
     816:	10 92 43 01 	sts	0x0143, r1
     81a:	90 93 46 01 	sts	0x0146, r25
     81e:	80 93 45 01 	sts	0x0145, r24
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 48 01 	sts	0x0148, r25
     82a:	80 93 47 01 	sts	0x0147, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     82e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     832:	ce 01       	movw	r24, r28
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	d4 d4       	rcall	.+2472   	; 0x11e0 <USB_Host_SendControlRequest>
     838:	81 11       	cpse	r24, r1
     83a:	2c c0       	rjmp	.+88     	; 0x894 <Printer_GetDeviceID+0xac>
     83c:	29 81       	ldd	r18, Y+1	; 0x01
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     83e:	3a 81       	ldd	r19, Y+2	; 0x02
     840:	21 15       	cp	r18, r1
     842:	31 05       	cpc	r19, r1
     844:	19 f4       	brne	.+6      	; 0x84c <Printer_GetDeviceID+0x64>
     846:	f8 01       	movw	r30, r16
	{
		DeviceIDString[0] = 0x00;
     848:	10 82       	st	Z, r1
     84a:	24 c0       	rjmp	.+72     	; 0x894 <Printer_GetDeviceID+0xac>
		return HOST_SENDCONTROL_Successful;
     84c:	83 2f       	mov	r24, r19

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     84e:	92 2f       	mov	r25, r18
     850:	e8 16       	cp	r14, r24
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);

	if (DeviceIDStringLength > BufferSize)
     852:	f9 06       	cpc	r15, r25
     854:	18 f0       	brcs	.+6      	; 0x85c <Printer_GetDeviceID+0x74>
     856:	9a 83       	std	Y+2, r25	; 0x02
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	02 c0       	rjmp	.+4      	; 0x860 <Printer_GetDeviceID+0x78>
     85c:	fa 82       	std	Y+2, r15	; 0x02

	if (DeviceIDStringLength > BufferSize)
	  DeviceIDStringLength = BufferSize;
     85e:	e9 82       	std	Y+1, r14	; 0x01
     860:	89 81       	ldd	r24, Y+1	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	90 93 48 01 	sts	0x0148, r25
     868:	80 93 47 01 	sts	0x0147, r24
     86c:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     86e:	b8 d4       	rcall	.+2416   	; 0x11e0 <USB_Host_SendControlRequest>
     870:	81 11       	cpse	r24, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <Printer_GetDeviceID+0xac>
     874:	e9 80       	ldd	r14, Y+1	; 0x01
     876:	fa 80       	ldd	r15, Y+2	; 0x02
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     878:	f2 e0       	ldi	r31, 0x02	; 2
     87a:	ef 1a       	sub	r14, r31
     87c:	f1 08       	sbc	r15, r1
     87e:	b8 01       	movw	r22, r16
     880:	6e 5f       	subi	r22, 0xFE	; 254
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	a7 01       	movw	r20, r14
     886:	c8 01       	movw	r24, r16
     888:	2c d6       	rcall	.+3160   	; 0x14e2 <memmove>
     88a:	f8 01       	movw	r30, r16
     88c:	ee 0d       	add	r30, r14
     88e:	ff 1d       	adc	r31, r15

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     890:	10 82       	st	Z, r1
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0

	return HOST_SENDCONTROL_Successful;
     898:	df 91       	pop	r29
}
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <USB_Host_ResetDevice>:
     8a6:	80 91 9e 00 	lds	r24, 0x009E
     8aa:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     8ac:	90 91 a0 00 	lds	r25, 0x00A0
     8b0:	9d 7f       	andi	r25, 0xFD	; 253
     8b2:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8b6:	90 91 9e 00 	lds	r25, 0x009E
     8ba:	92 60       	ori	r25, 0x02	; 2
     8bc:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     8c0:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     8c4:	91 fd       	sbrc	r25, 1
     8c6:	fc cf       	rjmp	.-8      	; 0x8c0 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8c8:	90 91 9e 00 	lds	r25, 0x009E
     8cc:	91 60       	ori	r25, 0x01	; 1
     8ce:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     8d2:	10 92 3f 01 	sts	0x013F, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8d6:	90 91 a0 00 	lds	r25, 0x00A0
     8da:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8dc:	20 91 a0 00 	lds	r18, 0x00A0
     8e0:	2f 7d       	andi	r18, 0xDF	; 223
     8e2:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8e6:	20 91 9f 00 	lds	r18, 0x009F
     8ea:	2f 7d       	andi	r18, 0xDF	; 223
     8ec:	20 93 9f 00 	sts	0x009F, r18
     8f0:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8f2:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8f6:	35 ff       	sbrs	r19, 5
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8fa:	20 91 9f 00 	lds	r18, 0x009F
     8fe:	2f 7d       	andi	r18, 0xDF	; 223
     900:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     904:	20 91 9f 00 	lds	r18, 0x009F
     908:	2d 7f       	andi	r18, 0xFD	; 253
     90a:	20 93 9f 00 	sts	0x009F, r18
     90e:	08 c0       	rjmp	.+16     	; 0x920 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     910:	ef ec       	ldi	r30, 0xCF	; 207
     912:	f7 e0       	ldi	r31, 0x07	; 7
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <USB_Host_ResetDevice+0x6e>
     918:	00 c0       	rjmp	.+0      	; 0x91a <USB_Host_ResetDevice+0x74>
     91a:	00 00       	nop
     91c:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     91e:	49 f7       	brne	.-46     	; 0x8f2 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     920:	99 23       	and	r25, r25
     922:	29 f0       	breq	.+10     	; 0x92e <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     924:	90 91 a0 00 	lds	r25, 0x00A0
     928:	90 62       	ori	r25, 0x20	; 32
     92a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     92e:	81 11       	cpse	r24, r1
     930:	05 c0       	rjmp	.+10     	; 0x93c <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     932:	80 91 9e 00 	lds	r24, 0x009E
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     93c:	80 91 a0 00 	lds	r24, 0x00A0
     940:	82 60       	ori	r24, 0x02	; 2
     942:	80 93 a0 00 	sts	0x00A0, r24
     946:	08 95       	ret

00000948 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     948:	20 91 9e 00 	lds	r18, 0x009E
     94c:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     94e:	90 91 a0 00 	lds	r25, 0x00A0
     952:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     954:	30 91 a0 00 	lds	r19, 0x00A0
     958:	3f 7d       	andi	r19, 0xDF	; 223
     95a:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     95e:	30 91 9f 00 	lds	r19, 0x009F
     962:	3f 7d       	andi	r19, 0xDF	; 223
     964:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     968:	30 91 9e 00 	lds	r19, 0x009E
     96c:	31 60       	ori	r19, 0x01	; 1
     96e:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     972:	88 23       	and	r24, r24
     974:	39 f1       	breq	.+78     	; 0x9c4 <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     976:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     97a:	35 ff       	sbrs	r19, 5
     97c:	06 c0       	rjmp	.+12     	; 0x98a <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     97e:	30 91 9f 00 	lds	r19, 0x009F
     982:	3f 7d       	andi	r19, 0xDF	; 223
     984:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     988:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     98a:	30 91 49 01 	lds	r19, 0x0149
     98e:	31 30       	cpi	r19, 0x01	; 1
     990:	c1 f0       	breq	.+48     	; 0x9c2 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     992:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     996:	34 ff       	sbrs	r19, 4
     998:	09 c0       	rjmp	.+18     	; 0x9ac <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     99a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     99e:	80 91 a6 00 	lds	r24, 0x00A6
     9a2:	8f 7e       	andi	r24, 0xEF	; 239
     9a4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9a8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9ac:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     9b0:	31 ff       	sbrs	r19, 1
     9b2:	df cf       	rjmp	.-66     	; 0x972 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9b4:	80 91 a6 00 	lds	r24, 0x00A6
     9b8:	8d 7f       	andi	r24, 0xFD	; 253
     9ba:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     9be:	83 e0       	ldi	r24, 0x03	; 3

			break;
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     9c2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     9c4:	21 11       	cpse	r18, r1
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9c8:	20 91 9e 00 	lds	r18, 0x009E
     9cc:	2e 7f       	andi	r18, 0xFE	; 254
     9ce:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9d2:	99 23       	and	r25, r25
     9d4:	29 f0       	breq	.+10     	; 0x9e0 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9d6:	90 91 a0 00 	lds	r25, 0x00A0
     9da:	90 62       	ori	r25, 0x20	; 32
     9dc:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     9e0:	08 95       	ret

000009e2 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	28 97       	sbiw	r28, 0x08	; 8
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     9fa:	80 91 49 01 	lds	r24, 0x0149
     9fe:	85 30       	cpi	r24, 0x05	; 5
     a00:	09 f4       	brne	.+2      	; 0xa04 <USB_Host_ProcessNextHostState+0x22>
     a02:	9c c0       	rjmp	.+312    	; 0xb3c <USB_Host_ProcessNextHostState+0x15a>
     a04:	68 f4       	brcc	.+26     	; 0xa20 <USB_Host_ProcessNextHostState+0x3e>
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	e1 f1       	breq	.+120    	; 0xa82 <USB_Host_ProcessNextHostState+0xa0>
     a0a:	18 f4       	brcc	.+6      	; 0xa12 <USB_Host_ProcessNextHostState+0x30>
     a0c:	88 23       	and	r24, r24
     a0e:	d9 f0       	breq	.+54     	; 0xa46 <USB_Host_ProcessNextHostState+0x64>
     a10:	ff c0       	rjmp	.+510    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	09 f4       	brne	.+2      	; 0xa18 <USB_Host_ProcessNextHostState+0x36>
     a16:	3f c0       	rjmp	.+126    	; 0xa96 <USB_Host_ProcessNextHostState+0xb4>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <USB_Host_ProcessNextHostState+0x3c>
     a1c:	67 c0       	rjmp	.+206    	; 0xaec <USB_Host_ProcessNextHostState+0x10a>
     a1e:	f8 c0       	rjmp	.+496    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     a20:	87 30       	cpi	r24, 0x07	; 7
     a22:	09 f4       	brne	.+2      	; 0xa26 <USB_Host_ProcessNextHostState+0x44>
     a24:	a6 c0       	rjmp	.+332    	; 0xb72 <USB_Host_ProcessNextHostState+0x190>
     a26:	08 f4       	brcc	.+2      	; 0xa2a <USB_Host_ProcessNextHostState+0x48>
     a28:	96 c0       	rjmp	.+300    	; 0xb56 <USB_Host_ProcessNextHostState+0x174>
     a2a:	88 30       	cpi	r24, 0x08	; 8
     a2c:	09 f4       	brne	.+2      	; 0xa30 <USB_Host_ProcessNextHostState+0x4e>
     a2e:	bf c0       	rjmp	.+382    	; 0xbae <USB_Host_ProcessNextHostState+0x1cc>
     a30:	89 30       	cpi	r24, 0x09	; 9
     a32:	09 f0       	breq	.+2      	; 0xa36 <USB_Host_ProcessNextHostState+0x54>
     a34:	ed c0       	rjmp	.+474    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	80 93 49 01 	sts	0x0149, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a42:	f0 dc       	rcall	.-1568   	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete>
     a44:	e5 c0       	rjmp	.+458    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
			break;
     a46:	00 91 3b 01 	lds	r16, 0x013B
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a4a:	10 91 3c 01 	lds	r17, 0x013C
     a4e:	01 15       	cp	r16, r1
     a50:	11 05       	cpc	r17, r1
     a52:	09 f4       	brne	.+2      	; 0xa56 <USB_Host_ProcessNextHostState+0x74>
     a54:	dd c0       	rjmp	.+442    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     a56:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a58:	77 df       	rcall	.-274    	; 0x948 <USB_Host_WaitMS>
     a5a:	88 23       	and	r24, r24
     a5c:	31 f0       	breq	.+12     	; 0xa6a <USB_Host_ProcessNextHostState+0x88>
     a5e:	90 91 3a 01 	lds	r25, 0x013A
				{
					USB_HostState = PostWaitState;
     a62:	90 93 49 01 	sts	0x0149, r25
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	c5 c0       	rjmp	.+394    	; 0xbf4 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     a6a:	01 50       	subi	r16, 0x01	; 1
					break;
     a6c:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     a6e:	10 93 3c 01 	sts	0x013C, r17
     a72:	00 93 3b 01 	sts	0x013B, r16
     a76:	01 2b       	or	r16, r17
     a78:	09 f0       	breq	.+2      	; 0xa7c <USB_Host_ProcessNextHostState+0x9a>
     a7a:	ca c0       	rjmp	.+404    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     a7c:	80 91 3a 01 	lds	r24, 0x013A
				  USB_HostState = PostWaitState;
     a80:	07 c0       	rjmp	.+14     	; 0xa90 <USB_Host_ProcessNextHostState+0xae>
     a82:	88 ee       	ldi	r24, 0xE8	; 232
     a84:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a86:	90 93 3c 01 	sts	0x013C, r25
     a8a:	80 93 3b 01 	sts	0x013B, r24
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	80 93 49 01 	sts	0x0149, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a94:	bd c0       	rjmp	.+378    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     a96:	80 91 3b 01 	lds	r24, 0x013B
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a9a:	90 91 3c 01 	lds	r25, 0x013C
     a9e:	9c 01       	movw	r18, r24
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	31 09       	sbc	r19, r1
     aa4:	30 93 3c 01 	sts	0x013C, r19
     aa8:	20 93 3b 01 	sts	0x013B, r18
     aac:	89 2b       	or	r24, r25
     aae:	39 f0       	breq	.+14     	; 0xabe <USB_Host_ProcessNextHostState+0xdc>
     ab0:	8f ec       	ldi	r24, 0xCF	; 207
     ab2:	97 e0       	ldi	r25, 0x07	; 7
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <USB_Host_ProcessNextHostState+0xd2>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <USB_Host_ProcessNextHostState+0xd8>
     aba:	00 00       	nop
     abc:	a9 c0       	rjmp	.+338    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     abe:	77 98       	cbi	0x0e, 7	; 14
     ac0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ac4:	80 61       	ori	r24, 0x10	; 16
     ac6:	80 93 d8 00 	sts	0x00D8, r24
     aca:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ace:	8b 7f       	andi	r24, 0xFB	; 251
     ad0:	80 93 dd 00 	sts	0x00DD, r24
     ad4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     ad8:	80 61       	ori	r24, 0x10	; 16
     ada:	80 93 d7 00 	sts	0x00D7, r24
     ade:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     ae2:	82 60       	ori	r24, 0x02	; 2
     ae4:	80 93 dd 00 	sts	0x00DD, r24
     ae8:	84 e0       	ldi	r24, 0x04	; 4
     aea:	d2 cf       	rjmp	.-92     	; 0xa90 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     aec:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     af0:	80 ff       	sbrs	r24, 0
     af2:	8e c0       	rjmp	.+284    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     af4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	80 93 9f 00 	sts	0x009F, r24
     afe:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b02:	8d 7f       	andi	r24, 0xFD	; 253
     b04:	80 93 9f 00 	sts	0x009F, r24
     b08:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b0c:	8d 7f       	andi	r24, 0xFD	; 253
     b0e:	80 93 df 00 	sts	0x00DF, r24
     b12:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	80 93 de 00 	sts	0x00DE, r24
     b1c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b20:	81 60       	ori	r24, 0x01	; 1
     b22:	80 93 9e 00 	sts	0x009E, r24
     b26:	34 d1       	rcall	.+616    	; 0xd90 <Pipe_ClearPipes>
     b28:	10 92 49 01 	sts	0x0149, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b2c:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 3c 01 	sts	0x013C, r25
     b34:	80 93 3b 01 	sts	0x013B, r24
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <USB_Host_ProcessNextHostState+0x16e>
     b3c:	b4 de       	rcall	.-664    	; 0x8a6 <USB_Host_ResetDevice>
     b3e:	10 92 49 01 	sts	0x0149, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b42:	88 ec       	ldi	r24, 0xC8	; 200
     b44:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b46:	90 93 3c 01 	sts	0x013C, r25
     b4a:	80 93 3b 01 	sts	0x013B, r24
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	80 93 3a 01 	sts	0x013A, r24
     b54:	5d c0       	rjmp	.+186    	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     b56:	01 e0       	ldi	r16, 0x01	; 1
     b58:	20 e4       	ldi	r18, 0x40	; 64
     b5a:	30 e0       	ldi	r19, 0x00	; 0
			break;
     b5c:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	ae d0       	rcall	.+348    	; 0xcc0 <Pipe_ConfigurePipe>
     b64:	81 11       	cpse	r24, r1
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <USB_Host_ProcessNextHostState+0x18c>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	43 c0       	rjmp	.+134    	; 0xbf4 <USB_Host_ProcessNextHostState+0x212>
     b6e:	87 e0       	ldi	r24, 0x07	; 7
     b70:	8f cf       	rjmp	.-226    	; 0xa90 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b72:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b74:	e1 e0       	ldi	r30, 0x01	; 1
     b76:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b78:	a1 e4       	ldi	r26, 0x41	; 65
     b7a:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	8a 95       	dec	r24
     b82:	e1 f7       	brne	.-8      	; 0xb7c <USB_Host_ProcessNextHostState+0x19a>
     b84:	10 92 a7 00 	sts	0x00A7, r1
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	29 d3       	rcall	.+1618   	; 0x11e0 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b8e:	81 11       	cpse	r24, r1
     b90:	30 c0       	rjmp	.+96     	; 0xbf2 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	80 93 00 01 	sts	0x0100, r24
     b98:	86 de       	rcall	.-756    	; 0x8a6 <USB_Host_ResetDevice>
     b9a:	10 92 49 01 	sts	0x0149, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b9e:	88 ec       	ldi	r24, 0xC8	; 200
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 3c 01 	sts	0x013C, r25

			USB_Host_ResetDevice();
     ba6:	80 93 3b 01 	sts	0x013B, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	d1 cf       	rjmp	.-94     	; 0xb50 <USB_Host_ProcessNextHostState+0x16e>
     bae:	20 91 00 01 	lds	r18, 0x0100
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	01 e0       	ldi	r16, 0x01	; 1
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     bbc:	81 d0       	rcall	.+258    	; 0xcc0 <Pipe_ConfigurePipe>
     bbe:	88 23       	and	r24, r24
     bc0:	99 f2       	breq	.-90     	; 0xb68 <USB_Host_ProcessNextHostState+0x186>
     bc2:	88 e0       	ldi	r24, 0x08	; 8
     bc4:	e9 e0       	ldi	r30, 0x09	; 9
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	a1 e4       	ldi	r26, 0x41	; 65
     bca:	b1 e0       	ldi	r27, 0x01	; 1
     bcc:	01 90       	ld	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <USB_Host_ProcessNextHostState+0x1ea>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	03 d3       	rcall	.+1542   	; 0x11e0 <USB_Host_SendControlRequest>
     bda:	81 11       	cpse	r24, r1
     bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <USB_Host_ProcessNextHostState+0x210>
     bde:	10 92 49 01 	sts	0x0149, r1
     be2:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 3c 01 	sts	0x013C, r25
     bea:	80 93 3b 01 	sts	0x013B, r24
     bee:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     bf0:	af cf       	rjmp	.-162    	; 0xb50 <USB_Host_ProcessNextHostState+0x16e>
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	20 91 49 01 	lds	r18, 0x0149
     bf8:	21 30       	cpi	r18, 0x01	; 1
     bfa:	51 f0       	breq	.+20     	; 0xc10 <USB_Host_ProcessNextHostState+0x22e>
     bfc:	68 2f       	mov	r22, r24
     bfe:	89 2f       	mov	r24, r25
     c00:	9e dc       	rcall	.-1732   	; 0x53e <EVENT_USB_Host_DeviceEnumerationFailed>
     c02:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	80 93 dd 00 	sts	0x00DD, r24
     c0c:	05 dc       	rcall	.-2038   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c0e:	1a d1       	rcall	.+564    	; 0xe44 <USB_ResetInterface>
     c10:	28 96       	adiw	r28, 0x08	; 8
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16

		USB_ResetInterface();
     c24:	08 95       	ret

00000c26 <Pipe_Write_Stream_LE>:
     c26:	cf 92       	push	r12
	}
}
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	7c 01       	movw	r14, r24
     c38:	8b 01       	movw	r16, r22
     c3a:	ea 01       	movw	r28, r20
     c3c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     c40:	8f 7c       	andi	r24, 0xCF	; 207
     c42:	80 62       	ori	r24, 0x20	; 32
     c44:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c48:	b7 d0       	rcall	.+366    	; 0xdb8 <Pipe_WaitUntilReady>
     c4a:	81 11       	cpse	r24, r1
     c4c:	30 c0       	rjmp	.+96     	; 0xcae <Pipe_Write_Stream_LE+0x88>
     c4e:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c50:	31 f0       	breq	.+12     	; 0xc5e <Pipe_Write_Stream_LE+0x38>
     c52:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	08 1b       	sub	r16, r24
     c58:	19 0b       	sbc	r17, r25
     c5a:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c5c:	f9 1e       	adc	r15, r25
     c5e:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c60:	d1 2c       	mov	r13, r1
     c62:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c64:	11 05       	cpc	r17, r1
     c66:	11 f1       	breq	.+68     	; 0xcac <Pipe_Write_Stream_LE+0x86>
     c68:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     c6c:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     c6e:	13 c0       	rjmp	.+38     	; 0xc96 <Pipe_Write_Stream_LE+0x70>
     c70:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     c74:	8b 77       	andi	r24, 0x7B	; 123
     c76:	80 93 a6 00 	sts	0x00A6, r24
     c7a:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c7c:	41 f0       	breq	.+16     	; 0xc8e <Pipe_Write_Stream_LE+0x68>
     c7e:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     c80:	99 81       	ldd	r25, Y+1	; 0x01
     c82:	8c 0d       	add	r24, r12
     c84:	9d 1d       	adc	r25, r13
     c86:	99 83       	std	Y+1, r25	; 0x01
     c88:	88 83       	st	Y, r24
     c8a:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <Pipe_Write_Stream_LE+0x88>
     c8e:	94 d0       	rcall	.+296    	; 0xdb8 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c90:	88 23       	and	r24, r24
     c92:	39 f3       	breq	.-50     	; 0xc62 <Pipe_Write_Stream_LE+0x3c>
     c94:	0c c0       	rjmp	.+24     	; 0xcae <Pipe_Write_Stream_LE+0x88>
     c96:	f7 01       	movw	r30, r14
     c98:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c9a:	7f 01       	movw	r14, r30
     c9c:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ca0:	01 50       	subi	r16, 0x01	; 1
     ca2:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ca4:	ff ef       	ldi	r31, 0xFF	; 255
     ca6:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ca8:	df 0a       	sbc	r13, r31
     caa:	db cf       	rjmp	.-74     	; 0xc62 <Pipe_Write_Stream_LE+0x3c>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     cb0:	cf 91       	pop	r28
}
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <Pipe_ConfigurePipe>:
     cc0:	0f 93       	push	r16
     cc2:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     cc4:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     cc6:	87 ff       	sbrs	r24, 7
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <Pipe_ConfigurePipe+0xe>
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <Pipe_ConfigurePipe+0x10>
     cce:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     cd0:	e7 30       	cpi	r30, 0x07	; 7
     cd2:	10 f0       	brcs	.+4      	; 0xcd8 <Pipe_ConfigurePipe+0x18>
	  return false;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	5a c0       	rjmp	.+180    	; 0xd8c <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     cd8:	61 11       	cpse	r22, r1
     cda:	01 c0       	rjmp	.+2      	; 0xcde <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     cdc:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     cde:	90 e4       	ldi	r25, 0x40	; 64
     ce0:	69 9f       	mul	r22, r25
     ce2:	b0 01       	movw	r22, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	4f 70       	andi	r20, 0x0F	; 15
     ce8:	46 2b       	or	r20, r22
     cea:	48 2b       	or	r20, r24
     cec:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cee:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     cf2:	5e 13       	cpse	r21, r30
     cf4:	19 c0       	rjmp	.+50     	; 0xd28 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     cf6:	02 30       	cpi	r16, 0x02	; 2
     cf8:	10 f0       	brcs	.+4      	; 0xcfe <Pipe_ConfigurePipe+0x3e>
     cfa:	76 e0       	ldi	r23, 0x06	; 6
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <Pipe_ConfigurePipe+0x40>
     cfe:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     d00:	88 e0       	ldi	r24, 0x08	; 8
     d02:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     d04:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d06:	82 17       	cp	r24, r18
     d08:	93 07       	cpc	r25, r19
     d0a:	40 f0       	brcs	.+16     	; 0xd1c <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     d0c:	86 2f       	mov	r24, r22
     d0e:	82 95       	swap	r24
     d10:	80 7f       	andi	r24, 0xF0	; 240
     d12:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     d14:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     d16:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e c0       	rjmp	.+28     	; 0xd38 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d1c:	65 30       	cpi	r22, 0x05	; 5
     d1e:	b1 f3       	breq	.-20     	; 0xd0c <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     d20:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	ef cf       	rjmp	.-34     	; 0xd06 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d28:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     d2c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     d30:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     d34:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     d38:	81 fd       	sbrc	r24, 1
     d3a:	07 c0       	rjmp	.+14     	; 0xd4a <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     d3c:	5f 5f       	subi	r21, 0xFF	; 255
     d3e:	57 30       	cpi	r21, 0x07	; 7
     d40:	b1 f6       	brne	.-84     	; 0xcee <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d42:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	21 c0       	rjmp	.+66     	; 0xd8c <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d4a:	90 91 a9 00 	lds	r25, 0x00A9
     d4e:	9e 7f       	andi	r25, 0xFE	; 254
     d50:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d54:	90 91 ab 00 	lds	r25, 0x00AB
     d58:	9d 7f       	andi	r25, 0xFD	; 253
     d5a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d5e:	90 91 a9 00 	lds	r25, 0x00A9
     d62:	91 60       	ori	r25, 0x01	; 1
     d64:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d68:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     d6c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     d70:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     d74:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d78:	80 91 a9 00 	lds	r24, 0x00A9
     d7c:	80 62       	ori	r24, 0x20	; 32
     d7e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d82:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     d86:	87 fd       	sbrc	r24, 7
     d88:	d9 cf       	rjmp	.-78     	; 0xd3c <Pipe_ConfigurePipe+0x7c>
     d8a:	a4 cf       	rjmp	.-184    	; 0xcd4 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d90:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d94:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d96:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d9a:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d9e:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     da2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     da6:	90 91 a9 00 	lds	r25, 0x00A9
     daa:	9e 7f       	andi	r25, 0xFE	; 254
     dac:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	87 30       	cpi	r24, 0x07	; 7
     db4:	81 f7       	brne	.-32     	; 0xd96 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     db6:	08 95       	ret

00000db8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     db8:	80 91 a2 00 	lds	r24, 0x00A2
     dbc:	90 91 a3 00 	lds	r25, 0x00A3
     dc0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     dc2:	20 91 aa 00 	lds	r18, 0x00AA
     dc6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     dc8:	20 31       	cpi	r18, 0x10	; 16
     dca:	29 f4       	brne	.+10     	; 0xdd6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dcc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     dd0:	20 ff       	sbrs	r18, 0
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <Pipe_WaitUntilReady+0x26>
     dd4:	17 c0       	rjmp	.+46     	; 0xe04 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dd6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     dda:	22 fd       	sbrc	r18, 2
     ddc:	13 c0       	rjmp	.+38     	; 0xe04 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     dde:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     de2:	21 fd       	sbrc	r18, 1
     de4:	11 c0       	rjmp	.+34     	; 0xe08 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     de6:	20 91 49 01 	lds	r18, 0x0149
     dea:	21 30       	cpi	r18, 0x01	; 1
     dec:	79 f0       	breq	.+30     	; 0xe0c <Pipe_WaitUntilReady+0x54>
     dee:	20 91 a2 00 	lds	r18, 0x00A2
     df2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	19 f3       	breq	.-58     	; 0xdc2 <Pipe_WaitUntilReady+0xa>
     dfc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dfe:	41 f0       	breq	.+16     	; 0xe10 <Pipe_WaitUntilReady+0x58>
     e00:	c9 01       	movw	r24, r18
     e02:	df cf       	rjmp	.-66     	; 0xdc2 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     e10:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     e12:	08 95       	ret

00000e14 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     e14:	75 d0       	rcall	.+234    	; 0xf00 <USB_INT_DisableAllInterrupts>
     e16:	7c d0       	rcall	.+248    	; 0xf10 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e18:	e0 ee       	ldi	r30, 0xE0	; 224
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
     e22:	e8 ed       	ldi	r30, 0xD8	; 216
     e24:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     e26:	80 81       	ld	r24, Z
     e28:	8f 77       	andi	r24, 0x7F	; 127
     e2a:	80 83       	st	Z, r24
     e2c:	19 bc       	out	0x29, r1	; 41
     e2e:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e30:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     e32:	8c 91       	ld	r24, X
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	8c 93       	st	X, r24
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e3c:	80 83       	st	Z, r24
     e3e:	10 92 40 01 	sts	0x0140, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     e42:	08 95       	ret

00000e44 <USB_ResetInterface>:
     e44:	5d d0       	rcall	.+186    	; 0xf00 <USB_INT_DisableAllInterrupts>
     e46:	64 d0       	rcall	.+200    	; 0xf10 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     e48:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	80 93 d8 00 	sts	0x00D8, r24
     e52:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	80 93 d8 00 	sts	0x00D8, r24
     e5c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	80 93 d8 00 	sts	0x00D8, r24
     e66:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	80 93 d7 00 	sts	0x00D7, r24
     e70:	8c e0       	ldi	r24, 0x0C	; 12
     e72:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e74:	8e e0       	ldi	r24, 0x0E	; 14
     e76:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e78:	09 b4       	in	r0, 0x29	; 41
     e7a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e7c:	fd cf       	rjmp	.-6      	; 0xe78 <USB_ResetInterface+0x34>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 49 01 	sts	0x0149, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e84:	10 92 3f 01 	sts	0x013F, r1
	USB_Host_ConfigurationNumber = 0;
     e88:	80 e4       	ldi	r24, 0x40	; 64
     e8a:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e8e:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 93 d8 00 	sts	0x00D8, r24
     e98:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 93 dd 00 	sts	0x00DD, r24
     ea2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ea6:	84 60       	ori	r24, 0x04	; 4
     ea8:	80 93 dd 00 	sts	0x00DD, r24
     eac:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 93 d7 00 	sts	0x00D7, r24
     eb6:	6f 9a       	sbi	0x0d, 7	; 13
     eb8:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     eba:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 93 de 00 	sts	0x00DE, r24
     ec4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ec8:	84 60       	ori	r24, 0x04	; 4
     eca:	80 93 de 00 	sts	0x00DE, r24
     ece:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	80 93 e0 00 	sts	0x00E0, r24
     ed8:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	80 93 d8 00 	sts	0x00D8, r24
     ee2:	08 95       	ret

00000ee4 <USB_Init>:
     ee4:	e8 ed       	ldi	r30, 0xD8	; 216
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7e       	andi	r24, 0xEF	; 239
     eec:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     eee:	e7 ed       	ldi	r30, 0xD7	; 215
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	80 93 40 01 	sts	0x0140, r24

	USB_ResetInterface();
     efe:	a2 cf       	rjmp	.-188    	; 0xe44 <USB_ResetInterface>

00000f00 <USB_INT_DisableAllInterrupts>:
     f00:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8c 7f       	andi	r24, 0xFC	; 252
     f08:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f0a:	10 92 a0 00 	sts	0x00A0, r1
     f0e:	08 95       	ret

00000f10 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f10:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f14:	10 92 9f 00 	sts	0x009F, r1
     f18:	08 95       	ret

00000f1a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f40:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f44:	85 ff       	sbrs	r24, 5
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f48:	80 91 a0 00 	lds	r24, 0x00A0
     f4c:	85 ff       	sbrs	r24, 5
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f50:	80 91 9f 00 	lds	r24, 0x009F
     f54:	8f 7d       	andi	r24, 0xDF	; 223
     f56:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f5a:	1a d1       	rcall	.+564    	; 0x1190 <USB_Event_Stub>
     f5c:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f60:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f62:	15 c0       	rjmp	.+42     	; 0xf8e <__vector_10+0x74>
     f64:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f68:	81 ff       	sbrs	r24, 1
     f6a:	11 c0       	rjmp	.+34     	; 0xf8e <__vector_10+0x74>
     f6c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f70:	8d 7f       	andi	r24, 0xFD	; 253
     f72:	80 93 9f 00 	sts	0x009F, r24
     f76:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	80 93 9f 00 	sts	0x009F, r24
     f80:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	80 93 a0 00 	sts	0x00A0, r24
     f8a:	46 da       	rcall	.-2932   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     f8c:	5b df       	rcall	.-330    	; 0xe44 <USB_ResetInterface>
     f8e:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     f92:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f94:	15 c0       	rjmp	.+42     	; 0xfc0 <__vector_10+0xa6>
     f96:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f9a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f9c:	11 c0       	rjmp	.+34     	; 0xfc0 <__vector_10+0xa6>
     f9e:	80 91 df 00 	lds	r24, 0x00DF
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     fa4:	80 93 df 00 	sts	0x00DF, r24
     fa8:	77 98       	cbi	0x0e, 7	; 14
     faa:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     fae:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fb0:	80 93 dd 00 	sts	0x00DD, r24
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	ad da       	rcall	.-2726   	; 0x512 <EVENT_USB_Host_HostError>
     fb8:	2f da       	rcall	.-2978   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 49 01 	sts	0x0149, r24
		EVENT_USB_Host_DeviceUnattached();
     fc0:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     fc4:	80 ff       	sbrs	r24, 0
     fc6:	17 c0       	rjmp	.+46     	; 0xff6 <__vector_10+0xdc>
     fc8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     fcc:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fce:	13 c0       	rjmp	.+38     	; 0xff6 <__vector_10+0xdc>
     fd0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     fda:	80 91 de 00 	lds	r24, 0x00DE
     fde:	8e 7f       	andi	r24, 0xFE	; 254
     fe0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     fe4:	13 da       	rcall	.-3034   	; 0x40c <EVENT_USB_Host_DeviceAttached>
     fe6:	80 91 a0 00 	lds	r24, 0x00A0
     fea:	82 60       	ori	r24, 0x02	; 2
     fec:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ff0:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ff2:	80 93 49 01 	sts	0x0149, r24
     ff6:	80 91 df 00 	lds	r24, 0x00DF
     ffa:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <__vector_10+0x100>
     ffe:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1002:	82 ff       	sbrs	r24, 2
    1004:	0a c0       	rjmp	.+20     	; 0x101a <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1006:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	80 93 df 00 	sts	0x00DF, r24
    1010:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	94 da       	rcall	.-2776   	; 0x53e <EVENT_USB_Host_DeviceEnumerationFailed>
    1016:	00 da       	rcall	.-3072   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
    1018:	15 df       	rcall	.-470    	; 0xe44 <USB_ResetInterface>
    101a:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23

		USB_ResetInterface();
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0b be       	out	0x3b, r0	; 59
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <USB_GetNextDescriptor>:
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	fc 01       	movw	r30, r24
    1046:	eb 01       	movw	r28, r22
    1048:	a8 81       	ld	r26, Y
    104a:	b9 81       	ldd	r27, Y+1	; 0x01
    104c:	8c 91       	ld	r24, X
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
    1052:	31 81       	ldd	r19, Z+1	; 0x01
    1054:	82 17       	cp	r24, r18
    1056:	93 07       	cpc	r25, r19
    1058:	08 f4       	brcc	.+2      	; 0x105c <USB_GetNextDescriptor+0x1c>
    105a:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    105c:	a2 0f       	add	r26, r18
    105e:	b3 1f       	adc	r27, r19
    1060:	eb 01       	movw	r28, r22
    1062:	b9 83       	std	Y+1, r27	; 0x01
    1064:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	82 1b       	sub	r24, r18
    106c:	93 0b       	sbc	r25, r19
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
			}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	29 97       	sbiw	r28, 0x09	; 9
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	7b 01       	movw	r14, r22
    109a:	8a 01       	movw	r16, r20
    109c:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    109e:	90 e8       	ldi	r25, 0x80	; 128
    10a0:	90 93 41 01 	sts	0x0141, r25
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	90 93 42 01 	sts	0x0142, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    10aa:	e8 2f       	mov	r30, r24
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    10b2:	f0 93 44 01 	sts	0x0144, r31
    10b6:	e0 93 43 01 	sts	0x0143, r30
    10ba:	10 92 46 01 	sts	0x0146, r1
    10be:	10 92 45 01 	sts	0x0145, r1
    10c2:	89 e0       	ldi	r24, 0x09	; 9
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 48 01 	sts	0x0148, r25
    10ca:	80 93 47 01 	sts	0x0147, r24
    10ce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	84 d0       	rcall	.+264    	; 0x11e0 <USB_Host_SendControlRequest>
    10d8:	81 11       	cpse	r24, r1
    10da:	19 c0       	rjmp	.+50     	; 0x110e <USB_Host_GetDeviceConfigDescriptor+0x96>
    10dc:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    10de:	fc 81       	ldd	r31, Y+4	; 0x04
    10e0:	d7 01       	movw	r26, r14
    10e2:	ed 93       	st	X+, r30
    10e4:	fc 93       	st	X, r31
    10e6:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    10e8:	df 06       	cpc	r13, r31
    10ea:	70 f0       	brcs	.+28     	; 0x1108 <USB_Host_GetDeviceConfigDescriptor+0x90>
    10ec:	f0 93 48 01 	sts	0x0148, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    10f0:	e0 93 47 01 	sts	0x0147, r30
    10f4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    10f6:	74 d0       	rcall	.+232    	; 0x11e0 <USB_Host_SendControlRequest>
    10f8:	81 11       	cpse	r24, r1
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <USB_Host_GetDeviceConfigDescriptor+0x96>
    10fc:	f8 01       	movw	r30, r16
    10fe:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	21 f0       	breq	.+8      	; 0x110c <USB_Host_GetDeviceConfigDescriptor+0x94>
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	03 c0       	rjmp	.+6      	; 0x110e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    1108:	85 e0       	ldi	r24, 0x05	; 5
    110a:	01 c0       	rjmp	.+2      	; 0x110e <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1110:	0f b6       	in	r0, 0x3f	; 63
}
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	08 95       	ret

0000112c <USB_GetNextDescriptorComp>:
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	8c 01       	movw	r16, r24
    1142:	eb 01       	movw	r28, r22
    1144:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1146:	f8 01       	movw	r30, r16
    1148:	e0 80       	ld	r14, Z
    114a:	f1 80       	ldd	r15, Z+1	; 0x01
    114c:	e1 14       	cp	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	99 f0       	breq	.+38     	; 0x1178 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1152:	a8 80       	ld	r10, Y
    1154:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1156:	be 01       	movw	r22, r28
    1158:	c8 01       	movw	r24, r16
    115a:	72 df       	rcall	.-284    	; 0x1040 <USB_GetNextDescriptor>
    115c:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	f6 01       	movw	r30, r12
    1162:	09 95       	icall
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	79 f3       	breq	.-34     	; 0x1146 <USB_GetNextDescriptorComp+0x1a>
    1168:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    116a:	39 f4       	brne	.+14     	; 0x117a <USB_GetNextDescriptorComp+0x4e>
    116c:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    116e:	a8 82       	st	Y, r10
    1170:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1172:	f1 82       	std	Z+1, r15	; 0x01
    1174:	e0 82       	st	Z, r14
    1176:	01 c0       	rjmp	.+2      	; 0x117a <USB_GetNextDescriptorComp+0x4e>
    1178:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    117a:	df 91       	pop	r29
}
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	08 95       	ret

00001190 <USB_Event_Stub>:
    1190:	08 95       	ret

00001192 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    119a:	c9 ee       	ldi	r28, 0xE9	; 233
    119c:	d3 e0       	ldi	r29, 0x03	; 3
    119e:	11 11       	cpse	r17, r1
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    11a2:	80 91 a6 00 	lds	r24, 0x00A6
    11a6:	83 fd       	sbrc	r24, 3
    11a8:	16 c0       	rjmp	.+44     	; 0x11d6 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	cd db       	rcall	.-2150   	; 0x948 <USB_Host_WaitMS>
    11ae:	81 11       	cpse	r24, r1
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <USB_Host_WaitForIOS+0x46>
    11b2:	21 97       	sbiw	r28, 0x01	; 1
    11b4:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    11b6:	99 f7       	brne	.-26     	; 0x119e <USB_Host_WaitForIOS+0xc>
    11b8:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <USB_Host_WaitForIOS+0x46>
    11bc:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11be:	29 f4       	brne	.+10     	; 0x11ca <USB_Host_WaitForIOS+0x38>
    11c0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    11c4:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    11c6:	f1 cf       	rjmp	.-30     	; 0x11aa <USB_Host_WaitForIOS+0x18>
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <USB_Host_WaitForIOS+0x44>
    11ca:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11cc:	71 f7       	brne	.-36     	; 0x11aa <USB_Host_WaitForIOS+0x18>
    11ce:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    11d2:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    11d4:	ea cf       	rjmp	.-44     	; 0x11aa <USB_Host_WaitForIOS+0x18>
    11d6:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    11d8:	df 91       	pop	r29
}
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	08 95       	ret

000011e0 <USB_Host_SendControlRequest>:
    11e0:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11ec:	f0 90 9e 00 	lds	r15, 0x009E
    11f0:	8f 2d       	mov	r24, r15
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    11f6:	c0 91 47 01 	lds	r28, 0x0147
    11fa:	d0 91 48 01 	lds	r29, 0x0148
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11fe:	80 91 9e 00 	lds	r24, 0x009E
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	9e db       	rcall	.-2244   	; 0x948 <USB_Host_WaitMS>
    120c:	81 11       	cpse	r24, r1
    120e:	cc c0       	rjmp	.+408    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    1210:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1214:	8f 7c       	andi	r24, 0xCF	; 207
    1216:	80 93 aa 00 	sts	0x00AA, r24
    121a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    121e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	80 93 a6 00 	sts	0x00A6, r24
    1228:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	80 93 a9 00 	sts	0x00A9, r24
    1232:	e1 e4       	ldi	r30, 0x41	; 65
    1234:	f1 e0       	ldi	r31, 0x01	; 1
    1236:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1238:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    123c:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    123e:	e9 34       	cpi	r30, 0x49	; 73
    1240:	f8 07       	cpc	r31, r24
    1242:	c9 f7       	brne	.-14     	; 0x1236 <USB_Host_SendControlRequest+0x56>
    1244:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1248:	87 77       	andi	r24, 0x77	; 119
    124a:	80 93 a6 00 	sts	0x00A6, r24
    124e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1250:	a0 df       	rcall	.-192    	; 0x1192 <USB_Host_WaitForIOS>
    1252:	81 11       	cpse	r24, r1
    1254:	a9 c0       	rjmp	.+338    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    1256:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    125a:	80 64       	ori	r24, 0x40	; 64
    125c:	80 93 a9 00 	sts	0x00A9, r24
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	72 db       	rcall	.-2332   	; 0x948 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1264:	81 11       	cpse	r24, r1
    1266:	a0 c0       	rjmp	.+320    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    1268:	80 91 41 01 	lds	r24, 0x0141
    126c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    126e:	4e c0       	rjmp	.+156    	; 0x130c <USB_Host_SendControlRequest+0x12c>
    1270:	80 91 aa 00 	lds	r24, 0x00AA
    1274:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	80 93 aa 00 	sts	0x00AA, r24
    127c:	01 15       	cp	r16, r1
    127e:	11 05       	cpc	r17, r1
    1280:	09 f0       	breq	.+2      	; 0x1284 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1282:	3a c0       	rjmp	.+116    	; 0x12f8 <USB_Host_SendControlRequest+0x118>
    1284:	80 91 aa 00 	lds	r24, 0x00AA
    1288:	8f 7c       	andi	r24, 0xCF	; 207
    128a:	80 62       	ori	r24, 0x20	; 32
    128c:	80 93 aa 00 	sts	0x00AA, r24
    1290:	80 91 a9 00 	lds	r24, 0x00A9
    1294:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1296:	80 93 a9 00 	sts	0x00A9, r24
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	7a df       	rcall	.-268    	; 0x1192 <USB_Host_WaitForIOS>
    129e:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12a0:	83 c0       	rjmp	.+262    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    12a2:	80 91 a6 00 	lds	r24, 0x00A6
    12a6:	8b 77       	andi	r24, 0x7B	; 123
    12a8:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	71 df       	rcall	.-286    	; 0x1192 <USB_Host_WaitForIOS>
    12b0:	7b c0       	rjmp	.+246    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    12b2:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12b6:	8f 7b       	andi	r24, 0xBF	; 191
    12b8:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	69 df       	rcall	.-302    	; 0x1192 <USB_Host_WaitForIOS>
    12c0:	81 11       	cpse	r24, r1
    12c2:	72 c0       	rjmp	.+228    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    12c4:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12c8:	90 91 f7 00 	lds	r25, 0x00F7
    12cc:	89 2b       	or	r24, r25
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12d0:	c0 e0       	ldi	r28, 0x00	; 0
    12d2:	d0 e0       	ldi	r29, 0x00	; 0
    12d4:	f8 01       	movw	r30, r16
    12d6:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    12d8:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    12dc:	90 91 f7 00 	lds	r25, 0x00F7
    12e0:	89 2b       	or	r24, r25
    12e2:	69 f4       	brne	.+26     	; 0x12fe <USB_Host_SendControlRequest+0x11e>
    12e4:	80 91 a9 00 	lds	r24, 0x00A9
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    12ee:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12f2:	8e 77       	andi	r24, 0x7E	; 126
    12f4:	80 93 a6 00 	sts	0x00A6, r24
    12f8:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12fa:	d9 f6       	brne	.-74     	; 0x12b2 <USB_Host_SendControlRequest+0xd2>
    12fc:	c3 cf       	rjmp	.-122    	; 0x1284 <USB_Host_SendControlRequest+0xa4>
    12fe:	20 97       	sbiw	r28, 0x00	; 0
    1300:	89 f3       	breq	.-30     	; 0x12e4 <USB_Host_SendControlRequest+0x104>
    1302:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1306:	81 93       	st	Z+, r24
    1308:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    130a:	e5 cf       	rjmp	.-54     	; 0x12d6 <USB_Host_SendControlRequest+0xf6>
    130c:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    130e:	11 05       	cpc	r17, r1
    1310:	b1 f1       	breq	.+108    	; 0x137e <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1312:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1316:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    131e:	80 91 a9 00 	lds	r24, 0x00A9
    1322:	8f 7b       	andi	r24, 0xBF	; 191
    1324:	80 93 a9 00 	sts	0x00A9, r24
    1328:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    132a:	20 97       	sbiw	r28, 0x00	; 0
    132c:	01 f1       	breq	.+64     	; 0x136e <USB_Host_SendControlRequest+0x18e>
    132e:	31 df       	rcall	.-414    	; 0x1192 <USB_Host_WaitForIOS>
    1330:	81 11       	cpse	r24, r1
    1332:	3a c0       	rjmp	.+116    	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1334:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1336:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    133a:	30 91 f7 00 	lds	r19, 0x00F7
    133e:	80 91 00 01 	lds	r24, 0x0100
    1342:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1344:	28 17       	cp	r18, r24
    1346:	39 07       	cpc	r19, r25
    1348:	58 f4       	brcc	.+22     	; 0x1360 <USB_Host_SendControlRequest+0x180>
    134a:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	8c 01       	movw	r16, r24
    1350:	20 81       	ld	r18, Z
    1352:	20 93 af 00 	sts	0x00AF, r18
    1356:	21 97       	sbiw	r28, 0x01	; 1
    1358:	20 97       	sbiw	r28, 0x00	; 0
    135a:	19 f0       	breq	.+6      	; 0x1362 <USB_Host_SendControlRequest+0x182>
    135c:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    135e:	eb cf       	rjmp	.-42     	; 0x1336 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1360:	8f 01       	movw	r16, r30
    1362:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1366:	8b 77       	andi	r24, 0x7B	; 123
    1368:	80 93 a6 00 	sts	0x00A6, r24
    136c:	dd cf       	rjmp	.-70     	; 0x1328 <USB_Host_SendControlRequest+0x148>
    136e:	11 df       	rcall	.-478    	; 0x1192 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1370:	81 11       	cpse	r24, r1
    1372:	1a c0       	rjmp	.+52     	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    1374:	80 91 a9 00 	lds	r24, 0x00A9
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    137e:	80 91 aa 00 	lds	r24, 0x00AA
    1382:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1384:	80 61       	ori	r24, 0x10	; 16
    1386:	80 93 aa 00 	sts	0x00AA, r24
    138a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    138e:	8f 7b       	andi	r24, 0xBF	; 191
    1390:	80 93 a9 00 	sts	0x00A9, r24
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	fd de       	rcall	.-518    	; 0x1192 <USB_Host_WaitForIOS>
    1398:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <USB_Host_SendControlRequest+0x1c8>
    139c:	80 91 a6 00 	lds	r24, 0x00A6
    13a0:	8e 77       	andi	r24, 0x7E	; 126
    13a2:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 91 a9 00 	lds	r25, 0x00A9
    13ac:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13ae:	90 93 a9 00 	sts	0x00A9, r25
    13b2:	f1 10       	cpse	r15, r1
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <USB_Host_SendControlRequest+0x1e0>
    13b6:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ba:	9e 7f       	andi	r25, 0xFE	; 254
    13bc:	90 93 9e 00 	sts	0x009E, r25
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    13c6:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    13d2:	ff 90       	pop	r15
    13d4:	08 95       	ret

000013d6 <USB_Host_SetDeviceConfiguration>:
    13d6:	cf 93       	push	r28
				UPRST = 0;
    13d8:	c8 2f       	mov	r28, r24
    13da:	10 92 41 01 	sts	0x0141, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    13de:	89 e0       	ldi	r24, 0x09	; 9
    13e0:	80 93 42 01 	sts	0x0142, r24
    13e4:	2c 2f       	mov	r18, r28
    13e6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    13e8:	30 93 44 01 	sts	0x0144, r19
    13ec:	20 93 43 01 	sts	0x0143, r18
    13f0:	10 92 46 01 	sts	0x0146, r1
    13f4:	10 92 45 01 	sts	0x0145, r1
    13f8:	10 92 48 01 	sts	0x0148, r1
    13fc:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1400:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	eb de       	rcall	.-554    	; 0x11e0 <USB_Host_SendControlRequest>
    140a:	81 11       	cpse	r24, r1
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <USB_Host_SetDeviceConfiguration+0x4a>
    140e:	c0 93 3f 01 	sts	0x013F, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1412:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1414:	11 f0       	breq	.+4      	; 0x141a <USB_Host_SetDeviceConfiguration+0x44>
    1416:	9b e0       	ldi	r25, 0x0B	; 11
    1418:	01 c0       	rjmp	.+2      	; 0x141c <USB_Host_SetDeviceConfiguration+0x46>
    141a:	9a e0       	ldi	r25, 0x0A	; 10
    141c:	90 93 49 01 	sts	0x0149, r25
    1420:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1422:	08 95       	ret

00001424 <USB_Host_SetInterfaceAltSetting>:
    1424:	91 e0       	ldi	r25, 0x01	; 1
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1426:	90 93 41 01 	sts	0x0141, r25
    142a:	9b e0       	ldi	r25, 0x0B	; 11
    142c:	90 93 42 01 	sts	0x0142, r25
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	70 93 44 01 	sts	0x0144, r23
    1436:	60 93 43 01 	sts	0x0143, r22
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	90 93 46 01 	sts	0x0146, r25
    1440:	80 93 45 01 	sts	0x0145, r24
    1444:	10 92 48 01 	sts	0x0148, r1
    1448:	10 92 47 01 	sts	0x0147, r1
    144c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	c5 ce       	rjmp	.-630    	; 0x11e0 <USB_Host_SendControlRequest>

00001456 <USB_USBTask>:
    1456:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1458:	c0 91 a7 00 	lds	r28, 0x00A7
    145c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    145e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1462:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1466:	bd da       	rcall	.-2694   	; 0x9e2 <USB_Host_ProcessNextHostState>
    1468:	c0 93 a7 00 	sts	0x00A7, r28
    146c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    146e:	08 95       	ret

00001470 <Serial_putchar>:
    1470:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1474:	95 ff       	sbrs	r25, 5
    1476:	fc cf       	rjmp	.-8      	; 0x1470 <Serial_putchar>
				UDR1 = DataByte;
    1478:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	08 95       	ret

00001482 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1482:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1486:	87 ff       	sbrs	r24, 7
    1488:	08 c0       	rjmp	.+16     	; 0x149a <Serial_getchar+0x18>
    148a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    148e:	87 ff       	sbrs	r24, 7
    1490:	07 c0       	rjmp	.+14     	; 0x14a0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1492:	80 91 ce 00 	lds	r24, 0x00CE
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	08 95       	ret
	  return _FDEV_EOF;
    149a:	8e ef       	ldi	r24, 0xFE	; 254
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14a4:	08 95       	ret

000014a6 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14a6:	fc 01       	movw	r30, r24
	if (!(Stream))
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	59 f4       	brne	.+22     	; 0x14c2 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14ac:	8a e4       	ldi	r24, 0x4A	; 74
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	90 93 59 01 	sts	0x0159, r25
    14b4:	80 93 58 01 	sts	0x0158, r24
		stdout = Stream;
    14b8:	90 93 5b 01 	sts	0x015B, r25
    14bc:	80 93 5a 01 	sts	0x015A, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    14c0:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    14c2:	8e e0       	ldi	r24, 0x0E	; 14
    14c4:	df 01       	movw	r26, r30
    14c6:	1d 92       	st	X+, r1
    14c8:	8a 95       	dec	r24
    14ca:	e9 f7       	brne	.-6      	; 0x14c6 <Serial_CreateStream+0x20>
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	83 83       	std	Z+3, r24	; 0x03
    14d0:	88 e3       	ldi	r24, 0x38	; 56
    14d2:	9a e0       	ldi	r25, 0x0A	; 10
    14d4:	91 87       	std	Z+9, r25	; 0x09
    14d6:	80 87       	std	Z+8, r24	; 0x08
    14d8:	81 e4       	ldi	r24, 0x41	; 65
    14da:	9a e0       	ldi	r25, 0x0A	; 10
    14dc:	93 87       	std	Z+11, r25	; 0x0b
    14de:	82 87       	std	Z+10, r24	; 0x0a
    14e0:	08 95       	ret

000014e2 <memmove>:
    14e2:	68 17       	cp	r22, r24
    14e4:	79 07       	cpc	r23, r25
    14e6:	68 f4       	brcc	.+26     	; 0x1502 <memmove+0x20>
    14e8:	fb 01       	movw	r30, r22
    14ea:	dc 01       	movw	r26, r24
    14ec:	e4 0f       	add	r30, r20
    14ee:	f5 1f       	adc	r31, r21
    14f0:	a4 0f       	add	r26, r20
    14f2:	b5 1f       	adc	r27, r21
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <memmove+0x18>
    14f6:	02 90       	ld	r0, -Z
    14f8:	0e 92       	st	-X, r0
    14fa:	41 50       	subi	r20, 0x01	; 1
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	d8 f7       	brcc	.-10     	; 0x14f6 <memmove+0x14>
    1500:	08 95       	ret
    1502:	4b c2       	rjmp	.+1174   	; 0x199a <memcpy>

00001504 <printf_P>:
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	fe 01       	movw	r30, r28
    1512:	37 96       	adiw	r30, 0x07	; 7
    1514:	61 91       	ld	r22, Z+
    1516:	71 91       	ld	r23, Z+
    1518:	0a e5       	ldi	r16, 0x5A	; 90
    151a:	11 e0       	ldi	r17, 0x01	; 1
    151c:	d8 01       	movw	r26, r16
    151e:	8d 91       	ld	r24, X+
    1520:	9c 91       	ld	r25, X
    1522:	dc 01       	movw	r26, r24
    1524:	13 96       	adiw	r26, 0x03	; 3
    1526:	2c 91       	ld	r18, X
    1528:	13 97       	sbiw	r26, 0x03	; 3
    152a:	28 60       	ori	r18, 0x08	; 8
    152c:	13 96       	adiw	r26, 0x03	; 3
    152e:	2c 93       	st	X, r18
    1530:	af 01       	movw	r20, r30
    1532:	3a d0       	rcall	.+116    	; 0x15a8 <vfprintf>
    1534:	d8 01       	movw	r26, r16
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	23 81       	ldd	r18, Z+3	; 0x03
    153c:	27 7f       	andi	r18, 0xF7	; 247
    153e:	23 83       	std	Z+3, r18	; 0x03
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret

0000154a <puts_P>:
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
    1554:	e0 91 5a 01 	lds	r30, 0x015A
    1558:	f0 91 5b 01 	lds	r31, 0x015B
    155c:	83 81       	ldd	r24, Z+3	; 0x03
    155e:	81 ff       	sbrs	r24, 1
    1560:	1c c0       	rjmp	.+56     	; 0x159a <puts_P+0x50>
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	fe 01       	movw	r30, r28
    1568:	84 91       	lpm	r24, Z
    156a:	60 91 5a 01 	lds	r22, 0x015A
    156e:	70 91 5b 01 	lds	r23, 0x015B
    1572:	db 01       	movw	r26, r22
    1574:	18 96       	adiw	r26, 0x08	; 8
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	19 97       	sbiw	r26, 0x09	; 9
    157c:	88 23       	and	r24, r24
    157e:	39 f0       	breq	.+14     	; 0x158e <puts_P+0x44>
    1580:	09 95       	icall
    1582:	89 2b       	or	r24, r25
    1584:	11 f0       	breq	.+4      	; 0x158a <puts_P+0x40>
    1586:	0f ef       	ldi	r16, 0xFF	; 255
    1588:	1f ef       	ldi	r17, 0xFF	; 255
    158a:	21 96       	adiw	r28, 0x01	; 1
    158c:	ec cf       	rjmp	.-40     	; 0x1566 <puts_P+0x1c>
    158e:	8a e0       	ldi	r24, 0x0A	; 10
    1590:	09 95       	icall
    1592:	89 2b       	or	r24, r25
    1594:	11 f4       	brne	.+4      	; 0x159a <puts_P+0x50>
    1596:	c8 01       	movw	r24, r16
    1598:	02 c0       	rjmp	.+4      	; 0x159e <puts_P+0x54>
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	9f ef       	ldi	r25, 0xFF	; 255
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <vfprintf>:
    15a8:	2f 92       	push	r2
    15aa:	3f 92       	push	r3
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2c 97       	sbiw	r28, 0x0c	; 12
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	7c 01       	movw	r14, r24
    15de:	6b 01       	movw	r12, r22
    15e0:	8a 01       	movw	r16, r20
    15e2:	fc 01       	movw	r30, r24
    15e4:	17 82       	std	Z+7, r1	; 0x07
    15e6:	16 82       	std	Z+6, r1	; 0x06
    15e8:	83 81       	ldd	r24, Z+3	; 0x03
    15ea:	81 ff       	sbrs	r24, 1
    15ec:	b0 c1       	rjmp	.+864    	; 0x194e <vfprintf+0x3a6>
    15ee:	ce 01       	movw	r24, r28
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	4c 01       	movw	r8, r24
    15f4:	f7 01       	movw	r30, r14
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	f6 01       	movw	r30, r12
    15fa:	93 fd       	sbrc	r25, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	93 ff       	sbrs	r25, 3
    1600:	81 91       	ld	r24, Z+
    1602:	6f 01       	movw	r12, r30
    1604:	88 23       	and	r24, r24
    1606:	09 f4       	brne	.+2      	; 0x160a <vfprintf+0x62>
    1608:	9e c1       	rjmp	.+828    	; 0x1946 <vfprintf+0x39e>
    160a:	85 32       	cpi	r24, 0x25	; 37
    160c:	39 f4       	brne	.+14     	; 0x161c <vfprintf+0x74>
    160e:	93 fd       	sbrc	r25, 3
    1610:	85 91       	lpm	r24, Z+
    1612:	93 ff       	sbrs	r25, 3
    1614:	81 91       	ld	r24, Z+
    1616:	6f 01       	movw	r12, r30
    1618:	85 32       	cpi	r24, 0x25	; 37
    161a:	21 f4       	brne	.+8      	; 0x1624 <vfprintf+0x7c>
    161c:	b7 01       	movw	r22, r14
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	d0 d1       	rcall	.+928    	; 0x19c2 <fputc>
    1622:	e8 cf       	rjmp	.-48     	; 0x15f4 <vfprintf+0x4c>
    1624:	51 2c       	mov	r5, r1
    1626:	31 2c       	mov	r3, r1
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	20 32       	cpi	r18, 0x20	; 32
    162c:	a0 f4       	brcc	.+40     	; 0x1656 <vfprintf+0xae>
    162e:	8b 32       	cpi	r24, 0x2B	; 43
    1630:	69 f0       	breq	.+26     	; 0x164c <vfprintf+0xa4>
    1632:	30 f4       	brcc	.+12     	; 0x1640 <vfprintf+0x98>
    1634:	80 32       	cpi	r24, 0x20	; 32
    1636:	59 f0       	breq	.+22     	; 0x164e <vfprintf+0xa6>
    1638:	83 32       	cpi	r24, 0x23	; 35
    163a:	69 f4       	brne	.+26     	; 0x1656 <vfprintf+0xae>
    163c:	20 61       	ori	r18, 0x10	; 16
    163e:	2c c0       	rjmp	.+88     	; 0x1698 <vfprintf+0xf0>
    1640:	8d 32       	cpi	r24, 0x2D	; 45
    1642:	39 f0       	breq	.+14     	; 0x1652 <vfprintf+0xaa>
    1644:	80 33       	cpi	r24, 0x30	; 48
    1646:	39 f4       	brne	.+14     	; 0x1656 <vfprintf+0xae>
    1648:	21 60       	ori	r18, 0x01	; 1
    164a:	26 c0       	rjmp	.+76     	; 0x1698 <vfprintf+0xf0>
    164c:	22 60       	ori	r18, 0x02	; 2
    164e:	24 60       	ori	r18, 0x04	; 4
    1650:	23 c0       	rjmp	.+70     	; 0x1698 <vfprintf+0xf0>
    1652:	28 60       	ori	r18, 0x08	; 8
    1654:	21 c0       	rjmp	.+66     	; 0x1698 <vfprintf+0xf0>
    1656:	27 fd       	sbrc	r18, 7
    1658:	27 c0       	rjmp	.+78     	; 0x16a8 <vfprintf+0x100>
    165a:	30 ed       	ldi	r19, 0xD0	; 208
    165c:	38 0f       	add	r19, r24
    165e:	3a 30       	cpi	r19, 0x0A	; 10
    1660:	78 f4       	brcc	.+30     	; 0x1680 <vfprintf+0xd8>
    1662:	26 ff       	sbrs	r18, 6
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <vfprintf+0xca>
    1666:	fa e0       	ldi	r31, 0x0A	; 10
    1668:	5f 9e       	mul	r5, r31
    166a:	30 0d       	add	r19, r0
    166c:	11 24       	eor	r1, r1
    166e:	53 2e       	mov	r5, r19
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <vfprintf+0xf0>
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	38 9e       	mul	r3, r24
    1676:	30 0d       	add	r19, r0
    1678:	11 24       	eor	r1, r1
    167a:	33 2e       	mov	r3, r19
    167c:	20 62       	ori	r18, 0x20	; 32
    167e:	0c c0       	rjmp	.+24     	; 0x1698 <vfprintf+0xf0>
    1680:	8e 32       	cpi	r24, 0x2E	; 46
    1682:	21 f4       	brne	.+8      	; 0x168c <vfprintf+0xe4>
    1684:	26 fd       	sbrc	r18, 6
    1686:	5f c1       	rjmp	.+702    	; 0x1946 <vfprintf+0x39e>
    1688:	20 64       	ori	r18, 0x40	; 64
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <vfprintf+0xf0>
    168c:	8c 36       	cpi	r24, 0x6C	; 108
    168e:	11 f4       	brne	.+4      	; 0x1694 <vfprintf+0xec>
    1690:	20 68       	ori	r18, 0x80	; 128
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <vfprintf+0xf0>
    1694:	88 36       	cpi	r24, 0x68	; 104
    1696:	41 f4       	brne	.+16     	; 0x16a8 <vfprintf+0x100>
    1698:	f6 01       	movw	r30, r12
    169a:	93 fd       	sbrc	r25, 3
    169c:	85 91       	lpm	r24, Z+
    169e:	93 ff       	sbrs	r25, 3
    16a0:	81 91       	ld	r24, Z+
    16a2:	6f 01       	movw	r12, r30
    16a4:	81 11       	cpse	r24, r1
    16a6:	c1 cf       	rjmp	.-126    	; 0x162a <vfprintf+0x82>
    16a8:	98 2f       	mov	r25, r24
    16aa:	9f 7d       	andi	r25, 0xDF	; 223
    16ac:	95 54       	subi	r25, 0x45	; 69
    16ae:	93 30       	cpi	r25, 0x03	; 3
    16b0:	28 f4       	brcc	.+10     	; 0x16bc <vfprintf+0x114>
    16b2:	0c 5f       	subi	r16, 0xFC	; 252
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	ff e3       	ldi	r31, 0x3F	; 63
    16b8:	f9 83       	std	Y+1, r31	; 0x01
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <vfprintf+0x12e>
    16bc:	83 36       	cpi	r24, 0x63	; 99
    16be:	31 f0       	breq	.+12     	; 0x16cc <vfprintf+0x124>
    16c0:	83 37       	cpi	r24, 0x73	; 115
    16c2:	71 f0       	breq	.+28     	; 0x16e0 <vfprintf+0x138>
    16c4:	83 35       	cpi	r24, 0x53	; 83
    16c6:	09 f0       	breq	.+2      	; 0x16ca <vfprintf+0x122>
    16c8:	57 c0       	rjmp	.+174    	; 0x1778 <vfprintf+0x1d0>
    16ca:	21 c0       	rjmp	.+66     	; 0x170e <vfprintf+0x166>
    16cc:	f8 01       	movw	r30, r16
    16ce:	80 81       	ld	r24, Z
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	0e 5f       	subi	r16, 0xFE	; 254
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	44 24       	eor	r4, r4
    16d8:	43 94       	inc	r4
    16da:	51 2c       	mov	r5, r1
    16dc:	54 01       	movw	r10, r8
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <vfprintf+0x160>
    16e0:	38 01       	movw	r6, r16
    16e2:	f2 e0       	ldi	r31, 0x02	; 2
    16e4:	6f 0e       	add	r6, r31
    16e6:	71 1c       	adc	r7, r1
    16e8:	f8 01       	movw	r30, r16
    16ea:	a0 80       	ld	r10, Z
    16ec:	b1 80       	ldd	r11, Z+1	; 0x01
    16ee:	26 ff       	sbrs	r18, 6
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <vfprintf+0x150>
    16f2:	65 2d       	mov	r22, r5
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x154>
    16f8:	6f ef       	ldi	r22, 0xFF	; 255
    16fa:	7f ef       	ldi	r23, 0xFF	; 255
    16fc:	c5 01       	movw	r24, r10
    16fe:	2c 87       	std	Y+12, r18	; 0x0c
    1700:	55 d1       	rcall	.+682    	; 0x19ac <strnlen>
    1702:	2c 01       	movw	r4, r24
    1704:	83 01       	movw	r16, r6
    1706:	2c 85       	ldd	r18, Y+12	; 0x0c
    1708:	2f 77       	andi	r18, 0x7F	; 127
    170a:	22 2e       	mov	r2, r18
    170c:	16 c0       	rjmp	.+44     	; 0x173a <vfprintf+0x192>
    170e:	38 01       	movw	r6, r16
    1710:	f2 e0       	ldi	r31, 0x02	; 2
    1712:	6f 0e       	add	r6, r31
    1714:	71 1c       	adc	r7, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	26 ff       	sbrs	r18, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x17e>
    1720:	65 2d       	mov	r22, r5
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x182>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	2c 87       	std	Y+12, r18	; 0x0c
    172e:	2a d1       	rcall	.+596    	; 0x1984 <strnlen_P>
    1730:	2c 01       	movw	r4, r24
    1732:	2c 85       	ldd	r18, Y+12	; 0x0c
    1734:	20 68       	ori	r18, 0x80	; 128
    1736:	22 2e       	mov	r2, r18
    1738:	83 01       	movw	r16, r6
    173a:	23 fc       	sbrc	r2, 3
    173c:	19 c0       	rjmp	.+50     	; 0x1770 <vfprintf+0x1c8>
    173e:	83 2d       	mov	r24, r3
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	48 16       	cp	r4, r24
    1744:	59 06       	cpc	r5, r25
    1746:	a0 f4       	brcc	.+40     	; 0x1770 <vfprintf+0x1c8>
    1748:	b7 01       	movw	r22, r14
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	39 d1       	rcall	.+626    	; 0x19c2 <fputc>
    1750:	3a 94       	dec	r3
    1752:	f5 cf       	rjmp	.-22     	; 0x173e <vfprintf+0x196>
    1754:	f5 01       	movw	r30, r10
    1756:	27 fc       	sbrc	r2, 7
    1758:	85 91       	lpm	r24, Z+
    175a:	27 fe       	sbrs	r2, 7
    175c:	81 91       	ld	r24, Z+
    175e:	5f 01       	movw	r10, r30
    1760:	b7 01       	movw	r22, r14
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2e d1       	rcall	.+604    	; 0x19c2 <fputc>
    1766:	31 10       	cpse	r3, r1
    1768:	3a 94       	dec	r3
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	4f 1a       	sub	r4, r31
    176e:	51 08       	sbc	r5, r1
    1770:	41 14       	cp	r4, r1
    1772:	51 04       	cpc	r5, r1
    1774:	79 f7       	brne	.-34     	; 0x1754 <vfprintf+0x1ac>
    1776:	de c0       	rjmp	.+444    	; 0x1934 <vfprintf+0x38c>
    1778:	84 36       	cpi	r24, 0x64	; 100
    177a:	11 f0       	breq	.+4      	; 0x1780 <vfprintf+0x1d8>
    177c:	89 36       	cpi	r24, 0x69	; 105
    177e:	31 f5       	brne	.+76     	; 0x17cc <vfprintf+0x224>
    1780:	f8 01       	movw	r30, r16
    1782:	27 ff       	sbrs	r18, 7
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <vfprintf+0x1ec>
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	0c 5f       	subi	r16, 0xFC	; 252
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <vfprintf+0x1fc>
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	88 27       	eor	r24, r24
    179a:	77 fd       	sbrc	r23, 7
    179c:	80 95       	com	r24
    179e:	98 2f       	mov	r25, r24
    17a0:	0e 5f       	subi	r16, 0xFE	; 254
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	2f 76       	andi	r18, 0x6F	; 111
    17a6:	b2 2e       	mov	r11, r18
    17a8:	97 ff       	sbrs	r25, 7
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x216>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	20 68       	ori	r18, 0x80	; 128
    17bc:	b2 2e       	mov	r11, r18
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	a4 01       	movw	r20, r8
    17c4:	30 d1       	rcall	.+608    	; 0x1a26 <__ultoa_invert>
    17c6:	a8 2e       	mov	r10, r24
    17c8:	a8 18       	sub	r10, r8
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <vfprintf+0x2aa>
    17cc:	85 37       	cpi	r24, 0x75	; 117
    17ce:	29 f4       	brne	.+10     	; 0x17da <vfprintf+0x232>
    17d0:	2f 7e       	andi	r18, 0xEF	; 239
    17d2:	b2 2e       	mov	r11, r18
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	25 c0       	rjmp	.+74     	; 0x1824 <vfprintf+0x27c>
    17da:	f2 2f       	mov	r31, r18
    17dc:	f9 7f       	andi	r31, 0xF9	; 249
    17de:	bf 2e       	mov	r11, r31
    17e0:	8f 36       	cpi	r24, 0x6F	; 111
    17e2:	c1 f0       	breq	.+48     	; 0x1814 <vfprintf+0x26c>
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <vfprintf+0x244>
    17e6:	88 35       	cpi	r24, 0x58	; 88
    17e8:	79 f0       	breq	.+30     	; 0x1808 <vfprintf+0x260>
    17ea:	ad c0       	rjmp	.+346    	; 0x1946 <vfprintf+0x39e>
    17ec:	80 37       	cpi	r24, 0x70	; 112
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <vfprintf+0x24e>
    17f0:	88 37       	cpi	r24, 0x78	; 120
    17f2:	21 f0       	breq	.+8      	; 0x17fc <vfprintf+0x254>
    17f4:	a8 c0       	rjmp	.+336    	; 0x1946 <vfprintf+0x39e>
    17f6:	2f 2f       	mov	r18, r31
    17f8:	20 61       	ori	r18, 0x10	; 16
    17fa:	b2 2e       	mov	r11, r18
    17fc:	b4 fe       	sbrs	r11, 4
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <vfprintf+0x272>
    1800:	8b 2d       	mov	r24, r11
    1802:	84 60       	ori	r24, 0x04	; 4
    1804:	b8 2e       	mov	r11, r24
    1806:	09 c0       	rjmp	.+18     	; 0x181a <vfprintf+0x272>
    1808:	24 ff       	sbrs	r18, 4
    180a:	0a c0       	rjmp	.+20     	; 0x1820 <vfprintf+0x278>
    180c:	9f 2f       	mov	r25, r31
    180e:	96 60       	ori	r25, 0x06	; 6
    1810:	b9 2e       	mov	r11, r25
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x278>
    1814:	28 e0       	ldi	r18, 0x08	; 8
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <vfprintf+0x27c>
    181a:	20 e1       	ldi	r18, 0x10	; 16
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x27c>
    1820:	20 e1       	ldi	r18, 0x10	; 16
    1822:	32 e0       	ldi	r19, 0x02	; 2
    1824:	f8 01       	movw	r30, r16
    1826:	b7 fe       	sbrs	r11, 7
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <vfprintf+0x290>
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	0c 5f       	subi	r16, 0xFC	; 252
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <vfprintf+0x29c>
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 5f       	subi	r16, 0xFE	; 254
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	a4 01       	movw	r20, r8
    1846:	ef d0       	rcall	.+478    	; 0x1a26 <__ultoa_invert>
    1848:	a8 2e       	mov	r10, r24
    184a:	a8 18       	sub	r10, r8
    184c:	fb 2d       	mov	r31, r11
    184e:	ff 77       	andi	r31, 0x7F	; 127
    1850:	bf 2e       	mov	r11, r31
    1852:	b6 fe       	sbrs	r11, 6
    1854:	0b c0       	rjmp	.+22     	; 0x186c <vfprintf+0x2c4>
    1856:	2b 2d       	mov	r18, r11
    1858:	2e 7f       	andi	r18, 0xFE	; 254
    185a:	a5 14       	cp	r10, r5
    185c:	50 f4       	brcc	.+20     	; 0x1872 <vfprintf+0x2ca>
    185e:	b4 fe       	sbrs	r11, 4
    1860:	0a c0       	rjmp	.+20     	; 0x1876 <vfprintf+0x2ce>
    1862:	b2 fc       	sbrc	r11, 2
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <vfprintf+0x2ce>
    1866:	2b 2d       	mov	r18, r11
    1868:	2e 7e       	andi	r18, 0xEE	; 238
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <vfprintf+0x2ce>
    186c:	7a 2c       	mov	r7, r10
    186e:	2b 2d       	mov	r18, r11
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <vfprintf+0x2d0>
    1872:	7a 2c       	mov	r7, r10
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <vfprintf+0x2d0>
    1876:	75 2c       	mov	r7, r5
    1878:	24 ff       	sbrs	r18, 4
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <vfprintf+0x2ee>
    187c:	fe 01       	movw	r30, r28
    187e:	ea 0d       	add	r30, r10
    1880:	f1 1d       	adc	r31, r1
    1882:	80 81       	ld	r24, Z
    1884:	80 33       	cpi	r24, 0x30	; 48
    1886:	11 f4       	brne	.+4      	; 0x188c <vfprintf+0x2e4>
    1888:	29 7e       	andi	r18, 0xE9	; 233
    188a:	09 c0       	rjmp	.+18     	; 0x189e <vfprintf+0x2f6>
    188c:	22 ff       	sbrs	r18, 2
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x2f4>
    1890:	73 94       	inc	r7
    1892:	73 94       	inc	r7
    1894:	04 c0       	rjmp	.+8      	; 0x189e <vfprintf+0x2f6>
    1896:	82 2f       	mov	r24, r18
    1898:	86 78       	andi	r24, 0x86	; 134
    189a:	09 f0       	breq	.+2      	; 0x189e <vfprintf+0x2f6>
    189c:	73 94       	inc	r7
    189e:	23 fd       	sbrc	r18, 3
    18a0:	12 c0       	rjmp	.+36     	; 0x18c6 <vfprintf+0x31e>
    18a2:	20 ff       	sbrs	r18, 0
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <vfprintf+0x30a>
    18a6:	5a 2c       	mov	r5, r10
    18a8:	73 14       	cp	r7, r3
    18aa:	18 f4       	brcc	.+6      	; 0x18b2 <vfprintf+0x30a>
    18ac:	53 0c       	add	r5, r3
    18ae:	57 18       	sub	r5, r7
    18b0:	73 2c       	mov	r7, r3
    18b2:	73 14       	cp	r7, r3
    18b4:	60 f4       	brcc	.+24     	; 0x18ce <vfprintf+0x326>
    18b6:	b7 01       	movw	r22, r14
    18b8:	80 e2       	ldi	r24, 0x20	; 32
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	2c 87       	std	Y+12, r18	; 0x0c
    18be:	81 d0       	rcall	.+258    	; 0x19c2 <fputc>
    18c0:	73 94       	inc	r7
    18c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c4:	f6 cf       	rjmp	.-20     	; 0x18b2 <vfprintf+0x30a>
    18c6:	73 14       	cp	r7, r3
    18c8:	10 f4       	brcc	.+4      	; 0x18ce <vfprintf+0x326>
    18ca:	37 18       	sub	r3, r7
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <vfprintf+0x328>
    18ce:	31 2c       	mov	r3, r1
    18d0:	24 ff       	sbrs	r18, 4
    18d2:	11 c0       	rjmp	.+34     	; 0x18f6 <vfprintf+0x34e>
    18d4:	b7 01       	movw	r22, r14
    18d6:	80 e3       	ldi	r24, 0x30	; 48
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2c 87       	std	Y+12, r18	; 0x0c
    18dc:	72 d0       	rcall	.+228    	; 0x19c2 <fputc>
    18de:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e0:	22 ff       	sbrs	r18, 2
    18e2:	16 c0       	rjmp	.+44     	; 0x1910 <vfprintf+0x368>
    18e4:	21 ff       	sbrs	r18, 1
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <vfprintf+0x346>
    18e8:	88 e5       	ldi	r24, 0x58	; 88
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x34a>
    18ee:	88 e7       	ldi	r24, 0x78	; 120
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b7 01       	movw	r22, r14
    18f4:	0c c0       	rjmp	.+24     	; 0x190e <vfprintf+0x366>
    18f6:	82 2f       	mov	r24, r18
    18f8:	86 78       	andi	r24, 0x86	; 134
    18fa:	51 f0       	breq	.+20     	; 0x1910 <vfprintf+0x368>
    18fc:	21 fd       	sbrc	r18, 1
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x35c>
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x35e>
    1904:	8b e2       	ldi	r24, 0x2B	; 43
    1906:	27 fd       	sbrc	r18, 7
    1908:	8d e2       	ldi	r24, 0x2D	; 45
    190a:	b7 01       	movw	r22, r14
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	59 d0       	rcall	.+178    	; 0x19c2 <fputc>
    1910:	a5 14       	cp	r10, r5
    1912:	30 f4       	brcc	.+12     	; 0x1920 <vfprintf+0x378>
    1914:	b7 01       	movw	r22, r14
    1916:	80 e3       	ldi	r24, 0x30	; 48
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	53 d0       	rcall	.+166    	; 0x19c2 <fputc>
    191c:	5a 94       	dec	r5
    191e:	f8 cf       	rjmp	.-16     	; 0x1910 <vfprintf+0x368>
    1920:	aa 94       	dec	r10
    1922:	f4 01       	movw	r30, r8
    1924:	ea 0d       	add	r30, r10
    1926:	f1 1d       	adc	r31, r1
    1928:	80 81       	ld	r24, Z
    192a:	b7 01       	movw	r22, r14
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	49 d0       	rcall	.+146    	; 0x19c2 <fputc>
    1930:	a1 10       	cpse	r10, r1
    1932:	f6 cf       	rjmp	.-20     	; 0x1920 <vfprintf+0x378>
    1934:	33 20       	and	r3, r3
    1936:	09 f4       	brne	.+2      	; 0x193a <vfprintf+0x392>
    1938:	5d ce       	rjmp	.-838    	; 0x15f4 <vfprintf+0x4c>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	40 d0       	rcall	.+128    	; 0x19c2 <fputc>
    1942:	3a 94       	dec	r3
    1944:	f7 cf       	rjmp	.-18     	; 0x1934 <vfprintf+0x38c>
    1946:	f7 01       	movw	r30, r14
    1948:	86 81       	ldd	r24, Z+6	; 0x06
    194a:	97 81       	ldd	r25, Z+7	; 0x07
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0x3aa>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	9f ef       	ldi	r25, 0xFF	; 255
    1952:	2c 96       	adiw	r28, 0x0c	; 12
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	9f 90       	pop	r9
    1974:	8f 90       	pop	r8
    1976:	7f 90       	pop	r7
    1978:	6f 90       	pop	r6
    197a:	5f 90       	pop	r5
    197c:	4f 90       	pop	r4
    197e:	3f 90       	pop	r3
    1980:	2f 90       	pop	r2
    1982:	08 95       	ret

00001984 <strnlen_P>:
    1984:	fc 01       	movw	r30, r24
    1986:	05 90       	lpm	r0, Z+
    1988:	61 50       	subi	r22, 0x01	; 1
    198a:	70 40       	sbci	r23, 0x00	; 0
    198c:	01 10       	cpse	r0, r1
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <strnlen_P+0x2>
    1990:	80 95       	com	r24
    1992:	90 95       	com	r25
    1994:	8e 0f       	add	r24, r30
    1996:	9f 1f       	adc	r25, r31
    1998:	08 95       	ret

0000199a <memcpy>:
    199a:	fb 01       	movw	r30, r22
    199c:	dc 01       	movw	r26, r24
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <memcpy+0xa>
    19a0:	01 90       	ld	r0, Z+
    19a2:	0d 92       	st	X+, r0
    19a4:	41 50       	subi	r20, 0x01	; 1
    19a6:	50 40       	sbci	r21, 0x00	; 0
    19a8:	d8 f7       	brcc	.-10     	; 0x19a0 <memcpy+0x6>
    19aa:	08 95       	ret

000019ac <strnlen>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	61 50       	subi	r22, 0x01	; 1
    19b0:	70 40       	sbci	r23, 0x00	; 0
    19b2:	01 90       	ld	r0, Z+
    19b4:	01 10       	cpse	r0, r1
    19b6:	d8 f7       	brcc	.-10     	; 0x19ae <strnlen+0x2>
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	8e 0f       	add	r24, r30
    19be:	9f 1f       	adc	r25, r31
    19c0:	08 95       	ret

000019c2 <fputc>:
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	18 2f       	mov	r17, r24
    19cc:	09 2f       	mov	r16, r25
    19ce:	eb 01       	movw	r28, r22
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 fd       	sbrc	r24, 1
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <fputc+0x1a>
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	20 c0       	rjmp	.+64     	; 0x1a1c <fputc+0x5a>
    19dc:	82 ff       	sbrs	r24, 2
    19de:	10 c0       	rjmp	.+32     	; 0x1a00 <fputc+0x3e>
    19e0:	4e 81       	ldd	r20, Y+6	; 0x06
    19e2:	5f 81       	ldd	r21, Y+7	; 0x07
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	42 17       	cp	r20, r18
    19ea:	53 07       	cpc	r21, r19
    19ec:	7c f4       	brge	.+30     	; 0x1a0c <fputc+0x4a>
    19ee:	e8 81       	ld	r30, Y
    19f0:	f9 81       	ldd	r31, Y+1	; 0x01
    19f2:	9f 01       	movw	r18, r30
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	39 83       	std	Y+1, r19	; 0x01
    19fa:	28 83       	st	Y, r18
    19fc:	10 83       	st	Z, r17
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <fputc+0x4a>
    1a00:	e8 85       	ldd	r30, Y+8	; 0x08
    1a02:	f9 85       	ldd	r31, Y+9	; 0x09
    1a04:	81 2f       	mov	r24, r17
    1a06:	09 95       	icall
    1a08:	89 2b       	or	r24, r25
    1a0a:	29 f7       	brne	.-54     	; 0x19d6 <fputc+0x14>
    1a0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a10:	2f 5f       	subi	r18, 0xFF	; 255
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	3f 83       	std	Y+7, r19	; 0x07
    1a16:	2e 83       	std	Y+6, r18	; 0x06
    1a18:	81 2f       	mov	r24, r17
    1a1a:	90 2f       	mov	r25, r16
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <__ultoa_invert>:
    1a26:	fa 01       	movw	r30, r20
    1a28:	aa 27       	eor	r26, r26
    1a2a:	28 30       	cpi	r18, 0x08	; 8
    1a2c:	51 f1       	breq	.+84     	; 0x1a82 <__ultoa_invert+0x5c>
    1a2e:	20 31       	cpi	r18, 0x10	; 16
    1a30:	81 f1       	breq	.+96     	; 0x1a92 <__ultoa_invert+0x6c>
    1a32:	e8 94       	clt
    1a34:	6f 93       	push	r22
    1a36:	6e 7f       	andi	r22, 0xFE	; 254
    1a38:	6e 5f       	subi	r22, 0xFE	; 254
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	af 4f       	sbci	r26, 0xFF	; 255
    1a42:	b1 e0       	ldi	r27, 0x01	; 1
    1a44:	3e d0       	rcall	.+124    	; 0x1ac2 <__ultoa_invert+0x9c>
    1a46:	b4 e0       	ldi	r27, 0x04	; 4
    1a48:	3c d0       	rcall	.+120    	; 0x1ac2 <__ultoa_invert+0x9c>
    1a4a:	67 0f       	add	r22, r23
    1a4c:	78 1f       	adc	r23, r24
    1a4e:	89 1f       	adc	r24, r25
    1a50:	9a 1f       	adc	r25, r26
    1a52:	a1 1d       	adc	r26, r1
    1a54:	68 0f       	add	r22, r24
    1a56:	79 1f       	adc	r23, r25
    1a58:	8a 1f       	adc	r24, r26
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	6a 0f       	add	r22, r26
    1a60:	71 1d       	adc	r23, r1
    1a62:	81 1d       	adc	r24, r1
    1a64:	91 1d       	adc	r25, r1
    1a66:	a1 1d       	adc	r26, r1
    1a68:	20 d0       	rcall	.+64     	; 0x1aaa <__ultoa_invert+0x84>
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <__ultoa_invert+0x48>
    1a6c:	68 94       	set
    1a6e:	3f 91       	pop	r19
    1a70:	2a e0       	ldi	r18, 0x0A	; 10
    1a72:	26 9f       	mul	r18, r22
    1a74:	11 24       	eor	r1, r1
    1a76:	30 19       	sub	r19, r0
    1a78:	30 5d       	subi	r19, 0xD0	; 208
    1a7a:	31 93       	st	Z+, r19
    1a7c:	de f6       	brtc	.-74     	; 0x1a34 <__ultoa_invert+0xe>
    1a7e:	cf 01       	movw	r24, r30
    1a80:	08 95       	ret
    1a82:	46 2f       	mov	r20, r22
    1a84:	47 70       	andi	r20, 0x07	; 7
    1a86:	40 5d       	subi	r20, 0xD0	; 208
    1a88:	41 93       	st	Z+, r20
    1a8a:	b3 e0       	ldi	r27, 0x03	; 3
    1a8c:	0f d0       	rcall	.+30     	; 0x1aac <__ultoa_invert+0x86>
    1a8e:	c9 f7       	brne	.-14     	; 0x1a82 <__ultoa_invert+0x5c>
    1a90:	f6 cf       	rjmp	.-20     	; 0x1a7e <__ultoa_invert+0x58>
    1a92:	46 2f       	mov	r20, r22
    1a94:	4f 70       	andi	r20, 0x0F	; 15
    1a96:	40 5d       	subi	r20, 0xD0	; 208
    1a98:	4a 33       	cpi	r20, 0x3A	; 58
    1a9a:	18 f0       	brcs	.+6      	; 0x1aa2 <__ultoa_invert+0x7c>
    1a9c:	49 5d       	subi	r20, 0xD9	; 217
    1a9e:	31 fd       	sbrc	r19, 1
    1aa0:	40 52       	subi	r20, 0x20	; 32
    1aa2:	41 93       	st	Z+, r20
    1aa4:	02 d0       	rcall	.+4      	; 0x1aaa <__ultoa_invert+0x84>
    1aa6:	a9 f7       	brne	.-22     	; 0x1a92 <__ultoa_invert+0x6c>
    1aa8:	ea cf       	rjmp	.-44     	; 0x1a7e <__ultoa_invert+0x58>
    1aaa:	b4 e0       	ldi	r27, 0x04	; 4
    1aac:	a6 95       	lsr	r26
    1aae:	97 95       	ror	r25
    1ab0:	87 95       	ror	r24
    1ab2:	77 95       	ror	r23
    1ab4:	67 95       	ror	r22
    1ab6:	ba 95       	dec	r27
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0x86>
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	61 05       	cpc	r22, r1
    1abe:	71 05       	cpc	r23, r1
    1ac0:	08 95       	ret
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	0a 2e       	mov	r0, r26
    1ac8:	06 94       	lsr	r0
    1aca:	57 95       	ror	r21
    1acc:	47 95       	ror	r20
    1ace:	37 95       	ror	r19
    1ad0:	27 95       	ror	r18
    1ad2:	ba 95       	dec	r27
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__ultoa_invert+0xa2>
    1ad6:	62 0f       	add	r22, r18
    1ad8:	73 1f       	adc	r23, r19
    1ada:	84 1f       	adc	r24, r20
    1adc:	95 1f       	adc	r25, r21
    1ade:	a0 1d       	adc	r26, r0
    1ae0:	08 95       	ret

00001ae2 <_exit>:
    1ae2:	f8 94       	cli

00001ae4 <__stop_program>:
    1ae4:	ff cf       	rjmp	.-2      	; 0x1ae4 <__stop_program>

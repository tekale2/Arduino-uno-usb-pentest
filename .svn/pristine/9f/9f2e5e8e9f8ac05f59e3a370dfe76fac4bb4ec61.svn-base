
HIDReportViewer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00002618  000026ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800138  00800138  000026e4  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000617b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008b8  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f617  00000000  00000000  00006a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003792  00000000  00000000  0001605b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000053a8  00000000  00000000  000197ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001960  00000000  00000000  0001eb98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f3c  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b068  00000000  00000000  00025434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000930  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
       0:	96 c2       	rjmp	.+1324   	; 0x52e <__ctors_end>
       2:	00 00       	nop
       4:	b2 c2       	rjmp	.+1380   	; 0x56a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c2       	rjmp	.+1376   	; 0x56a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c2       	rjmp	.+1372   	; 0x56a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c2       	rjmp	.+1368   	; 0x56a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c2       	rjmp	.+1364   	; 0x56a <__bad_interrupt>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
      16:	00 00       	nop
      18:	a8 c2       	rjmp	.+1360   	; 0x56a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c2       	rjmp	.+1356   	; 0x56a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c2       	rjmp	.+1352   	; 0x56a <__bad_interrupt>
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
      22:	00 00       	nop
      24:	a2 c2       	rjmp	.+1348   	; 0x56a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_10>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
      2c:	9e c2       	rjmp	.+1340   	; 0x56a <__bad_interrupt>
      2e:	00 00       	nop
      30:	9c c2       	rjmp	.+1336   	; 0x56a <__bad_interrupt>
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
      32:	00 00       	nop
      34:	9a c2       	rjmp	.+1332   	; 0x56a <__bad_interrupt>
      36:	00 00       	nop
	{
		Length -= *BytesProcessed;
      38:	98 c2       	rjmp	.+1328   	; 0x56a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c2       	rjmp	.+1324   	; 0x56a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c2       	rjmp	.+1320   	; 0x56a <__bad_interrupt>
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
      42:	00 00       	nop
      44:	92 c2       	rjmp	.+1316   	; 0x56a <__bad_interrupt>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
      46:	00 00       	nop
      48:	90 c2       	rjmp	.+1312   	; 0x56a <__bad_interrupt>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      4a:	00 00       	nop
      4c:	8e c2       	rjmp	.+1308   	; 0x56a <__bad_interrupt>
      4e:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
      50:	8c c2       	rjmp	.+1304   	; 0x56a <__bad_interrupt>
      52:	00 00       	nop
	{
		if (!(Pipe_IsReadWriteAllowed()))
      54:	8a c2       	rjmp	.+1300   	; 0x56a <__bad_interrupt>
      56:	00 00       	nop
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
      58:	88 c2       	rjmp	.+1296   	; 0x56a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c2       	rjmp	.+1292   	; 0x56a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c2       	rjmp	.+1288   	; 0x56a <__bad_interrupt>
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
      62:	00 00       	nop
      64:	82 c2       	rjmp	.+1284   	; 0x56a <__bad_interrupt>
      66:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
      68:	80 c2       	rjmp	.+1280   	; 0x56a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7e c2       	rjmp	.+1276   	; 0x56a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c2       	rjmp	.+1272   	; 0x56a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c2       	rjmp	.+1268   	; 0x56a <__bad_interrupt>
				return PIPE_RWSTREAM_IncompleteTransfer;
      76:	00 00       	nop
      78:	78 c2       	rjmp	.+1264   	; 0x56a <__bad_interrupt>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
      7a:	00 00       	nop
      7c:	76 c2       	rjmp	.+1260   	; 0x56a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c2       	rjmp	.+1256   	; 0x56a <__bad_interrupt>
      82:	00 00       	nop
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
      84:	72 c2       	rjmp	.+1252   	; 0x56a <__bad_interrupt>
      86:	00 00       	nop
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      88:	70 c2       	rjmp	.+1248   	; 0x56a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c2       	rjmp	.+1244   	; 0x56a <__bad_interrupt>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
      8e:	00 00       	nop
			Length--;
      90:	6c c2       	rjmp	.+1240   	; 0x56a <__bad_interrupt>
      92:	00 00       	nop
			BytesInTransfer++;
      94:	6a c2       	rjmp	.+1236   	; 0x56a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4600>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
		}
	}

	return PIPE_RWSTREAM_NoError;
}
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4593>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

	return AOA_ENUMERROR_NoError;
}
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4588>:
     11d:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4586>:
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
     146:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;
     156:	64 65 2e 0d 0a 00                                   de....

0000015c <__c.4584>:

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
     15c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
     16c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
     17c:	6f 6e 2e 0d 0a 00                                   on....

00000182 <__c.4582>:
	AudioInterfaceInfo->State.IsActive = true;
     182:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 

	return AUDIO_ENUMERROR_NoError;
}
     192:	4e 6f 74 20 61 20 56 61 6c 69 64 20 48 49 44 20     Not a Valid HID 
     1a2:	44 65 76 69 63 65 2e 0d 0a 00                       Device....

000001ac <__c.4580>:
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
	CDCInterfaceInfo->State.IsActive = true;

	return CDC_ENUMERROR_NoError;
}
     1ac:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     1bc:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     1cc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d9 <__c.4573>:
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
     1d9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e9:	68 65 64 2e 0d 0a 00                                hed....

000001f0 <__c.4568>:
     1f0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     200:	0d 0a 00                                            ...

00000203 <__c.4560>:
     203:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 45           |..      E
     213:	4e 44 0d 0a 00                                      ND...

00000218 <__c.4555>:
     218:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 2d           |..      -
     228:	20 54 79 70 65 3a 20 20 30 78 25 30 32 58 0d 0a      Type:  0x%02X..
     238:	20 20 20 20 20 20 2d 20 55 73 61 67 65 3a 20 30           - Usage: 0
     248:	78 25 30 32 58 0d 0a 00                             x%02X...

00000250 <__c.4546>:
     250:	20 20 2b 20 49 74 65 6d 20 25 64 3a 0d 0a 20 20       + Item %d:..  
     260:	20 20 2d 20 52 65 70 6f 72 74 20 49 44 3a 20 20       - Report ID:  
     270:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     280:	20 20 20 20 2d 20 44 61 74 61 20 44 69 72 65 63         - Data Direc
     290:	74 69 6f 6e 3a 20 20 20 20 20 25 73 0d 0a 20 20     tion:     %s..  
     2a0:	20 20 2d 20 49 74 65 6d 20 46 6c 61 67 73 3a 20       - Item Flags: 
     2b0:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     2c0:	20 20 20 20 2d 20 49 74 65 6d 20 4f 66 66 73 65         - Item Offse
     2d0:	74 20 28 42 69 74 73 29 3a 20 30 78 25 30 32 58     t (Bits): 0x%02X
     2e0:	0d 0a 20 20 20 20 2d 20 49 74 65 6d 20 53 69 7a     ..    - Item Siz
     2f0:	65 20 28 42 69 74 73 29 3a 20 20 20 30 78 25 30     e (Bits):   0x%0
     300:	32 58 0d 0a 20 20 20 20 2d 20 55 73 61 67 65 20     2X..    - Usage 
     310:	50 61 67 65 3a 20 20 20 20 20 20 20 20 20 30 78     Page:         0x
     320:	25 30 34 58 0d 0a 20 20 20 20 2d 20 55 73 61 67     %04X..    - Usag
     330:	65 3a 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e:              
     340:	30 78 25 30 34 58 0d 0a 20 20 20 20 2d 20 55 6e     0x%04X..    - Un
     350:	69 74 20 54 79 70 65 3a 20 20 20 20 20 20 20 20     it Type:        
     360:	20 20 30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d       0x%08lX..    -
     370:	20 55 6e 69 74 20 45 78 70 6f 6e 65 6e 74 3a 20      Unit Exponent: 
     380:	20 20 20 20 20 30 78 25 30 32 58 0d 0a 20 20 20          0x%02X..   
     390:	20 2d 20 4c 6f 67 69 63 61 6c 20 4d 69 6e 69 6d      - Logical Minim
     3a0:	75 6d 3a 20 20 20 20 30 78 25 30 38 6c 58 0d 0a     um:    0x%08lX..
     3b0:	20 20 20 20 2d 20 4c 6f 67 69 63 61 6c 20 4d 61         - Logical Ma
     3c0:	78 69 6d 75 6d 3a 20 20 20 20 30 78 25 30 38 6c     ximum:    0x%08l
     3d0:	58 0d 0a 20 20 20 20 2d 20 50 68 79 73 69 63 61     X..    - Physica
     3e0:	6c 20 4d 69 6e 69 6d 75 6d 3a 20 20 20 30 78 25     l Minimum:   0x%
     3f0:	30 38 6c 58 0d 0a 20 20 20 20 2d 20 50 68 79 73     08lX..    - Phys
     400:	69 63 61 6c 20 4d 61 78 69 6d 75 6d 3a 20 20 20     ical Maximum:   
     410:	30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d 20 43     0x%08lX..    - C
     420:	6f 6c 6c 65 63 74 69 6f 6e 20 50 61 74 68 3a 0d     ollection Path:.
     430:	0a 00                                               ..

00000432 <__c.4542>:
     432:	0d 0a 52 65 70 6f 72 74 20 49 74 65 6d 73 20 28     ..Report Items (
     442:	25 64 20 69 6e 20 54 61 62 6c 65 29 3a 0d 0a 00     %d in Table):...

00000452 <__c.4534>:
     452:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 30 78       + Report ID 0x
     462:	25 30 32 58 0d 0a 20 20 20 20 2d 20 49 6e 70 75     %02X..    - Inpu
     472:	74 20 44 61 74 61 3a 20 20 20 25 64 20 62 69 74     t Data:   %d bit
     482:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 20 20     s (%d bytes)..  
     492:	20 20 2d 20 4f 75 74 70 75 74 20 44 61 74 61 3a       - Output Data:
     4a2:	20 20 25 64 20 62 69 74 73 20 28 25 64 20 62 79       %d bits (%d by
     4b2:	74 65 73 29 0d 0a 20 20 20 20 2d 20 46 65 61 74     tes)..    - Feat
     4c2:	75 72 65 20 44 61 74 61 3a 20 25 64 20 62 69 74     ure Data: %d bit
     4d2:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 00        s (%d bytes)...

000004e1 <__c.4527>:
     4e1:	0d 0a 0d 0a 54 6f 74 61 6c 20 44 65 76 69 63 65     ....Total Device
     4f1:	20 52 65 70 6f 72 74 73 3a 20 25 64 0d 0a 00         Reports: %d...

00000500 <__c.4518>:
     500:	1b 5b 33 36 6d 48 49 44 20 44 65 76 69 63 65 20     .[36mHID Device 
     510:	52 65 70 6f 72 74 20 56 69 65 77 65 72 20 52 75     Report Viewer Ru
     520:	6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00           nning....[37m.

0000052e <__ctors_end>:
     52e:	11 24       	eor	r1, r1
     530:	1f be       	out	0x3f, r1	; 63
     532:	cf ef       	ldi	r28, 0xFF	; 255
     534:	d0 e2       	ldi	r29, 0x20	; 32
     536:	de bf       	out	0x3e, r29	; 62
     538:	cd bf       	out	0x3d, r28	; 61

0000053a <__do_copy_data>:
     53a:	11 e0       	ldi	r17, 0x01	; 1
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	e8 e1       	ldi	r30, 0x18	; 24
     542:	f6 e2       	ldi	r31, 0x26	; 38
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0b bf       	out	0x3b, r16	; 59
     548:	02 c0       	rjmp	.+4      	; 0x54e <__do_copy_data+0x14>
     54a:	07 90       	elpm	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	a8 33       	cpi	r26, 0x38	; 56
     550:	b1 07       	cpc	r27, r17
     552:	d9 f7       	brne	.-10     	; 0x54a <__do_copy_data+0x10>

00000554 <__do_clear_bss>:
     554:	15 e0       	ldi	r17, 0x05	; 5
     556:	a8 e3       	ldi	r26, 0x38	; 56
     558:	b1 e0       	ldi	r27, 0x01	; 1
     55a:	01 c0       	rjmp	.+2      	; 0x55e <.do_clear_bss_start>

0000055c <.do_clear_bss_loop>:
     55c:	1d 92       	st	X+, r1

0000055e <.do_clear_bss_start>:
     55e:	a3 33       	cpi	r26, 0x33	; 51
     560:	b1 07       	cpc	r27, r17
     562:	e1 f7       	brne	.-8      	; 0x55c <.do_clear_bss_loop>
     564:	de d1       	rcall	.+956    	; 0x922 <main>
     566:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <_exit>

0000056a <__bad_interrupt>:
     56a:	4a cd       	rjmp	.-1388   	; 0x0 <__vectors>

0000056c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     56c:	9b b1       	in	r25, 0x0b	; 11
     56e:	9f 70       	andi	r25, 0x0F	; 15
     570:	98 2b       	or	r25, r24
     572:	9b b9       	out	0x0b, r25	; 11
     574:	08 95       	ret

00000576 <OutputReportSizes>:

/** Prints a summary of the device's HID report sizes from the HID parser output to the serial port
 *  for display to the user.
 */
void OutputReportSizes(void)
{
     576:	8f 92       	push	r8
     578:	9f 92       	push	r9
     57a:	af 92       	push	r10
     57c:	bf 92       	push	r11
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);
     58e:	80 91 c7 04 	lds	r24, 0x04C7
     592:	1f 92       	push	r1
     594:	8f 93       	push	r24
     596:	81 ee       	ldi	r24, 0xE1	; 225
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	b1 2c       	mov	r11, r1
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	a8 2e       	mov	r10, r24
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5b0:	92 e5       	ldi	r25, 0x52	; 82
     5b2:	89 2e       	mov	r8, r25
     5b4:	94 e0       	ldi	r25, 0x04	; 4
     5b6:	99 2e       	mov	r9, r25
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5b8:	80 91 c7 04 	lds	r24, 0x04C7
     5bc:	b8 16       	cp	r11, r24
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <OutputReportSizes+0x4c>
     5c0:	5d c0       	rjmp	.+186    	; 0x67c <OutputReportSizes+0x106>
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     5c2:	ab 9c       	mul	r10, r11
     5c4:	f0 01       	movw	r30, r0
     5c6:	11 24       	eor	r1, r1
     5c8:	e8 53       	subi	r30, 0x38	; 56
     5ca:	fb 4f       	sbci	r31, 0xFB	; 251

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     5cc:	61 81       	ldd	r22, Z+1	; 0x01
     5ce:	72 81       	ldd	r23, Z+2	; 0x02
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     5d0:	a3 81       	ldd	r26, Z+3	; 0x03
     5d2:	b4 81       	ldd	r27, Z+4	; 0x04
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     5d4:	45 81       	ldd	r20, Z+5	; 0x05
     5d6:	56 81       	ldd	r21, Z+6	; 0x06
     5d8:	8a 01       	movw	r16, r20
     5da:	11 27       	eor	r17, r17
     5dc:	9d 01       	movw	r18, r26
     5de:	33 27       	eor	r19, r19
     5e0:	cb 01       	movw	r24, r22
     5e2:	99 27       	eor	r25, r25
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     5e4:	e4 2e       	mov	r14, r20
     5e6:	e6 94       	lsr	r14
     5e8:	e6 94       	lsr	r14
     5ea:	e6 94       	lsr	r14
     5ec:	f1 2c       	mov	r15, r1
     5ee:	6a 01       	movw	r12, r20
     5f0:	c7 e0       	ldi	r28, 0x07	; 7
     5f2:	cc 22       	and	r12, r28
     5f4:	dd 24       	eor	r13, r13
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	cd 28       	or	r12, r13
     5fc:	11 f4       	brne	.+4      	; 0x602 <OutputReportSizes+0x8c>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     602:	4e 0d       	add	r20, r14
     604:	5f 1d       	adc	r21, r15
     606:	5f 93       	push	r21
     608:	4f 93       	push	r20
     60a:	1f 93       	push	r17
     60c:	0f 93       	push	r16
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     60e:	a6 95       	lsr	r26
     610:	a6 95       	lsr	r26
     612:	a6 95       	lsr	r26
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	89 01       	movw	r16, r18
     61c:	07 70       	andi	r16, 0x07	; 7
     61e:	11 27       	eor	r17, r17
     620:	01 2b       	or	r16, r17
     622:	11 f4       	brne	.+4      	; 0x628 <OutputReportSizes+0xb2>
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	50 e0       	ldi	r21, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     628:	a4 0f       	add	r26, r20
     62a:	b5 1f       	adc	r27, r21
     62c:	bf 93       	push	r27
     62e:	af 93       	push	r26
     630:	3f 93       	push	r19
     632:	2f 93       	push	r18
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     634:	66 95       	lsr	r22
     636:	66 95       	lsr	r22
     638:	66 95       	lsr	r22
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	ac 01       	movw	r20, r24
     642:	47 70       	andi	r20, 0x07	; 7
     644:	55 27       	eor	r21, r21
     646:	45 2b       	or	r20, r21
     648:	11 f4       	brne	.+4      	; 0x64e <OutputReportSizes+0xd8>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     64e:	62 0f       	add	r22, r18
     650:	73 1f       	adc	r23, r19
     652:	7f 93       	push	r23
     654:	6f 93       	push	r22
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	80 81       	ld	r24, Z
     65c:	1f 92       	push	r1
     65e:	8f 93       	push	r24
     660:	9f 92       	push	r9
     662:	8f 92       	push	r8
     664:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     668:	b3 94       	inc	r11
     66a:	8d b7       	in	r24, 0x3d	; 61
     66c:	9e b7       	in	r25, 0x3e	; 62
     66e:	40 96       	adiw	r24, 0x10	; 16
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	9e bf       	out	0x3e, r25	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	8d bf       	out	0x3d, r24	; 61
     67a:	9e cf       	rjmp	.-196    	; 0x5b8 <OutputReportSizes+0x42>
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	08 95       	ret

00000696 <OutputCollectionPath>:
 *  for display to the user, from the given starting node to the root node.
 *
 *  \param[in] CollectionPath  Starting HID Collection node to print
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	ec 01       	movw	r28, r24
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
	{
		printf_P(PSTR("      |\r\n"
     6a0:	08 e1       	ldi	r16, 0x18	; 24
     6a2:	12 e0       	ldi	r17, 0x02	; 2
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     6a4:	20 97       	sbiw	r28, 0x00	; 0
     6a6:	d9 f0       	breq	.+54     	; 0x6de <OutputCollectionPath+0x48>
	{
		printf_P(PSTR("      |\r\n"
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	8f 93       	push	r24
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	8f 93       	push	r24
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	8f 93       	push	r24
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	8f 93       	push	r24
     6b8:	88 81       	ld	r24, Y
     6ba:	1f 92       	push	r1
     6bc:	8f 93       	push	r24
     6be:	1f 93       	push	r17
     6c0:	0f 93       	push	r16
     6c2:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
					  "      - Type:  0x%02" PRIX8 "\r\n"
					  "      - Usage: 0x%02" PRIX8 "\r\n"),
					  CurrentNode->Type, CurrentNode->Usage);

		CurrentNode = CurrentNode->Parent;
     6c6:	0d 80       	ldd	r0, Y+5	; 0x05
     6c8:	de 81       	ldd	r29, Y+6	; 0x06
     6ca:	c0 2d       	mov	r28, r0
     6cc:	8d b7       	in	r24, 0x3d	; 61
     6ce:	9e b7       	in	r25, 0x3e	; 62
     6d0:	08 96       	adiw	r24, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	9e bf       	out	0x3e, r25	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	8d bf       	out	0x3d, r24	; 61
     6dc:	e3 cf       	rjmp	.-58     	; 0x6a4 <OutputCollectionPath+0xe>
	}

	printf_P(PSTR("      |\r\n"
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
				  "      END\r\n"));
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <OutputParsedReportItems>:

/** Prints a summary of the device's parsed and stored report items along with their attributes
 *  to the serial port for display to the user.
 */
void OutputParsedReportItems(void)
{
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	2b 97       	sbiw	r28, 0x0b	; 11
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);
     72c:	80 91 38 01 	lds	r24, 0x0138
     730:	1f 92       	push	r1
     732:	8f 93       	push	r24
     734:	82 e3       	ldi	r24, 0x32	; 50
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	80 91 38 01 	lds	r24, 0x0138
     74e:	18 17       	cp	r17, r24
     750:	08 f0       	brcs	.+2      	; 0x754 <OutputParsedReportItems+0x5c>
     752:	91 c0       	rjmp	.+290    	; 0x876 <OutputParsedReportItems+0x17e>
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     754:	21 2f       	mov	r18, r17
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	aa e2       	ldi	r26, 0x2A	; 42
     75a:	a2 9f       	mul	r26, r18
     75c:	c0 01       	movw	r24, r0
     75e:	a3 9f       	mul	r26, r19
     760:	90 0d       	add	r25, r0
     762:	11 24       	eor	r1, r1
     764:	87 5c       	subi	r24, 0xC7	; 199
     766:	9e 4f       	sbci	r25, 0xFE	; 254
     768:	99 87       	std	Y+9, r25	; 0x09
     76a:	88 87       	std	Y+8, r24	; 0x08

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     76c:	fc 01       	movw	r30, r24
     76e:	56 8c       	ldd	r5, Z+30	; 0x1e
     770:	47 8c       	ldd	r4, Z+31	; 0x1f
     772:	30 a0       	ldd	r3, Z+32	; 0x20
     774:	21 a0       	ldd	r2, Z+33	; 0x21
     776:	92 8c       	ldd	r9, Z+26	; 0x1a
     778:	83 8c       	ldd	r8, Z+27	; 0x1b
     77a:	74 8c       	ldd	r7, Z+28	; 0x1c
     77c:	65 8c       	ldd	r6, Z+29	; 0x1d
     77e:	d6 88       	ldd	r13, Z+22	; 0x16
     780:	c7 88       	ldd	r12, Z+23	; 0x17
     782:	b0 8c       	ldd	r11, Z+24	; 0x18
     784:	a1 8c       	ldd	r10, Z+25	; 0x19
     786:	b2 89       	ldd	r27, Z+18	; 0x12
     788:	03 89       	ldd	r16, Z+19	; 0x13
     78a:	f4 88       	ldd	r15, Z+20	; 0x14
     78c:	e5 88       	ldd	r14, Z+21	; 0x15
     78e:	a1 89       	ldd	r26, Z+17	; 0x11
     790:	f5 85       	ldd	r31, Z+13	; 0x0d
     792:	f9 83       	std	Y+1, r31	; 0x01
     794:	fc 01       	movw	r30, r24
     796:	f6 85       	ldd	r31, Z+14	; 0x0e
     798:	fa 83       	std	Y+2, r31	; 0x02
     79a:	fc 01       	movw	r30, r24
     79c:	f7 85       	ldd	r31, Z+15	; 0x0f
     79e:	fb 83       	std	Y+3, r31	; 0x03
     7a0:	fc 01       	movw	r30, r24
     7a2:	f0 89       	ldd	r31, Z+16	; 0x10
     7a4:	fa 87       	std	Y+10, r31	; 0x0a
     7a6:	fc 01       	movw	r30, r24
     7a8:	f3 85       	ldd	r31, Z+11	; 0x0b
     7aa:	fc 83       	std	Y+4, r31	; 0x04
     7ac:	fc 01       	movw	r30, r24
     7ae:	f4 85       	ldd	r31, Z+12	; 0x0c
     7b0:	fd 83       	std	Y+5, r31	; 0x05
     7b2:	fc 01       	movw	r30, r24
     7b4:	71 85       	ldd	r23, Z+9	; 0x09
     7b6:	f2 85       	ldd	r31, Z+10	; 0x0a
     7b8:	fb 87       	std	Y+11, r31	; 0x0b
     7ba:	fc 01       	movw	r30, r24
     7bc:	60 85       	ldd	r22, Z+8	; 0x08
     7be:	40 81       	ld	r20, Z
     7c0:	51 81       	ldd	r21, Z+1	; 0x01
     7c2:	f3 81       	ldd	r31, Z+3	; 0x03
     7c4:	fe 83       	std	Y+6, r31	; 0x06
     7c6:	fc 01       	movw	r30, r24
     7c8:	f4 81       	ldd	r31, Z+4	; 0x04
     7ca:	ff 83       	std	Y+7, r31	; 0x07
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7cc:	fc 01       	movw	r30, r24
     7ce:	82 81       	ldd	r24, Z+2	; 0x02

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7d0:	88 23       	and	r24, r24
     7d2:	29 f0       	breq	.+10     	; 0x7de <OutputParsedReportItems+0xe6>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	31 f4       	brne	.+12     	; 0x7e4 <OutputParsedReportItems+0xec>
     7d8:	83 e3       	ldi	r24, 0x33	; 51
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <OutputParsedReportItems+0xf0>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7de:	80 e3       	ldi	r24, 0x30	; 48
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <OutputParsedReportItems+0xf0>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7e4:	88 e2       	ldi	r24, 0x28	; 40
     7e6:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7e8:	2f 92       	push	r2
     7ea:	3f 92       	push	r3
     7ec:	4f 92       	push	r4
     7ee:	5f 92       	push	r5
     7f0:	6f 92       	push	r6
     7f2:	7f 92       	push	r7
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	bf 93       	push	r27
     808:	1f 92       	push	r1
     80a:	af 93       	push	r26
     80c:	fa 85       	ldd	r31, Y+10	; 0x0a
     80e:	ff 93       	push	r31
     810:	ab 81       	ldd	r26, Y+3	; 0x03
     812:	af 93       	push	r26
     814:	ba 81       	ldd	r27, Y+2	; 0x02
     816:	bf 93       	push	r27
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	ef 93       	push	r30
     81c:	fd 81       	ldd	r31, Y+5	; 0x05
     81e:	ff 93       	push	r31
     820:	ac 81       	ldd	r26, Y+4	; 0x04
     822:	af 93       	push	r26
     824:	bb 85       	ldd	r27, Y+11	; 0x0b
     826:	bf 93       	push	r27
     828:	7f 93       	push	r23
     82a:	1f 92       	push	r1
     82c:	6f 93       	push	r22
     82e:	5f 93       	push	r21
     830:	4f 93       	push	r20
     832:	ef 81       	ldd	r30, Y+7	; 0x07
     834:	ef 93       	push	r30
     836:	fe 81       	ldd	r31, Y+6	; 0x06
     838:	ff 93       	push	r31
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	a8 85       	ldd	r26, Y+8	; 0x08
     840:	b9 85       	ldd	r27, Y+9	; 0x09
     842:	15 96       	adiw	r26, 0x05	; 5
     844:	8c 91       	ld	r24, X
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	3f 93       	push	r19
     84c:	2f 93       	push	r18
     84e:	a0 e5       	ldi	r26, 0x50	; 80
     850:	b2 e0       	ldi	r27, 0x02	; 2
     852:	bf 93       	push	r27
     854:	af 93       	push	r26
     856:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
				 RItem->Attributes.Logical.Minimum,
				 RItem->Attributes.Logical.Maximum,
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	a8 85       	ldd	r26, Y+8	; 0x08
     866:	b9 85       	ldd	r27, Y+9	; 0x09
     868:	16 96       	adiw	r26, 0x06	; 6
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	17 97       	sbiw	r26, 0x07	; 7
     870:	12 df       	rcall	.-476    	; 0x696 <OutputCollectionPath>
     872:	1f 5f       	subi	r17, 0xFF	; 255
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     874:	6a cf       	rjmp	.-300    	; 0x74a <OutputParsedReportItems+0x52>
     876:	2b 96       	adiw	r28, 0x0b	; 11
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
	}
}
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	3f 90       	pop	r3
     8a4:	2f 90       	pop	r2
     8a6:	08 95       	ret

000008a8 <RetrieveDeviceData>:
     8a8:	80 91 1e 05 	lds	r24, 0x051E
/** Task to retrieve the HID device information from an attached device, and output
 *  the relevant data to the serial port for analysis.
 */
void RetrieveDeviceData(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     8ac:	8b 30       	cpi	r24, 0x0B	; 11
     8ae:	49 f4       	brne	.+18     	; 0x8c2 <RetrieveDeviceData+0x1a>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     8b0:	80 ed       	ldi	r24, 0xD0	; 208
     8b2:	5c de       	rcall	.-840    	; 0x56c <LEDs_SetAllLEDs>
     8b4:	60 de       	rcall	.-832    	; 0x576 <OutputReportSizes>

	OutputReportSizes();
     8b6:	20 df       	rcall	.-448    	; 0x6f8 <OutputParsedReportItems>
     8b8:	80 e6       	ldi	r24, 0x60	; 96
	OutputParsedReportItems();
     8ba:	58 de       	rcall	.-848    	; 0x56c <LEDs_SetAllLEDs>
     8bc:	80 e0       	ldi	r24, 0x00	; 0

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8be:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <USB_Host_SetDeviceConfiguration>
     8c2:	08 95       	ret

000008c4 <SetupHardware>:
	USB_Host_SetDeviceConfiguration(0);
     8c4:	84 b7       	in	r24, 0x34	; 52
     8c6:	87 7f       	andi	r24, 0xF7	; 247
     8c8:	84 bf       	out	0x34, r24	; 52
     8ca:	88 e1       	ldi	r24, 0x18	; 24
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	80 93 60 00 	sts	0x0060, r24
     8d4:	10 92 60 00 	sts	0x0060, r1
     8d8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	80 93 61 00 	sts	0x0061, r24
     8e6:	90 93 61 00 	sts	0x0061, r25
     8ea:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     8ec:	83 e3       	ldi	r24, 0x33	; 51
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 cd 00 	sts	0x00CD, r25
     8f4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     8f8:	86 e0       	ldi	r24, 0x06	; 6
     8fa:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     8fe:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     902:	88 e1       	ldi	r24, 0x18	; 24
     904:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     908:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     90a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     90c:	8a b1       	in	r24, 0x0a	; 10
     90e:	80 6f       	ori	r24, 0xF0	; 240
     910:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     912:	8b b1       	in	r24, 0x0b	; 11
     914:	8f 70       	andi	r24, 0x0F	; 15
     916:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     918:	18 d7       	rcall	.+3632   	; 0x174a <USB_Init>
     91a:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0c 94 06 10 	jmp	0x200c	; 0x200c <Serial_CreateStream>

00000922 <main>:
     922:	d0 df       	rcall	.-96     	; 0x8c4 <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     924:	80 e0       	ldi	r24, 0x00	; 0

	puts_P(PSTR(ESC_FG_CYAN "HID Device Report Viewer Running.\r\n" ESC_FG_WHITE));
     926:	95 e0       	ldi	r25, 0x05	; 5
     928:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
     92c:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     92e:	1e de       	rcall	.-964    	; 0x56c <LEDs_SetAllLEDs>
     930:	78 94       	sei
     932:	ba df       	rcall	.-140    	; 0x8a8 <RetrieveDeviceData>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     934:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		RetrieveDeviceData();
     938:	fc cf       	rjmp	.-8      	; 0x932 <main+0x10>

0000093a <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Device_HID_Interface);
		USB_USBTask();
     93a:	80 ef       	ldi	r24, 0xF0	; 240
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     942:	80 ea       	ldi	r24, 0xA0	; 160
     944:	13 ce       	rjmp	.-986    	; 0x56c <LEDs_SetAllLEDs>

00000946 <EVENT_USB_Host_DeviceUnattached>:
     946:	89 ed       	ldi	r24, 0xD9	; 217
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     94e:	80 e1       	ldi	r24, 0x10	; 16
     950:	0d ce       	rjmp	.-998    	; 0x56c <LEDs_SetAllLEDs>

00000952 <EVENT_USB_Host_DeviceEnumerationComplete>:
     952:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	c2 50       	subi	r28, 0x02	; 2
     95c:	d2 40       	sbci	r29, 0x02	; 2
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     968:	80 ea       	ldi	r24, 0xA0	; 160
     96a:	00 de       	rcall	.-1024   	; 0x56c <LEDs_SetAllLEDs>
     96c:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     96e:	32 e0       	ldi	r19, 0x02	; 2
     970:	ae 01       	movw	r20, r28
     972:	4f 5f       	subi	r20, 0xFF	; 255
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7d 4f       	sbci	r23, 0xFD	; 253
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	af d7       	rcall	.+3934   	; 0x18de <USB_Host_GetDeviceConfigDescriptor>
     980:	88 23       	and	r24, r24
     982:	19 f0       	breq	.+6      	; 0x98a <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     984:	8c ea       	ldi	r24, 0xAC	; 172
     986:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     988:	19 c0       	rjmp	.+50     	; 0x9bc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     98a:	cf 5f       	subi	r28, 0xFF	; 255
     98c:	dd 4f       	sbci	r29, 0xFD	; 253
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Device_HID_Interface,
     98e:	68 81       	ld	r22, Y
     990:	79 81       	ldd	r23, Y+1	; 0x01
     992:	c1 50       	subi	r28, 0x01	; 1
     994:	d2 40       	sbci	r29, 0x02	; 2
     996:	ae 01       	movw	r20, r28
     998:	4f 5f       	subi	r20, 0xFF	; 255
     99a:	5f 4f       	sbci	r21, 0xFF	; 255
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <HID_Host_ConfigurePipes>
     9a4:	88 23       	and	r24, r24
     9a6:	19 f0       	breq	.+6      	; 0x9ae <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     9a8:	82 e8       	ldi	r24, 0x82	; 130
     9aa:	91 e0       	ldi	r25, 0x01	; 1
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid HID Device.\r\n"));
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     9b4:	88 23       	and	r24, r24
     9b6:	31 f0       	breq	.+12     	; 0x9c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
     9b8:	8c e5       	ldi	r24, 0x5C	; 92
     9ba:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     9bc:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
     9c0:	80 e9       	ldi	r24, 0x90	; 144
     9c2:	15 c0       	rjmp	.+42     	; 0x9ee <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	91 e0       	ldi	r25, 0x01	; 1
		return;
	}

	if (HID_Host_SetReportProtocol(&Device_HID_Interface) != 0)
     9c8:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <HID_Host_SetReportProtocol>
     9cc:	88 23       	and	r24, r24
     9ce:	51 f0       	breq	.+20     	; 0x9e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x92>
     9d0:	86 e3       	ldi	r24, 0x36	; 54
     9d2:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR("Error Setting Report Protocol Mode.\r\n"));
     9d4:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
     9d8:	80 e9       	ldi	r24, 0x90	; 144
     9da:	c8 dd       	rcall	.-1136   	; 0x56c <LEDs_SetAllLEDs>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     9e4:	8d e1       	ldi	r24, 0x1D	; 29
     9e6:	91 e0       	ldi	r25, 0x01	; 1
		return;
     9e8:	0e 94 47 10 	call	0x208e	; 0x208e <puts_P>
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     9ec:	80 e6       	ldi	r24, 0x60	; 96
     9ee:	be dd       	rcall	.-1156   	; 0x56c <LEDs_SetAllLEDs>
     9f0:	ce 5f       	subi	r28, 0xFE	; 254
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     9f2:	dd 4f       	sbci	r29, 0xFD	; 253
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
}
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <EVENT_USB_Host_HostError>:
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     a0c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	34 d6       	rcall	.+3176   	; 0x167a <USB_Disable>
     a12:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	8f 93       	push	r24
     a18:	8e ee       	ldi	r24, 0xEE	; 238
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
     a24:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a26:	a2 dd       	rcall	.-1212   	; 0x56c <LEDs_SetAllLEDs>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	ff cf       	rjmp	.-2      	; 0xa30 <EVENT_USB_Host_HostError+0x2c>

00000a32 <EVENT_USB_Host_DeviceEnumerationFailed>:
     a32:	90 91 1e 05 	lds	r25, 0x051E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     a36:	1f 92       	push	r1
     a38:	9f 93       	push	r25
     a3a:	1f 92       	push	r1
     a3c:	6f 93       	push	r22
     a3e:	1f 92       	push	r1
     a40:	8f 93       	push	r24
     a42:	88 e9       	ldi	r24, 0x98	; 152
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 24 10 	call	0x2048	; 0x2048 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a4e:	8d b7       	in	r24, 0x3d	; 61
     a50:	9e b7       	in	r25, 0x3e	; 62
     a52:	08 96       	adiw	r24, 0x08	; 8
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	9e bf       	out	0x3e, r25	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	8d bf       	out	0x3d, r24	; 61
     a5e:	80 e9       	ldi	r24, 0x90	; 144
     a60:	85 cd       	rjmp	.-1270   	; 0x56c <LEDs_SetAllLEDs>

00000a62 <CALLBACK_HIDParser_FilterHIDReportItem>:
     a62:	81 e0       	ldi	r24, 0x01	; 1
 *  \return Boolean \c true if the item should be stored into the HID report structure, \c false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
	return true;
}
     a64:	08 95       	ret

00000a66 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     a66:	2f 92       	push	r2
     a68:	3f 92       	push	r3
     a6a:	4f 92       	push	r4
     a6c:	5f 92       	push	r5
     a6e:	6f 92       	push	r6
     a70:	7f 92       	push	r7
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	cd 58       	subi	r28, 0x8D	; 141
     a90:	d1 09       	sbc	r29, r1
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     a9e:	9a 01       	movw	r18, r20
     aa0:	20 57       	subi	r18, 0x70	; 112
     aa2:	3c 4f       	sbci	r19, 0xFC	; 252
     aa4:	e8 96       	adiw	r28, 0x38	; 56
     aa6:	3f af       	std	Y+63, r19	; 0x3f
     aa8:	2e af       	std	Y+62, r18	; 0x3e
     aaa:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     aac:	89 ed       	ldi	r24, 0xD9	; 217
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	da 01       	movw	r26, r20
     ab2:	fc 01       	movw	r30, r24
     ab4:	1d 92       	st	X+, r1
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     aba:	fe 01       	movw	r30, r28
     abc:	31 96       	adiw	r30, 0x01	; 1
     abe:	8c e1       	ldi	r24, 0x1C	; 28
     ac0:	df 01       	movw	r26, r30
     ac2:	1d 92       	st	X+, r1
     ac4:	8a 95       	dec	r24
     ac6:	e9 f7       	brne	.-6      	; 0xac2 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	d9 01       	movw	r26, r18
     acc:	1d 92       	st	X+, r1
     ace:	8a 95       	dec	r24
     ad0:	e9 f7       	brne	.-6      	; 0xacc <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     ad2:	9a 01       	movw	r18, r20
     ad4:	21 57       	subi	r18, 0x71	; 113
     ad6:	3c 4f       	sbci	r19, 0xFC	; 252
     ad8:	eb 96       	adiw	r28, 0x3b	; 59
     ada:	3f af       	std	Y+63, r19	; 0x3f
     adc:	2e af       	std	Y+62, r18	; 0x3e
     ade:	eb 97       	sbiw	r28, 0x3b	; 59
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	d9 01       	movw	r26, r18
     ae4:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     ae6:	41 2c       	mov	r4, r1
     ae8:	51 2c       	mov	r5, r1
     aea:	32 01       	movw	r6, r4
     aec:	81 2c       	mov	r8, r1
     aee:	91 2c       	mov	r9, r1
     af0:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     af2:	e4 96       	adiw	r28, 0x34	; 52
     af4:	1f ae       	std	Y+63, r1	; 0x3f
     af6:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     af8:	e6 96       	adiw	r28, 0x36	; 54
     afa:	1f ae       	std	Y+63, r1	; 0x3f
     afc:	1e ae       	std	Y+62, r1	; 0x3e
     afe:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     b00:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b02:	9a 01       	movw	r18, r20
     b04:	2a 52       	subi	r18, 0x2A	; 42
     b06:	3c 4f       	sbci	r19, 0xFC	; 252
     b08:	ed 96       	adiw	r28, 0x3d	; 61
     b0a:	3f af       	std	Y+63, r19	; 0x3f
     b0c:	2e af       	std	Y+62, r18	; 0x3e
     b0e:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     b10:	9a 01       	movw	r18, r20
     b12:	28 57       	subi	r18, 0x78	; 120
     b14:	3c 4f       	sbci	r19, 0xFC	; 252
     b16:	cd 57       	subi	r28, 0x7D	; 125
     b18:	df 4f       	sbci	r29, 0xFF	; 255
     b1a:	39 83       	std	Y+1, r19	; 0x01
     b1c:	28 83       	st	Y, r18
     b1e:	c3 58       	subi	r28, 0x83	; 131
     b20:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     b22:	9a 01       	movw	r18, r20
     b24:	28 52       	subi	r18, 0x28	; 40
     b26:	3c 4f       	sbci	r19, 0xFC	; 252
     b28:	ef 96       	adiw	r28, 0x3f	; 63
     b2a:	3f af       	std	Y+63, r19	; 0x3f
     b2c:	2e af       	std	Y+62, r18	; 0x3e
     b2e:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     b30:	cb 57       	subi	r28, 0x7B	; 123
     b32:	df 4f       	sbci	r29, 0xFF	; 255
     b34:	b9 83       	std	Y+1, r27	; 0x01
     b36:	a8 83       	st	Y, r26
     b38:	c5 58       	subi	r28, 0x85	; 133
     b3a:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	09 f4       	brne	.+2      	; 0xb44 <USB_ProcessHIDReport+0xde>
     b42:	e9 c2       	rjmp	.+1490   	; 0x1116 <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     b44:	d1 01       	movw	r26, r2
     b46:	bc 91       	ld	r27, X
     b48:	e9 96       	adiw	r28, 0x39	; 57
     b4a:	bf af       	std	Y+63, r27	; 0x3f
     b4c:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     b4e:	8b 2f       	mov	r24, r27
     b50:	83 70       	andi	r24, 0x03	; 3
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	81 f1       	breq	.+96     	; 0xbb6 <USB_ProcessHIDReport+0x150>
     b56:	83 30       	cpi	r24, 0x03	; 3
     b58:	59 f0       	breq	.+22     	; 0xb70 <USB_ProcessHIDReport+0x10a>
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	d9 f1       	breq	.+118    	; 0xbd4 <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     b5e:	ef ef       	ldi	r30, 0xFF	; 255
     b60:	2e 1a       	sub	r2, r30
     b62:	3e 0a       	sbc	r3, r30
		ReportSize--;
     b64:	61 50       	subi	r22, 0x01	; 1
     b66:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     b68:	c1 2c       	mov	r12, r1
     b6a:	d1 2c       	mov	r13, r1
     b6c:	76 01       	movw	r14, r12
     b6e:	3d c0       	rjmp	.+122    	; 0xbea <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b70:	d1 01       	movw	r26, r2
     b72:	14 96       	adiw	r26, 0x04	; 4
     b74:	8c 91       	ld	r24, X
     b76:	14 97       	sbiw	r26, 0x04	; 4
     b78:	13 96       	adiw	r26, 0x03	; 3
     b7a:	cc 90       	ld	r12, X
     b7c:	13 97       	sbiw	r26, 0x03	; 3
     b7e:	d1 2c       	mov	r13, r1
     b80:	e1 2c       	mov	r14, r1
     b82:	f1 2c       	mov	r15, r1
     b84:	76 01       	movw	r14, r12
     b86:	dd 24       	eor	r13, r13
     b88:	cc 24       	eor	r12, r12
     b8a:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     b8c:	11 96       	adiw	r26, 0x01	; 1
     b8e:	8c 91       	ld	r24, X
     b90:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b92:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     b94:	12 96       	adiw	r26, 0x02	; 2
     b96:	8c 91       	ld	r24, X
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	98 2f       	mov	r25, r24
     b9c:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	c8 2a       	or	r12, r24
     ba4:	d9 2a       	or	r13, r25
     ba6:	ea 2a       	or	r14, r26
     ba8:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     baa:	65 50       	subi	r22, 0x05	; 5
     bac:	71 09       	sbc	r23, r1
				ReportData     += 4;
     bae:	b5 e0       	ldi	r27, 0x05	; 5
     bb0:	2b 0e       	add	r2, r27
     bb2:	31 1c       	adc	r3, r1
				break;
     bb4:	1a c0       	rjmp	.+52     	; 0xbea <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     bb6:	f1 01       	movw	r30, r2
     bb8:	c2 80       	ldd	r12, Z+2	; 0x02
     bba:	d1 2c       	mov	r13, r1
     bbc:	dc 2c       	mov	r13, r12
     bbe:	cc 24       	eor	r12, r12
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	c8 2a       	or	r12, r24
     bc4:	e1 2c       	mov	r14, r1
     bc6:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     bc8:	63 50       	subi	r22, 0x03	; 3
     bca:	71 09       	sbc	r23, r1
				ReportData     += 2;
     bcc:	f3 e0       	ldi	r31, 0x03	; 3
     bce:	2f 0e       	add	r2, r31
     bd0:	31 1c       	adc	r3, r1
				break;
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     bd4:	d1 01       	movw	r26, r2
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	cc 90       	ld	r12, X
     bda:	d1 2c       	mov	r13, r1
     bdc:	e1 2c       	mov	r14, r1
     bde:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     be0:	62 50       	subi	r22, 0x02	; 2
     be2:	71 09       	sbc	r23, r1
				ReportData     += 1;
     be4:	b2 e0       	ldi	r27, 0x02	; 2
     be6:	2b 0e       	add	r2, r27
     be8:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     bea:	e9 96       	adiw	r28, 0x39	; 57
     bec:	2f ad       	ldd	r18, Y+63	; 0x3f
     bee:	e9 97       	sbiw	r28, 0x39	; 57
     bf0:	2c 7f       	andi	r18, 0xFC	; 252
     bf2:	24 36       	cpi	r18, 0x64	; 100
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_ProcessHIDReport+0x192>
     bf6:	96 c0       	rjmp	.+300    	; 0xd24 <USB_ProcessHIDReport+0x2be>
     bf8:	68 f5       	brcc	.+90     	; 0xc54 <USB_ProcessHIDReport+0x1ee>
     bfa:	24 32       	cpi	r18, 0x24	; 36
     bfc:	09 f4       	brne	.+2      	; 0xc00 <USB_ProcessHIDReport+0x19a>
     bfe:	7c c0       	rjmp	.+248    	; 0xcf8 <USB_ProcessHIDReport+0x292>
     c00:	b0 f4       	brcc	.+44     	; 0xc2e <USB_ProcessHIDReport+0x1c8>
     c02:	28 30       	cpi	r18, 0x08	; 8
     c04:	09 f4       	brne	.+2      	; 0xc08 <USB_ProcessHIDReport+0x1a2>
     c06:	f4 c0       	rjmp	.+488    	; 0xdf0 <USB_ProcessHIDReport+0x38a>
     c08:	48 f4       	brcc	.+18     	; 0xc1c <USB_ProcessHIDReport+0x1b6>
     c0a:	24 30       	cpi	r18, 0x04	; 4
     c0c:	09 f0       	breq	.+2      	; 0xc10 <USB_ProcessHIDReport+0x1aa>
     c0e:	73 c2       	rjmp	.+1254   	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     c10:	d8 01       	movw	r26, r16
     c12:	12 96       	adiw	r26, 0x02	; 2
     c14:	dc 92       	st	X, r13
     c16:	ce 92       	st	-X, r12
     c18:	11 97       	sbiw	r26, 0x01	; 1
				break;
     c1a:	6d c2       	rjmp	.+1242   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c1c:	24 31       	cpi	r18, 0x14	; 20
     c1e:	09 f4       	brne	.+2      	; 0xc22 <USB_ProcessHIDReport+0x1bc>
     c20:	65 c0       	rjmp	.+202    	; 0xcec <USB_ProcessHIDReport+0x286>
     c22:	28 31       	cpi	r18, 0x18	; 24
     c24:	09 f0       	breq	.+2      	; 0xc28 <USB_ProcessHIDReport+0x1c2>
     c26:	67 c2       	rjmp	.+1230   	; 0x10f6 <USB_ProcessHIDReport+0x690>
     c28:	46 01       	movw	r8, r12
     c2a:	57 01       	movw	r10, r14
     c2c:	64 c2       	rjmp	.+1224   	; 0x10f6 <USB_ProcessHIDReport+0x690>
     c2e:	24 33       	cpi	r18, 0x34	; 52
     c30:	09 f4       	brne	.+2      	; 0xc34 <USB_ProcessHIDReport+0x1ce>
     c32:	6a c0       	rjmp	.+212    	; 0xd08 <USB_ProcessHIDReport+0x2a2>
     c34:	30 f4       	brcc	.+12     	; 0xc42 <USB_ProcessHIDReport+0x1dc>
     c36:	28 32       	cpi	r18, 0x28	; 40
     c38:	09 f0       	breq	.+2      	; 0xc3c <USB_ProcessHIDReport+0x1d6>
     c3a:	5d c2       	rjmp	.+1210   	; 0x10f6 <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     c3c:	26 01       	movw	r4, r12
     c3e:	37 01       	movw	r6, r14
     c40:	5a c2       	rjmp	.+1204   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c42:	24 34       	cpi	r18, 0x44	; 68
     c44:	09 f4       	brne	.+2      	; 0xc48 <USB_ProcessHIDReport+0x1e2>
     c46:	66 c0       	rjmp	.+204    	; 0xd14 <USB_ProcessHIDReport+0x2ae>
     c48:	24 35       	cpi	r18, 0x54	; 84
     c4a:	09 f0       	breq	.+2      	; 0xc4e <USB_ProcessHIDReport+0x1e8>
     c4c:	54 c2       	rjmp	.+1192   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     c4e:	f8 01       	movw	r30, r16
     c50:	c1 86       	std	Z+9, r12	; 0x09
				break;
     c52:	51 c2       	rjmp	.+1186   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c54:	24 39       	cpi	r18, 0x94	; 148
     c56:	09 f4       	brne	.+2      	; 0xc5a <USB_ProcessHIDReport+0x1f4>
     c58:	6d c0       	rjmp	.+218    	; 0xd34 <USB_ProcessHIDReport+0x2ce>
     c5a:	78 f4       	brcc	.+30     	; 0xc7a <USB_ProcessHIDReport+0x214>
     c5c:	20 38       	cpi	r18, 0x80	; 128
     c5e:	e1 f0       	breq	.+56     	; 0xc98 <USB_ProcessHIDReport+0x232>
     c60:	30 f4       	brcc	.+12     	; 0xc6e <USB_ProcessHIDReport+0x208>
     c62:	24 37       	cpi	r18, 0x74	; 116
     c64:	09 f0       	breq	.+2      	; 0xc68 <USB_ProcessHIDReport+0x202>
     c66:	47 c2       	rjmp	.+1166   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     c68:	f8 01       	movw	r30, r16
     c6a:	c0 82       	st	Z, r12
				break;
     c6c:	44 c2       	rjmp	.+1160   	; 0x10f6 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c6e:	24 38       	cpi	r18, 0x84	; 132
     c70:	09 f4       	brne	.+2      	; 0xc74 <USB_ProcessHIDReport+0x20e>
     c72:	64 c0       	rjmp	.+200    	; 0xd3c <USB_ProcessHIDReport+0x2d6>
     c74:	20 39       	cpi	r18, 0x90	; 144
     c76:	81 f0       	breq	.+32     	; 0xc98 <USB_ProcessHIDReport+0x232>
     c78:	3e c2       	rjmp	.+1148   	; 0x10f6 <USB_ProcessHIDReport+0x690>
     c7a:	20 3b       	cpi	r18, 0xB0	; 176
     c7c:	69 f0       	breq	.+26     	; 0xc98 <USB_ProcessHIDReport+0x232>
     c7e:	30 f4       	brcc	.+12     	; 0xc8c <USB_ProcessHIDReport+0x226>
     c80:	20 3a       	cpi	r18, 0xA0	; 160
     c82:	09 f4       	brne	.+2      	; 0xc86 <USB_ProcessHIDReport+0x220>
     c84:	c9 c0       	rjmp	.+402    	; 0xe18 <USB_ProcessHIDReport+0x3b2>
     c86:	24 3a       	cpi	r18, 0xA4	; 164
     c88:	b9 f0       	breq	.+46     	; 0xcb8 <USB_ProcessHIDReport+0x252>
     c8a:	35 c2       	rjmp	.+1130   	; 0x10f6 <USB_ProcessHIDReport+0x690>
     c8c:	24 3b       	cpi	r18, 0xB4	; 180
     c8e:	29 f1       	breq	.+74     	; 0xcda <USB_ProcessHIDReport+0x274>
     c90:	20 3c       	cpi	r18, 0xC0	; 192
     c92:	09 f4       	brne	.+2      	; 0xc96 <USB_ProcessHIDReport+0x230>
     c94:	2d c1       	rjmp	.+602    	; 0xef0 <USB_ProcessHIDReport+0x48a>
     c96:	2f c2       	rjmp	.+1118   	; 0x10f6 <USB_ProcessHIDReport+0x690>
     c98:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c9a:	d7 01       	movw	r26, r14
     c9c:	c6 01       	movw	r24, r12
     c9e:	81 70       	andi	r24, 0x01	; 1
     ca0:	99 27       	eor	r25, r25
     ca2:	aa 27       	eor	r26, r26
     ca4:	bb 27       	eor	r27, r27
     ca6:	c1 58       	subi	r28, 0x81	; 129
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	88 83       	st	Y, r24
     cac:	99 83       	std	Y+1, r25	; 0x01
     cae:	aa 83       	std	Y+2, r26	; 0x02
     cb0:	bb 83       	std	Y+3, r27	; 0x03
     cb2:	cf 57       	subi	r28, 0x7F	; 127
     cb4:	d0 40       	sbci	r29, 0x00	; 0
     cb6:	4a c1       	rjmp	.+660    	; 0xf4c <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     cb8:	ce 01       	movw	r24, r28
     cba:	4d 96       	adiw	r24, 0x1d	; 29
     cbc:	08 17       	cp	r16, r24
     cbe:	19 07       	cpc	r17, r25
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <USB_ProcessHIDReport+0x25e>
     cc2:	2f c2       	rjmp	.+1118   	; 0x1122 <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     cc4:	c8 01       	movw	r24, r16
     cc6:	4c 96       	adiw	r24, 0x1c	; 28
     cc8:	2a e2       	ldi	r18, 0x2A	; 42
     cca:	f8 01       	movw	r30, r16
     ccc:	dc 01       	movw	r26, r24
     cce:	01 90       	ld	r0, Z+
     cd0:	0d 92       	st	X+, r0
     cd2:	2a 95       	dec	r18
     cd4:	e1 f7       	brne	.-8      	; 0xcce <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     cd6:	8c 01       	movw	r16, r24
				break;
     cd8:	0e c2       	rjmp	.+1052   	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	08 17       	cp	r16, r24
     ce0:	19 07       	cpc	r17, r25
     ce2:	09 f4       	brne	.+2      	; 0xce6 <USB_ProcessHIDReport+0x280>
     ce4:	20 c2       	rjmp	.+1088   	; 0x1126 <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     ce6:	0c 51       	subi	r16, 0x1C	; 28
     ce8:	11 09       	sbc	r17, r1
				break;
     cea:	05 c2       	rjmp	.+1034   	; 0x10f6 <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     cec:	f8 01       	movw	r30, r16
     cee:	c2 86       	std	Z+10, r12	; 0x0a
     cf0:	d3 86       	std	Z+11, r13	; 0x0b
     cf2:	e4 86       	std	Z+12, r14	; 0x0c
     cf4:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     cf6:	ff c1       	rjmp	.+1022   	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     cf8:	d8 01       	movw	r26, r16
     cfa:	1e 96       	adiw	r26, 0x0e	; 14
     cfc:	cd 92       	st	X+, r12
     cfe:	dd 92       	st	X+, r13
     d00:	ed 92       	st	X+, r14
     d02:	fc 92       	st	X, r15
     d04:	51 97       	sbiw	r26, 0x11	; 17
				break;
     d06:	f7 c1       	rjmp	.+1006   	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     d08:	f8 01       	movw	r30, r16
     d0a:	c2 8a       	std	Z+18, r12	; 0x12
     d0c:	d3 8a       	std	Z+19, r13	; 0x13
     d0e:	e4 8a       	std	Z+20, r14	; 0x14
     d10:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     d12:	f1 c1       	rjmp	.+994    	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     d14:	d8 01       	movw	r26, r16
     d16:	56 96       	adiw	r26, 0x16	; 22
     d18:	cd 92       	st	X+, r12
     d1a:	dd 92       	st	X+, r13
     d1c:	ed 92       	st	X+, r14
     d1e:	fc 92       	st	X, r15
     d20:	59 97       	sbiw	r26, 0x19	; 25
				break;
     d22:	e9 c1       	rjmp	.+978    	; 0x10f6 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     d24:	d8 01       	movw	r26, r16
     d26:	15 96       	adiw	r26, 0x05	; 5
     d28:	cd 92       	st	X+, r12
     d2a:	dd 92       	st	X+, r13
     d2c:	ed 92       	st	X+, r14
     d2e:	fc 92       	st	X, r15
     d30:	18 97       	sbiw	r26, 0x08	; 8
				break;
     d32:	e1 c1       	rjmp	.+962    	; 0x10f6 <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     d34:	d8 01       	movw	r26, r16
     d36:	5a 96       	adiw	r26, 0x1a	; 26
     d38:	cc 92       	st	X, r12
				break;
     d3a:	dd c1       	rjmp	.+954    	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     d3c:	ac 2d       	mov	r26, r12
     d3e:	f8 01       	movw	r30, r16
     d40:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     d42:	ef 96       	adiw	r28, 0x3f	; 63
     d44:	ee ad       	ldd	r30, Y+62	; 0x3e
     d46:	ff ad       	ldd	r31, Y+63	; 0x3f
     d48:	ef 97       	sbiw	r28, 0x3f	; 63
     d4a:	80 81       	ld	r24, Z
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <USB_ProcessHIDReport+0x2ec>
     d50:	40 c0       	rjmp	.+128    	; 0xdd2 <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     d52:	cb 57       	subi	r28, 0x7B	; 123
     d54:	df 4f       	sbci	r29, 0xFF	; 255
     d56:	e8 81       	ld	r30, Y
     d58:	f9 81       	ldd	r31, Y+1	; 0x01
     d5a:	c5 58       	subi	r28, 0x85	; 133
     d5c:	d0 40       	sbci	r29, 0x00	; 0
     d5e:	b0 81       	ld	r27, Z
     d60:	9a 01       	movw	r18, r20
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8b 17       	cp	r24, r27
     d68:	d0 f4       	brcc	.+52     	; 0xd9e <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     d6a:	7c 01       	movw	r14, r24
     d6c:	f9 01       	movw	r30, r18
     d6e:	e0 57       	subi	r30, 0x70	; 112
     d70:	fc 4f       	sbci	r31, 0xFC	; 252
     d72:	e0 81       	ld	r30, Z
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	29 5f       	subi	r18, 0xF9	; 249
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	ea 13       	cpse	r30, r26
     d7c:	f4 cf       	rjmp	.-24     	; 0xd66 <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     d7e:	27 e0       	ldi	r18, 0x07	; 7
     d80:	2e 9d       	mul	r18, r14
     d82:	c0 01       	movw	r24, r0
     d84:	2f 9d       	mul	r18, r15
     d86:	90 0d       	add	r25, r0
     d88:	11 24       	eor	r1, r1
     d8a:	9c 01       	movw	r18, r24
     d8c:	20 57       	subi	r18, 0x70	; 112
     d8e:	3c 4f       	sbci	r19, 0xFC	; 252
     d90:	24 0f       	add	r18, r20
     d92:	35 1f       	adc	r19, r21
     d94:	e8 96       	adiw	r28, 0x38	; 56
     d96:	3f af       	std	Y+63, r19	; 0x3f
     d98:	2e af       	std	Y+62, r18	; 0x3e
     d9a:	e8 97       	sbiw	r28, 0x38	; 56
     d9c:	1a c0       	rjmp	.+52     	; 0xdd2 <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     d9e:	ba 30       	cpi	r27, 0x0A	; 10
     da0:	09 f4       	brne	.+2      	; 0xda4 <USB_ProcessHIDReport+0x33e>
     da2:	cb c1       	rjmp	.+918    	; 0x113a <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8b 0f       	add	r24, r27
     da8:	eb 96       	adiw	r28, 0x3b	; 59
     daa:	ee ad       	ldd	r30, Y+62	; 0x3e
     dac:	ff ad       	ldd	r31, Y+63	; 0x3f
     dae:	eb 97       	sbiw	r28, 0x3b	; 59
     db0:	80 83       	st	Z, r24
     db2:	87 e0       	ldi	r24, 0x07	; 7
     db4:	9a 01       	movw	r18, r20
     db6:	8b 9f       	mul	r24, r27
     db8:	20 0d       	add	r18, r0
     dba:	31 1d       	adc	r19, r1
     dbc:	11 24       	eor	r1, r1
     dbe:	20 57       	subi	r18, 0x70	; 112
     dc0:	3c 4f       	sbci	r19, 0xFC	; 252
     dc2:	e8 96       	adiw	r28, 0x38	; 56
     dc4:	3f af       	std	Y+63, r19	; 0x3f
     dc6:	2e af       	std	Y+62, r18	; 0x3e
     dc8:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     dca:	d9 01       	movw	r26, r18
     dcc:	1d 92       	st	X+, r1
     dce:	8a 95       	dec	r24
     dd0:	e9 f7       	brne	.-6      	; 0xdcc <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	ef 96       	adiw	r28, 0x3f	; 63
     dd6:	ee ad       	ldd	r30, Y+62	; 0x3e
     dd8:	ff ad       	ldd	r31, Y+63	; 0x3f
     dda:	ef 97       	sbiw	r28, 0x3f	; 63
     ddc:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     dde:	d8 01       	movw	r26, r16
     de0:	5b 96       	adiw	r26, 0x1b	; 27
     de2:	8c 91       	ld	r24, X
     de4:	e8 96       	adiw	r28, 0x38	; 56
     de6:	ee ad       	ldd	r30, Y+62	; 0x3e
     de8:	ff ad       	ldd	r31, Y+63	; 0x3f
     dea:	e8 97       	sbiw	r28, 0x38	; 56
     dec:	80 83       	st	Z, r24
				break;
     dee:	83 c1       	rjmp	.+774    	; 0x10f6 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     df0:	e4 96       	adiw	r28, 0x34	; 52
     df2:	2f ad       	ldd	r18, Y+63	; 0x3f
     df4:	e4 97       	sbiw	r28, 0x34	; 52
     df6:	28 30       	cpi	r18, 0x08	; 8
     df8:	09 f4       	brne	.+2      	; 0xdfc <USB_ProcessHIDReport+0x396>
     dfa:	97 c1       	rjmp	.+814    	; 0x112a <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     dfc:	fe 01       	movw	r30, r28
     dfe:	ed 59       	subi	r30, 0x9D	; 157
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	e2 0f       	add	r30, r18
     e04:	f1 1d       	adc	r31, r1
     e06:	e2 0f       	add	r30, r18
     e08:	f1 1d       	adc	r31, r1
     e0a:	d1 82       	std	Z+1, r13	; 0x01
     e0c:	c0 82       	st	Z, r12
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	e4 96       	adiw	r28, 0x34	; 52
     e12:	2f af       	std	Y+63, r18	; 0x3f
     e14:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     e16:	6f c1       	rjmp	.+734    	; 0x10f6 <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     e18:	e6 96       	adiw	r28, 0x36	; 54
     e1a:	2e ad       	ldd	r18, Y+62	; 0x3e
     e1c:	3f ad       	ldd	r19, Y+63	; 0x3f
     e1e:	e6 97       	sbiw	r28, 0x36	; 54
     e20:	23 2b       	or	r18, r19
     e22:	41 f4       	brne	.+16     	; 0xe34 <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     e24:	9a 01       	movw	r18, r20
     e26:	27 5b       	subi	r18, 0xB7	; 183
     e28:	3c 4f       	sbci	r19, 0xFC	; 252
     e2a:	e6 96       	adiw	r28, 0x36	; 54
     e2c:	3f af       	std	Y+63, r19	; 0x3f
     e2e:	2e af       	std	Y+62, r18	; 0x3e
     e30:	e6 97       	sbiw	r28, 0x36	; 54
     e32:	1d c0       	rjmp	.+58     	; 0xe6e <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     e34:	fa 01       	movw	r30, r20
     e36:	e0 5b       	subi	r30, 0xB0	; 176
     e38:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     e3a:	85 81       	ldd	r24, Z+5	; 0x05
     e3c:	96 81       	ldd	r25, Z+6	; 0x06
     e3e:	89 2b       	or	r24, r25
     e40:	61 f0       	breq	.+24     	; 0xe5a <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     e42:	cd 57       	subi	r28, 0x7D	; 125
     e44:	df 4f       	sbci	r29, 0xFF	; 255
     e46:	28 81       	ld	r18, Y
     e48:	39 81       	ldd	r19, Y+1	; 0x01
     e4a:	c3 58       	subi	r28, 0x83	; 131
     e4c:	d0 40       	sbci	r29, 0x00	; 0
     e4e:	e2 17       	cp	r30, r18
     e50:	f3 07       	cpc	r31, r19
     e52:	09 f4       	brne	.+2      	; 0xe56 <USB_ProcessHIDReport+0x3f0>
     e54:	6c c1       	rjmp	.+728    	; 0x112e <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     e56:	37 96       	adiw	r30, 0x07	; 7
     e58:	f0 cf       	rjmp	.-32     	; 0xe3a <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     e5a:	e6 96       	adiw	r28, 0x36	; 54
     e5c:	2e ad       	ldd	r18, Y+62	; 0x3e
     e5e:	3f ad       	ldd	r19, Y+63	; 0x3f
     e60:	e6 97       	sbiw	r28, 0x36	; 54
     e62:	36 83       	std	Z+6, r19	; 0x06
     e64:	25 83       	std	Z+5, r18	; 0x05
     e66:	e6 96       	adiw	r28, 0x36	; 54
     e68:	ff af       	std	Y+63, r31	; 0x3f
     e6a:	ee af       	std	Y+62, r30	; 0x3e
     e6c:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     e6e:	e6 96       	adiw	r28, 0x36	; 54
     e70:	ae ad       	ldd	r26, Y+62	; 0x3e
     e72:	bf ad       	ldd	r27, Y+63	; 0x3f
     e74:	e6 97       	sbiw	r28, 0x36	; 54
     e76:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     e78:	f8 01       	movw	r30, r16
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	92 81       	ldd	r25, Z+2	; 0x02
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
     e84:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     e86:	e4 96       	adiw	r28, 0x34	; 52
     e88:	2f ad       	ldd	r18, Y+63	; 0x3f
     e8a:	e4 97       	sbiw	r28, 0x34	; 52
     e8c:	22 23       	and	r18, r18
     e8e:	e1 f0       	breq	.+56     	; 0xec8 <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     e90:	a5 96       	adiw	r28, 0x25	; 37
     e92:	8e ad       	ldd	r24, Y+62	; 0x3e
     e94:	9f ad       	ldd	r25, Y+63	; 0x3f
     e96:	a5 97       	sbiw	r28, 0x25	; 37
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	9c 93       	st	X, r25
     e9c:	8e 93       	st	-X, r24
     e9e:	13 97       	sbiw	r26, 0x03	; 3
     ea0:	fe 01       	movw	r30, r28
     ea2:	ed 59       	subi	r30, 0x9D	; 157
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	e4 96       	adiw	r28, 0x34	; 52
     eaa:	3f ad       	ldd	r19, Y+63	; 0x3f
     eac:	e4 97       	sbiw	r28, 0x34	; 52
     eae:	23 17       	cp	r18, r19
     eb0:	31 f0       	breq	.+12     	; 0xebe <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	81 93       	st	Z+, r24
     eb8:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	f5 cf       	rjmp	.-22     	; 0xea8 <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     ebe:	31 50       	subi	r19, 0x01	; 1
     ec0:	e4 96       	adiw	r28, 0x34	; 52
     ec2:	3f af       	std	Y+63, r19	; 0x3f
     ec4:	e4 97       	sbiw	r28, 0x34	; 52
     ec6:	17 c1       	rjmp	.+558    	; 0x10f6 <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ec8:	48 14       	cp	r4, r8
     eca:	59 04       	cpc	r5, r9
     ecc:	6a 04       	cpc	r6, r10
     ece:	7b 04       	cpc	r7, r11
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <USB_ProcessHIDReport+0x46e>
     ed2:	11 c1       	rjmp	.+546    	; 0x10f6 <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     ed4:	e6 96       	adiw	r28, 0x36	; 54
     ed6:	ae ad       	ldd	r26, Y+62	; 0x3e
     ed8:	bf ad       	ldd	r27, Y+63	; 0x3f
     eda:	e6 97       	sbiw	r28, 0x36	; 54
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	9c 92       	st	X, r9
     ee0:	8e 92       	st	-X, r8
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	bf ef       	ldi	r27, 0xFF	; 255
     ee6:	8b 1a       	sub	r8, r27
     ee8:	9b 0a       	sbc	r9, r27
     eea:	ab 0a       	sbc	r10, r27
     eec:	bb 0a       	sbc	r11, r27
     eee:	03 c1       	rjmp	.+518    	; 0x10f6 <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     ef0:	e6 96       	adiw	r28, 0x36	; 54
     ef2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ef4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ef6:	e6 97       	sbiw	r28, 0x36	; 54
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <USB_ProcessHIDReport+0x49a>
     efe:	19 c1       	rjmp	.+562    	; 0x1132 <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     f00:	d9 01       	movw	r26, r18
     f02:	15 96       	adiw	r26, 0x05	; 5
     f04:	0d 90       	ld	r0, X+
     f06:	bc 91       	ld	r27, X
     f08:	a0 2d       	mov	r26, r0
     f0a:	e6 96       	adiw	r28, 0x36	; 54
     f0c:	bf af       	std	Y+63, r27	; 0x3f
     f0e:	ae af       	std	Y+62, r26	; 0x3e
     f10:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     f12:	f1 c0       	rjmp	.+482    	; 0x10f6 <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     f14:	da 01       	movw	r26, r20
     f16:	fa e2       	ldi	r31, 0x2A	; 42
     f18:	f8 9f       	mul	r31, r24
     f1a:	a0 0d       	add	r26, r0
     f1c:	b1 1d       	adc	r27, r1
     f1e:	11 24       	eor	r1, r1
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	fe 01       	movw	r30, r28
     f24:	f9 96       	adiw	r30, 0x39	; 57
     f26:	8a e2       	ldi	r24, 0x2A	; 42
     f28:	01 90       	ld	r0, Z+
     f2a:	0d 92       	st	X+, r0
     f2c:	8a 95       	dec	r24
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     f30:	c1 58       	subi	r28, 0x81	; 129
     f32:	df 4f       	sbci	r29, 0xFF	; 255
     f34:	88 81       	ld	r24, Y
     f36:	99 81       	ldd	r25, Y+1	; 0x01
     f38:	aa 81       	ldd	r26, Y+2	; 0x02
     f3a:	bb 81       	ldd	r27, Y+3	; 0x03
     f3c:	cf 57       	subi	r28, 0x7F	; 127
     f3e:	d0 40       	sbci	r29, 0x00	; 0
     f40:	89 2b       	or	r24, r25
     f42:	8a 2b       	or	r24, r26
     f44:	8b 2b       	or	r24, r27
     f46:	09 f4       	brne	.+2      	; 0xf4a <USB_ProcessHIDReport+0x4e4>
     f48:	8f c0       	rjmp	.+286    	; 0x1068 <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     f4a:	3f 5f       	subi	r19, 0xFF	; 255
     f4c:	f8 01       	movw	r30, r16
     f4e:	82 8d       	ldd	r24, Z+26	; 0x1a
     f50:	38 17       	cp	r19, r24
     f52:	08 f0       	brcs	.+2      	; 0xf56 <USB_ProcessHIDReport+0x4f0>
     f54:	d0 c0       	rjmp	.+416    	; 0x10f6 <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     f56:	f8 01       	movw	r30, r16
     f58:	de 01       	movw	r26, r28
     f5a:	af 5b       	subi	r26, 0xBF	; 191
     f5c:	bf 4f       	sbci	r27, 0xFF	; 255
     f5e:	8a e1       	ldi	r24, 0x1A	; 26
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	8a 95       	dec	r24
     f66:	e1 f7       	brne	.-8      	; 0xf60 <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     f68:	dd ae       	std	Y+61, r13	; 0x3d
     f6a:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     f6c:	e6 96       	adiw	r28, 0x36	; 54
     f6e:	ee ad       	ldd	r30, Y+62	; 0x3e
     f70:	ff ad       	ldd	r31, Y+63	; 0x3f
     f72:	e6 97       	sbiw	r28, 0x36	; 54
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	ff af       	std	Y+63, r31	; 0x3f
     f78:	ee af       	std	Y+62, r30	; 0x3e
     f7a:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     f7c:	d8 01       	movw	r26, r16
     f7e:	5b 96       	adiw	r26, 0x1b	; 27
     f80:	8c 91       	ld	r24, X
     f82:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     f84:	e4 96       	adiw	r28, 0x34	; 52
     f86:	bf ad       	ldd	r27, Y+63	; 0x3f
     f88:	e4 97       	sbiw	r28, 0x34	; 52
     f8a:	bb 23       	and	r27, r27
     f8c:	e1 f0       	breq	.+56     	; 0xfc6 <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     f8e:	a5 96       	adiw	r28, 0x25	; 37
     f90:	8e ad       	ldd	r24, Y+62	; 0x3e
     f92:	9f ad       	ldd	r25, Y+63	; 0x3f
     f94:	a5 97       	sbiw	r28, 0x25	; 37
     f96:	26 96       	adiw	r28, 0x06	; 6
     f98:	9f af       	std	Y+63, r25	; 0x3f
     f9a:	8e af       	std	Y+62, r24	; 0x3e
     f9c:	26 97       	sbiw	r28, 0x06	; 6
     f9e:	fe 01       	movw	r30, r28
     fa0:	ed 59       	subi	r30, 0x9D	; 157
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     fa4:	a1 e0       	ldi	r26, 0x01	; 1
     fa6:	e4 96       	adiw	r28, 0x34	; 52
     fa8:	8f ad       	ldd	r24, Y+63	; 0x3f
     faa:	e4 97       	sbiw	r28, 0x34	; 52
     fac:	a8 17       	cp	r26, r24
     fae:	31 f0       	breq	.+12     	; 0xfbc <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	81 93       	st	Z+, r24
     fb6:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     fb8:	af 5f       	subi	r26, 0xFF	; 255
     fba:	f5 cf       	rjmp	.-22     	; 0xfa6 <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	e4 96       	adiw	r28, 0x34	; 52
     fc0:	8f af       	std	Y+63, r24	; 0x3f
     fc2:	e4 97       	sbiw	r28, 0x34	; 52
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     fc6:	48 14       	cp	r4, r8
     fc8:	59 04       	cpc	r5, r9
     fca:	6a 04       	cpc	r6, r10
     fcc:	7b 04       	cpc	r7, r11
     fce:	48 f0       	brcs	.+18     	; 0xfe2 <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     fd0:	26 96       	adiw	r28, 0x06	; 6
     fd2:	9f ae       	std	Y+63, r9	; 0x3f
     fd4:	8e ae       	std	Y+62, r8	; 0x3e
     fd6:	26 97       	sbiw	r28, 0x06	; 6
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	89 1a       	sub	r8, r25
     fdc:	99 0a       	sbc	r9, r25
     fde:	a9 0a       	sbc	r10, r25
     fe0:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     fe2:	20 38       	cpi	r18, 0x80	; 128
     fe4:	11 f4       	brne	.+4      	; 0xfea <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     fe6:	1b ae       	std	Y+59, r1	; 0x3b
     fe8:	07 c0       	rjmp	.+14     	; 0xff8 <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     fea:	20 39       	cpi	r18, 0x90	; 144
     fec:	19 f4       	brne	.+6      	; 0xff4 <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     fee:	a1 e0       	ldi	r26, 0x01	; 1
     ff0:	ab af       	std	Y+59, r26	; 0x3b
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     ff4:	b2 e0       	ldi	r27, 0x02	; 2
     ff6:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     ff8:	8b ad       	ldd	r24, Y+59	; 0x3b
     ffa:	e8 96       	adiw	r28, 0x38	; 56
     ffc:	ee ad       	ldd	r30, Y+62	; 0x3e
     ffe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1000:	e8 97       	sbiw	r28, 0x38	; 56
    1002:	e8 0f       	add	r30, r24
    1004:	f1 1d       	adc	r31, r1
    1006:	e8 0f       	add	r30, r24
    1008:	f1 1d       	adc	r31, r1
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	92 81       	ldd	r25, Z+2	; 0x02
    100e:	9a af       	std	Y+58, r25	; 0x3a
    1010:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1012:	d8 01       	movw	r26, r16
    1014:	bc 91       	ld	r27, X
    1016:	81 81       	ldd	r24, Z+1	; 0x01
    1018:	92 81       	ldd	r25, Z+2	; 0x02
    101a:	8b 0f       	add	r24, r27
    101c:	91 1d       	adc	r25, r1
    101e:	92 83       	std	Z+2, r25	; 0x02
    1020:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1022:	8b ad       	ldd	r24, Y+59	; 0x3b
    1024:	e8 96       	adiw	r28, 0x38	; 56
    1026:	ee ad       	ldd	r30, Y+62	; 0x3e
    1028:	ff ad       	ldd	r31, Y+63	; 0x3f
    102a:	e8 97       	sbiw	r28, 0x38	; 56
    102c:	e8 0f       	add	r30, r24
    102e:	f1 1d       	adc	r31, r1
    1030:	e8 0f       	add	r30, r24
    1032:	f1 1d       	adc	r31, r1
    1034:	ed 96       	adiw	r28, 0x3d	; 61
    1036:	ae ad       	ldd	r26, Y+62	; 0x3e
    1038:	bf ad       	ldd	r27, Y+63	; 0x3f
    103a:	ed 97       	sbiw	r28, 0x3d	; 61
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	01 80       	ldd	r0, Z+1	; 0x01
    1042:	f2 81       	ldd	r31, Z+2	; 0x02
    1044:	e0 2d       	mov	r30, r0
    1046:	e8 17       	cp	r30, r24
    1048:	f9 07       	cpc	r31, r25
    104a:	08 f4       	brcc	.+2      	; 0x104e <USB_ProcessHIDReport+0x5e8>
    104c:	fc 01       	movw	r30, r24
    104e:	ed 96       	adiw	r28, 0x3d	; 61
    1050:	ae ad       	ldd	r26, Y+62	; 0x3e
    1052:	bf ad       	ldd	r27, Y+63	; 0x3f
    1054:	ed 97       	sbiw	r28, 0x3d	; 61
    1056:	ed 93       	st	X+, r30
    1058:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    105a:	fa 01       	movw	r30, r20
    105c:	80 81       	ld	r24, Z
    105e:	84 31       	cpi	r24, 0x14	; 20
    1060:	09 f0       	breq	.+2      	; 0x1064 <USB_ProcessHIDReport+0x5fe>
    1062:	58 cf       	rjmp	.-336    	; 0xf14 <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	6a c0       	rjmp	.+212    	; 0x113c <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1068:	ce 01       	movw	r24, r28
    106a:	c9 96       	adiw	r24, 0x39	; 57
    106c:	c8 57       	subi	r28, 0x78	; 120
    106e:	df 4f       	sbci	r29, 0xFF	; 255
    1070:	28 83       	st	Y, r18
    1072:	c8 58       	subi	r28, 0x88	; 136
    1074:	d0 40       	sbci	r29, 0x00	; 0
    1076:	c9 57       	subi	r28, 0x79	; 121
    1078:	df 4f       	sbci	r29, 0xFF	; 255
    107a:	38 83       	st	Y, r19
    107c:	c7 58       	subi	r28, 0x87	; 135
    107e:	d0 40       	sbci	r29, 0x00	; 0
    1080:	c5 57       	subi	r28, 0x75	; 117
    1082:	df 4f       	sbci	r29, 0xFF	; 255
    1084:	48 83       	st	Y, r20
    1086:	cb 58       	subi	r28, 0x8B	; 139
    1088:	d0 40       	sbci	r29, 0x00	; 0
    108a:	c4 57       	subi	r28, 0x74	; 116
    108c:	df 4f       	sbci	r29, 0xFF	; 255
    108e:	58 83       	st	Y, r21
    1090:	cc 58       	subi	r28, 0x8C	; 140
    1092:	d0 40       	sbci	r29, 0x00	; 0
    1094:	c7 57       	subi	r28, 0x77	; 119
    1096:	df 4f       	sbci	r29, 0xFF	; 255
    1098:	68 83       	st	Y, r22
    109a:	c9 58       	subi	r28, 0x89	; 137
    109c:	d0 40       	sbci	r29, 0x00	; 0
    109e:	c6 57       	subi	r28, 0x76	; 118
    10a0:	df 4f       	sbci	r29, 0xFF	; 255
    10a2:	78 83       	st	Y, r23
    10a4:	ca 58       	subi	r28, 0x8A	; 138
    10a6:	d0 40       	sbci	r29, 0x00	; 0
    10a8:	dc dc       	rcall	.-1608   	; 0xa62 <CALLBACK_HIDParser_FilterHIDReportItem>
    10aa:	c8 57       	subi	r28, 0x78	; 120
    10ac:	df 4f       	sbci	r29, 0xFF	; 255
    10ae:	28 81       	ld	r18, Y
    10b0:	c8 58       	subi	r28, 0x88	; 136
    10b2:	d0 40       	sbci	r29, 0x00	; 0
    10b4:	c9 57       	subi	r28, 0x79	; 121
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	38 81       	ld	r19, Y
    10ba:	c7 58       	subi	r28, 0x87	; 135
    10bc:	d0 40       	sbci	r29, 0x00	; 0
    10be:	c5 57       	subi	r28, 0x75	; 117
    10c0:	df 4f       	sbci	r29, 0xFF	; 255
    10c2:	48 81       	ld	r20, Y
    10c4:	cb 58       	subi	r28, 0x8B	; 139
    10c6:	d0 40       	sbci	r29, 0x00	; 0
    10c8:	c4 57       	subi	r28, 0x74	; 116
    10ca:	df 4f       	sbci	r29, 0xFF	; 255
    10cc:	58 81       	ld	r21, Y
    10ce:	cc 58       	subi	r28, 0x8C	; 140
    10d0:	d0 40       	sbci	r29, 0x00	; 0
    10d2:	c7 57       	subi	r28, 0x77	; 119
    10d4:	df 4f       	sbci	r29, 0xFF	; 255
    10d6:	68 81       	ld	r22, Y
    10d8:	c9 58       	subi	r28, 0x89	; 137
    10da:	d0 40       	sbci	r29, 0x00	; 0
    10dc:	c6 57       	subi	r28, 0x76	; 118
    10de:	df 4f       	sbci	r29, 0xFF	; 255
    10e0:	78 81       	ld	r23, Y
    10e2:	ca 58       	subi	r28, 0x8A	; 138
    10e4:	d0 40       	sbci	r29, 0x00	; 0
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <USB_ProcessHIDReport+0x686>
    10ea:	2f cf       	rjmp	.-418    	; 0xf4a <USB_ProcessHIDReport+0x4e4>
    10ec:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
    10ee:	8c 91       	ld	r24, X
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	8c 93       	st	X, r24
    10f4:	2a cf       	rjmp	.-428    	; 0xf4a <USB_ProcessHIDReport+0x4e4>
    10f6:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    10f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    10fa:	e9 97       	sbiw	r28, 0x39	; 57
    10fc:	8c 70       	andi	r24, 0x0C	; 12
    10fe:	09 f0       	breq	.+2      	; 0x1102 <USB_ProcessHIDReport+0x69c>
    1100:	1d cd       	rjmp	.-1478   	; 0xb3c <USB_ProcessHIDReport+0xd6>
    1102:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    1104:	51 2c       	mov	r5, r1
    1106:	32 01       	movw	r6, r4
    1108:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    110a:	91 2c       	mov	r9, r1
    110c:	54 01       	movw	r10, r8
    110e:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    1110:	1f ae       	std	Y+63, r1	; 0x3f
    1112:	e4 97       	sbiw	r28, 0x34	; 52
    1114:	13 cd       	rjmp	.-1498   	; 0xb3c <USB_ProcessHIDReport+0xd6>
    1116:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
    1118:	8c 91       	ld	r24, X
    111a:	81 11       	cpse	r24, r1
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <USB_ProcessHIDReport+0x6d0>
    111e:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
    1120:	0d c0       	rjmp	.+26     	; 0x113c <USB_ProcessHIDReport+0x6d6>
    1122:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    1124:	0b c0       	rjmp	.+22     	; 0x113c <USB_ProcessHIDReport+0x6d6>
    1126:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1128:	09 c0       	rjmp	.+18     	; 0x113c <USB_ProcessHIDReport+0x6d6>
    112a:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    112c:	07 c0       	rjmp	.+14     	; 0x113c <USB_ProcessHIDReport+0x6d6>
    112e:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1130:	05 c0       	rjmp	.+10     	; 0x113c <USB_ProcessHIDReport+0x6d6>
    1132:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1134:	03 c0       	rjmp	.+6      	; 0x113c <USB_ProcessHIDReport+0x6d6>
    1136:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1138:	01 c0       	rjmp	.+2      	; 0x113c <USB_ProcessHIDReport+0x6d6>
    113a:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    113c:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    113e:	df 4f       	sbci	r29, 0xFF	; 255
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	5f 90       	pop	r5
    1168:	4f 90       	pop	r4
    116a:	3f 90       	pop	r3
    116c:	2f 90       	pop	r2
    116e:	08 95       	ret

00001170 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1170:	80 91 9e 00 	lds	r24, 0x009E
    1174:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1176:	90 91 a0 00 	lds	r25, 0x00A0
    117a:	9d 7f       	andi	r25, 0xFD	; 253
    117c:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1180:	90 91 9e 00 	lds	r25, 0x009E
    1184:	92 60       	ori	r25, 0x02	; 2
    1186:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    118a:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    118e:	91 fd       	sbrc	r25, 1
    1190:	fc cf       	rjmp	.-8      	; 0x118a <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1192:	90 91 9e 00 	lds	r25, 0x009E
    1196:	91 60       	ori	r25, 0x01	; 1
    1198:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    119c:	10 92 14 05 	sts	0x0514, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11a0:	90 91 a0 00 	lds	r25, 0x00A0
    11a4:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    11a6:	20 91 a0 00 	lds	r18, 0x00A0
    11aa:	2f 7d       	andi	r18, 0xDF	; 223
    11ac:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11b0:	20 91 9f 00 	lds	r18, 0x009F
    11b4:	2f 7d       	andi	r18, 0xDF	; 223
    11b6:	20 93 9f 00 	sts	0x009F, r18
    11ba:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    11bc:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    11c0:	35 ff       	sbrs	r19, 5
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11c4:	20 91 9f 00 	lds	r18, 0x009F
    11c8:	2f 7d       	andi	r18, 0xDF	; 223
    11ca:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    11ce:	20 91 9f 00 	lds	r18, 0x009F
    11d2:	2d 7f       	andi	r18, 0xFD	; 253
    11d4:	20 93 9f 00 	sts	0x009F, r18
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11da:	ef ec       	ldi	r30, 0xCF	; 207
    11dc:	f7 e0       	ldi	r31, 0x07	; 7
    11de:	31 97       	sbiw	r30, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <USB_Host_ResetDevice+0x6e>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <USB_Host_ResetDevice+0x74>
    11e4:	00 00       	nop
    11e6:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    11e8:	49 f7       	brne	.-46     	; 0x11bc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    11ea:	99 23       	and	r25, r25
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    11ee:	90 91 a0 00 	lds	r25, 0x00A0
    11f2:	90 62       	ori	r25, 0x20	; 32
    11f4:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    11f8:	81 11       	cpse	r24, r1
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11fc:	80 91 9e 00 	lds	r24, 0x009E
    1200:	8e 7f       	andi	r24, 0xFE	; 254
    1202:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1206:	80 91 a0 00 	lds	r24, 0x00A0
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 93 a0 00 	sts	0x00A0, r24
    1210:	08 95       	ret

00001212 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1212:	20 91 9e 00 	lds	r18, 0x009E
    1216:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1218:	90 91 a0 00 	lds	r25, 0x00A0
    121c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    121e:	30 91 a0 00 	lds	r19, 0x00A0
    1222:	3f 7d       	andi	r19, 0xDF	; 223
    1224:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1228:	30 91 9f 00 	lds	r19, 0x009F
    122c:	3f 7d       	andi	r19, 0xDF	; 223
    122e:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1232:	30 91 9e 00 	lds	r19, 0x009E
    1236:	31 60       	ori	r19, 0x01	; 1
    1238:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    123c:	88 23       	and	r24, r24
    123e:	39 f1       	breq	.+78     	; 0x128e <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1240:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1244:	35 ff       	sbrs	r19, 5
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1248:	30 91 9f 00 	lds	r19, 0x009F
    124c:	3f 7d       	andi	r19, 0xDF	; 223
    124e:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1252:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1254:	30 91 1e 05 	lds	r19, 0x051E
    1258:	31 30       	cpi	r19, 0x01	; 1
    125a:	c1 f0       	breq	.+48     	; 0x128c <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    125c:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    1260:	34 ff       	sbrs	r19, 4
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1264:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1268:	80 91 a6 00 	lds	r24, 0x00A6
    126c:	8f 7e       	andi	r24, 0xEF	; 239
    126e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1272:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1274:	0c c0       	rjmp	.+24     	; 0x128e <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1276:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
    127a:	31 ff       	sbrs	r19, 1
    127c:	df cf       	rjmp	.-66     	; 0x123c <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    127e:	80 91 a6 00 	lds	r24, 0x00A6
    1282:	8d 7f       	andi	r24, 0xFD	; 253
    1284:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1288:	83 e0       	ldi	r24, 0x03	; 3

			break;
    128a:	01 c0       	rjmp	.+2      	; 0x128e <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    128c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    128e:	21 11       	cpse	r18, r1
    1290:	05 c0       	rjmp	.+10     	; 0x129c <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1292:	20 91 9e 00 	lds	r18, 0x009E
    1296:	2e 7f       	andi	r18, 0xFE	; 254
    1298:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    129c:	99 23       	and	r25, r25
    129e:	29 f0       	breq	.+10     	; 0x12aa <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    12a0:	90 91 a0 00 	lds	r25, 0x00A0
    12a4:	90 62       	ori	r25, 0x20	; 32
    12a6:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    12aa:	08 95       	ret

000012ac <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	28 97       	sbiw	r28, 0x08	; 8
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    12c4:	80 91 1e 05 	lds	r24, 0x051E
    12c8:	85 30       	cpi	r24, 0x05	; 5
    12ca:	09 f4       	brne	.+2      	; 0x12ce <USB_Host_ProcessNextHostState+0x22>
    12cc:	9c c0       	rjmp	.+312    	; 0x1406 <USB_Host_ProcessNextHostState+0x15a>
    12ce:	68 f4       	brcc	.+26     	; 0x12ea <USB_Host_ProcessNextHostState+0x3e>
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	e1 f1       	breq	.+120    	; 0x134c <USB_Host_ProcessNextHostState+0xa0>
    12d4:	18 f4       	brcc	.+6      	; 0x12dc <USB_Host_ProcessNextHostState+0x30>
    12d6:	88 23       	and	r24, r24
    12d8:	d9 f0       	breq	.+54     	; 0x1310 <USB_Host_ProcessNextHostState+0x64>
    12da:	ff c0       	rjmp	.+510    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	09 f4       	brne	.+2      	; 0x12e2 <USB_Host_ProcessNextHostState+0x36>
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <USB_Host_ProcessNextHostState+0xb4>
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <USB_Host_ProcessNextHostState+0x3c>
    12e6:	67 c0       	rjmp	.+206    	; 0x13b6 <USB_Host_ProcessNextHostState+0x10a>
    12e8:	f8 c0       	rjmp	.+496    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    12ea:	87 30       	cpi	r24, 0x07	; 7
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <USB_Host_ProcessNextHostState+0x44>
    12ee:	a6 c0       	rjmp	.+332    	; 0x143c <USB_Host_ProcessNextHostState+0x190>
    12f0:	08 f4       	brcc	.+2      	; 0x12f4 <USB_Host_ProcessNextHostState+0x48>
    12f2:	96 c0       	rjmp	.+300    	; 0x1420 <USB_Host_ProcessNextHostState+0x174>
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	09 f4       	brne	.+2      	; 0x12fa <USB_Host_ProcessNextHostState+0x4e>
    12f8:	bf c0       	rjmp	.+382    	; 0x1478 <USB_Host_ProcessNextHostState+0x1cc>
    12fa:	89 30       	cpi	r24, 0x09	; 9
    12fc:	09 f0       	breq	.+2      	; 0x1300 <USB_Host_ProcessNextHostState+0x54>
    12fe:	ed c0       	rjmp	.+474    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1306:	8a e0       	ldi	r24, 0x0A	; 10
    1308:	80 93 1e 05 	sts	0x051E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    130c:	22 db       	rcall	.-2492   	; 0x952 <EVENT_USB_Host_DeviceEnumerationComplete>
    130e:	e5 c0       	rjmp	.+458    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
			break;
    1310:	00 91 12 05 	lds	r16, 0x0512
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1314:	10 91 13 05 	lds	r17, 0x0513
    1318:	01 15       	cp	r16, r1
    131a:	11 05       	cpc	r17, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <USB_Host_ProcessNextHostState+0x74>
    131e:	dd c0       	rjmp	.+442    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    1320:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1322:	77 df       	rcall	.-274    	; 0x1212 <USB_Host_WaitMS>
    1324:	88 23       	and	r24, r24
    1326:	31 f0       	breq	.+12     	; 0x1334 <USB_Host_ProcessNextHostState+0x88>
    1328:	90 91 11 05 	lds	r25, 0x0511
				{
					USB_HostState = PostWaitState;
    132c:	90 93 1e 05 	sts	0x051E, r25
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	c5 c0       	rjmp	.+394    	; 0x14be <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1334:	01 50       	subi	r16, 0x01	; 1
					break;
    1336:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
    1338:	10 93 13 05 	sts	0x0513, r17
    133c:	00 93 12 05 	sts	0x0512, r16
    1340:	01 2b       	or	r16, r17
    1342:	09 f0       	breq	.+2      	; 0x1346 <USB_Host_ProcessNextHostState+0x9a>
    1344:	ca c0       	rjmp	.+404    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    1346:	80 91 11 05 	lds	r24, 0x0511
				  USB_HostState = PostWaitState;
    134a:	07 c0       	rjmp	.+14     	; 0x135a <USB_Host_ProcessNextHostState+0xae>
    134c:	88 ee       	ldi	r24, 0xE8	; 232
    134e:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1350:	90 93 13 05 	sts	0x0513, r25
    1354:	80 93 12 05 	sts	0x0512, r24
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	80 93 1e 05 	sts	0x051E, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    135e:	bd c0       	rjmp	.+378    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    1360:	80 91 12 05 	lds	r24, 0x0512
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1364:	90 91 13 05 	lds	r25, 0x0513
    1368:	9c 01       	movw	r18, r24
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	31 09       	sbc	r19, r1
    136e:	30 93 13 05 	sts	0x0513, r19
    1372:	20 93 12 05 	sts	0x0512, r18
    1376:	89 2b       	or	r24, r25
    1378:	39 f0       	breq	.+14     	; 0x1388 <USB_Host_ProcessNextHostState+0xdc>
    137a:	8f ec       	ldi	r24, 0xCF	; 207
    137c:	97 e0       	ldi	r25, 0x07	; 7
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <USB_Host_ProcessNextHostState+0xd2>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <USB_Host_ProcessNextHostState+0xd8>
    1384:	00 00       	nop
    1386:	a9 c0       	rjmp	.+338    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    1388:	77 98       	cbi	0x0e, 7	; 14
    138a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    138e:	80 61       	ori	r24, 0x10	; 16
    1390:	80 93 d8 00 	sts	0x00D8, r24
    1394:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1398:	8b 7f       	andi	r24, 0xFB	; 251
    139a:	80 93 dd 00 	sts	0x00DD, r24
    139e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    13a2:	80 61       	ori	r24, 0x10	; 16
    13a4:	80 93 d7 00 	sts	0x00D7, r24
    13a8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	80 93 dd 00 	sts	0x00DD, r24
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	d2 cf       	rjmp	.-92     	; 0x135a <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    13b6:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    13ba:	80 ff       	sbrs	r24, 0
    13bc:	8e c0       	rjmp	.+284    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    13be:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	80 93 9f 00 	sts	0x009F, r24
    13c8:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	80 93 9f 00 	sts	0x009F, r24
    13d2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    13d6:	8d 7f       	andi	r24, 0xFD	; 253
    13d8:	80 93 df 00 	sts	0x00DF, r24
    13dc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    13e0:	82 60       	ori	r24, 0x02	; 2
    13e2:	80 93 de 00 	sts	0x00DE, r24
    13e6:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 93 9e 00 	sts	0x009E, r24
    13f0:	06 d1       	rcall	.+524    	; 0x15fe <Pipe_ClearPipes>
    13f2:	10 92 1e 05 	sts	0x051E, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    13f6:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	90 93 13 05 	sts	0x0513, r25
    13fe:	80 93 12 05 	sts	0x0512, r24
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	0a c0       	rjmp	.+20     	; 0x141a <USB_Host_ProcessNextHostState+0x16e>
    1406:	b4 de       	rcall	.-664    	; 0x1170 <USB_Host_ResetDevice>
    1408:	10 92 1e 05 	sts	0x051E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    140c:	88 ec       	ldi	r24, 0xC8	; 200
    140e:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1410:	90 93 13 05 	sts	0x0513, r25
    1414:	80 93 12 05 	sts	0x0512, r24
    1418:	86 e0       	ldi	r24, 0x06	; 6
    141a:	80 93 11 05 	sts	0x0511, r24
    141e:	5d c0       	rjmp	.+186    	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    1420:	01 e0       	ldi	r16, 0x01	; 1
    1422:	20 e4       	ldi	r18, 0x40	; 64
    1424:	30 e0       	ldi	r19, 0x00	; 0
			break;
    1426:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	61 d0       	rcall	.+194    	; 0x14f0 <Pipe_ConfigurePipe>
    142e:	81 11       	cpse	r24, r1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <USB_Host_ProcessNextHostState+0x18c>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	94 e0       	ldi	r25, 0x04	; 4
    1436:	43 c0       	rjmp	.+134    	; 0x14be <USB_Host_ProcessNextHostState+0x212>
    1438:	87 e0       	ldi	r24, 0x07	; 7
    143a:	8f cf       	rjmp	.-226    	; 0x135a <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    143c:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    143e:	e8 e1       	ldi	r30, 0x18	; 24
    1440:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1442:	a6 e1       	ldi	r26, 0x16	; 22
    1444:	b5 e0       	ldi	r27, 0x05	; 5
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1446:	01 90       	ld	r0, Z+
    1448:	0d 92       	st	X+, r0
    144a:	8a 95       	dec	r24
    144c:	e1 f7       	brne	.-8      	; 0x1446 <USB_Host_ProcessNextHostState+0x19a>
    144e:	10 92 a7 00 	sts	0x00A7, r1
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	f7 d2       	rcall	.+1518   	; 0x1a46 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1458:	81 11       	cpse	r24, r1
    145a:	30 c0       	rjmp	.+96     	; 0x14bc <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    145c:	88 85       	ldd	r24, Y+8	; 0x08
    145e:	80 93 17 01 	sts	0x0117, r24
    1462:	86 de       	rcall	.-756    	; 0x1170 <USB_Host_ResetDevice>
    1464:	10 92 1e 05 	sts	0x051E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1468:	88 ec       	ldi	r24, 0xC8	; 200
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	90 93 13 05 	sts	0x0513, r25

			USB_Host_ResetDevice();
    1470:	80 93 12 05 	sts	0x0512, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1474:	88 e0       	ldi	r24, 0x08	; 8
    1476:	d1 cf       	rjmp	.-94     	; 0x141a <USB_Host_ProcessNextHostState+0x16e>
    1478:	20 91 17 01 	lds	r18, 0x0117
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	01 e0       	ldi	r16, 0x01	; 1
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1486:	34 d0       	rcall	.+104    	; 0x14f0 <Pipe_ConfigurePipe>
    1488:	88 23       	and	r24, r24
    148a:	99 f2       	breq	.-90     	; 0x1432 <USB_Host_ProcessNextHostState+0x186>
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	e0 e2       	ldi	r30, 0x20	; 32
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	a6 e1       	ldi	r26, 0x16	; 22
    1494:	b5 e0       	ldi	r27, 0x05	; 5
    1496:	01 90       	ld	r0, Z+
    1498:	0d 92       	st	X+, r0
    149a:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    149c:	e1 f7       	brne	.-8      	; 0x1496 <USB_Host_ProcessNextHostState+0x1ea>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	d1 d2       	rcall	.+1442   	; 0x1a46 <USB_Host_SendControlRequest>
    14a4:	81 11       	cpse	r24, r1
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <USB_Host_ProcessNextHostState+0x210>
    14a8:	10 92 1e 05 	sts	0x051E, r1
    14ac:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 13 05 	sts	0x0513, r25
    14b4:	80 93 12 05 	sts	0x0512, r24
    14b8:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    14ba:	af cf       	rjmp	.-162    	; 0x141a <USB_Host_ProcessNextHostState+0x16e>
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	20 91 1e 05 	lds	r18, 0x051E
    14c2:	21 30       	cpi	r18, 0x01	; 1
    14c4:	51 f0       	breq	.+20     	; 0x14da <USB_Host_ProcessNextHostState+0x22e>
    14c6:	68 2f       	mov	r22, r24
    14c8:	89 2f       	mov	r24, r25
    14ca:	b3 da       	rcall	.-2714   	; 0xa32 <EVENT_USB_Host_DeviceEnumerationFailed>
    14cc:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	80 93 dd 00 	sts	0x00DD, r24
    14d6:	37 da       	rcall	.-2962   	; 0x946 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    14d8:	e8 d0       	rcall	.+464    	; 0x16aa <USB_ResetInterface>
    14da:	28 96       	adiw	r28, 0x08	; 8
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16

		USB_ResetInterface();
    14ee:	08 95       	ret

000014f0 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    14f0:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    14f2:	e8 2f       	mov	r30, r24
    14f4:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    14f6:	87 ff       	sbrs	r24, 7
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <Pipe_ConfigurePipe+0xe>
    14fa:	80 e1       	ldi	r24, 0x10	; 16
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <Pipe_ConfigurePipe+0x10>
    14fe:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    1500:	e7 30       	cpi	r30, 0x07	; 7
    1502:	10 f0       	brcs	.+4      	; 0x1508 <Pipe_ConfigurePipe+0x18>
	  return false;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	5a c0       	rjmp	.+180    	; 0x15bc <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    1508:	61 11       	cpse	r22, r1
    150a:	01 c0       	rjmp	.+2      	; 0x150e <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    150c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    150e:	90 e4       	ldi	r25, 0x40	; 64
    1510:	69 9f       	mul	r22, r25
    1512:	b0 01       	movw	r22, r0
    1514:	11 24       	eor	r1, r1
    1516:	4f 70       	andi	r20, 0x0F	; 15
    1518:	46 2b       	or	r20, r22
    151a:	48 2b       	or	r20, r24
    151c:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    151e:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1522:	5e 13       	cpse	r21, r30
    1524:	19 c0       	rjmp	.+50     	; 0x1558 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    1526:	02 30       	cpi	r16, 0x02	; 2
    1528:	10 f0       	brcs	.+4      	; 0x152e <Pipe_ConfigurePipe+0x3e>
    152a:	76 e0       	ldi	r23, 0x06	; 6
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <Pipe_ConfigurePipe+0x40>
    152e:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1530:	88 e0       	ldi	r24, 0x08	; 8
    1532:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1534:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1536:	82 17       	cp	r24, r18
    1538:	93 07       	cpc	r25, r19
    153a:	40 f0       	brcs	.+16     	; 0x154c <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    153c:	86 2f       	mov	r24, r22
    153e:	82 95       	swap	r24
    1540:	80 7f       	andi	r24, 0xF0	; 240
    1542:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1544:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1546:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    154c:	65 30       	cpi	r22, 0x05	; 5
    154e:	b1 f3       	breq	.-20     	; 0x153c <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    1550:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	ef cf       	rjmp	.-34     	; 0x1536 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1558:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    155c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1560:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1564:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1568:	81 fd       	sbrc	r24, 1
    156a:	07 c0       	rjmp	.+14     	; 0x157a <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    156c:	5f 5f       	subi	r21, 0xFF	; 255
    156e:	57 30       	cpi	r21, 0x07	; 7
    1570:	b1 f6       	brne	.-84     	; 0x151e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1572:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	21 c0       	rjmp	.+66     	; 0x15bc <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    157a:	90 91 a9 00 	lds	r25, 0x00A9
    157e:	9e 7f       	andi	r25, 0xFE	; 254
    1580:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1584:	90 91 ab 00 	lds	r25, 0x00AB
    1588:	9d 7f       	andi	r25, 0xFD	; 253
    158a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    158e:	90 91 a9 00 	lds	r25, 0x00A9
    1592:	91 60       	ori	r25, 0x01	; 1
    1594:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1598:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    159c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    15a0:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    15a4:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    15a8:	80 91 a9 00 	lds	r24, 0x00A9
    15ac:	80 62       	ori	r24, 0x20	; 32
    15ae:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    15b2:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    15b6:	87 fd       	sbrc	r24, 7
    15b8:	d9 cf       	rjmp	.-78     	; 0x156c <Pipe_ConfigurePipe+0x7c>
    15ba:	a4 cf       	rjmp	.-184    	; 0x1504 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	f6 2e       	mov	r15, r22
    15cc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    15ce:	10 e0       	ldi	r17, 0x00	; 0
    15d0:	1f 15       	cp	r17, r15
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
    15d4:	88 81       	ld	r24, Y
    15d6:	88 23       	and	r24, r24
    15d8:	41 f0       	breq	.+16     	; 0x15ea <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    15da:	29 81       	ldd	r18, Y+1	; 0x01
    15dc:	3a 81       	ldd	r19, Y+2	; 0x02
    15de:	0d 81       	ldd	r16, Y+5	; 0x05
    15e0:	4b 81       	ldd	r20, Y+3	; 0x03
    15e2:	6c 81       	ldd	r22, Y+4	; 0x04
    15e4:	85 df       	rcall	.-246    	; 0x14f0 <Pipe_ConfigurePipe>
    15e6:	88 23       	and	r24, r24
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <Pipe_ConfigurePipeTable+0x32>
    15ea:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    15ec:	26 96       	adiw	r28, 0x06	; 6
    15ee:	f0 cf       	rjmp	.-32     	; 0x15d0 <Pipe_ConfigurePipeTable+0x10>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
    15f2:	df 91       	pop	r29
}
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	08 95       	ret

000015fe <Pipe_ClearPipes>:
    15fe:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1602:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1604:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1608:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    160c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1610:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1614:	90 91 a9 00 	lds	r25, 0x00A9
    1618:	9e 7f       	andi	r25, 0xFE	; 254
    161a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	87 30       	cpi	r24, 0x07	; 7
    1622:	81 f7       	brne	.-32     	; 0x1604 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1624:	08 95       	ret

00001626 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1626:	90 91 a7 00 	lds	r25, 0x00A7
    162a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    162c:	20 91 aa 00 	lds	r18, 0x00AA
    1630:	20 ff       	sbrs	r18, 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <Pipe_IsEndpointBound+0x12>
    1634:	20 e8       	ldi	r18, 0x80	; 128
    1636:	01 c0       	rjmp	.+2      	; 0x163a <Pipe_IsEndpointBound+0x14>
    1638:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    163a:	42 2f       	mov	r20, r18
    163c:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    163e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1640:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1644:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1648:	27 ff       	sbrs	r18, 7
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    164c:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1650:	53 2f       	mov	r21, r19
    1652:	5f 70       	andi	r21, 0x0F	; 15
    1654:	35 ff       	sbrs	r19, 5
    1656:	02 c0       	rjmp	.+4      	; 0x165c <Pipe_IsEndpointBound+0x36>
    1658:	20 e8       	ldi	r18, 0x80	; 128
    165a:	01 c0       	rjmp	.+2      	; 0x165e <Pipe_IsEndpointBound+0x38>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1660:	28 17       	cp	r18, r24
    1662:	49 f0       	breq	.+18     	; 0x1676 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1664:	9f 5f       	subi	r25, 0xFF	; 255
    1666:	97 30       	cpi	r25, 0x07	; 7
    1668:	59 f7       	brne	.-42     	; 0x1640 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    166a:	94 2f       	mov	r25, r20
    166c:	9f 70       	andi	r25, 0x0F	; 15
    166e:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1676:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1678:	08 95       	ret

0000167a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    167a:	75 d0       	rcall	.+234    	; 0x1766 <USB_INT_DisableAllInterrupts>
    167c:	7c d0       	rcall	.+248    	; 0x1776 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    167e:	e0 ee       	ldi	r30, 0xE0	; 224
    1680:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1682:	80 81       	ld	r24, Z
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	80 83       	st	Z, r24
    1688:	e8 ed       	ldi	r30, 0xD8	; 216
    168a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    168c:	80 81       	ld	r24, Z
    168e:	8f 77       	andi	r24, 0x7F	; 127
    1690:	80 83       	st	Z, r24
    1692:	19 bc       	out	0x29, r1	; 41
    1694:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1696:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1698:	8c 91       	ld	r24, X
    169a:	8e 7f       	andi	r24, 0xFE	; 254
    169c:	8c 93       	st	X, r24
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    16a2:	80 83       	st	Z, r24
    16a4:	10 92 15 05 	sts	0x0515, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    16a8:	08 95       	ret

000016aa <USB_ResetInterface>:
    16aa:	5d d0       	rcall	.+186    	; 0x1766 <USB_INT_DisableAllInterrupts>
    16ac:	64 d0       	rcall	.+200    	; 0x1776 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    16ae:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    16b2:	8f 77       	andi	r24, 0x7F	; 127
    16b4:	80 93 d8 00 	sts	0x00D8, r24
    16b8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    16bc:	80 68       	ori	r24, 0x80	; 128
    16be:	80 93 d8 00 	sts	0x00D8, r24
    16c2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16c6:	8f 7d       	andi	r24, 0xDF	; 223
    16c8:	80 93 d8 00 	sts	0x00D8, r24
    16cc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    16d0:	8f 77       	andi	r24, 0x7F	; 127
    16d2:	80 93 d7 00 	sts	0x00D7, r24
    16d6:	8c e0       	ldi	r24, 0x0C	; 12
    16d8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16da:	8e e0       	ldi	r24, 0x0E	; 14
    16dc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16de:	09 b4       	in	r0, 0x29	; 41
    16e0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    16e2:	fd cf       	rjmp	.-6      	; 0x16de <USB_ResetInterface+0x34>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 1e 05 	sts	0x051E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    16ea:	10 92 14 05 	sts	0x0514, r1
	USB_Host_ConfigurationNumber = 0;
    16ee:	80 e4       	ldi	r24, 0x40	; 64
    16f0:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    16f4:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    16f8:	80 64       	ori	r24, 0x40	; 64
    16fa:	80 93 d8 00 	sts	0x00D8, r24
    16fe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	80 93 dd 00 	sts	0x00DD, r24
    1708:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    170c:	84 60       	ori	r24, 0x04	; 4
    170e:	80 93 dd 00 	sts	0x00DD, r24
    1712:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1716:	8f 7e       	andi	r24, 0xEF	; 239
    1718:	80 93 d7 00 	sts	0x00D7, r24
    171c:	6f 9a       	sbi	0x0d, 7	; 13
    171e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1720:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	80 93 de 00 	sts	0x00DE, r24
    172a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 de 00 	sts	0x00DE, r24
    1734:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1738:	8e 7f       	andi	r24, 0xFE	; 254
    173a:	80 93 e0 00 	sts	0x00E0, r24
    173e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	80 93 d8 00 	sts	0x00D8, r24
    1748:	08 95       	ret

0000174a <USB_Init>:
    174a:	e8 ed       	ldi	r30, 0xD8	; 216
    174c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    174e:	80 81       	ld	r24, Z
    1750:	8f 7e       	andi	r24, 0xEF	; 239
    1752:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1754:	e7 ed       	ldi	r30, 0xD7	; 215
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 15 05 	sts	0x0515, r24

	USB_ResetInterface();
    1764:	a2 cf       	rjmp	.-188    	; 0x16aa <USB_ResetInterface>

00001766 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1766:	e8 ed       	ldi	r30, 0xD8	; 216
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8c 7f       	andi	r24, 0xFC	; 252
    176e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1770:	10 92 a0 00 	sts	0x00A0, r1
    1774:	08 95       	ret

00001776 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1776:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    177a:	10 92 9f 00 	sts	0x009F, r1
    177e:	08 95       	ret

00001780 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	0b b6       	in	r0, 0x3b	; 59
    178c:	0f 92       	push	r0
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    17a6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    17aa:	85 ff       	sbrs	r24, 5
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    17ae:	80 91 a0 00 	lds	r24, 0x00A0
    17b2:	85 ff       	sbrs	r24, 5
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    17b6:	80 91 9f 00 	lds	r24, 0x009F
    17ba:	8f 7d       	andi	r24, 0xDF	; 223
    17bc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    17c0:	1a d1       	rcall	.+564    	; 0x19f6 <USB_Event_Stub>
    17c2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    17c6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    17c8:	15 c0       	rjmp	.+42     	; 0x17f4 <__vector_10+0x74>
    17ca:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    17ce:	81 ff       	sbrs	r24, 1
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <__vector_10+0x74>
    17d2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    17d6:	8d 7f       	andi	r24, 0xFD	; 253
    17d8:	80 93 9f 00 	sts	0x009F, r24
    17dc:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    17e0:	8e 7f       	andi	r24, 0xFE	; 254
    17e2:	80 93 9f 00 	sts	0x009F, r24
    17e6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    17ea:	8d 7f       	andi	r24, 0xFD	; 253
    17ec:	80 93 a0 00 	sts	0x00A0, r24
    17f0:	aa d8       	rcall	.-3756   	; 0x946 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    17f2:	5b df       	rcall	.-330    	; 0x16aa <USB_ResetInterface>
    17f4:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    17f8:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    17fa:	15 c0       	rjmp	.+42     	; 0x1826 <__vector_10+0xa6>
    17fc:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1800:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <__vector_10+0xa6>
    1804:	80 91 df 00 	lds	r24, 0x00DF
    1808:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    180a:	80 93 df 00 	sts	0x00DF, r24
    180e:	77 98       	cbi	0x0e, 7	; 14
    1810:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1814:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1816:	80 93 dd 00 	sts	0x00DD, r24
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	f3 d8       	rcall	.-3610   	; 0xa04 <EVENT_USB_Host_HostError>
    181e:	93 d8       	rcall	.-3802   	; 0x946 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 1e 05 	sts	0x051E, r24
		EVENT_USB_Host_DeviceUnattached();
    1826:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    182a:	80 ff       	sbrs	r24, 0
    182c:	17 c0       	rjmp	.+46     	; 0x185c <__vector_10+0xdc>
    182e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1832:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1834:	13 c0       	rjmp	.+38     	; 0x185c <__vector_10+0xdc>
    1836:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    183a:	8e 7f       	andi	r24, 0xFE	; 254
    183c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1840:	80 91 de 00 	lds	r24, 0x00DE
    1844:	8e 7f       	andi	r24, 0xFE	; 254
    1846:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    184a:	77 d8       	rcall	.-3858   	; 0x93a <EVENT_USB_Host_DeviceAttached>
    184c:	80 91 a0 00 	lds	r24, 0x00A0
    1850:	82 60       	ori	r24, 0x02	; 2
    1852:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1856:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1858:	80 93 1e 05 	sts	0x051E, r24
    185c:	80 91 df 00 	lds	r24, 0x00DF
    1860:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1862:	0e c0       	rjmp	.+28     	; 0x1880 <__vector_10+0x100>
    1864:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1868:	82 ff       	sbrs	r24, 2
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    186c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1870:	8b 7f       	andi	r24, 0xFB	; 251
    1872:	80 93 df 00 	sts	0x00DF, r24
    1876:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	db d8       	rcall	.-3658   	; 0xa32 <EVENT_USB_Host_DeviceEnumerationFailed>
    187c:	64 d8       	rcall	.-3896   	; 0x946 <EVENT_USB_Host_DeviceUnattached>
    187e:	15 df       	rcall	.-470    	; 0x16aa <USB_ResetInterface>
    1880:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23

		USB_ResetInterface();
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0b be       	out	0x3b, r0	; 59
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    18ac:	eb 01       	movw	r28, r22
    18ae:	a8 81       	ld	r26, Y
    18b0:	b9 81       	ldd	r27, Y+1	; 0x01
    18b2:	8c 91       	ld	r24, X
    18b4:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    18b6:	20 81       	ld	r18, Z
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	82 17       	cp	r24, r18
    18bc:	93 07       	cpc	r25, r19
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <USB_GetNextDescriptor+0x1c>
    18c0:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    18c2:	a2 0f       	add	r26, r18
    18c4:	b3 1f       	adc	r27, r19
    18c6:	eb 01       	movw	r28, r22
    18c8:	b9 83       	std	Y+1, r27	; 0x01
    18ca:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	82 1b       	sub	r24, r18
    18d2:	93 0b       	sbc	r25, r19
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
			}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	29 97       	sbiw	r28, 0x09	; 9
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	7b 01       	movw	r14, r22
    1900:	8a 01       	movw	r16, r20
    1902:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1904:	90 e8       	ldi	r25, 0x80	; 128
    1906:	90 93 16 05 	sts	0x0516, r25
    190a:	96 e0       	ldi	r25, 0x06	; 6
    190c:	90 93 17 05 	sts	0x0517, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1910:	e8 2f       	mov	r30, r24
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	31 97       	sbiw	r30, 0x01	; 1
    1916:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1918:	f0 93 19 05 	sts	0x0519, r31
    191c:	e0 93 18 05 	sts	0x0518, r30
    1920:	10 92 1b 05 	sts	0x051B, r1
    1924:	10 92 1a 05 	sts	0x051A, r1
    1928:	89 e0       	ldi	r24, 0x09	; 9
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	90 93 1d 05 	sts	0x051D, r25
    1930:	80 93 1c 05 	sts	0x051C, r24
    1934:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	84 d0       	rcall	.+264    	; 0x1a46 <USB_Host_SendControlRequest>
    193e:	81 11       	cpse	r24, r1
    1940:	19 c0       	rjmp	.+50     	; 0x1974 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1942:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1944:	fc 81       	ldd	r31, Y+4	; 0x04
    1946:	d7 01       	movw	r26, r14
    1948:	ed 93       	st	X+, r30
    194a:	fc 93       	st	X, r31
    194c:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    194e:	df 06       	cpc	r13, r31
    1950:	70 f0       	brcs	.+28     	; 0x196e <USB_Host_GetDeviceConfigDescriptor+0x90>
    1952:	f0 93 1d 05 	sts	0x051D, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1956:	e0 93 1c 05 	sts	0x051C, r30
    195a:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    195c:	74 d0       	rcall	.+232    	; 0x1a46 <USB_Host_SendControlRequest>
    195e:	81 11       	cpse	r24, r1
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1962:	f8 01       	movw	r30, r16
    1964:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	21 f0       	breq	.+8      	; 0x1972 <USB_Host_GetDeviceConfigDescriptor+0x94>
    196a:	86 e0       	ldi	r24, 0x06	; 6
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    196e:	85 e0       	ldi	r24, 0x05	; 5
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1976:	0f b6       	in	r0, 0x3f	; 63
}
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	08 95       	ret

00001992 <USB_GetNextDescriptorComp>:
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	8c 01       	movw	r16, r24
    19a8:	eb 01       	movw	r28, r22
    19aa:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    19ac:	f8 01       	movw	r30, r16
    19ae:	e0 80       	ld	r14, Z
    19b0:	f1 80       	ldd	r15, Z+1	; 0x01
    19b2:	e1 14       	cp	r14, r1
    19b4:	f1 04       	cpc	r15, r1
    19b6:	99 f0       	breq	.+38     	; 0x19de <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    19b8:	a8 80       	ld	r10, Y
    19ba:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    19bc:	be 01       	movw	r22, r28
    19be:	c8 01       	movw	r24, r16
    19c0:	72 df       	rcall	.-284    	; 0x18a6 <USB_GetNextDescriptor>
    19c2:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    19c4:	99 81       	ldd	r25, Y+1	; 0x01
    19c6:	f6 01       	movw	r30, r12
    19c8:	09 95       	icall
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	79 f3       	breq	.-34     	; 0x19ac <USB_GetNextDescriptorComp+0x1a>
    19ce:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <USB_GetNextDescriptorComp+0x4e>
    19d2:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    19d4:	a8 82       	st	Y, r10
    19d6:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    19d8:	f1 82       	std	Z+1, r15	; 0x01
    19da:	e0 82       	st	Z, r14
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <USB_GetNextDescriptorComp+0x4e>
    19de:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    19e0:	df 91       	pop	r29
}
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	08 95       	ret

000019f6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    19f6:	08 95       	ret

000019f8 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a00:	c9 ee       	ldi	r28, 0xE9	; 233
    1a02:	d3 e0       	ldi	r29, 0x03	; 3
    1a04:	11 11       	cpse	r17, r1
    1a06:	0d c0       	rjmp	.+26     	; 0x1a22 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1a08:	80 91 a6 00 	lds	r24, 0x00A6
    1a0c:	83 fd       	sbrc	r24, 3
    1a0e:	16 c0       	rjmp	.+44     	; 0x1a3c <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	ff db       	rcall	.-2050   	; 0x1212 <USB_Host_WaitMS>
    1a14:	81 11       	cpse	r24, r1
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <USB_Host_WaitForIOS+0x46>
    1a18:	21 97       	sbiw	r28, 0x01	; 1
    1a1a:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1a1c:	99 f7       	brne	.-26     	; 0x1a04 <USB_Host_WaitForIOS+0xc>
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1a20:	0e c0       	rjmp	.+28     	; 0x1a3e <USB_Host_WaitForIOS+0x46>
    1a22:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <USB_Host_WaitForIOS+0x38>
    1a26:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1a2a:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1a2c:	f1 cf       	rjmp	.-30     	; 0x1a10 <USB_Host_WaitForIOS+0x18>
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <USB_Host_WaitForIOS+0x44>
    1a30:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a32:	71 f7       	brne	.-36     	; 0x1a10 <USB_Host_WaitForIOS+0x18>
    1a34:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1a38:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1a3a:	ea cf       	rjmp	.-44     	; 0x1a10 <USB_Host_WaitForIOS+0x18>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1a3e:	df 91       	pop	r29
}
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	08 95       	ret

00001a46 <USB_Host_SendControlRequest>:
    1a46:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1a52:	f0 90 9e 00 	lds	r15, 0x009E
    1a56:	8f 2d       	mov	r24, r15
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1a5c:	c0 91 1c 05 	lds	r28, 0x051C
    1a60:	d0 91 1d 05 	lds	r29, 0x051D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1a64:	80 91 9e 00 	lds	r24, 0x009E
    1a68:	81 60       	ori	r24, 0x01	; 1
    1a6a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	d0 db       	rcall	.-2144   	; 0x1212 <USB_Host_WaitMS>
    1a72:	81 11       	cpse	r24, r1
    1a74:	cc c0       	rjmp	.+408    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1a76:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a7a:	8f 7c       	andi	r24, 0xCF	; 207
    1a7c:	80 93 aa 00 	sts	0x00AA, r24
    1a80:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1a84:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1a88:	8f 7e       	andi	r24, 0xEF	; 239
    1a8a:	80 93 a6 00 	sts	0x00A6, r24
    1a8e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a92:	8f 7b       	andi	r24, 0xBF	; 191
    1a94:	80 93 a9 00 	sts	0x00A9, r24
    1a98:	e6 e1       	ldi	r30, 0x16	; 22
    1a9a:	f5 e0       	ldi	r31, 0x05	; 5
    1a9c:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1a9e:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1aa2:	85 e0       	ldi	r24, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1aa4:	ee 31       	cpi	r30, 0x1E	; 30
    1aa6:	f8 07       	cpc	r31, r24
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <USB_Host_SendControlRequest+0x56>
    1aaa:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1aae:	87 77       	andi	r24, 0x77	; 119
    1ab0:	80 93 a6 00 	sts	0x00A6, r24
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1ab6:	a0 df       	rcall	.-192    	; 0x19f8 <USB_Host_WaitForIOS>
    1ab8:	81 11       	cpse	r24, r1
    1aba:	a9 c0       	rjmp	.+338    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1abc:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ac0:	80 64       	ori	r24, 0x40	; 64
    1ac2:	80 93 a9 00 	sts	0x00A9, r24
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	a4 db       	rcall	.-2232   	; 0x1212 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1aca:	81 11       	cpse	r24, r1
    1acc:	a0 c0       	rjmp	.+320    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1ace:	80 91 16 05 	lds	r24, 0x0516
    1ad2:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1ad4:	4e c0       	rjmp	.+156    	; 0x1b72 <USB_Host_SendControlRequest+0x12c>
    1ad6:	80 91 aa 00 	lds	r24, 0x00AA
    1ada:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1adc:	80 61       	ori	r24, 0x10	; 16
    1ade:	80 93 aa 00 	sts	0x00AA, r24
    1ae2:	01 15       	cp	r16, r1
    1ae4:	11 05       	cpc	r17, r1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1ae8:	3a c0       	rjmp	.+116    	; 0x1b5e <USB_Host_SendControlRequest+0x118>
    1aea:	80 91 aa 00 	lds	r24, 0x00AA
    1aee:	8f 7c       	andi	r24, 0xCF	; 207
    1af0:	80 62       	ori	r24, 0x20	; 32
    1af2:	80 93 aa 00 	sts	0x00AA, r24
    1af6:	80 91 a9 00 	lds	r24, 0x00A9
    1afa:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1afc:	80 93 a9 00 	sts	0x00A9, r24
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	7a df       	rcall	.-268    	; 0x19f8 <USB_Host_WaitForIOS>
    1b04:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b06:	83 c0       	rjmp	.+262    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1b08:	80 91 a6 00 	lds	r24, 0x00A6
    1b0c:	8b 77       	andi	r24, 0x7B	; 123
    1b0e:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	71 df       	rcall	.-286    	; 0x19f8 <USB_Host_WaitForIOS>
    1b16:	7b c0       	rjmp	.+246    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1b18:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b1c:	8f 7b       	andi	r24, 0xBF	; 191
    1b1e:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	69 df       	rcall	.-302    	; 0x19f8 <USB_Host_WaitForIOS>
    1b26:	81 11       	cpse	r24, r1
    1b28:	72 c0       	rjmp	.+228    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1b2a:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b2e:	90 91 f7 00 	lds	r25, 0x00F7
    1b32:	89 2b       	or	r24, r25
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b36:	c0 e0       	ldi	r28, 0x00	; 0
    1b38:	d0 e0       	ldi	r29, 0x00	; 0
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1b3e:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1b42:	90 91 f7 00 	lds	r25, 0x00F7
    1b46:	89 2b       	or	r24, r25
    1b48:	69 f4       	brne	.+26     	; 0x1b64 <USB_Host_SendControlRequest+0x11e>
    1b4a:	80 91 a9 00 	lds	r24, 0x00A9
    1b4e:	80 64       	ori	r24, 0x40	; 64
    1b50:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1b54:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b58:	8e 77       	andi	r24, 0x7E	; 126
    1b5a:	80 93 a6 00 	sts	0x00A6, r24
    1b5e:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b60:	d9 f6       	brne	.-74     	; 0x1b18 <USB_Host_SendControlRequest+0xd2>
    1b62:	c3 cf       	rjmp	.-122    	; 0x1aea <USB_Host_SendControlRequest+0xa4>
    1b64:	20 97       	sbiw	r28, 0x00	; 0
    1b66:	89 f3       	breq	.-30     	; 0x1b4a <USB_Host_SendControlRequest+0x104>
    1b68:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1b6c:	81 93       	st	Z+, r24
    1b6e:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1b70:	e5 cf       	rjmp	.-54     	; 0x1b3c <USB_Host_SendControlRequest+0xf6>
    1b72:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1b74:	11 05       	cpc	r17, r1
    1b76:	b1 f1       	breq	.+108    	; 0x1be4 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1b78:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1b7c:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1b7e:	80 62       	ori	r24, 0x20	; 32
    1b80:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b84:	80 91 a9 00 	lds	r24, 0x00A9
    1b88:	8f 7b       	andi	r24, 0xBF	; 191
    1b8a:	80 93 a9 00 	sts	0x00A9, r24
    1b8e:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b90:	20 97       	sbiw	r28, 0x00	; 0
    1b92:	01 f1       	breq	.+64     	; 0x1bd4 <USB_Host_SendControlRequest+0x18e>
    1b94:	31 df       	rcall	.-414    	; 0x19f8 <USB_Host_WaitForIOS>
    1b96:	81 11       	cpse	r24, r1
    1b98:	3a c0       	rjmp	.+116    	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b9a:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1b9c:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ba0:	30 91 f7 00 	lds	r19, 0x00F7
    1ba4:	80 91 17 01 	lds	r24, 0x0117
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	58 f4       	brcc	.+22     	; 0x1bc6 <USB_Host_SendControlRequest+0x180>
    1bb0:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	8c 01       	movw	r16, r24
    1bb6:	20 81       	ld	r18, Z
    1bb8:	20 93 af 00 	sts	0x00AF, r18
    1bbc:	21 97       	sbiw	r28, 0x01	; 1
    1bbe:	20 97       	sbiw	r28, 0x00	; 0
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <USB_Host_SendControlRequest+0x182>
    1bc2:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1bc4:	eb cf       	rjmp	.-42     	; 0x1b9c <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1bc6:	8f 01       	movw	r16, r30
    1bc8:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1bcc:	8b 77       	andi	r24, 0x7B	; 123
    1bce:	80 93 a6 00 	sts	0x00A6, r24
    1bd2:	dd cf       	rjmp	.-70     	; 0x1b8e <USB_Host_SendControlRequest+0x148>
    1bd4:	11 df       	rcall	.-478    	; 0x19f8 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	1a c0       	rjmp	.+52     	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1bda:	80 91 a9 00 	lds	r24, 0x00A9
    1bde:	80 64       	ori	r24, 0x40	; 64
    1be0:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1be4:	80 91 aa 00 	lds	r24, 0x00AA
    1be8:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bea:	80 61       	ori	r24, 0x10	; 16
    1bec:	80 93 aa 00 	sts	0x00AA, r24
    1bf0:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bf4:	8f 7b       	andi	r24, 0xBF	; 191
    1bf6:	80 93 a9 00 	sts	0x00A9, r24
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	fd de       	rcall	.-518    	; 0x19f8 <USB_Host_WaitForIOS>
    1bfe:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c00:	06 c0       	rjmp	.+12     	; 0x1c0e <USB_Host_SendControlRequest+0x1c8>
    1c02:	80 91 a6 00 	lds	r24, 0x00A6
    1c06:	8e 77       	andi	r24, 0x7E	; 126
    1c08:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 91 a9 00 	lds	r25, 0x00A9
    1c12:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c14:	90 93 a9 00 	sts	0x00A9, r25
    1c18:	f1 10       	cpse	r15, r1
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <USB_Host_SendControlRequest+0x1e0>
    1c1c:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c20:	9e 7f       	andi	r25, 0xFE	; 254
    1c22:	90 93 9e 00 	sts	0x009E, r25
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1c2c:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1c38:	ff 90       	pop	r15
    1c3a:	08 95       	ret

00001c3c <USB_Host_SetDeviceConfiguration>:
    1c3c:	cf 93       	push	r28
				UPRST = 0;
    1c3e:	c8 2f       	mov	r28, r24
    1c40:	10 92 16 05 	sts	0x0516, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1c44:	89 e0       	ldi	r24, 0x09	; 9
    1c46:	80 93 17 05 	sts	0x0517, r24
    1c4a:	2c 2f       	mov	r18, r28
    1c4c:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1c4e:	30 93 19 05 	sts	0x0519, r19
    1c52:	20 93 18 05 	sts	0x0518, r18
    1c56:	10 92 1b 05 	sts	0x051B, r1
    1c5a:	10 92 1a 05 	sts	0x051A, r1
    1c5e:	10 92 1d 05 	sts	0x051D, r1
    1c62:	10 92 1c 05 	sts	0x051C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c66:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	eb de       	rcall	.-554    	; 0x1a46 <USB_Host_SendControlRequest>
    1c70:	81 11       	cpse	r24, r1
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <USB_Host_SetDeviceConfiguration+0x4a>
    1c74:	c0 93 14 05 	sts	0x0514, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1c78:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1c7a:	11 f0       	breq	.+4      	; 0x1c80 <USB_Host_SetDeviceConfiguration+0x44>
    1c7c:	9b e0       	ldi	r25, 0x0B	; 11
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <USB_Host_SetDeviceConfiguration+0x46>
    1c80:	9a e0       	ldi	r25, 0x0A	; 10
    1c82:	90 93 1e 05 	sts	0x051E, r25
    1c86:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1c88:	08 95       	ret

00001c8a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1c8a:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1c8c:	c0 91 a7 00 	lds	r28, 0x00A7
    1c90:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1c92:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c96:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1c9a:	08 db       	rcall	.-2544   	; 0x12ac <USB_Host_ProcessNextHostState>
    1c9c:	c0 93 a7 00 	sts	0x00A7, r28
    1ca0:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1ca2:	08 95       	ret

00001ca4 <DCOMP_HID_Host_NextHIDInterface>:

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	21 81       	ldd	r18, Z+1	; 0x01
    1ca8:	24 30       	cpi	r18, 0x04	; 4
    1caa:	29 f4       	brne	.+10     	; 0x1cb6 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1cac:	85 81       	ldd	r24, Z+5	; 0x05
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	11 f4       	brne	.+4      	; 0x1cb6 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
}
    1cb8:	08 95       	ret

00001cba <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1cba:	fc 01       	movw	r30, r24
    1cbc:	81 81       	ldd	r24, Z+1	; 0x01
    1cbe:	81 32       	cpi	r24, 0x21	; 33
    1cc0:	21 f0       	breq	.+8      	; 0x1cca <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1cce:	82 e0       	ldi	r24, 0x02	; 2
}
    1cd0:	08 95       	ret

00001cd2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	21 81       	ldd	r18, Z+1	; 0x01
    1cd6:	25 30       	cpi	r18, 0x05	; 5
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	a4 dc       	rcall	.-1720   	; 0x1626 <Pipe_IsEndpointBound>
    1cde:	88 23       	and	r24, r24
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1ce4:	08 95       	ret
    1ce6:	24 30       	cpi	r18, 0x04	; 4
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1cec:	08 95       	ret
    1cee:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1cf0:	08 95       	ret

00001cf2 <HID_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1cf2:	6f 92       	push	r6
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <HID_Host_ConfigurePipes+0x1e>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <HID_Host_ConfigurePipes+0x20>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	8c 01       	movw	r16, r24
    1d18:	7a 83       	std	Y+2, r23	; 0x02
    1d1a:	69 83       	std	Y+1, r22	; 0x01
    1d1c:	5c 83       	std	Y+4, r21	; 0x04
    1d1e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1d20:	fc 01       	movw	r30, r24
    1d22:	3f 96       	adiw	r30, 0x0f	; 15
    1d24:	88 e0       	ldi	r24, 0x08	; 8
    1d26:	df 01       	movw	r26, r30
    1d28:	1d 92       	st	X+, r1
    1d2a:	8a 95       	dec	r24
    1d2c:	e9 f7       	brne	.-6      	; 0x1d28 <HID_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1d2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d30:	fc 81       	ldd	r31, Y+4	; 0x04
    1d32:	81 81       	ldd	r24, Z+1	; 0x01
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <HID_Host_ConfigurePipes+0x48>
    1d38:	9d c0       	rjmp	.+314    	; 0x1e74 <HID_Host_ConfigurePipes+0x182>
    1d3a:	81 2c       	mov	r8, r1
    1d3c:	91 2c       	mov	r9, r1
    1d3e:	c1 2c       	mov	r12, r1
    1d40:	d1 2c       	mov	r13, r1
    1d42:	61 2c       	mov	r6, r1
    1d44:	71 2c       	mov	r7, r1
    1d46:	a1 2c       	mov	r10, r1
    1d48:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1d4a:	c1 14       	cp	r12, r1
    1d4c:	d1 04       	cpc	r13, r1
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <HID_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1d50:	a1 14       	cp	r10, r1
    1d52:	b1 04       	cpc	r11, r1
    1d54:	b9 f0       	breq	.+46     	; 0x1d84 <HID_Host_ConfigurePipes+0x92>
    1d56:	41 c0       	rjmp	.+130    	; 0x1dda <HID_Host_ConfigurePipes+0xe8>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d58:	49 e6       	ldi	r20, 0x69	; 105
    1d5a:	5e e0       	ldi	r21, 0x0E	; 14
    1d5c:	be 01       	movw	r22, r28
    1d5e:	6d 5f       	subi	r22, 0xFD	; 253
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	ce 01       	movw	r24, r28
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	15 de       	rcall	.-982    	; 0x1992 <USB_GetNextDescriptorComp>
    1d68:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1d6a:	f2 cf       	rjmp	.-28     	; 0x1d50 <HID_Host_ConfigurePipes+0x5e>
    1d6c:	27 c0       	rjmp	.+78     	; 0x1dbc <HID_Host_ConfigurePipes+0xca>
    1d6e:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1d70:	dc 80       	ldd	r13, Y+4	; 0x04
    1d72:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1d74:	84 85       	ldd	r24, Z+12	; 0x0c
    1d76:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1d78:	89 f0       	breq	.+34     	; 0x1d9c <HID_Host_ConfigurePipes+0xaa>
    1d7a:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1d7c:	17 96       	adiw	r26, 0x07	; 7
    1d7e:	9c 91       	ld	r25, X
    1d80:	98 17       	cp	r25, r24
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <HID_Host_ConfigurePipes+0xaa>
    1d84:	42 e5       	ldi	r20, 0x52	; 82
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d86:	5e e0       	ldi	r21, 0x0E	; 14
    1d88:	be 01       	movw	r22, r28
    1d8a:	6d 5f       	subi	r22, 0xFD	; 253
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	ff dd       	rcall	.-1026   	; 0x1992 <USB_GetNextDescriptorComp>
    1d94:	88 23       	and	r24, r24
    1d96:	59 f3       	breq	.-42     	; 0x1d6e <HID_Host_ConfigurePipes+0x7c>
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	6d c0       	rjmp	.+218    	; 0x1e76 <HID_Host_ConfigurePipes+0x184>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1d9c:	4d e5       	ldi	r20, 0x5D	; 93
    1d9e:	5e e0       	ldi	r21, 0x0E	; 14

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1da0:	be 01       	movw	r22, r28
    1da2:	6d 5f       	subi	r22, 0xFD	; 253
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	ce 01       	movw	r24, r28
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	f3 dd       	rcall	.-1050   	; 0x1992 <USB_GetNextDescriptorComp>
    1dac:	81 11       	cpse	r24, r1
    1dae:	f4 cf       	rjmp	.-24     	; 0x1d98 <HID_Host_ConfigurePipes+0xa6>
    1db0:	8b 80       	ldd	r8, Y+3	; 0x03
    1db2:	9c 80       	ldd	r9, Y+4	; 0x04
    1db4:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1db6:	f1 2c       	mov	r15, r1
    1db8:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1dba:	c7 cf       	rjmp	.-114    	; 0x1d4a <HID_Host_ConfigurePipes+0x58>
    1dbc:	eb 80       	ldd	r14, Y+3	; 0x03
    1dbe:	fc 80       	ldd	r15, Y+4	; 0x04
    1dc0:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <HID_Host_ConfigurePipes+0xda>
    1dc8:	57 01       	movw	r10, r14
    1dca:	73 01       	movw	r14, r6
    1dcc:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    1dce:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1dd0:	99 f3       	breq	.-26     	; 0x1db8 <HID_Host_ConfigurePipes+0xc6>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1dd2:	e1 14       	cp	r14, r1
    1dd4:	f1 04       	cpc	r15, r1
    1dd6:	81 f3       	breq	.-32     	; 0x1db8 <HID_Host_ConfigurePipes+0xc6>
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <HID_Host_ConfigurePipes+0xea>
    1dda:	73 01       	movw	r14, r6
    1ddc:	d5 01       	movw	r26, r10
    1dde:	14 96       	adiw	r26, 0x04	; 4
    1de0:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1de2:	9c 91       	ld	r25, X
    1de4:	15 97       	sbiw	r26, 0x05	; 5
    1de6:	f8 01       	movw	r30, r16
    1de8:	92 83       	std	Z+2, r25	; 0x02
    1dea:	81 83       	std	Z+1, r24	; 0x01
    1dec:	12 96       	adiw	r26, 0x02	; 2
    1dee:	8c 91       	ld	r24, X
    1df0:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	b8 2e       	mov	r11, r24
    1df6:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	e1 db       	rcall	.-2110   	; 0x15c0 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1dfe:	81 11       	cpse	r24, r1
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <HID_Host_ConfigurePipes+0x114>
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	38 c0       	rjmp	.+112    	; 0x1e76 <HID_Host_ConfigurePipes+0x184>
    1e06:	e1 14       	cp	r14, r1
    1e08:	f1 04       	cpc	r15, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    1e0a:	f9 f4       	brne	.+62     	; 0x1e4a <HID_Host_ConfigurePipes+0x158>
    1e0c:	d6 01       	movw	r26, r12

	if (DataOUTEndpoint)
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	8c 91       	ld	r24, X
    1e12:	f8 01       	movw	r30, r16

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1e14:	80 8b       	std	Z+16, r24	; 0x10
    1e16:	d4 01       	movw	r26, r8
    1e18:	17 96       	adiw	r26, 0x07	; 7
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1e1e:	18 97       	sbiw	r26, 0x08	; 8
    1e20:	95 8b       	std	Z+21, r25	; 0x15
    1e22:	84 8b       	std	Z+20, r24	; 0x14
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	f6 01       	movw	r30, r12
    1e28:	96 81       	ldd	r25, Z+6	; 0x06
    1e2a:	91 11       	cpse	r25, r1
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1e2c:	01 c0       	rjmp	.+2      	; 0x1e30 <HID_Host_ConfigurePipes+0x13e>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	d8 01       	movw	r26, r16
    1e32:	51 96       	adiw	r26, 0x11	; 17
    1e34:	8c 93       	st	X, r24
    1e36:	51 97       	sbiw	r26, 0x11	; 17
    1e38:	88 e0       	ldi	r24, 0x08	; 8
    1e3a:	56 96       	adiw	r26, 0x16	; 22
    1e3c:	8c 93       	st	X, r24
    1e3e:	56 97       	sbiw	r26, 0x16	; 22
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	1f 96       	adiw	r26, 0x0f	; 15
    1e44:	8c 93       	st	X, r24
    1e46:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.IsActive             = true;
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <HID_Host_ConfigurePipes+0x184>
    1e4a:	f7 01       	movw	r30, r14
    1e4c:	84 81       	ldd	r24, Z+4	; 0x04

	return HID_ENUMERROR_NoError;
    1e4e:	95 81       	ldd	r25, Z+5	; 0x05
    1e50:	d8 01       	movw	r26, r16
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1e52:	18 96       	adiw	r26, 0x08	; 8
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
    1e58:	17 97       	sbiw	r26, 0x07	; 7
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	19 96       	adiw	r26, 0x09	; 9
    1e5e:	8c 93       	st	X, r24
    1e60:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1e62:	1a 96       	adiw	r26, 0x0a	; 10
    1e64:	bc 92       	st	X, r11
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1e6a:	06 96       	adiw	r24, 0x06	; 6
    1e6c:	a9 db       	rcall	.-2222   	; 0x15c0 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1e6e:	88 23       	and	r24, r24
    1e70:	41 f2       	breq	.-112    	; 0x1e02 <HID_Host_ConfigurePipes+0x110>
    1e72:	cc cf       	rjmp	.-104    	; 0x1e0c <HID_Host_ConfigurePipes+0x11a>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1e7e:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	bf 90       	pop	r11
    1e90:	af 90       	pop	r10
    1e92:	9f 90       	pop	r9
    1e94:	8f 90       	pop	r8
    1e96:	7f 90       	pop	r7
    1e98:	6f 90       	pop	r6
    1e9a:	08 95       	ret

00001e9c <HID_Host_SetReportProtocol>:
    1e9c:	cf 92       	push	r12
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1eb2:	cd b6       	in	r12, 0x3d	; 61
    1eb4:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	54 96       	adiw	r26, 0x14	; 20
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	55 97       	sbiw	r26, 0x15	; 21
    1ec0:	ed b7       	in	r30, 0x3d	; 61
    1ec2:	fe b7       	in	r31, 0x3e	; 62
    1ec4:	e8 1b       	sub	r30, r24
    1ec6:	f9 0b       	sbc	r31, r25
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	fe bf       	out	0x3e, r31	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	ed bf       	out	0x3d, r30	; 61
    1ed2:	2d b7       	in	r18, 0x3d	; 61
    1ed4:	3e b7       	in	r19, 0x3e	; 62
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	79 01       	movw	r14, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1edc:	50 96       	adiw	r26, 0x10	; 16
    1ede:	2c 91       	ld	r18, X
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	41 e8       	ldi	r20, 0x81	; 129
    1ee4:	40 93 16 05 	sts	0x0516, r20
    1ee8:	46 e0       	ldi	r20, 0x06	; 6
    1eea:	40 93 17 05 	sts	0x0517, r20
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	52 e2       	ldi	r21, 0x22	; 34
    1ef2:	50 93 19 05 	sts	0x0519, r21
    1ef6:	40 93 18 05 	sts	0x0518, r20
    1efa:	30 93 1b 05 	sts	0x051B, r19
    1efe:	20 93 1a 05 	sts	0x051A, r18
    1f02:	90 93 1d 05 	sts	0x051D, r25
    1f06:	80 93 1c 05 	sts	0x051C, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1f0a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1f0e:	c7 01       	movw	r24, r14
    1f10:	9a dd       	rcall	.-1228   	; 0x1a46 <USB_Host_SendControlRequest>
    1f12:	81 11       	cpse	r24, r1
    1f14:	52 c0       	rjmp	.+164    	; 0x1fba <HID_Host_SetReportProtocol+0x11e>
    1f16:	d8 01       	movw	r26, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1f18:	53 96       	adiw	r26, 0x13	; 19
    1f1a:	8c 91       	ld	r24, X
    1f1c:	53 97       	sbiw	r26, 0x13	; 19
    1f1e:	88 23       	and	r24, r24
    1f20:	f1 f0       	breq	.+60     	; 0x1f5e <HID_Host_SetReportProtocol+0xc2>
    1f22:	50 96       	adiw	r26, 0x10	; 16
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1f24:	8c 91       	ld	r24, X
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	21 e2       	ldi	r18, 0x21	; 33
    1f2a:	20 93 16 05 	sts	0x0516, r18
    1f2e:	2b e0       	ldi	r18, 0x0B	; 11
    1f30:	20 93 17 05 	sts	0x0517, r18
    1f34:	21 e0       	ldi	r18, 0x01	; 1
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	30 93 19 05 	sts	0x0519, r19
    1f3c:	20 93 18 05 	sts	0x0518, r18
    1f40:	90 93 1b 05 	sts	0x051B, r25
    1f44:	80 93 1a 05 	sts	0x051A, r24
    1f48:	10 92 1d 05 	sts	0x051D, r1
    1f4c:	10 92 1c 05 	sts	0x051C, r1
    1f50:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	78 dd       	rcall	.-1296   	; 0x1a46 <USB_Host_SendControlRequest>
    1f56:	81 11       	cpse	r24, r1
    1f58:	30 c0       	rjmp	.+96     	; 0x1fba <HID_Host_SetReportProtocol+0x11e>
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1f5e:	d8 01       	movw	r26, r16
    1f60:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1f62:	4d 91       	ld	r20, X+
    1f64:	5c 91       	ld	r21, X
    1f66:	1e 97       	sbiw	r26, 0x0e	; 14
    1f68:	41 15       	cp	r20, r1
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	29 f1       	breq	.+74     	; 0x1fb8 <HID_Host_SetReportProtocol+0x11c>
    1f6e:	54 96       	adiw	r26, 0x14	; 20
    1f70:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1f72:	7c 91       	ld	r23, X
    1f74:	55 97       	sbiw	r26, 0x15	; 21
    1f76:	c7 01       	movw	r24, r14
    1f78:	0e 94 33 05 	call	0xa66	; 0xa66 <USB_ProcessHIDReport>
    1f7c:	88 23       	and	r24, r24
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <HID_Host_SetReportProtocol+0xe8>
    1f80:	80 68       	ori	r24, 0x80	; 128
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <HID_Host_SetReportProtocol+0x11e>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1f84:	d8 01       	movw	r26, r16
    1f86:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1f88:	ed 91       	ld	r30, X+
    1f8a:	fc 91       	ld	r31, X
    1f8c:	1e 97       	sbiw	r26, 0x0e	; 14
    1f8e:	ea 52       	subi	r30, 0x2A	; 42
    1f90:	fc 4f       	sbci	r31, 0xFC	; 252
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	9c 01       	movw	r18, r24
    1f98:	27 70       	andi	r18, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1f9a:	33 27       	eor	r19, r19
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	23 2b       	or	r18, r19
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <HID_Host_SetReportProtocol+0x108>
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	33 e0       	ldi	r19, 0x03	; 3
    1fa6:	96 95       	lsr	r25
    1fa8:	87 95       	ror	r24
    1faa:	3a 95       	dec	r19
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <HID_Host_SetReportProtocol+0x10a>
    1fae:	84 0f       	add	r24, r20
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	86 8b       	std	Z+22, r24	; 0x16
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <HID_Host_SetReportProtocol+0x11e>

	return 0;
    1fb8:	80 e8       	ldi	r24, 0x80	; 128
    1fba:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1fbc:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1fbe:	de be       	out	0x3e, r13	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd be       	out	0x3d, r12	; 61
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	df 90       	pop	r13
    1fd2:	cf 90       	pop	r12
    1fd4:	08 95       	ret

00001fd6 <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1fd6:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1fda:	95 ff       	sbrs	r25, 5
    1fdc:	fc cf       	rjmp	.-8      	; 0x1fd6 <Serial_putchar>
				UDR1 = DataByte;
    1fde:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	08 95       	ret

00001fe8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1fe8:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1fec:	87 ff       	sbrs	r24, 7
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <Serial_getchar+0x18>
    1ff0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ff4:	87 ff       	sbrs	r24, 7
    1ff6:	07 c0       	rjmp	.+14     	; 0x2006 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1ff8:	80 91 ce 00 	lds	r24, 0x00CE
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	08 95       	ret
	  return _FDEV_EOF;
    2000:	8e ef       	ldi	r24, 0xFE	; 254
    2002:	9f ef       	ldi	r25, 0xFF	; 255
    2004:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    200a:	08 95       	ret

0000200c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    200c:	fc 01       	movw	r30, r24
	if (!(Stream))
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	59 f4       	brne	.+22     	; 0x2028 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    2012:	8f e1       	ldi	r24, 0x1F	; 31
    2014:	95 e0       	ldi	r25, 0x05	; 5
    2016:	90 93 2e 05 	sts	0x052E, r25
    201a:	80 93 2d 05 	sts	0x052D, r24
		stdout = Stream;
    201e:	90 93 30 05 	sts	0x0530, r25
    2022:	80 93 2f 05 	sts	0x052F, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    2026:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    2028:	8e e0       	ldi	r24, 0x0E	; 14
    202a:	df 01       	movw	r26, r30
    202c:	1d 92       	st	X+, r1
    202e:	8a 95       	dec	r24
    2030:	e9 f7       	brne	.-6      	; 0x202c <Serial_CreateStream+0x20>
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	83 83       	std	Z+3, r24	; 0x03
    2036:	8b ee       	ldi	r24, 0xEB	; 235
    2038:	9f e0       	ldi	r25, 0x0F	; 15
    203a:	91 87       	std	Z+9, r25	; 0x09
    203c:	80 87       	std	Z+8, r24	; 0x08
    203e:	84 ef       	ldi	r24, 0xF4	; 244
    2040:	9f e0       	ldi	r25, 0x0F	; 15
    2042:	93 87       	std	Z+11, r25	; 0x0b
    2044:	82 87       	std	Z+10, r24	; 0x0a
    2046:	08 95       	ret

00002048 <printf_P>:
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	fe 01       	movw	r30, r28
    2056:	37 96       	adiw	r30, 0x07	; 7
    2058:	61 91       	ld	r22, Z+
    205a:	71 91       	ld	r23, Z+
    205c:	0f e2       	ldi	r16, 0x2F	; 47
    205e:	15 e0       	ldi	r17, 0x05	; 5
    2060:	d8 01       	movw	r26, r16
    2062:	8d 91       	ld	r24, X+
    2064:	9c 91       	ld	r25, X
    2066:	dc 01       	movw	r26, r24
    2068:	13 96       	adiw	r26, 0x03	; 3
    206a:	2c 91       	ld	r18, X
    206c:	13 97       	sbiw	r26, 0x03	; 3
    206e:	28 60       	ori	r18, 0x08	; 8
    2070:	13 96       	adiw	r26, 0x03	; 3
    2072:	2c 93       	st	X, r18
    2074:	af 01       	movw	r20, r30
    2076:	3a d0       	rcall	.+116    	; 0x20ec <vfprintf>
    2078:	d8 01       	movw	r26, r16
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	23 81       	ldd	r18, Z+3	; 0x03
    2080:	27 7f       	andi	r18, 0xF7	; 247
    2082:	23 83       	std	Z+3, r18	; 0x03
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <puts_P>:
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	ec 01       	movw	r28, r24
    2098:	e0 91 2f 05 	lds	r30, 0x052F
    209c:	f0 91 30 05 	lds	r31, 0x0530
    20a0:	83 81       	ldd	r24, Z+3	; 0x03
    20a2:	81 ff       	sbrs	r24, 1
    20a4:	1c c0       	rjmp	.+56     	; 0x20de <puts_P+0x50>
    20a6:	00 e0       	ldi	r16, 0x00	; 0
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	fe 01       	movw	r30, r28
    20ac:	84 91       	lpm	r24, Z
    20ae:	60 91 2f 05 	lds	r22, 0x052F
    20b2:	70 91 30 05 	lds	r23, 0x0530
    20b6:	db 01       	movw	r26, r22
    20b8:	18 96       	adiw	r26, 0x08	; 8
    20ba:	ed 91       	ld	r30, X+
    20bc:	fc 91       	ld	r31, X
    20be:	19 97       	sbiw	r26, 0x09	; 9
    20c0:	88 23       	and	r24, r24
    20c2:	39 f0       	breq	.+14     	; 0x20d2 <puts_P+0x44>
    20c4:	09 95       	icall
    20c6:	89 2b       	or	r24, r25
    20c8:	11 f0       	breq	.+4      	; 0x20ce <puts_P+0x40>
    20ca:	0f ef       	ldi	r16, 0xFF	; 255
    20cc:	1f ef       	ldi	r17, 0xFF	; 255
    20ce:	21 96       	adiw	r28, 0x01	; 1
    20d0:	ec cf       	rjmp	.-40     	; 0x20aa <puts_P+0x1c>
    20d2:	8a e0       	ldi	r24, 0x0A	; 10
    20d4:	09 95       	icall
    20d6:	89 2b       	or	r24, r25
    20d8:	11 f4       	brne	.+4      	; 0x20de <puts_P+0x50>
    20da:	c8 01       	movw	r24, r16
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <puts_P+0x54>
    20de:	8f ef       	ldi	r24, 0xFF	; 255
    20e0:	9f ef       	ldi	r25, 0xFF	; 255
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	08 95       	ret

000020ec <vfprintf>:
    20ec:	2f 92       	push	r2
    20ee:	3f 92       	push	r3
    20f0:	4f 92       	push	r4
    20f2:	5f 92       	push	r5
    20f4:	6f 92       	push	r6
    20f6:	7f 92       	push	r7
    20f8:	8f 92       	push	r8
    20fa:	9f 92       	push	r9
    20fc:	af 92       	push	r10
    20fe:	bf 92       	push	r11
    2100:	cf 92       	push	r12
    2102:	df 92       	push	r13
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	2c 97       	sbiw	r28, 0x0c	; 12
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	7c 01       	movw	r14, r24
    2122:	6b 01       	movw	r12, r22
    2124:	8a 01       	movw	r16, r20
    2126:	fc 01       	movw	r30, r24
    2128:	17 82       	std	Z+7, r1	; 0x07
    212a:	16 82       	std	Z+6, r1	; 0x06
    212c:	83 81       	ldd	r24, Z+3	; 0x03
    212e:	81 ff       	sbrs	r24, 1
    2130:	b0 c1       	rjmp	.+864    	; 0x2492 <__stack+0x393>
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	4c 01       	movw	r8, r24
    2138:	f7 01       	movw	r30, r14
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	f6 01       	movw	r30, r12
    213e:	93 fd       	sbrc	r25, 3
    2140:	85 91       	lpm	r24, Z+
    2142:	93 ff       	sbrs	r25, 3
    2144:	81 91       	ld	r24, Z+
    2146:	6f 01       	movw	r12, r30
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <__stack+0x4f>
    214c:	9e c1       	rjmp	.+828    	; 0x248a <__stack+0x38b>
    214e:	85 32       	cpi	r24, 0x25	; 37
    2150:	39 f4       	brne	.+14     	; 0x2160 <__stack+0x61>
    2152:	93 fd       	sbrc	r25, 3
    2154:	85 91       	lpm	r24, Z+
    2156:	93 ff       	sbrs	r25, 3
    2158:	81 91       	ld	r24, Z+
    215a:	6f 01       	movw	r12, r30
    215c:	85 32       	cpi	r24, 0x25	; 37
    215e:	21 f4       	brne	.+8      	; 0x2168 <__stack+0x69>
    2160:	b7 01       	movw	r22, r14
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	c7 d1       	rcall	.+910    	; 0x24f4 <fputc>
    2166:	e8 cf       	rjmp	.-48     	; 0x2138 <__stack+0x39>
    2168:	51 2c       	mov	r5, r1
    216a:	31 2c       	mov	r3, r1
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	20 32       	cpi	r18, 0x20	; 32
    2170:	a0 f4       	brcc	.+40     	; 0x219a <__stack+0x9b>
    2172:	8b 32       	cpi	r24, 0x2B	; 43
    2174:	69 f0       	breq	.+26     	; 0x2190 <__stack+0x91>
    2176:	30 f4       	brcc	.+12     	; 0x2184 <__stack+0x85>
    2178:	80 32       	cpi	r24, 0x20	; 32
    217a:	59 f0       	breq	.+22     	; 0x2192 <__stack+0x93>
    217c:	83 32       	cpi	r24, 0x23	; 35
    217e:	69 f4       	brne	.+26     	; 0x219a <__stack+0x9b>
    2180:	20 61       	ori	r18, 0x10	; 16
    2182:	2c c0       	rjmp	.+88     	; 0x21dc <__stack+0xdd>
    2184:	8d 32       	cpi	r24, 0x2D	; 45
    2186:	39 f0       	breq	.+14     	; 0x2196 <__stack+0x97>
    2188:	80 33       	cpi	r24, 0x30	; 48
    218a:	39 f4       	brne	.+14     	; 0x219a <__stack+0x9b>
    218c:	21 60       	ori	r18, 0x01	; 1
    218e:	26 c0       	rjmp	.+76     	; 0x21dc <__stack+0xdd>
    2190:	22 60       	ori	r18, 0x02	; 2
    2192:	24 60       	ori	r18, 0x04	; 4
    2194:	23 c0       	rjmp	.+70     	; 0x21dc <__stack+0xdd>
    2196:	28 60       	ori	r18, 0x08	; 8
    2198:	21 c0       	rjmp	.+66     	; 0x21dc <__stack+0xdd>
    219a:	27 fd       	sbrc	r18, 7
    219c:	27 c0       	rjmp	.+78     	; 0x21ec <__stack+0xed>
    219e:	30 ed       	ldi	r19, 0xD0	; 208
    21a0:	38 0f       	add	r19, r24
    21a2:	3a 30       	cpi	r19, 0x0A	; 10
    21a4:	78 f4       	brcc	.+30     	; 0x21c4 <__stack+0xc5>
    21a6:	26 ff       	sbrs	r18, 6
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <__stack+0xb7>
    21aa:	fa e0       	ldi	r31, 0x0A	; 10
    21ac:	5f 9e       	mul	r5, r31
    21ae:	30 0d       	add	r19, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	53 2e       	mov	r5, r19
    21b4:	13 c0       	rjmp	.+38     	; 0x21dc <__stack+0xdd>
    21b6:	8a e0       	ldi	r24, 0x0A	; 10
    21b8:	38 9e       	mul	r3, r24
    21ba:	30 0d       	add	r19, r0
    21bc:	11 24       	eor	r1, r1
    21be:	33 2e       	mov	r3, r19
    21c0:	20 62       	ori	r18, 0x20	; 32
    21c2:	0c c0       	rjmp	.+24     	; 0x21dc <__stack+0xdd>
    21c4:	8e 32       	cpi	r24, 0x2E	; 46
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <__stack+0xd1>
    21c8:	26 fd       	sbrc	r18, 6
    21ca:	5f c1       	rjmp	.+702    	; 0x248a <__stack+0x38b>
    21cc:	20 64       	ori	r18, 0x40	; 64
    21ce:	06 c0       	rjmp	.+12     	; 0x21dc <__stack+0xdd>
    21d0:	8c 36       	cpi	r24, 0x6C	; 108
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__stack+0xd9>
    21d4:	20 68       	ori	r18, 0x80	; 128
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <__stack+0xdd>
    21d8:	88 36       	cpi	r24, 0x68	; 104
    21da:	41 f4       	brne	.+16     	; 0x21ec <__stack+0xed>
    21dc:	f6 01       	movw	r30, r12
    21de:	93 fd       	sbrc	r25, 3
    21e0:	85 91       	lpm	r24, Z+
    21e2:	93 ff       	sbrs	r25, 3
    21e4:	81 91       	ld	r24, Z+
    21e6:	6f 01       	movw	r12, r30
    21e8:	81 11       	cpse	r24, r1
    21ea:	c1 cf       	rjmp	.-126    	; 0x216e <__stack+0x6f>
    21ec:	98 2f       	mov	r25, r24
    21ee:	9f 7d       	andi	r25, 0xDF	; 223
    21f0:	95 54       	subi	r25, 0x45	; 69
    21f2:	93 30       	cpi	r25, 0x03	; 3
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <__stack+0x101>
    21f6:	0c 5f       	subi	r16, 0xFC	; 252
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	ff e3       	ldi	r31, 0x3F	; 63
    21fc:	f9 83       	std	Y+1, r31	; 0x01
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <__stack+0x11b>
    2200:	83 36       	cpi	r24, 0x63	; 99
    2202:	31 f0       	breq	.+12     	; 0x2210 <__stack+0x111>
    2204:	83 37       	cpi	r24, 0x73	; 115
    2206:	71 f0       	breq	.+28     	; 0x2224 <__stack+0x125>
    2208:	83 35       	cpi	r24, 0x53	; 83
    220a:	09 f0       	breq	.+2      	; 0x220e <__stack+0x10f>
    220c:	57 c0       	rjmp	.+174    	; 0x22bc <__stack+0x1bd>
    220e:	21 c0       	rjmp	.+66     	; 0x2252 <__stack+0x153>
    2210:	f8 01       	movw	r30, r16
    2212:	80 81       	ld	r24, Z
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	0e 5f       	subi	r16, 0xFE	; 254
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	44 24       	eor	r4, r4
    221c:	43 94       	inc	r4
    221e:	51 2c       	mov	r5, r1
    2220:	54 01       	movw	r10, r8
    2222:	14 c0       	rjmp	.+40     	; 0x224c <__stack+0x14d>
    2224:	38 01       	movw	r6, r16
    2226:	f2 e0       	ldi	r31, 0x02	; 2
    2228:	6f 0e       	add	r6, r31
    222a:	71 1c       	adc	r7, r1
    222c:	f8 01       	movw	r30, r16
    222e:	a0 80       	ld	r10, Z
    2230:	b1 80       	ldd	r11, Z+1	; 0x01
    2232:	26 ff       	sbrs	r18, 6
    2234:	03 c0       	rjmp	.+6      	; 0x223c <__stack+0x13d>
    2236:	65 2d       	mov	r22, r5
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <__stack+0x141>
    223c:	6f ef       	ldi	r22, 0xFF	; 255
    223e:	7f ef       	ldi	r23, 0xFF	; 255
    2240:	c5 01       	movw	r24, r10
    2242:	2c 87       	std	Y+12, r18	; 0x0c
    2244:	4c d1       	rcall	.+664    	; 0x24de <strnlen>
    2246:	2c 01       	movw	r4, r24
    2248:	83 01       	movw	r16, r6
    224a:	2c 85       	ldd	r18, Y+12	; 0x0c
    224c:	2f 77       	andi	r18, 0x7F	; 127
    224e:	22 2e       	mov	r2, r18
    2250:	16 c0       	rjmp	.+44     	; 0x227e <__stack+0x17f>
    2252:	38 01       	movw	r6, r16
    2254:	f2 e0       	ldi	r31, 0x02	; 2
    2256:	6f 0e       	add	r6, r31
    2258:	71 1c       	adc	r7, r1
    225a:	f8 01       	movw	r30, r16
    225c:	a0 80       	ld	r10, Z
    225e:	b1 80       	ldd	r11, Z+1	; 0x01
    2260:	26 ff       	sbrs	r18, 6
    2262:	03 c0       	rjmp	.+6      	; 0x226a <__stack+0x16b>
    2264:	65 2d       	mov	r22, r5
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <__stack+0x16f>
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f ef       	ldi	r23, 0xFF	; 255
    226e:	c5 01       	movw	r24, r10
    2270:	2c 87       	std	Y+12, r18	; 0x0c
    2272:	2a d1       	rcall	.+596    	; 0x24c8 <strnlen_P>
    2274:	2c 01       	movw	r4, r24
    2276:	2c 85       	ldd	r18, Y+12	; 0x0c
    2278:	20 68       	ori	r18, 0x80	; 128
    227a:	22 2e       	mov	r2, r18
    227c:	83 01       	movw	r16, r6
    227e:	23 fc       	sbrc	r2, 3
    2280:	19 c0       	rjmp	.+50     	; 0x22b4 <__stack+0x1b5>
    2282:	83 2d       	mov	r24, r3
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	48 16       	cp	r4, r24
    2288:	59 06       	cpc	r5, r25
    228a:	a0 f4       	brcc	.+40     	; 0x22b4 <__stack+0x1b5>
    228c:	b7 01       	movw	r22, r14
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	30 d1       	rcall	.+608    	; 0x24f4 <fputc>
    2294:	3a 94       	dec	r3
    2296:	f5 cf       	rjmp	.-22     	; 0x2282 <__stack+0x183>
    2298:	f5 01       	movw	r30, r10
    229a:	27 fc       	sbrc	r2, 7
    229c:	85 91       	lpm	r24, Z+
    229e:	27 fe       	sbrs	r2, 7
    22a0:	81 91       	ld	r24, Z+
    22a2:	5f 01       	movw	r10, r30
    22a4:	b7 01       	movw	r22, r14
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	25 d1       	rcall	.+586    	; 0x24f4 <fputc>
    22aa:	31 10       	cpse	r3, r1
    22ac:	3a 94       	dec	r3
    22ae:	f1 e0       	ldi	r31, 0x01	; 1
    22b0:	4f 1a       	sub	r4, r31
    22b2:	51 08       	sbc	r5, r1
    22b4:	41 14       	cp	r4, r1
    22b6:	51 04       	cpc	r5, r1
    22b8:	79 f7       	brne	.-34     	; 0x2298 <__stack+0x199>
    22ba:	de c0       	rjmp	.+444    	; 0x2478 <__stack+0x379>
    22bc:	84 36       	cpi	r24, 0x64	; 100
    22be:	11 f0       	breq	.+4      	; 0x22c4 <__stack+0x1c5>
    22c0:	89 36       	cpi	r24, 0x69	; 105
    22c2:	31 f5       	brne	.+76     	; 0x2310 <__stack+0x211>
    22c4:	f8 01       	movw	r30, r16
    22c6:	27 ff       	sbrs	r18, 7
    22c8:	07 c0       	rjmp	.+14     	; 0x22d8 <__stack+0x1d9>
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0c 5f       	subi	r16, 0xFC	; 252
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <__stack+0x1e9>
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	88 27       	eor	r24, r24
    22de:	77 fd       	sbrc	r23, 7
    22e0:	80 95       	com	r24
    22e2:	98 2f       	mov	r25, r24
    22e4:	0e 5f       	subi	r16, 0xFE	; 254
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	2f 76       	andi	r18, 0x6F	; 111
    22ea:	b2 2e       	mov	r11, r18
    22ec:	97 ff       	sbrs	r25, 7
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <__stack+0x203>
    22f0:	90 95       	com	r25
    22f2:	80 95       	com	r24
    22f4:	70 95       	com	r23
    22f6:	61 95       	neg	r22
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	8f 4f       	sbci	r24, 0xFF	; 255
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	20 68       	ori	r18, 0x80	; 128
    2300:	b2 2e       	mov	r11, r18
    2302:	2a e0       	ldi	r18, 0x0A	; 10
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	a4 01       	movw	r20, r8
    2308:	27 d1       	rcall	.+590    	; 0x2558 <__ultoa_invert>
    230a:	a8 2e       	mov	r10, r24
    230c:	a8 18       	sub	r10, r8
    230e:	43 c0       	rjmp	.+134    	; 0x2396 <__stack+0x297>
    2310:	85 37       	cpi	r24, 0x75	; 117
    2312:	29 f4       	brne	.+10     	; 0x231e <__stack+0x21f>
    2314:	2f 7e       	andi	r18, 0xEF	; 239
    2316:	b2 2e       	mov	r11, r18
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	25 c0       	rjmp	.+74     	; 0x2368 <__stack+0x269>
    231e:	f2 2f       	mov	r31, r18
    2320:	f9 7f       	andi	r31, 0xF9	; 249
    2322:	bf 2e       	mov	r11, r31
    2324:	8f 36       	cpi	r24, 0x6F	; 111
    2326:	c1 f0       	breq	.+48     	; 0x2358 <__stack+0x259>
    2328:	18 f4       	brcc	.+6      	; 0x2330 <__stack+0x231>
    232a:	88 35       	cpi	r24, 0x58	; 88
    232c:	79 f0       	breq	.+30     	; 0x234c <__stack+0x24d>
    232e:	ad c0       	rjmp	.+346    	; 0x248a <__stack+0x38b>
    2330:	80 37       	cpi	r24, 0x70	; 112
    2332:	19 f0       	breq	.+6      	; 0x233a <__stack+0x23b>
    2334:	88 37       	cpi	r24, 0x78	; 120
    2336:	21 f0       	breq	.+8      	; 0x2340 <__stack+0x241>
    2338:	a8 c0       	rjmp	.+336    	; 0x248a <__stack+0x38b>
    233a:	2f 2f       	mov	r18, r31
    233c:	20 61       	ori	r18, 0x10	; 16
    233e:	b2 2e       	mov	r11, r18
    2340:	b4 fe       	sbrs	r11, 4
    2342:	0d c0       	rjmp	.+26     	; 0x235e <__stack+0x25f>
    2344:	8b 2d       	mov	r24, r11
    2346:	84 60       	ori	r24, 0x04	; 4
    2348:	b8 2e       	mov	r11, r24
    234a:	09 c0       	rjmp	.+18     	; 0x235e <__stack+0x25f>
    234c:	24 ff       	sbrs	r18, 4
    234e:	0a c0       	rjmp	.+20     	; 0x2364 <__stack+0x265>
    2350:	9f 2f       	mov	r25, r31
    2352:	96 60       	ori	r25, 0x06	; 6
    2354:	b9 2e       	mov	r11, r25
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <__stack+0x265>
    2358:	28 e0       	ldi	r18, 0x08	; 8
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <__stack+0x269>
    235e:	20 e1       	ldi	r18, 0x10	; 16
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <__stack+0x269>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	32 e0       	ldi	r19, 0x02	; 2
    2368:	f8 01       	movw	r30, r16
    236a:	b7 fe       	sbrs	r11, 7
    236c:	07 c0       	rjmp	.+14     	; 0x237c <__stack+0x27d>
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0c 5f       	subi	r16, 0xFC	; 252
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <__stack+0x289>
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 5f       	subi	r16, 0xFE	; 254
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	a4 01       	movw	r20, r8
    238a:	e6 d0       	rcall	.+460    	; 0x2558 <__ultoa_invert>
    238c:	a8 2e       	mov	r10, r24
    238e:	a8 18       	sub	r10, r8
    2390:	fb 2d       	mov	r31, r11
    2392:	ff 77       	andi	r31, 0x7F	; 127
    2394:	bf 2e       	mov	r11, r31
    2396:	b6 fe       	sbrs	r11, 6
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <__stack+0x2b1>
    239a:	2b 2d       	mov	r18, r11
    239c:	2e 7f       	andi	r18, 0xFE	; 254
    239e:	a5 14       	cp	r10, r5
    23a0:	50 f4       	brcc	.+20     	; 0x23b6 <__stack+0x2b7>
    23a2:	b4 fe       	sbrs	r11, 4
    23a4:	0a c0       	rjmp	.+20     	; 0x23ba <__stack+0x2bb>
    23a6:	b2 fc       	sbrc	r11, 2
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <__stack+0x2bb>
    23aa:	2b 2d       	mov	r18, r11
    23ac:	2e 7e       	andi	r18, 0xEE	; 238
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <__stack+0x2bb>
    23b0:	7a 2c       	mov	r7, r10
    23b2:	2b 2d       	mov	r18, r11
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <__stack+0x2bd>
    23b6:	7a 2c       	mov	r7, r10
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <__stack+0x2bd>
    23ba:	75 2c       	mov	r7, r5
    23bc:	24 ff       	sbrs	r18, 4
    23be:	0d c0       	rjmp	.+26     	; 0x23da <__stack+0x2db>
    23c0:	fe 01       	movw	r30, r28
    23c2:	ea 0d       	add	r30, r10
    23c4:	f1 1d       	adc	r31, r1
    23c6:	80 81       	ld	r24, Z
    23c8:	80 33       	cpi	r24, 0x30	; 48
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <__stack+0x2d1>
    23cc:	29 7e       	andi	r18, 0xE9	; 233
    23ce:	09 c0       	rjmp	.+18     	; 0x23e2 <__stack+0x2e3>
    23d0:	22 ff       	sbrs	r18, 2
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <__stack+0x2e1>
    23d4:	73 94       	inc	r7
    23d6:	73 94       	inc	r7
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <__stack+0x2e3>
    23da:	82 2f       	mov	r24, r18
    23dc:	86 78       	andi	r24, 0x86	; 134
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__stack+0x2e3>
    23e0:	73 94       	inc	r7
    23e2:	23 fd       	sbrc	r18, 3
    23e4:	12 c0       	rjmp	.+36     	; 0x240a <__stack+0x30b>
    23e6:	20 ff       	sbrs	r18, 0
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <__stack+0x2f7>
    23ea:	5a 2c       	mov	r5, r10
    23ec:	73 14       	cp	r7, r3
    23ee:	18 f4       	brcc	.+6      	; 0x23f6 <__stack+0x2f7>
    23f0:	53 0c       	add	r5, r3
    23f2:	57 18       	sub	r5, r7
    23f4:	73 2c       	mov	r7, r3
    23f6:	73 14       	cp	r7, r3
    23f8:	60 f4       	brcc	.+24     	; 0x2412 <__stack+0x313>
    23fa:	b7 01       	movw	r22, r14
    23fc:	80 e2       	ldi	r24, 0x20	; 32
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	2c 87       	std	Y+12, r18	; 0x0c
    2402:	78 d0       	rcall	.+240    	; 0x24f4 <fputc>
    2404:	73 94       	inc	r7
    2406:	2c 85       	ldd	r18, Y+12	; 0x0c
    2408:	f6 cf       	rjmp	.-20     	; 0x23f6 <__stack+0x2f7>
    240a:	73 14       	cp	r7, r3
    240c:	10 f4       	brcc	.+4      	; 0x2412 <__stack+0x313>
    240e:	37 18       	sub	r3, r7
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <__stack+0x315>
    2412:	31 2c       	mov	r3, r1
    2414:	24 ff       	sbrs	r18, 4
    2416:	11 c0       	rjmp	.+34     	; 0x243a <__stack+0x33b>
    2418:	b7 01       	movw	r22, r14
    241a:	80 e3       	ldi	r24, 0x30	; 48
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	2c 87       	std	Y+12, r18	; 0x0c
    2420:	69 d0       	rcall	.+210    	; 0x24f4 <fputc>
    2422:	2c 85       	ldd	r18, Y+12	; 0x0c
    2424:	22 ff       	sbrs	r18, 2
    2426:	16 c0       	rjmp	.+44     	; 0x2454 <__stack+0x355>
    2428:	21 ff       	sbrs	r18, 1
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <__stack+0x333>
    242c:	88 e5       	ldi	r24, 0x58	; 88
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <__stack+0x337>
    2432:	88 e7       	ldi	r24, 0x78	; 120
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	b7 01       	movw	r22, r14
    2438:	0c c0       	rjmp	.+24     	; 0x2452 <__stack+0x353>
    243a:	82 2f       	mov	r24, r18
    243c:	86 78       	andi	r24, 0x86	; 134
    243e:	51 f0       	breq	.+20     	; 0x2454 <__stack+0x355>
    2440:	21 fd       	sbrc	r18, 1
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <__stack+0x349>
    2444:	80 e2       	ldi	r24, 0x20	; 32
    2446:	01 c0       	rjmp	.+2      	; 0x244a <__stack+0x34b>
    2448:	8b e2       	ldi	r24, 0x2B	; 43
    244a:	27 fd       	sbrc	r18, 7
    244c:	8d e2       	ldi	r24, 0x2D	; 45
    244e:	b7 01       	movw	r22, r14
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	50 d0       	rcall	.+160    	; 0x24f4 <fputc>
    2454:	a5 14       	cp	r10, r5
    2456:	30 f4       	brcc	.+12     	; 0x2464 <__stack+0x365>
    2458:	b7 01       	movw	r22, r14
    245a:	80 e3       	ldi	r24, 0x30	; 48
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	4a d0       	rcall	.+148    	; 0x24f4 <fputc>
    2460:	5a 94       	dec	r5
    2462:	f8 cf       	rjmp	.-16     	; 0x2454 <__stack+0x355>
    2464:	aa 94       	dec	r10
    2466:	f4 01       	movw	r30, r8
    2468:	ea 0d       	add	r30, r10
    246a:	f1 1d       	adc	r31, r1
    246c:	80 81       	ld	r24, Z
    246e:	b7 01       	movw	r22, r14
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	40 d0       	rcall	.+128    	; 0x24f4 <fputc>
    2474:	a1 10       	cpse	r10, r1
    2476:	f6 cf       	rjmp	.-20     	; 0x2464 <__stack+0x365>
    2478:	33 20       	and	r3, r3
    247a:	09 f4       	brne	.+2      	; 0x247e <__stack+0x37f>
    247c:	5d ce       	rjmp	.-838    	; 0x2138 <__stack+0x39>
    247e:	b7 01       	movw	r22, r14
    2480:	80 e2       	ldi	r24, 0x20	; 32
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	37 d0       	rcall	.+110    	; 0x24f4 <fputc>
    2486:	3a 94       	dec	r3
    2488:	f7 cf       	rjmp	.-18     	; 0x2478 <__stack+0x379>
    248a:	f7 01       	movw	r30, r14
    248c:	86 81       	ldd	r24, Z+6	; 0x06
    248e:	97 81       	ldd	r25, Z+7	; 0x07
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <__stack+0x397>
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	9f ef       	ldi	r25, 0xFF	; 255
    2496:	2c 96       	adiw	r28, 0x0c	; 12
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	7f 90       	pop	r7
    24bc:	6f 90       	pop	r6
    24be:	5f 90       	pop	r5
    24c0:	4f 90       	pop	r4
    24c2:	3f 90       	pop	r3
    24c4:	2f 90       	pop	r2
    24c6:	08 95       	ret

000024c8 <strnlen_P>:
    24c8:	fc 01       	movw	r30, r24
    24ca:	05 90       	lpm	r0, Z+
    24cc:	61 50       	subi	r22, 0x01	; 1
    24ce:	70 40       	sbci	r23, 0x00	; 0
    24d0:	01 10       	cpse	r0, r1
    24d2:	d8 f7       	brcc	.-10     	; 0x24ca <strnlen_P+0x2>
    24d4:	80 95       	com	r24
    24d6:	90 95       	com	r25
    24d8:	8e 0f       	add	r24, r30
    24da:	9f 1f       	adc	r25, r31
    24dc:	08 95       	ret

000024de <strnlen>:
    24de:	fc 01       	movw	r30, r24
    24e0:	61 50       	subi	r22, 0x01	; 1
    24e2:	70 40       	sbci	r23, 0x00	; 0
    24e4:	01 90       	ld	r0, Z+
    24e6:	01 10       	cpse	r0, r1
    24e8:	d8 f7       	brcc	.-10     	; 0x24e0 <strnlen+0x2>
    24ea:	80 95       	com	r24
    24ec:	90 95       	com	r25
    24ee:	8e 0f       	add	r24, r30
    24f0:	9f 1f       	adc	r25, r31
    24f2:	08 95       	ret

000024f4 <fputc>:
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	18 2f       	mov	r17, r24
    24fe:	09 2f       	mov	r16, r25
    2500:	eb 01       	movw	r28, r22
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	81 fd       	sbrc	r24, 1
    2506:	03 c0       	rjmp	.+6      	; 0x250e <fputc+0x1a>
    2508:	8f ef       	ldi	r24, 0xFF	; 255
    250a:	9f ef       	ldi	r25, 0xFF	; 255
    250c:	20 c0       	rjmp	.+64     	; 0x254e <fputc+0x5a>
    250e:	82 ff       	sbrs	r24, 2
    2510:	10 c0       	rjmp	.+32     	; 0x2532 <fputc+0x3e>
    2512:	4e 81       	ldd	r20, Y+6	; 0x06
    2514:	5f 81       	ldd	r21, Y+7	; 0x07
    2516:	2c 81       	ldd	r18, Y+4	; 0x04
    2518:	3d 81       	ldd	r19, Y+5	; 0x05
    251a:	42 17       	cp	r20, r18
    251c:	53 07       	cpc	r21, r19
    251e:	7c f4       	brge	.+30     	; 0x253e <fputc+0x4a>
    2520:	e8 81       	ld	r30, Y
    2522:	f9 81       	ldd	r31, Y+1	; 0x01
    2524:	9f 01       	movw	r18, r30
    2526:	2f 5f       	subi	r18, 0xFF	; 255
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	39 83       	std	Y+1, r19	; 0x01
    252c:	28 83       	st	Y, r18
    252e:	10 83       	st	Z, r17
    2530:	06 c0       	rjmp	.+12     	; 0x253e <fputc+0x4a>
    2532:	e8 85       	ldd	r30, Y+8	; 0x08
    2534:	f9 85       	ldd	r31, Y+9	; 0x09
    2536:	81 2f       	mov	r24, r17
    2538:	09 95       	icall
    253a:	89 2b       	or	r24, r25
    253c:	29 f7       	brne	.-54     	; 0x2508 <fputc+0x14>
    253e:	2e 81       	ldd	r18, Y+6	; 0x06
    2540:	3f 81       	ldd	r19, Y+7	; 0x07
    2542:	2f 5f       	subi	r18, 0xFF	; 255
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	3f 83       	std	Y+7, r19	; 0x07
    2548:	2e 83       	std	Y+6, r18	; 0x06
    254a:	81 2f       	mov	r24, r17
    254c:	90 2f       	mov	r25, r16
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	08 95       	ret

00002558 <__ultoa_invert>:
    2558:	fa 01       	movw	r30, r20
    255a:	aa 27       	eor	r26, r26
    255c:	28 30       	cpi	r18, 0x08	; 8
    255e:	51 f1       	breq	.+84     	; 0x25b4 <__ultoa_invert+0x5c>
    2560:	20 31       	cpi	r18, 0x10	; 16
    2562:	81 f1       	breq	.+96     	; 0x25c4 <__ultoa_invert+0x6c>
    2564:	e8 94       	clt
    2566:	6f 93       	push	r22
    2568:	6e 7f       	andi	r22, 0xFE	; 254
    256a:	6e 5f       	subi	r22, 0xFE	; 254
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	8f 4f       	sbci	r24, 0xFF	; 255
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	af 4f       	sbci	r26, 0xFF	; 255
    2574:	b1 e0       	ldi	r27, 0x01	; 1
    2576:	3e d0       	rcall	.+124    	; 0x25f4 <__ultoa_invert+0x9c>
    2578:	b4 e0       	ldi	r27, 0x04	; 4
    257a:	3c d0       	rcall	.+120    	; 0x25f4 <__ultoa_invert+0x9c>
    257c:	67 0f       	add	r22, r23
    257e:	78 1f       	adc	r23, r24
    2580:	89 1f       	adc	r24, r25
    2582:	9a 1f       	adc	r25, r26
    2584:	a1 1d       	adc	r26, r1
    2586:	68 0f       	add	r22, r24
    2588:	79 1f       	adc	r23, r25
    258a:	8a 1f       	adc	r24, r26
    258c:	91 1d       	adc	r25, r1
    258e:	a1 1d       	adc	r26, r1
    2590:	6a 0f       	add	r22, r26
    2592:	71 1d       	adc	r23, r1
    2594:	81 1d       	adc	r24, r1
    2596:	91 1d       	adc	r25, r1
    2598:	a1 1d       	adc	r26, r1
    259a:	20 d0       	rcall	.+64     	; 0x25dc <__ultoa_invert+0x84>
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__ultoa_invert+0x48>
    259e:	68 94       	set
    25a0:	3f 91       	pop	r19
    25a2:	2a e0       	ldi	r18, 0x0A	; 10
    25a4:	26 9f       	mul	r18, r22
    25a6:	11 24       	eor	r1, r1
    25a8:	30 19       	sub	r19, r0
    25aa:	30 5d       	subi	r19, 0xD0	; 208
    25ac:	31 93       	st	Z+, r19
    25ae:	de f6       	brtc	.-74     	; 0x2566 <__ultoa_invert+0xe>
    25b0:	cf 01       	movw	r24, r30
    25b2:	08 95       	ret
    25b4:	46 2f       	mov	r20, r22
    25b6:	47 70       	andi	r20, 0x07	; 7
    25b8:	40 5d       	subi	r20, 0xD0	; 208
    25ba:	41 93       	st	Z+, r20
    25bc:	b3 e0       	ldi	r27, 0x03	; 3
    25be:	0f d0       	rcall	.+30     	; 0x25de <__ultoa_invert+0x86>
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <__ultoa_invert+0x5c>
    25c2:	f6 cf       	rjmp	.-20     	; 0x25b0 <__ultoa_invert+0x58>
    25c4:	46 2f       	mov	r20, r22
    25c6:	4f 70       	andi	r20, 0x0F	; 15
    25c8:	40 5d       	subi	r20, 0xD0	; 208
    25ca:	4a 33       	cpi	r20, 0x3A	; 58
    25cc:	18 f0       	brcs	.+6      	; 0x25d4 <__ultoa_invert+0x7c>
    25ce:	49 5d       	subi	r20, 0xD9	; 217
    25d0:	31 fd       	sbrc	r19, 1
    25d2:	40 52       	subi	r20, 0x20	; 32
    25d4:	41 93       	st	Z+, r20
    25d6:	02 d0       	rcall	.+4      	; 0x25dc <__ultoa_invert+0x84>
    25d8:	a9 f7       	brne	.-22     	; 0x25c4 <__ultoa_invert+0x6c>
    25da:	ea cf       	rjmp	.-44     	; 0x25b0 <__ultoa_invert+0x58>
    25dc:	b4 e0       	ldi	r27, 0x04	; 4
    25de:	a6 95       	lsr	r26
    25e0:	97 95       	ror	r25
    25e2:	87 95       	ror	r24
    25e4:	77 95       	ror	r23
    25e6:	67 95       	ror	r22
    25e8:	ba 95       	dec	r27
    25ea:	c9 f7       	brne	.-14     	; 0x25de <__ultoa_invert+0x86>
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	61 05       	cpc	r22, r1
    25f0:	71 05       	cpc	r23, r1
    25f2:	08 95       	ret
    25f4:	9b 01       	movw	r18, r22
    25f6:	ac 01       	movw	r20, r24
    25f8:	0a 2e       	mov	r0, r26
    25fa:	06 94       	lsr	r0
    25fc:	57 95       	ror	r21
    25fe:	47 95       	ror	r20
    2600:	37 95       	ror	r19
    2602:	27 95       	ror	r18
    2604:	ba 95       	dec	r27
    2606:	c9 f7       	brne	.-14     	; 0x25fa <__ultoa_invert+0xa2>
    2608:	62 0f       	add	r22, r18
    260a:	73 1f       	adc	r23, r19
    260c:	84 1f       	adc	r24, r20
    260e:	95 1f       	adc	r25, r21
    2610:	a0 1d       	adc	r26, r0
    2612:	08 95       	ret

00002614 <_exit>:
    2614:	f8 94       	cli

00002616 <__stop_program>:
    2616:	ff cf       	rjmp	.-2      	; 0x2616 <__stop_program>

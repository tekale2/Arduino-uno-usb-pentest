
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002268  000022fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  0000230e  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  00004b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005be2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  00005bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000062e8  00000000  00000000  00005fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ccc  00000000  00000000  0000c2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028bd  00000000  00000000  0000df8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ac0  00000000  00000000  0001084c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027e3  00000000  00000000  0001130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f6a  00000000  00000000  00013aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  00017a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	68 c1       	rjmp	.+720    	; 0x2d2 <__ctors_end>
       2:	00 00       	nop
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c1       	rjmp	.+752    	; 0x30e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c1       	rjmp	.+748    	; 0x30e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_10>
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c1       	rjmp	.+732    	; 0x30e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c1       	rjmp	.+728    	; 0x30e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c1       	rjmp	.+724    	; 0x30e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c1       	rjmp	.+720    	; 0x30e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c1       	rjmp	.+716    	; 0x30e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c1       	rjmp	.+712    	; 0x30e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c1       	rjmp	.+708    	; 0x30e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c1       	rjmp	.+704    	; 0x30e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c1       	rjmp	.+696    	; 0x30e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c1       	rjmp	.+692    	; 0x30e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c1       	rjmp	.+688    	; 0x30e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c1       	rjmp	.+684    	; 0x30e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c1       	rjmp	.+680    	; 0x30e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c1       	rjmp	.+676    	; 0x30e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c1       	rjmp	.+672    	; 0x30e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c1       	rjmp	.+668    	; 0x30e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c1       	rjmp	.+664    	; 0x30e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c1       	rjmp	.+660    	; 0x30e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c1       	rjmp	.+652    	; 0x30e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c1       	rjmp	.+648    	; 0x30e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c1       	rjmp	.+644    	; 0x30e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c1       	rjmp	.+640    	; 0x30e <__bad_interrupt>
      8e:	00 00       	nop
      90:	3e c1       	rjmp	.+636    	; 0x30e <__bad_interrupt>
      92:	00 00       	nop
      94:	3c c1       	rjmp	.+632    	; 0x30e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4586>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4579>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4574>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4572>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4570>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4a 6f 79 73     Not a valid Joys
     15e:	74 69 63 6b 2e 1b 5b 33 37 6d 00                    tick..[37m.

00000169 <__c.4568>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4566>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4564>:
     1ad:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1bd:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1cd:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1dd:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ed:	37 6d 00                                            7m.

000001f0 <__c.4562>:
     1f0:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     200:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020a <__c.4560>:
     20a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21a:	69 63 65 2e 0d 0a 00                                ice....

00000221 <__c.4558>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024b <__c.4555>:
     24b:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25b:	61 74 61 2e 0d 0a 00                                ata....

00000262 <__c.4550>:
     262:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     272:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000281 <__c.4545>:
     281:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     291:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000029e <__c.4536>:
     29e:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 49     .[36mJoystick HI
     2ae:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2be:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2ce:	37 6d 00 00                                         7m..

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf ef       	ldi	r28, 0xFF	; 255
     2d8:	d0 e2       	ldi	r29, 0x20	; 32
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	e8 e6       	ldi	r30, 0x68	; 104
     2e6:	f2 e2       	ldi	r31, 0x22	; 34
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 31       	cpi	r26, 0x12	; 18
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 e1       	ldi	r26, 0x12	; 18
     2fc:	b1 e0       	ldi	r27, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 30       	cpi	r26, 0x0F	; 15
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	a2 d1       	rcall	.+836    	; 0x64e <main>
     30a:	0c 94 32 11 	jmp	0x2264	; 0x2264 <_exit>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     310:	9b b1       	in	r25, 0x0b	; 11
     312:	9f 70       	andi	r25, 0x0F	; 15
     314:	98 2b       	or	r25, r24
     316:	9b b9       	out	0x0b, r25	; 11
     318:	08 95       	ret

0000031a <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     31a:	84 b7       	in	r24, 0x34	; 52
     31c:	87 7f       	andi	r24, 0xF7	; 247
     31e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     320:	88 e1       	ldi	r24, 0x18	; 24
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	80 93 60 00 	sts	0x0060, r24
     32a:	10 92 60 00 	sts	0x0060, r1
     32e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	80 93 61 00 	sts	0x0061, r24
     33c:	90 93 61 00 	sts	0x0061, r25
     340:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     342:	83 e3       	ldi	r24, 0x33	; 51
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 cd 00 	sts	0x00CD, r25
     34a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     354:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     358:	88 e1       	ldi	r24, 0x18	; 24
     35a:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     35e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     360:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     362:	8a b1       	in	r24, 0x0a	; 10
     364:	80 6f       	ori	r24, 0xF0	; 240
     366:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     368:	8b b1       	in	r24, 0x0b	; 11
     36a:	8f 70       	andi	r24, 0x0F	; 15
     36c:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     36e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <Serial_CreateStream>

0000037a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     37a:	81 e8       	ldi	r24, 0x81	; 129
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     382:	80 ea       	ldi	r24, 0xA0	; 160
     384:	c5 cf       	rjmp	.-118    	; 0x310 <LEDs_SetAllLEDs>

00000386 <EVENT_USB_Host_DeviceUnattached>:
     386:	82 e6       	ldi	r24, 0x62	; 98
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     38e:	80 e1       	ldi	r24, 0x10	; 16
     390:	bf cf       	rjmp	.-130    	; 0x310 <LEDs_SetAllLEDs>

00000392 <EVENT_USB_Host_DeviceEnumerationComplete>:
     392:	cf 93       	push	r28
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     394:	8b e4       	ldi	r24, 0x4B	; 75
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     39c:	83 d1       	rcall	.+774    	; 0x6a4 <ProcessConfigurationDescriptor>
     39e:	c8 2f       	mov	r28, r24
     3a0:	88 23       	and	r24, r24
     3a2:	b9 f0       	breq	.+46     	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     3a4:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     3a6:	19 f4       	brne	.+6      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     3a8:	81 e2       	ldi	r24, 0x21	; 33
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     3ae:	8a e0       	ldi	r24, 0x0A	; 10
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
     3b6:	1f 92       	push	r1

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3b8:	cf 93       	push	r28
     3ba:	80 ef       	ldi	r24, 0xF0	; 240
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf_P>
     3c6:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	80 e9       	ldi	r24, 0x90	; 144
     3d0:	42 c0       	rjmp	.+132    	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
     3d2:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3d4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <USB_Host_SetDeviceConfiguration>
     3d8:	88 23       	and	r24, r24
     3da:	29 f0       	breq	.+10     	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     3dc:	1f 92       	push	r1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3de:	8f 93       	push	r24
     3e0:	8d ea       	ldi	r24, 0xAD	; 173
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	ec cf       	rjmp	.-40     	; 0x3be <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     3e6:	80 91 ef 04 	lds	r24, 0x04EF

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     3ea:	8f 93       	push	r24
     3ec:	80 91 ee 04 	lds	r24, 0x04EE
     3f0:	8f 93       	push	r24
     3f2:	84 e8       	ldi	r24, 0x84	; 132
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf_P>
     3fe:	ed d1       	rcall	.+986    	; 0x7da <GetHIDReportData>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     400:	c8 2f       	mov	r28, r24
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	88 23       	and	r24, r24
     40c:	f9 f0       	breq	.+62     	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
     40e:	89 e6       	ldi	r24, 0x69	; 105
     410:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     412:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
     416:	80 91 15 01 	lds	r24, 0x0115

		if (!(HIDReportInfo.TotalReportItems))
     41a:	81 11       	cpse	r24, r1
     41c:	05 c0       	rjmp	.+10     	; 0x428 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     41e:	8e e4       	ldi	r24, 0x4E	; 78
     420:	91 e0       	ldi	r25, 0x01	; 1
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
     422:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
     426:	0c c0       	rjmp	.+24     	; 0x440 <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
     428:	1f 92       	push	r1
     42a:	cf 93       	push	r28
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     42c:	84 e3       	ldi	r24, 0x34	; 52
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf_P>
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	80 e9       	ldi	r24, 0x90	; 144
     442:	66 df       	rcall	.-308    	; 0x310 <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	cf 91       	pop	r28
     448:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <USB_Host_SetDeviceConfiguration>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     44c:	8d e1       	ldi	r24, 0x1D	; 29
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     454:	80 e6       	ldi	r24, 0x60	; 96
     456:	cf 91       	pop	r28
     458:	5b cf       	rjmp	.-330    	; 0x310 <LEDs_SetAllLEDs>

0000045a <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     45a:	cf 93       	push	r28
}
     45c:	df 93       	push	r29
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     45e:	1f 92       	push	r1
     460:	cd b7       	in	r28, 0x3d	; 61
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     462:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     464:	89 83       	std	Y+1, r24	; 0x01
     466:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     46a:	1f 92       	push	r1
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	8f 93       	push	r24
     470:	8e ee       	ldi	r24, 0xEE	; 238
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     47c:	80 e9       	ldi	r24, 0x90	; 144
     47e:	48 df       	rcall	.-368    	; 0x310 <LEDs_SetAllLEDs>
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	ff cf       	rjmp	.-2      	; 0x488 <EVENT_USB_Host_HostError+0x2e>

0000048a <EVENT_USB_Host_DeviceEnumerationFailed>:
     48a:	90 91 fa 04 	lds	r25, 0x04FA
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     48e:	1f 92       	push	r1
     490:	9f 93       	push	r25
     492:	1f 92       	push	r1
     494:	6f 93       	push	r22
     496:	1f 92       	push	r1
     498:	8f 93       	push	r24
     49a:	88 e9       	ldi	r24, 0x98	; 152
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a6:	8d b7       	in	r24, 0x3d	; 61
     4a8:	9e b7       	in	r25, 0x3e	; 62
     4aa:	08 96       	adiw	r24, 0x08	; 8
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	9e bf       	out	0x3e, r25	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	8d bf       	out	0x3d, r24	; 61
     4b6:	80 e9       	ldi	r24, 0x90	; 144
     4b8:	2b cf       	rjmp	.-426    	; 0x310 <LEDs_SetAllLEDs>

000004ba <ProcessJoystickReport>:
     4ba:	bf 92       	push	r11
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	7c 01       	movw	r14, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4ce:	b1 2c       	mov	r11, r1
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     4d0:	c1 2c       	mov	r12, r1

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4d2:	9a e2       	ldi	r25, 0x2A	; 42
     4d4:	d9 2e       	mov	r13, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     4d6:	00 e1       	ldi	r16, 0x10	; 16
     4d8:	10 e0       	ldi	r17, 0x00	; 0
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4da:	80 91 15 01 	lds	r24, 0x0115
     4de:	b8 16       	cp	r11, r24
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <ProcessJoystickReport+0x2a>
     4e2:	56 c0       	rjmp	.+172    	; 0x590 <ProcessJoystickReport+0xd6>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     4e4:	db 9c       	mul	r13, r11
     4e6:	e0 01       	movw	r28, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	ca 5e       	subi	r28, 0xEA	; 234
     4ec:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     4ee:	89 85       	ldd	r24, Y+9	; 0x09
     4f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f2:	89 30       	cpi	r24, 0x09	; 9
     4f4:	91 05       	cpc	r25, r1
     4f6:	a1 f4       	brne	.+40     	; 0x520 <ProcessJoystickReport+0x66>
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	81 11       	cpse	r24, r1
     4fc:	47 c0       	rjmp	.+142    	; 0x58c <ProcessJoystickReport+0xd2>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the joystick button value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     4fe:	be 01       	movw	r22, r28
     500:	c7 01       	movw	r24, r14
     502:	60 d5       	rcall	.+2752   	; 0xfc4 <USB_GetHIDReportItemInfo>
     504:	88 23       	and	r24, r24

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     506:	09 f4       	brne	.+2      	; 0x50a <ProcessJoystickReport+0x50>
     508:	41 c0       	rjmp	.+130    	; 0x58c <ProcessJoystickReport+0xd2>
     50a:	4a a1       	ldd	r20, Y+34	; 0x22
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     50c:	5b a1       	ldd	r21, Y+35	; 0x23
     50e:	6c a1       	ldd	r22, Y+36	; 0x24
     510:	7d a1       	ldd	r23, Y+37	; 0x25
     512:	45 2b       	or	r20, r21
     514:	46 2b       	or	r20, r22
     516:	47 2b       	or	r20, r23
     518:	c9 f1       	breq	.+114    	; 0x58c <ProcessJoystickReport+0xd2>
     51a:	80 ef       	ldi	r24, 0xF0	; 240
			  LEDMask = LEDS_ALL_LEDS;
     51c:	c8 2e       	mov	r12, r24
     51e:	36 c0       	rjmp	.+108    	; 0x58c <ProcessJoystickReport+0xd2>
     520:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     522:	a1 f5       	brne	.+104    	; 0x58c <ProcessJoystickReport+0xd2>
     524:	2b 85       	ldd	r18, Y+11	; 0x0b
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     526:	3c 85       	ldd	r19, Y+12	; 0x0c
     528:	20 53       	subi	r18, 0x30	; 48
     52a:	31 09       	sbc	r19, r1
     52c:	22 30       	cpi	r18, 0x02	; 2

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     52e:	31 05       	cpc	r19, r1
     530:	68 f5       	brcc	.+90     	; 0x58c <ProcessJoystickReport+0xd2>
     532:	8a 81       	ldd	r24, Y+2	; 0x02
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     534:	81 11       	cpse	r24, r1
     536:	2a c0       	rjmp	.+84     	; 0x58c <ProcessJoystickReport+0xd2>
     538:	be 01       	movw	r22, r28
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the joystick relative position value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     53a:	c7 01       	movw	r24, r14
     53c:	43 d5       	rcall	.+2694   	; 0xfc4 <USB_GetHIDReportItemInfo>
     53e:	88 23       	and	r24, r24
     540:	29 f1       	breq	.+74     	; 0x58c <ProcessJoystickReport+0xd2>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     542:	88 85       	ldd	r24, Y+8	; 0x08
     544:	98 01       	movw	r18, r16
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     546:	28 1b       	sub	r18, r24
     548:	31 09       	sbc	r19, r1
     54a:	4a a1       	ldd	r20, Y+34	; 0x22
     54c:	5b a1       	ldd	r21, Y+35	; 0x23
     54e:	6c a1       	ldd	r22, Y+36	; 0x24
     550:	7d a1       	ldd	r23, Y+37	; 0x25
     552:	02 2e       	mov	r0, r18
     554:	04 c0       	rjmp	.+8      	; 0x55e <ProcessJoystickReport+0xa4>
     556:	44 0f       	add	r20, r20
     558:	55 1f       	adc	r21, r21
     55a:	66 1f       	adc	r22, r22
     55c:	77 1f       	adc	r23, r23
     55e:	0a 94       	dec	r0
     560:	d2 f7       	brpl	.-12     	; 0x556 <ProcessJoystickReport+0x9c>
     562:	41 15       	cp	r20, r1
     564:	51 05       	cpc	r21, r1

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     566:	91 f0       	breq	.+36     	; 0x58c <ProcessJoystickReport+0xd2>
     568:	8b 85       	ldd	r24, Y+11	; 0x0b
     56a:	9c 85       	ldd	r25, Y+12	; 0x0c
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     56c:	c0 97       	sbiw	r24, 0x30	; 48
     56e:	39 f4       	brne	.+14     	; 0x57e <ProcessJoystickReport+0xc4>
     570:	14 16       	cp	r1, r20
     572:	15 06       	cpc	r1, r21
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     574:	14 f4       	brge	.+4      	; 0x57a <ProcessJoystickReport+0xc0>
     576:	80 e1       	ldi	r24, 0x10	; 16
     578:	08 c0       	rjmp	.+16     	; 0x58a <ProcessJoystickReport+0xd0>
     57a:	80 e2       	ldi	r24, 0x20	; 32
     57c:	06 c0       	rjmp	.+12     	; 0x58a <ProcessJoystickReport+0xd0>
     57e:	14 16       	cp	r1, r20
     580:	15 06       	cpc	r1, r21
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     582:	14 f4       	brge	.+4      	; 0x588 <ProcessJoystickReport+0xce>
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	01 c0       	rjmp	.+2      	; 0x58a <ProcessJoystickReport+0xd0>
     588:	80 e4       	ldi	r24, 0x40	; 64
     58a:	c8 2a       	or	r12, r24
     58c:	b3 94       	inc	r11
     58e:	a5 cf       	rjmp	.-182    	; 0x4da <ProcessJoystickReport+0x20>
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     590:	8c 2d       	mov	r24, r12
     592:	df 91       	pop	r29
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     594:	cf 91       	pop	r28
}
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	b5 ce       	rjmp	.-662    	; 0x310 <LEDs_SetAllLEDs>

000005a6 <JoystickHost_Task>:
     5a6:	ef 92       	push	r14
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16

/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     5b6:	ed b6       	in	r14, 0x3d	; 61
     5b8:	fe b6       	in	r15, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     5ba:	80 91 fa 04 	lds	r24, 0x04FA
     5be:	8b 30       	cpi	r24, 0x0B	; 11
     5c0:	d1 f5       	brne	.+116    	; 0x636 <JoystickHost_Task+0x90>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5c8:	80 91 a9 00 	lds	r24, 0x00A9
     5cc:	8f 7b       	andi	r24, 0xBF	; 191
     5ce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5d2:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze joystick data pipe */
	Pipe_SelectPipe(JOYSTICK_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     5d6:	80 ff       	sbrs	r24, 0
     5d8:	29 c0       	rjmp	.+82     	; 0x62c <JoystickHost_Task+0x86>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5da:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached joystick */
		if (Pipe_IsReadWriteAllowed())
     5de:	85 ff       	sbrs	r24, 5
     5e0:	20 c0       	rjmp	.+64     	; 0x622 <JoystickHost_Task+0x7c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     5e2:	80 91 f6 00 	lds	r24, 0x00F6
     5e6:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t JoystickReport[Pipe_BytesInPipe()];
     5ea:	2d b7       	in	r18, 0x3d	; 61
     5ec:	3e b7       	in	r19, 0x3e	; 62
     5ee:	28 1b       	sub	r18, r24
     5f0:	39 0b       	sbc	r19, r25
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	3e bf       	out	0x3e, r19	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	2d bf       	out	0x3d, r18	; 61
     5fc:	0d b7       	in	r16, 0x3d	; 61
     5fe:	1e b7       	in	r17, 0x3e	; 62
     600:	0f 5f       	subi	r16, 0xFF	; 255
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	60 91 f6 00 	lds	r22, 0x00F6
     608:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the joystick report */
			Pipe_Read_Stream_LE(JoystickReport, Pipe_BytesInPipe(), NULL);
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	c8 01       	movw	r24, r16
     612:	f7 d6       	rcall	.+3566   	; 0x1402 <Pipe_Read_Stream_LE>
     614:	c8 01       	movw	r24, r16

			/* Process the read in joystick report from the device */
			ProcessJoystickReport(JoystickReport);
     616:	51 df       	rcall	.-350    	; 0x4ba <ProcessJoystickReport>
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	fe be       	out	0x3e, r15	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	ed be       	out	0x3d, r14	; 61
     622:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     626:	8e 77       	andi	r24, 0x7E	; 126
     628:	80 93 a6 00 	sts	0x00A6, r24
     62c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     630:	80 64       	ori	r24, 0x40	; 64
     632:	80 93 a9 00 	sts	0x00A9, r24
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     63a:	fe be       	out	0x3e, r15	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	ed be       	out	0x3d, r14	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	08 95       	ret

0000064e <main>:
     64e:	65 de       	rcall	.-822    	; 0x31a <SetupHardware>
     650:	8e e9       	ldi	r24, 0x9E	; 158
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Joystick HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <puts_P>
     658:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     65a:	5a de       	rcall	.-844    	; 0x310 <LEDs_SetAllLEDs>
     65c:	78 94       	sei
     65e:	a3 df       	rcall	.-186    	; 0x5a6 <JoystickHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     660:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     664:	fc cf       	rjmp	.-8      	; 0x65e <main+0x10>

00000666 <DComp_NextJoystickInterface>:
 */
uint8_t DComp_NextJoystickInterface(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     666:	fc 01       	movw	r30, r24
     668:	21 81       	ldd	r18, Z+1	; 0x01
     66a:	24 30       	cpi	r18, 0x04	; 4
     66c:	29 f4       	brne	.+10     	; 0x678 <DComp_NextJoystickInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
     66e:	85 81       	ldd	r24, Z+5	; 0x05
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	11 f4       	brne	.+4      	; 0x678 <DComp_NextJoystickInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     678:	82 e0       	ldi	r24, 0x02	; 2
}
     67a:	08 95       	ret

0000067c <DComp_NextJoystickInterfaceDataEndpoint>:
 */
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     67c:	fc 01       	movw	r30, r24
     67e:	81 81       	ldd	r24, Z+1	; 0x01
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	21 f0       	breq	.+8      	; 0x68c <DComp_NextJoystickInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     684:	84 30       	cpi	r24, 0x04	; 4
     686:	21 f4       	brne	.+8      	; 0x690 <DComp_NextJoystickInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	08 95       	ret
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     690:	82 e0       	ldi	r24, 0x02	; 2
}
     692:	08 95       	ret

00000694 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     694:	fc 01       	movw	r30, r24
     696:	81 81       	ldd	r24, Z+1	; 0x01
     698:	81 32       	cpi	r24, 0x21	; 33
     69a:	11 f4       	brne	.+4      	; 0x6a0 <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6a0:	82 e0       	ldi	r24, 0x02	; 2
}
     6a2:	08 95       	ret

000006a4 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref JoystickHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	c4 50       	subi	r28, 0x04	; 4
     6ba:	d2 40       	sbci	r29, 0x02	; 2
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6c6:	ae 01       	movw	r20, r28
     6c8:	4f 5f       	subi	r20, 0xFF	; 255
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	cd 5f       	subi	r28, 0xFD	; 253
     6ce:	dd 4f       	sbci	r29, 0xFD	; 253
     6d0:	59 83       	std	Y+1, r21	; 0x01
     6d2:	48 83       	st	Y, r20
     6d4:	c3 50       	subi	r28, 0x03	; 3
     6d6:	d2 40       	sbci	r29, 0x02	; 2
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	32 e0       	ldi	r19, 0x02	; 2
     6dc:	be 01       	movw	r22, r28
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7d 4f       	sbci	r23, 0xFD	; 253
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 30 0c 	call	0x1860	; 0x1860 <USB_Host_GetDeviceConfigDescriptor>
     6e8:	85 30       	cpi	r24, 0x05	; 5
     6ea:	09 f4       	brne	.+2      	; 0x6ee <ProcessConfigurationDescriptor+0x4a>
     6ec:	65 c0       	rjmp	.+202    	; 0x7b8 <ProcessConfigurationDescriptor+0x114>
     6ee:	86 30       	cpi	r24, 0x06	; 6
     6f0:	21 f0       	breq	.+8      	; 0x6fa <ProcessConfigurationDescriptor+0x56>
     6f2:	88 23       	and	r24, r24
     6f4:	21 f0       	breq	.+8      	; 0x6fe <ProcessConfigurationDescriptor+0x5a>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	60 c0       	rjmp	.+192    	; 0x7ba <ProcessConfigurationDescriptor+0x116>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	5e c0       	rjmp	.+188    	; 0x7ba <ProcessConfigurationDescriptor+0x116>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6fe:	c1 2c       	mov	r12, r1
     700:	d1 2c       	mov	r13, r1
     702:	00 e0       	ldi	r16, 0x00	; 0
     704:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     706:	01 15       	cp	r16, r1
     708:	11 05       	cpc	r17, r1
     70a:	69 f4       	brne	.+26     	; 0x726 <ProcessConfigurationDescriptor+0x82>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     70c:	43 e3       	ldi	r20, 0x33	; 51
     70e:	53 e0       	ldi	r21, 0x03	; 3
     710:	be 01       	movw	r22, r28
     712:	6d 5f       	subi	r22, 0xFD	; 253
     714:	7d 4f       	sbci	r23, 0xFD	; 253
     716:	ce 01       	movw	r24, r28
     718:	8f 5f       	subi	r24, 0xFF	; 255
     71a:	9d 4f       	sbci	r25, 0xFD	; 253
     71c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <USB_GetNextDescriptorComp>
     720:	88 23       	and	r24, r24
     722:	81 f0       	breq	.+32     	; 0x744 <ProcessConfigurationDescriptor+0xa0>
     724:	0d c0       	rjmp	.+26     	; 0x740 <ProcessConfigurationDescriptor+0x9c>

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     726:	4e e3       	ldi	r20, 0x3E	; 62
     728:	53 e0       	ldi	r21, 0x03	; 3
     72a:	be 01       	movw	r22, r28
     72c:	6d 5f       	subi	r22, 0xFD	; 253
     72e:	7d 4f       	sbci	r23, 0xFD	; 253
     730:	ce 01       	movw	r24, r28
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	9d 4f       	sbci	r25, 0xFD	; 253
     736:	0e 94 8a 0c 	call	0x1914	; 0x1914 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     73a:	81 11       	cpse	r24, r1
     73c:	e7 cf       	rjmp	.-50     	; 0x70c <ProcessConfigurationDescriptor+0x68>
     73e:	1b c0       	rjmp	.+54     	; 0x776 <ProcessConfigurationDescriptor+0xd2>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextJoystickInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	3b c0       	rjmp	.+118    	; 0x7ba <ProcessConfigurationDescriptor+0x116>
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     744:	cd 5f       	subi	r28, 0xFD	; 253
     746:	dd 4f       	sbci	r29, 0xFD	; 253
     748:	08 81       	ld	r16, Y
     74a:	19 81       	ldd	r17, Y+1	; 0x01
     74c:	c3 50       	subi	r28, 0x03	; 3
     74e:	d2 40       	sbci	r29, 0x02	; 2

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     750:	4a e4       	ldi	r20, 0x4A	; 74
     752:	53 e0       	ldi	r21, 0x03	; 3
     754:	be 01       	movw	r22, r28
     756:	6d 5f       	subi	r22, 0xFD	; 253
     758:	7d 4f       	sbci	r23, 0xFD	; 253
     75a:	ce 01       	movw	r24, r28
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	9d 4f       	sbci	r25, 0xFD	; 253
     760:	0e 94 8a 0c 	call	0x1914	; 0x1914 <USB_GetNextDescriptorComp>
     764:	81 11       	cpse	r24, r1
     766:	ec cf       	rjmp	.-40     	; 0x740 <ProcessConfigurationDescriptor+0x9c>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     768:	cd 5f       	subi	r28, 0xFD	; 253
     76a:	dd 4f       	sbci	r29, 0xFD	; 253
     76c:	c8 80       	ld	r12, Y
     76e:	d9 80       	ldd	r13, Y+1	; 0x01
     770:	c3 50       	subi	r28, 0x03	; 3
     772:	d2 40       	sbci	r29, 0x02	; 2

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     774:	c8 cf       	rjmp	.-112    	; 0x706 <ProcessConfigurationDescriptor+0x62>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     776:	cd 5f       	subi	r28, 0xFD	; 253
     778:	dd 4f       	sbci	r29, 0xFD	; 253
     77a:	e8 80       	ld	r14, Y
     77c:	f9 80       	ldd	r15, Y+1	; 0x01
     77e:	c3 50       	subi	r28, 0x03	; 3
     780:	d2 40       	sbci	r29, 0x02	; 2

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     782:	f7 01       	movw	r30, r14
     784:	42 81       	ldd	r20, Z+2	; 0x02
     786:	47 ff       	sbrs	r20, 7
     788:	be cf       	rjmp	.-132    	; 0x706 <ProcessConfigurationDescriptor+0x62>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     78a:	e1 14       	cp	r14, r1
     78c:	f1 04       	cpc	r15, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <ProcessConfigurationDescriptor+0xee>
     790:	ba cf       	rjmp	.-140    	; 0x706 <ProcessConfigurationDescriptor+0x62>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(JOYSTICK_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     792:	24 81       	ldd	r18, Z+4	; 0x04
     794:	35 81       	ldd	r19, Z+5	; 0x05
     796:	01 e0       	ldi	r16, 0x01	; 1
     798:	63 e0       	ldi	r22, 0x03	; 3
     79a:	81 e8       	ldi	r24, 0x81	; 129
     79c:	7f d6       	rcall	.+3326   	; 0x149c <Pipe_ConfigurePipe>
     79e:	f7 01       	movw	r30, r14
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	80 93 ad 00 	sts	0x00AD, r24
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     7a6:	f6 01       	movw	r30, r12

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     7a8:	87 81       	ldd	r24, Z+7	; 0x07
     7aa:	90 85       	ldd	r25, Z+8	; 0x08
     7ac:	90 93 ef 04 	sts	0x04EF, r25
     7b0:	80 93 ee 04 	sts	0x04EE, r24
     7b4:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <ProcessConfigurationDescriptor+0x116>
     7b8:	82 e0       	ldi	r24, 0x02	; 2
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7ba:	cc 5f       	subi	r28, 0xFC	; 252
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7bc:	dd 4f       	sbci	r29, 0xFD	; 253
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	08 95       	ret

000007da <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     7ea:	ed b6       	in	r14, 0x3d	; 61
     7ec:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     7ee:	80 91 ee 04 	lds	r24, 0x04EE
     7f2:	90 91 ef 04 	lds	r25, 0x04EF
     7f6:	2d b7       	in	r18, 0x3d	; 61
     7f8:	3e b7       	in	r19, 0x3e	; 62
     7fa:	28 1b       	sub	r18, r24
     7fc:	39 0b       	sbc	r19, r25
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	3e bf       	out	0x3e, r19	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	2d bf       	out	0x3d, r18	; 61
     808:	0d b7       	in	r16, 0x3d	; 61
     80a:	1e b7       	in	r17, 0x3e	; 62
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     810:	21 e8       	ldi	r18, 0x81	; 129
     812:	20 93 f2 04 	sts	0x04F2, r18
     816:	26 e0       	ldi	r18, 0x06	; 6
     818:	20 93 f3 04 	sts	0x04F3, r18
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	32 e2       	ldi	r19, 0x22	; 34
     820:	30 93 f5 04 	sts	0x04F5, r19
     824:	20 93 f4 04 	sts	0x04F4, r18
     828:	10 92 f7 04 	sts	0x04F7, r1
     82c:	10 92 f6 04 	sts	0x04F6, r1
     830:	90 93 f9 04 	sts	0x04F9, r25
     834:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     838:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     83c:	c8 01       	movw	r24, r16
     83e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <USB_Host_SendControlRequest>
     842:	81 11       	cpse	r24, r1
     844:	0d c0       	rjmp	.+26     	; 0x860 <GetHIDReportData+0x86>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     846:	60 91 ee 04 	lds	r22, 0x04EE
     84a:	70 91 ef 04 	lds	r23, 0x04EF
     84e:	45 e1       	ldi	r20, 0x15	; 21
     850:	51 e0       	ldi	r21, 0x01	; 1
     852:	c8 01       	movw	r24, r16
     854:	32 d0       	rcall	.+100    	; 0x8ba <USB_ProcessHIDReport>
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	81 11       	cpse	r24, r1
     85a:	03 c0       	rjmp	.+6      	; 0x862 <GetHIDReportData+0x88>
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	01 c0       	rjmp	.+2      	; 0x862 <GetHIDReportData+0x88>
     860:	92 e0       	ldi	r25, 0x02	; 2
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     862:	89 2f       	mov	r24, r25
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	fe be       	out	0x3e, r15	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	ed be       	out	0x3d, r14	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <CALLBACK_HIDParser_FilterHIDReportItem>:
     87c:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     87e:	16 96       	adiw	r26, 0x06	; 6
     880:	ed 91       	ld	r30, X+
     882:	fc 91       	ld	r31, X
     884:	17 97       	sbiw	r26, 0x07	; 7
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	b1 f0       	breq	.+44     	; 0x8b6 <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     88a:	21 81       	ldd	r18, Z+1	; 0x01
     88c:	32 81       	ldd	r19, Z+2	; 0x02
     88e:	21 30       	cpi	r18, 0x01	; 1
     890:	31 05       	cpc	r19, r1
     892:	29 f4       	brne	.+10     	; 0x89e <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     894:	23 81       	ldd	r18, Z+3	; 0x03
     896:	34 81       	ldd	r19, Z+4	; 0x04
     898:	24 30       	cpi	r18, 0x04	; 4
     89a:	31 05       	cpc	r19, r1
     89c:	21 f0       	breq	.+8      	; 0x8a6 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     89e:	05 80       	ldd	r0, Z+5	; 0x05
     8a0:	f6 81       	ldd	r31, Z+6	; 0x06
     8a2:	e0 2d       	mov	r30, r0
     8a4:	f0 cf       	rjmp	.-32     	; 0x886 <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current joystick item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     8a6:	fc 01       	movw	r30, r24
     8a8:	21 85       	ldd	r18, Z+9	; 0x09
     8aa:	32 85       	ldd	r19, Z+10	; 0x0a
     8ac:	27 7f       	andi	r18, 0xF7	; 247
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	21 30       	cpi	r18, 0x01	; 1
     8b2:	31 05       	cpc	r19, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     8b8:	08 95       	ret

000008ba <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     8ba:	2f 92       	push	r2
     8bc:	3f 92       	push	r3
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	cd 58       	subi	r28, 0x8D	; 141
     8e4:	d1 09       	sbc	r29, r1
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     8f2:	9a 01       	movw	r18, r20
     8f4:	20 57       	subi	r18, 0x70	; 112
     8f6:	3c 4f       	sbci	r19, 0xFC	; 252
     8f8:	e8 96       	adiw	r28, 0x38	; 56
     8fa:	3f af       	std	Y+63, r19	; 0x3f
     8fc:	2e af       	std	Y+62, r18	; 0x3e
     8fe:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     900:	89 ed       	ldi	r24, 0xD9	; 217
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	da 01       	movw	r26, r20
     906:	fc 01       	movw	r30, r24
     908:	1d 92       	st	X+, r1
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	e9 f7       	brne	.-6      	; 0x908 <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     90e:	fe 01       	movw	r30, r28
     910:	31 96       	adiw	r30, 0x01	; 1
     912:	8c e1       	ldi	r24, 0x1C	; 28
     914:	df 01       	movw	r26, r30
     916:	1d 92       	st	X+, r1
     918:	8a 95       	dec	r24
     91a:	e9 f7       	brne	.-6      	; 0x916 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     91c:	87 e0       	ldi	r24, 0x07	; 7
     91e:	d9 01       	movw	r26, r18
     920:	1d 92       	st	X+, r1
     922:	8a 95       	dec	r24
     924:	e9 f7       	brne	.-6      	; 0x920 <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     926:	9a 01       	movw	r18, r20
     928:	21 57       	subi	r18, 0x71	; 113
     92a:	3c 4f       	sbci	r19, 0xFC	; 252
     92c:	eb 96       	adiw	r28, 0x3b	; 59
     92e:	3f af       	std	Y+63, r19	; 0x3f
     930:	2e af       	std	Y+62, r18	; 0x3e
     932:	eb 97       	sbiw	r28, 0x3b	; 59
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	d9 01       	movw	r26, r18
     938:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     93a:	41 2c       	mov	r4, r1
     93c:	51 2c       	mov	r5, r1
     93e:	32 01       	movw	r6, r4
     940:	81 2c       	mov	r8, r1
     942:	91 2c       	mov	r9, r1
     944:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     946:	e4 96       	adiw	r28, 0x34	; 52
     948:	1f ae       	std	Y+63, r1	; 0x3f
     94a:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     94c:	e6 96       	adiw	r28, 0x36	; 54
     94e:	1f ae       	std	Y+63, r1	; 0x3f
     950:	1e ae       	std	Y+62, r1	; 0x3e
     952:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     954:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     956:	9a 01       	movw	r18, r20
     958:	2a 52       	subi	r18, 0x2A	; 42
     95a:	3c 4f       	sbci	r19, 0xFC	; 252
     95c:	ed 96       	adiw	r28, 0x3d	; 61
     95e:	3f af       	std	Y+63, r19	; 0x3f
     960:	2e af       	std	Y+62, r18	; 0x3e
     962:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     964:	9a 01       	movw	r18, r20
     966:	28 57       	subi	r18, 0x78	; 120
     968:	3c 4f       	sbci	r19, 0xFC	; 252
     96a:	cd 57       	subi	r28, 0x7D	; 125
     96c:	df 4f       	sbci	r29, 0xFF	; 255
     96e:	39 83       	std	Y+1, r19	; 0x01
     970:	28 83       	st	Y, r18
     972:	c3 58       	subi	r28, 0x83	; 131
     974:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     976:	9a 01       	movw	r18, r20
     978:	28 52       	subi	r18, 0x28	; 40
     97a:	3c 4f       	sbci	r19, 0xFC	; 252
     97c:	ef 96       	adiw	r28, 0x3f	; 63
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	2e af       	std	Y+62, r18	; 0x3e
     982:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     984:	cb 57       	subi	r28, 0x7B	; 123
     986:	df 4f       	sbci	r29, 0xFF	; 255
     988:	b9 83       	std	Y+1, r27	; 0x01
     98a:	a8 83       	st	Y, r26
     98c:	c5 58       	subi	r28, 0x85	; 133
     98e:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     990:	61 15       	cp	r22, r1
     992:	71 05       	cpc	r23, r1
     994:	09 f4       	brne	.+2      	; 0x998 <USB_ProcessHIDReport+0xde>
     996:	e9 c2       	rjmp	.+1490   	; 0xf6a <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     998:	d1 01       	movw	r26, r2
     99a:	bc 91       	ld	r27, X
     99c:	e9 96       	adiw	r28, 0x39	; 57
     99e:	bf af       	std	Y+63, r27	; 0x3f
     9a0:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     9a2:	8b 2f       	mov	r24, r27
     9a4:	83 70       	andi	r24, 0x03	; 3
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	81 f1       	breq	.+96     	; 0xa0a <USB_ProcessHIDReport+0x150>
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	59 f0       	breq	.+22     	; 0x9c4 <USB_ProcessHIDReport+0x10a>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	d9 f1       	breq	.+118    	; 0xa28 <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     9b2:	ef ef       	ldi	r30, 0xFF	; 255
     9b4:	2e 1a       	sub	r2, r30
     9b6:	3e 0a       	sbc	r3, r30
		ReportSize--;
     9b8:	61 50       	subi	r22, 0x01	; 1
     9ba:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     9bc:	c1 2c       	mov	r12, r1
     9be:	d1 2c       	mov	r13, r1
     9c0:	76 01       	movw	r14, r12
     9c2:	3d c0       	rjmp	.+122    	; 0xa3e <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9c4:	d1 01       	movw	r26, r2
     9c6:	14 96       	adiw	r26, 0x04	; 4
     9c8:	8c 91       	ld	r24, X
     9ca:	14 97       	sbiw	r26, 0x04	; 4
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	cc 90       	ld	r12, X
     9d0:	13 97       	sbiw	r26, 0x03	; 3
     9d2:	d1 2c       	mov	r13, r1
     9d4:	e1 2c       	mov	r14, r1
     9d6:	f1 2c       	mov	r15, r1
     9d8:	76 01       	movw	r14, r12
     9da:	dd 24       	eor	r13, r13
     9dc:	cc 24       	eor	r12, r12
     9de:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	8c 91       	ld	r24, X
     9e4:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9e6:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	8c 91       	ld	r24, X
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	98 2f       	mov	r25, r24
     9f0:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	c8 2a       	or	r12, r24
     9f8:	d9 2a       	or	r13, r25
     9fa:	ea 2a       	or	r14, r26
     9fc:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     9fe:	65 50       	subi	r22, 0x05	; 5
     a00:	71 09       	sbc	r23, r1
				ReportData     += 4;
     a02:	b5 e0       	ldi	r27, 0x05	; 5
     a04:	2b 0e       	add	r2, r27
     a06:	31 1c       	adc	r3, r1
				break;
     a08:	1a c0       	rjmp	.+52     	; 0xa3e <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     a0a:	f1 01       	movw	r30, r2
     a0c:	c2 80       	ldd	r12, Z+2	; 0x02
     a0e:	d1 2c       	mov	r13, r1
     a10:	dc 2c       	mov	r13, r12
     a12:	cc 24       	eor	r12, r12
     a14:	81 81       	ldd	r24, Z+1	; 0x01
     a16:	c8 2a       	or	r12, r24
     a18:	e1 2c       	mov	r14, r1
     a1a:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     a1c:	63 50       	subi	r22, 0x03	; 3
     a1e:	71 09       	sbc	r23, r1
				ReportData     += 2;
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	2f 0e       	add	r2, r31
     a24:	31 1c       	adc	r3, r1
				break;
     a26:	0b c0       	rjmp	.+22     	; 0xa3e <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     a28:	d1 01       	movw	r26, r2
     a2a:	11 96       	adiw	r26, 0x01	; 1
     a2c:	cc 90       	ld	r12, X
     a2e:	d1 2c       	mov	r13, r1
     a30:	e1 2c       	mov	r14, r1
     a32:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     a34:	62 50       	subi	r22, 0x02	; 2
     a36:	71 09       	sbc	r23, r1
				ReportData     += 1;
     a38:	b2 e0       	ldi	r27, 0x02	; 2
     a3a:	2b 0e       	add	r2, r27
     a3c:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a3e:	e9 96       	adiw	r28, 0x39	; 57
     a40:	2f ad       	ldd	r18, Y+63	; 0x3f
     a42:	e9 97       	sbiw	r28, 0x39	; 57
     a44:	2c 7f       	andi	r18, 0xFC	; 252
     a46:	24 36       	cpi	r18, 0x64	; 100
     a48:	09 f4       	brne	.+2      	; 0xa4c <USB_ProcessHIDReport+0x192>
     a4a:	96 c0       	rjmp	.+300    	; 0xb78 <USB_ProcessHIDReport+0x2be>
     a4c:	68 f5       	brcc	.+90     	; 0xaa8 <USB_ProcessHIDReport+0x1ee>
     a4e:	24 32       	cpi	r18, 0x24	; 36
     a50:	09 f4       	brne	.+2      	; 0xa54 <USB_ProcessHIDReport+0x19a>
     a52:	7c c0       	rjmp	.+248    	; 0xb4c <USB_ProcessHIDReport+0x292>
     a54:	b0 f4       	brcc	.+44     	; 0xa82 <USB_ProcessHIDReport+0x1c8>
     a56:	28 30       	cpi	r18, 0x08	; 8
     a58:	09 f4       	brne	.+2      	; 0xa5c <USB_ProcessHIDReport+0x1a2>
     a5a:	f4 c0       	rjmp	.+488    	; 0xc44 <USB_ProcessHIDReport+0x38a>
     a5c:	48 f4       	brcc	.+18     	; 0xa70 <USB_ProcessHIDReport+0x1b6>
     a5e:	24 30       	cpi	r18, 0x04	; 4
     a60:	09 f0       	breq	.+2      	; 0xa64 <USB_ProcessHIDReport+0x1aa>
     a62:	73 c2       	rjmp	.+1254   	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     a64:	d8 01       	movw	r26, r16
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	dc 92       	st	X, r13
     a6a:	ce 92       	st	-X, r12
     a6c:	11 97       	sbiw	r26, 0x01	; 1
				break;
     a6e:	6d c2       	rjmp	.+1242   	; 0xf4a <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a70:	24 31       	cpi	r18, 0x14	; 20
     a72:	09 f4       	brne	.+2      	; 0xa76 <USB_ProcessHIDReport+0x1bc>
     a74:	65 c0       	rjmp	.+202    	; 0xb40 <USB_ProcessHIDReport+0x286>
     a76:	28 31       	cpi	r18, 0x18	; 24
     a78:	09 f0       	breq	.+2      	; 0xa7c <USB_ProcessHIDReport+0x1c2>
     a7a:	67 c2       	rjmp	.+1230   	; 0xf4a <USB_ProcessHIDReport+0x690>
     a7c:	46 01       	movw	r8, r12
     a7e:	57 01       	movw	r10, r14
     a80:	64 c2       	rjmp	.+1224   	; 0xf4a <USB_ProcessHIDReport+0x690>
     a82:	24 33       	cpi	r18, 0x34	; 52
     a84:	09 f4       	brne	.+2      	; 0xa88 <USB_ProcessHIDReport+0x1ce>
     a86:	6a c0       	rjmp	.+212    	; 0xb5c <USB_ProcessHIDReport+0x2a2>
     a88:	30 f4       	brcc	.+12     	; 0xa96 <USB_ProcessHIDReport+0x1dc>
     a8a:	28 32       	cpi	r18, 0x28	; 40
     a8c:	09 f0       	breq	.+2      	; 0xa90 <USB_ProcessHIDReport+0x1d6>
     a8e:	5d c2       	rjmp	.+1210   	; 0xf4a <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     a90:	26 01       	movw	r4, r12
     a92:	37 01       	movw	r6, r14
     a94:	5a c2       	rjmp	.+1204   	; 0xf4a <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     a96:	24 34       	cpi	r18, 0x44	; 68
     a98:	09 f4       	brne	.+2      	; 0xa9c <USB_ProcessHIDReport+0x1e2>
     a9a:	66 c0       	rjmp	.+204    	; 0xb68 <USB_ProcessHIDReport+0x2ae>
     a9c:	24 35       	cpi	r18, 0x54	; 84
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <USB_ProcessHIDReport+0x1e8>
     aa0:	54 c2       	rjmp	.+1192   	; 0xf4a <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     aa2:	f8 01       	movw	r30, r16
     aa4:	c1 86       	std	Z+9, r12	; 0x09
				break;
     aa6:	51 c2       	rjmp	.+1186   	; 0xf4a <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     aa8:	24 39       	cpi	r18, 0x94	; 148
     aaa:	09 f4       	brne	.+2      	; 0xaae <USB_ProcessHIDReport+0x1f4>
     aac:	6d c0       	rjmp	.+218    	; 0xb88 <USB_ProcessHIDReport+0x2ce>
     aae:	78 f4       	brcc	.+30     	; 0xace <USB_ProcessHIDReport+0x214>
     ab0:	20 38       	cpi	r18, 0x80	; 128
     ab2:	e1 f0       	breq	.+56     	; 0xaec <USB_ProcessHIDReport+0x232>
     ab4:	30 f4       	brcc	.+12     	; 0xac2 <USB_ProcessHIDReport+0x208>
     ab6:	24 37       	cpi	r18, 0x74	; 116
     ab8:	09 f0       	breq	.+2      	; 0xabc <USB_ProcessHIDReport+0x202>
     aba:	47 c2       	rjmp	.+1166   	; 0xf4a <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     abc:	f8 01       	movw	r30, r16
     abe:	c0 82       	st	Z, r12
				break;
     ac0:	44 c2       	rjmp	.+1160   	; 0xf4a <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     ac2:	24 38       	cpi	r18, 0x84	; 132
     ac4:	09 f4       	brne	.+2      	; 0xac8 <USB_ProcessHIDReport+0x20e>
     ac6:	64 c0       	rjmp	.+200    	; 0xb90 <USB_ProcessHIDReport+0x2d6>
     ac8:	20 39       	cpi	r18, 0x90	; 144
     aca:	81 f0       	breq	.+32     	; 0xaec <USB_ProcessHIDReport+0x232>
     acc:	3e c2       	rjmp	.+1148   	; 0xf4a <USB_ProcessHIDReport+0x690>
     ace:	20 3b       	cpi	r18, 0xB0	; 176
     ad0:	69 f0       	breq	.+26     	; 0xaec <USB_ProcessHIDReport+0x232>
     ad2:	30 f4       	brcc	.+12     	; 0xae0 <USB_ProcessHIDReport+0x226>
     ad4:	20 3a       	cpi	r18, 0xA0	; 160
     ad6:	09 f4       	brne	.+2      	; 0xada <USB_ProcessHIDReport+0x220>
     ad8:	c9 c0       	rjmp	.+402    	; 0xc6c <USB_ProcessHIDReport+0x3b2>
     ada:	24 3a       	cpi	r18, 0xA4	; 164
     adc:	b9 f0       	breq	.+46     	; 0xb0c <USB_ProcessHIDReport+0x252>
     ade:	35 c2       	rjmp	.+1130   	; 0xf4a <USB_ProcessHIDReport+0x690>
     ae0:	24 3b       	cpi	r18, 0xB4	; 180
     ae2:	29 f1       	breq	.+74     	; 0xb2e <USB_ProcessHIDReport+0x274>
     ae4:	20 3c       	cpi	r18, 0xC0	; 192
     ae6:	09 f4       	brne	.+2      	; 0xaea <USB_ProcessHIDReport+0x230>
     ae8:	2d c1       	rjmp	.+602    	; 0xd44 <USB_ProcessHIDReport+0x48a>
     aea:	2f c2       	rjmp	.+1118   	; 0xf4a <USB_ProcessHIDReport+0x690>
     aec:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     aee:	d7 01       	movw	r26, r14
     af0:	c6 01       	movw	r24, r12
     af2:	81 70       	andi	r24, 0x01	; 1
     af4:	99 27       	eor	r25, r25
     af6:	aa 27       	eor	r26, r26
     af8:	bb 27       	eor	r27, r27
     afa:	c1 58       	subi	r28, 0x81	; 129
     afc:	df 4f       	sbci	r29, 0xFF	; 255
     afe:	88 83       	st	Y, r24
     b00:	99 83       	std	Y+1, r25	; 0x01
     b02:	aa 83       	std	Y+2, r26	; 0x02
     b04:	bb 83       	std	Y+3, r27	; 0x03
     b06:	cf 57       	subi	r28, 0x7F	; 127
     b08:	d0 40       	sbci	r29, 0x00	; 0
     b0a:	4a c1       	rjmp	.+660    	; 0xda0 <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     b0c:	ce 01       	movw	r24, r28
     b0e:	4d 96       	adiw	r24, 0x1d	; 29
     b10:	08 17       	cp	r16, r24
     b12:	19 07       	cpc	r17, r25
     b14:	09 f4       	brne	.+2      	; 0xb18 <USB_ProcessHIDReport+0x25e>
     b16:	2f c2       	rjmp	.+1118   	; 0xf76 <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     b18:	c8 01       	movw	r24, r16
     b1a:	4c 96       	adiw	r24, 0x1c	; 28
     b1c:	2a e2       	ldi	r18, 0x2A	; 42
     b1e:	f8 01       	movw	r30, r16
     b20:	dc 01       	movw	r26, r24
     b22:	01 90       	ld	r0, Z+
     b24:	0d 92       	st	X+, r0
     b26:	2a 95       	dec	r18
     b28:	e1 f7       	brne	.-8      	; 0xb22 <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     b2a:	8c 01       	movw	r16, r24
				break;
     b2c:	0e c2       	rjmp	.+1052   	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	08 17       	cp	r16, r24
     b34:	19 07       	cpc	r17, r25
     b36:	09 f4       	brne	.+2      	; 0xb3a <USB_ProcessHIDReport+0x280>
     b38:	20 c2       	rjmp	.+1088   	; 0xf7a <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     b3a:	0c 51       	subi	r16, 0x1C	; 28
     b3c:	11 09       	sbc	r17, r1
				break;
     b3e:	05 c2       	rjmp	.+1034   	; 0xf4a <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     b40:	f8 01       	movw	r30, r16
     b42:	c2 86       	std	Z+10, r12	; 0x0a
     b44:	d3 86       	std	Z+11, r13	; 0x0b
     b46:	e4 86       	std	Z+12, r14	; 0x0c
     b48:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     b4a:	ff c1       	rjmp	.+1022   	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     b4c:	d8 01       	movw	r26, r16
     b4e:	1e 96       	adiw	r26, 0x0e	; 14
     b50:	cd 92       	st	X+, r12
     b52:	dd 92       	st	X+, r13
     b54:	ed 92       	st	X+, r14
     b56:	fc 92       	st	X, r15
     b58:	51 97       	sbiw	r26, 0x11	; 17
				break;
     b5a:	f7 c1       	rjmp	.+1006   	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     b5c:	f8 01       	movw	r30, r16
     b5e:	c2 8a       	std	Z+18, r12	; 0x12
     b60:	d3 8a       	std	Z+19, r13	; 0x13
     b62:	e4 8a       	std	Z+20, r14	; 0x14
     b64:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     b66:	f1 c1       	rjmp	.+994    	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     b68:	d8 01       	movw	r26, r16
     b6a:	56 96       	adiw	r26, 0x16	; 22
     b6c:	cd 92       	st	X+, r12
     b6e:	dd 92       	st	X+, r13
     b70:	ed 92       	st	X+, r14
     b72:	fc 92       	st	X, r15
     b74:	59 97       	sbiw	r26, 0x19	; 25
				break;
     b76:	e9 c1       	rjmp	.+978    	; 0xf4a <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     b78:	d8 01       	movw	r26, r16
     b7a:	15 96       	adiw	r26, 0x05	; 5
     b7c:	cd 92       	st	X+, r12
     b7e:	dd 92       	st	X+, r13
     b80:	ed 92       	st	X+, r14
     b82:	fc 92       	st	X, r15
     b84:	18 97       	sbiw	r26, 0x08	; 8
				break;
     b86:	e1 c1       	rjmp	.+962    	; 0xf4a <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     b88:	d8 01       	movw	r26, r16
     b8a:	5a 96       	adiw	r26, 0x1a	; 26
     b8c:	cc 92       	st	X, r12
				break;
     b8e:	dd c1       	rjmp	.+954    	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     b90:	ac 2d       	mov	r26, r12
     b92:	f8 01       	movw	r30, r16
     b94:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     b96:	ef 96       	adiw	r28, 0x3f	; 63
     b98:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9a:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9c:	ef 97       	sbiw	r28, 0x3f	; 63
     b9e:	80 81       	ld	r24, Z
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <USB_ProcessHIDReport+0x2ec>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     ba6:	cb 57       	subi	r28, 0x7B	; 123
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	e8 81       	ld	r30, Y
     bac:	f9 81       	ldd	r31, Y+1	; 0x01
     bae:	c5 58       	subi	r28, 0x85	; 133
     bb0:	d0 40       	sbci	r29, 0x00	; 0
     bb2:	b0 81       	ld	r27, Z
     bb4:	9a 01       	movw	r18, r20
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8b 17       	cp	r24, r27
     bbc:	d0 f4       	brcc	.+52     	; 0xbf2 <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     bbe:	7c 01       	movw	r14, r24
     bc0:	f9 01       	movw	r30, r18
     bc2:	e0 57       	subi	r30, 0x70	; 112
     bc4:	fc 4f       	sbci	r31, 0xFC	; 252
     bc6:	e0 81       	ld	r30, Z
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	29 5f       	subi	r18, 0xF9	; 249
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	ea 13       	cpse	r30, r26
     bd0:	f4 cf       	rjmp	.-24     	; 0xbba <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     bd2:	27 e0       	ldi	r18, 0x07	; 7
     bd4:	2e 9d       	mul	r18, r14
     bd6:	c0 01       	movw	r24, r0
     bd8:	2f 9d       	mul	r18, r15
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	9c 01       	movw	r18, r24
     be0:	20 57       	subi	r18, 0x70	; 112
     be2:	3c 4f       	sbci	r19, 0xFC	; 252
     be4:	24 0f       	add	r18, r20
     be6:	35 1f       	adc	r19, r21
     be8:	e8 96       	adiw	r28, 0x38	; 56
     bea:	3f af       	std	Y+63, r19	; 0x3f
     bec:	2e af       	std	Y+62, r18	; 0x3e
     bee:	e8 97       	sbiw	r28, 0x38	; 56
     bf0:	1a c0       	rjmp	.+52     	; 0xc26 <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     bf2:	ba 30       	cpi	r27, 0x0A	; 10
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_ProcessHIDReport+0x33e>
     bf6:	cb c1       	rjmp	.+918    	; 0xf8e <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	8b 0f       	add	r24, r27
     bfc:	eb 96       	adiw	r28, 0x3b	; 59
     bfe:	ee ad       	ldd	r30, Y+62	; 0x3e
     c00:	ff ad       	ldd	r31, Y+63	; 0x3f
     c02:	eb 97       	sbiw	r28, 0x3b	; 59
     c04:	80 83       	st	Z, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	9a 01       	movw	r18, r20
     c0a:	8b 9f       	mul	r24, r27
     c0c:	20 0d       	add	r18, r0
     c0e:	31 1d       	adc	r19, r1
     c10:	11 24       	eor	r1, r1
     c12:	20 57       	subi	r18, 0x70	; 112
     c14:	3c 4f       	sbci	r19, 0xFC	; 252
     c16:	e8 96       	adiw	r28, 0x38	; 56
     c18:	3f af       	std	Y+63, r19	; 0x3f
     c1a:	2e af       	std	Y+62, r18	; 0x3e
     c1c:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     c1e:	d9 01       	movw	r26, r18
     c20:	1d 92       	st	X+, r1
     c22:	8a 95       	dec	r24
     c24:	e9 f7       	brne	.-6      	; 0xc20 <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	ef 96       	adiw	r28, 0x3f	; 63
     c2a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c2c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c2e:	ef 97       	sbiw	r28, 0x3f	; 63
     c30:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     c32:	d8 01       	movw	r26, r16
     c34:	5b 96       	adiw	r26, 0x1b	; 27
     c36:	8c 91       	ld	r24, X
     c38:	e8 96       	adiw	r28, 0x38	; 56
     c3a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c3c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c3e:	e8 97       	sbiw	r28, 0x38	; 56
     c40:	80 83       	st	Z, r24
				break;
     c42:	83 c1       	rjmp	.+774    	; 0xf4a <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     c44:	e4 96       	adiw	r28, 0x34	; 52
     c46:	2f ad       	ldd	r18, Y+63	; 0x3f
     c48:	e4 97       	sbiw	r28, 0x34	; 52
     c4a:	28 30       	cpi	r18, 0x08	; 8
     c4c:	09 f4       	brne	.+2      	; 0xc50 <USB_ProcessHIDReport+0x396>
     c4e:	97 c1       	rjmp	.+814    	; 0xf7e <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     c50:	fe 01       	movw	r30, r28
     c52:	ed 59       	subi	r30, 0x9D	; 157
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	e2 0f       	add	r30, r18
     c58:	f1 1d       	adc	r31, r1
     c5a:	e2 0f       	add	r30, r18
     c5c:	f1 1d       	adc	r31, r1
     c5e:	d1 82       	std	Z+1, r13	; 0x01
     c60:	c0 82       	st	Z, r12
     c62:	2f 5f       	subi	r18, 0xFF	; 255
     c64:	e4 96       	adiw	r28, 0x34	; 52
     c66:	2f af       	std	Y+63, r18	; 0x3f
     c68:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     c6a:	6f c1       	rjmp	.+734    	; 0xf4a <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     c6c:	e6 96       	adiw	r28, 0x36	; 54
     c6e:	2e ad       	ldd	r18, Y+62	; 0x3e
     c70:	3f ad       	ldd	r19, Y+63	; 0x3f
     c72:	e6 97       	sbiw	r28, 0x36	; 54
     c74:	23 2b       	or	r18, r19
     c76:	41 f4       	brne	.+16     	; 0xc88 <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     c78:	9a 01       	movw	r18, r20
     c7a:	27 5b       	subi	r18, 0xB7	; 183
     c7c:	3c 4f       	sbci	r19, 0xFC	; 252
     c7e:	e6 96       	adiw	r28, 0x36	; 54
     c80:	3f af       	std	Y+63, r19	; 0x3f
     c82:	2e af       	std	Y+62, r18	; 0x3e
     c84:	e6 97       	sbiw	r28, 0x36	; 54
     c86:	1d c0       	rjmp	.+58     	; 0xcc2 <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     c88:	fa 01       	movw	r30, r20
     c8a:	e0 5b       	subi	r30, 0xB0	; 176
     c8c:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     c8e:	85 81       	ldd	r24, Z+5	; 0x05
     c90:	96 81       	ldd	r25, Z+6	; 0x06
     c92:	89 2b       	or	r24, r25
     c94:	61 f0       	breq	.+24     	; 0xcae <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     c96:	cd 57       	subi	r28, 0x7D	; 125
     c98:	df 4f       	sbci	r29, 0xFF	; 255
     c9a:	28 81       	ld	r18, Y
     c9c:	39 81       	ldd	r19, Y+1	; 0x01
     c9e:	c3 58       	subi	r28, 0x83	; 131
     ca0:	d0 40       	sbci	r29, 0x00	; 0
     ca2:	e2 17       	cp	r30, r18
     ca4:	f3 07       	cpc	r31, r19
     ca6:	09 f4       	brne	.+2      	; 0xcaa <USB_ProcessHIDReport+0x3f0>
     ca8:	6c c1       	rjmp	.+728    	; 0xf82 <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     caa:	37 96       	adiw	r30, 0x07	; 7
     cac:	f0 cf       	rjmp	.-32     	; 0xc8e <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     cae:	e6 96       	adiw	r28, 0x36	; 54
     cb0:	2e ad       	ldd	r18, Y+62	; 0x3e
     cb2:	3f ad       	ldd	r19, Y+63	; 0x3f
     cb4:	e6 97       	sbiw	r28, 0x36	; 54
     cb6:	36 83       	std	Z+6, r19	; 0x06
     cb8:	25 83       	std	Z+5, r18	; 0x05
     cba:	e6 96       	adiw	r28, 0x36	; 54
     cbc:	ff af       	std	Y+63, r31	; 0x3f
     cbe:	ee af       	std	Y+62, r30	; 0x3e
     cc0:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     cc2:	e6 96       	adiw	r28, 0x36	; 54
     cc4:	ae ad       	ldd	r26, Y+62	; 0x3e
     cc6:	bf ad       	ldd	r27, Y+63	; 0x3f
     cc8:	e6 97       	sbiw	r28, 0x36	; 54
     cca:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     ccc:	f8 01       	movw	r30, r16
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	92 81       	ldd	r25, Z+2	; 0x02
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     cda:	e4 96       	adiw	r28, 0x34	; 52
     cdc:	2f ad       	ldd	r18, Y+63	; 0x3f
     cde:	e4 97       	sbiw	r28, 0x34	; 52
     ce0:	22 23       	and	r18, r18
     ce2:	e1 f0       	breq	.+56     	; 0xd1c <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     ce4:	a5 96       	adiw	r28, 0x25	; 37
     ce6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ce8:	9f ad       	ldd	r25, Y+63	; 0x3f
     cea:	a5 97       	sbiw	r28, 0x25	; 37
     cec:	14 96       	adiw	r26, 0x04	; 4
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	13 97       	sbiw	r26, 0x03	; 3
     cf4:	fe 01       	movw	r30, r28
     cf6:	ed 59       	subi	r30, 0x9D	; 157
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     cfa:	21 e0       	ldi	r18, 0x01	; 1
     cfc:	e4 96       	adiw	r28, 0x34	; 52
     cfe:	3f ad       	ldd	r19, Y+63	; 0x3f
     d00:	e4 97       	sbiw	r28, 0x34	; 52
     d02:	23 17       	cp	r18, r19
     d04:	31 f0       	breq	.+12     	; 0xd12 <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	81 93       	st	Z+, r24
     d0c:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	f5 cf       	rjmp	.-22     	; 0xcfc <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     d12:	31 50       	subi	r19, 0x01	; 1
     d14:	e4 96       	adiw	r28, 0x34	; 52
     d16:	3f af       	std	Y+63, r19	; 0x3f
     d18:	e4 97       	sbiw	r28, 0x34	; 52
     d1a:	17 c1       	rjmp	.+558    	; 0xf4a <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     d1c:	48 14       	cp	r4, r8
     d1e:	59 04       	cpc	r5, r9
     d20:	6a 04       	cpc	r6, r10
     d22:	7b 04       	cpc	r7, r11
     d24:	08 f4       	brcc	.+2      	; 0xd28 <USB_ProcessHIDReport+0x46e>
     d26:	11 c1       	rjmp	.+546    	; 0xf4a <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     d28:	e6 96       	adiw	r28, 0x36	; 54
     d2a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d2c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d2e:	e6 97       	sbiw	r28, 0x36	; 54
     d30:	14 96       	adiw	r26, 0x04	; 4
     d32:	9c 92       	st	X, r9
     d34:	8e 92       	st	-X, r8
     d36:	13 97       	sbiw	r26, 0x03	; 3
     d38:	bf ef       	ldi	r27, 0xFF	; 255
     d3a:	8b 1a       	sub	r8, r27
     d3c:	9b 0a       	sbc	r9, r27
     d3e:	ab 0a       	sbc	r10, r27
     d40:	bb 0a       	sbc	r11, r27
     d42:	03 c1       	rjmp	.+518    	; 0xf4a <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     d44:	e6 96       	adiw	r28, 0x36	; 54
     d46:	2e ad       	ldd	r18, Y+62	; 0x3e
     d48:	3f ad       	ldd	r19, Y+63	; 0x3f
     d4a:	e6 97       	sbiw	r28, 0x36	; 54
     d4c:	21 15       	cp	r18, r1
     d4e:	31 05       	cpc	r19, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <USB_ProcessHIDReport+0x49a>
     d52:	19 c1       	rjmp	.+562    	; 0xf86 <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     d54:	d9 01       	movw	r26, r18
     d56:	15 96       	adiw	r26, 0x05	; 5
     d58:	0d 90       	ld	r0, X+
     d5a:	bc 91       	ld	r27, X
     d5c:	a0 2d       	mov	r26, r0
     d5e:	e6 96       	adiw	r28, 0x36	; 54
     d60:	bf af       	std	Y+63, r27	; 0x3f
     d62:	ae af       	std	Y+62, r26	; 0x3e
     d64:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     d66:	f1 c0       	rjmp	.+482    	; 0xf4a <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     d68:	da 01       	movw	r26, r20
     d6a:	fa e2       	ldi	r31, 0x2A	; 42
     d6c:	f8 9f       	mul	r31, r24
     d6e:	a0 0d       	add	r26, r0
     d70:	b1 1d       	adc	r27, r1
     d72:	11 24       	eor	r1, r1
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	fe 01       	movw	r30, r28
     d78:	f9 96       	adiw	r30, 0x39	; 57
     d7a:	8a e2       	ldi	r24, 0x2A	; 42
     d7c:	01 90       	ld	r0, Z+
     d7e:	0d 92       	st	X+, r0
     d80:	8a 95       	dec	r24
     d82:	e1 f7       	brne	.-8      	; 0xd7c <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     d84:	c1 58       	subi	r28, 0x81	; 129
     d86:	df 4f       	sbci	r29, 0xFF	; 255
     d88:	88 81       	ld	r24, Y
     d8a:	99 81       	ldd	r25, Y+1	; 0x01
     d8c:	aa 81       	ldd	r26, Y+2	; 0x02
     d8e:	bb 81       	ldd	r27, Y+3	; 0x03
     d90:	cf 57       	subi	r28, 0x7F	; 127
     d92:	d0 40       	sbci	r29, 0x00	; 0
     d94:	89 2b       	or	r24, r25
     d96:	8a 2b       	or	r24, r26
     d98:	8b 2b       	or	r24, r27
     d9a:	09 f4       	brne	.+2      	; 0xd9e <USB_ProcessHIDReport+0x4e4>
     d9c:	8f c0       	rjmp	.+286    	; 0xebc <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     d9e:	3f 5f       	subi	r19, 0xFF	; 255
     da0:	f8 01       	movw	r30, r16
     da2:	82 8d       	ldd	r24, Z+26	; 0x1a
     da4:	38 17       	cp	r19, r24
     da6:	08 f0       	brcs	.+2      	; 0xdaa <USB_ProcessHIDReport+0x4f0>
     da8:	d0 c0       	rjmp	.+416    	; 0xf4a <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     daa:	f8 01       	movw	r30, r16
     dac:	de 01       	movw	r26, r28
     dae:	af 5b       	subi	r26, 0xBF	; 191
     db0:	bf 4f       	sbci	r27, 0xFF	; 255
     db2:	8a e1       	ldi	r24, 0x1A	; 26
     db4:	01 90       	ld	r0, Z+
     db6:	0d 92       	st	X+, r0
     db8:	8a 95       	dec	r24
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     dbc:	dd ae       	std	Y+61, r13	; 0x3d
     dbe:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     dc0:	e6 96       	adiw	r28, 0x36	; 54
     dc2:	ee ad       	ldd	r30, Y+62	; 0x3e
     dc4:	ff ad       	ldd	r31, Y+63	; 0x3f
     dc6:	e6 97       	sbiw	r28, 0x36	; 54
     dc8:	21 96       	adiw	r28, 0x01	; 1
     dca:	ff af       	std	Y+63, r31	; 0x3f
     dcc:	ee af       	std	Y+62, r30	; 0x3e
     dce:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     dd0:	d8 01       	movw	r26, r16
     dd2:	5b 96       	adiw	r26, 0x1b	; 27
     dd4:	8c 91       	ld	r24, X
     dd6:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     dd8:	e4 96       	adiw	r28, 0x34	; 52
     dda:	bf ad       	ldd	r27, Y+63	; 0x3f
     ddc:	e4 97       	sbiw	r28, 0x34	; 52
     dde:	bb 23       	and	r27, r27
     de0:	e1 f0       	breq	.+56     	; 0xe1a <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     de2:	a5 96       	adiw	r28, 0x25	; 37
     de4:	8e ad       	ldd	r24, Y+62	; 0x3e
     de6:	9f ad       	ldd	r25, Y+63	; 0x3f
     de8:	a5 97       	sbiw	r28, 0x25	; 37
     dea:	26 96       	adiw	r28, 0x06	; 6
     dec:	9f af       	std	Y+63, r25	; 0x3f
     dee:	8e af       	std	Y+62, r24	; 0x3e
     df0:	26 97       	sbiw	r28, 0x06	; 6
     df2:	fe 01       	movw	r30, r28
     df4:	ed 59       	subi	r30, 0x9D	; 157
     df6:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     df8:	a1 e0       	ldi	r26, 0x01	; 1
     dfa:	e4 96       	adiw	r28, 0x34	; 52
     dfc:	8f ad       	ldd	r24, Y+63	; 0x3f
     dfe:	e4 97       	sbiw	r28, 0x34	; 52
     e00:	a8 17       	cp	r26, r24
     e02:	31 f0       	breq	.+12     	; 0xe10 <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	81 93       	st	Z+, r24
     e0a:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     e0c:	af 5f       	subi	r26, 0xFF	; 255
     e0e:	f5 cf       	rjmp	.-22     	; 0xdfa <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	e4 96       	adiw	r28, 0x34	; 52
     e14:	8f af       	std	Y+63, r24	; 0x3f
     e16:	e4 97       	sbiw	r28, 0x34	; 52
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     e1a:	48 14       	cp	r4, r8
     e1c:	59 04       	cpc	r5, r9
     e1e:	6a 04       	cpc	r6, r10
     e20:	7b 04       	cpc	r7, r11
     e22:	48 f0       	brcs	.+18     	; 0xe36 <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     e24:	26 96       	adiw	r28, 0x06	; 6
     e26:	9f ae       	std	Y+63, r9	; 0x3f
     e28:	8e ae       	std	Y+62, r8	; 0x3e
     e2a:	26 97       	sbiw	r28, 0x06	; 6
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	89 1a       	sub	r8, r25
     e30:	99 0a       	sbc	r9, r25
     e32:	a9 0a       	sbc	r10, r25
     e34:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     e36:	20 38       	cpi	r18, 0x80	; 128
     e38:	11 f4       	brne	.+4      	; 0xe3e <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     e3a:	1b ae       	std	Y+59, r1	; 0x3b
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     e3e:	20 39       	cpi	r18, 0x90	; 144
     e40:	19 f4       	brne	.+6      	; 0xe48 <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     e42:	a1 e0       	ldi	r26, 0x01	; 1
     e44:	ab af       	std	Y+59, r26	; 0x3b
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     e48:	b2 e0       	ldi	r27, 0x02	; 2
     e4a:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     e4c:	8b ad       	ldd	r24, Y+59	; 0x3b
     e4e:	e8 96       	adiw	r28, 0x38	; 56
     e50:	ee ad       	ldd	r30, Y+62	; 0x3e
     e52:	ff ad       	ldd	r31, Y+63	; 0x3f
     e54:	e8 97       	sbiw	r28, 0x38	; 56
     e56:	e8 0f       	add	r30, r24
     e58:	f1 1d       	adc	r31, r1
     e5a:	e8 0f       	add	r30, r24
     e5c:	f1 1d       	adc	r31, r1
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	92 81       	ldd	r25, Z+2	; 0x02
     e62:	9a af       	std	Y+58, r25	; 0x3a
     e64:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     e66:	d8 01       	movw	r26, r16
     e68:	bc 91       	ld	r27, X
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	92 81       	ldd	r25, Z+2	; 0x02
     e6e:	8b 0f       	add	r24, r27
     e70:	91 1d       	adc	r25, r1
     e72:	92 83       	std	Z+2, r25	; 0x02
     e74:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     e76:	8b ad       	ldd	r24, Y+59	; 0x3b
     e78:	e8 96       	adiw	r28, 0x38	; 56
     e7a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e7c:	ff ad       	ldd	r31, Y+63	; 0x3f
     e7e:	e8 97       	sbiw	r28, 0x38	; 56
     e80:	e8 0f       	add	r30, r24
     e82:	f1 1d       	adc	r31, r1
     e84:	e8 0f       	add	r30, r24
     e86:	f1 1d       	adc	r31, r1
     e88:	ed 96       	adiw	r28, 0x3d	; 61
     e8a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e8c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e8e:	ed 97       	sbiw	r28, 0x3d	; 61
     e90:	8d 91       	ld	r24, X+
     e92:	9c 91       	ld	r25, X
     e94:	01 80       	ldd	r0, Z+1	; 0x01
     e96:	f2 81       	ldd	r31, Z+2	; 0x02
     e98:	e0 2d       	mov	r30, r0
     e9a:	e8 17       	cp	r30, r24
     e9c:	f9 07       	cpc	r31, r25
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <USB_ProcessHIDReport+0x5e8>
     ea0:	fc 01       	movw	r30, r24
     ea2:	ed 96       	adiw	r28, 0x3d	; 61
     ea4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ea6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ea8:	ed 97       	sbiw	r28, 0x3d	; 61
     eaa:	ed 93       	st	X+, r30
     eac:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     eae:	fa 01       	movw	r30, r20
     eb0:	80 81       	ld	r24, Z
     eb2:	84 31       	cpi	r24, 0x14	; 20
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <USB_ProcessHIDReport+0x5fe>
     eb6:	58 cf       	rjmp	.-336    	; 0xd68 <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	6a c0       	rjmp	.+212    	; 0xf90 <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     ebc:	ce 01       	movw	r24, r28
     ebe:	c9 96       	adiw	r24, 0x39	; 57
     ec0:	c8 57       	subi	r28, 0x78	; 120
     ec2:	df 4f       	sbci	r29, 0xFF	; 255
     ec4:	28 83       	st	Y, r18
     ec6:	c8 58       	subi	r28, 0x88	; 136
     ec8:	d0 40       	sbci	r29, 0x00	; 0
     eca:	c9 57       	subi	r28, 0x79	; 121
     ecc:	df 4f       	sbci	r29, 0xFF	; 255
     ece:	38 83       	st	Y, r19
     ed0:	c7 58       	subi	r28, 0x87	; 135
     ed2:	d0 40       	sbci	r29, 0x00	; 0
     ed4:	c5 57       	subi	r28, 0x75	; 117
     ed6:	df 4f       	sbci	r29, 0xFF	; 255
     ed8:	48 83       	st	Y, r20
     eda:	cb 58       	subi	r28, 0x8B	; 139
     edc:	d0 40       	sbci	r29, 0x00	; 0
     ede:	c4 57       	subi	r28, 0x74	; 116
     ee0:	df 4f       	sbci	r29, 0xFF	; 255
     ee2:	58 83       	st	Y, r21
     ee4:	cc 58       	subi	r28, 0x8C	; 140
     ee6:	d0 40       	sbci	r29, 0x00	; 0
     ee8:	c7 57       	subi	r28, 0x77	; 119
     eea:	df 4f       	sbci	r29, 0xFF	; 255
     eec:	68 83       	st	Y, r22
     eee:	c9 58       	subi	r28, 0x89	; 137
     ef0:	d0 40       	sbci	r29, 0x00	; 0
     ef2:	c6 57       	subi	r28, 0x76	; 118
     ef4:	df 4f       	sbci	r29, 0xFF	; 255
     ef6:	78 83       	st	Y, r23
     ef8:	ca 58       	subi	r28, 0x8A	; 138
     efa:	d0 40       	sbci	r29, 0x00	; 0
     efc:	bf dc       	rcall	.-1666   	; 0x87c <CALLBACK_HIDParser_FilterHIDReportItem>
     efe:	c8 57       	subi	r28, 0x78	; 120
     f00:	df 4f       	sbci	r29, 0xFF	; 255
     f02:	28 81       	ld	r18, Y
     f04:	c8 58       	subi	r28, 0x88	; 136
     f06:	d0 40       	sbci	r29, 0x00	; 0
     f08:	c9 57       	subi	r28, 0x79	; 121
     f0a:	df 4f       	sbci	r29, 0xFF	; 255
     f0c:	38 81       	ld	r19, Y
     f0e:	c7 58       	subi	r28, 0x87	; 135
     f10:	d0 40       	sbci	r29, 0x00	; 0
     f12:	c5 57       	subi	r28, 0x75	; 117
     f14:	df 4f       	sbci	r29, 0xFF	; 255
     f16:	48 81       	ld	r20, Y
     f18:	cb 58       	subi	r28, 0x8B	; 139
     f1a:	d0 40       	sbci	r29, 0x00	; 0
     f1c:	c4 57       	subi	r28, 0x74	; 116
     f1e:	df 4f       	sbci	r29, 0xFF	; 255
     f20:	58 81       	ld	r21, Y
     f22:	cc 58       	subi	r28, 0x8C	; 140
     f24:	d0 40       	sbci	r29, 0x00	; 0
     f26:	c7 57       	subi	r28, 0x77	; 119
     f28:	df 4f       	sbci	r29, 0xFF	; 255
     f2a:	68 81       	ld	r22, Y
     f2c:	c9 58       	subi	r28, 0x89	; 137
     f2e:	d0 40       	sbci	r29, 0x00	; 0
     f30:	c6 57       	subi	r28, 0x76	; 118
     f32:	df 4f       	sbci	r29, 0xFF	; 255
     f34:	78 81       	ld	r23, Y
     f36:	ca 58       	subi	r28, 0x8A	; 138
     f38:	d0 40       	sbci	r29, 0x00	; 0
     f3a:	88 23       	and	r24, r24
     f3c:	09 f4       	brne	.+2      	; 0xf40 <USB_ProcessHIDReport+0x686>
     f3e:	2f cf       	rjmp	.-418    	; 0xd9e <USB_ProcessHIDReport+0x4e4>
     f40:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
     f42:	8c 91       	ld	r24, X
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	8c 93       	st	X, r24
     f48:	2a cf       	rjmp	.-428    	; 0xd9e <USB_ProcessHIDReport+0x4e4>
     f4a:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     f4c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f4e:	e9 97       	sbiw	r28, 0x39	; 57
     f50:	8c 70       	andi	r24, 0x0C	; 12
     f52:	09 f0       	breq	.+2      	; 0xf56 <USB_ProcessHIDReport+0x69c>
     f54:	1d cd       	rjmp	.-1478   	; 0x990 <USB_ProcessHIDReport+0xd6>
     f56:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     f58:	51 2c       	mov	r5, r1
     f5a:	32 01       	movw	r6, r4
     f5c:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     f5e:	91 2c       	mov	r9, r1
     f60:	54 01       	movw	r10, r8
     f62:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     f64:	1f ae       	std	Y+63, r1	; 0x3f
     f66:	e4 97       	sbiw	r28, 0x34	; 52
     f68:	13 cd       	rjmp	.-1498   	; 0x990 <USB_ProcessHIDReport+0xd6>
     f6a:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     f6c:	8c 91       	ld	r24, X
     f6e:	81 11       	cpse	r24, r1
     f70:	0c c0       	rjmp	.+24     	; 0xf8a <USB_ProcessHIDReport+0x6d0>
     f72:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f76:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f7a:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f7e:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f82:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f86:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <USB_ProcessHIDReport+0x6d6>
     f8e:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     f90:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     f92:	df 4f       	sbci	r29, 0xFF	; 255
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	8f 90       	pop	r8
     fb6:	7f 90       	pop	r7
     fb8:	6f 90       	pop	r6
     fba:	5f 90       	pop	r5
     fbc:	4f 90       	pop	r4
     fbe:	3f 90       	pop	r3
     fc0:	2f 90       	pop	r2
     fc2:	08 95       	ret

00000fc4 <USB_GetHIDReportItemInfo>:
     fc4:	ef 92       	push	r14

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <USB_GetHIDReportItemInfo+0x14>
     fd6:	4c c0       	rjmp	.+152    	; 0x1070 <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     fd8:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     fda:	d0 81       	ld	r29, Z
     fdc:	c1 81       	ldd	r28, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     fde:	25 81       	ldd	r18, Z+5	; 0x05
     fe0:	22 23       	and	r18, r18
     fe2:	29 f0       	breq	.+10     	; 0xfee <USB_GetHIDReportItemInfo+0x2a>
	{
		if (ReportItem->ReportID != ReportData[0])
     fe4:	dc 01       	movw	r26, r24
     fe6:	4c 91       	ld	r20, X
     fe8:	24 13       	cpse	r18, r20
     fea:	42 c0       	rjmp	.+132    	; 0x1070 <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     fec:	01 96       	adiw	r24, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
     fee:	42 a1       	ldd	r20, Z+34	; 0x22
     ff0:	53 a1       	ldd	r21, Z+35	; 0x23
     ff2:	64 a1       	ldd	r22, Z+36	; 0x24
     ff4:	75 a1       	ldd	r23, Z+37	; 0x25
     ff6:	46 a3       	std	Z+38, r20	; 0x26
     ff8:	57 a3       	std	Z+39, r21	; 0x27
     ffa:	60 a7       	std	Z+40, r22	; 0x28
     ffc:	71 a7       	std	Z+41, r23	; 0x29
	ReportItem->Value = 0;
     ffe:	12 a2       	std	Z+34, r1	; 0x22
    1000:	13 a2       	std	Z+35, r1	; 0x23
    1002:	14 a2       	std	Z+36, r1	; 0x24
    1004:	15 a2       	std	Z+37, r1	; 0x25
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1006:	ad 2f       	mov	r26, r29
    1008:	bc 2f       	mov	r27, r28
	uint32_t BitMask      = (1 << 0);
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	7d 01       	movw	r14, r26
    1014:	e3 0e       	add	r14, r19
    1016:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1018:	ea 16       	cp	r14, r26
    101a:	fb 06       	cpc	r15, r27
    101c:	39 f1       	breq	.+78     	; 0x106c <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    101e:	9d 01       	movw	r18, r26
    1020:	c3 e0       	ldi	r28, 0x03	; 3
    1022:	36 95       	lsr	r19
    1024:	27 95       	ror	r18
    1026:	ca 95       	dec	r28
    1028:	e1 f7       	brne	.-8      	; 0x1022 <USB_GetHIDReportItemInfo+0x5e>
    102a:	28 0f       	add	r18, r24
    102c:	39 1f       	adc	r19, r25
    102e:	e9 01       	movw	r28, r18
    1030:	28 81       	ld	r18, Y
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	8d 01       	movw	r16, r26
    1036:	07 70       	andi	r16, 0x07	; 7
    1038:	11 27       	eor	r17, r17
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <USB_GetHIDReportItemInfo+0x7c>
    103c:	35 95       	asr	r19
    103e:	27 95       	ror	r18
    1040:	0a 95       	dec	r16
    1042:	e2 f7       	brpl	.-8      	; 0x103c <USB_GetHIDReportItemInfo+0x78>
    1044:	20 ff       	sbrs	r18, 0
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
    1048:	02 a1       	ldd	r16, Z+34	; 0x22
    104a:	13 a1       	ldd	r17, Z+35	; 0x23
    104c:	24 a1       	ldd	r18, Z+36	; 0x24
    104e:	35 a1       	ldd	r19, Z+37	; 0x25
    1050:	04 2b       	or	r16, r20
    1052:	15 2b       	or	r17, r21
    1054:	26 2b       	or	r18, r22
    1056:	37 2b       	or	r19, r23
    1058:	02 a3       	std	Z+34, r16	; 0x22
    105a:	13 a3       	std	Z+35, r17	; 0x23
    105c:	24 a3       	std	Z+36, r18	; 0x24
    105e:	35 a3       	std	Z+37, r19	; 0x25

		CurrentBit++;
    1060:	11 96       	adiw	r26, 0x01	; 1
		BitMask <<= 1;
    1062:	44 0f       	add	r20, r20
    1064:	55 1f       	adc	r21, r21
    1066:	66 1f       	adc	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	d6 cf       	rjmp	.-84     	; 0x1018 <USB_GetHIDReportItemInfo+0x54>
	}

	return true;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <USB_GetHIDReportItemInfo+0xae>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
    1070:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	08 95       	ret

00001080 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1080:	80 91 9e 00 	lds	r24, 0x009E
    1084:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1086:	90 91 a0 00 	lds	r25, 0x00A0
    108a:	9d 7f       	andi	r25, 0xFD	; 253
    108c:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1090:	90 91 9e 00 	lds	r25, 0x009E
    1094:	92 60       	ori	r25, 0x02	; 2
    1096:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    109a:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    109e:	91 fd       	sbrc	r25, 1
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10a2:	90 91 9e 00 	lds	r25, 0x009E
    10a6:	91 60       	ori	r25, 0x01	; 1
    10a8:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    10ac:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    10b0:	90 91 a0 00 	lds	r25, 0x00A0
    10b4:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    10b6:	20 91 a0 00 	lds	r18, 0x00A0
    10ba:	2f 7d       	andi	r18, 0xDF	; 223
    10bc:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10c0:	20 91 9f 00 	lds	r18, 0x009F
    10c4:	2f 7d       	andi	r18, 0xDF	; 223
    10c6:	20 93 9f 00 	sts	0x009F, r18
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    10cc:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    10d0:	35 ff       	sbrs	r19, 5
    10d2:	0b c0       	rjmp	.+22     	; 0x10ea <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    10d4:	20 91 9f 00 	lds	r18, 0x009F
    10d8:	2f 7d       	andi	r18, 0xDF	; 223
    10da:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10de:	20 91 9f 00 	lds	r18, 0x009F
    10e2:	2d 7f       	andi	r18, 0xFD	; 253
    10e4:	20 93 9f 00 	sts	0x009F, r18
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ea:	ef ec       	ldi	r30, 0xCF	; 207
    10ec:	f7 e0       	ldi	r31, 0x07	; 7
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <USB_Host_ResetDevice+0x6e>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <USB_Host_ResetDevice+0x74>
    10f4:	00 00       	nop
    10f6:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    10f8:	49 f7       	brne	.-46     	; 0x10cc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    10fa:	99 23       	and	r25, r25
    10fc:	29 f0       	breq	.+10     	; 0x1108 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    10fe:	90 91 a0 00 	lds	r25, 0x00A0
    1102:	90 62       	ori	r25, 0x20	; 32
    1104:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1108:	81 11       	cpse	r24, r1
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    110c:	80 91 9e 00 	lds	r24, 0x009E
    1110:	8e 7f       	andi	r24, 0xFE	; 254
    1112:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1116:	80 91 a0 00 	lds	r24, 0x00A0
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	80 93 a0 00 	sts	0x00A0, r24
    1120:	08 95       	ret

00001122 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1122:	20 91 9e 00 	lds	r18, 0x009E
    1126:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1128:	90 91 a0 00 	lds	r25, 0x00A0
    112c:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    112e:	30 91 a0 00 	lds	r19, 0x00A0
    1132:	3f 7d       	andi	r19, 0xDF	; 223
    1134:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1138:	30 91 9f 00 	lds	r19, 0x009F
    113c:	3f 7d       	andi	r19, 0xDF	; 223
    113e:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1142:	30 91 9e 00 	lds	r19, 0x009E
    1146:	31 60       	ori	r19, 0x01	; 1
    1148:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    114c:	88 23       	and	r24, r24
    114e:	39 f1       	breq	.+78     	; 0x119e <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1150:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1154:	35 ff       	sbrs	r19, 5
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1158:	30 91 9f 00 	lds	r19, 0x009F
    115c:	3f 7d       	andi	r19, 0xDF	; 223
    115e:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1162:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1164:	30 91 fa 04 	lds	r19, 0x04FA
    1168:	31 30       	cpi	r19, 0x01	; 1
    116a:	c1 f0       	breq	.+48     	; 0x119c <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    116c:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    1170:	34 ff       	sbrs	r19, 4
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1174:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1178:	80 91 a6 00 	lds	r24, 0x00A6
    117c:	8f 7e       	andi	r24, 0xEF	; 239
    117e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1182:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1184:	0c c0       	rjmp	.+24     	; 0x119e <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1186:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
    118a:	31 ff       	sbrs	r19, 1
    118c:	df cf       	rjmp	.-66     	; 0x114c <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    118e:	80 91 a6 00 	lds	r24, 0x00A6
    1192:	8d 7f       	andi	r24, 0xFD	; 253
    1194:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1198:	83 e0       	ldi	r24, 0x03	; 3

			break;
    119a:	01 c0       	rjmp	.+2      	; 0x119e <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    119c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    119e:	21 11       	cpse	r18, r1
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11a2:	20 91 9e 00 	lds	r18, 0x009E
    11a6:	2e 7f       	andi	r18, 0xFE	; 254
    11a8:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    11ac:	99 23       	and	r25, r25
    11ae:	29 f0       	breq	.+10     	; 0x11ba <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    11b0:	90 91 a0 00 	lds	r25, 0x00A0
    11b4:	90 62       	ori	r25, 0x20	; 32
    11b6:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    11ba:	08 95       	ret

000011bc <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	28 97       	sbiw	r28, 0x08	; 8
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    11d4:	80 91 fa 04 	lds	r24, 0x04FA
    11d8:	85 30       	cpi	r24, 0x05	; 5
    11da:	09 f4       	brne	.+2      	; 0x11de <USB_Host_ProcessNextHostState+0x22>
    11dc:	9c c0       	rjmp	.+312    	; 0x1316 <USB_Host_ProcessNextHostState+0x15a>
    11de:	68 f4       	brcc	.+26     	; 0x11fa <USB_Host_ProcessNextHostState+0x3e>
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	e1 f1       	breq	.+120    	; 0x125c <USB_Host_ProcessNextHostState+0xa0>
    11e4:	18 f4       	brcc	.+6      	; 0x11ec <USB_Host_ProcessNextHostState+0x30>
    11e6:	88 23       	and	r24, r24
    11e8:	d9 f0       	breq	.+54     	; 0x1220 <USB_Host_ProcessNextHostState+0x64>
    11ea:	00 c1       	rjmp	.+512    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <USB_Host_ProcessNextHostState+0x36>
    11f0:	3f c0       	rjmp	.+126    	; 0x1270 <USB_Host_ProcessNextHostState+0xb4>
    11f2:	84 30       	cpi	r24, 0x04	; 4
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <USB_Host_ProcessNextHostState+0x3c>
    11f6:	67 c0       	rjmp	.+206    	; 0x12c6 <USB_Host_ProcessNextHostState+0x10a>
    11f8:	f9 c0       	rjmp	.+498    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    11fa:	87 30       	cpi	r24, 0x07	; 7
    11fc:	09 f4       	brne	.+2      	; 0x1200 <USB_Host_ProcessNextHostState+0x44>
    11fe:	a6 c0       	rjmp	.+332    	; 0x134c <USB_Host_ProcessNextHostState+0x190>
    1200:	08 f4       	brcc	.+2      	; 0x1204 <USB_Host_ProcessNextHostState+0x48>
    1202:	96 c0       	rjmp	.+300    	; 0x1330 <USB_Host_ProcessNextHostState+0x174>
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	09 f4       	brne	.+2      	; 0x120a <USB_Host_ProcessNextHostState+0x4e>
    1208:	bf c0       	rjmp	.+382    	; 0x1388 <USB_Host_ProcessNextHostState+0x1cc>
    120a:	89 30       	cpi	r24, 0x09	; 9
    120c:	09 f0       	breq	.+2      	; 0x1210 <USB_Host_ProcessNextHostState+0x54>
    120e:	ee c0       	rjmp	.+476    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1216:	8a e0       	ldi	r24, 0x0A	; 10
    1218:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    121c:	ba d8       	rcall	.-3724   	; 0x392 <EVENT_USB_Host_DeviceEnumerationComplete>
    121e:	e6 c0       	rjmp	.+460    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
			break;
    1220:	00 91 13 01 	lds	r16, 0x0113
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1224:	10 91 14 01 	lds	r17, 0x0114
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <USB_Host_ProcessNextHostState+0x74>
    122e:	de c0       	rjmp	.+444    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    1230:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1232:	77 df       	rcall	.-274    	; 0x1122 <USB_Host_WaitMS>
    1234:	88 23       	and	r24, r24
    1236:	31 f0       	breq	.+12     	; 0x1244 <USB_Host_ProcessNextHostState+0x88>
    1238:	90 91 12 01 	lds	r25, 0x0112
				{
					USB_HostState = PostWaitState;
    123c:	90 93 fa 04 	sts	0x04FA, r25
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	c5 c0       	rjmp	.+394    	; 0x13ce <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1244:	01 50       	subi	r16, 0x01	; 1
					break;
    1246:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
    1248:	10 93 14 01 	sts	0x0114, r17
    124c:	00 93 13 01 	sts	0x0113, r16
    1250:	01 2b       	or	r16, r17
    1252:	09 f0       	breq	.+2      	; 0x1256 <USB_Host_ProcessNextHostState+0x9a>
    1254:	cb c0       	rjmp	.+406    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    1256:	80 91 12 01 	lds	r24, 0x0112
				  USB_HostState = PostWaitState;
    125a:	07 c0       	rjmp	.+14     	; 0x126a <USB_Host_ProcessNextHostState+0xae>
    125c:	88 ee       	ldi	r24, 0xE8	; 232
    125e:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1260:	90 93 14 01 	sts	0x0114, r25
    1264:	80 93 13 01 	sts	0x0113, r24
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	80 93 fa 04 	sts	0x04FA, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    126e:	be c0       	rjmp	.+380    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    1270:	80 91 13 01 	lds	r24, 0x0113
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1274:	90 91 14 01 	lds	r25, 0x0114
    1278:	9c 01       	movw	r18, r24
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	31 09       	sbc	r19, r1
    127e:	30 93 14 01 	sts	0x0114, r19
    1282:	20 93 13 01 	sts	0x0113, r18
    1286:	89 2b       	or	r24, r25
    1288:	39 f0       	breq	.+14     	; 0x1298 <USB_Host_ProcessNextHostState+0xdc>
    128a:	8f ec       	ldi	r24, 0xCF	; 207
    128c:	97 e0       	ldi	r25, 0x07	; 7
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <USB_Host_ProcessNextHostState+0xd2>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <USB_Host_ProcessNextHostState+0xd8>
    1294:	00 00       	nop
    1296:	aa c0       	rjmp	.+340    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    1298:	77 98       	cbi	0x0e, 7	; 14
    129a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    129e:	80 61       	ori	r24, 0x10	; 16
    12a0:	80 93 d8 00 	sts	0x00D8, r24
    12a4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    12a8:	8b 7f       	andi	r24, 0xFB	; 251
    12aa:	80 93 dd 00 	sts	0x00DD, r24
    12ae:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    12b2:	80 61       	ori	r24, 0x10	; 16
    12b4:	80 93 d7 00 	sts	0x00D7, r24
    12b8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    12bc:	82 60       	ori	r24, 0x02	; 2
    12be:	80 93 dd 00 	sts	0x00DD, r24
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	d2 cf       	rjmp	.-92     	; 0x126a <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    12c6:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    12ca:	80 ff       	sbrs	r24, 0
    12cc:	8f c0       	rjmp	.+286    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    12ce:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    12d2:	8e 7f       	andi	r24, 0xFE	; 254
    12d4:	80 93 9f 00 	sts	0x009F, r24
    12d8:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    12dc:	8d 7f       	andi	r24, 0xFD	; 253
    12de:	80 93 9f 00 	sts	0x009F, r24
    12e2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    12e6:	8d 7f       	andi	r24, 0xFD	; 253
    12e8:	80 93 df 00 	sts	0x00DF, r24
    12ec:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    12f0:	82 60       	ori	r24, 0x02	; 2
    12f2:	80 93 de 00 	sts	0x00DE, r24
    12f6:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 93 9e 00 	sts	0x009E, r24
    1300:	35 d1       	rcall	.+618    	; 0x156c <Pipe_ClearPipes>
    1302:	10 92 fa 04 	sts	0x04FA, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1306:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	90 93 14 01 	sts	0x0114, r25
    130e:	80 93 13 01 	sts	0x0113, r24
    1312:	85 e0       	ldi	r24, 0x05	; 5
    1314:	0a c0       	rjmp	.+20     	; 0x132a <USB_Host_ProcessNextHostState+0x16e>
    1316:	b4 de       	rcall	.-664    	; 0x1080 <USB_Host_ResetDevice>
    1318:	10 92 fa 04 	sts	0x04FA, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    131c:	88 ec       	ldi	r24, 0xC8	; 200
    131e:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1320:	90 93 14 01 	sts	0x0114, r25
    1324:	80 93 13 01 	sts	0x0113, r24
    1328:	86 e0       	ldi	r24, 0x06	; 6
    132a:	80 93 12 01 	sts	0x0112, r24
    132e:	5e c0       	rjmp	.+188    	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    1330:	01 e0       	ldi	r16, 0x01	; 1
    1332:	20 e4       	ldi	r18, 0x40	; 64
    1334:	30 e0       	ldi	r19, 0x00	; 0
			break;
    1336:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	af d0       	rcall	.+350    	; 0x149c <Pipe_ConfigurePipe>
    133e:	81 11       	cpse	r24, r1
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <USB_Host_ProcessNextHostState+0x18c>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	43 c0       	rjmp	.+134    	; 0x13ce <USB_Host_ProcessNextHostState+0x212>
    1348:	87 e0       	ldi	r24, 0x07	; 7
    134a:	8f cf       	rjmp	.-226    	; 0x126a <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    134c:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    134e:	e1 e0       	ldi	r30, 0x01	; 1
    1350:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1352:	a2 ef       	ldi	r26, 0xF2	; 242
    1354:	b4 e0       	ldi	r27, 0x04	; 4
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1356:	01 90       	ld	r0, Z+
    1358:	0d 92       	st	X+, r0
    135a:	8a 95       	dec	r24
    135c:	e1 f7       	brne	.-8      	; 0x1356 <USB_Host_ProcessNextHostState+0x19a>
    135e:	10 92 a7 00 	sts	0x00A7, r1
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	30 d3       	rcall	.+1632   	; 0x19c8 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1368:	81 11       	cpse	r24, r1
    136a:	30 c0       	rjmp	.+96     	; 0x13cc <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    136c:	88 85       	ldd	r24, Y+8	; 0x08
    136e:	80 93 00 01 	sts	0x0100, r24
    1372:	86 de       	rcall	.-756    	; 0x1080 <USB_Host_ResetDevice>
    1374:	10 92 fa 04 	sts	0x04FA, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1378:	88 ec       	ldi	r24, 0xC8	; 200
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	90 93 14 01 	sts	0x0114, r25

			USB_Host_ResetDevice();
    1380:	80 93 13 01 	sts	0x0113, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1384:	88 e0       	ldi	r24, 0x08	; 8
    1386:	d1 cf       	rjmp	.-94     	; 0x132a <USB_Host_ProcessNextHostState+0x16e>
    1388:	20 91 00 01 	lds	r18, 0x0100
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	01 e0       	ldi	r16, 0x01	; 1
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1396:	82 d0       	rcall	.+260    	; 0x149c <Pipe_ConfigurePipe>
    1398:	88 23       	and	r24, r24
    139a:	99 f2       	breq	.-90     	; 0x1342 <USB_Host_ProcessNextHostState+0x186>
    139c:	88 e0       	ldi	r24, 0x08	; 8
    139e:	e9 e0       	ldi	r30, 0x09	; 9
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	a2 ef       	ldi	r26, 0xF2	; 242
    13a4:	b4 e0       	ldi	r27, 0x04	; 4
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <USB_Host_ProcessNextHostState+0x1ea>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0a d3       	rcall	.+1556   	; 0x19c8 <USB_Host_SendControlRequest>
    13b4:	81 11       	cpse	r24, r1
    13b6:	0a c0       	rjmp	.+20     	; 0x13cc <USB_Host_ProcessNextHostState+0x210>
    13b8:	10 92 fa 04 	sts	0x04FA, r1
    13bc:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	90 93 14 01 	sts	0x0114, r25
    13c4:	80 93 13 01 	sts	0x0113, r24
    13c8:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    13ca:	af cf       	rjmp	.-162    	; 0x132a <USB_Host_ProcessNextHostState+0x16e>
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	20 91 fa 04 	lds	r18, 0x04FA
    13d2:	21 30       	cpi	r18, 0x01	; 1
    13d4:	59 f0       	breq	.+22     	; 0x13ec <USB_Host_ProcessNextHostState+0x230>
    13d6:	68 2f       	mov	r22, r24
    13d8:	89 2f       	mov	r24, r25
    13da:	57 d8       	rcall	.-3922   	; 0x48a <EVENT_USB_Host_DeviceEnumerationFailed>
    13dc:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	80 93 dd 00 	sts	0x00DD, r24
    13e6:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    13ea:	1a d1       	rcall	.+564    	; 0x1620 <USB_ResetInterface>
    13ec:	28 96       	adiw	r28, 0x08	; 8
    13ee:	0f b6       	in	r0, 0x3f	; 63
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17

		USB_ResetInterface();
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	7c 01       	movw	r14, r24
    1414:	8b 01       	movw	r16, r22
    1416:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1418:	80 91 aa 00 	lds	r24, 0x00AA
    141c:	8f 7c       	andi	r24, 0xCF	; 207
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1424:	b7 d0       	rcall	.+366    	; 0x1594 <Pipe_WaitUntilReady>
    1426:	81 11       	cpse	r24, r1
    1428:	30 c0       	rjmp	.+96     	; 0x148a <Pipe_Read_Stream_LE+0x88>
    142a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    142c:	31 f0       	breq	.+12     	; 0x143a <Pipe_Read_Stream_LE+0x38>
    142e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1430:	99 81       	ldd	r25, Y+1	; 0x01
    1432:	08 1b       	sub	r16, r24
    1434:	19 0b       	sbc	r17, r25
    1436:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1438:	f9 1e       	adc	r15, r25
    143a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    143c:	d1 2c       	mov	r13, r1
    143e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1440:	11 05       	cpc	r17, r1
    1442:	11 f1       	breq	.+68     	; 0x1488 <Pipe_Read_Stream_LE+0x86>
    1444:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1448:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <Pipe_Read_Stream_LE+0x70>
    144c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1450:	8e 77       	andi	r24, 0x7E	; 126
    1452:	80 93 a6 00 	sts	0x00A6, r24
    1456:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1458:	41 f0       	breq	.+16     	; 0x146a <Pipe_Read_Stream_LE+0x68>
    145a:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    145c:	99 81       	ldd	r25, Y+1	; 0x01
    145e:	8c 0d       	add	r24, r12
    1460:	9d 1d       	adc	r25, r13
    1462:	99 83       	std	Y+1, r25	; 0x01
    1464:	88 83       	st	Y, r24
    1466:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1468:	10 c0       	rjmp	.+32     	; 0x148a <Pipe_Read_Stream_LE+0x88>
    146a:	94 d0       	rcall	.+296    	; 0x1594 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    146c:	88 23       	and	r24, r24
    146e:	39 f3       	breq	.-50     	; 0x143e <Pipe_Read_Stream_LE+0x3c>
    1470:	0c c0       	rjmp	.+24     	; 0x148a <Pipe_Read_Stream_LE+0x88>
    1472:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1476:	f7 01       	movw	r30, r14
    1478:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    147a:	7f 01       	movw	r14, r30
    147c:	01 50       	subi	r16, 0x01	; 1
    147e:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1480:	ff ef       	ldi	r31, 0xFF	; 255
    1482:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    1484:	df 0a       	sbc	r13, r31
    1486:	db cf       	rjmp	.-74     	; 0x143e <Pipe_Read_Stream_LE+0x3c>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    148c:	cf 91       	pop	r28
}
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	08 95       	ret

0000149c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    149c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    149e:	e8 2f       	mov	r30, r24
    14a0:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    14a2:	87 ff       	sbrs	r24, 7
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <Pipe_ConfigurePipe+0xe>
    14a6:	80 e1       	ldi	r24, 0x10	; 16
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <Pipe_ConfigurePipe+0x10>
    14aa:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    14ac:	e7 30       	cpi	r30, 0x07	; 7
    14ae:	10 f0       	brcs	.+4      	; 0x14b4 <Pipe_ConfigurePipe+0x18>
	  return false;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	5a c0       	rjmp	.+180    	; 0x1568 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    14b4:	61 11       	cpse	r22, r1
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    14b8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    14ba:	90 e4       	ldi	r25, 0x40	; 64
    14bc:	69 9f       	mul	r22, r25
    14be:	b0 01       	movw	r22, r0
    14c0:	11 24       	eor	r1, r1
    14c2:	4f 70       	andi	r20, 0x0F	; 15
    14c4:	46 2b       	or	r20, r22
    14c6:	48 2b       	or	r20, r24
    14c8:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14ca:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    14ce:	5e 13       	cpse	r21, r30
    14d0:	19 c0       	rjmp	.+50     	; 0x1504 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    14d2:	02 30       	cpi	r16, 0x02	; 2
    14d4:	10 f0       	brcs	.+4      	; 0x14da <Pipe_ConfigurePipe+0x3e>
    14d6:	76 e0       	ldi	r23, 0x06	; 6
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <Pipe_ConfigurePipe+0x40>
    14da:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    14dc:	88 e0       	ldi	r24, 0x08	; 8
    14de:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    14e0:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    14e2:	82 17       	cp	r24, r18
    14e4:	93 07       	cpc	r25, r19
    14e6:	40 f0       	brcs	.+16     	; 0x14f8 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    14e8:	86 2f       	mov	r24, r22
    14ea:	82 95       	swap	r24
    14ec:	80 7f       	andi	r24, 0xF0	; 240
    14ee:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    14f0:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    14f2:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    14f8:	65 30       	cpi	r22, 0x05	; 5
    14fa:	b1 f3       	breq	.-20     	; 0x14e8 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    14fc:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	ef cf       	rjmp	.-34     	; 0x14e2 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1504:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1508:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    150c:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    1510:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1514:	81 fd       	sbrc	r24, 1
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1518:	5f 5f       	subi	r21, 0xFF	; 255
    151a:	57 30       	cpi	r21, 0x07	; 7
    151c:	b1 f6       	brne	.-84     	; 0x14ca <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    151e:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	21 c0       	rjmp	.+66     	; 0x1568 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1526:	90 91 a9 00 	lds	r25, 0x00A9
    152a:	9e 7f       	andi	r25, 0xFE	; 254
    152c:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1530:	90 91 ab 00 	lds	r25, 0x00AB
    1534:	9d 7f       	andi	r25, 0xFD	; 253
    1536:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    153a:	90 91 a9 00 	lds	r25, 0x00A9
    153e:	91 60       	ori	r25, 0x01	; 1
    1540:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1544:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1548:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    154c:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    1550:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1554:	80 91 a9 00 	lds	r24, 0x00A9
    1558:	80 62       	ori	r24, 0x20	; 32
    155a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    155e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1562:	87 fd       	sbrc	r24, 7
    1564:	d9 cf       	rjmp	.-78     	; 0x1518 <Pipe_ConfigurePipe+0x7c>
    1566:	a4 cf       	rjmp	.-184    	; 0x14b0 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    156c:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1570:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1572:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1576:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    157a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    157e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1582:	90 91 a9 00 	lds	r25, 0x00A9
    1586:	9e 7f       	andi	r25, 0xFE	; 254
    1588:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	87 30       	cpi	r24, 0x07	; 7
    1590:	81 f7       	brne	.-32     	; 0x1572 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1592:	08 95       	ret

00001594 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1594:	80 91 a2 00 	lds	r24, 0x00A2
    1598:	90 91 a3 00 	lds	r25, 0x00A3
    159c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    159e:	20 91 aa 00 	lds	r18, 0x00AA
    15a2:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    15a4:	20 31       	cpi	r18, 0x10	; 16
    15a6:	29 f4       	brne	.+10     	; 0x15b2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    15a8:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    15ac:	20 ff       	sbrs	r18, 0
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <Pipe_WaitUntilReady+0x26>
    15b0:	17 c0       	rjmp	.+46     	; 0x15e0 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    15b2:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    15b6:	22 fd       	sbrc	r18, 2
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    15ba:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    15be:	21 fd       	sbrc	r18, 1
    15c0:	11 c0       	rjmp	.+34     	; 0x15e4 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    15c2:	20 91 fa 04 	lds	r18, 0x04FA
    15c6:	21 30       	cpi	r18, 0x01	; 1
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <Pipe_WaitUntilReady+0x54>
    15ca:	20 91 a2 00 	lds	r18, 0x00A2
    15ce:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    15d2:	28 17       	cp	r18, r24
    15d4:	39 07       	cpc	r19, r25
    15d6:	19 f3       	breq	.-58     	; 0x159e <Pipe_WaitUntilReady+0xa>
    15d8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    15da:	41 f0       	breq	.+16     	; 0x15ec <Pipe_WaitUntilReady+0x58>
    15dc:	c9 01       	movw	r24, r18
    15de:	df cf       	rjmp	.-66     	; 0x159e <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    15ec:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    15ee:	08 95       	ret

000015f0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    15f0:	75 d0       	rcall	.+234    	; 0x16dc <USB_INT_DisableAllInterrupts>
    15f2:	7c d0       	rcall	.+248    	; 0x16ec <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    15f4:	e0 ee       	ldi	r30, 0xE0	; 224
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
    15fe:	e8 ed       	ldi	r30, 0xD8	; 216
    1600:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1602:	80 81       	ld	r24, Z
    1604:	8f 77       	andi	r24, 0x7F	; 127
    1606:	80 83       	st	Z, r24
    1608:	19 bc       	out	0x29, r1	; 41
    160a:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    160c:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    160e:	8c 91       	ld	r24, X
    1610:	8e 7f       	andi	r24, 0xFE	; 254
    1612:	8c 93       	st	X, r24
    1614:	80 81       	ld	r24, Z
    1616:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1618:	80 83       	st	Z, r24
    161a:	10 92 f1 04 	sts	0x04F1, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    161e:	08 95       	ret

00001620 <USB_ResetInterface>:
    1620:	5d d0       	rcall	.+186    	; 0x16dc <USB_INT_DisableAllInterrupts>
    1622:	64 d0       	rcall	.+200    	; 0x16ec <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1624:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	80 93 d8 00 	sts	0x00D8, r24
    162e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1632:	80 68       	ori	r24, 0x80	; 128
    1634:	80 93 d8 00 	sts	0x00D8, r24
    1638:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    163c:	8f 7d       	andi	r24, 0xDF	; 223
    163e:	80 93 d8 00 	sts	0x00D8, r24
    1642:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1646:	8f 77       	andi	r24, 0x7F	; 127
    1648:	80 93 d7 00 	sts	0x00D7, r24
    164c:	8c e0       	ldi	r24, 0x0C	; 12
    164e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1650:	8e e0       	ldi	r24, 0x0E	; 14
    1652:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1654:	09 b4       	in	r0, 0x29	; 41
    1656:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1658:	fd cf       	rjmp	.-6      	; 0x1654 <USB_ResetInterface+0x34>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	80 93 fa 04 	sts	0x04FA, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1660:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ConfigurationNumber = 0;
    1664:	80 e4       	ldi	r24, 0x40	; 64
    1666:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    166a:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    166e:	80 64       	ori	r24, 0x40	; 64
    1670:	80 93 d8 00 	sts	0x00D8, r24
    1674:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1678:	81 60       	ori	r24, 0x01	; 1
    167a:	80 93 dd 00 	sts	0x00DD, r24
    167e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1682:	84 60       	ori	r24, 0x04	; 4
    1684:	80 93 dd 00 	sts	0x00DD, r24
    1688:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    168c:	8f 7e       	andi	r24, 0xEF	; 239
    168e:	80 93 d7 00 	sts	0x00D7, r24
    1692:	6f 9a       	sbi	0x0d, 7	; 13
    1694:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1696:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	80 93 de 00 	sts	0x00DE, r24
    16a0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    16a4:	84 60       	ori	r24, 0x04	; 4
    16a6:	80 93 de 00 	sts	0x00DE, r24
    16aa:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	80 93 e0 00 	sts	0x00E0, r24
    16b4:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    16b8:	80 61       	ori	r24, 0x10	; 16
    16ba:	80 93 d8 00 	sts	0x00D8, r24
    16be:	08 95       	ret

000016c0 <USB_Init>:
    16c0:	e8 ed       	ldi	r30, 0xD8	; 216
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 7e       	andi	r24, 0xEF	; 239
    16c8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    16ca:	e7 ed       	ldi	r30, 0xD7	; 215
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
    16da:	a2 cf       	rjmp	.-188    	; 0x1620 <USB_ResetInterface>

000016dc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    16dc:	e8 ed       	ldi	r30, 0xD8	; 216
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8c 7f       	andi	r24, 0xFC	; 252
    16e4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    16e6:	10 92 a0 00 	sts	0x00A0, r1
    16ea:	08 95       	ret

000016ec <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    16ec:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    16f0:	10 92 9f 00 	sts	0x009F, r1
    16f4:	08 95       	ret

000016f6 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	0b b6       	in	r0, 0x3b	; 59
    1702:	0f 92       	push	r0
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    171c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1720:	85 ff       	sbrs	r24, 5
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1724:	80 91 a0 00 	lds	r24, 0x00A0
    1728:	85 ff       	sbrs	r24, 5
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    172c:	80 91 9f 00 	lds	r24, 0x009F
    1730:	8f 7d       	andi	r24, 0xDF	; 223
    1732:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1736:	20 d1       	rcall	.+576    	; 0x1978 <USB_Event_Stub>
    1738:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    173c:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    173e:	16 c0       	rjmp	.+44     	; 0x176c <__vector_10+0x76>
    1740:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1744:	81 ff       	sbrs	r24, 1
    1746:	12 c0       	rjmp	.+36     	; 0x176c <__vector_10+0x76>
    1748:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    174c:	8d 7f       	andi	r24, 0xFD	; 253
    174e:	80 93 9f 00 	sts	0x009F, r24
    1752:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1756:	8e 7f       	andi	r24, 0xFE	; 254
    1758:	80 93 9f 00 	sts	0x009F, r24
    175c:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1760:	8d 7f       	andi	r24, 0xFD	; 253
    1762:	80 93 a0 00 	sts	0x00A0, r24
    1766:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    176a:	5a df       	rcall	.-332    	; 0x1620 <USB_ResetInterface>

		USB_ResetInterface();
    176c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1770:	81 ff       	sbrs	r24, 1
    1772:	17 c0       	rjmp	.+46     	; 0x17a2 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1774:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1778:	81 ff       	sbrs	r24, 1
    177a:	13 c0       	rjmp	.+38     	; 0x17a2 <__vector_10+0xac>
    177c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1780:	8d 7f       	andi	r24, 0xFD	; 253
    1782:	80 93 df 00 	sts	0x00DF, r24
    1786:	77 98       	cbi	0x0e, 7	; 14
    1788:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    178c:	81 60       	ori	r24, 0x01	; 1
    178e:	80 93 dd 00 	sts	0x00DD, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 2d 02 	call	0x45a	; 0x45a <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1798:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 fa 04 	sts	0x04FA, r24

		USB_HostState = HOST_STATE_Unattached;
    17a2:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    17a6:	80 ff       	sbrs	r24, 0
    17a8:	18 c0       	rjmp	.+48     	; 0x17da <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    17aa:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    17ae:	80 ff       	sbrs	r24, 0
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <__vector_10+0xe4>
    17b2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    17b6:	8e 7f       	andi	r24, 0xFE	; 254
    17b8:	80 93 df 00 	sts	0x00DF, r24
    17bc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    17c0:	8e 7f       	andi	r24, 0xFE	; 254
    17c2:	80 93 de 00 	sts	0x00DE, r24
    17c6:	0e 94 bd 01 	call	0x37a	; 0x37a <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    17ca:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    17ce:	82 60       	ori	r24, 0x02	; 2
    17d0:	80 93 a0 00 	sts	0x00A0, r24
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	80 93 fa 04 	sts	0x04FA, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    17da:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    17de:	82 ff       	sbrs	r24, 2
    17e0:	10 c0       	rjmp	.+32     	; 0x1802 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    17e2:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    17e6:	82 ff       	sbrs	r24, 2
    17e8:	0c c0       	rjmp	.+24     	; 0x1802 <__vector_10+0x10c>
    17ea:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    17ee:	8b 7f       	andi	r24, 0xFB	; 251
    17f0:	80 93 df 00 	sts	0x00DF, r24
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    17f8:	0e 94 45 02 	call	0x48a	; 0x48a <EVENT_USB_Host_DeviceEnumerationFailed>
    17fc:	0e 94 c3 01 	call	0x386	; 0x386 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1800:	0f df       	rcall	.-482    	; 0x1620 <USB_ResetInterface>
    1802:	ff 91       	pop	r31

		USB_ResetInterface();
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0b be       	out	0x3b, r0	; 59
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    182e:	eb 01       	movw	r28, r22
    1830:	a8 81       	ld	r26, Y
    1832:	b9 81       	ldd	r27, Y+1	; 0x01
    1834:	8c 91       	ld	r24, X
    1836:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    1838:	20 81       	ld	r18, Z
    183a:	31 81       	ldd	r19, Z+1	; 0x01
    183c:	82 17       	cp	r24, r18
    183e:	93 07       	cpc	r25, r19
    1840:	08 f4       	brcc	.+2      	; 0x1844 <USB_GetNextDescriptor+0x1c>
    1842:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1844:	a2 0f       	add	r26, r18
    1846:	b3 1f       	adc	r27, r19
    1848:	eb 01       	movw	r28, r22
    184a:	b9 83       	std	Y+1, r27	; 0x01
    184c:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	82 1b       	sub	r24, r18
    1854:	93 0b       	sbc	r25, r19
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
			}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1860:	cf 92       	push	r12
    1862:	df 92       	push	r13
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	29 97       	sbiw	r28, 0x09	; 9
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	7b 01       	movw	r14, r22
    1882:	8a 01       	movw	r16, r20
    1884:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1886:	90 e8       	ldi	r25, 0x80	; 128
    1888:	90 93 f2 04 	sts	0x04F2, r25
    188c:	96 e0       	ldi	r25, 0x06	; 6
    188e:	90 93 f3 04 	sts	0x04F3, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1892:	e8 2f       	mov	r30, r24
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	31 97       	sbiw	r30, 0x01	; 1
    1898:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    189a:	f0 93 f5 04 	sts	0x04F5, r31
    189e:	e0 93 f4 04 	sts	0x04F4, r30
    18a2:	10 92 f7 04 	sts	0x04F7, r1
    18a6:	10 92 f6 04 	sts	0x04F6, r1
    18aa:	89 e0       	ldi	r24, 0x09	; 9
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	90 93 f9 04 	sts	0x04F9, r25
    18b2:	80 93 f8 04 	sts	0x04F8, r24
    18b6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	84 d0       	rcall	.+264    	; 0x19c8 <USB_Host_SendControlRequest>
    18c0:	81 11       	cpse	r24, r1
    18c2:	19 c0       	rjmp	.+50     	; 0x18f6 <USB_Host_GetDeviceConfigDescriptor+0x96>
    18c4:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    18c6:	fc 81       	ldd	r31, Y+4	; 0x04
    18c8:	d7 01       	movw	r26, r14
    18ca:	ed 93       	st	X+, r30
    18cc:	fc 93       	st	X, r31
    18ce:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    18d0:	df 06       	cpc	r13, r31
    18d2:	70 f0       	brcs	.+28     	; 0x18f0 <USB_Host_GetDeviceConfigDescriptor+0x90>
    18d4:	f0 93 f9 04 	sts	0x04F9, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    18d8:	e0 93 f8 04 	sts	0x04F8, r30
    18dc:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    18de:	74 d0       	rcall	.+232    	; 0x19c8 <USB_Host_SendControlRequest>
    18e0:	81 11       	cpse	r24, r1
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <USB_Host_GetDeviceConfigDescriptor+0x96>
    18e4:	f8 01       	movw	r30, r16
    18e6:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <USB_Host_GetDeviceConfigDescriptor+0x94>
    18ec:	86 e0       	ldi	r24, 0x06	; 6
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    18f0:	85 e0       	ldi	r24, 0x05	; 5
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    18f8:	0f b6       	in	r0, 0x3f	; 63
}
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	df 90       	pop	r13
    1910:	cf 90       	pop	r12
    1912:	08 95       	ret

00001914 <USB_GetNextDescriptorComp>:
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	8c 01       	movw	r16, r24
    192a:	eb 01       	movw	r28, r22
    192c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    192e:	f8 01       	movw	r30, r16
    1930:	e0 80       	ld	r14, Z
    1932:	f1 80       	ldd	r15, Z+1	; 0x01
    1934:	e1 14       	cp	r14, r1
    1936:	f1 04       	cpc	r15, r1
    1938:	99 f0       	breq	.+38     	; 0x1960 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    193a:	a8 80       	ld	r10, Y
    193c:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    193e:	be 01       	movw	r22, r28
    1940:	c8 01       	movw	r24, r16
    1942:	72 df       	rcall	.-284    	; 0x1828 <USB_GetNextDescriptor>
    1944:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1946:	99 81       	ldd	r25, Y+1	; 0x01
    1948:	f6 01       	movw	r30, r12
    194a:	09 95       	icall
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	79 f3       	breq	.-34     	; 0x192e <USB_GetNextDescriptorComp+0x1a>
    1950:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1952:	39 f4       	brne	.+14     	; 0x1962 <USB_GetNextDescriptorComp+0x4e>
    1954:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1956:	a8 82       	st	Y, r10
    1958:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    195a:	f1 82       	std	Z+1, r15	; 0x01
    195c:	e0 82       	st	Z, r14
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <USB_GetNextDescriptorComp+0x4e>
    1960:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1962:	df 91       	pop	r29
}
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	08 95       	ret

00001978 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1978:	08 95       	ret

0000197a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1982:	c9 ee       	ldi	r28, 0xE9	; 233
    1984:	d3 e0       	ldi	r29, 0x03	; 3
    1986:	11 11       	cpse	r17, r1
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    198a:	80 91 a6 00 	lds	r24, 0x00A6
    198e:	83 fd       	sbrc	r24, 3
    1990:	16 c0       	rjmp	.+44     	; 0x19be <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	c6 db       	rcall	.-2164   	; 0x1122 <USB_Host_WaitMS>
    1996:	81 11       	cpse	r24, r1
    1998:	13 c0       	rjmp	.+38     	; 0x19c0 <USB_Host_WaitForIOS+0x46>
    199a:	21 97       	sbiw	r28, 0x01	; 1
    199c:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    199e:	99 f7       	brne	.-26     	; 0x1986 <USB_Host_WaitForIOS+0xc>
    19a0:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    19a2:	0e c0       	rjmp	.+28     	; 0x19c0 <USB_Host_WaitForIOS+0x46>
    19a4:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <USB_Host_WaitForIOS+0x38>
    19a8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    19ac:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    19ae:	f1 cf       	rjmp	.-30     	; 0x1992 <USB_Host_WaitForIOS+0x18>
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <USB_Host_WaitForIOS+0x44>
    19b2:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    19b4:	71 f7       	brne	.-36     	; 0x1992 <USB_Host_WaitForIOS+0x18>
    19b6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    19ba:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    19bc:	ea cf       	rjmp	.-44     	; 0x1992 <USB_Host_WaitForIOS+0x18>
    19be:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    19c0:	df 91       	pop	r29
}
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	08 95       	ret

000019c8 <USB_Host_SendControlRequest>:
    19c8:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    19d4:	f0 90 9e 00 	lds	r15, 0x009E
    19d8:	8f 2d       	mov	r24, r15
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    19de:	c0 91 f8 04 	lds	r28, 0x04F8
    19e2:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    19e6:	80 91 9e 00 	lds	r24, 0x009E
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	97 db       	rcall	.-2258   	; 0x1122 <USB_Host_WaitMS>
    19f4:	81 11       	cpse	r24, r1
    19f6:	cc c0       	rjmp	.+408    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    19f8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19fc:	8f 7c       	andi	r24, 0xCF	; 207
    19fe:	80 93 aa 00 	sts	0x00AA, r24
    1a02:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1a06:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1a0a:	8f 7e       	andi	r24, 0xEF	; 239
    1a0c:	80 93 a6 00 	sts	0x00A6, r24
    1a10:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a14:	8f 7b       	andi	r24, 0xBF	; 191
    1a16:	80 93 a9 00 	sts	0x00A9, r24
    1a1a:	e2 ef       	ldi	r30, 0xF2	; 242
    1a1c:	f4 e0       	ldi	r31, 0x04	; 4
    1a1e:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1a20:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a24:	84 e0       	ldi	r24, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1a26:	ea 3f       	cpi	r30, 0xFA	; 250
    1a28:	f8 07       	cpc	r31, r24
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <USB_Host_SendControlRequest+0x56>
    1a2c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1a30:	87 77       	andi	r24, 0x77	; 119
    1a32:	80 93 a6 00 	sts	0x00A6, r24
    1a36:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1a38:	a0 df       	rcall	.-192    	; 0x197a <USB_Host_WaitForIOS>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	a9 c0       	rjmp	.+338    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1a3e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	80 93 a9 00 	sts	0x00A9, r24
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	6b db       	rcall	.-2346   	; 0x1122 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	a0 c0       	rjmp	.+320    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1a50:	80 91 f2 04 	lds	r24, 0x04F2
    1a54:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1a56:	4e c0       	rjmp	.+156    	; 0x1af4 <USB_Host_SendControlRequest+0x12c>
    1a58:	80 91 aa 00 	lds	r24, 0x00AA
    1a5c:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a5e:	80 61       	ori	r24, 0x10	; 16
    1a60:	80 93 aa 00 	sts	0x00AA, r24
    1a64:	01 15       	cp	r16, r1
    1a66:	11 05       	cpc	r17, r1
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1a6a:	3a c0       	rjmp	.+116    	; 0x1ae0 <USB_Host_SendControlRequest+0x118>
    1a6c:	80 91 aa 00 	lds	r24, 0x00AA
    1a70:	8f 7c       	andi	r24, 0xCF	; 207
    1a72:	80 62       	ori	r24, 0x20	; 32
    1a74:	80 93 aa 00 	sts	0x00AA, r24
    1a78:	80 91 a9 00 	lds	r24, 0x00A9
    1a7c:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a7e:	80 93 a9 00 	sts	0x00A9, r24
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	7a df       	rcall	.-268    	; 0x197a <USB_Host_WaitForIOS>
    1a86:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a88:	83 c0       	rjmp	.+262    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1a8a:	80 91 a6 00 	lds	r24, 0x00A6
    1a8e:	8b 77       	andi	r24, 0x7B	; 123
    1a90:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	71 df       	rcall	.-286    	; 0x197a <USB_Host_WaitForIOS>
    1a98:	7b c0       	rjmp	.+246    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1a9a:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a9e:	8f 7b       	andi	r24, 0xBF	; 191
    1aa0:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	69 df       	rcall	.-302    	; 0x197a <USB_Host_WaitForIOS>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	72 c0       	rjmp	.+228    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1aac:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ab0:	90 91 f7 00 	lds	r25, 0x00F7
    1ab4:	89 2b       	or	r24, r25
    1ab6:	11 f4       	brne	.+4      	; 0x1abc <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ab8:	c0 e0       	ldi	r28, 0x00	; 0
    1aba:	d0 e0       	ldi	r29, 0x00	; 0
    1abc:	f8 01       	movw	r30, r16
    1abe:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1ac0:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1ac4:	90 91 f7 00 	lds	r25, 0x00F7
    1ac8:	89 2b       	or	r24, r25
    1aca:	69 f4       	brne	.+26     	; 0x1ae6 <USB_Host_SendControlRequest+0x11e>
    1acc:	80 91 a9 00 	lds	r24, 0x00A9
    1ad0:	80 64       	ori	r24, 0x40	; 64
    1ad2:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1ad6:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ada:	8e 77       	andi	r24, 0x7E	; 126
    1adc:	80 93 a6 00 	sts	0x00A6, r24
    1ae0:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1ae2:	d9 f6       	brne	.-74     	; 0x1a9a <USB_Host_SendControlRequest+0xd2>
    1ae4:	c3 cf       	rjmp	.-122    	; 0x1a6c <USB_Host_SendControlRequest+0xa4>
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
    1ae8:	89 f3       	breq	.-30     	; 0x1acc <USB_Host_SendControlRequest+0x104>
    1aea:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1aee:	81 93       	st	Z+, r24
    1af0:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1af2:	e5 cf       	rjmp	.-54     	; 0x1abe <USB_Host_SendControlRequest+0xf6>
    1af4:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1af6:	11 05       	cpc	r17, r1
    1af8:	b1 f1       	breq	.+108    	; 0x1b66 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1afa:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    1afe:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1b00:	80 62       	ori	r24, 0x20	; 32
    1b02:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b06:	80 91 a9 00 	lds	r24, 0x00A9
    1b0a:	8f 7b       	andi	r24, 0xBF	; 191
    1b0c:	80 93 a9 00 	sts	0x00A9, r24
    1b10:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b12:	20 97       	sbiw	r28, 0x00	; 0
    1b14:	01 f1       	breq	.+64     	; 0x1b56 <USB_Host_SendControlRequest+0x18e>
    1b16:	31 df       	rcall	.-414    	; 0x197a <USB_Host_WaitForIOS>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	3a c0       	rjmp	.+116    	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b1c:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1b1e:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b22:	30 91 f7 00 	lds	r19, 0x00F7
    1b26:	80 91 00 01 	lds	r24, 0x0100
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b2c:	28 17       	cp	r18, r24
    1b2e:	39 07       	cpc	r19, r25
    1b30:	58 f4       	brcc	.+22     	; 0x1b48 <USB_Host_SendControlRequest+0x180>
    1b32:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	8c 01       	movw	r16, r24
    1b38:	20 81       	ld	r18, Z
    1b3a:	20 93 af 00 	sts	0x00AF, r18
    1b3e:	21 97       	sbiw	r28, 0x01	; 1
    1b40:	20 97       	sbiw	r28, 0x00	; 0
    1b42:	19 f0       	breq	.+6      	; 0x1b4a <USB_Host_SendControlRequest+0x182>
    1b44:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1b46:	eb cf       	rjmp	.-42     	; 0x1b1e <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b48:	8f 01       	movw	r16, r30
    1b4a:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1b4e:	8b 77       	andi	r24, 0x7B	; 123
    1b50:	80 93 a6 00 	sts	0x00A6, r24
    1b54:	dd cf       	rjmp	.-70     	; 0x1b10 <USB_Host_SendControlRequest+0x148>
    1b56:	11 df       	rcall	.-478    	; 0x197a <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b58:	81 11       	cpse	r24, r1
    1b5a:	1a c0       	rjmp	.+52     	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1b5c:	80 91 a9 00 	lds	r24, 0x00A9
    1b60:	80 64       	ori	r24, 0x40	; 64
    1b62:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1b66:	80 91 aa 00 	lds	r24, 0x00AA
    1b6a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b6c:	80 61       	ori	r24, 0x10	; 16
    1b6e:	80 93 aa 00 	sts	0x00AA, r24
    1b72:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b76:	8f 7b       	andi	r24, 0xBF	; 191
    1b78:	80 93 a9 00 	sts	0x00A9, r24
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	fd de       	rcall	.-518    	; 0x197a <USB_Host_WaitForIOS>
    1b80:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <USB_Host_SendControlRequest+0x1c8>
    1b84:	80 91 a6 00 	lds	r24, 0x00A6
    1b88:	8e 77       	andi	r24, 0x7E	; 126
    1b8a:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 91 a9 00 	lds	r25, 0x00A9
    1b94:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b96:	90 93 a9 00 	sts	0x00A9, r25
    1b9a:	f1 10       	cpse	r15, r1
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <USB_Host_SendControlRequest+0x1e0>
    1b9e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ba2:	9e 7f       	andi	r25, 0xFE	; 254
    1ba4:	90 93 9e 00 	sts	0x009E, r25
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1bae:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1bba:	ff 90       	pop	r15
    1bbc:	08 95       	ret

00001bbe <USB_Host_SetDeviceConfiguration>:
    1bbe:	cf 93       	push	r28
				UPRST = 0;
    1bc0:	c8 2f       	mov	r28, r24
    1bc2:	10 92 f2 04 	sts	0x04F2, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1bc6:	89 e0       	ldi	r24, 0x09	; 9
    1bc8:	80 93 f3 04 	sts	0x04F3, r24
    1bcc:	2c 2f       	mov	r18, r28
    1bce:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1bd0:	30 93 f5 04 	sts	0x04F5, r19
    1bd4:	20 93 f4 04 	sts	0x04F4, r18
    1bd8:	10 92 f7 04 	sts	0x04F7, r1
    1bdc:	10 92 f6 04 	sts	0x04F6, r1
    1be0:	10 92 f9 04 	sts	0x04F9, r1
    1be4:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1be8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	eb de       	rcall	.-554    	; 0x19c8 <USB_Host_SendControlRequest>
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <USB_Host_SetDeviceConfiguration+0x4a>
    1bf6:	c0 93 f0 04 	sts	0x04F0, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1bfa:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <USB_Host_SetDeviceConfiguration+0x44>
    1bfe:	9b e0       	ldi	r25, 0x0B	; 11
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <USB_Host_SetDeviceConfiguration+0x46>
    1c02:	9a e0       	ldi	r25, 0x0A	; 10
    1c04:	90 93 fa 04 	sts	0x04FA, r25
    1c08:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1c0a:	08 95       	ret

00001c0c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1c0c:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1c0e:	c0 91 a7 00 	lds	r28, 0x00A7
    1c12:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1c14:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c18:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1c1c:	cf da       	rcall	.-2658   	; 0x11bc <USB_Host_ProcessNextHostState>
    1c1e:	c0 93 a7 00 	sts	0x00A7, r28
    1c22:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1c24:	08 95       	ret

00001c26 <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1c26:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1c2a:	95 ff       	sbrs	r25, 5
    1c2c:	fc cf       	rjmp	.-8      	; 0x1c26 <Serial_putchar>
				UDR1 = DataByte;
    1c2e:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1c38:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1c3c:	87 ff       	sbrs	r24, 7
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <Serial_getchar+0x18>
    1c40:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1c44:	87 ff       	sbrs	r24, 7
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1c48:	80 91 ce 00 	lds	r24, 0x00CE
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	08 95       	ret
	  return _FDEV_EOF;
    1c50:	8e ef       	ldi	r24, 0xFE	; 254
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1c5a:	08 95       	ret

00001c5c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1c5c:	fc 01       	movw	r30, r24
	if (!(Stream))
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	59 f4       	brne	.+22     	; 0x1c78 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1c62:	8b ef       	ldi	r24, 0xFB	; 251
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	90 93 0a 05 	sts	0x050A, r25
    1c6a:	80 93 09 05 	sts	0x0509, r24
		stdout = Stream;
    1c6e:	90 93 0c 05 	sts	0x050C, r25
    1c72:	80 93 0b 05 	sts	0x050B, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1c76:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1c78:	8e e0       	ldi	r24, 0x0E	; 14
    1c7a:	df 01       	movw	r26, r30
    1c7c:	1d 92       	st	X+, r1
    1c7e:	8a 95       	dec	r24
    1c80:	e9 f7       	brne	.-6      	; 0x1c7c <Serial_CreateStream+0x20>
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	83 83       	std	Z+3, r24	; 0x03
    1c86:	83 e1       	ldi	r24, 0x13	; 19
    1c88:	9e e0       	ldi	r25, 0x0E	; 14
    1c8a:	91 87       	std	Z+9, r25	; 0x09
    1c8c:	80 87       	std	Z+8, r24	; 0x08
    1c8e:	8c e1       	ldi	r24, 0x1C	; 28
    1c90:	9e e0       	ldi	r25, 0x0E	; 14
    1c92:	93 87       	std	Z+11, r25	; 0x0b
    1c94:	82 87       	std	Z+10, r24	; 0x0a
    1c96:	08 95       	ret

00001c98 <printf_P>:
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	37 96       	adiw	r30, 0x07	; 7
    1ca8:	61 91       	ld	r22, Z+
    1caa:	71 91       	ld	r23, Z+
    1cac:	0b e0       	ldi	r16, 0x0B	; 11
    1cae:	15 e0       	ldi	r17, 0x05	; 5
    1cb0:	d8 01       	movw	r26, r16
    1cb2:	8d 91       	ld	r24, X+
    1cb4:	9c 91       	ld	r25, X
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	13 96       	adiw	r26, 0x03	; 3
    1cba:	2c 91       	ld	r18, X
    1cbc:	13 97       	sbiw	r26, 0x03	; 3
    1cbe:	28 60       	ori	r18, 0x08	; 8
    1cc0:	13 96       	adiw	r26, 0x03	; 3
    1cc2:	2c 93       	st	X, r18
    1cc4:	af 01       	movw	r20, r30
    1cc6:	3a d0       	rcall	.+116    	; 0x1d3c <vfprintf>
    1cc8:	d8 01       	movw	r26, r16
    1cca:	ed 91       	ld	r30, X+
    1ccc:	fc 91       	ld	r31, X
    1cce:	23 81       	ldd	r18, Z+3	; 0x03
    1cd0:	27 7f       	andi	r18, 0xF7	; 247
    1cd2:	23 83       	std	Z+3, r18	; 0x03
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <puts_P>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	e0 91 0b 05 	lds	r30, 0x050B
    1cec:	f0 91 0c 05 	lds	r31, 0x050C
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	81 ff       	sbrs	r24, 1
    1cf4:	1c c0       	rjmp	.+56     	; 0x1d2e <puts_P+0x50>
    1cf6:	00 e0       	ldi	r16, 0x00	; 0
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	84 91       	lpm	r24, Z
    1cfe:	60 91 0b 05 	lds	r22, 0x050B
    1d02:	70 91 0c 05 	lds	r23, 0x050C
    1d06:	db 01       	movw	r26, r22
    1d08:	18 96       	adiw	r26, 0x08	; 8
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	19 97       	sbiw	r26, 0x09	; 9
    1d10:	88 23       	and	r24, r24
    1d12:	39 f0       	breq	.+14     	; 0x1d22 <puts_P+0x44>
    1d14:	09 95       	icall
    1d16:	89 2b       	or	r24, r25
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <puts_P+0x40>
    1d1a:	0f ef       	ldi	r16, 0xFF	; 255
    1d1c:	1f ef       	ldi	r17, 0xFF	; 255
    1d1e:	21 96       	adiw	r28, 0x01	; 1
    1d20:	ec cf       	rjmp	.-40     	; 0x1cfa <puts_P+0x1c>
    1d22:	8a e0       	ldi	r24, 0x0A	; 10
    1d24:	09 95       	icall
    1d26:	89 2b       	or	r24, r25
    1d28:	11 f4       	brne	.+4      	; 0x1d2e <puts_P+0x50>
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <puts_P+0x54>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	08 95       	ret

00001d3c <vfprintf>:
    1d3c:	2f 92       	push	r2
    1d3e:	3f 92       	push	r3
    1d40:	4f 92       	push	r4
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	2c 97       	sbiw	r28, 0x0c	; 12
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	7c 01       	movw	r14, r24
    1d72:	6b 01       	movw	r12, r22
    1d74:	8a 01       	movw	r16, r20
    1d76:	fc 01       	movw	r30, r24
    1d78:	17 82       	std	Z+7, r1	; 0x07
    1d7a:	16 82       	std	Z+6, r1	; 0x06
    1d7c:	83 81       	ldd	r24, Z+3	; 0x03
    1d7e:	81 ff       	sbrs	r24, 1
    1d80:	b0 c1       	rjmp	.+864    	; 0x20e2 <vfprintf+0x3a6>
    1d82:	ce 01       	movw	r24, r28
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	4c 01       	movw	r8, r24
    1d88:	f7 01       	movw	r30, r14
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	93 fd       	sbrc	r25, 3
    1d90:	85 91       	lpm	r24, Z+
    1d92:	93 ff       	sbrs	r25, 3
    1d94:	81 91       	ld	r24, Z+
    1d96:	6f 01       	movw	r12, r30
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <vfprintf+0x62>
    1d9c:	9e c1       	rjmp	.+828    	; 0x20da <vfprintf+0x39e>
    1d9e:	85 32       	cpi	r24, 0x25	; 37
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <vfprintf+0x74>
    1da2:	93 fd       	sbrc	r25, 3
    1da4:	85 91       	lpm	r24, Z+
    1da6:	93 ff       	sbrs	r25, 3
    1da8:	81 91       	ld	r24, Z+
    1daa:	6f 01       	movw	r12, r30
    1dac:	85 32       	cpi	r24, 0x25	; 37
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <vfprintf+0x7c>
    1db0:	b7 01       	movw	r22, r14
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	c7 d1       	rcall	.+910    	; 0x2144 <fputc>
    1db6:	e8 cf       	rjmp	.-48     	; 0x1d88 <vfprintf+0x4c>
    1db8:	51 2c       	mov	r5, r1
    1dba:	31 2c       	mov	r3, r1
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	20 32       	cpi	r18, 0x20	; 32
    1dc0:	a0 f4       	brcc	.+40     	; 0x1dea <vfprintf+0xae>
    1dc2:	8b 32       	cpi	r24, 0x2B	; 43
    1dc4:	69 f0       	breq	.+26     	; 0x1de0 <vfprintf+0xa4>
    1dc6:	30 f4       	brcc	.+12     	; 0x1dd4 <vfprintf+0x98>
    1dc8:	80 32       	cpi	r24, 0x20	; 32
    1dca:	59 f0       	breq	.+22     	; 0x1de2 <vfprintf+0xa6>
    1dcc:	83 32       	cpi	r24, 0x23	; 35
    1dce:	69 f4       	brne	.+26     	; 0x1dea <vfprintf+0xae>
    1dd0:	20 61       	ori	r18, 0x10	; 16
    1dd2:	2c c0       	rjmp	.+88     	; 0x1e2c <vfprintf+0xf0>
    1dd4:	8d 32       	cpi	r24, 0x2D	; 45
    1dd6:	39 f0       	breq	.+14     	; 0x1de6 <vfprintf+0xaa>
    1dd8:	80 33       	cpi	r24, 0x30	; 48
    1dda:	39 f4       	brne	.+14     	; 0x1dea <vfprintf+0xae>
    1ddc:	21 60       	ori	r18, 0x01	; 1
    1dde:	26 c0       	rjmp	.+76     	; 0x1e2c <vfprintf+0xf0>
    1de0:	22 60       	ori	r18, 0x02	; 2
    1de2:	24 60       	ori	r18, 0x04	; 4
    1de4:	23 c0       	rjmp	.+70     	; 0x1e2c <vfprintf+0xf0>
    1de6:	28 60       	ori	r18, 0x08	; 8
    1de8:	21 c0       	rjmp	.+66     	; 0x1e2c <vfprintf+0xf0>
    1dea:	27 fd       	sbrc	r18, 7
    1dec:	27 c0       	rjmp	.+78     	; 0x1e3c <vfprintf+0x100>
    1dee:	30 ed       	ldi	r19, 0xD0	; 208
    1df0:	38 0f       	add	r19, r24
    1df2:	3a 30       	cpi	r19, 0x0A	; 10
    1df4:	78 f4       	brcc	.+30     	; 0x1e14 <vfprintf+0xd8>
    1df6:	26 ff       	sbrs	r18, 6
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0xca>
    1dfa:	fa e0       	ldi	r31, 0x0A	; 10
    1dfc:	5f 9e       	mul	r5, r31
    1dfe:	30 0d       	add	r19, r0
    1e00:	11 24       	eor	r1, r1
    1e02:	53 2e       	mov	r5, r19
    1e04:	13 c0       	rjmp	.+38     	; 0x1e2c <vfprintf+0xf0>
    1e06:	8a e0       	ldi	r24, 0x0A	; 10
    1e08:	38 9e       	mul	r3, r24
    1e0a:	30 0d       	add	r19, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	33 2e       	mov	r3, r19
    1e10:	20 62       	ori	r18, 0x20	; 32
    1e12:	0c c0       	rjmp	.+24     	; 0x1e2c <vfprintf+0xf0>
    1e14:	8e 32       	cpi	r24, 0x2E	; 46
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <vfprintf+0xe4>
    1e18:	26 fd       	sbrc	r18, 6
    1e1a:	5f c1       	rjmp	.+702    	; 0x20da <vfprintf+0x39e>
    1e1c:	20 64       	ori	r18, 0x40	; 64
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0xf0>
    1e20:	8c 36       	cpi	r24, 0x6C	; 108
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <vfprintf+0xec>
    1e24:	20 68       	ori	r18, 0x80	; 128
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <vfprintf+0xf0>
    1e28:	88 36       	cpi	r24, 0x68	; 104
    1e2a:	41 f4       	brne	.+16     	; 0x1e3c <vfprintf+0x100>
    1e2c:	f6 01       	movw	r30, r12
    1e2e:	93 fd       	sbrc	r25, 3
    1e30:	85 91       	lpm	r24, Z+
    1e32:	93 ff       	sbrs	r25, 3
    1e34:	81 91       	ld	r24, Z+
    1e36:	6f 01       	movw	r12, r30
    1e38:	81 11       	cpse	r24, r1
    1e3a:	c1 cf       	rjmp	.-126    	; 0x1dbe <vfprintf+0x82>
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	9f 7d       	andi	r25, 0xDF	; 223
    1e40:	95 54       	subi	r25, 0x45	; 69
    1e42:	93 30       	cpi	r25, 0x03	; 3
    1e44:	28 f4       	brcc	.+10     	; 0x1e50 <vfprintf+0x114>
    1e46:	0c 5f       	subi	r16, 0xFC	; 252
    1e48:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4a:	ff e3       	ldi	r31, 0x3F	; 63
    1e4c:	f9 83       	std	Y+1, r31	; 0x01
    1e4e:	0d c0       	rjmp	.+26     	; 0x1e6a <vfprintf+0x12e>
    1e50:	83 36       	cpi	r24, 0x63	; 99
    1e52:	31 f0       	breq	.+12     	; 0x1e60 <vfprintf+0x124>
    1e54:	83 37       	cpi	r24, 0x73	; 115
    1e56:	71 f0       	breq	.+28     	; 0x1e74 <vfprintf+0x138>
    1e58:	83 35       	cpi	r24, 0x53	; 83
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <vfprintf+0x122>
    1e5c:	57 c0       	rjmp	.+174    	; 0x1f0c <vfprintf+0x1d0>
    1e5e:	21 c0       	rjmp	.+66     	; 0x1ea2 <vfprintf+0x166>
    1e60:	f8 01       	movw	r30, r16
    1e62:	80 81       	ld	r24, Z
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	0e 5f       	subi	r16, 0xFE	; 254
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	44 24       	eor	r4, r4
    1e6c:	43 94       	inc	r4
    1e6e:	51 2c       	mov	r5, r1
    1e70:	54 01       	movw	r10, r8
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <vfprintf+0x160>
    1e74:	38 01       	movw	r6, r16
    1e76:	f2 e0       	ldi	r31, 0x02	; 2
    1e78:	6f 0e       	add	r6, r31
    1e7a:	71 1c       	adc	r7, r1
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	a0 80       	ld	r10, Z
    1e80:	b1 80       	ldd	r11, Z+1	; 0x01
    1e82:	26 ff       	sbrs	r18, 6
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <vfprintf+0x150>
    1e86:	65 2d       	mov	r22, r5
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <vfprintf+0x154>
    1e8c:	6f ef       	ldi	r22, 0xFF	; 255
    1e8e:	7f ef       	ldi	r23, 0xFF	; 255
    1e90:	c5 01       	movw	r24, r10
    1e92:	2c 87       	std	Y+12, r18	; 0x0c
    1e94:	4c d1       	rcall	.+664    	; 0x212e <strnlen>
    1e96:	2c 01       	movw	r4, r24
    1e98:	83 01       	movw	r16, r6
    1e9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e9c:	2f 77       	andi	r18, 0x7F	; 127
    1e9e:	22 2e       	mov	r2, r18
    1ea0:	16 c0       	rjmp	.+44     	; 0x1ece <vfprintf+0x192>
    1ea2:	38 01       	movw	r6, r16
    1ea4:	f2 e0       	ldi	r31, 0x02	; 2
    1ea6:	6f 0e       	add	r6, r31
    1ea8:	71 1c       	adc	r7, r1
    1eaa:	f8 01       	movw	r30, r16
    1eac:	a0 80       	ld	r10, Z
    1eae:	b1 80       	ldd	r11, Z+1	; 0x01
    1eb0:	26 ff       	sbrs	r18, 6
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <vfprintf+0x17e>
    1eb4:	65 2d       	mov	r22, r5
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0x182>
    1eba:	6f ef       	ldi	r22, 0xFF	; 255
    1ebc:	7f ef       	ldi	r23, 0xFF	; 255
    1ebe:	c5 01       	movw	r24, r10
    1ec0:	2c 87       	std	Y+12, r18	; 0x0c
    1ec2:	2a d1       	rcall	.+596    	; 0x2118 <strnlen_P>
    1ec4:	2c 01       	movw	r4, r24
    1ec6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ec8:	20 68       	ori	r18, 0x80	; 128
    1eca:	22 2e       	mov	r2, r18
    1ecc:	83 01       	movw	r16, r6
    1ece:	23 fc       	sbrc	r2, 3
    1ed0:	19 c0       	rjmp	.+50     	; 0x1f04 <vfprintf+0x1c8>
    1ed2:	83 2d       	mov	r24, r3
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	48 16       	cp	r4, r24
    1ed8:	59 06       	cpc	r5, r25
    1eda:	a0 f4       	brcc	.+40     	; 0x1f04 <vfprintf+0x1c8>
    1edc:	b7 01       	movw	r22, r14
    1ede:	80 e2       	ldi	r24, 0x20	; 32
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	30 d1       	rcall	.+608    	; 0x2144 <fputc>
    1ee4:	3a 94       	dec	r3
    1ee6:	f5 cf       	rjmp	.-22     	; 0x1ed2 <vfprintf+0x196>
    1ee8:	f5 01       	movw	r30, r10
    1eea:	27 fc       	sbrc	r2, 7
    1eec:	85 91       	lpm	r24, Z+
    1eee:	27 fe       	sbrs	r2, 7
    1ef0:	81 91       	ld	r24, Z+
    1ef2:	5f 01       	movw	r10, r30
    1ef4:	b7 01       	movw	r22, r14
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	25 d1       	rcall	.+586    	; 0x2144 <fputc>
    1efa:	31 10       	cpse	r3, r1
    1efc:	3a 94       	dec	r3
    1efe:	f1 e0       	ldi	r31, 0x01	; 1
    1f00:	4f 1a       	sub	r4, r31
    1f02:	51 08       	sbc	r5, r1
    1f04:	41 14       	cp	r4, r1
    1f06:	51 04       	cpc	r5, r1
    1f08:	79 f7       	brne	.-34     	; 0x1ee8 <vfprintf+0x1ac>
    1f0a:	de c0       	rjmp	.+444    	; 0x20c8 <vfprintf+0x38c>
    1f0c:	84 36       	cpi	r24, 0x64	; 100
    1f0e:	11 f0       	breq	.+4      	; 0x1f14 <vfprintf+0x1d8>
    1f10:	89 36       	cpi	r24, 0x69	; 105
    1f12:	31 f5       	brne	.+76     	; 0x1f60 <vfprintf+0x224>
    1f14:	f8 01       	movw	r30, r16
    1f16:	27 ff       	sbrs	r18, 7
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <vfprintf+0x1ec>
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	0c 5f       	subi	r16, 0xFC	; 252
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <vfprintf+0x1fc>
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	88 27       	eor	r24, r24
    1f2e:	77 fd       	sbrc	r23, 7
    1f30:	80 95       	com	r24
    1f32:	98 2f       	mov	r25, r24
    1f34:	0e 5f       	subi	r16, 0xFE	; 254
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	2f 76       	andi	r18, 0x6F	; 111
    1f3a:	b2 2e       	mov	r11, r18
    1f3c:	97 ff       	sbrs	r25, 7
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <vfprintf+0x216>
    1f40:	90 95       	com	r25
    1f42:	80 95       	com	r24
    1f44:	70 95       	com	r23
    1f46:	61 95       	neg	r22
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	20 68       	ori	r18, 0x80	; 128
    1f50:	b2 2e       	mov	r11, r18
    1f52:	2a e0       	ldi	r18, 0x0A	; 10
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	a4 01       	movw	r20, r8
    1f58:	27 d1       	rcall	.+590    	; 0x21a8 <__ultoa_invert>
    1f5a:	a8 2e       	mov	r10, r24
    1f5c:	a8 18       	sub	r10, r8
    1f5e:	43 c0       	rjmp	.+134    	; 0x1fe6 <vfprintf+0x2aa>
    1f60:	85 37       	cpi	r24, 0x75	; 117
    1f62:	29 f4       	brne	.+10     	; 0x1f6e <vfprintf+0x232>
    1f64:	2f 7e       	andi	r18, 0xEF	; 239
    1f66:	b2 2e       	mov	r11, r18
    1f68:	2a e0       	ldi	r18, 0x0A	; 10
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	25 c0       	rjmp	.+74     	; 0x1fb8 <vfprintf+0x27c>
    1f6e:	f2 2f       	mov	r31, r18
    1f70:	f9 7f       	andi	r31, 0xF9	; 249
    1f72:	bf 2e       	mov	r11, r31
    1f74:	8f 36       	cpi	r24, 0x6F	; 111
    1f76:	c1 f0       	breq	.+48     	; 0x1fa8 <vfprintf+0x26c>
    1f78:	18 f4       	brcc	.+6      	; 0x1f80 <vfprintf+0x244>
    1f7a:	88 35       	cpi	r24, 0x58	; 88
    1f7c:	79 f0       	breq	.+30     	; 0x1f9c <vfprintf+0x260>
    1f7e:	ad c0       	rjmp	.+346    	; 0x20da <vfprintf+0x39e>
    1f80:	80 37       	cpi	r24, 0x70	; 112
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <vfprintf+0x24e>
    1f84:	88 37       	cpi	r24, 0x78	; 120
    1f86:	21 f0       	breq	.+8      	; 0x1f90 <vfprintf+0x254>
    1f88:	a8 c0       	rjmp	.+336    	; 0x20da <vfprintf+0x39e>
    1f8a:	2f 2f       	mov	r18, r31
    1f8c:	20 61       	ori	r18, 0x10	; 16
    1f8e:	b2 2e       	mov	r11, r18
    1f90:	b4 fe       	sbrs	r11, 4
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <vfprintf+0x272>
    1f94:	8b 2d       	mov	r24, r11
    1f96:	84 60       	ori	r24, 0x04	; 4
    1f98:	b8 2e       	mov	r11, r24
    1f9a:	09 c0       	rjmp	.+18     	; 0x1fae <vfprintf+0x272>
    1f9c:	24 ff       	sbrs	r18, 4
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <vfprintf+0x278>
    1fa0:	9f 2f       	mov	r25, r31
    1fa2:	96 60       	ori	r25, 0x06	; 6
    1fa4:	b9 2e       	mov	r11, r25
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <vfprintf+0x278>
    1fa8:	28 e0       	ldi	r18, 0x08	; 8
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <vfprintf+0x27c>
    1fae:	20 e1       	ldi	r18, 0x10	; 16
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <vfprintf+0x27c>
    1fb4:	20 e1       	ldi	r18, 0x10	; 16
    1fb6:	32 e0       	ldi	r19, 0x02	; 2
    1fb8:	f8 01       	movw	r30, r16
    1fba:	b7 fe       	sbrs	r11, 7
    1fbc:	07 c0       	rjmp	.+14     	; 0x1fcc <vfprintf+0x290>
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	0c 5f       	subi	r16, 0xFC	; 252
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	06 c0       	rjmp	.+12     	; 0x1fd8 <vfprintf+0x29c>
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 5f       	subi	r16, 0xFE	; 254
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	a4 01       	movw	r20, r8
    1fda:	e6 d0       	rcall	.+460    	; 0x21a8 <__ultoa_invert>
    1fdc:	a8 2e       	mov	r10, r24
    1fde:	a8 18       	sub	r10, r8
    1fe0:	fb 2d       	mov	r31, r11
    1fe2:	ff 77       	andi	r31, 0x7F	; 127
    1fe4:	bf 2e       	mov	r11, r31
    1fe6:	b6 fe       	sbrs	r11, 6
    1fe8:	0b c0       	rjmp	.+22     	; 0x2000 <vfprintf+0x2c4>
    1fea:	2b 2d       	mov	r18, r11
    1fec:	2e 7f       	andi	r18, 0xFE	; 254
    1fee:	a5 14       	cp	r10, r5
    1ff0:	50 f4       	brcc	.+20     	; 0x2006 <vfprintf+0x2ca>
    1ff2:	b4 fe       	sbrs	r11, 4
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <vfprintf+0x2ce>
    1ff6:	b2 fc       	sbrc	r11, 2
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <vfprintf+0x2ce>
    1ffa:	2b 2d       	mov	r18, r11
    1ffc:	2e 7e       	andi	r18, 0xEE	; 238
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <vfprintf+0x2ce>
    2000:	7a 2c       	mov	r7, r10
    2002:	2b 2d       	mov	r18, r11
    2004:	03 c0       	rjmp	.+6      	; 0x200c <vfprintf+0x2d0>
    2006:	7a 2c       	mov	r7, r10
    2008:	01 c0       	rjmp	.+2      	; 0x200c <vfprintf+0x2d0>
    200a:	75 2c       	mov	r7, r5
    200c:	24 ff       	sbrs	r18, 4
    200e:	0d c0       	rjmp	.+26     	; 0x202a <vfprintf+0x2ee>
    2010:	fe 01       	movw	r30, r28
    2012:	ea 0d       	add	r30, r10
    2014:	f1 1d       	adc	r31, r1
    2016:	80 81       	ld	r24, Z
    2018:	80 33       	cpi	r24, 0x30	; 48
    201a:	11 f4       	brne	.+4      	; 0x2020 <vfprintf+0x2e4>
    201c:	29 7e       	andi	r18, 0xE9	; 233
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <vfprintf+0x2f6>
    2020:	22 ff       	sbrs	r18, 2
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <vfprintf+0x2f4>
    2024:	73 94       	inc	r7
    2026:	73 94       	inc	r7
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <vfprintf+0x2f6>
    202a:	82 2f       	mov	r24, r18
    202c:	86 78       	andi	r24, 0x86	; 134
    202e:	09 f0       	breq	.+2      	; 0x2032 <vfprintf+0x2f6>
    2030:	73 94       	inc	r7
    2032:	23 fd       	sbrc	r18, 3
    2034:	12 c0       	rjmp	.+36     	; 0x205a <vfprintf+0x31e>
    2036:	20 ff       	sbrs	r18, 0
    2038:	06 c0       	rjmp	.+12     	; 0x2046 <vfprintf+0x30a>
    203a:	5a 2c       	mov	r5, r10
    203c:	73 14       	cp	r7, r3
    203e:	18 f4       	brcc	.+6      	; 0x2046 <vfprintf+0x30a>
    2040:	53 0c       	add	r5, r3
    2042:	57 18       	sub	r5, r7
    2044:	73 2c       	mov	r7, r3
    2046:	73 14       	cp	r7, r3
    2048:	60 f4       	brcc	.+24     	; 0x2062 <vfprintf+0x326>
    204a:	b7 01       	movw	r22, r14
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	2c 87       	std	Y+12, r18	; 0x0c
    2052:	78 d0       	rcall	.+240    	; 0x2144 <fputc>
    2054:	73 94       	inc	r7
    2056:	2c 85       	ldd	r18, Y+12	; 0x0c
    2058:	f6 cf       	rjmp	.-20     	; 0x2046 <vfprintf+0x30a>
    205a:	73 14       	cp	r7, r3
    205c:	10 f4       	brcc	.+4      	; 0x2062 <vfprintf+0x326>
    205e:	37 18       	sub	r3, r7
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x328>
    2062:	31 2c       	mov	r3, r1
    2064:	24 ff       	sbrs	r18, 4
    2066:	11 c0       	rjmp	.+34     	; 0x208a <vfprintf+0x34e>
    2068:	b7 01       	movw	r22, r14
    206a:	80 e3       	ldi	r24, 0x30	; 48
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	2c 87       	std	Y+12, r18	; 0x0c
    2070:	69 d0       	rcall	.+210    	; 0x2144 <fputc>
    2072:	2c 85       	ldd	r18, Y+12	; 0x0c
    2074:	22 ff       	sbrs	r18, 2
    2076:	16 c0       	rjmp	.+44     	; 0x20a4 <vfprintf+0x368>
    2078:	21 ff       	sbrs	r18, 1
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <vfprintf+0x346>
    207c:	88 e5       	ldi	r24, 0x58	; 88
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <vfprintf+0x34a>
    2082:	88 e7       	ldi	r24, 0x78	; 120
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	b7 01       	movw	r22, r14
    2088:	0c c0       	rjmp	.+24     	; 0x20a2 <vfprintf+0x366>
    208a:	82 2f       	mov	r24, r18
    208c:	86 78       	andi	r24, 0x86	; 134
    208e:	51 f0       	breq	.+20     	; 0x20a4 <vfprintf+0x368>
    2090:	21 fd       	sbrc	r18, 1
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <vfprintf+0x35c>
    2094:	80 e2       	ldi	r24, 0x20	; 32
    2096:	01 c0       	rjmp	.+2      	; 0x209a <vfprintf+0x35e>
    2098:	8b e2       	ldi	r24, 0x2B	; 43
    209a:	27 fd       	sbrc	r18, 7
    209c:	8d e2       	ldi	r24, 0x2D	; 45
    209e:	b7 01       	movw	r22, r14
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	50 d0       	rcall	.+160    	; 0x2144 <fputc>
    20a4:	a5 14       	cp	r10, r5
    20a6:	30 f4       	brcc	.+12     	; 0x20b4 <vfprintf+0x378>
    20a8:	b7 01       	movw	r22, r14
    20aa:	80 e3       	ldi	r24, 0x30	; 48
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	4a d0       	rcall	.+148    	; 0x2144 <fputc>
    20b0:	5a 94       	dec	r5
    20b2:	f8 cf       	rjmp	.-16     	; 0x20a4 <vfprintf+0x368>
    20b4:	aa 94       	dec	r10
    20b6:	f4 01       	movw	r30, r8
    20b8:	ea 0d       	add	r30, r10
    20ba:	f1 1d       	adc	r31, r1
    20bc:	80 81       	ld	r24, Z
    20be:	b7 01       	movw	r22, r14
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	40 d0       	rcall	.+128    	; 0x2144 <fputc>
    20c4:	a1 10       	cpse	r10, r1
    20c6:	f6 cf       	rjmp	.-20     	; 0x20b4 <vfprintf+0x378>
    20c8:	33 20       	and	r3, r3
    20ca:	09 f4       	brne	.+2      	; 0x20ce <vfprintf+0x392>
    20cc:	5d ce       	rjmp	.-838    	; 0x1d88 <vfprintf+0x4c>
    20ce:	b7 01       	movw	r22, r14
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	37 d0       	rcall	.+110    	; 0x2144 <fputc>
    20d6:	3a 94       	dec	r3
    20d8:	f7 cf       	rjmp	.-18     	; 0x20c8 <vfprintf+0x38c>
    20da:	f7 01       	movw	r30, r14
    20dc:	86 81       	ldd	r24, Z+6	; 0x06
    20de:	97 81       	ldd	r25, Z+7	; 0x07
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <vfprintf+0x3aa>
    20e2:	8f ef       	ldi	r24, 0xFF	; 255
    20e4:	9f ef       	ldi	r25, 0xFF	; 255
    20e6:	2c 96       	adiw	r28, 0x0c	; 12
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	7f 90       	pop	r7
    210c:	6f 90       	pop	r6
    210e:	5f 90       	pop	r5
    2110:	4f 90       	pop	r4
    2112:	3f 90       	pop	r3
    2114:	2f 90       	pop	r2
    2116:	08 95       	ret

00002118 <strnlen_P>:
    2118:	fc 01       	movw	r30, r24
    211a:	05 90       	lpm	r0, Z+
    211c:	61 50       	subi	r22, 0x01	; 1
    211e:	70 40       	sbci	r23, 0x00	; 0
    2120:	01 10       	cpse	r0, r1
    2122:	d8 f7       	brcc	.-10     	; 0x211a <strnlen_P+0x2>
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	8e 0f       	add	r24, r30
    212a:	9f 1f       	adc	r25, r31
    212c:	08 95       	ret

0000212e <strnlen>:
    212e:	fc 01       	movw	r30, r24
    2130:	61 50       	subi	r22, 0x01	; 1
    2132:	70 40       	sbci	r23, 0x00	; 0
    2134:	01 90       	ld	r0, Z+
    2136:	01 10       	cpse	r0, r1
    2138:	d8 f7       	brcc	.-10     	; 0x2130 <strnlen+0x2>
    213a:	80 95       	com	r24
    213c:	90 95       	com	r25
    213e:	8e 0f       	add	r24, r30
    2140:	9f 1f       	adc	r25, r31
    2142:	08 95       	ret

00002144 <fputc>:
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	18 2f       	mov	r17, r24
    214e:	09 2f       	mov	r16, r25
    2150:	eb 01       	movw	r28, r22
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	81 fd       	sbrc	r24, 1
    2156:	03 c0       	rjmp	.+6      	; 0x215e <fputc+0x1a>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f ef       	ldi	r25, 0xFF	; 255
    215c:	20 c0       	rjmp	.+64     	; 0x219e <fputc+0x5a>
    215e:	82 ff       	sbrs	r24, 2
    2160:	10 c0       	rjmp	.+32     	; 0x2182 <fputc+0x3e>
    2162:	4e 81       	ldd	r20, Y+6	; 0x06
    2164:	5f 81       	ldd	r21, Y+7	; 0x07
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	42 17       	cp	r20, r18
    216c:	53 07       	cpc	r21, r19
    216e:	7c f4       	brge	.+30     	; 0x218e <fputc+0x4a>
    2170:	e8 81       	ld	r30, Y
    2172:	f9 81       	ldd	r31, Y+1	; 0x01
    2174:	9f 01       	movw	r18, r30
    2176:	2f 5f       	subi	r18, 0xFF	; 255
    2178:	3f 4f       	sbci	r19, 0xFF	; 255
    217a:	39 83       	std	Y+1, r19	; 0x01
    217c:	28 83       	st	Y, r18
    217e:	10 83       	st	Z, r17
    2180:	06 c0       	rjmp	.+12     	; 0x218e <fputc+0x4a>
    2182:	e8 85       	ldd	r30, Y+8	; 0x08
    2184:	f9 85       	ldd	r31, Y+9	; 0x09
    2186:	81 2f       	mov	r24, r17
    2188:	09 95       	icall
    218a:	89 2b       	or	r24, r25
    218c:	29 f7       	brne	.-54     	; 0x2158 <fputc+0x14>
    218e:	2e 81       	ldd	r18, Y+6	; 0x06
    2190:	3f 81       	ldd	r19, Y+7	; 0x07
    2192:	2f 5f       	subi	r18, 0xFF	; 255
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	3f 83       	std	Y+7, r19	; 0x07
    2198:	2e 83       	std	Y+6, r18	; 0x06
    219a:	81 2f       	mov	r24, r17
    219c:	90 2f       	mov	r25, r16
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <__ultoa_invert>:
    21a8:	fa 01       	movw	r30, r20
    21aa:	aa 27       	eor	r26, r26
    21ac:	28 30       	cpi	r18, 0x08	; 8
    21ae:	51 f1       	breq	.+84     	; 0x2204 <__ultoa_invert+0x5c>
    21b0:	20 31       	cpi	r18, 0x10	; 16
    21b2:	81 f1       	breq	.+96     	; 0x2214 <__ultoa_invert+0x6c>
    21b4:	e8 94       	clt
    21b6:	6f 93       	push	r22
    21b8:	6e 7f       	andi	r22, 0xFE	; 254
    21ba:	6e 5f       	subi	r22, 0xFE	; 254
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	8f 4f       	sbci	r24, 0xFF	; 255
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	af 4f       	sbci	r26, 0xFF	; 255
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	3e d0       	rcall	.+124    	; 0x2244 <__ultoa_invert+0x9c>
    21c8:	b4 e0       	ldi	r27, 0x04	; 4
    21ca:	3c d0       	rcall	.+120    	; 0x2244 <__ultoa_invert+0x9c>
    21cc:	67 0f       	add	r22, r23
    21ce:	78 1f       	adc	r23, r24
    21d0:	89 1f       	adc	r24, r25
    21d2:	9a 1f       	adc	r25, r26
    21d4:	a1 1d       	adc	r26, r1
    21d6:	68 0f       	add	r22, r24
    21d8:	79 1f       	adc	r23, r25
    21da:	8a 1f       	adc	r24, r26
    21dc:	91 1d       	adc	r25, r1
    21de:	a1 1d       	adc	r26, r1
    21e0:	6a 0f       	add	r22, r26
    21e2:	71 1d       	adc	r23, r1
    21e4:	81 1d       	adc	r24, r1
    21e6:	91 1d       	adc	r25, r1
    21e8:	a1 1d       	adc	r26, r1
    21ea:	20 d0       	rcall	.+64     	; 0x222c <__ultoa_invert+0x84>
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__ultoa_invert+0x48>
    21ee:	68 94       	set
    21f0:	3f 91       	pop	r19
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	26 9f       	mul	r18, r22
    21f6:	11 24       	eor	r1, r1
    21f8:	30 19       	sub	r19, r0
    21fa:	30 5d       	subi	r19, 0xD0	; 208
    21fc:	31 93       	st	Z+, r19
    21fe:	de f6       	brtc	.-74     	; 0x21b6 <__ultoa_invert+0xe>
    2200:	cf 01       	movw	r24, r30
    2202:	08 95       	ret
    2204:	46 2f       	mov	r20, r22
    2206:	47 70       	andi	r20, 0x07	; 7
    2208:	40 5d       	subi	r20, 0xD0	; 208
    220a:	41 93       	st	Z+, r20
    220c:	b3 e0       	ldi	r27, 0x03	; 3
    220e:	0f d0       	rcall	.+30     	; 0x222e <__ultoa_invert+0x86>
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__ultoa_invert+0x5c>
    2212:	f6 cf       	rjmp	.-20     	; 0x2200 <__ultoa_invert+0x58>
    2214:	46 2f       	mov	r20, r22
    2216:	4f 70       	andi	r20, 0x0F	; 15
    2218:	40 5d       	subi	r20, 0xD0	; 208
    221a:	4a 33       	cpi	r20, 0x3A	; 58
    221c:	18 f0       	brcs	.+6      	; 0x2224 <__ultoa_invert+0x7c>
    221e:	49 5d       	subi	r20, 0xD9	; 217
    2220:	31 fd       	sbrc	r19, 1
    2222:	40 52       	subi	r20, 0x20	; 32
    2224:	41 93       	st	Z+, r20
    2226:	02 d0       	rcall	.+4      	; 0x222c <__ultoa_invert+0x84>
    2228:	a9 f7       	brne	.-22     	; 0x2214 <__ultoa_invert+0x6c>
    222a:	ea cf       	rjmp	.-44     	; 0x2200 <__ultoa_invert+0x58>
    222c:	b4 e0       	ldi	r27, 0x04	; 4
    222e:	a6 95       	lsr	r26
    2230:	97 95       	ror	r25
    2232:	87 95       	ror	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	ba 95       	dec	r27
    223a:	c9 f7       	brne	.-14     	; 0x222e <__ultoa_invert+0x86>
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	61 05       	cpc	r22, r1
    2240:	71 05       	cpc	r23, r1
    2242:	08 95       	ret
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	0a 2e       	mov	r0, r26
    224a:	06 94       	lsr	r0
    224c:	57 95       	ror	r21
    224e:	47 95       	ror	r20
    2250:	37 95       	ror	r19
    2252:	27 95       	ror	r18
    2254:	ba 95       	dec	r27
    2256:	c9 f7       	brne	.-14     	; 0x224a <__ultoa_invert+0xa2>
    2258:	62 0f       	add	r22, r18
    225a:	73 1f       	adc	r23, r19
    225c:	84 1f       	adc	r24, r20
    225e:	95 1f       	adc	r25, r21
    2260:	a0 1d       	adc	r26, r0
    2262:	08 95       	ret

00002264 <_exit>:
    2264:	f8 94       	cli

00002266 <__stop_program>:
    2266:	ff cf       	rjmp	.-2      	; 0x2266 <__stop_program>


BootloaderPrinter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0001ee66  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e66  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00001010  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001036  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  0000104e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001e  008001d6  008001d6  00001056  2**0
                  ALLOC
  6 .noinit       00000002  008001f4  008001f4  00001056  2**0
                  ALLOC
  7 .stab         00000a98  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      0000016f  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000006d0  00000000  00000000  00001c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000a1e8  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ad9  00000000  00000000  0000c528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003dce  00000000  00000000  0000f001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f70  00000000  00000000  00012dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c81  00000000  00000000  00013d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000064d7  00000000  00000000  000179c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000780  00000000  00000000  0001de98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	66 c0       	rjmp	.+204    	; 0x1e0d2 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	64 c0       	rjmp	.+200    	; 0x1e0d2 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	62 c0       	rjmp	.+196    	; 0x1e0d2 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	60 c0       	rjmp	.+192    	; 0x1e0d2 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	5e c0       	rjmp	.+188    	; 0x1e0d2 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	5c c0       	rjmp	.+184    	; 0x1e0d2 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	5a c0       	rjmp	.+180    	; 0x1e0d2 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	58 c0       	rjmp	.+176    	; 0x1e0d2 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	56 c0       	rjmp	.+172    	; 0x1e0d2 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	0b c4       	rjmp	.+2070   	; 0x1e840 <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	52 c0       	rjmp	.+164    	; 0x1e0d2 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	50 c0       	rjmp	.+160    	; 0x1e0d2 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	4e c0       	rjmp	.+156    	; 0x1e0d2 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	4c c0       	rjmp	.+152    	; 0x1e0d2 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	4a c0       	rjmp	.+148    	; 0x1e0d2 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	48 c0       	rjmp	.+144    	; 0x1e0d2 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	46 c0       	rjmp	.+140    	; 0x1e0d2 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	44 c0       	rjmp	.+136    	; 0x1e0d2 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	42 c0       	rjmp	.+132    	; 0x1e0d2 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	fc c1       	rjmp	.+1016   	; 0x1e44a <__vector_20>
   1e052:	00 00       	nop
   1e054:	3e c0       	rjmp	.+124    	; 0x1e0d2 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	3c c0       	rjmp	.+120    	; 0x1e0d2 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	3a c0       	rjmp	.+116    	; 0x1e0d2 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	38 c0       	rjmp	.+112    	; 0x1e0d2 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	36 c0       	rjmp	.+108    	; 0x1e0d2 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	34 c0       	rjmp	.+104    	; 0x1e0d2 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	32 c0       	rjmp	.+100    	; 0x1e0d2 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	30 c0       	rjmp	.+96     	; 0x1e0d2 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	2e c0       	rjmp	.+92     	; 0x1e0d2 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	2c c0       	rjmp	.+88     	; 0x1e0d2 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	2a c0       	rjmp	.+84     	; 0x1e0d2 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	28 c0       	rjmp	.+80     	; 0x1e0d2 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	26 c0       	rjmp	.+76     	; 0x1e0d2 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	24 c0       	rjmp	.+72     	; 0x1e0d2 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	22 c0       	rjmp	.+68     	; 0x1e0d2 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	20 c0       	rjmp	.+64     	; 0x1e0d2 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	1e c0       	rjmp	.+60     	; 0x1e0d2 <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <__do_copy_data>:
   1e0a4:	11 e0       	ldi	r17, 0x01	; 1
   1e0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1e0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1e0aa:	e6 e6       	ldi	r30, 0x66	; 102
   1e0ac:	fe ee       	ldi	r31, 0xEE	; 238
   1e0ae:	01 e0       	ldi	r16, 0x01	; 1
   1e0b0:	0b bf       	out	0x3b, r16	; 59
   1e0b2:	02 c0       	rjmp	.+4      	; 0x1e0b8 <__do_copy_data+0x14>
   1e0b4:	07 90       	elpm	r0, Z+
   1e0b6:	0d 92       	st	X+, r0
   1e0b8:	a6 3d       	cpi	r26, 0xD6	; 214
   1e0ba:	b1 07       	cpc	r27, r17
   1e0bc:	d9 f7       	brne	.-10     	; 0x1e0b4 <__do_copy_data+0x10>

0001e0be <__do_clear_bss>:
   1e0be:	11 e0       	ldi	r17, 0x01	; 1
   1e0c0:	a6 ed       	ldi	r26, 0xD6	; 214
   1e0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1e0c4:	01 c0       	rjmp	.+2      	; 0x1e0c8 <.do_clear_bss_start>

0001e0c6 <.do_clear_bss_loop>:
   1e0c6:	1d 92       	st	X+, r1

0001e0c8 <.do_clear_bss_start>:
   1e0c8:	a4 3f       	cpi	r26, 0xF4	; 244
   1e0ca:	b1 07       	cpc	r27, r17
   1e0cc:	e1 f7       	brne	.-8      	; 0x1e0c6 <.do_clear_bss_loop>
   1e0ce:	36 d0       	rcall	.+108    	; 0x1e13c <main>
   1e0d0:	c8 c6       	rjmp	.+3472   	; 0x1ee62 <_exit>

0001e0d2 <__bad_interrupt>:
   1e0d2:	96 cf       	rjmp	.-212    	; 0x1e000 <__vectors>

0001e0d4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1e0d4:	9b b1       	in	r25, 0x0b	; 11
   1e0d6:	9f 70       	andi	r25, 0x0F	; 15
   1e0d8:	98 2b       	or	r25, r24
   1e0da:	9b b9       	out	0x0b, r25	; 11
   1e0dc:	08 95       	ret

0001e0de <FlushPageIfRequired>:
 * \note If a page flush occurs the global HEX parser state is updated.
 */
static void FlushPageIfRequired(void)
{
	/* Abort if no data has been buffered for writing to the current page */
	if (!PageDirty)
   1e0de:	80 91 d6 01 	lds	r24, 0x01D6
   1e0e2:	88 23       	and	r24, r24
   1e0e4:	51 f1       	breq	.+84     	; 0x1e13a <FlushPageIfRequired+0x5c>
	  return;

	/* Flush the FLASH page to physical memory if we are crossing a page boundary */
	uint32_t NewPageStartAddress = (HEXParser.CurrAddress & ~(SPM_PAGESIZE - 1));
   1e0e6:	80 91 e6 01 	lds	r24, 0x01E6
   1e0ea:	90 91 e7 01 	lds	r25, 0x01E7
   1e0ee:	a0 91 e8 01 	lds	r26, 0x01E8
   1e0f2:	b0 91 e9 01 	lds	r27, 0x01E9
   1e0f6:	88 27       	eor	r24, r24
	if (HEXParser.PageStartAddress != NewPageStartAddress)
   1e0f8:	40 91 de 01 	lds	r20, 0x01DE
   1e0fc:	50 91 df 01 	lds	r21, 0x01DF
   1e100:	60 91 e0 01 	lds	r22, 0x01E0
   1e104:	70 91 e1 01 	lds	r23, 0x01E1
   1e108:	48 17       	cp	r20, r24
   1e10a:	59 07       	cpc	r21, r25
   1e10c:	6a 07       	cpc	r22, r26
   1e10e:	7b 07       	cpc	r23, r27
   1e110:	a1 f0       	breq	.+40     	; 0x1e13a <FlushPageIfRequired+0x5c>
	{
		boot_page_write(HEXParser.PageStartAddress);
   1e112:	25 e0       	ldi	r18, 0x05	; 5
   1e114:	fa 01       	movw	r30, r20
   1e116:	60 93 5b 00 	sts	0x005B, r22
   1e11a:	20 93 57 00 	sts	0x0057, r18
   1e11e:	e8 95       	spm
		boot_spm_busy_wait();
   1e120:	07 b6       	in	r0, 0x37	; 55
   1e122:	00 fc       	sbrc	r0, 0
   1e124:	fd cf       	rjmp	.-6      	; 0x1e120 <FlushPageIfRequired+0x42>

		HEXParser.PageStartAddress = NewPageStartAddress;
   1e126:	80 93 de 01 	sts	0x01DE, r24
   1e12a:	90 93 df 01 	sts	0x01DF, r25
   1e12e:	a0 93 e0 01 	sts	0x01E0, r26
   1e132:	b0 93 e1 01 	sts	0x01E1, r27

		PageDirty = false;
   1e136:	10 92 d6 01 	sts	0x01D6, r1
   1e13a:	08 95       	ret

0001e13c <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e13c:	84 b7       	in	r24, 0x34	; 52
   1e13e:	87 7f       	andi	r24, 0xF7	; 247
   1e140:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e142:	88 e1       	ldi	r24, 0x18	; 24
   1e144:	0f b6       	in	r0, 0x3f	; 63
   1e146:	f8 94       	cli
   1e148:	80 93 60 00 	sts	0x0060, r24
   1e14c:	10 92 60 00 	sts	0x0060, r1
   1e150:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e152:	90 e0       	ldi	r25, 0x00	; 0
   1e154:	80 e8       	ldi	r24, 0x80	; 128
   1e156:	0f b6       	in	r0, 0x3f	; 63
   1e158:	f8 94       	cli
   1e15a:	80 93 61 00 	sts	0x0061, r24
   1e15e:	90 93 61 00 	sts	0x0061, r25
   1e162:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e164:	c1 e0       	ldi	r28, 0x01	; 1
   1e166:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e168:	82 e0       	ldi	r24, 0x02	; 2
   1e16a:	85 bf       	out	0x35, r24	; 53

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1e16c:	8a b1       	in	r24, 0x0a	; 10
   1e16e:	80 6f       	ori	r24, 0xF0	; 240
   1e170:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1e172:	8b b1       	in	r24, 0x0b	; 11
   1e174:	8f 70       	andi	r24, 0x0F	; 15
   1e176:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
   1e178:	48 d3       	rcall	.+1680   	; 0x1e80a <USB_Init>
   1e17a:	c0 93 6f 00 	sts	0x006F, r28

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e17e:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e180:	80 93 81 00 	sts	0x0081, r24
   1e184:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
   1e186:	a6 df       	rcall	.-180    	; 0x1e0d4 <LEDs_SetAllLEDs>
   1e188:	78 94       	sei
   1e18a:	11 e0       	ldi	r17, 0x01	; 1
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e18c:	43 e0       	ldi	r20, 0x03	; 3
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
		HEXParser.ReadMSB      = false;

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e18e:	e4 2e       	mov	r14, r20
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e190:	01 e0       	ldi	r16, 0x01	; 1
   1e192:	54 e0       	ldi	r21, 0x04	; 4
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
		HEXParser.ReadMSB      = false;

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e194:	d5 2e       	mov	r13, r21
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
   1e196:	66 e0       	ldi	r22, 0x06	; 6
   1e198:	c6 2e       	mov	r12, r22
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
   1e19a:	73 e0       	ldi	r23, 0x03	; 3
   1e19c:	b7 2e       	mov	r11, r23
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e19e:	e2 e0       	ldi	r30, 0x02	; 2
   1e1a0:	ae 2e       	mov	r10, r30

	switch (HEXParser.ParserState)
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
   1e1a2:	80 91 00 01 	lds	r24, 0x0100
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader)
   1e1a6:	88 23       	and	r24, r24
   1e1a8:	09 f4       	brne	.+2      	; 0x1e1ac <main+0x70>
   1e1aa:	38 c1       	rjmp	.+624    	; 0x1e41c <main+0x2e0>
   1e1ac:	81 e0       	ldi	r24, 0x01	; 1
   1e1ae:	91 e0       	ldi	r25, 0x01	; 1
	{
		uint8_t BytesReceived = PRNT_Device_BytesReceived(&TextOnly_Printer_Interface);
   1e1b0:	a6 d5       	rcall	.+2892   	; 0x1ecfe <PRNT_Device_BytesReceived>
   1e1b2:	f8 2e       	mov	r15, r24
   1e1b4:	88 23       	and	r24, r24
   1e1b6:	09 f4       	brne	.+2      	; 0x1e1ba <main+0x7e>
   1e1b8:	2c c1       	rjmp	.+600    	; 0x1e412 <main+0x2d6>

		if (BytesReceived)
   1e1ba:	80 e2       	ldi	r24, 0x20	; 32
   1e1bc:	8b df       	rcall	.-234    	; 0x1e0d4 <LEDs_SetAllLEDs>
   1e1be:	c0 e0       	ldi	r28, 0x00	; 0
		{
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
   1e1c0:	d0 e0       	ldi	r29, 0x00	; 0
   1e1c2:	fc 16       	cp	r15, r28
   1e1c4:	09 f4       	brne	.+2      	; 0x1e1c8 <main+0x8c>

			while (BytesReceived--)
   1e1c6:	23 c1       	rjmp	.+582    	; 0x1e40e <main+0x2d2>
   1e1c8:	81 e0       	ldi	r24, 0x01	; 1
   1e1ca:	91 e0       	ldi	r25, 0x01	; 1
   1e1cc:	b8 d5       	rcall	.+2928   	; 0x1ed3e <PRNT_Device_ReceiveByte>
   1e1ce:	90 91 d7 01 	lds	r25, 0x01D7
			{
				int16_t ReceivedByte = PRNT_Device_ReceiveByte(&TextOnly_Printer_Interface);
   1e1d2:	99 23       	and	r25, r25
   1e1d4:	11 f0       	breq	.+4      	; 0x1e1da <main+0x9e>
   1e1d6:	8a 33       	cpi	r24, 0x3A	; 58
 * \param[in] ReadCharacter  Next input ASCII byte of data to parse
 */
static void ParseIntelHEXByte(const char ReadCharacter)
{
	/* Reset the line parser while waiting for a new line to start */
	if ((HEXParser.ParserState == HEX_PARSE_STATE_WAIT_LINE) || (ReadCharacter == ':'))
   1e1d8:	d1 f4       	brne	.+52     	; 0x1e20e <main+0xd2>
   1e1da:	10 92 dd 01 	sts	0x01DD, r1
   1e1de:	40 90 e2 01 	lds	r4, 0x01E2
   1e1e2:	50 90 e3 01 	lds	r5, 0x01E3
	{
		HEXParser.Checksum     = 0;
   1e1e6:	60 90 e4 01 	lds	r6, 0x01E4
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
   1e1ea:	70 90 e5 01 	lds	r7, 0x01E5
   1e1ee:	40 92 e6 01 	sts	0x01E6, r4
   1e1f2:	50 92 e7 01 	sts	0x01E7, r5
   1e1f6:	60 92 e8 01 	sts	0x01E8, r6
   1e1fa:	70 92 e9 01 	sts	0x01E9, r7
   1e1fe:	10 92 da 01 	sts	0x01DA, r1
   1e202:	8a 33       	cpi	r24, 0x3A	; 58
   1e204:	09 f0       	breq	.+2      	; 0x1e208 <main+0xcc>
   1e206:	01 c1       	rjmp	.+514    	; 0x1e40a <main+0x2ce>
		HEXParser.ReadMSB      = false;
   1e208:	00 93 d7 01 	sts	0x01D7, r16

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
   1e20c:	fe c0       	rjmp	.+508    	; 0x1e40a <main+0x2ce>
   1e20e:	2f eb       	ldi	r18, 0xBF	; 191
   1e210:	28 0f       	add	r18, r24
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e212:	26 30       	cpi	r18, 0x06	; 6
   1e214:	10 f4       	brcc	.+4      	; 0x1e21a <main+0xde>
   1e216:	87 53       	subi	r24, 0x37	; 55
 * \return Integer converted value of the input ASCII encoded HEX byte of data, or -1 if the
 *         input is not valid ASCII encoded HEX.
 */
static int8_t HexToDecimal(const char Byte)
{
	if ((Byte >= 'A') && (Byte <= 'F'))
   1e218:	04 c0       	rjmp	.+8      	; 0x1e222 <main+0xe6>
   1e21a:	80 53       	subi	r24, 0x30	; 48
   1e21c:	8a 30       	cpi	r24, 0x0A	; 10
   1e21e:	08 f0       	brcs	.+2      	; 0x1e222 <main+0xe6>
	  return (10 + (Byte - 'A'));
   1e220:	f4 c0       	rjmp	.+488    	; 0x1e40a <main+0x2ce>
   1e222:	20 91 d9 01 	lds	r18, 0x01D9
	else if ((Byte >= '0') && (Byte <= '9'))
   1e226:	40 e1       	ldi	r20, 0x10	; 16
   1e228:	24 9f       	mul	r18, r20
   1e22a:	90 01       	movw	r18, r0
	int8_t ReadCharacterDec = HexToDecimal(ReadCharacter);
	if (ReadCharacterDec < 0)
	  return;

	/* Read and convert the next nibble of data from the current character */
	HEXParser.Data    = (HEXParser.Data << 4) | ReadCharacterDec;
   1e22c:	11 24       	eor	r1, r1
   1e22e:	28 2b       	or	r18, r24
   1e230:	20 93 d9 01 	sts	0x01D9, r18
   1e234:	80 91 da 01 	lds	r24, 0x01DA
   1e238:	81 27       	eor	r24, r17
   1e23a:	80 93 da 01 	sts	0x01DA, r24
	HEXParser.ReadMSB = !HEXParser.ReadMSB;
   1e23e:	81 11       	cpse	r24, r1
   1e240:	e4 c0       	rjmp	.+456    	; 0x1e40a <main+0x2ce>
   1e242:	80 91 dd 01 	lds	r24, 0x01DD
   1e246:	96 30       	cpi	r25, 0x06	; 6

	/* Only process further when a full byte (two nibbles) have been read */
	if (HEXParser.ReadMSB)
   1e248:	09 f4       	brne	.+2      	; 0x1e24c <main+0x110>
   1e24a:	ce c0       	rjmp	.+412    	; 0x1e3e8 <main+0x2ac>
   1e24c:	82 0f       	add	r24, r18
   1e24e:	80 93 dd 01 	sts	0x01DD, r24
	  return;

	/* Intel HEX checksum is for all fields except starting character and the
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
   1e252:	93 30       	cpi	r25, 0x03	; 3
   1e254:	59 f1       	breq	.+86     	; 0x1e2ac <main+0x170>
	  HEXParser.Checksum += HEXParser.Data;
   1e256:	00 f5       	brcc	.+64     	; 0x1e298 <main+0x15c>
   1e258:	91 30       	cpi	r25, 0x01	; 1
   1e25a:	19 f1       	breq	.+70     	; 0x1e2a2 <main+0x166>

	switch (HEXParser.ParserState)
   1e25c:	92 30       	cpi	r25, 0x02	; 2
   1e25e:	09 f0       	breq	.+2      	; 0x1e262 <main+0x126>
   1e260:	d2 c0       	rjmp	.+420    	; 0x1e406 <main+0x2ca>
   1e262:	42 2f       	mov	r20, r18
   1e264:	50 e0       	ldi	r21, 0x00	; 0
   1e266:	54 2f       	mov	r21, r20
   1e268:	44 27       	eor	r20, r20
   1e26a:	80 91 e6 01 	lds	r24, 0x01E6
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
			break;

		case HEX_PARSE_STATE_ADDRESS_HIGH:
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
   1e26e:	90 91 e7 01 	lds	r25, 0x01E7
   1e272:	a0 91 e8 01 	lds	r26, 0x01E8
   1e276:	b0 91 e9 01 	lds	r27, 0x01E9
   1e27a:	84 0f       	add	r24, r20
   1e27c:	95 1f       	adc	r25, r21
   1e27e:	a1 1d       	adc	r26, r1
   1e280:	b1 1d       	adc	r27, r1
   1e282:	80 93 e6 01 	sts	0x01E6, r24
   1e286:	90 93 e7 01 	sts	0x01E7, r25
   1e28a:	a0 93 e8 01 	sts	0x01E8, r26
   1e28e:	b0 93 e9 01 	sts	0x01E9, r27
   1e292:	b0 92 d7 01 	sts	0x01D7, r11
   1e296:	b9 c0       	rjmp	.+370    	; 0x1e40a <main+0x2ce>
   1e298:	94 30       	cpi	r25, 0x04	; 4
   1e29a:	f9 f0       	breq	.+62     	; 0x1e2da <main+0x19e>
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
   1e29c:	95 30       	cpi	r25, 0x05	; 5
   1e29e:	49 f1       	breq	.+82     	; 0x1e2f2 <main+0x1b6>
   1e2a0:	b2 c0       	rjmp	.+356    	; 0x1e406 <main+0x2ca>
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
	  HEXParser.Checksum += HEXParser.Data;

	switch (HEXParser.ParserState)
   1e2a2:	20 93 dc 01 	sts	0x01DC, r18
   1e2a6:	a0 92 d7 01 	sts	0x01D7, r10
   1e2aa:	af c0       	rjmp	.+350    	; 0x1e40a <main+0x2ce>
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
   1e2ac:	40 90 e6 01 	lds	r4, 0x01E6
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
   1e2b0:	50 90 e7 01 	lds	r5, 0x01E7
   1e2b4:	60 90 e8 01 	lds	r6, 0x01E8
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
   1e2b8:	70 90 e9 01 	lds	r7, 0x01E9
   1e2bc:	42 0e       	add	r4, r18
   1e2be:	51 1c       	adc	r5, r1
   1e2c0:	61 1c       	adc	r6, r1
   1e2c2:	71 1c       	adc	r7, r1
   1e2c4:	40 92 e6 01 	sts	0x01E6, r4
   1e2c8:	50 92 e7 01 	sts	0x01E7, r5
   1e2cc:	60 92 e8 01 	sts	0x01E8, r6
   1e2d0:	70 92 e9 01 	sts	0x01E9, r7
   1e2d4:	d0 92 d7 01 	sts	0x01D7, r13
   1e2d8:	98 c0       	rjmp	.+304    	; 0x1e40a <main+0x2ce>
   1e2da:	20 93 db 01 	sts	0x01DB, r18
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
   1e2de:	80 91 dc 01 	lds	r24, 0x01DC
   1e2e2:	88 23       	and	r24, r24
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
   1e2e4:	11 f0       	breq	.+4      	; 0x1e2ea <main+0x1ae>
   1e2e6:	85 e0       	ldi	r24, 0x05	; 5
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
   1e2e8:	01 c0       	rjmp	.+2      	; 0x1e2ec <main+0x1b0>
   1e2ea:	86 e0       	ldi	r24, 0x06	; 6
   1e2ec:	80 93 d7 01 	sts	0x01D7, r24
   1e2f0:	8c c0       	rjmp	.+280    	; 0x1e40a <main+0x2ce>
   1e2f2:	80 91 dc 01 	lds	r24, 0x01DC
   1e2f6:	81 50       	subi	r24, 0x01	; 1
   1e2f8:	80 93 dc 01 	sts	0x01DC, r24
			break;

		case HEX_PARSE_STATE_READ_DATA:
			/* Track the number of read data bytes in the record */
			HEXParser.DataRem--;
   1e2fc:	40 90 e6 01 	lds	r4, 0x01E6
   1e300:	50 90 e7 01 	lds	r5, 0x01E7
   1e304:	60 90 e8 01 	lds	r6, 0x01E8

			/* Protect the bootloader against being written to */
			if (HEXParser.CurrAddress >= BOOT_START_ADDR)
   1e308:	70 90 e9 01 	lds	r7, 0x01E9
   1e30c:	41 14       	cp	r4, r1
   1e30e:	90 ee       	ldi	r25, 0xE0	; 224
   1e310:	59 06       	cpc	r5, r25
   1e312:	91 e0       	ldi	r25, 0x01	; 1
   1e314:	69 06       	cpc	r6, r25
   1e316:	71 04       	cpc	r7, r1
   1e318:	28 f0       	brcs	.+10     	; 0x1e324 <main+0x1e8>
   1e31a:	10 92 d7 01 	sts	0x01D7, r1
   1e31e:	10 92 d6 01 	sts	0x01D6, r1
   1e322:	73 c0       	rjmp	.+230    	; 0x1e40a <main+0x2ce>
			{
				HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e324:	80 ff       	sbrs	r24, 0
   1e326:	03 c0       	rjmp	.+6      	; 0x1e32e <main+0x1f2>
				PageDirty = false;
   1e328:	20 93 d8 01 	sts	0x01D8, r18
   1e32c:	6e c0       	rjmp	.+220    	; 0x1e40a <main+0x2ce>
				return;
			}

			/* Wait for a machine word (two bytes) of data to be read */
			if (HEXParser.DataRem & 0x01)
   1e32e:	42 2f       	mov	r20, r18
   1e330:	50 e0       	ldi	r21, 0x00	; 0
			{
				HEXParser.PrevData = HEXParser.Data;
   1e332:	54 2f       	mov	r21, r20
   1e334:	44 27       	eor	r20, r20
   1e336:	80 91 d8 01 	lds	r24, 0x01D8
				break;
			}

			/* Convert the last two received data bytes into a 16-bit word */
			uint16_t NewDataWord = ((uint16_t)HEXParser.Data << 8) | HEXParser.PrevData;
   1e33a:	48 2b       	or	r20, r24
   1e33c:	80 91 db 01 	lds	r24, 0x01DB
   1e340:	82 30       	cpi	r24, 0x02	; 2
   1e342:	09 f4       	brne	.+2      	; 0x1e346 <main+0x20a>
   1e344:	33 c0       	rjmp	.+102    	; 0x1e3ac <main+0x270>

			switch (HEXParser.RecordType)
   1e346:	84 30       	cpi	r24, 0x04	; 4
   1e348:	09 f4       	brne	.+2      	; 0x1e34c <main+0x210>
   1e34a:	3a c0       	rjmp	.+116    	; 0x1e3c0 <main+0x284>
   1e34c:	81 11       	cpse	r24, r1
   1e34e:	45 c0       	rjmp	.+138    	; 0x1e3da <main+0x29e>
   1e350:	80 91 d6 01 	lds	r24, 0x01D6
   1e354:	81 11       	cpse	r24, r1
   1e356:	13 c0       	rjmp	.+38     	; 0x1e37e <main+0x242>
   1e358:	80 91 de 01 	lds	r24, 0x01DE
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
   1e35c:	90 91 df 01 	lds	r25, 0x01DF
   1e360:	a0 91 e0 01 	lds	r26, 0x01E0
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e364:	b0 91 e1 01 	lds	r27, 0x01E1
   1e368:	fc 01       	movw	r30, r24
   1e36a:	a0 93 5b 00 	sts	0x005B, r26
   1e36e:	e0 92 57 00 	sts	0x0057, r14
   1e372:	e8 95       	spm
   1e374:	07 b6       	in	r0, 0x37	; 55
   1e376:	00 fc       	sbrc	r0, 0
   1e378:	fd cf       	rjmp	.-6      	; 0x1e374 <main+0x238>
   1e37a:	00 93 d6 01 	sts	0x01D6, r16
						boot_spm_busy_wait();
   1e37e:	0a 01       	movw	r0, r20
   1e380:	f2 01       	movw	r30, r4
   1e382:	60 92 5b 00 	sts	0x005B, r6

						PageDirty = true;
   1e386:	10 93 57 00 	sts	0x0057, r17
					}

					/* Fill the FLASH memory buffer with the new word of data */
					boot_page_fill(HEXParser.CurrAddress, NewDataWord);
   1e38a:	e8 95       	spm
   1e38c:	11 24       	eor	r1, r1
   1e38e:	42 e0       	ldi	r20, 0x02	; 2
   1e390:	44 0e       	add	r4, r20
   1e392:	51 1c       	adc	r5, r1
   1e394:	61 1c       	adc	r6, r1
   1e396:	71 1c       	adc	r7, r1
					HEXParser.CurrAddress += 2;
   1e398:	40 92 e6 01 	sts	0x01E6, r4
   1e39c:	50 92 e7 01 	sts	0x01E7, r5
   1e3a0:	60 92 e8 01 	sts	0x01E8, r6
   1e3a4:	70 92 e9 01 	sts	0x01E9, r7
   1e3a8:	9a de       	rcall	.-716    	; 0x1e0de <FlushPageIfRequired>
   1e3aa:	17 c0       	rjmp	.+46     	; 0x1e3da <main+0x29e>
   1e3ac:	60 e0       	ldi	r22, 0x00	; 0
   1e3ae:	70 e0       	ldi	r23, 0x00	; 0
   1e3b0:	94 e0       	ldi	r25, 0x04	; 4

					/* Flush the FLASH page to physical memory if we are crossing a page boundary */
					FlushPageIfRequired();
   1e3b2:	44 0f       	add	r20, r20
   1e3b4:	55 1f       	adc	r21, r21
   1e3b6:	66 1f       	adc	r22, r22
					break;

				case HEX_RECORD_TYPE_ExtendedSegmentAddress:
					/* Extended address data - store the upper 12-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 4);
   1e3b8:	77 1f       	adc	r23, r23
   1e3ba:	9a 95       	dec	r25
   1e3bc:	d1 f7       	brne	.-12     	; 0x1e3b2 <main+0x276>
   1e3be:	05 c0       	rjmp	.+10     	; 0x1e3ca <main+0x28e>
   1e3c0:	60 e0       	ldi	r22, 0x00	; 0
   1e3c2:	70 e0       	ldi	r23, 0x00	; 0
   1e3c4:	ba 01       	movw	r22, r20
   1e3c6:	55 27       	eor	r21, r21
   1e3c8:	44 27       	eor	r20, r20
   1e3ca:	40 93 e2 01 	sts	0x01E2, r20
					break;

				case HEX_RECORD_TYPE_ExtendedLinearAddress:
					/* Extended address data - store the upper 16-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 16);
   1e3ce:	50 93 e3 01 	sts	0x01E3, r21
   1e3d2:	60 93 e4 01 	sts	0x01E4, r22
   1e3d6:	70 93 e5 01 	sts	0x01E5, r23
   1e3da:	80 91 dc 01 	lds	r24, 0x01DC
   1e3de:	81 11       	cpse	r24, r1
   1e3e0:	14 c0       	rjmp	.+40     	; 0x1e40a <main+0x2ce>
   1e3e2:	c0 92 d7 01 	sts	0x01D7, r12
					break;
			}

			if (!HEXParser.DataRem)
   1e3e6:	11 c0       	rjmp	.+34     	; 0x1e40a <main+0x2ce>
   1e3e8:	42 2f       	mov	r20, r18
   1e3ea:	50 e0       	ldi	r21, 0x00	; 0
   1e3ec:	81 95       	neg	r24
			  HEXParser.ParserState = HEX_PARSE_STATE_CHECKSUM;
   1e3ee:	90 e0       	ldi	r25, 0x00	; 0
   1e3f0:	48 17       	cp	r20, r24
   1e3f2:	59 07       	cpc	r21, r25
			break;

		case HEX_PARSE_STATE_CHECKSUM:
			/* Verify checksum of the completed record */
			if (HEXParser.Data != ((~HEXParser.Checksum + 1) & 0xFF))
   1e3f4:	51 f4       	brne	.+20     	; 0x1e40a <main+0x2ce>
   1e3f6:	73 de       	rcall	.-794    	; 0x1e0de <FlushPageIfRequired>
   1e3f8:	80 91 db 01 	lds	r24, 0x01DB
   1e3fc:	81 30       	cpi	r24, 0x01	; 1
   1e3fe:	29 f4       	brne	.+10     	; 0x1e40a <main+0x2ce>
   1e400:	10 92 00 01 	sts	0x0100, r1
			  break;

			/* Flush the FLASH page to physical memory if we are crossing a page boundary */
			FlushPageIfRequired();
   1e404:	02 c0       	rjmp	.+4      	; 0x1e40a <main+0x2ce>

			/* If end of the HEX file reached, the bootloader should exit at next opportunity */
			if (HEXParser.RecordType == HEX_RECORD_TYPE_EndOfFile)
   1e406:	10 92 d7 01 	sts	0x01D7, r1
   1e40a:	21 96       	adiw	r28, 0x01	; 1
   1e40c:	da ce       	rjmp	.-588    	; 0x1e1c2 <main+0x86>
			  RunBootloader = false;
   1e40e:	80 e6       	ldi	r24, 0x60	; 96
   1e410:	61 de       	rcall	.-830    	; 0x1e0d4 <LEDs_SetAllLEDs>
   1e412:	81 e0       	ldi	r24, 0x01	; 1

			break;

		default:
			HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e414:	91 e0       	ldi	r25, 0x01	; 1
   1e416:	26 d4       	rcall	.+2124   	; 0x1ec64 <PRNT_Device_USBTask>
   1e418:	cd d3       	rcall	.+1946   	; 0x1ebb4 <USB_USBTask>
   1e41a:	c3 ce       	rjmp	.-634    	; 0x1e1a2 <main+0x66>

				/* Feed the next byte of data to the HEX parser */
				ParseIntelHEXByte(ReceivedByte);
			}

			LEDs_SetAllLEDs(LEDMASK_USB_READY);
   1e41c:	80 91 e0 00 	lds	r24, 0x00E0
   1e420:	81 60       	ori	r24, 0x01	; 1
		}

		PRNT_Device_USBTask(&TextOnly_Printer_Interface);
   1e422:	80 93 e0 00 	sts	0x00E0, r24
   1e426:	82 e4       	ldi	r24, 0x42	; 66
   1e428:	9c ed       	ldi	r25, 0xDC	; 220
		USB_USBTask();
   1e42a:	90 93 f5 01 	sts	0x01F5, r25
   1e42e:	80 93 f4 01 	sts	0x01F4, r24
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e432:	2c e0       	ldi	r18, 0x0C	; 12
   1e434:	88 e1       	ldi	r24, 0x18	; 24
   1e436:	90 e0       	ldi	r25, 0x00	; 0
   1e438:	0f b6       	in	r0, 0x3f	; 63

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e43a:	f8 94       	cli
   1e43c:	a8 95       	wdr
   1e43e:	80 93 60 00 	sts	0x0060, r24
   1e442:	0f be       	out	0x3f, r0	; 63
   1e444:	20 93 60 00 	sts	0x0060, r18

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e448:	ff cf       	rjmp	.-2      	; 0x1e448 <main+0x30c>

0001e44a <__vector_20>:
   1e44a:	1f 92       	push	r1
   1e44c:	0f 92       	push	r0
   1e44e:	0f b6       	in	r0, 0x3f	; 63
   1e450:	0f 92       	push	r0
   1e452:	11 24       	eor	r1, r1
   1e454:	8f 93       	push	r24
   1e456:	80 e3       	ldi	r24, 0x30	; 48
   1e458:	89 b9       	out	0x09, r24	; 9
   1e45a:	8f 91       	pop	r24
   1e45c:	0f 90       	pop	r0

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e45e:	0f be       	out	0x3f, r0	; 63
   1e460:	0f 90       	pop	r0
   1e462:	1f 90       	pop	r1
   1e464:	18 95       	reti

0001e466 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
   1e466:	80 ea       	ldi	r24, 0xA0	; 160
   1e468:	35 ce       	rjmp	.-918    	; 0x1e0d4 <LEDs_SetAllLEDs>

0001e46a <EVENT_USB_Device_Disconnect>:
   1e46a:	80 e1       	ldi	r24, 0x10	; 16
 *  the status LEDs and stops the Printer management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
   1e46c:	33 ce       	rjmp	.-922    	; 0x1e0d4 <LEDs_SetAllLEDs>

0001e46e <EVENT_USB_Device_ConfigurationChanged>:
   1e46e:	81 e0       	ldi	r24, 0x01	; 1
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Printer Data Endpoints */
	ConfigSuccess &= PRNT_Device_ConfigureEndpoints(&TextOnly_Printer_Interface);
   1e470:	91 e0       	ldi	r25, 0x01	; 1
   1e472:	bb d3       	rcall	.+1910   	; 0x1ebea <PRNT_Device_ConfigureEndpoints>
   1e474:	10 92 d7 01 	sts	0x01D7, r1

	/* Reset the HEX parser upon successful connection to a host */
	HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e478:	88 23       	and	r24, r24

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
   1e47a:	11 f0       	breq	.+4      	; 0x1e480 <EVENT_USB_Device_ConfigurationChanged+0x12>
   1e47c:	80 e6       	ldi	r24, 0x60	; 96
   1e47e:	01 c0       	rjmp	.+2      	; 0x1e482 <EVENT_USB_Device_ConfigurationChanged+0x14>
   1e480:	80 e9       	ldi	r24, 0x90	; 144
   1e482:	28 ce       	rjmp	.-944    	; 0x1e0d4 <LEDs_SetAllLEDs>

0001e484 <EVENT_USB_Device_ControlRequest>:
   1e484:	81 e0       	ldi	r24, 0x01	; 1
   1e486:	91 e0       	ldi	r25, 0x01	; 1
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	PRNT_Device_ProcessControlRequest(&TextOnly_Printer_Interface);
   1e488:	83 c4       	rjmp	.+2310   	; 0x1ed90 <PRNT_Device_ProcessControlRequest>

0001e48a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
   1e48a:	29 2f       	mov	r18, r25
   1e48c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e48e:	22 30       	cpi	r18, 0x02	; 2
   1e490:	31 05       	cpc	r19, r1
   1e492:	59 f0       	breq	.+22     	; 0x1e4aa <CALLBACK_USB_GetDescriptor+0x20>
   1e494:	23 30       	cpi	r18, 0x03	; 3
   1e496:	31 05       	cpc	r19, r1
   1e498:	69 f0       	breq	.+26     	; 0x1e4b4 <CALLBACK_USB_GetDescriptor+0x2a>
   1e49a:	21 30       	cpi	r18, 0x01	; 1
   1e49c:	31 05       	cpc	r19, r1
   1e49e:	d9 f4       	brne	.+54     	; 0x1e4d6 <CALLBACK_USB_GetDescriptor+0x4c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1e4a0:	82 e1       	ldi	r24, 0x12	; 18
   1e4a2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1e4a4:	29 e8       	ldi	r18, 0x89	; 137
   1e4a6:	31 e0       	ldi	r19, 0x01	; 1
   1e4a8:	1a c0       	rjmp	.+52     	; 0x1e4de <CALLBACK_USB_GetDescriptor+0x54>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1e4aa:	80 e2       	ldi	r24, 0x20	; 32
   1e4ac:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1e4ae:	29 e6       	ldi	r18, 0x69	; 105
   1e4b0:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1e4b2:	15 c0       	rjmp	.+42     	; 0x1e4de <CALLBACK_USB_GetDescriptor+0x54>
   1e4b4:	99 27       	eor	r25, r25
   1e4b6:	83 30       	cpi	r24, 0x03	; 3
   1e4b8:	91 05       	cpc	r25, r1
   1e4ba:	68 f4       	brcc	.+26     	; 0x1e4d6 <CALLBACK_USB_GetDescriptor+0x4c>
   1e4bc:	fc 01       	movw	r30, r24
   1e4be:	ee 0f       	add	r30, r30
   1e4c0:	ff 1f       	adc	r31, r31
   1e4c2:	ed 5e       	subi	r30, 0xED	; 237
   1e4c4:	fe 4f       	sbci	r31, 0xFE	; 254
   1e4c6:	20 81       	ld	r18, Z
   1e4c8:	31 81       	ldd	r19, Z+1	; 0x01
   1e4ca:	fc 01       	movw	r30, r24
   1e4cc:	e0 5f       	subi	r30, 0xF0	; 240
   1e4ce:	fe 4f       	sbci	r31, 0xFE	; 254
   1e4d0:	80 81       	ld	r24, Z
   1e4d2:	90 e0       	ldi	r25, 0x00	; 0
   1e4d4:	04 c0       	rjmp	.+8      	; 0x1e4de <CALLBACK_USB_GetDescriptor+0x54>
   1e4d6:	80 e0       	ldi	r24, 0x00	; 0
   1e4d8:	90 e0       	ldi	r25, 0x00	; 0
   1e4da:	20 e0       	ldi	r18, 0x00	; 0
   1e4dc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
   1e4de:	fa 01       	movw	r30, r20
   1e4e0:	31 83       	std	Z+1, r19	; 0x01
   1e4e2:	20 83       	st	Z, r18
	return Size;
}
   1e4e4:	08 95       	ret

0001e4e6 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e4e6:	07 b6       	in	r0, 0x37	; 55
   1e4e8:	00 fc       	sbrc	r0, 0
   1e4ea:	fd cf       	rjmp	.-6      	; 0x1e4e6 <BootloaderAPI_ErasePage>
   1e4ec:	f9 99       	sbic	0x1f, 1	; 31
   1e4ee:	fe cf       	rjmp	.-4      	; 0x1e4ec <BootloaderAPI_ErasePage+0x6>
   1e4f0:	23 e0       	ldi	r18, 0x03	; 3
   1e4f2:	fb 01       	movw	r30, r22
   1e4f4:	80 93 5b 00 	sts	0x005B, r24
   1e4f8:	20 93 57 00 	sts	0x0057, r18
   1e4fc:	e8 95       	spm
	boot_spm_busy_wait();
   1e4fe:	07 b6       	in	r0, 0x37	; 55
   1e500:	00 fc       	sbrc	r0, 0
   1e502:	fd cf       	rjmp	.-6      	; 0x1e4fe <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e504:	81 e1       	ldi	r24, 0x11	; 17
   1e506:	80 93 57 00 	sts	0x0057, r24
   1e50a:	e8 95       	spm
   1e50c:	08 95       	ret

0001e50e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e50e:	07 b6       	in	r0, 0x37	; 55
   1e510:	00 fc       	sbrc	r0, 0
   1e512:	fd cf       	rjmp	.-6      	; 0x1e50e <BootloaderAPI_WritePage>
   1e514:	f9 99       	sbic	0x1f, 1	; 31
   1e516:	fe cf       	rjmp	.-4      	; 0x1e514 <BootloaderAPI_WritePage+0x6>
   1e518:	25 e0       	ldi	r18, 0x05	; 5
   1e51a:	fb 01       	movw	r30, r22
   1e51c:	80 93 5b 00 	sts	0x005B, r24
   1e520:	20 93 57 00 	sts	0x0057, r18
   1e524:	e8 95       	spm
	boot_spm_busy_wait();
   1e526:	07 b6       	in	r0, 0x37	; 55
   1e528:	00 fc       	sbrc	r0, 0
   1e52a:	fd cf       	rjmp	.-6      	; 0x1e526 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e52c:	81 e1       	ldi	r24, 0x11	; 17
   1e52e:	80 93 57 00 	sts	0x0057, r24
   1e532:	e8 95       	spm
   1e534:	08 95       	ret

0001e536 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e536:	07 b6       	in	r0, 0x37	; 55
   1e538:	00 fc       	sbrc	r0, 0
   1e53a:	fd cf       	rjmp	.-6      	; 0x1e536 <BootloaderAPI_FillWord>
   1e53c:	f9 99       	sbic	0x1f, 1	; 31
   1e53e:	fe cf       	rjmp	.-4      	; 0x1e53c <BootloaderAPI_FillWord+0x6>
   1e540:	21 e0       	ldi	r18, 0x01	; 1
   1e542:	0a 01       	movw	r0, r20
   1e544:	fb 01       	movw	r30, r22
   1e546:	80 93 5b 00 	sts	0x005B, r24
   1e54a:	20 93 57 00 	sts	0x0057, r18
   1e54e:	e8 95       	spm
   1e550:	11 24       	eor	r1, r1
   1e552:	08 95       	ret

0001e554 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e554:	21 e2       	ldi	r18, 0x21	; 33
   1e556:	fc 01       	movw	r30, r24
   1e558:	20 93 57 00 	sts	0x0057, r18
   1e55c:	84 91       	lpm	r24, Z
}
   1e55e:	08 95       	ret

0001e560 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e560:	29 e0       	ldi	r18, 0x09	; 9
   1e562:	fc 01       	movw	r30, r24
   1e564:	20 93 57 00 	sts	0x0057, r18
   1e568:	84 91       	lpm	r24, Z
}
   1e56a:	08 95       	ret

0001e56c <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e56c:	e1 e0       	ldi	r30, 0x01	; 1
   1e56e:	f0 e0       	ldi	r31, 0x00	; 0
   1e570:	89 e0       	ldi	r24, 0x09	; 9
   1e572:	80 93 57 00 	sts	0x0057, r24
   1e576:	84 91       	lpm	r24, Z
}
   1e578:	08 95       	ret

0001e57a <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e57a:	07 b6       	in	r0, 0x37	; 55
   1e57c:	00 fc       	sbrc	r0, 0
   1e57e:	fd cf       	rjmp	.-6      	; 0x1e57a <BootloaderAPI_WriteLock>
   1e580:	f9 99       	sbic	0x1f, 1	; 31
   1e582:	fe cf       	rjmp	.-4      	; 0x1e580 <BootloaderAPI_WriteLock+0x6>
   1e584:	80 95       	com	r24
   1e586:	99 e0       	ldi	r25, 0x09	; 9
   1e588:	e1 e0       	ldi	r30, 0x01	; 1
   1e58a:	f0 e0       	ldi	r31, 0x00	; 0
   1e58c:	08 2e       	mov	r0, r24
   1e58e:	90 93 57 00 	sts	0x0057, r25
   1e592:	e8 95       	spm
   1e594:	08 95       	ret

0001e596 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e596:	20 91 f2 01 	lds	r18, 0x01F2
   1e59a:	30 91 f3 01 	lds	r19, 0x01F3
   1e59e:	26 17       	cp	r18, r22
   1e5a0:	37 07       	cpc	r19, r23
   1e5a2:	48 f0       	brcs	.+18     	; 0x1e5b6 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e5a4:	61 15       	cp	r22, r1
   1e5a6:	71 05       	cpc	r23, r1
   1e5a8:	39 f4       	brne	.+14     	; 0x1e5b8 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e5aa:	20 91 e8 00 	lds	r18, 0x00E8
   1e5ae:	2e 77       	andi	r18, 0x7E	; 126
   1e5b0:	20 93 e8 00 	sts	0x00E8, r18
   1e5b4:	01 c0       	rjmp	.+2      	; 0x1e5b8 <Endpoint_Write_Control_Stream_LE+0x22>
   1e5b6:	b9 01       	movw	r22, r18
   1e5b8:	fc 01       	movw	r30, r24
   1e5ba:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e5bc:	61 15       	cp	r22, r1
   1e5be:	71 05       	cpc	r23, r1
   1e5c0:	91 f1       	breq	.+100    	; 0x1e626 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e5c2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e5c4:	88 23       	and	r24, r24
   1e5c6:	e1 f1       	breq	.+120    	; 0x1e640 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e5c8:	85 30       	cpi	r24, 0x05	; 5
   1e5ca:	e1 f1       	breq	.+120    	; 0x1e644 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e5cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e5d0:	83 fd       	sbrc	r24, 3
   1e5d2:	3a c0       	rjmp	.+116    	; 0x1e648 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e5d4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e5d8:	82 ff       	sbrs	r24, 2
   1e5da:	06 c0       	rjmp	.+12     	; 0x1e5e8 <Endpoint_Write_Control_Stream_LE+0x52>
   1e5dc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e5e0:	82 ff       	sbrs	r24, 2
   1e5e2:	24 c0       	rjmp	.+72     	; 0x1e62c <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e5e4:	80 e0       	ldi	r24, 0x00	; 0
   1e5e6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e5e8:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
   1e5ec:	80 ff       	sbrs	r24, 0
   1e5ee:	e6 cf       	rjmp	.-52     	; 0x1e5bc <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e5f0:	80 91 f2 00 	lds	r24, 0x00F2
   1e5f4:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e5f8:	61 15       	cp	r22, r1
   1e5fa:	71 05       	cpc	r23, r1
   1e5fc:	51 f0       	breq	.+20     	; 0x1e612 <Endpoint_Write_Control_Stream_LE+0x7c>
   1e5fe:	88 30       	cpi	r24, 0x08	; 8
   1e600:	91 05       	cpc	r25, r1
   1e602:	38 f4       	brcc	.+14     	; 0x1e612 <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e604:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e606:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e60a:	61 50       	subi	r22, 0x01	; 1
   1e60c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1e60e:	01 96       	adiw	r24, 0x01	; 1
   1e610:	f3 cf       	rjmp	.-26     	; 0x1e5f8 <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e612:	21 e0       	ldi	r18, 0x01	; 1
   1e614:	08 97       	sbiw	r24, 0x08	; 8
   1e616:	09 f0       	breq	.+2      	; 0x1e61a <Endpoint_Write_Control_Stream_LE+0x84>
   1e618:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e61a:	80 91 e8 00 	lds	r24, 0x00E8
   1e61e:	8e 77       	andi	r24, 0x7E	; 126
   1e620:	80 93 e8 00 	sts	0x00E8, r24
   1e624:	cb cf       	rjmp	.-106    	; 0x1e5bc <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e626:	21 11       	cpse	r18, r1
   1e628:	cc cf       	rjmp	.-104    	; 0x1e5c2 <Endpoint_Write_Control_Stream_LE+0x2c>
   1e62a:	d8 cf       	rjmp	.-80     	; 0x1e5dc <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e62c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e62e:	88 23       	and	r24, r24
   1e630:	39 f0       	breq	.+14     	; 0x1e640 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e632:	85 30       	cpi	r24, 0x05	; 5
   1e634:	39 f0       	breq	.+14     	; 0x1e644 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e636:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e63a:	83 ff       	sbrs	r24, 3
   1e63c:	cf cf       	rjmp	.-98     	; 0x1e5dc <Endpoint_Write_Control_Stream_LE+0x46>
   1e63e:	04 c0       	rjmp	.+8      	; 0x1e648 <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e640:	82 e0       	ldi	r24, 0x02	; 2
   1e642:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e644:	83 e0       	ldi	r24, 0x03	; 3
   1e646:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e648:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e64a:	08 95       	ret

0001e64c <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e64c:	8f 70       	andi	r24, 0x0F	; 15
   1e64e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e652:	eb ee       	ldi	r30, 0xEB	; 235
   1e654:	f0 e0       	ldi	r31, 0x00	; 0
   1e656:	80 81       	ld	r24, Z
   1e658:	81 60       	ori	r24, 0x01	; 1
   1e65a:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e65c:	ed ee       	ldi	r30, 0xED	; 237
   1e65e:	f0 e0       	ldi	r31, 0x00	; 0
   1e660:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1e662:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e666:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e668:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1e66c:	88 1f       	adc	r24, r24
   1e66e:	88 27       	eor	r24, r24
   1e670:	88 1f       	adc	r24, r24
   1e672:	08 95       	ret

0001e674 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
   1e674:	0f 93       	push	r16
   1e676:	1f 93       	push	r17
   1e678:	cf 93       	push	r28
   1e67a:	df 93       	push	r29
   1e67c:	06 2f       	mov	r16, r22
   1e67e:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
   1e680:	10 e0       	ldi	r17, 0x00	; 0
   1e682:	10 17       	cp	r17, r16
   1e684:	71 f1       	breq	.+92     	; 0x1e6e2 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
   1e686:	98 81       	ld	r25, Y
   1e688:	99 23       	and	r25, r25
   1e68a:	41 f1       	breq	.+80     	; 0x1e6dc <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
   1e68c:	2c 81       	ldd	r18, Y+4	; 0x04
   1e68e:	e9 81       	ldd	r30, Y+1	; 0x01
   1e690:	fa 81       	ldd	r31, Y+2	; 0x02
   1e692:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
   1e694:	89 2f       	mov	r24, r25
   1e696:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
   1e698:	87 30       	cpi	r24, 0x07	; 7
   1e69a:	10 f0       	brcs	.+4      	; 0x1e6a0 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
   1e69c:	80 e0       	ldi	r24, 0x00	; 0
   1e69e:	22 c0       	rjmp	.+68     	; 0x1e6e4 <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e6a0:	22 30       	cpi	r18, 0x02	; 2
   1e6a2:	10 f0       	brcs	.+4      	; 0x1e6a8 <Endpoint_ConfigureEndpointTable+0x34>
   1e6a4:	56 e0       	ldi	r21, 0x06	; 6
   1e6a6:	01 c0       	rjmp	.+2      	; 0x1e6aa <Endpoint_ConfigureEndpointTable+0x36>
   1e6a8:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
   1e6aa:	28 e0       	ldi	r18, 0x08	; 8
   1e6ac:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
   1e6ae:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
   1e6b0:	2e 17       	cp	r18, r30
   1e6b2:	3f 07       	cpc	r19, r31
   1e6b4:	20 f4       	brcc	.+8      	; 0x1e6be <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
   1e6b6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
   1e6b8:	22 0f       	add	r18, r18
   1e6ba:	33 1f       	adc	r19, r19
   1e6bc:	f9 cf       	rjmp	.-14     	; 0x1e6b0 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
   1e6be:	42 95       	swap	r20
   1e6c0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e6c2:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
   1e6c4:	69 2f       	mov	r22, r25
   1e6c6:	66 1f       	adc	r22, r22
   1e6c8:	66 27       	eor	r22, r22
   1e6ca:	66 1f       	adc	r22, r22
   1e6cc:	90 e4       	ldi	r25, 0x40	; 64
   1e6ce:	79 9f       	mul	r23, r25
   1e6d0:	90 01       	movw	r18, r0
   1e6d2:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e6d4:	62 2b       	or	r22, r18
   1e6d6:	ba df       	rcall	.-140    	; 0x1e64c <Endpoint_ConfigureEndpoint_Prv>
   1e6d8:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
   1e6da:	01 f3       	breq	.-64     	; 0x1e69c <Endpoint_ConfigureEndpointTable+0x28>
   1e6dc:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
   1e6de:	25 96       	adiw	r28, 0x05	; 5
   1e6e0:	d0 cf       	rjmp	.-96     	; 0x1e682 <Endpoint_ConfigureEndpointTable+0xe>
   1e6e2:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
   1e6e4:	df 91       	pop	r29
}
   1e6e6:	cf 91       	pop	r28
   1e6e8:	1f 91       	pop	r17
   1e6ea:	0f 91       	pop	r16
   1e6ec:	08 95       	ret

0001e6ee <Endpoint_ClearStatusStage>:
   1e6ee:	80 91 ec 01 	lds	r24, 0x01EC
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e6f2:	87 fd       	sbrc	r24, 7
   1e6f4:	05 c0       	rjmp	.+10     	; 0x1e700 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6f6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e6fa:	80 ff       	sbrs	r24, 0
   1e6fc:	0d c0       	rjmp	.+26     	; 0x1e718 <Endpoint_ClearStatusStage+0x2a>
   1e6fe:	10 c0       	rjmp	.+32     	; 0x1e720 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e700:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1e704:	82 fd       	sbrc	r24, 2
   1e706:	04 c0       	rjmp	.+8      	; 0x1e710 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e708:	8e b3       	in	r24, 0x1e	; 30
   1e70a:	81 11       	cpse	r24, r1
   1e70c:	f9 cf       	rjmp	.-14     	; 0x1e700 <Endpoint_ClearStatusStage+0x12>
   1e70e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e710:	80 91 e8 00 	lds	r24, 0x00E8
   1e714:	8b 77       	andi	r24, 0x7B	; 123
   1e716:	07 c0       	rjmp	.+14     	; 0x1e726 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e718:	8e b3       	in	r24, 0x1e	; 30
   1e71a:	81 11       	cpse	r24, r1
   1e71c:	ec cf       	rjmp	.-40     	; 0x1e6f6 <Endpoint_ClearStatusStage+0x8>
   1e71e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e720:	80 91 e8 00 	lds	r24, 0x00E8
   1e724:	8e 77       	andi	r24, 0x7E	; 126
   1e726:	80 93 e8 00 	sts	0x00E8, r24
   1e72a:	08 95       	ret

0001e72c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   1e72c:	80 91 e4 00 	lds	r24, 0x00E4
   1e730:	90 91 e5 00 	lds	r25, 0x00E5
   1e734:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1e736:	20 91 ec 00 	lds	r18, 0x00EC
   1e73a:	20 ff       	sbrs	r18, 0
   1e73c:	20 c0       	rjmp	.+64     	; 0x1e77e <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e73e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   1e742:	20 fd       	sbrc	r18, 0
   1e744:	20 c0       	rjmp	.+64     	; 0x1e786 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e746:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e748:	22 23       	and	r18, r18
   1e74a:	89 f0       	breq	.+34     	; 0x1e76e <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e74c:	25 30       	cpi	r18, 0x05	; 5
   1e74e:	89 f0       	breq	.+34     	; 0x1e772 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e750:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   1e754:	25 fd       	sbrc	r18, 5
   1e756:	0f c0       	rjmp	.+30     	; 0x1e776 <Endpoint_WaitUntilReady+0x4a>
   1e758:	20 91 e4 00 	lds	r18, 0x00E4
   1e75c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   1e760:	28 17       	cp	r18, r24
   1e762:	39 07       	cpc	r19, r25
   1e764:	41 f3       	breq	.-48     	; 0x1e736 <Endpoint_WaitUntilReady+0xa>
   1e766:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   1e768:	41 f0       	breq	.+16     	; 0x1e77a <Endpoint_WaitUntilReady+0x4e>
   1e76a:	c9 01       	movw	r24, r18
   1e76c:	e4 cf       	rjmp	.-56     	; 0x1e736 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   1e76e:	82 e0       	ldi	r24, 0x02	; 2
   1e770:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   1e772:	83 e0       	ldi	r24, 0x03	; 3
   1e774:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   1e776:	81 e0       	ldi	r24, 0x01	; 1
   1e778:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
   1e77a:	84 e0       	ldi	r24, 0x04	; 4
   1e77c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e77e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   1e782:	22 ff       	sbrs	r18, 2
   1e784:	e0 cf       	rjmp	.-64     	; 0x1e746 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   1e786:	80 e0       	ldi	r24, 0x00	; 0
   1e788:	08 95       	ret

0001e78a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1e78a:	0f 93       	push	r16
   1e78c:	1f 93       	push	r17
   1e78e:	cf 93       	push	r28
   1e790:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1e792:	49 d0       	rcall	.+146    	; 0x1e826 <USB_INT_DisableAllInterrupts>
   1e794:	50 d0       	rcall	.+160    	; 0x1e836 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e796:	c8 ed       	ldi	r28, 0xD8	; 216
   1e798:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1e79a:	88 81       	ld	r24, Y
   1e79c:	8f 77       	andi	r24, 0x7F	; 127
   1e79e:	88 83       	st	Y, r24
   1e7a0:	88 81       	ld	r24, Y
   1e7a2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1e7a4:	88 83       	st	Y, r24
   1e7a6:	88 81       	ld	r24, Y
   1e7a8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e7aa:	88 83       	st	Y, r24
   1e7ac:	e7 ed       	ldi	r30, 0xD7	; 215
   1e7ae:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e7b0:	80 81       	ld	r24, Z
   1e7b2:	80 68       	ori	r24, 0x80	; 128
   1e7b4:	80 83       	st	Z, r24
   1e7b6:	19 bc       	out	0x29, r1	; 41
   1e7b8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e7ba:	10 92 ea 01 	sts	0x01EA, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1e7be:	00 ee       	ldi	r16, 0xE0	; 224
   1e7c0:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e7c2:	f8 01       	movw	r30, r16
   1e7c4:	80 81       	ld	r24, Z
   1e7c6:	8b 7f       	andi	r24, 0xFB	; 251
   1e7c8:	80 83       	st	Z, r24
   1e7ca:	88 81       	ld	r24, Y
   1e7cc:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1e7ce:	88 83       	st	Y, r24
   1e7d0:	42 e0       	ldi	r20, 0x02	; 2
   1e7d2:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e7d4:	80 e0       	ldi	r24, 0x00	; 0
   1e7d6:	3a df       	rcall	.-396    	; 0x1e64c <Endpoint_ConfigureEndpoint_Prv>
   1e7d8:	e1 ee       	ldi	r30, 0xE1	; 225
   1e7da:	f0 e0       	ldi	r31, 0x00	; 0
   1e7dc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e7de:	8e 7f       	andi	r24, 0xFE	; 254
   1e7e0:	80 83       	st	Z, r24
   1e7e2:	e2 ee       	ldi	r30, 0xE2	; 226
   1e7e4:	f0 e0       	ldi	r31, 0x00	; 0
   1e7e6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e7e8:	81 60       	ori	r24, 0x01	; 1
   1e7ea:	80 83       	st	Z, r24
   1e7ec:	80 81       	ld	r24, Z
   1e7ee:	88 60       	ori	r24, 0x08	; 8
   1e7f0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1e7f2:	f8 01       	movw	r30, r16
   1e7f4:	80 81       	ld	r24, Z
   1e7f6:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1e7f8:	80 83       	st	Z, r24
   1e7fa:	88 81       	ld	r24, Y
   1e7fc:	80 61       	ori	r24, 0x10	; 16
   1e7fe:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1e800:	df 91       	pop	r29
   1e802:	cf 91       	pop	r28
   1e804:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1e806:	0f 91       	pop	r16
   1e808:	08 95       	ret

0001e80a <USB_Init>:
   1e80a:	e8 ed       	ldi	r30, 0xD8	; 216
   1e80c:	f0 e0       	ldi	r31, 0x00	; 0
   1e80e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1e810:	8f 7e       	andi	r24, 0xEF	; 239
   1e812:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1e814:	e7 ed       	ldi	r30, 0xD7	; 215
   1e816:	f0 e0       	ldi	r31, 0x00	; 0
   1e818:	80 81       	ld	r24, Z
   1e81a:	81 60       	ori	r24, 0x01	; 1
   1e81c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1e81e:	81 e0       	ldi	r24, 0x01	; 1
   1e820:	80 93 eb 01 	sts	0x01EB, r24

	USB_ResetInterface();
   1e824:	b2 cf       	rjmp	.-156    	; 0x1e78a <USB_ResetInterface>

0001e826 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1e826:	e8 ed       	ldi	r30, 0xD8	; 216
   1e828:	f0 e0       	ldi	r31, 0x00	; 0
   1e82a:	80 81       	ld	r24, Z
   1e82c:	8c 7f       	andi	r24, 0xFC	; 252
   1e82e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1e830:	10 92 e2 00 	sts	0x00E2, r1
   1e834:	08 95       	ret

0001e836 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1e836:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1e83a:	10 92 e1 00 	sts	0x00E1, r1
   1e83e:	08 95       	ret

0001e840 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1e840:	1f 92       	push	r1
   1e842:	0f 92       	push	r0
   1e844:	0f b6       	in	r0, 0x3f	; 63
   1e846:	0f 92       	push	r0
   1e848:	11 24       	eor	r1, r1
   1e84a:	0b b6       	in	r0, 0x3b	; 59
   1e84c:	0f 92       	push	r0
   1e84e:	2f 93       	push	r18
   1e850:	3f 93       	push	r19
   1e852:	4f 93       	push	r20
   1e854:	5f 93       	push	r21
   1e856:	6f 93       	push	r22
   1e858:	7f 93       	push	r23
   1e85a:	8f 93       	push	r24
   1e85c:	9f 93       	push	r25
   1e85e:	af 93       	push	r26
   1e860:	bf 93       	push	r27
   1e862:	ef 93       	push	r30
   1e864:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1e866:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1e86a:	80 ff       	sbrs	r24, 0
   1e86c:	1b c0       	rjmp	.+54     	; 0x1e8a4 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1e86e:	80 91 d8 00 	lds	r24, 0x00D8
   1e872:	80 ff       	sbrs	r24, 0
   1e874:	17 c0       	rjmp	.+46     	; 0x1e8a4 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1e876:	80 91 da 00 	lds	r24, 0x00DA
   1e87a:	8e 7f       	andi	r24, 0xFE	; 254
   1e87c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1e880:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1e884:	80 ff       	sbrs	r24, 0
   1e886:	0b c0       	rjmp	.+22     	; 0x1e89e <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e888:	8c e0       	ldi	r24, 0x0C	; 12
   1e88a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e88c:	8e e0       	ldi	r24, 0x0E	; 14
   1e88e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1e890:	09 b4       	in	r0, 0x29	; 41
   1e892:	00 fe       	sbrs	r0, 0
   1e894:	fd cf       	rjmp	.-6      	; 0x1e890 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1e896:	81 e0       	ldi	r24, 0x01	; 1
   1e898:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1e89a:	e5 dd       	rcall	.-1078   	; 0x1e466 <EVENT_USB_Device_Connect>
   1e89c:	03 c0       	rjmp	.+6      	; 0x1e8a4 <__vector_10+0x64>
   1e89e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e8a0:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1e8a2:	e3 dd       	rcall	.-1082   	; 0x1e46a <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
   1e8a4:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1e8a8:	80 ff       	sbrs	r24, 0
   1e8aa:	17 c0       	rjmp	.+46     	; 0x1e8da <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1e8ac:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1e8b0:	80 ff       	sbrs	r24, 0
   1e8b2:	13 c0       	rjmp	.+38     	; 0x1e8da <__vector_10+0x9a>
   1e8b4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e8b8:	8e 7f       	andi	r24, 0xFE	; 254
   1e8ba:	80 93 e2 00 	sts	0x00E2, r24
   1e8be:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e8c2:	80 61       	ori	r24, 0x10	; 16
   1e8c4:	80 93 e2 00 	sts	0x00E2, r24
   1e8c8:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1e8cc:	80 62       	ori	r24, 0x20	; 32
   1e8ce:	80 93 d8 00 	sts	0x00D8, r24
   1e8d2:	19 bc       	out	0x29, r1	; 41
   1e8d4:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e8d6:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1e8d8:	6c d1       	rcall	.+728    	; 0x1ebb2 <USB_Event_Stub>
   1e8da:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1e8de:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1e8e0:	2e c0       	rjmp	.+92     	; 0x1e93e <__vector_10+0xfe>
   1e8e2:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1e8e6:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1e8e8:	2a c0       	rjmp	.+84     	; 0x1e93e <__vector_10+0xfe>
   1e8ea:	8c e0       	ldi	r24, 0x0C	; 12
   1e8ec:	89 bd       	out	0x29, r24	; 41
   1e8ee:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e8f0:	89 bd       	out	0x29, r24	; 41
   1e8f2:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e8f4:	00 fe       	sbrs	r0, 0
   1e8f6:	fd cf       	rjmp	.-6      	; 0x1e8f2 <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1e8f8:	80 91 d8 00 	lds	r24, 0x00D8
   1e8fc:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e8fe:	80 93 d8 00 	sts	0x00D8, r24
   1e902:	80 91 e1 00 	lds	r24, 0x00E1
   1e906:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1e908:	80 93 e1 00 	sts	0x00E1, r24
   1e90c:	80 91 e2 00 	lds	r24, 0x00E2
   1e910:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1e912:	80 93 e2 00 	sts	0x00E2, r24
   1e916:	80 91 e2 00 	lds	r24, 0x00E2
   1e91a:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e91c:	80 93 e2 00 	sts	0x00E2, r24
   1e920:	80 91 ea 01 	lds	r24, 0x01EA
   1e924:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1e926:	11 f0       	breq	.+4      	; 0x1e92c <__vector_10+0xec>
   1e928:	84 e0       	ldi	r24, 0x04	; 4
   1e92a:	07 c0       	rjmp	.+14     	; 0x1e93a <__vector_10+0xfa>
   1e92c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
   1e930:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e932:	02 c0       	rjmp	.+4      	; 0x1e938 <__vector_10+0xf8>
   1e934:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1e936:	01 c0       	rjmp	.+2      	; 0x1e93a <__vector_10+0xfa>
   1e938:	81 e0       	ldi	r24, 0x01	; 1
   1e93a:	8e bb       	out	0x1e, r24	; 30
   1e93c:	3a d1       	rcall	.+628    	; 0x1ebb2 <USB_Event_Stub>
   1e93e:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1e942:	83 ff       	sbrs	r24, 3
   1e944:	21 c0       	rjmp	.+66     	; 0x1e988 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1e946:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1e94a:	83 ff       	sbrs	r24, 3
   1e94c:	1d c0       	rjmp	.+58     	; 0x1e988 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1e94e:	80 91 e1 00 	lds	r24, 0x00E1
   1e952:	87 7f       	andi	r24, 0xF7	; 247
   1e954:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1e958:	82 e0       	ldi	r24, 0x02	; 2
   1e95a:	8e bb       	out	0x1e, r24	; 30
   1e95c:	10 92 ea 01 	sts	0x01EA, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1e960:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1e964:	8e 7f       	andi	r24, 0xFE	; 254
   1e966:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e96a:	80 91 e2 00 	lds	r24, 0x00E2
   1e96e:	8e 7f       	andi	r24, 0xFE	; 254
   1e970:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e974:	80 91 e2 00 	lds	r24, 0x00E2
   1e978:	80 61       	ori	r24, 0x10	; 16
   1e97a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e97e:	42 e0       	ldi	r20, 0x02	; 2
   1e980:	60 e0       	ldi	r22, 0x00	; 0
   1e982:	80 e0       	ldi	r24, 0x00	; 0
   1e984:	63 de       	rcall	.-826    	; 0x1e64c <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e986:	15 d1       	rcall	.+554    	; 0x1ebb2 <USB_Event_Stub>
   1e988:	ff 91       	pop	r31
   1e98a:	ef 91       	pop	r30
   1e98c:	bf 91       	pop	r27
   1e98e:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1e990:	9f 91       	pop	r25
   1e992:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1e994:	7f 91       	pop	r23
   1e996:	6f 91       	pop	r22
   1e998:	5f 91       	pop	r21
   1e99a:	4f 91       	pop	r20
   1e99c:	3f 91       	pop	r19
   1e99e:	2f 91       	pop	r18
   1e9a0:	0f 90       	pop	r0
   1e9a2:	0b be       	out	0x3b, r0	; 59
   1e9a4:	0f 90       	pop	r0
   1e9a6:	0f be       	out	0x3f, r0	; 63
   1e9a8:	0f 90       	pop	r0
   1e9aa:	1f 90       	pop	r1
   1e9ac:	18 95       	reti

0001e9ae <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1e9ae:	1f 93       	push	r17
   1e9b0:	cf 93       	push	r28
   1e9b2:	df 93       	push	r29
   1e9b4:	00 d0       	rcall	.+0      	; 0x1e9b6 <USB_Device_ProcessControlRequest+0x8>
   1e9b6:	cd b7       	in	r28, 0x3d	; 61
   1e9b8:	de b7       	in	r29, 0x3e	; 62
   1e9ba:	ec ee       	ldi	r30, 0xEC	; 236
   1e9bc:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e9be:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1e9c2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1e9c4:	81 e0       	ldi	r24, 0x01	; 1
   1e9c6:	e4 3f       	cpi	r30, 0xF4	; 244
   1e9c8:	f8 07       	cpc	r31, r24
   1e9ca:	c9 f7       	brne	.-14     	; 0x1e9be <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1e9cc:	5b dd       	rcall	.-1354   	; 0x1e484 <EVENT_USB_Device_ControlRequest>
   1e9ce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e9d2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1e9d4:	da c0       	rjmp	.+436    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1e9d6:	90 91 ec 01 	lds	r25, 0x01EC
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1e9da:	80 91 ed 01 	lds	r24, 0x01ED

		switch (USB_ControlRequest.bRequest)
   1e9de:	85 30       	cpi	r24, 0x05	; 5
   1e9e0:	09 f4       	brne	.+2      	; 0x1e9e4 <USB_Device_ProcessControlRequest+0x36>
   1e9e2:	65 c0       	rjmp	.+202    	; 0x1eaae <USB_Device_ProcessControlRequest+0x100>
   1e9e4:	30 f4       	brcc	.+12     	; 0x1e9f2 <USB_Device_ProcessControlRequest+0x44>
   1e9e6:	81 30       	cpi	r24, 0x01	; 1
   1e9e8:	59 f1       	breq	.+86     	; 0x1ea40 <USB_Device_ProcessControlRequest+0x92>
   1e9ea:	68 f0       	brcs	.+26     	; 0x1ea06 <USB_Device_ProcessControlRequest+0x58>
   1e9ec:	83 30       	cpi	r24, 0x03	; 3
   1e9ee:	41 f1       	breq	.+80     	; 0x1ea40 <USB_Device_ProcessControlRequest+0x92>
   1e9f0:	cc c0       	rjmp	.+408    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1e9f2:	88 30       	cpi	r24, 0x08	; 8
   1e9f4:	09 f4       	brne	.+2      	; 0x1e9f8 <USB_Device_ProcessControlRequest+0x4a>
   1e9f6:	9c c0       	rjmp	.+312    	; 0x1eb30 <USB_Device_ProcessControlRequest+0x182>
   1e9f8:	89 30       	cpi	r24, 0x09	; 9
   1e9fa:	09 f4       	brne	.+2      	; 0x1e9fe <USB_Device_ProcessControlRequest+0x50>
   1e9fc:	ab c0       	rjmp	.+342    	; 0x1eb54 <USB_Device_ProcessControlRequest+0x1a6>
   1e9fe:	86 30       	cpi	r24, 0x06	; 6
   1ea00:	09 f0       	breq	.+2      	; 0x1ea04 <USB_Device_ProcessControlRequest+0x56>
   1ea02:	c3 c0       	rjmp	.+390    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1ea04:	75 c0       	rjmp	.+234    	; 0x1eaf0 <USB_Device_ProcessControlRequest+0x142>
   1ea06:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ea08:	81 f0       	breq	.+32     	; 0x1ea2a <USB_Device_ProcessControlRequest+0x7c>
   1ea0a:	92 38       	cpi	r25, 0x82	; 130
   1ea0c:	09 f0       	breq	.+2      	; 0x1ea10 <USB_Device_ProcessControlRequest+0x62>
   1ea0e:	bd c0       	rjmp	.+378    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1ea10:	80 91 f0 01 	lds	r24, 0x01F0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea14:	8f 70       	andi	r24, 0x0F	; 15
   1ea16:	80 93 e9 00 	sts	0x00E9, r24
   1ea1a:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ea1e:	95 fb       	bst	r25, 5
   1ea20:	99 27       	eor	r25, r25
   1ea22:	90 f9       	bld	r25, 0
   1ea24:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea28:	01 c0       	rjmp	.+2      	; 0x1ea2c <USB_Device_ProcessControlRequest+0x7e>
   1ea2a:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1ea2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ea30:	87 7f       	andi	r24, 0xF7	; 247
   1ea32:	80 93 e8 00 	sts	0x00E8, r24
   1ea36:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ea3a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1ea3e:	83 c0       	rjmp	.+262    	; 0x1eb46 <USB_Device_ProcessControlRequest+0x198>
   1ea40:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ea42:	2d 7f       	andi	r18, 0xFD	; 253
   1ea44:	09 f0       	breq	.+2      	; 0x1ea48 <USB_Device_ProcessControlRequest+0x9a>
   1ea46:	a1 c0       	rjmp	.+322    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1ea48:	92 30       	cpi	r25, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ea4a:	09 f0       	breq	.+2      	; 0x1ea4e <USB_Device_ProcessControlRequest+0xa0>
   1ea4c:	9e c0       	rjmp	.+316    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1ea4e:	90 91 ee 01 	lds	r25, 0x01EE

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ea52:	91 11       	cpse	r25, r1
   1ea54:	26 c0       	rjmp	.+76     	; 0x1eaa2 <USB_Device_ProcessControlRequest+0xf4>
   1ea56:	20 91 f0 01 	lds	r18, 0x01F0
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ea5a:	2f 70       	andi	r18, 0x0F	; 15
   1ea5c:	09 f4       	brne	.+2      	; 0x1ea60 <USB_Device_ProcessControlRequest+0xb2>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1ea5e:	95 c0       	rjmp	.+298    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1ea60:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea64:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ea68:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ea6a:	1b c0       	rjmp	.+54     	; 0x1eaa2 <USB_Device_ProcessControlRequest+0xf4>
   1ea6c:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ea6e:	21 f4       	brne	.+8      	; 0x1ea78 <USB_Device_ProcessControlRequest+0xca>
   1ea70:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ea74:	80 62       	ori	r24, 0x20	; 32
   1ea76:	13 c0       	rjmp	.+38     	; 0x1ea9e <USB_Device_ProcessControlRequest+0xf0>
   1ea78:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ea7c:	80 61       	ori	r24, 0x10	; 16
   1ea7e:	80 93 eb 00 	sts	0x00EB, r24
   1ea82:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ea84:	90 e0       	ldi	r25, 0x00	; 0
   1ea86:	02 2e       	mov	r0, r18
   1ea88:	01 c0       	rjmp	.+2      	; 0x1ea8c <USB_Device_ProcessControlRequest+0xde>
   1ea8a:	88 0f       	add	r24, r24
   1ea8c:	0a 94       	dec	r0
   1ea8e:	ea f7       	brpl	.-6      	; 0x1ea8a <USB_Device_ProcessControlRequest+0xdc>
   1ea90:	80 93 ea 00 	sts	0x00EA, r24
   1ea94:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1ea98:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ea9c:	88 60       	ori	r24, 0x08	; 8
   1ea9e:	80 93 eb 00 	sts	0x00EB, r24
   1eaa2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eaa6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eaaa:	87 7f       	andi	r24, 0xF7	; 247
   1eaac:	4f c0       	rjmp	.+158    	; 0x1eb4c <USB_Device_ProcessControlRequest+0x19e>
   1eaae:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1eab0:	6c c0       	rjmp	.+216    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eab2:	10 91 ee 01 	lds	r17, 0x01EE
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1eab6:	1f 77       	andi	r17, 0x7F	; 127
   1eab8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1eabc:	80 78       	andi	r24, 0x80	; 128
   1eabe:	81 2b       	or	r24, r17
   1eac0:	80 93 e3 00 	sts	0x00E3, r24
   1eac4:	80 91 e8 00 	lds	r24, 0x00E8
   1eac8:	87 7f       	andi	r24, 0xF7	; 247
   1eaca:	80 93 e8 00 	sts	0x00E8, r24
   1eace:	0f de       	rcall	.-994    	; 0x1e6ee <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ead0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ead4:	80 ff       	sbrs	r24, 0
   1ead6:	fc cf       	rjmp	.-8      	; 0x1ead0 <USB_Device_ProcessControlRequest+0x122>

	while (!(Endpoint_IsINReady()));
   1ead8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1eadc:	80 68       	ori	r24, 0x80	; 128
   1eade:	80 93 e3 00 	sts	0x00E3, r24
   1eae2:	11 23       	and	r17, r17
   1eae4:	11 f0       	breq	.+4      	; 0x1eaea <USB_Device_ProcessControlRequest+0x13c>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1eae6:	83 e0       	ldi	r24, 0x03	; 3
   1eae8:	01 c0       	rjmp	.+2      	; 0x1eaec <USB_Device_ProcessControlRequest+0x13e>
   1eaea:	82 e0       	ldi	r24, 0x02	; 2
   1eaec:	8e bb       	out	0x1e, r24	; 30
   1eaee:	4d c0       	rjmp	.+154    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eaf0:	90 58       	subi	r25, 0x80	; 128
   1eaf2:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eaf4:	08 f0       	brcs	.+2      	; 0x1eaf8 <USB_Device_ProcessControlRequest+0x14a>
   1eaf6:	49 c0       	rjmp	.+146    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eaf8:	ae 01       	movw	r20, r28
   1eafa:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eafc:	5f 4f       	sbci	r21, 0xFF	; 255
   1eafe:	60 91 f0 01 	lds	r22, 0x01F0
   1eb02:	80 91 ee 01 	lds	r24, 0x01EE
   1eb06:	90 91 ef 01 	lds	r25, 0x01EF
   1eb0a:	bf dc       	rcall	.-1666   	; 0x1e48a <CALLBACK_USB_GetDescriptor>
   1eb0c:	00 97       	sbiw	r24, 0x00	; 0
   1eb0e:	09 f4       	brne	.+2      	; 0x1eb12 <USB_Device_ProcessControlRequest+0x164>
   1eb10:	3c c0       	rjmp	.+120    	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eb12:	20 91 e8 00 	lds	r18, 0x00E8
   1eb16:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb18:	20 93 e8 00 	sts	0x00E8, r18
   1eb1c:	bc 01       	movw	r22, r24
   1eb1e:	89 81       	ldd	r24, Y+1	; 0x01
   1eb20:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1eb22:	39 dd       	rcall	.-1422   	; 0x1e596 <Endpoint_Write_Control_Stream_LE>
   1eb24:	80 91 e8 00 	lds	r24, 0x00E8
   1eb28:	8b 77       	andi	r24, 0x7B	; 123
   1eb2a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1eb2e:	2d c0       	rjmp	.+90     	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eb30:	90 38       	cpi	r25, 0x80	; 128
   1eb32:	59 f5       	brne	.+86     	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eb34:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1eb38:	87 7f       	andi	r24, 0xF7	; 247
   1eb3a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb3e:	80 91 ea 01 	lds	r24, 0x01EA
   1eb42:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1eb46:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1eb4a:	8e 77       	andi	r24, 0x7E	; 126
   1eb4c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1eb50:	ce dd       	rcall	.-1124   	; 0x1e6ee <Endpoint_ClearStatusStage>
   1eb52:	1b c0       	rjmp	.+54     	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eb54:	91 11       	cpse	r25, r1
   1eb56:	19 c0       	rjmp	.+50     	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1eb58:	90 91 ee 01 	lds	r25, 0x01EE
   1eb5c:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1eb5e:	a8 f4       	brcc	.+42     	; 0x1eb8a <USB_Device_ProcessControlRequest+0x1dc>
   1eb60:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1eb64:	87 7f       	andi	r24, 0xF7	; 247
   1eb66:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb6a:	90 93 ea 01 	sts	0x01EA, r25
   1eb6e:	bf dd       	rcall	.-1154   	; 0x1e6ee <Endpoint_ClearStatusStage>
   1eb70:	80 91 ea 01 	lds	r24, 0x01EA
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1eb74:	81 11       	cpse	r24, r1
   1eb76:	04 c0       	rjmp	.+8      	; 0x1eb80 <USB_Device_ProcessControlRequest+0x1d2>

	Endpoint_ClearStatusStage();
   1eb78:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1eb7c:	87 ff       	sbrs	r24, 7
   1eb7e:	02 c0       	rjmp	.+4      	; 0x1eb84 <USB_Device_ProcessControlRequest+0x1d6>
   1eb80:	84 e0       	ldi	r24, 0x04	; 4
   1eb82:	01 c0       	rjmp	.+2      	; 0x1eb86 <USB_Device_ProcessControlRequest+0x1d8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1eb84:	81 e0       	ldi	r24, 0x01	; 1
   1eb86:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1eb88:	72 dc       	rcall	.-1820   	; 0x1e46e <EVENT_USB_Device_ConfigurationChanged>
   1eb8a:	80 91 e8 00 	lds	r24, 0x00E8
   1eb8e:	83 ff       	sbrs	r24, 3
   1eb90:	0a c0       	rjmp	.+20     	; 0x1eba6 <USB_Device_ProcessControlRequest+0x1f8>
   1eb92:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1eb96:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eb98:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1eb9c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eba0:	80 62       	ori	r24, 0x20	; 32
   1eba2:	80 93 eb 00 	sts	0x00EB, r24
   1eba6:	0f 90       	pop	r0
   1eba8:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ebaa:	df 91       	pop	r29
   1ebac:	cf 91       	pop	r28
   1ebae:	1f 91       	pop	r17
   1ebb0:	08 95       	ret

0001ebb2 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ebb2:	08 95       	ret

0001ebb4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ebb4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ebb6:	8e b3       	in	r24, 0x1e	; 30
   1ebb8:	88 23       	and	r24, r24
   1ebba:	a9 f0       	breq	.+42     	; 0x1ebe6 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ebbc:	80 91 e9 00 	lds	r24, 0x00E9
   1ebc0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ebc2:	90 91 ec 00 	lds	r25, 0x00EC
   1ebc6:	90 ff       	sbrs	r25, 0
   1ebc8:	02 c0       	rjmp	.+4      	; 0x1ebce <USB_USBTask+0x1a>
   1ebca:	90 e8       	ldi	r25, 0x80	; 128
   1ebcc:	01 c0       	rjmp	.+2      	; 0x1ebd0 <USB_USBTask+0x1c>
   1ebce:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ebd0:	c9 2f       	mov	r28, r25
   1ebd2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ebd4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ebd8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1ebdc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1ebde:	e7 de       	rcall	.-562    	; 0x1e9ae <USB_Device_ProcessControlRequest>
   1ebe0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ebe2:	c0 93 e9 00 	sts	0x00E9, r28
   1ebe6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1ebe8:	08 95       	ret

0001ebea <PRNT_Device_ConfigureEndpoints>:
			break;
	}
}

bool PRNT_Device_ConfigureEndpoints(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
   1ebea:	cf 93       	push	r28
   1ebec:	df 93       	push	r29
   1ebee:	ec 01       	movw	r28, r24
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
   1ebf0:	1e 86       	std	Y+14, r1	; 0x0e
   1ebf2:	1d 86       	std	Y+13, r1	; 0x0d
	PRNTInterfaceInfo->State.PortStatus = PRNT_PORTSTATUS_NOTERROR | PRNT_PORTSTATUS_SELECT;
   1ebf4:	88 e1       	ldi	r24, 0x18	; 24
   1ebf6:	8d 87       	std	Y+13, r24	; 0x0d

	PRNTInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
   1ebf8:	82 e0       	ldi	r24, 0x02	; 2
   1ebfa:	8c 83       	std	Y+4, r24	; 0x04
	PRNTInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
   1ebfc:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&PRNTInterfaceInfo->Config.DataINEndpoint, 1)))
   1ebfe:	61 e0       	ldi	r22, 0x01	; 1
   1ec00:	ce 01       	movw	r24, r28
   1ec02:	01 96       	adiw	r24, 0x01	; 1
   1ec04:	37 dd       	rcall	.-1426   	; 0x1e674 <Endpoint_ConfigureEndpointTable>
   1ec06:	88 23       	and	r24, r24
   1ec08:	31 f0       	breq	.+12     	; 0x1ec16 <PRNT_Device_ConfigureEndpoints+0x2c>
   1ec0a:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&PRNTInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1ec0c:	ce 01       	movw	r24, r28
   1ec0e:	06 96       	adiw	r24, 0x06	; 6
   1ec10:	df 91       	pop	r29
	  return false;

	return true;
}
   1ec12:	cf 91       	pop	r28
   1ec14:	2f cd       	rjmp	.-1442   	; 0x1e674 <Endpoint_ConfigureEndpointTable>
	PRNTInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&PRNTInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&PRNTInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1ec16:	80 e0       	ldi	r24, 0x00	; 0
   1ec18:	df 91       	pop	r29
	  return false;

	return true;
}
   1ec1a:	cf 91       	pop	r28
   1ec1c:	08 95       	ret

0001ec1e <PRNT_Device_Flush>:
   1ec1e:	2e b3       	in	r18, 0x1e	; 30
   1ec20:	24 30       	cpi	r18, 0x04	; 4
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t PRNT_Device_Flush(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1ec22:	f1 f4       	brne	.+60     	; 0x1ec60 <PRNT_Device_Flush+0x42>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ec24:	fc 01       	movw	r30, r24
   1ec26:	81 81       	ldd	r24, Z+1	; 0x01
   1ec28:	8f 70       	andi	r24, 0x0F	; 15
   1ec2a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ec2e:	80 91 f2 00 	lds	r24, 0x00F2
   1ec32:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(PRNTInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
   1ec36:	89 2b       	or	r24, r25
   1ec38:	89 f0       	breq	.+34     	; 0x1ec5c <PRNT_Device_Flush+0x3e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1ec3a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ec3e:	80 91 e8 00 	lds	r24, 0x00E8
   1ec42:	8e 77       	andi	r24, 0x7E	; 126
   1ec44:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
   1ec48:	95 fd       	sbrc	r25, 5
   1ec4a:	08 c0       	rjmp	.+16     	; 0x1ec5c <PRNT_Device_Flush+0x3e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
   1ec4c:	6f dd       	rcall	.-1314   	; 0x1e72c <Endpoint_WaitUntilReady>
   1ec4e:	81 11       	cpse	r24, r1
   1ec50:	08 c0       	rjmp	.+16     	; 0x1ec62 <PRNT_Device_Flush+0x44>
   1ec52:	80 91 e8 00 	lds	r24, 0x00E8
   1ec56:	8e 77       	andi	r24, 0x7E	; 126
   1ec58:	80 93 e8 00 	sts	0x00E8, r24
   1ec5c:	80 e0       	ldi	r24, 0x00	; 0
   1ec5e:	08 95       	ret
   1ec60:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t PRNT_Device_Flush(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
   1ec62:	08 95       	ret

0001ec64 <PRNT_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
   1ec64:	cf 93       	push	r28

	return true;
}

void PRNT_Device_USBTask(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
   1ec66:	df 93       	push	r29
   1ec68:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1ec6a:	8e b3       	in	r24, 0x1e	; 30
   1ec6c:	84 30       	cpi	r24, 0x04	; 4
   1ec6e:	09 f0       	breq	.+2      	; 0x1ec72 <PRNT_Device_USBTask+0xe>
   1ec70:	43 c0       	rjmp	.+134    	; 0x1ecf8 <PRNT_Device_USBTask+0x94>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ec72:	89 81       	ldd	r24, Y+1	; 0x01
   1ec74:	8f 70       	andi	r24, 0x0F	; 15
   1ec76:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec7a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(PRNTInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
   1ec7e:	80 ff       	sbrs	r24, 0
   1ec80:	02 c0       	rjmp	.+4      	; 0x1ec86 <PRNT_Device_USBTask+0x22>
	  PRNT_Device_Flush(PRNTInterfaceInfo);
   1ec82:	ce 01       	movw	r24, r28
   1ec84:	cc df       	rcall	.-104    	; 0x1ec1e <PRNT_Device_Flush>
   1ec86:	8e 85       	ldd	r24, Y+14	; 0x0e
	#endif

	if (PRNTInterfaceInfo->State.IsPrinterReset)
   1ec88:	88 23       	and	r24, r24
   1ec8a:	b1 f1       	breq	.+108    	; 0x1ecf8 <PRNT_Device_USBTask+0x94>
   1ec8c:	2e 81       	ldd	r18, Y+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ec8e:	2f 70       	andi	r18, 0x0F	; 15
   1ec90:	81 e0       	ldi	r24, 0x01	; 1
   1ec92:	90 e0       	ldi	r25, 0x00	; 0
   1ec94:	ac 01       	movw	r20, r24
   1ec96:	02 c0       	rjmp	.+4      	; 0x1ec9c <PRNT_Device_USBTask+0x38>
   1ec98:	44 0f       	add	r20, r20
   1ec9a:	55 1f       	adc	r21, r21
   1ec9c:	2a 95       	dec	r18
   1ec9e:	e2 f7       	brpl	.-8      	; 0x1ec98 <PRNT_Device_USBTask+0x34>
   1eca0:	40 93 ea 00 	sts	0x00EA, r20
   1eca4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1eca8:	29 81       	ldd	r18, Y+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ecaa:	2f 70       	andi	r18, 0x0F	; 15
   1ecac:	02 2e       	mov	r0, r18
   1ecae:	01 c0       	rjmp	.+2      	; 0x1ecb2 <PRNT_Device_USBTask+0x4e>
   1ecb0:	88 0f       	add	r24, r24
   1ecb2:	0a 94       	dec	r0
   1ecb4:	ea f7       	brpl	.-6      	; 0x1ecb0 <PRNT_Device_USBTask+0x4c>
   1ecb6:	80 93 ea 00 	sts	0x00EA, r24
   1ecba:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1ecbe:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecc0:	8f 70       	andi	r24, 0x0F	; 15
   1ecc2:	80 93 e9 00 	sts	0x00E9, r24
   1ecc6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ecca:	80 61       	ori	r24, 0x10	; 16
   1eccc:	80 93 eb 00 	sts	0x00EB, r24
   1ecd0:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ecd4:	88 60       	ori	r24, 0x08	; 8
   1ecd6:	80 93 eb 00 	sts	0x00EB, r24
   1ecda:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecdc:	8f 70       	andi	r24, 0x0F	; 15
   1ecde:	80 93 e9 00 	sts	0x00E9, r24
   1ece2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ece6:	80 61       	ori	r24, 0x10	; 16
   1ece8:	80 93 eb 00 	sts	0x00EB, r24
   1ecec:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ecf0:	88 60       	ori	r24, 0x08	; 8
   1ecf2:	80 93 eb 00 	sts	0x00EB, r24
   1ecf6:	1e 86       	std	Y+14, r1	; 0x0e
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(PRNTInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		PRNTInterfaceInfo->State.IsPrinterReset = false;
   1ecf8:	df 91       	pop	r29
	}
}
   1ecfa:	cf 91       	pop	r28
   1ecfc:	08 95       	ret

0001ecfe <PRNT_Device_BytesReceived>:
   1ecfe:	2e b3       	in	r18, 0x1e	; 30
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t PRNT_Device_BytesReceived(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1ed00:	24 30       	cpi	r18, 0x04	; 4
   1ed02:	19 f0       	breq	.+6      	; 0x1ed0a <PRNT_Device_BytesReceived+0xc>
	  return 0;
   1ed04:	80 e0       	ldi	r24, 0x00	; 0
   1ed06:	90 e0       	ldi	r25, 0x00	; 0
   1ed08:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed0a:	fc 01       	movw	r30, r24
   1ed0c:	86 81       	ldd	r24, Z+6	; 0x06
   1ed0e:	8f 70       	andi	r24, 0x0F	; 15
   1ed10:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ed14:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(PRNTInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
   1ed18:	82 ff       	sbrs	r24, 2
   1ed1a:	f4 cf       	rjmp	.-24     	; 0x1ed04 <PRNT_Device_BytesReceived+0x6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ed1c:	80 91 f2 00 	lds	r24, 0x00F2
   1ed20:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (!(Endpoint_BytesInEndpoint()))
   1ed24:	00 97       	sbiw	r24, 0x00	; 0
   1ed26:	31 f4       	brne	.+12     	; 0x1ed34 <PRNT_Device_BytesReceived+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed28:	20 91 e8 00 	lds	r18, 0x00E8
   1ed2c:	2b 77       	andi	r18, 0x7B	; 123
   1ed2e:	20 93 e8 00 	sts	0x00E8, r18
		{
			Endpoint_ClearOUT();
			return 0;
   1ed32:	08 95       	ret
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ed34:	80 91 f2 00 	lds	r24, 0x00F2
   1ed38:	90 91 f3 00 	lds	r25, 0x00F3
	}
	else
	{
		return 0;
	}
}
   1ed3c:	08 95       	ret

0001ed3e <PRNT_Device_ReceiveByte>:

int16_t PRNT_Device_ReceiveByte(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1ed3e:	2e b3       	in	r18, 0x1e	; 30
   1ed40:	24 30       	cpi	r18, 0x04	; 4
   1ed42:	19 f0       	breq	.+6      	; 0x1ed4a <PRNT_Device_ReceiveByte+0xc>
	  return -1;
   1ed44:	8f ef       	ldi	r24, 0xFF	; 255
   1ed46:	9f ef       	ldi	r25, 0xFF	; 255
   1ed48:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed4a:	fc 01       	movw	r30, r24
   1ed4c:	86 81       	ldd	r24, Z+6	; 0x06
   1ed4e:	8f 70       	andi	r24, 0x0F	; 15
   1ed50:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ed54:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(PRNTInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
   1ed58:	82 ff       	sbrs	r24, 2
   1ed5a:	f4 cf       	rjmp	.-24     	; 0x1ed44 <PRNT_Device_ReceiveByte+0x6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ed5c:	80 91 f2 00 	lds	r24, 0x00F2
   1ed60:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
   1ed64:	89 2b       	or	r24, r25
   1ed66:	21 f0       	breq	.+8      	; 0x1ed70 <PRNT_Device_ReceiveByte+0x32>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ed68:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
   1ed6c:	30 e0       	ldi	r19, 0x00	; 0
   1ed6e:	02 c0       	rjmp	.+4      	; 0x1ed74 <PRNT_Device_ReceiveByte+0x36>
int16_t PRNT_Device_ReceiveByte(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return -1;

	int16_t ReceivedByte = -1;
   1ed70:	2f ef       	ldi	r18, 0xFF	; 255
   1ed72:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ed74:	80 91 f2 00 	lds	r24, 0x00F2
   1ed78:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
   1ed7c:	89 2b       	or	r24, r25
   1ed7e:	29 f4       	brne	.+10     	; 0x1ed8a <PRNT_Device_ReceiveByte+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed80:	80 91 e8 00 	lds	r24, 0x00E8
   1ed84:	8b 77       	andi	r24, 0x7B	; 123
   1ed86:	80 93 e8 00 	sts	0x00E8, r24
   1ed8a:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
   1ed8c:	08 95       	ret

0001ed8e <PRNT_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void PRNT_Device_Event_Stub(void)
{
   1ed8e:	08 95       	ret

0001ed90 <PRNT_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_PRINTER_DRIVER
#define  __INCLUDE_FROM_PRINTER_DEVICE_C
#include "PrinterClassDevice.h"

void PRNT_Device_ProcessControlRequest(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
   1ed90:	cf 93       	push	r28
   1ed92:	df 93       	push	r29
   1ed94:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed96:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
   1ed9a:	83 ff       	sbrs	r24, 3
   1ed9c:	5f c0       	rjmp	.+190    	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
	  return;

	if (USB_ControlRequest.wIndex != PRNTInterfaceInfo->Config.InterfaceNumber)
   1ed9e:	88 81       	ld	r24, Y
   1eda0:	90 e0       	ldi	r25, 0x00	; 0
   1eda2:	20 91 f0 01 	lds	r18, 0x01F0
   1eda6:	30 91 f1 01 	lds	r19, 0x01F1
   1edaa:	28 17       	cp	r18, r24
   1edac:	39 07       	cpc	r19, r25
   1edae:	09 f0       	breq	.+2      	; 0x1edb2 <PRNT_Device_ProcessControlRequest+0x22>
   1edb0:	55 c0       	rjmp	.+170    	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
	  return;

	switch (USB_ControlRequest.bRequest)
   1edb2:	80 91 ed 01 	lds	r24, 0x01ED
   1edb6:	81 30       	cpi	r24, 0x01	; 1
   1edb8:	51 f1       	breq	.+84     	; 0x1ee0e <PRNT_Device_ProcessControlRequest+0x7e>
   1edba:	20 f0       	brcs	.+8      	; 0x1edc4 <PRNT_Device_ProcessControlRequest+0x34>
   1edbc:	82 30       	cpi	r24, 0x02	; 2
   1edbe:	09 f4       	brne	.+2      	; 0x1edc2 <PRNT_Device_ProcessControlRequest+0x32>
   1edc0:	3d c0       	rjmp	.+122    	; 0x1ee3c <PRNT_Device_ProcessControlRequest+0xac>
   1edc2:	4c c0       	rjmp	.+152    	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
	{
		case PRNT_REQ_GetDeviceID:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1edc4:	80 91 ec 01 	lds	r24, 0x01EC
   1edc8:	81 3a       	cpi	r24, 0xA1	; 161
   1edca:	09 f0       	breq	.+2      	; 0x1edce <PRNT_Device_ProcessControlRequest+0x3e>
   1edcc:	47 c0       	rjmp	.+142    	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edce:	80 91 e8 00 	lds	r24, 0x00E8
   1edd2:	87 7f       	andi	r24, 0xF7	; 247
   1edd4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1edd8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
   1eddc:	80 fd       	sbrc	r24, 0
   1edde:	04 c0       	rjmp	.+8      	; 0x1ede8 <PRNT_Device_ProcessControlRequest+0x58>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ede0:	8e b3       	in	r24, 0x1e	; 30
   1ede2:	81 11       	cpse	r24, r1
   1ede4:	f9 cf       	rjmp	.-14     	; 0x1edd8 <PRNT_Device_ProcessControlRequest+0x48>
   1ede6:	3a c0       	rjmp	.+116    	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
					  return;
				}

				uint16_t IEEEStringLen = strlen(PRNTInterfaceInfo->Config.IEEE1284String);
   1ede8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1edea:	fc 85       	ldd	r31, Y+12	; 0x0c
   1edec:	df 01       	movw	r26, r30
   1edee:	0d 90       	ld	r0, X+
   1edf0:	00 20       	and	r0, r0
   1edf2:	e9 f7       	brne	.-6      	; 0x1edee <PRNT_Device_ProcessControlRequest+0x5e>
   1edf4:	bd 01       	movw	r22, r26
   1edf6:	61 50       	subi	r22, 0x01	; 1
   1edf8:	71 09       	sbc	r23, r1
   1edfa:	6e 1b       	sub	r22, r30
   1edfc:	7f 0b       	sbc	r23, r31
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_BE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_BE(const uint16_t Data)
			{
				UEDATX = (Data >> 8);
   1edfe:	70 93 f1 00 	sts	0x00F1, r23
				UEDATX = (Data & 0xFF);
   1ee02:	60 93 f1 00 	sts	0x00F1, r22
				Endpoint_Write_16_BE(IEEEStringLen);
				Endpoint_Write_Control_Stream_LE(PRNTInterfaceInfo->Config.IEEE1284String, IEEEStringLen);
   1ee06:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ee08:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ee0a:	c5 db       	rcall	.-2166   	; 0x1e596 <Endpoint_Write_Control_Stream_LE>
   1ee0c:	14 c0       	rjmp	.+40     	; 0x1ee36 <PRNT_Device_ProcessControlRequest+0xa6>
   1ee0e:	80 91 ec 01 	lds	r24, 0x01EC
				Endpoint_ClearStatusStage();
			}

			break;
		case PRNT_REQ_GetPortStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1ee12:	81 3a       	cpi	r24, 0xA1	; 161
   1ee14:	19 f5       	brne	.+70     	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
   1ee16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee1a:	87 7f       	andi	r24, 0xF7	; 247
   1ee1c:	80 93 e8 00 	sts	0x00E8, r24
   1ee20:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ee24:	80 fd       	sbrc	r24, 0
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
   1ee26:	04 c0       	rjmp	.+8      	; 0x1ee30 <PRNT_Device_ProcessControlRequest+0xa0>
   1ee28:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee2a:	81 11       	cpse	r24, r1
   1ee2c:	f9 cf       	rjmp	.-14     	; 0x1ee20 <PRNT_Device_ProcessControlRequest+0x90>
   1ee2e:	16 c0       	rjmp	.+44     	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
   1ee30:	8d 85       	ldd	r24, Y+13	; 0x0d
					  return;
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
   1ee32:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ee36:	df 91       	pop	r29
				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
			}

			break;
	}
}
   1ee38:	cf 91       	pop	r28
   1ee3a:	59 cc       	rjmp	.-1870   	; 0x1e6ee <Endpoint_ClearStatusStage>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
				Endpoint_ClearStatusStage();
   1ee3c:	80 91 ec 01 	lds	r24, 0x01EC
			}

			break;
		case PRNT_REQ_SoftReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1ee40:	81 32       	cpi	r24, 0x21	; 33
   1ee42:	61 f4       	brne	.+24     	; 0x1ee5c <PRNT_Device_ProcessControlRequest+0xcc>
   1ee44:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee48:	87 7f       	andi	r24, 0xF7	; 247
   1ee4a:	80 93 e8 00 	sts	0x00E8, r24
   1ee4e:	4f dc       	rcall	.-1890   	; 0x1e6ee <Endpoint_ClearStatusStage>
   1ee50:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1ee52:	8e 87       	std	Y+14, r24	; 0x0e
   1ee54:	ce 01       	movw	r24, r28

				PRNTInterfaceInfo->State.IsPrinterReset = true;
   1ee56:	df 91       	pop	r29
   1ee58:	cf 91       	pop	r28

				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
   1ee5a:	99 cf       	rjmp	.-206    	; 0x1ed8e <PRNT_Device_Event_Stub>
			}

			break;
	}
}
   1ee5c:	df 91       	pop	r29
   1ee5e:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				PRNTInterfaceInfo->State.IsPrinterReset = true;

				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
   1ee60:	08 95       	ret

0001ee62 <_exit>:
   1ee62:	f8 94       	cli

0001ee64 <__stop_program>:
			}

			break;
	}
}
   1ee64:	ff cf       	rjmp	.-2      	; 0x1ee64 <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 73 f2 	jmp	0x1e4e6	; 0x1e4e6 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 87 f2 	jmp	0x1e50e	; 0x1e50e <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 9b f2 	jmp	0x1e536	; 0x1e536 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 aa f2 	jmp	0x1e554	; 0x1e554 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 b0 f2 	jmp	0x1e560	; 0x1e560 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 b6 f2 	jmp	0x1e56c	; 0x1e56c <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 bd f2 	jmp	0x1e57a	; 0x1e57a <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	20 df       	rcall	.-448    	; 0x1fe3e <__data_load_end+0xf02>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xaba>

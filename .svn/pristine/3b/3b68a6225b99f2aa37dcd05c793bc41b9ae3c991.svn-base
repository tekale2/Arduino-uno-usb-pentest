
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001b16  00001baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00001bd0  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00005678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f2b8  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000374e  00000000  00000000  000151d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005614  00000000  00000000  0001891e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000184c  00000000  00000000  0001df34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004fe1  00000000  00000000  0001f780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ae64  00000000  00000000  00024761  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  0002f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c1       	rjmp	.+594    	; 0x278 <__bad_interrupt>
      26:	00 00       	nop
      28:	64 c6       	rjmp	.+3272   	; 0xcf2 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0d c1       	rjmp	.+538    	; 0x278 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	09 c1       	rjmp	.+530    	; 0x278 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 c1       	rjmp	.+526    	; 0x278 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f3 c0       	rjmp	.+486    	; 0x278 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	f1 c0       	rjmp	.+482    	; 0x278 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4594>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4587>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4582>:
     11d:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     12d:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

00000137 <__c.4580>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     137:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
				ReportSize     -= 4;
     147:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     157:	6f 6e 2e 0d 0a 00                                   on....

0000015d <__c.4578>:
     15d:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     16d:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     17d:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18d:	00                                                  .

0000018e <__c.4576>:
     18e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19e:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ae:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001bb <__c.4569>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bb:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1cb:	68 65 64 2e 0d 0a 00                                hed....

000001d2 <__c.4564>:
     1d2:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e2:	0d 0a 00                                            ...

000001e5 <__c.4545>:
     1e5:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     1f5:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     205:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     215:	0d 0a 00                                            ...

00000218 <__c.4533>:
     218:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     228:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     238:	33 37 6d 00                                         37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	e6 e1       	ldi	r30, 0x16	; 22
     250:	fb e1       	ldi	r31, 0x1B	; 27
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a6 32       	cpi	r26, 0x26	; 38
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a6 e2       	ldi	r26, 0x26	; 38
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a9 34       	cpi	r26, 0x49	; 73
     26e:	b1 07       	cpc	r27, r17
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
				break;
     272:	df d0       	rcall	.+446    	; 0x432 <main>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <LEDs_SetAllLEDs>:
     27a:	9b b1       	in	r25, 0x0b	; 11
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	98 2b       	or	r25, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	9b b9       	out	0x0b, r25	; 11
     282:	08 95       	ret

00000284 <SetupHardware>:
				break;
     284:	84 b7       	in	r24, 0x34	; 52

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	87 7f       	andi	r24, 0xF7	; 247
     288:	84 bf       	out	0x34, r24	; 52
     28a:	88 e1       	ldi	r24, 0x18	; 24
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
				break;
     290:	80 93 60 00 	sts	0x0060, r24

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	10 92 60 00 	sts	0x0060, r1
     298:	0f be       	out	0x3f, r0	; 63
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	80 e8       	ldi	r24, 0x80	; 128
     29e:	0f b6       	in	r0, 0x3f	; 63
				break;
     2a0:	f8 94       	cli

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	80 93 61 00 	sts	0x0061, r24
     2a6:	90 93 61 00 	sts	0x0061, r25
     2aa:	0f be       	out	0x3f, r0	; 63
				break;
     2ac:	83 e3       	ldi	r24, 0x33	; 51

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 cd 00 	sts	0x00CD, r25
     2b4:	80 93 cc 00 	sts	0x00CC, r24
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 93 ca 00 	sts	0x00CA, r24
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	10 92 c8 00 	sts	0x00C8, r1
     2c2:	88 e1       	ldi	r24, 0x18	; 24
     2c4:	80 93 c9 00 	sts	0x00C9, r24
     2c8:	53 9a       	sbi	0x0a, 3	; 10
     2ca:	5a 9a       	sbi	0x0b, 2	; 11
				break;
     2cc:	8a b1       	in	r24, 0x0a	; 10
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	80 6f       	ori	r24, 0xF0	; 240
     2d0:	8a b9       	out	0x0a, r24	; 10
     2d2:	8b b1       	in	r24, 0x0b	; 11
				break;
     2d4:	8f 70       	andi	r24, 0x0F	; 15

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	8b b9       	out	0x0b, r24	; 11
     2d8:	6a 98       	cbi	0x0d, 2	; 13
     2da:	72 9a       	sbi	0x0e, 2	; 14

				if (ParserData->UsingReportIDs)
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	8f 71       	andi	r24, 0x1F	; 31
     2e0:	84 b9       	out	0x04, r24	; 4
     2e2:	8d b1       	in	r24, 0x0d	; 13
     2e4:	8f 7c       	andi	r24, 0xCF	; 207
     2e6:	8d b9       	out	0x0d, r24	; 13
     2e8:	85 b1       	in	r24, 0x05	; 5
     2ea:	80 6e       	ori	r24, 0xE0	; 224
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	85 b9       	out	0x05, r24	; 5
     2ee:	8e b1       	in	r24, 0x0e	; 14
     2f0:	80 63       	ori	r24, 0x30	; 48
     2f2:	8e b9       	out	0x0e, r24	; 14
     2f4:	e3 d4       	rcall	.+2502   	; 0xcbc <USB_Init>
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0c 94 85 0a 	jmp	0x150a	; 0x150a <Serial_CreateStream>

000002fe <CheckJoystickMovement>:
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	00 d0       	rcall	.+0      	; 0x306 <CheckJoystickMovement+0x8>
     306:	00 d0       	rcall	.+0      	; 0x308 <CheckJoystickMovement+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	83 b1       	in	r24, 0x03	; 3
     30e:	1c b1       	in	r17, 0x0c	; 12
     310:	10 95       	com	r17
     312:	10 73       	andi	r17, 0x30	; 48
     314:	16 95       	lsr	r17
     316:	80 95       	com	r24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	80 7e       	andi	r24, 0xE0	; 224
     31a:	18 2b       	or	r17, r24
     31c:	90 91 26 01 	lds	r25, 0x0126
     320:	91 27       	eor	r25, r17
     322:	62 99       	sbic	0x0c, 2	; 12
     324:	02 c0       	rjmp	.+4      	; 0x32a <CheckJoystickMovement+0x2c>
     326:	29 e0       	ldi	r18, 0x09	; 9
     328:	01 c0       	rjmp	.+2      	; 0x32c <CheckJoystickMovement+0x2e>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	96 ff       	sbrs	r25, 6
     32e:	04 c0       	rjmp	.+8      	; 0x338 <CheckJoystickMovement+0x3a>
     330:	9c e3       	ldi	r25, 0x3C	; 60
     332:	16 ff       	sbrs	r17, 6
     334:	1a c0       	rjmp	.+52     	; 0x36a <CheckJoystickMovement+0x6c>
     336:	17 c0       	rjmp	.+46     	; 0x366 <CheckJoystickMovement+0x68>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	97 ff       	sbrs	r25, 7
     33a:	04 c0       	rjmp	.+8      	; 0x344 <CheckJoystickMovement+0x46>
     33c:	9d e3       	ldi	r25, 0x3D	; 61
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	17 ff       	sbrs	r17, 7
     340:	14 c0       	rjmp	.+40     	; 0x36a <CheckJoystickMovement+0x6c>
     342:	11 c0       	rjmp	.+34     	; 0x366 <CheckJoystickMovement+0x68>
     344:	93 ff       	sbrs	r25, 3
     346:	04 c0       	rjmp	.+8      	; 0x350 <CheckJoystickMovement+0x52>
     348:	9e e3       	ldi	r25, 0x3E	; 62
     34a:	13 ff       	sbrs	r17, 3
     34c:	0e c0       	rjmp	.+28     	; 0x36a <CheckJoystickMovement+0x6c>
     34e:	0b c0       	rjmp	.+22     	; 0x366 <CheckJoystickMovement+0x68>
     350:	94 ff       	sbrs	r25, 4
     352:	04 c0       	rjmp	.+8      	; 0x35c <CheckJoystickMovement+0x5e>
     354:	9f e3       	ldi	r25, 0x3F	; 63
     356:	14 ff       	sbrs	r17, 4
     358:	08 c0       	rjmp	.+16     	; 0x36a <CheckJoystickMovement+0x6c>
     35a:	05 c0       	rjmp	.+10     	; 0x366 <CheckJoystickMovement+0x68>
     35c:	95 ff       	sbrs	r25, 5
     35e:	1a c0       	rjmp	.+52     	; 0x394 <CheckJoystickMovement+0x96>
     360:	9b e3       	ldi	r25, 0x3B	; 59
     362:	15 ff       	sbrs	r17, 5
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	02 c0       	rjmp	.+4      	; 0x36a <CheckJoystickMovement+0x6c>
     366:	80 e9       	ldi	r24, 0x90	; 144
     368:	01 c0       	rjmp	.+2      	; 0x36c <CheckJoystickMovement+0x6e>
     36a:	80 e8       	ldi	r24, 0x80	; 128
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	38 2f       	mov	r19, r24
     36e:	32 95       	swap	r19
     370:	3f 70       	andi	r19, 0x0F	; 15
     372:	39 83       	std	Y+1, r19	; 0x01
     374:	82 2b       	or	r24, r18
     376:	8a 83       	std	Y+2, r24	; 0x02

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	9b 83       	std	Y+3, r25	; 0x03
     37a:	80 e4       	ldi	r24, 0x40	; 64
     37c:	8c 83       	std	Y+4, r24	; 0x04
     37e:	be 01       	movw	r22, r28
     380:	6f 5f       	subi	r22, 0xFF	; 255
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	91 e0       	ldi	r25, 0x01	; 1
				break;
     388:	0e 94 00 0a 	call	0x1400	; 0x1400 <MIDI_Host_SendEventPacket>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 c9 09 	call	0x1392	; 0x1392 <MIDI_Host_Flush>
     394:	10 93 26 01 	sts	0x0126, r17
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <JoystickHost_Task>:
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
				break;
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <JoystickHost_Task+0xa>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <JoystickHost_Task+0xc>
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	80 91 34 01 	lds	r24, 0x0134
     3bc:	8b 30       	cpi	r24, 0x0B	; 11
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	81 f5       	brne	.+96     	; 0x420 <JoystickHost_Task+0x78>
     3c0:	05 ee       	ldi	r16, 0xE5	; 229
     3c2:	11 e0       	ldi	r17, 0x01	; 1
     3c4:	be 01       	movw	r22, r28
     3c6:	6f 5f       	subi	r22, 0xFF	; 255
     3c8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	91 e0       	ldi	r25, 0x01	; 1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0e 94 31 0a 	call	0x1462	; 0x1462 <MIDI_Host_ReceiveEventPacket>
     3d2:	88 23       	and	r24, r24

					while (CurrCollectionPath->Parent != NULL)
     3d4:	21 f1       	breq	.+72     	; 0x41e <JoystickHost_Task+0x76>
     3d6:	29 81       	ldd	r18, Y+1	; 0x01
     3d8:	88 ef       	ldi	r24, 0xF8	; 248
     3da:	82 0f       	add	r24, r18
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	90 f7       	brcc	.-28     	; 0x3c4 <JoystickHost_Task+0x1c>
     3e0:	5c 81       	ldd	r21, Y+4	; 0x04
     3e2:	4b 81       	ldd	r20, Y+3	; 0x03
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	8f 70       	andi	r24, 0x0F	; 15
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	29 30       	cpi	r18, 0x09	; 9
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <JoystickHost_Task+0x4e>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	2f e1       	ldi	r18, 0x1F	; 31
     3f2:	31 e0       	ldi	r19, 0x01	; 1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <JoystickHost_Task+0x52>
     3f6:	22 e2       	ldi	r18, 0x22	; 34
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	1f 92       	push	r1
     3fc:	5f 93       	push	r21
     3fe:	1f 92       	push	r1
     400:	4f 93       	push	r20
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	3f 93       	push	r19
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	2f 93       	push	r18
     40a:	1f 93       	push	r17
     40c:	0f 93       	push	r16
     40e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <printf_P>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	d3 cf       	rjmp	.-90     	; 0x3c4 <JoystickHost_Task+0x1c>
     41e:	6f df       	rcall	.-290    	; 0x2fe <CheckJoystickMovement>

				if (UsageListSize)
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret

00000432 <main>:
     432:	28 df       	rcall	.-432    	; 0x284 <SetupHardware>
     434:	88 e1       	ldi	r24, 0x18	; 24
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 c6 0a 	call	0x158c	; 0x158c <puts_P>
     43c:	80 e1       	ldi	r24, 0x10	; 16
     43e:	1d df       	rcall	.-454    	; 0x27a <LEDs_SetAllLEDs>

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	78 94       	sei
     442:	b2 df       	rcall	.-156    	; 0x3a8 <JoystickHost_Task>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	d2 d7       	rcall	.+4004   	; 0x13ee <MIDI_Host_USBTask>
     44a:	d8 d6       	rcall	.+3504   	; 0x11fc <USB_USBTask>
					  UsageList[i - 1] = UsageList[i];
     44c:	fa cf       	rjmp	.-12     	; 0x442 <main+0x10>

0000044e <EVENT_USB_Host_DeviceAttached>:
     44e:	82 ed       	ldi	r24, 0xD2	; 210
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 c6 0a 	call	0x158c	; 0x158c <puts_P>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     456:	80 ea       	ldi	r24, 0xA0	; 160
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	10 cf       	rjmp	.-480    	; 0x27a <LEDs_SetAllLEDs>

0000045a <EVENT_USB_Host_DeviceUnattached>:
     45a:	8b eb       	ldi	r24, 0xBB	; 187
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 c6 0a 	call	0x158c	; 0x158c <puts_P>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	80 e1       	ldi	r24, 0x10	; 16
     464:	0a cf       	rjmp	.-492    	; 0x27a <LEDs_SetAllLEDs>

00000466 <EVENT_USB_Host_DeviceEnumerationComplete>:
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	c2 50       	subi	r28, 0x02	; 2
     470:	d2 40       	sbci	r29, 0x02	; 2
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	80 ea       	ldi	r24, 0xA0	; 160
     47e:	fd de       	rcall	.-518    	; 0x27a <LEDs_SetAllLEDs>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	32 e0       	ldi	r19, 0x02	; 2
     484:	ae 01       	movw	r20, r28
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	be 01       	movw	r22, r28
     48c:	6f 5f       	subi	r22, 0xFF	; 255
     48e:	7d 4f       	sbci	r23, 0xFD	; 253
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	de d4       	rcall	.+2492   	; 0xe50 <USB_Host_GetDeviceConfigDescriptor>
     494:	88 23       	and	r24, r24
     496:	19 f0       	breq	.+6      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     498:	8e e8       	ldi	r24, 0x8E	; 142
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	17 c0       	rjmp	.+46     	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     49e:	cf 5f       	subi	r28, 0xFF	; 255
     4a0:	dd 4f       	sbci	r29, 0xFD	; 253
     4a2:	68 81       	ld	r22, Y
     4a4:	79 81       	ldd	r23, Y+1	; 0x01
     4a6:	c1 50       	subi	r28, 0x01	; 1
     4a8:	d2 40       	sbci	r29, 0x02	; 2
     4aa:	ae 01       	movw	r20, r28
				break;
     4ac:	4f 5f       	subi	r20, 0xFF	; 255
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	d5 d6       	rcall	.+3498   	; 0x1260 <MIDI_Host_ConfigurePipes>
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     4ba:	8d e5       	ldi	r24, 0x5D	; 93
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	75 d6       	rcall	.+3306   	; 0x11ae <USB_Host_SetDeviceConfiguration>
     4c4:	88 23       	and	r24, r24
     4c6:	31 f0       	breq	.+12     	; 0x4d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
     4c8:	87 e3       	ldi	r24, 0x37	; 55
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 c6 0a 	call	0x158c	; 0x158c <puts_P>
     4d0:	80 e9       	ldi	r24, 0x90	; 144
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
     4d4:	8d e1       	ldi	r24, 0x1D	; 29
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 c6 0a 	call	0x158c	; 0x158c <puts_P>
     4dc:	80 e6       	ldi	r24, 0x60	; 96
     4de:	cd de       	rcall	.-614    	; 0x27a <LEDs_SetAllLEDs>
     4e0:	ce 5f       	subi	r28, 0xFE	; 254
     4e2:	dd 4f       	sbci	r29, 0xFD	; 253
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	df 91       	pop	r29
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <EVENT_USB_Host_HostError>:
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	89 83       	std	Y+1, r24	; 0x01
     500:	75 d3       	rcall	.+1770   	; 0xbec <USB_Disable>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	1f 92       	push	r1
     504:	89 81       	ldd	r24, Y+1	; 0x01
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	8f 93       	push	r24
     508:	8e ee       	ldi	r24, 0xEE	; 238
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	0e 94 a3 0a 	call	0x1546	; 0x1546 <printf_P>
     514:	80 e9       	ldi	r24, 0x90	; 144
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	b1 de       	rcall	.-670    	; 0x27a <LEDs_SetAllLEDs>
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0

					if (UsageListSize)
     51e:	0f 90       	pop	r0
     520:	ff cf       	rjmp	.-2      	; 0x520 <EVENT_USB_Host_HostError+0x2c>

00000522 <EVENT_USB_Host_DeviceEnumerationFailed>:
     522:	90 91 34 01 	lds	r25, 0x0134
     526:	1f 92       	push	r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	9f 93       	push	r25
     52a:	1f 92       	push	r1
     52c:	6f 93       	push	r22
     52e:	1f 92       	push	r1
     530:	8f 93       	push	r24
     532:	88 e9       	ldi	r24, 0x98	; 152
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <printf_P>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	8d b7       	in	r24, 0x3d	; 61
     540:	9e b7       	in	r25, 0x3e	; 62
     542:	08 96       	adiw	r24, 0x08	; 8
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	9e bf       	out	0x3e, r25	; 62
						  UsageList[i - 1] = UsageList[i];
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	80 e9       	ldi	r24, 0x90	; 144
     550:	94 ce       	rjmp	.-728    	; 0x27a <LEDs_SetAllLEDs>

00000552 <USB_Host_ResetDevice>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	80 91 9e 00 	lds	r24, 0x009E
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	81 70       	andi	r24, 0x01	; 1
     558:	90 91 a0 00 	lds	r25, 0x00A0
     55c:	9d 7f       	andi	r25, 0xFD	; 253
     55e:	90 93 a0 00 	sts	0x00A0, r25
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     562:	90 91 9e 00 	lds	r25, 0x009E
     566:	92 60       	ori	r25, 0x02	; 2
     568:	90 93 9e 00 	sts	0x009E, r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56c:	90 91 9e 00 	lds	r25, 0x009E
     570:	91 fd       	sbrc	r25, 1
     572:	fc cf       	rjmp	.-8      	; 0x56c <USB_Host_ResetDevice+0x1a>
     574:	90 91 9e 00 	lds	r25, 0x009E
     578:	91 60       	ori	r25, 0x01	; 1
     57a:	90 93 9e 00 	sts	0x009E, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	10 92 2a 01 	sts	0x012A, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     582:	90 91 a0 00 	lds	r25, 0x00A0
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     586:	90 72       	andi	r25, 0x20	; 32
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	20 91 a0 00 	lds	r18, 0x00A0
     58c:	2f 7d       	andi	r18, 0xDF	; 223
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	20 93 a0 00 	sts	0x00A0, r18

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	20 91 9f 00 	lds	r18, 0x009F
     596:	2f 7d       	andi	r18, 0xDF	; 223
     598:	20 93 9f 00 	sts	0x009F, r18
     59c:	2a e0       	ldi	r18, 0x0A	; 10
     59e:	30 91 9f 00 	lds	r19, 0x009F
     5a2:	35 ff       	sbrs	r19, 5
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <USB_Host_ResetDevice+0x6a>
     5a6:	20 91 9f 00 	lds	r18, 0x009F
     5aa:	2f 7d       	andi	r18, 0xDF	; 223

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	20 93 9f 00 	sts	0x009F, r18
     5b0:	20 91 9f 00 	lds	r18, 0x009F
     5b4:	2d 7f       	andi	r18, 0xFD	; 253
     5b6:	20 93 9f 00 	sts	0x009F, r18
     5ba:	08 c0       	rjmp	.+16     	; 0x5cc <USB_Host_ResetDevice+0x7a>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	ef ec       	ldi	r30, 0xCF	; 207
     5be:	f7 e0       	ldi	r31, 0x07	; 7
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <USB_Host_ResetDevice+0x6e>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <USB_Host_ResetDevice+0x74>
     5c6:	00 00       	nop
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	49 f7       	brne	.-46     	; 0x59e <USB_Host_ResetDevice+0x4c>
     5cc:	99 23       	and	r25, r25
     5ce:	29 f0       	breq	.+10     	; 0x5da <USB_Host_ResetDevice+0x88>
     5d0:	90 91 a0 00 	lds	r25, 0x00A0
     5d4:	90 62       	ori	r25, 0x20	; 32
     5d6:	90 93 a0 00 	sts	0x00A0, r25
     5da:	81 11       	cpse	r24, r1
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <USB_Host_ResetDevice+0x96>
     5de:	80 91 9e 00 	lds	r24, 0x009E
     5e2:	8e 7f       	andi	r24, 0xFE	; 254
     5e4:	80 93 9e 00 	sts	0x009E, r24
     5e8:	80 91 a0 00 	lds	r24, 0x00A0
     5ec:	82 60       	ori	r24, 0x02	; 2
     5ee:	80 93 a0 00 	sts	0x00A0, r24
     5f2:	08 95       	ret

000005f4 <USB_Host_WaitMS>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	20 91 9e 00 	lds	r18, 0x009E
     5f8:	21 70       	andi	r18, 0x01	; 1
     5fa:	90 91 a0 00 	lds	r25, 0x00A0
					  return HID_PARSE_InsufficientReportItems;
     5fe:	90 72       	andi	r25, 0x20	; 32
     600:	30 91 a0 00 	lds	r19, 0x00A0

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	3f 7d       	andi	r19, 0xDF	; 223
     606:	30 93 a0 00 	sts	0x00A0, r19
     60a:	30 91 9f 00 	lds	r19, 0x009F
     60e:	3f 7d       	andi	r19, 0xDF	; 223
     610:	30 93 9f 00 	sts	0x009F, r19
     614:	30 91 9e 00 	lds	r19, 0x009E
     618:	31 60       	ori	r19, 0x01	; 1
     61a:	30 93 9e 00 	sts	0x009E, r19
     61e:	88 23       	and	r24, r24
     620:	39 f1       	breq	.+78     	; 0x670 <USB_Host_WaitMS+0x7c>
     622:	30 91 9f 00 	lds	r19, 0x009F
     626:	35 ff       	sbrs	r19, 5
     628:	06 c0       	rjmp	.+12     	; 0x636 <USB_Host_WaitMS+0x42>
     62a:	30 91 9f 00 	lds	r19, 0x009F
     62e:	3f 7d       	andi	r19, 0xDF	; 223
     630:	30 93 9f 00 	sts	0x009F, r19
     634:	81 50       	subi	r24, 0x01	; 1
     636:	30 91 34 01 	lds	r19, 0x0134
     63a:	31 30       	cpi	r19, 0x01	; 1
     63c:	c1 f0       	breq	.+48     	; 0x66e <USB_Host_WaitMS+0x7a>
     63e:	30 91 a6 00 	lds	r19, 0x00A6
     642:	34 ff       	sbrs	r19, 4
     644:	09 c0       	rjmp	.+18     	; 0x658 <USB_Host_WaitMS+0x64>
     646:	10 92 f5 00 	sts	0x00F5, r1
     64a:	80 91 a6 00 	lds	r24, 0x00A6
     64e:	8f 7e       	andi	r24, 0xEF	; 239
     650:	80 93 a6 00 	sts	0x00A6, r24
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0c c0       	rjmp	.+24     	; 0x670 <USB_Host_WaitMS+0x7c>
     658:	30 91 a6 00 	lds	r19, 0x00A6
     65c:	31 ff       	sbrs	r19, 1
     65e:	df cf       	rjmp	.-66     	; 0x61e <USB_Host_WaitMS+0x2a>
     660:	80 91 a6 00 	lds	r24, 0x00A6
     664:	8d 7f       	andi	r24, 0xFD	; 253
     666:	80 93 a6 00 	sts	0x00A6, r24
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	01 c0       	rjmp	.+2      	; 0x670 <USB_Host_WaitMS+0x7c>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	21 11       	cpse	r18, r1
     672:	05 c0       	rjmp	.+10     	; 0x67e <USB_Host_WaitMS+0x8a>
     674:	20 91 9e 00 	lds	r18, 0x009E
     678:	2e 7f       	andi	r18, 0xFE	; 254
     67a:	20 93 9e 00 	sts	0x009E, r18
     67e:	99 23       	and	r25, r25
     680:	29 f0       	breq	.+10     	; 0x68c <USB_Host_WaitMS+0x98>
     682:	90 91 a0 00 	lds	r25, 0x00A0
     686:	90 62       	ori	r25, 0x20	; 32
					  ParserData->TotalReportItems++;
     688:	90 93 a0 00 	sts	0x00A0, r25
     68c:	08 95       	ret

0000068e <USB_Host_ProcessNextHostState>:
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	28 97       	sbiw	r28, 0x08	; 8
     69c:	0f b6       	in	r0, 0x3f	; 63
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	80 91 34 01 	lds	r24, 0x0134
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <USB_Host_ProcessNextHostState+0x22>
     6ae:	9c c0       	rjmp	.+312    	; 0x7e8 <USB_Host_ProcessNextHostState+0x15a>
     6b0:	68 f4       	brcc	.+26     	; 0x6cc <USB_Host_ProcessNextHostState+0x3e>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	e1 f1       	breq	.+120    	; 0x72e <USB_Host_ProcessNextHostState+0xa0>
     6b6:	18 f4       	brcc	.+6      	; 0x6be <USB_Host_ProcessNextHostState+0x30>
     6b8:	88 23       	and	r24, r24
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	d9 f0       	breq	.+54     	; 0x6f2 <USB_Host_ProcessNextHostState+0x64>
     6bc:	ff c0       	rjmp	.+510    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <USB_Host_ProcessNextHostState+0x36>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	3f c0       	rjmp	.+126    	; 0x742 <USB_Host_ProcessNextHostState+0xb4>
     6c4:	84 30       	cpi	r24, 0x04	; 4
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	09 f4       	brne	.+2      	; 0x6ca <USB_Host_ProcessNextHostState+0x3c>
     6c8:	67 c0       	rjmp	.+206    	; 0x798 <USB_Host_ProcessNextHostState+0x10a>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	f8 c0       	rjmp	.+496    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     6cc:	87 30       	cpi	r24, 0x07	; 7

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <USB_Host_ProcessNextHostState+0x44>
     6d0:	a6 c0       	rjmp	.+332    	; 0x81e <USB_Host_ProcessNextHostState+0x190>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <USB_Host_ProcessNextHostState+0x48>
     6d4:	96 c0       	rjmp	.+300    	; 0x802 <USB_Host_ProcessNextHostState+0x174>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	88 30       	cpi	r24, 0x08	; 8

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	09 f4       	brne	.+2      	; 0x6dc <USB_Host_ProcessNextHostState+0x4e>
     6da:	bf c0       	rjmp	.+382    	; 0x85a <USB_Host_ProcessNextHostState+0x1cc>
     6dc:	89 30       	cpi	r24, 0x09	; 9
     6de:	09 f0       	breq	.+2      	; 0x6e2 <USB_Host_ProcessNextHostState+0x54>
     6e0:	ed c0       	rjmp	.+474    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 a1 00 	sts	0x00A1, r24
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	80 93 34 01 	sts	0x0134, r24
     6ee:	bb de       	rcall	.-650    	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete>
     6f0:	e5 c0       	rjmp	.+458    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     6f2:	00 91 28 01 	lds	r16, 0x0128
     6f6:	10 91 29 01 	lds	r17, 0x0129
     6fa:	01 15       	cp	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	09 f4       	brne	.+2      	; 0x702 <USB_Host_ProcessNextHostState+0x74>
     700:	dd c0       	rjmp	.+442    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	77 df       	rcall	.-274    	; 0x5f4 <USB_Host_WaitMS>
     706:	88 23       	and	r24, r24
     708:	31 f0       	breq	.+12     	; 0x716 <USB_Host_ProcessNextHostState+0x88>
     70a:	90 91 27 01 	lds	r25, 0x0127
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
				{
					USB_HostState = PostWaitState;
     70e:	90 93 34 01 	sts	0x0134, r25
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	c5 c0       	rjmp	.+394    	; 0x8a0 <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     716:	01 50       	subi	r16, 0x01	; 1
					break;
     718:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     71a:	10 93 29 01 	sts	0x0129, r17
     71e:	00 93 28 01 	sts	0x0128, r16
     722:	01 2b       	or	r16, r17
     724:	09 f0       	breq	.+2      	; 0x728 <USB_Host_ProcessNextHostState+0x9a>
     726:	ca c0       	rjmp	.+404    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     728:	80 91 27 01 	lds	r24, 0x0127
				  USB_HostState = PostWaitState;
     72c:	07 c0       	rjmp	.+14     	; 0x73c <USB_Host_ProcessNextHostState+0xae>
     72e:	88 ee       	ldi	r24, 0xE8	; 232
     730:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     732:	90 93 29 01 	sts	0x0129, r25
     736:	80 93 28 01 	sts	0x0128, r24
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	80 93 34 01 	sts	0x0134, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     740:	bd c0       	rjmp	.+378    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     742:	80 91 28 01 	lds	r24, 0x0128
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     746:	90 91 29 01 	lds	r25, 0x0129
     74a:	9c 01       	movw	r18, r24
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	31 09       	sbc	r19, r1
     750:	30 93 29 01 	sts	0x0129, r19
     754:	20 93 28 01 	sts	0x0128, r18
     758:	89 2b       	or	r24, r25
     75a:	39 f0       	breq	.+14     	; 0x76a <USB_Host_ProcessNextHostState+0xdc>
     75c:	8f ec       	ldi	r24, 0xCF	; 207
     75e:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <USB_Host_ProcessNextHostState+0xd2>
     764:	00 c0       	rjmp	.+0      	; 0x766 <USB_Host_ProcessNextHostState+0xd8>
     766:	00 00       	nop
     768:	a9 c0       	rjmp	.+338    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     76a:	77 98       	cbi	0x0e, 7	; 14
     76c:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     770:	80 61       	ori	r24, 0x10	; 16
     772:	80 93 d8 00 	sts	0x00D8, r24
     776:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     77a:	8b 7f       	andi	r24, 0xFB	; 251
     77c:	80 93 dd 00 	sts	0x00DD, r24
     780:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     784:	80 61       	ori	r24, 0x10	; 16
     786:	80 93 d7 00 	sts	0x00D7, r24
     78a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     78e:	82 60       	ori	r24, 0x02	; 2
     790:	80 93 dd 00 	sts	0x00DD, r24
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	d2 cf       	rjmp	.-92     	; 0x73c <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     798:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     79c:	80 ff       	sbrs	r24, 0
     79e:	8e c0       	rjmp	.+284    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7a0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
     7a6:	80 93 9f 00 	sts	0x009F, r24
     7aa:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ae:	8d 7f       	andi	r24, 0xFD	; 253
     7b0:	80 93 9f 00 	sts	0x009F, r24
     7b4:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7b8:	8d 7f       	andi	r24, 0xFD	; 253
     7ba:	80 93 df 00 	sts	0x00DF, r24
     7be:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7c2:	82 60       	ori	r24, 0x02	; 2
     7c4:	80 93 de 00 	sts	0x00DE, r24
     7c8:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 93 9e 00 	sts	0x009E, r24
     7d2:	a0 d1       	rcall	.+832    	; 0xb14 <Pipe_ClearPipes>
     7d4:	10 92 34 01 	sts	0x0134, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7d8:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	90 93 29 01 	sts	0x0129, r25
     7e0:	80 93 28 01 	sts	0x0128, r24
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	0a c0       	rjmp	.+20     	; 0x7fc <USB_Host_ProcessNextHostState+0x16e>
     7e8:	b4 de       	rcall	.-664    	; 0x552 <USB_Host_ResetDevice>
     7ea:	10 92 34 01 	sts	0x0134, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7ee:	88 ec       	ldi	r24, 0xC8	; 200
     7f0:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7f2:	90 93 29 01 	sts	0x0129, r25
     7f6:	80 93 28 01 	sts	0x0128, r24
     7fa:	86 e0       	ldi	r24, 0x06	; 6
     7fc:	80 93 27 01 	sts	0x0127, r24
     800:	5d c0       	rjmp	.+186    	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     802:	01 e0       	ldi	r16, 0x01	; 1
     804:	20 e4       	ldi	r18, 0x40	; 64
     806:	30 e0       	ldi	r19, 0x00	; 0
			break;
     808:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	fb d0       	rcall	.+502    	; 0xa06 <Pipe_ConfigurePipe>
     810:	81 11       	cpse	r24, r1
     812:	03 c0       	rjmp	.+6      	; 0x81a <USB_Host_ProcessNextHostState+0x18c>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	94 e0       	ldi	r25, 0x04	; 4
     818:	43 c0       	rjmp	.+134    	; 0x8a0 <USB_Host_ProcessNextHostState+0x212>
     81a:	87 e0       	ldi	r24, 0x07	; 7
     81c:	8f cf       	rjmp	.-226    	; 0x73c <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     81e:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     820:	ef e0       	ldi	r30, 0x0F	; 15
     822:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     824:	ac e2       	ldi	r26, 0x2C	; 44
     826:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	8a 95       	dec	r24
     82e:	e1 f7       	brne	.-8      	; 0x828 <USB_Host_ProcessNextHostState+0x19a>
     830:	10 92 a7 00 	sts	0x00A7, r1
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	bf d3       	rcall	.+1918   	; 0xfb8 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     83a:	81 11       	cpse	r24, r1
     83c:	30 c0       	rjmp	.+96     	; 0x89e <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     83e:	88 85       	ldd	r24, Y+8	; 0x08
     840:	80 93 0e 01 	sts	0x010E, r24
     844:	86 de       	rcall	.-756    	; 0x552 <USB_Host_ResetDevice>
     846:	10 92 34 01 	sts	0x0134, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     84a:	88 ec       	ldi	r24, 0xC8	; 200
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 29 01 	sts	0x0129, r25

			USB_Host_ResetDevice();
     852:	80 93 28 01 	sts	0x0128, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	d1 cf       	rjmp	.-94     	; 0x7fc <USB_Host_ProcessNextHostState+0x16e>
     85a:	20 91 0e 01 	lds	r18, 0x010E
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	01 e0       	ldi	r16, 0x01	; 1
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     868:	ce d0       	rcall	.+412    	; 0xa06 <Pipe_ConfigurePipe>
     86a:	88 23       	and	r24, r24
     86c:	99 f2       	breq	.-90     	; 0x814 <USB_Host_ProcessNextHostState+0x186>
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	e7 e1       	ldi	r30, 0x17	; 23
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	ac e2       	ldi	r26, 0x2C	; 44
     876:	b1 e0       	ldi	r27, 0x01	; 1
     878:	01 90       	ld	r0, Z+
     87a:	0d 92       	st	X+, r0
     87c:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     87e:	e1 f7       	brne	.-8      	; 0x878 <USB_Host_ProcessNextHostState+0x1ea>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	99 d3       	rcall	.+1842   	; 0xfb8 <USB_Host_SendControlRequest>
     886:	81 11       	cpse	r24, r1
     888:	0a c0       	rjmp	.+20     	; 0x89e <USB_Host_ProcessNextHostState+0x210>
     88a:	10 92 34 01 	sts	0x0134, r1
     88e:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	90 93 29 01 	sts	0x0129, r25
     896:	80 93 28 01 	sts	0x0128, r24
     89a:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     89c:	af cf       	rjmp	.-162    	; 0x7fc <USB_Host_ProcessNextHostState+0x16e>
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	20 91 34 01 	lds	r18, 0x0134
     8a4:	21 30       	cpi	r18, 0x01	; 1
     8a6:	51 f0       	breq	.+20     	; 0x8bc <USB_Host_ProcessNextHostState+0x22e>
     8a8:	68 2f       	mov	r22, r24
     8aa:	89 2f       	mov	r24, r25
     8ac:	3a de       	rcall	.-908    	; 0x522 <EVENT_USB_Host_DeviceEnumerationFailed>
     8ae:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8b2:	81 60       	ori	r24, 0x01	; 1
     8b4:	80 93 dd 00 	sts	0x00DD, r24
     8b8:	d0 dd       	rcall	.-1120   	; 0x45a <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8ba:	b0 d1       	rcall	.+864    	; 0xc1c <USB_ResetInterface>
     8bc:	28 96       	adiw	r28, 0x08	; 8
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16

		USB_ResetInterface();
     8d0:	08 95       	ret

000008d2 <Pipe_Write_Stream_LE>:
     8d2:	cf 92       	push	r12
	}
}
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	7c 01       	movw	r14, r24
     8e4:	8b 01       	movw	r16, r22
     8e6:	ea 01       	movw	r28, r20
     8e8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     8ec:	8f 7c       	andi	r24, 0xCF	; 207
     8ee:	80 62       	ori	r24, 0x20	; 32
     8f0:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     8f4:	4d d1       	rcall	.+666    	; 0xb90 <Pipe_WaitUntilReady>
     8f6:	81 11       	cpse	r24, r1
     8f8:	30 c0       	rjmp	.+96     	; 0x95a <Pipe_Write_Stream_LE+0x88>
     8fa:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     8fc:	31 f0       	breq	.+12     	; 0x90a <Pipe_Write_Stream_LE+0x38>
     8fe:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     900:	99 81       	ldd	r25, Y+1	; 0x01
     902:	08 1b       	sub	r16, r24
     904:	19 0b       	sbc	r17, r25
     906:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     908:	f9 1e       	adc	r15, r25
     90a:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     90c:	d1 2c       	mov	r13, r1
     90e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     910:	11 05       	cpc	r17, r1
     912:	11 f1       	breq	.+68     	; 0x958 <Pipe_Write_Stream_LE+0x86>
     914:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     918:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     91a:	13 c0       	rjmp	.+38     	; 0x942 <Pipe_Write_Stream_LE+0x70>
     91c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     920:	8b 77       	andi	r24, 0x7B	; 123
     922:	80 93 a6 00 	sts	0x00A6, r24
     926:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     928:	41 f0       	breq	.+16     	; 0x93a <Pipe_Write_Stream_LE+0x68>
     92a:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     92c:	99 81       	ldd	r25, Y+1	; 0x01
     92e:	8c 0d       	add	r24, r12
     930:	9d 1d       	adc	r25, r13
     932:	99 83       	std	Y+1, r25	; 0x01
     934:	88 83       	st	Y, r24
     936:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     938:	10 c0       	rjmp	.+32     	; 0x95a <Pipe_Write_Stream_LE+0x88>
     93a:	2a d1       	rcall	.+596    	; 0xb90 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     93c:	88 23       	and	r24, r24
     93e:	39 f3       	breq	.-50     	; 0x90e <Pipe_Write_Stream_LE+0x3c>
     940:	0c c0       	rjmp	.+24     	; 0x95a <Pipe_Write_Stream_LE+0x88>
     942:	f7 01       	movw	r30, r14
     944:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     946:	7f 01       	movw	r14, r30
     948:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     94c:	01 50       	subi	r16, 0x01	; 1
     94e:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     950:	ff ef       	ldi	r31, 0xFF	; 255
     952:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     954:	df 0a       	sbc	r13, r31
     956:	db cf       	rjmp	.-74     	; 0x90e <Pipe_Write_Stream_LE+0x3c>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     95c:	cf 91       	pop	r28
}
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <Pipe_Read_Stream_LE>:
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	7c 01       	movw	r14, r24
     97e:	8b 01       	movw	r16, r22
     980:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     982:	80 91 aa 00 	lds	r24, 0x00AA
     986:	8f 7c       	andi	r24, 0xCF	; 207
     988:	80 61       	ori	r24, 0x10	; 16
     98a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     98e:	00 d1       	rcall	.+512    	; 0xb90 <Pipe_WaitUntilReady>
     990:	81 11       	cpse	r24, r1
     992:	30 c0       	rjmp	.+96     	; 0x9f4 <Pipe_Read_Stream_LE+0x88>
     994:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     996:	31 f0       	breq	.+12     	; 0x9a4 <Pipe_Read_Stream_LE+0x38>
     998:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	08 1b       	sub	r16, r24
     99e:	19 0b       	sbc	r17, r25
     9a0:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9a2:	f9 1e       	adc	r15, r25
     9a4:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9a6:	d1 2c       	mov	r13, r1
     9a8:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     9aa:	11 05       	cpc	r17, r1
     9ac:	11 f1       	breq	.+68     	; 0x9f2 <Pipe_Read_Stream_LE+0x86>
     9ae:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9b2:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <Pipe_Read_Stream_LE+0x70>
     9b6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     9ba:	8e 77       	andi	r24, 0x7E	; 126
     9bc:	80 93 a6 00 	sts	0x00A6, r24
     9c0:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9c2:	41 f0       	breq	.+16     	; 0x9d4 <Pipe_Read_Stream_LE+0x68>
     9c4:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
     9c8:	8c 0d       	add	r24, r12
     9ca:	9d 1d       	adc	r25, r13
     9cc:	99 83       	std	Y+1, r25	; 0x01
     9ce:	88 83       	st	Y, r24
     9d0:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <Pipe_Read_Stream_LE+0x88>
     9d4:	dd d0       	rcall	.+442    	; 0xb90 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9d6:	88 23       	and	r24, r24
     9d8:	39 f3       	breq	.-50     	; 0x9a8 <Pipe_Read_Stream_LE+0x3c>
     9da:	0c c0       	rjmp	.+24     	; 0x9f4 <Pipe_Read_Stream_LE+0x88>
     9dc:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     9e0:	f7 01       	movw	r30, r14
     9e2:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     9e4:	7f 01       	movw	r14, r30
     9e6:	01 50       	subi	r16, 0x01	; 1
     9e8:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     9ea:	ff ef       	ldi	r31, 0xFF	; 255
     9ec:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     9ee:	df 0a       	sbc	r13, r31
     9f0:	db cf       	rjmp	.-74     	; 0x9a8 <Pipe_Read_Stream_LE+0x3c>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     9f6:	cf 91       	pop	r28
}
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <Pipe_ConfigurePipe>:
     a06:	0f 93       	push	r16
     a08:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a0a:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a0c:	87 ff       	sbrs	r24, 7
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <Pipe_ConfigurePipe+0xe>
     a10:	80 e1       	ldi	r24, 0x10	; 16
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <Pipe_ConfigurePipe+0x10>
     a14:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     a16:	e7 30       	cpi	r30, 0x07	; 7
     a18:	10 f0       	brcs	.+4      	; 0xa1e <Pipe_ConfigurePipe+0x18>
	  return false;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	5a c0       	rjmp	.+180    	; 0xad2 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     a1e:	61 11       	cpse	r22, r1
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     a22:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a24:	90 e4       	ldi	r25, 0x40	; 64
     a26:	69 9f       	mul	r22, r25
     a28:	b0 01       	movw	r22, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	4f 70       	andi	r20, 0x0F	; 15
     a2e:	46 2b       	or	r20, r22
     a30:	48 2b       	or	r20, r24
     a32:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a34:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a38:	5e 13       	cpse	r21, r30
     a3a:	19 c0       	rjmp	.+50     	; 0xa6e <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     a3c:	02 30       	cpi	r16, 0x02	; 2
     a3e:	10 f0       	brcs	.+4      	; 0xa44 <Pipe_ConfigurePipe+0x3e>
     a40:	76 e0       	ldi	r23, 0x06	; 6
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <Pipe_ConfigurePipe+0x40>
     a44:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     a4a:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a4c:	82 17       	cp	r24, r18
     a4e:	93 07       	cpc	r25, r19
     a50:	40 f0       	brcs	.+16     	; 0xa62 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a52:	86 2f       	mov	r24, r22
     a54:	82 95       	swap	r24
     a56:	80 7f       	andi	r24, 0xF0	; 240
     a58:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a5a:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a5c:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e c0       	rjmp	.+28     	; 0xa7e <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a62:	65 30       	cpi	r22, 0x05	; 5
     a64:	b1 f3       	breq	.-20     	; 0xa52 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     a66:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	ef cf       	rjmp	.-34     	; 0xa4c <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a6e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a72:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a76:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     a7a:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a7e:	81 fd       	sbrc	r24, 1
     a80:	07 c0       	rjmp	.+14     	; 0xa90 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a82:	5f 5f       	subi	r21, 0xFF	; 255
     a84:	57 30       	cpi	r21, 0x07	; 7
     a86:	b1 f6       	brne	.-84     	; 0xa34 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a88:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	21 c0       	rjmp	.+66     	; 0xad2 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a90:	90 91 a9 00 	lds	r25, 0x00A9
     a94:	9e 7f       	andi	r25, 0xFE	; 254
     a96:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a9a:	90 91 ab 00 	lds	r25, 0x00AB
     a9e:	9d 7f       	andi	r25, 0xFD	; 253
     aa0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     aa4:	90 91 a9 00 	lds	r25, 0x00A9
     aa8:	91 60       	ori	r25, 0x01	; 1
     aaa:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     aae:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     ab2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ab6:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     aba:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     abe:	80 91 a9 00 	lds	r24, 0x00A9
     ac2:	80 62       	ori	r24, 0x20	; 32
     ac4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ac8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     acc:	87 fd       	sbrc	r24, 7
     ace:	d9 cf       	rjmp	.-78     	; 0xa82 <Pipe_ConfigurePipe+0x7c>
     ad0:	a4 cf       	rjmp	.-184    	; 0xa1a <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	f6 2e       	mov	r15, r22
     ae2:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	1f 15       	cp	r17, r15
     ae8:	71 f0       	breq	.+28     	; 0xb06 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     aea:	88 81       	ld	r24, Y
     aec:	88 23       	and	r24, r24
     aee:	41 f0       	breq	.+16     	; 0xb00 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     af0:	29 81       	ldd	r18, Y+1	; 0x01
     af2:	3a 81       	ldd	r19, Y+2	; 0x02
     af4:	0d 81       	ldd	r16, Y+5	; 0x05
     af6:	4b 81       	ldd	r20, Y+3	; 0x03
     af8:	6c 81       	ldd	r22, Y+4	; 0x04
     afa:	85 df       	rcall	.-246    	; 0xa06 <Pipe_ConfigurePipe>
     afc:	88 23       	and	r24, r24
     afe:	21 f0       	breq	.+8      	; 0xb08 <Pipe_ConfigurePipeTable+0x32>
     b00:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b02:	26 96       	adiw	r28, 0x06	; 6
     b04:	f0 cf       	rjmp	.-32     	; 0xae6 <Pipe_ConfigurePipeTable+0x10>
     b06:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     b08:	df 91       	pop	r29
}
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	08 95       	ret

00000b14 <Pipe_ClearPipes>:
     b14:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b18:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b1a:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b1e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b22:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b26:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b2a:	90 91 a9 00 	lds	r25, 0x00A9
     b2e:	9e 7f       	andi	r25, 0xFE	; 254
     b30:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	87 30       	cpi	r24, 0x07	; 7
     b38:	81 f7       	brne	.-32     	; 0xb1a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b3a:	08 95       	ret

00000b3c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     b3c:	90 91 a7 00 	lds	r25, 0x00A7
     b40:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     b42:	20 91 aa 00 	lds	r18, 0x00AA
     b46:	20 ff       	sbrs	r18, 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <Pipe_IsEndpointBound+0x12>
     b4a:	20 e8       	ldi	r18, 0x80	; 128
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <Pipe_IsEndpointBound+0x14>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     b50:	42 2f       	mov	r20, r18
     b52:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b54:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b56:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b5a:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b5e:	27 ff       	sbrs	r18, 7
     b60:	0c c0       	rjmp	.+24     	; 0xb7a <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b62:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b66:	53 2f       	mov	r21, r19
     b68:	5f 70       	andi	r21, 0x0F	; 15
     b6a:	35 ff       	sbrs	r19, 5
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <Pipe_IsEndpointBound+0x36>
     b6e:	20 e8       	ldi	r18, 0x80	; 128
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <Pipe_IsEndpointBound+0x38>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b76:	28 17       	cp	r18, r24
     b78:	49 f0       	breq	.+18     	; 0xb8c <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b7a:	9f 5f       	subi	r25, 0xFF	; 255
     b7c:	97 30       	cpi	r25, 0x07	; 7
     b7e:	59 f7       	brne	.-42     	; 0xb56 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b80:	94 2f       	mov	r25, r20
     b82:	9f 70       	andi	r25, 0x0F	; 15
     b84:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b8e:	08 95       	ret

00000b90 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b90:	80 91 a2 00 	lds	r24, 0x00A2
     b94:	90 91 a3 00 	lds	r25, 0x00A3
     b98:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b9a:	20 91 aa 00 	lds	r18, 0x00AA
     b9e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ba0:	20 31       	cpi	r18, 0x10	; 16
     ba2:	29 f4       	brne	.+10     	; 0xbae <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ba4:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     ba8:	20 ff       	sbrs	r18, 0
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <Pipe_WaitUntilReady+0x26>
     bac:	17 c0       	rjmp	.+46     	; 0xbdc <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bae:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bb2:	22 fd       	sbrc	r18, 2
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bb6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bba:	21 fd       	sbrc	r18, 1
     bbc:	11 c0       	rjmp	.+34     	; 0xbe0 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bbe:	20 91 34 01 	lds	r18, 0x0134
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <Pipe_WaitUntilReady+0x54>
     bc6:	20 91 a2 00 	lds	r18, 0x00A2
     bca:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	19 f3       	breq	.-58     	; 0xb9a <Pipe_WaitUntilReady+0xa>
     bd4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bd6:	41 f0       	breq	.+16     	; 0xbe8 <Pipe_WaitUntilReady+0x58>
     bd8:	c9 01       	movw	r24, r18
     bda:	df cf       	rjmp	.-66     	; 0xb9a <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     be8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     bea:	08 95       	ret

00000bec <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bec:	75 d0       	rcall	.+234    	; 0xcd8 <USB_INT_DisableAllInterrupts>
     bee:	7c d0       	rcall	.+248    	; 0xce8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bf0:	e0 ee       	ldi	r30, 0xE0	; 224
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bf4:	80 81       	ld	r24, Z
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	80 83       	st	Z, r24
     bfa:	e8 ed       	ldi	r30, 0xD8	; 216
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bfe:	80 81       	ld	r24, Z
     c00:	8f 77       	andi	r24, 0x7F	; 127
     c02:	80 83       	st	Z, r24
     c04:	19 bc       	out	0x29, r1	; 41
     c06:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c08:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c0a:	8c 91       	ld	r24, X
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	8c 93       	st	X, r24
     c10:	80 81       	ld	r24, Z
     c12:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c14:	80 83       	st	Z, r24
     c16:	10 92 2b 01 	sts	0x012B, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c1a:	08 95       	ret

00000c1c <USB_ResetInterface>:
     c1c:	5d d0       	rcall	.+186    	; 0xcd8 <USB_INT_DisableAllInterrupts>
     c1e:	64 d0       	rcall	.+200    	; 0xce8 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     c20:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c24:	8f 77       	andi	r24, 0x7F	; 127
     c26:	80 93 d8 00 	sts	0x00D8, r24
     c2a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	80 93 d8 00 	sts	0x00D8, r24
     c34:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	80 93 d8 00 	sts	0x00D8, r24
     c3e:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c42:	8f 77       	andi	r24, 0x7F	; 127
     c44:	80 93 d7 00 	sts	0x00D7, r24
     c48:	8c e0       	ldi	r24, 0x0C	; 12
     c4a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c4c:	8e e0       	ldi	r24, 0x0E	; 14
     c4e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c50:	09 b4       	in	r0, 0x29	; 41
     c52:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <USB_ResetInterface+0x34>
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 34 01 	sts	0x0134, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c5c:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ConfigurationNumber = 0;
     c60:	80 e4       	ldi	r24, 0x40	; 64
     c62:	80 93 0e 01 	sts	0x010E, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c66:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	80 93 d8 00 	sts	0x00D8, r24
     c70:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c74:	81 60       	ori	r24, 0x01	; 1
     c76:	80 93 dd 00 	sts	0x00DD, r24
     c7a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c7e:	84 60       	ori	r24, 0x04	; 4
     c80:	80 93 dd 00 	sts	0x00DD, r24
     c84:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c88:	8f 7e       	andi	r24, 0xEF	; 239
     c8a:	80 93 d7 00 	sts	0x00D7, r24
     c8e:	6f 9a       	sbi	0x0d, 7	; 13
     c90:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c92:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 93 de 00 	sts	0x00DE, r24
     c9c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	80 93 de 00 	sts	0x00DE, r24
     ca6:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	80 93 e0 00 	sts	0x00E0, r24
     cb0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     cb4:	80 61       	ori	r24, 0x10	; 16
     cb6:	80 93 d8 00 	sts	0x00D8, r24
     cba:	08 95       	ret

00000cbc <USB_Init>:
     cbc:	e8 ed       	ldi	r30, 0xD8	; 216
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cc6:	e7 ed       	ldi	r30, 0xD7	; 215
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
     cd6:	a2 cf       	rjmp	.-188    	; 0xc1c <USB_ResetInterface>

00000cd8 <USB_INT_DisableAllInterrupts>:
     cd8:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8c 7f       	andi	r24, 0xFC	; 252
     ce0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ce2:	10 92 a0 00 	sts	0x00A0, r1
     ce6:	08 95       	ret

00000ce8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ce8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cec:	10 92 9f 00 	sts	0x009F, r1
     cf0:	08 95       	ret

00000cf2 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	0b b6       	in	r0, 0x3b	; 59
     cfe:	0f 92       	push	r0
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d18:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d1c:	85 ff       	sbrs	r24, 5
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d20:	80 91 a0 00 	lds	r24, 0x00A0
     d24:	85 ff       	sbrs	r24, 5
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d28:	80 91 9f 00 	lds	r24, 0x009F
     d2c:	8f 7d       	andi	r24, 0xDF	; 223
     d2e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d32:	1a d1       	rcall	.+564    	; 0xf68 <USB_Event_Stub>
     d34:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d38:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <__vector_10+0x74>
     d3c:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d40:	81 ff       	sbrs	r24, 1
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <__vector_10+0x74>
     d44:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	80 93 9f 00 	sts	0x009F, r24
     d4e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d52:	8e 7f       	andi	r24, 0xFE	; 254
     d54:	80 93 9f 00 	sts	0x009F, r24
     d58:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d5c:	8d 7f       	andi	r24, 0xFD	; 253
     d5e:	80 93 a0 00 	sts	0x00A0, r24
     d62:	7b db       	rcall	.-2314   	; 0x45a <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d64:	5b df       	rcall	.-330    	; 0xc1c <USB_ResetInterface>
     d66:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d6a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d6c:	15 c0       	rjmp	.+42     	; 0xd98 <__vector_10+0xa6>
     d6e:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d72:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d74:	11 c0       	rjmp	.+34     	; 0xd98 <__vector_10+0xa6>
     d76:	80 91 df 00 	lds	r24, 0x00DF
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d7c:	80 93 df 00 	sts	0x00DF, r24
     d80:	77 98       	cbi	0x0e, 7	; 14
     d82:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d86:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d88:	80 93 dd 00 	sts	0x00DD, r24
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	b2 db       	rcall	.-2204   	; 0x4f4 <EVENT_USB_Host_HostError>
     d90:	64 db       	rcall	.-2360   	; 0x45a <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 34 01 	sts	0x0134, r24
		EVENT_USB_Host_DeviceUnattached();
     d98:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d9c:	80 ff       	sbrs	r24, 0
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <__vector_10+0xdc>
     da0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     da4:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     da6:	13 c0       	rjmp	.+38     	; 0xdce <__vector_10+0xdc>
     da8:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     db2:	80 91 de 00 	lds	r24, 0x00DE
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     dbc:	48 db       	rcall	.-2416   	; 0x44e <EVENT_USB_Host_DeviceAttached>
     dbe:	80 91 a0 00 	lds	r24, 0x00A0
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dc8:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dca:	80 93 34 01 	sts	0x0134, r24
     dce:	80 91 df 00 	lds	r24, 0x00DF
     dd2:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <__vector_10+0x100>
     dd6:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dda:	82 ff       	sbrs	r24, 2
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dde:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	80 93 df 00 	sts	0x00DF, r24
     de8:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	9a db       	rcall	.-2252   	; 0x522 <EVENT_USB_Host_DeviceEnumerationFailed>
     dee:	35 db       	rcall	.-2454   	; 0x45a <EVENT_USB_Host_DeviceUnattached>
     df0:	15 df       	rcall	.-470    	; 0xc1c <USB_ResetInterface>
     df2:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23

		USB_ResetInterface();
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0b be       	out	0x3b, r0	; 59
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <USB_GetNextDescriptor>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	fc 01       	movw	r30, r24
     e1e:	eb 01       	movw	r28, r22
     e20:	a8 81       	ld	r26, Y
     e22:	b9 81       	ldd	r27, Y+1	; 0x01
     e24:	8c 91       	ld	r24, X
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     e2a:	31 81       	ldd	r19, Z+1	; 0x01
     e2c:	82 17       	cp	r24, r18
     e2e:	93 07       	cpc	r25, r19
     e30:	08 f4       	brcc	.+2      	; 0xe34 <USB_GetNextDescriptor+0x1c>
     e32:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e34:	a2 0f       	add	r26, r18
     e36:	b3 1f       	adc	r27, r19
     e38:	eb 01       	movw	r28, r22
     e3a:	b9 83       	std	Y+1, r27	; 0x01
     e3c:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	82 1b       	sub	r24, r18
     e44:	93 0b       	sbc	r25, r19
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
			}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	29 97       	sbiw	r28, 0x09	; 9
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	7b 01       	movw	r14, r22
     e72:	8a 01       	movw	r16, r20
     e74:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e76:	90 e8       	ldi	r25, 0x80	; 128
     e78:	90 93 2c 01 	sts	0x012C, r25
     e7c:	96 e0       	ldi	r25, 0x06	; 6
     e7e:	90 93 2d 01 	sts	0x012D, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e82:	e8 2f       	mov	r30, r24
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e8a:	f0 93 2f 01 	sts	0x012F, r31
     e8e:	e0 93 2e 01 	sts	0x012E, r30
     e92:	10 92 31 01 	sts	0x0131, r1
     e96:	10 92 30 01 	sts	0x0130, r1
     e9a:	89 e0       	ldi	r24, 0x09	; 9
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 33 01 	sts	0x0133, r25
     ea2:	80 93 32 01 	sts	0x0132, r24
     ea6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	84 d0       	rcall	.+264    	; 0xfb8 <USB_Host_SendControlRequest>
     eb0:	81 11       	cpse	r24, r1
     eb2:	19 c0       	rjmp	.+50     	; 0xee6 <USB_Host_GetDeviceConfigDescriptor+0x96>
     eb4:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     eb6:	fc 81       	ldd	r31, Y+4	; 0x04
     eb8:	d7 01       	movw	r26, r14
     eba:	ed 93       	st	X+, r30
     ebc:	fc 93       	st	X, r31
     ebe:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     ec0:	df 06       	cpc	r13, r31
     ec2:	70 f0       	brcs	.+28     	; 0xee0 <USB_Host_GetDeviceConfigDescriptor+0x90>
     ec4:	f0 93 33 01 	sts	0x0133, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ec8:	e0 93 32 01 	sts	0x0132, r30
     ecc:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ece:	74 d0       	rcall	.+232    	; 0xfb8 <USB_Host_SendControlRequest>
     ed0:	81 11       	cpse	r24, r1
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <USB_Host_GetDeviceConfigDescriptor+0x96>
     ed4:	f8 01       	movw	r30, r16
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	21 f0       	breq	.+8      	; 0xee4 <USB_Host_GetDeviceConfigDescriptor+0x94>
     edc:	86 e0       	ldi	r24, 0x06	; 6
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     ee0:	85 e0       	ldi	r24, 0x05	; 5
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     ee8:	0f b6       	in	r0, 0x3f	; 63
}
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <USB_GetNextDescriptorComp>:
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	8c 01       	movw	r16, r24
     f1a:	eb 01       	movw	r28, r22
     f1c:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f1e:	f8 01       	movw	r30, r16
     f20:	e0 80       	ld	r14, Z
     f22:	f1 80       	ldd	r15, Z+1	; 0x01
     f24:	e1 14       	cp	r14, r1
     f26:	f1 04       	cpc	r15, r1
     f28:	99 f0       	breq	.+38     	; 0xf50 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f2a:	a8 80       	ld	r10, Y
     f2c:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
     f2e:	be 01       	movw	r22, r28
     f30:	c8 01       	movw	r24, r16
     f32:	72 df       	rcall	.-284    	; 0xe18 <USB_GetNextDescriptor>
     f34:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f36:	99 81       	ldd	r25, Y+1	; 0x01
     f38:	f6 01       	movw	r30, r12
     f3a:	09 95       	icall
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	79 f3       	breq	.-34     	; 0xf1e <USB_GetNextDescriptorComp+0x1a>
     f40:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f42:	39 f4       	brne	.+14     	; 0xf52 <USB_GetNextDescriptorComp+0x4e>
     f44:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
     f46:	a8 82       	st	Y, r10
     f48:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
     f4a:	f1 82       	std	Z+1, r15	; 0x01
     f4c:	e0 82       	st	Z, r14
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <USB_GetNextDescriptorComp+0x4e>
     f50:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f52:	df 91       	pop	r29
}
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	08 95       	ret

00000f68 <USB_Event_Stub>:
     f68:	08 95       	ret

00000f6a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f72:	c9 ee       	ldi	r28, 0xE9	; 233
     f74:	d3 e0       	ldi	r29, 0x03	; 3
     f76:	11 11       	cpse	r17, r1
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f7a:	80 91 a6 00 	lds	r24, 0x00A6
     f7e:	83 fd       	sbrc	r24, 3
     f80:	16 c0       	rjmp	.+44     	; 0xfae <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	37 db       	rcall	.-2450   	; 0x5f4 <USB_Host_WaitMS>
     f86:	81 11       	cpse	r24, r1
     f88:	13 c0       	rjmp	.+38     	; 0xfb0 <USB_Host_WaitForIOS+0x46>
     f8a:	21 97       	sbiw	r28, 0x01	; 1
     f8c:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f8e:	99 f7       	brne	.-26     	; 0xf76 <USB_Host_WaitForIOS+0xc>
     f90:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <USB_Host_WaitForIOS+0x46>
     f94:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f96:	29 f4       	brne	.+10     	; 0xfa2 <USB_Host_WaitForIOS+0x38>
     f98:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f9c:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f9e:	f1 cf       	rjmp	.-30     	; 0xf82 <USB_Host_WaitForIOS+0x18>
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <USB_Host_WaitForIOS+0x44>
     fa2:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fa4:	71 f7       	brne	.-36     	; 0xf82 <USB_Host_WaitForIOS+0x18>
     fa6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     faa:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     fac:	ea cf       	rjmp	.-44     	; 0xf82 <USB_Host_WaitForIOS+0x18>
     fae:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     fb0:	df 91       	pop	r29
}
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	08 95       	ret

00000fb8 <USB_Host_SendControlRequest>:
     fb8:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fc4:	f0 90 9e 00 	lds	r15, 0x009E
     fc8:	8f 2d       	mov	r24, r15
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fce:	c0 91 32 01 	lds	r28, 0x0132
     fd2:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fd6:	80 91 9e 00 	lds	r24, 0x009E
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 db       	rcall	.-2544   	; 0x5f4 <USB_Host_WaitMS>
     fe4:	81 11       	cpse	r24, r1
     fe6:	cc c0       	rjmp	.+408    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
     fe8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fec:	8f 7c       	andi	r24, 0xCF	; 207
     fee:	80 93 aa 00 	sts	0x00AA, r24
     ff2:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ff6:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     ffa:	8f 7e       	andi	r24, 0xEF	; 239
     ffc:	80 93 a6 00 	sts	0x00A6, r24
    1000:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1004:	8f 7b       	andi	r24, 0xBF	; 191
    1006:	80 93 a9 00 	sts	0x00A9, r24
    100a:	ec e2       	ldi	r30, 0x2C	; 44
    100c:	f1 e0       	ldi	r31, 0x01	; 1
    100e:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1010:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1014:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1016:	e4 33       	cpi	r30, 0x34	; 52
    1018:	f8 07       	cpc	r31, r24
    101a:	c9 f7       	brne	.-14     	; 0x100e <USB_Host_SendControlRequest+0x56>
    101c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1020:	87 77       	andi	r24, 0x77	; 119
    1022:	80 93 a6 00 	sts	0x00A6, r24
    1026:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1028:	a0 df       	rcall	.-192    	; 0xf6a <USB_Host_WaitForIOS>
    102a:	81 11       	cpse	r24, r1
    102c:	a9 c0       	rjmp	.+338    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    102e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	80 93 a9 00 	sts	0x00A9, r24
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	dc da       	rcall	.-2632   	; 0x5f4 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    103c:	81 11       	cpse	r24, r1
    103e:	a0 c0       	rjmp	.+320    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    1040:	80 91 2c 01 	lds	r24, 0x012C
    1044:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1046:	4e c0       	rjmp	.+156    	; 0x10e4 <USB_Host_SendControlRequest+0x12c>
    1048:	80 91 aa 00 	lds	r24, 0x00AA
    104c:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 93 aa 00 	sts	0x00AA, r24
    1054:	01 15       	cp	r16, r1
    1056:	11 05       	cpc	r17, r1
    1058:	09 f0       	breq	.+2      	; 0x105c <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    105a:	3a c0       	rjmp	.+116    	; 0x10d0 <USB_Host_SendControlRequest+0x118>
    105c:	80 91 aa 00 	lds	r24, 0x00AA
    1060:	8f 7c       	andi	r24, 0xCF	; 207
    1062:	80 62       	ori	r24, 0x20	; 32
    1064:	80 93 aa 00 	sts	0x00AA, r24
    1068:	80 91 a9 00 	lds	r24, 0x00A9
    106c:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    106e:	80 93 a9 00 	sts	0x00A9, r24
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	7a df       	rcall	.-268    	; 0xf6a <USB_Host_WaitForIOS>
    1076:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1078:	83 c0       	rjmp	.+262    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    107a:	80 91 a6 00 	lds	r24, 0x00A6
    107e:	8b 77       	andi	r24, 0x7B	; 123
    1080:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	71 df       	rcall	.-286    	; 0xf6a <USB_Host_WaitForIOS>
    1088:	7b c0       	rjmp	.+246    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    108a:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    108e:	8f 7b       	andi	r24, 0xBF	; 191
    1090:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	69 df       	rcall	.-302    	; 0xf6a <USB_Host_WaitForIOS>
    1098:	81 11       	cpse	r24, r1
    109a:	72 c0       	rjmp	.+228    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    109c:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10a0:	90 91 f7 00 	lds	r25, 0x00F7
    10a4:	89 2b       	or	r24, r25
    10a6:	11 f4       	brne	.+4      	; 0x10ac <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	d0 e0       	ldi	r29, 0x00	; 0
    10ac:	f8 01       	movw	r30, r16
    10ae:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    10b0:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    10b4:	90 91 f7 00 	lds	r25, 0x00F7
    10b8:	89 2b       	or	r24, r25
    10ba:	69 f4       	brne	.+26     	; 0x10d6 <USB_Host_SendControlRequest+0x11e>
    10bc:	80 91 a9 00 	lds	r24, 0x00A9
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    10c6:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ca:	8e 77       	andi	r24, 0x7E	; 126
    10cc:	80 93 a6 00 	sts	0x00A6, r24
    10d0:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10d2:	d9 f6       	brne	.-74     	; 0x108a <USB_Host_SendControlRequest+0xd2>
    10d4:	c3 cf       	rjmp	.-122    	; 0x105c <USB_Host_SendControlRequest+0xa4>
    10d6:	20 97       	sbiw	r28, 0x00	; 0
    10d8:	89 f3       	breq	.-30     	; 0x10bc <USB_Host_SendControlRequest+0x104>
    10da:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10de:	81 93       	st	Z+, r24
    10e0:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10e2:	e5 cf       	rjmp	.-54     	; 0x10ae <USB_Host_SendControlRequest+0xf6>
    10e4:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10e6:	11 05       	cpc	r17, r1
    10e8:	b1 f1       	breq	.+108    	; 0x1156 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    10ea:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    10ee:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10f0:	80 62       	ori	r24, 0x20	; 32
    10f2:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10f6:	80 91 a9 00 	lds	r24, 0x00A9
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	80 93 a9 00 	sts	0x00A9, r24
    1100:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1102:	20 97       	sbiw	r28, 0x00	; 0
    1104:	01 f1       	breq	.+64     	; 0x1146 <USB_Host_SendControlRequest+0x18e>
    1106:	31 df       	rcall	.-414    	; 0xf6a <USB_Host_WaitForIOS>
    1108:	81 11       	cpse	r24, r1
    110a:	3a c0       	rjmp	.+116    	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    110c:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    110e:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1112:	30 91 f7 00 	lds	r19, 0x00F7
    1116:	80 91 0e 01 	lds	r24, 0x010E
    111a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	58 f4       	brcc	.+22     	; 0x1138 <USB_Host_SendControlRequest+0x180>
    1122:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	8c 01       	movw	r16, r24
    1128:	20 81       	ld	r18, Z
    112a:	20 93 af 00 	sts	0x00AF, r18
    112e:	21 97       	sbiw	r28, 0x01	; 1
    1130:	20 97       	sbiw	r28, 0x00	; 0
    1132:	19 f0       	breq	.+6      	; 0x113a <USB_Host_SendControlRequest+0x182>
    1134:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1136:	eb cf       	rjmp	.-42     	; 0x110e <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1138:	8f 01       	movw	r16, r30
    113a:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    113e:	8b 77       	andi	r24, 0x7B	; 123
    1140:	80 93 a6 00 	sts	0x00A6, r24
    1144:	dd cf       	rjmp	.-70     	; 0x1100 <USB_Host_SendControlRequest+0x148>
    1146:	11 df       	rcall	.-478    	; 0xf6a <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1148:	81 11       	cpse	r24, r1
    114a:	1a c0       	rjmp	.+52     	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    114c:	80 91 a9 00 	lds	r24, 0x00A9
    1150:	80 64       	ori	r24, 0x40	; 64
    1152:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1156:	80 91 aa 00 	lds	r24, 0x00AA
    115a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    115c:	80 61       	ori	r24, 0x10	; 16
    115e:	80 93 aa 00 	sts	0x00AA, r24
    1162:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1166:	8f 7b       	andi	r24, 0xBF	; 191
    1168:	80 93 a9 00 	sts	0x00A9, r24
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	fd de       	rcall	.-518    	; 0xf6a <USB_Host_WaitForIOS>
    1170:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <USB_Host_SendControlRequest+0x1c8>
    1174:	80 91 a6 00 	lds	r24, 0x00A6
    1178:	8e 77       	andi	r24, 0x7E	; 126
    117a:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 91 a9 00 	lds	r25, 0x00A9
    1184:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1186:	90 93 a9 00 	sts	0x00A9, r25
    118a:	f1 10       	cpse	r15, r1
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <USB_Host_SendControlRequest+0x1e0>
    118e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1192:	9e 7f       	andi	r25, 0xFE	; 254
    1194:	90 93 9e 00 	sts	0x009E, r25
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    119e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    11aa:	ff 90       	pop	r15
    11ac:	08 95       	ret

000011ae <USB_Host_SetDeviceConfiguration>:
    11ae:	cf 93       	push	r28
				UPRST = 0;
    11b0:	c8 2f       	mov	r28, r24
    11b2:	10 92 2c 01 	sts	0x012C, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11b6:	89 e0       	ldi	r24, 0x09	; 9
    11b8:	80 93 2d 01 	sts	0x012D, r24
    11bc:	2c 2f       	mov	r18, r28
    11be:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11c0:	30 93 2f 01 	sts	0x012F, r19
    11c4:	20 93 2e 01 	sts	0x012E, r18
    11c8:	10 92 31 01 	sts	0x0131, r1
    11cc:	10 92 30 01 	sts	0x0130, r1
    11d0:	10 92 33 01 	sts	0x0133, r1
    11d4:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11d8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	eb de       	rcall	.-554    	; 0xfb8 <USB_Host_SendControlRequest>
    11e2:	81 11       	cpse	r24, r1
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <USB_Host_SetDeviceConfiguration+0x4a>
    11e6:	c0 93 2a 01 	sts	0x012A, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11ea:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <USB_Host_SetDeviceConfiguration+0x44>
    11ee:	9b e0       	ldi	r25, 0x0B	; 11
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <USB_Host_SetDeviceConfiguration+0x46>
    11f2:	9a e0       	ldi	r25, 0x0A	; 10
    11f4:	90 93 34 01 	sts	0x0134, r25
    11f8:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    11fa:	08 95       	ret

000011fc <USB_USBTask>:
    11fc:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11fe:	c0 91 a7 00 	lds	r28, 0x00A7
    1202:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1204:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1208:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    120c:	40 da       	rcall	.-2944   	; 0x68e <USB_Host_ProcessNextHostState>
    120e:	c0 93 a7 00 	sts	0x00A7, r28
    1212:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1214:	08 95       	ret

00001216 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:
    1216:	fc 01       	movw	r30, r24

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1218:	81 81       	ldd	r24, Z+1	; 0x01
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	51 f4       	brne	.+20     	; 0x1232 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    121e:	85 81       	ldd	r24, Z+5	; 0x05
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	39 f4       	brne	.+14     	; 0x1232 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
    1224:	86 81       	ldd	r24, Z+6	; 0x06
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	21 f4       	brne	.+8      	; 0x1232 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
    122a:	87 81       	ldd	r24, Z+7	; 0x07
    122c:	81 11       	cpse	r24, r1
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1c>
    1230:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1232:	82 e0       	ldi	r24, 0x02	; 2
}
    1234:	08 95       	ret

00001236 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    1236:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1238:	81 81       	ldd	r24, Z+1	; 0x01
    123a:	85 30       	cpi	r24, 0x05	; 5
    123c:	49 f4       	brne	.+18     	; 0x1250 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    123e:	83 81       	ldd	r24, Z+3	; 0x03
    1240:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	49 f4       	brne	.+18     	; 0x1258 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	79 dc       	rcall	.-1806   	; 0xb3c <Pipe_IsEndpointBound>
    124a:	81 11       	cpse	r24, r1
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    124e:	06 c0       	rjmp	.+12     	; 0x125c <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x26>
    1250:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1252:	11 f4       	brne	.+4      	; 0x1258 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1254:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1256:	08 95       	ret
    1258:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    125a:	08 95       	ret
    125c:	80 e0       	ldi	r24, 0x00	; 0
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    125e:	08 95       	ret

00001260 <MIDI_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1260:	af 92       	push	r10
#include "MIDIClassHost.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 d0       	rcall	.+0      	; 0x1276 <MIDI_Host_ConfigurePipes+0x16>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <MIDI_Host_ConfigurePipes+0x18>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8c 01       	movw	r16, r24
    127e:	7a 83       	std	Y+2, r23	; 0x02
    1280:	69 83       	std	Y+1, r22	; 0x01
    1282:	fa 01       	movw	r30, r20
    1284:	5c 83       	std	Y+4, r21	; 0x04
    1286:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    1288:	dc 01       	movw	r26, r24
    128a:	1d 96       	adiw	r26, 0x0d	; 13
    128c:	1c 92       	st	X, r1
    128e:	1e 92       	st	-X, r1
    1290:	1c 97       	sbiw	r26, 0x0c	; 12

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1292:	81 81       	ldd	r24, Z+1	; 0x01
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	09 f0       	breq	.+2      	; 0x129a <MIDI_Host_ConfigurePipes+0x3a>
    1298:	6a c0       	rjmp	.+212    	; 0x136e <MIDI_Host_ConfigurePipes+0x10e>
    129a:	c1 2c       	mov	r12, r1
    129c:	d1 2c       	mov	r13, r1
    129e:	a1 2c       	mov	r10, r1
    12a0:	b1 2c       	mov	r11, r1
    12a2:	e1 2c       	mov	r14, r1
    12a4:	f1 2c       	mov	r15, r1
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    12a6:	c1 14       	cp	r12, r1
    12a8:	d1 04       	cpc	r13, r1
    12aa:	91 f4       	brne	.+36     	; 0x12d0 <MIDI_Host_ConfigurePipes+0x70>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12ac:	4b e0       	ldi	r20, 0x0B	; 11
    12ae:	59 e0       	ldi	r21, 0x09	; 9
    12b0:	be 01       	movw	r22, r28
    12b2:	6d 5f       	subi	r22, 0xFD	; 253
    12b4:	7f 4f       	sbci	r23, 0xFF	; 255
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	24 de       	rcall	.-952    	; 0xf04 <USB_GetNextDescriptorComp>
    12bc:	81 11       	cpse	r24, r1
    12be:	59 c0       	rjmp	.+178    	; 0x1372 <MIDI_Host_ConfigurePipes+0x112>
    12c0:	cb 80       	ldd	r12, Y+3	; 0x03
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12c2:	dc 80       	ldd	r13, Y+4	; 0x04
    12c4:	e1 2c       	mov	r14, r1

			DataINEndpoint  = NULL;
    12c6:	f1 2c       	mov	r15, r1
    12c8:	e0 e0       	ldi	r30, 0x00	; 0
			DataOUTEndpoint = NULL;
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	5f 01       	movw	r10, r30
    12ce:	eb cf       	rjmp	.-42     	; 0x12a6 <MIDI_Host_ConfigurePipes+0x46>
    12d0:	4b e1       	ldi	r20, 0x1B	; 27
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12d2:	59 e0       	ldi	r21, 0x09	; 9
    12d4:	be 01       	movw	r22, r28
    12d6:	6d 5f       	subi	r22, 0xFD	; 253
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	12 de       	rcall	.-988    	; 0xf04 <USB_GetNextDescriptorComp>
    12e0:	81 11       	cpse	r24, r1
    12e2:	e4 cf       	rjmp	.-56     	; 0x12ac <MIDI_Host_ConfigurePipes+0x4c>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <MIDI_Host_ConfigurePipes+0x92>
    12ee:	7f 01       	movw	r14, r30
    12f0:	f5 01       	movw	r30, r10
		  DataINEndpoint  = EndpointData;
    12f2:	e1 14       	cp	r14, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12f4:	f1 04       	cpc	r15, r1
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12f6:	51 f3       	breq	.-44     	; 0x12cc <MIDI_Host_ConfigurePipes+0x6c>
    12f8:	30 97       	sbiw	r30, 0x00	; 0
    12fa:	41 f3       	breq	.-48     	; 0x12cc <MIDI_Host_ConfigurePipes+0x6c>
    12fc:	d7 01       	movw	r26, r14
    12fe:	14 96       	adiw	r26, 0x04	; 4
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MIDIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	15 97       	sbiw	r26, 0x05	; 5
    1306:	d8 01       	movw	r26, r16
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
    130e:	11 97       	sbiw	r26, 0x01	; 1
    1310:	d7 01       	movw	r26, r14
    1312:	12 96       	adiw	r26, 0x02	; 2
	MIDIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1314:	8c 91       	ld	r24, X
    1316:	d8 01       	movw	r26, r16
    1318:	13 96       	adiw	r26, 0x03	; 3
    131a:	8c 93       	st	X, r24
    131c:	13 97       	sbiw	r26, 0x03	; 3
    131e:	22 e0       	ldi	r18, 0x02	; 2
    1320:	14 96       	adiw	r26, 0x04	; 4
	MIDIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1322:	2c 93       	st	X, r18
    1324:	14 97       	sbiw	r26, 0x04	; 4
    1326:	84 81       	ldd	r24, Z+4	; 0x04
    1328:	95 81       	ldd	r25, Z+5	; 0x05

	MIDIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    132a:	18 96       	adiw	r26, 0x08	; 8
    132c:	9c 93       	st	X, r25
    132e:	8e 93       	st	-X, r24
    1330:	17 97       	sbiw	r26, 0x07	; 7
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	19 96       	adiw	r26, 0x09	; 9
	MIDIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1336:	8c 93       	st	X, r24
    1338:	19 97       	sbiw	r26, 0x09	; 9
    133a:	1a 96       	adiw	r26, 0x0a	; 10
    133c:	2c 93       	st	X, r18
	MIDIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	c8 01       	movw	r24, r16

	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataINPipe, 1)))
    1342:	c9 db       	rcall	.-2158   	; 0xad6 <Pipe_ConfigurePipeTable>
    1344:	81 11       	cpse	r24, r1
    1346:	02 c0       	rjmp	.+4      	; 0x134c <MIDI_Host_ConfigurePipes+0xec>
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <MIDI_Host_ConfigurePipes+0x114>
    134c:	61 e0       	ldi	r22, 0x01	; 1
	  return MIDI_ENUMERROR_PipeConfigurationFailed;
    134e:	c8 01       	movw	r24, r16
    1350:	06 96       	adiw	r24, 0x06	; 6

	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataOUTPipe, 1)))
    1352:	c1 db       	rcall	.-2174   	; 0xad6 <Pipe_ConfigurePipeTable>
    1354:	88 23       	and	r24, r24
    1356:	c1 f3       	breq	.-16     	; 0x1348 <MIDI_Host_ConfigurePipes+0xe8>
    1358:	f6 01       	movw	r30, r12
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	d8 01       	movw	r26, r16
    135e:	1d 96       	adiw	r26, 0x0d	; 13
	  return MIDI_ENUMERROR_PipeConfigurationFailed;

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    1360:	8c 93       	st	X, r24
    1362:	1d 97       	sbiw	r26, 0x0d	; 13
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	1c 96       	adiw	r26, 0x0c	; 12
    1368:	8c 93       	st	X, r24
    136a:	80 e0       	ldi	r24, 0x00	; 0
	MIDIInterfaceInfo->State.IsActive = true;
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <MIDI_Host_ConfigurePipes+0x114>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <MIDI_Host_ConfigurePipes+0x114>

	return MIDI_ENUMERROR_NoError;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
    137a:	0f 90       	pop	r0

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
	MIDIInterfaceInfo->State.IsActive = true;

	return MIDI_ENUMERROR_NoError;
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	08 95       	ret

00001392 <MIDI_Host_Flush>:
    1392:	20 91 34 01 	lds	r18, 0x0134
    1396:	2b 30       	cpi	r18, 0x0B	; 11
    1398:	41 f5       	brne	.+80     	; 0x13ea <MIDI_Host_Flush+0x58>
	#endif
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    139a:	fc 01       	movw	r30, r24
    139c:	24 85       	ldd	r18, Z+12	; 0x0c
    139e:	22 23       	and	r18, r18
    13a0:	21 f1       	breq	.+72     	; 0x13ea <MIDI_Host_Flush+0x58>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13a2:	86 81       	ldd	r24, Z+6	; 0x06
    13a4:	8f 70       	andi	r24, 0x0F	; 15
    13a6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13aa:	80 91 a9 00 	lds	r24, 0x00A9
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13b4:	80 91 f6 00 	lds	r24, 0x00F6
    13b8:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_BytesInPipe())
    13bc:	89 2b       	or	r24, r25
    13be:	71 f0       	breq	.+28     	; 0x13dc <MIDI_Host_Flush+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13c0:	80 91 a6 00 	lds	r24, 0x00A6
    13c4:	8b 77       	andi	r24, 0x7B	; 123
    13c6:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    13ca:	e2 db       	rcall	.-2108   	; 0xb90 <Pipe_WaitUntilReady>
    13cc:	88 23       	and	r24, r24
    13ce:	31 f0       	breq	.+12     	; 0x13dc <MIDI_Host_Flush+0x4a>
    13d0:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d4:	90 64       	ori	r25, 0x40	; 64
    13d6:	90 93 a9 00 	sts	0x00A9, r25
    13da:	08 95       	ret
		{
			Pipe_Freeze();
			return ErrorCode;
    13dc:	80 91 a9 00 	lds	r24, 0x00A9
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	80 93 a9 00 	sts	0x00A9, r24
    13e6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    13e8:	08 95       	ret
    13ea:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    13ec:	08 95       	ret

000013ee <MIDI_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    13ee:	20 91 34 01 	lds	r18, 0x0134
	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13f2:	2b 30       	cpi	r18, 0x0B	; 11
    13f4:	21 f4       	brne	.+8      	; 0x13fe <MIDI_Host_USBTask+0x10>
    13f6:	fc 01       	movw	r30, r24
    13f8:	24 85       	ldd	r18, Z+12	; 0x0c
    13fa:	21 11       	cpse	r18, r1
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    13fc:	ca cf       	rjmp	.-108    	; 0x1392 <MIDI_Host_Flush>
    13fe:	08 95       	ret

00001400 <MIDI_Host_SendEventPacket>:
    1400:	fc 01       	movw	r30, r24
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1402:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1404:	20 91 34 01 	lds	r18, 0x0134
    1408:	2b 30       	cpi	r18, 0x0B	; 11
    140a:	49 f5       	brne	.+82     	; 0x145e <MIDI_Host_SendEventPacket+0x5e>
    140c:	24 85       	ldd	r18, Z+12	; 0x0c
    140e:	22 23       	and	r18, r18
    1410:	31 f1       	breq	.+76     	; 0x145e <MIDI_Host_SendEventPacket+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1412:	26 81       	ldd	r18, Z+6	; 0x06
    1414:	2f 70       	andi	r18, 0x0F	; 15
    1416:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    141a:	20 91 a9 00 	lds	r18, 0x00A9
    141e:	2f 7b       	andi	r18, 0xBF	; 191
    1420:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	64 e0       	ldi	r22, 0x04	; 4
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	52 da       	rcall	.-2908   	; 0x8d2 <Pipe_Write_Stream_LE>
    142e:	88 23       	and	r24, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <MIDI_Host_SendEventPacket+0x3e>
    1432:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1436:	90 64       	ori	r25, 0x40	; 64
    1438:	90 93 a9 00 	sts	0x00A9, r25
    143c:	08 95       	ret
	{
		Pipe_Freeze();
		return ErrorCode;
    143e:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1442:	85 fd       	sbrc	r24, 5
	}

	if (!(Pipe_IsReadWriteAllowed()))
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <MIDI_Host_SendEventPacket+0x50>
    1446:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    144a:	8b 77       	andi	r24, 0x7B	; 123
    144c:	80 93 a6 00 	sts	0x00A6, r24
    1450:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	80 93 a9 00 	sts	0x00A9, r24
    145a:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    145c:	08 95       	ret
    145e:	81 e0       	ldi	r24, 0x01	; 1

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1460:	08 95       	ret

00001462 <MIDI_Host_ReceiveEventPacket>:
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1462:	fc 01       	movw	r30, r24

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1464:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1466:	20 91 34 01 	lds	r18, 0x0134
    146a:	2b 30       	cpi	r18, 0x0B	; 11
    146c:	89 f5       	brne	.+98     	; 0x14d0 <MIDI_Host_ReceiveEventPacket+0x6e>
    146e:	24 85       	ldd	r18, Z+12	; 0x0c
    1470:	22 23       	and	r18, r18
    1472:	71 f1       	breq	.+92     	; 0x14d0 <MIDI_Host_ReceiveEventPacket+0x6e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1474:	20 81       	ld	r18, Z
    1476:	2f 70       	andi	r18, 0x0F	; 15
    1478:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    147c:	20 91 a9 00 	lds	r18, 0x00A9
    1480:	2f 7b       	andi	r18, 0xBF	; 191
    1482:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1486:	20 91 a6 00 	lds	r18, 0x00A6
	bool DataReady = false;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    148a:	20 ff       	sbrs	r18, 0
    148c:	1a c0       	rjmp	.+52     	; 0x14c2 <MIDI_Host_ReceiveEventPacket+0x60>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    148e:	20 91 f6 00 	lds	r18, 0x00F6
    1492:	30 91 f7 00 	lds	r19, 0x00F7
	{
		if (Pipe_BytesInPipe())
    1496:	23 2b       	or	r18, r19
    1498:	39 f0       	breq	.+14     	; 0x14a8 <MIDI_Host_ReceiveEventPacket+0x46>
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	64 da       	rcall	.-2872   	; 0x96c <Pipe_Read_Stream_LE>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
			DataReady = true;
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <MIDI_Host_ReceiveEventPacket+0x48>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	bool DataReady = false;
    14aa:	20 91 f6 00 	lds	r18, 0x00F6
    14ae:	30 91 f7 00 	lds	r19, 0x00F7
    14b2:	23 2b       	or	r18, r19
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
			DataReady = true;
		}

		if (!(Pipe_BytesInPipe()))
    14b4:	39 f4       	brne	.+14     	; 0x14c4 <MIDI_Host_ReceiveEventPacket+0x62>
    14b6:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14ba:	9e 77       	andi	r25, 0x7E	; 126
    14bc:	90 93 a6 00 	sts	0x00A6, r25
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <MIDI_Host_ReceiveEventPacket+0x62>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	bool DataReady = false;
    14c4:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14c8:	90 64       	ori	r25, 0x40	; 64
    14ca:	90 93 a9 00 	sts	0x00A9, r25
    14ce:	08 95       	ret
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return DataReady;
    14d0:	81 e0       	ldi	r24, 0x01	; 1

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    14d2:	08 95       	ret

000014d4 <Serial_putchar>:
	}

	Pipe_Freeze();

	return DataReady;
}
    14d4:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    14d8:	95 ff       	sbrs	r25, 5
    14da:	fc cf       	rjmp	.-8      	; 0x14d4 <Serial_putchar>
				UDR1 = DataByte;
    14dc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14e6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14ea:	87 ff       	sbrs	r24, 7
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <Serial_getchar+0x18>
    14ee:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14f2:	87 ff       	sbrs	r24, 7
    14f4:	07 c0       	rjmp	.+14     	; 0x1504 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14f6:	80 91 ce 00 	lds	r24, 0x00CE
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	08 95       	ret
	  return _FDEV_EOF;
    14fe:	8e ef       	ldi	r24, 0xFE	; 254
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1508:	08 95       	ret

0000150a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    150a:	fc 01       	movw	r30, r24
	if (!(Stream))
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	59 f4       	brne	.+22     	; 0x1526 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1510:	85 e3       	ldi	r24, 0x35	; 53
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	90 93 44 01 	sts	0x0144, r25
    1518:	80 93 43 01 	sts	0x0143, r24
		stdout = Stream;
    151c:	90 93 46 01 	sts	0x0146, r25
    1520:	80 93 45 01 	sts	0x0145, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1524:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1526:	8e e0       	ldi	r24, 0x0E	; 14
    1528:	df 01       	movw	r26, r30
    152a:	1d 92       	st	X+, r1
    152c:	8a 95       	dec	r24
    152e:	e9 f7       	brne	.-6      	; 0x152a <Serial_CreateStream+0x20>
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	83 83       	std	Z+3, r24	; 0x03
    1534:	8a e6       	ldi	r24, 0x6A	; 106
    1536:	9a e0       	ldi	r25, 0x0A	; 10
    1538:	91 87       	std	Z+9, r25	; 0x09
    153a:	80 87       	std	Z+8, r24	; 0x08
    153c:	83 e7       	ldi	r24, 0x73	; 115
    153e:	9a e0       	ldi	r25, 0x0A	; 10
    1540:	93 87       	std	Z+11, r25	; 0x0b
    1542:	82 87       	std	Z+10, r24	; 0x0a
    1544:	08 95       	ret

00001546 <printf_P>:
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	fe 01       	movw	r30, r28
    1554:	37 96       	adiw	r30, 0x07	; 7
    1556:	61 91       	ld	r22, Z+
    1558:	71 91       	ld	r23, Z+
    155a:	05 e4       	ldi	r16, 0x45	; 69
    155c:	11 e0       	ldi	r17, 0x01	; 1
    155e:	d8 01       	movw	r26, r16
    1560:	8d 91       	ld	r24, X+
    1562:	9c 91       	ld	r25, X
    1564:	dc 01       	movw	r26, r24
    1566:	13 96       	adiw	r26, 0x03	; 3
    1568:	2c 91       	ld	r18, X
    156a:	13 97       	sbiw	r26, 0x03	; 3
    156c:	28 60       	ori	r18, 0x08	; 8
    156e:	13 96       	adiw	r26, 0x03	; 3
    1570:	2c 93       	st	X, r18
    1572:	af 01       	movw	r20, r30
    1574:	3a d0       	rcall	.+116    	; 0x15ea <vfprintf>
    1576:	d8 01       	movw	r26, r16
    1578:	ed 91       	ld	r30, X+
    157a:	fc 91       	ld	r31, X
    157c:	23 81       	ldd	r18, Z+3	; 0x03
    157e:	27 7f       	andi	r18, 0xF7	; 247
    1580:	23 83       	std	Z+3, r18	; 0x03
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <puts_P>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
    1596:	e0 91 45 01 	lds	r30, 0x0145
    159a:	f0 91 46 01 	lds	r31, 0x0146
    159e:	83 81       	ldd	r24, Z+3	; 0x03
    15a0:	81 ff       	sbrs	r24, 1
    15a2:	1c c0       	rjmp	.+56     	; 0x15dc <puts_P+0x50>
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	fe 01       	movw	r30, r28
    15aa:	84 91       	lpm	r24, Z
    15ac:	60 91 45 01 	lds	r22, 0x0145
    15b0:	70 91 46 01 	lds	r23, 0x0146
    15b4:	db 01       	movw	r26, r22
    15b6:	18 96       	adiw	r26, 0x08	; 8
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	19 97       	sbiw	r26, 0x09	; 9
    15be:	88 23       	and	r24, r24
    15c0:	39 f0       	breq	.+14     	; 0x15d0 <puts_P+0x44>
    15c2:	09 95       	icall
    15c4:	89 2b       	or	r24, r25
    15c6:	11 f0       	breq	.+4      	; 0x15cc <puts_P+0x40>
    15c8:	0f ef       	ldi	r16, 0xFF	; 255
    15ca:	1f ef       	ldi	r17, 0xFF	; 255
    15cc:	21 96       	adiw	r28, 0x01	; 1
    15ce:	ec cf       	rjmp	.-40     	; 0x15a8 <puts_P+0x1c>
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	09 95       	icall
    15d4:	89 2b       	or	r24, r25
    15d6:	11 f4       	brne	.+4      	; 0x15dc <puts_P+0x50>
    15d8:	c8 01       	movw	r24, r16
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <puts_P+0x54>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <vfprintf>:
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	2c 97       	sbiw	r28, 0x0c	; 12
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	7c 01       	movw	r14, r24
    1620:	6b 01       	movw	r12, r22
    1622:	8a 01       	movw	r16, r20
    1624:	fc 01       	movw	r30, r24
    1626:	17 82       	std	Z+7, r1	; 0x07
    1628:	16 82       	std	Z+6, r1	; 0x06
    162a:	83 81       	ldd	r24, Z+3	; 0x03
    162c:	81 ff       	sbrs	r24, 1
    162e:	b0 c1       	rjmp	.+864    	; 0x1990 <vfprintf+0x3a6>
    1630:	ce 01       	movw	r24, r28
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	4c 01       	movw	r8, r24
    1636:	f7 01       	movw	r30, r14
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	f6 01       	movw	r30, r12
    163c:	93 fd       	sbrc	r25, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	93 ff       	sbrs	r25, 3
    1642:	81 91       	ld	r24, Z+
    1644:	6f 01       	movw	r12, r30
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <vfprintf+0x62>
    164a:	9e c1       	rjmp	.+828    	; 0x1988 <vfprintf+0x39e>
    164c:	85 32       	cpi	r24, 0x25	; 37
    164e:	39 f4       	brne	.+14     	; 0x165e <vfprintf+0x74>
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	6f 01       	movw	r12, r30
    165a:	85 32       	cpi	r24, 0x25	; 37
    165c:	21 f4       	brne	.+8      	; 0x1666 <vfprintf+0x7c>
    165e:	b7 01       	movw	r22, r14
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	c7 d1       	rcall	.+910    	; 0x19f2 <fputc>
    1664:	e8 cf       	rjmp	.-48     	; 0x1636 <vfprintf+0x4c>
    1666:	51 2c       	mov	r5, r1
    1668:	31 2c       	mov	r3, r1
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	20 32       	cpi	r18, 0x20	; 32
    166e:	a0 f4       	brcc	.+40     	; 0x1698 <vfprintf+0xae>
    1670:	8b 32       	cpi	r24, 0x2B	; 43
    1672:	69 f0       	breq	.+26     	; 0x168e <vfprintf+0xa4>
    1674:	30 f4       	brcc	.+12     	; 0x1682 <vfprintf+0x98>
    1676:	80 32       	cpi	r24, 0x20	; 32
    1678:	59 f0       	breq	.+22     	; 0x1690 <vfprintf+0xa6>
    167a:	83 32       	cpi	r24, 0x23	; 35
    167c:	69 f4       	brne	.+26     	; 0x1698 <vfprintf+0xae>
    167e:	20 61       	ori	r18, 0x10	; 16
    1680:	2c c0       	rjmp	.+88     	; 0x16da <vfprintf+0xf0>
    1682:	8d 32       	cpi	r24, 0x2D	; 45
    1684:	39 f0       	breq	.+14     	; 0x1694 <vfprintf+0xaa>
    1686:	80 33       	cpi	r24, 0x30	; 48
    1688:	39 f4       	brne	.+14     	; 0x1698 <vfprintf+0xae>
    168a:	21 60       	ori	r18, 0x01	; 1
    168c:	26 c0       	rjmp	.+76     	; 0x16da <vfprintf+0xf0>
    168e:	22 60       	ori	r18, 0x02	; 2
    1690:	24 60       	ori	r18, 0x04	; 4
    1692:	23 c0       	rjmp	.+70     	; 0x16da <vfprintf+0xf0>
    1694:	28 60       	ori	r18, 0x08	; 8
    1696:	21 c0       	rjmp	.+66     	; 0x16da <vfprintf+0xf0>
    1698:	27 fd       	sbrc	r18, 7
    169a:	27 c0       	rjmp	.+78     	; 0x16ea <vfprintf+0x100>
    169c:	30 ed       	ldi	r19, 0xD0	; 208
    169e:	38 0f       	add	r19, r24
    16a0:	3a 30       	cpi	r19, 0x0A	; 10
    16a2:	78 f4       	brcc	.+30     	; 0x16c2 <vfprintf+0xd8>
    16a4:	26 ff       	sbrs	r18, 6
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0xca>
    16a8:	fa e0       	ldi	r31, 0x0A	; 10
    16aa:	5f 9e       	mul	r5, r31
    16ac:	30 0d       	add	r19, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	53 2e       	mov	r5, r19
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <vfprintf+0xf0>
    16b4:	8a e0       	ldi	r24, 0x0A	; 10
    16b6:	38 9e       	mul	r3, r24
    16b8:	30 0d       	add	r19, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	33 2e       	mov	r3, r19
    16be:	20 62       	ori	r18, 0x20	; 32
    16c0:	0c c0       	rjmp	.+24     	; 0x16da <vfprintf+0xf0>
    16c2:	8e 32       	cpi	r24, 0x2E	; 46
    16c4:	21 f4       	brne	.+8      	; 0x16ce <vfprintf+0xe4>
    16c6:	26 fd       	sbrc	r18, 6
    16c8:	5f c1       	rjmp	.+702    	; 0x1988 <vfprintf+0x39e>
    16ca:	20 64       	ori	r18, 0x40	; 64
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <vfprintf+0xf0>
    16ce:	8c 36       	cpi	r24, 0x6C	; 108
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <vfprintf+0xec>
    16d2:	20 68       	ori	r18, 0x80	; 128
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0xf0>
    16d6:	88 36       	cpi	r24, 0x68	; 104
    16d8:	41 f4       	brne	.+16     	; 0x16ea <vfprintf+0x100>
    16da:	f6 01       	movw	r30, r12
    16dc:	93 fd       	sbrc	r25, 3
    16de:	85 91       	lpm	r24, Z+
    16e0:	93 ff       	sbrs	r25, 3
    16e2:	81 91       	ld	r24, Z+
    16e4:	6f 01       	movw	r12, r30
    16e6:	81 11       	cpse	r24, r1
    16e8:	c1 cf       	rjmp	.-126    	; 0x166c <vfprintf+0x82>
    16ea:	98 2f       	mov	r25, r24
    16ec:	9f 7d       	andi	r25, 0xDF	; 223
    16ee:	95 54       	subi	r25, 0x45	; 69
    16f0:	93 30       	cpi	r25, 0x03	; 3
    16f2:	28 f4       	brcc	.+10     	; 0x16fe <vfprintf+0x114>
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	ff e3       	ldi	r31, 0x3F	; 63
    16fa:	f9 83       	std	Y+1, r31	; 0x01
    16fc:	0d c0       	rjmp	.+26     	; 0x1718 <vfprintf+0x12e>
    16fe:	83 36       	cpi	r24, 0x63	; 99
    1700:	31 f0       	breq	.+12     	; 0x170e <vfprintf+0x124>
    1702:	83 37       	cpi	r24, 0x73	; 115
    1704:	71 f0       	breq	.+28     	; 0x1722 <vfprintf+0x138>
    1706:	83 35       	cpi	r24, 0x53	; 83
    1708:	09 f0       	breq	.+2      	; 0x170c <vfprintf+0x122>
    170a:	57 c0       	rjmp	.+174    	; 0x17ba <vfprintf+0x1d0>
    170c:	21 c0       	rjmp	.+66     	; 0x1750 <vfprintf+0x166>
    170e:	f8 01       	movw	r30, r16
    1710:	80 81       	ld	r24, Z
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	0e 5f       	subi	r16, 0xFE	; 254
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	44 24       	eor	r4, r4
    171a:	43 94       	inc	r4
    171c:	51 2c       	mov	r5, r1
    171e:	54 01       	movw	r10, r8
    1720:	14 c0       	rjmp	.+40     	; 0x174a <vfprintf+0x160>
    1722:	38 01       	movw	r6, r16
    1724:	f2 e0       	ldi	r31, 0x02	; 2
    1726:	6f 0e       	add	r6, r31
    1728:	71 1c       	adc	r7, r1
    172a:	f8 01       	movw	r30, r16
    172c:	a0 80       	ld	r10, Z
    172e:	b1 80       	ldd	r11, Z+1	; 0x01
    1730:	26 ff       	sbrs	r18, 6
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x150>
    1734:	65 2d       	mov	r22, r5
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x154>
    173a:	6f ef       	ldi	r22, 0xFF	; 255
    173c:	7f ef       	ldi	r23, 0xFF	; 255
    173e:	c5 01       	movw	r24, r10
    1740:	2c 87       	std	Y+12, r18	; 0x0c
    1742:	4c d1       	rcall	.+664    	; 0x19dc <strnlen>
    1744:	2c 01       	movw	r4, r24
    1746:	83 01       	movw	r16, r6
    1748:	2c 85       	ldd	r18, Y+12	; 0x0c
    174a:	2f 77       	andi	r18, 0x7F	; 127
    174c:	22 2e       	mov	r2, r18
    174e:	16 c0       	rjmp	.+44     	; 0x177c <vfprintf+0x192>
    1750:	38 01       	movw	r6, r16
    1752:	f2 e0       	ldi	r31, 0x02	; 2
    1754:	6f 0e       	add	r6, r31
    1756:	71 1c       	adc	r7, r1
    1758:	f8 01       	movw	r30, r16
    175a:	a0 80       	ld	r10, Z
    175c:	b1 80       	ldd	r11, Z+1	; 0x01
    175e:	26 ff       	sbrs	r18, 6
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <vfprintf+0x17e>
    1762:	65 2d       	mov	r22, r5
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x182>
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	7f ef       	ldi	r23, 0xFF	; 255
    176c:	c5 01       	movw	r24, r10
    176e:	2c 87       	std	Y+12, r18	; 0x0c
    1770:	2a d1       	rcall	.+596    	; 0x19c6 <strnlen_P>
    1772:	2c 01       	movw	r4, r24
    1774:	2c 85       	ldd	r18, Y+12	; 0x0c
    1776:	20 68       	ori	r18, 0x80	; 128
    1778:	22 2e       	mov	r2, r18
    177a:	83 01       	movw	r16, r6
    177c:	23 fc       	sbrc	r2, 3
    177e:	19 c0       	rjmp	.+50     	; 0x17b2 <vfprintf+0x1c8>
    1780:	83 2d       	mov	r24, r3
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	48 16       	cp	r4, r24
    1786:	59 06       	cpc	r5, r25
    1788:	a0 f4       	brcc	.+40     	; 0x17b2 <vfprintf+0x1c8>
    178a:	b7 01       	movw	r22, r14
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	30 d1       	rcall	.+608    	; 0x19f2 <fputc>
    1792:	3a 94       	dec	r3
    1794:	f5 cf       	rjmp	.-22     	; 0x1780 <vfprintf+0x196>
    1796:	f5 01       	movw	r30, r10
    1798:	27 fc       	sbrc	r2, 7
    179a:	85 91       	lpm	r24, Z+
    179c:	27 fe       	sbrs	r2, 7
    179e:	81 91       	ld	r24, Z+
    17a0:	5f 01       	movw	r10, r30
    17a2:	b7 01       	movw	r22, r14
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	25 d1       	rcall	.+586    	; 0x19f2 <fputc>
    17a8:	31 10       	cpse	r3, r1
    17aa:	3a 94       	dec	r3
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	4f 1a       	sub	r4, r31
    17b0:	51 08       	sbc	r5, r1
    17b2:	41 14       	cp	r4, r1
    17b4:	51 04       	cpc	r5, r1
    17b6:	79 f7       	brne	.-34     	; 0x1796 <vfprintf+0x1ac>
    17b8:	de c0       	rjmp	.+444    	; 0x1976 <vfprintf+0x38c>
    17ba:	84 36       	cpi	r24, 0x64	; 100
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <vfprintf+0x1d8>
    17be:	89 36       	cpi	r24, 0x69	; 105
    17c0:	31 f5       	brne	.+76     	; 0x180e <vfprintf+0x224>
    17c2:	f8 01       	movw	r30, r16
    17c4:	27 ff       	sbrs	r18, 7
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <vfprintf+0x1ec>
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	0c 5f       	subi	r16, 0xFC	; 252
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <vfprintf+0x1fc>
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	88 27       	eor	r24, r24
    17dc:	77 fd       	sbrc	r23, 7
    17de:	80 95       	com	r24
    17e0:	98 2f       	mov	r25, r24
    17e2:	0e 5f       	subi	r16, 0xFE	; 254
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	2f 76       	andi	r18, 0x6F	; 111
    17e8:	b2 2e       	mov	r11, r18
    17ea:	97 ff       	sbrs	r25, 7
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <vfprintf+0x216>
    17ee:	90 95       	com	r25
    17f0:	80 95       	com	r24
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	20 68       	ori	r18, 0x80	; 128
    17fe:	b2 2e       	mov	r11, r18
    1800:	2a e0       	ldi	r18, 0x0A	; 10
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	a4 01       	movw	r20, r8
    1806:	27 d1       	rcall	.+590    	; 0x1a56 <__ultoa_invert>
    1808:	a8 2e       	mov	r10, r24
    180a:	a8 18       	sub	r10, r8
    180c:	43 c0       	rjmp	.+134    	; 0x1894 <vfprintf+0x2aa>
    180e:	85 37       	cpi	r24, 0x75	; 117
    1810:	29 f4       	brne	.+10     	; 0x181c <vfprintf+0x232>
    1812:	2f 7e       	andi	r18, 0xEF	; 239
    1814:	b2 2e       	mov	r11, r18
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	25 c0       	rjmp	.+74     	; 0x1866 <vfprintf+0x27c>
    181c:	f2 2f       	mov	r31, r18
    181e:	f9 7f       	andi	r31, 0xF9	; 249
    1820:	bf 2e       	mov	r11, r31
    1822:	8f 36       	cpi	r24, 0x6F	; 111
    1824:	c1 f0       	breq	.+48     	; 0x1856 <vfprintf+0x26c>
    1826:	18 f4       	brcc	.+6      	; 0x182e <vfprintf+0x244>
    1828:	88 35       	cpi	r24, 0x58	; 88
    182a:	79 f0       	breq	.+30     	; 0x184a <vfprintf+0x260>
    182c:	ad c0       	rjmp	.+346    	; 0x1988 <vfprintf+0x39e>
    182e:	80 37       	cpi	r24, 0x70	; 112
    1830:	19 f0       	breq	.+6      	; 0x1838 <vfprintf+0x24e>
    1832:	88 37       	cpi	r24, 0x78	; 120
    1834:	21 f0       	breq	.+8      	; 0x183e <vfprintf+0x254>
    1836:	a8 c0       	rjmp	.+336    	; 0x1988 <vfprintf+0x39e>
    1838:	2f 2f       	mov	r18, r31
    183a:	20 61       	ori	r18, 0x10	; 16
    183c:	b2 2e       	mov	r11, r18
    183e:	b4 fe       	sbrs	r11, 4
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x272>
    1842:	8b 2d       	mov	r24, r11
    1844:	84 60       	ori	r24, 0x04	; 4
    1846:	b8 2e       	mov	r11, r24
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x272>
    184a:	24 ff       	sbrs	r18, 4
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <vfprintf+0x278>
    184e:	9f 2f       	mov	r25, r31
    1850:	96 60       	ori	r25, 0x06	; 6
    1852:	b9 2e       	mov	r11, r25
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x278>
    1856:	28 e0       	ldi	r18, 0x08	; 8
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x27c>
    185c:	20 e1       	ldi	r18, 0x10	; 16
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x27c>
    1862:	20 e1       	ldi	r18, 0x10	; 16
    1864:	32 e0       	ldi	r19, 0x02	; 2
    1866:	f8 01       	movw	r30, r16
    1868:	b7 fe       	sbrs	r11, 7
    186a:	07 c0       	rjmp	.+14     	; 0x187a <vfprintf+0x290>
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	0c 5f       	subi	r16, 0xFC	; 252
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x29c>
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	a4 01       	movw	r20, r8
    1888:	e6 d0       	rcall	.+460    	; 0x1a56 <__ultoa_invert>
    188a:	a8 2e       	mov	r10, r24
    188c:	a8 18       	sub	r10, r8
    188e:	fb 2d       	mov	r31, r11
    1890:	ff 77       	andi	r31, 0x7F	; 127
    1892:	bf 2e       	mov	r11, r31
    1894:	b6 fe       	sbrs	r11, 6
    1896:	0b c0       	rjmp	.+22     	; 0x18ae <vfprintf+0x2c4>
    1898:	2b 2d       	mov	r18, r11
    189a:	2e 7f       	andi	r18, 0xFE	; 254
    189c:	a5 14       	cp	r10, r5
    189e:	50 f4       	brcc	.+20     	; 0x18b4 <vfprintf+0x2ca>
    18a0:	b4 fe       	sbrs	r11, 4
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <vfprintf+0x2ce>
    18a4:	b2 fc       	sbrc	r11, 2
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <vfprintf+0x2ce>
    18a8:	2b 2d       	mov	r18, r11
    18aa:	2e 7e       	andi	r18, 0xEE	; 238
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <vfprintf+0x2ce>
    18ae:	7a 2c       	mov	r7, r10
    18b0:	2b 2d       	mov	r18, r11
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <vfprintf+0x2d0>
    18b4:	7a 2c       	mov	r7, r10
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <vfprintf+0x2d0>
    18b8:	75 2c       	mov	r7, r5
    18ba:	24 ff       	sbrs	r18, 4
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <vfprintf+0x2ee>
    18be:	fe 01       	movw	r30, r28
    18c0:	ea 0d       	add	r30, r10
    18c2:	f1 1d       	adc	r31, r1
    18c4:	80 81       	ld	r24, Z
    18c6:	80 33       	cpi	r24, 0x30	; 48
    18c8:	11 f4       	brne	.+4      	; 0x18ce <vfprintf+0x2e4>
    18ca:	29 7e       	andi	r18, 0xE9	; 233
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <vfprintf+0x2f6>
    18ce:	22 ff       	sbrs	r18, 2
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x2f4>
    18d2:	73 94       	inc	r7
    18d4:	73 94       	inc	r7
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <vfprintf+0x2f6>
    18d8:	82 2f       	mov	r24, r18
    18da:	86 78       	andi	r24, 0x86	; 134
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <vfprintf+0x2f6>
    18de:	73 94       	inc	r7
    18e0:	23 fd       	sbrc	r18, 3
    18e2:	12 c0       	rjmp	.+36     	; 0x1908 <vfprintf+0x31e>
    18e4:	20 ff       	sbrs	r18, 0
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <vfprintf+0x30a>
    18e8:	5a 2c       	mov	r5, r10
    18ea:	73 14       	cp	r7, r3
    18ec:	18 f4       	brcc	.+6      	; 0x18f4 <vfprintf+0x30a>
    18ee:	53 0c       	add	r5, r3
    18f0:	57 18       	sub	r5, r7
    18f2:	73 2c       	mov	r7, r3
    18f4:	73 14       	cp	r7, r3
    18f6:	60 f4       	brcc	.+24     	; 0x1910 <vfprintf+0x326>
    18f8:	b7 01       	movw	r22, r14
    18fa:	80 e2       	ldi	r24, 0x20	; 32
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2c 87       	std	Y+12, r18	; 0x0c
    1900:	78 d0       	rcall	.+240    	; 0x19f2 <fputc>
    1902:	73 94       	inc	r7
    1904:	2c 85       	ldd	r18, Y+12	; 0x0c
    1906:	f6 cf       	rjmp	.-20     	; 0x18f4 <vfprintf+0x30a>
    1908:	73 14       	cp	r7, r3
    190a:	10 f4       	brcc	.+4      	; 0x1910 <vfprintf+0x326>
    190c:	37 18       	sub	r3, r7
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <vfprintf+0x328>
    1910:	31 2c       	mov	r3, r1
    1912:	24 ff       	sbrs	r18, 4
    1914:	11 c0       	rjmp	.+34     	; 0x1938 <vfprintf+0x34e>
    1916:	b7 01       	movw	r22, r14
    1918:	80 e3       	ldi	r24, 0x30	; 48
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	2c 87       	std	Y+12, r18	; 0x0c
    191e:	69 d0       	rcall	.+210    	; 0x19f2 <fputc>
    1920:	2c 85       	ldd	r18, Y+12	; 0x0c
    1922:	22 ff       	sbrs	r18, 2
    1924:	16 c0       	rjmp	.+44     	; 0x1952 <vfprintf+0x368>
    1926:	21 ff       	sbrs	r18, 1
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <vfprintf+0x346>
    192a:	88 e5       	ldi	r24, 0x58	; 88
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x34a>
    1930:	88 e7       	ldi	r24, 0x78	; 120
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	b7 01       	movw	r22, r14
    1936:	0c c0       	rjmp	.+24     	; 0x1950 <vfprintf+0x366>
    1938:	82 2f       	mov	r24, r18
    193a:	86 78       	andi	r24, 0x86	; 134
    193c:	51 f0       	breq	.+20     	; 0x1952 <vfprintf+0x368>
    193e:	21 fd       	sbrc	r18, 1
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x35c>
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <vfprintf+0x35e>
    1946:	8b e2       	ldi	r24, 0x2B	; 43
    1948:	27 fd       	sbrc	r18, 7
    194a:	8d e2       	ldi	r24, 0x2D	; 45
    194c:	b7 01       	movw	r22, r14
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	50 d0       	rcall	.+160    	; 0x19f2 <fputc>
    1952:	a5 14       	cp	r10, r5
    1954:	30 f4       	brcc	.+12     	; 0x1962 <vfprintf+0x378>
    1956:	b7 01       	movw	r22, r14
    1958:	80 e3       	ldi	r24, 0x30	; 48
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	4a d0       	rcall	.+148    	; 0x19f2 <fputc>
    195e:	5a 94       	dec	r5
    1960:	f8 cf       	rjmp	.-16     	; 0x1952 <vfprintf+0x368>
    1962:	aa 94       	dec	r10
    1964:	f4 01       	movw	r30, r8
    1966:	ea 0d       	add	r30, r10
    1968:	f1 1d       	adc	r31, r1
    196a:	80 81       	ld	r24, Z
    196c:	b7 01       	movw	r22, r14
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	40 d0       	rcall	.+128    	; 0x19f2 <fputc>
    1972:	a1 10       	cpse	r10, r1
    1974:	f6 cf       	rjmp	.-20     	; 0x1962 <vfprintf+0x378>
    1976:	33 20       	and	r3, r3
    1978:	09 f4       	brne	.+2      	; 0x197c <vfprintf+0x392>
    197a:	5d ce       	rjmp	.-838    	; 0x1636 <vfprintf+0x4c>
    197c:	b7 01       	movw	r22, r14
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	37 d0       	rcall	.+110    	; 0x19f2 <fputc>
    1984:	3a 94       	dec	r3
    1986:	f7 cf       	rjmp	.-18     	; 0x1976 <vfprintf+0x38c>
    1988:	f7 01       	movw	r30, r14
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfprintf+0x3aa>
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	9f ef       	ldi	r25, 0xFF	; 255
    1994:	2c 96       	adiw	r28, 0x0c	; 12
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	7f 90       	pop	r7
    19ba:	6f 90       	pop	r6
    19bc:	5f 90       	pop	r5
    19be:	4f 90       	pop	r4
    19c0:	3f 90       	pop	r3
    19c2:	2f 90       	pop	r2
    19c4:	08 95       	ret

000019c6 <strnlen_P>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	05 90       	lpm	r0, Z+
    19ca:	61 50       	subi	r22, 0x01	; 1
    19cc:	70 40       	sbci	r23, 0x00	; 0
    19ce:	01 10       	cpse	r0, r1
    19d0:	d8 f7       	brcc	.-10     	; 0x19c8 <strnlen_P+0x2>
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	8e 0f       	add	r24, r30
    19d8:	9f 1f       	adc	r25, r31
    19da:	08 95       	ret

000019dc <strnlen>:
    19dc:	fc 01       	movw	r30, r24
    19de:	61 50       	subi	r22, 0x01	; 1
    19e0:	70 40       	sbci	r23, 0x00	; 0
    19e2:	01 90       	ld	r0, Z+
    19e4:	01 10       	cpse	r0, r1
    19e6:	d8 f7       	brcc	.-10     	; 0x19de <strnlen+0x2>
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	8e 0f       	add	r24, r30
    19ee:	9f 1f       	adc	r25, r31
    19f0:	08 95       	ret

000019f2 <fputc>:
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	18 2f       	mov	r17, r24
    19fc:	09 2f       	mov	r16, r25
    19fe:	eb 01       	movw	r28, r22
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	81 fd       	sbrc	r24, 1
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <fputc+0x1a>
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	20 c0       	rjmp	.+64     	; 0x1a4c <fputc+0x5a>
    1a0c:	82 ff       	sbrs	r24, 2
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <fputc+0x3e>
    1a10:	4e 81       	ldd	r20, Y+6	; 0x06
    1a12:	5f 81       	ldd	r21, Y+7	; 0x07
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	42 17       	cp	r20, r18
    1a1a:	53 07       	cpc	r21, r19
    1a1c:	7c f4       	brge	.+30     	; 0x1a3c <fputc+0x4a>
    1a1e:	e8 81       	ld	r30, Y
    1a20:	f9 81       	ldd	r31, Y+1	; 0x01
    1a22:	9f 01       	movw	r18, r30
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	39 83       	std	Y+1, r19	; 0x01
    1a2a:	28 83       	st	Y, r18
    1a2c:	10 83       	st	Z, r17
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <fputc+0x4a>
    1a30:	e8 85       	ldd	r30, Y+8	; 0x08
    1a32:	f9 85       	ldd	r31, Y+9	; 0x09
    1a34:	81 2f       	mov	r24, r17
    1a36:	09 95       	icall
    1a38:	89 2b       	or	r24, r25
    1a3a:	29 f7       	brne	.-54     	; 0x1a06 <fputc+0x14>
    1a3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	3f 83       	std	Y+7, r19	; 0x07
    1a46:	2e 83       	std	Y+6, r18	; 0x06
    1a48:	81 2f       	mov	r24, r17
    1a4a:	90 2f       	mov	r25, r16
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <__ultoa_invert>:
    1a56:	fa 01       	movw	r30, r20
    1a58:	aa 27       	eor	r26, r26
    1a5a:	28 30       	cpi	r18, 0x08	; 8
    1a5c:	51 f1       	breq	.+84     	; 0x1ab2 <__ultoa_invert+0x5c>
    1a5e:	20 31       	cpi	r18, 0x10	; 16
    1a60:	81 f1       	breq	.+96     	; 0x1ac2 <__ultoa_invert+0x6c>
    1a62:	e8 94       	clt
    1a64:	6f 93       	push	r22
    1a66:	6e 7f       	andi	r22, 0xFE	; 254
    1a68:	6e 5f       	subi	r22, 0xFE	; 254
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	af 4f       	sbci	r26, 0xFF	; 255
    1a72:	b1 e0       	ldi	r27, 0x01	; 1
    1a74:	3e d0       	rcall	.+124    	; 0x1af2 <__ultoa_invert+0x9c>
    1a76:	b4 e0       	ldi	r27, 0x04	; 4
    1a78:	3c d0       	rcall	.+120    	; 0x1af2 <__ultoa_invert+0x9c>
    1a7a:	67 0f       	add	r22, r23
    1a7c:	78 1f       	adc	r23, r24
    1a7e:	89 1f       	adc	r24, r25
    1a80:	9a 1f       	adc	r25, r26
    1a82:	a1 1d       	adc	r26, r1
    1a84:	68 0f       	add	r22, r24
    1a86:	79 1f       	adc	r23, r25
    1a88:	8a 1f       	adc	r24, r26
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	a1 1d       	adc	r26, r1
    1a8e:	6a 0f       	add	r22, r26
    1a90:	71 1d       	adc	r23, r1
    1a92:	81 1d       	adc	r24, r1
    1a94:	91 1d       	adc	r25, r1
    1a96:	a1 1d       	adc	r26, r1
    1a98:	20 d0       	rcall	.+64     	; 0x1ada <__ultoa_invert+0x84>
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <__ultoa_invert+0x48>
    1a9c:	68 94       	set
    1a9e:	3f 91       	pop	r19
    1aa0:	2a e0       	ldi	r18, 0x0A	; 10
    1aa2:	26 9f       	mul	r18, r22
    1aa4:	11 24       	eor	r1, r1
    1aa6:	30 19       	sub	r19, r0
    1aa8:	30 5d       	subi	r19, 0xD0	; 208
    1aaa:	31 93       	st	Z+, r19
    1aac:	de f6       	brtc	.-74     	; 0x1a64 <__ultoa_invert+0xe>
    1aae:	cf 01       	movw	r24, r30
    1ab0:	08 95       	ret
    1ab2:	46 2f       	mov	r20, r22
    1ab4:	47 70       	andi	r20, 0x07	; 7
    1ab6:	40 5d       	subi	r20, 0xD0	; 208
    1ab8:	41 93       	st	Z+, r20
    1aba:	b3 e0       	ldi	r27, 0x03	; 3
    1abc:	0f d0       	rcall	.+30     	; 0x1adc <__ultoa_invert+0x86>
    1abe:	c9 f7       	brne	.-14     	; 0x1ab2 <__ultoa_invert+0x5c>
    1ac0:	f6 cf       	rjmp	.-20     	; 0x1aae <__ultoa_invert+0x58>
    1ac2:	46 2f       	mov	r20, r22
    1ac4:	4f 70       	andi	r20, 0x0F	; 15
    1ac6:	40 5d       	subi	r20, 0xD0	; 208
    1ac8:	4a 33       	cpi	r20, 0x3A	; 58
    1aca:	18 f0       	brcs	.+6      	; 0x1ad2 <__ultoa_invert+0x7c>
    1acc:	49 5d       	subi	r20, 0xD9	; 217
    1ace:	31 fd       	sbrc	r19, 1
    1ad0:	40 52       	subi	r20, 0x20	; 32
    1ad2:	41 93       	st	Z+, r20
    1ad4:	02 d0       	rcall	.+4      	; 0x1ada <__ultoa_invert+0x84>
    1ad6:	a9 f7       	brne	.-22     	; 0x1ac2 <__ultoa_invert+0x6c>
    1ad8:	ea cf       	rjmp	.-44     	; 0x1aae <__ultoa_invert+0x58>
    1ada:	b4 e0       	ldi	r27, 0x04	; 4
    1adc:	a6 95       	lsr	r26
    1ade:	97 95       	ror	r25
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	ba 95       	dec	r27
    1ae8:	c9 f7       	brne	.-14     	; 0x1adc <__ultoa_invert+0x86>
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	61 05       	cpc	r22, r1
    1aee:	71 05       	cpc	r23, r1
    1af0:	08 95       	ret
    1af2:	9b 01       	movw	r18, r22
    1af4:	ac 01       	movw	r20, r24
    1af6:	0a 2e       	mov	r0, r26
    1af8:	06 94       	lsr	r0
    1afa:	57 95       	ror	r21
    1afc:	47 95       	ror	r20
    1afe:	37 95       	ror	r19
    1b00:	27 95       	ror	r18
    1b02:	ba 95       	dec	r27
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__ultoa_invert+0xa2>
    1b06:	62 0f       	add	r22, r18
    1b08:	73 1f       	adc	r23, r19
    1b0a:	84 1f       	adc	r24, r20
    1b0c:	95 1f       	adc	r25, r21
    1b0e:	a0 1d       	adc	r26, r0
    1b10:	08 95       	ret

00001b12 <_exit>:
    1b12:	f8 94       	cli

00001b14 <__stop_program>:
    1b14:	ff cf       	rjmp	.-2      	; 0x1b14 <__stop_program>


AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000fb6  0000104a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800112  00800112  0000105c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a9bf  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b8b  00000000  00000000  0000cc93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000408f  00000000  00000000  0000f81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f38  00000000  00000000  000138b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000426c  00000000  00000000  000147e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067ab  00000000  00000000  00018a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
   2:	00 00       	nop
   4:	ca c0       	rjmp	.+404    	; 0x19a <__bad_interrupt>
   6:	00 00       	nop
   8:	c8 c0       	rjmp	.+400    	; 0x19a <__bad_interrupt>
   a:	00 00       	nop
   c:	c6 c0       	rjmp	.+396    	; 0x19a <__bad_interrupt>
   e:	00 00       	nop
  10:	c4 c0       	rjmp	.+392    	; 0x19a <__bad_interrupt>
  12:	00 00       	nop
  14:	c2 c0       	rjmp	.+388    	; 0x19a <__bad_interrupt>
  16:	00 00       	nop
  18:	c0 c0       	rjmp	.+384    	; 0x19a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	be c0       	rjmp	.+380    	; 0x19a <__bad_interrupt>
  1e:	00 00       	nop
  20:	bc c0       	rjmp	.+376    	; 0x19a <__bad_interrupt>
  22:	00 00       	nop
  24:	ba c0       	rjmp	.+372    	; 0x19a <__bad_interrupt>
  26:	00 00       	nop
  28:	ec c3       	rjmp	.+2008   	; 0x802 <__vector_10>
  2a:	00 00       	nop
  2c:	b6 c0       	rjmp	.+364    	; 0x19a <__bad_interrupt>
  2e:	00 00       	nop
  30:	b4 c0       	rjmp	.+360    	; 0x19a <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c0       	rjmp	.+356    	; 0x19a <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	b0 c0       	rjmp	.+352    	; 0x19a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ae c0       	rjmp	.+348    	; 0x19a <__bad_interrupt>
  3e:	00 00       	nop
  40:	ac c0       	rjmp	.+344    	; 0x19a <__bad_interrupt>
  42:	00 00       	nop
  44:	aa c0       	rjmp	.+340    	; 0x19a <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	a8 c0       	rjmp	.+336    	; 0x19a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a6 c0       	rjmp	.+332    	; 0x19a <__bad_interrupt>
  4e:	00 00       	nop
  50:	a4 c0       	rjmp	.+328    	; 0x19a <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	e0 c0       	rjmp	.+448    	; 0x216 <__vector_21>
  56:	00 00       	nop
  58:	a0 c0       	rjmp	.+320    	; 0x19a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9e c0       	rjmp	.+316    	; 0x19a <__bad_interrupt>
  5e:	00 00       	nop
  60:	9c c0       	rjmp	.+312    	; 0x19a <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	9a c0       	rjmp	.+308    	; 0x19a <__bad_interrupt>
  66:	00 00       	nop
  68:	98 c0       	rjmp	.+304    	; 0x19a <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	96 c0       	rjmp	.+300    	; 0x19a <__bad_interrupt>
  6e:	00 00       	nop
  70:	94 c0       	rjmp	.+296    	; 0x19a <__bad_interrupt>
  72:	00 00       	nop
  74:	92 c0       	rjmp	.+292    	; 0x19a <__bad_interrupt>
  76:	00 00       	nop
  78:	90 c0       	rjmp	.+288    	; 0x19a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8e c0       	rjmp	.+284    	; 0x19a <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	8c c0       	rjmp	.+280    	; 0x19a <__bad_interrupt>
  82:	00 00       	nop
  84:	8a c0       	rjmp	.+276    	; 0x19a <__bad_interrupt>
  86:	00 00       	nop
  88:	88 c0       	rjmp	.+272    	; 0x19a <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	86 c0       	rjmp	.+268    	; 0x19a <__bad_interrupt>
  8e:	00 00       	nop
  90:	84 c0       	rjmp	.+264    	; 0x19a <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	82 c0       	rjmp	.+260    	; 0x19a <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
  fe:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10e:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
 11e:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13e:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000014e <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
 14e:	12 01 00 02 00 00 00 08 eb 03 47 20 02 00 01 02     ..........G ....

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 15e:	00 01                                               ..

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
				ReportSize     -= 2;
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
				ReportData     += 2;
 166:	d0 e2       	ldi	r29, 0x20	; 32
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
				break;
 16c:	11 e0       	ldi	r17, 0x01	; 1

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e6 eb       	ldi	r30, 0xB6	; 182
 174:	ff e0       	ldi	r31, 0x0F	; 15
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	0b bf       	out	0x3b, r16	; 59
				ReportSize     -= 1;
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
 17c:	07 90       	elpm	r0, Z+
				ReportData     += 1;
 17e:	0d 92       	st	X+, r0
 180:	a2 31       	cpi	r26, 0x12	; 18
 182:	b1 07       	cpc	r27, r17
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>

00000186 <__do_clear_bss>:
 186:	11 e0       	ldi	r17, 0x01	; 1
 188:	a2 e1       	ldi	r26, 0x12	; 18
 18a:	b1 e0       	ldi	r27, 0x01	; 1
 18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
 18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
 190:	a2 32       	cpi	r26, 0x22	; 34
 192:	b1 07       	cpc	r27, r17
 194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>
 196:	39 d0       	rcall	.+114    	; 0x20a <main>
 198:	0c c7       	rjmp	.+3608   	; 0xfb2 <_exit>

0000019a <__bad_interrupt>:
 19a:	32 cf       	rjmp	.-412    	; 0x0 <__vectors>

0000019c <LEDs_SetAllLEDs>:
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	98 2b       	or	r25, r24
 1a2:	9b b9       	out	0x0b, r25	; 11
 1a4:	08 95       	ret

000001a6 <SetupHardware>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	84 b7       	in	r24, 0x34	; 52
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	84 bf       	out	0x34, r24	; 52
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	0f b6       	in	r0, 0x3f	; 63
				break;
 1b4:	f8 94       	cli
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	80 93 60 00 	sts	0x0060, r24
 1ba:	10 92 60 00 	sts	0x0060, r1
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	80 93 61 00 	sts	0x0061, r24
 1cc:	90 93 61 00 	sts	0x0061, r25
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	80 6f       	ori	r24, 0xF0	; 240
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	8a b9       	out	0x0a, r24	; 10
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 70       	andi	r24, 0x0F	; 15
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	6a 98       	cbi	0x0d, 2	; 13
 1e0:	72 9a       	sbi	0x0e, 2	; 14
 1e2:	ca e7       	ldi	r28, 0x7A	; 122
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	85 ea       	ldi	r24, 0xA5	; 165
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	88 83       	st	Y, r24
 1ea:	82 98       	cbi	0x10, 2	; 16
				break;
 1ec:	ee e7       	ldi	r30, 0x7E	; 126
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	80 83       	st	Z, r24
 1f6:	ea d2       	rcall	.+1492   	; 0x7cc <USB_Init>
 1f8:	82 e4       	ldi	r24, 0x42	; 66
 1fa:	80 93 7c 00 	sts	0x007C, r24
 1fe:	88 81       	ld	r24, Y
 200:	80 64       	ori	r24, 0x40	; 64
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	88 83       	st	Y, r24
 204:	df 91       	pop	r29
				break;
 206:	cf 91       	pop	r28
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	08 95       	ret

0000020a <main>:
 20a:	cd df       	rcall	.-102    	; 0x1a6 <SetupHardware>
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	c6 df       	rcall	.-116    	; 0x19c <LEDs_SetAllLEDs>
 210:	78 94       	sei
 212:	13 d5       	rcall	.+2598   	; 0xc3a <USB_USBTask>
 214:	fe cf       	rjmp	.-4      	; 0x212 <main+0x8>

00000216 <__vector_21>:
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	80 91 e9 00 	lds	r24, 0x00E9
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	90 91 ec 00 	lds	r25, 0x00EC
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	90 ff       	sbrs	r25, 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <__vector_21+0x26>
 238:	90 e8       	ldi	r25, 0x80	; 128
 23a:	01 c0       	rjmp	.+2      	; 0x23e <__vector_21+0x28>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	49 2f       	mov	r20, r25
 240:	48 2b       	or	r20, r24
 242:	80 91 19 01 	lds	r24, 0x0119
 246:	84 30       	cpi	r24, 0x04	; 4
 248:	d9 f5       	brne	.+118    	; 0x2c0 <__vector_21+0xaa>
 24a:	80 91 10 01 	lds	r24, 0x0110
 24e:	88 23       	and	r24, r24
 250:	b9 f1       	breq	.+110    	; 0x2c0 <__vector_21+0xaa>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	80 91 06 01 	lds	r24, 0x0106
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	80 93 e9 00 	sts	0x00E9, r24
 25c:	80 91 e8 00 	lds	r24, 0x00E8
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 260:	80 ff       	sbrs	r24, 0
 262:	2e c0       	rjmp	.+92     	; 0x2c0 <__vector_21+0xaa>
 264:	90 91 14 01 	lds	r25, 0x0114
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 0f       	add	r24, r25
 26c:	80 93 14 01 	sts	0x0114, r24
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	9f 3f       	cpi	r25, 0xFF	; 255
				break;
 272:	49 f4       	brne	.+18     	; 0x286 <__vector_21+0x70>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	80 91 12 01 	lds	r24, 0x0112
 278:	90 91 13 01 	lds	r25, 0x0113
 27c:	90 58       	subi	r25, 0x80	; 128
 27e:	90 93 13 01 	sts	0x0113, r25
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 282:	80 93 12 01 	sts	0x0112, r24

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	62 99       	sbic	0x0c, 2	; 12
 288:	05 c0       	rjmp	.+10     	; 0x294 <__vector_21+0x7e>
 28a:	20 91 12 01 	lds	r18, 0x0112
 28e:	90 91 13 01 	lds	r25, 0x0113
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_21+0x82>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	20 93 f1 00 	sts	0x00F1, r18
 29c:	90 93 f1 00 	sts	0x00F1, r25
				break;
 2a0:	20 91 f2 00 	lds	r18, 0x00F2

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a4:	30 91 f3 00 	lds	r19, 0x00F3
 2a8:	80 91 07 01 	lds	r24, 0x0107
				break;
 2ac:	90 91 08 01 	lds	r25, 0x0108

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2b0:	28 17       	cp	r18, r24
 2b2:	39 07       	cpc	r19, r25
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <__vector_21+0xaa>
 2b6:	80 91 e8 00 	lds	r24, 0x00E8
 2ba:	8e 77       	andi	r24, 0x7E	; 126
				break;
 2bc:	80 93 e8 00 	sts	0x00E8, r24
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2c0:	84 2f       	mov	r24, r20
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	80 93 e9 00 	sts	0x00E9, r24
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
				break;
 2cc:	4f 91       	pop	r20
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
				break;
 2d4:	0f be       	out	0x3f, r0	; 63

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <EVENT_USB_Device_Connect>:

				if (ParserData->UsingReportIDs)
 2dc:	cf 93       	push	r28
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	5d df       	rcall	.-326    	; 0x19c <LEDs_SetAllLEDs>
 2e2:	c2 e0       	ldi	r28, 0x02	; 2
 2e4:	c0 93 6e 00 	sts	0x006E, r28
 2e8:	20 91 00 01 	lds	r18, 0x0100
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	30 91 01 01 	lds	r19, 0x0101
 2f0:	40 91 02 01 	lds	r20, 0x0102
 2f4:	50 91 03 01 	lds	r21, 0x0103
 2f8:	60 e4       	ldi	r22, 0x40	; 64
 2fa:	72 e4       	ldi	r23, 0x42	; 66
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	36 d6       	rcall	.+3180   	; 0xf6e <__udivmodsi4>
 302:	21 50       	subi	r18, 0x01	; 1
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	27 bd       	out	0x27, r18	; 39
 306:	c4 bd       	out	0x24, r28	; 36
 308:	c5 bd       	out	0x25, r28	; 37
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <EVENT_USB_Device_Disconnect>:
 30e:	15 bc       	out	0x25, r1	; 37
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	44 cf       	rjmp	.-376    	; 0x19c <LEDs_SetAllLEDs>

00000314 <EVENT_USB_Device_ConfigurationChanged>:
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	91 e0       	ldi	r25, 0x01	; 1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	ac d4       	rcall	.+2392   	; 0xc72 <Audio_Device_ConfigureEndpoints>
 31a:	88 23       	and	r24, r24
 31c:	11 f0       	breq	.+4      	; 0x322 <EVENT_USB_Device_ConfigurationChanged+0xe>
 31e:	80 e6       	ldi	r24, 0x60	; 96
 320:	01 c0       	rjmp	.+2      	; 0x324 <EVENT_USB_Device_ConfigurationChanged+0x10>
 322:	80 e9       	ldi	r24, 0x90	; 144
 324:	3b cf       	rjmp	.-394    	; 0x19c <LEDs_SetAllLEDs>

00000326 <EVENT_USB_Device_ControlRequest>:
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	bb c4       	rjmp	.+2422   	; 0xca2 <Audio_Device_ProcessControlRequest>

0000032c <CALLBACK_Audio_Device_GetSetEndpointProperty>:
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	f7 01       	movw	r30, r14
 336:	80 91 06 01 	lds	r24, 0x0106
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 33a:	48 13       	cpse	r20, r24
 33c:	38 c0       	rjmp	.+112    	; 0x3ae <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	21 30       	cpi	r18, 0x01	; 1
 340:	b1 f5       	brne	.+108    	; 0x3ae <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	19 f0       	breq	.+6      	; 0x34c <CALLBACK_Audio_Device_GetSetEndpointProperty+0x20>
 346:	61 38       	cpi	r22, 0x81	; 129
 348:	01 f1       	breq	.+64     	; 0x38a <CALLBACK_Audio_Device_GetSetEndpointProperty+0x5e>
 34a:	31 c0       	rjmp	.+98     	; 0x3ae <CALLBACK_Audio_Device_GetSetEndpointProperty+0x82>
 34c:	01 2b       	or	r16, r17
 34e:	89 f1       	breq	.+98     	; 0x3b2 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
 350:	82 81       	ldd	r24, Z+2	; 0x02
 352:	21 81       	ldd	r18, Z+1	; 0x01
 354:	42 2f       	mov	r20, r18
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	22 27       	eor	r18, r18
 35e:	34 2f       	mov	r19, r20
 360:	45 2f       	mov	r20, r21
 362:	56 2f       	mov	r21, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	48 2b       	or	r20, r24
 366:	80 81       	ld	r24, Z
 368:	28 2b       	or	r18, r24
 36a:	20 93 00 01 	sts	0x0100, r18
					}
				}

				ParserData->UsingReportIDs = true;
 36e:	30 93 01 01 	sts	0x0101, r19
 372:	40 93 02 01 	sts	0x0102, r20
 376:	50 93 03 01 	sts	0x0103, r21

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 37a:	60 e4       	ldi	r22, 0x40	; 64
 37c:	72 e4       	ldi	r23, 0x42	; 66
 37e:	8f e0       	ldi	r24, 0x0F	; 15
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	f5 d5       	rcall	.+3050   	; 0xf6e <__udivmodsi4>
 384:	21 50       	subi	r18, 0x01	; 1
 386:	27 bd       	out	0x27, r18	; 39
				break;
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	01 15       	cp	r16, r1
 38c:	11 05       	cpc	r17, r1
 38e:	89 f0       	breq	.+34     	; 0x3b2 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	d8 01       	movw	r26, r16
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	8d 93       	st	X+, r24
 398:	9c 93       	st	X, r25
 39a:	80 91 00 01 	lds	r24, 0x0100
 39e:	90 91 01 01 	lds	r25, 0x0101
 3a2:	20 91 02 01 	lds	r18, 0x0102
 3a6:	22 83       	std	Z+2, r18	; 0x02
 3a8:	91 83       	std	Z+1, r25	; 0x01
 3aa:	80 83       	st	Z, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x86>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
				break;
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x88>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	08 95       	ret

000003be <CALLBACK_Audio_Device_GetSetInterfaceProperty>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <CALLBACK_USB_GetDescriptor>:
 3c2:	29 2f       	mov	r18, r25
 3c4:	33 27       	eor	r19, r19
 3c6:	22 30       	cpi	r18, 0x02	; 2
 3c8:	31 05       	cpc	r19, r1
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x20>
 3cc:	23 30       	cpi	r18, 0x03	; 3
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	31 05       	cpc	r19, r1
 3d0:	69 f0       	breq	.+26     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x2a>
 3d2:	21 30       	cpi	r18, 0x01	; 1

					while (CurrCollectionPath->Parent != NULL)
 3d4:	31 05       	cpc	r19, r1
 3d6:	f9 f4       	brne	.+62     	; 0x416 <CALLBACK_USB_GetDescriptor+0x54>
 3d8:	82 e1       	ldi	r24, 0x12	; 18
 3da:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	2e e4       	ldi	r18, 0x4E	; 78
 3de:	31 e0       	ldi	r19, 0x01	; 1
 3e0:	1e c0       	rjmp	.+60     	; 0x41e <CALLBACK_USB_GetDescriptor+0x5c>
 3e2:	80 e7       	ldi	r24, 0x70	; 112
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2e ed       	ldi	r18, 0xDE	; 222
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	19 c0       	rjmp	.+50     	; 0x41e <CALLBACK_USB_GetDescriptor+0x5c>
 3ec:	99 27       	eor	r25, r25
 3ee:	81 30       	cpi	r24, 0x01	; 1
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	91 05       	cpc	r25, r1
 3f2:	41 f0       	breq	.+16     	; 0x404 <CALLBACK_USB_GetDescriptor+0x42>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	91 05       	cpc	r25, r1
 3f8:	41 f0       	breq	.+16     	; 0x40a <CALLBACK_USB_GetDescriptor+0x48>
 3fa:	89 2b       	or	r24, r25
 3fc:	61 f4       	brne	.+24     	; 0x416 <CALLBACK_USB_GetDescriptor+0x54>
 3fe:	ea ed       	ldi	r30, 0xDA	; 218
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	05 c0       	rjmp	.+10     	; 0x40e <CALLBACK_USB_GetDescriptor+0x4c>
 404:	e0 ec       	ldi	r30, 0xC0	; 192
 406:	f0 e0       	ldi	r31, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	02 c0       	rjmp	.+4      	; 0x40e <CALLBACK_USB_GetDescriptor+0x4c>
 40a:	e8 e9       	ldi	r30, 0x98	; 152
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	84 91       	lpm	r24, Z
 410:	90 e0       	ldi	r25, 0x00	; 0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	9f 01       	movw	r18, r30
 414:	04 c0       	rjmp	.+8      	; 0x41e <CALLBACK_USB_GetDescriptor+0x5c>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	fa 01       	movw	r30, r20

				if (UsageListSize)
 420:	31 83       	std	Z+1, r19	; 0x01
 422:	20 83       	st	Z, r18
 424:	08 95       	ret

00000426 <Endpoint_Write_Control_Stream_LE>:
 426:	20 91 20 01 	lds	r18, 0x0120
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	30 91 21 01 	lds	r19, 0x0121
 42e:	26 17       	cp	r18, r22
 430:	37 07       	cpc	r19, r23
 432:	48 f0       	brcs	.+18     	; 0x446 <Endpoint_Write_Control_Stream_LE+0x20>
 434:	61 15       	cp	r22, r1
 436:	71 05       	cpc	r23, r1
 438:	39 f4       	brne	.+14     	; 0x448 <Endpoint_Write_Control_Stream_LE+0x22>
 43a:	20 91 e8 00 	lds	r18, 0x00E8
 43e:	2e 77       	andi	r18, 0x7E	; 126

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	20 93 e8 00 	sts	0x00E8, r18
 444:	01 c0       	rjmp	.+2      	; 0x448 <Endpoint_Write_Control_Stream_LE+0x22>
 446:	b9 01       	movw	r22, r18
 448:	fc 01       	movw	r30, r24
 44a:	20 e0       	ldi	r18, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	99 f1       	breq	.+102    	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x92>
 452:	80 91 19 01 	lds	r24, 0x0119

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 456:	88 23       	and	r24, r24
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	e9 f1       	breq	.+122    	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0xae>
 45a:	85 30       	cpi	r24, 0x05	; 5
 45c:	e9 f1       	breq	.+122    	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0xb2>
 45e:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	83 fd       	sbrc	r24, 3
 464:	3b c0       	rjmp	.+118    	; 0x4dc <Endpoint_Write_Control_Stream_LE+0xb6>
 466:	80 91 e8 00 	lds	r24, 0x00E8
 46a:	82 ff       	sbrs	r24, 2
 46c:	06 c0       	rjmp	.+12     	; 0x47a <Endpoint_Write_Control_Stream_LE+0x54>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	80 91 e8 00 	lds	r24, 0x00E8
 472:	82 ff       	sbrs	r24, 2
 474:	24 c0       	rjmp	.+72     	; 0x4be <Endpoint_Write_Control_Stream_LE+0x98>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
 47a:	80 91 e8 00 	lds	r24, 0x00E8
 47e:	80 ff       	sbrs	r24, 0
 480:	e5 cf       	rjmp	.-54     	; 0x44c <Endpoint_Write_Control_Stream_LE+0x26>
 482:	80 91 f2 00 	lds	r24, 0x00F2
 486:	90 91 f3 00 	lds	r25, 0x00F3
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	61 15       	cp	r22, r1
 48c:	71 05       	cpc	r23, r1
 48e:	51 f0       	breq	.+20     	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0x7e>
 490:	88 30       	cpi	r24, 0x08	; 8
 492:	91 05       	cpc	r25, r1
 494:	38 f4       	brcc	.+14     	; 0x4a4 <Endpoint_Write_Control_Stream_LE+0x7e>
 496:	21 91       	ld	r18, Z+
 498:	20 93 f1 00 	sts	0x00F1, r18
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49c:	61 50       	subi	r22, 0x01	; 1
 49e:	71 09       	sbc	r23, r1
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	f3 cf       	rjmp	.-26     	; 0x48a <Endpoint_Write_Control_Stream_LE+0x64>
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	08 97       	sbiw	r24, 0x08	; 8
 4a8:	09 f0       	breq	.+2      	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x86>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
				break;
 4ac:	80 91 e8 00 	lds	r24, 0x00E8
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4b0:	8e 77       	andi	r24, 0x7E	; 126
 4b2:	80 93 e8 00 	sts	0x00E8, r24
 4b6:	ca cf       	rjmp	.-108    	; 0x44c <Endpoint_Write_Control_Stream_LE+0x26>
 4b8:	21 11       	cpse	r18, r1
 4ba:	cb cf       	rjmp	.-106    	; 0x452 <Endpoint_Write_Control_Stream_LE+0x2c>
 4bc:	d8 cf       	rjmp	.-80     	; 0x46e <Endpoint_Write_Control_Stream_LE+0x48>
 4be:	80 91 19 01 	lds	r24, 0x0119
 4c2:	88 23       	and	r24, r24
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0xae>
 4c6:	85 30       	cpi	r24, 0x05	; 5
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0xb2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	80 91 e8 00 	lds	r24, 0x00E8
 4ce:	83 ff       	sbrs	r24, 3
 4d0:	ce cf       	rjmp	.-100    	; 0x46e <Endpoint_Write_Control_Stream_LE+0x48>
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <Endpoint_Write_Control_Stream_LE+0xb6>
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	08 95       	ret
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	08 95       	ret
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <Endpoint_Read_Control_Stream_LE>:
 4e0:	61 15       	cp	r22, r1
 4e2:	71 05       	cpc	r23, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <Endpoint_Read_Control_Stream_LE+0x10>
 4e6:	20 91 e8 00 	lds	r18, 0x00E8
 4ea:	2b 77       	andi	r18, 0x7B	; 123
 4ec:	20 93 e8 00 	sts	0x00E8, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	61 15       	cp	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	31 f1       	breq	.+76     	; 0x542 <Endpoint_Read_Control_Stream_LE+0x62>
 4f6:	20 91 19 01 	lds	r18, 0x0119
 4fa:	22 23       	and	r18, r18
 4fc:	59 f1       	breq	.+86     	; 0x554 <Endpoint_Read_Control_Stream_LE+0x74>
 4fe:	25 30       	cpi	r18, 0x05	; 5
 500:	59 f1       	breq	.+86     	; 0x558 <Endpoint_Read_Control_Stream_LE+0x78>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	20 91 e8 00 	lds	r18, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	23 fd       	sbrc	r18, 3
 508:	21 c0       	rjmp	.+66     	; 0x54c <Endpoint_Read_Control_Stream_LE+0x6c>
 50a:	20 91 e8 00 	lds	r18, 0x00E8
 50e:	22 ff       	sbrs	r18, 2
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <Endpoint_Read_Control_Stream_LE+0x16>
 512:	fc 01       	movw	r30, r24
 514:	cf 01       	movw	r24, r30
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	20 91 f2 00 	lds	r18, 0x00F2
 51a:	30 91 f3 00 	lds	r19, 0x00F3

					if (UsageListSize)
 51e:	23 2b       	or	r18, r19
 520:	11 f3       	breq	.-60     	; 0x4e6 <Endpoint_Read_Control_Stream_LE+0x6>
 522:	80 91 f1 00 	lds	r24, 0x00F1
 526:	81 93       	st	Z+, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	cf 01       	movw	r24, r30
 52a:	61 50       	subi	r22, 0x01	; 1
 52c:	71 09       	sbc	r23, r1
 52e:	61 15       	cp	r22, r1
 530:	71 05       	cpc	r23, r1
 532:	81 f7       	brne	.-32     	; 0x514 <Endpoint_Read_Control_Stream_LE+0x34>
 534:	d8 cf       	rjmp	.-80     	; 0x4e6 <Endpoint_Read_Control_Stream_LE+0x6>
 536:	80 91 19 01 	lds	r24, 0x0119
 53a:	88 23       	and	r24, r24
 53c:	59 f0       	breq	.+22     	; 0x554 <Endpoint_Read_Control_Stream_LE+0x74>

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	85 30       	cpi	r24, 0x05	; 5
 540:	59 f0       	breq	.+22     	; 0x558 <Endpoint_Read_Control_Stream_LE+0x78>
 542:	80 91 e8 00 	lds	r24, 0x00E8
 546:	80 ff       	sbrs	r24, 0
 548:	f6 cf       	rjmp	.-20     	; 0x536 <Endpoint_Read_Control_Stream_LE+0x56>
						  UsageList[i - 1] = UsageList[i];
 54a:	02 c0       	rjmp	.+4      	; 0x550 <Endpoint_Read_Control_Stream_LE+0x70>
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret
 550:	80 e0       	ldi	r24, 0x00	; 0

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	08 95       	ret
 554:	82 e0       	ldi	r24, 0x02	; 2
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	08 95       	ret
 558:	83 e0       	ldi	r24, 0x03	; 3
 55a:	08 95       	ret

0000055c <Endpoint_Write_Control_PStream_LE>:
 55c:	20 91 20 01 	lds	r18, 0x0120
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	30 91 21 01 	lds	r19, 0x0121
 564:	26 17       	cp	r18, r22
 566:	37 07       	cpc	r19, r23
 568:	48 f0       	brcs	.+18     	; 0x57c <Endpoint_Write_Control_PStream_LE+0x20>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56a:	61 15       	cp	r22, r1
 56c:	71 05       	cpc	r23, r1
 56e:	39 f4       	brne	.+14     	; 0x57e <Endpoint_Write_Control_PStream_LE+0x22>
 570:	20 91 e8 00 	lds	r18, 0x00E8
 574:	2e 77       	andi	r18, 0x7E	; 126
 576:	20 93 e8 00 	sts	0x00E8, r18
 57a:	01 c0       	rjmp	.+2      	; 0x57e <Endpoint_Write_Control_PStream_LE+0x22>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	b9 01       	movw	r22, r18
 57e:	fc 01       	movw	r30, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	61 15       	cp	r22, r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	71 05       	cpc	r23, r1
 586:	b1 f1       	breq	.+108    	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x98>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	80 91 19 01 	lds	r24, 0x0119
 58c:	88 23       	and	r24, r24
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	09 f4       	brne	.+2      	; 0x592 <Endpoint_Write_Control_PStream_LE+0x36>
 590:	3f c0       	rjmp	.+126    	; 0x610 <Endpoint_Write_Control_PStream_LE+0xb4>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	85 30       	cpi	r24, 0x05	; 5
 594:	09 f4       	brne	.+2      	; 0x598 <Endpoint_Write_Control_PStream_LE+0x3c>
 596:	3e c0       	rjmp	.+124    	; 0x614 <Endpoint_Write_Control_PStream_LE+0xb8>
 598:	80 91 e8 00 	lds	r24, 0x00E8
 59c:	83 fd       	sbrc	r24, 3
 59e:	3c c0       	rjmp	.+120    	; 0x618 <Endpoint_Write_Control_PStream_LE+0xbc>
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
 5a4:	82 ff       	sbrs	r24, 2
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x58>
 5a8:	80 91 e8 00 	lds	r24, 0x00E8

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	82 ff       	sbrs	r24, 2
 5ae:	25 c0       	rjmp	.+74     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x9e>
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
 5b4:	80 91 e8 00 	lds	r24, 0x00E8
 5b8:	80 ff       	sbrs	r24, 0
 5ba:	e3 cf       	rjmp	.-58     	; 0x582 <Endpoint_Write_Control_PStream_LE+0x26>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	80 91 f2 00 	lds	r24, 0x00F2
 5c0:	90 91 f3 00 	lds	r25, 0x00F3
 5c4:	61 15       	cp	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x84>
 5ca:	88 30       	cpi	r24, 0x08	; 8
 5cc:	91 05       	cpc	r25, r1
 5ce:	40 f4       	brcc	.+16     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x84>
 5d0:	24 91       	lpm	r18, Z
 5d2:	20 93 f1 00 	sts	0x00F1, r18
 5d6:	31 96       	adiw	r30, 0x01	; 1
 5d8:	61 50       	subi	r22, 0x01	; 1
 5da:	71 09       	sbc	r23, r1
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	f2 cf       	rjmp	.-28     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x68>
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	08 97       	sbiw	r24, 0x08	; 8
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x8c>
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	80 91 e8 00 	lds	r24, 0x00E8
 5ec:	8e 77       	andi	r24, 0x7E	; 126
 5ee:	80 93 e8 00 	sts	0x00E8, r24
 5f2:	c7 cf       	rjmp	.-114    	; 0x582 <Endpoint_Write_Control_PStream_LE+0x26>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	21 11       	cpse	r18, r1
 5f6:	c8 cf       	rjmp	.-112    	; 0x588 <Endpoint_Write_Control_PStream_LE+0x2c>
 5f8:	d7 cf       	rjmp	.-82     	; 0x5a8 <Endpoint_Write_Control_PStream_LE+0x4c>
 5fa:	80 91 19 01 	lds	r24, 0x0119
					  return HID_PARSE_InsufficientReportItems;
 5fe:	88 23       	and	r24, r24
 600:	39 f0       	breq	.+14     	; 0x610 <Endpoint_Write_Control_PStream_LE+0xb4>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	85 30       	cpi	r24, 0x05	; 5
 604:	39 f0       	breq	.+14     	; 0x614 <Endpoint_Write_Control_PStream_LE+0xb8>
 606:	80 91 e8 00 	lds	r24, 0x00E8
 60a:	83 ff       	sbrs	r24, 3
 60c:	cd cf       	rjmp	.-102    	; 0x5a8 <Endpoint_Write_Control_PStream_LE+0x4c>
 60e:	04 c0       	rjmp	.+8      	; 0x618 <Endpoint_Write_Control_PStream_LE+0xbc>
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	08 95       	ret
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	08 95       	ret
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	08 95       	ret

0000061c <Endpoint_ConfigureEndpoint_Prv>:
 61c:	98 2f       	mov	r25, r24
 61e:	97 30       	cpi	r25, 0x07	; 7
 620:	58 f5       	brcc	.+86     	; 0x678 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 622:	90 93 e9 00 	sts	0x00E9, r25
 626:	98 17       	cp	r25, r24
 628:	39 f0       	breq	.+14     	; 0x638 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 62a:	70 91 ec 00 	lds	r23, 0x00EC
 62e:	20 91 ed 00 	lds	r18, 0x00ED
 632:	50 91 f0 00 	lds	r21, 0x00F0
 636:	03 c0       	rjmp	.+6      	; 0x63e <Endpoint_ConfigureEndpoint_Prv+0x22>
 638:	24 2f       	mov	r18, r20
 63a:	76 2f       	mov	r23, r22
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	21 ff       	sbrs	r18, 1
 640:	19 c0       	rjmp	.+50     	; 0x674 <Endpoint_ConfigureEndpoint_Prv+0x58>
 642:	30 91 eb 00 	lds	r19, 0x00EB
 646:	3e 7f       	andi	r19, 0xFE	; 254
 648:	30 93 eb 00 	sts	0x00EB, r19
 64c:	30 91 ed 00 	lds	r19, 0x00ED
 650:	3d 7f       	andi	r19, 0xFD	; 253
 652:	30 93 ed 00 	sts	0x00ED, r19
 656:	30 91 eb 00 	lds	r19, 0x00EB
 65a:	31 60       	ori	r19, 0x01	; 1
 65c:	30 93 eb 00 	sts	0x00EB, r19
 660:	70 93 ec 00 	sts	0x00EC, r23
 664:	20 93 ed 00 	sts	0x00ED, r18
 668:	50 93 f0 00 	sts	0x00F0, r21
 66c:	20 91 ee 00 	lds	r18, 0x00EE
 670:	27 ff       	sbrs	r18, 7
 672:	07 c0       	rjmp	.+14     	; 0x682 <Endpoint_ConfigureEndpoint_Prv+0x66>
 674:	9f 5f       	subi	r25, 0xFF	; 255
 676:	d3 cf       	rjmp	.-90     	; 0x61e <Endpoint_ConfigureEndpoint_Prv+0x2>
 678:	8f 70       	andi	r24, 0x0F	; 15
 67a:	80 93 e9 00 	sts	0x00E9, r24
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret

00000686 <Endpoint_ConfigureEndpointTable>:
 686:	0f 93       	push	r16
					  ParserData->TotalReportItems++;
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	06 2f       	mov	r16, r22
 690:	ec 01       	movw	r28, r24

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 692:	10 e0       	ldi	r17, 0x00	; 0
 694:	10 17       	cp	r17, r16
 696:	71 f1       	breq	.+92     	; 0x6f4 <Endpoint_ConfigureEndpointTable+0x6e>
 698:	98 81       	ld	r25, Y
 69a:	99 23       	and	r25, r25
 69c:	41 f1       	breq	.+80     	; 0x6ee <Endpoint_ConfigureEndpointTable+0x68>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	2c 81       	ldd	r18, Y+4	; 0x04
 6a0:	e9 81       	ldd	r30, Y+1	; 0x01
 6a2:	fa 81       	ldd	r31, Y+2	; 0x02
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	7b 81       	ldd	r23, Y+3	; 0x03
 6a6:	89 2f       	mov	r24, r25
 6a8:	8f 70       	andi	r24, 0x0F	; 15
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	87 30       	cpi	r24, 0x07	; 7
 6ac:	10 f0       	brcs	.+4      	; 0x6b2 <Endpoint_ConfigureEndpointTable+0x2c>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	22 c0       	rjmp	.+68     	; 0x6f6 <Endpoint_ConfigureEndpointTable+0x70>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	10 f0       	brcs	.+4      	; 0x6ba <Endpoint_ConfigureEndpointTable+0x34>
 6b6:	56 e0       	ldi	r21, 0x06	; 6
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <Endpoint_ConfigureEndpointTable+0x36>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	52 e0       	ldi	r21, 0x02	; 2
 6bc:	28 e0       	ldi	r18, 0x08	; 8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	40 e0       	ldi	r20, 0x00	; 0
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	2e 17       	cp	r18, r30
 6c4:	3f 07       	cpc	r19, r31
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	20 f4       	brcc	.+8      	; 0x6d0 <Endpoint_ConfigureEndpointTable+0x4a>
 6c8:	4f 5f       	subi	r20, 0xFF	; 255
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	f9 cf       	rjmp	.-14     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x3c>
 6d0:	42 95       	swap	r20
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	40 7f       	andi	r20, 0xF0	; 240
 6d4:	45 2b       	or	r20, r21
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	69 2f       	mov	r22, r25

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	66 1f       	adc	r22, r22
 6da:	66 27       	eor	r22, r22
 6dc:	66 1f       	adc	r22, r22
 6de:	90 e4       	ldi	r25, 0x40	; 64
 6e0:	79 9f       	mul	r23, r25
 6e2:	90 01       	movw	r18, r0
 6e4:	11 24       	eor	r1, r1
 6e6:	62 2b       	or	r22, r18
 6e8:	99 df       	rcall	.-206    	; 0x61c <Endpoint_ConfigureEndpoint_Prv>
 6ea:	88 23       	and	r24, r24
 6ec:	01 f3       	breq	.-64     	; 0x6ae <Endpoint_ConfigureEndpointTable+0x28>
 6ee:	1f 5f       	subi	r17, 0xFF	; 255
 6f0:	25 96       	adiw	r28, 0x05	; 5
 6f2:	d0 cf       	rjmp	.-96     	; 0x694 <Endpoint_ConfigureEndpointTable+0xe>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	08 95       	ret

00000700 <Endpoint_ClearStatusStage>:
 700:	80 91 1a 01 	lds	r24, 0x011A
 704:	87 fd       	sbrc	r24, 7
 706:	05 c0       	rjmp	.+10     	; 0x712 <Endpoint_ClearStatusStage+0x12>
 708:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 70c:	80 ff       	sbrs	r24, 0
 70e:	0e c0       	rjmp	.+28     	; 0x72c <Endpoint_ClearStatusStage+0x2c>
 710:	12 c0       	rjmp	.+36     	; 0x736 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 712:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 716:	82 fd       	sbrc	r24, 2
 718:	05 c0       	rjmp	.+10     	; 0x724 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 71a:	80 91 19 01 	lds	r24, 0x0119
 71e:	81 11       	cpse	r24, r1
 720:	f8 cf       	rjmp	.-16     	; 0x712 <Endpoint_ClearStatusStage+0x12>
 722:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 724:	80 91 e8 00 	lds	r24, 0x00E8
 728:	8b 77       	andi	r24, 0x7B	; 123
 72a:	08 c0       	rjmp	.+16     	; 0x73c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 72c:	80 91 19 01 	lds	r24, 0x0119
 730:	81 11       	cpse	r24, r1
 732:	ea cf       	rjmp	.-44     	; 0x708 <Endpoint_ClearStatusStage+0x8>
 734:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 736:	80 91 e8 00 	lds	r24, 0x00E8
 73a:	8e 77       	andi	r24, 0x7E	; 126
 73c:	80 93 e8 00 	sts	0x00E8, r24
 740:	08 95       	ret

00000742 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 74a:	4e d0       	rcall	.+156    	; 0x7e8 <USB_INT_DisableAllInterrupts>
 74c:	55 d0       	rcall	.+170    	; 0x7f8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 74e:	c8 ed       	ldi	r28, 0xD8	; 216
 750:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 752:	88 81       	ld	r24, Y
 754:	8f 77       	andi	r24, 0x7F	; 127
 756:	88 83       	st	Y, r24
 758:	88 81       	ld	r24, Y
 75a:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 75c:	88 83       	st	Y, r24
 75e:	88 81       	ld	r24, Y
 760:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 762:	88 83       	st	Y, r24
 764:	e7 ed       	ldi	r30, 0xD7	; 215
 766:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 768:	80 81       	ld	r24, Z
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	80 83       	st	Z, r24
 76e:	19 bc       	out	0x29, r1	; 41
 770:	10 92 19 01 	sts	0x0119, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 774:	10 92 15 01 	sts	0x0115, r1
	USB_Device_ConfigurationNumber  = 0;
 778:	10 92 17 01 	sts	0x0117, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 77c:	10 92 16 01 	sts	0x0116, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 780:	00 ee       	ldi	r16, 0xE0	; 224
 782:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 784:	f8 01       	movw	r30, r16
 786:	80 81       	ld	r24, Z
 788:	8b 7f       	andi	r24, 0xFB	; 251
 78a:	80 83       	st	Z, r24
 78c:	88 81       	ld	r24, Y
 78e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 790:	88 83       	st	Y, r24
 792:	42 e0       	ldi	r20, 0x02	; 2
 794:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	41 df       	rcall	.-382    	; 0x61c <Endpoint_ConfigureEndpoint_Prv>
 79a:	e1 ee       	ldi	r30, 0xE1	; 225
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7a0:	8e 7f       	andi	r24, 0xFE	; 254
 7a2:	80 83       	st	Z, r24
 7a4:	e2 ee       	ldi	r30, 0xE2	; 226
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7aa:	81 60       	ori	r24, 0x01	; 1
 7ac:	80 83       	st	Z, r24
 7ae:	80 81       	ld	r24, Z
 7b0:	88 60       	ori	r24, 0x08	; 8
 7b2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7b4:	f8 01       	movw	r30, r16
 7b6:	80 81       	ld	r24, Z
 7b8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7ba:	80 83       	st	Z, r24
 7bc:	88 81       	ld	r24, Y
 7be:	80 61       	ori	r24, 0x10	; 16
 7c0:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 7c8:	0f 91       	pop	r16
 7ca:	08 95       	ret

000007cc <USB_Init>:
 7cc:	e8 ed       	ldi	r30, 0xD8	; 216
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 7d2:	8f 7e       	andi	r24, 0xEF	; 239
 7d4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 7d6:	e7 ed       	ldi	r30, 0xD7	; 215
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	80 93 18 01 	sts	0x0118, r24

	USB_ResetInterface();
 7e6:	ad cf       	rjmp	.-166    	; 0x742 <USB_ResetInterface>

000007e8 <USB_INT_DisableAllInterrupts>:
 7e8:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	8c 7f       	andi	r24, 0xFC	; 252
 7f0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7f2:	10 92 e2 00 	sts	0x00E2, r1
 7f6:	08 95       	ret

000007f8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 7f8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7fc:	10 92 e1 00 	sts	0x00E1, r1
 800:	08 95       	ret

00000802 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	0b b6       	in	r0, 0x3b	; 59
 80e:	0f 92       	push	r0
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 828:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 82c:	82 ff       	sbrs	r24, 2
 82e:	0a c0       	rjmp	.+20     	; 0x844 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 830:	80 91 e2 00 	lds	r24, 0x00E2
 834:	82 ff       	sbrs	r24, 2
 836:	06 c0       	rjmp	.+12     	; 0x844 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 838:	80 91 e1 00 	lds	r24, 0x00E1
 83c:	8b 7f       	andi	r24, 0xFB	; 251
 83e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 842:	fa d1       	rcall	.+1012   	; 0xc38 <USB_Event_Stub>
 844:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 848:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 84a:	1d c0       	rjmp	.+58     	; 0x886 <__vector_10+0x84>
 84c:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 850:	80 ff       	sbrs	r24, 0
 852:	19 c0       	rjmp	.+50     	; 0x886 <__vector_10+0x84>
 854:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 858:	8e 7f       	andi	r24, 0xFE	; 254
 85a:	80 93 da 00 	sts	0x00DA, r24
 85e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 862:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 864:	0c c0       	rjmp	.+24     	; 0x87e <__vector_10+0x7c>
 866:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 868:	89 bd       	out	0x29, r24	; 41
 86a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 86c:	89 bd       	out	0x29, r24	; 41
 86e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 870:	00 fe       	sbrs	r0, 0
 872:	fd cf       	rjmp	.-6      	; 0x86e <__vector_10+0x6c>
 874:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 876:	80 93 19 01 	sts	0x0119, r24
 87a:	30 dd       	rcall	.-1440   	; 0x2dc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 87c:	04 c0       	rjmp	.+8      	; 0x886 <__vector_10+0x84>
 87e:	19 bc       	out	0x29, r1	; 41
 880:	10 92 19 01 	sts	0x0119, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 884:	44 dd       	rcall	.-1400   	; 0x30e <EVENT_USB_Device_Disconnect>
 886:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 88a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 88c:	18 c0       	rjmp	.+48     	; 0x8be <__vector_10+0xbc>
 88e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 892:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 894:	14 c0       	rjmp	.+40     	; 0x8be <__vector_10+0xbc>
 896:	80 91 e2 00 	lds	r24, 0x00E2
 89a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 89c:	80 93 e2 00 	sts	0x00E2, r24
 8a0:	80 91 e2 00 	lds	r24, 0x00E2
 8a4:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8a6:	80 93 e2 00 	sts	0x00E2, r24
 8aa:	80 91 d8 00 	lds	r24, 0x00D8
 8ae:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8b0:	80 93 d8 00 	sts	0x00D8, r24
 8b4:	19 bc       	out	0x29, r1	; 41
 8b6:	85 e0       	ldi	r24, 0x05	; 5
 8b8:	80 93 19 01 	sts	0x0119, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8bc:	bd d1       	rcall	.+890    	; 0xc38 <USB_Event_Stub>
 8be:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 8c2:	84 ff       	sbrs	r24, 4
 8c4:	2f c0       	rjmp	.+94     	; 0x924 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8c6:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8ca:	84 ff       	sbrs	r24, 4
 8cc:	2b c0       	rjmp	.+86     	; 0x924 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 8ce:	8c e0       	ldi	r24, 0x0C	; 12
 8d0:	89 bd       	out	0x29, r24	; 41
 8d2:	8e e0       	ldi	r24, 0x0E	; 14
 8d4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8d6:	09 b4       	in	r0, 0x29	; 41
 8d8:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8da:	fd cf       	rjmp	.-6      	; 0x8d6 <__vector_10+0xd4>
 8dc:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8e0:	8f 7d       	andi	r24, 0xDF	; 223
 8e2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8e6:	80 91 e1 00 	lds	r24, 0x00E1
 8ea:	8f 7e       	andi	r24, 0xEF	; 239
 8ec:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 8f0:	80 91 e2 00 	lds	r24, 0x00E2
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 8fa:	80 91 e2 00 	lds	r24, 0x00E2
 8fe:	81 60       	ori	r24, 0x01	; 1
 900:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 904:	80 91 15 01 	lds	r24, 0x0115
 908:	88 23       	and	r24, r24
 90a:	11 f0       	breq	.+4      	; 0x910 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 90c:	84 e0       	ldi	r24, 0x04	; 4
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__vector_10+0x11c>
 910:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 914:	87 ff       	sbrs	r24, 7
 916:	02 c0       	rjmp	.+4      	; 0x91c <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 918:	83 e0       	ldi	r24, 0x03	; 3
 91a:	01 c0       	rjmp	.+2      	; 0x91e <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 19 01 	sts	0x0119, r24
 922:	8a d1       	rcall	.+788    	; 0xc38 <USB_Event_Stub>
 924:	80 91 e1 00 	lds	r24, 0x00E1
 928:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 92a:	22 c0       	rjmp	.+68     	; 0x970 <__vector_10+0x16e>
 92c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 930:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 932:	1e c0       	rjmp	.+60     	; 0x970 <__vector_10+0x16e>
 934:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 938:	87 7f       	andi	r24, 0xF7	; 247
 93a:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	80 93 19 01 	sts	0x0119, r24
 944:	10 92 15 01 	sts	0x0115, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 948:	80 91 e1 00 	lds	r24, 0x00E1
 94c:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 94e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 952:	80 91 e2 00 	lds	r24, 0x00E2
 956:	8e 7f       	andi	r24, 0xFE	; 254
 958:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 95c:	80 91 e2 00 	lds	r24, 0x00E2
 960:	80 61       	ori	r24, 0x10	; 16
 962:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 966:	42 e0       	ldi	r20, 0x02	; 2
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	57 de       	rcall	.-850    	; 0x61c <Endpoint_ConfigureEndpoint_Prv>
 96e:	64 d1       	rcall	.+712    	; 0xc38 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 970:	ff 91       	pop	r31
 972:	ef 91       	pop	r30
 974:	bf 91       	pop	r27
 976:	af 91       	pop	r26
 978:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 97a:	8f 91       	pop	r24
 97c:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 97e:	6f 91       	pop	r22
 980:	5f 91       	pop	r21
 982:	4f 91       	pop	r20
 984:	3f 91       	pop	r19
 986:	2f 91       	pop	r18
 988:	0f 90       	pop	r0
 98a:	0b be       	out	0x3b, r0	; 59
 98c:	0f 90       	pop	r0
 98e:	0f be       	out	0x3f, r0	; 63
 990:	0f 90       	pop	r0
 992:	1f 90       	pop	r1
 994:	18 95       	reti

00000996 <USB_Device_ProcessControlRequest>:
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	aa 97       	sbiw	r28, 0x2a	; 42
 9a2:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	ea e1       	ldi	r30, 0x1A	; 26
 9ae:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9b0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	e2 32       	cpi	r30, 0x22	; 34
 9ba:	f2 07       	cpc	r31, r18
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9be:	b3 dc       	rcall	.-1690   	; 0x326 <EVENT_USB_Device_ControlRequest>
 9c0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c4:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9c6:	20 c1       	rjmp	.+576    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 9c8:	90 91 1a 01 	lds	r25, 0x011A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9cc:	80 91 1b 01 	lds	r24, 0x011B

		switch (USB_ControlRequest.bRequest)
 9d0:	85 30       	cpi	r24, 0x05	; 5
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <USB_Device_ProcessControlRequest+0x40>
 9d4:	77 c0       	rjmp	.+238    	; 0xac4 <USB_Device_ProcessControlRequest+0x12e>
 9d6:	30 f4       	brcc	.+12     	; 0x9e4 <USB_Device_ProcessControlRequest+0x4e>
 9d8:	81 30       	cpi	r24, 0x01	; 1
 9da:	81 f1       	breq	.+96     	; 0xa3c <USB_Device_ProcessControlRequest+0xa6>
 9dc:	68 f0       	brcs	.+26     	; 0x9f8 <USB_Device_ProcessControlRequest+0x62>
 9de:	83 30       	cpi	r24, 0x03	; 3
 9e0:	69 f1       	breq	.+90     	; 0xa3c <USB_Device_ProcessControlRequest+0xa6>
 9e2:	12 c1       	rjmp	.+548    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	09 f4       	brne	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x54>
 9e8:	e1 c0       	rjmp	.+450    	; 0xbac <USB_Device_ProcessControlRequest+0x216>
 9ea:	89 30       	cpi	r24, 0x09	; 9
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <USB_Device_ProcessControlRequest+0x5a>
 9ee:	f0 c0       	rjmp	.+480    	; 0xbd0 <USB_Device_ProcessControlRequest+0x23a>
 9f0:	86 30       	cpi	r24, 0x06	; 6
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <USB_Device_ProcessControlRequest+0x60>
 9f4:	09 c1       	rjmp	.+530    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 9f6:	88 c0       	rjmp	.+272    	; 0xb08 <USB_Device_ProcessControlRequest+0x172>
 9f8:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9fa:	81 f0       	breq	.+32     	; 0xa1c <USB_Device_ProcessControlRequest+0x86>
 9fc:	92 38       	cpi	r25, 0x82	; 130
 9fe:	09 f0       	breq	.+2      	; 0xa02 <USB_Device_ProcessControlRequest+0x6c>
 a00:	03 c1       	rjmp	.+518    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 a02:	80 91 1e 01 	lds	r24, 0x011E
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a06:	8f 70       	andi	r24, 0x0F	; 15
 a08:	80 93 e9 00 	sts	0x00E9, r24
 a0c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a10:	85 fb       	bst	r24, 5
 a12:	88 27       	eor	r24, r24
 a14:	80 f9       	bld	r24, 0
 a16:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <USB_Device_ProcessControlRequest+0x92>
 a1c:	80 91 16 01 	lds	r24, 0x0116
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a20:	90 91 17 01 	lds	r25, 0x0117
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a24:	91 11       	cpse	r25, r1
 a26:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a28:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2c:	97 7f       	andi	r25, 0xF7	; 247
 a2e:	90 93 e8 00 	sts	0x00E8, r25
 a32:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a36:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a3a:	c3 c0       	rjmp	.+390    	; 0xbc2 <USB_Device_ProcessControlRequest+0x22c>
 a3c:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a3e:	2d 7f       	andi	r18, 0xFD	; 253
 a40:	09 f0       	breq	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0xae>
 a42:	e2 c0       	rjmp	.+452    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 a44:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a46:	19 f0       	breq	.+6      	; 0xa4e <USB_Device_ProcessControlRequest+0xb8>
 a48:	92 30       	cpi	r25, 0x02	; 2
 a4a:	61 f0       	breq	.+24     	; 0xa64 <USB_Device_ProcessControlRequest+0xce>
 a4c:	dd c0       	rjmp	.+442    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 a4e:	90 91 1c 01 	lds	r25, 0x011C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a52:	91 30       	cpi	r25, 0x01	; 1
 a54:	09 f0       	breq	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0xc2>
 a56:	d8 c0       	rjmp	.+432    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 a58:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a5a:	09 f0       	breq	.+2      	; 0xa5e <USB_Device_ProcessControlRequest+0xc8>
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	90 93 17 01 	sts	0x0117, r25
 a62:	2a c0       	rjmp	.+84     	; 0xab8 <USB_Device_ProcessControlRequest+0x122>
 a64:	90 91 1c 01 	lds	r25, 0x011C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a68:	91 11       	cpse	r25, r1
 a6a:	26 c0       	rjmp	.+76     	; 0xab8 <USB_Device_ProcessControlRequest+0x122>
 a6c:	20 91 1e 01 	lds	r18, 0x011E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a70:	2f 70       	andi	r18, 0x0F	; 15
 a72:	09 f4       	brne	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a74:	c9 c0       	rjmp	.+402    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 a76:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a7a:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a7e:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a80:	1b c0       	rjmp	.+54     	; 0xab8 <USB_Device_ProcessControlRequest+0x122>
 a82:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a84:	21 f4       	brne	.+8      	; 0xa8e <USB_Device_ProcessControlRequest+0xf8>
 a86:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a8a:	80 62       	ori	r24, 0x20	; 32
 a8c:	13 c0       	rjmp	.+38     	; 0xab4 <USB_Device_ProcessControlRequest+0x11e>
 a8e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a92:	80 61       	ori	r24, 0x10	; 16
 a94:	80 93 eb 00 	sts	0x00EB, r24
 a98:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	02 2e       	mov	r0, r18
 a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x10c>
 aa0:	88 0f       	add	r24, r24
 aa2:	0a 94       	dec	r0
 aa4:	ea f7       	brpl	.-6      	; 0xaa0 <USB_Device_ProcessControlRequest+0x10a>
 aa6:	80 93 ea 00 	sts	0x00EA, r24
 aaa:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 aae:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ab2:	88 60       	ori	r24, 0x08	; 8
 ab4:	80 93 eb 00 	sts	0x00EB, r24
 ab8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 abc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac0:	87 7f       	andi	r24, 0xF7	; 247
 ac2:	82 c0       	rjmp	.+260    	; 0xbc8 <USB_Device_ProcessControlRequest+0x232>
 ac4:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ac6:	a0 c0       	rjmp	.+320    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 ac8:	10 91 1c 01 	lds	r17, 0x011C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 acc:	1f 77       	andi	r17, 0x7F	; 127
 ace:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ad2:	80 78       	andi	r24, 0x80	; 128
 ad4:	81 2b       	or	r24, r17
 ad6:	80 93 e3 00 	sts	0x00E3, r24
 ada:	80 91 e8 00 	lds	r24, 0x00E8
 ade:	87 7f       	andi	r24, 0xF7	; 247
 ae0:	80 93 e8 00 	sts	0x00E8, r24
 ae4:	0d de       	rcall	.-998    	; 0x700 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ae6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aea:	80 ff       	sbrs	r24, 0
 aec:	fc cf       	rjmp	.-8      	; 0xae6 <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 aee:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 af2:	80 68       	ori	r24, 0x80	; 128
 af4:	80 93 e3 00 	sts	0x00E3, r24
 af8:	11 23       	and	r17, r17
 afa:	11 f0       	breq	.+4      	; 0xb00 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 afc:	83 e0       	ldi	r24, 0x03	; 3
 afe:	01 c0       	rjmp	.+2      	; 0xb02 <USB_Device_ProcessControlRequest+0x16c>
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	80 93 19 01 	sts	0x0119, r24
 b06:	80 c0       	rjmp	.+256    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 b08:	90 58       	subi	r25, 0x80	; 128
 b0a:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b0c:	08 f0       	brcs	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0x17a>
 b0e:	7c c0       	rjmp	.+248    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 b10:	80 91 1c 01 	lds	r24, 0x011C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b14:	90 91 1d 01 	lds	r25, 0x011D
 b18:	8c 3d       	cpi	r24, 0xDC	; 220
 b1a:	23 e0       	ldi	r18, 0x03	; 3
 b1c:	92 07       	cpc	r25, r18
 b1e:	71 f5       	brne	.+92     	; 0xb7c <USB_Device_ProcessControlRequest+0x1e6>
 b20:	83 e0       	ldi	r24, 0x03	; 3
 b22:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b24:	8a e2       	ldi	r24, 0x2A	; 42
 b26:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b28:	4f b7       	in	r20, 0x3f	; 63
 b2a:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b2c:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b2e:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b30:	20 e0       	ldi	r18, 0x00	; 0
 b32:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b34:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b36:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	50 93 57 00 	sts	0x0057, r21
 b3e:	e4 91       	lpm	r30, Z
 b40:	20 ff       	sbrs	r18, 0
 b42:	03 c0       	rjmp	.+6      	; 0xb4a <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b44:	e2 95       	swap	r30
 b46:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b48:	3f 5f       	subi	r19, 0xFF	; 255
 b4a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b4c:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	ea 30       	cpi	r30, 0x0A	; 10
 b52:	10 f0       	brcs	.+4      	; 0xb58 <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b54:	c7 96       	adiw	r24, 0x37	; 55
 b56:	01 c0       	rjmp	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0x1c4>
 b58:	c0 96       	adiw	r24, 0x30	; 48
 b5a:	8d 93       	st	X+, r24
 b5c:	9d 93       	st	X+, r25
 b5e:	2f 5f       	subi	r18, 0xFF	; 255
 b60:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b62:	49 f7       	brne	.-46     	; 0xb36 <USB_Device_ProcessControlRequest+0x1a0>
 b64:	4f bf       	out	0x3f, r20	; 63
 b66:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b6a:	87 7f       	andi	r24, 0xF7	; 247
 b6c:	80 93 e8 00 	sts	0x00E8, r24
 b70:	6a e2       	ldi	r22, 0x2A	; 42
 b72:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b74:	ce 01       	movw	r24, r28
 b76:	01 96       	adiw	r24, 0x01	; 1
 b78:	56 dc       	rcall	.-1876   	; 0x426 <Endpoint_Write_Control_Stream_LE>
 b7a:	12 c0       	rjmp	.+36     	; 0xba0 <USB_Device_ProcessControlRequest+0x20a>
 b7c:	ae 01       	movw	r20, r28
 b7e:	4f 5f       	subi	r20, 0xFF	; 255
 b80:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b82:	60 91 1e 01 	lds	r22, 0x011E
 b86:	1d dc       	rcall	.-1990   	; 0x3c2 <CALLBACK_USB_GetDescriptor>
 b88:	00 97       	sbiw	r24, 0x00	; 0
 b8a:	09 f4       	brne	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x1f8>
 b8c:	3d c0       	rjmp	.+122    	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 b8e:	20 91 e8 00 	lds	r18, 0x00E8
 b92:	27 7f       	andi	r18, 0xF7	; 247
 b94:	20 93 e8 00 	sts	0x00E8, r18
 b98:	bc 01       	movw	r22, r24
 b9a:	89 81       	ldd	r24, Y+1	; 0x01
 b9c:	9a 81       	ldd	r25, Y+2	; 0x02
 b9e:	de dc       	rcall	.-1604   	; 0x55c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ba0:	80 91 e8 00 	lds	r24, 0x00E8
 ba4:	8b 77       	andi	r24, 0x7B	; 123
 ba6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 baa:	2e c0       	rjmp	.+92     	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 bac:	90 38       	cpi	r25, 0x80	; 128
 bae:	61 f5       	brne	.+88     	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 bb0:	80 91 e8 00 	lds	r24, 0x00E8
 bb4:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bb6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bba:	80 91 15 01 	lds	r24, 0x0115
 bbe:	80 93 f1 00 	sts	0x00F1, r24
 bc2:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bc6:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bc8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bcc:	99 dd       	rcall	.-1230   	; 0x700 <Endpoint_ClearStatusStage>
 bce:	1c c0       	rjmp	.+56     	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 bd0:	91 11       	cpse	r25, r1
 bd2:	1a c0       	rjmp	.+52     	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
 bd4:	90 91 1c 01 	lds	r25, 0x011C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bd8:	92 30       	cpi	r25, 0x02	; 2
 bda:	b0 f4       	brcc	.+44     	; 0xc08 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bdc:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 be0:	87 7f       	andi	r24, 0xF7	; 247
 be2:	80 93 e8 00 	sts	0x00E8, r24
 be6:	90 93 15 01 	sts	0x0115, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bea:	8a dd       	rcall	.-1260   	; 0x700 <Endpoint_ClearStatusStage>
 bec:	80 91 15 01 	lds	r24, 0x0115
 bf0:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bf2:	04 c0       	rjmp	.+8      	; 0xbfc <USB_Device_ProcessControlRequest+0x266>
 bf4:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 bf8:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <USB_Device_ProcessControlRequest+0x26a>
 bfc:	84 e0       	ldi	r24, 0x04	; 4
 bfe:	01 c0       	rjmp	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0x26c>
 c00:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c02:	80 93 19 01 	sts	0x0119, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c06:	86 db       	rcall	.-2292   	; 0x314 <EVENT_USB_Device_ConfigurationChanged>
 c08:	80 91 e8 00 	lds	r24, 0x00E8
 c0c:	83 ff       	sbrs	r24, 3
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <USB_Device_ProcessControlRequest+0x28e>
 c10:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c14:	87 7f       	andi	r24, 0xF7	; 247
 c16:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c1a:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c1e:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c20:	80 93 eb 00 	sts	0x00EB, r24
 c24:	aa 96       	adiw	r28, 0x2a	; 42
 c26:	0f b6       	in	r0, 0x3f	; 63
 c28:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	cd bf       	out	0x3d, r28	; 61
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c34:	1f 91       	pop	r17
 c36:	08 95       	ret

00000c38 <USB_Event_Stub>:
 c38:	08 95       	ret

00000c3a <USB_USBTask>:
 c3a:	cf 93       	push	r28
 c3c:	80 91 19 01 	lds	r24, 0x0119
 c40:	88 23       	and	r24, r24
 c42:	a9 f0       	breq	.+42     	; 0xc6e <USB_USBTask+0x34>
 c44:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c48:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c4a:	90 91 ec 00 	lds	r25, 0x00EC
 c4e:	90 ff       	sbrs	r25, 0
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <USB_USBTask+0x1c>
 c52:	90 e8       	ldi	r25, 0x80	; 128
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <USB_USBTask+0x1e>
 c56:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c58:	c9 2f       	mov	r28, r25
 c5a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c5c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c60:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c64:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c66:	97 de       	rcall	.-722    	; 0x996 <USB_Device_ProcessControlRequest>
 c68:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6a:	c0 93 e9 00 	sts	0x00E9, r28
 c6e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c70:	08 95       	ret

00000c72 <Audio_Device_ConfigureEndpoints>:
 c72:	cf 93       	push	r28
			break;
	}
}

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 c74:	df 93       	push	r29
 c76:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
 c78:	1c 86       	std	Y+12, r1	; 0x0c

	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	8d 83       	std	Y+5, r24	; 0x05
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;
 c7e:	8a 87       	std	Y+10, r24	; 0x0a

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
 c80:	61 e0       	ldi	r22, 0x01	; 1
 c82:	ce 01       	movw	r24, r28
 c84:	02 96       	adiw	r24, 0x02	; 2
 c86:	ff dc       	rcall	.-1538   	; 0x686 <Endpoint_ConfigureEndpointTable>
 c88:	88 23       	and	r24, r24
 c8a:	31 f0       	breq	.+12     	; 0xc98 <Audio_Device_ConfigureEndpoints+0x26>
 c8c:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
 c8e:	ce 01       	movw	r24, r28
 c90:	07 96       	adiw	r24, 0x07	; 7
 c92:	df 91       	pop	r29
	  return false;

	return true;
}
 c94:	cf 91       	pop	r28
 c96:	f7 cc       	rjmp	.-1554   	; 0x686 <Endpoint_ConfigureEndpointTable>
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	df 91       	pop	r29
	  return false;

	return true;
}
 c9c:	cf 91       	pop	r28
 c9e:	08 95       	ret

00000ca0 <Audio_Device_Event_Stub>:
 ca0:	08 95       	ret

00000ca2 <Audio_Device_ProcessControlRequest>:
 ca2:	4f 92       	push	r4
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 ca4:	5f 92       	push	r5
 ca6:	6f 92       	push	r6
 ca8:	7f 92       	push	r7
 caa:	8f 92       	push	r8
 cac:	9f 92       	push	r9
 cae:	af 92       	push	r10
 cb0:	bf 92       	push	r11
 cb2:	cf 92       	push	r12
 cb4:	df 92       	push	r13
 cb6:	ef 92       	push	r14
 cb8:	ff 92       	push	r15
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	00 d0       	rcall	.+0      	; 0xcc4 <Audio_Device_ProcessControlRequest+0x22>
 cc4:	cd b7       	in	r28, 0x3d	; 61
 cc6:	de b7       	in	r29, 0x3e	; 62
 cc8:	6c 01       	movw	r12, r24
				}
			}

			break;
	}
}
 cca:	8d b6       	in	r8, 0x3d	; 61
 ccc:	9e b6       	in	r9, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cce:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 cd2:	83 ff       	sbrs	r24, 3
 cd4:	34 c1       	rjmp	.+616    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
 cd6:	90 91 1a 01 	lds	r25, 0x011A
 cda:	89 2f       	mov	r24, r25
 cdc:	8f 71       	andi	r24, 0x1F	; 31
 cde:	81 30       	cpi	r24, 0x01	; 1
 ce0:	41 f4       	brne	.+16     	; 0xcf2 <Audio_Device_ProcessControlRequest+0x50>
	{
		uint8_t InterfaceIndex = (USB_ControlRequest.wIndex & 0xFF);
 ce2:	20 91 1e 01 	lds	r18, 0x011E

		if ((InterfaceIndex != AudioInterfaceInfo->Config.ControlInterfaceNumber) &&
 ce6:	f6 01       	movw	r30, r12
 ce8:	30 81       	ld	r19, Z
 cea:	23 17       	cp	r18, r19
 cec:	69 f0       	breq	.+26     	; 0xd08 <Audio_Device_ProcessControlRequest+0x66>
 cee:	31 81       	ldd	r19, Z+1	; 0x01
 cf0:	09 c0       	rjmp	.+18     	; 0xd04 <Audio_Device_ProcessControlRequest+0x62>
		    (InterfaceIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber))
		{
			return;
		}
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
 cf2:	82 30       	cpi	r24, 0x02	; 2
 cf4:	49 f4       	brne	.+18     	; 0xd08 <Audio_Device_ProcessControlRequest+0x66>
	{
		uint8_t EndpointAddress = (USB_ControlRequest.wIndex & 0xFF);
 cf6:	20 91 1e 01 	lds	r18, 0x011E

		if ((EndpointAddress != AudioInterfaceInfo->Config.DataINEndpoint.Address) &&
 cfa:	f6 01       	movw	r30, r12
 cfc:	32 81       	ldd	r19, Z+2	; 0x02
 cfe:	23 17       	cp	r18, r19
 d00:	19 f0       	breq	.+6      	; 0xd08 <Audio_Device_ProcessControlRequest+0x66>
 d02:	37 81       	ldd	r19, Z+7	; 0x07
 d04:	23 13       	cpse	r18, r19
 d06:	1b c1       	rjmp	.+566    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
 d08:	50 90 1b 01 	lds	r5, 0x011B
 d0c:	fb e0       	ldi	r31, 0x0B	; 11
 d0e:	5f 16       	cp	r5, r31
 d10:	99 f0       	breq	.+38     	; 0xd38 <Audio_Device_ProcessControlRequest+0x96>
 d12:	f5 15       	cp	r31, r5
 d14:	28 f0       	brcs	.+10     	; 0xd20 <Audio_Device_ProcessControlRequest+0x7e>
 d16:	9f ef       	ldi	r25, 0xFF	; 255
 d18:	95 0d       	add	r25, r5
 d1a:	94 30       	cpi	r25, 0x04	; 4
 d1c:	60 f1       	brcs	.+88     	; 0xd76 <Audio_Device_ProcessControlRequest+0xd4>
 d1e:	0f c1       	rjmp	.+542    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 d20:	21 e8       	ldi	r18, 0x81	; 129
 d22:	52 16       	cp	r5, r18
 d24:	08 f4       	brcc	.+2      	; 0xd28 <Audio_Device_ProcessControlRequest+0x86>
 d26:	0b c1       	rjmp	.+534    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 d28:	34 e8       	ldi	r19, 0x84	; 132
 d2a:	35 15       	cp	r19, r5
 d2c:	08 f0       	brcs	.+2      	; 0xd30 <Audio_Device_ProcessControlRequest+0x8e>
 d2e:	aa c0       	rjmp	.+340    	; 0xe84 <Audio_Device_ProcessControlRequest+0x1e2>
 d30:	6f ef       	ldi	r22, 0xFF	; 255
 d32:	56 16       	cp	r5, r22
 d34:	a9 f0       	breq	.+42     	; 0xd60 <Audio_Device_ProcessControlRequest+0xbe>
 d36:	03 c1       	rjmp	.+518    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 d38:	91 30       	cpi	r25, 0x01	; 1
 d3a:	09 f0       	breq	.+2      	; 0xd3e <Audio_Device_ProcessControlRequest+0x9c>
 d3c:	00 c1       	rjmp	.+512    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d3e:	80 91 e8 00 	lds	r24, 0x00E8
 d42:	87 7f       	andi	r24, 0xF7	; 247
 d44:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d48:	db dc       	rcall	.-1610   	; 0x700 <Endpoint_ClearStatusStage>
 d4a:	90 91 1c 01 	lds	r25, 0x011C

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
 d4e:	81 e0       	ldi	r24, 0x01	; 1
 d50:	91 11       	cpse	r25, r1
 d52:	01 c0       	rjmp	.+2      	; 0xd56 <Audio_Device_ProcessControlRequest+0xb4>
 d54:	80 e0       	ldi	r24, 0x00	; 0
 d56:	f6 01       	movw	r30, r12
 d58:	84 87       	std	Z+12, r24	; 0x0c
 d5a:	c6 01       	movw	r24, r12
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
 d5c:	a1 df       	rcall	.-190    	; 0xca0 <Audio_Device_Event_Stub>
 d5e:	ef c0       	rjmp	.+478    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 d60:	91 52       	subi	r25, 0x21	; 33
 d62:	92 30       	cpi	r25, 0x02	; 2
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 d64:	08 f0       	brcs	.+2      	; 0xd68 <Audio_Device_ProcessControlRequest+0xc6>
 d66:	eb c0       	rjmp	.+470    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 d68:	80 91 e8 00 	lds	r24, 0x00E8
 d6c:	87 7f       	andi	r24, 0xF7	; 247
 d6e:	80 93 e8 00 	sts	0x00E8, r24
 d72:	c6 dc       	rcall	.-1652   	; 0x700 <Endpoint_ClearStatusStage>
 d74:	e4 c0       	rjmp	.+456    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d76:	82 30       	cpi	r24, 0x02	; 2
 d78:	09 f0       	breq	.+2      	; 0xd7c <Audio_Device_ProcessControlRequest+0xda>
 d7a:	42 c0       	rjmp	.+132    	; 0xe00 <Audio_Device_ProcessControlRequest+0x15e>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
 d7c:	70 90 1e 01 	lds	r7, 0x011E
 d80:	60 90 1d 01 	lds	r6, 0x011D
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 d84:	e1 2c       	mov	r14, r1
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
 d86:	f1 2c       	mov	r15, r1
 d88:	00 e0       	ldi	r16, 0x00	; 0

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 d8a:	10 e0       	ldi	r17, 0x00	; 0
 d8c:	26 2d       	mov	r18, r6
 d8e:	47 2d       	mov	r20, r7
 d90:	65 2d       	mov	r22, r5
 d92:	c6 01       	movw	r24, r12
 d94:	cb da       	rcall	.-2666   	; 0x32c <CALLBACK_Audio_Device_GetSetEndpointProperty>
 d96:	88 23       	and	r24, r24
 d98:	09 f4       	brne	.+2      	; 0xd9c <Audio_Device_ProcessControlRequest+0xfa>
 d9a:	d1 c0       	rjmp	.+418    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 d9c:	ad b6       	in	r10, 0x3d	; 61
 d9e:	be b6       	in	r11, 0x3e	; 62
 da0:	80 91 20 01 	lds	r24, 0x0120
 da4:	90 91 21 01 	lds	r25, 0x0121
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
 da8:	9a 83       	std	Y+2, r25	; 0x02
 daa:	89 83       	std	Y+1, r24	; 0x01
 dac:	2d b7       	in	r18, 0x3d	; 61
 dae:	3e b7       	in	r19, 0x3e	; 62
 db0:	28 1b       	sub	r18, r24
 db2:	39 0b       	sbc	r19, r25
					uint8_t  Value[ValueLength];
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	3e bf       	out	0x3e, r19	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	2d bf       	out	0x3d, r18	; 61
 dbe:	6d b7       	in	r22, 0x3d	; 61
 dc0:	7e b7       	in	r23, 0x3e	; 62
 dc2:	6f 5f       	subi	r22, 0xFF	; 255
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255
 dc6:	7b 01       	movw	r14, r22
 dc8:	80 91 e8 00 	lds	r24, 0x00E8
 dcc:	87 7f       	andi	r24, 0xF7	; 247
 dce:	80 93 e8 00 	sts	0x00E8, r24
 dd2:	69 81       	ldd	r22, Y+1	; 0x01
 dd4:	7a 81       	ldd	r23, Y+2	; 0x02
 dd6:	c7 01       	movw	r24, r14
 dd8:	83 db       	rcall	.-2298   	; 0x4e0 <Endpoint_Read_Control_Stream_LE>

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 dda:	80 91 e8 00 	lds	r24, 0x00E8
 dde:	8e 77       	andi	r24, 0x7E	; 126
 de0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 de4:	8e 01       	movw	r16, r28
 de6:	0f 5f       	subi	r16, 0xFF	; 255
 de8:	1f 4f       	sbci	r17, 0xFF	; 255
 dea:	26 2d       	mov	r18, r6
 dec:	47 2d       	mov	r20, r7
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 dee:	65 2d       	mov	r22, r5
 df0:	c6 01       	movw	r24, r12
 df2:	9c da       	rcall	.-2760   	; 0x32c <CALLBACK_Audio_Device_GetSetEndpointProperty>
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	be be       	out	0x3e, r11	; 62
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	ad be       	out	0x3d, r10	; 61
 dfe:	9f c0       	rjmp	.+318    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 e00:	81 30       	cpi	r24, 0x01	; 1
 e02:	09 f0       	breq	.+2      	; 0xe06 <Audio_Device_ProcessControlRequest+0x164>
 e04:	9c c0       	rjmp	.+312    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 e06:	40 90 1f 01 	lds	r4, 0x011F
 e0a:	a0 90 1c 01 	lds	r10, 0x011C
					                                             EndpointControl, &ValueLength, Value);
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
 e0e:	b0 90 1d 01 	lds	r11, 0x011D
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
 e12:	e1 2c       	mov	r14, r1
 e14:	f1 2c       	mov	r15, r1
				uint16_t Parameter = USB_ControlRequest.wValue;
 e16:	00 e0       	ldi	r16, 0x00	; 0
 e18:	10 e0       	ldi	r17, 0x00	; 0
 e1a:	95 01       	movw	r18, r10
 e1c:	44 2d       	mov	r20, r4

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 e1e:	65 2d       	mov	r22, r5
 e20:	c6 01       	movw	r24, r12
 e22:	cd da       	rcall	.-2662   	; 0x3be <CALLBACK_Audio_Device_GetSetInterfaceProperty>
 e24:	88 23       	and	r24, r24
 e26:	09 f4       	brne	.+2      	; 0xe2a <Audio_Device_ProcessControlRequest+0x188>
 e28:	8a c0       	rjmp	.+276    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 e2a:	6d b6       	in	r6, 0x3d	; 61
 e2c:	7e b6       	in	r7, 0x3e	; 62
 e2e:	80 91 20 01 	lds	r24, 0x0120
 e32:	90 91 21 01 	lds	r25, 0x0121
 e36:	9a 83       	std	Y+2, r25	; 0x02
 e38:	89 83       	std	Y+1, r24	; 0x01
 e3a:	ed b7       	in	r30, 0x3d	; 61
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
 e3c:	fe b7       	in	r31, 0x3e	; 62
 e3e:	e8 1b       	sub	r30, r24
 e40:	f9 0b       	sbc	r31, r25
 e42:	0f b6       	in	r0, 0x3f	; 63
 e44:	f8 94       	cli
 e46:	fe bf       	out	0x3e, r31	; 62
					uint8_t  Value[ValueLength];
 e48:	0f be       	out	0x3f, r0	; 63
 e4a:	ed bf       	out	0x3d, r30	; 61
 e4c:	2d b7       	in	r18, 0x3d	; 61
 e4e:	3e b7       	in	r19, 0x3e	; 62
 e50:	2f 5f       	subi	r18, 0xFF	; 255
 e52:	3f 4f       	sbci	r19, 0xFF	; 255
 e54:	79 01       	movw	r14, r18
 e56:	80 91 e8 00 	lds	r24, 0x00E8
 e5a:	87 7f       	andi	r24, 0xF7	; 247
 e5c:	80 93 e8 00 	sts	0x00E8, r24
 e60:	69 81       	ldd	r22, Y+1	; 0x01
 e62:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e64:	c9 01       	movw	r24, r18
 e66:	3c db       	rcall	.-2440   	; 0x4e0 <Endpoint_Read_Control_Stream_LE>
 e68:	80 91 e8 00 	lds	r24, 0x00E8
 e6c:	8e 77       	andi	r24, 0x7E	; 126

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 e6e:	80 93 e8 00 	sts	0x00E8, r24
 e72:	8e 01       	movw	r16, r28
 e74:	0f 5f       	subi	r16, 0xFF	; 255
 e76:	1f 4f       	sbci	r17, 0xFF	; 255
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e78:	95 01       	movw	r18, r10
 e7a:	44 2d       	mov	r20, r4
 e7c:	65 2d       	mov	r22, r5
 e7e:	c6 01       	movw	r24, r12
 e80:	9e da       	rcall	.-2756   	; 0x3be <CALLBACK_Audio_Device_GetSetInterfaceProperty>
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 e82:	58 c0       	rjmp	.+176    	; 0xf34 <Audio_Device_ProcessControlRequest+0x292>
 e84:	82 30       	cpi	r24, 0x02	; 2
 e86:	09 f5       	brne	.+66     	; 0xeca <Audio_Device_ProcessControlRequest+0x228>
 e88:	6d b6       	in	r6, 0x3d	; 61
 e8a:	7e b6       	in	r7, 0x3e	; 62
 e8c:	40 91 1e 01 	lds	r20, 0x011E
 e90:	20 91 1d 01 	lds	r18, 0x011D
 e94:	80 91 20 01 	lds	r24, 0x0120
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
 e98:	90 91 21 01 	lds	r25, 0x0121
 e9c:	9a 83       	std	Y+2, r25	; 0x02
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 e9e:	89 83       	std	Y+1, r24	; 0x01
 ea0:	6d b7       	in	r22, 0x3d	; 61
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
 ea2:	7e b7       	in	r23, 0x3e	; 62
 ea4:	68 1b       	sub	r22, r24
				uint16_t ValueLength      = USB_ControlRequest.wLength;
 ea6:	79 0b       	sbc	r23, r25
 ea8:	0f b6       	in	r0, 0x3f	; 63
 eaa:	f8 94       	cli
 eac:	7e bf       	out	0x3e, r23	; 62
 eae:	0f be       	out	0x3f, r0	; 63
 eb0:	6d bf       	out	0x3d, r22	; 61
				uint8_t  Value[ValueLength];
 eb2:	8d b7       	in	r24, 0x3d	; 61
 eb4:	9e b7       	in	r25, 0x3e	; 62
 eb6:	01 96       	adiw	r24, 0x01	; 1
 eb8:	5c 01       	movw	r10, r24
 eba:	7c 01       	movw	r14, r24
 ebc:	8e 01       	movw	r16, r28
 ebe:	0f 5f       	subi	r16, 0xFF	; 255
 ec0:	1f 4f       	sbci	r17, 0xFF	; 255
 ec2:	65 2d       	mov	r22, r5
 ec4:	c6 01       	movw	r24, r12
 ec6:	32 da       	rcall	.-2972   	; 0x32c <CALLBACK_Audio_Device_GetSetEndpointProperty>
 ec8:	25 c0       	rjmp	.+74     	; 0xf14 <Audio_Device_ProcessControlRequest+0x272>
 eca:	81 30       	cpi	r24, 0x01	; 1

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
 ecc:	c1 f5       	brne	.+112    	; 0xf3e <Audio_Device_ProcessControlRequest+0x29c>
 ece:	6d b6       	in	r6, 0x3d	; 61
 ed0:	7e b6       	in	r7, 0x3e	; 62
 ed2:	40 91 1f 01 	lds	r20, 0x011F
 ed6:	20 91 1c 01 	lds	r18, 0x011C
 eda:	30 91 1d 01 	lds	r19, 0x011D
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
					Endpoint_ClearOUT();
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
 ede:	80 91 20 01 	lds	r24, 0x0120
 ee2:	90 91 21 01 	lds	r25, 0x0121
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
 ee6:	9a 83       	std	Y+2, r25	; 0x02
 ee8:	89 83       	std	Y+1, r24	; 0x01
				uint16_t Parameter   = USB_ControlRequest.wValue;
 eea:	ed b7       	in	r30, 0x3d	; 61
 eec:	fe b7       	in	r31, 0x3e	; 62
 eee:	e8 1b       	sub	r30, r24
 ef0:	f9 0b       	sbc	r31, r25
				uint16_t ValueLength = USB_ControlRequest.wLength;
 ef2:	0f b6       	in	r0, 0x3f	; 63
 ef4:	f8 94       	cli
 ef6:	fe bf       	out	0x3e, r31	; 62
 ef8:	0f be       	out	0x3f, r0	; 63
 efa:	ed bf       	out	0x3d, r30	; 61
 efc:	6d b7       	in	r22, 0x3d	; 61
				uint8_t  Value[ValueLength];
 efe:	7e b7       	in	r23, 0x3e	; 62
 f00:	6f 5f       	subi	r22, 0xFF	; 255
 f02:	7f 4f       	sbci	r23, 0xFF	; 255
 f04:	5b 01       	movw	r10, r22
 f06:	7b 01       	movw	r14, r22
 f08:	8e 01       	movw	r16, r28
 f0a:	0f 5f       	subi	r16, 0xFF	; 255
 f0c:	1f 4f       	sbci	r17, 0xFF	; 255
 f0e:	65 2d       	mov	r22, r5
 f10:	c6 01       	movw	r24, r12
 f12:	55 da       	rcall	.-2902   	; 0x3be <CALLBACK_Audio_Device_GetSetInterfaceProperty>
 f14:	88 23       	and	r24, r24
 f16:	71 f0       	breq	.+28     	; 0xf34 <Audio_Device_ProcessControlRequest+0x292>
 f18:	80 91 e8 00 	lds	r24, 0x00E8

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 f1c:	87 7f       	andi	r24, 0xF7	; 247
 f1e:	80 93 e8 00 	sts	0x00E8, r24
 f22:	69 81       	ldd	r22, Y+1	; 0x01
 f24:	7a 81       	ldd	r23, Y+2	; 0x02
 f26:	c5 01       	movw	r24, r10
 f28:	7e da       	rcall	.-2820   	; 0x426 <Endpoint_Write_Control_Stream_LE>
 f2a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f2e:	8b 77       	andi	r24, 0x7B	; 123
 f30:	80 93 e8 00 	sts	0x00E8, r24
 f34:	0f b6       	in	r0, 0x3f	; 63
 f36:	f8 94       	cli
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
 f38:	7e be       	out	0x3e, r7	; 62
 f3a:	0f be       	out	0x3f, r0	; 63
 f3c:	6d be       	out	0x3d, r6	; 61
 f3e:	0f b6       	in	r0, 0x3f	; 63
 f40:	f8 94       	cli
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f42:	9e be       	out	0x3e, r9	; 62
 f44:	0f be       	out	0x3f, r0	; 63
 f46:	8d be       	out	0x3d, r8	; 61
 f48:	0f 90       	pop	r0
 f4a:	0f 90       	pop	r0
 f4c:	df 91       	pop	r29
 f4e:	cf 91       	pop	r28
 f50:	1f 91       	pop	r17
 f52:	0f 91       	pop	r16
 f54:	ff 90       	pop	r15
				}
			}

			break;
	}
}
 f56:	ef 90       	pop	r14
 f58:	df 90       	pop	r13
 f5a:	cf 90       	pop	r12
 f5c:	bf 90       	pop	r11
 f5e:	af 90       	pop	r10
 f60:	9f 90       	pop	r9
 f62:	8f 90       	pop	r8
 f64:	7f 90       	pop	r7
 f66:	6f 90       	pop	r6
 f68:	5f 90       	pop	r5
 f6a:	4f 90       	pop	r4
 f6c:	08 95       	ret

00000f6e <__udivmodsi4>:
 f6e:	a1 e2       	ldi	r26, 0x21	; 33
 f70:	1a 2e       	mov	r1, r26
 f72:	aa 1b       	sub	r26, r26
 f74:	bb 1b       	sub	r27, r27
 f76:	fd 01       	movw	r30, r26
 f78:	0d c0       	rjmp	.+26     	; 0xf94 <__udivmodsi4_ep>

00000f7a <__udivmodsi4_loop>:
 f7a:	aa 1f       	adc	r26, r26
 f7c:	bb 1f       	adc	r27, r27
 f7e:	ee 1f       	adc	r30, r30
 f80:	ff 1f       	adc	r31, r31
 f82:	a2 17       	cp	r26, r18
 f84:	b3 07       	cpc	r27, r19
 f86:	e4 07       	cpc	r30, r20
 f88:	f5 07       	cpc	r31, r21
 f8a:	20 f0       	brcs	.+8      	; 0xf94 <__udivmodsi4_ep>
 f8c:	a2 1b       	sub	r26, r18
 f8e:	b3 0b       	sbc	r27, r19
 f90:	e4 0b       	sbc	r30, r20
 f92:	f5 0b       	sbc	r31, r21

00000f94 <__udivmodsi4_ep>:
 f94:	66 1f       	adc	r22, r22
 f96:	77 1f       	adc	r23, r23
 f98:	88 1f       	adc	r24, r24
 f9a:	99 1f       	adc	r25, r25
 f9c:	1a 94       	dec	r1
 f9e:	69 f7       	brne	.-38     	; 0xf7a <__udivmodsi4_loop>
 fa0:	60 95       	com	r22
 fa2:	70 95       	com	r23
 fa4:	80 95       	com	r24
 fa6:	90 95       	com	r25
 fa8:	9b 01       	movw	r18, r22
 faa:	ac 01       	movw	r20, r24
 fac:	bd 01       	movw	r22, r26
 fae:	cf 01       	movw	r24, r30
 fb0:	08 95       	ret

00000fb2 <_exit>:
 fb2:	f8 94       	cli

00000fb4 <__stop_program>:
 fb4:	ff cf       	rjmp	.-2      	; 0xfb4 <__stop_program>

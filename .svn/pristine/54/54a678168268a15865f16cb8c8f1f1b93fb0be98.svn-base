
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002486  0000251a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800128  00800128  00002542  2**0
                  ALLOC
  3 .stab         00002988  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110f  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005fdb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008a0  00000000  00000000  00005fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f62b  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000037ac  00000000  00000000  00015eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000562b  00000000  00000000  00019663  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001868  00000000  00000000  0001ec90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004faa  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ae07  00000000  00000000  000254a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000960  00000000  00000000  000302a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	00 00       	nop
       4:	35 c1       	rjmp	.+618    	; 0x270 <__bad_interrupt>
       6:	00 00       	nop
       8:	33 c1       	rjmp	.+614    	; 0x270 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c1       	rjmp	.+606    	; 0x270 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c1       	rjmp	.+602    	; 0x270 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c1       	rjmp	.+598    	; 0x270 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c1       	rjmp	.+590    	; 0x270 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c1       	rjmp	.+586    	; 0x270 <__bad_interrupt>
      26:	00 00       	nop
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
      28:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_10>
      2c:	21 c1       	rjmp	.+578    	; 0x270 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__bad_interrupt>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
      32:	00 00       	nop
      34:	1d c1       	rjmp	.+570    	; 0x270 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c1       	rjmp	.+566    	; 0x270 <__bad_interrupt>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      3a:	00 00       	nop
      3c:	19 c1       	rjmp	.+562    	; 0x270 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c1       	rjmp	.+558    	; 0x270 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c1       	rjmp	.+554    	; 0x270 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c1       	rjmp	.+550    	; 0x270 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c1       	rjmp	.+546    	; 0x270 <__bad_interrupt>
      4e:	00 00       	nop
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
      50:	0f c1       	rjmp	.+542    	; 0x270 <__bad_interrupt>
      52:	00 00       	nop
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
      54:	0d c1       	rjmp	.+538    	; 0x270 <__bad_interrupt>
      56:	00 00       	nop
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
      58:	0b c1       	rjmp	.+534    	; 0x270 <__bad_interrupt>
      5a:	00 00       	nop

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
      5c:	09 c1       	rjmp	.+530    	; 0x270 <__bad_interrupt>
      5e:	00 00       	nop

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
      60:	07 c1       	rjmp	.+526    	; 0x270 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c1       	rjmp	.+522    	; 0x270 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c1       	rjmp	.+518    	; 0x270 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c1       	rjmp	.+514    	; 0x270 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c0       	rjmp	.+510    	; 0x270 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c0       	rjmp	.+506    	; 0x270 <__bad_interrupt>
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
      76:	00 00       	nop
      78:	fb c0       	rjmp	.+502    	; 0x270 <__bad_interrupt>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      7a:	00 00       	nop
      7c:	f9 c0       	rjmp	.+498    	; 0x270 <__bad_interrupt>
      7e:	00 00       	nop
		  DataINEndpoint  = EndpointData;
      80:	f7 c0       	rjmp	.+494    	; 0x270 <__bad_interrupt>
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
      82:	00 00       	nop
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      84:	f5 c0       	rjmp	.+490    	; 0x270 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c0       	rjmp	.+486    	; 0x270 <__bad_interrupt>
}

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
      8a:	00 00       	nop
      8c:	f1 c0       	rjmp	.+482    	; 0x270 <__bad_interrupt>
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
      8e:	00 00       	nop
      90:	ef c0       	rjmp	.+478    	; 0x270 <__bad_interrupt>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
      92:	00 00       	nop
      94:	ed c0       	rjmp	.+474    	; 0x270 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4566>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4559>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	  return AOA_ENUMERROR_PipeConfigurationFailed;

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

	return AOA_ENUMERROR_NoError;
}
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4554>:
     11d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;

	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
     12d:	2e 0d 0a 00                                         ....

00000131 <__c.4552>:
     131:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
     141:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
     151:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
     161:	64 20 4d 6f 75 73 65 2e 0d 0a 00                    d Mouse....

0000016c <__c.4550>:
	  return AUDIO_ENUMERROR_PipeConfigurationFailed;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
     16c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
     17c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
     18c:	6f 6e 2e 0d 0a 00                                   on....

00000192 <__c.4548>:
     192:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a2:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
     1b2:	65 2e 0d 0a 00                                      e....

000001b7 <__c.4546>:
     1b7:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     1c7:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
     1d7:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e4 <__c.4539>:
     1e4:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f4:	68 65 64 2e 0d 0a 00                                hed....

000001fb <__c.4534>:
     1fb:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20b:	0d 0a 00                                            ...

0000020e <__c.4512>:
     20e:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     21e:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     22e:	5b 33 37 6d 00 00                                   [37m..

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e2       	ldi	r29, 0x20	; 32
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	e6 e8       	ldi	r30, 0x86	; 134
     248:	f4 e2       	ldi	r31, 0x24	; 36
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a8 32       	cpi	r26, 0x28	; 40
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	15 e0       	ldi	r17, 0x05	; 5
     25c:	a8 e2       	ldi	r26, 0x28	; 40
     25e:	b1 e0       	ldi	r27, 0x01	; 1
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a3 32       	cpi	r26, 0x23	; 35
     266:	b1 07       	cpc	r27, r17
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>
     26a:	05 d1       	rcall	.+522    	; 0x476 <main>
     26c:	0c 94 41 12 	jmp	0x2482	; 0x2482 <_exit>

00000270 <__bad_interrupt>:
     270:	c7 ce       	rjmp	.-626    	; 0x0 <__vectors>

00000272 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     272:	9b b1       	in	r25, 0x0b	; 11
     274:	9f 70       	andi	r25, 0x0F	; 15
     276:	98 2b       	or	r25, r24
     278:	9b b9       	out	0x0b, r25	; 11
     27a:	08 95       	ret

0000027c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     27c:	84 b7       	in	r24, 0x34	; 52
     27e:	87 7f       	andi	r24, 0xF7	; 247
     280:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	80 93 60 00 	sts	0x0060, r24
     28c:	10 92 60 00 	sts	0x0060, r1
     290:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	80 93 61 00 	sts	0x0061, r24
     29e:	90 93 61 00 	sts	0x0061, r25
     2a2:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2a4:	83 e3       	ldi	r24, 0x33	; 51
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	90 93 cd 00 	sts	0x00CD, r25
     2ac:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2b6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2ba:	88 e1       	ldi	r24, 0x18	; 24
     2bc:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     2c0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2c2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2c4:	8a b1       	in	r24, 0x0a	; 10
     2c6:	80 6f       	ori	r24, 0xF0	; 240
     2c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2d0:	0e 94 76 0a 	call	0x14ec	; 0x14ec <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <Serial_CreateStream>

000002dc <MouseHost_Task>:

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     2fe:	cd b6       	in	r12, 0x3d	; 61
     300:	de b6       	in	r13, 0x3e	; 62
/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     302:	80 91 0e 05 	lds	r24, 0x050E
     306:	8b 30       	cpi	r24, 0x0B	; 11
     308:	09 f0       	breq	.+2      	; 0x30c <MouseHost_Task+0x30>
     30a:	a0 c0       	rjmp	.+320    	; 0x44c <MouseHost_Task+0x170>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <HID_Host_IsReportReceived>
     314:	88 23       	and	r24, r24
     316:	09 f4       	brne	.+2      	; 0x31a <MouseHost_Task+0x3e>
     318:	99 c0       	rjmp	.+306    	; 0x44c <MouseHost_Task+0x170>
     31a:	ad b6       	in	r10, 0x3d	; 61
     31c:	be b6       	in	r11, 0x3e	; 62
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
     31e:	80 91 16 01 	lds	r24, 0x0116
     322:	2d b7       	in	r18, 0x3d	; 61
     324:	3e b7       	in	r19, 0x3e	; 62
     326:	28 1b       	sub	r18, r24
     328:	31 09       	sbc	r19, r1
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	3e bf       	out	0x3e, r19	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	2d bf       	out	0x3d, r18	; 61
     334:	8d b7       	in	r24, 0x3d	; 61
     336:	9e b7       	in	r25, 0x3e	; 62
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	7c 01       	movw	r14, r24
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     33c:	bc 01       	movw	r22, r24
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     346:	61 2c       	mov	r6, r1
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     348:	71 2c       	mov	r7, r1

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     34a:	3a e2       	ldi	r19, 0x2A	; 42
     34c:	53 2e       	mov	r5, r19
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     34e:	40 e1       	ldi	r20, 0x10	; 16
     350:	84 2e       	mov	r8, r20
     352:	91 2c       	mov	r9, r1
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     354:	80 91 28 01 	lds	r24, 0x0128
     358:	68 16       	cp	r6, r24
     35a:	08 f0       	brcs	.+2      	; 0x35e <MouseHost_Task+0x82>
     35c:	70 c0       	rjmp	.+224    	; 0x43e <MouseHost_Task+0x162>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35e:	56 9c       	mul	r5, r6
     360:	80 01       	movw	r16, r0
     362:	11 24       	eor	r1, r1
     364:	07 5d       	subi	r16, 0xD7	; 215
     366:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     368:	b8 01       	movw	r22, r16
     36a:	c7 01       	movw	r24, r14
     36c:	c9 d4       	rcall	.+2450   	; 0xd00 <USB_GetHIDReportItemInfo>
     36e:	88 23       	and	r24, r24
     370:	09 f4       	brne	.+2      	; 0x374 <MouseHost_Task+0x98>
     372:	63 c0       	rjmp	.+198    	; 0x43a <MouseHost_Task+0x15e>
     374:	f8 01       	movw	r30, r16
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     376:	81 85       	ldd	r24, Z+9	; 0x09
     378:	92 85       	ldd	r25, Z+10	; 0x0a
     37a:	89 30       	cpi	r24, 0x09	; 9
     37c:	91 05       	cpc	r25, r1
     37e:	79 f4       	brne	.+30     	; 0x39e <MouseHost_Task+0xc2>
     380:	82 81       	ldd	r24, Z+2	; 0x02
     382:	81 11       	cpse	r24, r1
     384:	5a c0       	rjmp	.+180    	; 0x43a <MouseHost_Task+0x15e>
     386:	82 a1       	ldd	r24, Z+34	; 0x22
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     388:	93 a1       	ldd	r25, Z+35	; 0x23
     38a:	a4 a1       	ldd	r26, Z+36	; 0x24
     38c:	b5 a1       	ldd	r27, Z+37	; 0x25
     38e:	89 2b       	or	r24, r25
     390:	8a 2b       	or	r24, r26
     392:	8b 2b       	or	r24, r27
     394:	09 f4       	brne	.+2      	; 0x398 <MouseHost_Task+0xbc>
     396:	51 c0       	rjmp	.+162    	; 0x43a <MouseHost_Task+0x15e>
     398:	90 ef       	ldi	r25, 0xF0	; 240
				  LEDMask = LEDS_ALL_LEDS;
     39a:	79 2e       	mov	r7, r25
     39c:	4e c0       	rjmp	.+156    	; 0x43a <MouseHost_Task+0x15e>
     39e:	01 97       	sbiw	r24, 0x01	; 1
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <MouseHost_Task+0xc8>
     3a2:	4b c0       	rjmp	.+150    	; 0x43a <MouseHost_Task+0x15e>
     3a4:	f8 01       	movw	r30, r16
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     3a6:	23 85       	ldd	r18, Z+11	; 0x0b
     3a8:	34 85       	ldd	r19, Z+12	; 0x0c
     3aa:	28 33       	cpi	r18, 0x38	; 56
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3ac:	31 05       	cpc	r19, r1
     3ae:	c1 f4       	brne	.+48     	; 0x3e0 <MouseHost_Task+0x104>
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     3b2:	81 11       	cpse	r24, r1
     3b4:	15 c0       	rjmp	.+42     	; 0x3e0 <MouseHost_Task+0x104>
     3b6:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     3b8:	94 01       	movw	r18, r8
     3ba:	28 1b       	sub	r18, r24
     3bc:	31 09       	sbc	r19, r1
     3be:	82 a1       	ldd	r24, Z+34	; 0x22
     3c0:	93 a1       	ldd	r25, Z+35	; 0x23
     3c2:	a4 a1       	ldd	r26, Z+36	; 0x24
     3c4:	b5 a1       	ldd	r27, Z+37	; 0x25
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <MouseHost_Task+0xf4>
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	aa 1f       	adc	r26, r26
     3ce:	bb 1f       	adc	r27, r27
     3d0:	2a 95       	dec	r18
     3d2:	d2 f7       	brpl	.-12     	; 0x3c8 <MouseHost_Task+0xec>
     3d4:	00 97       	sbiw	r24, 0x00	; 0

				if (WheelDelta)
     3d6:	89 f1       	breq	.+98     	; 0x43a <MouseHost_Task+0x15e>
     3d8:	74 f1       	brlt	.+92     	; 0x436 <MouseHost_Task+0x15a>
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     3da:	20 eb       	ldi	r18, 0xB0	; 176
     3dc:	72 2e       	mov	r7, r18
     3de:	2d c0       	rjmp	.+90     	; 0x43a <MouseHost_Task+0x15e>
     3e0:	c9 01       	movw	r24, r18
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3e2:	c0 97       	sbiw	r24, 0x30	; 48
     3e4:	02 97       	sbiw	r24, 0x02	; 2
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3e6:	48 f5       	brcc	.+82     	; 0x43a <MouseHost_Task+0x15e>
     3e8:	f8 01       	movw	r30, r16
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     3ea:	82 81       	ldd	r24, Z+2	; 0x02
     3ec:	81 11       	cpse	r24, r1
     3ee:	25 c0       	rjmp	.+74     	; 0x43a <MouseHost_Task+0x15e>
     3f0:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3f2:	a4 01       	movw	r20, r8
     3f4:	48 1b       	sub	r20, r24
     3f6:	51 09       	sbc	r21, r1
     3f8:	82 a1       	ldd	r24, Z+34	; 0x22
     3fa:	93 a1       	ldd	r25, Z+35	; 0x23
     3fc:	a4 a1       	ldd	r26, Z+36	; 0x24
     3fe:	b5 a1       	ldd	r27, Z+37	; 0x25
     400:	04 c0       	rjmp	.+8      	; 0x40a <MouseHost_Task+0x12e>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	aa 1f       	adc	r26, r26
     408:	bb 1f       	adc	r27, r27
     40a:	4a 95       	dec	r20
     40c:	d2 f7       	brpl	.-12     	; 0x402 <MouseHost_Task+0x126>
     40e:	00 97       	sbiw	r24, 0x00	; 0

				if (DeltaMovement)
     410:	a1 f0       	breq	.+40     	; 0x43a <MouseHost_Task+0x15e>
     412:	20 33       	cpi	r18, 0x30	; 48
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     414:	31 05       	cpc	r19, r1
     416:	39 f4       	brne	.+14     	; 0x426 <MouseHost_Task+0x14a>
     418:	18 16       	cp	r1, r24
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     41a:	19 06       	cpc	r1, r25
     41c:	14 f4       	brge	.+4      	; 0x422 <MouseHost_Task+0x146>
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	08 c0       	rjmp	.+16     	; 0x432 <MouseHost_Task+0x156>
     422:	80 e2       	ldi	r24, 0x20	; 32
     424:	06 c0       	rjmp	.+12     	; 0x432 <MouseHost_Task+0x156>
     426:	18 16       	cp	r1, r24
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     428:	19 06       	cpc	r1, r25
     42a:	14 f4       	brge	.+4      	; 0x430 <MouseHost_Task+0x154>
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	01 c0       	rjmp	.+2      	; 0x432 <MouseHost_Task+0x156>
     430:	80 e4       	ldi	r24, 0x40	; 64
     432:	78 2a       	or	r7, r24
     434:	02 c0       	rjmp	.+4      	; 0x43a <MouseHost_Task+0x15e>
     436:	80 e7       	ldi	r24, 0x70	; 112
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     438:	78 2e       	mov	r7, r24
     43a:	63 94       	inc	r6
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     43c:	8b cf       	rjmp	.-234    	; 0x354 <MouseHost_Task+0x78>
     43e:	87 2d       	mov	r24, r7
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     440:	18 df       	rcall	.-464    	; 0x272 <LEDs_SetAllLEDs>
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	be be       	out	0x3e, r11	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	ad be       	out	0x3d, r10	; 61
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
	}
}
     450:	de be       	out	0x3e, r13	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd be       	out	0x3d, r12	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	df 90       	pop	r13
     464:	cf 90       	pop	r12
     466:	bf 90       	pop	r11
     468:	af 90       	pop	r10
     46a:	9f 90       	pop	r9
     46c:	8f 90       	pop	r8
     46e:	7f 90       	pop	r7
     470:	6f 90       	pop	r6
     472:	5f 90       	pop	r5
     474:	08 95       	ret

00000476 <main>:
     476:	02 df       	rcall	.-508    	; 0x27c <SetupHardware>
     478:	8e e0       	ldi	r24, 0x0E	; 14
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
     480:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     482:	f7 de       	rcall	.-530    	; 0x272 <LEDs_SetAllLEDs>
     484:	78 94       	sei
     486:	2a df       	rcall	.-428    	; 0x2dc <MouseHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     488:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     48c:	fc cf       	rjmp	.-8      	; 0x486 <main+0x10>

0000048e <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     48e:	8b ef       	ldi	r24, 0xFB	; 251
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     496:	80 ea       	ldi	r24, 0xA0	; 160
     498:	ec ce       	rjmp	.-552    	; 0x272 <LEDs_SetAllLEDs>

0000049a <EVENT_USB_Host_DeviceUnattached>:
     49a:	84 ee       	ldi	r24, 0xE4	; 228
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4a2:	80 e1       	ldi	r24, 0x10	; 16
     4a4:	e6 ce       	rjmp	.-564    	; 0x272 <LEDs_SetAllLEDs>

000004a6 <EVENT_USB_Host_DeviceEnumerationComplete>:
     4a6:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	c2 50       	subi	r28, 0x02	; 2
     4b0:	d2 40       	sbci	r29, 0x02	; 2
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4bc:	80 ea       	ldi	r24, 0xA0	; 160
     4be:	d9 de       	rcall	.-590    	; 0x272 <LEDs_SetAllLEDs>
     4c0:	20 e0       	ldi	r18, 0x00	; 0

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4c2:	32 e0       	ldi	r19, 0x02	; 2
     4c4:	ae 01       	movw	r20, r28
     4c6:	4f 5f       	subi	r20, 0xFF	; 255
     4c8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ca:	be 01       	movw	r22, r28
     4cc:	6f 5f       	subi	r22, 0xFF	; 255
     4ce:	7d 4f       	sbci	r23, 0xFD	; 253
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 46 0b 	call	0x168c	; 0x168c <USB_Host_GetDeviceConfigDescriptor>
     4d6:	88 23       	and	r24, r24
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4da:	87 eb       	ldi	r24, 0xB7	; 183
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	19 c0       	rjmp	.+50     	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4e0:	cf 5f       	subi	r28, 0xFF	; 255
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     4e2:	dd 4f       	sbci	r29, 0xFD	; 253
     4e4:	68 81       	ld	r22, Y
     4e6:	79 81       	ldd	r23, Y+1	; 0x01
     4e8:	c1 50       	subi	r28, 0x01	; 1
     4ea:	d2 40       	sbci	r29, 0x02	; 2
     4ec:	ae 01       	movw	r20, r28
     4ee:	4f 5f       	subi	r20, 0xFF	; 255
     4f0:	5f 4f       	sbci	r21, 0xFF	; 255
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <HID_Host_ConfigurePipes>
     4fa:	88 23       	and	r24, r24
     4fc:	19 f0       	breq	.+6      	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     4fe:	82 e9       	ldi	r24, 0x92	; 146
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	07 c0       	rjmp	.+14     	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     504:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     506:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <USB_Host_SetDeviceConfiguration>
     50a:	88 23       	and	r24, r24
     50c:	31 f0       	breq	.+12     	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     50e:	8c e6       	ldi	r24, 0x6C	; 108
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
     516:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     518:	15 c0       	rjmp	.+42     	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     51a:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Mouse_HID_Interface) != 0)
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <HID_Host_SetReportProtocol>
     522:	88 23       	and	r24, r24
     524:	51 f0       	breq	.+20     	; 0x53a <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     526:	81 e3       	ldi	r24, 0x31	; 49
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Mouse.\r\n"));
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
     52e:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     530:	a0 de       	rcall	.-704    	; 0x272 <LEDs_SetAllLEDs>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     538:	06 c0       	rjmp	.+12     	; 0x546 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     53a:	8d e1       	ldi	r24, 0x1D	; 29
		return;
     53c:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     53e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <puts_P>
     542:	80 e6       	ldi	r24, 0x60	; 96
     544:	96 de       	rcall	.-724    	; 0x272 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     546:	ce 5f       	subi	r28, 0xFE	; 254
     548:	dd 4f       	sbci	r29, 0xFD	; 253
     54a:	0f b6       	in	r0, 0x3f	; 63
}
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <EVENT_USB_Host_HostError>:
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	1f 92       	push	r1

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	5a d7       	rcall	.+3764   	; 0x141c <USB_Disable>
     568:	1f 92       	push	r1

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	8f 93       	push	r24
     56e:	8e ee       	ldi	r24, 0xEE	; 238
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <printf_P>
     57a:	80 e9       	ldi	r24, 0x90	; 144
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     57c:	7a de       	rcall	.-780    	; 0x272 <LEDs_SetAllLEDs>
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	ff cf       	rjmp	.-2      	; 0x586 <EVENT_USB_Host_HostError+0x2c>

00000588 <EVENT_USB_Host_DeviceEnumerationFailed>:
     588:	90 91 0e 05 	lds	r25, 0x050E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     58c:	1f 92       	push	r1
     58e:	9f 93       	push	r25
     590:	1f 92       	push	r1
     592:	6f 93       	push	r22
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	88 e9       	ldi	r24, 0x98	; 152
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a4:	8d b7       	in	r24, 0x3d	; 61
     5a6:	9e b7       	in	r25, 0x3e	; 62
     5a8:	08 96       	adiw	r24, 0x08	; 8
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	9e bf       	out	0x3e, r25	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	8d bf       	out	0x3d, r24	; 61
     5b4:	80 e9       	ldi	r24, 0x90	; 144
     5b6:	5d ce       	rjmp	.-838    	; 0x272 <LEDs_SetAllLEDs>

000005b8 <CALLBACK_HIDParser_FilterHIDReportItem>:
     5b8:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5ba:	16 96       	adiw	r26, 0x06	; 6
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	17 97       	sbiw	r26, 0x07	; 7
     5c2:	30 97       	sbiw	r30, 0x00	; 0
     5c4:	b1 f0       	breq	.+44     	; 0x5f2 <CALLBACK_HIDParser_FilterHIDReportItem+0x3a>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     5c6:	21 81       	ldd	r18, Z+1	; 0x01
     5c8:	32 81       	ldd	r19, Z+2	; 0x02
     5ca:	21 30       	cpi	r18, 0x01	; 1
     5cc:	31 05       	cpc	r19, r1
     5ce:	29 f4       	brne	.+10     	; 0x5da <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
     5d0:	23 81       	ldd	r18, Z+3	; 0x03
     5d2:	34 81       	ldd	r19, Z+4	; 0x04
     5d4:	22 30       	cpi	r18, 0x02	; 2
     5d6:	31 05       	cpc	r19, r1
     5d8:	21 f0       	breq	.+8      	; 0x5e2 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5da:	05 80       	ldd	r0, Z+5	; 0x05
     5dc:	f6 81       	ldd	r31, Z+6	; 0x06
     5de:	e0 2d       	mov	r30, r0
     5e0:	f0 cf       	rjmp	.-32     	; 0x5c2 <CALLBACK_HIDParser_FilterHIDReportItem+0xa>

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     5e2:	fc 01       	movw	r30, r24
     5e4:	21 85       	ldd	r18, Z+9	; 0x09
     5e6:	32 85       	ldd	r19, Z+10	; 0x0a
     5e8:	27 7f       	andi	r18, 0xF7	; 247
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	21 30       	cpi	r18, 0x01	; 1
     5ee:	31 05       	cpc	r19, r1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <CALLBACK_HIDParser_FilterHIDReportItem+0x3c>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     5f4:	08 95       	ret

000005f6 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     5f6:	2f 92       	push	r2
     5f8:	3f 92       	push	r3
     5fa:	4f 92       	push	r4
     5fc:	5f 92       	push	r5
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	cd 58       	subi	r28, 0x8D	; 141
     620:	d1 09       	sbc	r29, r1
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	1c 01       	movw	r2, r24
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
     62e:	9a 01       	movw	r18, r20
     630:	20 57       	subi	r18, 0x70	; 112
     632:	3c 4f       	sbci	r19, 0xFC	; 252
     634:	e8 96       	adiw	r28, 0x38	; 56
     636:	3f af       	std	Y+63, r19	; 0x3f
     638:	2e af       	std	Y+62, r18	; 0x3e
     63a:	e8 97       	sbiw	r28, 0x38	; 56
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     63c:	89 ed       	ldi	r24, 0xD9	; 217
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	da 01       	movw	r26, r20
     642:	fc 01       	movw	r30, r24
     644:	1d 92       	st	X+, r1
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	e9 f7       	brne	.-6      	; 0x644 <USB_ProcessHIDReport+0x4e>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     64a:	fe 01       	movw	r30, r28
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	8c e1       	ldi	r24, 0x1C	; 28
     650:	df 01       	movw	r26, r30
     652:	1d 92       	st	X+, r1
     654:	8a 95       	dec	r24
     656:	e9 f7       	brne	.-6      	; 0x652 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	d9 01       	movw	r26, r18
     65c:	1d 92       	st	X+, r1
     65e:	8a 95       	dec	r24
     660:	e9 f7       	brne	.-6      	; 0x65c <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     662:	9a 01       	movw	r18, r20
     664:	21 57       	subi	r18, 0x71	; 113
     666:	3c 4f       	sbci	r19, 0xFC	; 252
     668:	eb 96       	adiw	r28, 0x3b	; 59
     66a:	3f af       	std	Y+63, r19	; 0x3f
     66c:	2e af       	std	Y+62, r18	; 0x3e
     66e:	eb 97       	sbiw	r28, 0x3b	; 59
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	d9 01       	movw	r26, r18
     674:	8c 93       	st	X, r24
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
     676:	41 2c       	mov	r4, r1
     678:	51 2c       	mov	r5, r1
     67a:	32 01       	movw	r6, r4
     67c:	81 2c       	mov	r8, r1
     67e:	91 2c       	mov	r9, r1
     680:	54 01       	movw	r10, r8
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
     682:	e4 96       	adiw	r28, 0x34	; 52
     684:	1f ae       	std	Y+63, r1	; 0x3f
     686:	e4 97       	sbiw	r28, 0x34	; 52
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
     688:	e6 96       	adiw	r28, 0x36	; 54
     68a:	1f ae       	std	Y+63, r1	; 0x3f
     68c:	1e ae       	std	Y+62, r1	; 0x3e
     68e:	e6 97       	sbiw	r28, 0x36	; 54
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
     690:	8f 01       	movw	r16, r30

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     692:	9a 01       	movw	r18, r20
     694:	2a 52       	subi	r18, 0x2A	; 42
     696:	3c 4f       	sbci	r19, 0xFC	; 252
     698:	ed 96       	adiw	r28, 0x3d	; 61
     69a:	3f af       	std	Y+63, r19	; 0x3f
     69c:	2e af       	std	Y+62, r18	; 0x3e
     69e:	ed 97       	sbiw	r28, 0x3d	; 61

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     6a0:	9a 01       	movw	r18, r20
     6a2:	28 57       	subi	r18, 0x78	; 120
     6a4:	3c 4f       	sbci	r19, 0xFC	; 252
     6a6:	cd 57       	subi	r28, 0x7D	; 125
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	39 83       	std	Y+1, r19	; 0x01
     6ac:	28 83       	st	Y, r18
     6ae:	c3 58       	subi	r28, 0x83	; 131
     6b0:	d0 40       	sbci	r29, 0x00	; 0
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     6b2:	9a 01       	movw	r18, r20
     6b4:	28 52       	subi	r18, 0x28	; 40
     6b6:	3c 4f       	sbci	r19, 0xFC	; 252
     6b8:	ef 96       	adiw	r28, 0x3f	; 63
     6ba:	3f af       	std	Y+63, r19	; 0x3f
     6bc:	2e af       	std	Y+62, r18	; 0x3e
     6be:	ef 97       	sbiw	r28, 0x3f	; 63
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     6c0:	cb 57       	subi	r28, 0x7B	; 123
     6c2:	df 4f       	sbci	r29, 0xFF	; 255
     6c4:	b9 83       	std	Y+1, r27	; 0x01
     6c6:	a8 83       	st	Y, r26
     6c8:	c5 58       	subi	r28, 0x85	; 133
     6ca:	d0 40       	sbci	r29, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6cc:	61 15       	cp	r22, r1
     6ce:	71 05       	cpc	r23, r1
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <USB_ProcessHIDReport+0xde>
     6d2:	e9 c2       	rjmp	.+1490   	; 0xca6 <USB_ProcessHIDReport+0x6b0>
	{
		uint8_t  HIDReportItem  = *ReportData;
     6d4:	d1 01       	movw	r26, r2
     6d6:	bc 91       	ld	r27, X
     6d8:	e9 96       	adiw	r28, 0x39	; 57
     6da:	bf af       	std	Y+63, r27	; 0x3f
     6dc:	e9 97       	sbiw	r28, 0x39	; 57
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     6de:	8b 2f       	mov	r24, r27
     6e0:	83 70       	andi	r24, 0x03	; 3
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	81 f1       	breq	.+96     	; 0x746 <USB_ProcessHIDReport+0x150>
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	59 f0       	breq	.+22     	; 0x700 <USB_ProcessHIDReport+0x10a>
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	d9 f1       	breq	.+118    	; 0x764 <USB_ProcessHIDReport+0x16e>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     6ee:	ef ef       	ldi	r30, 0xFF	; 255
     6f0:	2e 1a       	sub	r2, r30
     6f2:	3e 0a       	sbc	r3, r30
		ReportSize--;
     6f4:	61 50       	subi	r22, 0x01	; 1
     6f6:	71 09       	sbc	r23, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     6f8:	c1 2c       	mov	r12, r1
     6fa:	d1 2c       	mov	r13, r1
     6fc:	76 01       	movw	r14, r12
     6fe:	3d c0       	rjmp	.+122    	; 0x77a <USB_ProcessHIDReport+0x184>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     700:	d1 01       	movw	r26, r2
     702:	14 96       	adiw	r26, 0x04	; 4
     704:	8c 91       	ld	r24, X
     706:	14 97       	sbiw	r26, 0x04	; 4
     708:	13 96       	adiw	r26, 0x03	; 3
     70a:	cc 90       	ld	r12, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	d1 2c       	mov	r13, r1
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
     714:	76 01       	movw	r14, r12
     716:	dd 24       	eor	r13, r13
     718:	cc 24       	eor	r12, r12
     71a:	f8 2a       	or	r15, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	8c 91       	ld	r24, X
     720:	11 97       	sbiw	r26, 0x01	; 1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     722:	c8 2a       	or	r12, r24
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     724:	12 96       	adiw	r26, 0x02	; 2
     726:	8c 91       	ld	r24, X
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	98 2f       	mov	r25, r24
     72c:	88 27       	eor	r24, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     72e:	a0 e0       	ldi	r26, 0x00	; 0
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	c8 2a       	or	r12, r24
     734:	d9 2a       	or	r13, r25
     736:	ea 2a       	or	r14, r26
     738:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     73a:	65 50       	subi	r22, 0x05	; 5
     73c:	71 09       	sbc	r23, r1
				ReportData     += 4;
     73e:	b5 e0       	ldi	r27, 0x05	; 5
     740:	2b 0e       	add	r2, r27
     742:	31 1c       	adc	r3, r1
				break;
     744:	1a c0       	rjmp	.+52     	; 0x77a <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     746:	f1 01       	movw	r30, r2
     748:	c2 80       	ldd	r12, Z+2	; 0x02
     74a:	d1 2c       	mov	r13, r1
     74c:	dc 2c       	mov	r13, r12
     74e:	cc 24       	eor	r12, r12
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	c8 2a       	or	r12, r24
     754:	e1 2c       	mov	r14, r1
     756:	f1 2c       	mov	r15, r1
				ReportSize     -= 2;
     758:	63 50       	subi	r22, 0x03	; 3
     75a:	71 09       	sbc	r23, r1
				ReportData     += 2;
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	2f 0e       	add	r2, r31
     760:	31 1c       	adc	r3, r1
				break;
     762:	0b c0       	rjmp	.+22     	; 0x77a <USB_ProcessHIDReport+0x184>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     764:	d1 01       	movw	r26, r2
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	cc 90       	ld	r12, X
     76a:	d1 2c       	mov	r13, r1
     76c:	e1 2c       	mov	r14, r1
     76e:	f1 2c       	mov	r15, r1
				ReportSize     -= 1;
     770:	62 50       	subi	r22, 0x02	; 2
     772:	71 09       	sbc	r23, r1
				ReportData     += 1;
     774:	b2 e0       	ldi	r27, 0x02	; 2
     776:	2b 0e       	add	r2, r27
     778:	31 1c       	adc	r3, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     77a:	e9 96       	adiw	r28, 0x39	; 57
     77c:	2f ad       	ldd	r18, Y+63	; 0x3f
     77e:	e9 97       	sbiw	r28, 0x39	; 57
     780:	2c 7f       	andi	r18, 0xFC	; 252
     782:	24 36       	cpi	r18, 0x64	; 100
     784:	09 f4       	brne	.+2      	; 0x788 <USB_ProcessHIDReport+0x192>
     786:	96 c0       	rjmp	.+300    	; 0x8b4 <USB_ProcessHIDReport+0x2be>
     788:	68 f5       	brcc	.+90     	; 0x7e4 <USB_ProcessHIDReport+0x1ee>
     78a:	24 32       	cpi	r18, 0x24	; 36
     78c:	09 f4       	brne	.+2      	; 0x790 <USB_ProcessHIDReport+0x19a>
     78e:	7c c0       	rjmp	.+248    	; 0x888 <USB_ProcessHIDReport+0x292>
     790:	b0 f4       	brcc	.+44     	; 0x7be <USB_ProcessHIDReport+0x1c8>
     792:	28 30       	cpi	r18, 0x08	; 8
     794:	09 f4       	brne	.+2      	; 0x798 <USB_ProcessHIDReport+0x1a2>
     796:	f4 c0       	rjmp	.+488    	; 0x980 <USB_ProcessHIDReport+0x38a>
     798:	48 f4       	brcc	.+18     	; 0x7ac <USB_ProcessHIDReport+0x1b6>
     79a:	24 30       	cpi	r18, 0x04	; 4
     79c:	09 f0       	breq	.+2      	; 0x7a0 <USB_ProcessHIDReport+0x1aa>
     79e:	73 c2       	rjmp	.+1254   	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     7a0:	d8 01       	movw	r26, r16
     7a2:	12 96       	adiw	r26, 0x02	; 2
     7a4:	dc 92       	st	X, r13
     7a6:	ce 92       	st	-X, r12
     7a8:	11 97       	sbiw	r26, 0x01	; 1
				break;
     7aa:	6d c2       	rjmp	.+1242   	; 0xc86 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7ac:	24 31       	cpi	r18, 0x14	; 20
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <USB_ProcessHIDReport+0x1bc>
     7b0:	65 c0       	rjmp	.+202    	; 0x87c <USB_ProcessHIDReport+0x286>
     7b2:	28 31       	cpi	r18, 0x18	; 24
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <USB_ProcessHIDReport+0x1c2>
     7b6:	67 c2       	rjmp	.+1230   	; 0xc86 <USB_ProcessHIDReport+0x690>
     7b8:	46 01       	movw	r8, r12
     7ba:	57 01       	movw	r10, r14
     7bc:	64 c2       	rjmp	.+1224   	; 0xc86 <USB_ProcessHIDReport+0x690>
     7be:	24 33       	cpi	r18, 0x34	; 52
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <USB_ProcessHIDReport+0x1ce>
     7c2:	6a c0       	rjmp	.+212    	; 0x898 <USB_ProcessHIDReport+0x2a2>
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <USB_ProcessHIDReport+0x1dc>
     7c6:	28 32       	cpi	r18, 0x28	; 40
     7c8:	09 f0       	breq	.+2      	; 0x7cc <USB_ProcessHIDReport+0x1d6>
     7ca:	5d c2       	rjmp	.+1210   	; 0xc86 <USB_ProcessHIDReport+0x690>
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     7cc:	26 01       	movw	r4, r12
     7ce:	37 01       	movw	r6, r14
     7d0:	5a c2       	rjmp	.+1204   	; 0xc86 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7d2:	24 34       	cpi	r18, 0x44	; 68
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <USB_ProcessHIDReport+0x1e2>
     7d6:	66 c0       	rjmp	.+204    	; 0x8a4 <USB_ProcessHIDReport+0x2ae>
     7d8:	24 35       	cpi	r18, 0x54	; 84
     7da:	09 f0       	breq	.+2      	; 0x7de <USB_ProcessHIDReport+0x1e8>
     7dc:	54 c2       	rjmp	.+1192   	; 0xc86 <USB_ProcessHIDReport+0x690>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     7de:	f8 01       	movw	r30, r16
     7e0:	c1 86       	std	Z+9, r12	; 0x09
				break;
     7e2:	51 c2       	rjmp	.+1186   	; 0xc86 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7e4:	24 39       	cpi	r18, 0x94	; 148
     7e6:	09 f4       	brne	.+2      	; 0x7ea <USB_ProcessHIDReport+0x1f4>
     7e8:	6d c0       	rjmp	.+218    	; 0x8c4 <USB_ProcessHIDReport+0x2ce>
     7ea:	78 f4       	brcc	.+30     	; 0x80a <USB_ProcessHIDReport+0x214>
     7ec:	20 38       	cpi	r18, 0x80	; 128
     7ee:	e1 f0       	breq	.+56     	; 0x828 <USB_ProcessHIDReport+0x232>
     7f0:	30 f4       	brcc	.+12     	; 0x7fe <USB_ProcessHIDReport+0x208>
     7f2:	24 37       	cpi	r18, 0x74	; 116
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <USB_ProcessHIDReport+0x202>
     7f6:	47 c2       	rjmp	.+1166   	; 0xc86 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     7f8:	f8 01       	movw	r30, r16
     7fa:	c0 82       	st	Z, r12
				break;
     7fc:	44 c2       	rjmp	.+1160   	; 0xc86 <USB_ProcessHIDReport+0x690>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7fe:	24 38       	cpi	r18, 0x84	; 132
     800:	09 f4       	brne	.+2      	; 0x804 <USB_ProcessHIDReport+0x20e>
     802:	64 c0       	rjmp	.+200    	; 0x8cc <USB_ProcessHIDReport+0x2d6>
     804:	20 39       	cpi	r18, 0x90	; 144
     806:	81 f0       	breq	.+32     	; 0x828 <USB_ProcessHIDReport+0x232>
     808:	3e c2       	rjmp	.+1148   	; 0xc86 <USB_ProcessHIDReport+0x690>
     80a:	20 3b       	cpi	r18, 0xB0	; 176
     80c:	69 f0       	breq	.+26     	; 0x828 <USB_ProcessHIDReport+0x232>
     80e:	30 f4       	brcc	.+12     	; 0x81c <USB_ProcessHIDReport+0x226>
     810:	20 3a       	cpi	r18, 0xA0	; 160
     812:	09 f4       	brne	.+2      	; 0x816 <USB_ProcessHIDReport+0x220>
     814:	c9 c0       	rjmp	.+402    	; 0x9a8 <USB_ProcessHIDReport+0x3b2>
     816:	24 3a       	cpi	r18, 0xA4	; 164
     818:	b9 f0       	breq	.+46     	; 0x848 <USB_ProcessHIDReport+0x252>
     81a:	35 c2       	rjmp	.+1130   	; 0xc86 <USB_ProcessHIDReport+0x690>
     81c:	24 3b       	cpi	r18, 0xB4	; 180
     81e:	29 f1       	breq	.+74     	; 0x86a <USB_ProcessHIDReport+0x274>
     820:	20 3c       	cpi	r18, 0xC0	; 192
     822:	09 f4       	brne	.+2      	; 0x826 <USB_ProcessHIDReport+0x230>
     824:	2d c1       	rjmp	.+602    	; 0xa80 <USB_ProcessHIDReport+0x48a>
     826:	2f c2       	rjmp	.+1118   	; 0xc86 <USB_ProcessHIDReport+0x690>
     828:	30 e0       	ldi	r19, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     82a:	d7 01       	movw	r26, r14
     82c:	c6 01       	movw	r24, r12
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	99 27       	eor	r25, r25
     832:	aa 27       	eor	r26, r26
     834:	bb 27       	eor	r27, r27
     836:	c1 58       	subi	r28, 0x81	; 129
     838:	df 4f       	sbci	r29, 0xFF	; 255
     83a:	88 83       	st	Y, r24
     83c:	99 83       	std	Y+1, r25	; 0x01
     83e:	aa 83       	std	Y+2, r26	; 0x02
     840:	bb 83       	std	Y+3, r27	; 0x03
     842:	cf 57       	subi	r28, 0x7F	; 127
     844:	d0 40       	sbci	r29, 0x00	; 0
     846:	4a c1       	rjmp	.+660    	; 0xadc <USB_ProcessHIDReport+0x4e6>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     848:	ce 01       	movw	r24, r28
     84a:	4d 96       	adiw	r24, 0x1d	; 29
     84c:	08 17       	cp	r16, r24
     84e:	19 07       	cpc	r17, r25
     850:	09 f4       	brne	.+2      	; 0x854 <USB_ProcessHIDReport+0x25e>
     852:	2f c2       	rjmp	.+1118   	; 0xcb2 <USB_ProcessHIDReport+0x6bc>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     854:	c8 01       	movw	r24, r16
     856:	4c 96       	adiw	r24, 0x1c	; 28
     858:	2a e2       	ldi	r18, 0x2A	; 42
     85a:	f8 01       	movw	r30, r16
     85c:	dc 01       	movw	r26, r24
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	2a 95       	dec	r18
     864:	e1 f7       	brne	.-8      	; 0x85e <USB_ProcessHIDReport+0x268>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     866:	8c 01       	movw	r16, r24
				break;
     868:	0e c2       	rjmp	.+1052   	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	08 17       	cp	r16, r24
     870:	19 07       	cpc	r17, r25
     872:	09 f4       	brne	.+2      	; 0x876 <USB_ProcessHIDReport+0x280>
     874:	20 c2       	rjmp	.+1088   	; 0xcb6 <USB_ProcessHIDReport+0x6c0>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     876:	0c 51       	subi	r16, 0x1C	; 28
     878:	11 09       	sbc	r17, r1
				break;
     87a:	05 c2       	rjmp	.+1034   	; 0xc86 <USB_ProcessHIDReport+0x690>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     87c:	f8 01       	movw	r30, r16
     87e:	c2 86       	std	Z+10, r12	; 0x0a
     880:	d3 86       	std	Z+11, r13	; 0x0b
     882:	e4 86       	std	Z+12, r14	; 0x0c
     884:	f5 86       	std	Z+13, r15	; 0x0d
				break;
     886:	ff c1       	rjmp	.+1022   	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     888:	d8 01       	movw	r26, r16
     88a:	1e 96       	adiw	r26, 0x0e	; 14
     88c:	cd 92       	st	X+, r12
     88e:	dd 92       	st	X+, r13
     890:	ed 92       	st	X+, r14
     892:	fc 92       	st	X, r15
     894:	51 97       	sbiw	r26, 0x11	; 17
				break;
     896:	f7 c1       	rjmp	.+1006   	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     898:	f8 01       	movw	r30, r16
     89a:	c2 8a       	std	Z+18, r12	; 0x12
     89c:	d3 8a       	std	Z+19, r13	; 0x13
     89e:	e4 8a       	std	Z+20, r14	; 0x14
     8a0:	f5 8a       	std	Z+21, r15	; 0x15
				break;
     8a2:	f1 c1       	rjmp	.+994    	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     8a4:	d8 01       	movw	r26, r16
     8a6:	56 96       	adiw	r26, 0x16	; 22
     8a8:	cd 92       	st	X+, r12
     8aa:	dd 92       	st	X+, r13
     8ac:	ed 92       	st	X+, r14
     8ae:	fc 92       	st	X, r15
     8b0:	59 97       	sbiw	r26, 0x19	; 25
				break;
     8b2:	e9 c1       	rjmp	.+978    	; 0xc86 <USB_ProcessHIDReport+0x690>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     8b4:	d8 01       	movw	r26, r16
     8b6:	15 96       	adiw	r26, 0x05	; 5
     8b8:	cd 92       	st	X+, r12
     8ba:	dd 92       	st	X+, r13
     8bc:	ed 92       	st	X+, r14
     8be:	fc 92       	st	X, r15
     8c0:	18 97       	sbiw	r26, 0x08	; 8
				break;
     8c2:	e1 c1       	rjmp	.+962    	; 0xc86 <USB_ProcessHIDReport+0x690>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     8c4:	d8 01       	movw	r26, r16
     8c6:	5a 96       	adiw	r26, 0x1a	; 26
     8c8:	cc 92       	st	X, r12
				break;
     8ca:	dd c1       	rjmp	.+954    	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     8cc:	ac 2d       	mov	r26, r12
     8ce:	f8 01       	movw	r30, r16
     8d0:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     8d2:	ef 96       	adiw	r28, 0x3f	; 63
     8d4:	ee ad       	ldd	r30, Y+62	; 0x3e
     8d6:	ff ad       	ldd	r31, Y+63	; 0x3f
     8d8:	ef 97       	sbiw	r28, 0x3f	; 63
     8da:	80 81       	ld	r24, Z
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <USB_ProcessHIDReport+0x2ec>
     8e0:	40 c0       	rjmp	.+128    	; 0x962 <USB_ProcessHIDReport+0x36c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     8e2:	cb 57       	subi	r28, 0x7B	; 123
     8e4:	df 4f       	sbci	r29, 0xFF	; 255
     8e6:	e8 81       	ld	r30, Y
     8e8:	f9 81       	ldd	r31, Y+1	; 0x01
     8ea:	c5 58       	subi	r28, 0x85	; 133
     8ec:	d0 40       	sbci	r29, 0x00	; 0
     8ee:	b0 81       	ld	r27, Z
     8f0:	9a 01       	movw	r18, r20
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	8b 17       	cp	r24, r27
     8f8:	d0 f4       	brcc	.+52     	; 0x92e <USB_ProcessHIDReport+0x338>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     8fa:	7c 01       	movw	r14, r24
     8fc:	f9 01       	movw	r30, r18
     8fe:	e0 57       	subi	r30, 0x70	; 112
     900:	fc 4f       	sbci	r31, 0xFC	; 252
     902:	e0 81       	ld	r30, Z
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	29 5f       	subi	r18, 0xF9	; 249
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	ea 13       	cpse	r30, r26
     90c:	f4 cf       	rjmp	.-24     	; 0x8f6 <USB_ProcessHIDReport+0x300>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     90e:	27 e0       	ldi	r18, 0x07	; 7
     910:	2e 9d       	mul	r18, r14
     912:	c0 01       	movw	r24, r0
     914:	2f 9d       	mul	r18, r15
     916:	90 0d       	add	r25, r0
     918:	11 24       	eor	r1, r1
     91a:	9c 01       	movw	r18, r24
     91c:	20 57       	subi	r18, 0x70	; 112
     91e:	3c 4f       	sbci	r19, 0xFC	; 252
     920:	24 0f       	add	r18, r20
     922:	35 1f       	adc	r19, r21
     924:	e8 96       	adiw	r28, 0x38	; 56
     926:	3f af       	std	Y+63, r19	; 0x3f
     928:	2e af       	std	Y+62, r18	; 0x3e
     92a:	e8 97       	sbiw	r28, 0x38	; 56
     92c:	1a c0       	rjmp	.+52     	; 0x962 <USB_ProcessHIDReport+0x36c>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     92e:	ba 30       	cpi	r27, 0x0A	; 10
     930:	09 f4       	brne	.+2      	; 0x934 <USB_ProcessHIDReport+0x33e>
     932:	cb c1       	rjmp	.+918    	; 0xcca <USB_ProcessHIDReport+0x6d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	8b 0f       	add	r24, r27
     938:	eb 96       	adiw	r28, 0x3b	; 59
     93a:	ee ad       	ldd	r30, Y+62	; 0x3e
     93c:	ff ad       	ldd	r31, Y+63	; 0x3f
     93e:	eb 97       	sbiw	r28, 0x3b	; 59
     940:	80 83       	st	Z, r24
     942:	87 e0       	ldi	r24, 0x07	; 7
     944:	9a 01       	movw	r18, r20
     946:	8b 9f       	mul	r24, r27
     948:	20 0d       	add	r18, r0
     94a:	31 1d       	adc	r19, r1
     94c:	11 24       	eor	r1, r1
     94e:	20 57       	subi	r18, 0x70	; 112
     950:	3c 4f       	sbci	r19, 0xFC	; 252
     952:	e8 96       	adiw	r28, 0x38	; 56
     954:	3f af       	std	Y+63, r19	; 0x3f
     956:	2e af       	std	Y+62, r18	; 0x3e
     958:	e8 97       	sbiw	r28, 0x38	; 56
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     95a:	d9 01       	movw	r26, r18
     95c:	1d 92       	st	X+, r1
     95e:	8a 95       	dec	r24
     960:	e9 f7       	brne	.-6      	; 0x95c <USB_ProcessHIDReport+0x366>
					}
				}

				ParserData->UsingReportIDs = true;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	ef 96       	adiw	r28, 0x3f	; 63
     966:	ee ad       	ldd	r30, Y+62	; 0x3e
     968:	ff ad       	ldd	r31, Y+63	; 0x3f
     96a:	ef 97       	sbiw	r28, 0x3f	; 63
     96c:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     96e:	d8 01       	movw	r26, r16
     970:	5b 96       	adiw	r26, 0x1b	; 27
     972:	8c 91       	ld	r24, X
     974:	e8 96       	adiw	r28, 0x38	; 56
     976:	ee ad       	ldd	r30, Y+62	; 0x3e
     978:	ff ad       	ldd	r31, Y+63	; 0x3f
     97a:	e8 97       	sbiw	r28, 0x38	; 56
     97c:	80 83       	st	Z, r24
				break;
     97e:	83 c1       	rjmp	.+774    	; 0xc86 <USB_ProcessHIDReport+0x690>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     980:	e4 96       	adiw	r28, 0x34	; 52
     982:	2f ad       	ldd	r18, Y+63	; 0x3f
     984:	e4 97       	sbiw	r28, 0x34	; 52
     986:	28 30       	cpi	r18, 0x08	; 8
     988:	09 f4       	brne	.+2      	; 0x98c <USB_ProcessHIDReport+0x396>
     98a:	97 c1       	rjmp	.+814    	; 0xcba <USB_ProcessHIDReport+0x6c4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     98c:	fe 01       	movw	r30, r28
     98e:	ed 59       	subi	r30, 0x9D	; 157
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	e2 0f       	add	r30, r18
     994:	f1 1d       	adc	r31, r1
     996:	e2 0f       	add	r30, r18
     998:	f1 1d       	adc	r31, r1
     99a:	d1 82       	std	Z+1, r13	; 0x01
     99c:	c0 82       	st	Z, r12
     99e:	2f 5f       	subi	r18, 0xFF	; 255
     9a0:	e4 96       	adiw	r28, 0x34	; 52
     9a2:	2f af       	std	Y+63, r18	; 0x3f
     9a4:	e4 97       	sbiw	r28, 0x34	; 52
				break;
     9a6:	6f c1       	rjmp	.+734    	; 0xc86 <USB_ProcessHIDReport+0x690>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     9a8:	e6 96       	adiw	r28, 0x36	; 54
     9aa:	2e ad       	ldd	r18, Y+62	; 0x3e
     9ac:	3f ad       	ldd	r19, Y+63	; 0x3f
     9ae:	e6 97       	sbiw	r28, 0x36	; 54
     9b0:	23 2b       	or	r18, r19
     9b2:	41 f4       	brne	.+16     	; 0x9c4 <USB_ProcessHIDReport+0x3ce>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     9b4:	9a 01       	movw	r18, r20
     9b6:	27 5b       	subi	r18, 0xB7	; 183
     9b8:	3c 4f       	sbci	r19, 0xFC	; 252
     9ba:	e6 96       	adiw	r28, 0x36	; 54
     9bc:	3f af       	std	Y+63, r19	; 0x3f
     9be:	2e af       	std	Y+62, r18	; 0x3e
     9c0:	e6 97       	sbiw	r28, 0x36	; 54
     9c2:	1d c0       	rjmp	.+58     	; 0x9fe <USB_ProcessHIDReport+0x408>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     9c4:	fa 01       	movw	r30, r20
     9c6:	e0 5b       	subi	r30, 0xB0	; 176
     9c8:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     9ca:	85 81       	ldd	r24, Z+5	; 0x05
     9cc:	96 81       	ldd	r25, Z+6	; 0x06
     9ce:	89 2b       	or	r24, r25
     9d0:	61 f0       	breq	.+24     	; 0x9ea <USB_ProcessHIDReport+0x3f4>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     9d2:	cd 57       	subi	r28, 0x7D	; 125
     9d4:	df 4f       	sbci	r29, 0xFF	; 255
     9d6:	28 81       	ld	r18, Y
     9d8:	39 81       	ldd	r19, Y+1	; 0x01
     9da:	c3 58       	subi	r28, 0x83	; 131
     9dc:	d0 40       	sbci	r29, 0x00	; 0
     9de:	e2 17       	cp	r30, r18
     9e0:	f3 07       	cpc	r31, r19
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <USB_ProcessHIDReport+0x3f0>
     9e4:	6c c1       	rjmp	.+728    	; 0xcbe <USB_ProcessHIDReport+0x6c8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     9e6:	37 96       	adiw	r30, 0x07	; 7
     9e8:	f0 cf       	rjmp	.-32     	; 0x9ca <USB_ProcessHIDReport+0x3d4>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     9ea:	e6 96       	adiw	r28, 0x36	; 54
     9ec:	2e ad       	ldd	r18, Y+62	; 0x3e
     9ee:	3f ad       	ldd	r19, Y+63	; 0x3f
     9f0:	e6 97       	sbiw	r28, 0x36	; 54
     9f2:	36 83       	std	Z+6, r19	; 0x06
     9f4:	25 83       	std	Z+5, r18	; 0x05
     9f6:	e6 96       	adiw	r28, 0x36	; 54
     9f8:	ff af       	std	Y+63, r31	; 0x3f
     9fa:	ee af       	std	Y+62, r30	; 0x3e
     9fc:	e6 97       	sbiw	r28, 0x36	; 54
				}

				CurrCollectionPath->Type       = ReportItemData;
     9fe:	e6 96       	adiw	r28, 0x36	; 54
     a00:	ae ad       	ldd	r26, Y+62	; 0x3e
     a02:	bf ad       	ldd	r27, Y+63	; 0x3f
     a04:	e6 97       	sbiw	r28, 0x36	; 54
     a06:	cc 92       	st	X, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     a08:	f8 01       	movw	r30, r16
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
     a0c:	92 81       	ldd	r25, Z+2	; 0x02
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	9c 93       	st	X, r25
     a12:	8e 93       	st	-X, r24
     a14:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     a16:	e4 96       	adiw	r28, 0x34	; 52
     a18:	2f ad       	ldd	r18, Y+63	; 0x3f
     a1a:	e4 97       	sbiw	r28, 0x34	; 52
     a1c:	22 23       	and	r18, r18
     a1e:	e1 f0       	breq	.+56     	; 0xa58 <USB_ProcessHIDReport+0x462>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     a20:	a5 96       	adiw	r28, 0x25	; 37
     a22:	8e ad       	ldd	r24, Y+62	; 0x3e
     a24:	9f ad       	ldd	r25, Y+63	; 0x3f
     a26:	a5 97       	sbiw	r28, 0x25	; 37
     a28:	14 96       	adiw	r26, 0x04	; 4
     a2a:	9c 93       	st	X, r25
     a2c:	8e 93       	st	-X, r24
     a2e:	13 97       	sbiw	r26, 0x03	; 3
     a30:	fe 01       	movw	r30, r28
     a32:	ed 59       	subi	r30, 0x9D	; 157
     a34:	ff 4f       	sbci	r31, 0xFF	; 255

					for (uint8_t i = 1; i < UsageListSize; i++)
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	e4 96       	adiw	r28, 0x34	; 52
     a3a:	3f ad       	ldd	r19, Y+63	; 0x3f
     a3c:	e4 97       	sbiw	r28, 0x34	; 52
     a3e:	23 17       	cp	r18, r19
     a40:	31 f0       	breq	.+12     	; 0xa4e <USB_ProcessHIDReport+0x458>
					  UsageList[i - 1] = UsageList[i];
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	81 93       	st	Z+, r24
     a48:	91 93       	st	Z+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     a4a:	2f 5f       	subi	r18, 0xFF	; 255
     a4c:	f5 cf       	rjmp	.-22     	; 0xa38 <USB_ProcessHIDReport+0x442>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     a4e:	31 50       	subi	r19, 0x01	; 1
     a50:	e4 96       	adiw	r28, 0x34	; 52
     a52:	3f af       	std	Y+63, r19	; 0x3f
     a54:	e4 97       	sbiw	r28, 0x34	; 52
     a56:	17 c1       	rjmp	.+558    	; 0xc86 <USB_ProcessHIDReport+0x690>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     a58:	48 14       	cp	r4, r8
     a5a:	59 04       	cpc	r5, r9
     a5c:	6a 04       	cpc	r6, r10
     a5e:	7b 04       	cpc	r7, r11
     a60:	08 f4       	brcc	.+2      	; 0xa64 <USB_ProcessHIDReport+0x46e>
     a62:	11 c1       	rjmp	.+546    	; 0xc86 <USB_ProcessHIDReport+0x690>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     a64:	e6 96       	adiw	r28, 0x36	; 54
     a66:	ae ad       	ldd	r26, Y+62	; 0x3e
     a68:	bf ad       	ldd	r27, Y+63	; 0x3f
     a6a:	e6 97       	sbiw	r28, 0x36	; 54
     a6c:	14 96       	adiw	r26, 0x04	; 4
     a6e:	9c 92       	st	X, r9
     a70:	8e 92       	st	-X, r8
     a72:	13 97       	sbiw	r26, 0x03	; 3
     a74:	bf ef       	ldi	r27, 0xFF	; 255
     a76:	8b 1a       	sub	r8, r27
     a78:	9b 0a       	sbc	r9, r27
     a7a:	ab 0a       	sbc	r10, r27
     a7c:	bb 0a       	sbc	r11, r27
     a7e:	03 c1       	rjmp	.+518    	; 0xc86 <USB_ProcessHIDReport+0x690>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     a80:	e6 96       	adiw	r28, 0x36	; 54
     a82:	2e ad       	ldd	r18, Y+62	; 0x3e
     a84:	3f ad       	ldd	r19, Y+63	; 0x3f
     a86:	e6 97       	sbiw	r28, 0x36	; 54
     a88:	21 15       	cp	r18, r1
     a8a:	31 05       	cpc	r19, r1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <USB_ProcessHIDReport+0x49a>
     a8e:	19 c1       	rjmp	.+562    	; 0xcc2 <USB_ProcessHIDReport+0x6cc>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     a90:	d9 01       	movw	r26, r18
     a92:	15 96       	adiw	r26, 0x05	; 5
     a94:	0d 90       	ld	r0, X+
     a96:	bc 91       	ld	r27, X
     a98:	a0 2d       	mov	r26, r0
     a9a:	e6 96       	adiw	r28, 0x36	; 54
     a9c:	bf af       	std	Y+63, r27	; 0x3f
     a9e:	ae af       	std	Y+62, r26	; 0x3e
     aa0:	e6 97       	sbiw	r28, 0x36	; 54
				break;
     aa2:	f1 c0       	rjmp	.+482    	; 0xc86 <USB_ProcessHIDReport+0x690>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     aa4:	da 01       	movw	r26, r20
     aa6:	fa e2       	ldi	r31, 0x2A	; 42
     aa8:	f8 9f       	mul	r31, r24
     aaa:	a0 0d       	add	r26, r0
     aac:	b1 1d       	adc	r27, r1
     aae:	11 24       	eor	r1, r1
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	fe 01       	movw	r30, r28
     ab4:	f9 96       	adiw	r30, 0x39	; 57
     ab6:	8a e2       	ldi	r24, 0x2A	; 42
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	8a 95       	dec	r24
     abe:	e1 f7       	brne	.-8      	; 0xab8 <USB_ProcessHIDReport+0x4c2>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     ac0:	c1 58       	subi	r28, 0x81	; 129
     ac2:	df 4f       	sbci	r29, 0xFF	; 255
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	aa 81       	ldd	r26, Y+2	; 0x02
     aca:	bb 81       	ldd	r27, Y+3	; 0x03
     acc:	cf 57       	subi	r28, 0x7F	; 127
     ace:	d0 40       	sbci	r29, 0x00	; 0
     ad0:	89 2b       	or	r24, r25
     ad2:	8a 2b       	or	r24, r26
     ad4:	8b 2b       	or	r24, r27
     ad6:	09 f4       	brne	.+2      	; 0xada <USB_ProcessHIDReport+0x4e4>
     ad8:	8f c0       	rjmp	.+286    	; 0xbf8 <USB_ProcessHIDReport+0x602>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     ada:	3f 5f       	subi	r19, 0xFF	; 255
     adc:	f8 01       	movw	r30, r16
     ade:	82 8d       	ldd	r24, Z+26	; 0x1a
     ae0:	38 17       	cp	r19, r24
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <USB_ProcessHIDReport+0x4f0>
     ae4:	d0 c0       	rjmp	.+416    	; 0xc86 <USB_ProcessHIDReport+0x690>
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     ae6:	f8 01       	movw	r30, r16
     ae8:	de 01       	movw	r26, r28
     aea:	af 5b       	subi	r26, 0xBF	; 191
     aec:	bf 4f       	sbci	r27, 0xFF	; 255
     aee:	8a e1       	ldi	r24, 0x1A	; 26
     af0:	01 90       	ld	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	8a 95       	dec	r24
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <USB_ProcessHIDReport+0x4fa>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     af8:	dd ae       	std	Y+61, r13	; 0x3d
     afa:	cc ae       	std	Y+60, r12	; 0x3c
					NewReportItem.CollectionPath = CurrCollectionPath;
     afc:	e6 96       	adiw	r28, 0x36	; 54
     afe:	ee ad       	ldd	r30, Y+62	; 0x3e
     b00:	ff ad       	ldd	r31, Y+63	; 0x3f
     b02:	e6 97       	sbiw	r28, 0x36	; 54
     b04:	21 96       	adiw	r28, 0x01	; 1
     b06:	ff af       	std	Y+63, r31	; 0x3f
     b08:	ee af       	std	Y+62, r30	; 0x3e
     b0a:	21 97       	sbiw	r28, 0x01	; 1
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     b0c:	d8 01       	movw	r26, r16
     b0e:	5b 96       	adiw	r26, 0x1b	; 27
     b10:	8c 91       	ld	r24, X
     b12:	8e af       	std	Y+62, r24	; 0x3e

					if (UsageListSize)
     b14:	e4 96       	adiw	r28, 0x34	; 52
     b16:	bf ad       	ldd	r27, Y+63	; 0x3f
     b18:	e4 97       	sbiw	r28, 0x34	; 52
     b1a:	bb 23       	and	r27, r27
     b1c:	e1 f0       	breq	.+56     	; 0xb56 <USB_ProcessHIDReport+0x560>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     b1e:	a5 96       	adiw	r28, 0x25	; 37
     b20:	8e ad       	ldd	r24, Y+62	; 0x3e
     b22:	9f ad       	ldd	r25, Y+63	; 0x3f
     b24:	a5 97       	sbiw	r28, 0x25	; 37
     b26:	26 96       	adiw	r28, 0x06	; 6
     b28:	9f af       	std	Y+63, r25	; 0x3f
     b2a:	8e af       	std	Y+62, r24	; 0x3e
     b2c:	26 97       	sbiw	r28, 0x06	; 6
     b2e:	fe 01       	movw	r30, r28
     b30:	ed 59       	subi	r30, 0x9D	; 157
     b32:	ff 4f       	sbci	r31, 0xFF	; 255

						for (uint8_t i = 1; i < UsageListSize; i++)
     b34:	a1 e0       	ldi	r26, 0x01	; 1
     b36:	e4 96       	adiw	r28, 0x34	; 52
     b38:	8f ad       	ldd	r24, Y+63	; 0x3f
     b3a:	e4 97       	sbiw	r28, 0x34	; 52
     b3c:	a8 17       	cp	r26, r24
     b3e:	31 f0       	breq	.+12     	; 0xb4c <USB_ProcessHIDReport+0x556>
						  UsageList[i - 1] = UsageList[i];
     b40:	82 81       	ldd	r24, Z+2	; 0x02
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	81 93       	st	Z+, r24
     b46:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     b48:	af 5f       	subi	r26, 0xFF	; 255
     b4a:	f5 cf       	rjmp	.-22     	; 0xb36 <USB_ProcessHIDReport+0x540>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	e4 96       	adiw	r28, 0x34	; 52
     b50:	8f af       	std	Y+63, r24	; 0x3f
     b52:	e4 97       	sbiw	r28, 0x34	; 52
     b54:	0e c0       	rjmp	.+28     	; 0xb72 <USB_ProcessHIDReport+0x57c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b56:	48 14       	cp	r4, r8
     b58:	59 04       	cpc	r5, r9
     b5a:	6a 04       	cpc	r6, r10
     b5c:	7b 04       	cpc	r7, r11
     b5e:	48 f0       	brcs	.+18     	; 0xb72 <USB_ProcessHIDReport+0x57c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     b60:	26 96       	adiw	r28, 0x06	; 6
     b62:	9f ae       	std	Y+63, r9	; 0x3f
     b64:	8e ae       	std	Y+62, r8	; 0x3e
     b66:	26 97       	sbiw	r28, 0x06	; 6
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	89 1a       	sub	r8, r25
     b6c:	99 0a       	sbc	r9, r25
     b6e:	a9 0a       	sbc	r10, r25
     b70:	b9 0a       	sbc	r11, r25
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     b72:	20 38       	cpi	r18, 0x80	; 128
     b74:	11 f4       	brne	.+4      	; 0xb7a <USB_ProcessHIDReport+0x584>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     b76:	1b ae       	std	Y+59, r1	; 0x3b
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <USB_ProcessHIDReport+0x592>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     b7a:	20 39       	cpi	r18, 0x90	; 144
     b7c:	19 f4       	brne	.+6      	; 0xb84 <USB_ProcessHIDReport+0x58e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     b7e:	a1 e0       	ldi	r26, 0x01	; 1
     b80:	ab af       	std	Y+59, r26	; 0x3b
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <USB_ProcessHIDReport+0x592>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     b84:	b2 e0       	ldi	r27, 0x02	; 2
     b86:	bb af       	std	Y+59, r27	; 0x3b

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     b88:	8b ad       	ldd	r24, Y+59	; 0x3b
     b8a:	e8 96       	adiw	r28, 0x38	; 56
     b8c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b8e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b90:	e8 97       	sbiw	r28, 0x38	; 56
     b92:	e8 0f       	add	r30, r24
     b94:	f1 1d       	adc	r31, r1
     b96:	e8 0f       	add	r30, r24
     b98:	f1 1d       	adc	r31, r1
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
     b9c:	92 81       	ldd	r25, Z+2	; 0x02
     b9e:	9a af       	std	Y+58, r25	; 0x3a
     ba0:	89 af       	std	Y+57, r24	; 0x39

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     ba2:	d8 01       	movw	r26, r16
     ba4:	bc 91       	ld	r27, X
     ba6:	81 81       	ldd	r24, Z+1	; 0x01
     ba8:	92 81       	ldd	r25, Z+2	; 0x02
     baa:	8b 0f       	add	r24, r27
     bac:	91 1d       	adc	r25, r1
     bae:	92 83       	std	Z+2, r25	; 0x02
     bb0:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     bb2:	8b ad       	ldd	r24, Y+59	; 0x3b
     bb4:	e8 96       	adiw	r28, 0x38	; 56
     bb6:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb8:	ff ad       	ldd	r31, Y+63	; 0x3f
     bba:	e8 97       	sbiw	r28, 0x38	; 56
     bbc:	e8 0f       	add	r30, r24
     bbe:	f1 1d       	adc	r31, r1
     bc0:	e8 0f       	add	r30, r24
     bc2:	f1 1d       	adc	r31, r1
     bc4:	ed 96       	adiw	r28, 0x3d	; 61
     bc6:	ae ad       	ldd	r26, Y+62	; 0x3e
     bc8:	bf ad       	ldd	r27, Y+63	; 0x3f
     bca:	ed 97       	sbiw	r28, 0x3d	; 61
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	01 80       	ldd	r0, Z+1	; 0x01
     bd2:	f2 81       	ldd	r31, Z+2	; 0x02
     bd4:	e0 2d       	mov	r30, r0
     bd6:	e8 17       	cp	r30, r24
     bd8:	f9 07       	cpc	r31, r25
     bda:	08 f4       	brcc	.+2      	; 0xbde <USB_ProcessHIDReport+0x5e8>
     bdc:	fc 01       	movw	r30, r24
     bde:	ed 96       	adiw	r28, 0x3d	; 61
     be0:	ae ad       	ldd	r26, Y+62	; 0x3e
     be2:	bf ad       	ldd	r27, Y+63	; 0x3f
     be4:	ed 97       	sbiw	r28, 0x3d	; 61
     be6:	ed 93       	st	X+, r30
     be8:	fc 93       	st	X, r31

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     bea:	fa 01       	movw	r30, r20
     bec:	80 81       	ld	r24, Z
     bee:	84 31       	cpi	r24, 0x14	; 20
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <USB_ProcessHIDReport+0x5fe>
     bf2:	58 cf       	rjmp	.-336    	; 0xaa4 <USB_ProcessHIDReport+0x4ae>
					  return HID_PARSE_InsufficientReportItems;
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	6a c0       	rjmp	.+212    	; 0xccc <USB_ProcessHIDReport+0x6d6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     bf8:	ce 01       	movw	r24, r28
     bfa:	c9 96       	adiw	r24, 0x39	; 57
     bfc:	c8 57       	subi	r28, 0x78	; 120
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	28 83       	st	Y, r18
     c02:	c8 58       	subi	r28, 0x88	; 136
     c04:	d0 40       	sbci	r29, 0x00	; 0
     c06:	c9 57       	subi	r28, 0x79	; 121
     c08:	df 4f       	sbci	r29, 0xFF	; 255
     c0a:	38 83       	st	Y, r19
     c0c:	c7 58       	subi	r28, 0x87	; 135
     c0e:	d0 40       	sbci	r29, 0x00	; 0
     c10:	c5 57       	subi	r28, 0x75	; 117
     c12:	df 4f       	sbci	r29, 0xFF	; 255
     c14:	48 83       	st	Y, r20
     c16:	cb 58       	subi	r28, 0x8B	; 139
     c18:	d0 40       	sbci	r29, 0x00	; 0
     c1a:	c4 57       	subi	r28, 0x74	; 116
     c1c:	df 4f       	sbci	r29, 0xFF	; 255
     c1e:	58 83       	st	Y, r21
     c20:	cc 58       	subi	r28, 0x8C	; 140
     c22:	d0 40       	sbci	r29, 0x00	; 0
     c24:	c7 57       	subi	r28, 0x77	; 119
     c26:	df 4f       	sbci	r29, 0xFF	; 255
     c28:	68 83       	st	Y, r22
     c2a:	c9 58       	subi	r28, 0x89	; 137
     c2c:	d0 40       	sbci	r29, 0x00	; 0
     c2e:	c6 57       	subi	r28, 0x76	; 118
     c30:	df 4f       	sbci	r29, 0xFF	; 255
     c32:	78 83       	st	Y, r23
     c34:	ca 58       	subi	r28, 0x8A	; 138
     c36:	d0 40       	sbci	r29, 0x00	; 0
     c38:	bf dc       	rcall	.-1666   	; 0x5b8 <CALLBACK_HIDParser_FilterHIDReportItem>
     c3a:	c8 57       	subi	r28, 0x78	; 120
     c3c:	df 4f       	sbci	r29, 0xFF	; 255
     c3e:	28 81       	ld	r18, Y
     c40:	c8 58       	subi	r28, 0x88	; 136
     c42:	d0 40       	sbci	r29, 0x00	; 0
     c44:	c9 57       	subi	r28, 0x79	; 121
     c46:	df 4f       	sbci	r29, 0xFF	; 255
     c48:	38 81       	ld	r19, Y
     c4a:	c7 58       	subi	r28, 0x87	; 135
     c4c:	d0 40       	sbci	r29, 0x00	; 0
     c4e:	c5 57       	subi	r28, 0x75	; 117
     c50:	df 4f       	sbci	r29, 0xFF	; 255
     c52:	48 81       	ld	r20, Y
     c54:	cb 58       	subi	r28, 0x8B	; 139
     c56:	d0 40       	sbci	r29, 0x00	; 0
     c58:	c4 57       	subi	r28, 0x74	; 116
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	58 81       	ld	r21, Y
     c5e:	cc 58       	subi	r28, 0x8C	; 140
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	c7 57       	subi	r28, 0x77	; 119
     c64:	df 4f       	sbci	r29, 0xFF	; 255
     c66:	68 81       	ld	r22, Y
     c68:	c9 58       	subi	r28, 0x89	; 137
     c6a:	d0 40       	sbci	r29, 0x00	; 0
     c6c:	c6 57       	subi	r28, 0x76	; 118
     c6e:	df 4f       	sbci	r29, 0xFF	; 255
     c70:	78 81       	ld	r23, Y
     c72:	ca 58       	subi	r28, 0x8A	; 138
     c74:	d0 40       	sbci	r29, 0x00	; 0
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <USB_ProcessHIDReport+0x686>
     c7a:	2f cf       	rjmp	.-418    	; 0xada <USB_ProcessHIDReport+0x4e4>
     c7c:	da 01       	movw	r26, r20
					  ParserData->TotalReportItems++;
     c7e:	8c 91       	ld	r24, X
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	8c 93       	st	X, r24
     c84:	2a cf       	rjmp	.-428    	; 0xada <USB_ProcessHIDReport+0x4e4>
     c86:	e9 96       	adiw	r28, 0x39	; 57

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     c88:	8f ad       	ldd	r24, Y+63	; 0x3f
     c8a:	e9 97       	sbiw	r28, 0x39	; 57
     c8c:	8c 70       	andi	r24, 0x0C	; 12
     c8e:	09 f0       	breq	.+2      	; 0xc92 <USB_ProcessHIDReport+0x69c>
     c90:	1d cd       	rjmp	.-1478   	; 0x6cc <USB_ProcessHIDReport+0xd6>
     c92:	41 2c       	mov	r4, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     c94:	51 2c       	mov	r5, r1
     c96:	32 01       	movw	r6, r4
     c98:	81 2c       	mov	r8, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     c9a:	91 2c       	mov	r9, r1
     c9c:	54 01       	movw	r10, r8
     c9e:	e4 96       	adiw	r28, 0x34	; 52
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     ca0:	1f ae       	std	Y+63, r1	; 0x3f
     ca2:	e4 97       	sbiw	r28, 0x34	; 52
     ca4:	13 cd       	rjmp	.-1498   	; 0x6cc <USB_ProcessHIDReport+0xd6>
     ca6:	da 01       	movw	r26, r20
		}
	}

	if (!(ParserData->TotalReportItems))
     ca8:	8c 91       	ld	r24, X
     caa:	81 11       	cpse	r24, r1
     cac:	0c c0       	rjmp	.+24     	; 0xcc6 <USB_ProcessHIDReport+0x6d0>
     cae:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cb2:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     cb4:	0b c0       	rjmp	.+22     	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cb6:	82 e0       	ldi	r24, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cba:	86 e0       	ldi	r24, 0x06	; 6
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cbe:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     cc0:	05 c0       	rjmp	.+10     	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cc2:	84 e0       	ldi	r24, 0x04	; 4

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <USB_ProcessHIDReport+0x6d6>
     cca:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     ccc:	c3 57       	subi	r28, 0x73	; 115

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     cce:	df 4f       	sbci	r29, 0xFF	; 255
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	5f 90       	pop	r5
     cf8:	4f 90       	pop	r4
     cfa:	3f 90       	pop	r3
     cfc:	2f 90       	pop	r2
     cfe:	08 95       	ret

00000d00 <USB_GetHIDReportItemInfo>:
     d00:	ef 92       	push	r14

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	fb 01       	movw	r30, r22
	if (ReportItem == NULL)
     d0e:	30 97       	sbiw	r30, 0x00	; 0
     d10:	09 f4       	brne	.+2      	; 0xd14 <USB_GetHIDReportItemInfo+0x14>
     d12:	4c c0       	rjmp	.+152    	; 0xdac <USB_GetHIDReportItemInfo+0xac>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     d14:	30 85       	ldd	r19, Z+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     d16:	d0 81       	ld	r29, Z
     d18:	c1 81       	ldd	r28, Z+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     d1a:	25 81       	ldd	r18, Z+5	; 0x05
     d1c:	22 23       	and	r18, r18
     d1e:	29 f0       	breq	.+10     	; 0xd2a <USB_GetHIDReportItemInfo+0x2a>
	{
		if (ReportItem->ReportID != ReportData[0])
     d20:	dc 01       	movw	r26, r24
     d22:	4c 91       	ld	r20, X
     d24:	24 13       	cpse	r18, r20
     d26:	42 c0       	rjmp	.+132    	; 0xdac <USB_GetHIDReportItemInfo+0xac>
		  return false;

		ReportData++;
     d28:	01 96       	adiw	r24, 0x01	; 1
	}

	ReportItem->PreviousValue = ReportItem->Value;
     d2a:	42 a1       	ldd	r20, Z+34	; 0x22
     d2c:	53 a1       	ldd	r21, Z+35	; 0x23
     d2e:	64 a1       	ldd	r22, Z+36	; 0x24
     d30:	75 a1       	ldd	r23, Z+37	; 0x25
     d32:	46 a3       	std	Z+38, r20	; 0x26
     d34:	57 a3       	std	Z+39, r21	; 0x27
     d36:	60 a7       	std	Z+40, r22	; 0x28
     d38:	71 a7       	std	Z+41, r23	; 0x29
	ReportItem->Value = 0;
     d3a:	12 a2       	std	Z+34, r1	; 0x22
     d3c:	13 a2       	std	Z+35, r1	; 0x23
     d3e:	14 a2       	std	Z+36, r1	; 0x24
     d40:	15 a2       	std	Z+37, r1	; 0x25
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     d42:	ad 2f       	mov	r26, r29
     d44:	bc 2f       	mov	r27, r28
	uint32_t BitMask      = (1 << 0);
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	7d 01       	movw	r14, r26
     d50:	e3 0e       	add	r14, r19
     d52:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     d54:	ea 16       	cp	r14, r26
     d56:	fb 06       	cpc	r15, r27
     d58:	39 f1       	breq	.+78     	; 0xda8 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     d5a:	9d 01       	movw	r18, r26
     d5c:	c3 e0       	ldi	r28, 0x03	; 3
     d5e:	36 95       	lsr	r19
     d60:	27 95       	ror	r18
     d62:	ca 95       	dec	r28
     d64:	e1 f7       	brne	.-8      	; 0xd5e <USB_GetHIDReportItemInfo+0x5e>
     d66:	28 0f       	add	r18, r24
     d68:	39 1f       	adc	r19, r25
     d6a:	e9 01       	movw	r28, r18
     d6c:	28 81       	ld	r18, Y
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8d 01       	movw	r16, r26
     d72:	07 70       	andi	r16, 0x07	; 7
     d74:	11 27       	eor	r17, r17
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <USB_GetHIDReportItemInfo+0x7c>
     d78:	35 95       	asr	r19
     d7a:	27 95       	ror	r18
     d7c:	0a 95       	dec	r16
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <USB_GetHIDReportItemInfo+0x78>
     d80:	20 ff       	sbrs	r18, 0
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     d84:	02 a1       	ldd	r16, Z+34	; 0x22
     d86:	13 a1       	ldd	r17, Z+35	; 0x23
     d88:	24 a1       	ldd	r18, Z+36	; 0x24
     d8a:	35 a1       	ldd	r19, Z+37	; 0x25
     d8c:	04 2b       	or	r16, r20
     d8e:	15 2b       	or	r17, r21
     d90:	26 2b       	or	r18, r22
     d92:	37 2b       	or	r19, r23
     d94:	02 a3       	std	Z+34, r16	; 0x22
     d96:	13 a3       	std	Z+35, r17	; 0x23
     d98:	24 a3       	std	Z+36, r18	; 0x24
     d9a:	35 a3       	std	Z+37, r19	; 0x25

		CurrentBit++;
     d9c:	11 96       	adiw	r26, 0x01	; 1
		BitMask <<= 1;
     d9e:	44 0f       	add	r20, r20
     da0:	55 1f       	adc	r21, r21
     da2:	66 1f       	adc	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	d6 cf       	rjmp	.-84     	; 0xd54 <USB_GetHIDReportItemInfo+0x54>
	}

	return true;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	01 c0       	rjmp	.+2      	; 0xdae <USB_GetHIDReportItemInfo+0xae>

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
     dac:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	08 95       	ret

00000dbc <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     dbc:	fc 01       	movw	r30, r24
     dbe:	e4 0f       	add	r30, r20
     dc0:	f1 1d       	adc	r31, r1
     dc2:	e4 0f       	add	r30, r20
     dc4:	f1 1d       	adc	r31, r1
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	df 01       	movw	r26, r30
     dcc:	a2 0f       	add	r26, r18
     dce:	b3 1f       	adc	r27, r19
     dd0:	af 56       	subi	r26, 0x6F	; 111
     dd2:	bc 4f       	sbci	r27, 0xFC	; 252
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     dd4:	4d 91       	ld	r20, X+
     dd6:	5c 91       	ld	r21, X
     dd8:	dc 01       	movw	r26, r24
     dda:	a2 0f       	add	r26, r18
     ddc:	b3 1f       	adc	r27, r19
     dde:	a0 57       	subi	r26, 0x70	; 112
     de0:	bc 4f       	sbci	r27, 0xFC	; 252

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     de2:	7c 91       	ld	r23, X
     de4:	76 13       	cpse	r23, r22
     de6:	12 c0       	rjmp	.+36     	; 0xe0c <USB_GetHIDReportSize+0x50>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	ca 01       	movw	r24, r20
     dee:	87 70       	andi	r24, 0x07	; 7
     df0:	99 27       	eor	r25, r25
     df2:	89 2b       	or	r24, r25
     df4:	11 f4       	brne	.+4      	; 0xdfa <USB_GetHIDReportSize+0x3e>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	ca 01       	movw	r24, r20
     dfc:	43 e0       	ldi	r20, 0x03	; 3
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	4a 95       	dec	r20
     e04:	e1 f7       	brne	.-8      	; 0xdfe <USB_GetHIDReportSize+0x42>
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	08 95       	ret
     e0c:	29 5f       	subi	r18, 0xF9	; 249
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     e10:	26 34       	cpi	r18, 0x46	; 70
     e12:	31 05       	cpc	r19, r1
     e14:	d1 f6       	brne	.-76     	; 0xdca <USB_GetHIDReportSize+0xe>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
}
     e1a:	08 95       	ret

00000e1c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e1c:	80 91 9e 00 	lds	r24, 0x009E
     e20:	81 70       	andi	r24, 0x01	; 1
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e22:	90 91 a0 00 	lds	r25, 0x00A0
     e26:	9d 7f       	andi	r25, 0xFD	; 253
     e28:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     e2c:	90 91 9e 00 	lds	r25, 0x009E
     e30:	92 60       	ori	r25, 0x02	; 2
     e32:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e36:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e3a:	91 fd       	sbrc	r25, 1
     e3c:	fc cf       	rjmp	.-8      	; 0xe36 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e3e:	90 91 9e 00 	lds	r25, 0x009E
     e42:	91 60       	ori	r25, 0x01	; 1
     e44:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     e48:	10 92 04 05 	sts	0x0504, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e4c:	90 91 a0 00 	lds	r25, 0x00A0
     e50:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e52:	20 91 a0 00 	lds	r18, 0x00A0
     e56:	2f 7d       	andi	r18, 0xDF	; 223
     e58:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e5c:	20 91 9f 00 	lds	r18, 0x009F
     e60:	2f 7d       	andi	r18, 0xDF	; 223
     e62:	20 93 9f 00 	sts	0x009F, r18
     e66:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e68:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e6c:	35 ff       	sbrs	r19, 5
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e70:	20 91 9f 00 	lds	r18, 0x009F
     e74:	2f 7d       	andi	r18, 0xDF	; 223
     e76:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e7a:	20 91 9f 00 	lds	r18, 0x009F
     e7e:	2d 7f       	andi	r18, 0xFD	; 253
     e80:	20 93 9f 00 	sts	0x009F, r18
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e86:	ef ec       	ldi	r30, 0xCF	; 207
     e88:	f7 e0       	ldi	r31, 0x07	; 7
     e8a:	31 97       	sbiw	r30, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <USB_Host_ResetDevice+0x6e>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <USB_Host_ResetDevice+0x74>
     e90:	00 00       	nop
     e92:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     e94:	49 f7       	brne	.-46     	; 0xe68 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     e96:	99 23       	and	r25, r25
     e98:	29 f0       	breq	.+10     	; 0xea4 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e9a:	90 91 a0 00 	lds	r25, 0x00A0
     e9e:	90 62       	ori	r25, 0x20	; 32
     ea0:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ea4:	81 11       	cpse	r24, r1
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ea8:	80 91 9e 00 	lds	r24, 0x009E
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     eb2:	80 91 a0 00 	lds	r24, 0x00A0
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	80 93 a0 00 	sts	0x00A0, r24
     ebc:	08 95       	ret

00000ebe <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ebe:	20 91 9e 00 	lds	r18, 0x009E
     ec2:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ec4:	90 91 a0 00 	lds	r25, 0x00A0
     ec8:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     eca:	30 91 a0 00 	lds	r19, 0x00A0
     ece:	3f 7d       	andi	r19, 0xDF	; 223
     ed0:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ed4:	30 91 9f 00 	lds	r19, 0x009F
     ed8:	3f 7d       	andi	r19, 0xDF	; 223
     eda:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ede:	30 91 9e 00 	lds	r19, 0x009E
     ee2:	31 60       	ori	r19, 0x01	; 1
     ee4:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     ee8:	88 23       	and	r24, r24
     eea:	39 f1       	breq	.+78     	; 0xf3a <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     eec:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     ef0:	35 ff       	sbrs	r19, 5
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ef4:	30 91 9f 00 	lds	r19, 0x009F
     ef8:	3f 7d       	andi	r19, 0xDF	; 223
     efa:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     efe:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f00:	30 91 0e 05 	lds	r19, 0x050E
     f04:	31 30       	cpi	r19, 0x01	; 1
     f06:	c1 f0       	breq	.+48     	; 0xf38 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f08:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     f0c:	34 ff       	sbrs	r19, 4
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f10:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f14:	80 91 a6 00 	lds	r24, 0x00A6
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     f1e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     f20:	0c c0       	rjmp	.+24     	; 0xf3a <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f22:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     f26:	31 ff       	sbrs	r19, 1
     f28:	df cf       	rjmp	.-66     	; 0xee8 <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f2a:	80 91 a6 00 	lds	r24, 0x00A6
     f2e:	8d 7f       	andi	r24, 0xFD	; 253
     f30:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     f34:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     f38:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     f3a:	21 11       	cpse	r18, r1
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f3e:	20 91 9e 00 	lds	r18, 0x009E
     f42:	2e 7f       	andi	r18, 0xFE	; 254
     f44:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f48:	99 23       	and	r25, r25
     f4a:	29 f0       	breq	.+10     	; 0xf56 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f4c:	90 91 a0 00 	lds	r25, 0x00A0
     f50:	90 62       	ori	r25, 0x20	; 32
     f52:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f56:	08 95       	ret

00000f58 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	28 97       	sbiw	r28, 0x08	; 8
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     f70:	80 91 0e 05 	lds	r24, 0x050E
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	09 f4       	brne	.+2      	; 0xf7a <USB_Host_ProcessNextHostState+0x22>
     f78:	9c c0       	rjmp	.+312    	; 0x10b2 <USB_Host_ProcessNextHostState+0x15a>
     f7a:	68 f4       	brcc	.+26     	; 0xf96 <USB_Host_ProcessNextHostState+0x3e>
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	e1 f1       	breq	.+120    	; 0xff8 <USB_Host_ProcessNextHostState+0xa0>
     f80:	18 f4       	brcc	.+6      	; 0xf88 <USB_Host_ProcessNextHostState+0x30>
     f82:	88 23       	and	r24, r24
     f84:	d9 f0       	breq	.+54     	; 0xfbc <USB_Host_ProcessNextHostState+0x64>
     f86:	ff c0       	rjmp	.+510    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	09 f4       	brne	.+2      	; 0xf8e <USB_Host_ProcessNextHostState+0x36>
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <USB_Host_ProcessNextHostState+0xb4>
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	09 f4       	brne	.+2      	; 0xf94 <USB_Host_ProcessNextHostState+0x3c>
     f92:	67 c0       	rjmp	.+206    	; 0x1062 <USB_Host_ProcessNextHostState+0x10a>
     f94:	f8 c0       	rjmp	.+496    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
     f96:	87 30       	cpi	r24, 0x07	; 7
     f98:	09 f4       	brne	.+2      	; 0xf9c <USB_Host_ProcessNextHostState+0x44>
     f9a:	a6 c0       	rjmp	.+332    	; 0x10e8 <USB_Host_ProcessNextHostState+0x190>
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <USB_Host_ProcessNextHostState+0x48>
     f9e:	96 c0       	rjmp	.+300    	; 0x10cc <USB_Host_ProcessNextHostState+0x174>
     fa0:	88 30       	cpi	r24, 0x08	; 8
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <USB_Host_ProcessNextHostState+0x4e>
     fa4:	bf c0       	rjmp	.+382    	; 0x1124 <USB_Host_ProcessNextHostState+0x1cc>
     fa6:	89 30       	cpi	r24, 0x09	; 9
     fa8:	09 f0       	breq	.+2      	; 0xfac <USB_Host_ProcessNextHostState+0x54>
     faa:	ed c0       	rjmp	.+474    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     fb2:	8a e0       	ldi	r24, 0x0A	; 10
     fb4:	80 93 0e 05 	sts	0x050E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     fb8:	76 da       	rcall	.-2836   	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationComplete>
     fba:	e5 c0       	rjmp	.+458    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
			break;
     fbc:	00 91 02 05 	lds	r16, 0x0502
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     fc0:	10 91 03 05 	lds	r17, 0x0503
     fc4:	01 15       	cp	r16, r1
     fc6:	11 05       	cpc	r17, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <USB_Host_ProcessNextHostState+0x74>
     fca:	dd c0       	rjmp	.+442    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fce:	77 df       	rcall	.-274    	; 0xebe <USB_Host_WaitMS>
     fd0:	88 23       	and	r24, r24
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <USB_Host_ProcessNextHostState+0x88>
     fd4:	90 91 01 05 	lds	r25, 0x0501
				{
					USB_HostState = PostWaitState;
     fd8:	90 93 0e 05 	sts	0x050E, r25
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	c5 c0       	rjmp	.+394    	; 0x116a <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     fe0:	01 50       	subi	r16, 0x01	; 1
					break;
     fe2:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     fe4:	10 93 03 05 	sts	0x0503, r17
     fe8:	00 93 02 05 	sts	0x0502, r16
     fec:	01 2b       	or	r16, r17
     fee:	09 f0       	breq	.+2      	; 0xff2 <USB_Host_ProcessNextHostState+0x9a>
     ff0:	ca c0       	rjmp	.+404    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
     ff2:	80 91 01 05 	lds	r24, 0x0501
				  USB_HostState = PostWaitState;
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <USB_Host_ProcessNextHostState+0xae>
     ff8:	88 ee       	ldi	r24, 0xE8	; 232
     ffa:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     ffc:	90 93 03 05 	sts	0x0503, r25
    1000:	80 93 02 05 	sts	0x0502, r24
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	80 93 0e 05 	sts	0x050E, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    100a:	bd c0       	rjmp	.+378    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
    100c:	80 91 02 05 	lds	r24, 0x0502
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1010:	90 91 03 05 	lds	r25, 0x0503
    1014:	9c 01       	movw	r18, r24
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	31 09       	sbc	r19, r1
    101a:	30 93 03 05 	sts	0x0503, r19
    101e:	20 93 02 05 	sts	0x0502, r18
    1022:	89 2b       	or	r24, r25
    1024:	39 f0       	breq	.+14     	; 0x1034 <USB_Host_ProcessNextHostState+0xdc>
    1026:	8f ec       	ldi	r24, 0xCF	; 207
    1028:	97 e0       	ldi	r25, 0x07	; 7
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <USB_Host_ProcessNextHostState+0xd2>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <USB_Host_ProcessNextHostState+0xd8>
    1030:	00 00       	nop
    1032:	a9 c0       	rjmp	.+338    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
    1034:	77 98       	cbi	0x0e, 7	; 14
    1036:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    103a:	80 61       	ori	r24, 0x10	; 16
    103c:	80 93 d8 00 	sts	0x00D8, r24
    1040:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1044:	8b 7f       	andi	r24, 0xFB	; 251
    1046:	80 93 dd 00 	sts	0x00DD, r24
    104a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	80 93 d7 00 	sts	0x00D7, r24
    1054:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	80 93 dd 00 	sts	0x00DD, r24
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	d2 cf       	rjmp	.-92     	; 0x1006 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1062:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1066:	80 ff       	sbrs	r24, 0
    1068:	8e c0       	rjmp	.+284    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    106a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 93 9f 00 	sts	0x009F, r24
    1074:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1078:	8d 7f       	andi	r24, 0xFD	; 253
    107a:	80 93 9f 00 	sts	0x009F, r24
    107e:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1082:	8d 7f       	andi	r24, 0xFD	; 253
    1084:	80 93 df 00 	sts	0x00DF, r24
    1088:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	80 93 de 00 	sts	0x00DE, r24
    1092:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 93 9e 00 	sts	0x009E, r24
    109c:	53 d1       	rcall	.+678    	; 0x1344 <Pipe_ClearPipes>
    109e:	10 92 0e 05 	sts	0x050E, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    10a2:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 03 05 	sts	0x0503, r25
    10aa:	80 93 02 05 	sts	0x0502, r24
    10ae:	85 e0       	ldi	r24, 0x05	; 5
    10b0:	0a c0       	rjmp	.+20     	; 0x10c6 <USB_Host_ProcessNextHostState+0x16e>
    10b2:	b4 de       	rcall	.-664    	; 0xe1c <USB_Host_ResetDevice>
    10b4:	10 92 0e 05 	sts	0x050E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    10bc:	90 93 03 05 	sts	0x0503, r25
    10c0:	80 93 02 05 	sts	0x0502, r24
    10c4:	86 e0       	ldi	r24, 0x06	; 6
    10c6:	80 93 01 05 	sts	0x0501, r24
    10ca:	5d c0       	rjmp	.+186    	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
    10cc:	01 e0       	ldi	r16, 0x01	; 1
    10ce:	20 e4       	ldi	r18, 0x40	; 64
    10d0:	30 e0       	ldi	r19, 0x00	; 0
			break;
    10d2:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	ae d0       	rcall	.+348    	; 0x1236 <Pipe_ConfigurePipe>
    10da:	81 11       	cpse	r24, r1
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <USB_Host_ProcessNextHostState+0x18c>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	94 e0       	ldi	r25, 0x04	; 4
    10e2:	43 c0       	rjmp	.+134    	; 0x116a <USB_Host_ProcessNextHostState+0x212>
    10e4:	87 e0       	ldi	r24, 0x07	; 7
    10e6:	8f cf       	rjmp	.-226    	; 0x1006 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    10e8:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    10ea:	e8 e1       	ldi	r30, 0x18	; 24
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    10ee:	a6 e0       	ldi	r26, 0x06	; 6
    10f0:	b5 e0       	ldi	r27, 0x05	; 5
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    10f2:	01 90       	ld	r0, Z+
    10f4:	0d 92       	st	X+, r0
    10f6:	8a 95       	dec	r24
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <USB_Host_ProcessNextHostState+0x19a>
    10fa:	10 92 a7 00 	sts	0x00A7, r1
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	78 d3       	rcall	.+1776   	; 0x17f4 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1104:	81 11       	cpse	r24, r1
    1106:	30 c0       	rjmp	.+96     	; 0x1168 <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1108:	88 85       	ldd	r24, Y+8	; 0x08
    110a:	80 93 17 01 	sts	0x0117, r24
    110e:	86 de       	rcall	.-756    	; 0xe1c <USB_Host_ResetDevice>
    1110:	10 92 0e 05 	sts	0x050E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1114:	88 ec       	ldi	r24, 0xC8	; 200
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	90 93 03 05 	sts	0x0503, r25

			USB_Host_ResetDevice();
    111c:	80 93 02 05 	sts	0x0502, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	d1 cf       	rjmp	.-94     	; 0x10c6 <USB_Host_ProcessNextHostState+0x16e>
    1124:	20 91 17 01 	lds	r18, 0x0117
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	01 e0       	ldi	r16, 0x01	; 1
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1132:	81 d0       	rcall	.+258    	; 0x1236 <Pipe_ConfigurePipe>
    1134:	88 23       	and	r24, r24
    1136:	99 f2       	breq	.-90     	; 0x10de <USB_Host_ProcessNextHostState+0x186>
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	e0 e2       	ldi	r30, 0x20	; 32
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	a6 e0       	ldi	r26, 0x06	; 6
    1140:	b5 e0       	ldi	r27, 0x05	; 5
    1142:	01 90       	ld	r0, Z+
    1144:	0d 92       	st	X+, r0
    1146:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1148:	e1 f7       	brne	.-8      	; 0x1142 <USB_Host_ProcessNextHostState+0x1ea>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	52 d3       	rcall	.+1700   	; 0x17f4 <USB_Host_SendControlRequest>
    1150:	81 11       	cpse	r24, r1
    1152:	0a c0       	rjmp	.+20     	; 0x1168 <USB_Host_ProcessNextHostState+0x210>
    1154:	10 92 0e 05 	sts	0x050E, r1
    1158:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	90 93 03 05 	sts	0x0503, r25
    1160:	80 93 02 05 	sts	0x0502, r24
    1164:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1166:	af cf       	rjmp	.-162    	; 0x10c6 <USB_Host_ProcessNextHostState+0x16e>
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	20 91 0e 05 	lds	r18, 0x050E
    116e:	21 30       	cpi	r18, 0x01	; 1
    1170:	51 f0       	breq	.+20     	; 0x1186 <USB_Host_ProcessNextHostState+0x22e>
    1172:	68 2f       	mov	r22, r24
    1174:	89 2f       	mov	r24, r25
    1176:	08 da       	rcall	.-3056   	; 0x588 <EVENT_USB_Host_DeviceEnumerationFailed>
    1178:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	80 93 dd 00 	sts	0x00DD, r24
    1182:	8b d9       	rcall	.-3306   	; 0x49a <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1184:	63 d1       	rcall	.+710    	; 0x144c <USB_ResetInterface>
    1186:	28 96       	adiw	r28, 0x08	; 8
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16

		USB_ResetInterface();
    119a:	08 95       	ret

0000119c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	7c 01       	movw	r14, r24
    11ae:	8b 01       	movw	r16, r22
    11b0:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11b2:	80 91 aa 00 	lds	r24, 0x00AA
    11b6:	8f 7c       	andi	r24, 0xCF	; 207
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    11be:	00 d1       	rcall	.+512    	; 0x13c0 <Pipe_WaitUntilReady>
    11c0:	81 11       	cpse	r24, r1
    11c2:	30 c0       	rjmp	.+96     	; 0x1224 <Pipe_Read_Stream_LE+0x88>
    11c4:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <Pipe_Read_Stream_LE+0x38>
    11c8:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	08 1b       	sub	r16, r24
    11ce:	19 0b       	sbc	r17, r25
    11d0:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    11d2:	f9 1e       	adc	r15, r25
    11d4:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11d6:	d1 2c       	mov	r13, r1
    11d8:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    11da:	11 05       	cpc	r17, r1
    11dc:	11 f1       	breq	.+68     	; 0x1222 <Pipe_Read_Stream_LE+0x86>
    11de:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11e2:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <Pipe_Read_Stream_LE+0x70>
    11e6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11ea:	8e 77       	andi	r24, 0x7E	; 126
    11ec:	80 93 a6 00 	sts	0x00A6, r24
    11f0:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    11f2:	41 f0       	breq	.+16     	; 0x1204 <Pipe_Read_Stream_LE+0x68>
    11f4:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
    11f6:	99 81       	ldd	r25, Y+1	; 0x01
    11f8:	8c 0d       	add	r24, r12
    11fa:	9d 1d       	adc	r25, r13
    11fc:	99 83       	std	Y+1, r25	; 0x01
    11fe:	88 83       	st	Y, r24
    1200:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1202:	10 c0       	rjmp	.+32     	; 0x1224 <Pipe_Read_Stream_LE+0x88>
    1204:	dd d0       	rcall	.+442    	; 0x13c0 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1206:	88 23       	and	r24, r24
    1208:	39 f3       	breq	.-50     	; 0x11d8 <Pipe_Read_Stream_LE+0x3c>
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <Pipe_Read_Stream_LE+0x88>
    120c:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1210:	f7 01       	movw	r30, r14
    1212:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1214:	7f 01       	movw	r14, r30
    1216:	01 50       	subi	r16, 0x01	; 1
    1218:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    121a:	ff ef       	ldi	r31, 0xFF	; 255
    121c:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
    121e:	df 0a       	sbc	r13, r31
    1220:	db cf       	rjmp	.-74     	; 0x11d8 <Pipe_Read_Stream_LE+0x3c>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
    1226:	cf 91       	pop	r28
}
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	08 95       	ret

00001236 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1236:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1238:	e8 2f       	mov	r30, r24
    123a:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    123c:	87 ff       	sbrs	r24, 7
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Pipe_ConfigurePipe+0xe>
    1240:	80 e1       	ldi	r24, 0x10	; 16
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <Pipe_ConfigurePipe+0x10>
    1244:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
    1246:	e7 30       	cpi	r30, 0x07	; 7
    1248:	10 f0       	brcs	.+4      	; 0x124e <Pipe_ConfigurePipe+0x18>
	  return false;
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	5a c0       	rjmp	.+180    	; 0x1302 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
    124e:	61 11       	cpse	r22, r1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
    1252:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1254:	90 e4       	ldi	r25, 0x40	; 64
    1256:	69 9f       	mul	r22, r25
    1258:	b0 01       	movw	r22, r0
    125a:	11 24       	eor	r1, r1
    125c:	4f 70       	andi	r20, 0x0F	; 15
    125e:	46 2b       	or	r20, r22
    1260:	48 2b       	or	r20, r24
    1262:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1264:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1268:	5e 13       	cpse	r21, r30
    126a:	19 c0       	rjmp	.+50     	; 0x129e <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
    126c:	02 30       	cpi	r16, 0x02	; 2
    126e:	10 f0       	brcs	.+4      	; 0x1274 <Pipe_ConfigurePipe+0x3e>
    1270:	76 e0       	ldi	r23, 0x06	; 6
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <Pipe_ConfigurePipe+0x40>
    1274:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    127a:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    127c:	82 17       	cp	r24, r18
    127e:	93 07       	cpc	r25, r19
    1280:	40 f0       	brcs	.+16     	; 0x1292 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1282:	86 2f       	mov	r24, r22
    1284:	82 95       	swap	r24
    1286:	80 7f       	andi	r24, 0xF0	; 240
    1288:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    128a:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    128c:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e c0       	rjmp	.+28     	; 0x12ae <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1292:	65 30       	cpi	r22, 0x05	; 5
    1294:	b1 f3       	breq	.-20     	; 0x1282 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
    1296:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	ef cf       	rjmp	.-34     	; 0x127c <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    129e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    12a2:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    12a6:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    12aa:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    12ae:	81 fd       	sbrc	r24, 1
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    12b2:	5f 5f       	subi	r21, 0xFF	; 255
    12b4:	57 30       	cpi	r21, 0x07	; 7
    12b6:	b1 f6       	brne	.-84     	; 0x1264 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12b8:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	21 c0       	rjmp	.+66     	; 0x1302 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    12c0:	90 91 a9 00 	lds	r25, 0x00A9
    12c4:	9e 7f       	andi	r25, 0xFE	; 254
    12c6:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    12ca:	90 91 ab 00 	lds	r25, 0x00AB
    12ce:	9d 7f       	andi	r25, 0xFD	; 253
    12d0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    12d4:	90 91 a9 00 	lds	r25, 0x00A9
    12d8:	91 60       	ori	r25, 0x01	; 1
    12da:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    12de:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    12e2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    12e6:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    12ea:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    12ee:	80 91 a9 00 	lds	r24, 0x00A9
    12f2:	80 62       	ori	r24, 0x20	; 32
    12f4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    12f8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    12fc:	87 fd       	sbrc	r24, 7
    12fe:	d9 cf       	rjmp	.-78     	; 0x12b2 <Pipe_ConfigurePipe+0x7c>
    1300:	a4 cf       	rjmp	.-184    	; 0x124a <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	f6 2e       	mov	r15, r22
    1312:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	1f 15       	cp	r17, r15
    1318:	71 f0       	breq	.+28     	; 0x1336 <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
    131a:	88 81       	ld	r24, Y
    131c:	88 23       	and	r24, r24
    131e:	41 f0       	breq	.+16     	; 0x1330 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    1320:	29 81       	ldd	r18, Y+1	; 0x01
    1322:	3a 81       	ldd	r19, Y+2	; 0x02
    1324:	0d 81       	ldd	r16, Y+5	; 0x05
    1326:	4b 81       	ldd	r20, Y+3	; 0x03
    1328:	6c 81       	ldd	r22, Y+4	; 0x04
    132a:	85 df       	rcall	.-246    	; 0x1236 <Pipe_ConfigurePipe>
    132c:	88 23       	and	r24, r24
    132e:	21 f0       	breq	.+8      	; 0x1338 <Pipe_ConfigurePipeTable+0x32>
    1330:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1332:	26 96       	adiw	r28, 0x06	; 6
    1334:	f0 cf       	rjmp	.-32     	; 0x1316 <Pipe_ConfigurePipeTable+0x10>
    1336:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
    1338:	df 91       	pop	r29
}
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	08 95       	ret

00001344 <Pipe_ClearPipes>:
    1344:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1348:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    134a:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    134e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1352:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1356:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    135a:	90 91 a9 00 	lds	r25, 0x00A9
    135e:	9e 7f       	andi	r25, 0xFE	; 254
    1360:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	87 30       	cpi	r24, 0x07	; 7
    1368:	81 f7       	brne	.-32     	; 0x134a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    136a:	08 95       	ret

0000136c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    136c:	90 91 a7 00 	lds	r25, 0x00A7
    1370:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1372:	20 91 aa 00 	lds	r18, 0x00AA
    1376:	20 ff       	sbrs	r18, 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <Pipe_IsEndpointBound+0x12>
    137a:	20 e8       	ldi	r18, 0x80	; 128
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <Pipe_IsEndpointBound+0x14>
    137e:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1380:	42 2f       	mov	r20, r18
    1382:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1384:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1386:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    138a:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    138e:	27 ff       	sbrs	r18, 7
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1392:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1396:	53 2f       	mov	r21, r19
    1398:	5f 70       	andi	r21, 0x0F	; 15
    139a:	35 ff       	sbrs	r19, 5
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <Pipe_IsEndpointBound+0x36>
    139e:	20 e8       	ldi	r18, 0x80	; 128
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <Pipe_IsEndpointBound+0x38>
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    13a6:	28 17       	cp	r18, r24
    13a8:	49 f0       	breq	.+18     	; 0x13bc <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	97 30       	cpi	r25, 0x07	; 7
    13ae:	59 f7       	brne	.-42     	; 0x1386 <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13b0:	94 2f       	mov	r25, r20
    13b2:	9f 70       	andi	r25, 0x0F	; 15
    13b4:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    13be:	08 95       	ret

000013c0 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    13c0:	80 91 a2 00 	lds	r24, 0x00A2
    13c4:	90 91 a3 00 	lds	r25, 0x00A3
    13c8:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    13ca:	20 91 aa 00 	lds	r18, 0x00AA
    13ce:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    13d0:	20 31       	cpi	r18, 0x10	; 16
    13d2:	29 f4       	brne	.+10     	; 0x13de <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13d4:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    13d8:	20 ff       	sbrs	r18, 0
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <Pipe_WaitUntilReady+0x26>
    13dc:	17 c0       	rjmp	.+46     	; 0x140c <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    13de:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    13e2:	22 fd       	sbrc	r18, 2
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13e6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    13ea:	21 fd       	sbrc	r18, 1
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    13ee:	20 91 0e 05 	lds	r18, 0x050E
    13f2:	21 30       	cpi	r18, 0x01	; 1
    13f4:	79 f0       	breq	.+30     	; 0x1414 <Pipe_WaitUntilReady+0x54>
    13f6:	20 91 a2 00 	lds	r18, 0x00A2
    13fa:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	19 f3       	breq	.-58     	; 0x13ca <Pipe_WaitUntilReady+0xa>
    1404:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1406:	41 f0       	breq	.+16     	; 0x1418 <Pipe_WaitUntilReady+0x58>
    1408:	c9 01       	movw	r24, r18
    140a:	df cf       	rjmp	.-66     	; 0x13ca <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1418:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    141a:	08 95       	ret

0000141c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    141c:	75 d0       	rcall	.+234    	; 0x1508 <USB_INT_DisableAllInterrupts>
    141e:	7c d0       	rcall	.+248    	; 0x1518 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1420:	e0 ee       	ldi	r30, 0xE0	; 224
    1422:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
    142a:	e8 ed       	ldi	r30, 0xD8	; 216
    142c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    142e:	80 81       	ld	r24, Z
    1430:	8f 77       	andi	r24, 0x7F	; 127
    1432:	80 83       	st	Z, r24
    1434:	19 bc       	out	0x29, r1	; 41
    1436:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1438:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    143a:	8c 91       	ld	r24, X
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	8c 93       	st	X, r24
    1440:	80 81       	ld	r24, Z
    1442:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1444:	80 83       	st	Z, r24
    1446:	10 92 05 05 	sts	0x0505, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    144a:	08 95       	ret

0000144c <USB_ResetInterface>:
    144c:	5d d0       	rcall	.+186    	; 0x1508 <USB_INT_DisableAllInterrupts>
    144e:	64 d0       	rcall	.+200    	; 0x1518 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1450:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1454:	8f 77       	andi	r24, 0x7F	; 127
    1456:	80 93 d8 00 	sts	0x00D8, r24
    145a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    145e:	80 68       	ori	r24, 0x80	; 128
    1460:	80 93 d8 00 	sts	0x00D8, r24
    1464:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1468:	8f 7d       	andi	r24, 0xDF	; 223
    146a:	80 93 d8 00 	sts	0x00D8, r24
    146e:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1472:	8f 77       	andi	r24, 0x7F	; 127
    1474:	80 93 d7 00 	sts	0x00D7, r24
    1478:	8c e0       	ldi	r24, 0x0C	; 12
    147a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    147c:	8e e0       	ldi	r24, 0x0E	; 14
    147e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1480:	09 b4       	in	r0, 0x29	; 41
    1482:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1484:	fd cf       	rjmp	.-6      	; 0x1480 <USB_ResetInterface+0x34>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 0e 05 	sts	0x050E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    148c:	10 92 04 05 	sts	0x0504, r1
	USB_Host_ConfigurationNumber = 0;
    1490:	80 e4       	ldi	r24, 0x40	; 64
    1492:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1496:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    149a:	80 64       	ori	r24, 0x40	; 64
    149c:	80 93 d8 00 	sts	0x00D8, r24
    14a0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	80 93 dd 00 	sts	0x00DD, r24
    14aa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    14ae:	84 60       	ori	r24, 0x04	; 4
    14b0:	80 93 dd 00 	sts	0x00DD, r24
    14b4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    14b8:	8f 7e       	andi	r24, 0xEF	; 239
    14ba:	80 93 d7 00 	sts	0x00D7, r24
    14be:	6f 9a       	sbi	0x0d, 7	; 13
    14c0:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    14c2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	80 93 de 00 	sts	0x00DE, r24
    14cc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    14d0:	84 60       	ori	r24, 0x04	; 4
    14d2:	80 93 de 00 	sts	0x00DE, r24
    14d6:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 93 e0 00 	sts	0x00E0, r24
    14e0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14e4:	80 61       	ori	r24, 0x10	; 16
    14e6:	80 93 d8 00 	sts	0x00D8, r24
    14ea:	08 95       	ret

000014ec <USB_Init>:
    14ec:	e8 ed       	ldi	r30, 0xD8	; 216
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14f0:	80 81       	ld	r24, Z
    14f2:	8f 7e       	andi	r24, 0xEF	; 239
    14f4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    14f6:	e7 ed       	ldi	r30, 0xD7	; 215
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 05 05 	sts	0x0505, r24

	USB_ResetInterface();
    1506:	a2 cf       	rjmp	.-188    	; 0x144c <USB_ResetInterface>

00001508 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1508:	e8 ed       	ldi	r30, 0xD8	; 216
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8c 7f       	andi	r24, 0xFC	; 252
    1510:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1512:	10 92 a0 00 	sts	0x00A0, r1
    1516:	08 95       	ret

00001518 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1518:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    151c:	10 92 9f 00 	sts	0x009F, r1
    1520:	08 95       	ret

00001522 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	0b b6       	in	r0, 0x3b	; 59
    152e:	0f 92       	push	r0
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1548:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    154c:	85 ff       	sbrs	r24, 5
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1550:	80 91 a0 00 	lds	r24, 0x00A0
    1554:	85 ff       	sbrs	r24, 5
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1558:	80 91 9f 00 	lds	r24, 0x009F
    155c:	8f 7d       	andi	r24, 0xDF	; 223
    155e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1562:	20 d1       	rcall	.+576    	; 0x17a4 <USB_Event_Stub>
    1564:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1568:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <__vector_10+0x76>
    156c:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1570:	81 ff       	sbrs	r24, 1
    1572:	12 c0       	rjmp	.+36     	; 0x1598 <__vector_10+0x76>
    1574:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1578:	8d 7f       	andi	r24, 0xFD	; 253
    157a:	80 93 9f 00 	sts	0x009F, r24
    157e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1582:	8e 7f       	andi	r24, 0xFE	; 254
    1584:	80 93 9f 00 	sts	0x009F, r24
    1588:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    158c:	8d 7f       	andi	r24, 0xFD	; 253
    158e:	80 93 a0 00 	sts	0x00A0, r24
    1592:	0e 94 4d 02 	call	0x49a	; 0x49a <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1596:	5a df       	rcall	.-332    	; 0x144c <USB_ResetInterface>

		USB_ResetInterface();
    1598:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    159c:	81 ff       	sbrs	r24, 1
    159e:	17 c0       	rjmp	.+46     	; 0x15ce <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    15a0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    15a4:	81 ff       	sbrs	r24, 1
    15a6:	13 c0       	rjmp	.+38     	; 0x15ce <__vector_10+0xac>
    15a8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    15ac:	8d 7f       	andi	r24, 0xFD	; 253
    15ae:	80 93 df 00 	sts	0x00DF, r24
    15b2:	77 98       	cbi	0x0e, 7	; 14
    15b4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    15b8:	81 60       	ori	r24, 0x01	; 1
    15ba:	80 93 dd 00 	sts	0x00DD, r24
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 ad 02 	call	0x55a	; 0x55a <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    15c4:	0e 94 4d 02 	call	0x49a	; 0x49a <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 0e 05 	sts	0x050E, r24

		USB_HostState = HOST_STATE_Unattached;
    15ce:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    15d2:	80 ff       	sbrs	r24, 0
    15d4:	18 c0       	rjmp	.+48     	; 0x1606 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    15d6:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    15da:	80 ff       	sbrs	r24, 0
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <__vector_10+0xe4>
    15de:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    15e2:	8e 7f       	andi	r24, 0xFE	; 254
    15e4:	80 93 df 00 	sts	0x00DF, r24
    15e8:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    15ec:	8e 7f       	andi	r24, 0xFE	; 254
    15ee:	80 93 de 00 	sts	0x00DE, r24
    15f2:	0e 94 47 02 	call	0x48e	; 0x48e <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    15f6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    15fa:	82 60       	ori	r24, 0x02	; 2
    15fc:	80 93 a0 00 	sts	0x00A0, r24
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	80 93 0e 05 	sts	0x050E, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1606:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    160a:	82 ff       	sbrs	r24, 2
    160c:	10 c0       	rjmp	.+32     	; 0x162e <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    160e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1612:	82 ff       	sbrs	r24, 2
    1614:	0c c0       	rjmp	.+24     	; 0x162e <__vector_10+0x10c>
    1616:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    161a:	8b 7f       	andi	r24, 0xFB	; 251
    161c:	80 93 df 00 	sts	0x00DF, r24
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	82 e0       	ldi	r24, 0x02	; 2
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1624:	0e 94 c4 02 	call	0x588	; 0x588 <EVENT_USB_Host_DeviceEnumerationFailed>
    1628:	0e 94 4d 02 	call	0x49a	; 0x49a <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    162c:	0f df       	rcall	.-482    	; 0x144c <USB_ResetInterface>
    162e:	ff 91       	pop	r31

		USB_ResetInterface();
    1630:	ef 91       	pop	r30
    1632:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	0f 90       	pop	r0
    1648:	0b be       	out	0x3b, r0	; 59
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	fc 01       	movw	r30, r24
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    165a:	eb 01       	movw	r28, r22
    165c:	a8 81       	ld	r26, Y
    165e:	b9 81       	ldd	r27, Y+1	; 0x01
    1660:	8c 91       	ld	r24, X
    1662:	90 e0       	ldi	r25, 0x00	; 0

				if (*BytesRem < CurrDescriptorSize)
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	82 17       	cp	r24, r18
    166a:	93 07       	cpc	r25, r19
    166c:	08 f4       	brcc	.+2      	; 0x1670 <USB_GetNextDescriptor+0x1c>
    166e:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1670:	a2 0f       	add	r26, r18
    1672:	b3 1f       	adc	r27, r19
    1674:	eb 01       	movw	r28, r22
    1676:	b9 83       	std	Y+1, r27	; 0x01
    1678:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	82 1b       	sub	r24, r18
    1680:	93 0b       	sbc	r25, r19
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
			}
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	29 97       	sbiw	r28, 0x09	; 9
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	7b 01       	movw	r14, r22
    16ae:	8a 01       	movw	r16, r20
    16b0:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16b2:	90 e8       	ldi	r25, 0x80	; 128
    16b4:	90 93 06 05 	sts	0x0506, r25
    16b8:	96 e0       	ldi	r25, 0x06	; 6
    16ba:	90 93 07 05 	sts	0x0507, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    16be:	e8 2f       	mov	r30, r24
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	31 97       	sbiw	r30, 0x01	; 1
    16c4:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16c6:	f0 93 09 05 	sts	0x0509, r31
    16ca:	e0 93 08 05 	sts	0x0508, r30
    16ce:	10 92 0b 05 	sts	0x050B, r1
    16d2:	10 92 0a 05 	sts	0x050A, r1
    16d6:	89 e0       	ldi	r24, 0x09	; 9
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 0d 05 	sts	0x050D, r25
    16de:	80 93 0c 05 	sts	0x050C, r24
    16e2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	84 d0       	rcall	.+264    	; 0x17f4 <USB_Host_SendControlRequest>
    16ec:	81 11       	cpse	r24, r1
    16ee:	19 c0       	rjmp	.+50     	; 0x1722 <USB_Host_GetDeviceConfigDescriptor+0x96>
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	d7 01       	movw	r26, r14
    16f6:	ed 93       	st	X+, r30
    16f8:	fc 93       	st	X, r31
    16fa:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
    16fc:	df 06       	cpc	r13, r31
    16fe:	70 f0       	brcs	.+28     	; 0x171c <USB_Host_GetDeviceConfigDescriptor+0x90>
    1700:	f0 93 0d 05 	sts	0x050D, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1704:	e0 93 0c 05 	sts	0x050C, r30
    1708:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    170a:	74 d0       	rcall	.+232    	; 0x17f4 <USB_Host_SendControlRequest>
    170c:	81 11       	cpse	r24, r1
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <USB_Host_GetDeviceConfigDescriptor+0x96>
    1710:	f8 01       	movw	r30, r16
    1712:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	21 f0       	breq	.+8      	; 0x1720 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1718:	86 e0       	ldi	r24, 0x06	; 6
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
    171c:	85 e0       	ldi	r24, 0x05	; 5
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
    1724:	0f b6       	in	r0, 0x3f	; 63
}
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	08 95       	ret

00001740 <USB_GetNextDescriptorComp>:
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	8c 01       	movw	r16, r24
    1756:	eb 01       	movw	r28, r22
    1758:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    175a:	f8 01       	movw	r30, r16
    175c:	e0 80       	ld	r14, Z
    175e:	f1 80       	ldd	r15, Z+1	; 0x01
    1760:	e1 14       	cp	r14, r1
    1762:	f1 04       	cpc	r15, r1
    1764:	99 f0       	breq	.+38     	; 0x178c <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1766:	a8 80       	ld	r10, Y
    1768:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    176a:	be 01       	movw	r22, r28
    176c:	c8 01       	movw	r24, r16
    176e:	72 df       	rcall	.-284    	; 0x1654 <USB_GetNextDescriptor>
    1770:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1772:	99 81       	ldd	r25, Y+1	; 0x01
    1774:	f6 01       	movw	r30, r12
    1776:	09 95       	icall
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	79 f3       	breq	.-34     	; 0x175a <USB_GetNextDescriptorComp+0x1a>
    177c:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    177e:	39 f4       	brne	.+14     	; 0x178e <USB_GetNextDescriptorComp+0x4e>
    1780:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1782:	a8 82       	st	Y, r10
    1784:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1786:	f1 82       	std	Z+1, r15	; 0x01
    1788:	e0 82       	st	Z, r14
    178a:	01 c0       	rjmp	.+2      	; 0x178e <USB_GetNextDescriptorComp+0x4e>
    178c:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    178e:	df 91       	pop	r29
}
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	bf 90       	pop	r11
    17a0:	af 90       	pop	r10
    17a2:	08 95       	ret

000017a4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    17a4:	08 95       	ret

000017a6 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17ae:	c9 ee       	ldi	r28, 0xE9	; 233
    17b0:	d3 e0       	ldi	r29, 0x03	; 3
    17b2:	11 11       	cpse	r17, r1
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    17b6:	80 91 a6 00 	lds	r24, 0x00A6
    17ba:	83 fd       	sbrc	r24, 3
    17bc:	16 c0       	rjmp	.+44     	; 0x17ea <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	7e db       	rcall	.-2308   	; 0xebe <USB_Host_WaitMS>
    17c2:	81 11       	cpse	r24, r1
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <USB_Host_WaitForIOS+0x46>
    17c6:	21 97       	sbiw	r28, 0x01	; 1
    17c8:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    17ca:	99 f7       	brne	.-26     	; 0x17b2 <USB_Host_WaitForIOS+0xc>
    17cc:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    17ce:	0e c0       	rjmp	.+28     	; 0x17ec <USB_Host_WaitForIOS+0x46>
    17d0:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17d2:	29 f4       	brne	.+10     	; 0x17de <USB_Host_WaitForIOS+0x38>
    17d4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17d8:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    17da:	f1 cf       	rjmp	.-30     	; 0x17be <USB_Host_WaitForIOS+0x18>
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <USB_Host_WaitForIOS+0x44>
    17de:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17e0:	71 f7       	brne	.-36     	; 0x17be <USB_Host_WaitForIOS+0x18>
    17e2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17e6:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    17e8:	ea cf       	rjmp	.-44     	; 0x17be <USB_Host_WaitForIOS+0x18>
    17ea:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    17ec:	df 91       	pop	r29
}
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	08 95       	ret

000017f4 <USB_Host_SendControlRequest>:
    17f4:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1800:	f0 90 9e 00 	lds	r15, 0x009E
    1804:	8f 2d       	mov	r24, r15
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    180a:	c0 91 0c 05 	lds	r28, 0x050C
    180e:	d0 91 0d 05 	lds	r29, 0x050D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1812:	80 91 9e 00 	lds	r24, 0x009E
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	4f db       	rcall	.-2402   	; 0xebe <USB_Host_WaitMS>
    1820:	81 11       	cpse	r24, r1
    1822:	cc c0       	rjmp	.+408    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    1824:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1828:	8f 7c       	andi	r24, 0xCF	; 207
    182a:	80 93 aa 00 	sts	0x00AA, r24
    182e:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1832:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1836:	8f 7e       	andi	r24, 0xEF	; 239
    1838:	80 93 a6 00 	sts	0x00A6, r24
    183c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	80 93 a9 00 	sts	0x00A9, r24
    1846:	e6 e0       	ldi	r30, 0x06	; 6
    1848:	f5 e0       	ldi	r31, 0x05	; 5
    184a:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    184c:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1850:	85 e0       	ldi	r24, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1852:	ee 30       	cpi	r30, 0x0E	; 14
    1854:	f8 07       	cpc	r31, r24
    1856:	c9 f7       	brne	.-14     	; 0x184a <USB_Host_SendControlRequest+0x56>
    1858:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    185c:	87 77       	andi	r24, 0x77	; 119
    185e:	80 93 a6 00 	sts	0x00A6, r24
    1862:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1864:	a0 df       	rcall	.-192    	; 0x17a6 <USB_Host_WaitForIOS>
    1866:	81 11       	cpse	r24, r1
    1868:	a9 c0       	rjmp	.+338    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    186a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    186e:	80 64       	ori	r24, 0x40	; 64
    1870:	80 93 a9 00 	sts	0x00A9, r24
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	23 db       	rcall	.-2490   	; 0xebe <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1878:	81 11       	cpse	r24, r1
    187a:	a0 c0       	rjmp	.+320    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    187c:	80 91 06 05 	lds	r24, 0x0506
    1880:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1882:	4e c0       	rjmp	.+156    	; 0x1920 <USB_Host_SendControlRequest+0x12c>
    1884:	80 91 aa 00 	lds	r24, 0x00AA
    1888:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    188a:	80 61       	ori	r24, 0x10	; 16
    188c:	80 93 aa 00 	sts	0x00AA, r24
    1890:	01 15       	cp	r16, r1
    1892:	11 05       	cpc	r17, r1
    1894:	09 f0       	breq	.+2      	; 0x1898 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1896:	3a c0       	rjmp	.+116    	; 0x190c <USB_Host_SendControlRequest+0x118>
    1898:	80 91 aa 00 	lds	r24, 0x00AA
    189c:	8f 7c       	andi	r24, 0xCF	; 207
    189e:	80 62       	ori	r24, 0x20	; 32
    18a0:	80 93 aa 00 	sts	0x00AA, r24
    18a4:	80 91 a9 00 	lds	r24, 0x00A9
    18a8:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18aa:	80 93 a9 00 	sts	0x00A9, r24
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	7a df       	rcall	.-268    	; 0x17a6 <USB_Host_WaitForIOS>
    18b2:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    18b4:	83 c0       	rjmp	.+262    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    18b6:	80 91 a6 00 	lds	r24, 0x00A6
    18ba:	8b 77       	andi	r24, 0x7B	; 123
    18bc:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	71 df       	rcall	.-286    	; 0x17a6 <USB_Host_WaitForIOS>
    18c4:	7b c0       	rjmp	.+246    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    18c6:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    18ca:	8f 7b       	andi	r24, 0xBF	; 191
    18cc:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	69 df       	rcall	.-302    	; 0x17a6 <USB_Host_WaitForIOS>
    18d4:	81 11       	cpse	r24, r1
    18d6:	72 c0       	rjmp	.+228    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    18d8:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18dc:	90 91 f7 00 	lds	r25, 0x00F7
    18e0:	89 2b       	or	r24, r25
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18e4:	c0 e0       	ldi	r28, 0x00	; 0
    18e6:	d0 e0       	ldi	r29, 0x00	; 0
    18e8:	f8 01       	movw	r30, r16
    18ea:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    18ec:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    18f0:	90 91 f7 00 	lds	r25, 0x00F7
    18f4:	89 2b       	or	r24, r25
    18f6:	69 f4       	brne	.+26     	; 0x1912 <USB_Host_SendControlRequest+0x11e>
    18f8:	80 91 a9 00 	lds	r24, 0x00A9
    18fc:	80 64       	ori	r24, 0x40	; 64
    18fe:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    1902:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1906:	8e 77       	andi	r24, 0x7E	; 126
    1908:	80 93 a6 00 	sts	0x00A6, r24
    190c:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    190e:	d9 f6       	brne	.-74     	; 0x18c6 <USB_Host_SendControlRequest+0xd2>
    1910:	c3 cf       	rjmp	.-122    	; 0x1898 <USB_Host_SendControlRequest+0xa4>
    1912:	20 97       	sbiw	r28, 0x00	; 0
    1914:	89 f3       	breq	.-30     	; 0x18f8 <USB_Host_SendControlRequest+0x104>
    1916:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    191a:	81 93       	st	Z+, r24
    191c:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    191e:	e5 cf       	rjmp	.-54     	; 0x18ea <USB_Host_SendControlRequest+0xf6>
    1920:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1922:	11 05       	cpc	r17, r1
    1924:	b1 f1       	breq	.+108    	; 0x1992 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    1926:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    192a:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    192c:	80 62       	ori	r24, 0x20	; 32
    192e:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1932:	80 91 a9 00 	lds	r24, 0x00A9
    1936:	8f 7b       	andi	r24, 0xBF	; 191
    1938:	80 93 a9 00 	sts	0x00A9, r24
    193c:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    193e:	20 97       	sbiw	r28, 0x00	; 0
    1940:	01 f1       	breq	.+64     	; 0x1982 <USB_Host_SendControlRequest+0x18e>
    1942:	31 df       	rcall	.-414    	; 0x17a6 <USB_Host_WaitForIOS>
    1944:	81 11       	cpse	r24, r1
    1946:	3a c0       	rjmp	.+116    	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1948:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    194a:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    194e:	30 91 f7 00 	lds	r19, 0x00F7
    1952:	80 91 17 01 	lds	r24, 0x0117
    1956:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1958:	28 17       	cp	r18, r24
    195a:	39 07       	cpc	r19, r25
    195c:	58 f4       	brcc	.+22     	; 0x1974 <USB_Host_SendControlRequest+0x180>
    195e:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	8c 01       	movw	r16, r24
    1964:	20 81       	ld	r18, Z
    1966:	20 93 af 00 	sts	0x00AF, r18
    196a:	21 97       	sbiw	r28, 0x01	; 1
    196c:	20 97       	sbiw	r28, 0x00	; 0
    196e:	19 f0       	breq	.+6      	; 0x1976 <USB_Host_SendControlRequest+0x182>
    1970:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1972:	eb cf       	rjmp	.-42     	; 0x194a <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1974:	8f 01       	movw	r16, r30
    1976:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    197a:	8b 77       	andi	r24, 0x7B	; 123
    197c:	80 93 a6 00 	sts	0x00A6, r24
    1980:	dd cf       	rjmp	.-70     	; 0x193c <USB_Host_SendControlRequest+0x148>
    1982:	11 df       	rcall	.-478    	; 0x17a6 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1984:	81 11       	cpse	r24, r1
    1986:	1a c0       	rjmp	.+52     	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    1988:	80 91 a9 00 	lds	r24, 0x00A9
    198c:	80 64       	ori	r24, 0x40	; 64
    198e:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1992:	80 91 aa 00 	lds	r24, 0x00AA
    1996:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1998:	80 61       	ori	r24, 0x10	; 16
    199a:	80 93 aa 00 	sts	0x00AA, r24
    199e:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19a2:	8f 7b       	andi	r24, 0xBF	; 191
    19a4:	80 93 a9 00 	sts	0x00A9, r24
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	fd de       	rcall	.-518    	; 0x17a6 <USB_Host_WaitForIOS>
    19ac:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <USB_Host_SendControlRequest+0x1c8>
    19b0:	80 91 a6 00 	lds	r24, 0x00A6
    19b4:	8e 77       	andi	r24, 0x7E	; 126
    19b6:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 91 a9 00 	lds	r25, 0x00A9
    19c0:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19c2:	90 93 a9 00 	sts	0x00A9, r25
    19c6:	f1 10       	cpse	r15, r1
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <USB_Host_SendControlRequest+0x1e0>
    19ca:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19ce:	9e 7f       	andi	r25, 0xFE	; 254
    19d0:	90 93 9e 00 	sts	0x009E, r25
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    19da:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    19e6:	ff 90       	pop	r15
    19e8:	08 95       	ret

000019ea <USB_Host_SetDeviceConfiguration>:
    19ea:	cf 93       	push	r28
				UPRST = 0;
    19ec:	c8 2f       	mov	r28, r24
    19ee:	10 92 06 05 	sts	0x0506, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    19f2:	89 e0       	ldi	r24, 0x09	; 9
    19f4:	80 93 07 05 	sts	0x0507, r24
    19f8:	2c 2f       	mov	r18, r28
    19fa:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    19fc:	30 93 09 05 	sts	0x0509, r19
    1a00:	20 93 08 05 	sts	0x0508, r18
    1a04:	10 92 0b 05 	sts	0x050B, r1
    1a08:	10 92 0a 05 	sts	0x050A, r1
    1a0c:	10 92 0d 05 	sts	0x050D, r1
    1a10:	10 92 0c 05 	sts	0x050C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a14:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	eb de       	rcall	.-554    	; 0x17f4 <USB_Host_SendControlRequest>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <USB_Host_SetDeviceConfiguration+0x4a>
    1a22:	c0 93 04 05 	sts	0x0504, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1a26:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <USB_Host_SetDeviceConfiguration+0x44>
    1a2a:	9b e0       	ldi	r25, 0x0B	; 11
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <USB_Host_SetDeviceConfiguration+0x46>
    1a2e:	9a e0       	ldi	r25, 0x0A	; 10
    1a30:	90 93 0e 05 	sts	0x050E, r25
    1a34:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1a36:	08 95       	ret

00001a38 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1a38:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1a3a:	c0 91 a7 00 	lds	r28, 0x00A7
    1a3e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1a40:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a44:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1a48:	87 da       	rcall	.-2802   	; 0xf58 <USB_Host_ProcessNextHostState>
    1a4a:	c0 93 a7 00 	sts	0x00A7, r28
    1a4e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1a50:	08 95       	ret

00001a52 <DCOMP_HID_Host_NextHIDInterface>:

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1a52:	fc 01       	movw	r30, r24
    1a54:	21 81       	ldd	r18, Z+1	; 0x01
    1a56:	24 30       	cpi	r18, 0x04	; 4
    1a58:	29 f4       	brne	.+10     	; 0x1a64 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1a5a:	85 81       	ldd	r24, Z+5	; 0x05
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	08 95       	ret
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a64:	82 e0       	ldi	r24, 0x02	; 2
}
    1a66:	08 95       	ret

00001a68 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1a68:	fc 01       	movw	r30, r24
    1a6a:	81 81       	ldd	r24, Z+1	; 0x01
    1a6c:	81 32       	cpi	r24, 0x21	; 33
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
}
    1a7e:	08 95       	ret

00001a80 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1a80:	fc 01       	movw	r30, r24
    1a82:	21 81       	ldd	r18, Z+1	; 0x01
    1a84:	25 30       	cpi	r18, 0x05	; 5
    1a86:	31 f4       	brne	.+12     	; 0x1a94 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	70 dc       	rcall	.-1824   	; 0x136c <Pipe_IsEndpointBound>
    1a8c:	88 23       	and	r24, r24
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1a90:	82 e0       	ldi	r24, 0x02	; 2
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a92:	08 95       	ret
    1a94:	24 30       	cpi	r18, 0x04	; 4
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x10>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1a9a:	08 95       	ret
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1a9e:	08 95       	ret

00001aa0 <HID_Host_ConfigurePipes>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1aa0:	6f 92       	push	r6
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1aa2:	7f 92       	push	r7
    1aa4:	8f 92       	push	r8
    1aa6:	9f 92       	push	r9
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <HID_Host_ConfigurePipes+0x1e>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <HID_Host_ConfigurePipes+0x20>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	8c 01       	movw	r16, r24
    1ac6:	7a 83       	std	Y+2, r23	; 0x02
    1ac8:	69 83       	std	Y+1, r22	; 0x01
    1aca:	5c 83       	std	Y+4, r21	; 0x04
    1acc:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1ace:	fc 01       	movw	r30, r24
    1ad0:	3f 96       	adiw	r30, 0x0f	; 15
    1ad2:	88 e0       	ldi	r24, 0x08	; 8
    1ad4:	df 01       	movw	r26, r30
    1ad6:	1d 92       	st	X+, r1
    1ad8:	8a 95       	dec	r24
    1ada:	e9 f7       	brne	.-6      	; 0x1ad6 <HID_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1adc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ade:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae0:	81 81       	ldd	r24, Z+1	; 0x01
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <HID_Host_ConfigurePipes+0x48>
    1ae6:	9d c0       	rjmp	.+314    	; 0x1c22 <HID_Host_ConfigurePipes+0x182>
    1ae8:	81 2c       	mov	r8, r1
    1aea:	91 2c       	mov	r9, r1
    1aec:	c1 2c       	mov	r12, r1
    1aee:	d1 2c       	mov	r13, r1
    1af0:	61 2c       	mov	r6, r1
    1af2:	71 2c       	mov	r7, r1
    1af4:	a1 2c       	mov	r10, r1
    1af6:	b1 2c       	mov	r11, r1
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1af8:	c1 14       	cp	r12, r1
    1afa:	d1 04       	cpc	r13, r1
    1afc:	21 f4       	brne	.+8      	; 0x1b06 <HID_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1afe:	a1 14       	cp	r10, r1
    1b00:	b1 04       	cpc	r11, r1
    1b02:	b9 f0       	breq	.+46     	; 0x1b32 <HID_Host_ConfigurePipes+0x92>
    1b04:	41 c0       	rjmp	.+130    	; 0x1b88 <HID_Host_ConfigurePipes+0xe8>
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b06:	40 e4       	ldi	r20, 0x40	; 64
    1b08:	5d e0       	ldi	r21, 0x0D	; 13
    1b0a:	be 01       	movw	r22, r28
    1b0c:	6d 5f       	subi	r22, 0xFD	; 253
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	15 de       	rcall	.-982    	; 0x1740 <USB_GetNextDescriptorComp>
    1b16:	81 11       	cpse	r24, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1b18:	f2 cf       	rjmp	.-28     	; 0x1afe <HID_Host_ConfigurePipes+0x5e>
    1b1a:	27 c0       	rjmp	.+78     	; 0x1b6a <HID_Host_ConfigurePipes+0xca>
    1b1c:	cb 80       	ldd	r12, Y+3	; 0x03
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1b1e:	dc 80       	ldd	r13, Y+4	; 0x04
    1b20:	f8 01       	movw	r30, r16
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1b22:	84 85       	ldd	r24, Z+12	; 0x0c
    1b24:	88 23       	and	r24, r24
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1b26:	89 f0       	breq	.+34     	; 0x1b4a <HID_Host_ConfigurePipes+0xaa>
    1b28:	d6 01       	movw	r26, r12
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1b2a:	17 96       	adiw	r26, 0x07	; 7
    1b2c:	9c 91       	ld	r25, X
    1b2e:	98 17       	cp	r25, r24
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <HID_Host_ConfigurePipes+0xaa>
    1b32:	49 e2       	ldi	r20, 0x29	; 41
			if (DataINEndpoint)
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b34:	5d e0       	ldi	r21, 0x0D	; 13
    1b36:	be 01       	movw	r22, r28
    1b38:	6d 5f       	subi	r22, 0xFD	; 253
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	ff dd       	rcall	.-1026   	; 0x1740 <USB_GetNextDescriptorComp>
    1b42:	88 23       	and	r24, r24
    1b44:	59 f3       	breq	.-42     	; 0x1b1c <HID_Host_ConfigurePipes+0x7c>
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	6d c0       	rjmp	.+218    	; 0x1c24 <HID_Host_ConfigurePipes+0x184>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1b4a:	44 e3       	ldi	r20, 0x34	; 52
    1b4c:	5d e0       	ldi	r21, 0x0D	; 13

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b4e:	be 01       	movw	r22, r28
    1b50:	6d 5f       	subi	r22, 0xFD	; 253
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	ce 01       	movw	r24, r28
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	f3 dd       	rcall	.-1050   	; 0x1740 <USB_GetNextDescriptorComp>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	f4 cf       	rjmp	.-24     	; 0x1b46 <HID_Host_ConfigurePipes+0xa6>
    1b5e:	8b 80       	ldd	r8, Y+3	; 0x03
    1b60:	9c 80       	ldd	r9, Y+4	; 0x04
    1b62:	e1 2c       	mov	r14, r1
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1b64:	f1 2c       	mov	r15, r1
    1b66:	37 01       	movw	r6, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1b68:	c7 cf       	rjmp	.-114    	; 0x1af8 <HID_Host_ConfigurePipes+0x58>
    1b6a:	eb 80       	ldd	r14, Y+3	; 0x03
    1b6c:	fc 80       	ldd	r15, Y+4	; 0x04
    1b6e:	f7 01       	movw	r30, r14

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <HID_Host_ConfigurePipes+0xda>
    1b76:	57 01       	movw	r10, r14
    1b78:	73 01       	movw	r14, r6
    1b7a:	a1 14       	cp	r10, r1
		  DataINEndpoint  = EndpointData;
    1b7c:	b1 04       	cpc	r11, r1
			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1b7e:	99 f3       	breq	.-26     	; 0x1b66 <HID_Host_ConfigurePipes+0xc6>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1b80:	e1 14       	cp	r14, r1
    1b82:	f1 04       	cpc	r15, r1
    1b84:	81 f3       	breq	.-32     	; 0x1b66 <HID_Host_ConfigurePipes+0xc6>
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <HID_Host_ConfigurePipes+0xea>
    1b88:	73 01       	movw	r14, r6
    1b8a:	d5 01       	movw	r26, r10
    1b8c:	14 96       	adiw	r26, 0x04	; 4
    1b8e:	8d 91       	ld	r24, X+
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1b90:	9c 91       	ld	r25, X
    1b92:	15 97       	sbiw	r26, 0x05	; 5
    1b94:	f8 01       	movw	r30, r16
    1b96:	92 83       	std	Z+2, r25	; 0x02
    1b98:	81 83       	std	Z+1, r24	; 0x01
    1b9a:	12 96       	adiw	r26, 0x02	; 2
    1b9c:	8c 91       	ld	r24, X
    1b9e:	83 83       	std	Z+3, r24	; 0x03
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	b8 2e       	mov	r11, r24
    1ba4:	b4 82       	std	Z+4, r11	; 0x04
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	c8 01       	movw	r24, r16
    1baa:	ad db       	rcall	.-2214   	; 0x1306 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1bac:	81 11       	cpse	r24, r1
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <HID_Host_ConfigurePipes+0x114>
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	38 c0       	rjmp	.+112    	; 0x1c24 <HID_Host_ConfigurePipes+0x184>
    1bb4:	e1 14       	cp	r14, r1
    1bb6:	f1 04       	cpc	r15, r1
	  return HID_ENUMERROR_PipeConfigurationFailed;
    1bb8:	f9 f4       	brne	.+62     	; 0x1bf8 <HID_Host_ConfigurePipes+0x158>
    1bba:	d6 01       	movw	r26, r12

	if (DataOUTEndpoint)
    1bbc:	12 96       	adiw	r26, 0x02	; 2
    1bbe:	8c 91       	ld	r24, X
    1bc0:	f8 01       	movw	r30, r16

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return HID_ENUMERROR_PipeConfigurationFailed;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1bc2:	80 8b       	std	Z+16, r24	; 0x10
    1bc4:	d4 01       	movw	r26, r8
    1bc6:	17 96       	adiw	r26, 0x07	; 7
    1bc8:	8d 91       	ld	r24, X+
    1bca:	9c 91       	ld	r25, X
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1bcc:	18 97       	sbiw	r26, 0x08	; 8
    1bce:	95 8b       	std	Z+21, r25	; 0x15
    1bd0:	84 8b       	std	Z+20, r24	; 0x14
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	f6 01       	movw	r30, r12
    1bd6:	96 81       	ldd	r25, Z+6	; 0x06
    1bd8:	91 11       	cpse	r25, r1
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <HID_Host_ConfigurePipes+0x13e>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	d8 01       	movw	r26, r16
    1be0:	51 96       	adiw	r26, 0x11	; 17
    1be2:	8c 93       	st	X, r24
    1be4:	51 97       	sbiw	r26, 0x11	; 17
    1be6:	88 e0       	ldi	r24, 0x08	; 8
    1be8:	56 96       	adiw	r26, 0x16	; 22
    1bea:	8c 93       	st	X, r24
    1bec:	56 97       	sbiw	r26, 0x16	; 22
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	1f 96       	adiw	r26, 0x0f	; 15
    1bf2:	8c 93       	st	X, r24
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.IsActive             = true;
    1bf6:	16 c0       	rjmp	.+44     	; 0x1c24 <HID_Host_ConfigurePipes+0x184>
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	84 81       	ldd	r24, Z+4	; 0x04

	return HID_ENUMERROR_NoError;
    1bfc:	95 81       	ldd	r25, Z+5	; 0x05
    1bfe:	d8 01       	movw	r26, r16
	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
	  return HID_ENUMERROR_PipeConfigurationFailed;

	if (DataOUTEndpoint)
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1c00:	18 96       	adiw	r26, 0x08	; 8
    1c02:	9c 93       	st	X, r25
    1c04:	8e 93       	st	-X, r24
    1c06:	17 97       	sbiw	r26, 0x07	; 7
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	19 96       	adiw	r26, 0x09	; 9
    1c0c:	8c 93       	st	X, r24
    1c0e:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1c10:	1a 96       	adiw	r26, 0x0a	; 10
    1c12:	bc 92       	st	X, r11
    1c14:	61 e0       	ldi	r22, 0x01	; 1
    1c16:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1c18:	06 96       	adiw	r24, 0x06	; 6
    1c1a:	75 db       	rcall	.-2326   	; 0x1306 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1c1c:	88 23       	and	r24, r24
    1c1e:	41 f2       	breq	.-112    	; 0x1bb0 <HID_Host_ConfigurePipes+0x110>
    1c20:	cc cf       	rjmp	.-104    	; 0x1bba <HID_Host_ConfigurePipes+0x11a>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1c2c:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	08 95       	ret

00001c4a <HID_Host_ReceiveReport>:
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	fc 01       	movw	r30, r24
    1c50:	eb 01       	movw	r28, r22
    1c52:	80 91 0e 05 	lds	r24, 0x050E
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1c56:	8b 30       	cpi	r24, 0x0B	; 11
    1c58:	c1 f5       	brne	.+112    	; 0x1cca <HID_Host_ReceiveReport+0x80>
    1c5a:	87 85       	ldd	r24, Z+15	; 0x0f
    1c5c:	88 23       	and	r24, r24
    1c5e:	a9 f1       	breq	.+106    	; 0x1cca <HID_Host_ReceiveReport+0x80>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c68:	80 91 a9 00 	lds	r24, 0x00A9
    1c6c:	8f 7b       	andi	r24, 0xBF	; 191
    1c6e:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1c72:	83 89       	ldd	r24, Z+19	; 0x13
    1c74:	81 11       	cpse	r24, r1
    1c76:	12 c0       	rjmp	.+36     	; 0x1c9c <HID_Host_ReceiveReport+0x52>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1c78:	a5 85       	ldd	r26, Z+13	; 0x0d
    1c7a:	b6 85       	ldd	r27, Z+14	; 0x0e
    1c7c:	a8 52       	subi	r26, 0x28	; 40
    1c7e:	bc 4f       	sbci	r27, 0xFC	; 252
    1c80:	8c 91       	ld	r24, X
    1c82:	88 23       	and	r24, r24
    1c84:	29 f0       	breq	.+10     	; 0x1c90 <HID_Host_ReceiveReport+0x46>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c86:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1c8a:	68 83       	st	Y, r22
    1c8c:	21 96       	adiw	r28, 0x01	; 1
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <HID_Host_ReceiveReport+0x48>
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1c90:	60 e0       	ldi	r22, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	85 85       	ldd	r24, Z+13	; 0x0d
    1c96:	96 85       	ldd	r25, Z+14	; 0x0e
    1c98:	91 d8       	rcall	.-3806   	; 0xdbc <USB_GetHIDReportSize>
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <HID_Host_ReceiveReport+0x5a>
    1c9c:	80 91 f6 00 	lds	r24, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1ca0:	90 91 f7 00 	lds	r25, 0x00F7
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	bc 01       	movw	r22, r24
    1caa:	ce 01       	movw	r24, r28
    1cac:	77 da       	rcall	.-2834   	; 0x119c <Pipe_Read_Stream_LE>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	0d c0       	rjmp	.+26     	; 0x1ccc <HID_Host_ReceiveReport+0x82>
    1cb2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cb6:	8e 77       	andi	r24, 0x7E	; 126
    1cb8:	80 93 a6 00 	sts	0x00A6, r24
    1cbc:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cc0:	80 64       	ori	r24, 0x40	; 64
    1cc2:	80 93 a9 00 	sts	0x00A9, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <HID_Host_ReceiveReport+0x82>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1cce:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1cd0:	08 95       	ret

00001cd2 <HID_Host_IsReportReceived>:
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	80 91 0e 05 	lds	r24, 0x050E
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1cd8:	8b 30       	cpi	r24, 0x0B	; 11
    1cda:	a9 f4       	brne	.+42     	; 0x1d06 <HID_Host_IsReportReceived+0x34>
    1cdc:	87 85       	ldd	r24, Z+15	; 0x0f
    1cde:	88 23       	and	r24, r24
    1ce0:	99 f0       	breq	.+38     	; 0x1d08 <HID_Host_IsReportReceived+0x36>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 70       	andi	r24, 0x0F	; 15
    1ce6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cea:	80 91 a9 00 	lds	r24, 0x00A9
    1cee:	8f 7b       	andi	r24, 0xBF	; 191
    1cf0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1cf4:	80 91 a6 00 	lds	r24, 0x00A6
    1cf8:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cfa:	90 91 a9 00 	lds	r25, 0x00A9
    1cfe:	90 64       	ori	r25, 0x40	; 64
    1d00:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1d04:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1d08:	08 95       	ret

00001d0a <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1d20:	cd b6       	in	r12, 0x3d	; 61
    1d22:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1d24:	dc 01       	movw	r26, r24
    1d26:	54 96       	adiw	r26, 0x14	; 20
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	55 97       	sbiw	r26, 0x15	; 21
    1d2e:	ed b7       	in	r30, 0x3d	; 61
    1d30:	fe b7       	in	r31, 0x3e	; 62
    1d32:	e8 1b       	sub	r30, r24
    1d34:	f9 0b       	sbc	r31, r25
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	fe bf       	out	0x3e, r31	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	ed bf       	out	0x3d, r30	; 61
    1d40:	2d b7       	in	r18, 0x3d	; 61
    1d42:	3e b7       	in	r19, 0x3e	; 62
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	79 01       	movw	r14, r18

	USB_ControlRequest = (USB_Request_Header_t)
    1d4a:	50 96       	adiw	r26, 0x10	; 16
    1d4c:	2c 91       	ld	r18, X
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	41 e8       	ldi	r20, 0x81	; 129
    1d52:	40 93 06 05 	sts	0x0506, r20
    1d56:	46 e0       	ldi	r20, 0x06	; 6
    1d58:	40 93 07 05 	sts	0x0507, r20
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	52 e2       	ldi	r21, 0x22	; 34
    1d60:	50 93 09 05 	sts	0x0509, r21
    1d64:	40 93 08 05 	sts	0x0508, r20
    1d68:	30 93 0b 05 	sts	0x050B, r19
    1d6c:	20 93 0a 05 	sts	0x050A, r18
    1d70:	90 93 0d 05 	sts	0x050D, r25
    1d74:	80 93 0c 05 	sts	0x050C, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d78:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	3a dd       	rcall	.-1420   	; 0x17f4 <USB_Host_SendControlRequest>
    1d80:	81 11       	cpse	r24, r1
    1d82:	52 c0       	rjmp	.+164    	; 0x1e28 <HID_Host_SetReportProtocol+0x11e>
    1d84:	d8 01       	movw	r26, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1d86:	53 96       	adiw	r26, 0x13	; 19
    1d88:	8c 91       	ld	r24, X
    1d8a:	53 97       	sbiw	r26, 0x13	; 19
    1d8c:	88 23       	and	r24, r24
    1d8e:	f1 f0       	breq	.+60     	; 0x1dcc <HID_Host_SetReportProtocol+0xc2>
    1d90:	50 96       	adiw	r26, 0x10	; 16
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1d92:	8c 91       	ld	r24, X
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	21 e2       	ldi	r18, 0x21	; 33
    1d98:	20 93 06 05 	sts	0x0506, r18
    1d9c:	2b e0       	ldi	r18, 0x0B	; 11
    1d9e:	20 93 07 05 	sts	0x0507, r18
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	30 93 09 05 	sts	0x0509, r19
    1daa:	20 93 08 05 	sts	0x0508, r18
    1dae:	90 93 0b 05 	sts	0x050B, r25
    1db2:	80 93 0a 05 	sts	0x050A, r24
    1db6:	10 92 0d 05 	sts	0x050D, r1
    1dba:	10 92 0c 05 	sts	0x050C, r1
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	18 dd       	rcall	.-1488   	; 0x17f4 <USB_Host_SendControlRequest>
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	30 c0       	rjmp	.+96     	; 0x1e28 <HID_Host_SetReportProtocol+0x11e>
    1dc8:	f8 01       	movw	r30, r16
    1dca:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1dcc:	d8 01       	movw	r26, r16
    1dce:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1dd0:	4d 91       	ld	r20, X+
    1dd2:	5c 91       	ld	r21, X
    1dd4:	1e 97       	sbiw	r26, 0x0e	; 14
    1dd6:	41 15       	cp	r20, r1
    1dd8:	51 05       	cpc	r21, r1
    1dda:	29 f1       	breq	.+74     	; 0x1e26 <HID_Host_SetReportProtocol+0x11c>
    1ddc:	54 96       	adiw	r26, 0x14	; 20
    1dde:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1de0:	7c 91       	ld	r23, X
    1de2:	55 97       	sbiw	r26, 0x15	; 21
    1de4:	c7 01       	movw	r24, r14
    1de6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <USB_ProcessHIDReport>
    1dea:	88 23       	and	r24, r24
    1dec:	11 f0       	breq	.+4      	; 0x1df2 <HID_Host_SetReportProtocol+0xe8>
    1dee:	80 68       	ori	r24, 0x80	; 128
    1df0:	1b c0       	rjmp	.+54     	; 0x1e28 <HID_Host_SetReportProtocol+0x11e>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1df2:	d8 01       	movw	r26, r16
    1df4:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	1e 97       	sbiw	r26, 0x0e	; 14
    1dfc:	ea 52       	subi	r30, 0x2A	; 42
    1dfe:	fc 4f       	sbci	r31, 0xFC	; 252
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	9c 01       	movw	r18, r24
    1e06:	27 70       	andi	r18, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1e08:	33 27       	eor	r19, r19
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	23 2b       	or	r18, r19
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <HID_Host_SetReportProtocol+0x108>
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	33 e0       	ldi	r19, 0x03	; 3
    1e14:	96 95       	lsr	r25
    1e16:	87 95       	ror	r24
    1e18:	3a 95       	dec	r19
    1e1a:	e1 f7       	brne	.-8      	; 0x1e14 <HID_Host_SetReportProtocol+0x10a>
    1e1c:	84 0f       	add	r24, r20
    1e1e:	f8 01       	movw	r30, r16
    1e20:	86 8b       	std	Z+22, r24	; 0x16
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <HID_Host_SetReportProtocol+0x11e>

	return 0;
    1e26:	80 e8       	ldi	r24, 0x80	; 128
    1e28:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1e2a:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e2c:	de be       	out	0x3e, r13	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd be       	out	0x3d, r12	; 61
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <Serial_putchar>:
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1e44:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1e48:	95 ff       	sbrs	r25, 5
    1e4a:	fc cf       	rjmp	.-8      	; 0x1e44 <Serial_putchar>
				UDR1 = DataByte;
    1e4c:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	08 95       	ret

00001e56 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e56:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e5a:	87 ff       	sbrs	r24, 7
    1e5c:	08 c0       	rjmp	.+16     	; 0x1e6e <Serial_getchar+0x18>
    1e5e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e62:	87 ff       	sbrs	r24, 7
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1e66:	80 91 ce 00 	lds	r24, 0x00CE
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	08 95       	ret
	  return _FDEV_EOF;
    1e6e:	8e ef       	ldi	r24, 0xFE	; 254
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1e78:	08 95       	ret

00001e7a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1e7a:	fc 01       	movw	r30, r24
	if (!(Stream))
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	59 f4       	brne	.+22     	; 0x1e96 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1e80:	8f e0       	ldi	r24, 0x0F	; 15
    1e82:	95 e0       	ldi	r25, 0x05	; 5
    1e84:	90 93 1e 05 	sts	0x051E, r25
    1e88:	80 93 1d 05 	sts	0x051D, r24
		stdout = Stream;
    1e8c:	90 93 20 05 	sts	0x0520, r25
    1e90:	80 93 1f 05 	sts	0x051F, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1e94:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1e96:	8e e0       	ldi	r24, 0x0E	; 14
    1e98:	df 01       	movw	r26, r30
    1e9a:	1d 92       	st	X+, r1
    1e9c:	8a 95       	dec	r24
    1e9e:	e9 f7       	brne	.-6      	; 0x1e9a <Serial_CreateStream+0x20>
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	83 83       	std	Z+3, r24	; 0x03
    1ea4:	82 e2       	ldi	r24, 0x22	; 34
    1ea6:	9f e0       	ldi	r25, 0x0F	; 15
    1ea8:	91 87       	std	Z+9, r25	; 0x09
    1eaa:	80 87       	std	Z+8, r24	; 0x08
    1eac:	8b e2       	ldi	r24, 0x2B	; 43
    1eae:	9f e0       	ldi	r25, 0x0F	; 15
    1eb0:	93 87       	std	Z+11, r25	; 0x0b
    1eb2:	82 87       	std	Z+10, r24	; 0x0a
    1eb4:	08 95       	ret

00001eb6 <printf_P>:
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	37 96       	adiw	r30, 0x07	; 7
    1ec6:	61 91       	ld	r22, Z+
    1ec8:	71 91       	ld	r23, Z+
    1eca:	0f e1       	ldi	r16, 0x1F	; 31
    1ecc:	15 e0       	ldi	r17, 0x05	; 5
    1ece:	d8 01       	movw	r26, r16
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9c 91       	ld	r25, X
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	13 96       	adiw	r26, 0x03	; 3
    1ed8:	2c 91       	ld	r18, X
    1eda:	13 97       	sbiw	r26, 0x03	; 3
    1edc:	28 60       	ori	r18, 0x08	; 8
    1ede:	13 96       	adiw	r26, 0x03	; 3
    1ee0:	2c 93       	st	X, r18
    1ee2:	af 01       	movw	r20, r30
    1ee4:	3a d0       	rcall	.+116    	; 0x1f5a <vfprintf>
    1ee6:	d8 01       	movw	r26, r16
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	23 81       	ldd	r18, Z+3	; 0x03
    1eee:	27 7f       	andi	r18, 0xF7	; 247
    1ef0:	23 83       	std	Z+3, r18	; 0x03
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <puts_P>:
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
    1f06:	e0 91 1f 05 	lds	r30, 0x051F
    1f0a:	f0 91 20 05 	lds	r31, 0x0520
    1f0e:	83 81       	ldd	r24, Z+3	; 0x03
    1f10:	81 ff       	sbrs	r24, 1
    1f12:	1c c0       	rjmp	.+56     	; 0x1f4c <puts_P+0x50>
    1f14:	00 e0       	ldi	r16, 0x00	; 0
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	fe 01       	movw	r30, r28
    1f1a:	84 91       	lpm	r24, Z
    1f1c:	60 91 1f 05 	lds	r22, 0x051F
    1f20:	70 91 20 05 	lds	r23, 0x0520
    1f24:	db 01       	movw	r26, r22
    1f26:	18 96       	adiw	r26, 0x08	; 8
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	19 97       	sbiw	r26, 0x09	; 9
    1f2e:	88 23       	and	r24, r24
    1f30:	39 f0       	breq	.+14     	; 0x1f40 <puts_P+0x44>
    1f32:	09 95       	icall
    1f34:	89 2b       	or	r24, r25
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <puts_P+0x40>
    1f38:	0f ef       	ldi	r16, 0xFF	; 255
    1f3a:	1f ef       	ldi	r17, 0xFF	; 255
    1f3c:	21 96       	adiw	r28, 0x01	; 1
    1f3e:	ec cf       	rjmp	.-40     	; 0x1f18 <puts_P+0x1c>
    1f40:	8a e0       	ldi	r24, 0x0A	; 10
    1f42:	09 95       	icall
    1f44:	89 2b       	or	r24, r25
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <puts_P+0x50>
    1f48:	c8 01       	movw	r24, r16
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <puts_P+0x54>
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <vfprintf>:
    1f5a:	2f 92       	push	r2
    1f5c:	3f 92       	push	r3
    1f5e:	4f 92       	push	r4
    1f60:	5f 92       	push	r5
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	2c 97       	sbiw	r28, 0x0c	; 12
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	7c 01       	movw	r14, r24
    1f90:	6b 01       	movw	r12, r22
    1f92:	8a 01       	movw	r16, r20
    1f94:	fc 01       	movw	r30, r24
    1f96:	17 82       	std	Z+7, r1	; 0x07
    1f98:	16 82       	std	Z+6, r1	; 0x06
    1f9a:	83 81       	ldd	r24, Z+3	; 0x03
    1f9c:	81 ff       	sbrs	r24, 1
    1f9e:	b0 c1       	rjmp	.+864    	; 0x2300 <__stack+0x201>
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	4c 01       	movw	r8, r24
    1fa6:	f7 01       	movw	r30, r14
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	f6 01       	movw	r30, r12
    1fac:	93 fd       	sbrc	r25, 3
    1fae:	85 91       	lpm	r24, Z+
    1fb0:	93 ff       	sbrs	r25, 3
    1fb2:	81 91       	ld	r24, Z+
    1fb4:	6f 01       	movw	r12, r30
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <vfprintf+0x62>
    1fba:	9e c1       	rjmp	.+828    	; 0x22f8 <__stack+0x1f9>
    1fbc:	85 32       	cpi	r24, 0x25	; 37
    1fbe:	39 f4       	brne	.+14     	; 0x1fce <vfprintf+0x74>
    1fc0:	93 fd       	sbrc	r25, 3
    1fc2:	85 91       	lpm	r24, Z+
    1fc4:	93 ff       	sbrs	r25, 3
    1fc6:	81 91       	ld	r24, Z+
    1fc8:	6f 01       	movw	r12, r30
    1fca:	85 32       	cpi	r24, 0x25	; 37
    1fcc:	21 f4       	brne	.+8      	; 0x1fd6 <vfprintf+0x7c>
    1fce:	b7 01       	movw	r22, r14
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	c7 d1       	rcall	.+910    	; 0x2362 <fputc>
    1fd4:	e8 cf       	rjmp	.-48     	; 0x1fa6 <vfprintf+0x4c>
    1fd6:	51 2c       	mov	r5, r1
    1fd8:	31 2c       	mov	r3, r1
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	20 32       	cpi	r18, 0x20	; 32
    1fde:	a0 f4       	brcc	.+40     	; 0x2008 <vfprintf+0xae>
    1fe0:	8b 32       	cpi	r24, 0x2B	; 43
    1fe2:	69 f0       	breq	.+26     	; 0x1ffe <vfprintf+0xa4>
    1fe4:	30 f4       	brcc	.+12     	; 0x1ff2 <vfprintf+0x98>
    1fe6:	80 32       	cpi	r24, 0x20	; 32
    1fe8:	59 f0       	breq	.+22     	; 0x2000 <vfprintf+0xa6>
    1fea:	83 32       	cpi	r24, 0x23	; 35
    1fec:	69 f4       	brne	.+26     	; 0x2008 <vfprintf+0xae>
    1fee:	20 61       	ori	r18, 0x10	; 16
    1ff0:	2c c0       	rjmp	.+88     	; 0x204a <vfprintf+0xf0>
    1ff2:	8d 32       	cpi	r24, 0x2D	; 45
    1ff4:	39 f0       	breq	.+14     	; 0x2004 <vfprintf+0xaa>
    1ff6:	80 33       	cpi	r24, 0x30	; 48
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <vfprintf+0xae>
    1ffa:	21 60       	ori	r18, 0x01	; 1
    1ffc:	26 c0       	rjmp	.+76     	; 0x204a <vfprintf+0xf0>
    1ffe:	22 60       	ori	r18, 0x02	; 2
    2000:	24 60       	ori	r18, 0x04	; 4
    2002:	23 c0       	rjmp	.+70     	; 0x204a <vfprintf+0xf0>
    2004:	28 60       	ori	r18, 0x08	; 8
    2006:	21 c0       	rjmp	.+66     	; 0x204a <vfprintf+0xf0>
    2008:	27 fd       	sbrc	r18, 7
    200a:	27 c0       	rjmp	.+78     	; 0x205a <vfprintf+0x100>
    200c:	30 ed       	ldi	r19, 0xD0	; 208
    200e:	38 0f       	add	r19, r24
    2010:	3a 30       	cpi	r19, 0x0A	; 10
    2012:	78 f4       	brcc	.+30     	; 0x2032 <vfprintf+0xd8>
    2014:	26 ff       	sbrs	r18, 6
    2016:	06 c0       	rjmp	.+12     	; 0x2024 <vfprintf+0xca>
    2018:	fa e0       	ldi	r31, 0x0A	; 10
    201a:	5f 9e       	mul	r5, r31
    201c:	30 0d       	add	r19, r0
    201e:	11 24       	eor	r1, r1
    2020:	53 2e       	mov	r5, r19
    2022:	13 c0       	rjmp	.+38     	; 0x204a <vfprintf+0xf0>
    2024:	8a e0       	ldi	r24, 0x0A	; 10
    2026:	38 9e       	mul	r3, r24
    2028:	30 0d       	add	r19, r0
    202a:	11 24       	eor	r1, r1
    202c:	33 2e       	mov	r3, r19
    202e:	20 62       	ori	r18, 0x20	; 32
    2030:	0c c0       	rjmp	.+24     	; 0x204a <vfprintf+0xf0>
    2032:	8e 32       	cpi	r24, 0x2E	; 46
    2034:	21 f4       	brne	.+8      	; 0x203e <vfprintf+0xe4>
    2036:	26 fd       	sbrc	r18, 6
    2038:	5f c1       	rjmp	.+702    	; 0x22f8 <__stack+0x1f9>
    203a:	20 64       	ori	r18, 0x40	; 64
    203c:	06 c0       	rjmp	.+12     	; 0x204a <vfprintf+0xf0>
    203e:	8c 36       	cpi	r24, 0x6C	; 108
    2040:	11 f4       	brne	.+4      	; 0x2046 <vfprintf+0xec>
    2042:	20 68       	ori	r18, 0x80	; 128
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfprintf+0xf0>
    2046:	88 36       	cpi	r24, 0x68	; 104
    2048:	41 f4       	brne	.+16     	; 0x205a <vfprintf+0x100>
    204a:	f6 01       	movw	r30, r12
    204c:	93 fd       	sbrc	r25, 3
    204e:	85 91       	lpm	r24, Z+
    2050:	93 ff       	sbrs	r25, 3
    2052:	81 91       	ld	r24, Z+
    2054:	6f 01       	movw	r12, r30
    2056:	81 11       	cpse	r24, r1
    2058:	c1 cf       	rjmp	.-126    	; 0x1fdc <vfprintf+0x82>
    205a:	98 2f       	mov	r25, r24
    205c:	9f 7d       	andi	r25, 0xDF	; 223
    205e:	95 54       	subi	r25, 0x45	; 69
    2060:	93 30       	cpi	r25, 0x03	; 3
    2062:	28 f4       	brcc	.+10     	; 0x206e <vfprintf+0x114>
    2064:	0c 5f       	subi	r16, 0xFC	; 252
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	ff e3       	ldi	r31, 0x3F	; 63
    206a:	f9 83       	std	Y+1, r31	; 0x01
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <vfprintf+0x12e>
    206e:	83 36       	cpi	r24, 0x63	; 99
    2070:	31 f0       	breq	.+12     	; 0x207e <vfprintf+0x124>
    2072:	83 37       	cpi	r24, 0x73	; 115
    2074:	71 f0       	breq	.+28     	; 0x2092 <vfprintf+0x138>
    2076:	83 35       	cpi	r24, 0x53	; 83
    2078:	09 f0       	breq	.+2      	; 0x207c <vfprintf+0x122>
    207a:	57 c0       	rjmp	.+174    	; 0x212a <__stack+0x2b>
    207c:	21 c0       	rjmp	.+66     	; 0x20c0 <vfprintf+0x166>
    207e:	f8 01       	movw	r30, r16
    2080:	80 81       	ld	r24, Z
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	0e 5f       	subi	r16, 0xFE	; 254
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	44 24       	eor	r4, r4
    208a:	43 94       	inc	r4
    208c:	51 2c       	mov	r5, r1
    208e:	54 01       	movw	r10, r8
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <vfprintf+0x160>
    2092:	38 01       	movw	r6, r16
    2094:	f2 e0       	ldi	r31, 0x02	; 2
    2096:	6f 0e       	add	r6, r31
    2098:	71 1c       	adc	r7, r1
    209a:	f8 01       	movw	r30, r16
    209c:	a0 80       	ld	r10, Z
    209e:	b1 80       	ldd	r11, Z+1	; 0x01
    20a0:	26 ff       	sbrs	r18, 6
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <vfprintf+0x150>
    20a4:	65 2d       	mov	r22, r5
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <vfprintf+0x154>
    20aa:	6f ef       	ldi	r22, 0xFF	; 255
    20ac:	7f ef       	ldi	r23, 0xFF	; 255
    20ae:	c5 01       	movw	r24, r10
    20b0:	2c 87       	std	Y+12, r18	; 0x0c
    20b2:	4c d1       	rcall	.+664    	; 0x234c <strnlen>
    20b4:	2c 01       	movw	r4, r24
    20b6:	83 01       	movw	r16, r6
    20b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ba:	2f 77       	andi	r18, 0x7F	; 127
    20bc:	22 2e       	mov	r2, r18
    20be:	16 c0       	rjmp	.+44     	; 0x20ec <vfprintf+0x192>
    20c0:	38 01       	movw	r6, r16
    20c2:	f2 e0       	ldi	r31, 0x02	; 2
    20c4:	6f 0e       	add	r6, r31
    20c6:	71 1c       	adc	r7, r1
    20c8:	f8 01       	movw	r30, r16
    20ca:	a0 80       	ld	r10, Z
    20cc:	b1 80       	ldd	r11, Z+1	; 0x01
    20ce:	26 ff       	sbrs	r18, 6
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <vfprintf+0x17e>
    20d2:	65 2d       	mov	r22, r5
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <vfprintf+0x182>
    20d8:	6f ef       	ldi	r22, 0xFF	; 255
    20da:	7f ef       	ldi	r23, 0xFF	; 255
    20dc:	c5 01       	movw	r24, r10
    20de:	2c 87       	std	Y+12, r18	; 0x0c
    20e0:	2a d1       	rcall	.+596    	; 0x2336 <strnlen_P>
    20e2:	2c 01       	movw	r4, r24
    20e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20e6:	20 68       	ori	r18, 0x80	; 128
    20e8:	22 2e       	mov	r2, r18
    20ea:	83 01       	movw	r16, r6
    20ec:	23 fc       	sbrc	r2, 3
    20ee:	19 c0       	rjmp	.+50     	; 0x2122 <__stack+0x23>
    20f0:	83 2d       	mov	r24, r3
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	48 16       	cp	r4, r24
    20f6:	59 06       	cpc	r5, r25
    20f8:	a0 f4       	brcc	.+40     	; 0x2122 <__stack+0x23>
    20fa:	b7 01       	movw	r22, r14
    20fc:	80 e2       	ldi	r24, 0x20	; 32
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	30 d1       	rcall	.+608    	; 0x2362 <fputc>
    2102:	3a 94       	dec	r3
    2104:	f5 cf       	rjmp	.-22     	; 0x20f0 <vfprintf+0x196>
    2106:	f5 01       	movw	r30, r10
    2108:	27 fc       	sbrc	r2, 7
    210a:	85 91       	lpm	r24, Z+
    210c:	27 fe       	sbrs	r2, 7
    210e:	81 91       	ld	r24, Z+
    2110:	5f 01       	movw	r10, r30
    2112:	b7 01       	movw	r22, r14
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	25 d1       	rcall	.+586    	; 0x2362 <fputc>
    2118:	31 10       	cpse	r3, r1
    211a:	3a 94       	dec	r3
    211c:	f1 e0       	ldi	r31, 0x01	; 1
    211e:	4f 1a       	sub	r4, r31
    2120:	51 08       	sbc	r5, r1
    2122:	41 14       	cp	r4, r1
    2124:	51 04       	cpc	r5, r1
    2126:	79 f7       	brne	.-34     	; 0x2106 <__stack+0x7>
    2128:	de c0       	rjmp	.+444    	; 0x22e6 <__stack+0x1e7>
    212a:	84 36       	cpi	r24, 0x64	; 100
    212c:	11 f0       	breq	.+4      	; 0x2132 <__stack+0x33>
    212e:	89 36       	cpi	r24, 0x69	; 105
    2130:	31 f5       	brne	.+76     	; 0x217e <__stack+0x7f>
    2132:	f8 01       	movw	r30, r16
    2134:	27 ff       	sbrs	r18, 7
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <__stack+0x47>
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	0c 5f       	subi	r16, 0xFC	; 252
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <__stack+0x57>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	88 27       	eor	r24, r24
    214c:	77 fd       	sbrc	r23, 7
    214e:	80 95       	com	r24
    2150:	98 2f       	mov	r25, r24
    2152:	0e 5f       	subi	r16, 0xFE	; 254
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	2f 76       	andi	r18, 0x6F	; 111
    2158:	b2 2e       	mov	r11, r18
    215a:	97 ff       	sbrs	r25, 7
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <__stack+0x71>
    215e:	90 95       	com	r25
    2160:	80 95       	com	r24
    2162:	70 95       	com	r23
    2164:	61 95       	neg	r22
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	8f 4f       	sbci	r24, 0xFF	; 255
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	20 68       	ori	r18, 0x80	; 128
    216e:	b2 2e       	mov	r11, r18
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	a4 01       	movw	r20, r8
    2176:	27 d1       	rcall	.+590    	; 0x23c6 <__ultoa_invert>
    2178:	a8 2e       	mov	r10, r24
    217a:	a8 18       	sub	r10, r8
    217c:	43 c0       	rjmp	.+134    	; 0x2204 <__stack+0x105>
    217e:	85 37       	cpi	r24, 0x75	; 117
    2180:	29 f4       	brne	.+10     	; 0x218c <__stack+0x8d>
    2182:	2f 7e       	andi	r18, 0xEF	; 239
    2184:	b2 2e       	mov	r11, r18
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	25 c0       	rjmp	.+74     	; 0x21d6 <__stack+0xd7>
    218c:	f2 2f       	mov	r31, r18
    218e:	f9 7f       	andi	r31, 0xF9	; 249
    2190:	bf 2e       	mov	r11, r31
    2192:	8f 36       	cpi	r24, 0x6F	; 111
    2194:	c1 f0       	breq	.+48     	; 0x21c6 <__stack+0xc7>
    2196:	18 f4       	brcc	.+6      	; 0x219e <__stack+0x9f>
    2198:	88 35       	cpi	r24, 0x58	; 88
    219a:	79 f0       	breq	.+30     	; 0x21ba <__stack+0xbb>
    219c:	ad c0       	rjmp	.+346    	; 0x22f8 <__stack+0x1f9>
    219e:	80 37       	cpi	r24, 0x70	; 112
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <__stack+0xa9>
    21a2:	88 37       	cpi	r24, 0x78	; 120
    21a4:	21 f0       	breq	.+8      	; 0x21ae <__stack+0xaf>
    21a6:	a8 c0       	rjmp	.+336    	; 0x22f8 <__stack+0x1f9>
    21a8:	2f 2f       	mov	r18, r31
    21aa:	20 61       	ori	r18, 0x10	; 16
    21ac:	b2 2e       	mov	r11, r18
    21ae:	b4 fe       	sbrs	r11, 4
    21b0:	0d c0       	rjmp	.+26     	; 0x21cc <__stack+0xcd>
    21b2:	8b 2d       	mov	r24, r11
    21b4:	84 60       	ori	r24, 0x04	; 4
    21b6:	b8 2e       	mov	r11, r24
    21b8:	09 c0       	rjmp	.+18     	; 0x21cc <__stack+0xcd>
    21ba:	24 ff       	sbrs	r18, 4
    21bc:	0a c0       	rjmp	.+20     	; 0x21d2 <__stack+0xd3>
    21be:	9f 2f       	mov	r25, r31
    21c0:	96 60       	ori	r25, 0x06	; 6
    21c2:	b9 2e       	mov	r11, r25
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <__stack+0xd3>
    21c6:	28 e0       	ldi	r18, 0x08	; 8
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <__stack+0xd7>
    21cc:	20 e1       	ldi	r18, 0x10	; 16
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <__stack+0xd7>
    21d2:	20 e1       	ldi	r18, 0x10	; 16
    21d4:	32 e0       	ldi	r19, 0x02	; 2
    21d6:	f8 01       	movw	r30, r16
    21d8:	b7 fe       	sbrs	r11, 7
    21da:	07 c0       	rjmp	.+14     	; 0x21ea <__stack+0xeb>
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	0c 5f       	subi	r16, 0xFC	; 252
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <__stack+0xf7>
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 5f       	subi	r16, 0xFE	; 254
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	a4 01       	movw	r20, r8
    21f8:	e6 d0       	rcall	.+460    	; 0x23c6 <__ultoa_invert>
    21fa:	a8 2e       	mov	r10, r24
    21fc:	a8 18       	sub	r10, r8
    21fe:	fb 2d       	mov	r31, r11
    2200:	ff 77       	andi	r31, 0x7F	; 127
    2202:	bf 2e       	mov	r11, r31
    2204:	b6 fe       	sbrs	r11, 6
    2206:	0b c0       	rjmp	.+22     	; 0x221e <__stack+0x11f>
    2208:	2b 2d       	mov	r18, r11
    220a:	2e 7f       	andi	r18, 0xFE	; 254
    220c:	a5 14       	cp	r10, r5
    220e:	50 f4       	brcc	.+20     	; 0x2224 <__stack+0x125>
    2210:	b4 fe       	sbrs	r11, 4
    2212:	0a c0       	rjmp	.+20     	; 0x2228 <__stack+0x129>
    2214:	b2 fc       	sbrc	r11, 2
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <__stack+0x129>
    2218:	2b 2d       	mov	r18, r11
    221a:	2e 7e       	andi	r18, 0xEE	; 238
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <__stack+0x129>
    221e:	7a 2c       	mov	r7, r10
    2220:	2b 2d       	mov	r18, r11
    2222:	03 c0       	rjmp	.+6      	; 0x222a <__stack+0x12b>
    2224:	7a 2c       	mov	r7, r10
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x12b>
    2228:	75 2c       	mov	r7, r5
    222a:	24 ff       	sbrs	r18, 4
    222c:	0d c0       	rjmp	.+26     	; 0x2248 <__stack+0x149>
    222e:	fe 01       	movw	r30, r28
    2230:	ea 0d       	add	r30, r10
    2232:	f1 1d       	adc	r31, r1
    2234:	80 81       	ld	r24, Z
    2236:	80 33       	cpi	r24, 0x30	; 48
    2238:	11 f4       	brne	.+4      	; 0x223e <__stack+0x13f>
    223a:	29 7e       	andi	r18, 0xE9	; 233
    223c:	09 c0       	rjmp	.+18     	; 0x2250 <__stack+0x151>
    223e:	22 ff       	sbrs	r18, 2
    2240:	06 c0       	rjmp	.+12     	; 0x224e <__stack+0x14f>
    2242:	73 94       	inc	r7
    2244:	73 94       	inc	r7
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__stack+0x151>
    2248:	82 2f       	mov	r24, r18
    224a:	86 78       	andi	r24, 0x86	; 134
    224c:	09 f0       	breq	.+2      	; 0x2250 <__stack+0x151>
    224e:	73 94       	inc	r7
    2250:	23 fd       	sbrc	r18, 3
    2252:	12 c0       	rjmp	.+36     	; 0x2278 <__stack+0x179>
    2254:	20 ff       	sbrs	r18, 0
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <__stack+0x165>
    2258:	5a 2c       	mov	r5, r10
    225a:	73 14       	cp	r7, r3
    225c:	18 f4       	brcc	.+6      	; 0x2264 <__stack+0x165>
    225e:	53 0c       	add	r5, r3
    2260:	57 18       	sub	r5, r7
    2262:	73 2c       	mov	r7, r3
    2264:	73 14       	cp	r7, r3
    2266:	60 f4       	brcc	.+24     	; 0x2280 <__stack+0x181>
    2268:	b7 01       	movw	r22, r14
    226a:	80 e2       	ldi	r24, 0x20	; 32
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	2c 87       	std	Y+12, r18	; 0x0c
    2270:	78 d0       	rcall	.+240    	; 0x2362 <fputc>
    2272:	73 94       	inc	r7
    2274:	2c 85       	ldd	r18, Y+12	; 0x0c
    2276:	f6 cf       	rjmp	.-20     	; 0x2264 <__stack+0x165>
    2278:	73 14       	cp	r7, r3
    227a:	10 f4       	brcc	.+4      	; 0x2280 <__stack+0x181>
    227c:	37 18       	sub	r3, r7
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <__stack+0x183>
    2280:	31 2c       	mov	r3, r1
    2282:	24 ff       	sbrs	r18, 4
    2284:	11 c0       	rjmp	.+34     	; 0x22a8 <__stack+0x1a9>
    2286:	b7 01       	movw	r22, r14
    2288:	80 e3       	ldi	r24, 0x30	; 48
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	2c 87       	std	Y+12, r18	; 0x0c
    228e:	69 d0       	rcall	.+210    	; 0x2362 <fputc>
    2290:	2c 85       	ldd	r18, Y+12	; 0x0c
    2292:	22 ff       	sbrs	r18, 2
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <__stack+0x1c3>
    2296:	21 ff       	sbrs	r18, 1
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <__stack+0x1a1>
    229a:	88 e5       	ldi	r24, 0x58	; 88
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <__stack+0x1a5>
    22a0:	88 e7       	ldi	r24, 0x78	; 120
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	b7 01       	movw	r22, r14
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <__stack+0x1c1>
    22a8:	82 2f       	mov	r24, r18
    22aa:	86 78       	andi	r24, 0x86	; 134
    22ac:	51 f0       	breq	.+20     	; 0x22c2 <__stack+0x1c3>
    22ae:	21 fd       	sbrc	r18, 1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <__stack+0x1b7>
    22b2:	80 e2       	ldi	r24, 0x20	; 32
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <__stack+0x1b9>
    22b6:	8b e2       	ldi	r24, 0x2B	; 43
    22b8:	27 fd       	sbrc	r18, 7
    22ba:	8d e2       	ldi	r24, 0x2D	; 45
    22bc:	b7 01       	movw	r22, r14
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	50 d0       	rcall	.+160    	; 0x2362 <fputc>
    22c2:	a5 14       	cp	r10, r5
    22c4:	30 f4       	brcc	.+12     	; 0x22d2 <__stack+0x1d3>
    22c6:	b7 01       	movw	r22, r14
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	4a d0       	rcall	.+148    	; 0x2362 <fputc>
    22ce:	5a 94       	dec	r5
    22d0:	f8 cf       	rjmp	.-16     	; 0x22c2 <__stack+0x1c3>
    22d2:	aa 94       	dec	r10
    22d4:	f4 01       	movw	r30, r8
    22d6:	ea 0d       	add	r30, r10
    22d8:	f1 1d       	adc	r31, r1
    22da:	80 81       	ld	r24, Z
    22dc:	b7 01       	movw	r22, r14
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	40 d0       	rcall	.+128    	; 0x2362 <fputc>
    22e2:	a1 10       	cpse	r10, r1
    22e4:	f6 cf       	rjmp	.-20     	; 0x22d2 <__stack+0x1d3>
    22e6:	33 20       	and	r3, r3
    22e8:	09 f4       	brne	.+2      	; 0x22ec <__stack+0x1ed>
    22ea:	5d ce       	rjmp	.-838    	; 0x1fa6 <vfprintf+0x4c>
    22ec:	b7 01       	movw	r22, r14
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	37 d0       	rcall	.+110    	; 0x2362 <fputc>
    22f4:	3a 94       	dec	r3
    22f6:	f7 cf       	rjmp	.-18     	; 0x22e6 <__stack+0x1e7>
    22f8:	f7 01       	movw	r30, r14
    22fa:	86 81       	ldd	r24, Z+6	; 0x06
    22fc:	97 81       	ldd	r25, Z+7	; 0x07
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <__stack+0x205>
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	9f ef       	ldi	r25, 0xFF	; 255
    2304:	2c 96       	adiw	r28, 0x0c	; 12
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	9f 90       	pop	r9
    2326:	8f 90       	pop	r8
    2328:	7f 90       	pop	r7
    232a:	6f 90       	pop	r6
    232c:	5f 90       	pop	r5
    232e:	4f 90       	pop	r4
    2330:	3f 90       	pop	r3
    2332:	2f 90       	pop	r2
    2334:	08 95       	ret

00002336 <strnlen_P>:
    2336:	fc 01       	movw	r30, r24
    2338:	05 90       	lpm	r0, Z+
    233a:	61 50       	subi	r22, 0x01	; 1
    233c:	70 40       	sbci	r23, 0x00	; 0
    233e:	01 10       	cpse	r0, r1
    2340:	d8 f7       	brcc	.-10     	; 0x2338 <strnlen_P+0x2>
    2342:	80 95       	com	r24
    2344:	90 95       	com	r25
    2346:	8e 0f       	add	r24, r30
    2348:	9f 1f       	adc	r25, r31
    234a:	08 95       	ret

0000234c <strnlen>:
    234c:	fc 01       	movw	r30, r24
    234e:	61 50       	subi	r22, 0x01	; 1
    2350:	70 40       	sbci	r23, 0x00	; 0
    2352:	01 90       	ld	r0, Z+
    2354:	01 10       	cpse	r0, r1
    2356:	d8 f7       	brcc	.-10     	; 0x234e <strnlen+0x2>
    2358:	80 95       	com	r24
    235a:	90 95       	com	r25
    235c:	8e 0f       	add	r24, r30
    235e:	9f 1f       	adc	r25, r31
    2360:	08 95       	ret

00002362 <fputc>:
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	18 2f       	mov	r17, r24
    236c:	09 2f       	mov	r16, r25
    236e:	eb 01       	movw	r28, r22
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	81 fd       	sbrc	r24, 1
    2374:	03 c0       	rjmp	.+6      	; 0x237c <fputc+0x1a>
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	9f ef       	ldi	r25, 0xFF	; 255
    237a:	20 c0       	rjmp	.+64     	; 0x23bc <fputc+0x5a>
    237c:	82 ff       	sbrs	r24, 2
    237e:	10 c0       	rjmp	.+32     	; 0x23a0 <fputc+0x3e>
    2380:	4e 81       	ldd	r20, Y+6	; 0x06
    2382:	5f 81       	ldd	r21, Y+7	; 0x07
    2384:	2c 81       	ldd	r18, Y+4	; 0x04
    2386:	3d 81       	ldd	r19, Y+5	; 0x05
    2388:	42 17       	cp	r20, r18
    238a:	53 07       	cpc	r21, r19
    238c:	7c f4       	brge	.+30     	; 0x23ac <fputc+0x4a>
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	9f 01       	movw	r18, r30
    2394:	2f 5f       	subi	r18, 0xFF	; 255
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	39 83       	std	Y+1, r19	; 0x01
    239a:	28 83       	st	Y, r18
    239c:	10 83       	st	Z, r17
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <fputc+0x4a>
    23a0:	e8 85       	ldd	r30, Y+8	; 0x08
    23a2:	f9 85       	ldd	r31, Y+9	; 0x09
    23a4:	81 2f       	mov	r24, r17
    23a6:	09 95       	icall
    23a8:	89 2b       	or	r24, r25
    23aa:	29 f7       	brne	.-54     	; 0x2376 <fputc+0x14>
    23ac:	2e 81       	ldd	r18, Y+6	; 0x06
    23ae:	3f 81       	ldd	r19, Y+7	; 0x07
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	3f 83       	std	Y+7, r19	; 0x07
    23b6:	2e 83       	std	Y+6, r18	; 0x06
    23b8:	81 2f       	mov	r24, r17
    23ba:	90 2f       	mov	r25, r16
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <__ultoa_invert>:
    23c6:	fa 01       	movw	r30, r20
    23c8:	aa 27       	eor	r26, r26
    23ca:	28 30       	cpi	r18, 0x08	; 8
    23cc:	51 f1       	breq	.+84     	; 0x2422 <__ultoa_invert+0x5c>
    23ce:	20 31       	cpi	r18, 0x10	; 16
    23d0:	81 f1       	breq	.+96     	; 0x2432 <__ultoa_invert+0x6c>
    23d2:	e8 94       	clt
    23d4:	6f 93       	push	r22
    23d6:	6e 7f       	andi	r22, 0xFE	; 254
    23d8:	6e 5f       	subi	r22, 0xFE	; 254
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	af 4f       	sbci	r26, 0xFF	; 255
    23e2:	b1 e0       	ldi	r27, 0x01	; 1
    23e4:	3e d0       	rcall	.+124    	; 0x2462 <__ultoa_invert+0x9c>
    23e6:	b4 e0       	ldi	r27, 0x04	; 4
    23e8:	3c d0       	rcall	.+120    	; 0x2462 <__ultoa_invert+0x9c>
    23ea:	67 0f       	add	r22, r23
    23ec:	78 1f       	adc	r23, r24
    23ee:	89 1f       	adc	r24, r25
    23f0:	9a 1f       	adc	r25, r26
    23f2:	a1 1d       	adc	r26, r1
    23f4:	68 0f       	add	r22, r24
    23f6:	79 1f       	adc	r23, r25
    23f8:	8a 1f       	adc	r24, r26
    23fa:	91 1d       	adc	r25, r1
    23fc:	a1 1d       	adc	r26, r1
    23fe:	6a 0f       	add	r22, r26
    2400:	71 1d       	adc	r23, r1
    2402:	81 1d       	adc	r24, r1
    2404:	91 1d       	adc	r25, r1
    2406:	a1 1d       	adc	r26, r1
    2408:	20 d0       	rcall	.+64     	; 0x244a <__ultoa_invert+0x84>
    240a:	09 f4       	brne	.+2      	; 0x240e <__ultoa_invert+0x48>
    240c:	68 94       	set
    240e:	3f 91       	pop	r19
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	26 9f       	mul	r18, r22
    2414:	11 24       	eor	r1, r1
    2416:	30 19       	sub	r19, r0
    2418:	30 5d       	subi	r19, 0xD0	; 208
    241a:	31 93       	st	Z+, r19
    241c:	de f6       	brtc	.-74     	; 0x23d4 <__ultoa_invert+0xe>
    241e:	cf 01       	movw	r24, r30
    2420:	08 95       	ret
    2422:	46 2f       	mov	r20, r22
    2424:	47 70       	andi	r20, 0x07	; 7
    2426:	40 5d       	subi	r20, 0xD0	; 208
    2428:	41 93       	st	Z+, r20
    242a:	b3 e0       	ldi	r27, 0x03	; 3
    242c:	0f d0       	rcall	.+30     	; 0x244c <__ultoa_invert+0x86>
    242e:	c9 f7       	brne	.-14     	; 0x2422 <__ultoa_invert+0x5c>
    2430:	f6 cf       	rjmp	.-20     	; 0x241e <__ultoa_invert+0x58>
    2432:	46 2f       	mov	r20, r22
    2434:	4f 70       	andi	r20, 0x0F	; 15
    2436:	40 5d       	subi	r20, 0xD0	; 208
    2438:	4a 33       	cpi	r20, 0x3A	; 58
    243a:	18 f0       	brcs	.+6      	; 0x2442 <__ultoa_invert+0x7c>
    243c:	49 5d       	subi	r20, 0xD9	; 217
    243e:	31 fd       	sbrc	r19, 1
    2440:	40 52       	subi	r20, 0x20	; 32
    2442:	41 93       	st	Z+, r20
    2444:	02 d0       	rcall	.+4      	; 0x244a <__ultoa_invert+0x84>
    2446:	a9 f7       	brne	.-22     	; 0x2432 <__ultoa_invert+0x6c>
    2448:	ea cf       	rjmp	.-44     	; 0x241e <__ultoa_invert+0x58>
    244a:	b4 e0       	ldi	r27, 0x04	; 4
    244c:	a6 95       	lsr	r26
    244e:	97 95       	ror	r25
    2450:	87 95       	ror	r24
    2452:	77 95       	ror	r23
    2454:	67 95       	ror	r22
    2456:	ba 95       	dec	r27
    2458:	c9 f7       	brne	.-14     	; 0x244c <__ultoa_invert+0x86>
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	61 05       	cpc	r22, r1
    245e:	71 05       	cpc	r23, r1
    2460:	08 95       	ret
    2462:	9b 01       	movw	r18, r22
    2464:	ac 01       	movw	r20, r24
    2466:	0a 2e       	mov	r0, r26
    2468:	06 94       	lsr	r0
    246a:	57 95       	ror	r21
    246c:	47 95       	ror	r20
    246e:	37 95       	ror	r19
    2470:	27 95       	ror	r18
    2472:	ba 95       	dec	r27
    2474:	c9 f7       	brne	.-14     	; 0x2468 <__ultoa_invert+0xa2>
    2476:	62 0f       	add	r22, r18
    2478:	73 1f       	adc	r23, r19
    247a:	84 1f       	adc	r24, r20
    247c:	95 1f       	adc	r25, r21
    247e:	a0 1d       	adc	r26, r0
    2480:	08 95       	ret

00002482 <_exit>:
    2482:	f8 94       	cli

00002484 <__stop_program>:
    2484:	ff cf       	rjmp	.-2      	; 0x2484 <__stop_program>


VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001938  000019cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800120  00800120  000019ec  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b2  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000052be  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b8  00000000  00000000  000052cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000059ec  00000000  00000000  00005687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aaa  00000000  00000000  0000b073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002699  00000000  00000000  0000cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a24  00000000  00000000  0000f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027e1  00000000  00000000  0000fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003dd4  00000000  00000000  000123bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  00016191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
       2:	00 00       	nop
       4:	63 c1       	rjmp	.+710    	; 0x2cc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c1       	rjmp	.+702    	; 0x2cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c1       	rjmp	.+694    	; 0x2cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c1       	rjmp	.+690    	; 0x2cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c1       	rjmp	.+686    	; 0x2cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c1       	rjmp	.+678    	; 0x2cc <__bad_interrupt>
      26:	00 00       	nop
      28:	d4 c6       	rjmp	.+3496   	; 0xdd2 <__vector_10>
      2a:	00 00       	nop
      2c:	4f c1       	rjmp	.+670    	; 0x2cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c1       	rjmp	.+666    	; 0x2cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c1       	rjmp	.+662    	; 0x2cc <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	49 c1       	rjmp	.+658    	; 0x2cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c1       	rjmp	.+646    	; 0x2cc <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	41 c1       	rjmp	.+642    	; 0x2cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c1       	rjmp	.+638    	; 0x2cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c1       	rjmp	.+634    	; 0x2cc <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	3b c1       	rjmp	.+630    	; 0x2cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c1       	rjmp	.+626    	; 0x2cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c1       	rjmp	.+622    	; 0x2cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	33 c1       	rjmp	.+614    	; 0x2cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c1       	rjmp	.+610    	; 0x2cc <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	2f c1       	rjmp	.+606    	; 0x2cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c1       	rjmp	.+602    	; 0x2cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c1       	rjmp	.+598    	; 0x2cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c1       	rjmp	.+594    	; 0x2cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c1       	rjmp	.+590    	; 0x2cc <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	25 c1       	rjmp	.+586    	; 0x2cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c1       	rjmp	.+582    	; 0x2cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c1       	rjmp	.+578    	; 0x2cc <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	1f c1       	rjmp	.+574    	; 0x2cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c1       	rjmp	.+570    	; 0x2cc <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	1b c1       	rjmp	.+566    	; 0x2cc <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4568>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4561>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4556>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4554>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     136:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
				ReportSize     -= 4;
     146:	6f 72 20 28 53 65 74 20 4c 69 6e 65 20 45 6e 63     or (Set Line Enc
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     156:	6f 64 69 6e 67 29 2e 0d 0a 20 2d 2d 20 45 72 72     oding)... -- Err
				ReportSize     -= 2;
				ReportData     += 2;
     166:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     176:	37 6d 00                                            7m.

00000179 <__c.4550>:
     179:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     189:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     199:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b9:	37 6d 00                                            7m.

000001bc <__c.4548>:
     1bc:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1cc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001d6 <__c.4546>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e6:	69 63 65 2e 0d 0a 00                                ice....

000001ed <__c.4544>:
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
     1ed:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1fd:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     20d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000217 <__c.4541>:
     217:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     227:	61 74 61 2e 0d 0a 00                                ata....

0000022e <__c.4536>:
     22e:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23e:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     24e:	00                                                  .

0000024f <__c.4531>:
     24f:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25f:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000026c <__c.4522>:
     26c:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     27c:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     28c:	37 6d 00 00                                         7m..

00000290 <__ctors_end>:
				break;
     290:	11 24       	eor	r1, r1

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
				break;
     2a0:	b1 e0       	ldi	r27, 0x01	; 1

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	e8 e3       	ldi	r30, 0x38	; 56
     2a4:	f9 e1       	ldi	r31, 0x19	; 25
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
				break;
     2ac:	07 90       	elpm	r0, Z+

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	0d 92       	st	X+, r0
     2b0:	a0 32       	cpi	r26, 0x20	; 32
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	a0 e2       	ldi	r26, 0x20	; 32
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
				break;
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	a2 34       	cpi	r26, 0x42	; 66
     2c2:	b1 07       	cpc	r27, r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	54 d1       	rcall	.+680    	; 0x570 <main>
     2c8:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <_exit>

000002cc <__bad_interrupt>:
				break;
     2cc:	99 ce       	rjmp	.-718    	; 0x0 <__vectors>

000002ce <LEDs_SetAllLEDs>:
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	9b b1       	in	r25, 0x0b	; 11
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 2b       	or	r25, r24
				break;
     2d4:	9b b9       	out	0x0b, r25	; 11

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	08 95       	ret

000002d8 <SetupHardware>:
     2d8:	84 b7       	in	r24, 0x34	; 52
     2da:	87 7f       	andi	r24, 0xF7	; 247

				if (ParserData->UsingReportIDs)
     2dc:	84 bf       	out	0x34, r24	; 52
     2de:	88 e1       	ldi	r24, 0x18	; 24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	80 93 60 00 	sts	0x0060, r24
     2e8:	10 92 60 00 	sts	0x0060, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	80 93 61 00 	sts	0x0061, r24
     2fa:	90 93 61 00 	sts	0x0061, r25
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	83 e3       	ldi	r24, 0x33	; 51
     302:	90 e0       	ldi	r25, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	90 93 cd 00 	sts	0x00CD, r25
     308:	80 93 cc 00 	sts	0x00CC, r24
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	80 93 ca 00 	sts	0x00CA, r24
     312:	10 92 c8 00 	sts	0x00C8, r1
     316:	88 e1       	ldi	r24, 0x18	; 24
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	80 93 c9 00 	sts	0x00C9, r24
     31c:	53 9a       	sbi	0x0a, 3	; 10
     31e:	5a 9a       	sbi	0x0b, 2	; 11
     320:	8a b1       	in	r24, 0x0a	; 10
     322:	80 6f       	ori	r24, 0xF0	; 240
     324:	8a b9       	out	0x0a, r24	; 10
     326:	8b b1       	in	r24, 0x0b	; 11
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	8b b9       	out	0x0b, r24	; 11
     32c:	37 d5       	rcall	.+2670   	; 0xd9c <USB_Init>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fc c7       	rjmp	.+4088   	; 0x132c <Serial_CreateStream>

00000334 <EVENT_USB_Host_DeviceAttached>:
     334:	8f e4       	ldi	r24, 0x4F	; 79
     336:	92 e0       	ldi	r25, 0x02	; 2
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     33c:	80 ea       	ldi	r24, 0xA0	; 160
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	c7 cf       	rjmp	.-114    	; 0x2ce <LEDs_SetAllLEDs>

00000340 <EVENT_USB_Host_DeviceUnattached>:
     340:	8e e2       	ldi	r24, 0x2E	; 46
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     348:	80 e1       	ldi	r24, 0x10	; 16
     34a:	c1 cf       	rjmp	.-126    	; 0x2ce <LEDs_SetAllLEDs>

0000034c <EVENT_USB_Host_DeviceEnumerationComplete>:
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	27 97       	sbiw	r28, 0x07	; 7
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	87 e1       	ldi	r24, 0x17	; 23
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     36a:	3f d1       	rcall	.+638    	; 0x5ea <ProcessConfigurationDescriptor>
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	18 2f       	mov	r17, r24
     36e:	88 23       	and	r24, r24
     370:	71 f0       	breq	.+28     	; 0x38e <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	19 f4       	brne	.+6      	; 0x37c <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     376:	8d ee       	ldi	r24, 0xED	; 237

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	02 c0       	rjmp	.+4      	; 0x380 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     37c:	86 ed       	ldi	r24, 0xD6	; 214
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     384:	1f 92       	push	r1
     386:	1f 93       	push	r17
				break;
     388:	8c eb       	ldi	r24, 0xBC	; 188

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	26 c0       	rjmp	.+76     	; 0x3da <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	7e d7       	rcall	.+3836   	; 0x128e <USB_Host_SetDeviceConfiguration>
     392:	88 23       	and	r24, r24
     394:	29 f0       	breq	.+10     	; 0x3a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	1f 92       	push	r1
     398:	8f 93       	push	r24
     39a:	89 e7       	ldi	r24, 0x79	; 121
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	1d c0       	rjmp	.+58     	; 0x3da <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     3a0:	87 e0       	ldi	r24, 0x07	; 7
     3a2:	e1 e0       	ldi	r30, 0x01	; 1
     3a4:	f1 e0       	ldi	r31, 0x01	; 1
     3a6:	de 01       	movw	r26, r28
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	8a 95       	dec	r24
				break;
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	88 e0       	ldi	r24, 0x08	; 8
     3b4:	e8 e0       	ldi	r30, 0x08	; 8
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	a5 e2       	ldi	r26, 0x25	; 37
     3ba:	b1 e0       	ldi	r27, 0x01	; 1
     3bc:	01 90       	ld	r0, Z+
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
     3c4:	10 92 a7 00 	sts	0x00A7, r1
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	65 d6       	rcall	.+3274   	; 0x1098 <USB_Host_SendControlRequest>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	88 23       	and	r24, r24
     3d0:	71 f0       	breq	.+28     	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
     3d2:	1f 92       	push	r1

					while (CurrCollectionPath->Parent != NULL)
     3d4:	1f 92       	push	r1
     3d6:	86 e3       	ldi	r24, 0x36	; 54
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	9f 93       	push	r25
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	8f 93       	push	r24
     3de:	f6 d7       	rcall	.+4076   	; 0x13cc <printf_P>
     3e0:	80 e9       	ldi	r24, 0x90	; 144
     3e2:	75 df       	rcall	.-278    	; 0x2ce <LEDs_SetAllLEDs>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
     3ee:	8d e1       	ldi	r24, 0x1D	; 29
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f6:	80 e6       	ldi	r24, 0x60	; 96
     3f8:	6a df       	rcall	.-300    	; 0x2ce <LEDs_SetAllLEDs>
     3fa:	27 96       	adiw	r28, 0x07	; 7
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	08 95       	ret

0000040e <EVENT_USB_Host_HostError>:
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	1f 92       	push	r1
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	58 d4       	rcall	.+2224   	; 0xccc <USB_Disable>
     41c:	1f 92       	push	r1
     41e:	89 81       	ldd	r24, Y+1	; 0x01

				if (UsageListSize)
     420:	8f 93       	push	r24
     422:	8e ee       	ldi	r24, 0xEE	; 238
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	d0 d7       	rcall	.+4000   	; 0x13cc <printf_P>
     42c:	80 e9       	ldi	r24, 0x90	; 144
     42e:	4f df       	rcall	.-354    	; 0x2ce <LEDs_SetAllLEDs>
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	ff cf       	rjmp	.-2      	; 0x438 <EVENT_USB_Host_HostError+0x2a>

0000043a <EVENT_USB_Host_DeviceEnumerationFailed>:
     43a:	90 91 2d 01 	lds	r25, 0x012D
     43e:	1f 92       	push	r1

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	9f 93       	push	r25
     442:	1f 92       	push	r1
     444:	6f 93       	push	r22
     446:	1f 92       	push	r1
     448:	8f 93       	push	r24
     44a:	88 e9       	ldi	r24, 0x98	; 152
					  UsageList[i - 1] = UsageList[i];
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	bc d7       	rcall	.+3960   	; 0x13cc <printf_P>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	8d b7       	in	r24, 0x3d	; 61
     456:	9e b7       	in	r25, 0x3e	; 62
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	08 96       	adiw	r24, 0x08	; 8
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	9e bf       	out	0x3e, r25	; 62
     460:	0f be       	out	0x3f, r0	; 63
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	8d bf       	out	0x3d, r24	; 61
     464:	80 e9       	ldi	r24, 0x90	; 144
     466:	33 cf       	rjmp	.-410    	; 0x2ce <LEDs_SetAllLEDs>

00000468 <CDCHost_Task>:
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	cd b6       	in	r12, 0x3d	; 61
     482:	de b6       	in	r13, 0x3e	; 62
     484:	80 91 2d 01 	lds	r24, 0x012D
     488:	8b 30       	cpi	r24, 0x0B	; 11
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	09 f0       	breq	.+2      	; 0x48e <CDCHost_Task+0x26>
     48c:	61 c0       	rjmp	.+194    	; 0x550 <CDCHost_Task+0xe8>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 a7 00 	sts	0x00A7, r24
     494:	80 91 a9 00 	lds	r24, 0x00A9
     498:	8f 7b       	andi	r24, 0xBF	; 191
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	80 93 a9 00 	sts	0x00A9, r24
     49e:	80 91 a6 00 	lds	r24, 0x00A6
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	3a c0       	rjmp	.+116    	; 0x51a <CDCHost_Task+0xb2>
     4a6:	80 91 a9 00 	lds	r24, 0x00A9
     4aa:	80 64       	ori	r24, 0x40	; 64
				break;
     4ac:	80 93 a9 00 	sts	0x00A9, r24
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b0:	80 91 a6 00 	lds	r24, 0x00A6
     4b4:	85 ff       	sbrs	r24, 5
     4b6:	2c c0       	rjmp	.+88     	; 0x510 <CDCHost_Task+0xa8>
     4b8:	ad b6       	in	r10, 0x3d	; 61
     4ba:	be b6       	in	r11, 0x3e	; 62
     4bc:	e0 90 f6 00 	lds	r14, 0x00F6
     4c0:	f0 90 f7 00 	lds	r15, 0x00F7
     4c4:	8d b7       	in	r24, 0x3d	; 61
     4c6:	9e b7       	in	r25, 0x3e	; 62
     4c8:	8e 19       	sub	r24, r14
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	9f 09       	sbc	r25, r15
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	9e bf       	out	0x3e, r25	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	8d bf       	out	0x3d, r24	; 61
     4d6:	0d b7       	in	r16, 0x3d	; 61
     4d8:	1e b7       	in	r17, 0x3e	; 62
     4da:	0f 5f       	subi	r16, 0xFF	; 255
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	b7 01       	movw	r22, r14
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	c8 01       	movw	r24, r16
     4e6:	fb d2       	rcall	.+1526   	; 0xade <Pipe_Read_Stream_LE>
     4e8:	e0 0e       	add	r14, r16
     4ea:	f1 1e       	adc	r15, r17
     4ec:	0e 15       	cp	r16, r14
     4ee:	1f 05       	cpc	r17, r15
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	51 f0       	breq	.+20     	; 0x506 <CDCHost_Task+0x9e>
     4f2:	f8 01       	movw	r30, r16
     4f4:	81 91       	ld	r24, Z+
     4f6:	8f 01       	movw	r16, r30
     4f8:	60 91 3e 01 	lds	r22, 0x013E
     4fc:	70 91 3f 01 	lds	r23, 0x013F
     500:	90 e0       	ldi	r25, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	32 d7       	rcall	.+3684   	; 0x1368 <fputc>
     504:	f3 cf       	rjmp	.-26     	; 0x4ec <CDCHost_Task+0x84>
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	be be       	out	0x3e, r11	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	ad be       	out	0x3d, r10	; 61
     510:	80 91 a6 00 	lds	r24, 0x00A6
     514:	8e 77       	andi	r24, 0x7E	; 126
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	80 93 a6 00 	sts	0x00A6, r24
     51a:	80 91 a9 00 	lds	r24, 0x00A9

					if (UsageListSize)
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	80 93 a9 00 	sts	0x00A9, r24
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	80 93 a7 00 	sts	0x00A7, r24
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52a:	80 91 a9 00 	lds	r24, 0x00A9
     52e:	8f 7b       	andi	r24, 0xBF	; 191
     530:	80 93 a9 00 	sts	0x00A9, r24
     534:	80 91 a6 00 	lds	r24, 0x00A6
     538:	80 ff       	sbrs	r24, 0
     53a:	05 c0       	rjmp	.+10     	; 0x546 <CDCHost_Task+0xde>
     53c:	80 91 a6 00 	lds	r24, 0x00A6

						for (uint8_t i = 1; i < UsageListSize; i++)
     540:	8e 77       	andi	r24, 0x7E	; 126
     542:	80 93 a6 00 	sts	0x00A6, r24
     546:	80 91 a9 00 	lds	r24, 0x00A9
						  UsageList[i - 1] = UsageList[i];
     54a:	80 64       	ori	r24, 0x40	; 64
     54c:	80 93 a9 00 	sts	0x00A9, r24
     550:	0f b6       	in	r0, 0x3f	; 63

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	f8 94       	cli
     554:	de be       	out	0x3e, r13	; 62
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd be       	out	0x3d, r12	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	bf 90       	pop	r11
     56c:	af 90       	pop	r10
     56e:	08 95       	ret

00000570 <main>:
     570:	b3 de       	rcall	.-666    	; 0x2d8 <SetupHardware>
     572:	8c e6       	ldi	r24, 0x6C	; 108
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	4d d7       	rcall	.+3738   	; 0x1412 <puts_P>
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	a9 de       	rcall	.-686    	; 0x2ce <LEDs_SetAllLEDs>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	78 94       	sei
     57e:	74 df       	rcall	.-280    	; 0x468 <CDCHost_Task>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	ad d6       	rcall	.+3418   	; 0x12dc <USB_USBTask>
     582:	fd cf       	rjmp	.-6      	; 0x57e <main+0xe>

00000584 <DComp_NextCDCControlInterface>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	fc 01       	movw	r30, r24
     586:	81 81       	ldd	r24, Z+1	; 0x01
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	59 f4       	brne	.+22     	; 0x5a2 <DComp_NextCDCControlInterface+0x1e>
     58c:	85 81       	ldd	r24, Z+5	; 0x05
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	41 f4       	brne	.+16     	; 0x5a2 <DComp_NextCDCControlInterface+0x1e>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	86 81       	ldd	r24, Z+6	; 0x06
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	29 f4       	brne	.+10     	; 0x5a2 <DComp_NextCDCControlInterface+0x1e>
     598:	87 81       	ldd	r24, Z+7	; 0x07
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	11 f4       	brne	.+4      	; 0x5a2 <DComp_NextCDCControlInterface+0x1e>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	08 95       	ret
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	08 95       	ret

000005a6 <DComp_NextCDCDataInterface>:
     5a6:	fc 01       	movw	r30, r24
     5a8:	81 81       	ldd	r24, Z+1	; 0x01
     5aa:	84 30       	cpi	r24, 0x04	; 4

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	51 f4       	brne	.+20     	; 0x5c2 <DComp_NextCDCDataInterface+0x1c>
     5ae:	85 81       	ldd	r24, Z+5	; 0x05
     5b0:	8a 30       	cpi	r24, 0x0A	; 10
     5b2:	39 f4       	brne	.+14     	; 0x5c2 <DComp_NextCDCDataInterface+0x1c>
     5b4:	86 81       	ldd	r24, Z+6	; 0x06
     5b6:	81 11       	cpse	r24, r1
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <DComp_NextCDCDataInterface+0x1c>
     5ba:	87 81       	ldd	r24, Z+7	; 0x07

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	81 11       	cpse	r24, r1
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <DComp_NextCDCDataInterface+0x1c>
     5c0:	08 95       	ret
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	08 95       	ret

000005c6 <DComp_NextCDCDataInterfaceEndpoint>:
     5c6:	fc 01       	movw	r30, r24
     5c8:	21 81       	ldd	r18, Z+1	; 0x01
     5ca:	25 30       	cpi	r18, 0x05	; 5
     5cc:	41 f4       	brne	.+16     	; 0x5de <DComp_NextCDCDataInterfaceEndpoint+0x18>
     5ce:	83 81       	ldd	r24, Z+3	; 0x03
     5d0:	83 70       	andi	r24, 0x03	; 3
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 97       	sbiw	r24, 0x02	; 2
     5d6:	02 97       	sbiw	r24, 0x02	; 2
     5d8:	30 f0       	brcs	.+12     	; 0x5e6 <DComp_NextCDCDataInterfaceEndpoint+0x20>
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	08 95       	ret
     5de:	24 30       	cpi	r18, 0x04	; 4
     5e0:	e1 f7       	brne	.-8      	; 0x5da <DComp_NextCDCDataInterfaceEndpoint+0x14>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	08 95       	ret
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret

000005ea <ProcessConfigurationDescriptor>:
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
					  return HID_PARSE_InsufficientReportItems;
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	c4 50       	subi	r28, 0x04	; 4
     604:	d2 40       	sbci	r29, 0x02	; 2
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	ae 01       	movw	r20, r28
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	cd 5f       	subi	r28, 0xFD	; 253
     618:	dd 4f       	sbci	r29, 0xFD	; 253
     61a:	59 83       	std	Y+1, r21	; 0x01
     61c:	48 83       	st	Y, r20
     61e:	c3 50       	subi	r28, 0x03	; 3
     620:	d2 40       	sbci	r29, 0x02	; 2
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	32 e0       	ldi	r19, 0x02	; 2
     626:	be 01       	movw	r22, r28
     628:	6f 5f       	subi	r22, 0xFF	; 255
     62a:	7d 4f       	sbci	r23, 0xFD	; 253
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 d4       	rcall	.+2304   	; 0xf30 <USB_Host_GetDeviceConfigDescriptor>
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	09 f4       	brne	.+2      	; 0x636 <ProcessConfigurationDescriptor+0x4c>
     634:	81 c0       	rjmp	.+258    	; 0x738 <ProcessConfigurationDescriptor+0x14e>
     636:	86 30       	cpi	r24, 0x06	; 6
     638:	21 f0       	breq	.+8      	; 0x642 <ProcessConfigurationDescriptor+0x58>
     63a:	88 23       	and	r24, r24
     63c:	21 f0       	breq	.+8      	; 0x646 <ProcessConfigurationDescriptor+0x5c>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	7c c0       	rjmp	.+248    	; 0x73a <ProcessConfigurationDescriptor+0x150>
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	7a c0       	rjmp	.+244    	; 0x73a <ProcessConfigurationDescriptor+0x150>
     646:	e1 2c       	mov	r14, r1
     648:	f1 2c       	mov	r15, r1
     64a:	c1 2c       	mov	r12, r1
     64c:	d1 2c       	mov	r13, r1
     64e:	a1 2c       	mov	r10, r1
     650:	b1 2c       	mov	r11, r1
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	01 15       	cp	r16, r1
     658:	11 05       	cpc	r17, r1
     65a:	21 f4       	brne	.+8      	; 0x664 <ProcessConfigurationDescriptor+0x7a>
     65c:	e1 14       	cp	r14, r1
     65e:	f1 04       	cpc	r15, r1
     660:	69 f4       	brne	.+26     	; 0x67c <ProcessConfigurationDescriptor+0x92>
     662:	1e c0       	rjmp	.+60     	; 0x6a0 <ProcessConfigurationDescriptor+0xb6>
     664:	43 ee       	ldi	r20, 0xE3	; 227
     666:	52 e0       	ldi	r21, 0x02	; 2
     668:	be 01       	movw	r22, r28
     66a:	6d 5f       	subi	r22, 0xFD	; 253
     66c:	7d 4f       	sbci	r23, 0xFD	; 253
     66e:	ce 01       	movw	r24, r28
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	9d 4f       	sbci	r25, 0xFD	; 253
     674:	b7 d4       	rcall	.+2414   	; 0xfe4 <USB_GetNextDescriptorComp>
     676:	81 11       	cpse	r24, r1
     678:	f1 cf       	rjmp	.-30     	; 0x65c <ProcessConfigurationDescriptor+0x72>
     67a:	24 c0       	rjmp	.+72     	; 0x6c4 <ProcessConfigurationDescriptor+0xda>
     67c:	43 ed       	ldi	r20, 0xD3	; 211
     67e:	52 e0       	ldi	r21, 0x02	; 2
     680:	be 01       	movw	r22, r28
     682:	6d 5f       	subi	r22, 0xFD	; 253
     684:	7d 4f       	sbci	r23, 0xFD	; 253
     686:	ce 01       	movw	r24, r28
					  ParserData->TotalReportItems++;
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	9d 4f       	sbci	r25, 0xFD	; 253
     68c:	ab d4       	rcall	.+2390   	; 0xfe4 <USB_GetNextDescriptorComp>
     68e:	81 11       	cpse	r24, r1
     690:	05 c0       	rjmp	.+10     	; 0x69c <ProcessConfigurationDescriptor+0xb2>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	a1 2c       	mov	r10, r1
     694:	b1 2c       	mov	r11, r1
     696:	c1 2c       	mov	r12, r1
     698:	d1 2c       	mov	r13, r1
     69a:	dd cf       	rjmp	.-70     	; 0x656 <ProcessConfigurationDescriptor+0x6c>
     69c:	84 e0       	ldi	r24, 0x04	; 4
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	4d c0       	rjmp	.+154    	; 0x73a <ProcessConfigurationDescriptor+0x150>
     6a0:	42 ec       	ldi	r20, 0xC2	; 194
     6a2:	52 e0       	ldi	r21, 0x02	; 2
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	be 01       	movw	r22, r28
     6a6:	6d 5f       	subi	r22, 0xFD	; 253
     6a8:	7d 4f       	sbci	r23, 0xFD	; 253
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	ce 01       	movw	r24, r28
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	9d 4f       	sbci	r25, 0xFD	; 253
     6b0:	99 d4       	rcall	.+2354   	; 0xfe4 <USB_GetNextDescriptorComp>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	81 11       	cpse	r24, r1
     6b4:	f3 cf       	rjmp	.-26     	; 0x69c <ProcessConfigurationDescriptor+0xb2>
     6b6:	cd 5f       	subi	r28, 0xFD	; 253
     6b8:	dd 4f       	sbci	r29, 0xFD	; 253
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	08 81       	ld	r16, Y
     6bc:	19 81       	ldd	r17, Y+1	; 0x01

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	c3 50       	subi	r28, 0x03	; 3
     6c0:	d2 40       	sbci	r29, 0x02	; 2
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <ProcessConfigurationDescriptor+0xfe>
     6c4:	cd 5f       	subi	r28, 0xFD	; 253
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	dd 4f       	sbci	r29, 0xFD	; 253
     6c8:	e8 81       	ld	r30, Y
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	f9 81       	ldd	r31, Y+1	; 0x01
     6cc:	c3 50       	subi	r28, 0x03	; 3

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	d2 40       	sbci	r29, 0x02	; 2
     6d0:	82 81       	ldd	r24, Z+2	; 0x02
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	87 ff       	sbrs	r24, 7
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <ProcessConfigurationDescriptor+0xf8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	83 81       	ldd	r24, Z+3	; 0x03

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	83 70       	andi	r24, 0x03	; 3
     6da:	83 30       	cpi	r24, 0x03	; 3
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <ProcessConfigurationDescriptor+0xfc>
     6de:	7f 01       	movw	r14, r30
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <ProcessConfigurationDescriptor+0xfe>
     6e2:	6f 01       	movw	r12, r30
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <ProcessConfigurationDescriptor+0xfe>
     6e6:	5f 01       	movw	r10, r30
     6e8:	a1 14       	cp	r10, r1
     6ea:	b1 04       	cpc	r11, r1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <ProcessConfigurationDescriptor+0x106>
     6ee:	b3 cf       	rjmp	.-154    	; 0x656 <ProcessConfigurationDescriptor+0x6c>
     6f0:	c1 14       	cp	r12, r1
     6f2:	d1 04       	cpc	r13, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <ProcessConfigurationDescriptor+0x10e>
     6f6:	af cf       	rjmp	.-162    	; 0x656 <ProcessConfigurationDescriptor+0x6c>
     6f8:	e1 14       	cp	r14, r1
     6fa:	f1 04       	cpc	r15, r1
     6fc:	09 f4       	brne	.+2      	; 0x700 <ProcessConfigurationDescriptor+0x116>
     6fe:	ab cf       	rjmp	.-170    	; 0x656 <ProcessConfigurationDescriptor+0x6c>
     700:	f5 01       	movw	r30, r10
     702:	24 81       	ldd	r18, Z+4	; 0x04
     704:	35 81       	ldd	r19, Z+5	; 0x05
     706:	01 e0       	ldi	r16, 0x01	; 1
     708:	42 81       	ldd	r20, Z+2	; 0x02
     70a:	62 e0       	ldi	r22, 0x02	; 2
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the CDC data IN pipe */
	Pipe_ConfigurePipe(CDC_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     70c:	81 e8       	ldi	r24, 0x81	; 129
     70e:	34 d2       	rcall	.+1128   	; 0xb78 <Pipe_ConfigurePipe>
     710:	f6 01       	movw	r30, r12
     712:	24 81       	ldd	r18, Z+4	; 0x04
     714:	35 81       	ldd	r19, Z+5	; 0x05
     716:	42 81       	ldd	r20, Z+2	; 0x02
     718:	62 e0       	ldi	r22, 0x02	; 2

	/* Configure the CDC data OUT pipe */
	Pipe_ConfigurePipe(CDC_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	2d d2       	rcall	.+1114   	; 0xb78 <Pipe_ConfigurePipe>
     71e:	f7 01       	movw	r30, r14
     720:	24 81       	ldd	r18, Z+4	; 0x04
     722:	35 81       	ldd	r19, Z+5	; 0x05
     724:	42 81       	ldd	r20, Z+2	; 0x02
     726:	63 e0       	ldi	r22, 0x03	; 3
     728:	83 e8       	ldi	r24, 0x83	; 131

	/* Configure the CDC notification pipe */
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     72a:	26 d2       	rcall	.+1100   	; 0xb78 <Pipe_ConfigurePipe>
     72c:	f7 01       	movw	r30, r14
     72e:	86 81       	ldd	r24, Z+6	; 0x06
     730:	80 93 ad 00 	sts	0x00AD, r24
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	01 c0       	rjmp	.+2      	; 0x73a <ProcessConfigurationDescriptor+0x150>
     738:	82 e0       	ldi	r24, 0x02	; 2
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     73a:	cc 5f       	subi	r28, 0xFC	; 252
     73c:	dd 4f       	sbci	r29, 0xFD	; 253
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     746:	cd bf       	out	0x3d, r28	; 61
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	bf 90       	pop	r11
     75a:	af 90       	pop	r10
     75c:	08 95       	ret

0000075e <USB_Host_ResetDevice>:
     75e:	80 91 9e 00 	lds	r24, 0x009E
     762:	81 70       	andi	r24, 0x01	; 1
     764:	90 91 a0 00 	lds	r25, 0x00A0
     768:	9d 7f       	andi	r25, 0xFD	; 253
     76a:	90 93 a0 00 	sts	0x00A0, r25
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     76e:	90 91 9e 00 	lds	r25, 0x009E
     772:	92 60       	ori	r25, 0x02	; 2
     774:	90 93 9e 00 	sts	0x009E, r25
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     778:	90 91 9e 00 	lds	r25, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     77c:	91 fd       	sbrc	r25, 1
     77e:	fc cf       	rjmp	.-8      	; 0x778 <USB_Host_ResetDevice+0x1a>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     780:	90 91 9e 00 	lds	r25, 0x009E
     784:	91 60       	ori	r25, 0x01	; 1
     786:	90 93 9e 00 	sts	0x009E, r25
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     78a:	10 92 23 01 	sts	0x0123, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     78e:	90 91 a0 00 	lds	r25, 0x00A0
     792:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     794:	20 91 a0 00 	lds	r18, 0x00A0
     798:	2f 7d       	andi	r18, 0xDF	; 223
     79a:	20 93 a0 00 	sts	0x00A0, r18
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     79e:	20 91 9f 00 	lds	r18, 0x009F
     7a2:	2f 7d       	andi	r18, 0xDF	; 223
     7a4:	20 93 9f 00 	sts	0x009F, r18
     7a8:	2a e0       	ldi	r18, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7aa:	30 91 9f 00 	lds	r19, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7ae:	35 ff       	sbrs	r19, 5
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7b2:	20 91 9f 00 	lds	r18, 0x009F
     7b6:	2f 7d       	andi	r18, 0xDF	; 223
     7b8:	20 93 9f 00 	sts	0x009F, r18
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7bc:	20 91 9f 00 	lds	r18, 0x009F
     7c0:	2d 7f       	andi	r18, 0xFD	; 253
     7c2:	20 93 9f 00 	sts	0x009F, r18
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <USB_Host_ResetDevice+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c8:	ef ec       	ldi	r30, 0xCF	; 207
     7ca:	f7 e0       	ldi	r31, 0x07	; 7
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <USB_Host_ResetDevice+0x6e>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <USB_Host_ResetDevice+0x74>
     7d2:	00 00       	nop
     7d4:	21 50       	subi	r18, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7d6:	49 f7       	brne	.-46     	; 0x7aa <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     7d8:	99 23       	and	r25, r25
     7da:	29 f0       	breq	.+10     	; 0x7e6 <USB_Host_ResetDevice+0x88>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7dc:	90 91 a0 00 	lds	r25, 0x00A0
     7e0:	90 62       	ori	r25, 0x20	; 32
     7e2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     7e6:	81 11       	cpse	r24, r1
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <USB_Host_ResetDevice+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7ea:	80 91 9e 00 	lds	r24, 0x009E
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     7f4:	80 91 a0 00 	lds	r24, 0x00A0
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	80 93 a0 00 	sts	0x00A0, r24
     7fe:	08 95       	ret

00000800 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     800:	20 91 9e 00 	lds	r18, 0x009E
     804:	21 70       	andi	r18, 0x01	; 1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     806:	90 91 a0 00 	lds	r25, 0x00A0
     80a:	90 72       	andi	r25, 0x20	; 32
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     80c:	30 91 a0 00 	lds	r19, 0x00A0
     810:	3f 7d       	andi	r19, 0xDF	; 223
     812:	30 93 a0 00 	sts	0x00A0, r19
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     816:	30 91 9f 00 	lds	r19, 0x009F
     81a:	3f 7d       	andi	r19, 0xDF	; 223
     81c:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     820:	30 91 9e 00 	lds	r19, 0x009E
     824:	31 60       	ori	r19, 0x01	; 1
     826:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     82a:	88 23       	and	r24, r24
     82c:	39 f1       	breq	.+78     	; 0x87c <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     82e:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     832:	35 ff       	sbrs	r19, 5
     834:	06 c0       	rjmp	.+12     	; 0x842 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     836:	30 91 9f 00 	lds	r19, 0x009F
     83a:	3f 7d       	andi	r19, 0xDF	; 223
     83c:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     840:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     842:	30 91 2d 01 	lds	r19, 0x012D
     846:	31 30       	cpi	r19, 0x01	; 1
     848:	c1 f0       	breq	.+48     	; 0x87a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     84a:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     84e:	34 ff       	sbrs	r19, 4
     850:	09 c0       	rjmp	.+18     	; 0x864 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     852:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     856:	80 91 a6 00 	lds	r24, 0x00A6
     85a:	8f 7e       	andi	r24, 0xEF	; 239
     85c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     860:	82 e0       	ldi	r24, 0x02	; 2

			break;
     862:	0c c0       	rjmp	.+24     	; 0x87c <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     864:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     868:	31 ff       	sbrs	r19, 1
     86a:	df cf       	rjmp	.-66     	; 0x82a <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     86c:	80 91 a6 00 	lds	r24, 0x00A6
     870:	8d 7f       	andi	r24, 0xFD	; 253
     872:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     876:	83 e0       	ldi	r24, 0x03	; 3

			break;
     878:	01 c0       	rjmp	.+2      	; 0x87c <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     87a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     87c:	21 11       	cpse	r18, r1
     87e:	05 c0       	rjmp	.+10     	; 0x88a <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     880:	20 91 9e 00 	lds	r18, 0x009E
     884:	2e 7f       	andi	r18, 0xFE	; 254
     886:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     88a:	99 23       	and	r25, r25
     88c:	29 f0       	breq	.+10     	; 0x898 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     88e:	90 91 a0 00 	lds	r25, 0x00A0
     892:	90 62       	ori	r25, 0x20	; 32
     894:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     898:	08 95       	ret

0000089a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	28 97       	sbiw	r28, 0x08	; 8
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8b2:	80 91 2d 01 	lds	r24, 0x012D
     8b6:	85 30       	cpi	r24, 0x05	; 5
     8b8:	09 f4       	brne	.+2      	; 0x8bc <USB_Host_ProcessNextHostState+0x22>
     8ba:	9c c0       	rjmp	.+312    	; 0x9f4 <USB_Host_ProcessNextHostState+0x15a>
     8bc:	68 f4       	brcc	.+26     	; 0x8d8 <USB_Host_ProcessNextHostState+0x3e>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	e1 f1       	breq	.+120    	; 0x93a <USB_Host_ProcessNextHostState+0xa0>
     8c2:	18 f4       	brcc	.+6      	; 0x8ca <USB_Host_ProcessNextHostState+0x30>
     8c4:	88 23       	and	r24, r24
     8c6:	d9 f0       	breq	.+54     	; 0x8fe <USB_Host_ProcessNextHostState+0x64>
     8c8:	ff c0       	rjmp	.+510    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <USB_Host_ProcessNextHostState+0x36>
     8ce:	3f c0       	rjmp	.+126    	; 0x94e <USB_Host_ProcessNextHostState+0xb4>
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <USB_Host_ProcessNextHostState+0x3c>
     8d4:	67 c0       	rjmp	.+206    	; 0x9a4 <USB_Host_ProcessNextHostState+0x10a>
     8d6:	f8 c0       	rjmp	.+496    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     8d8:	87 30       	cpi	r24, 0x07	; 7
     8da:	09 f4       	brne	.+2      	; 0x8de <USB_Host_ProcessNextHostState+0x44>
     8dc:	a6 c0       	rjmp	.+332    	; 0xa2a <USB_Host_ProcessNextHostState+0x190>
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <USB_Host_ProcessNextHostState+0x48>
     8e0:	96 c0       	rjmp	.+300    	; 0xa0e <USB_Host_ProcessNextHostState+0x174>
     8e2:	88 30       	cpi	r24, 0x08	; 8
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <USB_Host_ProcessNextHostState+0x4e>
     8e6:	bf c0       	rjmp	.+382    	; 0xa66 <USB_Host_ProcessNextHostState+0x1cc>
     8e8:	89 30       	cpi	r24, 0x09	; 9
     8ea:	09 f0       	breq	.+2      	; 0x8ee <USB_Host_ProcessNextHostState+0x54>
     8ec:	ed c0       	rjmp	.+474    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	80 93 2d 01 	sts	0x012D, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8fa:	28 dd       	rcall	.-1456   	; 0x34c <EVENT_USB_Host_DeviceEnumerationComplete>
     8fc:	e5 c0       	rjmp	.+458    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
			break;
     8fe:	00 91 21 01 	lds	r16, 0x0121
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     902:	10 91 22 01 	lds	r17, 0x0122
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <USB_Host_ProcessNextHostState+0x74>
     90c:	dd c0       	rjmp	.+442    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     90e:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     910:	77 df       	rcall	.-274    	; 0x800 <USB_Host_WaitMS>
     912:	88 23       	and	r24, r24
     914:	31 f0       	breq	.+12     	; 0x922 <USB_Host_ProcessNextHostState+0x88>
     916:	90 91 20 01 	lds	r25, 0x0120
				{
					USB_HostState = PostWaitState;
     91a:	90 93 2d 01 	sts	0x012D, r25
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	c5 c0       	rjmp	.+394    	; 0xaac <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     922:	01 50       	subi	r16, 0x01	; 1
					break;
     924:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     926:	10 93 22 01 	sts	0x0122, r17
     92a:	00 93 21 01 	sts	0x0121, r16
     92e:	01 2b       	or	r16, r17
     930:	09 f0       	breq	.+2      	; 0x934 <USB_Host_ProcessNextHostState+0x9a>
     932:	ca c0       	rjmp	.+404    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     934:	80 91 20 01 	lds	r24, 0x0120
				  USB_HostState = PostWaitState;
     938:	07 c0       	rjmp	.+14     	; 0x948 <USB_Host_ProcessNextHostState+0xae>
     93a:	88 ee       	ldi	r24, 0xE8	; 232
     93c:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     93e:	90 93 22 01 	sts	0x0122, r25
     942:	80 93 21 01 	sts	0x0121, r24
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 2d 01 	sts	0x012D, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     94c:	bd c0       	rjmp	.+378    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     94e:	80 91 21 01 	lds	r24, 0x0121
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     952:	90 91 22 01 	lds	r25, 0x0122
     956:	9c 01       	movw	r18, r24
     958:	21 50       	subi	r18, 0x01	; 1
     95a:	31 09       	sbc	r19, r1
     95c:	30 93 22 01 	sts	0x0122, r19
     960:	20 93 21 01 	sts	0x0121, r18
     964:	89 2b       	or	r24, r25
     966:	39 f0       	breq	.+14     	; 0x976 <USB_Host_ProcessNextHostState+0xdc>
     968:	8f ec       	ldi	r24, 0xCF	; 207
     96a:	97 e0       	ldi	r25, 0x07	; 7
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <USB_Host_ProcessNextHostState+0xd2>
     970:	00 c0       	rjmp	.+0      	; 0x972 <USB_Host_ProcessNextHostState+0xd8>
     972:	00 00       	nop
     974:	a9 c0       	rjmp	.+338    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     976:	77 98       	cbi	0x0e, 7	; 14
     978:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     97c:	80 61       	ori	r24, 0x10	; 16
     97e:	80 93 d8 00 	sts	0x00D8, r24
     982:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	80 93 dd 00 	sts	0x00DD, r24
     98c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     990:	80 61       	ori	r24, 0x10	; 16
     992:	80 93 d7 00 	sts	0x00D7, r24
     996:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     99a:	82 60       	ori	r24, 0x02	; 2
     99c:	80 93 dd 00 	sts	0x00DD, r24
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	d2 cf       	rjmp	.-92     	; 0x948 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9a4:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9a8:	80 ff       	sbrs	r24, 0
     9aa:	8e c0       	rjmp	.+284    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9ac:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9b0:	8e 7f       	andi	r24, 0xFE	; 254
     9b2:	80 93 9f 00 	sts	0x009F, r24
     9b6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9ba:	8d 7f       	andi	r24, 0xFD	; 253
     9bc:	80 93 9f 00 	sts	0x009F, r24
     9c0:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     9c4:	8d 7f       	andi	r24, 0xFD	; 253
     9c6:	80 93 df 00 	sts	0x00DF, r24
     9ca:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     9ce:	82 60       	ori	r24, 0x02	; 2
     9d0:	80 93 de 00 	sts	0x00DE, r24
     9d4:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	80 93 9e 00 	sts	0x009E, r24
     9de:	34 d1       	rcall	.+616    	; 0xc48 <Pipe_ClearPipes>
     9e0:	10 92 2d 01 	sts	0x012D, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     9e4:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 22 01 	sts	0x0122, r25
     9ec:	80 93 21 01 	sts	0x0121, r24
     9f0:	85 e0       	ldi	r24, 0x05	; 5
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <USB_Host_ProcessNextHostState+0x16e>
     9f4:	b4 de       	rcall	.-664    	; 0x75e <USB_Host_ResetDevice>
     9f6:	10 92 2d 01 	sts	0x012D, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9fa:	88 ec       	ldi	r24, 0xC8	; 200
     9fc:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9fe:	90 93 22 01 	sts	0x0122, r25
     a02:	80 93 21 01 	sts	0x0121, r24
     a06:	86 e0       	ldi	r24, 0x06	; 6
     a08:	80 93 20 01 	sts	0x0120, r24
     a0c:	5d c0       	rjmp	.+186    	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     a0e:	01 e0       	ldi	r16, 0x01	; 1
     a10:	20 e4       	ldi	r18, 0x40	; 64
     a12:	30 e0       	ldi	r19, 0x00	; 0
			break;
     a14:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	ae d0       	rcall	.+348    	; 0xb78 <Pipe_ConfigurePipe>
     a1c:	81 11       	cpse	r24, r1
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <USB_Host_ProcessNextHostState+0x18c>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	43 c0       	rjmp	.+134    	; 0xaac <USB_Host_ProcessNextHostState+0x212>
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	8f cf       	rjmp	.-226    	; 0x948 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a2a:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a2c:	e0 e1       	ldi	r30, 0x10	; 16
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a30:	a5 e2       	ldi	r26, 0x25	; 37
     a32:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a34:	01 90       	ld	r0, Z+
     a36:	0d 92       	st	X+, r0
     a38:	8a 95       	dec	r24
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <USB_Host_ProcessNextHostState+0x19a>
     a3c:	10 92 a7 00 	sts	0x00A7, r1
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	29 d3       	rcall	.+1618   	; 0x1098 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a46:	81 11       	cpse	r24, r1
     a48:	30 c0       	rjmp	.+96     	; 0xaaa <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a4a:	88 85       	ldd	r24, Y+8	; 0x08
     a4c:	80 93 00 01 	sts	0x0100, r24
     a50:	86 de       	rcall	.-756    	; 0x75e <USB_Host_ResetDevice>
     a52:	10 92 2d 01 	sts	0x012D, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a56:	88 ec       	ldi	r24, 0xC8	; 200
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 22 01 	sts	0x0122, r25

			USB_Host_ResetDevice();
     a5e:	80 93 21 01 	sts	0x0121, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	d1 cf       	rjmp	.-94     	; 0xa08 <USB_Host_ProcessNextHostState+0x16e>
     a66:	20 91 00 01 	lds	r18, 0x0100
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	01 e0       	ldi	r16, 0x01	; 1
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     a74:	81 d0       	rcall	.+258    	; 0xb78 <Pipe_ConfigurePipe>
     a76:	88 23       	and	r24, r24
     a78:	99 f2       	breq	.-90     	; 0xa20 <USB_Host_ProcessNextHostState+0x186>
     a7a:	88 e0       	ldi	r24, 0x08	; 8
     a7c:	e8 e1       	ldi	r30, 0x18	; 24
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	a5 e2       	ldi	r26, 0x25	; 37
     a82:	b1 e0       	ldi	r27, 0x01	; 1
     a84:	01 90       	ld	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <USB_Host_ProcessNextHostState+0x1ea>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	03 d3       	rcall	.+1542   	; 0x1098 <USB_Host_SendControlRequest>
     a92:	81 11       	cpse	r24, r1
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <USB_Host_ProcessNextHostState+0x210>
     a96:	10 92 2d 01 	sts	0x012D, r1
     a9a:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 22 01 	sts	0x0122, r25
     aa2:	80 93 21 01 	sts	0x0121, r24
     aa6:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     aa8:	af cf       	rjmp	.-162    	; 0xa08 <USB_Host_ProcessNextHostState+0x16e>
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	20 91 2d 01 	lds	r18, 0x012D
     ab0:	21 30       	cpi	r18, 0x01	; 1
     ab2:	51 f0       	breq	.+20     	; 0xac8 <USB_Host_ProcessNextHostState+0x22e>
     ab4:	68 2f       	mov	r22, r24
     ab6:	89 2f       	mov	r24, r25
     ab8:	c0 dc       	rcall	.-1664   	; 0x43a <EVENT_USB_Host_DeviceEnumerationFailed>
     aba:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 93 dd 00 	sts	0x00DD, r24
     ac4:	3d dc       	rcall	.-1926   	; 0x340 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     ac6:	1a d1       	rcall	.+564    	; 0xcfc <USB_ResetInterface>
     ac8:	28 96       	adiw	r28, 0x08	; 8
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16

		USB_ResetInterface();
     adc:	08 95       	ret

00000ade <Pipe_Read_Stream_LE>:
     ade:	cf 92       	push	r12
	}
}
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	7c 01       	movw	r14, r24
     af0:	8b 01       	movw	r16, r22
     af2:	ea 01       	movw	r28, r20
     af4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     af8:	8f 7c       	andi	r24, 0xCF	; 207
     afa:	80 61       	ori	r24, 0x10	; 16
     afc:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b00:	b7 d0       	rcall	.+366    	; 0xc70 <Pipe_WaitUntilReady>
     b02:	81 11       	cpse	r24, r1
     b04:	30 c0       	rjmp	.+96     	; 0xb66 <Pipe_Read_Stream_LE+0x88>
     b06:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b08:	31 f0       	breq	.+12     	; 0xb16 <Pipe_Read_Stream_LE+0x38>
     b0a:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     b0c:	99 81       	ldd	r25, Y+1	; 0x01
     b0e:	08 1b       	sub	r16, r24
     b10:	19 0b       	sbc	r17, r25
     b12:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b14:	f9 1e       	adc	r15, r25
     b16:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b18:	d1 2c       	mov	r13, r1
     b1a:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b1c:	11 05       	cpc	r17, r1
     b1e:	11 f1       	breq	.+68     	; 0xb64 <Pipe_Read_Stream_LE+0x86>
     b20:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b24:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b26:	13 c0       	rjmp	.+38     	; 0xb4e <Pipe_Read_Stream_LE+0x70>
     b28:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b2c:	8e 77       	andi	r24, 0x7E	; 126
     b2e:	80 93 a6 00 	sts	0x00A6, r24
     b32:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b34:	41 f0       	breq	.+16     	; 0xb46 <Pipe_Read_Stream_LE+0x68>
     b36:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	8c 0d       	add	r24, r12
     b3c:	9d 1d       	adc	r25, r13
     b3e:	99 83       	std	Y+1, r25	; 0x01
     b40:	88 83       	st	Y, r24
     b42:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     b44:	10 c0       	rjmp	.+32     	; 0xb66 <Pipe_Read_Stream_LE+0x88>
     b46:	94 d0       	rcall	.+296    	; 0xc70 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b48:	88 23       	and	r24, r24
     b4a:	39 f3       	breq	.-50     	; 0xb1a <Pipe_Read_Stream_LE+0x3c>
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <Pipe_Read_Stream_LE+0x88>
     b4e:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     b52:	f7 01       	movw	r30, r14
     b54:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     b56:	7f 01       	movw	r14, r30
     b58:	01 50       	subi	r16, 0x01	; 1
     b5a:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b5c:	ff ef       	ldi	r31, 0xFF	; 255
     b5e:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     b60:	df 0a       	sbc	r13, r31
     b62:	db cf       	rjmp	.-74     	; 0xb1a <Pipe_Read_Stream_LE+0x3c>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     b68:	cf 91       	pop	r28
}
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	08 95       	ret

00000b78 <Pipe_ConfigurePipe>:
     b78:	0f 93       	push	r16
     b7a:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b7c:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b7e:	87 ff       	sbrs	r24, 7
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <Pipe_ConfigurePipe+0xe>
     b82:	80 e1       	ldi	r24, 0x10	; 16
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <Pipe_ConfigurePipe+0x10>
     b86:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     b88:	e7 30       	cpi	r30, 0x07	; 7
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <Pipe_ConfigurePipe+0x18>
	  return false;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	5a c0       	rjmp	.+180    	; 0xc44 <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     b90:	61 11       	cpse	r22, r1
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     b94:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b96:	90 e4       	ldi	r25, 0x40	; 64
     b98:	69 9f       	mul	r22, r25
     b9a:	b0 01       	movw	r22, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	4f 70       	andi	r20, 0x0F	; 15
     ba0:	46 2b       	or	r20, r22
     ba2:	48 2b       	or	r20, r24
     ba4:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ba6:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     baa:	5e 13       	cpse	r21, r30
     bac:	19 c0       	rjmp	.+50     	; 0xbe0 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     bae:	02 30       	cpi	r16, 0x02	; 2
     bb0:	10 f0       	brcs	.+4      	; 0xbb6 <Pipe_ConfigurePipe+0x3e>
     bb2:	76 e0       	ldi	r23, 0x06	; 6
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <Pipe_ConfigurePipe+0x40>
     bb6:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     bbc:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bbe:	82 17       	cp	r24, r18
     bc0:	93 07       	cpc	r25, r19
     bc2:	40 f0       	brcs	.+16     	; 0xbd4 <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     bc4:	86 2f       	mov	r24, r22
     bc6:	82 95       	swap	r24
     bc8:	80 7f       	andi	r24, 0xF0	; 240
     bca:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bcc:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     bce:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bd4:	65 30       	cpi	r22, 0x05	; 5
     bd6:	b1 f3       	breq	.-20     	; 0xbc4 <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     bd8:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	ef cf       	rjmp	.-34     	; 0xbbe <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     be0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     be4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     be8:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     bec:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     bf0:	81 fd       	sbrc	r24, 1
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bf4:	5f 5f       	subi	r21, 0xFF	; 255
     bf6:	57 30       	cpi	r21, 0x07	; 7
     bf8:	b1 f6       	brne	.-84     	; 0xba6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bfa:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	21 c0       	rjmp	.+66     	; 0xc44 <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c02:	90 91 a9 00 	lds	r25, 0x00A9
     c06:	9e 7f       	andi	r25, 0xFE	; 254
     c08:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c0c:	90 91 ab 00 	lds	r25, 0x00AB
     c10:	9d 7f       	andi	r25, 0xFD	; 253
     c12:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c16:	90 91 a9 00 	lds	r25, 0x00A9
     c1a:	91 60       	ori	r25, 0x01	; 1
     c1c:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c20:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c24:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c28:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     c2c:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c30:	80 91 a9 00 	lds	r24, 0x00A9
     c34:	80 62       	ori	r24, 0x20	; 32
     c36:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c3a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c3e:	87 fd       	sbrc	r24, 7
     c40:	d9 cf       	rjmp	.-78     	; 0xbf4 <Pipe_ConfigurePipe+0x7c>
     c42:	a4 cf       	rjmp	.-184    	; 0xb8c <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret

00000c48 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c48:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c4c:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c4e:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c52:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c56:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c5a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c5e:	90 91 a9 00 	lds	r25, 0x00A9
     c62:	9e 7f       	andi	r25, 0xFE	; 254
     c64:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	87 30       	cpi	r24, 0x07	; 7
     c6c:	81 f7       	brne	.-32     	; 0xc4e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c6e:	08 95       	ret

00000c70 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c70:	80 91 a2 00 	lds	r24, 0x00A2
     c74:	90 91 a3 00 	lds	r25, 0x00A3
     c78:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c7a:	20 91 aa 00 	lds	r18, 0x00AA
     c7e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c80:	20 31       	cpi	r18, 0x10	; 16
     c82:	29 f4       	brne	.+10     	; 0xc8e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c84:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c88:	20 ff       	sbrs	r18, 0
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <Pipe_WaitUntilReady+0x26>
     c8c:	17 c0       	rjmp	.+46     	; 0xcbc <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c8e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c92:	22 fd       	sbrc	r18, 2
     c94:	13 c0       	rjmp	.+38     	; 0xcbc <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c96:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c9a:	21 fd       	sbrc	r18, 1
     c9c:	11 c0       	rjmp	.+34     	; 0xcc0 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c9e:	20 91 2d 01 	lds	r18, 0x012D
     ca2:	21 30       	cpi	r18, 0x01	; 1
     ca4:	79 f0       	breq	.+30     	; 0xcc4 <Pipe_WaitUntilReady+0x54>
     ca6:	20 91 a2 00 	lds	r18, 0x00A2
     caa:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	19 f3       	breq	.-58     	; 0xc7a <Pipe_WaitUntilReady+0xa>
     cb4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <Pipe_WaitUntilReady+0x58>
     cb8:	c9 01       	movw	r24, r18
     cba:	df cf       	rjmp	.-66     	; 0xc7a <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     cc8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     cca:	08 95       	ret

00000ccc <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ccc:	75 d0       	rcall	.+234    	; 0xdb8 <USB_INT_DisableAllInterrupts>
     cce:	7c d0       	rcall	.+248    	; 0xdc8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cd0:	e0 ee       	ldi	r30, 0xE0	; 224
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cd4:	80 81       	ld	r24, Z
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	80 83       	st	Z, r24
     cda:	e8 ed       	ldi	r30, 0xD8	; 216
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     cde:	80 81       	ld	r24, Z
     ce0:	8f 77       	andi	r24, 0x7F	; 127
     ce2:	80 83       	st	Z, r24
     ce4:	19 bc       	out	0x29, r1	; 41
     ce6:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ce8:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cea:	8c 91       	ld	r24, X
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	8c 93       	st	X, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cf4:	80 83       	st	Z, r24
     cf6:	10 92 24 01 	sts	0x0124, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cfa:	08 95       	ret

00000cfc <USB_ResetInterface>:
     cfc:	5d d0       	rcall	.+186    	; 0xdb8 <USB_INT_DisableAllInterrupts>
     cfe:	64 d0       	rcall	.+200    	; 0xdc8 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d00:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	80 93 d8 00 	sts	0x00D8, r24
     d0a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	80 93 d8 00 	sts	0x00D8, r24
     d14:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d18:	8f 7d       	andi	r24, 0xDF	; 223
     d1a:	80 93 d8 00 	sts	0x00D8, r24
     d1e:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	80 93 d7 00 	sts	0x00D7, r24
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d2c:	8e e0       	ldi	r24, 0x0E	; 14
     d2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d30:	09 b4       	in	r0, 0x29	; 41
     d32:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d34:	fd cf       	rjmp	.-6      	; 0xd30 <USB_ResetInterface+0x34>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 2d 01 	sts	0x012D, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d3c:	10 92 23 01 	sts	0x0123, r1
	USB_Host_ConfigurationNumber = 0;
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	80 93 00 01 	sts	0x0100, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d46:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d4a:	80 64       	ori	r24, 0x40	; 64
     d4c:	80 93 d8 00 	sts	0x00D8, r24
     d50:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 93 dd 00 	sts	0x00DD, r24
     d5a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	80 93 dd 00 	sts	0x00DD, r24
     d64:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d68:	8f 7e       	andi	r24, 0xEF	; 239
     d6a:	80 93 d7 00 	sts	0x00D7, r24
     d6e:	6f 9a       	sbi	0x0d, 7	; 13
     d70:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d72:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	80 93 de 00 	sts	0x00DE, r24
     d7c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d80:	84 60       	ori	r24, 0x04	; 4
     d82:	80 93 de 00 	sts	0x00DE, r24
     d86:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	80 93 e0 00 	sts	0x00E0, r24
     d90:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d94:	80 61       	ori	r24, 0x10	; 16
     d96:	80 93 d8 00 	sts	0x00D8, r24
     d9a:	08 95       	ret

00000d9c <USB_Init>:
     d9c:	e8 ed       	ldi	r30, 0xD8	; 216
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     da0:	80 81       	ld	r24, Z
     da2:	8f 7e       	andi	r24, 0xEF	; 239
     da4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     da6:	e7 ed       	ldi	r30, 0xD7	; 215
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 24 01 	sts	0x0124, r24

	USB_ResetInterface();
     db6:	a2 cf       	rjmp	.-188    	; 0xcfc <USB_ResetInterface>

00000db8 <USB_INT_DisableAllInterrupts>:
     db8:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8c 7f       	andi	r24, 0xFC	; 252
     dc0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     dc2:	10 92 a0 00 	sts	0x00A0, r1
     dc6:	08 95       	ret

00000dc8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     dc8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     dcc:	10 92 9f 00 	sts	0x009F, r1
     dd0:	08 95       	ret

00000dd2 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	0b b6       	in	r0, 0x3b	; 59
     dde:	0f 92       	push	r0
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     df8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dfc:	85 ff       	sbrs	r24, 5
     dfe:	0a c0       	rjmp	.+20     	; 0xe14 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e00:	80 91 a0 00 	lds	r24, 0x00A0
     e04:	85 ff       	sbrs	r24, 5
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e08:	80 91 9f 00 	lds	r24, 0x009F
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e12:	1a d1       	rcall	.+564    	; 0x1048 <USB_Event_Stub>
     e14:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e18:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e1a:	15 c0       	rjmp	.+42     	; 0xe46 <__vector_10+0x74>
     e1c:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e20:	81 ff       	sbrs	r24, 1
     e22:	11 c0       	rjmp	.+34     	; 0xe46 <__vector_10+0x74>
     e24:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e28:	8d 7f       	andi	r24, 0xFD	; 253
     e2a:	80 93 9f 00 	sts	0x009F, r24
     e2e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 93 9f 00 	sts	0x009F, r24
     e38:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	80 93 a0 00 	sts	0x00A0, r24
     e42:	7e da       	rcall	.-2820   	; 0x340 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e44:	5b df       	rcall	.-330    	; 0xcfc <USB_ResetInterface>
     e46:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e4a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <__vector_10+0xa6>
     e4e:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e52:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e54:	11 c0       	rjmp	.+34     	; 0xe78 <__vector_10+0xa6>
     e56:	80 91 df 00 	lds	r24, 0x00DF
     e5a:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e5c:	80 93 df 00 	sts	0x00DF, r24
     e60:	77 98       	cbi	0x0e, 7	; 14
     e62:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e66:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e68:	80 93 dd 00 	sts	0x00DD, r24
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	cf da       	rcall	.-2658   	; 0x40e <EVENT_USB_Host_HostError>
     e70:	67 da       	rcall	.-2866   	; 0x340 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	80 93 2d 01 	sts	0x012D, r24
		EVENT_USB_Host_DeviceUnattached();
     e78:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	17 c0       	rjmp	.+46     	; 0xeae <__vector_10+0xdc>
     e80:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e84:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e86:	13 c0       	rjmp	.+38     	; 0xeae <__vector_10+0xdc>
     e88:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e92:	80 91 de 00 	lds	r24, 0x00DE
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e9c:	4b da       	rcall	.-2922   	; 0x334 <EVENT_USB_Host_DeviceAttached>
     e9e:	80 91 a0 00 	lds	r24, 0x00A0
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     ea8:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     eaa:	80 93 2d 01 	sts	0x012D, r24
     eae:	80 91 df 00 	lds	r24, 0x00DF
     eb2:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <__vector_10+0x100>
     eb6:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     eba:	82 ff       	sbrs	r24, 2
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ebe:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	80 93 df 00 	sts	0x00DF, r24
     ec8:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	b6 da       	rcall	.-2708   	; 0x43a <EVENT_USB_Host_DeviceEnumerationFailed>
     ece:	38 da       	rcall	.-2960   	; 0x340 <EVENT_USB_Host_DeviceUnattached>
     ed0:	15 df       	rcall	.-470    	; 0xcfc <USB_ResetInterface>
     ed2:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23

		USB_ResetInterface();
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0b be       	out	0x3b, r0	; 59
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <USB_GetNextDescriptor>:
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	fc 01       	movw	r30, r24
     efe:	eb 01       	movw	r28, r22
     f00:	a8 81       	ld	r26, Y
     f02:	b9 81       	ldd	r27, Y+1	; 0x01
     f04:	8c 91       	ld	r24, X
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     f0a:	31 81       	ldd	r19, Z+1	; 0x01
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	08 f4       	brcc	.+2      	; 0xf14 <USB_GetNextDescriptor+0x1c>
     f12:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f14:	a2 0f       	add	r26, r18
     f16:	b3 1f       	adc	r27, r19
     f18:	eb 01       	movw	r28, r22
     f1a:	b9 83       	std	Y+1, r27	; 0x01
     f1c:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	82 1b       	sub	r24, r18
     f24:	93 0b       	sbc	r25, r19
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
			}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	29 97       	sbiw	r28, 0x09	; 9
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	7b 01       	movw	r14, r22
     f52:	8a 01       	movw	r16, r20
     f54:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f56:	90 e8       	ldi	r25, 0x80	; 128
     f58:	90 93 25 01 	sts	0x0125, r25
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	90 93 26 01 	sts	0x0126, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f62:	e8 2f       	mov	r30, r24
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f6a:	f0 93 28 01 	sts	0x0128, r31
     f6e:	e0 93 27 01 	sts	0x0127, r30
     f72:	10 92 2a 01 	sts	0x012A, r1
     f76:	10 92 29 01 	sts	0x0129, r1
     f7a:	89 e0       	ldi	r24, 0x09	; 9
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	90 93 2c 01 	sts	0x012C, r25
     f82:	80 93 2b 01 	sts	0x012B, r24
     f86:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	84 d0       	rcall	.+264    	; 0x1098 <USB_Host_SendControlRequest>
     f90:	81 11       	cpse	r24, r1
     f92:	19 c0       	rjmp	.+50     	; 0xfc6 <USB_Host_GetDeviceConfigDescriptor+0x96>
     f94:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f96:	fc 81       	ldd	r31, Y+4	; 0x04
     f98:	d7 01       	movw	r26, r14
     f9a:	ed 93       	st	X+, r30
     f9c:	fc 93       	st	X, r31
     f9e:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     fa0:	df 06       	cpc	r13, r31
     fa2:	70 f0       	brcs	.+28     	; 0xfc0 <USB_Host_GetDeviceConfigDescriptor+0x90>
     fa4:	f0 93 2c 01 	sts	0x012C, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fa8:	e0 93 2b 01 	sts	0x012B, r30
     fac:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fae:	74 d0       	rcall	.+232    	; 0x1098 <USB_Host_SendControlRequest>
     fb0:	81 11       	cpse	r24, r1
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <USB_Host_GetDeviceConfigDescriptor+0x96>
     fb4:	f8 01       	movw	r30, r16
     fb6:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	21 f0       	breq	.+8      	; 0xfc4 <USB_Host_GetDeviceConfigDescriptor+0x94>
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     fc0:	85 e0       	ldi	r24, 0x05	; 5
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     fc8:	0f b6       	in	r0, 0x3f	; 63
}
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <USB_GetNextDescriptorComp>:
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	8c 01       	movw	r16, r24
     ffa:	eb 01       	movw	r28, r22
     ffc:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ffe:	f8 01       	movw	r30, r16
    1000:	e0 80       	ld	r14, Z
    1002:	f1 80       	ldd	r15, Z+1	; 0x01
    1004:	e1 14       	cp	r14, r1
    1006:	f1 04       	cpc	r15, r1
    1008:	99 f0       	breq	.+38     	; 0x1030 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    100a:	a8 80       	ld	r10, Y
    100c:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    100e:	be 01       	movw	r22, r28
    1010:	c8 01       	movw	r24, r16
    1012:	72 df       	rcall	.-284    	; 0xef8 <USB_GetNextDescriptor>
    1014:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	f6 01       	movw	r30, r12
    101a:	09 95       	icall
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	79 f3       	breq	.-34     	; 0xffe <USB_GetNextDescriptorComp+0x1a>
    1020:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1022:	39 f4       	brne	.+14     	; 0x1032 <USB_GetNextDescriptorComp+0x4e>
    1024:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    1026:	a8 82       	st	Y, r10
    1028:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    102a:	f1 82       	std	Z+1, r15	; 0x01
    102c:	e0 82       	st	Z, r14
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <USB_GetNextDescriptorComp+0x4e>
    1030:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1032:	df 91       	pop	r29
}
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	08 95       	ret

00001048 <USB_Event_Stub>:
    1048:	08 95       	ret

0000104a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1052:	c9 ee       	ldi	r28, 0xE9	; 233
    1054:	d3 e0       	ldi	r29, 0x03	; 3
    1056:	11 11       	cpse	r17, r1
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    105a:	80 91 a6 00 	lds	r24, 0x00A6
    105e:	83 fd       	sbrc	r24, 3
    1060:	16 c0       	rjmp	.+44     	; 0x108e <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	cd db       	rcall	.-2150   	; 0x800 <USB_Host_WaitMS>
    1066:	81 11       	cpse	r24, r1
    1068:	13 c0       	rjmp	.+38     	; 0x1090 <USB_Host_WaitForIOS+0x46>
    106a:	21 97       	sbiw	r28, 0x01	; 1
    106c:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    106e:	99 f7       	brne	.-26     	; 0x1056 <USB_Host_WaitForIOS+0xc>
    1070:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1072:	0e c0       	rjmp	.+28     	; 0x1090 <USB_Host_WaitForIOS+0x46>
    1074:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1076:	29 f4       	brne	.+10     	; 0x1082 <USB_Host_WaitForIOS+0x38>
    1078:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    107c:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    107e:	f1 cf       	rjmp	.-30     	; 0x1062 <USB_Host_WaitForIOS+0x18>
    1080:	06 c0       	rjmp	.+12     	; 0x108e <USB_Host_WaitForIOS+0x44>
    1082:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1084:	71 f7       	brne	.-36     	; 0x1062 <USB_Host_WaitForIOS+0x18>
    1086:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    108a:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    108c:	ea cf       	rjmp	.-44     	; 0x1062 <USB_Host_WaitForIOS+0x18>
    108e:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1090:	df 91       	pop	r29
}
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <USB_Host_SendControlRequest>:
    1098:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10a4:	f0 90 9e 00 	lds	r15, 0x009E
    10a8:	8f 2d       	mov	r24, r15
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10ae:	c0 91 2b 01 	lds	r28, 0x012B
    10b2:	d0 91 2c 01 	lds	r29, 0x012C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10b6:	80 91 9e 00 	lds	r24, 0x009E
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	9e db       	rcall	.-2244   	; 0x800 <USB_Host_WaitMS>
    10c4:	81 11       	cpse	r24, r1
    10c6:	cc c0       	rjmp	.+408    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    10c8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10cc:	8f 7c       	andi	r24, 0xCF	; 207
    10ce:	80 93 aa 00 	sts	0x00AA, r24
    10d2:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10d6:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    10da:	8f 7e       	andi	r24, 0xEF	; 239
    10dc:	80 93 a6 00 	sts	0x00A6, r24
    10e0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	80 93 a9 00 	sts	0x00A9, r24
    10ea:	e5 e2       	ldi	r30, 0x25	; 37
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10f0:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10f6:	ed 32       	cpi	r30, 0x2D	; 45
    10f8:	f8 07       	cpc	r31, r24
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <USB_Host_SendControlRequest+0x56>
    10fc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1100:	87 77       	andi	r24, 0x77	; 119
    1102:	80 93 a6 00 	sts	0x00A6, r24
    1106:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1108:	a0 df       	rcall	.-192    	; 0x104a <USB_Host_WaitForIOS>
    110a:	81 11       	cpse	r24, r1
    110c:	a9 c0       	rjmp	.+338    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    110e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1112:	80 64       	ori	r24, 0x40	; 64
    1114:	80 93 a9 00 	sts	0x00A9, r24
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	72 db       	rcall	.-2332   	; 0x800 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    111c:	81 11       	cpse	r24, r1
    111e:	a0 c0       	rjmp	.+320    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    1120:	80 91 25 01 	lds	r24, 0x0125
    1124:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1126:	4e c0       	rjmp	.+156    	; 0x11c4 <USB_Host_SendControlRequest+0x12c>
    1128:	80 91 aa 00 	lds	r24, 0x00AA
    112c:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 93 aa 00 	sts	0x00AA, r24
    1134:	01 15       	cp	r16, r1
    1136:	11 05       	cpc	r17, r1
    1138:	09 f0       	breq	.+2      	; 0x113c <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    113a:	3a c0       	rjmp	.+116    	; 0x11b0 <USB_Host_SendControlRequest+0x118>
    113c:	80 91 aa 00 	lds	r24, 0x00AA
    1140:	8f 7c       	andi	r24, 0xCF	; 207
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	80 93 aa 00 	sts	0x00AA, r24
    1148:	80 91 a9 00 	lds	r24, 0x00A9
    114c:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    114e:	80 93 a9 00 	sts	0x00A9, r24
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	7a df       	rcall	.-268    	; 0x104a <USB_Host_WaitForIOS>
    1156:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1158:	83 c0       	rjmp	.+262    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    115a:	80 91 a6 00 	lds	r24, 0x00A6
    115e:	8b 77       	andi	r24, 0x7B	; 123
    1160:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	71 df       	rcall	.-286    	; 0x104a <USB_Host_WaitForIOS>
    1168:	7b c0       	rjmp	.+246    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    116a:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116e:	8f 7b       	andi	r24, 0xBF	; 191
    1170:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	69 df       	rcall	.-302    	; 0x104a <USB_Host_WaitForIOS>
    1178:	81 11       	cpse	r24, r1
    117a:	72 c0       	rjmp	.+228    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    117c:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1180:	90 91 f7 00 	lds	r25, 0x00F7
    1184:	89 2b       	or	r24, r25
    1186:	11 f4       	brne	.+4      	; 0x118c <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1188:	c0 e0       	ldi	r28, 0x00	; 0
    118a:	d0 e0       	ldi	r29, 0x00	; 0
    118c:	f8 01       	movw	r30, r16
    118e:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1190:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    1194:	90 91 f7 00 	lds	r25, 0x00F7
    1198:	89 2b       	or	r24, r25
    119a:	69 f4       	brne	.+26     	; 0x11b6 <USB_Host_SendControlRequest+0x11e>
    119c:	80 91 a9 00 	lds	r24, 0x00A9
    11a0:	80 64       	ori	r24, 0x40	; 64
    11a2:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    11a6:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11aa:	8e 77       	andi	r24, 0x7E	; 126
    11ac:	80 93 a6 00 	sts	0x00A6, r24
    11b0:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11b2:	d9 f6       	brne	.-74     	; 0x116a <USB_Host_SendControlRequest+0xd2>
    11b4:	c3 cf       	rjmp	.-122    	; 0x113c <USB_Host_SendControlRequest+0xa4>
    11b6:	20 97       	sbiw	r28, 0x00	; 0
    11b8:	89 f3       	breq	.-30     	; 0x119c <USB_Host_SendControlRequest+0x104>
    11ba:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11be:	81 93       	st	Z+, r24
    11c0:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11c2:	e5 cf       	rjmp	.-54     	; 0x118e <USB_Host_SendControlRequest+0xf6>
    11c4:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11c6:	11 05       	cpc	r17, r1
    11c8:	b1 f1       	breq	.+108    	; 0x1236 <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    11ca:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    11ce:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11d0:	80 62       	ori	r24, 0x20	; 32
    11d2:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11d6:	80 91 a9 00 	lds	r24, 0x00A9
    11da:	8f 7b       	andi	r24, 0xBF	; 191
    11dc:	80 93 a9 00 	sts	0x00A9, r24
    11e0:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11e2:	20 97       	sbiw	r28, 0x00	; 0
    11e4:	01 f1       	breq	.+64     	; 0x1226 <USB_Host_SendControlRequest+0x18e>
    11e6:	31 df       	rcall	.-414    	; 0x104a <USB_Host_WaitForIOS>
    11e8:	81 11       	cpse	r24, r1
    11ea:	3a c0       	rjmp	.+116    	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ec:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11ee:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11f2:	30 91 f7 00 	lds	r19, 0x00F7
    11f6:	80 91 00 01 	lds	r24, 0x0100
    11fa:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	58 f4       	brcc	.+22     	; 0x1218 <USB_Host_SendControlRequest+0x180>
    1202:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	8c 01       	movw	r16, r24
    1208:	20 81       	ld	r18, Z
    120a:	20 93 af 00 	sts	0x00AF, r18
    120e:	21 97       	sbiw	r28, 0x01	; 1
    1210:	20 97       	sbiw	r28, 0x00	; 0
    1212:	19 f0       	breq	.+6      	; 0x121a <USB_Host_SendControlRequest+0x182>
    1214:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    1216:	eb cf       	rjmp	.-42     	; 0x11ee <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1218:	8f 01       	movw	r16, r30
    121a:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    121e:	8b 77       	andi	r24, 0x7B	; 123
    1220:	80 93 a6 00 	sts	0x00A6, r24
    1224:	dd cf       	rjmp	.-70     	; 0x11e0 <USB_Host_SendControlRequest+0x148>
    1226:	11 df       	rcall	.-478    	; 0x104a <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1228:	81 11       	cpse	r24, r1
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    122c:	80 91 a9 00 	lds	r24, 0x00A9
    1230:	80 64       	ori	r24, 0x40	; 64
    1232:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1236:	80 91 aa 00 	lds	r24, 0x00AA
    123a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    123c:	80 61       	ori	r24, 0x10	; 16
    123e:	80 93 aa 00 	sts	0x00AA, r24
    1242:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1246:	8f 7b       	andi	r24, 0xBF	; 191
    1248:	80 93 a9 00 	sts	0x00A9, r24
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	fd de       	rcall	.-518    	; 0x104a <USB_Host_WaitForIOS>
    1250:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <USB_Host_SendControlRequest+0x1c8>
    1254:	80 91 a6 00 	lds	r24, 0x00A6
    1258:	8e 77       	andi	r24, 0x7E	; 126
    125a:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 91 a9 00 	lds	r25, 0x00A9
    1264:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1266:	90 93 a9 00 	sts	0x00A9, r25
    126a:	f1 10       	cpse	r15, r1
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <USB_Host_SendControlRequest+0x1e0>
    126e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1272:	9e 7f       	andi	r25, 0xFE	; 254
    1274:	90 93 9e 00 	sts	0x009E, r25
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    127e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    128a:	ff 90       	pop	r15
    128c:	08 95       	ret

0000128e <USB_Host_SetDeviceConfiguration>:
    128e:	cf 93       	push	r28
				UPRST = 0;
    1290:	c8 2f       	mov	r28, r24
    1292:	10 92 25 01 	sts	0x0125, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1296:	89 e0       	ldi	r24, 0x09	; 9
    1298:	80 93 26 01 	sts	0x0126, r24
    129c:	2c 2f       	mov	r18, r28
    129e:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12a0:	30 93 28 01 	sts	0x0128, r19
    12a4:	20 93 27 01 	sts	0x0127, r18
    12a8:	10 92 2a 01 	sts	0x012A, r1
    12ac:	10 92 29 01 	sts	0x0129, r1
    12b0:	10 92 2c 01 	sts	0x012C, r1
    12b4:	10 92 2b 01 	sts	0x012B, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12b8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	eb de       	rcall	.-554    	; 0x1098 <USB_Host_SendControlRequest>
    12c2:	81 11       	cpse	r24, r1
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <USB_Host_SetDeviceConfiguration+0x4a>
    12c6:	c0 93 23 01 	sts	0x0123, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12ca:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <USB_Host_SetDeviceConfiguration+0x44>
    12ce:	9b e0       	ldi	r25, 0x0B	; 11
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <USB_Host_SetDeviceConfiguration+0x46>
    12d2:	9a e0       	ldi	r25, 0x0A	; 10
    12d4:	90 93 2d 01 	sts	0x012D, r25
    12d8:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    12da:	08 95       	ret

000012dc <USB_USBTask>:
    12dc:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12de:	c0 91 a7 00 	lds	r28, 0x00A7
    12e2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12e4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12e8:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12ec:	d6 da       	rcall	.-2644   	; 0x89a <USB_Host_ProcessNextHostState>
    12ee:	c0 93 a7 00 	sts	0x00A7, r28
    12f2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12f4:	08 95       	ret

000012f6 <Serial_putchar>:
    12f6:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    12fa:	95 ff       	sbrs	r25, 5
    12fc:	fc cf       	rjmp	.-8      	; 0x12f6 <Serial_putchar>
				UDR1 = DataByte;
    12fe:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	08 95       	ret

00001308 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1308:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    130c:	87 ff       	sbrs	r24, 7
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <Serial_getchar+0x18>
    1310:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1314:	87 ff       	sbrs	r24, 7
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1318:	80 91 ce 00 	lds	r24, 0x00CE
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	08 95       	ret
	  return _FDEV_EOF;
    1320:	8e ef       	ldi	r24, 0xFE	; 254
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    132a:	08 95       	ret

0000132c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    132c:	fc 01       	movw	r30, r24
	if (!(Stream))
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	59 f4       	brne	.+22     	; 0x1348 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1332:	8e e2       	ldi	r24, 0x2E	; 46
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	90 93 3d 01 	sts	0x013D, r25
    133a:	80 93 3c 01 	sts	0x013C, r24
		stdout = Stream;
    133e:	90 93 3f 01 	sts	0x013F, r25
    1342:	80 93 3e 01 	sts	0x013E, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1346:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1348:	8e e0       	ldi	r24, 0x0E	; 14
    134a:	df 01       	movw	r26, r30
    134c:	1d 92       	st	X+, r1
    134e:	8a 95       	dec	r24
    1350:	e9 f7       	brne	.-6      	; 0x134c <Serial_CreateStream+0x20>
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	83 83       	std	Z+3, r24	; 0x03
    1356:	8b e7       	ldi	r24, 0x7B	; 123
    1358:	99 e0       	ldi	r25, 0x09	; 9
    135a:	91 87       	std	Z+9, r25	; 0x09
    135c:	80 87       	std	Z+8, r24	; 0x08
    135e:	84 e8       	ldi	r24, 0x84	; 132
    1360:	99 e0       	ldi	r25, 0x09	; 9
    1362:	93 87       	std	Z+11, r25	; 0x0b
    1364:	82 87       	std	Z+10, r24	; 0x0a
    1366:	08 95       	ret

00001368 <fputc>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	18 2f       	mov	r17, r24
    1372:	09 2f       	mov	r16, r25
    1374:	eb 01       	movw	r28, r22
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 fd       	sbrc	r24, 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <fputc+0x1a>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	9f ef       	ldi	r25, 0xFF	; 255
    1380:	20 c0       	rjmp	.+64     	; 0x13c2 <fputc+0x5a>
    1382:	82 ff       	sbrs	r24, 2
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <fputc+0x3e>
    1386:	4e 81       	ldd	r20, Y+6	; 0x06
    1388:	5f 81       	ldd	r21, Y+7	; 0x07
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	42 17       	cp	r20, r18
    1390:	53 07       	cpc	r21, r19
    1392:	7c f4       	brge	.+30     	; 0x13b2 <fputc+0x4a>
    1394:	e8 81       	ld	r30, Y
    1396:	f9 81       	ldd	r31, Y+1	; 0x01
    1398:	9f 01       	movw	r18, r30
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	39 83       	std	Y+1, r19	; 0x01
    13a0:	28 83       	st	Y, r18
    13a2:	10 83       	st	Z, r17
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <fputc+0x4a>
    13a6:	e8 85       	ldd	r30, Y+8	; 0x08
    13a8:	f9 85       	ldd	r31, Y+9	; 0x09
    13aa:	81 2f       	mov	r24, r17
    13ac:	09 95       	icall
    13ae:	89 2b       	or	r24, r25
    13b0:	29 f7       	brne	.-54     	; 0x137c <fputc+0x14>
    13b2:	2e 81       	ldd	r18, Y+6	; 0x06
    13b4:	3f 81       	ldd	r19, Y+7	; 0x07
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	3f 83       	std	Y+7, r19	; 0x07
    13bc:	2e 83       	std	Y+6, r18	; 0x06
    13be:	81 2f       	mov	r24, r17
    13c0:	90 2f       	mov	r25, r16
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <printf_P>:
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	fe 01       	movw	r30, r28
    13da:	37 96       	adiw	r30, 0x07	; 7
    13dc:	61 91       	ld	r22, Z+
    13de:	71 91       	ld	r23, Z+
    13e0:	0e e3       	ldi	r16, 0x3E	; 62
    13e2:	11 e0       	ldi	r17, 0x01	; 1
    13e4:	d8 01       	movw	r26, r16
    13e6:	8d 91       	ld	r24, X+
    13e8:	9c 91       	ld	r25, X
    13ea:	dc 01       	movw	r26, r24
    13ec:	13 96       	adiw	r26, 0x03	; 3
    13ee:	2c 91       	ld	r18, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	28 60       	ori	r18, 0x08	; 8
    13f4:	13 96       	adiw	r26, 0x03	; 3
    13f6:	2c 93       	st	X, r18
    13f8:	af 01       	movw	r20, r30
    13fa:	3a d0       	rcall	.+116    	; 0x1470 <vfprintf>
    13fc:	d8 01       	movw	r26, r16
    13fe:	ed 91       	ld	r30, X+
    1400:	fc 91       	ld	r31, X
    1402:	23 81       	ldd	r18, Z+3	; 0x03
    1404:	27 7f       	andi	r18, 0xF7	; 247
    1406:	23 83       	std	Z+3, r18	; 0x03
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <puts_P>:
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	ec 01       	movw	r28, r24
    141c:	e0 91 3e 01 	lds	r30, 0x013E
    1420:	f0 91 3f 01 	lds	r31, 0x013F
    1424:	83 81       	ldd	r24, Z+3	; 0x03
    1426:	81 ff       	sbrs	r24, 1
    1428:	1c c0       	rjmp	.+56     	; 0x1462 <puts_P+0x50>
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	fe 01       	movw	r30, r28
    1430:	84 91       	lpm	r24, Z
    1432:	60 91 3e 01 	lds	r22, 0x013E
    1436:	70 91 3f 01 	lds	r23, 0x013F
    143a:	db 01       	movw	r26, r22
    143c:	18 96       	adiw	r26, 0x08	; 8
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	19 97       	sbiw	r26, 0x09	; 9
    1444:	88 23       	and	r24, r24
    1446:	39 f0       	breq	.+14     	; 0x1456 <puts_P+0x44>
    1448:	09 95       	icall
    144a:	89 2b       	or	r24, r25
    144c:	11 f0       	breq	.+4      	; 0x1452 <puts_P+0x40>
    144e:	0f ef       	ldi	r16, 0xFF	; 255
    1450:	1f ef       	ldi	r17, 0xFF	; 255
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	ec cf       	rjmp	.-40     	; 0x142e <puts_P+0x1c>
    1456:	8a e0       	ldi	r24, 0x0A	; 10
    1458:	09 95       	icall
    145a:	89 2b       	or	r24, r25
    145c:	11 f4       	brne	.+4      	; 0x1462 <puts_P+0x50>
    145e:	c8 01       	movw	r24, r16
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <puts_P+0x54>
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <vfprintf>:
    1470:	2f 92       	push	r2
    1472:	3f 92       	push	r3
    1474:	4f 92       	push	r4
    1476:	5f 92       	push	r5
    1478:	6f 92       	push	r6
    147a:	7f 92       	push	r7
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2c 97       	sbiw	r28, 0x0c	; 12
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	7c 01       	movw	r14, r24
    14a6:	6b 01       	movw	r12, r22
    14a8:	8a 01       	movw	r16, r20
    14aa:	fc 01       	movw	r30, r24
    14ac:	17 82       	std	Z+7, r1	; 0x07
    14ae:	16 82       	std	Z+6, r1	; 0x06
    14b0:	83 81       	ldd	r24, Z+3	; 0x03
    14b2:	81 ff       	sbrs	r24, 1
    14b4:	b0 c1       	rjmp	.+864    	; 0x1816 <vfprintf+0x3a6>
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	4c 01       	movw	r8, r24
    14bc:	f7 01       	movw	r30, r14
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	f6 01       	movw	r30, r12
    14c2:	93 fd       	sbrc	r25, 3
    14c4:	85 91       	lpm	r24, Z+
    14c6:	93 ff       	sbrs	r25, 3
    14c8:	81 91       	ld	r24, Z+
    14ca:	6f 01       	movw	r12, r30
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <vfprintf+0x62>
    14d0:	9e c1       	rjmp	.+828    	; 0x180e <vfprintf+0x39e>
    14d2:	85 32       	cpi	r24, 0x25	; 37
    14d4:	39 f4       	brne	.+14     	; 0x14e4 <vfprintf+0x74>
    14d6:	93 fd       	sbrc	r25, 3
    14d8:	85 91       	lpm	r24, Z+
    14da:	93 ff       	sbrs	r25, 3
    14dc:	81 91       	ld	r24, Z+
    14de:	6f 01       	movw	r12, r30
    14e0:	85 32       	cpi	r24, 0x25	; 37
    14e2:	21 f4       	brne	.+8      	; 0x14ec <vfprintf+0x7c>
    14e4:	b7 01       	movw	r22, r14
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	3f df       	rcall	.-386    	; 0x1368 <fputc>
    14ea:	e8 cf       	rjmp	.-48     	; 0x14bc <vfprintf+0x4c>
    14ec:	51 2c       	mov	r5, r1
    14ee:	31 2c       	mov	r3, r1
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	20 32       	cpi	r18, 0x20	; 32
    14f4:	a0 f4       	brcc	.+40     	; 0x151e <vfprintf+0xae>
    14f6:	8b 32       	cpi	r24, 0x2B	; 43
    14f8:	69 f0       	breq	.+26     	; 0x1514 <vfprintf+0xa4>
    14fa:	30 f4       	brcc	.+12     	; 0x1508 <vfprintf+0x98>
    14fc:	80 32       	cpi	r24, 0x20	; 32
    14fe:	59 f0       	breq	.+22     	; 0x1516 <vfprintf+0xa6>
    1500:	83 32       	cpi	r24, 0x23	; 35
    1502:	69 f4       	brne	.+26     	; 0x151e <vfprintf+0xae>
    1504:	20 61       	ori	r18, 0x10	; 16
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <vfprintf+0xf0>
    1508:	8d 32       	cpi	r24, 0x2D	; 45
    150a:	39 f0       	breq	.+14     	; 0x151a <vfprintf+0xaa>
    150c:	80 33       	cpi	r24, 0x30	; 48
    150e:	39 f4       	brne	.+14     	; 0x151e <vfprintf+0xae>
    1510:	21 60       	ori	r18, 0x01	; 1
    1512:	26 c0       	rjmp	.+76     	; 0x1560 <vfprintf+0xf0>
    1514:	22 60       	ori	r18, 0x02	; 2
    1516:	24 60       	ori	r18, 0x04	; 4
    1518:	23 c0       	rjmp	.+70     	; 0x1560 <vfprintf+0xf0>
    151a:	28 60       	ori	r18, 0x08	; 8
    151c:	21 c0       	rjmp	.+66     	; 0x1560 <vfprintf+0xf0>
    151e:	27 fd       	sbrc	r18, 7
    1520:	27 c0       	rjmp	.+78     	; 0x1570 <vfprintf+0x100>
    1522:	30 ed       	ldi	r19, 0xD0	; 208
    1524:	38 0f       	add	r19, r24
    1526:	3a 30       	cpi	r19, 0x0A	; 10
    1528:	78 f4       	brcc	.+30     	; 0x1548 <vfprintf+0xd8>
    152a:	26 ff       	sbrs	r18, 6
    152c:	06 c0       	rjmp	.+12     	; 0x153a <vfprintf+0xca>
    152e:	fa e0       	ldi	r31, 0x0A	; 10
    1530:	5f 9e       	mul	r5, r31
    1532:	30 0d       	add	r19, r0
    1534:	11 24       	eor	r1, r1
    1536:	53 2e       	mov	r5, r19
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <vfprintf+0xf0>
    153a:	8a e0       	ldi	r24, 0x0A	; 10
    153c:	38 9e       	mul	r3, r24
    153e:	30 0d       	add	r19, r0
    1540:	11 24       	eor	r1, r1
    1542:	33 2e       	mov	r3, r19
    1544:	20 62       	ori	r18, 0x20	; 32
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <vfprintf+0xf0>
    1548:	8e 32       	cpi	r24, 0x2E	; 46
    154a:	21 f4       	brne	.+8      	; 0x1554 <vfprintf+0xe4>
    154c:	26 fd       	sbrc	r18, 6
    154e:	5f c1       	rjmp	.+702    	; 0x180e <vfprintf+0x39e>
    1550:	20 64       	ori	r18, 0x40	; 64
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <vfprintf+0xf0>
    1554:	8c 36       	cpi	r24, 0x6C	; 108
    1556:	11 f4       	brne	.+4      	; 0x155c <vfprintf+0xec>
    1558:	20 68       	ori	r18, 0x80	; 128
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <vfprintf+0xf0>
    155c:	88 36       	cpi	r24, 0x68	; 104
    155e:	41 f4       	brne	.+16     	; 0x1570 <vfprintf+0x100>
    1560:	f6 01       	movw	r30, r12
    1562:	93 fd       	sbrc	r25, 3
    1564:	85 91       	lpm	r24, Z+
    1566:	93 ff       	sbrs	r25, 3
    1568:	81 91       	ld	r24, Z+
    156a:	6f 01       	movw	r12, r30
    156c:	81 11       	cpse	r24, r1
    156e:	c1 cf       	rjmp	.-126    	; 0x14f2 <vfprintf+0x82>
    1570:	98 2f       	mov	r25, r24
    1572:	9f 7d       	andi	r25, 0xDF	; 223
    1574:	95 54       	subi	r25, 0x45	; 69
    1576:	93 30       	cpi	r25, 0x03	; 3
    1578:	28 f4       	brcc	.+10     	; 0x1584 <vfprintf+0x114>
    157a:	0c 5f       	subi	r16, 0xFC	; 252
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	ff e3       	ldi	r31, 0x3F	; 63
    1580:	f9 83       	std	Y+1, r31	; 0x01
    1582:	0d c0       	rjmp	.+26     	; 0x159e <vfprintf+0x12e>
    1584:	83 36       	cpi	r24, 0x63	; 99
    1586:	31 f0       	breq	.+12     	; 0x1594 <vfprintf+0x124>
    1588:	83 37       	cpi	r24, 0x73	; 115
    158a:	71 f0       	breq	.+28     	; 0x15a8 <vfprintf+0x138>
    158c:	83 35       	cpi	r24, 0x53	; 83
    158e:	09 f0       	breq	.+2      	; 0x1592 <vfprintf+0x122>
    1590:	57 c0       	rjmp	.+174    	; 0x1640 <vfprintf+0x1d0>
    1592:	21 c0       	rjmp	.+66     	; 0x15d6 <vfprintf+0x166>
    1594:	f8 01       	movw	r30, r16
    1596:	80 81       	ld	r24, Z
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	0e 5f       	subi	r16, 0xFE	; 254
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	44 24       	eor	r4, r4
    15a0:	43 94       	inc	r4
    15a2:	51 2c       	mov	r5, r1
    15a4:	54 01       	movw	r10, r8
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <vfprintf+0x160>
    15a8:	38 01       	movw	r6, r16
    15aa:	f2 e0       	ldi	r31, 0x02	; 2
    15ac:	6f 0e       	add	r6, r31
    15ae:	71 1c       	adc	r7, r1
    15b0:	f8 01       	movw	r30, r16
    15b2:	a0 80       	ld	r10, Z
    15b4:	b1 80       	ldd	r11, Z+1	; 0x01
    15b6:	26 ff       	sbrs	r18, 6
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <vfprintf+0x150>
    15ba:	65 2d       	mov	r22, r5
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <vfprintf+0x154>
    15c0:	6f ef       	ldi	r22, 0xFF	; 255
    15c2:	7f ef       	ldi	r23, 0xFF	; 255
    15c4:	c5 01       	movw	r24, r10
    15c6:	2c 87       	std	Y+12, r18	; 0x0c
    15c8:	4c d1       	rcall	.+664    	; 0x1862 <strnlen>
    15ca:	2c 01       	movw	r4, r24
    15cc:	83 01       	movw	r16, r6
    15ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d0:	2f 77       	andi	r18, 0x7F	; 127
    15d2:	22 2e       	mov	r2, r18
    15d4:	16 c0       	rjmp	.+44     	; 0x1602 <vfprintf+0x192>
    15d6:	38 01       	movw	r6, r16
    15d8:	f2 e0       	ldi	r31, 0x02	; 2
    15da:	6f 0e       	add	r6, r31
    15dc:	71 1c       	adc	r7, r1
    15de:	f8 01       	movw	r30, r16
    15e0:	a0 80       	ld	r10, Z
    15e2:	b1 80       	ldd	r11, Z+1	; 0x01
    15e4:	26 ff       	sbrs	r18, 6
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <vfprintf+0x17e>
    15e8:	65 2d       	mov	r22, r5
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x182>
    15ee:	6f ef       	ldi	r22, 0xFF	; 255
    15f0:	7f ef       	ldi	r23, 0xFF	; 255
    15f2:	c5 01       	movw	r24, r10
    15f4:	2c 87       	std	Y+12, r18	; 0x0c
    15f6:	2a d1       	rcall	.+596    	; 0x184c <strnlen_P>
    15f8:	2c 01       	movw	r4, r24
    15fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fc:	20 68       	ori	r18, 0x80	; 128
    15fe:	22 2e       	mov	r2, r18
    1600:	83 01       	movw	r16, r6
    1602:	23 fc       	sbrc	r2, 3
    1604:	19 c0       	rjmp	.+50     	; 0x1638 <vfprintf+0x1c8>
    1606:	83 2d       	mov	r24, r3
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	48 16       	cp	r4, r24
    160c:	59 06       	cpc	r5, r25
    160e:	a0 f4       	brcc	.+40     	; 0x1638 <vfprintf+0x1c8>
    1610:	b7 01       	movw	r22, r14
    1612:	80 e2       	ldi	r24, 0x20	; 32
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a8 de       	rcall	.-688    	; 0x1368 <fputc>
    1618:	3a 94       	dec	r3
    161a:	f5 cf       	rjmp	.-22     	; 0x1606 <vfprintf+0x196>
    161c:	f5 01       	movw	r30, r10
    161e:	27 fc       	sbrc	r2, 7
    1620:	85 91       	lpm	r24, Z+
    1622:	27 fe       	sbrs	r2, 7
    1624:	81 91       	ld	r24, Z+
    1626:	5f 01       	movw	r10, r30
    1628:	b7 01       	movw	r22, r14
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9d de       	rcall	.-710    	; 0x1368 <fputc>
    162e:	31 10       	cpse	r3, r1
    1630:	3a 94       	dec	r3
    1632:	f1 e0       	ldi	r31, 0x01	; 1
    1634:	4f 1a       	sub	r4, r31
    1636:	51 08       	sbc	r5, r1
    1638:	41 14       	cp	r4, r1
    163a:	51 04       	cpc	r5, r1
    163c:	79 f7       	brne	.-34     	; 0x161c <vfprintf+0x1ac>
    163e:	de c0       	rjmp	.+444    	; 0x17fc <vfprintf+0x38c>
    1640:	84 36       	cpi	r24, 0x64	; 100
    1642:	11 f0       	breq	.+4      	; 0x1648 <vfprintf+0x1d8>
    1644:	89 36       	cpi	r24, 0x69	; 105
    1646:	31 f5       	brne	.+76     	; 0x1694 <vfprintf+0x224>
    1648:	f8 01       	movw	r30, r16
    164a:	27 ff       	sbrs	r18, 7
    164c:	07 c0       	rjmp	.+14     	; 0x165c <vfprintf+0x1ec>
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	0c 5f       	subi	r16, 0xFC	; 252
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	08 c0       	rjmp	.+16     	; 0x166c <vfprintf+0x1fc>
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	88 27       	eor	r24, r24
    1662:	77 fd       	sbrc	r23, 7
    1664:	80 95       	com	r24
    1666:	98 2f       	mov	r25, r24
    1668:	0e 5f       	subi	r16, 0xFE	; 254
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	2f 76       	andi	r18, 0x6F	; 111
    166e:	b2 2e       	mov	r11, r18
    1670:	97 ff       	sbrs	r25, 7
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <vfprintf+0x216>
    1674:	90 95       	com	r25
    1676:	80 95       	com	r24
    1678:	70 95       	com	r23
    167a:	61 95       	neg	r22
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	20 68       	ori	r18, 0x80	; 128
    1684:	b2 2e       	mov	r11, r18
    1686:	2a e0       	ldi	r18, 0x0A	; 10
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	a4 01       	movw	r20, r8
    168c:	f5 d0       	rcall	.+490    	; 0x1878 <__ultoa_invert>
    168e:	a8 2e       	mov	r10, r24
    1690:	a8 18       	sub	r10, r8
    1692:	43 c0       	rjmp	.+134    	; 0x171a <vfprintf+0x2aa>
    1694:	85 37       	cpi	r24, 0x75	; 117
    1696:	29 f4       	brne	.+10     	; 0x16a2 <vfprintf+0x232>
    1698:	2f 7e       	andi	r18, 0xEF	; 239
    169a:	b2 2e       	mov	r11, r18
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	25 c0       	rjmp	.+74     	; 0x16ec <vfprintf+0x27c>
    16a2:	f2 2f       	mov	r31, r18
    16a4:	f9 7f       	andi	r31, 0xF9	; 249
    16a6:	bf 2e       	mov	r11, r31
    16a8:	8f 36       	cpi	r24, 0x6F	; 111
    16aa:	c1 f0       	breq	.+48     	; 0x16dc <vfprintf+0x26c>
    16ac:	18 f4       	brcc	.+6      	; 0x16b4 <vfprintf+0x244>
    16ae:	88 35       	cpi	r24, 0x58	; 88
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <vfprintf+0x260>
    16b2:	ad c0       	rjmp	.+346    	; 0x180e <vfprintf+0x39e>
    16b4:	80 37       	cpi	r24, 0x70	; 112
    16b6:	19 f0       	breq	.+6      	; 0x16be <vfprintf+0x24e>
    16b8:	88 37       	cpi	r24, 0x78	; 120
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <vfprintf+0x254>
    16bc:	a8 c0       	rjmp	.+336    	; 0x180e <vfprintf+0x39e>
    16be:	2f 2f       	mov	r18, r31
    16c0:	20 61       	ori	r18, 0x10	; 16
    16c2:	b2 2e       	mov	r11, r18
    16c4:	b4 fe       	sbrs	r11, 4
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <vfprintf+0x272>
    16c8:	8b 2d       	mov	r24, r11
    16ca:	84 60       	ori	r24, 0x04	; 4
    16cc:	b8 2e       	mov	r11, r24
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <vfprintf+0x272>
    16d0:	24 ff       	sbrs	r18, 4
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <vfprintf+0x278>
    16d4:	9f 2f       	mov	r25, r31
    16d6:	96 60       	ori	r25, 0x06	; 6
    16d8:	b9 2e       	mov	r11, r25
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0x278>
    16dc:	28 e0       	ldi	r18, 0x08	; 8
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <vfprintf+0x27c>
    16e2:	20 e1       	ldi	r18, 0x10	; 16
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x27c>
    16e8:	20 e1       	ldi	r18, 0x10	; 16
    16ea:	32 e0       	ldi	r19, 0x02	; 2
    16ec:	f8 01       	movw	r30, r16
    16ee:	b7 fe       	sbrs	r11, 7
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <vfprintf+0x290>
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0c 5f       	subi	r16, 0xFC	; 252
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x29c>
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 5f       	subi	r16, 0xFE	; 254
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	a4 01       	movw	r20, r8
    170e:	b4 d0       	rcall	.+360    	; 0x1878 <__ultoa_invert>
    1710:	a8 2e       	mov	r10, r24
    1712:	a8 18       	sub	r10, r8
    1714:	fb 2d       	mov	r31, r11
    1716:	ff 77       	andi	r31, 0x7F	; 127
    1718:	bf 2e       	mov	r11, r31
    171a:	b6 fe       	sbrs	r11, 6
    171c:	0b c0       	rjmp	.+22     	; 0x1734 <vfprintf+0x2c4>
    171e:	2b 2d       	mov	r18, r11
    1720:	2e 7f       	andi	r18, 0xFE	; 254
    1722:	a5 14       	cp	r10, r5
    1724:	50 f4       	brcc	.+20     	; 0x173a <vfprintf+0x2ca>
    1726:	b4 fe       	sbrs	r11, 4
    1728:	0a c0       	rjmp	.+20     	; 0x173e <vfprintf+0x2ce>
    172a:	b2 fc       	sbrc	r11, 2
    172c:	08 c0       	rjmp	.+16     	; 0x173e <vfprintf+0x2ce>
    172e:	2b 2d       	mov	r18, r11
    1730:	2e 7e       	andi	r18, 0xEE	; 238
    1732:	05 c0       	rjmp	.+10     	; 0x173e <vfprintf+0x2ce>
    1734:	7a 2c       	mov	r7, r10
    1736:	2b 2d       	mov	r18, r11
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x2d0>
    173a:	7a 2c       	mov	r7, r10
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x2d0>
    173e:	75 2c       	mov	r7, r5
    1740:	24 ff       	sbrs	r18, 4
    1742:	0d c0       	rjmp	.+26     	; 0x175e <vfprintf+0x2ee>
    1744:	fe 01       	movw	r30, r28
    1746:	ea 0d       	add	r30, r10
    1748:	f1 1d       	adc	r31, r1
    174a:	80 81       	ld	r24, Z
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	11 f4       	brne	.+4      	; 0x1754 <vfprintf+0x2e4>
    1750:	29 7e       	andi	r18, 0xE9	; 233
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x2f6>
    1754:	22 ff       	sbrs	r18, 2
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <vfprintf+0x2f4>
    1758:	73 94       	inc	r7
    175a:	73 94       	inc	r7
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <vfprintf+0x2f6>
    175e:	82 2f       	mov	r24, r18
    1760:	86 78       	andi	r24, 0x86	; 134
    1762:	09 f0       	breq	.+2      	; 0x1766 <vfprintf+0x2f6>
    1764:	73 94       	inc	r7
    1766:	23 fd       	sbrc	r18, 3
    1768:	12 c0       	rjmp	.+36     	; 0x178e <vfprintf+0x31e>
    176a:	20 ff       	sbrs	r18, 0
    176c:	06 c0       	rjmp	.+12     	; 0x177a <vfprintf+0x30a>
    176e:	5a 2c       	mov	r5, r10
    1770:	73 14       	cp	r7, r3
    1772:	18 f4       	brcc	.+6      	; 0x177a <vfprintf+0x30a>
    1774:	53 0c       	add	r5, r3
    1776:	57 18       	sub	r5, r7
    1778:	73 2c       	mov	r7, r3
    177a:	73 14       	cp	r7, r3
    177c:	60 f4       	brcc	.+24     	; 0x1796 <vfprintf+0x326>
    177e:	b7 01       	movw	r22, r14
    1780:	80 e2       	ldi	r24, 0x20	; 32
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	2c 87       	std	Y+12, r18	; 0x0c
    1786:	f0 dd       	rcall	.-1056   	; 0x1368 <fputc>
    1788:	73 94       	inc	r7
    178a:	2c 85       	ldd	r18, Y+12	; 0x0c
    178c:	f6 cf       	rjmp	.-20     	; 0x177a <vfprintf+0x30a>
    178e:	73 14       	cp	r7, r3
    1790:	10 f4       	brcc	.+4      	; 0x1796 <vfprintf+0x326>
    1792:	37 18       	sub	r3, r7
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <vfprintf+0x328>
    1796:	31 2c       	mov	r3, r1
    1798:	24 ff       	sbrs	r18, 4
    179a:	11 c0       	rjmp	.+34     	; 0x17be <vfprintf+0x34e>
    179c:	b7 01       	movw	r22, r14
    179e:	80 e3       	ldi	r24, 0x30	; 48
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2c 87       	std	Y+12, r18	; 0x0c
    17a4:	e1 dd       	rcall	.-1086   	; 0x1368 <fputc>
    17a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17a8:	22 ff       	sbrs	r18, 2
    17aa:	16 c0       	rjmp	.+44     	; 0x17d8 <vfprintf+0x368>
    17ac:	21 ff       	sbrs	r18, 1
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x346>
    17b0:	88 e5       	ldi	r24, 0x58	; 88
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <vfprintf+0x34a>
    17b6:	88 e7       	ldi	r24, 0x78	; 120
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	b7 01       	movw	r22, r14
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <vfprintf+0x366>
    17be:	82 2f       	mov	r24, r18
    17c0:	86 78       	andi	r24, 0x86	; 134
    17c2:	51 f0       	breq	.+20     	; 0x17d8 <vfprintf+0x368>
    17c4:	21 fd       	sbrc	r18, 1
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x35c>
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <vfprintf+0x35e>
    17cc:	8b e2       	ldi	r24, 0x2B	; 43
    17ce:	27 fd       	sbrc	r18, 7
    17d0:	8d e2       	ldi	r24, 0x2D	; 45
    17d2:	b7 01       	movw	r22, r14
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	c8 dd       	rcall	.-1136   	; 0x1368 <fputc>
    17d8:	a5 14       	cp	r10, r5
    17da:	30 f4       	brcc	.+12     	; 0x17e8 <vfprintf+0x378>
    17dc:	b7 01       	movw	r22, r14
    17de:	80 e3       	ldi	r24, 0x30	; 48
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	c2 dd       	rcall	.-1148   	; 0x1368 <fputc>
    17e4:	5a 94       	dec	r5
    17e6:	f8 cf       	rjmp	.-16     	; 0x17d8 <vfprintf+0x368>
    17e8:	aa 94       	dec	r10
    17ea:	f4 01       	movw	r30, r8
    17ec:	ea 0d       	add	r30, r10
    17ee:	f1 1d       	adc	r31, r1
    17f0:	80 81       	ld	r24, Z
    17f2:	b7 01       	movw	r22, r14
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b8 dd       	rcall	.-1168   	; 0x1368 <fputc>
    17f8:	a1 10       	cpse	r10, r1
    17fa:	f6 cf       	rjmp	.-20     	; 0x17e8 <vfprintf+0x378>
    17fc:	33 20       	and	r3, r3
    17fe:	09 f4       	brne	.+2      	; 0x1802 <vfprintf+0x392>
    1800:	5d ce       	rjmp	.-838    	; 0x14bc <vfprintf+0x4c>
    1802:	b7 01       	movw	r22, r14
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	af dd       	rcall	.-1186   	; 0x1368 <fputc>
    180a:	3a 94       	dec	r3
    180c:	f7 cf       	rjmp	.-18     	; 0x17fc <vfprintf+0x38c>
    180e:	f7 01       	movw	r30, r14
    1810:	86 81       	ldd	r24, Z+6	; 0x06
    1812:	97 81       	ldd	r25, Z+7	; 0x07
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x3aa>
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	2c 96       	adiw	r28, 0x0c	; 12
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	8f 90       	pop	r8
    183e:	7f 90       	pop	r7
    1840:	6f 90       	pop	r6
    1842:	5f 90       	pop	r5
    1844:	4f 90       	pop	r4
    1846:	3f 90       	pop	r3
    1848:	2f 90       	pop	r2
    184a:	08 95       	ret

0000184c <strnlen_P>:
    184c:	fc 01       	movw	r30, r24
    184e:	05 90       	lpm	r0, Z+
    1850:	61 50       	subi	r22, 0x01	; 1
    1852:	70 40       	sbci	r23, 0x00	; 0
    1854:	01 10       	cpse	r0, r1
    1856:	d8 f7       	brcc	.-10     	; 0x184e <strnlen_P+0x2>
    1858:	80 95       	com	r24
    185a:	90 95       	com	r25
    185c:	8e 0f       	add	r24, r30
    185e:	9f 1f       	adc	r25, r31
    1860:	08 95       	ret

00001862 <strnlen>:
    1862:	fc 01       	movw	r30, r24
    1864:	61 50       	subi	r22, 0x01	; 1
    1866:	70 40       	sbci	r23, 0x00	; 0
    1868:	01 90       	ld	r0, Z+
    186a:	01 10       	cpse	r0, r1
    186c:	d8 f7       	brcc	.-10     	; 0x1864 <strnlen+0x2>
    186e:	80 95       	com	r24
    1870:	90 95       	com	r25
    1872:	8e 0f       	add	r24, r30
    1874:	9f 1f       	adc	r25, r31
    1876:	08 95       	ret

00001878 <__ultoa_invert>:
    1878:	fa 01       	movw	r30, r20
    187a:	aa 27       	eor	r26, r26
    187c:	28 30       	cpi	r18, 0x08	; 8
    187e:	51 f1       	breq	.+84     	; 0x18d4 <__ultoa_invert+0x5c>
    1880:	20 31       	cpi	r18, 0x10	; 16
    1882:	81 f1       	breq	.+96     	; 0x18e4 <__ultoa_invert+0x6c>
    1884:	e8 94       	clt
    1886:	6f 93       	push	r22
    1888:	6e 7f       	andi	r22, 0xFE	; 254
    188a:	6e 5f       	subi	r22, 0xFE	; 254
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	af 4f       	sbci	r26, 0xFF	; 255
    1894:	b1 e0       	ldi	r27, 0x01	; 1
    1896:	3e d0       	rcall	.+124    	; 0x1914 <__ultoa_invert+0x9c>
    1898:	b4 e0       	ldi	r27, 0x04	; 4
    189a:	3c d0       	rcall	.+120    	; 0x1914 <__ultoa_invert+0x9c>
    189c:	67 0f       	add	r22, r23
    189e:	78 1f       	adc	r23, r24
    18a0:	89 1f       	adc	r24, r25
    18a2:	9a 1f       	adc	r25, r26
    18a4:	a1 1d       	adc	r26, r1
    18a6:	68 0f       	add	r22, r24
    18a8:	79 1f       	adc	r23, r25
    18aa:	8a 1f       	adc	r24, r26
    18ac:	91 1d       	adc	r25, r1
    18ae:	a1 1d       	adc	r26, r1
    18b0:	6a 0f       	add	r22, r26
    18b2:	71 1d       	adc	r23, r1
    18b4:	81 1d       	adc	r24, r1
    18b6:	91 1d       	adc	r25, r1
    18b8:	a1 1d       	adc	r26, r1
    18ba:	20 d0       	rcall	.+64     	; 0x18fc <__ultoa_invert+0x84>
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <__ultoa_invert+0x48>
    18be:	68 94       	set
    18c0:	3f 91       	pop	r19
    18c2:	2a e0       	ldi	r18, 0x0A	; 10
    18c4:	26 9f       	mul	r18, r22
    18c6:	11 24       	eor	r1, r1
    18c8:	30 19       	sub	r19, r0
    18ca:	30 5d       	subi	r19, 0xD0	; 208
    18cc:	31 93       	st	Z+, r19
    18ce:	de f6       	brtc	.-74     	; 0x1886 <__ultoa_invert+0xe>
    18d0:	cf 01       	movw	r24, r30
    18d2:	08 95       	ret
    18d4:	46 2f       	mov	r20, r22
    18d6:	47 70       	andi	r20, 0x07	; 7
    18d8:	40 5d       	subi	r20, 0xD0	; 208
    18da:	41 93       	st	Z+, r20
    18dc:	b3 e0       	ldi	r27, 0x03	; 3
    18de:	0f d0       	rcall	.+30     	; 0x18fe <__ultoa_invert+0x86>
    18e0:	c9 f7       	brne	.-14     	; 0x18d4 <__ultoa_invert+0x5c>
    18e2:	f6 cf       	rjmp	.-20     	; 0x18d0 <__ultoa_invert+0x58>
    18e4:	46 2f       	mov	r20, r22
    18e6:	4f 70       	andi	r20, 0x0F	; 15
    18e8:	40 5d       	subi	r20, 0xD0	; 208
    18ea:	4a 33       	cpi	r20, 0x3A	; 58
    18ec:	18 f0       	brcs	.+6      	; 0x18f4 <__ultoa_invert+0x7c>
    18ee:	49 5d       	subi	r20, 0xD9	; 217
    18f0:	31 fd       	sbrc	r19, 1
    18f2:	40 52       	subi	r20, 0x20	; 32
    18f4:	41 93       	st	Z+, r20
    18f6:	02 d0       	rcall	.+4      	; 0x18fc <__ultoa_invert+0x84>
    18f8:	a9 f7       	brne	.-22     	; 0x18e4 <__ultoa_invert+0x6c>
    18fa:	ea cf       	rjmp	.-44     	; 0x18d0 <__ultoa_invert+0x58>
    18fc:	b4 e0       	ldi	r27, 0x04	; 4
    18fe:	a6 95       	lsr	r26
    1900:	97 95       	ror	r25
    1902:	87 95       	ror	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	ba 95       	dec	r27
    190a:	c9 f7       	brne	.-14     	; 0x18fe <__ultoa_invert+0x86>
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	61 05       	cpc	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	08 95       	ret
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	0a 2e       	mov	r0, r26
    191a:	06 94       	lsr	r0
    191c:	57 95       	ror	r21
    191e:	47 95       	ror	r20
    1920:	37 95       	ror	r19
    1922:	27 95       	ror	r18
    1924:	ba 95       	dec	r27
    1926:	c9 f7       	brne	.-14     	; 0x191a <__ultoa_invert+0xa2>
    1928:	62 0f       	add	r22, r18
    192a:	73 1f       	adc	r23, r19
    192c:	84 1f       	adc	r24, r20
    192e:	95 1f       	adc	r25, r21
    1930:	a0 1d       	adc	r26, r0
    1932:	08 95       	ret

00001934 <_exit>:
    1934:	f8 94       	cli

00001936 <__stop_program>:
    1936:	ff cf       	rjmp	.-2      	; 0x1936 <__stop_program>

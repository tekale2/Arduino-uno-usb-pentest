
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00001dd4  00001e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001dc  008001dc  00001f44  2**0
                  ALLOC
  3 .stab         00000fc0  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df3  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003cf7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006f0  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d76c  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000031de  00000000  00000000  00011b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c7f  00000000  00000000  00014d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a4  00000000  00000000  000199c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000046c9  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007a29  00000000  00000000  0001f231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  00026c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_10>
      2c:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_11>
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000d8 <ManufacturerString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f2 <LanguageString>:
      f2:	04 03 09 04                                         ....

000000f6 <ConfigurationDescriptor>:
      f6:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 05 07     ................
     136:	05 82 02 10 00 05 09 04 02 00 02 08 06 50 00 07     .............P..
				ReportSize     -= 4;
     146:	05 84 02 40 00 05 07 05 05 02 40 00 05              ...@......@..

00000153 <DeviceDescriptor>:
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     153:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
				ReportSize     -= 2;
     163:	dc 01 00                                            ...

00000166 <__ctors_end>:
				ReportData     += 2;
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
				break;
     16c:	d0 e2       	ldi	r29, 0x20	; 32

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e4 ed       	ldi	r30, 0xD4	; 212
				ReportSize     -= 1;
     17a:	fd e1       	ldi	r31, 0x1D	; 29
     17c:	00 e0       	ldi	r16, 0x00	; 0
				ReportData     += 1;
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	0d 92       	st	X+, r0
     186:	ac 3d       	cpi	r26, 0xDC	; 220
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	ac ed       	ldi	r26, 0xDC	; 220
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 3f       	cpi	r26, 0xF8	; 248
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	79 d0       	rcall	.+242    	; 0x290 <main>
     19e:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <LEDs_SetAllLEDs>:
     1a4:	9b b1       	in	r25, 0x0b	; 11
     1a6:	9f 70       	andi	r25, 0x0F	; 15
     1a8:	98 2b       	or	r25, r24

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	9b b9       	out	0x0b, r25	; 11
     1ac:	08 95       	ret

000001ae <SetupHardware>:
     1ae:	84 b7       	in	r24, 0x34	; 52
     1b0:	87 7f       	andi	r24, 0xF7	; 247
     1b2:	84 bf       	out	0x34, r24	; 52
				break;
     1b4:	88 e1       	ldi	r24, 0x18	; 24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	80 93 60 00 	sts	0x0060, r24
     1be:	10 92 60 00 	sts	0x0060, r1
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	80 e8       	ldi	r24, 0x80	; 128
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	80 93 61 00 	sts	0x0061, r24
     1d0:	90 93 61 00 	sts	0x0061, r25
     1d4:	0f be       	out	0x3f, r0	; 63
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	8a b1       	in	r24, 0x0a	; 10
     1d8:	80 6f       	ori	r24, 0xF0	; 240
     1da:	8a b9       	out	0x0a, r24	; 10
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	8b b1       	in	r24, 0x0b	; 11
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	8b b9       	out	0x0b, r24	; 11
     1e2:	84 b1       	in	r24, 0x04	; 4
     1e4:	8f 71       	andi	r24, 0x1F	; 31
     1e6:	84 b9       	out	0x04, r24	; 4
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	8d b1       	in	r24, 0x0d	; 13
     1ea:	8f 7c       	andi	r24, 0xCF	; 207
				break;
     1ec:	8d b9       	out	0x0d, r24	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	85 b1       	in	r24, 0x05	; 5
     1f0:	80 6e       	ori	r24, 0xE0	; 224
     1f2:	85 b9       	out	0x05, r24	; 5
     1f4:	8e b1       	in	r24, 0x0e	; 14
     1f6:	80 63       	ori	r24, 0x30	; 48
     1f8:	8e b9       	out	0x0e, r24	; 14
     1fa:	8d b1       	in	r24, 0x0d	; 13
     1fc:	83 60       	ori	r24, 0x03	; 3
     1fe:	8d b9       	out	0x0d, r24	; 13
     200:	8e b1       	in	r24, 0x0e	; 14
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	83 60       	ori	r24, 0x03	; 3
     204:	8e b9       	out	0x0e, r24	; 14
				break;
     206:	20 9a       	sbi	0x04, 0	; 4
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	28 9a       	sbi	0x05, 0	; 5
     20a:	84 b1       	in	r24, 0x04	; 4
     20c:	86 60       	ori	r24, 0x06	; 6
     20e:	84 b9       	out	0x04, r24	; 4
     210:	23 98       	cbi	0x04, 3	; 4
     212:	2b 9a       	sbi	0x05, 3	; 5
     214:	8d b5       	in	r24, 0x2d	; 45
     216:	81 60       	ori	r24, 0x01	; 1
     218:	8d bd       	out	0x2d, r24	; 45
     21a:	20 98       	cbi	0x04, 0	; 4
     21c:	8c e5       	ldi	r24, 0x5C	; 92
     21e:	8c bd       	out	0x2c, r24	; 44
     220:	0e 94 11 09 	call	0x1222	; 0x1222 <USB_Init>
     224:	90 d3       	rcall	.+1824   	; 0x946 <DataflashManager_CheckDataflashOperation>
     226:	81 11       	cpse	r24, r1
     228:	03 c0       	rjmp	.+6      	; 0x230 <SetupHardware+0x82>
     22a:	80 e9       	ldi	r24, 0x90	; 144
     22c:	bb df       	rcall	.-138    	; 0x1a4 <LEDs_SetAllLEDs>
     22e:	ff cf       	rjmp	.-2      	; 0x22e <SetupHardware+0x80>
     230:	39 c3       	rjmp	.+1650   	; 0x8a4 <DataflashManager_ResetDataflashProtections>

00000232 <CheckJoystickMovement>:
     232:	93 b1       	in	r25, 0x03	; 3
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	8c b1       	in	r24, 0x0c	; 12
     236:	80 95       	com	r24
     238:	80 73       	andi	r24, 0x30	; 48
     23a:	86 95       	lsr	r24
     23c:	90 95       	com	r25
     23e:	90 7e       	andi	r25, 0xE0	; 224
     240:	89 2b       	or	r24, r25
     242:	87 fd       	sbrc	r24, 7
     244:	0b c0       	rjmp	.+22     	; 0x25c <CheckJoystickMovement+0x2a>
     246:	84 fd       	sbrc	r24, 4
     248:	0c c0       	rjmp	.+24     	; 0x262 <CheckJoystickMovement+0x30>
     24a:	86 fd       	sbrc	r24, 6
     24c:	0d c0       	rjmp	.+26     	; 0x268 <CheckJoystickMovement+0x36>
     24e:	83 fd       	sbrc	r24, 3
     250:	0e c0       	rjmp	.+28     	; 0x26e <CheckJoystickMovement+0x3c>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	85 fd       	sbrc	r24, 5
     254:	0f c0       	rjmp	.+30     	; 0x274 <CheckJoystickMovement+0x42>
     256:	10 92 dc 01 	sts	0x01DC, r1
     25a:	08 95       	ret
     25c:	8e ec       	ldi	r24, 0xCE	; 206
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	0b c0       	rjmp	.+22     	; 0x278 <CheckJoystickMovement+0x46>
     262:	8e eb       	ldi	r24, 0xBE	; 190
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	08 c0       	rjmp	.+16     	; 0x278 <CheckJoystickMovement+0x46>
     268:	8e ea       	ldi	r24, 0xAE	; 174
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <CheckJoystickMovement+0x46>
     26e:	8d e9       	ldi	r24, 0x9D	; 157
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	91 e0       	ldi	r25, 0x01	; 1
				break;
     272:	02 c0       	rjmp	.+4      	; 0x278 <CheckJoystickMovement+0x46>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	8a e8       	ldi	r24, 0x8A	; 138
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	20 91 dc 01 	lds	r18, 0x01DC
     27c:	21 11       	cpse	r18, r1
     27e:	07 c0       	rjmp	.+14     	; 0x28e <CheckJoystickMovement+0x5c>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	20 93 dc 01 	sts	0x01DC, r18

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	6d ed       	ldi	r22, 0xDD	; 221
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <fputs>
     28e:	08 95       	ret

00000290 <main>:
				break;
     290:	8e df       	rcall	.-228    	; 0x1ae <SetupHardware>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	6d ed       	ldi	r22, 0xDD	; 221
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	89 e3       	ldi	r24, 0x39	; 57
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 85 0c 	call	0x190a	; 0x190a <CDC_Device_CreateStream>
     29e:	80 e1       	ldi	r24, 0x10	; 16
				break;
     2a0:	81 df       	rcall	.-254    	; 0x1a4 <LEDs_SetAllLEDs>

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	78 94       	sei
     2a4:	c6 df       	rcall	.-116    	; 0x232 <CheckJoystickMovement>
     2a6:	89 e3       	ldi	r24, 0x39	; 57
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 4b 0c 	call	0x1896	; 0x1896 <CDC_Device_ReceiveByte>
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	89 e3       	ldi	r24, 0x39	; 57
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 35 0c 	call	0x186a	; 0x186a <CDC_Device_USBTask>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <MS_Device_USBTask>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	0e 94 91 0b 	call	0x1722	; 0x1722 <USB_USBTask>
     2c2:	f0 cf       	rjmp	.-32     	; 0x2a4 <main+0x14>

000002c4 <EVENT_USB_Device_Connect>:
     2c4:	80 ea       	ldi	r24, 0xA0	; 160
     2c6:	6e cf       	rjmp	.-292    	; 0x1a4 <LEDs_SetAllLEDs>

000002c8 <EVENT_USB_Device_Disconnect>:
     2c8:	80 e1       	ldi	r24, 0x10	; 16
     2ca:	6c cf       	rjmp	.-296    	; 0x1a4 <LEDs_SetAllLEDs>

000002cc <EVENT_USB_Device_ConfigurationChanged>:
				break;
     2cc:	cf 93       	push	r28
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	89 e3       	ldi	r24, 0x39	; 57
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 ad 0b 	call	0x175a	; 0x175a <CDC_Device_ConfigureEndpoints>
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	c8 2f       	mov	r28, r24
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	91 e0       	ldi	r25, 0x01	; 1

				if (ParserData->UsingReportIDs)
     2dc:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <MS_Device_ConfigureEndpoints>
     2e0:	88 23       	and	r24, r24
     2e2:	21 f0       	breq	.+8      	; 0x2ec <EVENT_USB_Device_ConfigurationChanged+0x20>
     2e4:	cc 23       	and	r28, r28
     2e6:	11 f0       	breq	.+4      	; 0x2ec <EVENT_USB_Device_ConfigurationChanged+0x20>
     2e8:	80 e6       	ldi	r24, 0x60	; 96
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <EVENT_USB_Device_ConfigurationChanged+0x22>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	80 e9       	ldi	r24, 0x90	; 144
     2ee:	cf 91       	pop	r28
     2f0:	59 cf       	rjmp	.-334    	; 0x1a4 <LEDs_SetAllLEDs>

000002f2 <EVENT_USB_Device_ControlRequest>:
     2f2:	89 e3       	ldi	r24, 0x39	; 57
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 99 0c 	call	0x1932	; 0x1932 <CDC_Device_ProcessControlRequest>
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <MS_Device_ProcessControlRequest>

00000302 <CALLBACK_MS_Device_SCSICommandReceived>:
     302:	cf 93       	push	r28
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	df 93       	push	r29
     306:	ec 01       	movw	r28, r24
     308:	80 e2       	ldi	r24, 0x20	; 32
     30a:	4c df       	rcall	.-360    	; 0x1a4 <LEDs_SetAllLEDs>
     30c:	ce 01       	movw	r24, r28
     30e:	86 d3       	rcall	.+1804   	; 0xa1c <SCSI_DecodeSCSICommand>
     310:	c8 2f       	mov	r28, r24
     312:	80 e6       	ldi	r24, 0x60	; 96
     314:	47 df       	rcall	.-370    	; 0x1a4 <LEDs_SetAllLEDs>
     316:	8c 2f       	mov	r24, r28
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <CALLBACK_USB_GetDescriptor>:
     31e:	29 2f       	mov	r18, r25
     320:	33 27       	eor	r19, r19
     322:	22 30       	cpi	r18, 0x02	; 2
     324:	31 05       	cpc	r19, r1
     326:	59 f0       	breq	.+22     	; 0x33e <CALLBACK_USB_GetDescriptor+0x20>
     328:	23 30       	cpi	r18, 0x03	; 3
     32a:	31 05       	cpc	r19, r1
     32c:	69 f0       	breq	.+26     	; 0x348 <CALLBACK_USB_GetDescriptor+0x2a>
     32e:	21 30       	cpi	r18, 0x01	; 1
     330:	31 05       	cpc	r19, r1
     332:	f9 f4       	brne	.+62     	; 0x372 <CALLBACK_USB_GetDescriptor+0x54>
     334:	82 e1       	ldi	r24, 0x12	; 18
     336:	90 e0       	ldi	r25, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	23 e5       	ldi	r18, 0x53	; 83
     33a:	31 e0       	ldi	r19, 0x01	; 1
     33c:	1e c0       	rjmp	.+60     	; 0x37a <CALLBACK_USB_GetDescriptor+0x5c>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	8d e5       	ldi	r24, 0x5D	; 93
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	26 ef       	ldi	r18, 0xF6	; 246
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	19 c0       	rjmp	.+50     	; 0x37a <CALLBACK_USB_GetDescriptor+0x5c>
     348:	99 27       	eor	r25, r25
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	91 05       	cpc	r25, r1
     34e:	41 f0       	breq	.+16     	; 0x360 <CALLBACK_USB_GetDescriptor+0x42>
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	91 05       	cpc	r25, r1
     354:	41 f0       	breq	.+16     	; 0x366 <CALLBACK_USB_GetDescriptor+0x48>
     356:	89 2b       	or	r24, r25
     358:	61 f4       	brne	.+24     	; 0x372 <CALLBACK_USB_GetDescriptor+0x54>
     35a:	e2 ef       	ldi	r30, 0xF2	; 242
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	05 c0       	rjmp	.+10     	; 0x36a <CALLBACK_USB_GetDescriptor+0x4c>
     360:	e8 ed       	ldi	r30, 0xD8	; 216
     362:	f0 e0       	ldi	r31, 0x00	; 0
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	02 c0       	rjmp	.+4      	; 0x36a <CALLBACK_USB_GetDescriptor+0x4c>
     366:	e8 e9       	ldi	r30, 0x98	; 152
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	84 91       	lpm	r24, Z
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9f 01       	movw	r18, r30
     370:	04 c0       	rjmp	.+8      	; 0x37a <CALLBACK_USB_GetDescriptor+0x5c>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	20 e0       	ldi	r18, 0x00	; 0

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	fa 01       	movw	r30, r20
     37c:	31 83       	std	Z+1, r19	; 0x01
     37e:	20 83       	st	Z, r18
     380:	08 95       	ret

00000382 <Dataflash_ToggleSelectedChipCS>:
     382:	8e b1       	in	r24, 0x0e	; 14
     384:	9e b1       	in	r25, 0x0e	; 14
     386:	93 60       	ori	r25, 0x03	; 3
				break;
     388:	9e b9       	out	0x0e, r25	; 14

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	9e b1       	in	r25, 0x0e	; 14
     38c:	8c 6f       	ori	r24, 0xFC	; 252
     38e:	93 60       	ori	r25, 0x03	; 3
     390:	89 23       	and	r24, r25
     392:	8e b9       	out	0x0e, r24	; 14
     394:	08 95       	ret

00000396 <Dataflash_WaitWhileBusy>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	f5 df       	rcall	.-22     	; 0x382 <Dataflash_ToggleSelectedChipCS>
     398:	87 ed       	ldi	r24, 0xD7	; 215
     39a:	8e bd       	out	0x2e, r24	; 46
     39c:	0d b4       	in	r0, 0x2d	; 45
     39e:	07 fe       	sbrs	r0, 7
     3a0:	fd cf       	rjmp	.-6      	; 0x39c <Dataflash_WaitWhileBusy+0x6>
     3a2:	1e bc       	out	0x2e, r1	; 46
     3a4:	0d b4       	in	r0, 0x2d	; 45
     3a6:	07 fe       	sbrs	r0, 7
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <Dataflash_WaitWhileBusy+0xe>
     3aa:	0e b4       	in	r0, 0x2e	; 46
     3ac:	07 fe       	sbrs	r0, 7
     3ae:	f9 cf       	rjmp	.-14     	; 0x3a2 <Dataflash_WaitWhileBusy+0xc>
				break;
     3b0:	e8 cf       	rjmp	.-48     	; 0x382 <Dataflash_ToggleSelectedChipCS>

000003b2 <Dataflash_SendAddressBytes>:
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	9c 01       	movw	r18, r24
     3b4:	36 95       	lsr	r19
     3b6:	27 95       	ror	r18
     3b8:	56 e0       	ldi	r21, 0x06	; 6
     3ba:	96 95       	lsr	r25
     3bc:	87 95       	ror	r24
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	5a 95       	dec	r21
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <Dataflash_SendAddressBytes+0x8>
     3c2:	8e bd       	out	0x2e, r24	; 46
     3c4:	0d b4       	in	r0, 0x2d	; 45
     3c6:	07 fe       	sbrs	r0, 7
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <Dataflash_SendAddressBytes+0x12>
     3ca:	22 0f       	add	r18, r18
     3cc:	22 0f       	add	r18, r18
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	22 0f       	add	r18, r18
     3d0:	27 2b       	or	r18, r23
     3d2:	2e bd       	out	0x2e, r18	; 46

					while (CurrCollectionPath->Parent != NULL)
     3d4:	0d b4       	in	r0, 0x2d	; 45
     3d6:	07 fe       	sbrs	r0, 7
     3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <Dataflash_SendAddressBytes+0x22>
     3da:	6e bd       	out	0x2e, r22	; 46
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	0d b4       	in	r0, 0x2d	; 45
     3de:	07 fe       	sbrs	r0, 7
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <Dataflash_SendAddressBytes+0x2a>
     3e2:	08 95       	ret

000003e4 <Dataflash_SelectChipFromPage>:
     3e4:	2e b1       	in	r18, 0x0e	; 14
     3e6:	23 60       	ori	r18, 0x03	; 3
     3e8:	2e b9       	out	0x0e, r18	; 14
     3ea:	81 15       	cp	r24, r1
     3ec:	20 e4       	ldi	r18, 0x40	; 64
     3ee:	92 07       	cpc	r25, r18
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	50 f4       	brcc	.+20     	; 0x406 <Dataflash_SelectChipFromPage+0x22>
     3f2:	80 ff       	sbrs	r24, 0
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <Dataflash_SelectChipFromPage+0x1a>
     3f6:	8e b1       	in	r24, 0x0e	; 14
     3f8:	83 60       	ori	r24, 0x03	; 3
     3fa:	8d 7f       	andi	r24, 0xFD	; 253
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <Dataflash_SelectChipFromPage+0x20>
     3fe:	8e b1       	in	r24, 0x0e	; 14
     400:	83 60       	ori	r24, 0x03	; 3
     402:	8e 7f       	andi	r24, 0xFE	; 254
     404:	8e b9       	out	0x0e, r24	; 14
     406:	08 95       	ret

00000408 <DataflashManager_WriteBlocks>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	4f 92       	push	r4
     40a:	5f 92       	push	r5
     40c:	6f 92       	push	r6
     40e:	7f 92       	push	r7
     410:	8f 92       	push	r8
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15

				if (UsageListSize)
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	6c 01       	movw	r12, r24
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	89 01       	movw	r16, r18
     42c:	4a 01       	movw	r8, r20
     42e:	5b 01       	movw	r10, r22
     430:	f9 e0       	ldi	r31, 0x09	; 9
     432:	88 0c       	add	r8, r8
     434:	99 1c       	adc	r9, r9
     436:	aa 1c       	adc	r10, r10
     438:	bb 1c       	adc	r11, r11
     43a:	fa 95       	dec	r31
     43c:	d1 f7       	brne	.-12     	; 0x432 <DataflashManager_WriteBlocks+0x2a>
     43e:	aa e0       	ldi	r26, 0x0A	; 10

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	b6 94       	lsr	r11
     442:	a7 94       	ror	r10
     444:	97 94       	ror	r9
     446:	87 94       	ror	r8
     448:	aa 95       	dec	r26
     44a:	d1 f7       	brne	.-12     	; 0x440 <DataflashManager_WriteBlocks+0x38>
					  UsageList[i - 1] = UsageList[i];
     44c:	e4 01       	movw	r28, r8
     44e:	7a 01       	movw	r14, r20
     450:	fe 2c       	mov	r15, r14
     452:	ee 24       	eor	r14, r14

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	ff 0c       	add	r15, r15
     456:	ee 24       	eor	r14, r14
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	f8 22       	and	r15, r24
     45c:	c4 01       	movw	r24, r8
     45e:	c2 df       	rcall	.-124    	; 0x3e4 <Dataflash_SelectChipFromPage>
     460:	83 e5       	ldi	r24, 0x53	; 83
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	8e bd       	out	0x2e, r24	; 46
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <DataflashManager_WriteBlocks+0x5c>
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	c4 01       	movw	r24, r8
     470:	a0 df       	rcall	.-192    	; 0x3b2 <Dataflash_SendAddressBytes>
     472:	91 df       	rcall	.-222    	; 0x396 <Dataflash_WaitWhileBusy>
     474:	84 e8       	ldi	r24, 0x84	; 132
     476:	8e bd       	out	0x2e, r24	; 46
     478:	0d b4       	in	r0, 0x2d	; 45
     47a:	07 fe       	sbrs	r0, 7
     47c:	fd cf       	rjmp	.-6      	; 0x478 <DataflashManager_WriteBlocks+0x70>
     47e:	b7 01       	movw	r22, r14
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	96 df       	rcall	.-212    	; 0x3b2 <Dataflash_SendAddressBytes>
     486:	58 d6       	rcall	.+3248   	; 0x1138 <Endpoint_WaitUntilReady>
     488:	81 11       	cpse	r24, r1
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	ec c0       	rjmp	.+472    	; 0x664 <DataflashManager_WriteBlocks+0x25c>
     48c:	74 e0       	ldi	r23, 0x04	; 4
     48e:	f6 94       	lsr	r15
     490:	e7 94       	ror	r14
     492:	7a 95       	dec	r23
     494:	e1 f7       	brne	.-8      	; 0x48e <DataflashManager_WriteBlocks+0x86>
     496:	38 01       	movw	r6, r16
     498:	e5 e0       	ldi	r30, 0x05	; 5
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	66 0c       	add	r6, r6
     49c:	77 1c       	adc	r7, r7
     49e:	ea 95       	dec	r30
     4a0:	e1 f7       	brne	.-8      	; 0x49a <DataflashManager_WriteBlocks+0x92>
     4a2:	a1 2c       	mov	r10, r1
     4a4:	b1 2c       	mov	r11, r1
     4a6:	f1 2c       	mov	r15, r1
     4a8:	44 24       	eor	r4, r4
     4aa:	43 94       	inc	r4
				break;
     4ac:	01 15       	cp	r16, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	11 05       	cpc	r17, r1
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <DataflashManager_WriteBlocks+0xac>
     4b2:	bd c0       	rjmp	.+378    	; 0x62e <DataflashManager_WriteBlocks+0x226>
     4b4:	45 01       	movw	r8, r10
     4b6:	86 0c       	add	r8, r6
     4b8:	97 1c       	adc	r9, r7
     4ba:	60 e2       	ldi	r22, 0x20	; 32
     4bc:	56 2e       	mov	r5, r22
     4be:	80 91 e8 00 	lds	r24, 0x00E8
     4c2:	85 ff       	sbrs	r24, 5
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <DataflashManager_WriteBlocks+0xc6>
     4c6:	e0 e4       	ldi	r30, 0x40	; 64
     4c8:	ee 12       	cpse	r14, r30
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	43 c0       	rjmp	.+134    	; 0x552 <DataflashManager_WriteBlocks+0x14a>
     4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <DataflashManager_WriteBlocks+0xd8>
     4ce:	80 91 e8 00 	lds	r24, 0x00E8
     4d2:	8b 77       	andi	r24, 0x7B	; 123
     4d4:	80 93 e8 00 	sts	0x00E8, r24
     4d8:	2f d6       	rcall	.+3166   	; 0x1138 <Endpoint_WaitUntilReady>
     4da:	88 23       	and	r24, r24
     4dc:	a1 f3       	breq	.-24     	; 0x4c6 <DataflashManager_WriteBlocks+0xbe>
     4de:	c2 c0       	rjmp	.+388    	; 0x664 <DataflashManager_WriteBlocks+0x25c>
     4e0:	5a df       	rcall	.-332    	; 0x396 <Dataflash_WaitWhileBusy>
     4e2:	ff 20       	and	r15, r15
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	11 f0       	breq	.+4      	; 0x4ea <DataflashManager_WriteBlocks+0xe2>
     4e6:	86 e8       	ldi	r24, 0x86	; 134
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <DataflashManager_WriteBlocks+0xe4>
     4ea:	83 e8       	ldi	r24, 0x83	; 131
     4ec:	8e bd       	out	0x2e, r24	; 46
     4ee:	0d b4       	in	r0, 0x2d	; 45
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	07 fe       	sbrs	r0, 7
     4f2:	fd cf       	rjmp	.-6      	; 0x4ee <DataflashManager_WriteBlocks+0xe6>
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	ce 01       	movw	r24, r28
     4fa:	5b df       	rcall	.-330    	; 0x3b2 <Dataflash_SendAddressBytes>
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	8e b1       	in	r24, 0x0e	; 14
     500:	80 95       	com	r24
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	83 70       	andi	r24, 0x03	; 3
     504:	82 30       	cpi	r24, 0x02	; 2
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	09 f4       	brne	.+2      	; 0x50a <DataflashManager_WriteBlocks+0x102>
     508:	f4 24       	eor	r15, r4
     50a:	ce 01       	movw	r24, r28
     50c:	6b df       	rcall	.-298    	; 0x3e4 <Dataflash_SelectChipFromPage>
     50e:	f0 e4       	ldi	r31, 0x40	; 64
     510:	8f 16       	cp	r8, r31
     512:	91 04       	cpc	r9, r1
     514:	78 f4       	brcc	.+30     	; 0x534 <DataflashManager_WriteBlocks+0x12c>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	3f df       	rcall	.-386    	; 0x396 <Dataflash_WaitWhileBusy>
     518:	ff 20       	and	r15, r15
     51a:	11 f0       	breq	.+4      	; 0x520 <DataflashManager_WriteBlocks+0x118>
     51c:	85 e5       	ldi	r24, 0x55	; 85

					if (UsageListSize)
     51e:	01 c0       	rjmp	.+2      	; 0x522 <DataflashManager_WriteBlocks+0x11a>
     520:	83 e5       	ldi	r24, 0x53	; 83
     522:	8e bd       	out	0x2e, r24	; 46
     524:	0d b4       	in	r0, 0x2d	; 45
     526:	07 fe       	sbrs	r0, 7
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	fd cf       	rjmp	.-6      	; 0x524 <DataflashManager_WriteBlocks+0x11c>
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	ce 01       	movw	r24, r28
     530:	40 df       	rcall	.-384    	; 0x3b2 <Dataflash_SendAddressBytes>
     532:	31 df       	rcall	.-414    	; 0x396 <Dataflash_WaitWhileBusy>
     534:	ff 20       	and	r15, r15
     536:	11 f0       	breq	.+4      	; 0x53c <DataflashManager_WriteBlocks+0x134>
     538:	87 e8       	ldi	r24, 0x87	; 135
     53a:	01 c0       	rjmp	.+2      	; 0x53e <DataflashManager_WriteBlocks+0x136>
     53c:	84 e8       	ldi	r24, 0x84	; 132

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	8e bd       	out	0x2e, r24	; 46
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <DataflashManager_WriteBlocks+0x138>
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
						  UsageList[i - 1] = UsageList[i];
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	31 df       	rcall	.-414    	; 0x3b2 <Dataflash_SendAddressBytes>
     550:	e1 2c       	mov	r14, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	80 91 f1 00 	lds	r24, 0x00F1
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	8e bd       	out	0x2e, r24	; 46
     558:	0d b4       	in	r0, 0x2d	; 45
     55a:	07 fe       	sbrs	r0, 7
     55c:	fd cf       	rjmp	.-6      	; 0x558 <DataflashManager_WriteBlocks+0x150>
     55e:	80 91 f1 00 	lds	r24, 0x00F1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     562:	8e bd       	out	0x2e, r24	; 46
     564:	0d b4       	in	r0, 0x2d	; 45
     566:	07 fe       	sbrs	r0, 7
     568:	fd cf       	rjmp	.-6      	; 0x564 <DataflashManager_WriteBlocks+0x15c>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	80 91 f1 00 	lds	r24, 0x00F1
     56e:	8e bd       	out	0x2e, r24	; 46
     570:	0d b4       	in	r0, 0x2d	; 45
     572:	07 fe       	sbrs	r0, 7
     574:	fd cf       	rjmp	.-6      	; 0x570 <DataflashManager_WriteBlocks+0x168>
     576:	80 91 f1 00 	lds	r24, 0x00F1
     57a:	8e bd       	out	0x2e, r24	; 46
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	0d b4       	in	r0, 0x2d	; 45
     57e:	07 fe       	sbrs	r0, 7
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	fd cf       	rjmp	.-6      	; 0x57c <DataflashManager_WriteBlocks+0x174>
     582:	80 91 f1 00 	lds	r24, 0x00F1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     586:	8e bd       	out	0x2e, r24	; 46
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	0d b4       	in	r0, 0x2d	; 45
     58a:	07 fe       	sbrs	r0, 7
     58c:	fd cf       	rjmp	.-6      	; 0x588 <DataflashManager_WriteBlocks+0x180>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	80 91 f1 00 	lds	r24, 0x00F1

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	8e bd       	out	0x2e, r24	; 46
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_WriteBlocks+0x18c>
     59a:	80 91 f1 00 	lds	r24, 0x00F1
     59e:	8e bd       	out	0x2e, r24	; 46
     5a0:	0d b4       	in	r0, 0x2d	; 45
     5a2:	07 fe       	sbrs	r0, 7
     5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <DataflashManager_WriteBlocks+0x198>
     5a6:	80 91 f1 00 	lds	r24, 0x00F1
     5aa:	8e bd       	out	0x2e, r24	; 46

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	0d b4       	in	r0, 0x2d	; 45
     5ae:	07 fe       	sbrs	r0, 7
     5b0:	fd cf       	rjmp	.-6      	; 0x5ac <DataflashManager_WriteBlocks+0x1a4>
     5b2:	80 91 f1 00 	lds	r24, 0x00F1
     5b6:	8e bd       	out	0x2e, r24	; 46
     5b8:	0d b4       	in	r0, 0x2d	; 45
     5ba:	07 fe       	sbrs	r0, 7

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <DataflashManager_WriteBlocks+0x1b0>
     5be:	80 91 f1 00 	lds	r24, 0x00F1
     5c2:	8e bd       	out	0x2e, r24	; 46
     5c4:	0d b4       	in	r0, 0x2d	; 45
     5c6:	07 fe       	sbrs	r0, 7
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <DataflashManager_WriteBlocks+0x1bc>
     5ca:	80 91 f1 00 	lds	r24, 0x00F1
     5ce:	8e bd       	out	0x2e, r24	; 46
     5d0:	0d b4       	in	r0, 0x2d	; 45
     5d2:	07 fe       	sbrs	r0, 7
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <DataflashManager_WriteBlocks+0x1c8>
     5d6:	80 91 f1 00 	lds	r24, 0x00F1
     5da:	8e bd       	out	0x2e, r24	; 46
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <DataflashManager_WriteBlocks+0x1d4>
     5e2:	80 91 f1 00 	lds	r24, 0x00F1
     5e6:	8e bd       	out	0x2e, r24	; 46
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_WriteBlocks+0x1e0>
     5ee:	80 91 f1 00 	lds	r24, 0x00F1
     5f2:	8e bd       	out	0x2e, r24	; 46

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	0d b4       	in	r0, 0x2d	; 45
     5f6:	07 fe       	sbrs	r0, 7
     5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <DataflashManager_WriteBlocks+0x1ec>
     5fa:	80 91 f1 00 	lds	r24, 0x00F1
					  return HID_PARSE_InsufficientReportItems;
     5fe:	8e bd       	out	0x2e, r24	; 46
     600:	0d b4       	in	r0, 0x2d	; 45

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	07 fe       	sbrs	r0, 7
     604:	fd cf       	rjmp	.-6      	; 0x600 <DataflashManager_WriteBlocks+0x1f8>
     606:	80 91 f1 00 	lds	r24, 0x00F1
     60a:	8e bd       	out	0x2e, r24	; 46
     60c:	0d b4       	in	r0, 0x2d	; 45
     60e:	07 fe       	sbrs	r0, 7
     610:	fd cf       	rjmp	.-6      	; 0x60c <DataflashManager_WriteBlocks+0x204>
     612:	e3 94       	inc	r14
     614:	f6 01       	movw	r30, r12
     616:	80 ad       	ldd	r24, Z+56	; 0x38
     618:	81 11       	cpse	r24, r1
     61a:	24 c0       	rjmp	.+72     	; 0x664 <DataflashManager_WriteBlocks+0x25c>
     61c:	5a 94       	dec	r5
     61e:	09 f0       	breq	.+2      	; 0x622 <DataflashManager_WriteBlocks+0x21a>
     620:	4e cf       	rjmp	.-356    	; 0x4be <DataflashManager_WriteBlocks+0xb6>
     622:	01 50       	subi	r16, 0x01	; 1
     624:	11 09       	sbc	r17, r1
     626:	f0 e2       	ldi	r31, 0x20	; 32
     628:	af 1a       	sub	r10, r31
     62a:	b1 08       	sbc	r11, r1
     62c:	3f cf       	rjmp	.-386    	; 0x4ac <DataflashManager_WriteBlocks+0xa4>
     62e:	b3 de       	rcall	.-666    	; 0x396 <Dataflash_WaitWhileBusy>
     630:	ff 20       	and	r15, r15
     632:	11 f0       	breq	.+4      	; 0x638 <DataflashManager_WriteBlocks+0x230>
     634:	86 e8       	ldi	r24, 0x86	; 134
     636:	01 c0       	rjmp	.+2      	; 0x63a <DataflashManager_WriteBlocks+0x232>
     638:	83 e8       	ldi	r24, 0x83	; 131
     63a:	8e bd       	out	0x2e, r24	; 46
     63c:	0d b4       	in	r0, 0x2d	; 45
     63e:	07 fe       	sbrs	r0, 7
     640:	fd cf       	rjmp	.-6      	; 0x63c <DataflashManager_WriteBlocks+0x234>
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	ce 01       	movw	r24, r28
     648:	b4 de       	rcall	.-664    	; 0x3b2 <Dataflash_SendAddressBytes>
     64a:	a5 de       	rcall	.-694    	; 0x396 <Dataflash_WaitWhileBusy>
     64c:	80 91 e8 00 	lds	r24, 0x00E8
     650:	85 fd       	sbrc	r24, 5
     652:	05 c0       	rjmp	.+10     	; 0x65e <DataflashManager_WriteBlocks+0x256>
     654:	80 91 e8 00 	lds	r24, 0x00E8
     658:	8b 77       	andi	r24, 0x7B	; 123
     65a:	80 93 e8 00 	sts	0x00E8, r24
     65e:	8e b1       	in	r24, 0x0e	; 14
     660:	83 60       	ori	r24, 0x03	; 3
     662:	8e b9       	out	0x0e, r24	; 14
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	08 95       	ret

00000686 <DataflashManager_ReadBlocks>:
     686:	8f 92       	push	r8
					  ParserData->TotalReportItems++;
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	6c 01       	movw	r12, r24
     6a0:	79 01       	movw	r14, r18
     6a2:	4a 01       	movw	r8, r20
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	5b 01       	movw	r10, r22
     6a6:	29 e0       	ldi	r18, 0x09	; 9
     6a8:	88 0c       	add	r8, r8
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	99 1c       	adc	r9, r9
     6ac:	aa 1c       	adc	r10, r10
     6ae:	bb 1c       	adc	r11, r11
     6b0:	2a 95       	dec	r18
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	d1 f7       	brne	.-12     	; 0x6a8 <DataflashManager_ReadBlocks+0x22>
     6b4:	3a e0       	ldi	r19, 0x0A	; 10
     6b6:	b6 94       	lsr	r11
     6b8:	a7 94       	ror	r10
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	97 94       	ror	r9
     6bc:	87 94       	ror	r8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	3a 95       	dec	r19
     6c0:	d1 f7       	brne	.-12     	; 0x6b6 <DataflashManager_ReadBlocks+0x30>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	e4 01       	movw	r28, r8
     6c4:	8a 01       	movw	r16, r20
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	10 2f       	mov	r17, r16
     6c8:	00 27       	eor	r16, r16
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	11 0f       	add	r17, r17
     6cc:	00 27       	eor	r16, r16

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	12 70       	andi	r17, 0x02	; 2
     6d0:	c4 01       	movw	r24, r8
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	88 de       	rcall	.-752    	; 0x3e4 <Dataflash_SelectChipFromPage>
     6d4:	82 ed       	ldi	r24, 0xD2	; 210
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	8e bd       	out	0x2e, r24	; 46

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	0d b4       	in	r0, 0x2d	; 45
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <DataflashManager_ReadBlocks+0x52>
     6de:	b8 01       	movw	r22, r16
     6e0:	c4 01       	movw	r24, r8
     6e2:	67 de       	rcall	.-818    	; 0x3b2 <Dataflash_SendAddressBytes>
     6e4:	1e bc       	out	0x2e, r1	; 46
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <DataflashManager_ReadBlocks+0x60>
     6ec:	1e bc       	out	0x2e, r1	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <DataflashManager_ReadBlocks+0x68>
     6f4:	1e bc       	out	0x2e, r1	; 46
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <DataflashManager_ReadBlocks+0x70>
     6fc:	1e bc       	out	0x2e, r1	; 46
     6fe:	0d b4       	in	r0, 0x2d	; 45
     700:	07 fe       	sbrs	r0, 7
     702:	fd cf       	rjmp	.-6      	; 0x6fe <DataflashManager_ReadBlocks+0x78>
     704:	19 d5       	rcall	.+2610   	; 0x1138 <Endpoint_WaitUntilReady>
     706:	81 11       	cpse	r24, r1
     708:	c0 c0       	rjmp	.+384    	; 0x88a <DataflashManager_ReadBlocks+0x204>
     70a:	84 e0       	ldi	r24, 0x04	; 4
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     70c:	16 95       	lsr	r17
     70e:	07 95       	ror	r16
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     710:	8a 95       	dec	r24
     712:	e1 f7       	brne	.-8      	; 0x70c <DataflashManager_ReadBlocks+0x86>
     714:	92 ed       	ldi	r25, 0xD2	; 210
     716:	b9 2e       	mov	r11, r25
     718:	e1 14       	cp	r14, r1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     71a:	f1 04       	cpc	r15, r1
     71c:	09 f4       	brne	.+2      	; 0x720 <DataflashManager_ReadBlocks+0x9a>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     71e:	a9 c0       	rjmp	.+338    	; 0x872 <DataflashManager_ReadBlocks+0x1ec>
     720:	10 e2       	ldi	r17, 0x20	; 32
     722:	80 91 e8 00 	lds	r24, 0x00E8
     726:	85 ff       	sbrs	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     728:	07 c0       	rjmp	.+14     	; 0x738 <DataflashManager_ReadBlocks+0xb2>
     72a:	00 34       	cpi	r16, 0x40	; 64

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     72c:	31 f5       	brne	.+76     	; 0x77a <DataflashManager_ReadBlocks+0xf4>
     72e:	21 96       	adiw	r28, 0x01	; 1
				if (Endpoint_WaitUntilReady())
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     730:	ce 01       	movw	r24, r28
     732:	58 de       	rcall	.-848    	; 0x3e4 <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     734:	be bc       	out	0x2e, r11	; 46

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     736:	09 c0       	rjmp	.+18     	; 0x74a <DataflashManager_ReadBlocks+0xc4>
     738:	80 91 e8 00 	lds	r24, 0x00E8
     73c:	8e 77       	andi	r24, 0x7E	; 126
     73e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     742:	fa d4       	rcall	.+2548   	; 0x1138 <Endpoint_WaitUntilReady>
     744:	88 23       	and	r24, r24
     746:	89 f3       	breq	.-30     	; 0x72a <DataflashManager_ReadBlocks+0xa4>
     748:	a0 c0       	rjmp	.+320    	; 0x88a <DataflashManager_ReadBlocks+0x204>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     74a:	0d b4       	in	r0, 0x2d	; 45
     74c:	07 fe       	sbrs	r0, 7
     74e:	fd cf       	rjmp	.-6      	; 0x74a <DataflashManager_ReadBlocks+0xc4>
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	70 e0       	ldi	r23, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     754:	ce 01       	movw	r24, r28
     756:	2d de       	rcall	.-934    	; 0x3b2 <Dataflash_SendAddressBytes>
     758:	1e bc       	out	0x2e, r1	; 46
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     75a:	0d b4       	in	r0, 0x2d	; 45
     75c:	07 fe       	sbrs	r0, 7
     75e:	fd cf       	rjmp	.-6      	; 0x75a <DataflashManager_ReadBlocks+0xd4>
     760:	1e bc       	out	0x2e, r1	; 46
     762:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     766:	fd cf       	rjmp	.-6      	; 0x762 <DataflashManager_ReadBlocks+0xdc>
     768:	1e bc       	out	0x2e, r1	; 46
     76a:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     76c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     76e:	fd cf       	rjmp	.-6      	; 0x76a <DataflashManager_ReadBlocks+0xe4>
     770:	1e bc       	out	0x2e, r1	; 46
     772:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     774:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     776:	fd cf       	rjmp	.-6      	; 0x772 <DataflashManager_ReadBlocks+0xec>
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     77e:	07 fe       	sbrs	r0, 7
     780:	fd cf       	rjmp	.-6      	; 0x77c <DataflashManager_ReadBlocks+0xf6>
     782:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     784:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     788:	1e bc       	out	0x2e, r1	; 46
     78a:	0d b4       	in	r0, 0x2d	; 45
     78c:	07 fe       	sbrs	r0, 7
				return SPDR;
     78e:	fd cf       	rjmp	.-6      	; 0x78a <DataflashManager_ReadBlocks+0x104>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     790:	8e b5       	in	r24, 0x2e	; 46
     792:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     796:	1e bc       	out	0x2e, r1	; 46
     798:	0d b4       	in	r0, 0x2d	; 45
     79a:	07 fe       	sbrs	r0, 7
				return SPDR;
     79c:	fd cf       	rjmp	.-6      	; 0x798 <DataflashManager_ReadBlocks+0x112>
     79e:	8e b5       	in	r24, 0x2e	; 46
     7a0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7a4:	1e bc       	out	0x2e, r1	; 46
     7a6:	0d b4       	in	r0, 0x2d	; 45
     7a8:	07 fe       	sbrs	r0, 7
				return SPDR;
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <DataflashManager_ReadBlocks+0x120>
     7ac:	8e b5       	in	r24, 0x2e	; 46
     7ae:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7b2:	1e bc       	out	0x2e, r1	; 46
     7b4:	0d b4       	in	r0, 0x2d	; 45
     7b6:	07 fe       	sbrs	r0, 7
				return SPDR;
     7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <DataflashManager_ReadBlocks+0x12e>
     7ba:	8e b5       	in	r24, 0x2e	; 46
     7bc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7c0:	1e bc       	out	0x2e, r1	; 46
     7c2:	0d b4       	in	r0, 0x2d	; 45
     7c4:	07 fe       	sbrs	r0, 7
				return SPDR;
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <DataflashManager_ReadBlocks+0x13c>
     7c8:	8e b5       	in	r24, 0x2e	; 46
     7ca:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7ce:	1e bc       	out	0x2e, r1	; 46
     7d0:	0d b4       	in	r0, 0x2d	; 45
     7d2:	07 fe       	sbrs	r0, 7
				return SPDR;
     7d4:	fd cf       	rjmp	.-6      	; 0x7d0 <DataflashManager_ReadBlocks+0x14a>
     7d6:	8e b5       	in	r24, 0x2e	; 46
     7d8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7dc:	1e bc       	out	0x2e, r1	; 46
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
				return SPDR;
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_ReadBlocks+0x158>
     7e4:	8e b5       	in	r24, 0x2e	; 46
     7e6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7ea:	1e bc       	out	0x2e, r1	; 46
     7ec:	0d b4       	in	r0, 0x2d	; 45
     7ee:	07 fe       	sbrs	r0, 7
				return SPDR;
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <DataflashManager_ReadBlocks+0x166>
     7f2:	8e b5       	in	r24, 0x2e	; 46
     7f4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7f8:	1e bc       	out	0x2e, r1	; 46
     7fa:	0d b4       	in	r0, 0x2d	; 45
     7fc:	07 fe       	sbrs	r0, 7
				return SPDR;
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <DataflashManager_ReadBlocks+0x174>
     800:	8e b5       	in	r24, 0x2e	; 46
     802:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     806:	1e bc       	out	0x2e, r1	; 46
     808:	0d b4       	in	r0, 0x2d	; 45
     80a:	07 fe       	sbrs	r0, 7
				return SPDR;
     80c:	fd cf       	rjmp	.-6      	; 0x808 <DataflashManager_ReadBlocks+0x182>
     80e:	8e b5       	in	r24, 0x2e	; 46
     810:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     814:	1e bc       	out	0x2e, r1	; 46
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
				return SPDR;
     81a:	fd cf       	rjmp	.-6      	; 0x816 <DataflashManager_ReadBlocks+0x190>
     81c:	8e b5       	in	r24, 0x2e	; 46
     81e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     822:	1e bc       	out	0x2e, r1	; 46
     824:	0d b4       	in	r0, 0x2d	; 45
     826:	07 fe       	sbrs	r0, 7
				return SPDR;
     828:	fd cf       	rjmp	.-6      	; 0x824 <DataflashManager_ReadBlocks+0x19e>
     82a:	8e b5       	in	r24, 0x2e	; 46
     82c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     830:	1e bc       	out	0x2e, r1	; 46
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
				return SPDR;
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ReadBlocks+0x1ac>
     838:	8e b5       	in	r24, 0x2e	; 46
     83a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     83e:	1e bc       	out	0x2e, r1	; 46
     840:	0d b4       	in	r0, 0x2d	; 45
     842:	07 fe       	sbrs	r0, 7
				return SPDR;
     844:	fd cf       	rjmp	.-6      	; 0x840 <DataflashManager_ReadBlocks+0x1ba>
     846:	8e b5       	in	r24, 0x2e	; 46
     848:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     84c:	1e bc       	out	0x2e, r1	; 46
     84e:	0d b4       	in	r0, 0x2d	; 45
     850:	07 fe       	sbrs	r0, 7
				return SPDR;
     852:	fd cf       	rjmp	.-6      	; 0x84e <DataflashManager_ReadBlocks+0x1c8>
     854:	8e b5       	in	r24, 0x2e	; 46
     856:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	f6 01       	movw	r30, r12
     85e:	80 ad       	ldd	r24, Z+56	; 0x38
				return SPDR;
     860:	81 11       	cpse	r24, r1
     862:	13 c0       	rjmp	.+38     	; 0x88a <DataflashManager_ReadBlocks+0x204>
     864:	11 50       	subi	r17, 0x01	; 1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     866:	09 f0       	breq	.+2      	; 0x86a <DataflashManager_ReadBlocks+0x1e4>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     868:	5c cf       	rjmp	.-328    	; 0x722 <DataflashManager_ReadBlocks+0x9c>
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	ef 1a       	sub	r14, r31
     86e:	f1 08       	sbc	r15, r1
     870:	53 cf       	rjmp	.-346    	; 0x718 <DataflashManager_ReadBlocks+0x92>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     872:	80 91 e8 00 	lds	r24, 0x00E8
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     876:	85 fd       	sbrc	r24, 5
     878:	05 c0       	rjmp	.+10     	; 0x884 <DataflashManager_ReadBlocks+0x1fe>
     87a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     87e:	8e 77       	andi	r24, 0x7E	; 126
     880:	80 93 e8 00 	sts	0x00E8, r24
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     884:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     886:	83 60       	ori	r24, 0x03	; 3
     888:	8e b9       	out	0x0e, r24	; 14
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	08 95       	ret

000008a4 <DataflashManager_ResetDataflashProtections>:
     8a4:	8e b1       	in	r24, 0x0e	; 14
     8a6:	83 60       	ori	r24, 0x03	; 3
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	8e b9       	out	0x0e, r24	; 14
     8ac:	87 ed       	ldi	r24, 0xD7	; 215
     8ae:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8b6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8b8:	0d b4       	in	r0, 0x2d	; 45
     8ba:	07 fe       	sbrs	r0, 7
     8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     8be:	0e b4       	in	r0, 0x2e	; 46
     8c0:	01 fc       	sbrc	r0, 1
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <DataflashManager_ResetDataflashProtections+0x2e>
     8c4:	8e b1       	in	r24, 0x0e	; 14
     8c6:	83 60       	ori	r24, 0x03	; 3
     8c8:	8d 7f       	andi	r24, 0xFD	; 253
     8ca:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8cc:	87 ed       	ldi	r24, 0xD7	; 215
     8ce:	8e bd       	out	0x2e, r24	; 46
     8d0:	16 c0       	rjmp	.+44     	; 0x8fe <DataflashManager_ResetDataflashProtections+0x5a>
	{
		Dataflash_ToggleSelectedChipCS();
     8d2:	57 dd       	rcall	.-1362   	; 0x382 <Dataflash_ToggleSelectedChipCS>
     8d4:	8d e3       	ldi	r24, 0x3D	; 61
     8d6:	8e bd       	out	0x2e, r24	; 46
     8d8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8da:	07 fe       	sbrs	r0, 7
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <DataflashManager_ResetDataflashProtections+0x34>
     8de:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e0:	8e bd       	out	0x2e, r24	; 46
     8e2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <DataflashManager_ResetDataflashProtections+0x3e>
     8e8:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ea:	8e bd       	out	0x2e, r24	; 46
     8ec:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8ee:	07 fe       	sbrs	r0, 7
     8f0:	fd cf       	rjmp	.-6      	; 0x8ec <DataflashManager_ResetDataflashProtections+0x48>
     8f2:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f4:	8e bd       	out	0x2e, r24	; 46
     8f6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <DataflashManager_ResetDataflashProtections+0x52>
     8fc:	e3 cf       	rjmp	.-58     	; 0x8c4 <DataflashManager_ResetDataflashProtections+0x20>
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <DataflashManager_ResetDataflashProtections+0x5a>
     904:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     906:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <DataflashManager_ResetDataflashProtections+0x62>
     90c:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     90e:	01 fc       	sbrc	r0, 1
     910:	04 c0       	rjmp	.+8      	; 0x91a <DataflashManager_ResetDataflashProtections+0x76>
     912:	8e b1       	in	r24, 0x0e	; 14
     914:	83 60       	ori	r24, 0x03	; 3
     916:	8e b9       	out	0x0e, r24	; 14
     918:	08 95       	ret
     91a:	33 dd       	rcall	.-1434   	; 0x382 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     91c:	8d e3       	ldi	r24, 0x3D	; 61
     91e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     920:	0d b4       	in	r0, 0x2d	; 45
     922:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     924:	fd cf       	rjmp	.-6      	; 0x920 <DataflashManager_ResetDataflashProtections+0x7c>
     926:	8a e2       	ldi	r24, 0x2A	; 42
     928:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     92e:	fd cf       	rjmp	.-6      	; 0x92a <DataflashManager_ResetDataflashProtections+0x86>
     930:	8f e7       	ldi	r24, 0x7F	; 127
     932:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     934:	0d b4       	in	r0, 0x2d	; 45
     936:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     938:	fd cf       	rjmp	.-6      	; 0x934 <DataflashManager_ResetDataflashProtections+0x90>
     93a:	8a e9       	ldi	r24, 0x9A	; 154
     93c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     942:	fd cf       	rjmp	.-6      	; 0x93e <DataflashManager_ResetDataflashProtections+0x9a>
     944:	e6 cf       	rjmp	.-52     	; 0x912 <DataflashManager_ResetDataflashProtections+0x6e>

00000946 <DataflashManager_CheckDataflashOperation>:
     946:	8e b1       	in	r24, 0x0e	; 14
     948:	83 60       	ori	r24, 0x03	; 3
     94a:	8e 7f       	andi	r24, 0xFE	; 254
     94c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     94e:	8f e9       	ldi	r24, 0x9F	; 159
     950:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     958:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     960:	9e b5       	in	r25, 0x2e	; 46
     962:	8e b1       	in	r24, 0x0e	; 14
     964:	83 60       	ori	r24, 0x03	; 3
     966:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     968:	9f 31       	cpi	r25, 0x1F	; 31
     96a:	a1 f4       	brne	.+40     	; 0x994 <DataflashManager_CheckDataflashOperation+0x4e>
     96c:	8e b1       	in	r24, 0x0e	; 14
     96e:	83 60       	ori	r24, 0x03	; 3
     970:	8d 7f       	andi	r24, 0xFD	; 253
     972:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     974:	8f e9       	ldi	r24, 0x9F	; 159
     976:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     978:	0d b4       	in	r0, 0x2d	; 45
     97a:	07 fe       	sbrs	r0, 7
     97c:	fd cf       	rjmp	.-6      	; 0x978 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     97e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     980:	0d b4       	in	r0, 0x2d	; 45
     982:	07 fe       	sbrs	r0, 7
     984:	fd cf       	rjmp	.-6      	; 0x980 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     986:	9e b5       	in	r25, 0x2e	; 46
     988:	8e b1       	in	r24, 0x0e	; 14
     98a:	83 60       	ori	r24, 0x03	; 3
     98c:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	9f 31       	cpi	r25, 0x1F	; 31
     992:	09 f0       	breq	.+2      	; 0x996 <DataflashManager_CheckDataflashOperation+0x50>
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     994:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     996:	08 95       	ret

00000998 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9a4:	48 a1       	ldd	r20, Y+32	; 0x20
     9a6:	5f 8d       	ldd	r21, Y+31	; 0x1f
     9a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
     9aa:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9ac:	0b a1       	ldd	r16, Y+35	; 0x23
     9ae:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9b0:	41 15       	cp	r20, r1
     9b2:	90 e8       	ldi	r25, 0x80	; 128
     9b4:	59 07       	cpc	r21, r25
     9b6:	61 05       	cpc	r22, r1
     9b8:	71 05       	cpc	r23, r1
     9ba:	68 f0       	brcs	.+26     	; 0x9d6 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9bc:	80 91 56 01 	lds	r24, 0x0156
     9c0:	80 7f       	andi	r24, 0xF0	; 240
     9c2:	85 60       	ori	r24, 0x05	; 5
     9c4:	80 93 56 01 	sts	0x0156, r24
     9c8:	81 e2       	ldi	r24, 0x21	; 33
     9ca:	80 93 60 01 	sts	0x0160, r24
     9ce:	10 92 61 01 	sts	0x0161, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	1e c0       	rjmp	.+60     	; 0xa12 <SCSI_Command_ReadWrite_10+0x7a>
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9d6:	98 01       	movw	r18, r16
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9d8:	88 23       	and	r24, r24
     9da:	19 f0       	breq	.+6      	; 0x9e2 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9dc:	ce 01       	movw	r24, r28
     9de:	53 de       	rcall	.-858    	; 0x686 <DataflashManager_ReadBlocks>
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <SCSI_Command_ReadWrite_10+0x4e>
     9e2:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e4:	11 dd       	rcall	.-1502   	; 0x408 <DataflashManager_WriteBlocks>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9ea:	89 e0       	ldi	r24, 0x09	; 9
     9ec:	00 0f       	add	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	22 1f       	adc	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	8a 95       	dec	r24
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <SCSI_Command_ReadWrite_10+0x54>
     9f8:	4c 89       	ldd	r20, Y+20	; 0x14
     9fa:	5d 89       	ldd	r21, Y+21	; 0x15
     9fc:	6e 89       	ldd	r22, Y+22	; 0x16
     9fe:	7f 89       	ldd	r23, Y+23	; 0x17
     a00:	40 1b       	sub	r20, r16
     a02:	51 0b       	sbc	r21, r17
     a04:	62 0b       	sbc	r22, r18
     a06:	73 0b       	sbc	r23, r19
     a08:	4c 8b       	std	Y+20, r20	; 0x14
     a0a:	5d 8b       	std	Y+21, r21	; 0x15
     a0c:	6e 8b       	std	Y+22, r22	; 0x16
     a0e:	7f 8b       	std	Y+23, r23	; 0x17
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	df 91       	pop	r29

	return true;
     a14:	cf 91       	pop	r28
}
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <SCSI_DecodeSCSICommand>:
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	28 97       	sbiw	r28, 0x08	; 8
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a3e:	fc 01       	movw	r30, r24
     a40:	83 8d       	ldd	r24, Z+27	; 0x1b
     a42:	8d 31       	cpi	r24, 0x1D	; 29
     a44:	09 f4       	brne	.+2      	; 0xa48 <SCSI_DecodeSCSICommand+0x2c>
     a46:	a7 c0       	rjmp	.+334    	; 0xb96 <SCSI_DecodeSCSICommand+0x17a>
     a48:	90 f4       	brcc	.+36     	; 0xa6e <SCSI_DecodeSCSICommand+0x52>
     a4a:	82 31       	cpi	r24, 0x12	; 18
     a4c:	09 f4       	brne	.+2      	; 0xa50 <SCSI_DecodeSCSICommand+0x34>
     a4e:	4c c0       	rjmp	.+152    	; 0xae8 <SCSI_DecodeSCSICommand+0xcc>
     a50:	38 f4       	brcc	.+14     	; 0xa60 <SCSI_DecodeSCSICommand+0x44>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <SCSI_DecodeSCSICommand+0x3c>
     a56:	dc c0       	rjmp	.+440    	; 0xc10 <SCSI_DecodeSCSICommand+0x1f4>
     a58:	83 30       	cpi	r24, 0x03	; 3
     a5a:	09 f4       	brne	.+2      	; 0xa5e <SCSI_DecodeSCSICommand+0x42>
     a5c:	72 c0       	rjmp	.+228    	; 0xb42 <SCSI_DecodeSCSICommand+0x126>
     a5e:	de c0       	rjmp	.+444    	; 0xc1c <SCSI_DecodeSCSICommand+0x200>
     a60:	8a 31       	cpi	r24, 0x1A	; 26
     a62:	09 f4       	brne	.+2      	; 0xa66 <SCSI_DecodeSCSICommand+0x4a>
     a64:	ba c0       	rjmp	.+372    	; 0xbda <SCSI_DecodeSCSICommand+0x1be>
     a66:	8b 31       	cpi	r24, 0x1B	; 27
     a68:	09 f4       	brne	.+2      	; 0xa6c <SCSI_DecodeSCSICommand+0x50>
     a6a:	d2 c0       	rjmp	.+420    	; 0xc10 <SCSI_DecodeSCSICommand+0x1f4>
     a6c:	d7 c0       	rjmp	.+430    	; 0xc1c <SCSI_DecodeSCSICommand+0x200>
     a6e:	88 32       	cpi	r24, 0x28	; 40
     a70:	09 f4       	brne	.+2      	; 0xa74 <SCSI_DecodeSCSICommand+0x58>
     a72:	ad c0       	rjmp	.+346    	; 0xbce <SCSI_DecodeSCSICommand+0x1b2>
     a74:	90 f5       	brcc	.+100    	; 0xada <SCSI_DecodeSCSICommand+0xbe>
     a76:	8e 31       	cpi	r24, 0x1E	; 30
     a78:	09 f4       	brne	.+2      	; 0xa7c <SCSI_DecodeSCSICommand+0x60>
     a7a:	ca c0       	rjmp	.+404    	; 0xc10 <SCSI_DecodeSCSICommand+0x1f4>
     a7c:	85 32       	cpi	r24, 0x25	; 37
     a7e:	09 f0       	breq	.+2      	; 0xa82 <SCSI_DecodeSCSICommand+0x66>
     a80:	cd c0       	rjmp	.+410    	; 0xc1c <SCSI_DecodeSCSICommand+0x200>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	9f e7       	ldi	r25, 0x7F	; 127
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	8d 83       	std	Y+5, r24	; 0x05
     a8c:	9e 83       	std	Y+6, r25	; 0x06
     a8e:	af 83       	std	Y+7, r26	; 0x07
     a90:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	ab 83       	std	Y+3, r26	; 0x03
     aa0:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	ce 01       	movw	r24, r28
     aac:	05 96       	adiw	r24, 0x05	; 5
     aae:	5f d1       	rcall	.+702    	; 0xd6e <Endpoint_Write_Stream_BE>
     ab0:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	64 e0       	ldi	r22, 0x04	; 4
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	58 d1       	rcall	.+688    	; 0xd6e <Endpoint_Write_Stream_BE>
     abe:	80 91 e8 00 	lds	r24, 0x00E8
     ac2:	8e 77       	andi	r24, 0x7E	; 126
     ac4:	80 93 e8 00 	sts	0x00E8, r24
     ac8:	f8 01       	movw	r30, r16
     aca:	84 89       	ldd	r24, Z+20	; 0x14
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     acc:	95 89       	ldd	r25, Z+21	; 0x15
     ace:	a6 89       	ldd	r26, Z+22	; 0x16
     ad0:	b7 89       	ldd	r27, Z+23	; 0x17
     ad2:	08 97       	sbiw	r24, 0x08	; 8
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	59 c0       	rjmp	.+178    	; 0xb8c <SCSI_DecodeSCSICommand+0x170>
     ada:	8a 32       	cpi	r24, 0x2A	; 42
     adc:	09 f4       	brne	.+2      	; 0xae0 <SCSI_DecodeSCSICommand+0xc4>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     ade:	75 c0       	rjmp	.+234    	; 0xbca <SCSI_DecodeSCSICommand+0x1ae>
     ae0:	8f 32       	cpi	r24, 0x2F	; 47
     ae2:	09 f4       	brne	.+2      	; 0xae6 <SCSI_DecodeSCSICommand+0xca>
     ae4:	95 c0       	rjmp	.+298    	; 0xc10 <SCSI_DecodeSCSICommand+0x1f4>
     ae6:	9a c0       	rjmp	.+308    	; 0xc1c <SCSI_DecodeSCSICommand+0x200>
     ae8:	f8 01       	movw	r30, r16
     aea:	e7 8c       	ldd	r14, Z+31	; 0x1f
     aec:	f6 8c       	ldd	r15, Z+30	; 0x1e
     aee:	84 8d       	ldd	r24, Z+28	; 0x1c
     af0:	83 70       	andi	r24, 0x03	; 3
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     af2:	09 f0       	breq	.+2      	; 0xaf6 <SCSI_DecodeSCSICommand+0xda>
     af4:	54 c0       	rjmp	.+168    	; 0xb9e <SCSI_DecodeSCSICommand+0x182>
     af6:	85 8d       	ldd	r24, Z+29	; 0x1d
     af8:	81 11       	cpse	r24, r1
     afa:	51 c0       	rjmp	.+162    	; 0xb9e <SCSI_DecodeSCSICommand+0x182>
     afc:	67 01       	movw	r12, r14
     afe:	f5 e2       	ldi	r31, 0x25	; 37
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b00:	ef 16       	cp	r14, r31
     b02:	f1 04       	cpc	r15, r1
     b04:	18 f0       	brcs	.+6      	; 0xb0c <SCSI_DecodeSCSICommand+0xf0>
     b06:	24 e2       	ldi	r18, 0x24	; 36
     b08:	c2 2e       	mov	r12, r18
     b0a:	d1 2c       	mov	r13, r1
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b10:	b6 01       	movw	r22, r12
     b12:	86 e6       	ldi	r24, 0x66	; 102
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	e4 d0       	rcall	.+456    	; 0xce0 <Endpoint_Write_Stream_LE>
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	c7 01       	movw	r24, r14

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b1e:	8c 19       	sub	r24, r12
     b20:	9d 09       	sbc	r25, r13
     b22:	a1 d0       	rcall	.+322    	; 0xc66 <Endpoint_Null_Stream>
     b24:	80 91 e8 00 	lds	r24, 0x00E8
     b28:	8e 77       	andi	r24, 0x7E	; 126
     b2a:	80 93 e8 00 	sts	0x00E8, r24
     b2e:	f8 01       	movw	r30, r16
     b30:	84 89       	ldd	r24, Z+20	; 0x14
     b32:	95 89       	ldd	r25, Z+21	; 0x15
     b34:	a6 89       	ldd	r26, Z+22	; 0x16

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b36:	b7 89       	ldd	r27, Z+23	; 0x17
     b38:	8c 19       	sub	r24, r12
     b3a:	9d 09       	sbc	r25, r13
     b3c:	a1 09       	sbc	r26, r1
     b3e:	b1 09       	sbc	r27, r1
     b40:	25 c0       	rjmp	.+74     	; 0xb8c <SCSI_DecodeSCSICommand+0x170>
     b42:	f8 01       	movw	r30, r16
     b44:	c7 8c       	ldd	r12, Z+31	; 0x1f
     b46:	dc 2c       	mov	r13, r12
     b48:	f2 e1       	ldi	r31, 0x12	; 18
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b4a:	fc 15       	cp	r31, r12
     b4c:	10 f4       	brcc	.+4      	; 0xb52 <SCSI_DecodeSCSICommand+0x136>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b4e:	92 e1       	ldi	r25, 0x12	; 18
     b50:	d9 2e       	mov	r13, r25
     b52:	ed 2c       	mov	r14, r13
     b54:	f1 2c       	mov	r15, r1
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b5a:	b7 01       	movw	r22, r14
     b5c:	84 e5       	ldi	r24, 0x54	; 84
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	bf d0       	rcall	.+382    	; 0xce0 <Endpoint_Write_Stream_LE>
     b62:	8c 2d       	mov	r24, r12
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b6c:	9f 09       	sbc	r25, r15
     b6e:	7b d0       	rcall	.+246    	; 0xc66 <Endpoint_Null_Stream>
     b70:	80 91 e8 00 	lds	r24, 0x00E8
     b74:	8e 77       	andi	r24, 0x7E	; 126
     b76:	80 93 e8 00 	sts	0x00E8, r24
     b7a:	f8 01       	movw	r30, r16
     b7c:	84 89       	ldd	r24, Z+20	; 0x14
     b7e:	95 89       	ldd	r25, Z+21	; 0x15
     b80:	a6 89       	ldd	r26, Z+22	; 0x16
     b82:	b7 89       	ldd	r27, Z+23	; 0x17
     b84:	8d 19       	sub	r24, r13
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b86:	91 09       	sbc	r25, r1
     b88:	a1 09       	sbc	r26, r1
     b8a:	b1 09       	sbc	r27, r1
     b8c:	84 8b       	std	Z+20, r24	; 0x14
     b8e:	95 8b       	std	Z+21, r25	; 0x15
     b90:	a6 8b       	std	Z+22, r26	; 0x16
     b92:	b7 8b       	std	Z+23, r27	; 0x17
     b94:	4d c0       	rjmp	.+154    	; 0xc30 <SCSI_DecodeSCSICommand+0x214>
     b96:	f8 01       	movw	r30, r16
     b98:	84 8d       	ldd	r24, Z+28	; 0x1c
     b9a:	82 fd       	sbrc	r24, 2
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <SCSI_DecodeSCSICommand+0x192>
     b9e:	80 91 56 01 	lds	r24, 0x0156
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     ba2:	80 7f       	andi	r24, 0xF0	; 240
     ba4:	85 60       	ori	r24, 0x05	; 5
     ba6:	80 93 56 01 	sts	0x0156, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     baa:	84 e2       	ldi	r24, 0x24	; 36
     bac:	3e c0       	rjmp	.+124    	; 0xc2a <SCSI_DecodeSCSICommand+0x20e>
     bae:	cb de       	rcall	.-618    	; 0x946 <DataflashManager_CheckDataflashOperation>
     bb0:	81 11       	cpse	r24, r1
     bb2:	2e c0       	rjmp	.+92     	; 0xc10 <SCSI_DecodeSCSICommand+0x1f4>
     bb4:	80 91 56 01 	lds	r24, 0x0156
     bb8:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	80 93 56 01 	sts	0x0156, r24
     bc0:	10 92 60 01 	sts	0x0160, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bc4:	10 92 61 01 	sts	0x0161, r1
     bc8:	3e c0       	rjmp	.+124    	; 0xc46 <SCSI_DecodeSCSICommand+0x22a>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <SCSI_DecodeSCSICommand+0x1b4>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	c8 01       	movw	r24, r16
     bd2:	e2 de       	rcall	.-572    	; 0x998 <SCSI_Command_ReadWrite_10>
     bd4:	88 23       	and	r24, r24
     bd6:	b9 f1       	breq	.+110    	; 0xc46 <SCSI_DecodeSCSICommand+0x22a>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bd8:	2b c0       	rjmp	.+86     	; 0xc30 <SCSI_DecodeSCSICommand+0x214>
     bda:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bde:	10 92 f1 00 	sts	0x00F1, r1
     be2:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     be6:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bea:	80 91 e8 00 	lds	r24, 0x00E8
     bee:	8e 77       	andi	r24, 0x7E	; 126
     bf0:	80 93 e8 00 	sts	0x00E8, r24
     bf4:	f8 01       	movw	r30, r16
     bf6:	44 89       	ldd	r20, Z+20	; 0x14
     bf8:	55 89       	ldd	r21, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bfa:	66 89       	ldd	r22, Z+22	; 0x16
     bfc:	77 89       	ldd	r23, Z+23	; 0x17
     bfe:	44 50       	subi	r20, 0x04	; 4
     c00:	51 09       	sbc	r21, r1
     c02:	61 09       	sbc	r22, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c04:	71 09       	sbc	r23, r1
     c06:	44 8b       	std	Z+20, r20	; 0x14
     c08:	55 8b       	std	Z+21, r21	; 0x15
     c0a:	66 8b       	std	Z+22, r22	; 0x16
     c0c:	77 8b       	std	Z+23, r23	; 0x17
     c0e:	10 c0       	rjmp	.+32     	; 0xc30 <SCSI_DecodeSCSICommand+0x214>
     c10:	f8 01       	movw	r30, r16
     c12:	14 8a       	std	Z+20, r1	; 0x14
     c14:	15 8a       	std	Z+21, r1	; 0x15
     c16:	16 8a       	std	Z+22, r1	; 0x16
     c18:	17 8a       	std	Z+23, r1	; 0x17
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <SCSI_DecodeSCSICommand+0x214>
     c1c:	80 91 56 01 	lds	r24, 0x0156
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c20:	80 7f       	andi	r24, 0xF0	; 240
     c22:	85 60       	ori	r24, 0x05	; 5
     c24:	80 93 56 01 	sts	0x0156, r24
     c28:	80 e2       	ldi	r24, 0x20	; 32
			break;
     c2a:	80 93 60 01 	sts	0x0160, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c2e:	ca cf       	rjmp	.-108    	; 0xbc4 <SCSI_DecodeSCSICommand+0x1a8>
     c30:	80 91 56 01 	lds	r24, 0x0156
     c34:	80 7f       	andi	r24, 0xF0	; 240
     c36:	80 93 56 01 	sts	0x0156, r24
     c3a:	10 92 60 01 	sts	0x0160, r1
     c3e:	10 92 61 01 	sts	0x0161, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <SCSI_DecodeSCSICommand+0x22c>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
	}

	return false;
     c56:	cf 91       	pop	r28
}
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	08 95       	ret

00000c66 <Endpoint_Null_Stream>:
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	8c 01       	movw	r16, r24
     c74:	eb 01       	movw	r28, r22
                             uint16_t* const BytesProcessed)
{
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c76:	60 d2       	rcall	.+1216   	; 0x1138 <Endpoint_WaitUntilReady>
     c78:	81 11       	cpse	r24, r1
     c7a:	2b c0       	rjmp	.+86     	; 0xcd2 <Endpoint_Null_Stream+0x6c>
     c7c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c7e:	21 f0       	breq	.+8      	; 0xc88 <Endpoint_Null_Stream+0x22>
     c80:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
     c82:	99 81       	ldd	r25, Y+1	; 0x01
     c84:	08 1b       	sub	r16, r24
     c86:	19 0b       	sbc	r17, r25
     c88:	e1 2c       	mov	r14, r1
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     c8a:	f1 2c       	mov	r15, r1
     c8c:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     c8e:	11 05       	cpc	r17, r1
     c90:	f9 f0       	breq	.+62     	; 0xcd0 <Endpoint_Null_Stream+0x6a>
     c92:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c96:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c98:	13 c0       	rjmp	.+38     	; 0xcc0 <Endpoint_Null_Stream+0x5a>
     c9a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c9e:	8e 77       	andi	r24, 0x7E	; 126
     ca0:	80 93 e8 00 	sts	0x00E8, r24
     ca4:	20 97       	sbiw	r28, 0x00	; 0
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     ca6:	41 f0       	breq	.+16     	; 0xcb8 <Endpoint_Null_Stream+0x52>
     ca8:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	8e 0d       	add	r24, r14
     cae:	9f 1d       	adc	r25, r15
     cb0:	99 83       	std	Y+1, r25	; 0x01
     cb2:	88 83       	st	Y, r24
     cb4:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <Endpoint_Null_Stream+0x6c>
     cb8:	3f d2       	rcall	.+1150   	; 0x1138 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cba:	88 23       	and	r24, r24
     cbc:	39 f3       	breq	.-50     	; 0xc8c <Endpoint_Null_Stream+0x26>
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <Endpoint_Null_Stream+0x6c>
     cc0:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cc4:	01 50       	subi	r16, 0x01	; 1
     cc6:	11 09       	sbc	r17, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
     ccc:	f8 0a       	sbc	r15, r24
     cce:	de cf       	rjmp	.-68     	; 0xc8c <Endpoint_Null_Stream+0x26>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     cd4:	cf 91       	pop	r28
}
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	08 95       	ret

00000ce0 <Endpoint_Write_Stream_LE>:
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	7c 01       	movw	r14, r24
     cf2:	8b 01       	movw	r16, r22
     cf4:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     cf6:	20 d2       	rcall	.+1088   	; 0x1138 <Endpoint_WaitUntilReady>
     cf8:	81 11       	cpse	r24, r1
     cfa:	30 c0       	rjmp	.+96     	; 0xd5c <Endpoint_Write_Stream_LE+0x7c>
     cfc:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cfe:	31 f0       	breq	.+12     	; 0xd0c <Endpoint_Write_Stream_LE+0x2c>
     d00:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     d02:	99 81       	ldd	r25, Y+1	; 0x01
     d04:	08 1b       	sub	r16, r24
     d06:	19 0b       	sbc	r17, r25
     d08:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d0a:	f9 1e       	adc	r15, r25
     d0c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d0e:	d1 2c       	mov	r13, r1
     d10:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d12:	11 05       	cpc	r17, r1
     d14:	11 f1       	breq	.+68     	; 0xd5a <Endpoint_Write_Stream_LE+0x7a>
     d16:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d1a:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <Endpoint_Write_Stream_LE+0x64>
     d1e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d22:	8e 77       	andi	r24, 0x7E	; 126
     d24:	80 93 e8 00 	sts	0x00E8, r24
     d28:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d2a:	41 f0       	breq	.+16     	; 0xd3c <Endpoint_Write_Stream_LE+0x5c>
     d2c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     d2e:	99 81       	ldd	r25, Y+1	; 0x01
     d30:	8c 0d       	add	r24, r12
     d32:	9d 1d       	adc	r25, r13
     d34:	99 83       	std	Y+1, r25	; 0x01
     d36:	88 83       	st	Y, r24
     d38:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d3a:	10 c0       	rjmp	.+32     	; 0xd5c <Endpoint_Write_Stream_LE+0x7c>
     d3c:	fd d1       	rcall	.+1018   	; 0x1138 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d3e:	88 23       	and	r24, r24
     d40:	39 f3       	breq	.-50     	; 0xd10 <Endpoint_Write_Stream_LE+0x30>
     d42:	0c c0       	rjmp	.+24     	; 0xd5c <Endpoint_Write_Stream_LE+0x7c>
     d44:	f7 01       	movw	r30, r14
     d46:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d48:	7f 01       	movw	r14, r30
     d4a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d4e:	01 50       	subi	r16, 0x01	; 1
     d50:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d52:	ff ef       	ldi	r31, 0xFF	; 255
     d54:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     d56:	df 0a       	sbc	r13, r31
     d58:	db cf       	rjmp	.-74     	; 0xd10 <Endpoint_Write_Stream_LE+0x30>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     d5e:	cf 91       	pop	r28
}
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <Endpoint_Write_Stream_BE>:
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	6c 01       	movw	r12, r24
     d80:	8b 01       	movw	r16, r22
     d82:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d84:	d9 d1       	rcall	.+946    	; 0x1138 <Endpoint_WaitUntilReady>
     d86:	81 11       	cpse	r24, r1
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <Endpoint_Write_Stream_BE+0x8a>
     d8a:	e8 01       	movw	r28, r16

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d8c:	21 97       	sbiw	r28, 0x01	; 1
     d8e:	cc 0d       	add	r28, r12
     d90:	dd 1d       	adc	r29, r13
     d92:	e1 14       	cp	r14, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d94:	f1 04       	cpc	r15, r1
     d96:	39 f0       	breq	.+14     	; 0xda6 <Endpoint_Write_Stream_BE+0x38>
     d98:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	08 1b       	sub	r16, r24
     da0:	19 0b       	sbc	r17, r25
     da2:	c8 1b       	sub	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     da4:	d9 0b       	sbc	r29, r25
     da6:	c1 2c       	mov	r12, r1
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     da8:	d1 2c       	mov	r13, r1
     daa:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     dac:	11 05       	cpc	r17, r1
     dae:	19 f1       	breq	.+70     	; 0xdf6 <Endpoint_Write_Stream_BE+0x88>
     db0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     db4:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     db6:	15 c0       	rjmp	.+42     	; 0xde2 <Endpoint_Write_Stream_BE+0x74>
     db8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dbc:	8e 77       	andi	r24, 0x7E	; 126
     dbe:	80 93 e8 00 	sts	0x00E8, r24
     dc2:	e1 14       	cp	r14, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     dc4:	f1 04       	cpc	r15, r1
     dc6:	49 f0       	breq	.+18     	; 0xdda <Endpoint_Write_Stream_BE+0x6c>
     dc8:	f7 01       	movw	r30, r14
			{
				*BytesProcessed += BytesInTransfer;
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	8c 0d       	add	r24, r12
     dd0:	9d 1d       	adc	r25, r13
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
     dd6:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     dd8:	0f c0       	rjmp	.+30     	; 0xdf8 <Endpoint_Write_Stream_BE+0x8a>
     dda:	ae d1       	rcall	.+860    	; 0x1138 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ddc:	88 23       	and	r24, r24
     dde:	29 f3       	breq	.-54     	; 0xdaa <Endpoint_Write_Stream_BE+0x3c>
     de0:	0b c0       	rjmp	.+22     	; 0xdf8 <Endpoint_Write_Stream_BE+0x8a>
     de2:	88 81       	ld	r24, Y
     de4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     de8:	21 97       	sbiw	r28, 0x01	; 1
     dea:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     dec:	11 09       	sbc	r17, r1
			Length--;
     dee:	ff ef       	ldi	r31, 0xFF	; 255
     df0:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     df2:	df 0a       	sbc	r13, r31
     df4:	da cf       	rjmp	.-76     	; 0xdaa <Endpoint_Write_Stream_BE+0x3c>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     dfa:	cf 91       	pop	r28
}
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <Endpoint_Read_Stream_LE>:
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	7c 01       	movw	r14, r24
     e1c:	8b 01       	movw	r16, r22
     e1e:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e20:	8b d1       	rcall	.+790    	; 0x1138 <Endpoint_WaitUntilReady>
     e22:	81 11       	cpse	r24, r1
     e24:	30 c0       	rjmp	.+96     	; 0xe86 <Endpoint_Read_Stream_LE+0x7c>
     e26:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e28:	31 f0       	breq	.+12     	; 0xe36 <Endpoint_Read_Stream_LE+0x2c>
     e2a:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     e2c:	99 81       	ldd	r25, Y+1	; 0x01
     e2e:	08 1b       	sub	r16, r24
     e30:	19 0b       	sbc	r17, r25
     e32:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e34:	f9 1e       	adc	r15, r25
     e36:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e38:	d1 2c       	mov	r13, r1
     e3a:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e3c:	11 05       	cpc	r17, r1
     e3e:	11 f1       	breq	.+68     	; 0xe84 <Endpoint_Read_Stream_LE+0x7a>
     e40:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e44:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e46:	13 c0       	rjmp	.+38     	; 0xe6e <Endpoint_Read_Stream_LE+0x64>
     e48:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e4c:	8b 77       	andi	r24, 0x7B	; 123
     e4e:	80 93 e8 00 	sts	0x00E8, r24
     e52:	20 97       	sbiw	r28, 0x00	; 0

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e54:	41 f0       	breq	.+16     	; 0xe66 <Endpoint_Read_Stream_LE+0x5c>
     e56:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     e58:	99 81       	ldd	r25, Y+1	; 0x01
     e5a:	8c 0d       	add	r24, r12
     e5c:	9d 1d       	adc	r25, r13
     e5e:	99 83       	std	Y+1, r25	; 0x01
     e60:	88 83       	st	Y, r24
     e62:	85 e0       	ldi	r24, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <Endpoint_Read_Stream_LE+0x7c>
     e66:	68 d1       	rcall	.+720    	; 0x1138 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e68:	88 23       	and	r24, r24
     e6a:	39 f3       	breq	.-50     	; 0xe3a <Endpoint_Read_Stream_LE+0x30>
     e6c:	0c c0       	rjmp	.+24     	; 0xe86 <Endpoint_Read_Stream_LE+0x7c>
     e6e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e72:	f7 01       	movw	r30, r14
     e74:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e76:	7f 01       	movw	r14, r30
     e78:	01 50       	subi	r16, 0x01	; 1
     e7a:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e7c:	ff ef       	ldi	r31, 0xFF	; 255
     e7e:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     e80:	df 0a       	sbc	r13, r31
     e82:	db cf       	rjmp	.-74     	; 0xe3a <Endpoint_Read_Stream_LE+0x30>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	df 91       	pop	r29
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     e88:	cf 91       	pop	r28
}
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	08 95       	ret

00000e98 <Endpoint_Write_Control_Stream_LE>:
     e98:	20 91 f6 01 	lds	r18, 0x01F6
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e9c:	30 91 f7 01 	lds	r19, 0x01F7
     ea0:	26 17       	cp	r18, r22
     ea2:	37 07       	cpc	r19, r23
     ea4:	48 f0       	brcs	.+18     	; 0xeb8 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ea6:	61 15       	cp	r22, r1
     ea8:	71 05       	cpc	r23, r1
     eaa:	39 f4       	brne	.+14     	; 0xeba <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eac:	20 91 e8 00 	lds	r18, 0x00E8
     eb0:	2e 77       	andi	r18, 0x7E	; 126
     eb2:	20 93 e8 00 	sts	0x00E8, r18
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <Endpoint_Write_Control_Stream_LE+0x22>
     eb8:	b9 01       	movw	r22, r18
     eba:	fc 01       	movw	r30, r24
     ebc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	99 f1       	breq	.+102    	; 0xf2a <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ec4:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ec8:	88 23       	and	r24, r24
     eca:	e9 f1       	breq	.+122    	; 0xf46 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ecc:	85 30       	cpi	r24, 0x05	; 5
     ece:	e9 f1       	breq	.+122    	; 0xf4a <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ed0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ed4:	83 fd       	sbrc	r24, 3
     ed6:	3b c0       	rjmp	.+118    	; 0xf4e <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     edc:	82 ff       	sbrs	r24, 2
     ede:	06 c0       	rjmp	.+12     	; 0xeec <Endpoint_Write_Control_Stream_LE+0x54>
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ee4:	82 ff       	sbrs	r24, 2
     ee6:	24 c0       	rjmp	.+72     	; 0xf30 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	e5 cf       	rjmp	.-54     	; 0xebe <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ef4:	80 91 f2 00 	lds	r24, 0x00F2
     ef8:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     efc:	61 15       	cp	r22, r1
     efe:	71 05       	cpc	r23, r1
     f00:	51 f0       	breq	.+20     	; 0xf16 <Endpoint_Write_Control_Stream_LE+0x7e>
     f02:	88 30       	cpi	r24, 0x08	; 8
     f04:	91 05       	cpc	r25, r1
     f06:	38 f4       	brcc	.+14     	; 0xf16 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f08:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f0a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     f0e:	61 50       	subi	r22, 0x01	; 1
     f10:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	f3 cf       	rjmp	.-26     	; 0xefc <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	08 97       	sbiw	r24, 0x08	; 8
     f1a:	09 f0       	breq	.+2      	; 0xf1e <Endpoint_Write_Control_Stream_LE+0x86>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
     f22:	8e 77       	andi	r24, 0x7E	; 126
     f24:	80 93 e8 00 	sts	0x00E8, r24
     f28:	ca cf       	rjmp	.-108    	; 0xebe <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f2a:	21 11       	cpse	r18, r1
     f2c:	cb cf       	rjmp	.-106    	; 0xec4 <Endpoint_Write_Control_Stream_LE+0x2c>
     f2e:	d8 cf       	rjmp	.-80     	; 0xee0 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f30:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f34:	88 23       	and	r24, r24
     f36:	39 f0       	breq	.+14     	; 0xf46 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f38:	85 30       	cpi	r24, 0x05	; 5
     f3a:	39 f0       	breq	.+14     	; 0xf4a <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f40:	83 ff       	sbrs	r24, 3
     f42:	ce cf       	rjmp	.-100    	; 0xee0 <Endpoint_Write_Control_Stream_LE+0x48>
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f50:	08 95       	ret

00000f52 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f52:	20 91 f6 01 	lds	r18, 0x01F6
     f56:	30 91 f7 01 	lds	r19, 0x01F7
     f5a:	26 17       	cp	r18, r22
     f5c:	37 07       	cpc	r19, r23
     f5e:	48 f0       	brcs	.+18     	; 0xf72 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f60:	61 15       	cp	r22, r1
     f62:	71 05       	cpc	r23, r1
     f64:	39 f4       	brne	.+14     	; 0xf74 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f66:	20 91 e8 00 	lds	r18, 0x00E8
     f6a:	2e 77       	andi	r18, 0x7E	; 126
     f6c:	20 93 e8 00 	sts	0x00E8, r18
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <Endpoint_Write_Control_PStream_LE+0x22>
     f72:	b9 01       	movw	r22, r18
     f74:	fc 01       	movw	r30, r24
     f76:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	b1 f1       	breq	.+108    	; 0xfea <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f7e:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f82:	88 23       	and	r24, r24
     f84:	09 f4       	brne	.+2      	; 0xf88 <Endpoint_Write_Control_PStream_LE+0x36>
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f88:	85 30       	cpi	r24, 0x05	; 5
     f8a:	09 f4       	brne	.+2      	; 0xf8e <Endpoint_Write_Control_PStream_LE+0x3c>
     f8c:	3e c0       	rjmp	.+124    	; 0x100a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f92:	83 fd       	sbrc	r24, 3
     f94:	3c c0       	rjmp	.+120    	; 0x100e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f9a:	82 ff       	sbrs	r24, 2
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <Endpoint_Write_Control_PStream_LE+0x58>
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     fa2:	82 ff       	sbrs	r24, 2
     fa4:	25 c0       	rjmp	.+74     	; 0xff0 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     faa:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     fae:	80 ff       	sbrs	r24, 0
     fb0:	e3 cf       	rjmp	.-58     	; 0xf78 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     fb2:	80 91 f2 00 	lds	r24, 0x00F2
     fb6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fba:	61 15       	cp	r22, r1
     fbc:	71 05       	cpc	r23, r1
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <Endpoint_Write_Control_PStream_LE+0x84>
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	91 05       	cpc	r25, r1
     fc4:	40 f4       	brcc	.+16     	; 0xfd6 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fc6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fc8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     fcc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     fce:	61 50       	subi	r22, 0x01	; 1
     fd0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	f2 cf       	rjmp	.-28     	; 0xfba <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	08 97       	sbiw	r24, 0x08	; 8
     fda:	09 f0       	breq	.+2      	; 0xfde <Endpoint_Write_Control_PStream_LE+0x8c>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fde:	80 91 e8 00 	lds	r24, 0x00E8
     fe2:	8e 77       	andi	r24, 0x7E	; 126
     fe4:	80 93 e8 00 	sts	0x00E8, r24
     fe8:	c7 cf       	rjmp	.-114    	; 0xf78 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fea:	21 11       	cpse	r18, r1
     fec:	c8 cf       	rjmp	.-112    	; 0xf7e <Endpoint_Write_Control_PStream_LE+0x2c>
     fee:	d7 cf       	rjmp	.-82     	; 0xf9e <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ff0:	80 91 ef 01 	lds	r24, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ff4:	88 23       	and	r24, r24
     ff6:	39 f0       	breq	.+14     	; 0x1006 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	39 f0       	breq	.+14     	; 0x100a <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ffc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1000:	83 ff       	sbrs	r24, 3
    1002:	cd cf       	rjmp	.-102    	; 0xf9e <Endpoint_Write_Control_PStream_LE+0x4c>
    1004:	04 c0       	rjmp	.+8      	; 0x100e <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    100e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1010:	08 95       	ret

00001012 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1012:	98 2f       	mov	r25, r24
    1014:	97 30       	cpi	r25, 0x07	; 7
    1016:	58 f5       	brcc	.+86     	; 0x106e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1018:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    101c:	98 17       	cp	r25, r24
    101e:	39 f0       	breq	.+14     	; 0x102e <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1020:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1024:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1028:	50 91 f0 00 	lds	r21, 0x00F0
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    102e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1030:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1032:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1034:	21 ff       	sbrs	r18, 1
    1036:	19 c0       	rjmp	.+50     	; 0x106a <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1038:	30 91 eb 00 	lds	r19, 0x00EB
    103c:	3e 7f       	andi	r19, 0xFE	; 254
    103e:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1042:	30 91 ed 00 	lds	r19, 0x00ED
    1046:	3d 7f       	andi	r19, 0xFD	; 253
    1048:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    104c:	30 91 eb 00 	lds	r19, 0x00EB
    1050:	31 60       	ori	r19, 0x01	; 1
    1052:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1056:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    105a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    105e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1062:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1066:	27 ff       	sbrs	r18, 7
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    106a:	9f 5f       	subi	r25, 0xFF	; 255
    106c:	d3 cf       	rjmp	.-90     	; 0x1014 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1078:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    107a:	08 95       	ret

0000107c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	06 2f       	mov	r16, r22
    1086:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	10 17       	cp	r17, r16
    108c:	71 f1       	breq	.+92     	; 0x10ea <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    108e:	98 81       	ld	r25, Y
    1090:	99 23       	and	r25, r25
    1092:	41 f1       	breq	.+80     	; 0x10e4 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    109c:	89 2f       	mov	r24, r25
    109e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    10a0:	87 30       	cpi	r24, 0x07	; 7
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	22 c0       	rjmp	.+68     	; 0x10ec <Endpoint_ConfigureEndpointTable+0x70>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	10 f0       	brcs	.+4      	; 0x10b0 <Endpoint_ConfigureEndpointTable+0x34>
    10ac:	56 e0       	ldi	r21, 0x06	; 6
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <Endpoint_ConfigureEndpointTable+0x36>
    10b0:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    10b2:	28 e0       	ldi	r18, 0x08	; 8
    10b4:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    10b6:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    10b8:	2e 17       	cp	r18, r30
    10ba:	3f 07       	cpc	r19, r31
    10bc:	20 f4       	brcc	.+8      	; 0x10c6 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    10be:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	f9 cf       	rjmp	.-14     	; 0x10b8 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    10c6:	42 95       	swap	r20
    10c8:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10ca:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    10cc:	69 2f       	mov	r22, r25
    10ce:	66 1f       	adc	r22, r22
    10d0:	66 27       	eor	r22, r22
    10d2:	66 1f       	adc	r22, r22
    10d4:	90 e4       	ldi	r25, 0x40	; 64
    10d6:	79 9f       	mul	r23, r25
    10d8:	90 01       	movw	r18, r0
    10da:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10dc:	62 2b       	or	r22, r18
    10de:	99 df       	rcall	.-206    	; 0x1012 <Endpoint_ConfigureEndpoint_Prv>
    10e0:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    10e2:	01 f3       	breq	.-64     	; 0x10a4 <Endpoint_ConfigureEndpointTable+0x28>
    10e4:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    10e6:	25 96       	adiw	r28, 0x05	; 5
    10e8:	d0 cf       	rjmp	.-96     	; 0x108a <Endpoint_ConfigureEndpointTable+0xe>
    10ea:	81 e0       	ldi	r24, 0x01	; 1

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
    10ec:	df 91       	pop	r29
}
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <Endpoint_ClearStatusStage>:
    10f6:	80 91 f0 01 	lds	r24, 0x01F0
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    10fa:	87 fd       	sbrc	r24, 7
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10fe:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1102:	80 ff       	sbrs	r24, 0
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <Endpoint_ClearStatusStage+0x2c>
    1106:	12 c0       	rjmp	.+36     	; 0x112c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1108:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    110c:	82 fd       	sbrc	r24, 2
    110e:	05 c0       	rjmp	.+10     	; 0x111a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1110:	80 91 ef 01 	lds	r24, 0x01EF
    1114:	81 11       	cpse	r24, r1
    1116:	f8 cf       	rjmp	.-16     	; 0x1108 <Endpoint_ClearStatusStage+0x12>
    1118:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    111a:	80 91 e8 00 	lds	r24, 0x00E8
    111e:	8b 77       	andi	r24, 0x7B	; 123
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1122:	80 91 ef 01 	lds	r24, 0x01EF
    1126:	81 11       	cpse	r24, r1
    1128:	ea cf       	rjmp	.-44     	; 0x10fe <Endpoint_ClearStatusStage+0x8>
    112a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    112c:	80 91 e8 00 	lds	r24, 0x00E8
    1130:	8e 77       	andi	r24, 0x7E	; 126
    1132:	80 93 e8 00 	sts	0x00E8, r24
    1136:	08 95       	ret

00001138 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1138:	80 91 e4 00 	lds	r24, 0x00E4
    113c:	90 91 e5 00 	lds	r25, 0x00E5
    1140:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1142:	20 91 ec 00 	lds	r18, 0x00EC
    1146:	20 ff       	sbrs	r18, 0
    1148:	21 c0       	rjmp	.+66     	; 0x118c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    114a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    114e:	20 fd       	sbrc	r18, 0
    1150:	21 c0       	rjmp	.+66     	; 0x1194 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1152:	20 91 ef 01 	lds	r18, 0x01EF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1156:	22 23       	and	r18, r18
    1158:	89 f0       	breq	.+34     	; 0x117c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    115a:	25 30       	cpi	r18, 0x05	; 5
    115c:	89 f0       	breq	.+34     	; 0x1180 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    115e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1162:	25 fd       	sbrc	r18, 5
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <Endpoint_WaitUntilReady+0x4c>
    1166:	20 91 e4 00 	lds	r18, 0x00E4
    116a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	39 f3       	breq	.-50     	; 0x1142 <Endpoint_WaitUntilReady+0xa>
    1174:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1176:	41 f0       	breq	.+16     	; 0x1188 <Endpoint_WaitUntilReady+0x50>
    1178:	c9 01       	movw	r24, r18
    117a:	e3 cf       	rjmp	.-58     	; 0x1142 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    118c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1190:	22 ff       	sbrs	r18, 2
    1192:	df cf       	rjmp	.-66     	; 0x1152 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret

00001198 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11a0:	4e d0       	rcall	.+156    	; 0x123e <USB_INT_DisableAllInterrupts>
    11a2:	55 d0       	rcall	.+170    	; 0x124e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11a4:	c8 ed       	ldi	r28, 0xD8	; 216
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11a8:	88 81       	ld	r24, Y
    11aa:	8f 77       	andi	r24, 0x7F	; 127
    11ac:	88 83       	st	Y, r24
    11ae:	88 81       	ld	r24, Y
    11b0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    11b2:	88 83       	st	Y, r24
    11b4:	88 81       	ld	r24, Y
    11b6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    11b8:	88 83       	st	Y, r24
    11ba:	e7 ed       	ldi	r30, 0xD7	; 215
    11bc:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    11be:	80 81       	ld	r24, Z
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	80 83       	st	Z, r24
    11c4:	19 bc       	out	0x29, r1	; 41
    11c6:	10 92 ef 01 	sts	0x01EF, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    11ca:	10 92 eb 01 	sts	0x01EB, r1
	USB_Device_ConfigurationNumber  = 0;
    11ce:	10 92 ed 01 	sts	0x01ED, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    11d2:	10 92 ec 01 	sts	0x01EC, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    11d6:	00 ee       	ldi	r16, 0xE0	; 224
    11d8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    11da:	f8 01       	movw	r30, r16
    11dc:	80 81       	ld	r24, Z
    11de:	8b 7f       	andi	r24, 0xFB	; 251
    11e0:	80 83       	st	Z, r24
    11e2:	88 81       	ld	r24, Y
    11e4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    11e6:	88 83       	st	Y, r24
    11e8:	42 e0       	ldi	r20, 0x02	; 2
    11ea:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	11 df       	rcall	.-478    	; 0x1012 <Endpoint_ConfigureEndpoint_Prv>
    11f0:	e1 ee       	ldi	r30, 0xE1	; 225
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11f6:	8e 7f       	andi	r24, 0xFE	; 254
    11f8:	80 83       	st	Z, r24
    11fa:	e2 ee       	ldi	r30, 0xE2	; 226
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
    1204:	80 81       	ld	r24, Z
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    120a:	f8 01       	movw	r30, r16
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1210:	80 83       	st	Z, r24
    1212:	88 81       	ld	r24, Y
    1214:	80 61       	ori	r24, 0x10	; 16
    1216:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <USB_Init>:
    1222:	e8 ed       	ldi	r30, 0xD8	; 216
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1228:	8f 7e       	andi	r24, 0xEF	; 239
    122a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    122c:	e7 ed       	ldi	r30, 0xD7	; 215
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 ee 01 	sts	0x01EE, r24

	USB_ResetInterface();
    123c:	ad cf       	rjmp	.-166    	; 0x1198 <USB_ResetInterface>

0000123e <USB_INT_DisableAllInterrupts>:
    123e:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8c 7f       	andi	r24, 0xFC	; 252
    1246:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1248:	10 92 e2 00 	sts	0x00E2, r1
    124c:	08 95       	ret

0000124e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    124e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1252:	10 92 e1 00 	sts	0x00E1, r1
    1256:	08 95       	ret

00001258 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	0b b6       	in	r0, 0x3b	; 59
    1264:	0f 92       	push	r0
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    127e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1282:	82 ff       	sbrs	r24, 2
    1284:	0a c0       	rjmp	.+20     	; 0x129a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1286:	80 91 e2 00 	lds	r24, 0x00E2
    128a:	82 ff       	sbrs	r24, 2
    128c:	06 c0       	rjmp	.+12     	; 0x129a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    128e:	80 91 e1 00 	lds	r24, 0x00E1
    1292:	8b 7f       	andi	r24, 0xFB	; 251
    1294:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1298:	43 d2       	rcall	.+1158   	; 0x1720 <USB_Event_Stub>
    129a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    129e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    12a0:	1f c0       	rjmp	.+62     	; 0x12e0 <__vector_10+0x88>
    12a2:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    12a6:	80 ff       	sbrs	r24, 0
    12a8:	1b c0       	rjmp	.+54     	; 0x12e0 <__vector_10+0x88>
    12aa:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	80 93 da 00 	sts	0x00DA, r24
    12b4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    12b8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <__vector_10+0x7e>
    12bc:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12be:	89 bd       	out	0x29, r24	; 41
    12c0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12c2:	89 bd       	out	0x29, r24	; 41
    12c4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    12c6:	00 fe       	sbrs	r0, 0
    12c8:	fd cf       	rjmp	.-6      	; 0x12c4 <__vector_10+0x6c>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    12cc:	80 93 ef 01 	sts	0x01EF, r24
    12d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <__vector_10+0x88>
    12d6:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12d8:	10 92 ef 01 	sts	0x01EF, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    12dc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    12e0:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    12e4:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    12e6:	18 c0       	rjmp	.+48     	; 0x1318 <__vector_10+0xc0>
    12e8:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    12ec:	80 ff       	sbrs	r24, 0
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <__vector_10+0xc0>
    12f0:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	80 93 e2 00 	sts	0x00E2, r24
    12fa:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    12fe:	80 61       	ori	r24, 0x10	; 16
    1300:	80 93 e2 00 	sts	0x00E2, r24
    1304:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1308:	80 62       	ori	r24, 0x20	; 32
    130a:	80 93 d8 00 	sts	0x00D8, r24
    130e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1310:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1312:	80 93 ef 01 	sts	0x01EF, r24
    1316:	04 d2       	rcall	.+1032   	; 0x1720 <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    1318:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    131c:	84 ff       	sbrs	r24, 4
    131e:	2f c0       	rjmp	.+94     	; 0x137e <__vector_10+0x126>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1320:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1324:	84 ff       	sbrs	r24, 4
    1326:	2b c0       	rjmp	.+86     	; 0x137e <__vector_10+0x126>
    1328:	8c e0       	ldi	r24, 0x0C	; 12
    132a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    132c:	8e e0       	ldi	r24, 0x0E	; 14
    132e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1330:	09 b4       	in	r0, 0x29	; 41
    1332:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1334:	fd cf       	rjmp	.-6      	; 0x1330 <__vector_10+0xd8>
    1336:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    133a:	8f 7d       	andi	r24, 0xDF	; 223
    133c:	80 93 d8 00 	sts	0x00D8, r24
    1340:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1344:	8f 7e       	andi	r24, 0xEF	; 239
    1346:	80 93 e1 00 	sts	0x00E1, r24
    134a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	80 93 e2 00 	sts	0x00E2, r24
    1354:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	80 93 e2 00 	sts	0x00E2, r24
    135e:	80 91 eb 01 	lds	r24, 0x01EB
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1362:	88 23       	and	r24, r24
    1364:	11 f0       	breq	.+4      	; 0x136a <__vector_10+0x112>
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <__vector_10+0x120>
		  USB_DeviceState = DEVICE_STATE_Configured;
    136a:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    136e:	87 ff       	sbrs	r24, 7
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <__vector_10+0x11e>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <__vector_10+0x120>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 ef 01 	sts	0x01EF, r24
    137c:	d1 d1       	rcall	.+930    	; 0x1720 <USB_Event_Stub>
    137e:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1382:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <__vector_10+0x17c>
    1386:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    138a:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    138c:	23 c0       	rjmp	.+70     	; 0x13d4 <__vector_10+0x17c>
    138e:	80 91 e1 00 	lds	r24, 0x00E1
    1392:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1394:	80 93 e1 00 	sts	0x00E1, r24
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	80 93 ef 01 	sts	0x01EF, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    139e:	10 92 eb 01 	sts	0x01EB, r1
    13a2:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    13a6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13a8:	80 93 e1 00 	sts	0x00E1, r24
    13ac:	80 91 e2 00 	lds	r24, 0x00E2
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    13b2:	80 93 e2 00 	sts	0x00E2, r24
    13b6:	80 91 e2 00 	lds	r24, 0x00E2
    13ba:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13bc:	80 93 e2 00 	sts	0x00E2, r24
    13c0:	42 e0       	ldi	r20, 0x02	; 2
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13c6:	25 de       	rcall	.-950    	; 0x1012 <Endpoint_ConfigureEndpoint_Prv>
    13c8:	80 91 f0 00 	lds	r24, 0x00F0
    13cc:	88 60       	ori	r24, 0x08	; 8
    13ce:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    13d2:	a6 d1       	rcall	.+844    	; 0x1720 <USB_Event_Stub>
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0b be       	out	0x3b, r0	; 59
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_11>:
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	cf 93       	push	r28
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1422:	c0 91 e9 00 	lds	r28, 0x00E9
    1426:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1428:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    142c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1430:	80 91 f0 00 	lds	r24, 0x00F0
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    143a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    143c:	1d d0       	rcall	.+58     	; 0x1478 <USB_Device_ProcessControlRequest>
    143e:	10 92 e9 00 	sts	0x00E9, r1
    1442:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	80 93 f0 00 	sts	0x00F0, r24
    144c:	c0 93 e9 00 	sts	0x00E9, r28
    1450:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1452:	ef 91       	pop	r30
    1454:	cf 91       	pop	r28
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	0b be       	out	0x3b, r0	; 59
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <USB_Device_ProcessControlRequest>:
    1478:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	aa 97       	sbiw	r28, 0x2a	; 42
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	e0 ef       	ldi	r30, 0xF0	; 240
    1490:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1492:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1496:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	e8 3f       	cpi	r30, 0xF8	; 248
    149c:	f2 07       	cpc	r31, r18
    149e:	c9 f7       	brne	.-14     	; 0x1492 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    14a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14a4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    14a8:	83 ff       	sbrs	r24, 3
    14aa:	22 c1       	rjmp	.+580    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    14ac:	90 91 f0 01 	lds	r25, 0x01F0

		switch (USB_ControlRequest.bRequest)
    14b0:	80 91 f1 01 	lds	r24, 0x01F1
    14b4:	85 30       	cpi	r24, 0x05	; 5
    14b6:	09 f4       	brne	.+2      	; 0x14ba <USB_Device_ProcessControlRequest+0x42>
    14b8:	77 c0       	rjmp	.+238    	; 0x15a8 <USB_Device_ProcessControlRequest+0x130>
    14ba:	30 f4       	brcc	.+12     	; 0x14c8 <USB_Device_ProcessControlRequest+0x50>
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	81 f1       	breq	.+96     	; 0x1520 <USB_Device_ProcessControlRequest+0xa8>
    14c0:	68 f0       	brcs	.+26     	; 0x14dc <USB_Device_ProcessControlRequest+0x64>
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	69 f1       	breq	.+90     	; 0x1520 <USB_Device_ProcessControlRequest+0xa8>
    14c6:	14 c1       	rjmp	.+552    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	09 f4       	brne	.+2      	; 0x14ce <USB_Device_ProcessControlRequest+0x56>
    14cc:	e2 c0       	rjmp	.+452    	; 0x1692 <USB_Device_ProcessControlRequest+0x21a>
    14ce:	89 30       	cpi	r24, 0x09	; 9
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <USB_Device_ProcessControlRequest+0x5c>
    14d2:	f1 c0       	rjmp	.+482    	; 0x16b6 <USB_Device_ProcessControlRequest+0x23e>
    14d4:	86 30       	cpi	r24, 0x06	; 6
    14d6:	09 f0       	breq	.+2      	; 0x14da <USB_Device_ProcessControlRequest+0x62>
    14d8:	0b c1       	rjmp	.+534    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    14da:	88 c0       	rjmp	.+272    	; 0x15ec <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14dc:	90 38       	cpi	r25, 0x80	; 128
    14de:	81 f0       	breq	.+32     	; 0x1500 <USB_Device_ProcessControlRequest+0x88>
    14e0:	92 38       	cpi	r25, 0x82	; 130
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <USB_Device_ProcessControlRequest+0x6e>
    14e4:	05 c1       	rjmp	.+522    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14e6:	80 91 f4 01 	lds	r24, 0x01F4
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14f0:	80 91 eb 00 	lds	r24, 0x00EB
    14f4:	85 fb       	bst	r24, 5
    14f6:	88 27       	eor	r24, r24
    14f8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14fa:	10 92 e9 00 	sts	0x00E9, r1
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <USB_Device_ProcessControlRequest+0x94>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1500:	80 91 ec 01 	lds	r24, 0x01EC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1504:	90 91 ed 01 	lds	r25, 0x01ED
    1508:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    150a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    150c:	90 91 e8 00 	lds	r25, 0x00E8
    1510:	97 7f       	andi	r25, 0xF7	; 247
    1512:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1516:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    151a:	10 92 f1 00 	sts	0x00F1, r1
    151e:	c4 c0       	rjmp	.+392    	; 0x16a8 <USB_Device_ProcessControlRequest+0x230>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1520:	29 2f       	mov	r18, r25
    1522:	2d 7f       	andi	r18, 0xFD	; 253
    1524:	09 f0       	breq	.+2      	; 0x1528 <USB_Device_ProcessControlRequest+0xb0>
    1526:	e4 c0       	rjmp	.+456    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1528:	99 23       	and	r25, r25
    152a:	19 f0       	breq	.+6      	; 0x1532 <USB_Device_ProcessControlRequest+0xba>
    152c:	92 30       	cpi	r25, 0x02	; 2
    152e:	61 f0       	breq	.+24     	; 0x1548 <USB_Device_ProcessControlRequest+0xd0>
    1530:	df c0       	rjmp	.+446    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1532:	90 91 f2 01 	lds	r25, 0x01F2
    1536:	91 30       	cpi	r25, 0x01	; 1
    1538:	09 f0       	breq	.+2      	; 0x153c <USB_Device_ProcessControlRequest+0xc4>
    153a:	da c0       	rjmp	.+436    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	09 f0       	breq	.+2      	; 0x1542 <USB_Device_ProcessControlRequest+0xca>
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 ed 01 	sts	0x01ED, r25
    1546:	2a c0       	rjmp	.+84     	; 0x159c <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1548:	90 91 f2 01 	lds	r25, 0x01F2
    154c:	91 11       	cpse	r25, r1
    154e:	26 c0       	rjmp	.+76     	; 0x159c <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1550:	20 91 f4 01 	lds	r18, 0x01F4
    1554:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1556:	09 f4       	brne	.+2      	; 0x155a <USB_Device_ProcessControlRequest+0xe2>
    1558:	cb c0       	rjmp	.+406    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    155a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    155e:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1562:	90 ff       	sbrs	r25, 0
    1564:	1b c0       	rjmp	.+54     	; 0x159c <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	21 f4       	brne	.+8      	; 0x1572 <USB_Device_ProcessControlRequest+0xfa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    156a:	80 91 eb 00 	lds	r24, 0x00EB
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	13 c0       	rjmp	.+38     	; 0x1598 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1572:	80 91 eb 00 	lds	r24, 0x00EB
    1576:	80 61       	ori	r24, 0x10	; 16
    1578:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <USB_Device_ProcessControlRequest+0x10e>
    1584:	88 0f       	add	r24, r24
    1586:	0a 94       	dec	r0
    1588:	ea f7       	brpl	.-6      	; 0x1584 <USB_Device_ProcessControlRequest+0x10c>
    158a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    158e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1592:	80 91 eb 00 	lds	r24, 0x00EB
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    159c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15a0:	80 91 e8 00 	lds	r24, 0x00E8
    15a4:	87 7f       	andi	r24, 0xF7	; 247
    15a6:	83 c0       	rjmp	.+262    	; 0x16ae <USB_Device_ProcessControlRequest+0x236>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15a8:	91 11       	cpse	r25, r1
    15aa:	a2 c0       	rjmp	.+324    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    15ac:	10 91 f2 01 	lds	r17, 0x01F2
    15b0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    15b2:	80 91 e3 00 	lds	r24, 0x00E3
    15b6:	80 78       	andi	r24, 0x80	; 128
    15b8:	81 2b       	or	r24, r17
    15ba:	80 93 e3 00 	sts	0x00E3, r24
    15be:	80 91 e8 00 	lds	r24, 0x00E8
    15c2:	87 7f       	andi	r24, 0xF7	; 247
    15c4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    15c8:	96 dd       	rcall	.-1236   	; 0x10f6 <Endpoint_ClearStatusStage>
    15ca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15ce:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    15d0:	fc cf       	rjmp	.-8      	; 0x15ca <USB_Device_ProcessControlRequest+0x152>
    15d2:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    15d6:	80 68       	ori	r24, 0x80	; 128
    15d8:	80 93 e3 00 	sts	0x00E3, r24
    15dc:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15de:	11 f0       	breq	.+4      	; 0x15e4 <USB_Device_ProcessControlRequest+0x16c>
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <USB_Device_ProcessControlRequest+0x16e>
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	80 93 ef 01 	sts	0x01EF, r24
    15ea:	82 c0       	rjmp	.+260    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    15ec:	90 58       	subi	r25, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15ee:	92 30       	cpi	r25, 0x02	; 2
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <USB_Device_ProcessControlRequest+0x17c>
    15f2:	7e c0       	rjmp	.+252    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    15f4:	80 91 f2 01 	lds	r24, 0x01F2
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15f8:	90 91 f3 01 	lds	r25, 0x01F3
    15fc:	8c 3d       	cpi	r24, 0xDC	; 220
    15fe:	23 e0       	ldi	r18, 0x03	; 3
    1600:	92 07       	cpc	r25, r18
    1602:	71 f5       	brne	.+92     	; 0x1660 <USB_Device_ProcessControlRequest+0x1e8>
    1604:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1606:	8a 83       	std	Y+2, r24	; 0x02
    1608:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    160e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1610:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1612:	13 96       	adiw	r26, 0x03	; 3
    1614:	20 e0       	ldi	r18, 0x00	; 0
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1616:	3e e0       	ldi	r19, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1618:	51 e2       	ldi	r21, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    161a:	e3 2f       	mov	r30, r19
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	50 93 57 00 	sts	0x0057, r21
    1622:	e4 91       	lpm	r30, Z
    1624:	20 ff       	sbrs	r18, 0

					if (SerialCharNum & 0x01)
    1626:	03 c0       	rjmp	.+6      	; 0x162e <USB_Device_ProcessControlRequest+0x1b6>
    1628:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    162a:	ef 70       	andi	r30, 0x0F	; 15
    162c:	3f 5f       	subi	r19, 0xFF	; 255
						SigReadAddress++;
    162e:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1630:	8e 2f       	mov	r24, r30
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1636:	10 f0       	brcs	.+4      	; 0x163c <USB_Device_ProcessControlRequest+0x1c4>
    1638:	c7 96       	adiw	r24, 0x37	; 55
    163a:	01 c0       	rjmp	.+2      	; 0x163e <USB_Device_ProcessControlRequest+0x1c6>
    163c:	c0 96       	adiw	r24, 0x30	; 48
    163e:	8d 93       	st	X+, r24
    1640:	9d 93       	st	X+, r25
    1642:	2f 5f       	subi	r18, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1644:	24 31       	cpi	r18, 0x14	; 20
    1646:	49 f7       	brne	.-46     	; 0x161a <USB_Device_ProcessControlRequest+0x1a2>
    1648:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    164a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	80 93 e8 00 	sts	0x00E8, r24
    1654:	6a e2       	ldi	r22, 0x2A	; 42

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	ce 01       	movw	r24, r28
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	1d dc       	rcall	.-1990   	; 0xe98 <Endpoint_Write_Control_Stream_LE>
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <USB_Device_ProcessControlRequest+0x20e>
    1660:	ae 01       	movw	r20, r28
    1662:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	60 91 f4 01 	lds	r22, 0x01F4
    166a:	0e 94 8f 01 	call	0x31e	; 0x31e <CALLBACK_USB_GetDescriptor>
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	09 f4       	brne	.+2      	; 0x1674 <USB_Device_ProcessControlRequest+0x1fc>
    1672:	3e c0       	rjmp	.+124    	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    1674:	20 91 e8 00 	lds	r18, 0x00E8
    1678:	27 7f       	andi	r18, 0xF7	; 247
    167a:	20 93 e8 00 	sts	0x00E8, r18
    167e:	bc 01       	movw	r22, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	66 dc       	rcall	.-1844   	; 0xf52 <Endpoint_Write_Control_PStream_LE>
    1686:	80 91 e8 00 	lds	r24, 0x00E8
    168a:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    168c:	80 93 e8 00 	sts	0x00E8, r24
    1690:	2f c0       	rjmp	.+94     	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    1692:	90 38       	cpi	r25, 0x80	; 128
    1694:	69 f5       	brne	.+90     	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    1696:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    169a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    169c:	80 93 e8 00 	sts	0x00E8, r24
    16a0:	80 91 eb 01 	lds	r24, 0x01EB
    16a4:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16a8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16ac:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ae:	80 93 e8 00 	sts	0x00E8, r24
    16b2:	21 dd       	rcall	.-1470   	; 0x10f6 <Endpoint_ClearStatusStage>
    16b4:	1d c0       	rjmp	.+58     	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    16b6:	91 11       	cpse	r25, r1
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    16b8:	1b c0       	rjmp	.+54     	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
    16ba:	90 91 f2 01 	lds	r25, 0x01F2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16be:	92 30       	cpi	r25, 0x02	; 2
    16c0:	b8 f4       	brcc	.+46     	; 0x16f0 <USB_Device_ProcessControlRequest+0x278>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    16c2:	80 91 e8 00 	lds	r24, 0x00E8
    16c6:	87 7f       	andi	r24, 0xF7	; 247
    16c8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16cc:	90 93 eb 01 	sts	0x01EB, r25
    16d0:	12 dd       	rcall	.-1500   	; 0x10f6 <Endpoint_ClearStatusStage>
    16d2:	80 91 eb 01 	lds	r24, 0x01EB
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16d6:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <USB_Device_ProcessControlRequest+0x26a>
    16da:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    16de:	87 ff       	sbrs	r24, 7
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <USB_Device_ProcessControlRequest+0x26e>
    16e2:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <USB_Device_ProcessControlRequest+0x270>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16e8:	80 93 ef 01 	sts	0x01EF, r24
    16ec:	0e 94 66 01 	call	0x2cc	; 0x2cc <EVENT_USB_Device_ConfigurationChanged>
    16f0:	80 91 e8 00 	lds	r24, 0x00E8
    16f4:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <USB_Device_ProcessControlRequest+0x294>
    16f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16fc:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    16fe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1702:	80 91 eb 00 	lds	r24, 0x00EB
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    170c:	aa 96       	adiw	r28, 0x2a	; 42
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	08 95       	ret

00001720 <USB_Event_Stub>:
    1720:	08 95       	ret

00001722 <USB_USBTask>:
    1722:	cf 93       	push	r28
    1724:	80 91 ef 01 	lds	r24, 0x01EF
    1728:	88 23       	and	r24, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    172a:	a9 f0       	breq	.+42     	; 0x1756 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    172c:	80 91 e9 00 	lds	r24, 0x00E9
    1730:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1732:	90 91 ec 00 	lds	r25, 0x00EC
    1736:	90 ff       	sbrs	r25, 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <USB_USBTask+0x1c>
    173a:	90 e8       	ldi	r25, 0x80	; 128
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <USB_USBTask+0x1e>
    173e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1740:	c9 2f       	mov	r28, r25
    1742:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1744:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1748:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    174c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    174e:	94 de       	rcall	.-728    	; 0x1478 <USB_Device_ProcessControlRequest>
    1750:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1752:	c0 93 e9 00 	sts	0x00E9, r28
    1756:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1758:	08 95       	ret

0000175a <CDC_Device_ConfigureEndpoints>:
    175a:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1760:	fc 01       	movw	r30, r24
    1762:	70 96       	adiw	r30, 0x10	; 16
    1764:	8b e0       	ldi	r24, 0x0B	; 11
    1766:	df 01       	movw	r26, r30
    1768:	1d 92       	st	X+, r1
    176a:	8a 95       	dec	r24
    176c:	e9 f7       	brne	.-6      	; 0x1768 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1772:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	7e dc       	rcall	.-1796   	; 0x107c <Endpoint_ConfigureEndpointTable>
    1780:	88 23       	and	r24, r24
    1782:	61 f0       	breq	.+24     	; 0x179c <CDC_Device_ConfigureEndpoints+0x42>
    1784:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1786:	ce 01       	movw	r24, r28
    1788:	06 96       	adiw	r24, 0x06	; 6
    178a:	78 dc       	rcall	.-1808   	; 0x107c <Endpoint_ConfigureEndpointTable>
    178c:	88 23       	and	r24, r24
    178e:	31 f0       	breq	.+12     	; 0x179c <CDC_Device_ConfigureEndpoints+0x42>
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1794:	0b 96       	adiw	r24, 0x0b	; 11
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
	  return false;

	return true;
}
    179a:	70 cc       	rjmp	.-1824   	; 0x107c <Endpoint_ConfigureEndpointTable>
    179c:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
	  return false;

	return true;
}
    17a2:	08 95       	ret

000017a4 <CDC_Device_SendByte>:
    17a4:	cf 93       	push	r28
    17a6:	c6 2f       	mov	r28, r22
    17a8:	20 91 ef 01 	lds	r18, 0x01EF
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    17ac:	24 30       	cpi	r18, 0x04	; 4
    17ae:	f1 f4       	brne	.+60     	; 0x17ec <CDC_Device_SendByte+0x48>
    17b0:	fc 01       	movw	r30, r24
    17b2:	44 89       	ldd	r20, Z+20	; 0x14
    17b4:	55 89       	ldd	r21, Z+21	; 0x15
    17b6:	66 89       	ldd	r22, Z+22	; 0x16
    17b8:	77 89       	ldd	r23, Z+23	; 0x17
    17ba:	45 2b       	or	r20, r21
    17bc:	46 2b       	or	r20, r22
    17be:	47 2b       	or	r20, r23
    17c0:	a9 f0       	breq	.+42     	; 0x17ec <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	8f 70       	andi	r24, 0x0F	; 15
    17c6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17ca:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    17ce:	85 ff       	sbrs	r24, 5
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17d2:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17da:	80 91 e8 00 	lds	r24, 0x00E8
    17de:	8e 77       	andi	r24, 0x7E	; 126
    17e0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    17e4:	a9 dc       	rcall	.-1710   	; 0x1138 <Endpoint_WaitUntilReady>
    17e6:	88 23       	and	r24, r24
    17e8:	a1 f3       	breq	.-24     	; 0x17d2 <CDC_Device_SendByte+0x2e>
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <CDC_Device_SendByte+0x4a>
    17ec:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    17ee:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    17f0:	08 95       	ret

000017f2 <CDC_Device_putchar>:
    17f2:	fb 01       	movw	r30, r22
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    17f4:	68 2f       	mov	r22, r24
    17f6:	84 85       	ldd	r24, Z+12	; 0x0c
    17f8:	95 85       	ldd	r25, Z+13	; 0x0d
    17fa:	d4 df       	rcall	.-88     	; 0x17a4 <CDC_Device_SendByte>
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 11       	cpse	r24, r1
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <CDC_Device_putchar+0x16>
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	88 27       	eor	r24, r24
}
    180a:	99 27       	eor	r25, r25
    180c:	82 1b       	sub	r24, r18
    180e:	93 0b       	sbc	r25, r19
    1810:	08 95       	ret

00001812 <CDC_Device_Flush>:
    1812:	20 91 ef 01 	lds	r18, 0x01EF
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1816:	24 30       	cpi	r18, 0x04	; 4
    1818:	31 f5       	brne	.+76     	; 0x1866 <CDC_Device_Flush+0x54>
    181a:	fc 01       	movw	r30, r24
    181c:	44 89       	ldd	r20, Z+20	; 0x14
    181e:	55 89       	ldd	r21, Z+21	; 0x15
    1820:	66 89       	ldd	r22, Z+22	; 0x16
    1822:	77 89       	ldd	r23, Z+23	; 0x17
    1824:	45 2b       	or	r20, r21
    1826:	46 2b       	or	r20, r22
    1828:	47 2b       	or	r20, r23
    182a:	e9 f0       	breq	.+58     	; 0x1866 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    182c:	81 81       	ldd	r24, Z+1	; 0x01
    182e:	8f 70       	andi	r24, 0x0F	; 15
    1830:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1834:	80 91 f2 00 	lds	r24, 0x00F2
    1838:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    183c:	89 2b       	or	r24, r25
    183e:	89 f0       	breq	.+34     	; 0x1862 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1840:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1844:	80 91 e8 00 	lds	r24, 0x00E8
    1848:	8e 77       	andi	r24, 0x7E	; 126
    184a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    184e:	95 fd       	sbrc	r25, 5
    1850:	08 c0       	rjmp	.+16     	; 0x1862 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1852:	72 dc       	rcall	.-1820   	; 0x1138 <Endpoint_WaitUntilReady>
    1854:	81 11       	cpse	r24, r1
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <CDC_Device_Flush+0x56>
    1858:	80 91 e8 00 	lds	r24, 0x00E8
    185c:	8e 77       	andi	r24, 0x7E	; 126
    185e:	80 93 e8 00 	sts	0x00E8, r24
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	08 95       	ret
    1866:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1868:	08 95       	ret

0000186a <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    186a:	20 91 ef 01 	lds	r18, 0x01EF
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    186e:	24 30       	cpi	r18, 0x04	; 4
    1870:	89 f4       	brne	.+34     	; 0x1894 <CDC_Device_USBTask+0x2a>
    1872:	fc 01       	movw	r30, r24
    1874:	44 89       	ldd	r20, Z+20	; 0x14
    1876:	55 89       	ldd	r21, Z+21	; 0x15
    1878:	66 89       	ldd	r22, Z+22	; 0x16
    187a:	77 89       	ldd	r23, Z+23	; 0x17
    187c:	45 2b       	or	r20, r21
    187e:	46 2b       	or	r20, r22
    1880:	47 2b       	or	r20, r23
    1882:	41 f0       	breq	.+16     	; 0x1894 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1884:	21 81       	ldd	r18, Z+1	; 0x01
    1886:	2f 70       	andi	r18, 0x0F	; 15
    1888:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    188c:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1890:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
    1892:	bf cf       	rjmp	.-130    	; 0x1812 <CDC_Device_Flush>
    1894:	08 95       	ret

00001896 <CDC_Device_ReceiveByte>:
    1896:	20 91 ef 01 	lds	r18, 0x01EF
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    189a:	24 30       	cpi	r18, 0x04	; 4
    189c:	19 f0       	breq	.+6      	; 0x18a4 <CDC_Device_ReceiveByte+0xe>
	  return -1;
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    18a4:	fc 01       	movw	r30, r24
    18a6:	44 89       	ldd	r20, Z+20	; 0x14
    18a8:	55 89       	ldd	r21, Z+21	; 0x15
    18aa:	66 89       	ldd	r22, Z+22	; 0x16
    18ac:	77 89       	ldd	r23, Z+23	; 0x17
    18ae:	45 2b       	or	r20, r21
    18b0:	46 2b       	or	r20, r22
    18b2:	47 2b       	or	r20, r23
    18b4:	a1 f3       	breq	.-24     	; 0x189e <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18b6:	86 81       	ldd	r24, Z+6	; 0x06
    18b8:	8f 70       	andi	r24, 0x0F	; 15
    18ba:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18be:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    18c2:	82 ff       	sbrs	r24, 2
    18c4:	ec cf       	rjmp	.-40     	; 0x189e <CDC_Device_ReceiveByte+0x8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    18c6:	80 91 f2 00 	lds	r24, 0x00F2
    18ca:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    18ce:	89 2b       	or	r24, r25
    18d0:	21 f0       	breq	.+8      	; 0x18da <CDC_Device_ReceiveByte+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    18d2:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <CDC_Device_ReceiveByte+0x48>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    18da:	2f ef       	ldi	r18, 0xFF	; 255
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    18de:	80 91 f2 00 	lds	r24, 0x00F2
    18e2:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    18e6:	89 2b       	or	r24, r25
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
    18ee:	8b 77       	andi	r24, 0x7B	; 123
    18f0:	80 93 e8 00 	sts	0x00E8, r24
    18f4:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    18f6:	08 95       	ret

000018f8 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    18f8:	fc 01       	movw	r30, r24
    18fa:	84 85       	ldd	r24, Z+12	; 0x0c
    18fc:	95 85       	ldd	r25, Z+13	; 0x0d
    18fe:	cb df       	rcall	.-106    	; 0x1896 <CDC_Device_ReceiveByte>
    1900:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <CDC_Device_getchar+0x10>
    1904:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    190a:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    190c:	2e e0       	ldi	r18, 0x0E	; 14
    190e:	db 01       	movw	r26, r22
    1910:	1d 92       	st	X+, r1
    1912:	2a 95       	dec	r18
    1914:	e9 f7       	brne	.-6      	; 0x1910 <CDC_Device_CreateStream+0x6>
    1916:	23 e0       	ldi	r18, 0x03	; 3
    1918:	23 83       	std	Z+3, r18	; 0x03
    191a:	29 ef       	ldi	r18, 0xF9	; 249
    191c:	3b e0       	ldi	r19, 0x0B	; 11
    191e:	31 87       	std	Z+9, r19	; 0x09
    1920:	20 87       	std	Z+8, r18	; 0x08
    1922:	2c e7       	ldi	r18, 0x7C	; 124
    1924:	3c e0       	ldi	r19, 0x0C	; 12
    1926:	33 87       	std	Z+11, r19	; 0x0b
    1928:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    192a:	95 87       	std	Z+13, r25	; 0x0d
    192c:	84 87       	std	Z+12, r24	; 0x0c
    192e:	08 95       	ret

00001930 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1930:	08 95       	ret

00001932 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1938:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    193c:	83 ff       	sbrs	r24, 3
    193e:	a6 c0       	rjmp	.+332    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1940:	88 81       	ld	r24, Y
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	20 91 f4 01 	lds	r18, 0x01F4
    1948:	30 91 f5 01 	lds	r19, 0x01F5
    194c:	28 17       	cp	r18, r24
    194e:	39 07       	cpc	r19, r25
    1950:	09 f0       	breq	.+2      	; 0x1954 <CDC_Device_ProcessControlRequest+0x22>
    1952:	9c c0       	rjmp	.+312    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    1954:	80 91 f1 01 	lds	r24, 0x01F1
    1958:	81 32       	cpi	r24, 0x21	; 33
    195a:	61 f0       	breq	.+24     	; 0x1974 <CDC_Device_ProcessControlRequest+0x42>
    195c:	20 f4       	brcc	.+8      	; 0x1966 <CDC_Device_ProcessControlRequest+0x34>
    195e:	80 32       	cpi	r24, 0x20	; 32
    1960:	09 f4       	brne	.+2      	; 0x1964 <CDC_Device_ProcessControlRequest+0x32>
    1962:	3e c0       	rjmp	.+124    	; 0x19e0 <CDC_Device_ProcessControlRequest+0xae>
    1964:	93 c0       	rjmp	.+294    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
    1966:	82 32       	cpi	r24, 0x22	; 34
    1968:	09 f4       	brne	.+2      	; 0x196c <CDC_Device_ProcessControlRequest+0x3a>
    196a:	6c c0       	rjmp	.+216    	; 0x1a44 <CDC_Device_ProcessControlRequest+0x112>
    196c:	83 32       	cpi	r24, 0x23	; 35
    196e:	09 f4       	brne	.+2      	; 0x1972 <CDC_Device_ProcessControlRequest+0x40>
    1970:	7d c0       	rjmp	.+250    	; 0x1a6c <CDC_Device_ProcessControlRequest+0x13a>
    1972:	8c c0       	rjmp	.+280    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1974:	80 91 f0 01 	lds	r24, 0x01F0
    1978:	81 3a       	cpi	r24, 0xA1	; 161
    197a:	09 f0       	breq	.+2      	; 0x197e <CDC_Device_ProcessControlRequest+0x4c>
    197c:	87 c0       	rjmp	.+270    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    197e:	80 91 e8 00 	lds	r24, 0x00E8
    1982:	87 7f       	andi	r24, 0xF7	; 247
    1984:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1988:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    198c:	80 ff       	sbrs	r24, 0
    198e:	fc cf       	rjmp	.-8      	; 0x1988 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1990:	4c 89       	ldd	r20, Y+20	; 0x14
    1992:	5d 89       	ldd	r21, Y+21	; 0x15
    1994:	6e 89       	ldd	r22, Y+22	; 0x16
    1996:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1998:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    199c:	bb 27       	eor	r27, r27
    199e:	a7 2f       	mov	r26, r23
    19a0:	96 2f       	mov	r25, r22
    19a2:	85 2f       	mov	r24, r21
    19a4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    19a8:	cb 01       	movw	r24, r22
    19aa:	aa 27       	eor	r26, r26
    19ac:	bb 27       	eor	r27, r27
    19ae:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    19b2:	47 2f       	mov	r20, r23
    19b4:	55 27       	eor	r21, r21
    19b6:	66 27       	eor	r22, r22
    19b8:	77 27       	eor	r23, r23
    19ba:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    19be:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19c0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    19c4:	89 8d       	ldd	r24, Y+25	; 0x19
    19c6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    19ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19cc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19d0:	80 91 e8 00 	lds	r24, 0x00E8
    19d4:	8e 77       	andi	r24, 0x7E	; 126
    19d6:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    19de:	8b cb       	rjmp	.-2282   	; 0x10f6 <Endpoint_ClearStatusStage>
    19e0:	80 91 f0 01 	lds	r24, 0x01F0
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19e4:	81 32       	cpi	r24, 0x21	; 33
    19e6:	09 f0       	breq	.+2      	; 0x19ea <CDC_Device_ProcessControlRequest+0xb8>
    19e8:	51 c0       	rjmp	.+162    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
    19ea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19ee:	87 7f       	andi	r24, 0xF7	; 247
    19f0:	80 93 e8 00 	sts	0x00E8, r24
    19f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19f8:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <CDC_Device_ProcessControlRequest+0xd4>
    19fc:	80 91 ef 01 	lds	r24, 0x01EF
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a00:	81 11       	cpse	r24, r1
    1a02:	f8 cf       	rjmp	.-16     	; 0x19f4 <CDC_Device_ProcessControlRequest+0xc2>
    1a04:	43 c0       	rjmp	.+134    	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
    1a06:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1a0a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1a0e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1a12:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1a16:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1a18:	2d 8b       	std	Y+21, r18	; 0x15
    1a1a:	9e 8b       	std	Y+22, r25	; 0x16
    1a1c:	8f 8b       	std	Y+23, r24	; 0x17
    1a1e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a22:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1a24:	80 91 f1 00 	lds	r24, 0x00F1
    1a28:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1a2a:	80 91 f1 00 	lds	r24, 0x00F1
    1a2e:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1a30:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a34:	8b 77       	andi	r24, 0x7B	; 123
    1a36:	80 93 e8 00 	sts	0x00E8, r24
    1a3a:	5d db       	rcall	.-2374   	; 0x10f6 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1a40:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1a42:	76 cf       	rjmp	.-276    	; 0x1930 <CDC_Device_Event_Stub>
    1a44:	80 91 f0 01 	lds	r24, 0x01F0
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1a48:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a4a:	01 f5       	brne	.+64     	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8
    1a50:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a52:	80 93 e8 00 	sts	0x00E8, r24
    1a56:	4f db       	rcall	.-2402   	; 0x10f6 <Endpoint_ClearStatusStage>
    1a58:	80 91 f2 01 	lds	r24, 0x01F2
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a5c:	90 91 f3 01 	lds	r25, 0x01F3

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1a60:	99 8b       	std	Y+17, r25	; 0x11
    1a62:	88 8b       	std	Y+16, r24	; 0x10
    1a64:	ce 01       	movw	r24, r28
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	62 cf       	rjmp	.-316    	; 0x1930 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1a6c:	80 91 f0 01 	lds	r24, 0x01F0
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1a70:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1a72:	61 f4       	brne	.+24     	; 0x1a8c <CDC_Device_ProcessControlRequest+0x15a>
    1a74:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a78:	87 7f       	andi	r24, 0xF7	; 247
    1a7a:	80 93 e8 00 	sts	0x00E8, r24
    1a7e:	3b db       	rcall	.-2442   	; 0x10f6 <Endpoint_ClearStatusStage>
    1a80:	60 91 f2 01 	lds	r22, 0x01F2
    1a84:	ce 01       	movw	r24, r28
    1a86:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a88:	cf 91       	pop	r28
    1a8a:	52 cf       	rjmp	.-348    	; 0x1930 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <MS_Device_ProcessControlRequest>:
			}

			break;
	}
}
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a96:	ec 01       	movw	r28, r24
    1a98:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
	}
}
    1a9c:	83 ff       	sbrs	r24, 3
    1a9e:	35 c0       	rjmp	.+106    	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1aa0:	88 81       	ld	r24, Y
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	20 91 f4 01 	lds	r18, 0x01F4
    1aa8:	30 91 f5 01 	lds	r19, 0x01F5
    1aac:	28 17       	cp	r18, r24
    1aae:	39 07       	cpc	r19, r25
    1ab0:	61 f5       	brne	.+88     	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
	  return;

	switch (USB_ControlRequest.bRequest)
    1ab2:	80 91 f1 01 	lds	r24, 0x01F1
    1ab6:	8e 3f       	cpi	r24, 0xFE	; 254
    1ab8:	79 f0       	breq	.+30     	; 0x1ad8 <MS_Device_ProcessControlRequest+0x46>
    1aba:	8f 3f       	cpi	r24, 0xFF	; 255
    1abc:	31 f5       	brne	.+76     	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1abe:	80 91 f0 01 	lds	r24, 0x01F0
    1ac2:	81 32       	cpi	r24, 0x21	; 33
    1ac4:	11 f5       	brne	.+68     	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
    1ac6:	80 91 e8 00 	lds	r24, 0x00E8
    1aca:	87 7f       	andi	r24, 0xF7	; 247
    1acc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1ad0:	12 db       	rcall	.-2524   	; 0x10f6 <Endpoint_ClearStatusStage>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1ad4:	88 af       	std	Y+56, r24	; 0x38
    1ad6:	19 c0       	rjmp	.+50     	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
    1ad8:	80 91 f0 01 	lds	r24, 0x01F0
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1adc:	81 3a       	cpi	r24, 0xA1	; 161
    1ade:	a9 f4       	brne	.+42     	; 0x1b0a <MS_Device_ProcessControlRequest+0x78>
    1ae0:	80 91 e8 00 	lds	r24, 0x00E8
    1ae4:	87 7f       	andi	r24, 0xF7	; 247
    1ae6:	80 93 e8 00 	sts	0x00E8, r24
    1aea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aee:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1af0:	fc cf       	rjmp	.-8      	; 0x1aea <MS_Device_ProcessControlRequest+0x58>
    1af2:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1af4:	81 50       	subi	r24, 0x01	; 1
    1af6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1afa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1afe:	8e 77       	andi	r24, 0x7E	; 126
    1b00:	80 93 e8 00 	sts	0x00E8, r24
    1b04:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1b06:	cf 91       	pop	r28
    1b08:	f6 ca       	rjmp	.-2580   	; 0x10f6 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
			}

			break;
	}
}
    1b0e:	08 95       	ret

00001b10 <MS_Device_ConfigureEndpoints>:
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b14:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1b16:	fc 01       	movw	r30, r24
    1b18:	3c 96       	adiw	r30, 0x0c	; 12
    1b1a:	8d e2       	ldi	r24, 0x2D	; 45
    1b1c:	df 01       	movw	r26, r30
    1b1e:	1d 92       	st	X+, r1
    1b20:	8a 95       	dec	r24
    1b22:	e9 f7       	brne	.-6      	; 0x1b1e <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1b28:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	a5 da       	rcall	.-2742   	; 0x107c <Endpoint_ConfigureEndpointTable>
    1b32:	88 23       	and	r24, r24
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <MS_Device_ConfigureEndpoints+0x32>
    1b36:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1b38:	ce 01       	movw	r24, r28
    1b3a:	06 96       	adiw	r24, 0x06	; 6
    1b3c:	df 91       	pop	r29
	  return false;

	return true;
}
    1b3e:	cf 91       	pop	r28
    1b40:	9d ca       	rjmp	.-2758   	; 0x107c <Endpoint_ConfigureEndpointTable>
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	df 91       	pop	r29
	  return false;

	return true;
}
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <MS_Device_USBTask>:
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <MS_Device_USBTask+0xe>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1b5e:	80 91 ef 01 	lds	r24, 0x01EF
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <MS_Device_USBTask+0x1e>
    1b66:	00 c1       	rjmp	.+512    	; 0x1d68 <MS_Device_USBTask+0x21e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b68:	f8 01       	movw	r30, r16
    1b6a:	86 81       	ldd	r24, Z+6	; 0x06
    1b6c:	8f 70       	andi	r24, 0x0F	; 15
    1b6e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b72:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1b76:	82 ff       	sbrs	r24, 2
    1b78:	bd c0       	rjmp	.+378    	; 0x1cf4 <MS_Device_USBTask+0x1aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b7a:	86 81       	ldd	r24, Z+6	; 0x06
    1b7c:	8f 70       	andi	r24, 0x0F	; 15
    1b7e:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    1b82:	1a 82       	std	Y+2, r1	; 0x02
    1b84:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1b86:	78 01       	movw	r14, r16
    1b88:	fc e0       	ldi	r31, 0x0C	; 12
    1b8a:	ef 0e       	add	r14, r31
    1b8c:	f1 1c       	adc	r15, r1
    1b8e:	ae 01       	movw	r20, r28
    1b90:	4f 5f       	subi	r20, 0xFF	; 255
    1b92:	5f 4f       	sbci	r21, 0xFF	; 255
    1b94:	6f e0       	ldi	r22, 0x0F	; 15
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	c7 01       	movw	r24, r14
    1b9a:	37 d9       	rcall	.-3474   	; 0xe0a <Endpoint_Read_Stream_LE>
    1b9c:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b9e:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1ba0:	21 f4       	brne	.+8      	; 0x1baa <MS_Device_USBTask+0x60>
    1ba2:	80 ad       	ldd	r24, Z+56	; 0x38
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ba4:	88 23       	and	r24, r24
    1ba6:	99 f3       	breq	.-26     	; 0x1b8e <MS_Device_USBTask+0x44>
    1ba8:	a5 c0       	rjmp	.+330    	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1baa:	84 85       	ldd	r24, Z+12	; 0x0c
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1bac:	95 85       	ldd	r25, Z+13	; 0x0d
    1bae:	a6 85       	ldd	r26, Z+14	; 0x0e
    1bb0:	b7 85       	ldd	r27, Z+15	; 0x0f
    1bb2:	85 35       	cpi	r24, 0x55	; 85
    1bb4:	93 45       	sbci	r25, 0x53	; 83
    1bb6:	a2 44       	sbci	r26, 0x42	; 66
    1bb8:	b3 44       	sbci	r27, 0x43	; 67
    1bba:	61 f4       	brne	.+24     	; 0x1bd4 <MS_Device_USBTask+0x8a>
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	91 8d       	ldd	r25, Z+25	; 0x19
    1bc0:	83 85       	ldd	r24, Z+11	; 0x0b
    1bc2:	98 17       	cp	r25, r24
    1bc4:	38 f4       	brcc	.+14     	; 0x1bd4 <MS_Device_USBTask+0x8a>
    1bc6:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1bc8:	8f 71       	andi	r24, 0x1F	; 31
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <MS_Device_USBTask+0x8a>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1bce:	81 50       	subi	r24, 0x01	; 1
    1bd0:	80 31       	cpi	r24, 0x10	; 16
    1bd2:	80 f0       	brcs	.+32     	; 0x1bf4 <MS_Device_USBTask+0xaa>
    1bd4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1bd8:	80 62       	ori	r24, 0x20	; 32
    1bda:	80 93 eb 00 	sts	0x00EB, r24
    1bde:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be0:	81 81       	ldd	r24, Z+1	; 0x01
    1be2:	8f 70       	andi	r24, 0x0F	; 15
    1be4:	80 93 e9 00 	sts	0x00E9, r24
    1be8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1bec:	80 62       	ori	r24, 0x20	; 32
    1bee:	80 93 eb 00 	sts	0x00EB, r24
    1bf2:	80 c0       	rjmp	.+256    	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1bf4:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1bf6:	19 82       	std	Y+1, r1	; 0x01
    1bf8:	78 01       	movw	r14, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1bfa:	fb e1       	ldi	r31, 0x1B	; 27
    1bfc:	ef 0e       	add	r14, r31
    1bfe:	f1 1c       	adc	r15, r1
    1c00:	f8 01       	movw	r30, r16
    1c02:	62 8d       	ldd	r22, Z+26	; 0x1a
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	ae 01       	movw	r20, r28
    1c08:	4f 5f       	subi	r20, 0xFF	; 255
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	fd d8       	rcall	.-3590   	; 0xe0a <Endpoint_Read_Stream_LE>
    1c10:	85 30       	cpi	r24, 0x05	; 5
    1c12:	29 f4       	brne	.+10     	; 0x1c1e <MS_Device_USBTask+0xd4>
    1c14:	f8 01       	movw	r30, r16
    1c16:	80 ad       	ldd	r24, Z+56	; 0x38
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c18:	88 23       	and	r24, r24
    1c1a:	91 f3       	breq	.-28     	; 0x1c00 <MS_Device_USBTask+0xb6>
    1c1c:	6b c0       	rjmp	.+214    	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1c1e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c22:	8b 77       	andi	r24, 0x7B	; 123
    1c24:	80 93 e8 00 	sts	0x00E8, r24
    1c28:	f8 01       	movw	r30, r16
    1c2a:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1c2c:	87 ff       	sbrs	r24, 7
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <MS_Device_USBTask+0xee>
    1c30:	81 81       	ldd	r24, Z+1	; 0x01
    1c32:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c34:	80 93 e9 00 	sts	0x00E9, r24
    1c38:	c8 01       	movw	r24, r16
    1c3a:	0e 94 81 01 	call	0x302	; 0x302 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	98 27       	eor	r25, r24

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1c42:	f8 01       	movw	r30, r16
    1c44:	97 ab       	std	Z+55, r25	; 0x37
    1c46:	45 e5       	ldi	r20, 0x55	; 85
    1c48:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1c4a:	62 e4       	ldi	r22, 0x42	; 66
    1c4c:	73 e5       	ldi	r23, 0x53	; 83
    1c4e:	43 a7       	std	Z+43, r20	; 0x2b
    1c50:	54 a7       	std	Z+44, r21	; 0x2c
    1c52:	65 a7       	std	Z+45, r22	; 0x2d
    1c54:	76 a7       	std	Z+46, r23	; 0x2e
    1c56:	40 89       	ldd	r20, Z+16	; 0x10
    1c58:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1c5a:	62 89       	ldd	r22, Z+18	; 0x12
    1c5c:	73 89       	ldd	r23, Z+19	; 0x13
    1c5e:	47 a7       	std	Z+47, r20	; 0x2f
    1c60:	50 ab       	std	Z+48, r21	; 0x30
    1c62:	61 ab       	std	Z+49, r22	; 0x31
    1c64:	72 ab       	std	Z+50, r23	; 0x32
    1c66:	44 89       	ldd	r20, Z+20	; 0x14
    1c68:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1c6a:	66 89       	ldd	r22, Z+22	; 0x16
    1c6c:	77 89       	ldd	r23, Z+23	; 0x17
    1c6e:	43 ab       	std	Z+51, r20	; 0x33
    1c70:	54 ab       	std	Z+52, r21	; 0x34
    1c72:	65 ab       	std	Z+53, r22	; 0x35
    1c74:	76 ab       	std	Z+54, r23	; 0x36
    1c76:	81 11       	cpse	r24, r1
    1c78:	09 c0       	rjmp	.+18     	; 0x1c8c <MS_Device_USBTask+0x142>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1c7a:	45 2b       	or	r20, r21
    1c7c:	46 2b       	or	r20, r22
    1c7e:	47 2b       	or	r20, r23
    1c80:	29 f0       	breq	.+10     	; 0x1c8c <MS_Device_USBTask+0x142>
    1c82:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c86:	80 62       	ori	r24, 0x20	; 32
    1c88:	80 93 eb 00 	sts	0x00EB, r24
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c90:	8f 70       	andi	r24, 0x0F	; 15
    1c92:	80 93 e9 00 	sts	0x00E9, r24
    1c96:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	85 ff       	sbrs	r24, 5
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <MS_Device_USBTask+0x15e>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1ca0:	80 ad       	ldd	r24, Z+56	; 0x38
    1ca2:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ca4:	c1 f3       	breq	.-16     	; 0x1c96 <MS_Device_USBTask+0x14c>
    1ca6:	26 c0       	rjmp	.+76     	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1ca8:	81 81       	ldd	r24, Z+1	; 0x01
    1caa:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cac:	80 93 e9 00 	sts	0x00E9, r24
    1cb0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1cb4:	85 ff       	sbrs	r24, 5
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <MS_Device_USBTask+0x178>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 ad       	ldd	r24, Z+56	; 0x38
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1cbc:	88 23       	and	r24, r24
    1cbe:	c1 f3       	breq	.-16     	; 0x1cb0 <MS_Device_USBTask+0x166>
    1cc0:	19 c0       	rjmp	.+50     	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1cc2:	1a 82       	std	Y+2, r1	; 0x02
    1cc4:	19 82       	std	Y+1, r1	; 0x01
		  return;
	}

	uint16_t BytesProcessed = 0;
    1cc6:	78 01       	movw	r14, r16
    1cc8:	fb e2       	ldi	r31, 0x2B	; 43
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1cca:	ef 0e       	add	r14, r31
    1ccc:	f1 1c       	adc	r15, r1
    1cce:	ae 01       	movw	r20, r28
    1cd0:	4f 5f       	subi	r20, 0xFF	; 255
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	6d e0       	ldi	r22, 0x0D	; 13
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	c7 01       	movw	r24, r14
    1cda:	02 d8       	rcall	.-4092   	; 0xce0 <Endpoint_Write_Stream_LE>
    1cdc:	85 30       	cpi	r24, 0x05	; 5
    1cde:	29 f4       	brne	.+10     	; 0x1cea <MS_Device_USBTask+0x1a0>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 ad       	ldd	r24, Z+56	; 0x38
    1ce4:	88 23       	and	r24, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ce6:	99 f3       	breq	.-26     	; 0x1cce <MS_Device_USBTask+0x184>
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <MS_Device_USBTask+0x1aa>
    1cea:	80 91 e8 00 	lds	r24, 0x00E8
    1cee:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cf0:	80 93 e8 00 	sts	0x00E8, r24
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	80 ad       	ldd	r24, Z+56	; 0x38
    1cf8:	88 23       	and	r24, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1cfa:	b1 f1       	breq	.+108    	; 0x1d68 <MS_Device_USBTask+0x21e>
    1cfc:	26 81       	ldd	r18, Z+6	; 0x06
    1cfe:	2f 70       	andi	r18, 0x0F	; 15
    1d00:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	ac 01       	movw	r20, r24
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <MS_Device_USBTask+0x1c2>
    1d08:	44 0f       	add	r20, r20
    1d0a:	55 1f       	adc	r21, r21
    1d0c:	2a 95       	dec	r18
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <MS_Device_USBTask+0x1be>
    1d10:	40 93 ea 00 	sts	0x00EA, r20
    1d14:	10 92 ea 00 	sts	0x00EA, r1
    1d18:	21 81       	ldd	r18, Z+1	; 0x01
				UERST = 0;
    1d1a:	2f 70       	andi	r18, 0x0F	; 15
    1d1c:	02 2e       	mov	r0, r18
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <MS_Device_USBTask+0x1d8>
    1d20:	88 0f       	add	r24, r24
    1d22:	0a 94       	dec	r0
    1d24:	ea f7       	brpl	.-6      	; 0x1d20 <MS_Device_USBTask+0x1d6>
    1d26:	80 93 ea 00 	sts	0x00EA, r24
    1d2a:	10 92 ea 00 	sts	0x00EA, r1
    1d2e:	86 81       	ldd	r24, Z+6	; 0x06
				UERST = 0;
    1d30:	8f 70       	andi	r24, 0x0F	; 15
    1d32:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d36:	80 91 eb 00 	lds	r24, 0x00EB
    1d3a:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1d3c:	80 93 eb 00 	sts	0x00EB, r24
    1d40:	80 91 eb 00 	lds	r24, 0x00EB
    1d44:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1d46:	80 93 eb 00 	sts	0x00EB, r24
    1d4a:	81 81       	ldd	r24, Z+1	; 0x01
    1d4c:	8f 70       	andi	r24, 0x0F	; 15
    1d4e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d52:	80 91 eb 00 	lds	r24, 0x00EB
    1d56:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1d58:	80 93 eb 00 	sts	0x00EB, r24
    1d5c:	80 91 eb 00 	lds	r24, 0x00EB
    1d60:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1d62:	80 93 eb 00 	sts	0x00EB, r24
    1d66:	10 ae       	std	Z+56, r1	; 0x38
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1d6c:	df 91       	pop	r29
	}
}
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	08 95       	ret

00001d7a <fputs>:
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	8b 01       	movw	r16, r22
    1d88:	db 01       	movw	r26, r22
    1d8a:	13 96       	adiw	r26, 0x03	; 3
    1d8c:	2c 91       	ld	r18, X
    1d8e:	21 ff       	sbrs	r18, 1
    1d90:	16 c0       	rjmp	.+44     	; 0x1dbe <fputs+0x44>
    1d92:	ec 01       	movw	r28, r24
    1d94:	e1 2c       	mov	r14, r1
    1d96:	f1 2c       	mov	r15, r1
    1d98:	89 91       	ld	r24, Y+
    1d9a:	88 23       	and	r24, r24
    1d9c:	71 f0       	breq	.+28     	; 0x1dba <fputs+0x40>
    1d9e:	d8 01       	movw	r26, r16
    1da0:	18 96       	adiw	r26, 0x08	; 8
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	19 97       	sbiw	r26, 0x09	; 9
    1da8:	b8 01       	movw	r22, r16
    1daa:	09 95       	icall
    1dac:	89 2b       	or	r24, r25
    1dae:	a1 f3       	breq	.-24     	; 0x1d98 <fputs+0x1e>
    1db0:	ee 24       	eor	r14, r14
    1db2:	ea 94       	dec	r14
    1db4:	ff 24       	eor	r15, r15
    1db6:	fa 94       	dec	r15
    1db8:	ef cf       	rjmp	.-34     	; 0x1d98 <fputs+0x1e>
    1dba:	c7 01       	movw	r24, r14
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <fputs+0x48>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	08 95       	ret

00001dd0 <_exit>:
    1dd0:	f8 94       	cli

00001dd2 <__stop_program>:
    1dd2:	ff cf       	rjmp	.-2      	; 0x1dd2 <__stop_program>

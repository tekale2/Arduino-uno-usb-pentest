
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000e1e  2**0
                  ALLOC
  3 .stab         000008dc  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000350  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005511  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001617  00000000  00000000  0000704f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024b4  00000000  00000000  00008666  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e8  00000000  00000000  0000ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002662  00000000  00000000  0000b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c64  00000000  00000000  0000da66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000500  00000000  00000000  000116ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	dd c0       	rjmp	.+442    	; 0x1bc <__ctors_end>
   2:	00 00       	nop
   4:	eb c0       	rjmp	.+470    	; 0x1dc <__bad_interrupt>
   6:	00 00       	nop
   8:	e9 c0       	rjmp	.+466    	; 0x1dc <__bad_interrupt>
   a:	00 00       	nop
   c:	e7 c0       	rjmp	.+462    	; 0x1dc <__bad_interrupt>
   e:	00 00       	nop
  10:	e5 c0       	rjmp	.+458    	; 0x1dc <__bad_interrupt>
  12:	00 00       	nop
  14:	e3 c0       	rjmp	.+454    	; 0x1dc <__bad_interrupt>
  16:	00 00       	nop
  18:	e1 c0       	rjmp	.+450    	; 0x1dc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	df c0       	rjmp	.+446    	; 0x1dc <__bad_interrupt>
  1e:	00 00       	nop
  20:	dd c0       	rjmp	.+442    	; 0x1dc <__bad_interrupt>
  22:	00 00       	nop
  24:	db c0       	rjmp	.+438    	; 0x1dc <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c4       	rjmp	.+2270   	; 0x908 <__vector_10>
  2a:	00 00       	nop
  2c:	d7 c0       	rjmp	.+430    	; 0x1dc <__bad_interrupt>
  2e:	00 00       	nop
  30:	d5 c0       	rjmp	.+426    	; 0x1dc <__bad_interrupt>
  32:	00 00       	nop
  34:	d3 c0       	rjmp	.+422    	; 0x1dc <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	d1 c0       	rjmp	.+418    	; 0x1dc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	cf c0       	rjmp	.+414    	; 0x1dc <__bad_interrupt>
  3e:	00 00       	nop
  40:	cd c0       	rjmp	.+410    	; 0x1dc <__bad_interrupt>
  42:	00 00       	nop
  44:	cb c0       	rjmp	.+406    	; 0x1dc <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	c9 c0       	rjmp	.+402    	; 0x1dc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	c7 c0       	rjmp	.+398    	; 0x1dc <__bad_interrupt>
  4e:	00 00       	nop
  50:	c5 c0       	rjmp	.+394    	; 0x1dc <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	c3 c0       	rjmp	.+390    	; 0x1dc <__bad_interrupt>
  56:	00 00       	nop
  58:	c1 c0       	rjmp	.+386    	; 0x1dc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	bf c0       	rjmp	.+382    	; 0x1dc <__bad_interrupt>
  5e:	00 00       	nop
  60:	bd c0       	rjmp	.+378    	; 0x1dc <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	bb c0       	rjmp	.+374    	; 0x1dc <__bad_interrupt>
  66:	00 00       	nop
  68:	b9 c0       	rjmp	.+370    	; 0x1dc <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	b7 c0       	rjmp	.+366    	; 0x1dc <__bad_interrupt>
  6e:	00 00       	nop
  70:	b5 c0       	rjmp	.+362    	; 0x1dc <__bad_interrupt>
  72:	00 00       	nop
  74:	b3 c0       	rjmp	.+358    	; 0x1dc <__bad_interrupt>
  76:	00 00       	nop
  78:	b1 c0       	rjmp	.+354    	; 0x1dc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	af c0       	rjmp	.+350    	; 0x1dc <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	ad c0       	rjmp	.+346    	; 0x1dc <__bad_interrupt>
  82:	00 00       	nop
  84:	ab c0       	rjmp	.+342    	; 0x1dc <__bad_interrupt>
  86:	00 00       	nop
  88:	a9 c0       	rjmp	.+338    	; 0x1dc <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	a7 c0       	rjmp	.+334    	; 0x1dc <__bad_interrupt>
  8e:	00 00       	nop
  90:	a5 c0       	rjmp	.+330    	; 0x1dc <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	a3 c0       	rjmp	.+326    	; 0x1dc <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c8:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000d4 <ManufacturerString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 42 00 02 01 00 c0 32 09 04 00 00 02 03 01     ..B.....2.......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
 102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 112:	00 05 07 05 02 03 08 00 05 09 04 01 00 01 03 01     ................
 122:	02 00 09 21 11 01 00 01 22 36 00 07 05 83 03 08     ...!...."6......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 132:	00 05                                               ..

00000134 <DeviceDescriptor>:
 134:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
				ReportSize     -= 4;
 144:	00 01                                               ..

00000146 <KeyboardReport>:
 146:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 156:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
				ReportSize     -= 2;
				ReportData     += 2;
 166:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 176:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000185 <MouseReport>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 185:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 195:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 1a5:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
 1b5:	75 08 81 06 c0 c0 00                                u......

000001bc <__ctors_end>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf ef       	ldi	r28, 0xFF	; 255
 1c2:	d0 e2       	ldi	r29, 0x20	; 32
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_clear_bss>:
 1c8:	11 e0       	ldi	r17, 0x01	; 1
 1ca:	a0 e0       	ldi	r26, 0x00	; 0
 1cc:	b1 e0       	ldi	r27, 0x01	; 1
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
 1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
 1d2:	a8 31       	cpi	r26, 0x18	; 24
 1d4:	b1 07       	cpc	r27, r17
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>
 1d8:	4e d1       	rcall	.+668    	; 0x476 <main>
 1da:	d5 c5       	rjmp	.+2986   	; 0xd86 <_exit>

000001dc <__bad_interrupt>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	11 cf       	rjmp	.-478    	; 0x0 <__vectors>

000001de <Joystick_GetStatus>:
 1de:	93 b1       	in	r25, 0x03	; 3
 1e0:	8c b1       	in	r24, 0x0c	; 12
 1e2:	80 95       	com	r24
 1e4:	80 73       	andi	r24, 0x30	; 48
 1e6:	86 95       	lsr	r24
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	90 95       	com	r25
 1ea:	90 7e       	andi	r25, 0xE0	; 224
				break;
 1ec:	89 2b       	or	r24, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	08 95       	ret

000001f0 <LEDs_SetAllLEDs>:
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	9f 70       	andi	r25, 0x0F	; 15
 1f4:	98 2b       	or	r25, r24
 1f6:	9b b9       	out	0x0b, r25	; 11
 1f8:	08 95       	ret

000001fa <SetupHardware>:
 1fa:	84 b7       	in	r24, 0x34	; 52
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	84 bf       	out	0x34, r24	; 52
 200:	88 e1       	ldi	r24, 0x18	; 24
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
				break;
 206:	80 93 60 00 	sts	0x0060, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 20a:	10 92 60 00 	sts	0x0060, r1
 20e:	0f be       	out	0x3f, r0	; 63
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	80 93 61 00 	sts	0x0061, r24
 21c:	90 93 61 00 	sts	0x0061, r25
 220:	0f be       	out	0x3f, r0	; 63
 222:	84 b1       	in	r24, 0x04	; 4
 224:	8f 71       	andi	r24, 0x1F	; 31
 226:	84 b9       	out	0x04, r24	; 4
 228:	8d b1       	in	r24, 0x0d	; 13
 22a:	8f 7c       	andi	r24, 0xCF	; 207
 22c:	8d b9       	out	0x0d, r24	; 13
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	80 6e       	ori	r24, 0xE0	; 224
 232:	85 b9       	out	0x05, r24	; 5
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	8e b1       	in	r24, 0x0e	; 14
 236:	80 63       	ori	r24, 0x30	; 48
 238:	8e b9       	out	0x0e, r24	; 14
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	80 6f       	ori	r24, 0xF0	; 240
 23e:	8a b9       	out	0x0a, r24	; 10
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	8b b9       	out	0x0b, r24	; 11
 246:	45 c3       	rjmp	.+1674   	; 0x8d2 <USB_Init>

00000248 <EVENT_USB_Device_Connect>:
 248:	80 ea       	ldi	r24, 0xA0	; 160
 24a:	d2 cf       	rjmp	.-92     	; 0x1f0 <LEDs_SetAllLEDs>

0000024c <EVENT_USB_Device_Disconnect>:
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	d0 cf       	rjmp	.-96     	; 0x1f0 <LEDs_SetAllLEDs>

00000250 <EVENT_USB_Device_ConfigurationChanged>:
 250:	cf 93       	push	r28
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	42 e0       	ldi	r20, 0x02	; 2
 254:	61 ec       	ldi	r22, 0xC1	; 193
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	71 d2       	rcall	.+1250   	; 0x73c <Endpoint_ConfigureEndpoint_Prv>
 25a:	c8 2f       	mov	r28, r24
 25c:	42 e0       	ldi	r20, 0x02	; 2
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	60 ec       	ldi	r22, 0xC0	; 192
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	6c d2       	rcall	.+1240   	; 0x73c <Endpoint_ConfigureEndpoint_Prv>
 264:	c8 23       	and	r28, r24
 266:	42 e0       	ldi	r20, 0x02	; 2
 268:	61 ec       	ldi	r22, 0xC1	; 193
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	67 d2       	rcall	.+1230   	; 0x73c <Endpoint_ConfigureEndpoint_Prv>
 26e:	cc 23       	and	r28, r28
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	21 f0       	breq	.+8      	; 0x27a <EVENT_USB_Device_ConfigurationChanged+0x2a>
				break;
 272:	88 23       	and	r24, r24

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	11 f0       	breq	.+4      	; 0x27a <EVENT_USB_Device_ConfigurationChanged+0x2a>
 276:	80 e6       	ldi	r24, 0x60	; 96
 278:	01 c0       	rjmp	.+2      	; 0x27c <EVENT_USB_Device_ConfigurationChanged+0x2c>
 27a:	80 e9       	ldi	r24, 0x90	; 144
 27c:	cf 91       	pop	r28
 27e:	b8 cf       	rjmp	.-144    	; 0x1f0 <LEDs_SetAllLEDs>

00000280 <Keyboard_ProcessLEDReport>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	98 2f       	mov	r25, r24
 282:	80 fd       	sbrc	r24, 0
				break;
 284:	02 c0       	rjmp	.+4      	; 0x28a <Keyboard_ProcessLEDReport+0xa>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	01 c0       	rjmp	.+2      	; 0x28c <Keyboard_ProcessLEDReport+0xc>
 28a:	80 e3       	ldi	r24, 0x30	; 48
 28c:	91 fd       	sbrc	r25, 1
 28e:	80 68       	ori	r24, 0x80	; 128
				break;
 290:	92 fd       	sbrc	r25, 2

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	80 64       	ori	r24, 0x40	; 64
 294:	ad cf       	rjmp	.-166    	; 0x1f0 <LEDs_SetAllLEDs>

00000296 <EVENT_USB_Device_ControlRequest>:
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
				break;
 2a0:	df 93       	push	r29

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	1f 92       	push	r1
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	80 91 11 01 	lds	r24, 0x0111
				break;
 2ac:	81 30       	cpi	r24, 0x01	; 1

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <EVENT_USB_Device_ControlRequest+0x20>
 2b0:	89 30       	cpi	r24, 0x09	; 9
 2b2:	89 f1       	breq	.+98     	; 0x316 <EVENT_USB_Device_ControlRequest+0x80>
 2b4:	54 c0       	rjmp	.+168    	; 0x35e <EVENT_USB_Device_ControlRequest+0xc8>
 2b6:	80 91 10 01 	lds	r24, 0x0110
 2ba:	81 3a       	cpi	r24, 0xA1	; 161
				break;
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <EVENT_USB_Device_ControlRequest+0x2a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	4f c0       	rjmp	.+158    	; 0x35e <EVENT_USB_Device_ControlRequest+0xc8>
 2c0:	80 91 e8 00 	lds	r24, 0x00E8
 2c4:	87 7f       	andi	r24, 0xF7	; 247
 2c6:	80 93 e8 00 	sts	0x00E8, r24
 2ca:	80 91 14 01 	lds	r24, 0x0114
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	90 91 15 01 	lds	r25, 0x0115
 2d2:	89 2b       	or	r24, r25
				break;
 2d4:	31 f4       	brne	.+12     	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x4c>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	08 e0       	ldi	r16, 0x08	; 8
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	e9 2e       	mov	r14, r25

				if (ParserData->UsingReportIDs)
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	f9 2e       	mov	r15, r25
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <EVENT_USB_Device_ControlRequest+0x56>
 2e2:	03 e0       	ldi	r16, 0x03	; 3
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	e8 2e       	mov	r14, r24
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	f8 2e       	mov	r15, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	b8 01       	movw	r22, r16
 2f0:	c7 01       	movw	r24, r14
 2f2:	67 d1       	rcall	.+718    	; 0x5c2 <Endpoint_Write_Control_Stream_LE>
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
 2f8:	8b 77       	andi	r24, 0x7B	; 123
 2fa:	80 93 e8 00 	sts	0x00E8, r24
 2fe:	a8 01       	movw	r20, r16
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	c7 01       	movw	r24, r14
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	31 c5       	rjmp	.+2658   	; 0xd78 <memset>
 316:	80 91 10 01 	lds	r24, 0x0110
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 31a:	81 32       	cpi	r24, 0x21	; 33
 31c:	01 f5       	brne	.+64     	; 0x35e <EVENT_USB_Device_ControlRequest+0xc8>
 31e:	80 91 e8 00 	lds	r24, 0x00E8
 322:	87 7f       	andi	r24, 0xF7	; 247
 324:	80 93 e8 00 	sts	0x00E8, r24
 328:	80 91 e8 00 	lds	r24, 0x00E8
 32c:	82 fd       	sbrc	r24, 2
 32e:	05 c0       	rjmp	.+10     	; 0x33a <EVENT_USB_Device_ControlRequest+0xa4>
 330:	80 91 0f 01 	lds	r24, 0x010F
 334:	81 11       	cpse	r24, r1
 336:	f8 cf       	rjmp	.-16     	; 0x328 <EVENT_USB_Device_ControlRequest+0x92>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	12 c0       	rjmp	.+36     	; 0x35e <EVENT_USB_Device_ControlRequest+0xc8>
 33a:	80 91 f1 00 	lds	r24, 0x00F1
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	90 91 e8 00 	lds	r25, 0x00E8
 342:	9b 77       	andi	r25, 0x7B	; 123
 344:	90 93 e8 00 	sts	0x00E8, r25
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	2d d2       	rcall	.+1114   	; 0x7a6 <Endpoint_ClearStatusStage>
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	91 cf       	rjmp	.-222    	; 0x280 <Keyboard_ProcessLEDReport>
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	08 95       	ret

0000036e <Keyboard_HID_Task>:
 36e:	37 df       	rcall	.-402    	; 0x1de <Joystick_GetStatus>
 370:	90 91 0f 01 	lds	r25, 0x010F
 374:	94 30       	cpi	r25, 0x04	; 4
 376:	09 f0       	breq	.+2      	; 0x37a <Keyboard_HID_Task+0xc>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	43 c0       	rjmp	.+134    	; 0x400 <Keyboard_HID_Task+0x92>
 37a:	62 9b       	sbis	0x0c, 2	; 12
 37c:	18 c0       	rjmp	.+48     	; 0x3ae <Keyboard_HID_Task+0x40>
 37e:	22 e0       	ldi	r18, 0x02	; 2
 380:	20 93 03 01 	sts	0x0103, r18
 384:	87 fd       	sbrc	r24, 7
 386:	03 c0       	rjmp	.+6      	; 0x38e <Keyboard_HID_Task+0x20>
				break;
 388:	84 ff       	sbrs	r24, 4

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	03 c0       	rjmp	.+6      	; 0x392 <Keyboard_HID_Task+0x24>
 38c:	95 e0       	ldi	r25, 0x05	; 5
 38e:	90 93 05 01 	sts	0x0105, r25
 392:	86 ff       	sbrs	r24, 6
 394:	02 c0       	rjmp	.+4      	; 0x39a <Keyboard_HID_Task+0x2c>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	96 e0       	ldi	r25, 0x06	; 6
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <Keyboard_HID_Task+0x32>
 39a:	83 ff       	sbrs	r24, 3
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <Keyboard_HID_Task+0x36>
 39e:	97 e0       	ldi	r25, 0x07	; 7
 3a0:	90 93 05 01 	sts	0x0105, r25
 3a4:	85 ff       	sbrs	r24, 5
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <Keyboard_HID_Task+0x40>
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	80 93 05 01 	sts	0x0105, r24
 3ae:	81 e0       	ldi	r24, 0x01	; 1
				break;
 3b0:	80 93 e9 00 	sts	0x00E9, r24
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b4:	80 91 e8 00 	lds	r24, 0x00E8
 3b8:	85 ff       	sbrs	r24, 5
 3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <Keyboard_HID_Task+0x74>
 3bc:	40 e0       	ldi	r20, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	68 e0       	ldi	r22, 0x08	; 8
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	b4 d0       	rcall	.+360    	; 0x532 <Endpoint_Write_Stream_LE>
 3ca:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	8e 77       	andi	r24, 0x7E	; 126
 3d0:	80 93 e8 00 	sts	0x00E8, r24

					while (CurrCollectionPath->Parent != NULL)
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	e3 e0       	ldi	r30, 0x03	; 3
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	df 01       	movw	r26, r30
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	1d 92       	st	X+, r1
 3de:	8a 95       	dec	r24
 3e0:	e9 f7       	brne	.-6      	; 0x3dc <Keyboard_HID_Task+0x6e>
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	80 93 e9 00 	sts	0x00E9, r24
 3e8:	80 91 e8 00 	lds	r24, 0x00E8
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	08 c0       	rjmp	.+16     	; 0x400 <Keyboard_HID_Task+0x92>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	80 91 f1 00 	lds	r24, 0x00F1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	45 df       	rcall	.-374    	; 0x280 <Keyboard_ProcessLEDReport>
 3f6:	80 91 e8 00 	lds	r24, 0x00E8
 3fa:	8b 77       	andi	r24, 0x7B	; 123
 3fc:	80 93 e8 00 	sts	0x00E8, r24
 400:	08 95       	ret

00000402 <Mouse_HID_Task>:
 402:	ed de       	rcall	.-550    	; 0x1de <Joystick_GetStatus>
 404:	90 91 0f 01 	lds	r25, 0x010F
				}

				CurrCollectionPath->Type       = ReportItemData;
 408:	94 30       	cpi	r25, 0x04	; 4
 40a:	a1 f5       	brne	.+104    	; 0x474 <Mouse_HID_Task+0x72>
 40c:	62 99       	sbic	0x0c, 2	; 12
 40e:	19 c0       	rjmp	.+50     	; 0x442 <Mouse_HID_Task+0x40>
 410:	87 ff       	sbrs	r24, 7
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	02 c0       	rjmp	.+4      	; 0x418 <Mouse_HID_Task+0x16>
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	03 c0       	rjmp	.+6      	; 0x41e <Mouse_HID_Task+0x1c>
 418:	84 ff       	sbrs	r24, 4
 41a:	03 c0       	rjmp	.+6      	; 0x422 <Mouse_HID_Task+0x20>
 41c:	9f ef       	ldi	r25, 0xFF	; 255
 41e:	90 93 02 01 	sts	0x0102, r25

				if (UsageListSize)
 422:	83 ff       	sbrs	r24, 3
 424:	02 c0       	rjmp	.+4      	; 0x42a <Mouse_HID_Task+0x28>
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	03 c0       	rjmp	.+6      	; 0x430 <Mouse_HID_Task+0x2e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	86 ff       	sbrs	r24, 6
 42c:	03 c0       	rjmp	.+6      	; 0x434 <Mouse_HID_Task+0x32>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	90 93 01 01 	sts	0x0101, r25
 434:	85 ff       	sbrs	r24, 5
 436:	05 c0       	rjmp	.+10     	; 0x442 <Mouse_HID_Task+0x40>
 438:	80 91 00 01 	lds	r24, 0x0100
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 93 00 01 	sts	0x0100, r24

					for (uint8_t i = 1; i < UsageListSize; i++)
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	80 93 e9 00 	sts	0x00E9, r24
 448:	80 91 e8 00 	lds	r24, 0x00E8
					  UsageList[i - 1] = UsageList[i];
 44c:	85 ff       	sbrs	r24, 5
 44e:	12 c0       	rjmp	.+36     	; 0x474 <Mouse_HID_Task+0x72>
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	70 e0       	ldi	r23, 0x00	; 0
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	6a d0       	rcall	.+212    	; 0x532 <Endpoint_Write_Stream_LE>
 45e:	80 91 e8 00 	lds	r24, 0x00E8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	8e 77       	andi	r24, 0x7E	; 126
 464:	80 93 e8 00 	sts	0x00E8, r24
 468:	10 92 00 01 	sts	0x0100, r1
 46c:	10 92 01 01 	sts	0x0101, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 470:	10 92 02 01 	sts	0x0102, r1
 474:	08 95       	ret

00000476 <main>:
 476:	c1 de       	rcall	.-638    	; 0x1fa <SetupHardware>
 478:	80 e1       	ldi	r24, 0x10	; 16
 47a:	ba de       	rcall	.-652    	; 0x1f0 <LEDs_SetAllLEDs>
 47c:	78 94       	sei
 47e:	77 df       	rcall	.-274    	; 0x36e <Keyboard_HID_Task>
 480:	c0 df       	rcall	.-128    	; 0x402 <Mouse_HID_Task>
 482:	5e d4       	rcall	.+2236   	; 0xd40 <USB_USBTask>
 484:	fc cf       	rjmp	.-8      	; 0x47e <main+0x8>

00000486 <CALLBACK_USB_GetDescriptor>:
 486:	29 2f       	mov	r18, r25
 488:	33 27       	eor	r19, r19
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	23 30       	cpi	r18, 0x03	; 3
 48c:	31 05       	cpc	r19, r1
 48e:	99 f0       	breq	.+38     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x30>
 490:	5c f4       	brge	.+22     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x22>
 492:	21 30       	cpi	r18, 0x01	; 1
 494:	31 05       	cpc	r19, r1
 496:	b1 f1       	breq	.+108    	; 0x504 <CALLBACK_USB_GetDescriptor+0x7e>
 498:	22 30       	cpi	r18, 0x02	; 2
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	31 05       	cpc	r19, r1
 49c:	c1 f5       	brne	.+112    	; 0x50e <CALLBACK_USB_GetDescriptor+0x88>
 49e:	82 e4       	ldi	r24, 0x42	; 66
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	22 ef       	ldi	r18, 0xF2	; 242
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	41 c0       	rjmp	.+130    	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 4a8:	21 32       	cpi	r18, 0x21	; 33
 4aa:	31 05       	cpc	r19, r1
				break;
 4ac:	c9 f0       	breq	.+50     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x5a>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	22 32       	cpi	r18, 0x22	; 34
 4b0:	31 05       	cpc	r19, r1
 4b2:	f9 f0       	breq	.+62     	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x6c>
 4b4:	2c c0       	rjmp	.+88     	; 0x50e <CALLBACK_USB_GetDescriptor+0x88>
 4b6:	99 27       	eor	r25, r25
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	91 05       	cpc	r25, r1
 4bc:	41 f0       	breq	.+16     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x48>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	91 05       	cpc	r25, r1
 4c2:	41 f0       	breq	.+16     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x4e>
 4c4:	89 2b       	or	r24, r25
 4c6:	19 f5       	brne	.+70     	; 0x50e <CALLBACK_USB_GetDescriptor+0x88>
 4c8:	ee ee       	ldi	r30, 0xEE	; 238
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x52>
 4ce:	e4 ed       	ldi	r30, 0xD4	; 212
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x52>
 4d4:	e8 e9       	ldi	r30, 0x98	; 152
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	84 91       	lpm	r24, Z
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	9f 01       	movw	r18, r30
 4de:	25 c0       	rjmp	.+74     	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 4e0:	66 23       	and	r22, r22
 4e2:	d1 f0       	breq	.+52     	; 0x518 <CALLBACK_USB_GetDescriptor+0x92>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	61 30       	cpi	r22, 0x01	; 1
 4e6:	99 f4       	brne	.+38     	; 0x50e <CALLBACK_USB_GetDescriptor+0x88>
 4e8:	89 e0       	ldi	r24, 0x09	; 9
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	24 e2       	ldi	r18, 0x24	; 36
 4ee:	31 e0       	ldi	r19, 0x01	; 1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f0:	1c c0       	rjmp	.+56     	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 4f2:	66 23       	and	r22, r22
 4f4:	b1 f0       	breq	.+44     	; 0x522 <CALLBACK_USB_GetDescriptor+0x9c>
 4f6:	61 30       	cpi	r22, 0x01	; 1
 4f8:	51 f4       	brne	.+20     	; 0x50e <CALLBACK_USB_GetDescriptor+0x88>
 4fa:	86 e3       	ldi	r24, 0x36	; 54
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	25 e8       	ldi	r18, 0x85	; 133
 500:	31 e0       	ldi	r19, 0x01	; 1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	13 c0       	rjmp	.+38     	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 504:	82 e1       	ldi	r24, 0x12	; 18
					NewReportItem.CollectionPath = CurrCollectionPath;
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	24 e3       	ldi	r18, 0x34	; 52
 50a:	31 e0       	ldi	r19, 0x01	; 1
 50c:	0e c0       	rjmp	.+28     	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	09 c0       	rjmp	.+18     	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 518:	89 e0       	ldi	r24, 0x09	; 9
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	24 e0       	ldi	r18, 0x04	; 4

					if (UsageListSize)
 51e:	31 e0       	ldi	r19, 0x01	; 1
 520:	04 c0       	rjmp	.+8      	; 0x52a <CALLBACK_USB_GetDescriptor+0xa4>
 522:	8f e3       	ldi	r24, 0x3F	; 63
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	26 e4       	ldi	r18, 0x46	; 70
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	31 e0       	ldi	r19, 0x01	; 1
 52a:	fa 01       	movw	r30, r20
 52c:	31 83       	std	Z+1, r19	; 0x01
 52e:	20 83       	st	Z, r18
 530:	08 95       	ret

00000532 <Endpoint_Write_Stream_LE>:
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	7c 01       	movw	r14, r24
 544:	8b 01       	movw	r16, r22
 546:	ea 01       	movw	r28, r20
 548:	4f d1       	rcall	.+670    	; 0x7e8 <Endpoint_WaitUntilReady>
						  UsageList[i - 1] = UsageList[i];
 54a:	81 11       	cpse	r24, r1
 54c:	31 c0       	rjmp	.+98     	; 0x5b0 <Endpoint_Write_Stream_LE+0x7e>
 54e:	20 97       	sbiw	r28, 0x00	; 0
 550:	31 f0       	breq	.+12     	; 0x55e <Endpoint_Write_Stream_LE+0x2c>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	88 81       	ld	r24, Y
 554:	99 81       	ldd	r25, Y+1	; 0x01
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	08 1b       	sub	r16, r24
 558:	19 0b       	sbc	r17, r25
 55a:	e8 0e       	add	r14, r24
 55c:	f9 1e       	adc	r15, r25
 55e:	c1 2c       	mov	r12, r1
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 560:	d1 2c       	mov	r13, r1
 562:	01 15       	cp	r16, r1
 564:	11 05       	cpc	r17, r1
 566:	19 f1       	breq	.+70     	; 0x5ae <Endpoint_Write_Stream_LE+0x7c>
 568:	80 91 e8 00 	lds	r24, 0x00E8
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56c:	85 fd       	sbrc	r24, 5
 56e:	14 c0       	rjmp	.+40     	; 0x598 <Endpoint_Write_Stream_LE+0x66>
 570:	80 91 e8 00 	lds	r24, 0x00E8
 574:	8e 77       	andi	r24, 0x7E	; 126
 576:	80 93 e8 00 	sts	0x00E8, r24
 57a:	e2 d3       	rcall	.+1988   	; 0xd40 <USB_USBTask>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	20 97       	sbiw	r28, 0x00	; 0
 57e:	41 f0       	breq	.+16     	; 0x590 <Endpoint_Write_Stream_LE+0x5e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	88 81       	ld	r24, Y
 582:	99 81       	ldd	r25, Y+1	; 0x01
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	8c 0d       	add	r24, r12
 586:	9d 1d       	adc	r25, r13
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	99 83       	std	Y+1, r25	; 0x01
 58a:	88 83       	st	Y, r24
 58c:	85 e0       	ldi	r24, 0x05	; 5
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	10 c0       	rjmp	.+32     	; 0x5b0 <Endpoint_Write_Stream_LE+0x7e>
 590:	2b d1       	rcall	.+598    	; 0x7e8 <Endpoint_WaitUntilReady>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	88 23       	and	r24, r24
 594:	31 f3       	breq	.-52     	; 0x562 <Endpoint_Write_Stream_LE+0x30>
 596:	0c c0       	rjmp	.+24     	; 0x5b0 <Endpoint_Write_Stream_LE+0x7e>
 598:	f7 01       	movw	r30, r14
 59a:	81 91       	ld	r24, Z+
 59c:	7f 01       	movw	r14, r30
 59e:	80 93 f1 00 	sts	0x00F1, r24
 5a2:	01 50       	subi	r16, 0x01	; 1
 5a4:	11 09       	sbc	r17, r1
 5a6:	ff ef       	ldi	r31, 0xFF	; 255
 5a8:	cf 1a       	sub	r12, r31
 5aa:	df 0a       	sbc	r13, r31

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	da cf       	rjmp	.-76     	; 0x562 <Endpoint_Write_Stream_LE+0x30>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	08 95       	ret

000005c2 <Endpoint_Write_Control_Stream_LE>:
 5c2:	20 91 16 01 	lds	r18, 0x0116
 5c6:	30 91 17 01 	lds	r19, 0x0117
 5ca:	26 17       	cp	r18, r22
 5cc:	37 07       	cpc	r19, r23
 5ce:	48 f0       	brcs	.+18     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x20>
 5d0:	61 15       	cp	r22, r1
 5d2:	71 05       	cpc	r23, r1
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0x22>
 5d6:	20 91 e8 00 	lds	r18, 0x00E8
 5da:	2e 77       	andi	r18, 0x7E	; 126
 5dc:	20 93 e8 00 	sts	0x00E8, r18
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0x22>
 5e2:	b9 01       	movw	r22, r18
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	99 f1       	breq	.+102    	; 0x654 <Endpoint_Write_Control_Stream_LE+0x92>
 5ee:	80 91 0f 01 	lds	r24, 0x010F
 5f2:	88 23       	and	r24, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	e9 f1       	breq	.+122    	; 0x670 <Endpoint_Write_Control_Stream_LE+0xae>
 5f6:	85 30       	cpi	r24, 0x05	; 5
 5f8:	e9 f1       	breq	.+122    	; 0x674 <Endpoint_Write_Control_Stream_LE+0xb2>
 5fa:	80 91 e8 00 	lds	r24, 0x00E8
					  return HID_PARSE_InsufficientReportItems;
 5fe:	83 fd       	sbrc	r24, 3
 600:	3b c0       	rjmp	.+118    	; 0x678 <Endpoint_Write_Control_Stream_LE+0xb6>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	80 91 e8 00 	lds	r24, 0x00E8
 606:	82 ff       	sbrs	r24, 2
 608:	06 c0       	rjmp	.+12     	; 0x616 <Endpoint_Write_Control_Stream_LE+0x54>
 60a:	80 91 e8 00 	lds	r24, 0x00E8
 60e:	82 ff       	sbrs	r24, 2
 610:	24 c0       	rjmp	.+72     	; 0x65a <Endpoint_Write_Control_Stream_LE+0x98>
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	08 95       	ret
 616:	80 91 e8 00 	lds	r24, 0x00E8
 61a:	80 ff       	sbrs	r24, 0
 61c:	e5 cf       	rjmp	.-54     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0x26>
 61e:	80 91 f2 00 	lds	r24, 0x00F2
 622:	90 91 f3 00 	lds	r25, 0x00F3
 626:	61 15       	cp	r22, r1
 628:	71 05       	cpc	r23, r1
 62a:	51 f0       	breq	.+20     	; 0x640 <Endpoint_Write_Control_Stream_LE+0x7e>
 62c:	88 30       	cpi	r24, 0x08	; 8
 62e:	91 05       	cpc	r25, r1
 630:	38 f4       	brcc	.+14     	; 0x640 <Endpoint_Write_Control_Stream_LE+0x7e>
 632:	21 91       	ld	r18, Z+
 634:	20 93 f1 00 	sts	0x00F1, r18
 638:	61 50       	subi	r22, 0x01	; 1
 63a:	71 09       	sbc	r23, r1
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	f3 cf       	rjmp	.-26     	; 0x626 <Endpoint_Write_Control_Stream_LE+0x64>
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	08 97       	sbiw	r24, 0x08	; 8
 644:	09 f0       	breq	.+2      	; 0x648 <Endpoint_Write_Control_Stream_LE+0x86>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	80 91 e8 00 	lds	r24, 0x00E8
 64c:	8e 77       	andi	r24, 0x7E	; 126
 64e:	80 93 e8 00 	sts	0x00E8, r24
 652:	ca cf       	rjmp	.-108    	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0x26>
 654:	21 11       	cpse	r18, r1
 656:	cb cf       	rjmp	.-106    	; 0x5ee <Endpoint_Write_Control_Stream_LE+0x2c>
 658:	d8 cf       	rjmp	.-80     	; 0x60a <Endpoint_Write_Control_Stream_LE+0x48>
 65a:	80 91 0f 01 	lds	r24, 0x010F
 65e:	88 23       	and	r24, r24
 660:	39 f0       	breq	.+14     	; 0x670 <Endpoint_Write_Control_Stream_LE+0xae>
 662:	85 30       	cpi	r24, 0x05	; 5
 664:	39 f0       	breq	.+14     	; 0x674 <Endpoint_Write_Control_Stream_LE+0xb2>
 666:	80 91 e8 00 	lds	r24, 0x00E8
 66a:	83 ff       	sbrs	r24, 3
 66c:	ce cf       	rjmp	.-100    	; 0x60a <Endpoint_Write_Control_Stream_LE+0x48>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <Endpoint_Write_Control_Stream_LE+0xb6>
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	08 95       	ret
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	08 95       	ret
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	08 95       	ret

0000067c <Endpoint_Write_Control_PStream_LE>:
 67c:	20 91 16 01 	lds	r18, 0x0116
 680:	30 91 17 01 	lds	r19, 0x0117
 684:	26 17       	cp	r18, r22
 686:	37 07       	cpc	r19, r23
					  ParserData->TotalReportItems++;
 688:	48 f0       	brcs	.+18     	; 0x69c <Endpoint_Write_Control_PStream_LE+0x20>
 68a:	61 15       	cp	r22, r1
 68c:	71 05       	cpc	r23, r1
 68e:	39 f4       	brne	.+14     	; 0x69e <Endpoint_Write_Control_PStream_LE+0x22>
 690:	20 91 e8 00 	lds	r18, 0x00E8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 694:	2e 77       	andi	r18, 0x7E	; 126
 696:	20 93 e8 00 	sts	0x00E8, r18
 69a:	01 c0       	rjmp	.+2      	; 0x69e <Endpoint_Write_Control_PStream_LE+0x22>
 69c:	b9 01       	movw	r22, r18
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	fc 01       	movw	r30, r24
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	61 15       	cp	r22, r1
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	71 05       	cpc	r23, r1
 6a6:	b1 f1       	breq	.+108    	; 0x714 <Endpoint_Write_Control_PStream_LE+0x98>
 6a8:	80 91 0f 01 	lds	r24, 0x010F
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x36>
 6b0:	3f c0       	rjmp	.+126    	; 0x730 <Endpoint_Write_Control_PStream_LE+0xb4>
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	85 30       	cpi	r24, 0x05	; 5
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0x3c>
 6b6:	3e c0       	rjmp	.+124    	; 0x734 <Endpoint_Write_Control_PStream_LE+0xb8>
 6b8:	80 91 e8 00 	lds	r24, 0x00E8
	  return HID_PARSE_NoUnfilteredReportItems;
 6bc:	83 fd       	sbrc	r24, 3

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	3c c0       	rjmp	.+120    	; 0x738 <Endpoint_Write_Control_PStream_LE+0xbc>
 6c0:	80 91 e8 00 	lds	r24, 0x00E8
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c4:	82 ff       	sbrs	r24, 2
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x58>
 6c8:	80 91 e8 00 	lds	r24, 0x00E8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6cc:	82 ff       	sbrs	r24, 2

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	25 c0       	rjmp	.+74     	; 0x71a <Endpoint_Write_Control_PStream_LE+0x9e>
 6d0:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	08 95       	ret
 6d4:	80 91 e8 00 	lds	r24, 0x00E8
}
 6d8:	80 ff       	sbrs	r24, 0
 6da:	e3 cf       	rjmp	.-58     	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x26>
 6dc:	80 91 f2 00 	lds	r24, 0x00F2
 6e0:	90 91 f3 00 	lds	r25, 0x00F3
 6e4:	61 15       	cp	r22, r1
 6e6:	71 05       	cpc	r23, r1
 6e8:	59 f0       	breq	.+22     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x84>
 6ea:	88 30       	cpi	r24, 0x08	; 8
 6ec:	91 05       	cpc	r25, r1
 6ee:	40 f4       	brcc	.+16     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x84>
 6f0:	24 91       	lpm	r18, Z
 6f2:	20 93 f1 00 	sts	0x00F1, r18
 6f6:	31 96       	adiw	r30, 0x01	; 1
 6f8:	61 50       	subi	r22, 0x01	; 1
 6fa:	71 09       	sbc	r23, r1
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	f2 cf       	rjmp	.-28     	; 0x6e4 <Endpoint_Write_Control_PStream_LE+0x68>
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	08 97       	sbiw	r24, 0x08	; 8
 704:	09 f0       	breq	.+2      	; 0x708 <Endpoint_Write_Control_PStream_LE+0x8c>
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 70c:	8e 77       	andi	r24, 0x7E	; 126
 70e:	80 93 e8 00 	sts	0x00E8, r24
 712:	c7 cf       	rjmp	.-114    	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 714:	21 11       	cpse	r18, r1
 716:	c8 cf       	rjmp	.-112    	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0x2c>
 718:	d7 cf       	rjmp	.-82     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 71a:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 71e:	88 23       	and	r24, r24
 720:	39 f0       	breq	.+14     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 722:	85 30       	cpi	r24, 0x05	; 5
 724:	39 f0       	breq	.+14     	; 0x734 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 726:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 72a:	83 ff       	sbrs	r24, 3
 72c:	cd cf       	rjmp	.-102    	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0x4c>
 72e:	04 c0       	rjmp	.+8      	; 0x738 <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 734:	83 e0       	ldi	r24, 0x03	; 3
 736:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 738:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 73a:	08 95       	ret

0000073c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 73c:	98 2f       	mov	r25, r24
 73e:	97 30       	cpi	r25, 0x07	; 7
 740:	58 f5       	brcc	.+86     	; 0x798 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 742:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 746:	98 17       	cp	r25, r24
 748:	39 f0       	breq	.+14     	; 0x758 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 74a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 74e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 752:	50 91 f0 00 	lds	r21, 0x00F0
 756:	03 c0       	rjmp	.+6      	; 0x75e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 758:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 75a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 75c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 75e:	21 ff       	sbrs	r18, 1
 760:	19 c0       	rjmp	.+50     	; 0x794 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 762:	30 91 eb 00 	lds	r19, 0x00EB
 766:	3e 7f       	andi	r19, 0xFE	; 254
 768:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 76c:	30 91 ed 00 	lds	r19, 0x00ED
 770:	3d 7f       	andi	r19, 0xFD	; 253
 772:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 776:	30 91 eb 00 	lds	r19, 0x00EB
 77a:	31 60       	ori	r19, 0x01	; 1
 77c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 780:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 784:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 788:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 78c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 790:	27 ff       	sbrs	r18, 7
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 794:	9f 5f       	subi	r25, 0xFF	; 255
 796:	d3 cf       	rjmp	.-90     	; 0x73e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 798:	8f 70       	andi	r24, 0x0F	; 15
 79a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 7a4:	08 95       	ret

000007a6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 7a6:	80 91 10 01 	lds	r24, 0x0110
 7aa:	87 fd       	sbrc	r24, 7
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7ae:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7b2:	80 ff       	sbrs	r24, 0
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <Endpoint_ClearStatusStage+0x2c>
 7b6:	12 c0       	rjmp	.+36     	; 0x7dc <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7b8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 7bc:	82 fd       	sbrc	r24, 2
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7c0:	80 91 0f 01 	lds	r24, 0x010F
 7c4:	81 11       	cpse	r24, r1
 7c6:	f8 cf       	rjmp	.-16     	; 0x7b8 <Endpoint_ClearStatusStage+0x12>
 7c8:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7ca:	80 91 e8 00 	lds	r24, 0x00E8
 7ce:	8b 77       	andi	r24, 0x7B	; 123
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7d2:	80 91 0f 01 	lds	r24, 0x010F
 7d6:	81 11       	cpse	r24, r1
 7d8:	ea cf       	rjmp	.-44     	; 0x7ae <Endpoint_ClearStatusStage+0x8>
 7da:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7dc:	80 91 e8 00 	lds	r24, 0x00E8
 7e0:	8e 77       	andi	r24, 0x7E	; 126
 7e2:	80 93 e8 00 	sts	0x00E8, r24
 7e6:	08 95       	ret

000007e8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7e8:	80 91 e4 00 	lds	r24, 0x00E4
 7ec:	90 91 e5 00 	lds	r25, 0x00E5
 7f0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7f2:	20 91 ec 00 	lds	r18, 0x00EC
 7f6:	20 ff       	sbrs	r18, 0
 7f8:	21 c0       	rjmp	.+66     	; 0x83c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7fa:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7fe:	20 fd       	sbrc	r18, 0
 800:	21 c0       	rjmp	.+66     	; 0x844 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 802:	20 91 0f 01 	lds	r18, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 806:	22 23       	and	r18, r18
 808:	89 f0       	breq	.+34     	; 0x82c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80a:	25 30       	cpi	r18, 0x05	; 5
 80c:	89 f0       	breq	.+34     	; 0x830 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 80e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 812:	25 fd       	sbrc	r18, 5
 814:	0f c0       	rjmp	.+30     	; 0x834 <Endpoint_WaitUntilReady+0x4c>
 816:	20 91 e4 00 	lds	r18, 0x00E4
 81a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 81e:	28 17       	cp	r18, r24
 820:	39 07       	cpc	r19, r25
 822:	39 f3       	breq	.-50     	; 0x7f2 <Endpoint_WaitUntilReady+0xa>
 824:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 826:	41 f0       	breq	.+16     	; 0x838 <Endpoint_WaitUntilReady+0x50>
 828:	c9 01       	movw	r24, r18
 82a:	e3 cf       	rjmp	.-58     	; 0x7f2 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 838:	84 e0       	ldi	r24, 0x04	; 4
 83a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 83c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 840:	22 ff       	sbrs	r18, 2
 842:	df cf       	rjmp	.-66     	; 0x802 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	08 95       	ret

00000848 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 850:	4e d0       	rcall	.+156    	; 0x8ee <USB_INT_DisableAllInterrupts>
 852:	55 d0       	rcall	.+170    	; 0x8fe <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 854:	c8 ed       	ldi	r28, 0xD8	; 216
 856:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 858:	88 81       	ld	r24, Y
 85a:	8f 77       	andi	r24, 0x7F	; 127
 85c:	88 83       	st	Y, r24
 85e:	88 81       	ld	r24, Y
 860:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 862:	88 83       	st	Y, r24
 864:	88 81       	ld	r24, Y
 866:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 868:	88 83       	st	Y, r24
 86a:	e7 ed       	ldi	r30, 0xD7	; 215
 86c:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 86e:	80 81       	ld	r24, Z
 870:	80 68       	ori	r24, 0x80	; 128
 872:	80 83       	st	Z, r24
 874:	19 bc       	out	0x29, r1	; 41
 876:	10 92 0f 01 	sts	0x010F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 87a:	10 92 0b 01 	sts	0x010B, r1
	USB_Device_ConfigurationNumber  = 0;
 87e:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 882:	10 92 0c 01 	sts	0x010C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 886:	00 ee       	ldi	r16, 0xE0	; 224
 888:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 88a:	f8 01       	movw	r30, r16
 88c:	80 81       	ld	r24, Z
 88e:	8b 7f       	andi	r24, 0xFB	; 251
 890:	80 83       	st	Z, r24
 892:	88 81       	ld	r24, Y
 894:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 896:	88 83       	st	Y, r24
 898:	42 e0       	ldi	r20, 0x02	; 2
 89a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	4e df       	rcall	.-356    	; 0x73c <Endpoint_ConfigureEndpoint_Prv>
 8a0:	e1 ee       	ldi	r30, 0xE1	; 225
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8a6:	8e 7f       	andi	r24, 0xFE	; 254
 8a8:	80 83       	st	Z, r24
 8aa:	e2 ee       	ldi	r30, 0xE2	; 226
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8b0:	81 60       	ori	r24, 0x01	; 1
 8b2:	80 83       	st	Z, r24
 8b4:	80 81       	ld	r24, Z
 8b6:	88 60       	ori	r24, 0x08	; 8
 8b8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 8ba:	f8 01       	movw	r30, r16
 8bc:	80 81       	ld	r24, Z
 8be:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 8c0:	80 83       	st	Z, r24
 8c2:	88 81       	ld	r24, Y
 8c4:	80 61       	ori	r24, 0x10	; 16
 8c6:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <USB_Init>:
 8d2:	e8 ed       	ldi	r30, 0xD8	; 216
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8d8:	8f 7e       	andi	r24, 0xEF	; 239
 8da:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8dc:	e7 ed       	ldi	r30, 0xD7	; 215
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
 8ec:	ad cf       	rjmp	.-166    	; 0x848 <USB_ResetInterface>

000008ee <USB_INT_DisableAllInterrupts>:
 8ee:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	8c 7f       	andi	r24, 0xFC	; 252
 8f6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8f8:	10 92 e2 00 	sts	0x00E2, r1
 8fc:	08 95       	ret

000008fe <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8fe:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 902:	10 92 e1 00 	sts	0x00E1, r1
 906:	08 95       	ret

00000908 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	11 24       	eor	r1, r1
 912:	0b b6       	in	r0, 0x3b	; 59
 914:	0f 92       	push	r0
 916:	2f 93       	push	r18
 918:	3f 93       	push	r19
 91a:	4f 93       	push	r20
 91c:	5f 93       	push	r21
 91e:	6f 93       	push	r22
 920:	7f 93       	push	r23
 922:	8f 93       	push	r24
 924:	9f 93       	push	r25
 926:	af 93       	push	r26
 928:	bf 93       	push	r27
 92a:	ef 93       	push	r30
 92c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 92e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 932:	82 ff       	sbrs	r24, 2
 934:	0a c0       	rjmp	.+20     	; 0x94a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 936:	80 91 e2 00 	lds	r24, 0x00E2
 93a:	82 ff       	sbrs	r24, 2
 93c:	06 c0       	rjmp	.+12     	; 0x94a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 93e:	80 91 e1 00 	lds	r24, 0x00E1
 942:	8b 7f       	andi	r24, 0xFB	; 251
 944:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 948:	fa d1       	rcall	.+1012   	; 0xd3e <USB_Event_Stub>
 94a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 94e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 950:	1d c0       	rjmp	.+58     	; 0x98c <__vector_10+0x84>
 952:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 956:	80 ff       	sbrs	r24, 0
 958:	19 c0       	rjmp	.+50     	; 0x98c <__vector_10+0x84>
 95a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 95e:	8e 7f       	andi	r24, 0xFE	; 254
 960:	80 93 da 00 	sts	0x00DA, r24
 964:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 968:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 96a:	0c c0       	rjmp	.+24     	; 0x984 <__vector_10+0x7c>
 96c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 96e:	89 bd       	out	0x29, r24	; 41
 970:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 972:	89 bd       	out	0x29, r24	; 41
 974:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 976:	00 fe       	sbrs	r0, 0
 978:	fd cf       	rjmp	.-6      	; 0x974 <__vector_10+0x6c>
 97a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 97c:	80 93 0f 01 	sts	0x010F, r24
 980:	63 dc       	rcall	.-1850   	; 0x248 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 982:	04 c0       	rjmp	.+8      	; 0x98c <__vector_10+0x84>
 984:	19 bc       	out	0x29, r1	; 41
 986:	10 92 0f 01 	sts	0x010F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 98a:	60 dc       	rcall	.-1856   	; 0x24c <EVENT_USB_Device_Disconnect>
 98c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 990:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 992:	18 c0       	rjmp	.+48     	; 0x9c4 <__vector_10+0xbc>
 994:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 998:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 99a:	14 c0       	rjmp	.+40     	; 0x9c4 <__vector_10+0xbc>
 99c:	80 91 e2 00 	lds	r24, 0x00E2
 9a0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9a2:	80 93 e2 00 	sts	0x00E2, r24
 9a6:	80 91 e2 00 	lds	r24, 0x00E2
 9aa:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9ac:	80 93 e2 00 	sts	0x00E2, r24
 9b0:	80 91 d8 00 	lds	r24, 0x00D8
 9b4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 9b6:	80 93 d8 00 	sts	0x00D8, r24
 9ba:	19 bc       	out	0x29, r1	; 41
 9bc:	85 e0       	ldi	r24, 0x05	; 5
 9be:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 9c2:	bd d1       	rcall	.+890    	; 0xd3e <USB_Event_Stub>
 9c4:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 9c8:	84 ff       	sbrs	r24, 4
 9ca:	2f c0       	rjmp	.+94     	; 0xa2a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 9cc:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 9d0:	84 ff       	sbrs	r24, 4
 9d2:	2b c0       	rjmp	.+86     	; 0xa2a <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9d4:	8c e0       	ldi	r24, 0x0C	; 12
 9d6:	89 bd       	out	0x29, r24	; 41
 9d8:	8e e0       	ldi	r24, 0x0E	; 14
 9da:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9dc:	09 b4       	in	r0, 0x29	; 41
 9de:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9e0:	fd cf       	rjmp	.-6      	; 0x9dc <__vector_10+0xd4>
 9e2:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9e6:	8f 7d       	andi	r24, 0xDF	; 223
 9e8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9ec:	80 91 e1 00 	lds	r24, 0x00E1
 9f0:	8f 7e       	andi	r24, 0xEF	; 239
 9f2:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9f6:	80 91 e2 00 	lds	r24, 0x00E2
 9fa:	8f 7e       	andi	r24, 0xEF	; 239
 9fc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a00:	80 91 e2 00 	lds	r24, 0x00E2
 a04:	81 60       	ori	r24, 0x01	; 1
 a06:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a0a:	80 91 0b 01 	lds	r24, 0x010B
 a0e:	88 23       	and	r24, r24
 a10:	11 f0       	breq	.+4      	; 0xa16 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a12:	84 e0       	ldi	r24, 0x04	; 4
 a14:	07 c0       	rjmp	.+14     	; 0xa24 <__vector_10+0x11c>
 a16:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 a1a:	87 ff       	sbrs	r24, 7
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a1e:	83 e0       	ldi	r24, 0x03	; 3
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	80 93 0f 01 	sts	0x010F, r24
 a28:	8a d1       	rcall	.+788    	; 0xd3e <USB_Event_Stub>
 a2a:	80 91 e1 00 	lds	r24, 0x00E1
 a2e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 a30:	22 c0       	rjmp	.+68     	; 0xa76 <__vector_10+0x16e>
 a32:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a36:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a38:	1e c0       	rjmp	.+60     	; 0xa76 <__vector_10+0x16e>
 a3a:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a3e:	87 7f       	andi	r24, 0xF7	; 247
 a40:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a44:	82 e0       	ldi	r24, 0x02	; 2
 a46:	80 93 0f 01 	sts	0x010F, r24
 a4a:	10 92 0b 01 	sts	0x010B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a4e:	80 91 e1 00 	lds	r24, 0x00E1
 a52:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a54:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a58:	80 91 e2 00 	lds	r24, 0x00E2
 a5c:	8e 7f       	andi	r24, 0xFE	; 254
 a5e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a62:	80 91 e2 00 	lds	r24, 0x00E2
 a66:	80 61       	ori	r24, 0x10	; 16
 a68:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a6c:	42 e0       	ldi	r20, 0x02	; 2
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	64 de       	rcall	.-824    	; 0x73c <Endpoint_ConfigureEndpoint_Prv>
 a74:	64 d1       	rcall	.+712    	; 0xd3e <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a76:	ff 91       	pop	r31
 a78:	ef 91       	pop	r30
 a7a:	bf 91       	pop	r27
 a7c:	af 91       	pop	r26
 a7e:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a80:	8f 91       	pop	r24
 a82:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a84:	6f 91       	pop	r22
 a86:	5f 91       	pop	r21
 a88:	4f 91       	pop	r20
 a8a:	3f 91       	pop	r19
 a8c:	2f 91       	pop	r18
 a8e:	0f 90       	pop	r0
 a90:	0b be       	out	0x3b, r0	; 59
 a92:	0f 90       	pop	r0
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	0f 90       	pop	r0
 a98:	1f 90       	pop	r1
 a9a:	18 95       	reti

00000a9c <USB_Device_ProcessControlRequest>:
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
 aa6:	aa 97       	sbiw	r28, 0x2a	; 42
 aa8:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 aaa:	f8 94       	cli
 aac:	de bf       	out	0x3e, r29	; 62
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	cd bf       	out	0x3d, r28	; 61
 ab2:	e0 e1       	ldi	r30, 0x10	; 16
 ab4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 ab6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 aba:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 abc:	21 e0       	ldi	r18, 0x01	; 1
 abe:	e8 31       	cpi	r30, 0x18	; 24
 ac0:	f2 07       	cpc	r31, r18
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 ac4:	e8 db       	rcall	.-2096   	; 0x296 <EVENT_USB_Device_ControlRequest>
 ac6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 aca:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 acc:	20 c1       	rjmp	.+576    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 ace:	90 91 10 01 	lds	r25, 0x0110
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 ad2:	80 91 11 01 	lds	r24, 0x0111

		switch (USB_ControlRequest.bRequest)
 ad6:	85 30       	cpi	r24, 0x05	; 5
 ad8:	09 f4       	brne	.+2      	; 0xadc <USB_Device_ProcessControlRequest+0x40>
 ada:	77 c0       	rjmp	.+238    	; 0xbca <USB_Device_ProcessControlRequest+0x12e>
 adc:	30 f4       	brcc	.+12     	; 0xaea <USB_Device_ProcessControlRequest+0x4e>
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	81 f1       	breq	.+96     	; 0xb42 <USB_Device_ProcessControlRequest+0xa6>
 ae2:	68 f0       	brcs	.+26     	; 0xafe <USB_Device_ProcessControlRequest+0x62>
 ae4:	83 30       	cpi	r24, 0x03	; 3
 ae6:	69 f1       	breq	.+90     	; 0xb42 <USB_Device_ProcessControlRequest+0xa6>
 ae8:	12 c1       	rjmp	.+548    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 aea:	88 30       	cpi	r24, 0x08	; 8
 aec:	09 f4       	brne	.+2      	; 0xaf0 <USB_Device_ProcessControlRequest+0x54>
 aee:	e1 c0       	rjmp	.+450    	; 0xcb2 <USB_Device_ProcessControlRequest+0x216>
 af0:	89 30       	cpi	r24, 0x09	; 9
 af2:	09 f4       	brne	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0x5a>
 af4:	f0 c0       	rjmp	.+480    	; 0xcd6 <USB_Device_ProcessControlRequest+0x23a>
 af6:	86 30       	cpi	r24, 0x06	; 6
 af8:	09 f0       	breq	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0x60>
 afa:	09 c1       	rjmp	.+530    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 afc:	88 c0       	rjmp	.+272    	; 0xc0e <USB_Device_ProcessControlRequest+0x172>
 afe:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b00:	81 f0       	breq	.+32     	; 0xb22 <USB_Device_ProcessControlRequest+0x86>
 b02:	92 38       	cpi	r25, 0x82	; 130
 b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Device_ProcessControlRequest+0x6c>
 b06:	03 c1       	rjmp	.+518    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 b08:	80 91 14 01 	lds	r24, 0x0114
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b0c:	8f 70       	andi	r24, 0x0F	; 15
 b0e:	80 93 e9 00 	sts	0x00E9, r24
 b12:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b16:	85 fb       	bst	r24, 5
 b18:	88 27       	eor	r24, r24
 b1a:	80 f9       	bld	r24, 0
 b1c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <USB_Device_ProcessControlRequest+0x92>
 b22:	80 91 0c 01 	lds	r24, 0x010C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b26:	90 91 0d 01 	lds	r25, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b2a:	91 11       	cpse	r25, r1
 b2c:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b2e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b32:	97 7f       	andi	r25, 0xF7	; 247
 b34:	90 93 e8 00 	sts	0x00E8, r25
 b38:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b3c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b40:	c3 c0       	rjmp	.+390    	; 0xcc8 <USB_Device_ProcessControlRequest+0x22c>
 b42:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b44:	2d 7f       	andi	r18, 0xFD	; 253
 b46:	09 f0       	breq	.+2      	; 0xb4a <USB_Device_ProcessControlRequest+0xae>
 b48:	e2 c0       	rjmp	.+452    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 b4a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b4c:	19 f0       	breq	.+6      	; 0xb54 <USB_Device_ProcessControlRequest+0xb8>
 b4e:	92 30       	cpi	r25, 0x02	; 2
 b50:	61 f0       	breq	.+24     	; 0xb6a <USB_Device_ProcessControlRequest+0xce>
 b52:	dd c0       	rjmp	.+442    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 b54:	90 91 12 01 	lds	r25, 0x0112
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b58:	91 30       	cpi	r25, 0x01	; 1
 b5a:	09 f0       	breq	.+2      	; 0xb5e <USB_Device_ProcessControlRequest+0xc2>
 b5c:	d8 c0       	rjmp	.+432    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 b5e:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b60:	09 f0       	breq	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0xc8>
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	90 93 0d 01 	sts	0x010D, r25
 b68:	2a c0       	rjmp	.+84     	; 0xbbe <USB_Device_ProcessControlRequest+0x122>
 b6a:	90 91 12 01 	lds	r25, 0x0112

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b6e:	91 11       	cpse	r25, r1
 b70:	26 c0       	rjmp	.+76     	; 0xbbe <USB_Device_ProcessControlRequest+0x122>
 b72:	20 91 14 01 	lds	r18, 0x0114
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b76:	2f 70       	andi	r18, 0x0F	; 15
 b78:	09 f4       	brne	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b7a:	c9 c0       	rjmp	.+402    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 b7c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b80:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b84:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b86:	1b c0       	rjmp	.+54     	; 0xbbe <USB_Device_ProcessControlRequest+0x122>
 b88:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b8a:	21 f4       	brne	.+8      	; 0xb94 <USB_Device_ProcessControlRequest+0xf8>
 b8c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b90:	80 62       	ori	r24, 0x20	; 32
 b92:	13 c0       	rjmp	.+38     	; 0xbba <USB_Device_ProcessControlRequest+0x11e>
 b94:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b98:	80 61       	ori	r24, 0x10	; 16
 b9a:	80 93 eb 00 	sts	0x00EB, r24
 b9e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	02 2e       	mov	r0, r18
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x10c>
 ba6:	88 0f       	add	r24, r24
 ba8:	0a 94       	dec	r0
 baa:	ea f7       	brpl	.-6      	; 0xba6 <USB_Device_ProcessControlRequest+0x10a>
 bac:	80 93 ea 00 	sts	0x00EA, r24
 bb0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 bb4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 bb8:	88 60       	ori	r24, 0x08	; 8
 bba:	80 93 eb 00 	sts	0x00EB, r24
 bbe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bc2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc6:	87 7f       	andi	r24, 0xF7	; 247
 bc8:	82 c0       	rjmp	.+260    	; 0xcce <USB_Device_ProcessControlRequest+0x232>
 bca:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bcc:	a0 c0       	rjmp	.+320    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 bce:	10 91 12 01 	lds	r17, 0x0112
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bd2:	1f 77       	andi	r17, 0x7F	; 127
 bd4:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bd8:	80 78       	andi	r24, 0x80	; 128
 bda:	81 2b       	or	r24, r17
 bdc:	80 93 e3 00 	sts	0x00E3, r24
 be0:	80 91 e8 00 	lds	r24, 0x00E8
 be4:	87 7f       	andi	r24, 0xF7	; 247
 be6:	80 93 e8 00 	sts	0x00E8, r24
 bea:	dd dd       	rcall	.-1094   	; 0x7a6 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bec:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bf0:	80 ff       	sbrs	r24, 0
 bf2:	fc cf       	rjmp	.-8      	; 0xbec <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 bf4:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 bf8:	80 68       	ori	r24, 0x80	; 128
 bfa:	80 93 e3 00 	sts	0x00E3, r24
 bfe:	11 23       	and	r17, r17
 c00:	11 f0       	breq	.+4      	; 0xc06 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c02:	83 e0       	ldi	r24, 0x03	; 3
 c04:	01 c0       	rjmp	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0x16c>
 c06:	82 e0       	ldi	r24, 0x02	; 2
 c08:	80 93 0f 01 	sts	0x010F, r24
 c0c:	80 c0       	rjmp	.+256    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 c0e:	90 58       	subi	r25, 0x80	; 128
 c10:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c12:	08 f0       	brcs	.+2      	; 0xc16 <USB_Device_ProcessControlRequest+0x17a>
 c14:	7c c0       	rjmp	.+248    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 c16:	80 91 12 01 	lds	r24, 0x0112
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c1a:	90 91 13 01 	lds	r25, 0x0113
 c1e:	8c 3d       	cpi	r24, 0xDC	; 220
 c20:	23 e0       	ldi	r18, 0x03	; 3
 c22:	92 07       	cpc	r25, r18
 c24:	71 f5       	brne	.+92     	; 0xc82 <USB_Device_ProcessControlRequest+0x1e6>
 c26:	83 e0       	ldi	r24, 0x03	; 3
 c28:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c2a:	8a e2       	ldi	r24, 0x2A	; 42
 c2c:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c2e:	4f b7       	in	r20, 0x3f	; 63
 c30:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c32:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c34:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c36:	20 e0       	ldi	r18, 0x00	; 0
 c38:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c3a:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c3c:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c3e:	f0 e0       	ldi	r31, 0x00	; 0
 c40:	50 93 57 00 	sts	0x0057, r21
 c44:	e4 91       	lpm	r30, Z
 c46:	20 ff       	sbrs	r18, 0
 c48:	03 c0       	rjmp	.+6      	; 0xc50 <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 c4a:	e2 95       	swap	r30
 c4c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c4e:	3f 5f       	subi	r19, 0xFF	; 255
 c50:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c52:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	ea 30       	cpi	r30, 0x0A	; 10
 c58:	10 f0       	brcs	.+4      	; 0xc5e <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c5a:	c7 96       	adiw	r24, 0x37	; 55
 c5c:	01 c0       	rjmp	.+2      	; 0xc60 <USB_Device_ProcessControlRequest+0x1c4>
 c5e:	c0 96       	adiw	r24, 0x30	; 48
 c60:	8d 93       	st	X+, r24
 c62:	9d 93       	st	X+, r25
 c64:	2f 5f       	subi	r18, 0xFF	; 255
 c66:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c68:	49 f7       	brne	.-46     	; 0xc3c <USB_Device_ProcessControlRequest+0x1a0>
 c6a:	4f bf       	out	0x3f, r20	; 63
 c6c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c70:	87 7f       	andi	r24, 0xF7	; 247
 c72:	80 93 e8 00 	sts	0x00E8, r24
 c76:	6a e2       	ldi	r22, 0x2A	; 42
 c78:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c7a:	ce 01       	movw	r24, r28
 c7c:	01 96       	adiw	r24, 0x01	; 1
 c7e:	a1 dc       	rcall	.-1726   	; 0x5c2 <Endpoint_Write_Control_Stream_LE>
 c80:	12 c0       	rjmp	.+36     	; 0xca6 <USB_Device_ProcessControlRequest+0x20a>
 c82:	ae 01       	movw	r20, r28
 c84:	4f 5f       	subi	r20, 0xFF	; 255
 c86:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c88:	60 91 14 01 	lds	r22, 0x0114
 c8c:	fc db       	rcall	.-2056   	; 0x486 <CALLBACK_USB_GetDescriptor>
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	09 f4       	brne	.+2      	; 0xc94 <USB_Device_ProcessControlRequest+0x1f8>
 c92:	3d c0       	rjmp	.+122    	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 c94:	20 91 e8 00 	lds	r18, 0x00E8
 c98:	27 7f       	andi	r18, 0xF7	; 247
 c9a:	20 93 e8 00 	sts	0x00E8, r18
 c9e:	bc 01       	movw	r22, r24
 ca0:	89 81       	ldd	r24, Y+1	; 0x01
 ca2:	9a 81       	ldd	r25, Y+2	; 0x02
 ca4:	eb dc       	rcall	.-1578   	; 0x67c <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ca6:	80 91 e8 00 	lds	r24, 0x00E8
 caa:	8b 77       	andi	r24, 0x7B	; 123
 cac:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cb0:	2e c0       	rjmp	.+92     	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 cb2:	90 38       	cpi	r25, 0x80	; 128
 cb4:	61 f5       	brne	.+88     	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 cb6:	80 91 e8 00 	lds	r24, 0x00E8
 cba:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 cbc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc0:	80 91 0b 01 	lds	r24, 0x010B
 cc4:	80 93 f1 00 	sts	0x00F1, r24
 cc8:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ccc:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cce:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd2:	69 dd       	rcall	.-1326   	; 0x7a6 <Endpoint_ClearStatusStage>
 cd4:	1c c0       	rjmp	.+56     	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 cd6:	91 11       	cpse	r25, r1
 cd8:	1a c0       	rjmp	.+52     	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
 cda:	90 91 12 01 	lds	r25, 0x0112
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cde:	92 30       	cpi	r25, 0x02	; 2
 ce0:	b0 f4       	brcc	.+44     	; 0xd0e <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ce2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ce6:	87 7f       	andi	r24, 0xF7	; 247
 ce8:	80 93 e8 00 	sts	0x00E8, r24
 cec:	90 93 0b 01 	sts	0x010B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf0:	5a dd       	rcall	.-1356   	; 0x7a6 <Endpoint_ClearStatusStage>
 cf2:	80 91 0b 01 	lds	r24, 0x010B
 cf6:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cf8:	04 c0       	rjmp	.+8      	; 0xd02 <USB_Device_ProcessControlRequest+0x266>
 cfa:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 cfe:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <USB_Device_ProcessControlRequest+0x26a>
 d02:	84 e0       	ldi	r24, 0x04	; 4
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <USB_Device_ProcessControlRequest+0x26c>
 d06:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d08:	80 93 0f 01 	sts	0x010F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d0c:	a1 da       	rcall	.-2750   	; 0x250 <EVENT_USB_Device_ConfigurationChanged>
 d0e:	80 91 e8 00 	lds	r24, 0x00E8
 d12:	83 ff       	sbrs	r24, 3
 d14:	0a c0       	rjmp	.+20     	; 0xd2a <USB_Device_ProcessControlRequest+0x28e>
 d16:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d1a:	87 7f       	andi	r24, 0xF7	; 247
 d1c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d20:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d24:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d26:	80 93 eb 00 	sts	0x00EB, r24
 d2a:	aa 96       	adiw	r28, 0x2a	; 42
 d2c:	0f b6       	in	r0, 0x3f	; 63
 d2e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d30:	de bf       	out	0x3e, r29	; 62
 d32:	0f be       	out	0x3f, r0	; 63
 d34:	cd bf       	out	0x3d, r28	; 61
 d36:	df 91       	pop	r29
 d38:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d3a:	1f 91       	pop	r17
 d3c:	08 95       	ret

00000d3e <USB_Event_Stub>:
 d3e:	08 95       	ret

00000d40 <USB_USBTask>:
 d40:	cf 93       	push	r28
 d42:	80 91 0f 01 	lds	r24, 0x010F
 d46:	88 23       	and	r24, r24
 d48:	a9 f0       	breq	.+42     	; 0xd74 <USB_USBTask+0x34>
 d4a:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d4e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d50:	90 91 ec 00 	lds	r25, 0x00EC
 d54:	90 ff       	sbrs	r25, 0
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <USB_USBTask+0x1c>
 d58:	90 e8       	ldi	r25, 0x80	; 128
 d5a:	01 c0       	rjmp	.+2      	; 0xd5e <USB_USBTask+0x1e>
 d5c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d5e:	c9 2f       	mov	r28, r25
 d60:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d66:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d6a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 d6c:	97 de       	rcall	.-722    	; 0xa9c <USB_Device_ProcessControlRequest>
 d6e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d70:	c0 93 e9 00 	sts	0x00E9, r28
 d74:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d76:	08 95       	ret

00000d78 <memset>:
 d78:	dc 01       	movw	r26, r24
 d7a:	01 c0       	rjmp	.+2      	; 0xd7e <memset+0x6>
 d7c:	6d 93       	st	X+, r22
 d7e:	41 50       	subi	r20, 0x01	; 1
 d80:	50 40       	sbci	r21, 0x00	; 0
 d82:	e0 f7       	brcc	.-8      	; 0xd7c <memset+0x4>
 d84:	08 95       	ret

00000d86 <_exit>:
 d86:	f8 94       	cli

00000d88 <__stop_program>:
 d88:	ff cf       	rjmp	.-2      	; 0xd88 <__stop_program>

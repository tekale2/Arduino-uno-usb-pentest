
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000207a  0000210e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  0080013a  0080013a  00002148  2**0
                  ALLOC
  3 .stab         00002c94  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000113a  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005f16  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000898  00000000  00000000  00005f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f349  00000000  00000000  000067bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036ed  00000000  00000000  00015b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005560  00000000  00000000  000191f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001834  00000000  00000000  0001e758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004f5b  00000000  00000000  0001ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ad4e  00000000  00000000  00024ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  0002fc35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	d8 c6       	rjmp	.+3504   	; 0xdda <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4573>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4566>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4561>:
     11d:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4559>:
     138:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     148:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

00000154 <__c.4557>:
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     154:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
				ReportSize     -= 2;
     164:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

0000016f <__c.4554>:
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
				ReportSize     -= 1;
				ReportData     += 1;
     17f:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18f:	65 72 2e 0d 0a 00                                   er....

00000195 <__c.4551>:
     195:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1a5:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
     1b5:	74 65 73 2e 0d 0a 00                                tes....

000001bc <__c.4549>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1bc:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     1cc:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001d9 <__c.4547>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d9:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e9:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f9:	6f 6e 2e 0d 0a 00                                   on....

000001ff <__c.4545>:
     1ff:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     20f:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     21f:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     22f:	0a 00                                               ..

00000231 <__c.4543>:
     231:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     241:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     251:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000025e <__c.4536>:
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     26e:	68 65 64 2e 0d 0a 00                                hed....

00000275 <__c.4531>:

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     275:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
				break;
     285:	0d 0a 00                                            ...

00000288 <__c.4523>:

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     288:	0d 0a 0d 0a 00                                      .....

0000028d <__c.4517>:
     28d:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     29d:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000002a6 <__c.4510>:
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a6:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b6:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c6:	5b 33 37 6d 00 00                                   [37m..

000002cc <__ctors_end>:
				break;
     2cc:	11 24       	eor	r1, r1
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
				break;
     2d4:	de bf       	out	0x3e, r29	; 62

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0

				if (ParserData->UsingReportIDs)
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	ea e7       	ldi	r30, 0x7A	; 122
     2e0:	f0 e2       	ldi	r31, 0x20	; 32
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	aa 33       	cpi	r26, 0x3A	; 58
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	15 e0       	ldi	r17, 0x05	; 5
     2f4:	aa e3       	ldi	r26, 0x3A	; 58
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ac 35       	cpi	r26, 0x5C	; 92
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	98 d0       	rcall	.+304    	; 0x434 <main>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <LEDs_SetAllLEDs>:
     30a:	9b b1       	in	r25, 0x0b	; 11
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 2b       	or	r25, r24
     310:	9b b9       	out	0x0b, r25	; 11
     312:	08 95       	ret

00000314 <RNDISHost_Task>:
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <RNDISHost_Task+0xe>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	80 91 47 05 	lds	r24, 0x0547
     32a:	8b 30       	cpi	r24, 0x0B	; 11
     32c:	09 f0       	breq	.+2      	; 0x330 <RNDISHost_Task+0x1c>
     32e:	4a c0       	rjmp	.+148    	; 0x3c4 <RNDISHost_Task+0xb0>
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 77 0c 	call	0x18ee	; 0x18ee <RNDIS_Host_IsPacketReceived>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	88 23       	and	r24, r24
     33a:	09 f4       	brne	.+2      	; 0x33e <RNDISHost_Task+0x2a>
     33c:	43 c0       	rjmp	.+134    	; 0x3c4 <RNDISHost_Task+0xb0>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	e4 df       	rcall	.-56     	; 0x30a <LEDs_SetAllLEDs>
     342:	ae 01       	movw	r20, r28
     344:	4f 5f       	subi	r20, 0xFF	; 255
     346:	5f 4f       	sbci	r21, 0xFF	; 255
     348:	6a e3       	ldi	r22, 0x3A	; 58
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 93 0c 	call	0x1926	; 0x1926 <RNDIS_Host_ReadPacket>
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	8f 93       	push	r24
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	8f 93       	push	r24
     35c:	8d e8       	ldi	r24, 0x8D	; 141
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	9f 93       	push	r25
     362:	8f 93       	push	r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     368:	0a e3       	ldi	r16, 0x3A	; 58
     36a:	11 e0       	ldi	r17, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	81 e3       	ldi	r24, 0x31	; 49
     376:	e8 2e       	mov	r14, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	f8 2e       	mov	r15, r24
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	98 01       	movw	r18, r16
     382:	2a 53       	subi	r18, 0x3A	; 58
     384:	31 40       	sbci	r19, 0x01	; 1
     386:	28 17       	cp	r18, r24
				break;
     388:	39 07       	cpc	r19, r25

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	90 f4       	brcc	.+36     	; 0x3b0 <RNDISHost_Task+0x9c>
     38c:	f8 01       	movw	r30, r16
     38e:	21 91       	ld	r18, Z+
     390:	8f 01       	movw	r16, r30
     392:	82 2f       	mov	r24, r18
     394:	99 27       	eor	r25, r25
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	87 fd       	sbrc	r24, 7
     398:	90 95       	com	r25
     39a:	9f 93       	push	r25
     39c:	2f 93       	push	r18
     39e:	ff 92       	push	r15
     3a0:	ef 92       	push	r14
     3a2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <printf>
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	e6 cf       	rjmp	.-52     	; 0x37c <RNDISHost_Task+0x68>
				break;
     3b0:	88 e8       	ldi	r24, 0x88	; 136
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     3bc:	80 e6       	ldi	r24, 0x60	; 96
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	a5 df       	rcall	.-182    	; 0x30a <LEDs_SetAllLEDs>
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14

					while (CurrCollectionPath->Parent != NULL)
     3d4:	08 95       	ret

000003d6 <SetupHardware>:
     3d6:	84 b7       	in	r24, 0x34	; 52
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	84 bf       	out	0x34, r24	; 52
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	88 e1       	ldi	r24, 0x18	; 24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	80 93 60 00 	sts	0x0060, r24
     3e6:	10 92 60 00 	sts	0x0060, r1
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	80 e8       	ldi	r24, 0x80	; 128
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	80 93 61 00 	sts	0x0061, r24
     3f8:	90 93 61 00 	sts	0x0061, r25
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	83 e3       	ldi	r24, 0x33	; 51
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 cd 00 	sts	0x00CD, r25
     406:	80 93 cc 00 	sts	0x00CC, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     40a:	86 e0       	ldi	r24, 0x06	; 6
     40c:	80 93 ca 00 	sts	0x00CA, r24
     410:	10 92 c8 00 	sts	0x00C8, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	88 e1       	ldi	r24, 0x18	; 24
     416:	80 93 c9 00 	sts	0x00C9, r24
     41a:	53 9a       	sbi	0x0a, 3	; 10
     41c:	5a 9a       	sbi	0x0b, 2	; 11
     41e:	8a b1       	in	r24, 0x0a	; 10

				if (UsageListSize)
     420:	80 6f       	ori	r24, 0xF0	; 240
     422:	8a b9       	out	0x0a, r24	; 10
     424:	8b b1       	in	r24, 0x0b	; 11
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	8b b9       	out	0x0b, r24	; 11
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	bc d4       	rcall	.+2424   	; 0xda4 <USB_Init>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <Serial_CreateStream>

00000434 <main>:
     434:	d0 df       	rcall	.-96     	; 0x3d6 <SetupHardware>
     436:	86 ea       	ldi	r24, 0xA6	; 166
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     43e:	80 e1       	ldi	r24, 0x10	; 16

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	64 df       	rcall	.-312    	; 0x30a <LEDs_SetAllLEDs>
     442:	78 94       	sei
     444:	67 df       	rcall	.-306    	; 0x314 <RNDISHost_Task>
     446:	4e d7       	rcall	.+3740   	; 0x12e4 <USB_USBTask>
     448:	fd cf       	rjmp	.-6      	; 0x444 <main+0x10>

0000044a <EVENT_USB_Host_DeviceAttached>:
     44a:	85 e7       	ldi	r24, 0x75	; 117
					  UsageList[i - 1] = UsageList[i];
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     452:	80 ea       	ldi	r24, 0xA0	; 160

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	5a cf       	rjmp	.-332    	; 0x30a <LEDs_SetAllLEDs>

00000456 <EVENT_USB_Host_DeviceUnattached>:
     456:	8e e5       	ldi	r24, 0x5E	; 94
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     45e:	80 e1       	ldi	r24, 0x10	; 16
     460:	54 cf       	rjmp	.-344    	; 0x30a <LEDs_SetAllLEDs>

00000462 <EVENT_USB_Host_DeviceEnumerationComplete>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	ca 50       	subi	r28, 0x0A	; 10
     470:	d2 40       	sbci	r29, 0x02	; 2
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	80 ea       	ldi	r24, 0xA0	; 160
     47e:	45 df       	rcall	.-374    	; 0x30a <LEDs_SetAllLEDs>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	32 e0       	ldi	r19, 0x02	; 2
     484:	ae 01       	movw	r20, r28
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	be 01       	movw	r22, r28
     48c:	67 5f       	subi	r22, 0xF7	; 247
     48e:	7d 4f       	sbci	r23, 0xFD	; 253
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	52 d5       	rcall	.+2724   	; 0xf38 <USB_Host_GetDeviceConfigDescriptor>
     494:	88 23       	and	r24, r24
     496:	19 f0       	breq	.+6      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     498:	81 e3       	ldi	r24, 0x31	; 49
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	10 c0       	rjmp	.+32     	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     49e:	c7 5f       	subi	r28, 0xF7	; 247
     4a0:	dd 4f       	sbci	r29, 0xFD	; 253
     4a2:	68 81       	ld	r22, Y
     4a4:	79 81       	ldd	r23, Y+1	; 0x01
     4a6:	c9 50       	subi	r28, 0x09	; 9
     4a8:	d2 40       	sbci	r29, 0x02	; 2
     4aa:	ae 01       	movw	r20, r28
				break;
     4ac:	4f 5f       	subi	r20, 0xFF	; 255
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	8c d7       	rcall	.+3864   	; 0x13ce <RNDIS_Host_ConfigurePipes>
     4b6:	88 23       	and	r24, r24
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     4c2:	80 e9       	ldi	r24, 0x90	; 144
     4c4:	22 df       	rcall	.-444    	; 0x30a <LEDs_SetAllLEDs>
     4c6:	88 c0       	rjmp	.+272    	; 0x5d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x176>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	e5 d6       	rcall	.+3530   	; 0x1296 <USB_Host_SetDeviceConfiguration>
     4cc:	88 23       	and	r24, r24
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4d0:	89 ed       	ldi	r24, 0xD9	; 217
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	f4 cf       	rjmp	.-24     	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0e 94 b1 0a 	call	0x1562	; 0x1562 <RNDIS_Host_InitializeDevice>
     4de:	88 23       	and	r24, r24
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     4e2:	8c eb       	ldi	r24, 0xBC	; 188
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	47 c0       	rjmp	.+142    	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
     4e8:	80 91 1b 01 	lds	r24, 0x011B
     4ec:	8f 93       	push	r24
     4ee:	80 91 1a 01 	lds	r24, 0x011A
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f2:	8f 93       	push	r24
     4f4:	80 91 19 01 	lds	r24, 0x0119
     4f8:	8f 93       	push	r24
     4fa:	80 91 18 01 	lds	r24, 0x0118
     4fe:	8f 93       	push	r24
     500:	85 e9       	ldi	r24, 0x95	; 149
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	9f 93       	push	r25
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	8f 93       	push	r24
     508:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     50c:	8d e0       	ldi	r24, 0x0D	; 13
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	cb 5f       	subi	r28, 0xFB	; 251
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	dd 4f       	sbci	r29, 0xFD	; 253
     518:	88 83       	st	Y, r24
     51a:	99 83       	std	Y+1, r25	; 0x01
     51c:	aa 83       	std	Y+2, r26	; 0x02

					if (UsageListSize)
     51e:	bb 83       	std	Y+3, r27	; 0x03
     520:	c5 50       	subi	r28, 0x05	; 5
     522:	d2 40       	sbci	r29, 0x02	; 2
     524:	04 e0       	ldi	r16, 0x04	; 4
     526:	10 e0       	ldi	r17, 0x00	; 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	9e 01       	movw	r18, r28
     52a:	2b 5f       	subi	r18, 0xFB	; 251
     52c:	3d 4f       	sbci	r19, 0xFD	; 253
     52e:	4e e0       	ldi	r20, 0x0E	; 14
     530:	51 e0       	ldi	r21, 0x01	; 1
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 2f 0b 	call	0x165e	; 0x165e <RNDIS_Host_SetRNDISProperty>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
						  UsageList[i - 1] = UsageList[i];
     54a:	88 23       	and	r24, r24
     54c:	19 f0       	breq	.+6      	; 0x554 <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
     54e:	8f e6       	ldi	r24, 0x6F	; 111
     550:	91 e0       	ldi	r25, 0x01	; 1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	11 c0       	rjmp	.+34     	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
     554:	04 e0       	ldi	r16, 0x04	; 4
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	9e 01       	movw	r18, r28
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3d 4f       	sbci	r19, 0xFD	; 253
     55e:	4c e0       	ldi	r20, 0x0C	; 12
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	51 e0       	ldi	r21, 0x01	; 1
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	91 e0       	ldi	r25, 0x01	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RNDIS_Host_QueryRNDISProperty>
     56e:	88 23       	and	r24, r24
     570:	49 f0       	breq	.+18     	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0x122>
     572:	84 e5       	ldi	r24, 0x54	; 84
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     57a:	80 e9       	ldi	r24, 0x90	; 144
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	c6 de       	rcall	.-628    	; 0x30a <LEDs_SetAllLEDs>
     57e:	80 e0       	ldi	r24, 0x00	; 0
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	8a d6       	rcall	.+3348   	; 0x1296 <USB_Host_SetDeviceConfiguration>
     582:	2a c0       	rjmp	.+84     	; 0x5d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x176>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	cc 5f       	subi	r28, 0xFC	; 252
     586:	dd 4f       	sbci	r29, 0xFD	; 253
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	88 81       	ld	r24, Y
     58a:	c4 50       	subi	r28, 0x04	; 4
     58c:	d2 40       	sbci	r29, 0x02	; 2
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	8f 93       	push	r24
     590:	cd 5f       	subi	r28, 0xFD	; 253

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	dd 4f       	sbci	r29, 0xFD	; 253
     594:	88 81       	ld	r24, Y
     596:	c3 50       	subi	r28, 0x03	; 3
     598:	d2 40       	sbci	r29, 0x02	; 2
     59a:	8f 93       	push	r24
     59c:	ce 5f       	subi	r28, 0xFE	; 254
     59e:	dd 4f       	sbci	r29, 0xFD	; 253
     5a0:	88 81       	ld	r24, Y
     5a2:	c2 50       	subi	r28, 0x02	; 2
     5a4:	d2 40       	sbci	r29, 0x02	; 2
     5a6:	8f 93       	push	r24
     5a8:	cf 5f       	subi	r28, 0xFF	; 255
     5aa:	dd 4f       	sbci	r29, 0xFD	; 253

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	88 81       	ld	r24, Y
     5ae:	c1 50       	subi	r28, 0x01	; 1
     5b0:	d2 40       	sbci	r29, 0x02	; 2
     5b2:	8f 93       	push	r24
     5b4:	88 e3       	ldi	r24, 0x38	; 56
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     5c0:	8d e1       	ldi	r24, 0x1D	; 29
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <puts_P>
     5c8:	80 e6       	ldi	r24, 0x60	; 96
     5ca:	9f de       	rcall	.-706    	; 0x30a <LEDs_SetAllLEDs>
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	c6 5f       	subi	r28, 0xF6	; 246
     5da:	dd 4f       	sbci	r29, 0xFD	; 253
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	08 95       	ret

000005f0 <EVENT_USB_Host_HostError>:
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	1f 92       	push	r1
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	6b d3       	rcall	.+1750   	; 0xcd4 <USB_Disable>
					  return HID_PARSE_InsufficientReportItems;
     5fe:	1f 92       	push	r1
     600:	89 81       	ldd	r24, Y+1	; 0x01

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	8f 93       	push	r24
     604:	8e ee       	ldi	r24, 0xEE	; 238
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     610:	80 e9       	ldi	r24, 0x90	; 144
     612:	7b de       	rcall	.-778    	; 0x30a <LEDs_SetAllLEDs>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	ff cf       	rjmp	.-2      	; 0x61c <EVENT_USB_Host_HostError+0x2c>

0000061e <EVENT_USB_Host_DeviceEnumerationFailed>:
     61e:	90 91 47 05 	lds	r25, 0x0547
     622:	1f 92       	push	r1
     624:	9f 93       	push	r25
     626:	1f 92       	push	r1
     628:	6f 93       	push	r22
     62a:	1f 92       	push	r1
     62c:	8f 93       	push	r24
     62e:	88 e9       	ldi	r24, 0x98	; 152
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <printf_P>
     63a:	8d b7       	in	r24, 0x3d	; 61
     63c:	9e b7       	in	r25, 0x3e	; 62
     63e:	08 96       	adiw	r24, 0x08	; 8
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	9e bf       	out	0x3e, r25	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	8d bf       	out	0x3d, r24	; 61
     64a:	80 e9       	ldi	r24, 0x90	; 144
     64c:	5e ce       	rjmp	.-836    	; 0x30a <LEDs_SetAllLEDs>

0000064e <USB_Host_ResetDevice>:
     64e:	80 91 9e 00 	lds	r24, 0x009E
     652:	81 70       	andi	r24, 0x01	; 1
     654:	90 91 a0 00 	lds	r25, 0x00A0
     658:	9d 7f       	andi	r25, 0xFD	; 253
     65a:	90 93 a0 00 	sts	0x00A0, r25
     65e:	90 91 9e 00 	lds	r25, 0x009E
     662:	92 60       	ori	r25, 0x02	; 2
     664:	90 93 9e 00 	sts	0x009E, r25
     668:	90 91 9e 00 	lds	r25, 0x009E
     66c:	91 fd       	sbrc	r25, 1
     66e:	fc cf       	rjmp	.-8      	; 0x668 <USB_Host_ResetDevice+0x1a>
     670:	90 91 9e 00 	lds	r25, 0x009E
     674:	91 60       	ori	r25, 0x01	; 1
     676:	90 93 9e 00 	sts	0x009E, r25
     67a:	10 92 3d 05 	sts	0x053D, r1
     67e:	90 91 a0 00 	lds	r25, 0x00A0
     682:	90 72       	andi	r25, 0x20	; 32
     684:	20 91 a0 00 	lds	r18, 0x00A0
					  ParserData->TotalReportItems++;
     688:	2f 7d       	andi	r18, 0xDF	; 223
     68a:	20 93 a0 00 	sts	0x00A0, r18
     68e:	20 91 9f 00 	lds	r18, 0x009F

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	2f 7d       	andi	r18, 0xDF	; 223
     694:	20 93 9f 00 	sts	0x009F, r18
     698:	2a e0       	ldi	r18, 0x0A	; 10
     69a:	30 91 9f 00 	lds	r19, 0x009F
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	35 ff       	sbrs	r19, 5
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <USB_Host_ResetDevice+0x6a>
     6a2:	20 91 9f 00 	lds	r18, 0x009F
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	2f 7d       	andi	r18, 0xDF	; 223
     6a8:	20 93 9f 00 	sts	0x009F, r18
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6ac:	20 91 9f 00 	lds	r18, 0x009F
     6b0:	2d 7f       	andi	r18, 0xFD	; 253
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	20 93 9f 00 	sts	0x009F, r18
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <USB_Host_ResetDevice+0x7a>
     6b8:	ef ec       	ldi	r30, 0xCF	; 207
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	f7 e0       	ldi	r31, 0x07	; 7
     6bc:	31 97       	sbiw	r30, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	f1 f7       	brne	.-4      	; 0x6bc <USB_Host_ResetDevice+0x6e>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <USB_Host_ResetDevice+0x74>
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	00 00       	nop
     6c4:	21 50       	subi	r18, 0x01	; 1
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	49 f7       	brne	.-46     	; 0x69a <USB_Host_ResetDevice+0x4c>
     6c8:	99 23       	and	r25, r25
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <USB_Host_ResetDevice+0x88>
     6cc:	90 91 a0 00 	lds	r25, 0x00A0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6d0:	90 62       	ori	r25, 0x20	; 32
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	90 93 a0 00 	sts	0x00A0, r25
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	81 11       	cpse	r24, r1

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <USB_Host_ResetDevice+0x96>
     6da:	80 91 9e 00 	lds	r24, 0x009E
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 93 9e 00 	sts	0x009E, r24
     6e4:	80 91 a0 00 	lds	r24, 0x00A0
     6e8:	82 60       	ori	r24, 0x02	; 2
     6ea:	80 93 a0 00 	sts	0x00A0, r24
     6ee:	08 95       	ret

000006f0 <USB_Host_WaitMS>:
     6f0:	20 91 9e 00 	lds	r18, 0x009E
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	90 91 a0 00 	lds	r25, 0x00A0
     6fa:	90 72       	andi	r25, 0x20	; 32
     6fc:	30 91 a0 00 	lds	r19, 0x00A0
     700:	3f 7d       	andi	r19, 0xDF	; 223
     702:	30 93 a0 00 	sts	0x00A0, r19
     706:	30 91 9f 00 	lds	r19, 0x009F
     70a:	3f 7d       	andi	r19, 0xDF	; 223
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     70c:	30 93 9f 00 	sts	0x009F, r19
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     710:	30 91 9e 00 	lds	r19, 0x009E
     714:	31 60       	ori	r19, 0x01	; 1
     716:	30 93 9e 00 	sts	0x009E, r19
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     71a:	88 23       	and	r24, r24
     71c:	39 f1       	breq	.+78     	; 0x76c <USB_Host_WaitMS+0x7c>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     71e:	30 91 9f 00 	lds	r19, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     722:	35 ff       	sbrs	r19, 5
     724:	06 c0       	rjmp	.+12     	; 0x732 <USB_Host_WaitMS+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     726:	30 91 9f 00 	lds	r19, 0x009F
     72a:	3f 7d       	andi	r19, 0xDF	; 223
     72c:	30 93 9f 00 	sts	0x009F, r19
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     730:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     732:	30 91 47 05 	lds	r19, 0x0547
     736:	31 30       	cpi	r19, 0x01	; 1
     738:	c1 f0       	breq	.+48     	; 0x76a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     73a:	30 91 a6 00 	lds	r19, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     73e:	34 ff       	sbrs	r19, 4
     740:	09 c0       	rjmp	.+18     	; 0x754 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     742:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     746:	80 91 a6 00 	lds	r24, 0x00A6
     74a:	8f 7e       	andi	r24, 0xEF	; 239
     74c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     750:	82 e0       	ldi	r24, 0x02	; 2

			break;
     752:	0c c0       	rjmp	.+24     	; 0x76c <USB_Host_WaitMS+0x7c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     754:	30 91 a6 00 	lds	r19, 0x00A6
		}

		if (Pipe_IsStalled())
     758:	31 ff       	sbrs	r19, 1
     75a:	df cf       	rjmp	.-66     	; 0x71a <USB_Host_WaitMS+0x2a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     75c:	80 91 a6 00 	lds	r24, 0x00A6
     760:	8d 7f       	andi	r24, 0xFD	; 253
     762:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     766:	83 e0       	ldi	r24, 0x03	; 3

			break;
     768:	01 c0       	rjmp	.+2      	; 0x76c <USB_Host_WaitMS+0x7c>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     76a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     76c:	21 11       	cpse	r18, r1
     76e:	05 c0       	rjmp	.+10     	; 0x77a <USB_Host_WaitMS+0x8a>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     770:	20 91 9e 00 	lds	r18, 0x009E
     774:	2e 7f       	andi	r18, 0xFE	; 254
     776:	20 93 9e 00 	sts	0x009E, r18
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     77a:	99 23       	and	r25, r25
     77c:	29 f0       	breq	.+10     	; 0x788 <USB_Host_WaitMS+0x98>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     77e:	90 91 a0 00 	lds	r25, 0x00A0
     782:	90 62       	ori	r25, 0x20	; 32
     784:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     788:	08 95       	ret

0000078a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	28 97       	sbiw	r28, 0x08	; 8
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7a2:	80 91 47 05 	lds	r24, 0x0547
     7a6:	85 30       	cpi	r24, 0x05	; 5
     7a8:	09 f4       	brne	.+2      	; 0x7ac <USB_Host_ProcessNextHostState+0x22>
     7aa:	9c c0       	rjmp	.+312    	; 0x8e4 <USB_Host_ProcessNextHostState+0x15a>
     7ac:	68 f4       	brcc	.+26     	; 0x7c8 <USB_Host_ProcessNextHostState+0x3e>
     7ae:	82 30       	cpi	r24, 0x02	; 2
     7b0:	e1 f1       	breq	.+120    	; 0x82a <USB_Host_ProcessNextHostState+0xa0>
     7b2:	18 f4       	brcc	.+6      	; 0x7ba <USB_Host_ProcessNextHostState+0x30>
     7b4:	88 23       	and	r24, r24
     7b6:	d9 f0       	breq	.+54     	; 0x7ee <USB_Host_ProcessNextHostState+0x64>
     7b8:	ff c0       	rjmp	.+510    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x36>
     7be:	3f c0       	rjmp	.+126    	; 0x83e <USB_Host_ProcessNextHostState+0xb4>
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <USB_Host_ProcessNextHostState+0x3c>
     7c4:	67 c0       	rjmp	.+206    	; 0x894 <USB_Host_ProcessNextHostState+0x10a>
     7c6:	f8 c0       	rjmp	.+496    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     7c8:	87 30       	cpi	r24, 0x07	; 7
     7ca:	09 f4       	brne	.+2      	; 0x7ce <USB_Host_ProcessNextHostState+0x44>
     7cc:	a6 c0       	rjmp	.+332    	; 0x91a <USB_Host_ProcessNextHostState+0x190>
     7ce:	08 f4       	brcc	.+2      	; 0x7d2 <USB_Host_ProcessNextHostState+0x48>
     7d0:	96 c0       	rjmp	.+300    	; 0x8fe <USB_Host_ProcessNextHostState+0x174>
     7d2:	88 30       	cpi	r24, 0x08	; 8
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <USB_Host_ProcessNextHostState+0x4e>
     7d6:	bf c0       	rjmp	.+382    	; 0x956 <USB_Host_ProcessNextHostState+0x1cc>
     7d8:	89 30       	cpi	r24, 0x09	; 9
     7da:	09 f0       	breq	.+2      	; 0x7de <USB_Host_ProcessNextHostState+0x54>
     7dc:	ed c0       	rjmp	.+474    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7e4:	8a e0       	ldi	r24, 0x0A	; 10
     7e6:	80 93 47 05 	sts	0x0547, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7ea:	3b de       	rcall	.-906    	; 0x462 <EVENT_USB_Host_DeviceEnumerationComplete>
     7ec:	e5 c0       	rjmp	.+458    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
			break;
     7ee:	00 91 3b 05 	lds	r16, 0x053B
	static uint8_t  PostWaitState;

	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7f2:	10 91 3c 05 	lds	r17, 0x053C
     7f6:	01 15       	cp	r16, r1
     7f8:	11 05       	cpc	r17, r1
     7fa:	09 f4       	brne	.+2      	; 0x7fe <USB_Host_ProcessNextHostState+0x74>
     7fc:	dd c0       	rjmp	.+442    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     800:	77 df       	rcall	.-274    	; 0x6f0 <USB_Host_WaitMS>
     802:	88 23       	and	r24, r24
     804:	31 f0       	breq	.+12     	; 0x812 <USB_Host_ProcessNextHostState+0x88>
     806:	90 91 3a 05 	lds	r25, 0x053A
				{
					USB_HostState = PostWaitState;
     80a:	90 93 47 05 	sts	0x0547, r25
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	c5 c0       	rjmp	.+394    	; 0x99c <USB_Host_ProcessNextHostState+0x212>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     812:	01 50       	subi	r16, 0x01	; 1
					break;
     814:	11 09       	sbc	r17, r1
				}

				if (!(--WaitMSRemaining))
     816:	10 93 3c 05 	sts	0x053C, r17
     81a:	00 93 3b 05 	sts	0x053B, r16
     81e:	01 2b       	or	r16, r17
     820:	09 f0       	breq	.+2      	; 0x824 <USB_Host_ProcessNextHostState+0x9a>
     822:	ca c0       	rjmp	.+404    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     824:	80 91 3a 05 	lds	r24, 0x053A
				  USB_HostState = PostWaitState;
     828:	07 c0       	rjmp	.+14     	; 0x838 <USB_Host_ProcessNextHostState+0xae>
     82a:	88 ee       	ldi	r24, 0xE8	; 232
     82c:	93 e0       	ldi	r25, 0x03	; 3
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     82e:	90 93 3c 05 	sts	0x053C, r25
     832:	80 93 3b 05 	sts	0x053B, r24
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	80 93 47 05 	sts	0x0547, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     83c:	bd c0       	rjmp	.+378    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     83e:	80 91 3b 05 	lds	r24, 0x053B
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     842:	90 91 3c 05 	lds	r25, 0x053C
     846:	9c 01       	movw	r18, r24
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	31 09       	sbc	r19, r1
     84c:	30 93 3c 05 	sts	0x053C, r19
     850:	20 93 3b 05 	sts	0x053B, r18
     854:	89 2b       	or	r24, r25
     856:	39 f0       	breq	.+14     	; 0x866 <USB_Host_ProcessNextHostState+0xdc>
     858:	8f ec       	ldi	r24, 0xCF	; 207
     85a:	97 e0       	ldi	r25, 0x07	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <USB_Host_ProcessNextHostState+0xd2>
     860:	00 c0       	rjmp	.+0      	; 0x862 <USB_Host_ProcessNextHostState+0xd8>
     862:	00 00       	nop
     864:	a9 c0       	rjmp	.+338    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     866:	77 98       	cbi	0x0e, 7	; 14
     868:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     86c:	80 61       	ori	r24, 0x10	; 16
     86e:	80 93 d8 00 	sts	0x00D8, r24
     872:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     876:	8b 7f       	andi	r24, 0xFB	; 251
     878:	80 93 dd 00 	sts	0x00DD, r24
     87c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     880:	80 61       	ori	r24, 0x10	; 16
     882:	80 93 d7 00 	sts	0x00D7, r24
     886:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     88a:	82 60       	ori	r24, 0x02	; 2
     88c:	80 93 dd 00 	sts	0x00DD, r24
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	d2 cf       	rjmp	.-92     	; 0x838 <USB_Host_ProcessNextHostState+0xae>
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     894:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     898:	80 ff       	sbrs	r24, 0
     89a:	8e c0       	rjmp	.+284    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     89c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8a0:	8e 7f       	andi	r24, 0xFE	; 254
     8a2:	80 93 9f 00 	sts	0x009F, r24
     8a6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8aa:	8d 7f       	andi	r24, 0xFD	; 253
     8ac:	80 93 9f 00 	sts	0x009F, r24
     8b0:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     8b4:	8d 7f       	andi	r24, 0xFD	; 253
     8b6:	80 93 df 00 	sts	0x00DF, r24
     8ba:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     8be:	82 60       	ori	r24, 0x02	; 2
     8c0:	80 93 de 00 	sts	0x00DE, r24
     8c4:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	80 93 9e 00 	sts	0x009E, r24
     8ce:	96 d1       	rcall	.+812    	; 0xbfc <Pipe_ClearPipes>
     8d0:	10 92 47 05 	sts	0x0547, r1

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8d4:	84 e6       	ldi	r24, 0x64	; 100

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 3c 05 	sts	0x053C, r25
     8dc:	80 93 3b 05 	sts	0x053B, r24
     8e0:	85 e0       	ldi	r24, 0x05	; 5
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <USB_Host_ProcessNextHostState+0x16e>
     8e4:	b4 de       	rcall	.-664    	; 0x64e <USB_Host_ResetDevice>
     8e6:	10 92 47 05 	sts	0x0547, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	90 e0       	ldi	r25, 0x00	; 0

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8ee:	90 93 3c 05 	sts	0x053C, r25
     8f2:	80 93 3b 05 	sts	0x053B, r24
     8f6:	86 e0       	ldi	r24, 0x06	; 6
     8f8:	80 93 3a 05 	sts	0x053A, r24
     8fc:	5d c0       	rjmp	.+186    	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     8fe:	01 e0       	ldi	r16, 0x01	; 1
     900:	20 e4       	ldi	r18, 0x40	; 64
     902:	30 e0       	ldi	r19, 0x00	; 0
			break;
     904:	40 e0       	ldi	r20, 0x00	; 0
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	f1 d0       	rcall	.+482    	; 0xaee <Pipe_ConfigurePipe>
     90c:	81 11       	cpse	r24, r1
     90e:	03 c0       	rjmp	.+6      	; 0x916 <USB_Host_ProcessNextHostState+0x18c>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	43 c0       	rjmp	.+134    	; 0x99c <USB_Host_ProcessNextHostState+0x212>
     916:	87 e0       	ldi	r24, 0x07	; 7
     918:	8f cf       	rjmp	.-226    	; 0x838 <USB_Host_ProcessNextHostState+0xae>
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     91a:	88 e0       	ldi	r24, 0x08	; 8
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     91c:	e1 e2       	ldi	r30, 0x21	; 33
     91e:	f1 e0       	ldi	r31, 0x01	; 1
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     920:	af e3       	ldi	r26, 0x3F	; 63
     922:	b5 e0       	ldi	r27, 0x05	; 5
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	8a 95       	dec	r24
     92a:	e1 f7       	brne	.-8      	; 0x924 <USB_Host_ProcessNextHostState+0x19a>
     92c:	10 92 a7 00 	sts	0x00A7, r1
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b5 d3       	rcall	.+1898   	; 0x10a0 <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     936:	81 11       	cpse	r24, r1
     938:	30 c0       	rjmp	.+96     	; 0x99a <USB_Host_ProcessNextHostState+0x210>
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     93a:	88 85       	ldd	r24, Y+8	; 0x08
     93c:	80 93 20 01 	sts	0x0120, r24
     940:	86 de       	rcall	.-756    	; 0x64e <USB_Host_ResetDevice>
     942:	10 92 47 05 	sts	0x0547, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     946:	88 ec       	ldi	r24, 0xC8	; 200
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 3c 05 	sts	0x053C, r25

			USB_Host_ResetDevice();
     94e:	80 93 3b 05 	sts	0x053B, r24

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	d1 cf       	rjmp	.-94     	; 0x8f8 <USB_Host_ProcessNextHostState+0x16e>
     956:	20 91 20 01 	lds	r18, 0x0120
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	01 e0       	ldi	r16, 0x01	; 1
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     964:	c4 d0       	rcall	.+392    	; 0xaee <Pipe_ConfigurePipe>
     966:	88 23       	and	r24, r24
     968:	99 f2       	breq	.-90     	; 0x910 <USB_Host_ProcessNextHostState+0x186>
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	e9 e2       	ldi	r30, 0x29	; 41
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	af e3       	ldi	r26, 0x3F	; 63
     972:	b5 e0       	ldi	r27, 0x05	; 5
     974:	01 90       	ld	r0, Z+
     976:	0d 92       	st	X+, r0
     978:	8a 95       	dec	r24
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     97a:	e1 f7       	brne	.-8      	; 0x974 <USB_Host_ProcessNextHostState+0x1ea>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	8f d3       	rcall	.+1822   	; 0x10a0 <USB_Host_SendControlRequest>
     982:	81 11       	cpse	r24, r1
     984:	0a c0       	rjmp	.+20     	; 0x99a <USB_Host_ProcessNextHostState+0x210>
     986:	10 92 47 05 	sts	0x0547, r1
     98a:	84 e6       	ldi	r24, 0x64	; 100
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 3c 05 	sts	0x053C, r25
     992:	80 93 3b 05 	sts	0x053B, r24
     996:	89 e0       	ldi	r24, 0x09	; 9
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     998:	af cf       	rjmp	.-162    	; 0x8f8 <USB_Host_ProcessNextHostState+0x16e>
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	20 91 47 05 	lds	r18, 0x0547
     9a0:	21 30       	cpi	r18, 0x01	; 1
     9a2:	51 f0       	breq	.+20     	; 0x9b8 <USB_Host_ProcessNextHostState+0x22e>
     9a4:	68 2f       	mov	r22, r24
     9a6:	89 2f       	mov	r24, r25
     9a8:	3a de       	rcall	.-908    	; 0x61e <EVENT_USB_Host_DeviceEnumerationFailed>
     9aa:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9ae:	81 60       	ori	r24, 0x01	; 1
     9b0:	80 93 dd 00 	sts	0x00DD, r24
     9b4:	50 dd       	rcall	.-1376   	; 0x456 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9b6:	a6 d1       	rcall	.+844    	; 0xd04 <USB_ResetInterface>
     9b8:	28 96       	adiw	r28, 0x08	; 8
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16

		USB_ResetInterface();
     9cc:	08 95       	ret

000009ce <Pipe_Discard_Stream>:
     9ce:	ef 92       	push	r14
	}
}
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	8c 01       	movw	r16, r24
     9dc:	eb 01       	movw	r28, r22
     9de:	80 91 aa 00 	lds	r24, 0x00AA
     9e2:	8f 7c       	andi	r24, 0xCF	; 207
     9e4:	80 61       	ori	r24, 0x10	; 16
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9e6:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9ea:	46 d1       	rcall	.+652    	; 0xc78 <Pipe_WaitUntilReady>
     9ec:	81 11       	cpse	r24, r1
     9ee:	2b c0       	rjmp	.+86     	; 0xa46 <Pipe_Discard_Stream+0x78>
     9f0:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9f2:	21 f0       	breq	.+8      	; 0x9fc <Pipe_Discard_Stream+0x2e>
     9f4:	88 81       	ld	r24, Y
	  Length -= *BytesProcessed;
     9f6:	99 81       	ldd	r25, Y+1	; 0x01
     9f8:	08 1b       	sub	r16, r24
     9fa:	19 0b       	sbc	r17, r25
     9fc:	e1 2c       	mov	r14, r1

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     9fe:	f1 2c       	mov	r15, r1
     a00:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     a02:	11 05       	cpc	r17, r1
     a04:	f9 f0       	breq	.+62     	; 0xa44 <Pipe_Discard_Stream+0x76>
     a06:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a0a:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a0c:	13 c0       	rjmp	.+38     	; 0xa34 <Pipe_Discard_Stream+0x66>
     a0e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a12:	8e 77       	andi	r24, 0x7E	; 126
     a14:	80 93 a6 00 	sts	0x00A6, r24
     a18:	20 97       	sbiw	r28, 0x00	; 0
		{
			Pipe_ClearIN();

			if (BytesProcessed != NULL)
     a1a:	41 f0       	breq	.+16     	; 0xa2c <Pipe_Discard_Stream+0x5e>
     a1c:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     a1e:	99 81       	ldd	r25, Y+1	; 0x01
     a20:	8e 0d       	add	r24, r14
     a22:	9f 1d       	adc	r25, r15
     a24:	99 83       	std	Y+1, r25	; 0x01
     a26:	88 83       	st	Y, r24
     a28:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a2a:	0d c0       	rjmp	.+26     	; 0xa46 <Pipe_Discard_Stream+0x78>
     a2c:	25 d1       	rcall	.+586    	; 0xc78 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a2e:	88 23       	and	r24, r24
     a30:	39 f3       	breq	.-50     	; 0xa00 <Pipe_Discard_Stream+0x32>
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <Pipe_Discard_Stream+0x78>
     a34:	80 91 af 00 	lds	r24, 0x00AF
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
     a38:	01 50       	subi	r16, 0x01	; 1
     a3a:	11 09       	sbc	r17, r1
		}
		else
		{
			Pipe_Discard_8();

			Length--;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	e8 1a       	sub	r14, r24
			BytesInTransfer++;
     a40:	f8 0a       	sbc	r15, r24
     a42:	de cf       	rjmp	.-68     	; 0xa00 <Pipe_Discard_Stream+0x32>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     a48:	cf 91       	pop	r28
}
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <Pipe_Read_Stream_LE>:
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	7c 01       	movw	r14, r24
     a66:	8b 01       	movw	r16, r22
     a68:	ea 01       	movw	r28, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a6a:	80 91 aa 00 	lds	r24, 0x00AA
     a6e:	8f 7c       	andi	r24, 0xCF	; 207
     a70:	80 61       	ori	r24, 0x10	; 16
     a72:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a76:	00 d1       	rcall	.+512    	; 0xc78 <Pipe_WaitUntilReady>
     a78:	81 11       	cpse	r24, r1
     a7a:	30 c0       	rjmp	.+96     	; 0xadc <Pipe_Read_Stream_LE+0x88>
     a7c:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a7e:	31 f0       	breq	.+12     	; 0xa8c <Pipe_Read_Stream_LE+0x38>
     a80:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
     a82:	99 81       	ldd	r25, Y+1	; 0x01
     a84:	08 1b       	sub	r16, r24
     a86:	19 0b       	sbc	r17, r25
     a88:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a8a:	f9 1e       	adc	r15, r25
     a8c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a8e:	d1 2c       	mov	r13, r1
     a90:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a92:	11 05       	cpc	r17, r1
     a94:	11 f1       	breq	.+68     	; 0xada <Pipe_Read_Stream_LE+0x86>
     a96:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a9a:	85 fd       	sbrc	r24, 5
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <Pipe_Read_Stream_LE+0x70>
     a9e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     aa2:	8e 77       	andi	r24, 0x7E	; 126
     aa4:	80 93 a6 00 	sts	0x00A6, r24
     aa8:	20 97       	sbiw	r28, 0x00	; 0
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     aaa:	41 f0       	breq	.+16     	; 0xabc <Pipe_Read_Stream_LE+0x68>
     aac:	88 81       	ld	r24, Y
			{
				*BytesProcessed += BytesInTransfer;
     aae:	99 81       	ldd	r25, Y+1	; 0x01
     ab0:	8c 0d       	add	r24, r12
     ab2:	9d 1d       	adc	r25, r13
     ab4:	99 83       	std	Y+1, r25	; 0x01
     ab6:	88 83       	st	Y, r24
     ab8:	84 e0       	ldi	r24, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     aba:	10 c0       	rjmp	.+32     	; 0xadc <Pipe_Read_Stream_LE+0x88>
     abc:	dd d0       	rcall	.+442    	; 0xc78 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     abe:	88 23       	and	r24, r24
     ac0:	39 f3       	breq	.-50     	; 0xa90 <Pipe_Read_Stream_LE+0x3c>
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <Pipe_Read_Stream_LE+0x88>
     ac4:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ac8:	f7 01       	movw	r30, r14
     aca:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     acc:	7f 01       	movw	r14, r30
     ace:	01 50       	subi	r16, 0x01	; 1
     ad0:	11 09       	sbc	r17, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ad2:	ff ef       	ldi	r31, 0xFF	; 255
     ad4:	cf 1a       	sub	r12, r31
			BytesInTransfer++;
     ad6:	df 0a       	sbc	r13, r31
     ad8:	db cf       	rjmp	.-74     	; 0xa90 <Pipe_Read_Stream_LE+0x3c>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	df 91       	pop	r29
		}
	}

	return PIPE_RWSTREAM_NoError;
     ade:	cf 91       	pop	r28
}
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <Pipe_ConfigurePipe>:
     aee:	0f 93       	push	r16
     af0:	e8 2f       	mov	r30, r24
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     af2:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     af4:	87 ff       	sbrs	r24, 7
     af6:	02 c0       	rjmp	.+4      	; 0xafc <Pipe_ConfigurePipe+0xe>
     af8:	80 e1       	ldi	r24, 0x10	; 16
     afa:	01 c0       	rjmp	.+2      	; 0xafe <Pipe_ConfigurePipe+0x10>
     afc:	80 e2       	ldi	r24, 0x20	; 32

	if (Number >= PIPE_TOTAL_PIPES)
     afe:	e7 30       	cpi	r30, 0x07	; 7
     b00:	10 f0       	brcs	.+4      	; 0xb06 <Pipe_ConfigurePipe+0x18>
	  return false;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	5a c0       	rjmp	.+180    	; 0xbba <Pipe_ConfigurePipe+0xcc>

	if (Type == EP_TYPE_CONTROL)
     b06:	61 11       	cpse	r22, r1
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <Pipe_ConfigurePipe+0x1e>
	  Token = PIPE_TOKEN_SETUP;
     b0a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b0c:	90 e4       	ldi	r25, 0x40	; 64
     b0e:	69 9f       	mul	r22, r25
     b10:	b0 01       	movw	r22, r0
     b12:	11 24       	eor	r1, r1
     b14:	4f 70       	andi	r20, 0x0F	; 15
     b16:	46 2b       	or	r20, r22
     b18:	48 2b       	or	r20, r24
     b1a:	5e 2f       	mov	r21, r30
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b1c:	50 93 a7 00 	sts	0x00A7, r21
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     b20:	5e 13       	cpse	r21, r30
     b22:	19 c0       	rjmp	.+50     	; 0xb56 <Pipe_ConfigurePipe+0x68>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
     b24:	02 30       	cpi	r16, 0x02	; 2
     b26:	10 f0       	brcs	.+4      	; 0xb2c <Pipe_ConfigurePipe+0x3e>
     b28:	76 e0       	ldi	r23, 0x06	; 6
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <Pipe_ConfigurePipe+0x40>
     b2c:	72 e0       	ldi	r23, 0x02	; 2
		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     b2e:	88 e0       	ldi	r24, 0x08	; 8
     b30:	90 e0       	ldi	r25, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b32:	60 e0       	ldi	r22, 0x00	; 0
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b34:	82 17       	cp	r24, r18
     b36:	93 07       	cpc	r25, r19
     b38:	40 f0       	brcs	.+16     	; 0xb4a <Pipe_ConfigurePipe+0x5c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b3a:	86 2f       	mov	r24, r22
     b3c:	82 95       	swap	r24
     b3e:	80 7f       	andi	r24, 0xF0	; 240
     b40:	87 2b       	or	r24, r23

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b42:	f4 2f       	mov	r31, r20
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b44:	60 e0       	ldi	r22, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	0e c0       	rjmp	.+28     	; 0xb66 <Pipe_ConfigurePipe+0x78>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b4a:	65 30       	cpi	r22, 0x05	; 5
     b4c:	b1 f3       	breq	.-20     	; 0xb3a <Pipe_ConfigurePipe+0x4c>
				{
					MaskVal++;
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
					CheckBytes <<= 1;
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	ef cf       	rjmp	.-34     	; 0xb34 <Pipe_ConfigurePipe+0x46>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b56:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b5a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b5e:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     b62:	60 91 ae 00 	lds	r22, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b66:	81 fd       	sbrc	r24, 1
     b68:	07 c0       	rjmp	.+14     	; 0xb78 <Pipe_ConfigurePipe+0x8a>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b6a:	5f 5f       	subi	r21, 0xFF	; 255
     b6c:	57 30       	cpi	r21, 0x07	; 7
     b6e:	b1 f6       	brne	.-84     	; 0xb1c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b70:	e0 93 a7 00 	sts	0x00A7, r30
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	21 c0       	rjmp	.+66     	; 0xbba <Pipe_ConfigurePipe+0xcc>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b78:	90 91 a9 00 	lds	r25, 0x00A9
     b7c:	9e 7f       	andi	r25, 0xFE	; 254
     b7e:	90 93 a9 00 	sts	0x00A9, r25

		if (!(UPCFG1XTemp & (1 << ALLOC)))
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b82:	90 91 ab 00 	lds	r25, 0x00AB
     b86:	9d 7f       	andi	r25, 0xFD	; 253
     b88:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b8c:	90 91 a9 00 	lds	r25, 0x00A9
     b90:	91 60       	ori	r25, 0x01	; 1
     b92:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b96:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     b9a:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     b9e:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     ba2:	60 93 ae 00 	sts	0x00AE, r22

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ba6:	80 91 a9 00 	lds	r24, 0x00A9
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bb0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     bb4:	87 fd       	sbrc	r24, 7
     bb6:	d9 cf       	rjmp	.-78     	; 0xb6a <Pipe_ConfigurePipe+0x7c>
     bb8:	a4 cf       	rjmp	.-184    	; 0xb02 <Pipe_ConfigurePipe+0x14>
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	f6 2e       	mov	r15, r22
     bca:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	1f 15       	cp	r17, r15
     bd0:	71 f0       	breq	.+28     	; 0xbee <Pipe_ConfigurePipeTable+0x30>
	{
		if (!(Table[i].Address))
     bd2:	88 81       	ld	r24, Y
     bd4:	88 23       	and	r24, r24
     bd6:	41 f0       	breq	.+16     	; 0xbe8 <Pipe_ConfigurePipeTable+0x2a>
		  continue;

		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	3a 81       	ldd	r19, Y+2	; 0x02
     bdc:	0d 81       	ldd	r16, Y+5	; 0x05
     bde:	4b 81       	ldd	r20, Y+3	; 0x03
     be0:	6c 81       	ldd	r22, Y+4	; 0x04
     be2:	85 df       	rcall	.-246    	; 0xaee <Pipe_ConfigurePipe>
     be4:	88 23       	and	r24, r24
     be6:	21 f0       	breq	.+8      	; 0xbf0 <Pipe_ConfigurePipeTable+0x32>
     be8:	1f 5f       	subi	r17, 0xFF	; 255
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     bea:	26 96       	adiw	r28, 0x06	; 6
     bec:	f0 cf       	rjmp	.-32     	; 0xbce <Pipe_ConfigurePipeTable+0x10>
     bee:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}

	return true;
     bf0:	df 91       	pop	r29
}
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	08 95       	ret

00000bfc <Pipe_ClearPipes>:
     bfc:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c00:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c02:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c06:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c0a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c0e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c12:	90 91 a9 00 	lds	r25, 0x00A9
     c16:	9e 7f       	andi	r25, 0xFE	; 254
     c18:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	87 30       	cpi	r24, 0x07	; 7
     c20:	81 f7       	brne	.-32     	; 0xc02 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c22:	08 95       	ret

00000c24 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     c24:	90 91 a7 00 	lds	r25, 0x00A7
     c28:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     c2a:	20 91 aa 00 	lds	r18, 0x00AA
     c2e:	20 ff       	sbrs	r18, 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <Pipe_IsEndpointBound+0x12>
     c32:	20 e8       	ldi	r18, 0x80	; 128
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <Pipe_IsEndpointBound+0x14>
     c36:	20 e0       	ldi	r18, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     c38:	42 2f       	mov	r20, r18
     c3a:	49 2b       	or	r20, r25

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c3c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c3e:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c42:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     c46:	27 ff       	sbrs	r18, 7
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <Pipe_IsEndpointBound+0x3e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     c4a:	30 91 aa 00 	lds	r19, 0x00AA

				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c4e:	53 2f       	mov	r21, r19
     c50:	5f 70       	andi	r21, 0x0F	; 15
     c52:	35 ff       	sbrs	r19, 5
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <Pipe_IsEndpointBound+0x36>
     c56:	20 e8       	ldi	r18, 0x80	; 128
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <Pipe_IsEndpointBound+0x38>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     c5e:	28 17       	cp	r18, r24
     c60:	49 f0       	breq	.+18     	; 0xc74 <Pipe_IsEndpointBound+0x50>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c62:	9f 5f       	subi	r25, 0xFF	; 255
     c64:	97 30       	cpi	r25, 0x07	; 7
     c66:	59 f7       	brne	.-42     	; 0xc3e <Pipe_IsEndpointBound+0x1a>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c68:	94 2f       	mov	r25, r20
     c6a:	9f 70       	andi	r25, 0x0F	; 15
     c6c:	90 93 a7 00 	sts	0x00A7, r25
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     c74:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c76:	08 95       	ret

00000c78 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c78:	80 91 a2 00 	lds	r24, 0x00A2
     c7c:	90 91 a3 00 	lds	r25, 0x00A3
     c80:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c82:	20 91 aa 00 	lds	r18, 0x00AA
     c86:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c88:	20 31       	cpi	r18, 0x10	; 16
     c8a:	29 f4       	brne	.+10     	; 0xc96 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c8c:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c90:	20 ff       	sbrs	r18, 0
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <Pipe_WaitUntilReady+0x26>
     c94:	17 c0       	rjmp	.+46     	; 0xcc4 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c96:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c9a:	22 fd       	sbrc	r18, 2
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c9e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ca2:	21 fd       	sbrc	r18, 1
     ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ca6:	20 91 47 05 	lds	r18, 0x0547
     caa:	21 30       	cpi	r18, 0x01	; 1
     cac:	79 f0       	breq	.+30     	; 0xccc <Pipe_WaitUntilReady+0x54>
     cae:	20 91 a2 00 	lds	r18, 0x00A2
     cb2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	19 f3       	breq	.-58     	; 0xc82 <Pipe_WaitUntilReady+0xa>
     cbc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cbe:	41 f0       	breq	.+16     	; 0xcd0 <Pipe_WaitUntilReady+0x58>
     cc0:	c9 01       	movw	r24, r18
     cc2:	df cf       	rjmp	.-66     	; 0xc82 <Pipe_WaitUntilReady+0xa>
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
		{
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     cd0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     cd2:	08 95       	ret

00000cd4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cd4:	75 d0       	rcall	.+234    	; 0xdc0 <USB_INT_DisableAllInterrupts>
     cd6:	7c d0       	rcall	.+248    	; 0xdd0 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cd8:	e0 ee       	ldi	r30, 0xE0	; 224
     cda:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
     ce2:	e8 ed       	ldi	r30, 0xD8	; 216
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	80 83       	st	Z, r24
     cec:	19 bc       	out	0x29, r1	; 41
     cee:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cf0:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cf2:	8c 91       	ld	r24, X
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	8c 93       	st	X, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cfc:	80 83       	st	Z, r24
     cfe:	10 92 3e 05 	sts	0x053E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d02:	08 95       	ret

00000d04 <USB_ResetInterface>:
     d04:	5d d0       	rcall	.+186    	; 0xdc0 <USB_INT_DisableAllInterrupts>
     d06:	64 d0       	rcall	.+200    	; 0xdd0 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d08:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d0c:	8f 77       	andi	r24, 0x7F	; 127
     d0e:	80 93 d8 00 	sts	0x00D8, r24
     d12:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	80 93 d8 00 	sts	0x00D8, r24
     d1c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	80 93 d8 00 	sts	0x00D8, r24
     d26:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	80 93 d7 00 	sts	0x00D7, r24
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d34:	8e e0       	ldi	r24, 0x0E	; 14
     d36:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d38:	09 b4       	in	r0, 0x29	; 41
     d3a:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d3c:	fd cf       	rjmp	.-6      	; 0xd38 <USB_ResetInterface+0x34>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	80 93 47 05 	sts	0x0547, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d44:	10 92 3d 05 	sts	0x053D, r1
	USB_Host_ConfigurationNumber = 0;
     d48:	80 e4       	ldi	r24, 0x40	; 64
     d4a:	80 93 20 01 	sts	0x0120, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d4e:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	80 93 d8 00 	sts	0x00D8, r24
     d58:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d5c:	81 60       	ori	r24, 0x01	; 1
     d5e:	80 93 dd 00 	sts	0x00DD, r24
     d62:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	80 93 dd 00 	sts	0x00DD, r24
     d6c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	80 93 d7 00 	sts	0x00D7, r24
     d76:	6f 9a       	sbi	0x0d, 7	; 13
     d78:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d7a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 93 de 00 	sts	0x00DE, r24
     d84:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d88:	84 60       	ori	r24, 0x04	; 4
     d8a:	80 93 de 00 	sts	0x00DE, r24
     d8e:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	80 93 e0 00 	sts	0x00E0, r24
     d98:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d9c:	80 61       	ori	r24, 0x10	; 16
     d9e:	80 93 d8 00 	sts	0x00D8, r24
     da2:	08 95       	ret

00000da4 <USB_Init>:
     da4:	e8 ed       	ldi	r30, 0xD8	; 216
     da6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     da8:	80 81       	ld	r24, Z
     daa:	8f 7e       	andi	r24, 0xEF	; 239
     dac:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     dae:	e7 ed       	ldi	r30, 0xD7	; 215
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 3e 05 	sts	0x053E, r24

	USB_ResetInterface();
     dbe:	a2 cf       	rjmp	.-188    	; 0xd04 <USB_ResetInterface>

00000dc0 <USB_INT_DisableAllInterrupts>:
     dc0:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8c 7f       	andi	r24, 0xFC	; 252
     dc8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     dca:	10 92 a0 00 	sts	0x00A0, r1
     dce:	08 95       	ret

00000dd0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     dd0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     dd4:	10 92 9f 00 	sts	0x009F, r1
     dd8:	08 95       	ret

00000dda <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e00:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e04:	85 ff       	sbrs	r24, 5
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e08:	80 91 a0 00 	lds	r24, 0x00A0
     e0c:	85 ff       	sbrs	r24, 5
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e10:	80 91 9f 00 	lds	r24, 0x009F
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e1a:	1a d1       	rcall	.+564    	; 0x1050 <USB_Event_Stub>
     e1c:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e20:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e22:	15 c0       	rjmp	.+42     	; 0xe4e <__vector_10+0x74>
     e24:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e28:	81 ff       	sbrs	r24, 1
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <__vector_10+0x74>
     e2c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e30:	8d 7f       	andi	r24, 0xFD	; 253
     e32:	80 93 9f 00 	sts	0x009F, r24
     e36:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	80 93 9f 00 	sts	0x009F, r24
     e40:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e44:	8d 7f       	andi	r24, 0xFD	; 253
     e46:	80 93 a0 00 	sts	0x00A0, r24
     e4a:	05 db       	rcall	.-2550   	; 0x456 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e4c:	5b df       	rcall	.-330    	; 0xd04 <USB_ResetInterface>
     e4e:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e52:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e54:	15 c0       	rjmp	.+42     	; 0xe80 <__vector_10+0xa6>
     e56:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e5a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e5c:	11 c0       	rjmp	.+34     	; 0xe80 <__vector_10+0xa6>
     e5e:	80 91 df 00 	lds	r24, 0x00DF
     e62:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e64:	80 93 df 00 	sts	0x00DF, r24
     e68:	77 98       	cbi	0x0e, 7	; 14
     e6a:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e6e:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e70:	80 93 dd 00 	sts	0x00DD, r24
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	bc db       	rcall	.-2184   	; 0x5f0 <EVENT_USB_Host_HostError>
     e78:	ee da       	rcall	.-2596   	; 0x456 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 47 05 	sts	0x0547, r24
		EVENT_USB_Host_DeviceUnattached();
     e80:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e84:	80 ff       	sbrs	r24, 0
     e86:	17 c0       	rjmp	.+46     	; 0xeb6 <__vector_10+0xdc>
     e88:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e8c:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e8e:	13 c0       	rjmp	.+38     	; 0xeb6 <__vector_10+0xdc>
     e90:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e9a:	80 91 de 00 	lds	r24, 0x00DE
     e9e:	8e 7f       	andi	r24, 0xFE	; 254
     ea0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     ea4:	d2 da       	rcall	.-2652   	; 0x44a <EVENT_USB_Host_DeviceAttached>
     ea6:	80 91 a0 00 	lds	r24, 0x00A0
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     eb0:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     eb2:	80 93 47 05 	sts	0x0547, r24
     eb6:	80 91 df 00 	lds	r24, 0x00DF
     eba:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <__vector_10+0x100>
     ebe:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ec2:	82 ff       	sbrs	r24, 2
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ec6:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     eca:	8b 7f       	andi	r24, 0xFB	; 251
     ecc:	80 93 df 00 	sts	0x00DF, r24
     ed0:	60 e0       	ldi	r22, 0x00	; 0
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	a4 db       	rcall	.-2232   	; 0x61e <EVENT_USB_Host_DeviceEnumerationFailed>
     ed6:	bf da       	rcall	.-2690   	; 0x456 <EVENT_USB_Host_DeviceUnattached>
     ed8:	15 df       	rcall	.-470    	; 0xd04 <USB_ResetInterface>
     eda:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23

		USB_ResetInterface();
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0b be       	out	0x3b, r0	; 59
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <USB_GetNextDescriptor>:
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	fc 01       	movw	r30, r24
     f06:	eb 01       	movw	r28, r22
     f08:	a8 81       	ld	r26, Y
     f0a:	b9 81       	ldd	r27, Y+1	; 0x01
     f0c:	8c 91       	ld	r24, X
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	20 81       	ld	r18, Z
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;

				if (*BytesRem < CurrDescriptorSize)
     f12:	31 81       	ldd	r19, Z+1	; 0x01
     f14:	82 17       	cp	r24, r18
     f16:	93 07       	cpc	r25, r19
     f18:	08 f4       	brcc	.+2      	; 0xf1c <USB_GetNextDescriptor+0x1c>
     f1a:	9c 01       	movw	r18, r24
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f1c:	a2 0f       	add	r26, r18
     f1e:	b3 1f       	adc	r27, r19
     f20:	eb 01       	movw	r28, r22
     f22:	b9 83       	std	Y+1, r27	; 0x01
     f24:	a8 83       	st	Y, r26
				*BytesRem      -= CurrDescriptorSize;
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	82 1b       	sub	r24, r18
     f2c:	93 0b       	sbc	r25, r19
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
			}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	29 97       	sbiw	r28, 0x09	; 9
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	7b 01       	movw	r14, r22
     f5a:	8a 01       	movw	r16, r20
     f5c:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f5e:	90 e8       	ldi	r25, 0x80	; 128
     f60:	90 93 3f 05 	sts	0x053F, r25
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	90 93 40 05 	sts	0x0540, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f6a:	e8 2f       	mov	r30, r24
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	f2 60       	ori	r31, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f72:	f0 93 42 05 	sts	0x0542, r31
     f76:	e0 93 41 05 	sts	0x0541, r30
     f7a:	10 92 44 05 	sts	0x0544, r1
     f7e:	10 92 43 05 	sts	0x0543, r1
     f82:	89 e0       	ldi	r24, 0x09	; 9
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 46 05 	sts	0x0546, r25
     f8a:	80 93 45 05 	sts	0x0545, r24
     f8e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	84 d0       	rcall	.+264    	; 0x10a0 <USB_Host_SendControlRequest>
     f98:	81 11       	cpse	r24, r1
     f9a:	19 c0       	rjmp	.+50     	; 0xfce <USB_Host_GetDeviceConfigDescriptor+0x96>
     f9c:	eb 81       	ldd	r30, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f9e:	fc 81       	ldd	r31, Y+4	; 0x04
     fa0:	d7 01       	movw	r26, r14
     fa2:	ed 93       	st	X+, r30
     fa4:	fc 93       	st	X, r31
     fa6:	ce 16       	cp	r12, r30

	if (*ConfigSizePtr > BufferSize)
     fa8:	df 06       	cpc	r13, r31
     faa:	70 f0       	brcs	.+28     	; 0xfc8 <USB_Host_GetDeviceConfigDescriptor+0x90>
     fac:	f0 93 46 05 	sts	0x0546, r31
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fb0:	e0 93 45 05 	sts	0x0545, r30
     fb4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fb6:	74 d0       	rcall	.+232    	; 0x10a0 <USB_Host_SendControlRequest>
     fb8:	81 11       	cpse	r24, r1
     fba:	09 c0       	rjmp	.+18     	; 0xfce <USB_Host_GetDeviceConfigDescriptor+0x96>
     fbc:	f8 01       	movw	r30, r16
     fbe:	81 81       	ldd	r24, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	21 f0       	breq	.+8      	; 0xfcc <USB_Host_GetDeviceConfigDescriptor+0x94>
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return HOST_GETCONFIG_InvalidData;
     fc8:	85 e0       	ldi	r24, 0x05	; 5
     fca:	01 c0       	rjmp	.+2      	; 0xfce <USB_Host_GetDeviceConfigDescriptor+0x96>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
     fd0:	0f b6       	in	r0, 0x3f	; 63
}
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	08 95       	ret

00000fec <USB_GetNextDescriptorComp>:
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	8c 01       	movw	r16, r24
    1002:	eb 01       	movw	r28, r22
    1004:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1006:	f8 01       	movw	r30, r16
    1008:	e0 80       	ld	r14, Z
    100a:	f1 80       	ldd	r15, Z+1	; 0x01
    100c:	e1 14       	cp	r14, r1
    100e:	f1 04       	cpc	r15, r1
    1010:	99 f0       	breq	.+38     	; 0x1038 <USB_GetNextDescriptorComp+0x4c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1012:	a8 80       	ld	r10, Y
    1014:	b9 80       	ldd	r11, Y+1	; 0x01
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
    1016:	be 01       	movw	r22, r28
    1018:	c8 01       	movw	r24, r16
    101a:	72 df       	rcall	.-284    	; 0xf00 <USB_GetNextDescriptor>
    101c:	88 81       	ld	r24, Y

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    101e:	99 81       	ldd	r25, Y+1	; 0x01
    1020:	f6 01       	movw	r30, r12
    1022:	09 95       	icall
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	79 f3       	breq	.-34     	; 0x1006 <USB_GetNextDescriptorComp+0x1a>
    1028:	81 30       	cpi	r24, 0x01	; 1
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    102a:	39 f4       	brne	.+14     	; 0x103a <USB_GetNextDescriptorComp+0x4e>
    102c:	b9 82       	std	Y+1, r11	; 0x01
			{
				*CurrConfigLoc = PrevDescLoc;
    102e:	a8 82       	st	Y, r10
    1030:	f8 01       	movw	r30, r16
				*BytesRem      = PrevBytesRem;
    1032:	f1 82       	std	Z+1, r15	; 0x01
    1034:	e0 82       	st	Z, r14
    1036:	01 c0       	rjmp	.+2      	; 0x103a <USB_GetNextDescriptorComp+0x4e>
    1038:	82 e0       	ldi	r24, 0x02	; 2

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    103a:	df 91       	pop	r29
}
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	08 95       	ret

00001050 <USB_Event_Stub>:
    1050:	08 95       	ret

00001052 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    105a:	c9 ee       	ldi	r28, 0xE9	; 233
    105c:	d3 e0       	ldi	r29, 0x03	; 3
    105e:	11 11       	cpse	r17, r1
    1060:	0d c0       	rjmp	.+26     	; 0x107c <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	83 fd       	sbrc	r24, 3
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <USB_Host_WaitForIOS+0x44>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	41 db       	rcall	.-2430   	; 0x6f0 <USB_Host_WaitMS>
    106e:	81 11       	cpse	r24, r1
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <USB_Host_WaitForIOS+0x46>
    1072:	21 97       	sbiw	r28, 0x01	; 1
    1074:	20 97       	sbiw	r28, 0x00	; 0
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1076:	99 f7       	brne	.-26     	; 0x105e <USB_Host_WaitForIOS+0xc>
    1078:	84 e0       	ldi	r24, 0x04	; 4
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <USB_Host_WaitForIOS+0x46>
    107c:	11 30       	cpi	r17, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    107e:	29 f4       	brne	.+10     	; 0x108a <USB_Host_WaitForIOS+0x38>
    1080:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1084:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1086:	f1 cf       	rjmp	.-30     	; 0x106a <USB_Host_WaitForIOS+0x18>
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <USB_Host_WaitForIOS+0x44>
    108a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    108c:	71 f7       	brne	.-36     	; 0x106a <USB_Host_WaitForIOS+0x18>
    108e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1092:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1094:	ea cf       	rjmp	.-44     	; 0x106a <USB_Host_WaitForIOS+0x18>
    1096:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1098:	df 91       	pop	r29
}
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	08 95       	ret

000010a0 <USB_Host_SendControlRequest>:
    10a0:	ff 92       	push	r15

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10ac:	f0 90 9e 00 	lds	r15, 0x009E
    10b0:	8f 2d       	mov	r24, r15
    10b2:	81 70       	andi	r24, 0x01	; 1
    10b4:	f8 2e       	mov	r15, r24

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10b6:	c0 91 45 05 	lds	r28, 0x0545
    10ba:	d0 91 46 05 	lds	r29, 0x0546
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10be:	80 91 9e 00 	lds	r24, 0x009E
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	12 db       	rcall	.-2524   	; 0x6f0 <USB_Host_WaitMS>
    10cc:	81 11       	cpse	r24, r1
    10ce:	cc c0       	rjmp	.+408    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    10d0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d4:	8f 7c       	andi	r24, 0xCF	; 207
    10d6:	80 93 aa 00 	sts	0x00AA, r24
    10da:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10de:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    10e2:	8f 7e       	andi	r24, 0xEF	; 239
    10e4:	80 93 a6 00 	sts	0x00A6, r24
    10e8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ec:	8f 7b       	andi	r24, 0xBF	; 191
    10ee:	80 93 a9 00 	sts	0x00A9, r24
    10f2:	ef e3       	ldi	r30, 0x3F	; 63
    10f4:	f5 e0       	ldi	r31, 0x05	; 5
    10f6:	81 91       	ld	r24, Z+
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10f8:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10fc:	85 e0       	ldi	r24, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10fe:	e7 34       	cpi	r30, 0x47	; 71
    1100:	f8 07       	cpc	r31, r24
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <USB_Host_SendControlRequest+0x56>
    1104:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1108:	87 77       	andi	r24, 0x77	; 119
    110a:	80 93 a6 00 	sts	0x00A6, r24
    110e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1110:	a0 df       	rcall	.-192    	; 0x1052 <USB_Host_WaitForIOS>
    1112:	81 11       	cpse	r24, r1
    1114:	a9 c0       	rjmp	.+338    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1116:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	80 93 a9 00 	sts	0x00A9, r24
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	e6 da       	rcall	.-2612   	; 0x6f0 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1124:	81 11       	cpse	r24, r1
    1126:	a0 c0       	rjmp	.+320    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1128:	80 91 3f 05 	lds	r24, 0x053F
    112c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    112e:	4e c0       	rjmp	.+156    	; 0x11cc <USB_Host_SendControlRequest+0x12c>
    1130:	80 91 aa 00 	lds	r24, 0x00AA
    1134:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	80 93 aa 00 	sts	0x00AA, r24
    113c:	01 15       	cp	r16, r1
    113e:	11 05       	cpc	r17, r1
    1140:	09 f0       	breq	.+2      	; 0x1144 <USB_Host_SendControlRequest+0xa4>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1142:	3a c0       	rjmp	.+116    	; 0x11b8 <USB_Host_SendControlRequest+0x118>
    1144:	80 91 aa 00 	lds	r24, 0x00AA
    1148:	8f 7c       	andi	r24, 0xCF	; 207
    114a:	80 62       	ori	r24, 0x20	; 32
    114c:	80 93 aa 00 	sts	0x00AA, r24
    1150:	80 91 a9 00 	lds	r24, 0x00A9
    1154:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1156:	80 93 a9 00 	sts	0x00A9, r24
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	7a df       	rcall	.-268    	; 0x1052 <USB_Host_WaitForIOS>
    115e:	81 11       	cpse	r24, r1
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1160:	83 c0       	rjmp	.+262    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1162:	80 91 a6 00 	lds	r24, 0x00A6
    1166:	8b 77       	andi	r24, 0x7B	; 123
    1168:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	71 df       	rcall	.-286    	; 0x1052 <USB_Host_WaitForIOS>
    1170:	7b c0       	rjmp	.+246    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1172:	80 91 a9 00 	lds	r24, 0x00A9
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1176:	8f 7b       	andi	r24, 0xBF	; 191
    1178:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	69 df       	rcall	.-302    	; 0x1052 <USB_Host_WaitForIOS>
    1180:	81 11       	cpse	r24, r1
    1182:	72 c0       	rjmp	.+228    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1184:	80 91 f6 00 	lds	r24, 0x00F6
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1188:	90 91 f7 00 	lds	r25, 0x00F7
    118c:	89 2b       	or	r24, r25
    118e:	11 f4       	brne	.+4      	; 0x1194 <USB_Host_SendControlRequest+0xf4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1190:	c0 e0       	ldi	r28, 0x00	; 0
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	f8 01       	movw	r30, r16
    1196:	8f 01       	movw	r16, r30
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1198:	80 91 f6 00 	lds	r24, 0x00F6
				  DataLen = 0;
    119c:	90 91 f7 00 	lds	r25, 0x00F7
    11a0:	89 2b       	or	r24, r25
    11a2:	69 f4       	brne	.+26     	; 0x11be <USB_Host_SendControlRequest+0x11e>
    11a4:	80 91 a9 00 	lds	r24, 0x00A9
    11a8:	80 64       	ori	r24, 0x40	; 64
    11aa:	80 93 a9 00 	sts	0x00A9, r24

				while (Pipe_BytesInPipe() && DataLen)
    11ae:	80 91 a6 00 	lds	r24, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11b2:	8e 77       	andi	r24, 0x7E	; 126
    11b4:	80 93 a6 00 	sts	0x00A6, r24
    11b8:	20 97       	sbiw	r28, 0x00	; 0
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11ba:	d9 f6       	brne	.-74     	; 0x1172 <USB_Host_SendControlRequest+0xd2>
    11bc:	c3 cf       	rjmp	.-122    	; 0x1144 <USB_Host_SendControlRequest+0xa4>
    11be:	20 97       	sbiw	r28, 0x00	; 0
    11c0:	89 f3       	breq	.-30     	; 0x11a4 <USB_Host_SendControlRequest+0x104>
    11c2:	80 91 af 00 	lds	r24, 0x00AF
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11c6:	81 93       	st	Z+, r24
    11c8:	21 97       	sbiw	r28, 0x01	; 1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11ca:	e5 cf       	rjmp	.-54     	; 0x1196 <USB_Host_SendControlRequest+0xf6>
    11cc:	01 15       	cp	r16, r1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11ce:	11 05       	cpc	r17, r1
    11d0:	b1 f1       	breq	.+108    	; 0x123e <USB_Host_SendControlRequest+0x19e>
				{
					*(DataStream++) = Pipe_Read_8();
    11d2:	80 91 aa 00 	lds	r24, 0x00AA
					DataLen--;
    11d6:	8f 7c       	andi	r24, 0xCF	; 207
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11d8:	80 62       	ori	r24, 0x20	; 32
    11da:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11de:	80 91 a9 00 	lds	r24, 0x00A9
    11e2:	8f 7b       	andi	r24, 0xBF	; 191
    11e4:	80 93 a9 00 	sts	0x00A9, r24
    11e8:	82 e0       	ldi	r24, 0x02	; 2

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ea:	20 97       	sbiw	r28, 0x00	; 0
    11ec:	01 f1       	breq	.+64     	; 0x122e <USB_Host_SendControlRequest+0x18e>
    11ee:	31 df       	rcall	.-414    	; 0x1052 <USB_Host_WaitForIOS>
    11f0:	81 11       	cpse	r24, r1
    11f2:	3a c0       	rjmp	.+116    	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11f4:	f8 01       	movw	r30, r16
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11f6:	20 91 f6 00 	lds	r18, 0x00F6
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11fa:	30 91 f7 00 	lds	r19, 0x00F7
    11fe:	80 91 20 01 	lds	r24, 0x0120
    1202:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	58 f4       	brcc	.+22     	; 0x1220 <USB_Host_SendControlRequest+0x180>
    120a:	cf 01       	movw	r24, r30
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	8c 01       	movw	r16, r24
    1210:	20 81       	ld	r18, Z
    1212:	20 93 af 00 	sts	0x00AF, r18
    1216:	21 97       	sbiw	r28, 0x01	; 1
    1218:	20 97       	sbiw	r28, 0x00	; 0
    121a:	19 f0       	breq	.+6      	; 0x1222 <USB_Host_SendControlRequest+0x182>
    121c:	fc 01       	movw	r30, r24
				{
					Pipe_Write_8(*(DataStream++));
    121e:	eb cf       	rjmp	.-42     	; 0x11f6 <USB_Host_SendControlRequest+0x156>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1220:	8f 01       	movw	r16, r30
    1222:	80 91 a6 00 	lds	r24, 0x00A6
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1226:	8b 77       	andi	r24, 0x7B	; 123
    1228:	80 93 a6 00 	sts	0x00A6, r24
    122c:	dd cf       	rjmp	.-70     	; 0x11e8 <USB_Host_SendControlRequest+0x148>
    122e:	11 df       	rcall	.-478    	; 0x1052 <USB_Host_WaitForIOS>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1230:	81 11       	cpse	r24, r1
    1232:	1a c0       	rjmp	.+52     	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    1234:	80 91 a9 00 	lds	r24, 0x00A9
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    123e:	80 91 aa 00 	lds	r24, 0x00AA
    1242:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	80 93 aa 00 	sts	0x00AA, r24
    124a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    124e:	8f 7b       	andi	r24, 0xBF	; 191
    1250:	80 93 a9 00 	sts	0x00A9, r24
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	fd de       	rcall	.-518    	; 0x1052 <USB_Host_WaitForIOS>
    1258:	81 11       	cpse	r24, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <USB_Host_SendControlRequest+0x1c8>
    125c:	80 91 a6 00 	lds	r24, 0x00A6
    1260:	8e 77       	andi	r24, 0x7E	; 126
    1262:	80 93 a6 00 	sts	0x00A6, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 91 a9 00 	lds	r25, 0x00A9
    126c:	90 64       	ori	r25, 0x40	; 64
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    126e:	90 93 a9 00 	sts	0x00A9, r25
    1272:	f1 10       	cpse	r15, r1
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <USB_Host_SendControlRequest+0x1e0>
    1276:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    127a:	9e 7f       	andi	r25, 0xFE	; 254
    127c:	90 93 9e 00 	sts	0x009E, r25
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	90 93 a8 00 	sts	0x00A8, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1286:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1292:	ff 90       	pop	r15
    1294:	08 95       	ret

00001296 <USB_Host_SetDeviceConfiguration>:
    1296:	cf 93       	push	r28
				UPRST = 0;
    1298:	c8 2f       	mov	r28, r24
    129a:	10 92 3f 05 	sts	0x053F, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    129e:	89 e0       	ldi	r24, 0x09	; 9
    12a0:	80 93 40 05 	sts	0x0540, r24
    12a4:	2c 2f       	mov	r18, r28
    12a6:	30 e0       	ldi	r19, 0x00	; 0

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12a8:	30 93 42 05 	sts	0x0542, r19
    12ac:	20 93 41 05 	sts	0x0541, r18
    12b0:	10 92 44 05 	sts	0x0544, r1
    12b4:	10 92 43 05 	sts	0x0543, r1
    12b8:	10 92 46 05 	sts	0x0546, r1
    12bc:	10 92 45 05 	sts	0x0545, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12c0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	eb de       	rcall	.-554    	; 0x10a0 <USB_Host_SendControlRequest>
    12ca:	81 11       	cpse	r24, r1
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <USB_Host_SetDeviceConfiguration+0x4a>
    12ce:	c0 93 3d 05 	sts	0x053D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12d2:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12d4:	11 f0       	breq	.+4      	; 0x12da <USB_Host_SetDeviceConfiguration+0x44>
    12d6:	9b e0       	ldi	r25, 0x0B	; 11
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <USB_Host_SetDeviceConfiguration+0x46>
    12da:	9a e0       	ldi	r25, 0x0A	; 10
    12dc:	90 93 47 05 	sts	0x0547, r25
    12e0:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    12e2:	08 95       	ret

000012e4 <USB_USBTask>:
    12e4:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12e6:	c0 91 a7 00 	lds	r28, 0x00A7
    12ea:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12ec:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12f0:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12f4:	4a da       	rcall	.-2924   	; 0x78a <USB_Host_ProcessNextHostState>
    12f6:	c0 93 a7 00 	sts	0x00A7, r28
    12fa:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12fc:	08 95       	ret

000012fe <DCOMP_RNDIS_Host_NextRNDISControlInterface>:
    12fe:	fc 01       	movw	r30, r24

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1300:	81 81       	ldd	r24, Z+1	; 0x01
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	59 f4       	brne	.+22     	; 0x131c <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    1306:	85 81       	ldd	r24, Z+5	; 0x05
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	41 f4       	brne	.+16     	; 0x131c <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    130c:	86 81       	ldd	r24, Z+6	; 0x06
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	29 f4       	brne	.+10     	; 0x131c <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    1312:	87 81       	ldd	r24, Z+7	; 0x07
    1314:	8f 3f       	cpi	r24, 0xFF	; 255
    1316:	11 f4       	brne	.+4      	; 0x131c <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	08 95       	ret
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    131c:	82 e0       	ldi	r24, 0x02	; 2
}
    131e:	08 95       	ret

00001320 <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    1320:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1322:	81 81       	ldd	r24, Z+1	; 0x01
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	51 f4       	brne	.+20     	; 0x133c <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    1328:	85 81       	ldd	r24, Z+5	; 0x05
    132a:	8a 30       	cpi	r24, 0x0A	; 10
    132c:	39 f4       	brne	.+14     	; 0x133c <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    132e:	86 81       	ldd	r24, Z+6	; 0x06
    1330:	81 11       	cpse	r24, r1
    1332:	04 c0       	rjmp	.+8      	; 0x133c <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    1334:	87 81       	ldd	r24, Z+7	; 0x07
    1336:	81 11       	cpse	r24, r1
    1338:	01 c0       	rjmp	.+2      	; 0x133c <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1c>
    133a:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    133c:	82 e0       	ldi	r24, 0x02	; 2
}
    133e:	08 95       	ret

00001340 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
    1340:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	85 30       	cpi	r24, 0x05	; 5
    1346:	51 f4       	brne	.+20     	; 0x135c <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1348:	83 81       	ldd	r24, Z+3	; 0x03
    134a:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    134c:	82 50       	subi	r24, 0x02	; 2
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	48 f4       	brcc	.+18     	; 0x1364 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	67 dc       	rcall	.-1842   	; 0xc24 <Pipe_IsEndpointBound>
    1356:	81 11       	cpse	r24, r1
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x28>
    135c:	84 30       	cpi	r24, 0x04	; 4
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    135e:	11 f4       	brne	.+4      	; 0x1364 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1360:	81 e0       	ldi	r24, 0x01	; 1
	{
		return DESCRIPTOR_SEARCH_Fail;
    1362:	08 95       	ret
    1364:	82 e0       	ldi	r24, 0x02	; 2
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1366:	08 95       	ret
    1368:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    136a:	08 95       	ret

0000136c <RNDIS_SendEncapsulatedCommand>:
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    136c:	fc 01       	movw	r30, r24

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    136e:	87 89       	ldd	r24, Z+23	; 0x17
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	21 e2       	ldi	r18, 0x21	; 33
    1374:	20 93 3f 05 	sts	0x053F, r18
    1378:	10 92 40 05 	sts	0x0540, r1
    137c:	10 92 42 05 	sts	0x0542, r1
    1380:	10 92 41 05 	sts	0x0541, r1
    1384:	90 93 44 05 	sts	0x0544, r25
    1388:	80 93 43 05 	sts	0x0543, r24
    138c:	50 93 46 05 	sts	0x0546, r21
    1390:	40 93 45 05 	sts	0x0545, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1394:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1398:	cb 01       	movw	r24, r22
    139a:	82 ce       	rjmp	.-764    	; 0x10a0 <USB_Host_SendControlRequest>

0000139c <RNDIS_GetEncapsulatedResponse>:
    139c:	fc 01       	movw	r30, r24

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    139e:	87 89       	ldd	r24, Z+23	; 0x17
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	21 ea       	ldi	r18, 0xA1	; 161
    13a4:	20 93 3f 05 	sts	0x053F, r18
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	20 93 40 05 	sts	0x0540, r18
    13ae:	10 92 42 05 	sts	0x0542, r1
    13b2:	10 92 41 05 	sts	0x0541, r1
    13b6:	90 93 44 05 	sts	0x0544, r25
    13ba:	80 93 43 05 	sts	0x0543, r24
    13be:	50 93 46 05 	sts	0x0546, r21
    13c2:	40 93 45 05 	sts	0x0545, r20
    13c6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    13ca:	cb 01       	movw	r24, r22
    13cc:	69 ce       	rjmp	.-814    	; 0x10a0 <USB_Host_SendControlRequest>

000013ce <RNDIS_Host_ConfigurePipes>:
    13ce:	8f 92       	push	r8
#include "RNDISClassHost.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    13d0:	9f 92       	push	r9
    13d2:	af 92       	push	r10
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <RNDIS_Host_ConfigurePipes+0x1a>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <RNDIS_Host_ConfigurePipes+0x1c>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	8c 01       	movw	r16, r24
    13f0:	7a 83       	std	Y+2, r23	; 0x02
    13f2:	69 83       	std	Y+1, r22	; 0x01
    13f4:	5c 83       	std	Y+4, r21	; 0x04
    13f6:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    13f8:	fc 01       	movw	r30, r24
    13fa:	76 96       	adiw	r30, 0x16	; 22
    13fc:	8a e0       	ldi	r24, 0x0A	; 10
    13fe:	df 01       	movw	r26, r30
    1400:	1d 92       	st	X+, r1
    1402:	8a 95       	dec	r24
    1404:	e9 f7       	brne	.-6      	; 0x1400 <RNDIS_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1406:	8b 80       	ldd	r8, Y+3	; 0x03
    1408:	9c 80       	ldd	r9, Y+4	; 0x04
    140a:	f4 01       	movw	r30, r8
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	09 f0       	breq	.+2      	; 0x1414 <RNDIS_Host_ConfigurePipes+0x46>
    1412:	95 c0       	rjmp	.+298    	; 0x153e <RNDIS_Host_ConfigurePipes+0x170>
    1414:	e1 2c       	mov	r14, r1
    1416:	f1 2c       	mov	r15, r1
    1418:	c1 2c       	mov	r12, r1
    141a:	d1 2c       	mov	r13, r1
    141c:	a1 2c       	mov	r10, r1
    141e:	b1 2c       	mov	r11, r1

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1420:	81 14       	cp	r8, r1
    1422:	91 04       	cpc	r9, r1
    1424:	21 f4       	brne	.+8      	; 0x142e <RNDIS_Host_ConfigurePipes+0x60>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1426:	e1 14       	cp	r14, r1
    1428:	f1 04       	cpc	r15, r1
    142a:	61 f4       	brne	.+24     	; 0x1444 <RNDIS_Host_ConfigurePipes+0x76>
    142c:	1c c0       	rjmp	.+56     	; 0x1466 <RNDIS_Host_ConfigurePipes+0x98>
	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    142e:	40 ea       	ldi	r20, 0xA0	; 160
    1430:	59 e0       	ldi	r21, 0x09	; 9
    1432:	be 01       	movw	r22, r28
    1434:	6d 5f       	subi	r22, 0xFD	; 253
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	d7 dd       	rcall	.-1106   	; 0xfec <USB_GetNextDescriptorComp>
    143e:	81 11       	cpse	r24, r1

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1440:	f2 cf       	rjmp	.-28     	; 0x1426 <RNDIS_Host_ConfigurePipes+0x58>
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <RNDIS_Host_ConfigurePipes+0xb2>
    1444:	40 e9       	ldi	r20, 0x90	; 144
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1446:	59 e0       	ldi	r21, 0x09	; 9
    1448:	be 01       	movw	r22, r28
    144a:	6d 5f       	subi	r22, 0xFD	; 253
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	cc dd       	rcall	.-1128   	; 0xfec <USB_GetNextDescriptorComp>
    1454:	81 11       	cpse	r24, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <RNDIS_Host_ConfigurePipes+0x94>
    1458:	a1 2c       	mov	r10, r1
    145a:	b1 2c       	mov	r11, r1
											  DCOMP_RNDIS_Host_NextRNDISDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				DataINEndpoint  = NULL;
    145c:	c1 2c       	mov	r12, r1
    145e:	d1 2c       	mov	r13, r1
				DataOUTEndpoint = NULL;
    1460:	df cf       	rjmp	.-66     	; 0x1420 <RNDIS_Host_ConfigurePipes+0x52>
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	6d c0       	rjmp	.+218    	; 0x1540 <RNDIS_Host_ConfigurePipes+0x172>
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
											  DCOMP_RNDIS_Host_NextRNDISDataInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	59 e0       	ldi	r21, 0x09	; 9
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    146a:	be 01       	movw	r22, r28
    146c:	6d 5f       	subi	r22, 0xFD	; 253
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	bb dd       	rcall	.-1162   	; 0xfec <USB_GetNextDescriptorComp>
    1476:	81 11       	cpse	r24, r1
    1478:	f4 cf       	rjmp	.-24     	; 0x1462 <RNDIS_Host_ConfigurePipes+0x94>
    147a:	8b 80       	ldd	r8, Y+3	; 0x03
    147c:	9c 80       	ldd	r9, Y+4	; 0x04
    147e:	0e c0       	rjmp	.+28     	; 0x149c <RNDIS_Host_ConfigurePipes+0xce>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1480:	eb 81       	ldd	r30, Y+3	; 0x03
    1482:	fc 81       	ldd	r31, Y+4	; 0x04
    1484:	82 81       	ldd	r24, Z+2	; 0x02
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1486:	87 ff       	sbrs	r24, 7
    1488:	06 c0       	rjmp	.+12     	; 0x1496 <RNDIS_Host_ConfigurePipes+0xc8>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    148a:	83 81       	ldd	r24, Z+3	; 0x03
    148c:	83 70       	andi	r24, 0x03	; 3
    148e:	83 30       	cpi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1490:	21 f4       	brne	.+8      	; 0x149a <RNDIS_Host_ConfigurePipes+0xcc>
    1492:	7f 01       	movw	r14, r30
    1494:	03 c0       	rjmp	.+6      	; 0x149c <RNDIS_Host_ConfigurePipes+0xce>
    1496:	6f 01       	movw	r12, r30
			  NotificationEndpoint = EndpointData;
    1498:	01 c0       	rjmp	.+2      	; 0x149c <RNDIS_Host_ConfigurePipes+0xce>
    149a:	5f 01       	movw	r10, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    149c:	a1 14       	cp	r10, r1
    149e:	b1 04       	cpc	r11, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <RNDIS_Host_ConfigurePipes+0xd6>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    14a2:	be cf       	rjmp	.-132    	; 0x1420 <RNDIS_Host_ConfigurePipes+0x52>
    14a4:	c1 14       	cp	r12, r1
    14a6:	d1 04       	cpc	r13, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <RNDIS_Host_ConfigurePipes+0xde>
    14aa:	ba cf       	rjmp	.-140    	; 0x1420 <RNDIS_Host_ConfigurePipes+0x52>
    14ac:	e1 14       	cp	r14, r1
    14ae:	f1 04       	cpc	r15, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <RNDIS_Host_ConfigurePipes+0xe6>
    14b2:	b6 cf       	rjmp	.-148    	; 0x1420 <RNDIS_Host_ConfigurePipes+0x52>
    14b4:	d5 01       	movw	r26, r10
    14b6:	14 96       	adiw	r26, 0x04	; 4
    14b8:	8d 91       	ld	r24, X+
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	RNDISInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    14ba:	9c 91       	ld	r25, X
    14bc:	15 97       	sbiw	r26, 0x05	; 5
    14be:	f8 01       	movw	r30, r16
    14c0:	92 83       	std	Z+2, r25	; 0x02
    14c2:	81 83       	std	Z+1, r24	; 0x01
    14c4:	12 96       	adiw	r26, 0x02	; 2
    14c6:	8c 91       	ld	r24, X
    14c8:	83 83       	std	Z+3, r24	; 0x03
	RNDISInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    14ca:	22 e0       	ldi	r18, 0x02	; 2
    14cc:	24 83       	std	Z+4, r18	; 0x04
    14ce:	d6 01       	movw	r26, r12
	RNDISInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    14d0:	14 96       	adiw	r26, 0x04	; 4
    14d2:	8d 91       	ld	r24, X+

	RNDISInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    14d4:	9c 91       	ld	r25, X
    14d6:	15 97       	sbiw	r26, 0x05	; 5
    14d8:	90 87       	std	Z+8, r25	; 0x08
    14da:	87 83       	std	Z+7, r24	; 0x07
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	8c 91       	ld	r24, X
    14e0:	81 87       	std	Z+9, r24	; 0x09
	RNDISInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    14e2:	22 87       	std	Z+10, r18	; 0x0a
    14e4:	f7 01       	movw	r30, r14
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
	RNDISInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    14e8:	95 81       	ldd	r25, Z+5	; 0x05

	RNDISInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    14ea:	d8 01       	movw	r26, r16
    14ec:	1e 96       	adiw	r26, 0x0e	; 14
    14ee:	9c 93       	st	X, r25
    14f0:	8e 93       	st	-X, r24
    14f2:	1d 97       	sbiw	r26, 0x0d	; 13
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	1f 96       	adiw	r26, 0x0f	; 15
    14f8:	8c 93       	st	X, r24
	RNDISInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    14fa:	1f 97       	sbiw	r26, 0x0f	; 15
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	50 96       	adiw	r26, 0x10	; 16
    1500:	8c 93       	st	X, r24
	RNDISInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	c8 01       	movw	r24, r16
    1506:	5b db       	rcall	.-2378   	; 0xbbe <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataINPipe, 1)))
    1508:	81 11       	cpse	r24, r1
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <RNDIS_Host_ConfigurePipes+0x142>
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	18 c0       	rjmp	.+48     	; 0x1540 <RNDIS_Host_ConfigurePipes+0x172>
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	c8 01       	movw	r24, r16
	  return RNDIS_ENUMERROR_PipeConfigurationFailed;
    1514:	06 96       	adiw	r24, 0x06	; 6
    1516:	53 db       	rcall	.-2394   	; 0xbbe <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataOUTPipe, 1)))
    1518:	88 23       	and	r24, r24
    151a:	c1 f3       	breq	.-16     	; 0x150c <RNDIS_Host_ConfigurePipes+0x13e>
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	c8 01       	movw	r24, r16
    1520:	0c 96       	adiw	r24, 0x0c	; 12
    1522:	4d db       	rcall	.-2406   	; 0xbbe <Pipe_ConfigurePipeTable>
    1524:	88 23       	and	r24, r24
	  return RNDIS_ENUMERROR_PipeConfigurationFailed;

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.NotificationPipe, 1)))
    1526:	91 f3       	breq	.-28     	; 0x150c <RNDIS_Host_ConfigurePipes+0x13e>
    1528:	f4 01       	movw	r30, r8
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	d8 01       	movw	r26, r16
    152e:	57 96       	adiw	r26, 0x17	; 23
    1530:	8c 93       	st	X, r24
    1532:	57 97       	sbiw	r26, 0x17	; 23
	  return RNDIS_ENUMERROR_PipeConfigurationFailed;

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	56 96       	adiw	r26, 0x16	; 22
    1538:	8c 93       	st	X, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <RNDIS_Host_ConfigurePipes+0x172>
    153e:	81 e0       	ldi	r24, 0x01	; 1
	RNDISInterfaceInfo->State.IsActive = true;
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0

	return RNDIS_ENUMERROR_NoError;
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;
    154a:	cf 91       	pop	r28

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
	RNDISInterfaceInfo->State.IsActive = true;

	return RNDIS_ENUMERROR_NoError;
}
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	af 90       	pop	r10
    155c:	9f 90       	pop	r9
    155e:	8f 90       	pop	r8
    1560:	08 95       	ret

00001562 <RNDIS_Host_InitializeDevice>:
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    156e:	cc 54       	subi	r28, 0x4C	; 76
    1570:	d1 09       	sbc	r29, r1
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	8d ab       	std	Y+53, r24	; 0x35
    1588:	9e ab       	std	Y+54, r25	; 0x36
    158a:	af ab       	std	Y+55, r26	; 0x37
    158c:	b8 af       	std	Y+56, r27	; 0x38
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    158e:	88 e1       	ldi	r24, 0x18	; 24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e0       	ldi	r26, 0x00	; 0
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	89 af       	std	Y+57, r24	; 0x39
    1598:	9a af       	std	Y+58, r25	; 0x3a
    159a:	ab af       	std	Y+59, r26	; 0x3b
    159c:	bc af       	std	Y+60, r27	; 0x3c
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    159e:	f8 01       	movw	r30, r16
    15a0:	44 8d       	ldd	r20, Z+28	; 0x1c
    15a2:	55 8d       	ldd	r21, Z+29	; 0x1d
    15a4:	66 8d       	ldd	r22, Z+30	; 0x1e
    15a6:	77 8d       	ldd	r23, Z+31	; 0x1f
    15a8:	db 01       	movw	r26, r22
    15aa:	ca 01       	movw	r24, r20
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	a1 1d       	adc	r26, r1
    15b0:	b1 1d       	adc	r27, r1
    15b2:	84 8f       	std	Z+28, r24	; 0x1c
    15b4:	95 8f       	std	Z+29, r25	; 0x1d
    15b6:	a6 8f       	std	Z+30, r26	; 0x1e
    15b8:	b7 8f       	std	Z+31, r27	; 0x1f
    15ba:	21 96       	adiw	r28, 0x01	; 1
    15bc:	4c af       	std	Y+60, r20	; 0x3c
    15be:	5d af       	std	Y+61, r21	; 0x3d
    15c0:	6e af       	std	Y+62, r22	; 0x3e
    15c2:	7f af       	std	Y+63, r23	; 0x3f
    15c4:	21 97       	sbiw	r28, 0x01	; 1

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	25 96       	adiw	r28, 0x05	; 5
    15d0:	8c af       	std	Y+60, r24	; 0x3c
    15d2:	9d af       	std	Y+61, r25	; 0x3d
    15d4:	ae af       	std	Y+62, r26	; 0x3e
    15d6:	bf af       	std	Y+63, r27	; 0x3f
    15d8:	25 97       	sbiw	r28, 0x05	; 5
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    15da:	29 96       	adiw	r28, 0x09	; 9
    15dc:	1c ae       	std	Y+60, r1	; 0x3c
    15de:	1d ae       	std	Y+61, r1	; 0x3d
    15e0:	1e ae       	std	Y+62, r1	; 0x3e
    15e2:	1f ae       	std	Y+63, r1	; 0x3f
    15e4:	29 97       	sbiw	r28, 0x09	; 9
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    15e6:	82 89       	ldd	r24, Z+18	; 0x12
    15e8:	93 89       	ldd	r25, Z+19	; 0x13
    15ea:	a4 89       	ldd	r26, Z+20	; 0x14
    15ec:	b5 89       	ldd	r27, Z+21	; 0x15
    15ee:	2d 96       	adiw	r28, 0x0d	; 13
    15f0:	8c af       	std	Y+60, r24	; 0x3c
    15f2:	9d af       	std	Y+61, r25	; 0x3d
    15f4:	ae af       	std	Y+62, r26	; 0x3e
    15f6:	bf af       	std	Y+63, r27	; 0x3f
    15f8:	2d 97       	sbiw	r28, 0x0d	; 13

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    15fa:	48 e1       	ldi	r20, 0x18	; 24
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	be 01       	movw	r22, r28
    1600:	6b 5c       	subi	r22, 0xCB	; 203
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	c8 01       	movw	r24, r16
    1606:	b2 de       	rcall	.-668    	; 0x136c <RNDIS_SendEncapsulatedCommand>
    1608:	81 11       	cpse	r24, r1
    160a:	1d c0       	rjmp	.+58     	; 0x1646 <RNDIS_Host_InitializeDevice+0xe4>
    160c:	44 e3       	ldi	r20, 0x34	; 52
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	be 01       	movw	r22, r28
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	c8 01       	movw	r24, r16
    1618:	c1 de       	rcall	.-638    	; 0x139c <RNDIS_GetEncapsulatedResponse>
    161a:	81 11       	cpse	r24, r1
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <RNDIS_Host_InitializeDevice+0xe4>
    161e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1620:	9e 85       	ldd	r25, Y+14	; 0x0e
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1622:	af 85       	ldd	r26, Y+15	; 0x0f
    1624:	b8 89       	ldd	r27, Y+16	; 0x10
    1626:	89 2b       	or	r24, r25
    1628:	8a 2b       	or	r24, r26
    162a:	8b 2b       	or	r24, r27
    162c:	59 f4       	brne	.+22     	; 0x1644 <RNDIS_Host_InitializeDevice+0xe2>
    162e:	8d a1       	ldd	r24, Y+37	; 0x25
    1630:	9e a1       	ldd	r25, Y+38	; 0x26
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    1632:	af a1       	ldd	r26, Y+39	; 0x27
    1634:	b8 a5       	ldd	r27, Y+40	; 0x28
    1636:	f8 01       	movw	r30, r16
    1638:	80 8f       	std	Z+24, r24	; 0x18
    163a:	91 8f       	std	Z+25, r25	; 0x19
    163c:	a2 8f       	std	Z+26, r26	; 0x1a
    163e:	b3 8f       	std	Z+27, r27	; 0x1b
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <RNDIS_Host_InitializeDevice+0xe4>

	return HOST_SENDCONTROL_Successful;
    1644:	80 e8       	ldi	r24, 0x80	; 128
    1646:	c4 5b       	subi	r28, 0xB4	; 180
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    1648:	df 4f       	sbci	r29, 0xFF	; 255

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);

	return HOST_SENDCONTROL_Successful;
}
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <RNDIS_Host_SetRNDISProperty>:
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	60 97       	sbiw	r28, 0x10	; 16
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	6c 01       	movw	r12, r24

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    1690:	8d b6       	in	r8, 0x3d	; 61
    1692:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    1694:	58 01       	movw	r10, r16
    1696:	8c e1       	ldi	r24, 0x1C	; 28
    1698:	a8 0e       	add	r10, r24
    169a:	b1 1c       	adc	r11, r1
    169c:	ed b7       	in	r30, 0x3d	; 61
    169e:	fe b7       	in	r31, 0x3e	; 62
    16a0:	ea 19       	sub	r30, r10
    16a2:	fb 09       	sbc	r31, r11
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	fe bf       	out	0x3e, r31	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	ed bf       	out	0x3d, r30	; 61
    16ae:	8d b7       	in	r24, 0x3d	; 61
    16b0:	9e b7       	in	r25, 0x3e	; 62
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	7c 01       	movw	r14, r24

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    16b6:	85 e0       	ldi	r24, 0x05	; 5
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	92 83       	std	Z+2, r25	; 0x02
    16c2:	a3 83       	std	Z+3, r26	; 0x03
    16c4:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    16c6:	c5 01       	movw	r24, r10
    16c8:	a0 e0       	ldi	r26, 0x00	; 0
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	f7 01       	movw	r30, r14
    16ce:	84 83       	std	Z+4, r24	; 0x04
    16d0:	95 83       	std	Z+5, r25	; 0x05
    16d2:	a6 83       	std	Z+6, r26	; 0x06
    16d4:	b7 83       	std	Z+7, r27	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    16d6:	f6 01       	movw	r30, r12
    16d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    16da:	95 8d       	ldd	r25, Z+29	; 0x1d
    16dc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    16de:	b7 8d       	ldd	r27, Z+31	; 0x1f
    16e0:	2c 01       	movw	r4, r24
    16e2:	3d 01       	movw	r6, r26
    16e4:	ff ef       	ldi	r31, 0xFF	; 255
    16e6:	4f 1a       	sub	r4, r31
    16e8:	5f 0a       	sbc	r5, r31
    16ea:	6f 0a       	sbc	r6, r31
    16ec:	7f 0a       	sbc	r7, r31
    16ee:	f6 01       	movw	r30, r12
    16f0:	44 8e       	std	Z+28, r4	; 0x1c
    16f2:	55 8e       	std	Z+29, r5	; 0x1d
    16f4:	66 8e       	std	Z+30, r6	; 0x1e
    16f6:	77 8e       	std	Z+31, r7	; 0x1f
    16f8:	f7 01       	movw	r30, r14
    16fa:	80 87       	std	Z+8, r24	; 0x08
    16fc:	91 87       	std	Z+9, r25	; 0x09
    16fe:	a2 87       	std	Z+10, r26	; 0x0a
    1700:	b3 87       	std	Z+11, r27	; 0x0b

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    1702:	44 87       	std	Z+12, r20	; 0x0c
    1704:	55 87       	std	Z+13, r21	; 0x0d
    1706:	66 87       	std	Z+14, r22	; 0x0e
    1708:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    170a:	c8 01       	movw	r24, r16
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	80 8b       	std	Z+16, r24	; 0x10
    1712:	91 8b       	std	Z+17, r25	; 0x11
    1714:	a2 8b       	std	Z+18, r26	; 0x12
    1716:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    1718:	84 e1       	ldi	r24, 0x14	; 20
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	84 8b       	std	Z+20, r24	; 0x14
    1722:	95 8b       	std	Z+21, r25	; 0x15
    1724:	a6 8b       	std	Z+22, r26	; 0x16
    1726:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1728:	10 8e       	std	Z+24, r1	; 0x18
    172a:	11 8e       	std	Z+25, r1	; 0x19
    172c:	12 8e       	std	Z+26, r1	; 0x1a
    172e:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    1730:	8d b7       	in	r24, 0x3d	; 61
    1732:	9e b7       	in	r25, 0x3e	; 62
    1734:	4d 96       	adiw	r24, 0x1d	; 29
    1736:	a8 01       	movw	r20, r16
    1738:	b9 01       	movw	r22, r18
    173a:	9d d1       	rcall	.+826    	; 0x1a76 <memcpy>
    173c:	a5 01       	movw	r20, r10

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    173e:	b7 01       	movw	r22, r14
    1740:	c6 01       	movw	r24, r12
    1742:	14 de       	rcall	.-984    	; 0x136c <RNDIS_SendEncapsulatedCommand>
    1744:	81 11       	cpse	r24, r1
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <RNDIS_Host_SetRNDISProperty+0x112>
    1748:	40 e1       	ldi	r20, 0x10	; 16
    174a:	50 e0       	ldi	r21, 0x00	; 0
	                                               (sizeof(RNDIS_Set_Message_t) + Length))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    174c:	be 01       	movw	r22, r28
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	c6 01       	movw	r24, r12
    1754:	23 de       	rcall	.-954    	; 0x139c <RNDIS_GetEncapsulatedResponse>
    1756:	81 11       	cpse	r24, r1
    1758:	0b c0       	rjmp	.+22     	; 0x1770 <RNDIS_Host_SetRNDISProperty+0x112>
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	af 85       	ldd	r26, Y+15	; 0x0f
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1760:	b8 89       	ldd	r27, Y+16	; 0x10
    1762:	89 2b       	or	r24, r25
    1764:	8a 2b       	or	r24, r26
    1766:	8b 2b       	or	r24, r27
    1768:	11 f0       	breq	.+4      	; 0x176e <RNDIS_Host_SetRNDISProperty+0x110>
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <RNDIS_Host_SetRNDISProperty+0x112>
    176e:	80 e0       	ldi	r24, 0x00	; 0
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli

	return HOST_SENDCONTROL_Successful;
    1774:	9e be       	out	0x3e, r9	; 62
}
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	8d be       	out	0x3d, r8	; 61
    177a:	60 96       	adiw	r28, 0x10	; 16
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	7f 90       	pop	r7
    17a0:	6f 90       	pop	r6
    17a2:	5f 90       	pop	r5
    17a4:	4f 90       	pop	r4
    17a6:	08 95       	ret

000017a8 <RNDIS_Host_QueryRNDISProperty>:
    17a8:	2f 92       	push	r2
    17aa:	3f 92       	push	r3
    17ac:	4f 92       	push	r4

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    17ae:	5f 92       	push	r5
    17b0:	6f 92       	push	r6
    17b2:	7f 92       	push	r7
    17b4:	8f 92       	push	r8
    17b6:	9f 92       	push	r9
    17b8:	af 92       	push	r10
    17ba:	bf 92       	push	r11
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	6c 97       	sbiw	r28, 0x1c	; 28
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	7c 01       	movw	r14, r24
    17de:	59 01       	movw	r10, r18
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    17e0:	8d b6       	in	r8, 0x3d	; 61
    17e2:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    17e4:	38 01       	movw	r6, r16
    17e6:	28 e1       	ldi	r18, 0x18	; 24
    17e8:	62 0e       	add	r6, r18
    17ea:	71 1c       	adc	r7, r1
    17ec:	8d b7       	in	r24, 0x3d	; 61
    17ee:	9e b7       	in	r25, 0x3e	; 62
    17f0:	86 19       	sub	r24, r6
    17f2:	97 09       	sbc	r25, r7
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	9e bf       	out	0x3e, r25	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	8d bf       	out	0x3d, r24	; 61
    17fe:	ed b7       	in	r30, 0x3d	; 61
    1800:	fe b7       	in	r31, 0x3e	; 62
    1802:	31 96       	adiw	r30, 0x01	; 1
    1804:	6f 01       	movw	r12, r30

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	ab 83       	std	Y+3, r26	; 0x03
    1814:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    1816:	8c e1       	ldi	r24, 0x1C	; 28
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e0       	ldi	r26, 0x00	; 0
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	af 83       	std	Y+7, r26	; 0x07
    1824:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1826:	f7 01       	movw	r30, r14
    1828:	84 8d       	ldd	r24, Z+28	; 0x1c
    182a:	95 8d       	ldd	r25, Z+29	; 0x1d
    182c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    182e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1830:	1c 01       	movw	r2, r24
    1832:	2d 01       	movw	r4, r26
    1834:	ff ef       	ldi	r31, 0xFF	; 255
    1836:	2f 1a       	sub	r2, r31
    1838:	3f 0a       	sbc	r3, r31
    183a:	4f 0a       	sbc	r4, r31
    183c:	5f 0a       	sbc	r5, r31
    183e:	f7 01       	movw	r30, r14
    1840:	24 8e       	std	Z+28, r2	; 0x1c
    1842:	35 8e       	std	Z+29, r3	; 0x1d
    1844:	46 8e       	std	Z+30, r4	; 0x1e
    1846:	57 8e       	std	Z+31, r5	; 0x1f
    1848:	89 87       	std	Y+9, r24	; 0x09
    184a:	9a 87       	std	Y+10, r25	; 0x0a
    184c:	ab 87       	std	Y+11, r26	; 0x0b
    184e:	bc 87       	std	Y+12, r27	; 0x0c

	QueryMessage.Oid            = cpu_to_le32(Oid);
    1850:	4d 87       	std	Y+13, r20	; 0x0d
    1852:	5e 87       	std	Y+14, r21	; 0x0e
    1854:	6f 87       	std	Y+15, r22	; 0x0f
    1856:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    1858:	19 8a       	std	Y+17, r1	; 0x11
    185a:	1a 8a       	std	Y+18, r1	; 0x12
    185c:	1b 8a       	std	Y+19, r1	; 0x13
    185e:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    1860:	1d 8a       	std	Y+21, r1	; 0x15
    1862:	1e 8a       	std	Y+22, r1	; 0x16
    1864:	1f 8a       	std	Y+23, r1	; 0x17
    1866:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1868:	19 8e       	std	Y+25, r1	; 0x19
    186a:	1a 8e       	std	Y+26, r1	; 0x1a
    186c:	1b 8e       	std	Y+27, r1	; 0x1b
    186e:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    1870:	4c e1       	ldi	r20, 0x1C	; 28
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	c7 01       	movw	r24, r14
    187c:	77 dd       	rcall	.-1298   	; 0x136c <RNDIS_SendEncapsulatedCommand>
    187e:	81 11       	cpse	r24, r1
    1880:	18 c0       	rjmp	.+48     	; 0x18b2 <RNDIS_Host_QueryRNDISProperty+0x10a>
    1882:	a3 01       	movw	r20, r6
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    1884:	b6 01       	movw	r22, r12
    1886:	c7 01       	movw	r24, r14
    1888:	89 dd       	rcall	.-1262   	; 0x139c <RNDIS_GetEncapsulatedResponse>
    188a:	81 11       	cpse	r24, r1
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <RNDIS_Host_QueryRNDISProperty+0x10a>
    188e:	f6 01       	movw	r30, r12
    1890:	84 85       	ldd	r24, Z+12	; 0x0c
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1892:	95 85       	ldd	r25, Z+13	; 0x0d
    1894:	a6 85       	ldd	r26, Z+14	; 0x0e
    1896:	b7 85       	ldd	r27, Z+15	; 0x0f
    1898:	89 2b       	or	r24, r25
    189a:	8a 2b       	or	r24, r26
    189c:	8b 2b       	or	r24, r27
    189e:	41 f4       	brne	.+16     	; 0x18b0 <RNDIS_Host_QueryRNDISProperty+0x108>
    18a0:	b6 01       	movw	r22, r12
    18a2:	68 5e       	subi	r22, 0xE8	; 232
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	a8 01       	movw	r20, r16
    18a8:	c5 01       	movw	r24, r10
    18aa:	e5 d0       	rcall	.+458    	; 0x1a76 <memcpy>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <RNDIS_Host_QueryRNDISProperty+0x10a>
    18b0:	80 e8       	ldi	r24, 0x80	; 128

	return HOST_SENDCONTROL_Successful;
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    18b6:	9e be       	out	0x3e, r9	; 62

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	8d be       	out	0x3d, r8	; 61
    18bc:	6c 96       	adiw	r28, 0x1c	; 28
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	bf 90       	pop	r11
    18da:	af 90       	pop	r10
    18dc:	9f 90       	pop	r9
    18de:	8f 90       	pop	r8
    18e0:	7f 90       	pop	r7
    18e2:	6f 90       	pop	r6
    18e4:	5f 90       	pop	r5
    18e6:	4f 90       	pop	r4
    18e8:	3f 90       	pop	r3
    18ea:	2f 90       	pop	r2
    18ec:	08 95       	ret

000018ee <RNDIS_Host_IsPacketReceived>:
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 91 47 05 	lds	r24, 0x0547

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    18f4:	8b 30       	cpi	r24, 0x0B	; 11
    18f6:	a9 f4       	brne	.+42     	; 0x1922 <RNDIS_Host_IsPacketReceived+0x34>
    18f8:	86 89       	ldd	r24, Z+22	; 0x16
    18fa:	88 23       	and	r24, r24
    18fc:	99 f0       	breq	.+38     	; 0x1924 <RNDIS_Host_IsPacketReceived+0x36>
    18fe:	80 81       	ld	r24, Z
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1906:	80 91 a9 00 	lds	r24, 0x00A9
    190a:	8f 7b       	andi	r24, 0xBF	; 191
    190c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1910:	80 91 a6 00 	lds	r24, 0x00A6
    1914:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1916:	90 91 a9 00 	lds	r25, 0x00A9
    191a:	90 64       	ori	r25, 0x40	; 64
    191c:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    1920:	08 95       	ret
bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return false;
    1922:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
}
    1924:	08 95       	ret

00001926 <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	ac 97       	sbiw	r28, 0x2c	; 44
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	fc 01       	movw	r30, r24
    1944:	7b 01       	movw	r14, r22
    1946:	8a 01       	movw	r16, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    1948:	80 91 47 05 	lds	r24, 0x0547
    194c:	8b 30       	cpi	r24, 0x0B	; 11
    194e:	09 f0       	breq	.+2      	; 0x1952 <RNDIS_Host_ReadPacket+0x2c>
    1950:	4b c0       	rjmp	.+150    	; 0x19e8 <RNDIS_Host_ReadPacket+0xc2>
    1952:	86 89       	ldd	r24, Z+22	; 0x16
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <RNDIS_Host_ReadPacket+0x34>
    1958:	47 c0       	rjmp	.+142    	; 0x19e8 <RNDIS_Host_ReadPacket+0xc2>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    195a:	80 81       	ld	r24, Z
    195c:	8f 70       	andi	r24, 0x0F	; 15
    195e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1962:	80 91 a9 00 	lds	r24, 0x00A9
    1966:	8f 7b       	andi	r24, 0xBF	; 191
    1968:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    196c:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    1970:	85 fd       	sbrc	r24, 5
    1972:	0d c0       	rjmp	.+26     	; 0x198e <RNDIS_Host_ReadPacket+0x68>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1974:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    1978:	80 ff       	sbrs	r24, 0
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <RNDIS_Host_ReadPacket+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    197c:	80 91 a6 00 	lds	r24, 0x00A6
    1980:	8e 77       	andi	r24, 0x7E	; 126
    1982:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    1986:	f8 01       	movw	r30, r16
    1988:	11 82       	std	Z+1, r1	; 0x01
    198a:	10 82       	st	Z, r1
    198c:	26 c0       	rjmp	.+76     	; 0x19da <RNDIS_Host_ReadPacket+0xb4>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	6c e2       	ldi	r22, 0x2C	; 44
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	5c d8       	rcall	.-3912   	; 0xa54 <Pipe_Read_Stream_LE>
    199c:	81 11       	cpse	r24, r1
    199e:	25 c0       	rjmp	.+74     	; 0x19ea <RNDIS_Host_ReadPacket+0xc4>
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	89 85       	ldd	r24, Y+9	; 0x09

	Pipe_Discard_Stream(le32_to_cpu(DeviceMessage.DataOffset) -
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	84 97       	sbiw	r24, 0x24	; 36
    19b4:	0c d8       	rcall	.-4072   	; 0x9ce <Pipe_Discard_Stream>
    19b6:	f8 01       	movw	r30, r16
    19b8:	60 81       	ld	r22, Z
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	c7 01       	movw	r24, r14
    19c2:	48 d8       	rcall	.-3952   	; 0xa54 <Pipe_Read_Stream_LE>
    19c4:	80 91 f6 00 	lds	r24, 0x00F6
    19c8:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19cc:	89 2b       	or	r24, r25
    19ce:	29 f4       	brne	.+10     	; 0x19da <RNDIS_Host_ReadPacket+0xb4>
    19d0:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_BytesInPipe()))
    19d4:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19d6:	80 93 a6 00 	sts	0x00A6, r24
    19da:	80 91 a9 00 	lds	r24, 0x00A9
    19de:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19e0:	80 93 a9 00 	sts	0x00A9, r24
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <RNDIS_Host_ReadPacket+0xc4>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    19ea:	ac 96       	adiw	r28, 0x2c	; 44
    19ec:	0f b6       	in	r0, 0x3f	; 63
                              uint16_t* const PacketLength)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    19ee:	f8 94       	cli
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	08 95       	ret

00001a04 <Serial_putchar>:
    1a04:	90 91 c8 00 	lds	r25, 0x00C8
    1a08:	95 ff       	sbrs	r25, 5
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1a0a:	fc cf       	rjmp	.-8      	; 0x1a04 <Serial_putchar>
				UDR1 = DataByte;
    1a0c:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	08 95       	ret

00001a16 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a16:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a1a:	87 ff       	sbrs	r24, 7
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <Serial_getchar+0x18>
    1a1e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1a22:	87 ff       	sbrs	r24, 7
    1a24:	07 c0       	rjmp	.+14     	; 0x1a34 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1a26:	80 91 ce 00 	lds	r24, 0x00CE
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	08 95       	ret
	  return _FDEV_EOF;
    1a2e:	8e ef       	ldi	r24, 0xFE	; 254
    1a30:	9f ef       	ldi	r25, 0xFF	; 255
    1a32:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1a38:	08 95       	ret

00001a3a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1a3a:	fc 01       	movw	r30, r24
	if (!(Stream))
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	59 f4       	brne	.+22     	; 0x1a56 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1a40:	88 e4       	ldi	r24, 0x48	; 72
    1a42:	95 e0       	ldi	r25, 0x05	; 5
    1a44:	90 93 57 05 	sts	0x0557, r25
    1a48:	80 93 56 05 	sts	0x0556, r24
		stdout = Stream;
    1a4c:	90 93 59 05 	sts	0x0559, r25
    1a50:	80 93 58 05 	sts	0x0558, r24

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1a54:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1a56:	8e e0       	ldi	r24, 0x0E	; 14
    1a58:	df 01       	movw	r26, r30
    1a5a:	1d 92       	st	X+, r1
    1a5c:	8a 95       	dec	r24
    1a5e:	e9 f7       	brne	.-6      	; 0x1a5a <Serial_CreateStream+0x20>
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	83 83       	std	Z+3, r24	; 0x03
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	9d e0       	ldi	r25, 0x0D	; 13
    1a68:	91 87       	std	Z+9, r25	; 0x09
    1a6a:	80 87       	std	Z+8, r24	; 0x08
    1a6c:	8b e0       	ldi	r24, 0x0B	; 11
    1a6e:	9d e0       	ldi	r25, 0x0D	; 13
    1a70:	93 87       	std	Z+11, r25	; 0x0b
    1a72:	82 87       	std	Z+10, r24	; 0x0a
    1a74:	08 95       	ret

00001a76 <memcpy>:
    1a76:	fb 01       	movw	r30, r22
    1a78:	dc 01       	movw	r26, r24
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <memcpy+0xa>
    1a7c:	01 90       	ld	r0, Z+
    1a7e:	0d 92       	st	X+, r0
    1a80:	41 50       	subi	r20, 0x01	; 1
    1a82:	50 40       	sbci	r21, 0x00	; 0
    1a84:	d8 f7       	brcc	.-10     	; 0x1a7c <memcpy+0x6>
    1a86:	08 95       	ret

00001a88 <printf>:
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	fe 01       	movw	r30, r28
    1a92:	35 96       	adiw	r30, 0x05	; 5
    1a94:	61 91       	ld	r22, Z+
    1a96:	71 91       	ld	r23, Z+
    1a98:	af 01       	movw	r20, r30
    1a9a:	80 91 58 05 	lds	r24, 0x0558
    1a9e:	90 91 59 05 	lds	r25, 0x0559
    1aa2:	55 d0       	rcall	.+170    	; 0x1b4e <vfprintf>
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <printf_P>:
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	37 96       	adiw	r30, 0x07	; 7
    1aba:	61 91       	ld	r22, Z+
    1abc:	71 91       	ld	r23, Z+
    1abe:	08 e5       	ldi	r16, 0x58	; 88
    1ac0:	15 e0       	ldi	r17, 0x05	; 5
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	8d 91       	ld	r24, X+
    1ac6:	9c 91       	ld	r25, X
    1ac8:	dc 01       	movw	r26, r24
    1aca:	13 96       	adiw	r26, 0x03	; 3
    1acc:	2c 91       	ld	r18, X
    1ace:	13 97       	sbiw	r26, 0x03	; 3
    1ad0:	28 60       	ori	r18, 0x08	; 8
    1ad2:	13 96       	adiw	r26, 0x03	; 3
    1ad4:	2c 93       	st	X, r18
    1ad6:	af 01       	movw	r20, r30
    1ad8:	3a d0       	rcall	.+116    	; 0x1b4e <vfprintf>
    1ada:	d8 01       	movw	r26, r16
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	23 81       	ldd	r18, Z+3	; 0x03
    1ae2:	27 7f       	andi	r18, 0xF7	; 247
    1ae4:	23 83       	std	Z+3, r18	; 0x03
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <puts_P>:
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	ec 01       	movw	r28, r24
    1afa:	e0 91 58 05 	lds	r30, 0x0558
    1afe:	f0 91 59 05 	lds	r31, 0x0559
    1b02:	83 81       	ldd	r24, Z+3	; 0x03
    1b04:	81 ff       	sbrs	r24, 1
    1b06:	1c c0       	rjmp	.+56     	; 0x1b40 <puts_P+0x50>
    1b08:	00 e0       	ldi	r16, 0x00	; 0
    1b0a:	10 e0       	ldi	r17, 0x00	; 0
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	84 91       	lpm	r24, Z
    1b10:	60 91 58 05 	lds	r22, 0x0558
    1b14:	70 91 59 05 	lds	r23, 0x0559
    1b18:	db 01       	movw	r26, r22
    1b1a:	18 96       	adiw	r26, 0x08	; 8
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	19 97       	sbiw	r26, 0x09	; 9
    1b22:	88 23       	and	r24, r24
    1b24:	39 f0       	breq	.+14     	; 0x1b34 <puts_P+0x44>
    1b26:	09 95       	icall
    1b28:	89 2b       	or	r24, r25
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <puts_P+0x40>
    1b2c:	0f ef       	ldi	r16, 0xFF	; 255
    1b2e:	1f ef       	ldi	r17, 0xFF	; 255
    1b30:	21 96       	adiw	r28, 0x01	; 1
    1b32:	ec cf       	rjmp	.-40     	; 0x1b0c <puts_P+0x1c>
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	09 95       	icall
    1b38:	89 2b       	or	r24, r25
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <puts_P+0x50>
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <puts_P+0x54>
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <vfprintf>:
    1b4e:	2f 92       	push	r2
    1b50:	3f 92       	push	r3
    1b52:	4f 92       	push	r4
    1b54:	5f 92       	push	r5
    1b56:	6f 92       	push	r6
    1b58:	7f 92       	push	r7
    1b5a:	8f 92       	push	r8
    1b5c:	9f 92       	push	r9
    1b5e:	af 92       	push	r10
    1b60:	bf 92       	push	r11
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	2c 97       	sbiw	r28, 0x0c	; 12
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	7c 01       	movw	r14, r24
    1b84:	6b 01       	movw	r12, r22
    1b86:	8a 01       	movw	r16, r20
    1b88:	fc 01       	movw	r30, r24
    1b8a:	17 82       	std	Z+7, r1	; 0x07
    1b8c:	16 82       	std	Z+6, r1	; 0x06
    1b8e:	83 81       	ldd	r24, Z+3	; 0x03
    1b90:	81 ff       	sbrs	r24, 1
    1b92:	b0 c1       	rjmp	.+864    	; 0x1ef4 <vfprintf+0x3a6>
    1b94:	ce 01       	movw	r24, r28
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	4c 01       	movw	r8, r24
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	93 fd       	sbrc	r25, 3
    1ba2:	85 91       	lpm	r24, Z+
    1ba4:	93 ff       	sbrs	r25, 3
    1ba6:	81 91       	ld	r24, Z+
    1ba8:	6f 01       	movw	r12, r30
    1baa:	88 23       	and	r24, r24
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <vfprintf+0x62>
    1bae:	9e c1       	rjmp	.+828    	; 0x1eec <vfprintf+0x39e>
    1bb0:	85 32       	cpi	r24, 0x25	; 37
    1bb2:	39 f4       	brne	.+14     	; 0x1bc2 <vfprintf+0x74>
    1bb4:	93 fd       	sbrc	r25, 3
    1bb6:	85 91       	lpm	r24, Z+
    1bb8:	93 ff       	sbrs	r25, 3
    1bba:	81 91       	ld	r24, Z+
    1bbc:	6f 01       	movw	r12, r30
    1bbe:	85 32       	cpi	r24, 0x25	; 37
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <vfprintf+0x7c>
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	c7 d1       	rcall	.+910    	; 0x1f56 <fputc>
    1bc8:	e8 cf       	rjmp	.-48     	; 0x1b9a <vfprintf+0x4c>
    1bca:	51 2c       	mov	r5, r1
    1bcc:	31 2c       	mov	r3, r1
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	20 32       	cpi	r18, 0x20	; 32
    1bd2:	a0 f4       	brcc	.+40     	; 0x1bfc <vfprintf+0xae>
    1bd4:	8b 32       	cpi	r24, 0x2B	; 43
    1bd6:	69 f0       	breq	.+26     	; 0x1bf2 <vfprintf+0xa4>
    1bd8:	30 f4       	brcc	.+12     	; 0x1be6 <vfprintf+0x98>
    1bda:	80 32       	cpi	r24, 0x20	; 32
    1bdc:	59 f0       	breq	.+22     	; 0x1bf4 <vfprintf+0xa6>
    1bde:	83 32       	cpi	r24, 0x23	; 35
    1be0:	69 f4       	brne	.+26     	; 0x1bfc <vfprintf+0xae>
    1be2:	20 61       	ori	r18, 0x10	; 16
    1be4:	2c c0       	rjmp	.+88     	; 0x1c3e <vfprintf+0xf0>
    1be6:	8d 32       	cpi	r24, 0x2D	; 45
    1be8:	39 f0       	breq	.+14     	; 0x1bf8 <vfprintf+0xaa>
    1bea:	80 33       	cpi	r24, 0x30	; 48
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <vfprintf+0xae>
    1bee:	21 60       	ori	r18, 0x01	; 1
    1bf0:	26 c0       	rjmp	.+76     	; 0x1c3e <vfprintf+0xf0>
    1bf2:	22 60       	ori	r18, 0x02	; 2
    1bf4:	24 60       	ori	r18, 0x04	; 4
    1bf6:	23 c0       	rjmp	.+70     	; 0x1c3e <vfprintf+0xf0>
    1bf8:	28 60       	ori	r18, 0x08	; 8
    1bfa:	21 c0       	rjmp	.+66     	; 0x1c3e <vfprintf+0xf0>
    1bfc:	27 fd       	sbrc	r18, 7
    1bfe:	27 c0       	rjmp	.+78     	; 0x1c4e <vfprintf+0x100>
    1c00:	30 ed       	ldi	r19, 0xD0	; 208
    1c02:	38 0f       	add	r19, r24
    1c04:	3a 30       	cpi	r19, 0x0A	; 10
    1c06:	78 f4       	brcc	.+30     	; 0x1c26 <vfprintf+0xd8>
    1c08:	26 ff       	sbrs	r18, 6
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0xca>
    1c0c:	fa e0       	ldi	r31, 0x0A	; 10
    1c0e:	5f 9e       	mul	r5, r31
    1c10:	30 0d       	add	r19, r0
    1c12:	11 24       	eor	r1, r1
    1c14:	53 2e       	mov	r5, r19
    1c16:	13 c0       	rjmp	.+38     	; 0x1c3e <vfprintf+0xf0>
    1c18:	8a e0       	ldi	r24, 0x0A	; 10
    1c1a:	38 9e       	mul	r3, r24
    1c1c:	30 0d       	add	r19, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	33 2e       	mov	r3, r19
    1c22:	20 62       	ori	r18, 0x20	; 32
    1c24:	0c c0       	rjmp	.+24     	; 0x1c3e <vfprintf+0xf0>
    1c26:	8e 32       	cpi	r24, 0x2E	; 46
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <vfprintf+0xe4>
    1c2a:	26 fd       	sbrc	r18, 6
    1c2c:	5f c1       	rjmp	.+702    	; 0x1eec <vfprintf+0x39e>
    1c2e:	20 64       	ori	r18, 0x40	; 64
    1c30:	06 c0       	rjmp	.+12     	; 0x1c3e <vfprintf+0xf0>
    1c32:	8c 36       	cpi	r24, 0x6C	; 108
    1c34:	11 f4       	brne	.+4      	; 0x1c3a <vfprintf+0xec>
    1c36:	20 68       	ori	r18, 0x80	; 128
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0xf0>
    1c3a:	88 36       	cpi	r24, 0x68	; 104
    1c3c:	41 f4       	brne	.+16     	; 0x1c4e <vfprintf+0x100>
    1c3e:	f6 01       	movw	r30, r12
    1c40:	93 fd       	sbrc	r25, 3
    1c42:	85 91       	lpm	r24, Z+
    1c44:	93 ff       	sbrs	r25, 3
    1c46:	81 91       	ld	r24, Z+
    1c48:	6f 01       	movw	r12, r30
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	c1 cf       	rjmp	.-126    	; 0x1bd0 <vfprintf+0x82>
    1c4e:	98 2f       	mov	r25, r24
    1c50:	9f 7d       	andi	r25, 0xDF	; 223
    1c52:	95 54       	subi	r25, 0x45	; 69
    1c54:	93 30       	cpi	r25, 0x03	; 3
    1c56:	28 f4       	brcc	.+10     	; 0x1c62 <vfprintf+0x114>
    1c58:	0c 5f       	subi	r16, 0xFC	; 252
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	ff e3       	ldi	r31, 0x3F	; 63
    1c5e:	f9 83       	std	Y+1, r31	; 0x01
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <vfprintf+0x12e>
    1c62:	83 36       	cpi	r24, 0x63	; 99
    1c64:	31 f0       	breq	.+12     	; 0x1c72 <vfprintf+0x124>
    1c66:	83 37       	cpi	r24, 0x73	; 115
    1c68:	71 f0       	breq	.+28     	; 0x1c86 <vfprintf+0x138>
    1c6a:	83 35       	cpi	r24, 0x53	; 83
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <vfprintf+0x122>
    1c6e:	57 c0       	rjmp	.+174    	; 0x1d1e <vfprintf+0x1d0>
    1c70:	21 c0       	rjmp	.+66     	; 0x1cb4 <vfprintf+0x166>
    1c72:	f8 01       	movw	r30, r16
    1c74:	80 81       	ld	r24, Z
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	44 24       	eor	r4, r4
    1c7e:	43 94       	inc	r4
    1c80:	51 2c       	mov	r5, r1
    1c82:	54 01       	movw	r10, r8
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <vfprintf+0x160>
    1c86:	38 01       	movw	r6, r16
    1c88:	f2 e0       	ldi	r31, 0x02	; 2
    1c8a:	6f 0e       	add	r6, r31
    1c8c:	71 1c       	adc	r7, r1
    1c8e:	f8 01       	movw	r30, r16
    1c90:	a0 80       	ld	r10, Z
    1c92:	b1 80       	ldd	r11, Z+1	; 0x01
    1c94:	26 ff       	sbrs	r18, 6
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <vfprintf+0x150>
    1c98:	65 2d       	mov	r22, r5
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <vfprintf+0x154>
    1c9e:	6f ef       	ldi	r22, 0xFF	; 255
    1ca0:	7f ef       	ldi	r23, 0xFF	; 255
    1ca2:	c5 01       	movw	r24, r10
    1ca4:	2c 87       	std	Y+12, r18	; 0x0c
    1ca6:	4c d1       	rcall	.+664    	; 0x1f40 <strnlen>
    1ca8:	2c 01       	movw	r4, r24
    1caa:	83 01       	movw	r16, r6
    1cac:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cae:	2f 77       	andi	r18, 0x7F	; 127
    1cb0:	22 2e       	mov	r2, r18
    1cb2:	16 c0       	rjmp	.+44     	; 0x1ce0 <vfprintf+0x192>
    1cb4:	38 01       	movw	r6, r16
    1cb6:	f2 e0       	ldi	r31, 0x02	; 2
    1cb8:	6f 0e       	add	r6, r31
    1cba:	71 1c       	adc	r7, r1
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	a0 80       	ld	r10, Z
    1cc0:	b1 80       	ldd	r11, Z+1	; 0x01
    1cc2:	26 ff       	sbrs	r18, 6
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <vfprintf+0x17e>
    1cc6:	65 2d       	mov	r22, r5
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <vfprintf+0x182>
    1ccc:	6f ef       	ldi	r22, 0xFF	; 255
    1cce:	7f ef       	ldi	r23, 0xFF	; 255
    1cd0:	c5 01       	movw	r24, r10
    1cd2:	2c 87       	std	Y+12, r18	; 0x0c
    1cd4:	2a d1       	rcall	.+596    	; 0x1f2a <strnlen_P>
    1cd6:	2c 01       	movw	r4, r24
    1cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cda:	20 68       	ori	r18, 0x80	; 128
    1cdc:	22 2e       	mov	r2, r18
    1cde:	83 01       	movw	r16, r6
    1ce0:	23 fc       	sbrc	r2, 3
    1ce2:	19 c0       	rjmp	.+50     	; 0x1d16 <vfprintf+0x1c8>
    1ce4:	83 2d       	mov	r24, r3
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	48 16       	cp	r4, r24
    1cea:	59 06       	cpc	r5, r25
    1cec:	a0 f4       	brcc	.+40     	; 0x1d16 <vfprintf+0x1c8>
    1cee:	b7 01       	movw	r22, r14
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	30 d1       	rcall	.+608    	; 0x1f56 <fputc>
    1cf6:	3a 94       	dec	r3
    1cf8:	f5 cf       	rjmp	.-22     	; 0x1ce4 <vfprintf+0x196>
    1cfa:	f5 01       	movw	r30, r10
    1cfc:	27 fc       	sbrc	r2, 7
    1cfe:	85 91       	lpm	r24, Z+
    1d00:	27 fe       	sbrs	r2, 7
    1d02:	81 91       	ld	r24, Z+
    1d04:	5f 01       	movw	r10, r30
    1d06:	b7 01       	movw	r22, r14
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	25 d1       	rcall	.+586    	; 0x1f56 <fputc>
    1d0c:	31 10       	cpse	r3, r1
    1d0e:	3a 94       	dec	r3
    1d10:	f1 e0       	ldi	r31, 0x01	; 1
    1d12:	4f 1a       	sub	r4, r31
    1d14:	51 08       	sbc	r5, r1
    1d16:	41 14       	cp	r4, r1
    1d18:	51 04       	cpc	r5, r1
    1d1a:	79 f7       	brne	.-34     	; 0x1cfa <vfprintf+0x1ac>
    1d1c:	de c0       	rjmp	.+444    	; 0x1eda <vfprintf+0x38c>
    1d1e:	84 36       	cpi	r24, 0x64	; 100
    1d20:	11 f0       	breq	.+4      	; 0x1d26 <vfprintf+0x1d8>
    1d22:	89 36       	cpi	r24, 0x69	; 105
    1d24:	31 f5       	brne	.+76     	; 0x1d72 <vfprintf+0x224>
    1d26:	f8 01       	movw	r30, r16
    1d28:	27 ff       	sbrs	r18, 7
    1d2a:	07 c0       	rjmp	.+14     	; 0x1d3a <vfprintf+0x1ec>
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0c 5f       	subi	r16, 0xFC	; 252
    1d36:	1f 4f       	sbci	r17, 0xFF	; 255
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <vfprintf+0x1fc>
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	88 27       	eor	r24, r24
    1d40:	77 fd       	sbrc	r23, 7
    1d42:	80 95       	com	r24
    1d44:	98 2f       	mov	r25, r24
    1d46:	0e 5f       	subi	r16, 0xFE	; 254
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	2f 76       	andi	r18, 0x6F	; 111
    1d4c:	b2 2e       	mov	r11, r18
    1d4e:	97 ff       	sbrs	r25, 7
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <vfprintf+0x216>
    1d52:	90 95       	com	r25
    1d54:	80 95       	com	r24
    1d56:	70 95       	com	r23
    1d58:	61 95       	neg	r22
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	20 68       	ori	r18, 0x80	; 128
    1d62:	b2 2e       	mov	r11, r18
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	a4 01       	movw	r20, r8
    1d6a:	27 d1       	rcall	.+590    	; 0x1fba <__ultoa_invert>
    1d6c:	a8 2e       	mov	r10, r24
    1d6e:	a8 18       	sub	r10, r8
    1d70:	43 c0       	rjmp	.+134    	; 0x1df8 <vfprintf+0x2aa>
    1d72:	85 37       	cpi	r24, 0x75	; 117
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <vfprintf+0x232>
    1d76:	2f 7e       	andi	r18, 0xEF	; 239
    1d78:	b2 2e       	mov	r11, r18
    1d7a:	2a e0       	ldi	r18, 0x0A	; 10
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	25 c0       	rjmp	.+74     	; 0x1dca <vfprintf+0x27c>
    1d80:	f2 2f       	mov	r31, r18
    1d82:	f9 7f       	andi	r31, 0xF9	; 249
    1d84:	bf 2e       	mov	r11, r31
    1d86:	8f 36       	cpi	r24, 0x6F	; 111
    1d88:	c1 f0       	breq	.+48     	; 0x1dba <vfprintf+0x26c>
    1d8a:	18 f4       	brcc	.+6      	; 0x1d92 <vfprintf+0x244>
    1d8c:	88 35       	cpi	r24, 0x58	; 88
    1d8e:	79 f0       	breq	.+30     	; 0x1dae <vfprintf+0x260>
    1d90:	ad c0       	rjmp	.+346    	; 0x1eec <vfprintf+0x39e>
    1d92:	80 37       	cpi	r24, 0x70	; 112
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <vfprintf+0x24e>
    1d96:	88 37       	cpi	r24, 0x78	; 120
    1d98:	21 f0       	breq	.+8      	; 0x1da2 <vfprintf+0x254>
    1d9a:	a8 c0       	rjmp	.+336    	; 0x1eec <vfprintf+0x39e>
    1d9c:	2f 2f       	mov	r18, r31
    1d9e:	20 61       	ori	r18, 0x10	; 16
    1da0:	b2 2e       	mov	r11, r18
    1da2:	b4 fe       	sbrs	r11, 4
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <vfprintf+0x272>
    1da6:	8b 2d       	mov	r24, r11
    1da8:	84 60       	ori	r24, 0x04	; 4
    1daa:	b8 2e       	mov	r11, r24
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <vfprintf+0x272>
    1dae:	24 ff       	sbrs	r18, 4
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <vfprintf+0x278>
    1db2:	9f 2f       	mov	r25, r31
    1db4:	96 60       	ori	r25, 0x06	; 6
    1db6:	b9 2e       	mov	r11, r25
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <vfprintf+0x278>
    1dba:	28 e0       	ldi	r18, 0x08	; 8
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <vfprintf+0x27c>
    1dc0:	20 e1       	ldi	r18, 0x10	; 16
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <vfprintf+0x27c>
    1dc6:	20 e1       	ldi	r18, 0x10	; 16
    1dc8:	32 e0       	ldi	r19, 0x02	; 2
    1dca:	f8 01       	movw	r30, r16
    1dcc:	b7 fe       	sbrs	r11, 7
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <vfprintf+0x290>
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	0c 5f       	subi	r16, 0xFC	; 252
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <vfprintf+0x29c>
    1dde:	60 81       	ld	r22, Z
    1de0:	71 81       	ldd	r23, Z+1	; 0x01
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 5f       	subi	r16, 0xFE	; 254
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	a4 01       	movw	r20, r8
    1dec:	e6 d0       	rcall	.+460    	; 0x1fba <__ultoa_invert>
    1dee:	a8 2e       	mov	r10, r24
    1df0:	a8 18       	sub	r10, r8
    1df2:	fb 2d       	mov	r31, r11
    1df4:	ff 77       	andi	r31, 0x7F	; 127
    1df6:	bf 2e       	mov	r11, r31
    1df8:	b6 fe       	sbrs	r11, 6
    1dfa:	0b c0       	rjmp	.+22     	; 0x1e12 <vfprintf+0x2c4>
    1dfc:	2b 2d       	mov	r18, r11
    1dfe:	2e 7f       	andi	r18, 0xFE	; 254
    1e00:	a5 14       	cp	r10, r5
    1e02:	50 f4       	brcc	.+20     	; 0x1e18 <vfprintf+0x2ca>
    1e04:	b4 fe       	sbrs	r11, 4
    1e06:	0a c0       	rjmp	.+20     	; 0x1e1c <vfprintf+0x2ce>
    1e08:	b2 fc       	sbrc	r11, 2
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <vfprintf+0x2ce>
    1e0c:	2b 2d       	mov	r18, r11
    1e0e:	2e 7e       	andi	r18, 0xEE	; 238
    1e10:	05 c0       	rjmp	.+10     	; 0x1e1c <vfprintf+0x2ce>
    1e12:	7a 2c       	mov	r7, r10
    1e14:	2b 2d       	mov	r18, r11
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <vfprintf+0x2d0>
    1e18:	7a 2c       	mov	r7, r10
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <vfprintf+0x2d0>
    1e1c:	75 2c       	mov	r7, r5
    1e1e:	24 ff       	sbrs	r18, 4
    1e20:	0d c0       	rjmp	.+26     	; 0x1e3c <vfprintf+0x2ee>
    1e22:	fe 01       	movw	r30, r28
    1e24:	ea 0d       	add	r30, r10
    1e26:	f1 1d       	adc	r31, r1
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 33       	cpi	r24, 0x30	; 48
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <vfprintf+0x2e4>
    1e2e:	29 7e       	andi	r18, 0xE9	; 233
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <vfprintf+0x2f6>
    1e32:	22 ff       	sbrs	r18, 2
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <vfprintf+0x2f4>
    1e36:	73 94       	inc	r7
    1e38:	73 94       	inc	r7
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <vfprintf+0x2f6>
    1e3c:	82 2f       	mov	r24, r18
    1e3e:	86 78       	andi	r24, 0x86	; 134
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <vfprintf+0x2f6>
    1e42:	73 94       	inc	r7
    1e44:	23 fd       	sbrc	r18, 3
    1e46:	12 c0       	rjmp	.+36     	; 0x1e6c <vfprintf+0x31e>
    1e48:	20 ff       	sbrs	r18, 0
    1e4a:	06 c0       	rjmp	.+12     	; 0x1e58 <vfprintf+0x30a>
    1e4c:	5a 2c       	mov	r5, r10
    1e4e:	73 14       	cp	r7, r3
    1e50:	18 f4       	brcc	.+6      	; 0x1e58 <vfprintf+0x30a>
    1e52:	53 0c       	add	r5, r3
    1e54:	57 18       	sub	r5, r7
    1e56:	73 2c       	mov	r7, r3
    1e58:	73 14       	cp	r7, r3
    1e5a:	60 f4       	brcc	.+24     	; 0x1e74 <vfprintf+0x326>
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	80 e2       	ldi	r24, 0x20	; 32
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	2c 87       	std	Y+12, r18	; 0x0c
    1e64:	78 d0       	rcall	.+240    	; 0x1f56 <fputc>
    1e66:	73 94       	inc	r7
    1e68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e6a:	f6 cf       	rjmp	.-20     	; 0x1e58 <vfprintf+0x30a>
    1e6c:	73 14       	cp	r7, r3
    1e6e:	10 f4       	brcc	.+4      	; 0x1e74 <vfprintf+0x326>
    1e70:	37 18       	sub	r3, r7
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <vfprintf+0x328>
    1e74:	31 2c       	mov	r3, r1
    1e76:	24 ff       	sbrs	r18, 4
    1e78:	11 c0       	rjmp	.+34     	; 0x1e9c <vfprintf+0x34e>
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	80 e3       	ldi	r24, 0x30	; 48
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	2c 87       	std	Y+12, r18	; 0x0c
    1e82:	69 d0       	rcall	.+210    	; 0x1f56 <fputc>
    1e84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e86:	22 ff       	sbrs	r18, 2
    1e88:	16 c0       	rjmp	.+44     	; 0x1eb6 <vfprintf+0x368>
    1e8a:	21 ff       	sbrs	r18, 1
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <vfprintf+0x346>
    1e8e:	88 e5       	ldi	r24, 0x58	; 88
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0x34a>
    1e94:	88 e7       	ldi	r24, 0x78	; 120
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	b7 01       	movw	r22, r14
    1e9a:	0c c0       	rjmp	.+24     	; 0x1eb4 <vfprintf+0x366>
    1e9c:	82 2f       	mov	r24, r18
    1e9e:	86 78       	andi	r24, 0x86	; 134
    1ea0:	51 f0       	breq	.+20     	; 0x1eb6 <vfprintf+0x368>
    1ea2:	21 fd       	sbrc	r18, 1
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x35c>
    1ea6:	80 e2       	ldi	r24, 0x20	; 32
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <vfprintf+0x35e>
    1eaa:	8b e2       	ldi	r24, 0x2B	; 43
    1eac:	27 fd       	sbrc	r18, 7
    1eae:	8d e2       	ldi	r24, 0x2D	; 45
    1eb0:	b7 01       	movw	r22, r14
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	50 d0       	rcall	.+160    	; 0x1f56 <fputc>
    1eb6:	a5 14       	cp	r10, r5
    1eb8:	30 f4       	brcc	.+12     	; 0x1ec6 <vfprintf+0x378>
    1eba:	b7 01       	movw	r22, r14
    1ebc:	80 e3       	ldi	r24, 0x30	; 48
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	4a d0       	rcall	.+148    	; 0x1f56 <fputc>
    1ec2:	5a 94       	dec	r5
    1ec4:	f8 cf       	rjmp	.-16     	; 0x1eb6 <vfprintf+0x368>
    1ec6:	aa 94       	dec	r10
    1ec8:	f4 01       	movw	r30, r8
    1eca:	ea 0d       	add	r30, r10
    1ecc:	f1 1d       	adc	r31, r1
    1ece:	80 81       	ld	r24, Z
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	40 d0       	rcall	.+128    	; 0x1f56 <fputc>
    1ed6:	a1 10       	cpse	r10, r1
    1ed8:	f6 cf       	rjmp	.-20     	; 0x1ec6 <vfprintf+0x378>
    1eda:	33 20       	and	r3, r3
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <vfprintf+0x392>
    1ede:	5d ce       	rjmp	.-838    	; 0x1b9a <vfprintf+0x4c>
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	80 e2       	ldi	r24, 0x20	; 32
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	37 d0       	rcall	.+110    	; 0x1f56 <fputc>
    1ee8:	3a 94       	dec	r3
    1eea:	f7 cf       	rjmp	.-18     	; 0x1eda <vfprintf+0x38c>
    1eec:	f7 01       	movw	r30, r14
    1eee:	86 81       	ldd	r24, Z+6	; 0x06
    1ef0:	97 81       	ldd	r25, Z+7	; 0x07
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x3aa>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	2c 96       	adiw	r28, 0x0c	; 12
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	bf 90       	pop	r11
    1f16:	af 90       	pop	r10
    1f18:	9f 90       	pop	r9
    1f1a:	8f 90       	pop	r8
    1f1c:	7f 90       	pop	r7
    1f1e:	6f 90       	pop	r6
    1f20:	5f 90       	pop	r5
    1f22:	4f 90       	pop	r4
    1f24:	3f 90       	pop	r3
    1f26:	2f 90       	pop	r2
    1f28:	08 95       	ret

00001f2a <strnlen_P>:
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	05 90       	lpm	r0, Z+
    1f2e:	61 50       	subi	r22, 0x01	; 1
    1f30:	70 40       	sbci	r23, 0x00	; 0
    1f32:	01 10       	cpse	r0, r1
    1f34:	d8 f7       	brcc	.-10     	; 0x1f2c <strnlen_P+0x2>
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	8e 0f       	add	r24, r30
    1f3c:	9f 1f       	adc	r25, r31
    1f3e:	08 95       	ret

00001f40 <strnlen>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	61 50       	subi	r22, 0x01	; 1
    1f44:	70 40       	sbci	r23, 0x00	; 0
    1f46:	01 90       	ld	r0, Z+
    1f48:	01 10       	cpse	r0, r1
    1f4a:	d8 f7       	brcc	.-10     	; 0x1f42 <strnlen+0x2>
    1f4c:	80 95       	com	r24
    1f4e:	90 95       	com	r25
    1f50:	8e 0f       	add	r24, r30
    1f52:	9f 1f       	adc	r25, r31
    1f54:	08 95       	ret

00001f56 <fputc>:
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	18 2f       	mov	r17, r24
    1f60:	09 2f       	mov	r16, r25
    1f62:	eb 01       	movw	r28, r22
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	81 fd       	sbrc	r24, 1
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <fputc+0x1a>
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	20 c0       	rjmp	.+64     	; 0x1fb0 <fputc+0x5a>
    1f70:	82 ff       	sbrs	r24, 2
    1f72:	10 c0       	rjmp	.+32     	; 0x1f94 <fputc+0x3e>
    1f74:	4e 81       	ldd	r20, Y+6	; 0x06
    1f76:	5f 81       	ldd	r21, Y+7	; 0x07
    1f78:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7c:	42 17       	cp	r20, r18
    1f7e:	53 07       	cpc	r21, r19
    1f80:	7c f4       	brge	.+30     	; 0x1fa0 <fputc+0x4a>
    1f82:	e8 81       	ld	r30, Y
    1f84:	f9 81       	ldd	r31, Y+1	; 0x01
    1f86:	9f 01       	movw	r18, r30
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	39 83       	std	Y+1, r19	; 0x01
    1f8e:	28 83       	st	Y, r18
    1f90:	10 83       	st	Z, r17
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <fputc+0x4a>
    1f94:	e8 85       	ldd	r30, Y+8	; 0x08
    1f96:	f9 85       	ldd	r31, Y+9	; 0x09
    1f98:	81 2f       	mov	r24, r17
    1f9a:	09 95       	icall
    1f9c:	89 2b       	or	r24, r25
    1f9e:	29 f7       	brne	.-54     	; 0x1f6a <fputc+0x14>
    1fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa4:	2f 5f       	subi	r18, 0xFF	; 255
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	3f 83       	std	Y+7, r19	; 0x07
    1faa:	2e 83       	std	Y+6, r18	; 0x06
    1fac:	81 2f       	mov	r24, r17
    1fae:	90 2f       	mov	r25, r16
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <__ultoa_invert>:
    1fba:	fa 01       	movw	r30, r20
    1fbc:	aa 27       	eor	r26, r26
    1fbe:	28 30       	cpi	r18, 0x08	; 8
    1fc0:	51 f1       	breq	.+84     	; 0x2016 <__ultoa_invert+0x5c>
    1fc2:	20 31       	cpi	r18, 0x10	; 16
    1fc4:	81 f1       	breq	.+96     	; 0x2026 <__ultoa_invert+0x6c>
    1fc6:	e8 94       	clt
    1fc8:	6f 93       	push	r22
    1fca:	6e 7f       	andi	r22, 0xFE	; 254
    1fcc:	6e 5f       	subi	r22, 0xFE	; 254
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	af 4f       	sbci	r26, 0xFF	; 255
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	3e d0       	rcall	.+124    	; 0x2056 <__ultoa_invert+0x9c>
    1fda:	b4 e0       	ldi	r27, 0x04	; 4
    1fdc:	3c d0       	rcall	.+120    	; 0x2056 <__ultoa_invert+0x9c>
    1fde:	67 0f       	add	r22, r23
    1fe0:	78 1f       	adc	r23, r24
    1fe2:	89 1f       	adc	r24, r25
    1fe4:	9a 1f       	adc	r25, r26
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	68 0f       	add	r22, r24
    1fea:	79 1f       	adc	r23, r25
    1fec:	8a 1f       	adc	r24, r26
    1fee:	91 1d       	adc	r25, r1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	6a 0f       	add	r22, r26
    1ff4:	71 1d       	adc	r23, r1
    1ff6:	81 1d       	adc	r24, r1
    1ff8:	91 1d       	adc	r25, r1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	20 d0       	rcall	.+64     	; 0x203e <__ultoa_invert+0x84>
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__ultoa_invert+0x48>
    2000:	68 94       	set
    2002:	3f 91       	pop	r19
    2004:	2a e0       	ldi	r18, 0x0A	; 10
    2006:	26 9f       	mul	r18, r22
    2008:	11 24       	eor	r1, r1
    200a:	30 19       	sub	r19, r0
    200c:	30 5d       	subi	r19, 0xD0	; 208
    200e:	31 93       	st	Z+, r19
    2010:	de f6       	brtc	.-74     	; 0x1fc8 <__ultoa_invert+0xe>
    2012:	cf 01       	movw	r24, r30
    2014:	08 95       	ret
    2016:	46 2f       	mov	r20, r22
    2018:	47 70       	andi	r20, 0x07	; 7
    201a:	40 5d       	subi	r20, 0xD0	; 208
    201c:	41 93       	st	Z+, r20
    201e:	b3 e0       	ldi	r27, 0x03	; 3
    2020:	0f d0       	rcall	.+30     	; 0x2040 <__ultoa_invert+0x86>
    2022:	c9 f7       	brne	.-14     	; 0x2016 <__ultoa_invert+0x5c>
    2024:	f6 cf       	rjmp	.-20     	; 0x2012 <__ultoa_invert+0x58>
    2026:	46 2f       	mov	r20, r22
    2028:	4f 70       	andi	r20, 0x0F	; 15
    202a:	40 5d       	subi	r20, 0xD0	; 208
    202c:	4a 33       	cpi	r20, 0x3A	; 58
    202e:	18 f0       	brcs	.+6      	; 0x2036 <__ultoa_invert+0x7c>
    2030:	49 5d       	subi	r20, 0xD9	; 217
    2032:	31 fd       	sbrc	r19, 1
    2034:	40 52       	subi	r20, 0x20	; 32
    2036:	41 93       	st	Z+, r20
    2038:	02 d0       	rcall	.+4      	; 0x203e <__ultoa_invert+0x84>
    203a:	a9 f7       	brne	.-22     	; 0x2026 <__ultoa_invert+0x6c>
    203c:	ea cf       	rjmp	.-44     	; 0x2012 <__ultoa_invert+0x58>
    203e:	b4 e0       	ldi	r27, 0x04	; 4
    2040:	a6 95       	lsr	r26
    2042:	97 95       	ror	r25
    2044:	87 95       	ror	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	ba 95       	dec	r27
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__ultoa_invert+0x86>
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	61 05       	cpc	r22, r1
    2052:	71 05       	cpc	r23, r1
    2054:	08 95       	ret
    2056:	9b 01       	movw	r18, r22
    2058:	ac 01       	movw	r20, r24
    205a:	0a 2e       	mov	r0, r26
    205c:	06 94       	lsr	r0
    205e:	57 95       	ror	r21
    2060:	47 95       	ror	r20
    2062:	37 95       	ror	r19
    2064:	27 95       	ror	r18
    2066:	ba 95       	dec	r27
    2068:	c9 f7       	brne	.-14     	; 0x205c <__ultoa_invert+0xa2>
    206a:	62 0f       	add	r22, r18
    206c:	73 1f       	adc	r23, r19
    206e:	84 1f       	adc	r24, r20
    2070:	95 1f       	adc	r25, r21
    2072:	a0 1d       	adc	r26, r0
    2074:	08 95       	ret

00002076 <_exit>:
    2076:	f8 94       	cli

00002078 <__stop_program>:
    2078:	ff cf       	rjmp	.-2      	; 0x2078 <__stop_program>

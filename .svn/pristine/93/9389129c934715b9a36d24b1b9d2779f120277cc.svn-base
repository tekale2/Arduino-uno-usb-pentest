
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001072  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080011c  0080011c  00001122  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000670  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ab4a  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b78  00000000  00000000  0000cef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fb5  00000000  00000000  0000fa6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fa8  00000000  00000000  00013a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003ff4  00000000  00000000  000149cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006957  00000000  00000000  000189c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000710  00000000  00000000  0001f317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	21 c4       	rjmp	.+2114   	; 0x86c <__vector_10>
      2a:	00 00       	nop
      2c:	e9 c4       	rjmp	.+2514   	; 0xa00 <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	7a c1       	rjmp	.+756    	; 0x35a <__vector_25>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000c8 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     106:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000124 <DeviceDescriptor>:
     124:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     134:	dc 01                                               ..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
				ReportData     += 4;
     148:	e2 e7       	ldi	r30, 0x72	; 114
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	00 e0       	ldi	r16, 0x00	; 0
				break;
     14e:	0b bf       	out	0x3b, r16	; 59

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ac 31       	cpi	r26, 0x1C	; 28
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	12 e0       	ldi	r17, 0x02	; 2
     15e:	ac e1       	ldi	r26, 0x1C	; 28
     160:	b1 e0       	ldi	r27, 0x01	; 1
				ReportSize     -= 2;
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
				ReportData     += 2;
     166:	a0 34       	cpi	r26, 0x40	; 64
     168:	b1 07       	cpc	r27, r17
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
				break;
     16c:	56 d0       	rcall	.+172    	; 0x21a <main>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	7f c7       	rjmp	.+3838   	; 0x106e <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <LEDs_SetAllLEDs>:
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	98 2b       	or	r25, r24
     178:	9b b9       	out	0x0b, r25	; 11
				ReportSize     -= 1;
     17a:	08 95       	ret

0000017c <RingBuffer_Insert>:
     17c:	fc 01       	movw	r30, r24
				ReportData     += 1;
     17e:	a0 81       	ld	r26, Z
     180:	b1 81       	ldd	r27, Z+1	; 0x01
     182:	6c 93       	st	X, r22
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	80 83       	st	Z, r24
     18e:	26 81       	ldd	r18, Z+6	; 0x06
     190:	37 81       	ldd	r19, Z+7	; 0x07
     192:	82 17       	cp	r24, r18
     194:	93 07       	cpc	r25, r19
     196:	21 f4       	brne	.+8      	; 0x1a0 <RingBuffer_Insert+0x24>
     198:	84 81       	ldd	r24, Z+4	; 0x04
     19a:	95 81       	ldd	r25, Z+5	; 0x05
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
     1a0:	2f b7       	in	r18, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	82 85       	ldd	r24, Z+10	; 0x0a
     1a6:	93 85       	ldd	r25, Z+11	; 0x0b
     1a8:	01 96       	adiw	r24, 0x01	; 1

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1aa:	93 87       	std	Z+11, r25	; 0x0b
     1ac:	82 87       	std	Z+10, r24	; 0x0a
     1ae:	2f bf       	out	0x3f, r18	; 63
     1b0:	08 95       	ret

000001b2 <RingBuffer_Remove>:
     1b2:	fc 01       	movw	r30, r24
				break;
     1b4:	a2 81       	ldd	r26, Z+2	; 0x02
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	b3 81       	ldd	r27, Z+3	; 0x03
     1b8:	8d 91       	ld	r24, X+
     1ba:	b3 83       	std	Z+3, r27	; 0x03
     1bc:	a2 83       	std	Z+2, r26	; 0x02
     1be:	26 81       	ldd	r18, Z+6	; 0x06
     1c0:	37 81       	ldd	r19, Z+7	; 0x07
     1c2:	a2 17       	cp	r26, r18
     1c4:	b3 07       	cpc	r27, r19
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <RingBuffer_Remove+0x1e>
     1c8:	24 81       	ldd	r18, Z+4	; 0x04
     1ca:	35 81       	ldd	r19, Z+5	; 0x05
     1cc:	33 83       	std	Z+3, r19	; 0x03
     1ce:	22 83       	std	Z+2, r18	; 0x02
     1d0:	9f b7       	in	r25, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	22 85       	ldd	r18, Z+10	; 0x0a
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	33 85       	ldd	r19, Z+11	; 0x0b
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	33 87       	std	Z+11, r19	; 0x0b
     1de:	22 87       	std	Z+10, r18	; 0x0a
     1e0:	9f bf       	out	0x3f, r25	; 63
     1e2:	08 95       	ret

000001e4 <SetupHardware>:
     1e4:	84 b7       	in	r24, 0x34	; 52
     1e6:	87 7f       	andi	r24, 0xF7	; 247
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	84 bf       	out	0x34, r24	; 52
     1ea:	88 e1       	ldi	r24, 0x18	; 24
				break;
     1ec:	0f b6       	in	r0, 0x3f	; 63
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	f8 94       	cli
     1f0:	80 93 60 00 	sts	0x0060, r24
     1f4:	10 92 60 00 	sts	0x0060, r1
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	80 93 61 00 	sts	0x0061, r24
				break;
     206:	90 93 61 00 	sts	0x0061, r25
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	8a b1       	in	r24, 0x0a	; 10
     20e:	80 6f       	ori	r24, 0xF0	; 240
     210:	8a b9       	out	0x0a, r24	; 10
     212:	8b b1       	in	r24, 0x0b	; 11
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	8b b9       	out	0x0b, r24	; 11
     218:	0e c3       	rjmp	.+1564   	; 0x836 <USB_Init>

0000021a <main>:
     21a:	e4 df       	rcall	.-56     	; 0x1e4 <SetupHardware>
     21c:	e8 e2       	ldi	r30, 0x28	; 40
     21e:	f2 e0       	ldi	r31, 0x02	; 2
     220:	2f b7       	in	r18, 0x3f	; 63
     222:	f8 94       	cli
     224:	88 ea       	ldi	r24, 0xA8	; 168
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	91 83       	std	Z+1, r25	; 0x01
     22a:	80 83       	st	Z, r24
     22c:	93 83       	std	Z+3, r25	; 0x03
     22e:	82 83       	std	Z+2, r24	; 0x02
     230:	95 83       	std	Z+5, r25	; 0x05
     232:	84 83       	std	Z+4, r24	; 0x04
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	88 e2       	ldi	r24, 0x28	; 40
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	97 83       	std	Z+7, r25	; 0x07
     23a:	86 83       	std	Z+6, r24	; 0x06
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	91 87       	std	Z+9, r25	; 0x09
     242:	80 87       	std	Z+8, r24	; 0x08
     244:	13 86       	std	Z+11, r1	; 0x0b
     246:	12 86       	std	Z+10, r1	; 0x0a
     248:	2f bf       	out	0x3f, r18	; 63
     24a:	ec e9       	ldi	r30, 0x9C	; 156
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	2f b7       	in	r18, 0x3f	; 63
     250:	f8 94       	cli
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	8c e1       	ldi	r24, 0x1C	; 28
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	91 83       	std	Z+1, r25	; 0x01
     258:	80 83       	st	Z, r24
     25a:	93 83       	std	Z+3, r25	; 0x03
     25c:	82 83       	std	Z+2, r24	; 0x02
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	95 83       	std	Z+5, r25	; 0x05
     260:	84 83       	std	Z+4, r24	; 0x04
     262:	8c e9       	ldi	r24, 0x9C	; 156
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	97 83       	std	Z+7, r25	; 0x07
     268:	86 83       	std	Z+6, r24	; 0x06
     26a:	80 e8       	ldi	r24, 0x80	; 128
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	91 87       	std	Z+9, r25	; 0x09
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	80 87       	std	Z+8, r24	; 0x08
				break;
     272:	13 86       	std	Z+11, r1	; 0x0b

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	12 86       	std	Z+10, r1	; 0x0a
     276:	2f bf       	out	0x3f, r18	; 63
     278:	80 e1       	ldi	r24, 0x10	; 16
     27a:	7b df       	rcall	.-266    	; 0x172 <LEDs_SetAllLEDs>
     27c:	78 94       	sei
     27e:	8f b7       	in	r24, 0x3f	; 63
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	f8 94       	cli
     282:	20 91 32 02 	lds	r18, 0x0232

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	30 91 33 02 	lds	r19, 0x0233
     28a:	8f bf       	out	0x3f, r24	; 63
     28c:	80 91 30 02 	lds	r24, 0x0230
				break;
     290:	90 91 31 02 	lds	r25, 0x0231

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	28 17       	cp	r18, r24
     296:	39 07       	cpc	r19, r25
     298:	49 f0       	breq	.+18     	; 0x2ac <main+0x92>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	e5 d5       	rcall	.+3018   	; 0xe6a <CDC_Device_ReceiveByte>
				break;
     2a0:	97 fd       	sbrc	r25, 7

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <main+0x92>
     2a4:	68 2f       	mov	r22, r24
     2a6:	88 e2       	ldi	r24, 0x28	; 40
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	68 df       	rcall	.-304    	; 0x17c <RingBuffer_Insert>
				break;
     2ac:	2f b7       	in	r18, 0x3f	; 63

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	f8 94       	cli
     2b0:	80 91 a6 01 	lds	r24, 0x01A6
     2b4:	90 91 a7 01 	lds	r25, 0x01A7
     2b8:	2f bf       	out	0x3f, r18	; 63
     2ba:	00 97       	sbiw	r24, 0x00	; 0
				break;
     2bc:	29 f4       	brne	.+10     	; 0x2c8 <main+0xae>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	80 91 c8 00 	lds	r24, 0x00C8
     2c2:	85 fd       	sbrc	r24, 5
     2c4:	23 c0       	rjmp	.+70     	; 0x30c <main+0xf2>
     2c6:	34 c0       	rjmp	.+104    	; 0x330 <main+0x116>
     2c8:	20 91 01 01 	lds	r18, 0x0101
				break;
     2cc:	2f 70       	andi	r18, 0x0F	; 15
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	20 93 e9 00 	sts	0x00E9, r18
     2d2:	20 91 e8 00 	lds	r18, 0x00E8
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	20 ff       	sbrs	r18, 0
     2d8:	f2 cf       	rjmp	.-28     	; 0x2be <main+0xa4>
     2da:	80 31       	cpi	r24, 0x10	; 16

				if (ParserData->UsingReportIDs)
     2dc:	91 05       	cpc	r25, r1
     2de:	10 f0       	brcs	.+4      	; 0x2e4 <main+0xca>
     2e0:	8f e0       	ldi	r24, 0x0F	; 15
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	18 2f       	mov	r17, r24
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
     2ea:	1c 17       	cp	r17, r28
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	41 f3       	breq	.-48     	; 0x2be <main+0xa4>
     2ee:	e0 91 9e 01 	lds	r30, 0x019E
     2f2:	f0 91 9f 01 	lds	r31, 0x019F
     2f6:	60 81       	ld	r22, Z
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	50 d5       	rcall	.+2720   	; 0xd9e <CDC_Device_SendByte>
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	81 11       	cpse	r24, r1
     302:	dd cf       	rjmp	.-70     	; 0x2be <main+0xa4>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	8c e9       	ldi	r24, 0x9C	; 156
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	54 df       	rcall	.-344    	; 0x1b2 <RingBuffer_Remove>
     30a:	ef cf       	rjmp	.-34     	; 0x2ea <main+0xd0>
     30c:	2f b7       	in	r18, 0x3f	; 63
     30e:	f8 94       	cli
     310:	80 91 32 02 	lds	r24, 0x0232
     314:	90 91 33 02 	lds	r25, 0x0233
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	2f bf       	out	0x3f, r18	; 63
     31a:	89 2b       	or	r24, r25
     31c:	49 f0       	breq	.+18     	; 0x330 <main+0x116>
     31e:	88 e2       	ldi	r24, 0x28	; 40
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	47 df       	rcall	.-370    	; 0x1b2 <RingBuffer_Remove>
     324:	90 91 c8 00 	lds	r25, 0x00C8
     328:	95 ff       	sbrs	r25, 5
     32a:	fc cf       	rjmp	.-8      	; 0x324 <main+0x10a>
     32c:	80 93 ce 00 	sts	0x00CE, r24
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	85 d5       	rcall	.+2826   	; 0xe40 <CDC_Device_USBTask>
     336:	f3 d4       	rcall	.+2534   	; 0xd1e <USB_USBTask>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	a2 cf       	rjmp	.-188    	; 0x27e <main+0x64>

0000033a <EVENT_USB_Device_Connect>:
     33a:	80 ea       	ldi	r24, 0xA0	; 160
     33c:	1a cf       	rjmp	.-460    	; 0x172 <LEDs_SetAllLEDs>

0000033e <EVENT_USB_Device_Disconnect>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	80 e1       	ldi	r24, 0x10	; 16
     340:	18 cf       	rjmp	.-464    	; 0x172 <LEDs_SetAllLEDs>

00000342 <EVENT_USB_Device_ConfigurationChanged>:
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	06 d5       	rcall	.+2572   	; 0xd54 <CDC_Device_ConfigureEndpoints>
     348:	88 23       	and	r24, r24
     34a:	11 f0       	breq	.+4      	; 0x350 <EVENT_USB_Device_ConfigurationChanged+0xe>
     34c:	80 e6       	ldi	r24, 0x60	; 96
     34e:	01 c0       	rjmp	.+2      	; 0x352 <EVENT_USB_Device_ConfigurationChanged+0x10>
     350:	80 e9       	ldi	r24, 0x90	; 144
     352:	0f cf       	rjmp	.-482    	; 0x172 <LEDs_SetAllLEDs>

00000354 <EVENT_USB_Device_ControlRequest>:
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	b9 c5       	rjmp	.+2930   	; 0xecc <CDC_Device_ProcessControlRequest>

0000035a <__vector_25>:
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	0b b6       	in	r0, 0x3b	; 59
     366:	0f 92       	push	r0
     368:	2f 93       	push	r18
     36a:	3f 93       	push	r19
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	4f 93       	push	r20
     36e:	5f 93       	push	r21
     370:	6f 93       	push	r22
     372:	7f 93       	push	r23
     374:	8f 93       	push	r24
     376:	9f 93       	push	r25

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	af 93       	push	r26
     37a:	bf 93       	push	r27
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
     380:	60 91 ce 00 	lds	r22, 0x00CE
     384:	8e b3       	in	r24, 0x1e	; 30
     386:	84 30       	cpi	r24, 0x04	; 4
				break;
     388:	89 f4       	brne	.+34     	; 0x3ac <__vector_25+0x52>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	8f b7       	in	r24, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	20 91 a6 01 	lds	r18, 0x01A6
     392:	30 91 a7 01 	lds	r19, 0x01A7
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	8f bf       	out	0x3f, r24	; 63
     398:	80 91 a4 01 	lds	r24, 0x01A4
     39c:	90 91 a5 01 	lds	r25, 0x01A5
     3a0:	28 17       	cp	r18, r24
     3a2:	39 07       	cpc	r19, r25
     3a4:	19 f0       	breq	.+6      	; 0x3ac <__vector_25+0x52>
     3a6:	8c e9       	ldi	r24, 0x9C	; 156
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	e8 de       	rcall	.-560    	; 0x17c <RingBuffer_Insert>
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
				break;
     3b0:	bf 91       	pop	r27
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	af 91       	pop	r26
     3b4:	9f 91       	pop	r25
     3b6:	8f 91       	pop	r24
     3b8:	7f 91       	pop	r23
     3ba:	6f 91       	pop	r22
     3bc:	5f 91       	pop	r21
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	4f 91       	pop	r20
     3c0:	3f 91       	pop	r19
     3c2:	2f 91       	pop	r18
     3c4:	0f 90       	pop	r0
     3c6:	0b be       	out	0x3b, r0	; 59
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <EVENT_CDC_Device_LineEncodingChanged>:
     3d2:	cf 93       	push	r28

					while (CurrCollectionPath->Parent != NULL)
     3d4:	fc 01       	movw	r30, r24
     3d6:	81 8d       	ldd	r24, Z+25	; 0x19
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	31 f0       	breq	.+12     	; 0x3e8 <EVENT_CDC_Device_LineEncodingChanged+0x16>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	11 f0       	breq	.+4      	; 0x3e4 <EVENT_CDC_Device_LineEncodingChanged+0x12>
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	03 c0       	rjmp	.+6      	; 0x3ea <EVENT_CDC_Device_LineEncodingChanged+0x18>
     3e4:	c0 e2       	ldi	r28, 0x20	; 32
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <EVENT_CDC_Device_LineEncodingChanged+0x18>
     3e8:	c0 e3       	ldi	r28, 0x30	; 48
     3ea:	80 8d       	ldd	r24, Z+24	; 0x18
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <EVENT_CDC_Device_LineEncodingChanged+0x20>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	c8 60       	ori	r28, 0x08	; 8
     3f2:	82 8d       	ldd	r24, Z+26	; 0x1a
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	87 30       	cpi	r24, 0x07	; 7
     3f6:	31 f0       	breq	.+12     	; 0x404 <EVENT_CDC_Device_LineEncodingChanged+0x32>
     3f8:	88 30       	cpi	r24, 0x08	; 8
     3fa:	31 f0       	breq	.+12     	; 0x408 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3fc:	86 30       	cpi	r24, 0x06	; 6
     3fe:	29 f4       	brne	.+10     	; 0x40a <EVENT_CDC_Device_LineEncodingChanged+0x38>
     400:	c2 60       	ori	r28, 0x02	; 2
     402:	03 c0       	rjmp	.+6      	; 0x40a <EVENT_CDC_Device_LineEncodingChanged+0x38>
     404:	c4 60       	ori	r28, 0x04	; 4
     406:	01 c0       	rjmp	.+2      	; 0x40a <EVENT_CDC_Device_LineEncodingChanged+0x38>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	c6 60       	ori	r28, 0x06	; 6
     40a:	5b 9a       	sbi	0x0b, 3	; 11
     40c:	10 92 c9 00 	sts	0x00C9, r1
     410:	10 92 c8 00 	sts	0x00C8, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	10 92 ca 00 	sts	0x00CA, r1
     418:	24 89       	ldd	r18, Z+20	; 0x14
     41a:	35 89       	ldd	r19, Z+21	; 0x15
     41c:	46 89       	ldd	r20, Z+22	; 0x16
     41e:	57 89       	ldd	r21, Z+23	; 0x17

				if (UsageListSize)
     420:	ca 01       	movw	r24, r20
     422:	b9 01       	movw	r22, r18
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	77 95       	ror	r23
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	67 95       	ror	r22
     42c:	60 5c       	subi	r22, 0xC0	; 192
     42e:	7d 4b       	sbci	r23, 0xBD	; 189
     430:	80 4f       	sbci	r24, 0xF0	; 240
     432:	9f 4f       	sbci	r25, 0xFF	; 255
     434:	fa d5       	rcall	.+3060   	; 0x102a <__udivmodsi4>
     436:	21 50       	subi	r18, 0x01	; 1
     438:	31 09       	sbc	r19, r1
     43a:	30 93 cd 00 	sts	0x00CD, r19
     43e:	20 93 cc 00 	sts	0x00CC, r18

					for (uint8_t i = 1; i < UsageListSize; i++)
     442:	c0 93 ca 00 	sts	0x00CA, r28
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	80 93 c8 00 	sts	0x00C8, r24
					  UsageList[i - 1] = UsageList[i];
     44c:	88 e9       	ldi	r24, 0x98	; 152
     44e:	80 93 c9 00 	sts	0x00C9, r24
     452:	5b 98       	cbi	0x0b, 3	; 11

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <CALLBACK_USB_GetDescriptor>:
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	29 2f       	mov	r18, r25
     45a:	33 27       	eor	r19, r19
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	31 05       	cpc	r19, r1
     460:	59 f0       	breq	.+22     	; 0x478 <CALLBACK_USB_GetDescriptor+0x20>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	23 30       	cpi	r18, 0x03	; 3
     464:	31 05       	cpc	r19, r1
     466:	69 f0       	breq	.+26     	; 0x482 <CALLBACK_USB_GetDescriptor+0x2a>
     468:	21 30       	cpi	r18, 0x01	; 1
     46a:	31 05       	cpc	r19, r1
     46c:	f9 f4       	brne	.+62     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x54>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	82 e1       	ldi	r24, 0x12	; 18
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	24 e2       	ldi	r18, 0x24	; 36
     474:	31 e0       	ldi	r19, 0x01	; 1
     476:	1e c0       	rjmp	.+60     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x5c>
     478:	8e e3       	ldi	r24, 0x3E	; 62
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	26 ee       	ldi	r18, 0xE6	; 230
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	19 c0       	rjmp	.+50     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x5c>
     482:	99 27       	eor	r25, r25
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	91 05       	cpc	r25, r1
     488:	41 f0       	breq	.+16     	; 0x49a <CALLBACK_USB_GetDescriptor+0x42>
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	91 05       	cpc	r25, r1
     48e:	41 f0       	breq	.+16     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
     490:	89 2b       	or	r24, r25
     492:	61 f4       	brne	.+24     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x54>
     494:	e2 ee       	ldi	r30, 0xE2	; 226
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x4c>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49a:	e8 ec       	ldi	r30, 0xC8	; 200
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x4c>
     4a0:	e8 e9       	ldi	r30, 0x98	; 152
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	84 91       	lpm	r24, Z
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9f 01       	movw	r18, r30
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x5c>
				break;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	fa 01       	movw	r30, r20
     4b6:	31 83       	std	Z+1, r19	; 0x01
     4b8:	20 83       	st	Z, r18
     4ba:	08 95       	ret

000004bc <Endpoint_Write_Control_Stream_LE>:
     4bc:	20 91 3e 02 	lds	r18, 0x023E
     4c0:	30 91 3f 02 	lds	r19, 0x023F
     4c4:	26 17       	cp	r18, r22
     4c6:	37 07       	cpc	r19, r23
     4c8:	48 f0       	brcs	.+18     	; 0x4dc <Endpoint_Write_Control_Stream_LE+0x20>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	61 15       	cp	r22, r1
     4cc:	71 05       	cpc	r23, r1
     4ce:	39 f4       	brne	.+14     	; 0x4de <Endpoint_Write_Control_Stream_LE+0x22>
     4d0:	20 91 e8 00 	lds	r18, 0x00E8
     4d4:	2e 77       	andi	r18, 0x7E	; 126
     4d6:	20 93 e8 00 	sts	0x00E8, r18
     4da:	01 c0       	rjmp	.+2      	; 0x4de <Endpoint_Write_Control_Stream_LE+0x22>
     4dc:	b9 01       	movw	r22, r18
     4de:	fc 01       	movw	r30, r24
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	61 15       	cp	r22, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	71 05       	cpc	r23, r1
     4e6:	91 f1       	breq	.+100    	; 0x54c <Endpoint_Write_Control_Stream_LE+0x90>
     4e8:	8e b3       	in	r24, 0x1e	; 30
     4ea:	88 23       	and	r24, r24
     4ec:	e1 f1       	breq	.+120    	; 0x566 <Endpoint_Write_Control_Stream_LE+0xaa>
     4ee:	85 30       	cpi	r24, 0x05	; 5
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	e1 f1       	breq	.+120    	; 0x56a <Endpoint_Write_Control_Stream_LE+0xae>
     4f2:	80 91 e8 00 	lds	r24, 0x00E8
     4f6:	83 fd       	sbrc	r24, 3
     4f8:	3a c0       	rjmp	.+116    	; 0x56e <Endpoint_Write_Control_Stream_LE+0xb2>
     4fa:	80 91 e8 00 	lds	r24, 0x00E8
     4fe:	82 ff       	sbrs	r24, 2
     500:	06 c0       	rjmp	.+12     	; 0x50e <Endpoint_Write_Control_Stream_LE+0x52>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	82 ff       	sbrs	r24, 2
     508:	24 c0       	rjmp	.+72     	; 0x552 <Endpoint_Write_Control_Stream_LE+0x96>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	08 95       	ret
     50e:	80 91 e8 00 	lds	r24, 0x00E8
     512:	80 ff       	sbrs	r24, 0
     514:	e6 cf       	rjmp	.-52     	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x26>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	80 91 f2 00 	lds	r24, 0x00F2
     51a:	90 91 f3 00 	lds	r25, 0x00F3

					if (UsageListSize)
     51e:	61 15       	cp	r22, r1
     520:	71 05       	cpc	r23, r1
     522:	51 f0       	breq	.+20     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x7c>
     524:	88 30       	cpi	r24, 0x08	; 8
     526:	91 05       	cpc	r25, r1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	38 f4       	brcc	.+14     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x7c>
     52a:	21 91       	ld	r18, Z+
     52c:	20 93 f1 00 	sts	0x00F1, r18
     530:	61 50       	subi	r22, 0x01	; 1
     532:	71 09       	sbc	r23, r1
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	f3 cf       	rjmp	.-26     	; 0x51e <Endpoint_Write_Control_Stream_LE+0x62>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	08 97       	sbiw	r24, 0x08	; 8
     53c:	09 f0       	breq	.+2      	; 0x540 <Endpoint_Write_Control_Stream_LE+0x84>

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	80 91 e8 00 	lds	r24, 0x00E8
     544:	8e 77       	andi	r24, 0x7E	; 126
     546:	80 93 e8 00 	sts	0x00E8, r24
						  UsageList[i - 1] = UsageList[i];
     54a:	cb cf       	rjmp	.-106    	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x26>
     54c:	21 11       	cpse	r18, r1
     54e:	cc cf       	rjmp	.-104    	; 0x4e8 <Endpoint_Write_Control_Stream_LE+0x2c>
     550:	d8 cf       	rjmp	.-80     	; 0x502 <Endpoint_Write_Control_Stream_LE+0x46>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	8e b3       	in	r24, 0x1e	; 30
     554:	88 23       	and	r24, r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	39 f0       	breq	.+14     	; 0x566 <Endpoint_Write_Control_Stream_LE+0xaa>
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	39 f0       	breq	.+14     	; 0x56a <Endpoint_Write_Control_Stream_LE+0xae>
     55c:	80 91 e8 00 	lds	r24, 0x00E8
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	83 ff       	sbrs	r24, 3
     562:	cf cf       	rjmp	.-98     	; 0x502 <Endpoint_Write_Control_Stream_LE+0x46>
     564:	04 c0       	rjmp	.+8      	; 0x56e <Endpoint_Write_Control_Stream_LE+0xb2>
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	08 95       	ret
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	08 95       	ret
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	08 95       	ret

00000572 <Endpoint_Write_Control_PStream_LE>:
     572:	20 91 3e 02 	lds	r18, 0x023E
     576:	30 91 3f 02 	lds	r19, 0x023F
     57a:	26 17       	cp	r18, r22
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	37 07       	cpc	r19, r23
     57e:	48 f0       	brcs	.+18     	; 0x592 <Endpoint_Write_Control_PStream_LE+0x20>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	61 15       	cp	r22, r1
     582:	71 05       	cpc	r23, r1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	39 f4       	brne	.+14     	; 0x594 <Endpoint_Write_Control_PStream_LE+0x22>
     586:	20 91 e8 00 	lds	r18, 0x00E8
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     58a:	2e 77       	andi	r18, 0x7E	; 126
     58c:	20 93 e8 00 	sts	0x00E8, r18
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     590:	01 c0       	rjmp	.+2      	; 0x594 <Endpoint_Write_Control_PStream_LE+0x22>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	b9 01       	movw	r22, r18
     594:	fc 01       	movw	r30, r24
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	a9 f1       	breq	.+106    	; 0x608 <Endpoint_Write_Control_PStream_LE+0x96>
     59e:	8e b3       	in	r24, 0x1e	; 30
     5a0:	88 23       	and	r24, r24
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x34>
     5a4:	3e c0       	rjmp	.+124    	; 0x622 <Endpoint_Write_Control_PStream_LE+0xb0>
     5a6:	85 30       	cpi	r24, 0x05	; 5
     5a8:	09 f4       	brne	.+2      	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x3a>
     5aa:	3d c0       	rjmp	.+122    	; 0x626 <Endpoint_Write_Control_PStream_LE+0xb4>

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ac:	80 91 e8 00 	lds	r24, 0x00E8
     5b0:	83 fd       	sbrc	r24, 3
     5b2:	3b c0       	rjmp	.+118    	; 0x62a <Endpoint_Write_Control_PStream_LE+0xb8>
     5b4:	80 91 e8 00 	lds	r24, 0x00E8
     5b8:	82 ff       	sbrs	r24, 2
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x56>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bc:	80 91 e8 00 	lds	r24, 0x00E8
     5c0:	82 ff       	sbrs	r24, 2
     5c2:	25 c0       	rjmp	.+74     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x9c>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
     5cc:	80 ff       	sbrs	r24, 0
     5ce:	e4 cf       	rjmp	.-56     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x26>
     5d0:	80 91 f2 00 	lds	r24, 0x00F2
     5d4:	90 91 f3 00 	lds	r25, 0x00F3
     5d8:	61 15       	cp	r22, r1
     5da:	71 05       	cpc	r23, r1
     5dc:	59 f0       	breq	.+22     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x82>
     5de:	88 30       	cpi	r24, 0x08	; 8
     5e0:	91 05       	cpc	r25, r1
     5e2:	40 f4       	brcc	.+16     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x82>
     5e4:	24 91       	lpm	r18, Z
     5e6:	20 93 f1 00 	sts	0x00F1, r18
     5ea:	31 96       	adiw	r30, 0x01	; 1
     5ec:	61 50       	subi	r22, 0x01	; 1
     5ee:	71 09       	sbc	r23, r1
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x66>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	08 97       	sbiw	r24, 0x08	; 8
     5f8:	09 f0       	breq	.+2      	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x8a>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	80 91 e8 00 	lds	r24, 0x00E8
					  return HID_PARSE_InsufficientReportItems;
     600:	8e 77       	andi	r24, 0x7E	; 126

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	80 93 e8 00 	sts	0x00E8, r24
     606:	c8 cf       	rjmp	.-112    	; 0x598 <Endpoint_Write_Control_PStream_LE+0x26>
     608:	21 11       	cpse	r18, r1
     60a:	c9 cf       	rjmp	.-110    	; 0x59e <Endpoint_Write_Control_PStream_LE+0x2c>
     60c:	d7 cf       	rjmp	.-82     	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x4a>
     60e:	8e b3       	in	r24, 0x1e	; 30
     610:	88 23       	and	r24, r24
     612:	39 f0       	breq	.+14     	; 0x622 <Endpoint_Write_Control_PStream_LE+0xb0>
     614:	85 30       	cpi	r24, 0x05	; 5
     616:	39 f0       	breq	.+14     	; 0x626 <Endpoint_Write_Control_PStream_LE+0xb4>
     618:	80 91 e8 00 	lds	r24, 0x00E8
     61c:	83 ff       	sbrs	r24, 3
     61e:	ce cf       	rjmp	.-100    	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x4a>
     620:	04 c0       	rjmp	.+8      	; 0x62a <Endpoint_Write_Control_PStream_LE+0xb8>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	08 95       	ret
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	08 95       	ret
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret

0000062e <Endpoint_ConfigureEndpoint_Prv>:
     62e:	98 2f       	mov	r25, r24
     630:	97 30       	cpi	r25, 0x07	; 7
     632:	58 f5       	brcc	.+86     	; 0x68a <Endpoint_ConfigureEndpoint_Prv+0x5c>
     634:	90 93 e9 00 	sts	0x00E9, r25
     638:	98 17       	cp	r25, r24
     63a:	39 f0       	breq	.+14     	; 0x64a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     63c:	70 91 ec 00 	lds	r23, 0x00EC
     640:	20 91 ed 00 	lds	r18, 0x00ED
     644:	50 91 f0 00 	lds	r21, 0x00F0
     648:	03 c0       	rjmp	.+6      	; 0x650 <Endpoint_ConfigureEndpoint_Prv+0x22>
     64a:	24 2f       	mov	r18, r20
     64c:	76 2f       	mov	r23, r22
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	21 ff       	sbrs	r18, 1
     652:	19 c0       	rjmp	.+50     	; 0x686 <Endpoint_ConfigureEndpoint_Prv+0x58>
     654:	30 91 eb 00 	lds	r19, 0x00EB
     658:	3e 7f       	andi	r19, 0xFE	; 254
     65a:	30 93 eb 00 	sts	0x00EB, r19
     65e:	30 91 ed 00 	lds	r19, 0x00ED
     662:	3d 7f       	andi	r19, 0xFD	; 253
     664:	30 93 ed 00 	sts	0x00ED, r19
     668:	30 91 eb 00 	lds	r19, 0x00EB
     66c:	31 60       	ori	r19, 0x01	; 1
     66e:	30 93 eb 00 	sts	0x00EB, r19
     672:	70 93 ec 00 	sts	0x00EC, r23
     676:	20 93 ed 00 	sts	0x00ED, r18
     67a:	50 93 f0 00 	sts	0x00F0, r21
     67e:	20 91 ee 00 	lds	r18, 0x00EE
     682:	27 ff       	sbrs	r18, 7
     684:	07 c0       	rjmp	.+14     	; 0x694 <Endpoint_ConfigureEndpoint_Prv+0x66>
     686:	9f 5f       	subi	r25, 0xFF	; 255
					  ParserData->TotalReportItems++;
     688:	d3 cf       	rjmp	.-90     	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x2>
     68a:	8f 70       	andi	r24, 0x0F	; 15
     68c:	80 93 e9 00 	sts	0x00E9, r24
     690:	81 e0       	ldi	r24, 0x01	; 1

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     692:	08 95       	ret
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret

00000698 <Endpoint_ConfigureEndpointTable>:
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	df 93       	push	r29
     6a0:	06 2f       	mov	r16, r22
     6a2:	ec 01       	movw	r28, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	10 17       	cp	r17, r16
     6a8:	71 f1       	breq	.+92     	; 0x706 <Endpoint_ConfigureEndpointTable+0x6e>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	98 81       	ld	r25, Y
     6ac:	99 23       	and	r25, r25
     6ae:	41 f1       	breq	.+80     	; 0x700 <Endpoint_ConfigureEndpointTable+0x68>
     6b0:	2c 81       	ldd	r18, Y+4	; 0x04
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	e9 81       	ldd	r30, Y+1	; 0x01
     6b4:	fa 81       	ldd	r31, Y+2	; 0x02
     6b6:	7b 81       	ldd	r23, Y+3	; 0x03
     6b8:	89 2f       	mov	r24, r25
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	8f 70       	andi	r24, 0x0F	; 15
     6bc:	87 30       	cpi	r24, 0x07	; 7

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	10 f0       	brcs	.+4      	; 0x6c4 <Endpoint_ConfigureEndpointTable+0x2c>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c2:	22 c0       	rjmp	.+68     	; 0x708 <Endpoint_ConfigureEndpointTable+0x70>
     6c4:	22 30       	cpi	r18, 0x02	; 2
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	10 f0       	brcs	.+4      	; 0x6cc <Endpoint_ConfigureEndpointTable+0x34>
     6c8:	56 e0       	ldi	r21, 0x06	; 6
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <Endpoint_ConfigureEndpointTable+0x36>
     6cc:	52 e0       	ldi	r21, 0x02	; 2

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	28 e0       	ldi	r18, 0x08	; 8
     6d0:	30 e0       	ldi	r19, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	2e 17       	cp	r18, r30
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	3f 07       	cpc	r19, r31

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	20 f4       	brcc	.+8      	; 0x6e2 <Endpoint_ConfigureEndpointTable+0x4a>
     6da:	4f 5f       	subi	r20, 0xFF	; 255
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	f9 cf       	rjmp	.-14     	; 0x6d4 <Endpoint_ConfigureEndpointTable+0x3c>
     6e2:	42 95       	swap	r20
     6e4:	40 7f       	andi	r20, 0xF0	; 240
     6e6:	45 2b       	or	r20, r21
     6e8:	69 2f       	mov	r22, r25
     6ea:	66 1f       	adc	r22, r22
     6ec:	66 27       	eor	r22, r22
     6ee:	66 1f       	adc	r22, r22
     6f0:	90 e4       	ldi	r25, 0x40	; 64
     6f2:	79 9f       	mul	r23, r25
     6f4:	90 01       	movw	r18, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	62 2b       	or	r22, r18
     6fa:	99 df       	rcall	.-206    	; 0x62e <Endpoint_ConfigureEndpoint_Prv>
     6fc:	88 23       	and	r24, r24
     6fe:	01 f3       	breq	.-64     	; 0x6c0 <Endpoint_ConfigureEndpointTable+0x28>
     700:	1f 5f       	subi	r17, 0xFF	; 255
     702:	25 96       	adiw	r28, 0x05	; 5
     704:	d0 cf       	rjmp	.-96     	; 0x6a6 <Endpoint_ConfigureEndpointTable+0xe>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
}
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <Endpoint_ClearStatusStage>:
     712:	80 91 38 02 	lds	r24, 0x0238
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     716:	87 fd       	sbrc	r24, 7
     718:	05 c0       	rjmp	.+10     	; 0x724 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     71a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     71e:	80 ff       	sbrs	r24, 0
     720:	0d c0       	rjmp	.+26     	; 0x73c <Endpoint_ClearStatusStage+0x2a>
     722:	10 c0       	rjmp	.+32     	; 0x744 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     724:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     728:	82 fd       	sbrc	r24, 2
     72a:	04 c0       	rjmp	.+8      	; 0x734 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     72c:	8e b3       	in	r24, 0x1e	; 30
     72e:	81 11       	cpse	r24, r1
     730:	f9 cf       	rjmp	.-14     	; 0x724 <Endpoint_ClearStatusStage+0x12>
     732:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     734:	80 91 e8 00 	lds	r24, 0x00E8
     738:	8b 77       	andi	r24, 0x7B	; 123
     73a:	07 c0       	rjmp	.+14     	; 0x74a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     73c:	8e b3       	in	r24, 0x1e	; 30
     73e:	81 11       	cpse	r24, r1
     740:	ec cf       	rjmp	.-40     	; 0x71a <Endpoint_ClearStatusStage+0x8>
     742:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     744:	80 91 e8 00 	lds	r24, 0x00E8
     748:	8e 77       	andi	r24, 0x7E	; 126
     74a:	80 93 e8 00 	sts	0x00E8, r24
     74e:	08 95       	ret

00000750 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     750:	80 91 e4 00 	lds	r24, 0x00E4
     754:	90 91 e5 00 	lds	r25, 0x00E5
     758:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     75a:	20 91 ec 00 	lds	r18, 0x00EC
     75e:	20 ff       	sbrs	r18, 0
     760:	20 c0       	rjmp	.+64     	; 0x7a2 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     762:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     766:	20 fd       	sbrc	r18, 0
     768:	20 c0       	rjmp	.+64     	; 0x7aa <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     76a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     76c:	22 23       	and	r18, r18
     76e:	89 f0       	breq	.+34     	; 0x792 <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     770:	25 30       	cpi	r18, 0x05	; 5
     772:	89 f0       	breq	.+34     	; 0x796 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     774:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     778:	25 fd       	sbrc	r18, 5
     77a:	0f c0       	rjmp	.+30     	; 0x79a <Endpoint_WaitUntilReady+0x4a>
     77c:	20 91 e4 00 	lds	r18, 0x00E4
     780:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     784:	28 17       	cp	r18, r24
     786:	39 07       	cpc	r19, r25
     788:	41 f3       	breq	.-48     	; 0x75a <Endpoint_WaitUntilReady+0xa>
     78a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     78c:	41 f0       	breq	.+16     	; 0x79e <Endpoint_WaitUntilReady+0x4e>
     78e:	c9 01       	movw	r24, r18
     790:	e4 cf       	rjmp	.-56     	; 0x75a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7a2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7a6:	22 ff       	sbrs	r18, 2
     7a8:	e0 cf       	rjmp	.-64     	; 0x76a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret

000007ae <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7b6:	4d d0       	rcall	.+154    	; 0x852 <USB_INT_DisableAllInterrupts>
     7b8:	54 d0       	rcall	.+168    	; 0x862 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7ba:	c8 ed       	ldi	r28, 0xD8	; 216
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7be:	88 81       	ld	r24, Y
     7c0:	8f 77       	andi	r24, 0x7F	; 127
     7c2:	88 83       	st	Y, r24
     7c4:	88 81       	ld	r24, Y
     7c6:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7c8:	88 83       	st	Y, r24
     7ca:	88 81       	ld	r24, Y
     7cc:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7ce:	88 83       	st	Y, r24
     7d0:	e7 ed       	ldi	r30, 0xD7	; 215
     7d2:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7d4:	80 81       	ld	r24, Z
     7d6:	80 68       	ori	r24, 0x80	; 128
     7d8:	80 83       	st	Z, r24
     7da:	19 bc       	out	0x29, r1	; 41
     7dc:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7de:	10 92 34 02 	sts	0x0234, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     7e2:	10 92 36 02 	sts	0x0236, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7e6:	10 92 35 02 	sts	0x0235, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7ea:	00 ee       	ldi	r16, 0xE0	; 224
     7ec:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 81       	ld	r24, Z
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	80 83       	st	Z, r24
     7f6:	88 81       	ld	r24, Y
     7f8:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7fa:	88 83       	st	Y, r24
     7fc:	42 e0       	ldi	r20, 0x02	; 2
     7fe:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	15 df       	rcall	.-470    	; 0x62e <Endpoint_ConfigureEndpoint_Prv>
     804:	e1 ee       	ldi	r30, 0xE1	; 225
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     80a:	8e 7f       	andi	r24, 0xFE	; 254
     80c:	80 83       	st	Z, r24
     80e:	e2 ee       	ldi	r30, 0xE2	; 226
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     814:	81 60       	ori	r24, 0x01	; 1
     816:	80 83       	st	Z, r24
     818:	80 81       	ld	r24, Z
     81a:	88 60       	ori	r24, 0x08	; 8
     81c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     81e:	f8 01       	movw	r30, r16
     820:	80 81       	ld	r24, Z
     822:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     824:	80 83       	st	Z, r24
     826:	88 81       	ld	r24, Y
     828:	80 61       	ori	r24, 0x10	; 16
     82a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     832:	0f 91       	pop	r16
     834:	08 95       	ret

00000836 <USB_Init>:
     836:	e8 ed       	ldi	r30, 0xD8	; 216
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     83c:	8f 7e       	andi	r24, 0xEF	; 239
     83e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     840:	e7 ed       	ldi	r30, 0xD7	; 215
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	81 60       	ori	r24, 0x01	; 1
     848:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 37 02 	sts	0x0237, r24

	USB_ResetInterface();
     850:	ae cf       	rjmp	.-164    	; 0x7ae <USB_ResetInterface>

00000852 <USB_INT_DisableAllInterrupts>:
     852:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	8c 7f       	andi	r24, 0xFC	; 252
     85a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     85c:	10 92 e2 00 	sts	0x00E2, r1
     860:	08 95       	ret

00000862 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     862:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     866:	10 92 e1 00 	sts	0x00E1, r1
     86a:	08 95       	ret

0000086c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	0b b6       	in	r0, 0x3b	; 59
     878:	0f 92       	push	r0
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     892:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     896:	82 ff       	sbrs	r24, 2
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     89a:	80 91 e2 00 	lds	r24, 0x00E2
     89e:	82 ff       	sbrs	r24, 2
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8a2:	80 91 e1 00 	lds	r24, 0x00E1
     8a6:	8b 7f       	andi	r24, 0xFB	; 251
     8a8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8ac:	37 d2       	rcall	.+1134   	; 0xd1c <USB_Event_Stub>
     8ae:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8b2:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8b4:	1b c0       	rjmp	.+54     	; 0x8ec <__vector_10+0x80>
     8b6:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8ba:	80 ff       	sbrs	r24, 0
     8bc:	17 c0       	rjmp	.+46     	; 0x8ec <__vector_10+0x80>
     8be:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
     8c4:	80 93 da 00 	sts	0x00DA, r24
     8c8:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8cc:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <__vector_10+0x7a>
     8d0:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8d2:	89 bd       	out	0x29, r24	; 41
     8d4:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8d6:	89 bd       	out	0x29, r24	; 41
     8d8:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8da:	00 fe       	sbrs	r0, 0
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <__vector_10+0x6c>
     8de:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8e0:	8e bb       	out	0x1e, r24	; 30
     8e2:	2b dd       	rcall	.-1450   	; 0x33a <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__vector_10+0x80>
     8e6:	19 bc       	out	0x29, r1	; 41
     8e8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8ea:	29 dd       	rcall	.-1454   	; 0x33e <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8ec:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8f0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8f2:	17 c0       	rjmp	.+46     	; 0x922 <__vector_10+0xb6>
     8f4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8f8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8fa:	13 c0       	rjmp	.+38     	; 0x922 <__vector_10+0xb6>
     8fc:	80 91 e2 00 	lds	r24, 0x00E2
     900:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     902:	80 93 e2 00 	sts	0x00E2, r24
     906:	80 91 e2 00 	lds	r24, 0x00E2
     90a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     90c:	80 93 e2 00 	sts	0x00E2, r24
     910:	80 91 d8 00 	lds	r24, 0x00D8
     914:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     916:	80 93 d8 00 	sts	0x00D8, r24
     91a:	19 bc       	out	0x29, r1	; 41
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     920:	fd d1       	rcall	.+1018   	; 0xd1c <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     922:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     926:	84 ff       	sbrs	r24, 4
     928:	2e c0       	rjmp	.+92     	; 0x986 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     92a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     92e:	84 ff       	sbrs	r24, 4
     930:	2a c0       	rjmp	.+84     	; 0x986 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     932:	8c e0       	ldi	r24, 0x0C	; 12
     934:	89 bd       	out	0x29, r24	; 41
     936:	8e e0       	ldi	r24, 0x0E	; 14
     938:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     93a:	09 b4       	in	r0, 0x29	; 41
     93c:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     93e:	fd cf       	rjmp	.-6      	; 0x93a <__vector_10+0xce>
     940:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     944:	8f 7d       	andi	r24, 0xDF	; 223
     946:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     94a:	80 91 e1 00 	lds	r24, 0x00E1
     94e:	8f 7e       	andi	r24, 0xEF	; 239
     950:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     954:	80 91 e2 00 	lds	r24, 0x00E2
     958:	8f 7e       	andi	r24, 0xEF	; 239
     95a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     95e:	80 91 e2 00 	lds	r24, 0x00E2
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     968:	80 91 34 02 	lds	r24, 0x0234
     96c:	88 23       	and	r24, r24
     96e:	11 f0       	breq	.+4      	; 0x974 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	07 c0       	rjmp	.+14     	; 0x982 <__vector_10+0x116>
     974:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     978:	87 ff       	sbrs	r24, 7
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	8e bb       	out	0x1e, r24	; 30
     984:	cb d1       	rcall	.+918    	; 0xd1c <USB_Event_Stub>
     986:	80 91 e1 00 	lds	r24, 0x00E1
     98a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     98c:	26 c0       	rjmp	.+76     	; 0x9da <__vector_10+0x16e>
     98e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     992:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     994:	22 c0       	rjmp	.+68     	; 0x9da <__vector_10+0x16e>
     996:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     99a:	87 7f       	andi	r24, 0xF7	; 247
     99c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	8e bb       	out	0x1e, r24	; 30
     9a4:	10 92 34 02 	sts	0x0234, r1
     9a8:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9ac:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9ae:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9b2:	80 91 e2 00 	lds	r24, 0x00E2
     9b6:	8e 7f       	andi	r24, 0xFE	; 254
     9b8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9bc:	80 91 e2 00 	lds	r24, 0x00E2
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9c6:	42 e0       	ldi	r20, 0x02	; 2
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	30 de       	rcall	.-928    	; 0x62e <Endpoint_ConfigureEndpoint_Prv>
     9ce:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9d2:	88 60       	ori	r24, 0x08	; 8
     9d4:	80 93 f0 00 	sts	0x00F0, r24
     9d8:	a1 d1       	rcall	.+834    	; 0xd1c <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0b be       	out	0x3b, r0	; 59
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_11>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	0b b6       	in	r0, 0x3b	; 59
     a0c:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a0e:	2f 93       	push	r18
     a10:	3f 93       	push	r19
     a12:	4f 93       	push	r20
     a14:	5f 93       	push	r21
     a16:	6f 93       	push	r22
     a18:	7f 93       	push	r23
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	af 93       	push	r26
     a20:	bf 93       	push	r27
     a22:	cf 93       	push	r28
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a28:	c0 91 e9 00 	lds	r28, 0x00E9
     a2c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a2e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a32:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a36:	80 91 f0 00 	lds	r24, 0x00F0
     a3a:	87 7f       	andi	r24, 0xF7	; 247
     a3c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a40:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a42:	1d d0       	rcall	.+58     	; 0xa7e <USB_Device_ProcessControlRequest>
     a44:	10 92 e9 00 	sts	0x00E9, r1
     a48:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a4c:	88 60       	ori	r24, 0x08	; 8
     a4e:	80 93 f0 00 	sts	0x00F0, r24
     a52:	c0 93 e9 00 	sts	0x00E9, r28
     a56:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a58:	ef 91       	pop	r30
     a5a:	cf 91       	pop	r28
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <USB_Device_ProcessControlRequest>:
     a7e:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	aa 97       	sbiw	r28, 0x2a	; 42
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	e8 e3       	ldi	r30, 0x38	; 56
     a96:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a98:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a9c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a9e:	22 e0       	ldi	r18, 0x02	; 2
     aa0:	e0 34       	cpi	r30, 0x40	; 64
     aa2:	f2 07       	cpc	r31, r18
     aa4:	c9 f7       	brne	.-14     	; 0xa98 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     aa6:	56 dc       	rcall	.-1876   	; 0x354 <EVENT_USB_Device_ControlRequest>
     aa8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     aac:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     aae:	1e c1       	rjmp	.+572    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     ab0:	90 91 38 02 	lds	r25, 0x0238
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ab4:	80 91 39 02 	lds	r24, 0x0239

		switch (USB_ControlRequest.bRequest)
     ab8:	85 30       	cpi	r24, 0x05	; 5
     aba:	09 f4       	brne	.+2      	; 0xabe <USB_Device_ProcessControlRequest+0x40>
     abc:	77 c0       	rjmp	.+238    	; 0xbac <USB_Device_ProcessControlRequest+0x12e>
     abe:	30 f4       	brcc	.+12     	; 0xacc <USB_Device_ProcessControlRequest+0x4e>
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	81 f1       	breq	.+96     	; 0xb24 <USB_Device_ProcessControlRequest+0xa6>
     ac4:	68 f0       	brcs	.+26     	; 0xae0 <USB_Device_ProcessControlRequest+0x62>
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	69 f1       	breq	.+90     	; 0xb24 <USB_Device_ProcessControlRequest+0xa6>
     aca:	10 c1       	rjmp	.+544    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     acc:	88 30       	cpi	r24, 0x08	; 8
     ace:	09 f4       	brne	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x54>
     ad0:	e0 c0       	rjmp	.+448    	; 0xc92 <USB_Device_ProcessControlRequest+0x214>
     ad2:	89 30       	cpi	r24, 0x09	; 9
     ad4:	09 f4       	brne	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x5a>
     ad6:	ef c0       	rjmp	.+478    	; 0xcb6 <USB_Device_ProcessControlRequest+0x238>
     ad8:	86 30       	cpi	r24, 0x06	; 6
     ada:	09 f0       	breq	.+2      	; 0xade <USB_Device_ProcessControlRequest+0x60>
     adc:	07 c1       	rjmp	.+526    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     ade:	87 c0       	rjmp	.+270    	; 0xbee <USB_Device_ProcessControlRequest+0x170>
     ae0:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ae2:	81 f0       	breq	.+32     	; 0xb04 <USB_Device_ProcessControlRequest+0x86>
     ae4:	92 38       	cpi	r25, 0x82	; 130
     ae6:	09 f0       	breq	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x6c>
     ae8:	01 c1       	rjmp	.+514    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     aea:	80 91 3c 02 	lds	r24, 0x023C
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	80 93 e9 00 	sts	0x00E9, r24
     af4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     af8:	85 fb       	bst	r24, 5
     afa:	88 27       	eor	r24, r24
     afc:	80 f9       	bld	r24, 0
     afe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <USB_Device_ProcessControlRequest+0x92>
     b04:	80 91 35 02 	lds	r24, 0x0235
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b08:	90 91 36 02 	lds	r25, 0x0236
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b0c:	91 11       	cpse	r25, r1
     b0e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b10:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b14:	97 7f       	andi	r25, 0xF7	; 247
     b16:	90 93 e8 00 	sts	0x00E8, r25
     b1a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b1e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b22:	c2 c0       	rjmp	.+388    	; 0xca8 <USB_Device_ProcessControlRequest+0x22a>
     b24:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	09 f0       	breq	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0xae>
     b2a:	e0 c0       	rjmp	.+448    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     b2c:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b2e:	19 f0       	breq	.+6      	; 0xb36 <USB_Device_ProcessControlRequest+0xb8>
     b30:	92 30       	cpi	r25, 0x02	; 2
     b32:	61 f0       	breq	.+24     	; 0xb4c <USB_Device_ProcessControlRequest+0xce>
     b34:	db c0       	rjmp	.+438    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     b36:	90 91 3a 02 	lds	r25, 0x023A
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b3a:	91 30       	cpi	r25, 0x01	; 1
     b3c:	09 f0       	breq	.+2      	; 0xb40 <USB_Device_ProcessControlRequest+0xc2>
     b3e:	d6 c0       	rjmp	.+428    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     b40:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b42:	09 f0       	breq	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0xc8>
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	90 93 36 02 	sts	0x0236, r25
     b4a:	2a c0       	rjmp	.+84     	; 0xba0 <USB_Device_ProcessControlRequest+0x122>
     b4c:	90 91 3a 02 	lds	r25, 0x023A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b50:	91 11       	cpse	r25, r1
     b52:	26 c0       	rjmp	.+76     	; 0xba0 <USB_Device_ProcessControlRequest+0x122>
     b54:	20 91 3c 02 	lds	r18, 0x023C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b58:	2f 70       	andi	r18, 0x0F	; 15
     b5a:	09 f4       	brne	.+2      	; 0xb5e <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b5c:	c7 c0       	rjmp	.+398    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     b5e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b62:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b66:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b68:	1b c0       	rjmp	.+54     	; 0xba0 <USB_Device_ProcessControlRequest+0x122>
     b6a:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b6c:	21 f4       	brne	.+8      	; 0xb76 <USB_Device_ProcessControlRequest+0xf8>
     b6e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b72:	80 62       	ori	r24, 0x20	; 32
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <USB_Device_ProcessControlRequest+0x11e>
     b76:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	80 93 eb 00 	sts	0x00EB, r24
     b80:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	02 2e       	mov	r0, r18
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <USB_Device_ProcessControlRequest+0x10c>
     b88:	88 0f       	add	r24, r24
     b8a:	0a 94       	dec	r0
     b8c:	ea f7       	brpl	.-6      	; 0xb88 <USB_Device_ProcessControlRequest+0x10a>
     b8e:	80 93 ea 00 	sts	0x00EA, r24
     b92:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b96:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b9a:	88 60       	ori	r24, 0x08	; 8
     b9c:	80 93 eb 00 	sts	0x00EB, r24
     ba0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba8:	87 7f       	andi	r24, 0xF7	; 247
     baa:	81 c0       	rjmp	.+258    	; 0xcae <USB_Device_ProcessControlRequest+0x230>
     bac:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bae:	9e c0       	rjmp	.+316    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     bb0:	10 91 3a 02 	lds	r17, 0x023A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bb4:	1f 77       	andi	r17, 0x7F	; 127
     bb6:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bba:	80 78       	andi	r24, 0x80	; 128
     bbc:	81 2b       	or	r24, r17
     bbe:	80 93 e3 00 	sts	0x00E3, r24
     bc2:	80 91 e8 00 	lds	r24, 0x00E8
     bc6:	87 7f       	andi	r24, 0xF7	; 247
     bc8:	80 93 e8 00 	sts	0x00E8, r24
     bcc:	a2 dd       	rcall	.-1212   	; 0x712 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bd2:	80 ff       	sbrs	r24, 0
     bd4:	fc cf       	rjmp	.-8      	; 0xbce <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     bd6:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	80 93 e3 00 	sts	0x00E3, r24
     be0:	11 23       	and	r17, r17
     be2:	11 f0       	breq	.+4      	; 0xbe8 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	01 c0       	rjmp	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x16c>
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	8e bb       	out	0x1e, r24	; 30
     bec:	7f c0       	rjmp	.+254    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     bee:	90 58       	subi	r25, 0x80	; 128
     bf0:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x178>
     bf4:	7b c0       	rjmp	.+246    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     bf6:	80 91 3a 02 	lds	r24, 0x023A
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bfa:	90 91 3b 02 	lds	r25, 0x023B
     bfe:	8c 3d       	cpi	r24, 0xDC	; 220
     c00:	23 e0       	ldi	r18, 0x03	; 3
     c02:	92 07       	cpc	r25, r18
     c04:	71 f5       	brne	.+92     	; 0xc62 <USB_Device_ProcessControlRequest+0x1e4>
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c0a:	8a e2       	ldi	r24, 0x2A	; 42
     c0c:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c0e:	4f b7       	in	r20, 0x3f	; 63
     c10:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c12:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c14:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c1a:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c1c:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	50 93 57 00 	sts	0x0057, r21
     c24:	e4 91       	lpm	r30, Z
     c26:	20 ff       	sbrs	r18, 0
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
     c2a:	e2 95       	swap	r30
     c2c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c2e:	3f 5f       	subi	r19, 0xFF	; 255
     c30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c32:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	ea 30       	cpi	r30, 0x0A	; 10
     c38:	10 f0       	brcs	.+4      	; 0xc3e <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c3a:	c7 96       	adiw	r24, 0x37	; 55
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0x1c2>
     c3e:	c0 96       	adiw	r24, 0x30	; 48
     c40:	8d 93       	st	X+, r24
     c42:	9d 93       	st	X+, r25
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c48:	49 f7       	brne	.-46     	; 0xc1c <USB_Device_ProcessControlRequest+0x19e>
     c4a:	4f bf       	out	0x3f, r20	; 63
     c4c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c50:	87 7f       	andi	r24, 0xF7	; 247
     c52:	80 93 e8 00 	sts	0x00E8, r24
     c56:	6a e2       	ldi	r22, 0x2A	; 42
     c58:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	2e dc       	rcall	.-1956   	; 0x4bc <Endpoint_Write_Control_Stream_LE>
     c60:	12 c0       	rjmp	.+36     	; 0xc86 <USB_Device_ProcessControlRequest+0x208>
     c62:	ae 01       	movw	r20, r28
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c68:	60 91 3c 02 	lds	r22, 0x023C
     c6c:	f5 db       	rcall	.-2070   	; 0x458 <CALLBACK_USB_GetDescriptor>
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	09 f4       	brne	.+2      	; 0xc74 <USB_Device_ProcessControlRequest+0x1f6>
     c72:	3c c0       	rjmp	.+120    	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     c74:	20 91 e8 00 	lds	r18, 0x00E8
     c78:	27 7f       	andi	r18, 0xF7	; 247
     c7a:	20 93 e8 00 	sts	0x00E8, r18
     c7e:	bc 01       	movw	r22, r24
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	76 dc       	rcall	.-1812   	; 0x572 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c86:	80 91 e8 00 	lds	r24, 0x00E8
     c8a:	8b 77       	andi	r24, 0x7B	; 123
     c8c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c90:	2d c0       	rjmp	.+90     	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     c92:	90 38       	cpi	r25, 0x80	; 128
     c94:	59 f5       	brne	.+86     	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     c96:	80 91 e8 00 	lds	r24, 0x00E8
     c9a:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca0:	80 91 34 02 	lds	r24, 0x0234
     ca4:	80 93 f1 00 	sts	0x00F1, r24
     ca8:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cac:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cb2:	2f dd       	rcall	.-1442   	; 0x712 <Endpoint_ClearStatusStage>
     cb4:	1b c0       	rjmp	.+54     	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     cb6:	91 11       	cpse	r25, r1
     cb8:	19 c0       	rjmp	.+50     	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
     cba:	90 91 3a 02 	lds	r25, 0x023A
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cbe:	92 30       	cpi	r25, 0x02	; 2
     cc0:	a8 f4       	brcc	.+42     	; 0xcec <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cc2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cc6:	87 7f       	andi	r24, 0xF7	; 247
     cc8:	80 93 e8 00 	sts	0x00E8, r24
     ccc:	90 93 34 02 	sts	0x0234, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd0:	20 dd       	rcall	.-1472   	; 0x712 <Endpoint_ClearStatusStage>
     cd2:	80 91 34 02 	lds	r24, 0x0234
     cd6:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <USB_Device_ProcessControlRequest+0x264>
     cda:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cde:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <USB_Device_ProcessControlRequest+0x268>
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x26a>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ce8:	8e bb       	out	0x1e, r24	; 30
     cea:	2b db       	rcall	.-2474   	; 0x342 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cec:	80 91 e8 00 	lds	r24, 0x00E8
     cf0:	83 ff       	sbrs	r24, 3
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <USB_Device_ProcessControlRequest+0x28a>
     cf4:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cfe:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d02:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d04:	80 93 eb 00 	sts	0x00EB, r24
     d08:	aa 96       	adiw	r28, 0x2a	; 42
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d18:	1f 91       	pop	r17
     d1a:	08 95       	ret

00000d1c <USB_Event_Stub>:
     d1c:	08 95       	ret

00000d1e <USB_USBTask>:
     d1e:	cf 93       	push	r28
     d20:	8e b3       	in	r24, 0x1e	; 30
     d22:	88 23       	and	r24, r24
     d24:	a9 f0       	breq	.+42     	; 0xd50 <USB_USBTask+0x32>
     d26:	80 91 e9 00 	lds	r24, 0x00E9
     d2a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d2c:	90 91 ec 00 	lds	r25, 0x00EC
     d30:	90 ff       	sbrs	r25, 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <USB_USBTask+0x1a>
     d34:	90 e8       	ldi	r25, 0x80	; 128
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <USB_USBTask+0x1c>
     d38:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d3a:	c9 2f       	mov	r28, r25
     d3c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d42:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d46:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     d48:	9a de       	rcall	.-716    	; 0xa7e <USB_Device_ProcessControlRequest>
     d4a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d4c:	c0 93 e9 00 	sts	0x00E9, r28
     d50:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d52:	08 95       	ret

00000d54 <CDC_Device_ConfigureEndpoints>:
     d54:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     d5a:	fc 01       	movw	r30, r24
     d5c:	70 96       	adiw	r30, 0x10	; 16
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	df 01       	movw	r26, r30
     d62:	1d 92       	st	X+, r1
     d64:	8a 95       	dec	r24
     d66:	e9 f7       	brne	.-6      	; 0xd62 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     d6c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	8f dc       	rcall	.-1762   	; 0x698 <Endpoint_ConfigureEndpointTable>
     d7a:	88 23       	and	r24, r24
     d7c:	61 f0       	breq	.+24     	; 0xd96 <CDC_Device_ConfigureEndpoints+0x42>
     d7e:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     d80:	ce 01       	movw	r24, r28
     d82:	06 96       	adiw	r24, 0x06	; 6
     d84:	89 dc       	rcall	.-1774   	; 0x698 <Endpoint_ConfigureEndpointTable>
     d86:	88 23       	and	r24, r24
     d88:	31 f0       	breq	.+12     	; 0xd96 <CDC_Device_ConfigureEndpoints+0x42>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d8e:	0b 96       	adiw	r24, 0x0b	; 11
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
	  return false;

	return true;
}
     d94:	81 cc       	rjmp	.-1790   	; 0x698 <Endpoint_ConfigureEndpointTable>
     d96:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
	  return false;

	return true;
}
     d9c:	08 95       	ret

00000d9e <CDC_Device_SendByte>:
     d9e:	cf 93       	push	r28
     da0:	c6 2f       	mov	r28, r22
     da2:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     da4:	24 30       	cpi	r18, 0x04	; 4
     da6:	f1 f4       	brne	.+60     	; 0xde4 <CDC_Device_SendByte+0x46>
     da8:	fc 01       	movw	r30, r24
     daa:	44 89       	ldd	r20, Z+20	; 0x14
     dac:	55 89       	ldd	r21, Z+21	; 0x15
     dae:	66 89       	ldd	r22, Z+22	; 0x16
     db0:	77 89       	ldd	r23, Z+23	; 0x17
     db2:	45 2b       	or	r20, r21
     db4:	46 2b       	or	r20, r22
     db6:	47 2b       	or	r20, r23
     db8:	a9 f0       	breq	.+42     	; 0xde4 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dba:	81 81       	ldd	r24, Z+1	; 0x01
     dbc:	8f 70       	andi	r24, 0x0F	; 15
     dbe:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     dc6:	85 ff       	sbrs	r24, 5
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dca:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
     dd6:	8e 77       	andi	r24, 0x7E	; 126
     dd8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ddc:	b9 dc       	rcall	.-1678   	; 0x750 <Endpoint_WaitUntilReady>
     dde:	88 23       	and	r24, r24
     de0:	a1 f3       	breq	.-24     	; 0xdca <CDC_Device_SendByte+0x2c>
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <CDC_Device_SendByte+0x48>
     de4:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     de6:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     de8:	08 95       	ret

00000dea <CDC_Device_Flush>:
     dea:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     dec:	24 30       	cpi	r18, 0x04	; 4
     dee:	31 f5       	brne	.+76     	; 0xe3c <CDC_Device_Flush+0x52>
     df0:	fc 01       	movw	r30, r24
     df2:	44 89       	ldd	r20, Z+20	; 0x14
     df4:	55 89       	ldd	r21, Z+21	; 0x15
     df6:	66 89       	ldd	r22, Z+22	; 0x16
     df8:	77 89       	ldd	r23, Z+23	; 0x17
     dfa:	45 2b       	or	r20, r21
     dfc:	46 2b       	or	r20, r22
     dfe:	47 2b       	or	r20, r23
     e00:	e9 f0       	breq	.+58     	; 0xe3c <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e02:	81 81       	ldd	r24, Z+1	; 0x01
     e04:	8f 70       	andi	r24, 0x0F	; 15
     e06:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     e0a:	80 91 f2 00 	lds	r24, 0x00F2
     e0e:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     e12:	89 2b       	or	r24, r25
     e14:	89 f0       	breq	.+34     	; 0xe38 <CDC_Device_Flush+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e16:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	8e 77       	andi	r24, 0x7E	; 126
     e20:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     e24:	95 fd       	sbrc	r25, 5
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <CDC_Device_Flush+0x4e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e28:	93 dc       	rcall	.-1754   	; 0x750 <Endpoint_WaitUntilReady>
     e2a:	81 11       	cpse	r24, r1
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <CDC_Device_Flush+0x54>
     e2e:	80 91 e8 00 	lds	r24, 0x00E8
     e32:	8e 77       	andi	r24, 0x7E	; 126
     e34:	80 93 e8 00 	sts	0x00E8, r24
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret
     e3c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e3e:	08 95       	ret

00000e40 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     e40:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e42:	24 30       	cpi	r18, 0x04	; 4
     e44:	89 f4       	brne	.+34     	; 0xe68 <CDC_Device_USBTask+0x28>
     e46:	fc 01       	movw	r30, r24
     e48:	44 89       	ldd	r20, Z+20	; 0x14
     e4a:	55 89       	ldd	r21, Z+21	; 0x15
     e4c:	66 89       	ldd	r22, Z+22	; 0x16
     e4e:	77 89       	ldd	r23, Z+23	; 0x17
     e50:	45 2b       	or	r20, r21
     e52:	46 2b       	or	r20, r22
     e54:	47 2b       	or	r20, r23
     e56:	41 f0       	breq	.+16     	; 0xe68 <CDC_Device_USBTask+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e58:	21 81       	ldd	r18, Z+1	; 0x01
     e5a:	2f 70       	andi	r18, 0x0F	; 15
     e5c:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e60:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     e64:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
     e66:	c1 cf       	rjmp	.-126    	; 0xdea <CDC_Device_Flush>
     e68:	08 95       	ret

00000e6a <CDC_Device_ReceiveByte>:
     e6a:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e6c:	24 30       	cpi	r18, 0x04	; 4
     e6e:	19 f0       	breq	.+6      	; 0xe76 <CDC_Device_ReceiveByte+0xc>
	  return -1;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
     e74:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e76:	fc 01       	movw	r30, r24
     e78:	44 89       	ldd	r20, Z+20	; 0x14
     e7a:	55 89       	ldd	r21, Z+21	; 0x15
     e7c:	66 89       	ldd	r22, Z+22	; 0x16
     e7e:	77 89       	ldd	r23, Z+23	; 0x17
     e80:	45 2b       	or	r20, r21
     e82:	46 2b       	or	r20, r22
     e84:	47 2b       	or	r20, r23
     e86:	a1 f3       	breq	.-24     	; 0xe70 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e88:	86 81       	ldd	r24, Z+6	; 0x06
     e8a:	8f 70       	andi	r24, 0x0F	; 15
     e8c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e90:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     e94:	82 ff       	sbrs	r24, 2
     e96:	ec cf       	rjmp	.-40     	; 0xe70 <CDC_Device_ReceiveByte+0x6>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     e98:	80 91 f2 00 	lds	r24, 0x00F2
     e9c:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     ea0:	89 2b       	or	r24, r25
     ea2:	21 f0       	breq	.+8      	; 0xeac <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ea4:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <CDC_Device_ReceiveByte+0x46>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     eac:	2f ef       	ldi	r18, 0xFF	; 255
     eae:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     eb0:	80 91 f2 00 	lds	r24, 0x00F2
     eb4:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     eb8:	89 2b       	or	r24, r25
     eba:	29 f4       	brne	.+10     	; 0xec6 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ebc:	80 91 e8 00 	lds	r24, 0x00E8
     ec0:	8b 77       	andi	r24, 0x7B	; 123
     ec2:	80 93 e8 00 	sts	0x00E8, r24
     ec6:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     ec8:	08 95       	ret

00000eca <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     eca:	08 95       	ret

00000ecc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ed6:	83 ff       	sbrs	r24, 3
     ed8:	a5 c0       	rjmp	.+330    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     eda:	88 81       	ld	r24, Y
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	20 91 3c 02 	lds	r18, 0x023C
     ee2:	30 91 3d 02 	lds	r19, 0x023D
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	09 f0       	breq	.+2      	; 0xeee <CDC_Device_ProcessControlRequest+0x22>
     eec:	9b c0       	rjmp	.+310    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	switch (USB_ControlRequest.bRequest)
     eee:	80 91 39 02 	lds	r24, 0x0239
     ef2:	81 32       	cpi	r24, 0x21	; 33
     ef4:	61 f0       	breq	.+24     	; 0xf0e <CDC_Device_ProcessControlRequest+0x42>
     ef6:	20 f4       	brcc	.+8      	; 0xf00 <CDC_Device_ProcessControlRequest+0x34>
     ef8:	80 32       	cpi	r24, 0x20	; 32
     efa:	09 f4       	brne	.+2      	; 0xefe <CDC_Device_ProcessControlRequest+0x32>
     efc:	3e c0       	rjmp	.+124    	; 0xf7a <CDC_Device_ProcessControlRequest+0xae>
     efe:	92 c0       	rjmp	.+292    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
     f00:	82 32       	cpi	r24, 0x22	; 34
     f02:	09 f4       	brne	.+2      	; 0xf06 <CDC_Device_ProcessControlRequest+0x3a>
     f04:	6b c0       	rjmp	.+214    	; 0xfdc <CDC_Device_ProcessControlRequest+0x110>
     f06:	83 32       	cpi	r24, 0x23	; 35
     f08:	09 f4       	brne	.+2      	; 0xf0c <CDC_Device_ProcessControlRequest+0x40>
     f0a:	7c c0       	rjmp	.+248    	; 0x1004 <CDC_Device_ProcessControlRequest+0x138>
     f0c:	8b c0       	rjmp	.+278    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f0e:	80 91 38 02 	lds	r24, 0x0238
     f12:	81 3a       	cpi	r24, 0xA1	; 161
     f14:	09 f0       	breq	.+2      	; 0xf18 <CDC_Device_ProcessControlRequest+0x4c>
     f16:	86 c0       	rjmp	.+268    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f18:	80 91 e8 00 	lds	r24, 0x00E8
     f1c:	87 7f       	andi	r24, 0xF7	; 247
     f1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f22:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     f26:	80 ff       	sbrs	r24, 0
     f28:	fc cf       	rjmp	.-8      	; 0xf22 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f2a:	4c 89       	ldd	r20, Y+20	; 0x14
     f2c:	5d 89       	ldd	r21, Y+21	; 0x15
     f2e:	6e 89       	ldd	r22, Y+22	; 0x16
     f30:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f32:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
     f36:	bb 27       	eor	r27, r27
     f38:	a7 2f       	mov	r26, r23
     f3a:	96 2f       	mov	r25, r22
     f3c:	85 2f       	mov	r24, r21
     f3e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     f42:	cb 01       	movw	r24, r22
     f44:	aa 27       	eor	r26, r26
     f46:	bb 27       	eor	r27, r27
     f48:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
     f4c:	47 2f       	mov	r20, r23
     f4e:	55 27       	eor	r21, r21
     f50:	66 27       	eor	r22, r22
     f52:	77 27       	eor	r23, r23
     f54:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     f58:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f5a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     f5e:	89 8d       	ldd	r24, Y+25	; 0x19
     f60:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     f64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f66:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f6a:	80 91 e8 00 	lds	r24, 0x00E8
     f6e:	8e 77       	andi	r24, 0x7E	; 126
     f70:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f78:	cc cb       	rjmp	.-2152   	; 0x712 <Endpoint_ClearStatusStage>
     f7a:	80 91 38 02 	lds	r24, 0x0238
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f7e:	81 32       	cpi	r24, 0x21	; 33
     f80:	09 f0       	breq	.+2      	; 0xf84 <CDC_Device_ProcessControlRequest+0xb8>
     f82:	50 c0       	rjmp	.+160    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
     f84:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f88:	87 7f       	andi	r24, 0xF7	; 247
     f8a:	80 93 e8 00 	sts	0x00E8, r24
     f8e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f92:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <CDC_Device_ProcessControlRequest+0xd2>
     f96:	8e b3       	in	r24, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f98:	81 11       	cpse	r24, r1
     f9a:	f9 cf       	rjmp	.-14     	; 0xf8e <CDC_Device_ProcessControlRequest+0xc2>
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
     f9e:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     fa2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     fa6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     faa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     fae:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     fb0:	2d 8b       	std	Y+21, r18	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	8f 8b       	std	Y+23, r24	; 0x17
     fb6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fba:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     fbc:	80 91 f1 00 	lds	r24, 0x00F1
     fc0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     fc2:	80 91 f1 00 	lds	r24, 0x00F1
     fc6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     fc8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fcc:	8b 77       	andi	r24, 0x7B	; 123
     fce:	80 93 e8 00 	sts	0x00E8, r24
     fd2:	9f db       	rcall	.-2242   	; 0x712 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     fd4:	ce 01       	movw	r24, r28
     fd6:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fd8:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     fda:	fb c9       	rjmp	.-3082   	; 0x3d2 <EVENT_CDC_Device_LineEncodingChanged>
     fdc:	80 91 38 02 	lds	r24, 0x0238
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fe0:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fe2:	01 f5       	brne	.+64     	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
     fe4:	80 91 e8 00 	lds	r24, 0x00E8
     fe8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fea:	80 93 e8 00 	sts	0x00E8, r24
     fee:	91 db       	rcall	.-2270   	; 0x712 <Endpoint_ClearStatusStage>
     ff0:	80 91 3a 02 	lds	r24, 0x023A
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ff4:	90 91 3b 02 	lds	r25, 0x023B

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     ff8:	99 8b       	std	Y+17, r25	; 0x11
     ffa:	88 8b       	std	Y+16, r24	; 0x10
     ffc:	ce 01       	movw	r24, r28
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	63 cf       	rjmp	.-314    	; 0xeca <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1004:	80 91 38 02 	lds	r24, 0x0238
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1008:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    100a:	61 f4       	brne	.+24     	; 0x1024 <CDC_Device_ProcessControlRequest+0x158>
    100c:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1010:	87 7f       	andi	r24, 0xF7	; 247
    1012:	80 93 e8 00 	sts	0x00E8, r24
    1016:	7d db       	rcall	.-2310   	; 0x712 <Endpoint_ClearStatusStage>
    1018:	60 91 3a 02 	lds	r22, 0x023A
    101c:	ce 01       	movw	r24, r28
    101e:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1020:	cf 91       	pop	r28
    1022:	53 cf       	rjmp	.-346    	; 0xeca <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <__udivmodsi4>:
			}

			break;
	}
}
    102a:	a1 e2       	ldi	r26, 0x21	; 33
    102c:	1a 2e       	mov	r1, r26
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    102e:	aa 1b       	sub	r26, r26
    1030:	bb 1b       	sub	r27, r27
			}

			break;
	}
}
    1032:	fd 01       	movw	r30, r26
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <__udivmodsi4_ep>

00001036 <__udivmodsi4_loop>:
    1036:	aa 1f       	adc	r26, r26
    1038:	bb 1f       	adc	r27, r27
    103a:	ee 1f       	adc	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	a2 17       	cp	r26, r18
    1040:	b3 07       	cpc	r27, r19
    1042:	e4 07       	cpc	r30, r20
    1044:	f5 07       	cpc	r31, r21
    1046:	20 f0       	brcs	.+8      	; 0x1050 <__udivmodsi4_ep>
    1048:	a2 1b       	sub	r26, r18
    104a:	b3 0b       	sbc	r27, r19
    104c:	e4 0b       	sbc	r30, r20
    104e:	f5 0b       	sbc	r31, r21

00001050 <__udivmodsi4_ep>:
    1050:	66 1f       	adc	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	1a 94       	dec	r1
    105a:	69 f7       	brne	.-38     	; 0x1036 <__udivmodsi4_loop>
    105c:	60 95       	com	r22
    105e:	70 95       	com	r23
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	9b 01       	movw	r18, r22
    1066:	ac 01       	movw	r20, r24
    1068:	bd 01       	movw	r22, r26
    106a:	cf 01       	movw	r24, r30
    106c:	08 95       	ret

0000106e <_exit>:
    106e:	f8 94       	cli

00001070 <__stop_program>:
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <__stop_program>


DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  00000f9c  00001030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800188  00800188  000010b8  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000658  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a6ea  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ae9  00000000  00000000  0000ca12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003fee  00000000  00000000  0000f4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f30  00000000  00000000  000134ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004156  00000000  00000000  0001441c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006672  00000000  00000000  00018572  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f8  00000000  00000000  0001ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	aa c3       	rjmp	.+1876   	; 0x77e <__vector_10>
  2a:	00 00       	nop
  2c:	77 c4       	rjmp	.+2286   	; 0x91c <__vector_11>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     &.L.U.F.A. .D.u.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
  a8:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
	{
		uint8_t  HIDReportItem  = *ReportData;
  de:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
  ee:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
  fe:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 10e:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 05 07     ................
 11e:	05 81 02 10 00 05 08 0b 02 02 02 02 01 00 09 04     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
 12e:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
 13e:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
 14e:	02 0a 00 00 00 07 05 05 02 10 00 05 07 05 84 02     ................

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
 15e:	10 00 05                                            ...

00000161 <DeviceDescriptor>:
 161:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
 171:	dc 01 00                                            ...

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
				ReportSize     -= 1;
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
				ReportData     += 1;
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	ec e9       	ldi	r30, 0x9C	; 156
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a8 38       	cpi	r26, 0x88	; 136
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	a8 e8       	ldi	r26, 0x88	; 136
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	a6 39       	cpi	r26, 0x96	; 150
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
 1aa:	5c d0       	rcall	.+184    	; 0x264 <main>
 1ac:	f5 c6       	rjmp	.+3562   	; 0xf98 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <LEDs_SetAllLEDs>:
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	9f 70       	andi	r25, 0x0F	; 15
				break;
 1b4:	98 2b       	or	r25, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1b6:	9b b9       	out	0x0b, r25	; 11
 1b8:	08 95       	ret

000001ba <SetupHardware>:
 1ba:	84 b7       	in	r24, 0x34	; 52
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	84 bf       	out	0x34, r24	; 52
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	80 93 60 00 	sts	0x0060, r24
 1ca:	10 92 60 00 	sts	0x0060, r1
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0f b6       	in	r0, 0x3f	; 63
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
 1d6:	f8 94       	cli
 1d8:	80 93 61 00 	sts	0x0061, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1dc:	90 93 61 00 	sts	0x0061, r25
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	8f 71       	andi	r24, 0x1F	; 31
 1e6:	84 b9       	out	0x04, r24	; 4
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
 1e8:	8d b1       	in	r24, 0x0d	; 13
 1ea:	8f 7c       	andi	r24, 0xCF	; 207
				break;
 1ec:	8d b9       	out	0x0d, r24	; 13
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	80 6e       	ori	r24, 0xE0	; 224
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	8e b1       	in	r24, 0x0e	; 14
 1f6:	80 63       	ori	r24, 0x30	; 48
 1f8:	8e b9       	out	0x0e, r24	; 14
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 6f       	ori	r24, 0xF0	; 240
 1fe:	8a b9       	out	0x0a, r24	; 10
 200:	8b b1       	in	r24, 0x0b	; 11
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	8b b9       	out	0x0b, r24	; 11
				break;
 206:	a0 c2       	rjmp	.+1344   	; 0x748 <USB_Init>

00000208 <CheckJoystickMovement>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
 208:	93 b1       	in	r25, 0x03	; 3
 20a:	8c b1       	in	r24, 0x0c	; 12
 20c:	80 95       	com	r24
 20e:	80 73       	andi	r24, 0x30	; 48
 210:	86 95       	lsr	r24
 212:	90 95       	com	r25
 214:	90 7e       	andi	r25, 0xE0	; 224
 216:	89 2b       	or	r24, r25
 218:	87 fd       	sbrc	r24, 7
 21a:	0b c0       	rjmp	.+22     	; 0x232 <CheckJoystickMovement+0x2a>
 21c:	84 fd       	sbrc	r24, 4
 21e:	0c c0       	rjmp	.+24     	; 0x238 <CheckJoystickMovement+0x30>
 220:	86 fd       	sbrc	r24, 6
 222:	0d c0       	rjmp	.+26     	; 0x23e <CheckJoystickMovement+0x36>
 224:	83 fd       	sbrc	r24, 3
 226:	0e c0       	rjmp	.+28     	; 0x244 <CheckJoystickMovement+0x3c>
 228:	85 fd       	sbrc	r24, 5
 22a:	0f c0       	rjmp	.+30     	; 0x24a <CheckJoystickMovement+0x42>
 22c:	10 92 88 01 	sts	0x0188, r1
 230:	08 95       	ret
 232:	6a e7       	ldi	r22, 0x7A	; 122
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	0b c0       	rjmp	.+22     	; 0x24e <CheckJoystickMovement+0x46>
 238:	6a e6       	ldi	r22, 0x6A	; 106
 23a:	71 e0       	ldi	r23, 0x01	; 1
 23c:	08 c0       	rjmp	.+16     	; 0x24e <CheckJoystickMovement+0x46>
 23e:	6a e5       	ldi	r22, 0x5A	; 90
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	05 c0       	rjmp	.+10     	; 0x24e <CheckJoystickMovement+0x46>
 244:	69 e4       	ldi	r22, 0x49	; 73
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	02 c0       	rjmp	.+4      	; 0x24e <CheckJoystickMovement+0x46>
 24a:	66 e3       	ldi	r22, 0x36	; 54
 24c:	71 e0       	ldi	r23, 0x01	; 1
 24e:	80 91 88 01 	lds	r24, 0x0188
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
 252:	81 11       	cpse	r24, r1
 254:	06 c0       	rjmp	.+12     	; 0x262 <CheckJoystickMovement+0x5a>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 88 01 	sts	0x0188, r24
 25c:	8b e1       	ldi	r24, 0x1B	; 27
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	2f c5       	rjmp	.+2654   	; 0xcc0 <CDC_Device_SendString>
 262:	08 95       	ret

00000264 <main>:
 264:	aa df       	rcall	.-172    	; 0x1ba <SetupHardware>
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	a3 df       	rcall	.-186    	; 0x1b0 <LEDs_SetAllLEDs>
 26a:	78 94       	sei
 26c:	cd df       	rcall	.-102    	; 0x208 <CheckJoystickMovement>
 26e:	8b e1       	ldi	r24, 0x1B	; 27
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
 270:	91 e0       	ldi	r25, 0x01	; 1
				break;
 272:	b0 d5       	rcall	.+2912   	; 0xdd4 <CDC_Device_ReceiveByte>

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	ad d5       	rcall	.+2906   	; 0xdd4 <CDC_Device_ReceiveByte>
 27a:	97 fd       	sbrc	r25, 7
 27c:	04 c0       	rjmp	.+8      	; 0x286 <main+0x22>
 27e:	68 2f       	mov	r22, r24
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	91 e0       	ldi	r25, 0x01	; 1
				break;
 284:	3e d5       	rcall	.+2684   	; 0xd02 <CDC_Device_SendByte>

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
 286:	8b e1       	ldi	r24, 0x1B	; 27
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	8e d5       	rcall	.+2844   	; 0xda8 <CDC_Device_USBTask>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
				break;
 290:	8b d5       	rcall	.+2838   	; 0xda8 <CDC_Device_USBTask>

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
 292:	d5 d4       	rcall	.+2474   	; 0xc3e <USB_USBTask>
 294:	eb cf       	rjmp	.-42     	; 0x26c <main+0x8>

00000296 <EVENT_USB_Device_Connect>:
 296:	80 ea       	ldi	r24, 0xA0	; 160
 298:	8b cf       	rjmp	.-234    	; 0x1b0 <LEDs_SetAllLEDs>

0000029a <EVENT_USB_Device_Disconnect>:
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	89 cf       	rjmp	.-238    	; 0x1b0 <LEDs_SetAllLEDs>

0000029e <EVENT_USB_Device_ConfigurationChanged>:
 29e:	cf 93       	push	r28
				break;
 2a0:	8b e1       	ldi	r24, 0x1B	; 27

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	e8 d4       	rcall	.+2512   	; 0xc76 <CDC_Device_ConfigureEndpoints>
 2a6:	c8 2f       	mov	r28, r24
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2ac:	e4 d4       	rcall	.+2504   	; 0xc76 <CDC_Device_ConfigureEndpoints>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
 2ae:	88 23       	and	r24, r24
 2b0:	21 f0       	breq	.+8      	; 0x2ba <EVENT_USB_Device_ConfigurationChanged+0x1c>
 2b2:	cc 23       	and	r28, r28
 2b4:	11 f0       	breq	.+4      	; 0x2ba <EVENT_USB_Device_ConfigurationChanged+0x1c>
 2b6:	80 e6       	ldi	r24, 0x60	; 96
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <EVENT_USB_Device_ConfigurationChanged+0x1e>
 2ba:	80 e9       	ldi	r24, 0x90	; 144
				break;
 2bc:	cf 91       	pop	r28
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
 2be:	78 cf       	rjmp	.-272    	; 0x1b0 <LEDs_SetAllLEDs>

000002c0 <EVENT_USB_Device_ControlRequest>:
 2c0:	8b e1       	ldi	r24, 0x1B	; 27
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	b9 d5       	rcall	.+2930   	; 0xe38 <CDC_Device_ProcessControlRequest>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	b6 c5       	rjmp	.+2924   	; 0xe38 <CDC_Device_ProcessControlRequest>

000002cc <CALLBACK_USB_GetDescriptor>:
				break;
 2cc:	29 2f       	mov	r18, r25
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
 2ce:	33 27       	eor	r19, r19
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
				break;
 2d4:	59 f0       	breq	.+22     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x20>

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
 2d6:	23 30       	cpi	r18, 0x03	; 3
 2d8:	31 05       	cpc	r19, r1
 2da:	69 f0       	breq	.+26     	; 0x2f6 <CALLBACK_USB_GetDescriptor+0x2a>

				if (ParserData->UsingReportIDs)
 2dc:	21 30       	cpi	r18, 0x01	; 1
 2de:	31 05       	cpc	r19, r1
 2e0:	f9 f4       	brne	.+62     	; 0x320 <CALLBACK_USB_GetDescriptor+0x54>
 2e2:	82 e1       	ldi	r24, 0x12	; 18
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	21 e6       	ldi	r18, 0x61	; 97
 2e8:	31 e0       	ldi	r19, 0x01	; 1
 2ea:	1e c0       	rjmp	.+60     	; 0x328 <CALLBACK_USB_GetDescriptor+0x5c>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
 2ec:	83 e8       	ldi	r24, 0x83	; 131
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	2e ed       	ldi	r18, 0xDE	; 222
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	19 c0       	rjmp	.+50     	; 0x328 <CALLBACK_USB_GetDescriptor+0x5c>
 2f6:	99 27       	eor	r25, r25
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	41 f0       	breq	.+16     	; 0x30e <CALLBACK_USB_GetDescriptor+0x42>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	91 05       	cpc	r25, r1
 302:	41 f0       	breq	.+16     	; 0x314 <CALLBACK_USB_GetDescriptor+0x48>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
 304:	89 2b       	or	r24, r25
 306:	61 f4       	brne	.+24     	; 0x320 <CALLBACK_USB_GetDescriptor+0x54>
 308:	ea ed       	ldi	r30, 0xDA	; 218
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	05 c0       	rjmp	.+10     	; 0x318 <CALLBACK_USB_GetDescriptor+0x4c>
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <CALLBACK_USB_GetDescriptor+0x4c>
 314:	e8 e9       	ldi	r30, 0x98	; 152
 316:	f0 e0       	ldi	r31, 0x00	; 0
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
 318:	84 91       	lpm	r24, Z
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9f 01       	movw	r18, r30
 31e:	04 c0       	rjmp	.+8      	; 0x328 <CALLBACK_USB_GetDescriptor+0x5c>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	fa 01       	movw	r30, r20
 32a:	31 83       	std	Z+1, r19	; 0x01
 32c:	20 83       	st	Z, r18
 32e:	08 95       	ret

00000330 <Endpoint_Write_Stream_LE>:
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
 33e:	df 93       	push	r29
 340:	7c 01       	movw	r14, r24
 342:	8b 01       	movw	r16, r22
 344:	ea 01       	movw	r28, r20
 346:	8b d1       	rcall	.+790    	; 0x65e <Endpoint_WaitUntilReady>
 348:	81 11       	cpse	r24, r1
 34a:	30 c0       	rjmp	.+96     	; 0x3ac <Endpoint_Write_Stream_LE+0x7c>
 34c:	20 97       	sbiw	r28, 0x00	; 0
 34e:	31 f0       	breq	.+12     	; 0x35c <Endpoint_Write_Stream_LE+0x2c>
 350:	88 81       	ld	r24, Y
 352:	99 81       	ldd	r25, Y+1	; 0x01
 354:	08 1b       	sub	r16, r24
 356:	19 0b       	sbc	r17, r25
 358:	e8 0e       	add	r14, r24
 35a:	f9 1e       	adc	r15, r25
 35c:	c1 2c       	mov	r12, r1
 35e:	d1 2c       	mov	r13, r1
 360:	01 15       	cp	r16, r1
 362:	11 05       	cpc	r17, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
 364:	11 f1       	breq	.+68     	; 0x3aa <Endpoint_Write_Stream_LE+0x7a>
 366:	80 91 e8 00 	lds	r24, 0x00E8
 36a:	85 fd       	sbrc	r24, 5
					}
				}

				ParserData->UsingReportIDs = true;
 36c:	13 c0       	rjmp	.+38     	; 0x394 <Endpoint_Write_Stream_LE+0x64>
 36e:	80 91 e8 00 	lds	r24, 0x00E8
 372:	8e 77       	andi	r24, 0x7E	; 126
 374:	80 93 e8 00 	sts	0x00E8, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
 378:	20 97       	sbiw	r28, 0x00	; 0
 37a:	41 f0       	breq	.+16     	; 0x38c <Endpoint_Write_Stream_LE+0x5c>
 37c:	88 81       	ld	r24, Y
 37e:	99 81       	ldd	r25, Y+1	; 0x01
 380:	8c 0d       	add	r24, r12
 382:	9d 1d       	adc	r25, r13
 384:	99 83       	std	Y+1, r25	; 0x01
 386:	88 83       	st	Y, r24
				break;
 388:	85 e0       	ldi	r24, 0x05	; 5

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
 38a:	10 c0       	rjmp	.+32     	; 0x3ac <Endpoint_Write_Stream_LE+0x7c>
 38c:	68 d1       	rcall	.+720    	; 0x65e <Endpoint_WaitUntilReady>
 38e:	88 23       	and	r24, r24
 390:	39 f3       	breq	.-50     	; 0x360 <Endpoint_Write_Stream_LE+0x30>
 392:	0c c0       	rjmp	.+24     	; 0x3ac <Endpoint_Write_Stream_LE+0x7c>
 394:	f7 01       	movw	r30, r14
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
 396:	81 91       	ld	r24, Z+
 398:	7f 01       	movw	r14, r30
 39a:	80 93 f1 00 	sts	0x00F1, r24
 39e:	01 50       	subi	r16, 0x01	; 1
 3a0:	11 09       	sbc	r17, r1
 3a2:	ff ef       	ldi	r31, 0xFF	; 255
 3a4:	cf 1a       	sub	r12, r31
 3a6:	df 0a       	sbc	r13, r31
 3a8:	db cf       	rjmp	.-74     	; 0x360 <Endpoint_Write_Stream_LE+0x30>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
				break;
 3b0:	1f 91       	pop	r17
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <Endpoint_Write_Control_Stream_LE>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
 3be:	20 91 94 01 	lds	r18, 0x0194
 3c2:	30 91 95 01 	lds	r19, 0x0195
 3c6:	26 17       	cp	r18, r22
 3c8:	37 07       	cpc	r19, r23
 3ca:	48 f0       	brcs	.+18     	; 0x3de <Endpoint_Write_Control_Stream_LE+0x20>
 3cc:	61 15       	cp	r22, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
 3ce:	71 05       	cpc	r23, r1
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x22>
 3d2:	20 91 e8 00 	lds	r18, 0x00E8

					while (CurrCollectionPath->Parent != NULL)
 3d6:	2e 77       	andi	r18, 0x7E	; 126
 3d8:	20 93 e8 00 	sts	0x00E8, r18
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x22>
 3de:	b9 01       	movw	r22, r18
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	99 f1       	breq	.+102    	; 0x450 <Endpoint_Write_Control_Stream_LE+0x92>
 3ea:	80 91 8d 01 	lds	r24, 0x018D
 3ee:	88 23       	and	r24, r24
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
 3f0:	e9 f1       	breq	.+122    	; 0x46c <Endpoint_Write_Control_Stream_LE+0xae>
 3f2:	85 30       	cpi	r24, 0x05	; 5
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
 3f4:	e9 f1       	breq	.+122    	; 0x470 <Endpoint_Write_Control_Stream_LE+0xb2>
 3f6:	80 91 e8 00 	lds	r24, 0x00E8
 3fa:	83 fd       	sbrc	r24, 3
 3fc:	3b c0       	rjmp	.+118    	; 0x474 <Endpoint_Write_Control_Stream_LE+0xb6>
 3fe:	80 91 e8 00 	lds	r24, 0x00E8
 402:	82 ff       	sbrs	r24, 2
 404:	06 c0       	rjmp	.+12     	; 0x412 <Endpoint_Write_Control_Stream_LE+0x54>
 406:	80 91 e8 00 	lds	r24, 0x00E8
				}

				CurrCollectionPath->Type       = ReportItemData;
 40a:	82 ff       	sbrs	r24, 2
 40c:	24 c0       	rjmp	.+72     	; 0x456 <Endpoint_Write_Control_Stream_LE+0x98>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
 412:	80 91 e8 00 	lds	r24, 0x00E8
 416:	80 ff       	sbrs	r24, 0
 418:	e5 cf       	rjmp	.-54     	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x26>
 41a:	80 91 f2 00 	lds	r24, 0x00F2
 41e:	90 91 f3 00 	lds	r25, 0x00F3

				if (UsageListSize)
 422:	61 15       	cp	r22, r1
 424:	71 05       	cpc	r23, r1
 426:	51 f0       	breq	.+20     	; 0x43c <Endpoint_Write_Control_Stream_LE+0x7e>
 428:	88 30       	cpi	r24, 0x08	; 8
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
 42a:	91 05       	cpc	r25, r1
 42c:	38 f4       	brcc	.+14     	; 0x43c <Endpoint_Write_Control_Stream_LE+0x7e>
 42e:	21 91       	ld	r18, Z+
 430:	20 93 f1 00 	sts	0x00F1, r18
 434:	61 50       	subi	r22, 0x01	; 1
 436:	71 09       	sbc	r23, r1
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <Endpoint_Write_Control_Stream_LE+0x64>
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	08 97       	sbiw	r24, 0x08	; 8

					for (uint8_t i = 1; i < UsageListSize; i++)
 440:	09 f0       	breq	.+2      	; 0x444 <Endpoint_Write_Control_Stream_LE+0x86>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	80 91 e8 00 	lds	r24, 0x00E8
 448:	8e 77       	andi	r24, 0x7E	; 126
 44a:	80 93 e8 00 	sts	0x00E8, r24
					  UsageList[i - 1] = UsageList[i];
 44e:	ca cf       	rjmp	.-108    	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x26>
 450:	21 11       	cpse	r18, r1
 452:	cb cf       	rjmp	.-106    	; 0x3ea <Endpoint_Write_Control_Stream_LE+0x2c>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
 454:	d8 cf       	rjmp	.-80     	; 0x406 <Endpoint_Write_Control_Stream_LE+0x48>
 456:	80 91 8d 01 	lds	r24, 0x018D
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
 45a:	88 23       	and	r24, r24
 45c:	39 f0       	breq	.+14     	; 0x46c <Endpoint_Write_Control_Stream_LE+0xae>
 45e:	85 30       	cpi	r24, 0x05	; 5
 460:	39 f0       	breq	.+14     	; 0x470 <Endpoint_Write_Control_Stream_LE+0xb2>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 462:	80 91 e8 00 	lds	r24, 0x00E8
 466:	83 ff       	sbrs	r24, 3
 468:	ce cf       	rjmp	.-100    	; 0x406 <Endpoint_Write_Control_Stream_LE+0x48>
 46a:	04 c0       	rjmp	.+8      	; 0x474 <Endpoint_Write_Control_Stream_LE+0xb6>
 46c:	82 e0       	ldi	r24, 0x02	; 2
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
 46e:	08 95       	ret
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	08 95       	ret
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	08 95       	ret

00000478 <Endpoint_Write_Control_PStream_LE>:
 478:	20 91 94 01 	lds	r18, 0x0194
 47c:	30 91 95 01 	lds	r19, 0x0195
 480:	26 17       	cp	r18, r22
 482:	37 07       	cpc	r19, r23
 484:	48 f0       	brcs	.+18     	; 0x498 <Endpoint_Write_Control_PStream_LE+0x20>
 486:	61 15       	cp	r22, r1
 488:	71 05       	cpc	r23, r1
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
 48a:	39 f4       	brne	.+14     	; 0x49a <Endpoint_Write_Control_PStream_LE+0x22>
 48c:	20 91 e8 00 	lds	r18, 0x00E8
 490:	2e 77       	andi	r18, 0x7E	; 126
 492:	20 93 e8 00 	sts	0x00E8, r18
 496:	01 c0       	rjmp	.+2      	; 0x49a <Endpoint_Write_Control_PStream_LE+0x22>
 498:	b9 01       	movw	r22, r18
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
 49a:	fc 01       	movw	r30, r24
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	61 15       	cp	r22, r1
 4a0:	71 05       	cpc	r23, r1
 4a2:	b1 f1       	breq	.+108    	; 0x510 <Endpoint_Write_Control_PStream_LE+0x98>
 4a4:	80 91 8d 01 	lds	r24, 0x018D
 4a8:	88 23       	and	r24, r24
 4aa:	09 f4       	brne	.+2      	; 0x4ae <Endpoint_Write_Control_PStream_LE+0x36>
				break;
 4ac:	3f c0       	rjmp	.+126    	; 0x52c <Endpoint_Write_Control_PStream_LE+0xb4>
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
 4ae:	85 30       	cpi	r24, 0x05	; 5
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x3c>
 4b2:	3e c0       	rjmp	.+124    	; 0x530 <Endpoint_Write_Control_PStream_LE+0xb8>
 4b4:	80 91 e8 00 	lds	r24, 0x00E8
 4b8:	83 fd       	sbrc	r24, 3
 4ba:	3c c0       	rjmp	.+120    	; 0x534 <Endpoint_Write_Control_PStream_LE+0xbc>
 4bc:	80 91 e8 00 	lds	r24, 0x00E8
 4c0:	82 ff       	sbrs	r24, 2
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <Endpoint_Write_Control_PStream_LE+0x58>
 4c4:	80 91 e8 00 	lds	r24, 0x00E8
 4c8:	82 ff       	sbrs	r24, 2
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 4ca:	25 c0       	rjmp	.+74     	; 0x516 <Endpoint_Write_Control_PStream_LE+0x9e>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	80 91 e8 00 	lds	r24, 0x00E8
 4d4:	80 ff       	sbrs	r24, 0
 4d6:	e3 cf       	rjmp	.-58     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x26>
 4d8:	80 91 f2 00 	lds	r24, 0x00F2
 4dc:	90 91 f3 00 	lds	r25, 0x00F3
 4e0:	61 15       	cp	r22, r1
 4e2:	71 05       	cpc	r23, r1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
 4e4:	59 f0       	breq	.+22     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0x84>
 4e6:	88 30       	cpi	r24, 0x08	; 8
 4e8:	91 05       	cpc	r25, r1
 4ea:	40 f4       	brcc	.+16     	; 0x4fc <Endpoint_Write_Control_PStream_LE+0x84>
 4ec:	24 91       	lpm	r18, Z
 4ee:	20 93 f1 00 	sts	0x00F1, r18
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
 4f2:	31 96       	adiw	r30, 0x01	; 1
 4f4:	61 50       	subi	r22, 0x01	; 1
 4f6:	71 09       	sbc	r23, r1
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	f2 cf       	rjmp	.-28     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0x68>
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	08 97       	sbiw	r24, 0x08	; 8
 500:	09 f0       	breq	.+2      	; 0x504 <Endpoint_Write_Control_PStream_LE+0x8c>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	80 91 e8 00 	lds	r24, 0x00E8
					NewReportItem.CollectionPath = CurrCollectionPath;
 508:	8e 77       	andi	r24, 0x7E	; 126
 50a:	80 93 e8 00 	sts	0x00E8, r24
 50e:	c7 cf       	rjmp	.-114    	; 0x49e <Endpoint_Write_Control_PStream_LE+0x26>
 510:	21 11       	cpse	r18, r1
 512:	c8 cf       	rjmp	.-112    	; 0x4a4 <Endpoint_Write_Control_PStream_LE+0x2c>
 514:	d7 cf       	rjmp	.-82     	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x4c>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
 516:	80 91 8d 01 	lds	r24, 0x018D
 51a:	88 23       	and	r24, r24
 51c:	39 f0       	breq	.+14     	; 0x52c <Endpoint_Write_Control_PStream_LE+0xb4>

					if (UsageListSize)
 51e:	85 30       	cpi	r24, 0x05	; 5
 520:	39 f0       	breq	.+14     	; 0x530 <Endpoint_Write_Control_PStream_LE+0xb8>
 522:	80 91 e8 00 	lds	r24, 0x00E8
 526:	83 ff       	sbrs	r24, 3
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
 528:	cd cf       	rjmp	.-102    	; 0x4c4 <Endpoint_Write_Control_PStream_LE+0x4c>
 52a:	04 c0       	rjmp	.+8      	; 0x534 <Endpoint_Write_Control_PStream_LE+0xbc>
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	08 95       	ret
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	08 95       	ret
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	08 95       	ret

00000538 <Endpoint_ConfigureEndpoint_Prv>:
 538:	98 2f       	mov	r25, r24
 53a:	97 30       	cpi	r25, 0x07	; 7
 53c:	58 f5       	brcc	.+86     	; 0x594 <Endpoint_ConfigureEndpoint_Prv+0x5c>

						for (uint8_t i = 1; i < UsageListSize; i++)
 53e:	90 93 e9 00 	sts	0x00E9, r25
 542:	98 17       	cp	r25, r24
 544:	39 f0       	breq	.+14     	; 0x554 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 546:	70 91 ec 00 	lds	r23, 0x00EC
						  UsageList[i - 1] = UsageList[i];
 54a:	20 91 ed 00 	lds	r18, 0x00ED
 54e:	50 91 f0 00 	lds	r21, 0x00F0

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
 552:	03 c0       	rjmp	.+6      	; 0x55a <Endpoint_ConfigureEndpoint_Prv+0x22>
 554:	24 2f       	mov	r18, r20
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
 556:	76 2f       	mov	r23, r22
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	21 ff       	sbrs	r18, 1
 55c:	19 c0       	rjmp	.+50     	; 0x590 <Endpoint_ConfigureEndpoint_Prv+0x58>
 55e:	30 91 eb 00 	lds	r19, 0x00EB
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
 562:	3e 7f       	andi	r19, 0xFE	; 254
 564:	30 93 eb 00 	sts	0x00EB, r19
 568:	30 91 ed 00 	lds	r19, 0x00ED
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
 56c:	3d 7f       	andi	r19, 0xFD	; 253
 56e:	30 93 ed 00 	sts	0x00ED, r19
 572:	30 91 eb 00 	lds	r19, 0x00EB
 576:	31 60       	ori	r19, 0x01	; 1
 578:	30 93 eb 00 	sts	0x00EB, r19
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
 57c:	70 93 ec 00 	sts	0x00EC, r23
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
 580:	20 93 ed 00 	sts	0x00ED, r18
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
 584:	50 93 f0 00 	sts	0x00F0, r21
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
 588:	20 91 ee 00 	lds	r18, 0x00EE
 58c:	27 ff       	sbrs	r18, 7
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
 58e:	07 c0       	rjmp	.+14     	; 0x59e <Endpoint_ConfigureEndpoint_Prv+0x66>
 590:	9f 5f       	subi	r25, 0xFF	; 255

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
 592:	d3 cf       	rjmp	.-90     	; 0x53a <Endpoint_ConfigureEndpoint_Prv+0x2>
 594:	8f 70       	andi	r24, 0x0F	; 15
 596:	80 93 e9 00 	sts	0x00E9, r24
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret

000005a2 <Endpoint_ConfigureEndpointTable>:
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	06 2f       	mov	r16, r22

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
 5ac:	ec 01       	movw	r28, r24
 5ae:	10 e0       	ldi	r17, 0x00	; 0
 5b0:	10 17       	cp	r17, r16
 5b2:	71 f1       	breq	.+92     	; 0x610 <Endpoint_ConfigureEndpointTable+0x6e>
 5b4:	98 81       	ld	r25, Y
 5b6:	99 23       	and	r25, r25
 5b8:	41 f1       	breq	.+80     	; 0x60a <Endpoint_ConfigureEndpointTable+0x68>
 5ba:	2c 81       	ldd	r18, Y+4	; 0x04

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
 5bc:	e9 81       	ldd	r30, Y+1	; 0x01
 5be:	fa 81       	ldd	r31, Y+2	; 0x02
 5c0:	7b 81       	ldd	r23, Y+3	; 0x03
 5c2:	89 2f       	mov	r24, r25
 5c4:	8f 70       	andi	r24, 0x0F	; 15
 5c6:	87 30       	cpi	r24, 0x07	; 7
 5c8:	10 f0       	brcs	.+4      	; 0x5ce <Endpoint_ConfigureEndpointTable+0x2c>
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	22 c0       	rjmp	.+68     	; 0x612 <Endpoint_ConfigureEndpointTable+0x70>
 5ce:	22 30       	cpi	r18, 0x02	; 2
 5d0:	10 f0       	brcs	.+4      	; 0x5d6 <Endpoint_ConfigureEndpointTable+0x34>
 5d2:	56 e0       	ldi	r21, 0x06	; 6
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <Endpoint_ConfigureEndpointTable+0x36>
 5d6:	52 e0       	ldi	r21, 0x02	; 2
 5d8:	28 e0       	ldi	r18, 0x08	; 8
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	2e 17       	cp	r18, r30
 5e0:	3f 07       	cpc	r19, r31
 5e2:	20 f4       	brcc	.+8      	; 0x5ec <Endpoint_ConfigureEndpointTable+0x4a>
 5e4:	4f 5f       	subi	r20, 0xFF	; 255
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	f9 cf       	rjmp	.-14     	; 0x5de <Endpoint_ConfigureEndpointTable+0x3c>
 5ec:	42 95       	swap	r20
 5ee:	40 7f       	andi	r20, 0xF0	; 240
 5f0:	45 2b       	or	r20, r21
 5f2:	69 2f       	mov	r22, r25

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
 5f4:	66 1f       	adc	r22, r22
 5f6:	66 27       	eor	r22, r22
 5f8:	66 1f       	adc	r22, r22
 5fa:	90 e4       	ldi	r25, 0x40	; 64
 5fc:	79 9f       	mul	r23, r25
					  return HID_PARSE_InsufficientReportItems;
 5fe:	90 01       	movw	r18, r0
 600:	11 24       	eor	r1, r1

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
 602:	62 2b       	or	r22, r18
 604:	99 df       	rcall	.-206    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
 606:	88 23       	and	r24, r24
 608:	01 f3       	breq	.-64     	; 0x5ca <Endpoint_ConfigureEndpointTable+0x28>
 60a:	1f 5f       	subi	r17, 0xFF	; 255
 60c:	25 96       	adiw	r28, 0x05	; 5
 60e:	d0 cf       	rjmp	.-96     	; 0x5b0 <Endpoint_ConfigureEndpointTable+0xe>
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	08 95       	ret

0000061c <Endpoint_ClearStatusStage>:
 61c:	80 91 8e 01 	lds	r24, 0x018E
 620:	87 fd       	sbrc	r24, 7
 622:	05 c0       	rjmp	.+10     	; 0x62e <Endpoint_ClearStatusStage+0x12>
 624:	80 91 e8 00 	lds	r24, 0x00E8
 628:	80 ff       	sbrs	r24, 0
 62a:	0e c0       	rjmp	.+28     	; 0x648 <Endpoint_ClearStatusStage+0x2c>
 62c:	12 c0       	rjmp	.+36     	; 0x652 <Endpoint_ClearStatusStage+0x36>
 62e:	80 91 e8 00 	lds	r24, 0x00E8
 632:	82 fd       	sbrc	r24, 2
 634:	05 c0       	rjmp	.+10     	; 0x640 <Endpoint_ClearStatusStage+0x24>
 636:	80 91 8d 01 	lds	r24, 0x018D
 63a:	81 11       	cpse	r24, r1
 63c:	f8 cf       	rjmp	.-16     	; 0x62e <Endpoint_ClearStatusStage+0x12>
 63e:	08 95       	ret
 640:	80 91 e8 00 	lds	r24, 0x00E8
 644:	8b 77       	andi	r24, 0x7B	; 123
 646:	08 c0       	rjmp	.+16     	; 0x658 <Endpoint_ClearStatusStage+0x3c>
 648:	80 91 8d 01 	lds	r24, 0x018D
 64c:	81 11       	cpse	r24, r1
 64e:	ea cf       	rjmp	.-44     	; 0x624 <Endpoint_ClearStatusStage+0x8>
 650:	08 95       	ret
 652:	80 91 e8 00 	lds	r24, 0x00E8
 656:	8e 77       	andi	r24, 0x7E	; 126
 658:	80 93 e8 00 	sts	0x00E8, r24
 65c:	08 95       	ret

0000065e <Endpoint_WaitUntilReady>:
 65e:	80 91 e4 00 	lds	r24, 0x00E4
 662:	90 91 e5 00 	lds	r25, 0x00E5
 666:	45 e6       	ldi	r20, 0x65	; 101
 668:	20 91 ec 00 	lds	r18, 0x00EC
 66c:	20 ff       	sbrs	r18, 0
 66e:	21 c0       	rjmp	.+66     	; 0x6b2 <Endpoint_WaitUntilReady+0x54>
 670:	20 91 e8 00 	lds	r18, 0x00E8
 674:	20 fd       	sbrc	r18, 0
 676:	21 c0       	rjmp	.+66     	; 0x6ba <Endpoint_WaitUntilReady+0x5c>
 678:	20 91 8d 01 	lds	r18, 0x018D
 67c:	22 23       	and	r18, r18
 67e:	89 f0       	breq	.+34     	; 0x6a2 <Endpoint_WaitUntilReady+0x44>
 680:	25 30       	cpi	r18, 0x05	; 5
 682:	89 f0       	breq	.+34     	; 0x6a6 <Endpoint_WaitUntilReady+0x48>
 684:	20 91 eb 00 	lds	r18, 0x00EB
					  ParserData->TotalReportItems++;
 688:	25 fd       	sbrc	r18, 5
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <Endpoint_WaitUntilReady+0x4c>
 68c:	20 91 e4 00 	lds	r18, 0x00E4
 690:	30 91 e5 00 	lds	r19, 0x00E5

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
 694:	28 17       	cp	r18, r24
 696:	39 07       	cpc	r19, r25
 698:	39 f3       	breq	.-50     	; 0x668 <Endpoint_WaitUntilReady+0xa>
 69a:	41 50       	subi	r20, 0x01	; 1
 69c:	41 f0       	breq	.+16     	; 0x6ae <Endpoint_WaitUntilReady+0x50>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
 69e:	c9 01       	movw	r24, r18
 6a0:	e3 cf       	rjmp	.-58     	; 0x668 <Endpoint_WaitUntilReady+0xa>
 6a2:	82 e0       	ldi	r24, 0x02	; 2
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
 6a4:	08 95       	ret
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	08 95       	ret
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	08 95       	ret
		}
	}

	if (!(ParserData->TotalReportItems))
 6b2:	20 91 e8 00 	lds	r18, 0x00E8
 6b6:	22 ff       	sbrs	r18, 2
 6b8:	df cf       	rjmp	.-66     	; 0x678 <Endpoint_WaitUntilReady+0x1a>
	  return HID_PARSE_NoUnfilteredReportItems;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret

000006be <USB_ResetInterface>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
 6be:	0f 93       	push	r16
 6c0:	1f 93       	push	r17
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
 6c6:	4e d0       	rcall	.+156    	; 0x764 <USB_INT_DisableAllInterrupts>
 6c8:	55 d0       	rcall	.+170    	; 0x774 <USB_INT_ClearAllInterrupts>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
 6ca:	c8 ed       	ldi	r28, 0xD8	; 216
 6cc:	d0 e0       	ldi	r29, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
 6ce:	88 81       	ld	r24, Y
 6d0:	8f 77       	andi	r24, 0x7F	; 127
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
 6d2:	88 83       	st	Y, r24
 6d4:	88 81       	ld	r24, Y
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
 6d6:	80 68       	ori	r24, 0x80	; 128

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
 6d8:	88 83       	st	Y, r24
 6da:	88 81       	ld	r24, Y
 6dc:	8f 7d       	andi	r24, 0xDF	; 223
 6de:	88 83       	st	Y, r24
 6e0:	e7 ed       	ldi	r30, 0xD7	; 215
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	80 83       	st	Z, r24
 6ea:	19 bc       	out	0x29, r1	; 41
 6ec:	10 92 8d 01 	sts	0x018D, r1
 6f0:	10 92 89 01 	sts	0x0189, r1
 6f4:	10 92 8b 01 	sts	0x018B, r1
 6f8:	10 92 8a 01 	sts	0x018A, r1
 6fc:	00 ee       	ldi	r16, 0xE0	; 224
 6fe:	10 e0       	ldi	r17, 0x00	; 0
 700:	f8 01       	movw	r30, r16
 702:	80 81       	ld	r24, Z
 704:	8b 7f       	andi	r24, 0xFB	; 251
 706:	80 83       	st	Z, r24
 708:	88 81       	ld	r24, Y
 70a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 70c:	88 83       	st	Y, r24
 70e:	42 e0       	ldi	r20, 0x02	; 2
 710:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	11 df       	rcall	.-478    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
 716:	e1 ee       	ldi	r30, 0xE1	; 225
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 71c:	8e 7f       	andi	r24, 0xFE	; 254
 71e:	80 83       	st	Z, r24
 720:	e2 ee       	ldi	r30, 0xE2	; 226
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 726:	81 60       	ori	r24, 0x01	; 1
 728:	80 83       	st	Z, r24
 72a:	80 81       	ld	r24, Z
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 730:	f8 01       	movw	r30, r16
 732:	80 81       	ld	r24, Z
 734:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 736:	80 83       	st	Z, r24
 738:	88 81       	ld	r24, Y
 73a:	80 61       	ori	r24, 0x10	; 16
 73c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 744:	0f 91       	pop	r16
 746:	08 95       	ret

00000748 <USB_Init>:
 748:	e8 ed       	ldi	r30, 0xD8	; 216
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 74e:	8f 7e       	andi	r24, 0xEF	; 239
 750:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 752:	e7 ed       	ldi	r30, 0xD7	; 215
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	81 60       	ori	r24, 0x01	; 1
 75a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	80 93 8c 01 	sts	0x018C, r24

	USB_ResetInterface();
 762:	ad cf       	rjmp	.-166    	; 0x6be <USB_ResetInterface>

00000764 <USB_INT_DisableAllInterrupts>:
 764:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	8c 7f       	andi	r24, 0xFC	; 252
 76c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 76e:	10 92 e2 00 	sts	0x00E2, r1
 772:	08 95       	ret

00000774 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 774:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 778:	10 92 e1 00 	sts	0x00E1, r1
 77c:	08 95       	ret

0000077e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	0b b6       	in	r0, 0x3b	; 59
 78a:	0f 92       	push	r0
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7a4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7a8:	82 ff       	sbrs	r24, 2
 7aa:	0a c0       	rjmp	.+20     	; 0x7c0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
 7b0:	82 ff       	sbrs	r24, 2
 7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7b4:	80 91 e1 00 	lds	r24, 0x00E1
 7b8:	8b 7f       	andi	r24, 0xFB	; 251
 7ba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7be:	3e d2       	rcall	.+1148   	; 0xc3c <USB_Event_Stub>
 7c0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 7c4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 7c6:	1d c0       	rjmp	.+58     	; 0x802 <__vector_10+0x84>
 7c8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 7cc:	80 ff       	sbrs	r24, 0
 7ce:	19 c0       	rjmp	.+50     	; 0x802 <__vector_10+0x84>
 7d0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 7d4:	8e 7f       	andi	r24, 0xFE	; 254
 7d6:	80 93 da 00 	sts	0x00DA, r24
 7da:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7de:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7e0:	0c c0       	rjmp	.+24     	; 0x7fa <__vector_10+0x7c>
 7e2:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7e4:	89 bd       	out	0x29, r24	; 41
 7e6:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7e8:	89 bd       	out	0x29, r24	; 41
 7ea:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7ec:	00 fe       	sbrs	r0, 0
 7ee:	fd cf       	rjmp	.-6      	; 0x7ea <__vector_10+0x6c>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7f2:	80 93 8d 01 	sts	0x018D, r24
 7f6:	4f dd       	rcall	.-1378   	; 0x296 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 7f8:	04 c0       	rjmp	.+8      	; 0x802 <__vector_10+0x84>
 7fa:	19 bc       	out	0x29, r1	; 41
 7fc:	10 92 8d 01 	sts	0x018D, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 800:	4c dd       	rcall	.-1384   	; 0x29a <EVENT_USB_Device_Disconnect>
 802:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 806:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 808:	18 c0       	rjmp	.+48     	; 0x83a <__vector_10+0xbc>
 80a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 80e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 810:	14 c0       	rjmp	.+40     	; 0x83a <__vector_10+0xbc>
 812:	80 91 e2 00 	lds	r24, 0x00E2
 816:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 818:	80 93 e2 00 	sts	0x00E2, r24
 81c:	80 91 e2 00 	lds	r24, 0x00E2
 820:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 822:	80 93 e2 00 	sts	0x00E2, r24
 826:	80 91 d8 00 	lds	r24, 0x00D8
 82a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 82c:	80 93 d8 00 	sts	0x00D8, r24
 830:	19 bc       	out	0x29, r1	; 41
 832:	85 e0       	ldi	r24, 0x05	; 5
 834:	80 93 8d 01 	sts	0x018D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 838:	01 d2       	rcall	.+1026   	; 0xc3c <USB_Event_Stub>
 83a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 83e:	84 ff       	sbrs	r24, 4
 840:	2f c0       	rjmp	.+94     	; 0x8a0 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 842:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 846:	84 ff       	sbrs	r24, 4
 848:	2b c0       	rjmp	.+86     	; 0x8a0 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 84a:	8c e0       	ldi	r24, 0x0C	; 12
 84c:	89 bd       	out	0x29, r24	; 41
 84e:	8e e0       	ldi	r24, 0x0E	; 14
 850:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 852:	09 b4       	in	r0, 0x29	; 41
 854:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 856:	fd cf       	rjmp	.-6      	; 0x852 <__vector_10+0xd4>
 858:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 85c:	8f 7d       	andi	r24, 0xDF	; 223
 85e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 862:	80 91 e1 00 	lds	r24, 0x00E1
 866:	8f 7e       	andi	r24, 0xEF	; 239
 868:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 86c:	80 91 e2 00 	lds	r24, 0x00E2
 870:	8f 7e       	andi	r24, 0xEF	; 239
 872:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 876:	80 91 e2 00 	lds	r24, 0x00E2
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 880:	80 91 89 01 	lds	r24, 0x0189
 884:	88 23       	and	r24, r24
 886:	11 f0       	breq	.+4      	; 0x88c <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__vector_10+0x11c>
 88c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
 890:	87 ff       	sbrs	r24, 7
 892:	02 c0       	rjmp	.+4      	; 0x898 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 894:	83 e0       	ldi	r24, 0x03	; 3
 896:	01 c0       	rjmp	.+2      	; 0x89a <__vector_10+0x11c>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 93 8d 01 	sts	0x018D, r24
 89e:	ce d1       	rcall	.+924    	; 0xc3c <USB_Event_Stub>
 8a0:	80 91 e1 00 	lds	r24, 0x00E1
 8a4:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 8a6:	27 c0       	rjmp	.+78     	; 0x8f6 <__vector_10+0x178>
 8a8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8ac:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <__vector_10+0x178>
 8b0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8b4:	87 7f       	andi	r24, 0xF7	; 247
 8b6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	80 93 8d 01 	sts	0x018D, r24
 8c0:	10 92 89 01 	sts	0x0189, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8c4:	80 91 e1 00 	lds	r24, 0x00E1
 8c8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 8ca:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8ce:	80 91 e2 00 	lds	r24, 0x00E2
 8d2:	8e 7f       	andi	r24, 0xFE	; 254
 8d4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8d8:	80 91 e2 00 	lds	r24, 0x00E2
 8dc:	80 61       	ori	r24, 0x10	; 16
 8de:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	27 de       	rcall	.-946    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
 8ea:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8ee:	88 60       	ori	r24, 0x08	; 8
 8f0:	80 93 f0 00 	sts	0x00F0, r24
 8f4:	a3 d1       	rcall	.+838    	; 0xc3c <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 8f6:	ff 91       	pop	r31
 8f8:	ef 91       	pop	r30
 8fa:	bf 91       	pop	r27
 8fc:	af 91       	pop	r26
 8fe:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 900:	8f 91       	pop	r24
 902:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 904:	6f 91       	pop	r22
 906:	5f 91       	pop	r21
 908:	4f 91       	pop	r20
 90a:	3f 91       	pop	r19
 90c:	2f 91       	pop	r18
 90e:	0f 90       	pop	r0
 910:	0b be       	out	0x3b, r0	; 59
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

0000091c <__vector_11>:
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
 926:	0b b6       	in	r0, 0x3b	; 59
 928:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 92a:	2f 93       	push	r18
 92c:	3f 93       	push	r19
 92e:	4f 93       	push	r20
 930:	5f 93       	push	r21
 932:	6f 93       	push	r22
 934:	7f 93       	push	r23
 936:	8f 93       	push	r24
 938:	9f 93       	push	r25
 93a:	af 93       	push	r26
 93c:	bf 93       	push	r27
 93e:	cf 93       	push	r28
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 944:	c0 91 e9 00 	lds	r28, 0x00E9
 948:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 94a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 94e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 952:	80 91 f0 00 	lds	r24, 0x00F0
 956:	87 7f       	andi	r24, 0xF7	; 247
 958:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 95c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 95e:	1d d0       	rcall	.+58     	; 0x99a <USB_Device_ProcessControlRequest>
 960:	10 92 e9 00 	sts	0x00E9, r1
 964:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 968:	88 60       	ori	r24, 0x08	; 8
 96a:	80 93 f0 00 	sts	0x00F0, r24
 96e:	c0 93 e9 00 	sts	0x00E9, r28
 972:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 974:	ef 91       	pop	r30
 976:	cf 91       	pop	r28
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0b be       	out	0x3b, r0	; 59
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <USB_Device_ProcessControlRequest>:
 99a:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	aa 97       	sbiw	r28, 0x2a	; 42
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	ee e8       	ldi	r30, 0x8E	; 142
 9b2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9b4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ba:	21 e0       	ldi	r18, 0x01	; 1
 9bc:	e6 39       	cpi	r30, 0x96	; 150
 9be:	f2 07       	cpc	r31, r18
 9c0:	c9 f7       	brne	.-14     	; 0x9b4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9c2:	7e dc       	rcall	.-1796   	; 0x2c0 <EVENT_USB_Device_ControlRequest>
 9c4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9ca:	20 c1       	rjmp	.+576    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 9cc:	90 91 8e 01 	lds	r25, 0x018E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9d0:	80 91 8f 01 	lds	r24, 0x018F

		switch (USB_ControlRequest.bRequest)
 9d4:	85 30       	cpi	r24, 0x05	; 5
 9d6:	09 f4       	brne	.+2      	; 0x9da <USB_Device_ProcessControlRequest+0x40>
 9d8:	77 c0       	rjmp	.+238    	; 0xac8 <USB_Device_ProcessControlRequest+0x12e>
 9da:	30 f4       	brcc	.+12     	; 0x9e8 <USB_Device_ProcessControlRequest+0x4e>
 9dc:	81 30       	cpi	r24, 0x01	; 1
 9de:	81 f1       	breq	.+96     	; 0xa40 <USB_Device_ProcessControlRequest+0xa6>
 9e0:	68 f0       	brcs	.+26     	; 0x9fc <USB_Device_ProcessControlRequest+0x62>
 9e2:	83 30       	cpi	r24, 0x03	; 3
 9e4:	69 f1       	breq	.+90     	; 0xa40 <USB_Device_ProcessControlRequest+0xa6>
 9e6:	12 c1       	rjmp	.+548    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 9e8:	88 30       	cpi	r24, 0x08	; 8
 9ea:	09 f4       	brne	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0x54>
 9ec:	e1 c0       	rjmp	.+450    	; 0xbb0 <USB_Device_ProcessControlRequest+0x216>
 9ee:	89 30       	cpi	r24, 0x09	; 9
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0x5a>
 9f2:	f0 c0       	rjmp	.+480    	; 0xbd4 <USB_Device_ProcessControlRequest+0x23a>
 9f4:	86 30       	cpi	r24, 0x06	; 6
 9f6:	09 f0       	breq	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x60>
 9f8:	09 c1       	rjmp	.+530    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 9fa:	88 c0       	rjmp	.+272    	; 0xb0c <USB_Device_ProcessControlRequest+0x172>
 9fc:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9fe:	81 f0       	breq	.+32     	; 0xa20 <USB_Device_ProcessControlRequest+0x86>
 a00:	92 38       	cpi	r25, 0x82	; 130
 a02:	09 f0       	breq	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x6c>
 a04:	03 c1       	rjmp	.+518    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 a06:	80 91 92 01 	lds	r24, 0x0192
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a0a:	8f 70       	andi	r24, 0x0F	; 15
 a0c:	80 93 e9 00 	sts	0x00E9, r24
 a10:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a14:	85 fb       	bst	r24, 5
 a16:	88 27       	eor	r24, r24
 a18:	80 f9       	bld	r24, 0
 a1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <USB_Device_ProcessControlRequest+0x92>
 a20:	80 91 8a 01 	lds	r24, 0x018A
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a24:	90 91 8b 01 	lds	r25, 0x018B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a28:	91 11       	cpse	r25, r1
 a2a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a2c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a30:	97 7f       	andi	r25, 0xF7	; 247
 a32:	90 93 e8 00 	sts	0x00E8, r25
 a36:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a3a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a3e:	c3 c0       	rjmp	.+390    	; 0xbc6 <USB_Device_ProcessControlRequest+0x22c>
 a40:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a42:	2d 7f       	andi	r18, 0xFD	; 253
 a44:	09 f0       	breq	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0xae>
 a46:	e2 c0       	rjmp	.+452    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 a48:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a4a:	19 f0       	breq	.+6      	; 0xa52 <USB_Device_ProcessControlRequest+0xb8>
 a4c:	92 30       	cpi	r25, 0x02	; 2
 a4e:	61 f0       	breq	.+24     	; 0xa68 <USB_Device_ProcessControlRequest+0xce>
 a50:	dd c0       	rjmp	.+442    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 a52:	90 91 90 01 	lds	r25, 0x0190
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a56:	91 30       	cpi	r25, 0x01	; 1
 a58:	09 f0       	breq	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0xc2>
 a5a:	d8 c0       	rjmp	.+432    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 a5c:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a5e:	09 f0       	breq	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0xc8>
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	90 93 8b 01 	sts	0x018B, r25
 a66:	2a c0       	rjmp	.+84     	; 0xabc <USB_Device_ProcessControlRequest+0x122>
 a68:	90 91 90 01 	lds	r25, 0x0190

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a6c:	91 11       	cpse	r25, r1
 a6e:	26 c0       	rjmp	.+76     	; 0xabc <USB_Device_ProcessControlRequest+0x122>
 a70:	20 91 92 01 	lds	r18, 0x0192
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a74:	2f 70       	andi	r18, 0x0F	; 15
 a76:	09 f4       	brne	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a78:	c9 c0       	rjmp	.+402    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 a7a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a7e:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a82:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a84:	1b c0       	rjmp	.+54     	; 0xabc <USB_Device_ProcessControlRequest+0x122>
 a86:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a88:	21 f4       	brne	.+8      	; 0xa92 <USB_Device_ProcessControlRequest+0xf8>
 a8a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a8e:	80 62       	ori	r24, 0x20	; 32
 a90:	13 c0       	rjmp	.+38     	; 0xab8 <USB_Device_ProcessControlRequest+0x11e>
 a92:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a96:	80 61       	ori	r24, 0x10	; 16
 a98:	80 93 eb 00 	sts	0x00EB, r24
 a9c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	02 2e       	mov	r0, r18
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x10c>
 aa4:	88 0f       	add	r24, r24
 aa6:	0a 94       	dec	r0
 aa8:	ea f7       	brpl	.-6      	; 0xaa4 <USB_Device_ProcessControlRequest+0x10a>
 aaa:	80 93 ea 00 	sts	0x00EA, r24
 aae:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 ab2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ab6:	88 60       	ori	r24, 0x08	; 8
 ab8:	80 93 eb 00 	sts	0x00EB, r24
 abc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ac0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac4:	87 7f       	andi	r24, 0xF7	; 247
 ac6:	82 c0       	rjmp	.+260    	; 0xbcc <USB_Device_ProcessControlRequest+0x232>
 ac8:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 aca:	a0 c0       	rjmp	.+320    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 acc:	10 91 90 01 	lds	r17, 0x0190
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 ad0:	1f 77       	andi	r17, 0x7F	; 127
 ad2:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ad6:	80 78       	andi	r24, 0x80	; 128
 ad8:	81 2b       	or	r24, r17
 ada:	80 93 e3 00 	sts	0x00E3, r24
 ade:	80 91 e8 00 	lds	r24, 0x00E8
 ae2:	87 7f       	andi	r24, 0xF7	; 247
 ae4:	80 93 e8 00 	sts	0x00E8, r24
 ae8:	99 dd       	rcall	.-1230   	; 0x61c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aee:	80 ff       	sbrs	r24, 0
 af0:	fc cf       	rjmp	.-8      	; 0xaea <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
 af2:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 af6:	80 68       	ori	r24, 0x80	; 128
 af8:	80 93 e3 00 	sts	0x00E3, r24
 afc:	11 23       	and	r17, r17
 afe:	11 f0       	breq	.+4      	; 0xb04 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b00:	83 e0       	ldi	r24, 0x03	; 3
 b02:	01 c0       	rjmp	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x16c>
 b04:	82 e0       	ldi	r24, 0x02	; 2
 b06:	80 93 8d 01 	sts	0x018D, r24
 b0a:	80 c0       	rjmp	.+256    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 b0c:	90 58       	subi	r25, 0x80	; 128
 b0e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b10:	08 f0       	brcs	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0x17a>
 b12:	7c c0       	rjmp	.+248    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 b14:	80 91 90 01 	lds	r24, 0x0190
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b18:	90 91 91 01 	lds	r25, 0x0191
 b1c:	8c 3d       	cpi	r24, 0xDC	; 220
 b1e:	23 e0       	ldi	r18, 0x03	; 3
 b20:	92 07       	cpc	r25, r18
 b22:	71 f5       	brne	.+92     	; 0xb80 <USB_Device_ProcessControlRequest+0x1e6>
 b24:	83 e0       	ldi	r24, 0x03	; 3
 b26:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b28:	8a e2       	ldi	r24, 0x2A	; 42
 b2a:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b2c:	4f b7       	in	r20, 0x3f	; 63
 b2e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b30:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b32:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b38:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b3a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	50 93 57 00 	sts	0x0057, r21
 b42:	e4 91       	lpm	r30, Z
 b44:	20 ff       	sbrs	r18, 0
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <USB_Device_ProcessControlRequest+0x1b4>

					if (SerialCharNum & 0x01)
 b48:	e2 95       	swap	r30
 b4a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b4c:	3f 5f       	subi	r19, 0xFF	; 255
 b4e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b50:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	ea 30       	cpi	r30, 0x0A	; 10
 b56:	10 f0       	brcs	.+4      	; 0xb5c <USB_Device_ProcessControlRequest+0x1c2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b58:	c7 96       	adiw	r24, 0x37	; 55
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <USB_Device_ProcessControlRequest+0x1c4>
 b5c:	c0 96       	adiw	r24, 0x30	; 48
 b5e:	8d 93       	st	X+, r24
 b60:	9d 93       	st	X+, r25
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b66:	49 f7       	brne	.-46     	; 0xb3a <USB_Device_ProcessControlRequest+0x1a0>
 b68:	4f bf       	out	0x3f, r20	; 63
 b6a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b6e:	87 7f       	andi	r24, 0xF7	; 247
 b70:	80 93 e8 00 	sts	0x00E8, r24
 b74:	6a e2       	ldi	r22, 0x2A	; 42
 b76:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b78:	ce 01       	movw	r24, r28
 b7a:	01 96       	adiw	r24, 0x01	; 1
 b7c:	20 dc       	rcall	.-1984   	; 0x3be <Endpoint_Write_Control_Stream_LE>
 b7e:	12 c0       	rjmp	.+36     	; 0xba4 <USB_Device_ProcessControlRequest+0x20a>
 b80:	ae 01       	movw	r20, r28
 b82:	4f 5f       	subi	r20, 0xFF	; 255
 b84:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b86:	60 91 92 01 	lds	r22, 0x0192
 b8a:	a0 db       	rcall	.-2240   	; 0x2cc <CALLBACK_USB_GetDescriptor>
 b8c:	00 97       	sbiw	r24, 0x00	; 0
 b8e:	09 f4       	brne	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0x1f8>
 b90:	3d c0       	rjmp	.+122    	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 b92:	20 91 e8 00 	lds	r18, 0x00E8
 b96:	27 7f       	andi	r18, 0xF7	; 247
 b98:	20 93 e8 00 	sts	0x00E8, r18
 b9c:	bc 01       	movw	r22, r24
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	9a 81       	ldd	r25, Y+2	; 0x02
 ba2:	6a dc       	rcall	.-1836   	; 0x478 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
 ba8:	8b 77       	andi	r24, 0x7B	; 123
 baa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bae:	2e c0       	rjmp	.+92     	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 bb0:	90 38       	cpi	r25, 0x80	; 128
 bb2:	61 f5       	brne	.+88     	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 bb4:	80 91 e8 00 	lds	r24, 0x00E8
 bb8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bbe:	80 91 89 01 	lds	r24, 0x0189
 bc2:	80 93 f1 00 	sts	0x00F1, r24
 bc6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bca:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bcc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bd0:	25 dd       	rcall	.-1462   	; 0x61c <Endpoint_ClearStatusStage>
 bd2:	1c c0       	rjmp	.+56     	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 bd4:	91 11       	cpse	r25, r1
 bd6:	1a c0       	rjmp	.+52     	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
 bd8:	90 91 90 01 	lds	r25, 0x0190
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bdc:	92 30       	cpi	r25, 0x02	; 2
 bde:	b0 f4       	brcc	.+44     	; 0xc0c <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 be0:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 be4:	87 7f       	andi	r24, 0xF7	; 247
 be6:	80 93 e8 00 	sts	0x00E8, r24
 bea:	90 93 89 01 	sts	0x0189, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bee:	16 dd       	rcall	.-1492   	; 0x61c <Endpoint_ClearStatusStage>
 bf0:	80 91 89 01 	lds	r24, 0x0189
 bf4:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bf6:	04 c0       	rjmp	.+8      	; 0xc00 <USB_Device_ProcessControlRequest+0x266>
 bf8:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 bfc:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <USB_Device_ProcessControlRequest+0x26a>
 c00:	84 e0       	ldi	r24, 0x04	; 4
 c02:	01 c0       	rjmp	.+2      	; 0xc06 <USB_Device_ProcessControlRequest+0x26c>
 c04:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c06:	80 93 8d 01 	sts	0x018D, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c0a:	49 db       	rcall	.-2414   	; 0x29e <EVENT_USB_Device_ConfigurationChanged>
 c0c:	80 91 e8 00 	lds	r24, 0x00E8
 c10:	83 ff       	sbrs	r24, 3
 c12:	0a c0       	rjmp	.+20     	; 0xc28 <USB_Device_ProcessControlRequest+0x28e>
 c14:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c18:	87 7f       	andi	r24, 0xF7	; 247
 c1a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c1e:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c22:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c24:	80 93 eb 00 	sts	0x00EB, r24
 c28:	aa 96       	adiw	r28, 0x2a	; 42
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c2e:	de bf       	out	0x3e, r29	; 62
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	cd bf       	out	0x3d, r28	; 61
 c34:	df 91       	pop	r29
 c36:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c38:	1f 91       	pop	r17
 c3a:	08 95       	ret

00000c3c <USB_Event_Stub>:
 c3c:	08 95       	ret

00000c3e <USB_USBTask>:
 c3e:	cf 93       	push	r28
 c40:	80 91 8d 01 	lds	r24, 0x018D
 c44:	88 23       	and	r24, r24
 c46:	a9 f0       	breq	.+42     	; 0xc72 <USB_USBTask+0x34>
 c48:	80 91 e9 00 	lds	r24, 0x00E9
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c4c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c4e:	90 91 ec 00 	lds	r25, 0x00EC
 c52:	90 ff       	sbrs	r25, 0
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <USB_USBTask+0x1c>
 c56:	90 e8       	ldi	r25, 0x80	; 128
 c58:	01 c0       	rjmp	.+2      	; 0xc5c <USB_USBTask+0x1e>
 c5a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c5c:	c9 2f       	mov	r28, r25
 c5e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c60:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c64:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c68:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c6a:	97 de       	rcall	.-722    	; 0x99a <USB_Device_ProcessControlRequest>
 c6c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6e:	c0 93 e9 00 	sts	0x00E9, r28
 c72:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c74:	08 95       	ret

00000c76 <CDC_Device_ConfigureEndpoints>:
 c76:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c78:	df 93       	push	r29
 c7a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c7c:	fc 01       	movw	r30, r24
 c7e:	70 96       	adiw	r30, 0x10	; 16
 c80:	8b e0       	ldi	r24, 0x0B	; 11
 c82:	df 01       	movw	r26, r30
 c84:	1d 92       	st	X+, r1
 c86:	8a 95       	dec	r24
 c88:	e9 f7       	brne	.-6      	; 0xc84 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 c8a:	82 e0       	ldi	r24, 0x02	; 2
 c8c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 c8e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 c90:	83 e0       	ldi	r24, 0x03	; 3
 c92:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 c94:	61 e0       	ldi	r22, 0x01	; 1
 c96:	ce 01       	movw	r24, r28
 c98:	01 96       	adiw	r24, 0x01	; 1
 c9a:	83 dc       	rcall	.-1786   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
 c9c:	88 23       	and	r24, r24
 c9e:	61 f0       	breq	.+24     	; 0xcb8 <CDC_Device_ConfigureEndpoints+0x42>
 ca0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 ca2:	ce 01       	movw	r24, r28
 ca4:	06 96       	adiw	r24, 0x06	; 6
 ca6:	7d dc       	rcall	.-1798   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
 ca8:	88 23       	and	r24, r24
 caa:	31 f0       	breq	.+12     	; 0xcb8 <CDC_Device_ConfigureEndpoints+0x42>
 cac:	61 e0       	ldi	r22, 0x01	; 1
 cae:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cb0:	0b 96       	adiw	r24, 0x0b	; 11
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
	  return false;

	return true;
}
 cb6:	75 cc       	rjmp	.-1814   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
 cb8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
	  return false;

	return true;
}
 cbe:	08 95       	ret

00000cc0 <CDC_Device_SendString>:
 cc0:	db 01       	movw	r26, r22
 cc2:	20 91 8d 01 	lds	r18, 0x018D
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cc6:	24 30       	cpi	r18, 0x04	; 4
 cc8:	d1 f4       	brne	.+52     	; 0xcfe <CDC_Device_SendString+0x3e>
 cca:	fc 01       	movw	r30, r24
 ccc:	44 89       	ldd	r20, Z+20	; 0x14
 cce:	55 89       	ldd	r21, Z+21	; 0x15
 cd0:	66 89       	ldd	r22, Z+22	; 0x16
 cd2:	77 89       	ldd	r23, Z+23	; 0x17
 cd4:	45 2b       	or	r20, r21
 cd6:	46 2b       	or	r20, r22
 cd8:	47 2b       	or	r20, r23
 cda:	89 f0       	breq	.+34     	; 0xcfe <CDC_Device_SendString+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cdc:	81 81       	ldd	r24, Z+1	; 0x01
 cde:	8f 70       	andi	r24, 0x0F	; 15
 ce0:	80 93 e9 00 	sts	0x00E9, r24
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 ce4:	fd 01       	movw	r30, r26
 ce6:	01 90       	ld	r0, Z+
 ce8:	00 20       	and	r0, r0
 cea:	e9 f7       	brne	.-6      	; 0xce6 <CDC_Device_SendString+0x26>
 cec:	bf 01       	movw	r22, r30
 cee:	61 50       	subi	r22, 0x01	; 1
 cf0:	71 09       	sbc	r23, r1
 cf2:	6a 1b       	sub	r22, r26
 cf4:	7b 0b       	sbc	r23, r27
 cf6:	40 e0       	ldi	r20, 0x00	; 0
 cf8:	50 e0       	ldi	r21, 0x00	; 0
 cfa:	cd 01       	movw	r24, r26
 cfc:	19 cb       	rjmp	.-2510   	; 0x330 <Endpoint_Write_Stream_LE>
 cfe:	82 e0       	ldi	r24, 0x02	; 2
}
 d00:	08 95       	ret

00000d02 <CDC_Device_SendByte>:
 d02:	cf 93       	push	r28
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 d04:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d06:	20 91 8d 01 	lds	r18, 0x018D
 d0a:	24 30       	cpi	r18, 0x04	; 4
 d0c:	f1 f4       	brne	.+60     	; 0xd4a <CDC_Device_SendByte+0x48>
 d0e:	fc 01       	movw	r30, r24
 d10:	44 89       	ldd	r20, Z+20	; 0x14
 d12:	55 89       	ldd	r21, Z+21	; 0x15
 d14:	66 89       	ldd	r22, Z+22	; 0x16
 d16:	77 89       	ldd	r23, Z+23	; 0x17
 d18:	45 2b       	or	r20, r21
 d1a:	46 2b       	or	r20, r22
 d1c:	47 2b       	or	r20, r23
 d1e:	a9 f0       	breq	.+42     	; 0xd4a <CDC_Device_SendByte+0x48>
 d20:	81 81       	ldd	r24, Z+1	; 0x01
 d22:	8f 70       	andi	r24, 0x0F	; 15
 d24:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d28:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 d2c:	85 ff       	sbrs	r24, 5
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <CDC_Device_SendByte+0x36>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d30:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 d34:	80 e0       	ldi	r24, 0x00	; 0
 d36:	0a c0       	rjmp	.+20     	; 0xd4c <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d38:	80 91 e8 00 	lds	r24, 0x00E8
 d3c:	8e 77       	andi	r24, 0x7E	; 126
 d3e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d42:	8d dc       	rcall	.-1766   	; 0x65e <Endpoint_WaitUntilReady>
 d44:	88 23       	and	r24, r24
 d46:	a1 f3       	breq	.-24     	; 0xd30 <CDC_Device_SendByte+0x2e>
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <CDC_Device_SendByte+0x4a>
 d4a:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d4c:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 d4e:	08 95       	ret

00000d50 <CDC_Device_Flush>:
 d50:	20 91 8d 01 	lds	r18, 0x018D

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d54:	24 30       	cpi	r18, 0x04	; 4
 d56:	31 f5       	brne	.+76     	; 0xda4 <CDC_Device_Flush+0x54>
 d58:	fc 01       	movw	r30, r24
 d5a:	44 89       	ldd	r20, Z+20	; 0x14
 d5c:	55 89       	ldd	r21, Z+21	; 0x15
 d5e:	66 89       	ldd	r22, Z+22	; 0x16
 d60:	77 89       	ldd	r23, Z+23	; 0x17
 d62:	45 2b       	or	r20, r21
 d64:	46 2b       	or	r20, r22
 d66:	47 2b       	or	r20, r23
 d68:	e9 f0       	breq	.+58     	; 0xda4 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d6a:	81 81       	ldd	r24, Z+1	; 0x01
 d6c:	8f 70       	andi	r24, 0x0F	; 15
 d6e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 d72:	80 91 f2 00 	lds	r24, 0x00F2
 d76:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 d7a:	89 2b       	or	r24, r25
 d7c:	89 f0       	breq	.+34     	; 0xda0 <CDC_Device_Flush+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d7e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d82:	80 91 e8 00 	lds	r24, 0x00E8
 d86:	8e 77       	andi	r24, 0x7E	; 126
 d88:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d8c:	95 fd       	sbrc	r25, 5
 d8e:	08 c0       	rjmp	.+16     	; 0xda0 <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d90:	66 dc       	rcall	.-1844   	; 0x65e <Endpoint_WaitUntilReady>
 d92:	81 11       	cpse	r24, r1
 d94:	08 c0       	rjmp	.+16     	; 0xda6 <CDC_Device_Flush+0x56>
 d96:	80 91 e8 00 	lds	r24, 0x00E8
 d9a:	8e 77       	andi	r24, 0x7E	; 126
 d9c:	80 93 e8 00 	sts	0x00E8, r24
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	08 95       	ret
 da4:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 da6:	08 95       	ret

00000da8 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 da8:	20 91 8d 01 	lds	r18, 0x018D
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 dac:	24 30       	cpi	r18, 0x04	; 4
 dae:	89 f4       	brne	.+34     	; 0xdd2 <CDC_Device_USBTask+0x2a>
 db0:	fc 01       	movw	r30, r24
 db2:	44 89       	ldd	r20, Z+20	; 0x14
 db4:	55 89       	ldd	r21, Z+21	; 0x15
 db6:	66 89       	ldd	r22, Z+22	; 0x16
 db8:	77 89       	ldd	r23, Z+23	; 0x17
 dba:	45 2b       	or	r20, r21
 dbc:	46 2b       	or	r20, r22
 dbe:	47 2b       	or	r20, r23
 dc0:	41 f0       	breq	.+16     	; 0xdd2 <CDC_Device_USBTask+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dc2:	21 81       	ldd	r18, Z+1	; 0x01
 dc4:	2f 70       	andi	r18, 0x0F	; 15
 dc6:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 dca:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 dce:	20 fd       	sbrc	r18, 0
	  CDC_Device_Flush(CDCInterfaceInfo);
 dd0:	bf cf       	rjmp	.-130    	; 0xd50 <CDC_Device_Flush>
 dd2:	08 95       	ret

00000dd4 <CDC_Device_ReceiveByte>:
 dd4:	20 91 8d 01 	lds	r18, 0x018D
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 dd8:	24 30       	cpi	r18, 0x04	; 4
 dda:	19 f0       	breq	.+6      	; 0xde2 <CDC_Device_ReceiveByte+0xe>
	  return -1;
 ddc:	8f ef       	ldi	r24, 0xFF	; 255
 dde:	9f ef       	ldi	r25, 0xFF	; 255
 de0:	08 95       	ret
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 de2:	fc 01       	movw	r30, r24
 de4:	44 89       	ldd	r20, Z+20	; 0x14
 de6:	55 89       	ldd	r21, Z+21	; 0x15
 de8:	66 89       	ldd	r22, Z+22	; 0x16
 dea:	77 89       	ldd	r23, Z+23	; 0x17
 dec:	45 2b       	or	r20, r21
 dee:	46 2b       	or	r20, r22
 df0:	47 2b       	or	r20, r23
 df2:	a1 f3       	breq	.-24     	; 0xddc <CDC_Device_ReceiveByte+0x8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 df4:	86 81       	ldd	r24, Z+6	; 0x06
 df6:	8f 70       	andi	r24, 0x0F	; 15
 df8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 dfc:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 e00:	82 ff       	sbrs	r24, 2
 e02:	ec cf       	rjmp	.-40     	; 0xddc <CDC_Device_ReceiveByte+0x8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 e04:	80 91 f2 00 	lds	r24, 0x00F2
 e08:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 e0c:	89 2b       	or	r24, r25
 e0e:	21 f0       	breq	.+8      	; 0xe18 <CDC_Device_ReceiveByte+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e10:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 e14:	30 e0       	ldi	r19, 0x00	; 0
 e16:	02 c0       	rjmp	.+4      	; 0xe1c <CDC_Device_ReceiveByte+0x48>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 e18:	2f ef       	ldi	r18, 0xFF	; 255
 e1a:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 e1c:	80 91 f2 00 	lds	r24, 0x00F2
 e20:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 e24:	89 2b       	or	r24, r25
 e26:	29 f4       	brne	.+10     	; 0xe32 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e28:	80 91 e8 00 	lds	r24, 0x00E8
 e2c:	8b 77       	andi	r24, 0x7B	; 123
 e2e:	80 93 e8 00 	sts	0x00E8, r24
 e32:	c9 01       	movw	r24, r18
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 e34:	08 95       	ret

00000e36 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 e36:	08 95       	ret

00000e38 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e38:	cf 93       	push	r28
 e3a:	df 93       	push	r29
 e3c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e3e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e42:	83 ff       	sbrs	r24, 3
 e44:	a6 c0       	rjmp	.+332    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e46:	88 81       	ld	r24, Y
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	20 91 92 01 	lds	r18, 0x0192
 e4e:	30 91 93 01 	lds	r19, 0x0193
 e52:	28 17       	cp	r18, r24
 e54:	39 07       	cpc	r19, r25
 e56:	09 f0       	breq	.+2      	; 0xe5a <CDC_Device_ProcessControlRequest+0x22>
 e58:	9c c0       	rjmp	.+312    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
 e5a:	80 91 8f 01 	lds	r24, 0x018F
 e5e:	81 32       	cpi	r24, 0x21	; 33
 e60:	61 f0       	breq	.+24     	; 0xe7a <CDC_Device_ProcessControlRequest+0x42>
 e62:	20 f4       	brcc	.+8      	; 0xe6c <CDC_Device_ProcessControlRequest+0x34>
 e64:	80 32       	cpi	r24, 0x20	; 32
 e66:	09 f4       	brne	.+2      	; 0xe6a <CDC_Device_ProcessControlRequest+0x32>
 e68:	3e c0       	rjmp	.+124    	; 0xee6 <CDC_Device_ProcessControlRequest+0xae>
 e6a:	93 c0       	rjmp	.+294    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
 e6c:	82 32       	cpi	r24, 0x22	; 34
 e6e:	09 f4       	brne	.+2      	; 0xe72 <CDC_Device_ProcessControlRequest+0x3a>
 e70:	6c c0       	rjmp	.+216    	; 0xf4a <CDC_Device_ProcessControlRequest+0x112>
 e72:	83 32       	cpi	r24, 0x23	; 35
 e74:	09 f4       	brne	.+2      	; 0xe78 <CDC_Device_ProcessControlRequest+0x40>
 e76:	7d c0       	rjmp	.+250    	; 0xf72 <CDC_Device_ProcessControlRequest+0x13a>
 e78:	8c c0       	rjmp	.+280    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e7a:	80 91 8e 01 	lds	r24, 0x018E
 e7e:	81 3a       	cpi	r24, 0xA1	; 161
 e80:	09 f0       	breq	.+2      	; 0xe84 <CDC_Device_ProcessControlRequest+0x4c>
 e82:	87 c0       	rjmp	.+270    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e84:	80 91 e8 00 	lds	r24, 0x00E8
 e88:	87 7f       	andi	r24, 0xF7	; 247
 e8a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e8e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 e92:	80 ff       	sbrs	r24, 0
 e94:	fc cf       	rjmp	.-8      	; 0xe8e <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 e96:	4c 89       	ldd	r20, Y+20	; 0x14
 e98:	5d 89       	ldd	r21, Y+21	; 0x15
 e9a:	6e 89       	ldd	r22, Y+22	; 0x16
 e9c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e9e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
 ea2:	bb 27       	eor	r27, r27
 ea4:	a7 2f       	mov	r26, r23
 ea6:	96 2f       	mov	r25, r22
 ea8:	85 2f       	mov	r24, r21
 eaa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
 eae:	cb 01       	movw	r24, r22
 eb0:	aa 27       	eor	r26, r26
 eb2:	bb 27       	eor	r27, r27
 eb4:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
 eb8:	47 2f       	mov	r20, r23
 eba:	55 27       	eor	r21, r21
 ebc:	66 27       	eor	r22, r22
 ebe:	77 27       	eor	r23, r23
 ec0:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 ec4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ec6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 eca:	89 8d       	ldd	r24, Y+25	; 0x19
 ecc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 ed0:	8a 8d       	ldd	r24, Y+26	; 0x1a
 ed2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ed6:	80 91 e8 00 	lds	r24, 0x00E8
 eda:	8e 77       	andi	r24, 0x7E	; 126
 edc:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ee0:	df 91       	pop	r29
 ee2:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 ee4:	9b cb       	rjmp	.-2250   	; 0x61c <Endpoint_ClearStatusStage>
 ee6:	80 91 8e 01 	lds	r24, 0x018E
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 eea:	81 32       	cpi	r24, 0x21	; 33
 eec:	09 f0       	breq	.+2      	; 0xef0 <CDC_Device_ProcessControlRequest+0xb8>
 eee:	51 c0       	rjmp	.+162    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
 ef0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ef4:	87 7f       	andi	r24, 0xF7	; 247
 ef6:	80 93 e8 00 	sts	0x00E8, r24
 efa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 efe:	82 fd       	sbrc	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 f00:	05 c0       	rjmp	.+10     	; 0xf0c <CDC_Device_ProcessControlRequest+0xd4>
 f02:	80 91 8d 01 	lds	r24, 0x018D
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 f06:	81 11       	cpse	r24, r1
 f08:	f8 cf       	rjmp	.-16     	; 0xefa <CDC_Device_ProcessControlRequest+0xc2>
 f0a:	43 c0       	rjmp	.+134    	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
 f0c:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 f10:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 f14:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 f18:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 f1c:	3c 8b       	std	Y+20, r19	; 0x14
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 f1e:	2d 8b       	std	Y+21, r18	; 0x15
 f20:	9e 8b       	std	Y+22, r25	; 0x16
 f22:	8f 8b       	std	Y+23, r24	; 0x17
 f24:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 f28:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 f2a:	80 91 f1 00 	lds	r24, 0x00F1
 f2e:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 f30:	80 91 f1 00 	lds	r24, 0x00F1
 f34:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 f36:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f3a:	8b 77       	andi	r24, 0x7B	; 123
 f3c:	80 93 e8 00 	sts	0x00E8, r24
 f40:	6d db       	rcall	.-2342   	; 0x61c <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 f42:	ce 01       	movw	r24, r28
 f44:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f46:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f48:	76 cf       	rjmp	.-276    	; 0xe36 <CDC_Device_Event_Stub>
 f4a:	80 91 8e 01 	lds	r24, 0x018E
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f4e:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f50:	01 f5       	brne	.+64     	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
 f52:	80 91 e8 00 	lds	r24, 0x00E8
 f56:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f58:	80 93 e8 00 	sts	0x00E8, r24
 f5c:	5f db       	rcall	.-2370   	; 0x61c <Endpoint_ClearStatusStage>
 f5e:	80 91 90 01 	lds	r24, 0x0190
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f62:	90 91 91 01 	lds	r25, 0x0191

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f66:	99 8b       	std	Y+17, r25	; 0x11
 f68:	88 8b       	std	Y+16, r24	; 0x10
 f6a:	ce 01       	movw	r24, r28
 f6c:	df 91       	pop	r29
 f6e:	cf 91       	pop	r28
 f70:	62 cf       	rjmp	.-316    	; 0xe36 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f72:	80 91 8e 01 	lds	r24, 0x018E
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 f76:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f78:	61 f4       	brne	.+24     	; 0xf92 <CDC_Device_ProcessControlRequest+0x15a>
 f7a:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f7e:	87 7f       	andi	r24, 0xF7	; 247
 f80:	80 93 e8 00 	sts	0x00E8, r24
 f84:	4b db       	rcall	.-2410   	; 0x61c <Endpoint_ClearStatusStage>
 f86:	60 91 90 01 	lds	r22, 0x0190
 f8a:	ce 01       	movw	r24, r28
 f8c:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f8e:	cf 91       	pop	r28
 f90:	52 cf       	rjmp	.-348    	; 0xe36 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f92:	df 91       	pop	r29
 f94:	cf 91       	pop	r28
 f96:	08 95       	ret

00000f98 <_exit>:
			}

			break;
	}
}
 f98:	f8 94       	cli

00000f9a <__stop_program>:
 f9a:	ff cf       	rjmp	.-2      	; 0xf9a <__stop_program>

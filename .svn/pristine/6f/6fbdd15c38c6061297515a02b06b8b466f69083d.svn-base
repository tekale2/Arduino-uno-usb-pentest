
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001082  00001116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001082  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800110  00800110  00001126  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a3f7  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a66  00000000  00000000  0000c797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d79  00000000  00000000  0000f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef8  00000000  00000000  00012f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003c82  00000000  00000000  00013e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000066ae  00000000  00000000  00017af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000700  00000000  00000000  0001e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	dc c3       	rjmp	.+1976   	; 0x7e2 <__vector_10>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      a8:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b8:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00           r.o.l.l.e.r...

000000c6 <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
	{
		uint8_t  HIDReportItem  = *ReportData;
      e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
      e4:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f4:	00 00 09 21 11 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     104:	00 05                                               ..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	00 01                                               ..

00000118 <MediaControlReport>:
     118:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     128:	09 b6 09 b7 09 cd 09 e2 09 e9 09 ea 75 01 95 0b     ............u...
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	15 00 25 01 81 06 95 05 81 01 c0 00                 ..%.........

00000144 <__ctors_end>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
				ReportData     += 4;
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e2       	ldi	r29, 0x20	; 32
     14c:	de bf       	out	0x3e, r29	; 62
				break;
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e2 e8       	ldi	r30, 0x82	; 130
     158:	f0 e1       	ldi	r31, 0x10	; 16
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
				ReportSize     -= 2;
     162:	0d 92       	st	X+, r0
     164:	a0 31       	cpi	r26, 0x10	; 16
				ReportData     += 2;
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
				break;
     16c:	a0 e1       	ldi	r26, 0x10	; 16

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	ae 31       	cpi	r26, 0x1E	; 30
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
				ReportSize     -= 1;
     17a:	30 d0       	rcall	.+96     	; 0x1dc <main>
     17c:	80 c7       	rjmp	.+3840   	; 0x107e <_exit>

0000017e <__bad_interrupt>:
				ReportData     += 1;
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <LEDs_SetAllLEDs>:
     180:	9b b1       	in	r25, 0x0b	; 11
     182:	9f 70       	andi	r25, 0x0F	; 15
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     184:	98 2b       	or	r25, r24
     186:	9b b9       	out	0x0b, r25	; 11
     188:	08 95       	ret

0000018a <SetupHardware>:
     18a:	84 b7       	in	r24, 0x34	; 52
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	84 bf       	out	0x34, r24	; 52
     190:	88 e1       	ldi	r24, 0x18	; 24
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	80 93 60 00 	sts	0x0060, r24
     19a:	10 92 60 00 	sts	0x0060, r1
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	80 93 61 00 	sts	0x0061, r24

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1ac:	90 93 61 00 	sts	0x0061, r25
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	84 b1       	in	r24, 0x04	; 4
				break;
     1b4:	8f 71       	andi	r24, 0x1F	; 31
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b6:	84 b9       	out	0x04, r24	; 4
     1b8:	8d b1       	in	r24, 0x0d	; 13
     1ba:	8f 7c       	andi	r24, 0xCF	; 207
     1bc:	8d b9       	out	0x0d, r24	; 13
     1be:	85 b1       	in	r24, 0x05	; 5
     1c0:	80 6e       	ori	r24, 0xE0	; 224
     1c2:	85 b9       	out	0x05, r24	; 5
     1c4:	8e b1       	in	r24, 0x0e	; 14
     1c6:	80 63       	ori	r24, 0x30	; 48
     1c8:	8e b9       	out	0x0e, r24	; 14
     1ca:	8a b1       	in	r24, 0x0a	; 10
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	8a b9       	out	0x0a, r24	; 10
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	8f 70       	andi	r24, 0x0F	; 15
     1d4:	8b b9       	out	0x0b, r24	; 11
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d6:	6a 98       	cbi	0x0d, 2	; 13
     1d8:	72 9a       	sbi	0x0e, 2	; 14
     1da:	e8 c2       	rjmp	.+1488   	; 0x7ac <USB_Init>

000001dc <main>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dc:	d6 df       	rcall	.-84     	; 0x18a <SetupHardware>
     1de:	80 e1       	ldi	r24, 0x10	; 16
     1e0:	cf df       	rcall	.-98     	; 0x180 <LEDs_SetAllLEDs>
     1e2:	78 94       	sei
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	71 d6       	rcall	.+3298   	; 0xecc <HID_Device_USBTask>
     1ea:	10 d5       	rcall	.+2592   	; 0xc0c <USB_USBTask>
				break;
     1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <main+0x8>

000001ee <EVENT_USB_Device_Connect>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ee:	80 ea       	ldi	r24, 0xA0	; 160
     1f0:	c7 cf       	rjmp	.-114    	; 0x180 <LEDs_SetAllLEDs>

000001f2 <EVENT_USB_Device_Disconnect>:
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	c5 cf       	rjmp	.-118    	; 0x180 <LEDs_SetAllLEDs>

000001f6 <EVENT_USB_Device_ConfigurationChanged>:
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	55 d6       	rcall	.+3242   	; 0xea6 <HID_Device_ConfigureEndpoints>
     1fc:	90 91 e2 00 	lds	r25, 0x00E2
     200:	94 60       	ori	r25, 0x04	; 4
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     202:	90 93 e2 00 	sts	0x00E2, r25
				break;
     206:	88 23       	and	r24, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     208:	11 f0       	breq	.+4      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x18>
     20a:	80 e6       	ldi	r24, 0x60	; 96
     20c:	01 c0       	rjmp	.+2      	; 0x210 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     20e:	80 e9       	ldi	r24, 0x90	; 144
     210:	b7 cf       	rjmp	.-146    	; 0x180 <LEDs_SetAllLEDs>

00000212 <EVENT_USB_Device_ControlRequest>:
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	15 c5       	rjmp	.+2602   	; 0xc42 <HID_Device_ProcessControlRequest>

00000218 <EVENT_USB_Device_StartOfFrame>:
     218:	80 91 0e 01 	lds	r24, 0x010E
     21c:	90 91 0f 01 	lds	r25, 0x010F
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	29 f0       	breq	.+10     	; 0x22e <EVENT_USB_Device_StartOfFrame+0x16>
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	90 93 0f 01 	sts	0x010F, r25
     22a:	80 93 0e 01 	sts	0x010E, r24
     22e:	08 95       	ret

00000230 <CALLBACK_HID_Device_CreateHIDReport>:
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	f9 01       	movw	r30, r18
     236:	93 b1       	in	r25, 0x03	; 3
     238:	8c b1       	in	r24, 0x0c	; 12
     23a:	80 95       	com	r24
     23c:	80 73       	andi	r24, 0x30	; 48
     23e:	86 95       	lsr	r24
     240:	90 95       	com	r25
     242:	90 7e       	andi	r25, 0xE0	; 224
     244:	89 2b       	or	r24, r25
     246:	9c b1       	in	r25, 0x0c	; 12
     248:	90 95       	com	r25
     24a:	92 fb       	bst	r25, 2
     24c:	99 27       	eor	r25, r25
     24e:	90 f9       	bld	r25, 0
     250:	21 81       	ldd	r18, Z+1	; 0x01
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	90 fb       	bst	r25, 0
     254:	20 f9       	bld	r18, 0
     256:	85 fb       	bst	r24, 5
     258:	33 27       	eor	r19, r19
     25a:	30 f9       	bld	r19, 0
     25c:	90 81       	ld	r25, Z
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25e:	30 fb       	bst	r19, 0
     260:	97 f9       	bld	r25, 7
     262:	38 2f       	mov	r19, r24
     264:	33 1f       	adc	r19, r19
     266:	33 27       	eor	r19, r19
     268:	33 1f       	adc	r19, r19
     26a:	30 fb       	bst	r19, 0
     26c:	21 f9       	bld	r18, 1
     26e:	84 fb       	bst	r24, 4
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     270:	33 27       	eor	r19, r19
				break;
     272:	30 f9       	bld	r19, 0

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	30 fb       	bst	r19, 0
     276:	22 f9       	bld	r18, 2
     278:	21 83       	std	Z+1, r18	; 0x01
     27a:	86 fb       	bst	r24, 6
     27c:	22 27       	eor	r18, r18
     27e:	20 f9       	bld	r18, 0
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	20 fb       	bst	r18, 0
     282:	95 f9       	bld	r25, 5
				break;
     284:	83 fb       	bst	r24, 3

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     286:	88 27       	eor	r24, r24
     288:	80 f9       	bld	r24, 0
     28a:	80 fb       	bst	r24, 0
     28c:	94 f9       	bld	r25, 4
     28e:	90 83       	st	Z, r25
				break;
     290:	82 e0       	ldi	r24, 0x02	; 2

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	f8 01       	movw	r30, r16
     296:	91 83       	std	Z+1, r25	; 0x01
     298:	80 83       	st	Z, r24
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
				break;
     2a0:	08 95       	ret

000002a2 <CALLBACK_HID_Device_ProcessHIDReport>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	08 95       	ret

000002a4 <CALLBACK_USB_GetDescriptor>:
     2a4:	29 2f       	mov	r18, r25
     2a6:	33 27       	eor	r19, r19
     2a8:	23 30       	cpi	r18, 0x03	; 3
     2aa:	31 05       	cpc	r19, r1
				break;
     2ac:	b9 f0       	breq	.+46     	; 0x2dc <CALLBACK_USB_GetDescriptor+0x38>

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	5c f4       	brge	.+22     	; 0x2c6 <CALLBACK_USB_GetDescriptor+0x22>
     2b0:	21 30       	cpi	r18, 0x01	; 1
     2b2:	31 05       	cpc	r19, r1
     2b4:	69 f1       	breq	.+90     	; 0x310 <CALLBACK_USB_GetDescriptor+0x6c>
     2b6:	22 30       	cpi	r18, 0x02	; 2
     2b8:	31 05       	cpc	r19, r1
     2ba:	79 f5       	brne	.+94     	; 0x31a <CALLBACK_USB_GetDescriptor+0x76>
				break;
     2bc:	82 e2       	ldi	r24, 0x22	; 34
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	24 ee       	ldi	r18, 0xE4	; 228
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	2e c0       	rjmp	.+92     	; 0x322 <CALLBACK_USB_GetDescriptor+0x7e>
     2c6:	21 32       	cpi	r18, 0x21	; 33
     2c8:	31 05       	cpc	r19, r1
     2ca:	e9 f0       	breq	.+58     	; 0x306 <CALLBACK_USB_GetDescriptor+0x62>
				break;
     2cc:	22 32       	cpi	r18, 0x22	; 34
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2ce:	31 05       	cpc	r19, r1
     2d0:	21 f5       	brne	.+72     	; 0x31a <CALLBACK_USB_GetDescriptor+0x76>
     2d2:	8b e2       	ldi	r24, 0x2B	; 43
				break;
     2d4:	90 e0       	ldi	r25, 0x00	; 0

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d6:	28 e1       	ldi	r18, 0x18	; 24
     2d8:	31 e0       	ldi	r19, 0x01	; 1
     2da:	23 c0       	rjmp	.+70     	; 0x322 <CALLBACK_USB_GetDescriptor+0x7e>

				if (ParserData->UsingReportIDs)
     2dc:	99 27       	eor	r25, r25
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	91 05       	cpc	r25, r1
     2e2:	41 f0       	breq	.+16     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x50>
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	91 05       	cpc	r25, r1
     2e8:	41 f0       	breq	.+16     	; 0x2fa <CALLBACK_USB_GetDescriptor+0x56>
     2ea:	89 2b       	or	r24, r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	b1 f4       	brne	.+44     	; 0x31a <CALLBACK_USB_GetDescriptor+0x76>
     2ee:	e0 ee       	ldi	r30, 0xE0	; 224
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x5a>
     2f4:	e6 ec       	ldi	r30, 0xC6	; 198
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <CALLBACK_USB_GetDescriptor+0x5a>
     2fa:	e8 e9       	ldi	r30, 0x98	; 152
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	84 91       	lpm	r24, Z
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	9f 01       	movw	r18, r30
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     304:	0e c0       	rjmp	.+28     	; 0x322 <CALLBACK_USB_GetDescriptor+0x7e>
     306:	89 e0       	ldi	r24, 0x09	; 9
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	26 ef       	ldi	r18, 0xF6	; 246
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	09 c0       	rjmp	.+18     	; 0x322 <CALLBACK_USB_GetDescriptor+0x7e>
     310:	82 e1       	ldi	r24, 0x12	; 18
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	26 e0       	ldi	r18, 0x06	; 6
     316:	31 e0       	ldi	r19, 0x01	; 1
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	04 c0       	rjmp	.+8      	; 0x322 <CALLBACK_USB_GetDescriptor+0x7e>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	fa 01       	movw	r30, r20
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	20 83       	st	Z, r18
     328:	08 95       	ret

0000032a <Endpoint_Write_Stream_LE>:
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	df 93       	push	r29
     33a:	7c 01       	movw	r14, r24
     33c:	8b 01       	movw	r16, r22
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33e:	ea 01       	movw	r28, r20
     340:	c2 d1       	rcall	.+900    	; 0x6c6 <Endpoint_WaitUntilReady>
     342:	81 11       	cpse	r24, r1
     344:	31 c0       	rjmp	.+98     	; 0x3a8 <Endpoint_Write_Stream_LE+0x7e>
     346:	20 97       	sbiw	r28, 0x00	; 0
     348:	31 f0       	breq	.+12     	; 0x356 <Endpoint_Write_Stream_LE+0x2c>
     34a:	88 81       	ld	r24, Y
     34c:	99 81       	ldd	r25, Y+1	; 0x01
     34e:	08 1b       	sub	r16, r24
     350:	19 0b       	sbc	r17, r25
     352:	e8 0e       	add	r14, r24
     354:	f9 1e       	adc	r15, r25
     356:	c1 2c       	mov	r12, r1
     358:	d1 2c       	mov	r13, r1
     35a:	01 15       	cp	r16, r1
     35c:	11 05       	cpc	r17, r1
     35e:	19 f1       	breq	.+70     	; 0x3a6 <Endpoint_Write_Stream_LE+0x7c>
     360:	80 91 e8 00 	lds	r24, 0x00E8
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     364:	85 fd       	sbrc	r24, 5
     366:	14 c0       	rjmp	.+40     	; 0x390 <Endpoint_Write_Stream_LE+0x66>
     368:	80 91 e8 00 	lds	r24, 0x00E8
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	8e 77       	andi	r24, 0x7E	; 126
     36e:	80 93 e8 00 	sts	0x00E8, r24
     372:	4c d4       	rcall	.+2200   	; 0xc0c <USB_USBTask>
     374:	20 97       	sbiw	r28, 0x00	; 0
     376:	41 f0       	breq	.+16     	; 0x388 <Endpoint_Write_Stream_LE+0x5e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	88 81       	ld	r24, Y
     37a:	99 81       	ldd	r25, Y+1	; 0x01
     37c:	8c 0d       	add	r24, r12
     37e:	9d 1d       	adc	r25, r13
     380:	99 83       	std	Y+1, r25	; 0x01
     382:	88 83       	st	Y, r24
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	10 c0       	rjmp	.+32     	; 0x3a8 <Endpoint_Write_Stream_LE+0x7e>
				break;
     388:	9e d1       	rcall	.+828    	; 0x6c6 <Endpoint_WaitUntilReady>

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	88 23       	and	r24, r24
     38c:	31 f3       	breq	.-52     	; 0x35a <Endpoint_Write_Stream_LE+0x30>
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <Endpoint_Write_Stream_LE+0x7e>
     390:	f7 01       	movw	r30, r14
     392:	81 91       	ld	r24, Z+
     394:	7f 01       	movw	r14, r30
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     396:	80 93 f1 00 	sts	0x00F1, r24
     39a:	01 50       	subi	r16, 0x01	; 1
     39c:	11 09       	sbc	r17, r1
     39e:	ff ef       	ldi	r31, 0xFF	; 255
     3a0:	cf 1a       	sub	r12, r31
     3a2:	df 0a       	sbc	r13, r31
     3a4:	da cf       	rjmp	.-76     	; 0x35a <Endpoint_Write_Stream_LE+0x30>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
				break;
     3b0:	ff 90       	pop	r15
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	08 95       	ret

000003ba <Endpoint_Write_Control_Stream_LE>:
     3ba:	20 91 1c 01 	lds	r18, 0x011C
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	30 91 1d 01 	lds	r19, 0x011D
     3c2:	26 17       	cp	r18, r22
     3c4:	37 07       	cpc	r19, r23
     3c6:	48 f0       	brcs	.+18     	; 0x3da <Endpoint_Write_Control_Stream_LE+0x20>
     3c8:	61 15       	cp	r22, r1
     3ca:	71 05       	cpc	r23, r1
     3cc:	39 f4       	brne	.+14     	; 0x3dc <Endpoint_Write_Control_Stream_LE+0x22>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ce:	20 91 e8 00 	lds	r18, 0x00E8
     3d2:	2e 77       	andi	r18, 0x7E	; 126

					while (CurrCollectionPath->Parent != NULL)
     3d4:	20 93 e8 00 	sts	0x00E8, r18
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <Endpoint_Write_Control_Stream_LE+0x22>
     3da:	b9 01       	movw	r22, r18
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dc:	fc 01       	movw	r30, r24
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	61 15       	cp	r22, r1
     3e2:	71 05       	cpc	r23, r1
     3e4:	91 f1       	breq	.+100    	; 0x44a <Endpoint_Write_Control_Stream_LE+0x90>
     3e6:	8e b3       	in	r24, 0x1e	; 30
     3e8:	88 23       	and	r24, r24
     3ea:	e1 f1       	breq	.+120    	; 0x464 <Endpoint_Write_Control_Stream_LE+0xaa>
     3ec:	85 30       	cpi	r24, 0x05	; 5
     3ee:	e1 f1       	breq	.+120    	; 0x468 <Endpoint_Write_Control_Stream_LE+0xae>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3f0:	80 91 e8 00 	lds	r24, 0x00E8
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	83 fd       	sbrc	r24, 3
     3f6:	3a c0       	rjmp	.+116    	; 0x46c <Endpoint_Write_Control_Stream_LE+0xb2>
     3f8:	80 91 e8 00 	lds	r24, 0x00E8
     3fc:	82 ff       	sbrs	r24, 2
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <Endpoint_Write_Control_Stream_LE+0x52>
     400:	80 91 e8 00 	lds	r24, 0x00E8
     404:	82 ff       	sbrs	r24, 2
     406:	24 c0       	rjmp	.+72     	; 0x450 <Endpoint_Write_Control_Stream_LE+0x96>
				}

				CurrCollectionPath->Type       = ReportItemData;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	08 95       	ret
     40c:	80 91 e8 00 	lds	r24, 0x00E8
     410:	80 ff       	sbrs	r24, 0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	e6 cf       	rjmp	.-52     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x26>
     414:	80 91 f2 00 	lds	r24, 0x00F2
     418:	90 91 f3 00 	lds	r25, 0x00F3
     41c:	61 15       	cp	r22, r1
     41e:	71 05       	cpc	r23, r1

				if (UsageListSize)
     420:	51 f0       	breq	.+20     	; 0x436 <Endpoint_Write_Control_Stream_LE+0x7c>
     422:	88 30       	cpi	r24, 0x08	; 8
     424:	91 05       	cpc	r25, r1
     426:	38 f4       	brcc	.+14     	; 0x436 <Endpoint_Write_Control_Stream_LE+0x7c>
     428:	21 91       	ld	r18, Z+
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	20 93 f1 00 	sts	0x00F1, r18
     42e:	61 50       	subi	r22, 0x01	; 1
     430:	71 09       	sbc	r23, r1
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	f3 cf       	rjmp	.-26     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x62>
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	08 97       	sbiw	r24, 0x08	; 8
     43a:	09 f0       	breq	.+2      	; 0x43e <Endpoint_Write_Control_Stream_LE+0x84>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	80 91 e8 00 	lds	r24, 0x00E8

					for (uint8_t i = 1; i < UsageListSize; i++)
     442:	8e 77       	andi	r24, 0x7E	; 126
     444:	80 93 e8 00 	sts	0x00E8, r24
     448:	cb cf       	rjmp	.-106    	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x26>
     44a:	21 11       	cpse	r18, r1
					  UsageList[i - 1] = UsageList[i];
     44c:	cc cf       	rjmp	.-104    	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0x2c>
     44e:	d8 cf       	rjmp	.-80     	; 0x400 <Endpoint_Write_Control_Stream_LE+0x46>
     450:	8e b3       	in	r24, 0x1e	; 30
     452:	88 23       	and	r24, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     454:	39 f0       	breq	.+14     	; 0x464 <Endpoint_Write_Control_Stream_LE+0xaa>
     456:	85 30       	cpi	r24, 0x05	; 5
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     458:	39 f0       	breq	.+14     	; 0x468 <Endpoint_Write_Control_Stream_LE+0xae>
     45a:	80 91 e8 00 	lds	r24, 0x00E8
     45e:	83 ff       	sbrs	r24, 3
     460:	cf cf       	rjmp	.-98     	; 0x400 <Endpoint_Write_Control_Stream_LE+0x46>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     462:	04 c0       	rjmp	.+8      	; 0x46c <Endpoint_Write_Control_Stream_LE+0xb2>
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	08 95       	ret
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	08 95       	ret
     46c:	81 e0       	ldi	r24, 0x01	; 1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	08 95       	ret

00000470 <Endpoint_Read_Control_Stream_LE>:
     470:	61 15       	cp	r22, r1
     472:	71 05       	cpc	r23, r1
     474:	29 f4       	brne	.+10     	; 0x480 <Endpoint_Read_Control_Stream_LE+0x10>
     476:	20 91 e8 00 	lds	r18, 0x00E8
     47a:	2b 77       	andi	r18, 0x7B	; 123
     47c:	20 93 e8 00 	sts	0x00E8, r18
     480:	61 15       	cp	r22, r1
     482:	71 05       	cpc	r23, r1
     484:	21 f1       	breq	.+72     	; 0x4ce <Endpoint_Read_Control_Stream_LE+0x5e>
     486:	2e b3       	in	r18, 0x1e	; 30
     488:	22 23       	and	r18, r18
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	51 f1       	breq	.+84     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x70>
     48c:	25 30       	cpi	r18, 0x05	; 5
     48e:	51 f1       	breq	.+84     	; 0x4e4 <Endpoint_Read_Control_Stream_LE+0x74>
     490:	20 91 e8 00 	lds	r18, 0x00E8
     494:	23 fd       	sbrc	r18, 3
     496:	20 c0       	rjmp	.+64     	; 0x4d8 <Endpoint_Read_Control_Stream_LE+0x68>
     498:	20 91 e8 00 	lds	r18, 0x00E8
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49c:	22 ff       	sbrs	r18, 2
     49e:	f3 cf       	rjmp	.-26     	; 0x486 <Endpoint_Read_Control_Stream_LE+0x16>
     4a0:	fc 01       	movw	r30, r24
     4a2:	cf 01       	movw	r24, r30
     4a4:	20 91 f2 00 	lds	r18, 0x00F2
     4a8:	30 91 f3 00 	lds	r19, 0x00F3
				break;
     4ac:	23 2b       	or	r18, r19
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ae:	19 f3       	breq	.-58     	; 0x476 <Endpoint_Read_Control_Stream_LE+0x6>
     4b0:	80 91 f1 00 	lds	r24, 0x00F1
     4b4:	81 93       	st	Z+, r24
     4b6:	cf 01       	movw	r24, r30
     4b8:	61 50       	subi	r22, 0x01	; 1
     4ba:	71 09       	sbc	r23, r1
     4bc:	61 15       	cp	r22, r1
     4be:	71 05       	cpc	r23, r1
     4c0:	81 f7       	brne	.-32     	; 0x4a2 <Endpoint_Read_Control_Stream_LE+0x32>
     4c2:	d9 cf       	rjmp	.-78     	; 0x476 <Endpoint_Read_Control_Stream_LE+0x6>
     4c4:	8e b3       	in	r24, 0x1e	; 30
     4c6:	88 23       	and	r24, r24
     4c8:	59 f0       	breq	.+22     	; 0x4e0 <Endpoint_Read_Control_Stream_LE+0x70>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	59 f0       	breq	.+22     	; 0x4e4 <Endpoint_Read_Control_Stream_LE+0x74>
     4ce:	80 91 e8 00 	lds	r24, 0x00E8
     4d2:	80 ff       	sbrs	r24, 0
     4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <Endpoint_Read_Control_Stream_LE+0x54>
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <Endpoint_Read_Control_Stream_LE+0x6c>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	08 95       	ret
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	08 95       	ret
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	08 95       	ret
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	08 95       	ret

000004e8 <Endpoint_Write_Control_PStream_LE>:
     4e8:	20 91 1c 01 	lds	r18, 0x011C
     4ec:	30 91 1d 01 	lds	r19, 0x011D
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f0:	26 17       	cp	r18, r22
     4f2:	37 07       	cpc	r19, r23
     4f4:	48 f0       	brcs	.+18     	; 0x508 <Endpoint_Write_Control_PStream_LE+0x20>
     4f6:	61 15       	cp	r22, r1
     4f8:	71 05       	cpc	r23, r1
     4fa:	39 f4       	brne	.+14     	; 0x50a <Endpoint_Write_Control_PStream_LE+0x22>
     4fc:	20 91 e8 00 	lds	r18, 0x00E8
     500:	2e 77       	andi	r18, 0x7E	; 126
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     502:	20 93 e8 00 	sts	0x00E8, r18
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	01 c0       	rjmp	.+2      	; 0x50a <Endpoint_Write_Control_PStream_LE+0x22>
     508:	b9 01       	movw	r22, r18
     50a:	fc 01       	movw	r30, r24
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	61 15       	cp	r22, r1
     510:	71 05       	cpc	r23, r1
     512:	a9 f1       	breq	.+106    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x96>
     514:	8e b3       	in	r24, 0x1e	; 30
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <Endpoint_Write_Control_PStream_LE+0x34>
     51a:	3e c0       	rjmp	.+124    	; 0x598 <Endpoint_Write_Control_PStream_LE+0xb0>
     51c:	85 30       	cpi	r24, 0x05	; 5

					if (UsageListSize)
     51e:	09 f4       	brne	.+2      	; 0x522 <Endpoint_Write_Control_PStream_LE+0x3a>
     520:	3d c0       	rjmp	.+122    	; 0x59c <Endpoint_Write_Control_PStream_LE+0xb4>
     522:	80 91 e8 00 	lds	r24, 0x00E8
     526:	83 fd       	sbrc	r24, 3
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	3b c0       	rjmp	.+118    	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0xb8>
     52a:	80 91 e8 00 	lds	r24, 0x00E8
     52e:	82 ff       	sbrs	r24, 2
     530:	06 c0       	rjmp	.+12     	; 0x53e <Endpoint_Write_Control_PStream_LE+0x56>
     532:	80 91 e8 00 	lds	r24, 0x00E8
     536:	82 ff       	sbrs	r24, 2
     538:	25 c0       	rjmp	.+74     	; 0x584 <Endpoint_Write_Control_PStream_LE+0x9c>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	08 95       	ret

						for (uint8_t i = 1; i < UsageListSize; i++)
     53e:	80 91 e8 00 	lds	r24, 0x00E8
     542:	80 ff       	sbrs	r24, 0
     544:	e4 cf       	rjmp	.-56     	; 0x50e <Endpoint_Write_Control_PStream_LE+0x26>
     546:	80 91 f2 00 	lds	r24, 0x00F2
						  UsageList[i - 1] = UsageList[i];
     54a:	90 91 f3 00 	lds	r25, 0x00F3
     54e:	61 15       	cp	r22, r1
     550:	71 05       	cpc	r23, r1

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	59 f0       	breq	.+22     	; 0x56a <Endpoint_Write_Control_PStream_LE+0x82>
     554:	88 30       	cpi	r24, 0x08	; 8
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     556:	91 05       	cpc	r25, r1
     558:	40 f4       	brcc	.+16     	; 0x56a <Endpoint_Write_Control_PStream_LE+0x82>
     55a:	24 91       	lpm	r18, Z
     55c:	20 93 f1 00 	sts	0x00F1, r18
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     560:	31 96       	adiw	r30, 0x01	; 1
     562:	61 50       	subi	r22, 0x01	; 1
     564:	71 09       	sbc	r23, r1
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	f2 cf       	rjmp	.-28     	; 0x54e <Endpoint_Write_Control_PStream_LE+0x66>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	21 e0       	ldi	r18, 0x01	; 1
     56c:	08 97       	sbiw	r24, 0x08	; 8
     56e:	09 f0       	breq	.+2      	; 0x572 <Endpoint_Write_Control_PStream_LE+0x8a>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	80 91 e8 00 	lds	r24, 0x00E8
     576:	8e 77       	andi	r24, 0x7E	; 126
     578:	80 93 e8 00 	sts	0x00E8, r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57c:	c8 cf       	rjmp	.-112    	; 0x50e <Endpoint_Write_Control_PStream_LE+0x26>
     57e:	21 11       	cpse	r18, r1
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	c9 cf       	rjmp	.-110    	; 0x514 <Endpoint_Write_Control_PStream_LE+0x2c>
     582:	d7 cf       	rjmp	.-82     	; 0x532 <Endpoint_Write_Control_PStream_LE+0x4a>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     584:	8e b3       	in	r24, 0x1e	; 30
     586:	88 23       	and	r24, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	39 f0       	breq	.+14     	; 0x598 <Endpoint_Write_Control_PStream_LE+0xb0>
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	39 f0       	breq	.+14     	; 0x59c <Endpoint_Write_Control_PStream_LE+0xb4>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58e:	80 91 e8 00 	lds	r24, 0x00E8

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     592:	83 ff       	sbrs	r24, 3
     594:	ce cf       	rjmp	.-100    	; 0x532 <Endpoint_Write_Control_PStream_LE+0x4a>
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0xb8>
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	08 95       	ret
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	08 95       	ret
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	08 95       	ret

000005a4 <Endpoint_ConfigureEndpoint_Prv>:
     5a4:	98 2f       	mov	r25, r24
     5a6:	97 30       	cpi	r25, 0x07	; 7
     5a8:	58 f5       	brcc	.+86     	; 0x600 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     5aa:	90 93 e9 00 	sts	0x00E9, r25

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	98 17       	cp	r25, r24
     5b0:	39 f0       	breq	.+14     	; 0x5c0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     5b2:	70 91 ec 00 	lds	r23, 0x00EC
     5b6:	20 91 ed 00 	lds	r18, 0x00ED
     5ba:	50 91 f0 00 	lds	r21, 0x00F0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <Endpoint_ConfigureEndpoint_Prv+0x22>
     5c0:	24 2f       	mov	r18, r20
     5c2:	76 2f       	mov	r23, r22
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	21 ff       	sbrs	r18, 1
     5c8:	19 c0       	rjmp	.+50     	; 0x5fc <Endpoint_ConfigureEndpoint_Prv+0x58>
     5ca:	30 91 eb 00 	lds	r19, 0x00EB
     5ce:	3e 7f       	andi	r19, 0xFE	; 254
     5d0:	30 93 eb 00 	sts	0x00EB, r19
     5d4:	30 91 ed 00 	lds	r19, 0x00ED
     5d8:	3d 7f       	andi	r19, 0xFD	; 253
     5da:	30 93 ed 00 	sts	0x00ED, r19
     5de:	30 91 eb 00 	lds	r19, 0x00EB
     5e2:	31 60       	ori	r19, 0x01	; 1
     5e4:	30 93 eb 00 	sts	0x00EB, r19
     5e8:	70 93 ec 00 	sts	0x00EC, r23
     5ec:	20 93 ed 00 	sts	0x00ED, r18
     5f0:	50 93 f0 00 	sts	0x00F0, r21

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f4:	20 91 ee 00 	lds	r18, 0x00EE
     5f8:	27 ff       	sbrs	r18, 7
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <Endpoint_ConfigureEndpoint_Prv+0x66>
     5fc:	9f 5f       	subi	r25, 0xFF	; 255
					  return HID_PARSE_InsufficientReportItems;
     5fe:	d3 cf       	rjmp	.-90     	; 0x5a6 <Endpoint_ConfigureEndpoint_Prv+0x2>
     600:	8f 70       	andi	r24, 0x0F	; 15

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     602:	80 93 e9 00 	sts	0x00E9, r24
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	08 95       	ret

0000060e <Endpoint_ConfigureEndpointTable>:
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	06 2f       	mov	r16, r22
     618:	ec 01       	movw	r28, r24
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	10 17       	cp	r17, r16
     61e:	71 f1       	breq	.+92     	; 0x67c <Endpoint_ConfigureEndpointTable+0x6e>
     620:	98 81       	ld	r25, Y
     622:	99 23       	and	r25, r25
     624:	41 f1       	breq	.+80     	; 0x676 <Endpoint_ConfigureEndpointTable+0x68>
     626:	2c 81       	ldd	r18, Y+4	; 0x04
     628:	e9 81       	ldd	r30, Y+1	; 0x01
     62a:	fa 81       	ldd	r31, Y+2	; 0x02
     62c:	7b 81       	ldd	r23, Y+3	; 0x03
     62e:	89 2f       	mov	r24, r25
     630:	8f 70       	andi	r24, 0x0F	; 15
     632:	87 30       	cpi	r24, 0x07	; 7
     634:	10 f0       	brcs	.+4      	; 0x63a <Endpoint_ConfigureEndpointTable+0x2c>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	22 c0       	rjmp	.+68     	; 0x67e <Endpoint_ConfigureEndpointTable+0x70>
     63a:	22 30       	cpi	r18, 0x02	; 2
     63c:	10 f0       	brcs	.+4      	; 0x642 <Endpoint_ConfigureEndpointTable+0x34>
     63e:	56 e0       	ldi	r21, 0x06	; 6
     640:	01 c0       	rjmp	.+2      	; 0x644 <Endpoint_ConfigureEndpointTable+0x36>
     642:	52 e0       	ldi	r21, 0x02	; 2
     644:	28 e0       	ldi	r18, 0x08	; 8
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	2e 17       	cp	r18, r30
     64c:	3f 07       	cpc	r19, r31
     64e:	20 f4       	brcc	.+8      	; 0x658 <Endpoint_ConfigureEndpointTable+0x4a>
     650:	4f 5f       	subi	r20, 0xFF	; 255
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	f9 cf       	rjmp	.-14     	; 0x64a <Endpoint_ConfigureEndpointTable+0x3c>
     658:	42 95       	swap	r20
     65a:	40 7f       	andi	r20, 0xF0	; 240
     65c:	45 2b       	or	r20, r21
     65e:	69 2f       	mov	r22, r25
     660:	66 1f       	adc	r22, r22
     662:	66 27       	eor	r22, r22
     664:	66 1f       	adc	r22, r22
     666:	90 e4       	ldi	r25, 0x40	; 64
     668:	79 9f       	mul	r23, r25
     66a:	90 01       	movw	r18, r0
     66c:	11 24       	eor	r1, r1
     66e:	62 2b       	or	r22, r18
     670:	99 df       	rcall	.-206    	; 0x5a4 <Endpoint_ConfigureEndpoint_Prv>
     672:	88 23       	and	r24, r24
     674:	01 f3       	breq	.-64     	; 0x636 <Endpoint_ConfigureEndpointTable+0x28>
     676:	1f 5f       	subi	r17, 0xFF	; 255
     678:	25 96       	adiw	r28, 0x05	; 5
     67a:	d0 cf       	rjmp	.-96     	; 0x61c <Endpoint_ConfigureEndpointTable+0xe>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <Endpoint_ClearStatusStage>:
					  ParserData->TotalReportItems++;
     688:	80 91 16 01 	lds	r24, 0x0116
     68c:	87 fd       	sbrc	r24, 7
     68e:	05 c0       	rjmp	.+10     	; 0x69a <Endpoint_ClearStatusStage+0x12>
     690:	80 91 e8 00 	lds	r24, 0x00E8

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     694:	80 ff       	sbrs	r24, 0
     696:	0d c0       	rjmp	.+26     	; 0x6b2 <Endpoint_ClearStatusStage+0x2a>
     698:	10 c0       	rjmp	.+32     	; 0x6ba <Endpoint_ClearStatusStage+0x32>
     69a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69e:	82 fd       	sbrc	r24, 2
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <Endpoint_ClearStatusStage+0x22>
     6a2:	8e b3       	in	r24, 0x1e	; 30
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a4:	81 11       	cpse	r24, r1
     6a6:	f9 cf       	rjmp	.-14     	; 0x69a <Endpoint_ClearStatusStage+0x12>
     6a8:	08 95       	ret
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
     6ae:	8b 77       	andi	r24, 0x7B	; 123
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <Endpoint_ClearStatusStage+0x38>
		}
	}

	if (!(ParserData->TotalReportItems))
     6b2:	8e b3       	in	r24, 0x1e	; 30
     6b4:	81 11       	cpse	r24, r1
     6b6:	ec cf       	rjmp	.-40     	; 0x690 <Endpoint_ClearStatusStage+0x8>
     6b8:	08 95       	ret
	  return HID_PARSE_NoUnfilteredReportItems;
     6ba:	80 91 e8 00 	lds	r24, 0x00E8

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6be:	8e 77       	andi	r24, 0x7E	; 126
     6c0:	80 93 e8 00 	sts	0x00E8, r24
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c4:	08 95       	ret

000006c6 <Endpoint_WaitUntilReady>:
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c6:	80 91 e4 00 	lds	r24, 0x00E4
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ca:	90 91 e5 00 	lds	r25, 0x00E5

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ce:	45 e6       	ldi	r20, 0x65	; 101
     6d0:	20 91 ec 00 	lds	r18, 0x00EC
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d4:	20 ff       	sbrs	r18, 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	20 c0       	rjmp	.+64     	; 0x718 <Endpoint_WaitUntilReady+0x52>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d8:	20 91 e8 00 	lds	r18, 0x00E8
     6dc:	20 fd       	sbrc	r18, 0
     6de:	20 c0       	rjmp	.+64     	; 0x720 <Endpoint_WaitUntilReady+0x5a>
     6e0:	2e b3       	in	r18, 0x1e	; 30
     6e2:	22 23       	and	r18, r18
     6e4:	89 f0       	breq	.+34     	; 0x708 <Endpoint_WaitUntilReady+0x42>
     6e6:	25 30       	cpi	r18, 0x05	; 5
     6e8:	89 f0       	breq	.+34     	; 0x70c <Endpoint_WaitUntilReady+0x46>
     6ea:	20 91 eb 00 	lds	r18, 0x00EB
     6ee:	25 fd       	sbrc	r18, 5
     6f0:	0f c0       	rjmp	.+30     	; 0x710 <Endpoint_WaitUntilReady+0x4a>
     6f2:	20 91 e4 00 	lds	r18, 0x00E4
     6f6:	30 91 e5 00 	lds	r19, 0x00E5
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	41 f3       	breq	.-48     	; 0x6d0 <Endpoint_WaitUntilReady+0xa>
     700:	41 50       	subi	r20, 0x01	; 1
     702:	41 f0       	breq	.+16     	; 0x714 <Endpoint_WaitUntilReady+0x4e>
     704:	c9 01       	movw	r24, r18
     706:	e4 cf       	rjmp	.-56     	; 0x6d0 <Endpoint_WaitUntilReady+0xa>
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     718:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     71c:	22 ff       	sbrs	r18, 2
     71e:	e0 cf       	rjmp	.-64     	; 0x6e0 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	08 95       	ret

00000724 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     72c:	4d d0       	rcall	.+154    	; 0x7c8 <USB_INT_DisableAllInterrupts>
     72e:	54 d0       	rcall	.+168    	; 0x7d8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     730:	c8 ed       	ldi	r28, 0xD8	; 216
     732:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     734:	88 81       	ld	r24, Y
     736:	8f 77       	andi	r24, 0x7F	; 127
     738:	88 83       	st	Y, r24
     73a:	88 81       	ld	r24, Y
     73c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     73e:	88 83       	st	Y, r24
     740:	88 81       	ld	r24, Y
     742:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     744:	88 83       	st	Y, r24
     746:	e7 ed       	ldi	r30, 0xD7	; 215
     748:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     74a:	80 81       	ld	r24, Z
     74c:	80 68       	ori	r24, 0x80	; 128
     74e:	80 83       	st	Z, r24
     750:	19 bc       	out	0x29, r1	; 41
     752:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     754:	10 92 12 01 	sts	0x0112, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     758:	10 92 14 01 	sts	0x0114, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     75c:	10 92 13 01 	sts	0x0113, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     760:	00 ee       	ldi	r16, 0xE0	; 224
     762:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     764:	f8 01       	movw	r30, r16
     766:	80 81       	ld	r24, Z
     768:	8b 7f       	andi	r24, 0xFB	; 251
     76a:	80 83       	st	Z, r24
     76c:	88 81       	ld	r24, Y
     76e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     770:	88 83       	st	Y, r24
     772:	42 e0       	ldi	r20, 0x02	; 2
     774:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	15 df       	rcall	.-470    	; 0x5a4 <Endpoint_ConfigureEndpoint_Prv>
     77a:	e1 ee       	ldi	r30, 0xE1	; 225
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	80 83       	st	Z, r24
     784:	e2 ee       	ldi	r30, 0xE2	; 226
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     78a:	81 60       	ori	r24, 0x01	; 1
     78c:	80 83       	st	Z, r24
     78e:	80 81       	ld	r24, Z
     790:	88 60       	ori	r24, 0x08	; 8
     792:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     794:	f8 01       	movw	r30, r16
     796:	80 81       	ld	r24, Z
     798:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     79a:	80 83       	st	Z, r24
     79c:	88 81       	ld	r24, Y
     79e:	80 61       	ori	r24, 0x10	; 16
     7a0:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7a8:	0f 91       	pop	r16
     7aa:	08 95       	ret

000007ac <USB_Init>:
     7ac:	e8 ed       	ldi	r30, 0xD8	; 216
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     7b2:	8f 7e       	andi	r24, 0xEF	; 239
     7b4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     7b6:	e7 ed       	ldi	r30, 0xD7	; 215
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 15 01 	sts	0x0115, r24

	USB_ResetInterface();
     7c6:	ae cf       	rjmp	.-164    	; 0x724 <USB_ResetInterface>

000007c8 <USB_INT_DisableAllInterrupts>:
     7c8:	e8 ed       	ldi	r30, 0xD8	; 216
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	8c 7f       	andi	r24, 0xFC	; 252
     7d0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7d2:	10 92 e2 00 	sts	0x00E2, r1
     7d6:	08 95       	ret

000007d8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     7d8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7dc:	10 92 e1 00 	sts	0x00E1, r1
     7e0:	08 95       	ret

000007e2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	0b b6       	in	r0, 0x3b	; 59
     7ee:	0f 92       	push	r0
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     808:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     80c:	82 ff       	sbrs	r24, 2
     80e:	0a c0       	rjmp	.+20     	; 0x824 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     810:	80 91 e2 00 	lds	r24, 0x00E2
     814:	82 ff       	sbrs	r24, 2
     816:	06 c0       	rjmp	.+12     	; 0x824 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     818:	80 91 e1 00 	lds	r24, 0x00E1
     81c:	8b 7f       	andi	r24, 0xFB	; 251
     81e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     822:	fa dc       	rcall	.-1548   	; 0x218 <EVENT_USB_Device_StartOfFrame>
     824:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     828:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     82a:	1b c0       	rjmp	.+54     	; 0x862 <__vector_10+0x80>
     82c:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     830:	80 ff       	sbrs	r24, 0
     832:	17 c0       	rjmp	.+46     	; 0x862 <__vector_10+0x80>
     834:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     838:	8e 7f       	andi	r24, 0xFE	; 254
     83a:	80 93 da 00 	sts	0x00DA, r24
     83e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     842:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     844:	0b c0       	rjmp	.+22     	; 0x85c <__vector_10+0x7a>
     846:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     848:	89 bd       	out	0x29, r24	; 41
     84a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     84c:	89 bd       	out	0x29, r24	; 41
     84e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     850:	00 fe       	sbrs	r0, 0
     852:	fd cf       	rjmp	.-6      	; 0x84e <__vector_10+0x6c>
     854:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     856:	8e bb       	out	0x1e, r24	; 30
     858:	ca dc       	rcall	.-1644   	; 0x1ee <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     85a:	03 c0       	rjmp	.+6      	; 0x862 <__vector_10+0x80>
     85c:	19 bc       	out	0x29, r1	; 41
     85e:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     860:	c8 dc       	rcall	.-1648   	; 0x1f2 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     862:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     866:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     868:	17 c0       	rjmp	.+46     	; 0x898 <__vector_10+0xb6>
     86a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     86e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     870:	13 c0       	rjmp	.+38     	; 0x898 <__vector_10+0xb6>
     872:	80 91 e2 00 	lds	r24, 0x00E2
     876:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     878:	80 93 e2 00 	sts	0x00E2, r24
     87c:	80 91 e2 00 	lds	r24, 0x00E2
     880:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     882:	80 93 e2 00 	sts	0x00E2, r24
     886:	80 91 d8 00 	lds	r24, 0x00D8
     88a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     88c:	80 93 d8 00 	sts	0x00D8, r24
     890:	19 bc       	out	0x29, r1	; 41
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     896:	b9 d1       	rcall	.+882    	; 0xc0a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     898:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     89c:	84 ff       	sbrs	r24, 4
     89e:	2e c0       	rjmp	.+92     	; 0x8fc <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8a0:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8a4:	84 ff       	sbrs	r24, 4
     8a6:	2a c0       	rjmp	.+84     	; 0x8fc <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8a8:	8c e0       	ldi	r24, 0x0C	; 12
     8aa:	89 bd       	out	0x29, r24	; 41
     8ac:	8e e0       	ldi	r24, 0x0E	; 14
     8ae:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8b0:	09 b4       	in	r0, 0x29	; 41
     8b2:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <__vector_10+0xce>
     8b6:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8ba:	8f 7d       	andi	r24, 0xDF	; 223
     8bc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8c0:	80 91 e1 00 	lds	r24, 0x00E1
     8c4:	8f 7e       	andi	r24, 0xEF	; 239
     8c6:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
     8ce:	8f 7e       	andi	r24, 0xEF	; 239
     8d0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8d4:	80 91 e2 00 	lds	r24, 0x00E2
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8de:	80 91 12 01 	lds	r24, 0x0112
     8e2:	88 23       	and	r24, r24
     8e4:	11 f0       	breq	.+4      	; 0x8ea <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <__vector_10+0x116>
     8ea:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
     8ee:	87 ff       	sbrs	r24, 7
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__vector_10+0x114>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <__vector_10+0x116>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	8e bb       	out	0x1e, r24	; 30
     8fa:	87 d1       	rcall	.+782    	; 0xc0a <USB_Event_Stub>
     8fc:	80 91 e1 00 	lds	r24, 0x00E1
     900:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     902:	21 c0       	rjmp	.+66     	; 0x946 <__vector_10+0x164>
     904:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     908:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     90a:	1d c0       	rjmp	.+58     	; 0x946 <__vector_10+0x164>
     90c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     910:	87 7f       	andi	r24, 0xF7	; 247
     912:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	8e bb       	out	0x1e, r24	; 30
     91a:	10 92 12 01 	sts	0x0112, r1
     91e:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     922:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     924:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     928:	80 91 e2 00 	lds	r24, 0x00E2
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     932:	80 91 e2 00 	lds	r24, 0x00E2
     936:	80 61       	ori	r24, 0x10	; 16
     938:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     93c:	42 e0       	ldi	r20, 0x02	; 2
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	30 de       	rcall	.-928    	; 0x5a4 <Endpoint_ConfigureEndpoint_Prv>
     944:	62 d1       	rcall	.+708    	; 0xc0a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0b be       	out	0x3b, r0	; 59
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <USB_Device_ProcessControlRequest>:
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	aa 97       	sbiw	r28, 0x2a	; 42
     978:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	e6 e1       	ldi	r30, 0x16	; 22
     984:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     986:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     98a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     98c:	21 e0       	ldi	r18, 0x01	; 1
     98e:	ee 31       	cpi	r30, 0x1E	; 30
     990:	f2 07       	cpc	r31, r18
     992:	c9 f7       	brne	.-14     	; 0x986 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     994:	3e dc       	rcall	.-1924   	; 0x212 <EVENT_USB_Device_ControlRequest>
     996:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     99a:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     99c:	1e c1       	rjmp	.+572    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     99e:	90 91 16 01 	lds	r25, 0x0116
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9a2:	80 91 17 01 	lds	r24, 0x0117

		switch (USB_ControlRequest.bRequest)
     9a6:	85 30       	cpi	r24, 0x05	; 5
     9a8:	09 f4       	brne	.+2      	; 0x9ac <USB_Device_ProcessControlRequest+0x40>
     9aa:	77 c0       	rjmp	.+238    	; 0xa9a <USB_Device_ProcessControlRequest+0x12e>
     9ac:	30 f4       	brcc	.+12     	; 0x9ba <USB_Device_ProcessControlRequest+0x4e>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	81 f1       	breq	.+96     	; 0xa12 <USB_Device_ProcessControlRequest+0xa6>
     9b2:	68 f0       	brcs	.+26     	; 0x9ce <USB_Device_ProcessControlRequest+0x62>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	69 f1       	breq	.+90     	; 0xa12 <USB_Device_ProcessControlRequest+0xa6>
     9b8:	10 c1       	rjmp	.+544    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <USB_Device_ProcessControlRequest+0x54>
     9be:	e0 c0       	rjmp	.+448    	; 0xb80 <USB_Device_ProcessControlRequest+0x214>
     9c0:	89 30       	cpi	r24, 0x09	; 9
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0x5a>
     9c4:	ef c0       	rjmp	.+478    	; 0xba4 <USB_Device_ProcessControlRequest+0x238>
     9c6:	86 30       	cpi	r24, 0x06	; 6
     9c8:	09 f0       	breq	.+2      	; 0x9cc <USB_Device_ProcessControlRequest+0x60>
     9ca:	07 c1       	rjmp	.+526    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     9cc:	87 c0       	rjmp	.+270    	; 0xadc <USB_Device_ProcessControlRequest+0x170>
     9ce:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <USB_Device_ProcessControlRequest+0x86>
     9d2:	92 38       	cpi	r25, 0x82	; 130
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x6c>
     9d6:	01 c1       	rjmp	.+514    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     9d8:	80 91 1a 01 	lds	r24, 0x011A
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9dc:	8f 70       	andi	r24, 0x0F	; 15
     9de:	80 93 e9 00 	sts	0x00E9, r24
     9e2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9e6:	85 fb       	bst	r24, 5
     9e8:	88 27       	eor	r24, r24
     9ea:	80 f9       	bld	r24, 0
     9ec:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9f0:	06 c0       	rjmp	.+12     	; 0x9fe <USB_Device_ProcessControlRequest+0x92>
     9f2:	80 91 13 01 	lds	r24, 0x0113
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     9f6:	90 91 14 01 	lds	r25, 0x0114
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9fa:	91 11       	cpse	r25, r1
     9fc:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9fe:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a02:	97 7f       	andi	r25, 0xF7	; 247
     a04:	90 93 e8 00 	sts	0x00E8, r25
     a08:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a0c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a10:	c2 c0       	rjmp	.+388    	; 0xb96 <USB_Device_ProcessControlRequest+0x22a>
     a12:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a14:	2d 7f       	andi	r18, 0xFD	; 253
     a16:	09 f0       	breq	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0xae>
     a18:	e0 c0       	rjmp	.+448    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     a1a:	99 23       	and	r25, r25
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a1c:	19 f0       	breq	.+6      	; 0xa24 <USB_Device_ProcessControlRequest+0xb8>
     a1e:	92 30       	cpi	r25, 0x02	; 2
     a20:	61 f0       	breq	.+24     	; 0xa3a <USB_Device_ProcessControlRequest+0xce>
     a22:	db c0       	rjmp	.+438    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     a24:	90 91 18 01 	lds	r25, 0x0118
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a28:	91 30       	cpi	r25, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0xc2>
     a2c:	d6 c0       	rjmp	.+428    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     a2e:	83 30       	cpi	r24, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a30:	09 f0       	breq	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0xc8>
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 14 01 	sts	0x0114, r25
     a38:	2a c0       	rjmp	.+84     	; 0xa8e <USB_Device_ProcessControlRequest+0x122>
     a3a:	90 91 18 01 	lds	r25, 0x0118

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a3e:	91 11       	cpse	r25, r1
     a40:	26 c0       	rjmp	.+76     	; 0xa8e <USB_Device_ProcessControlRequest+0x122>
     a42:	20 91 1a 01 	lds	r18, 0x011A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a46:	2f 70       	andi	r18, 0x0F	; 15
     a48:	09 f4       	brne	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0xe0>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a4a:	c7 c0       	rjmp	.+398    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     a4c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a50:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a54:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a56:	1b c0       	rjmp	.+54     	; 0xa8e <USB_Device_ProcessControlRequest+0x122>
     a58:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a5a:	21 f4       	brne	.+8      	; 0xa64 <USB_Device_ProcessControlRequest+0xf8>
     a5c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a60:	80 62       	ori	r24, 0x20	; 32
     a62:	13 c0       	rjmp	.+38     	; 0xa8a <USB_Device_ProcessControlRequest+0x11e>
     a64:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a68:	80 61       	ori	r24, 0x10	; 16
     a6a:	80 93 eb 00 	sts	0x00EB, r24
     a6e:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 2e       	mov	r0, r18
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x10c>
     a76:	88 0f       	add	r24, r24
     a78:	0a 94       	dec	r0
     a7a:	ea f7       	brpl	.-6      	; 0xa76 <USB_Device_ProcessControlRequest+0x10a>
     a7c:	80 93 ea 00 	sts	0x00EA, r24
     a80:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     a84:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a88:	88 60       	ori	r24, 0x08	; 8
     a8a:	80 93 eb 00 	sts	0x00EB, r24
     a8e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a92:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a96:	87 7f       	andi	r24, 0xF7	; 247
     a98:	81 c0       	rjmp	.+258    	; 0xb9c <USB_Device_ProcessControlRequest+0x230>
     a9a:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a9c:	9e c0       	rjmp	.+316    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     a9e:	10 91 18 01 	lds	r17, 0x0118
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     aa2:	1f 77       	andi	r17, 0x7F	; 127
     aa4:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     aa8:	80 78       	andi	r24, 0x80	; 128
     aaa:	81 2b       	or	r24, r17
     aac:	80 93 e3 00 	sts	0x00E3, r24
     ab0:	80 91 e8 00 	lds	r24, 0x00E8
     ab4:	87 7f       	andi	r24, 0xF7	; 247
     ab6:	80 93 e8 00 	sts	0x00E8, r24
     aba:	e6 dd       	rcall	.-1076   	; 0x688 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     abc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac0:	80 ff       	sbrs	r24, 0
     ac2:	fc cf       	rjmp	.-8      	; 0xabc <USB_Device_ProcessControlRequest+0x150>

	while (!(Endpoint_IsINReady()));
     ac4:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     ac8:	80 68       	ori	r24, 0x80	; 128
     aca:	80 93 e3 00 	sts	0x00E3, r24
     ace:	11 23       	and	r17, r17
     ad0:	11 f0       	breq	.+4      	; 0xad6 <USB_Device_ProcessControlRequest+0x16a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <USB_Device_ProcessControlRequest+0x16c>
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	8e bb       	out	0x1e, r24	; 30
     ada:	7f c0       	rjmp	.+254    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     adc:	90 58       	subi	r25, 0x80	; 128
     ade:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ae0:	08 f0       	brcs	.+2      	; 0xae4 <USB_Device_ProcessControlRequest+0x178>
     ae2:	7b c0       	rjmp	.+246    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     ae4:	80 91 18 01 	lds	r24, 0x0118
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ae8:	90 91 19 01 	lds	r25, 0x0119
     aec:	8c 3d       	cpi	r24, 0xDC	; 220
     aee:	23 e0       	ldi	r18, 0x03	; 3
     af0:	92 07       	cpc	r25, r18
     af2:	71 f5       	brne	.+92     	; 0xb50 <USB_Device_ProcessControlRequest+0x1e4>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	8a 83       	std	Y+2, r24	; 0x02
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     af8:	8a e2       	ldi	r24, 0x2A	; 42
     afa:	89 83       	std	Y+1, r24	; 0x01
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     afc:	4f b7       	in	r20, 0x3f	; 63
     afe:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b00:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b02:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	3e e0       	ldi	r19, 0x0E	; 14
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b08:	51 e2       	ldi	r21, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b0a:	e3 2f       	mov	r30, r19

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	50 93 57 00 	sts	0x0057, r21
     b12:	e4 91       	lpm	r30, Z
     b14:	20 ff       	sbrs	r18, 0
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0x1b2>

					if (SerialCharNum & 0x01)
     b18:	e2 95       	swap	r30
     b1a:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     b1c:	3f 5f       	subi	r19, 0xFF	; 255
     b1e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b20:	8e 2f       	mov	r24, r30
					}

					SerialByte &= 0x0F;
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	ea 30       	cpi	r30, 0x0A	; 10
     b26:	10 f0       	brcs	.+4      	; 0xb2c <USB_Device_ProcessControlRequest+0x1c0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b28:	c7 96       	adiw	r24, 0x37	; 55
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x1c2>
     b2c:	c0 96       	adiw	r24, 0x30	; 48
     b2e:	8d 93       	st	X+, r24
     b30:	9d 93       	st	X+, r25
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	24 31       	cpi	r18, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b36:	49 f7       	brne	.-46     	; 0xb0a <USB_Device_ProcessControlRequest+0x19e>
     b38:	4f bf       	out	0x3f, r20	; 63
     b3a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	80 93 e8 00 	sts	0x00E8, r24
     b44:	6a e2       	ldi	r22, 0x2A	; 42
     b46:	70 e0       	ldi	r23, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	36 dc       	rcall	.-1940   	; 0x3ba <Endpoint_Write_Control_Stream_LE>
     b4e:	12 c0       	rjmp	.+36     	; 0xb74 <USB_Device_ProcessControlRequest+0x208>
     b50:	ae 01       	movw	r20, r28
     b52:	4f 5f       	subi	r20, 0xFF	; 255
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b56:	60 91 1a 01 	lds	r22, 0x011A
     b5a:	a4 db       	rcall	.-2232   	; 0x2a4 <CALLBACK_USB_GetDescriptor>
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	09 f4       	brne	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x1f6>
     b60:	3c c0       	rjmp	.+120    	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     b62:	20 91 e8 00 	lds	r18, 0x00E8
     b66:	27 7f       	andi	r18, 0xF7	; 247
     b68:	20 93 e8 00 	sts	0x00E8, r18
     b6c:	bc 01       	movw	r22, r24
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	ba dc       	rcall	.-1676   	; 0x4e8 <Endpoint_Write_Control_PStream_LE>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b74:	80 91 e8 00 	lds	r24, 0x00E8
     b78:	8b 77       	andi	r24, 0x7B	; 123
     b7a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b7e:	2d c0       	rjmp	.+90     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     b80:	90 38       	cpi	r25, 0x80	; 128
     b82:	59 f5       	brne	.+86     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b8a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b8e:	80 91 12 01 	lds	r24, 0x0112
     b92:	80 93 f1 00 	sts	0x00F1, r24
     b96:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b9a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b9c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba0:	73 dd       	rcall	.-1306   	; 0x688 <Endpoint_ClearStatusStage>
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     ba4:	91 11       	cpse	r25, r1
     ba6:	19 c0       	rjmp	.+50     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
     ba8:	90 91 18 01 	lds	r25, 0x0118
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bac:	92 30       	cpi	r25, 0x02	; 2
     bae:	a8 f4       	brcc	.+42     	; 0xbda <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	80 93 e8 00 	sts	0x00E8, r24
     bba:	90 93 12 01 	sts	0x0112, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bbe:	64 dd       	rcall	.-1336   	; 0x688 <Endpoint_ClearStatusStage>
     bc0:	80 91 12 01 	lds	r24, 0x0112
     bc4:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <USB_Device_ProcessControlRequest+0x264>
     bc8:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     bcc:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <USB_Device_ProcessControlRequest+0x268>
     bd0:	84 e0       	ldi	r24, 0x04	; 4
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <USB_Device_ProcessControlRequest+0x26a>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bd6:	8e bb       	out	0x1e, r24	; 30
     bd8:	0e db       	rcall	.-2532   	; 0x1f6 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bda:	80 91 e8 00 	lds	r24, 0x00E8
     bde:	83 ff       	sbrs	r24, 3
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <USB_Device_ProcessControlRequest+0x28a>
     be2:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     be6:	87 7f       	andi	r24, 0xF7	; 247
     be8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bec:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     bf0:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf2:	80 93 eb 00 	sts	0x00EB, r24
     bf6:	aa 96       	adiw	r28, 0x2a	; 42
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c06:	1f 91       	pop	r17
     c08:	08 95       	ret

00000c0a <USB_Event_Stub>:
     c0a:	08 95       	ret

00000c0c <USB_USBTask>:
     c0c:	cf 93       	push	r28
     c0e:	8e b3       	in	r24, 0x1e	; 30
     c10:	88 23       	and	r24, r24
     c12:	a9 f0       	breq	.+42     	; 0xc3e <USB_USBTask+0x32>
     c14:	80 91 e9 00 	lds	r24, 0x00E9
     c18:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c1a:	90 91 ec 00 	lds	r25, 0x00EC
     c1e:	90 ff       	sbrs	r25, 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <USB_USBTask+0x1a>
     c22:	90 e8       	ldi	r25, 0x80	; 128
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <USB_USBTask+0x1c>
     c26:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c28:	c9 2f       	mov	r28, r25
     c2a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c34:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c36:	9a de       	rcall	.-716    	; 0x96c <USB_Device_ProcessControlRequest>
     c38:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3a:	c0 93 e9 00 	sts	0x00E9, r28
     c3e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c40:	08 95       	ret

00000c42 <HID_Device_ProcessControlRequest>:
     c42:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c44:	7f 92       	push	r7
     c46:	8f 92       	push	r8
     c48:	9f 92       	push	r9
     c4a:	af 92       	push	r10
     c4c:	bf 92       	push	r11
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <HID_Device_ProcessControlRequest+0x1e>
     c60:	1f 92       	push	r1
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     c68:	ad b6       	in	r10, 0x3d	; 61
     c6a:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     c70:	83 ff       	sbrs	r24, 3
     c72:	02 c1       	rjmp	.+516    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     c74:	f7 01       	movw	r30, r14
     c76:	80 81       	ld	r24, Z
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	20 91 1a 01 	lds	r18, 0x011A
     c7e:	30 91 1b 01 	lds	r19, 0x011B
     c82:	28 17       	cp	r18, r24
     c84:	39 07       	cpc	r19, r25
     c86:	09 f0       	breq	.+2      	; 0xc8a <HID_Device_ProcessControlRequest+0x48>
     c88:	f7 c0       	rjmp	.+494    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
	  return;

	switch (USB_ControlRequest.bRequest)
     c8a:	80 91 17 01 	lds	r24, 0x0117
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	09 f4       	brne	.+2      	; 0xc94 <HID_Device_ProcessControlRequest+0x52>
     c92:	99 c0       	rjmp	.+306    	; 0xdc6 <HID_Device_ProcessControlRequest+0x184>
     c94:	30 f4       	brcc	.+12     	; 0xca2 <HID_Device_ProcessControlRequest+0x60>
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	71 f0       	breq	.+28     	; 0xcb6 <HID_Device_ProcessControlRequest+0x74>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	09 f4       	brne	.+2      	; 0xca0 <HID_Device_ProcessControlRequest+0x5e>
     c9e:	d0 c0       	rjmp	.+416    	; 0xe40 <HID_Device_ProcessControlRequest+0x1fe>
     ca0:	eb c0       	rjmp	.+470    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     ca2:	8a 30       	cpi	r24, 0x0A	; 10
     ca4:	09 f4       	brne	.+2      	; 0xca8 <HID_Device_ProcessControlRequest+0x66>
     ca6:	b4 c0       	rjmp	.+360    	; 0xe10 <HID_Device_ProcessControlRequest+0x1ce>
     ca8:	8b 30       	cpi	r24, 0x0B	; 11
     caa:	09 f4       	brne	.+2      	; 0xcae <HID_Device_ProcessControlRequest+0x6c>
     cac:	9d c0       	rjmp	.+314    	; 0xde8 <HID_Device_ProcessControlRequest+0x1a6>
     cae:	89 30       	cpi	r24, 0x09	; 9
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <HID_Device_ProcessControlRequest+0x72>
     cb2:	e2 c0       	rjmp	.+452    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     cb4:	4b c0       	rjmp	.+150    	; 0xd4c <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     cb6:	80 91 16 01 	lds	r24, 0x0116
     cba:	81 3a       	cpi	r24, 0xA1	; 161
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <HID_Device_ProcessControlRequest+0x7e>
     cbe:	dc c0       	rjmp	.+440    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     cc0:	8d b6       	in	r8, 0x3d	; 61
     cc2:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     cc4:	1a 82       	std	Y+2, r1	; 0x02
     cc6:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     cc8:	80 91 18 01 	lds	r24, 0x0118
     ccc:	10 91 19 01 	lds	r17, 0x0119
     cd0:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     cd2:	f7 01       	movw	r30, r14
     cd4:	40 85       	ldd	r20, Z+8	; 0x08
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	8d b7       	in	r24, 0x3d	; 61
     cda:	9e b7       	in	r25, 0x3e	; 62
     cdc:	84 1b       	sub	r24, r20
     cde:	95 0b       	sbc	r25, r21
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	9e bf       	out	0x3e, r25	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	8d bf       	out	0x3d, r24	; 61
     cea:	ed b7       	in	r30, 0x3d	; 61
     cec:	fe b7       	in	r31, 0x3e	; 62
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	cf 01       	movw	r24, r30
     cf8:	bb d1       	rcall	.+886    	; 0x1070 <memset>
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     cfc:	41 0f       	add	r20, r17
     cfe:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d00:	0f 5f       	subi	r16, 0xFF	; 255
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	96 01       	movw	r18, r12
     d06:	be 01       	movw	r22, r28
     d08:	6d 5f       	subi	r22, 0xFD	; 253
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	c7 01       	movw	r24, r14
     d0e:	90 da       	rcall	.-2784   	; 0x230 <CALLBACK_HID_Device_CreateHIDReport>
     d10:	f7 01       	movw	r30, r14
     d12:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d14:	97 81       	ldd	r25, Z+7	; 0x07
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	21 f0       	breq	.+8      	; 0xd22 <HID_Device_ProcessControlRequest+0xe0>
     d1a:	40 85       	ldd	r20, Z+8	; 0x08
     d1c:	50 e0       	ldi	r21, 0x00	; 0
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d1e:	b6 01       	movw	r22, r12
     d20:	9e d1       	rcall	.+828    	; 0x105e <memcpy>
     d22:	10 92 e9 00 	sts	0x00E9, r1
     d26:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d2c:	80 93 e8 00 	sts	0x00E8, r24
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	81 11       	cpse	r24, r1
     d34:	80 93 f1 00 	sts	0x00F1, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     d38:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d3a:	7a 81       	ldd	r23, Y+2	; 0x02
     d3c:	c6 01       	movw	r24, r12
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d3e:	3d db       	rcall	.-2438   	; 0x3ba <Endpoint_Write_Control_Stream_LE>
     d40:	80 91 e8 00 	lds	r24, 0x00E8
     d44:	8b 77       	andi	r24, 0x7B	; 123
     d46:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d4a:	37 c0       	rjmp	.+110    	; 0xdba <HID_Device_ProcessControlRequest+0x178>
     d4c:	80 91 16 01 	lds	r24, 0x0116
     d50:	81 32       	cpi	r24, 0x21	; 33
     d52:	09 f0       	breq	.+2      	; 0xd56 <HID_Device_ProcessControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d54:	91 c0       	rjmp	.+290    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     d56:	8d b6       	in	r8, 0x3d	; 61
     d58:	9e b6       	in	r9, 0x3e	; 62
     d5a:	00 91 1c 01 	lds	r16, 0x011C
     d5e:	10 91 1d 01 	lds	r17, 0x011D
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     d62:	70 90 18 01 	lds	r7, 0x0118
     d66:	60 90 19 01 	lds	r6, 0x0119
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d6a:	8d b7       	in	r24, 0x3d	; 61
     d6c:	9e b7       	in	r25, 0x3e	; 62
     d6e:	80 1b       	sub	r24, r16
     d70:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	9e bf       	out	0x3e, r25	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	8d bf       	out	0x3d, r24	; 61
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	6f 01       	movw	r12, r30
     d84:	80 91 e8 00 	lds	r24, 0x00E8
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8e:	b8 01       	movw	r22, r16
     d90:	cf 01       	movw	r24, r30
     d92:	6e db       	rcall	.-2340   	; 0x470 <Endpoint_Read_Control_Stream_LE>
     d94:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     d98:	8e 77       	andi	r24, 0x7E	; 126
     d9a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	71 10       	cpse	r7, r1
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <HID_Device_ProcessControlRequest+0x164>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     da8:	02 1b       	sub	r16, r18
     daa:	13 0b       	sbc	r17, r19
     dac:	2c 0d       	add	r18, r12
     dae:	3d 1d       	adc	r19, r13
     db0:	4f ef       	ldi	r20, 0xFF	; 255
     db2:	46 0d       	add	r20, r6
     db4:	67 2d       	mov	r22, r7
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     db6:	c7 01       	movw	r24, r14
     db8:	74 da       	rcall	.-2840   	; 0x2a2 <CALLBACK_HID_Device_ProcessHIDReport>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     dbe:	9e be       	out	0x3e, r9	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	8d be       	out	0x3d, r8	; 61
     dc4:	59 c0       	rjmp	.+178    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     dc6:	80 91 16 01 	lds	r24, 0x0116
     dca:	81 3a       	cpi	r24, 0xA1	; 161
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <HID_Device_ProcessControlRequest+0x18e>
     dce:	54 c0       	rjmp	.+168    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     dd0:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dd4:	87 7f       	andi	r24, 0xF7	; 247
     dd6:	80 93 e8 00 	sts	0x00E8, r24
     dda:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dde:	80 ff       	sbrs	r24, 0
     de0:	fc cf       	rjmp	.-8      	; 0xdda <HID_Device_ProcessControlRequest+0x198>
     de2:	f7 01       	movw	r30, r14
     de4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     de6:	40 c0       	rjmp	.+128    	; 0xe68 <HID_Device_ProcessControlRequest+0x226>
     de8:	80 91 16 01 	lds	r24, 0x0116
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     dec:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     dee:	09 f0       	breq	.+2      	; 0xdf2 <HID_Device_ProcessControlRequest+0x1b0>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     df2:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	80 93 e8 00 	sts	0x00E8, r24
     dfc:	45 dc       	rcall	.-1910   	; 0x688 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfe:	90 91 18 01 	lds	r25, 0x0118
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	91 11       	cpse	r25, r1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <HID_Device_ProcessControlRequest+0x1c8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e0c:	81 87       	std	Z+9, r24	; 0x09
     e0e:	34 c0       	rjmp	.+104    	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     e10:	80 91 16 01 	lds	r24, 0x0116
     e14:	81 32       	cpi	r24, 0x21	; 33
     e16:	81 f5       	brne	.+96     	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     e18:	80 91 e8 00 	lds	r24, 0x00E8
     e1c:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e1e:	80 93 e8 00 	sts	0x00E8, r24
     e22:	32 dc       	rcall	.-1948   	; 0x688 <Endpoint_ClearStatusStage>
     e24:	80 91 18 01 	lds	r24, 0x0118
     e28:	90 91 19 01 	lds	r25, 0x0119
     e2c:	88 27       	eor	r24, r24
     e2e:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     e34:	3a 95       	dec	r19
     e36:	e1 f7       	brne	.-8      	; 0xe30 <HID_Device_ProcessControlRequest+0x1ee>
     e38:	f7 01       	movw	r30, r14
     e3a:	95 87       	std	Z+13, r25	; 0x0d
     e3c:	84 87       	std	Z+12, r24	; 0x0c
     e3e:	1c c0       	rjmp	.+56     	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     e40:	80 91 16 01 	lds	r24, 0x0116
     e44:	81 3a       	cpi	r24, 0xA1	; 161
     e46:	c1 f4       	brne	.+48     	; 0xe78 <HID_Device_ProcessControlRequest+0x236>
     e48:	80 91 e8 00 	lds	r24, 0x00E8
     e4c:	87 7f       	andi	r24, 0xF7	; 247
     e4e:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e52:	80 91 e8 00 	lds	r24, 0x00E8
     e56:	80 ff       	sbrs	r24, 0
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <HID_Device_ProcessControlRequest+0x210>
     e5a:	f7 01       	movw	r30, r14
     e5c:	84 85       	ldd	r24, Z+12	; 0x0c
     e5e:	95 85       	ldd	r25, Z+13	; 0x0d
     e60:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e62:	87 95       	ror	r24
     e64:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e66:	87 95       	ror	r24
     e68:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     e6c:	80 91 e8 00 	lds	r24, 0x00E8
     e70:	8e 77       	andi	r24, 0x7E	; 126
     e72:	80 93 e8 00 	sts	0x00E8, r24
     e76:	08 dc       	rcall	.-2032   	; 0x688 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e7c:	be be       	out	0x3e, r11	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	ad be       	out	0x3d, r10	; 61
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
			}

			break;
	}
}
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	9f 90       	pop	r9
     e9e:	8f 90       	pop	r8
     ea0:	7f 90       	pop	r7
     ea2:	6f 90       	pop	r6
     ea4:	08 95       	ret

00000ea6 <HID_Device_ConfigureEndpoints>:
     ea6:	fc 01       	movw	r30, r24
     ea8:	39 96       	adiw	r30, 0x09	; 9
     eaa:	27 e0       	ldi	r18, 0x07	; 7
     eac:	df 01       	movw	r26, r30
     eae:	1d 92       	st	X+, r1
     eb0:	2a 95       	dec	r18
     eb2:	e9 f7       	brne	.-6      	; 0xeae <HID_Device_ConfigureEndpoints+0x8>
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	fc 01       	movw	r30, r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     eb8:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     eba:	24 ef       	ldi	r18, 0xF4	; 244
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	35 87       	std	Z+13, r19	; 0x0d
     ec0:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     ec2:	23 e0       	ldi	r18, 0x03	; 3
     ec4:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	a1 cb       	rjmp	.-2238   	; 0x60e <Endpoint_ConfigureEndpointTable>

00000ecc <HID_Device_USBTask>:
     ecc:	5f 92       	push	r5

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     ece:	6f 92       	push	r6
     ed0:	7f 92       	push	r7
     ed2:	8f 92       	push	r8
     ed4:	9f 92       	push	r9
     ed6:	af 92       	push	r10
     ed8:	bf 92       	push	r11
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	00 d0       	rcall	.+0      	; 0xeec <HID_Device_USBTask+0x20>
     eec:	1f 92       	push	r1
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     ef4:	ad b6       	in	r10, 0x3d	; 61
     ef6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     ef8:	8e b3       	in	r24, 0x1e	; 30
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <HID_Device_USBTask+0x34>
     efe:	8a c0       	rjmp	.+276    	; 0x1014 <HID_Device_USBTask+0x148>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f00:	80 91 e4 00 	lds	r24, 0x00E4
     f04:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     f08:	f7 01       	movw	r30, r14
     f0a:	22 85       	ldd	r18, Z+10	; 0x0a
     f0c:	33 85       	ldd	r19, Z+11	; 0x0b
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	09 f4       	brne	.+2      	; 0xf16 <HID_Device_USBTask+0x4a>
     f14:	7f c0       	rjmp	.+254    	; 0x1014 <HID_Device_USBTask+0x148>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	8f 70       	andi	r24, 0x0F	; 15
     f1a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     f22:	85 ff       	sbrs	r24, 5
     f24:	77 c0       	rjmp	.+238    	; 0x1014 <HID_Device_USBTask+0x148>
     f26:	8d b6       	in	r8, 0x3d	; 61
     f28:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f2a:	40 85       	ldd	r20, Z+8	; 0x08
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	8d b7       	in	r24, 0x3d	; 61
     f30:	9e b7       	in	r25, 0x3e	; 62
     f32:	84 1b       	sub	r24, r20
     f34:	95 0b       	sbc	r25, r21
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	8d bf       	out	0x3d, r24	; 61
     f40:	ed b7       	in	r30, 0x3d	; 61
     f42:	fe b7       	in	r31, 0x3e	; 62
     f44:	31 96       	adiw	r30, 0x01	; 1
     f46:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     f48:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     f4a:	1a 82       	std	Y+2, r1	; 0x02
     f4c:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	cf 01       	movw	r24, r30
     f54:	8d d0       	rcall	.+282    	; 0x1070 <memset>
     f56:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     f58:	0f 5f       	subi	r16, 0xFF	; 255
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	96 01       	movw	r18, r12
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	be 01       	movw	r22, r28
     f62:	6d 5f       	subi	r22, 0xFD	; 253
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	c7 01       	movw	r24, r14
     f68:	63 d9       	rcall	.-3386   	; 0x230 <CALLBACK_HID_Device_CreateHIDReport>
     f6a:	68 2e       	mov	r6, r24
     f6c:	f7 01       	movw	r30, r14
     f6e:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     f70:	95 85       	ldd	r25, Z+13	; 0x0d
     f72:	89 2b       	or	r24, r25
     f74:	41 f0       	breq	.+16     	; 0xf86 <HID_Device_USBTask+0xba>
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	86 85       	ldd	r24, Z+14	; 0x0e
     f7a:	97 85       	ldd	r25, Z+15	; 0x0f
     f7c:	89 2b       	or	r24, r25
     f7e:	09 f0       	breq	.+2      	; 0xf82 <HID_Device_USBTask+0xb6>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	72 2e       	mov	r7, r18
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <HID_Device_USBTask+0xbc>
     f86:	71 2c       	mov	r7, r1
     f88:	f7 01       	movw	r30, r14
     f8a:	06 81       	ldd	r16, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f8c:	17 81       	ldd	r17, Z+7	; 0x07
     f8e:	01 15       	cp	r16, r1
     f90:	11 05       	cpc	r17, r1
     f92:	89 f0       	breq	.+34     	; 0xfb6 <HID_Device_USBTask+0xea>
     f94:	49 81       	ldd	r20, Y+1	; 0x01
     f96:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     f98:	b8 01       	movw	r22, r16
     f9a:	c6 01       	movw	r24, r12
     f9c:	53 d0       	rcall	.+166    	; 0x1044 <memcmp>
     f9e:	55 24       	eor	r5, r5
     fa0:	53 94       	inc	r5
     fa2:	89 2b       	or	r24, r25
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <HID_Device_USBTask+0xdc>
     fa6:	51 2c       	mov	r5, r1
     fa8:	f7 01       	movw	r30, r14
     faa:	40 85       	ldd	r20, Z+8	; 0x08
     fac:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     fae:	b6 01       	movw	r22, r12
     fb0:	c8 01       	movw	r24, r16
     fb2:	55 d0       	rcall	.+170    	; 0x105e <memcpy>
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <HID_Device_USBTask+0xec>
     fb6:	51 2c       	mov	r5, r1
     fb8:	29 81       	ldd	r18, Y+1	; 0x01
     fba:	3a 81       	ldd	r19, Y+2	; 0x02
     fbc:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     fbe:	f1 f0       	breq	.+60     	; 0xffc <HID_Device_USBTask+0x130>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     fc0:	61 10       	cpse	r6, r1
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <HID_Device_USBTask+0x100>
     fc4:	51 10       	cpse	r5, r1
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <HID_Device_USBTask+0x100>
     fc8:	70 fe       	sbrs	r7, 0
     fca:	18 c0       	rjmp	.+48     	; 0xffc <HID_Device_USBTask+0x130>
     fcc:	f7 01       	movw	r30, r14
     fce:	84 85       	ldd	r24, Z+12	; 0x0c
     fd0:	95 85       	ldd	r25, Z+13	; 0x0d
     fd2:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     fd4:	86 87       	std	Z+14, r24	; 0x0e
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	81 11       	cpse	r24, r1
     fe2:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     fe6:	69 81       	ldd	r22, Y+1	; 0x01
     fe8:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     fee:	c6 01       	movw	r24, r12
     ff0:	9c d9       	rcall	.-3272   	; 0x32a <Endpoint_Write_Stream_LE>
     ff2:	80 91 e8 00 	lds	r24, 0x00E8
     ff6:	8e 77       	andi	r24, 0x7E	; 126
     ff8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ffc:	80 91 e4 00 	lds	r24, 0x00E4
    1000:	90 91 e5 00 	lds	r25, 0x00E5
    1004:	f7 01       	movw	r30, r14
    1006:	93 87       	std	Z+11, r25	; 0x0b
    1008:	82 87       	std	Z+10, r24	; 0x0a
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    100e:	9e be       	out	0x3e, r9	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	8d be       	out	0x3d, r8	; 61
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	be be       	out	0x3e, r11	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	ad be       	out	0x3d, r10	; 61
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	5f 90       	pop	r5
    1042:	08 95       	ret

00001044 <memcmp>:
    1044:	fb 01       	movw	r30, r22
    1046:	dc 01       	movw	r26, r24
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <memcmp+0xe>
    104a:	8d 91       	ld	r24, X+
    104c:	01 90       	ld	r0, Z+
    104e:	80 19       	sub	r24, r0
    1050:	21 f4       	brne	.+8      	; 0x105a <memcmp+0x16>
    1052:	41 50       	subi	r20, 0x01	; 1
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	c8 f7       	brcc	.-14     	; 0x104a <memcmp+0x6>
    1058:	88 1b       	sub	r24, r24
    105a:	99 0b       	sbc	r25, r25
    105c:	08 95       	ret

0000105e <memcpy>:
    105e:	fb 01       	movw	r30, r22
    1060:	dc 01       	movw	r26, r24
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <memcpy+0xa>
    1064:	01 90       	ld	r0, Z+
    1066:	0d 92       	st	X+, r0
    1068:	41 50       	subi	r20, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	d8 f7       	brcc	.-10     	; 0x1064 <memcpy+0x6>
    106e:	08 95       	ret

00001070 <memset>:
    1070:	dc 01       	movw	r26, r24
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <memset+0x6>
    1074:	6d 93       	st	X+, r22
    1076:	41 50       	subi	r20, 0x01	; 1
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	e0 f7       	brcc	.-8      	; 0x1074 <memset+0x4>
    107c:	08 95       	ret

0000107e <_exit>:
    107e:	f8 94       	cli

00001080 <__stop_program>:
    1080:	ff cf       	rjmp	.-2      	; 0x1080 <__stop_program>

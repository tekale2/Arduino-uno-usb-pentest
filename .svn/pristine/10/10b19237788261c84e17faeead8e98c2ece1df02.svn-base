
BootloaderDFU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0001eeaa  00000f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eaa  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00000fe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001006  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  0000101e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001d  00800162  00800162  00001026  2**0
                  ALLOC
  6 .noinit       00000002  0080017f  0080017f  00001026  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000340  00000000  00000000  00001a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000048a1  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000155e  00000000  00000000  00006651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001f94  00000000  00000000  00007baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006a8  00000000  00000000  00009b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000020ef  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002935  00000000  00000000  0000c2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000460  00000000  00000000  0000ec10  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	82 c0       	rjmp	.+260    	; 0x1e10a <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	80 c0       	rjmp	.+256    	; 0x1e10a <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	7e c0       	rjmp	.+252    	; 0x1e10a <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	7c c0       	rjmp	.+248    	; 0x1e10a <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	7a c0       	rjmp	.+244    	; 0x1e10a <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	78 c0       	rjmp	.+240    	; 0x1e10a <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	76 c0       	rjmp	.+236    	; 0x1e10a <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	74 c0       	rjmp	.+232    	; 0x1e10a <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	72 c0       	rjmp	.+228    	; 0x1e10a <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	b1 c5       	rjmp	.+2914   	; 0x1eb8c <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	6e c0       	rjmp	.+220    	; 0x1e10a <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	6c c0       	rjmp	.+216    	; 0x1e10a <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	6a c0       	rjmp	.+212    	; 0x1e10a <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	68 c0       	rjmp	.+208    	; 0x1e10a <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	66 c0       	rjmp	.+204    	; 0x1e10a <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	64 c0       	rjmp	.+200    	; 0x1e10a <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	62 c0       	rjmp	.+196    	; 0x1e10a <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	60 c0       	rjmp	.+192    	; 0x1e10a <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	5e c0       	rjmp	.+188    	; 0x1e10a <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	f4 c1       	rjmp	.+1000   	; 0x1e43a <__vector_20>
   1e052:	00 00       	nop
   1e054:	5a c0       	rjmp	.+180    	; 0x1e10a <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	58 c0       	rjmp	.+176    	; 0x1e10a <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	56 c0       	rjmp	.+172    	; 0x1e10a <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	54 c0       	rjmp	.+168    	; 0x1e10a <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	52 c0       	rjmp	.+164    	; 0x1e10a <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	50 c0       	rjmp	.+160    	; 0x1e10a <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	4e c0       	rjmp	.+156    	; 0x1e10a <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	4c c0       	rjmp	.+152    	; 0x1e10a <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	4a c0       	rjmp	.+148    	; 0x1e10a <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	48 c0       	rjmp	.+144    	; 0x1e10a <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	46 c0       	rjmp	.+140    	; 0x1e10a <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	44 c0       	rjmp	.+136    	; 0x1e10a <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	42 c0       	rjmp	.+132    	; 0x1e10a <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	40 c0       	rjmp	.+128    	; 0x1e10a <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	3e c0       	rjmp	.+124    	; 0x1e10a <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	3c c0       	rjmp	.+120    	; 0x1e10a <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	3a c0       	rjmp	.+116    	; 0x1e10a <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	19 c0       	rjmp	.+50     	; 0x1e0dc <__do_copy_data>
   1e0aa:	80 91 7f 01 	lds	r24, 0x017F
   1e0ae:	90 91 80 01 	lds	r25, 0x0180
   1e0b2:	82 34       	cpi	r24, 0x42	; 66
   1e0b4:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0b6:	91 f4       	brne	.+36     	; 0x1e0dc <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
   1e0b8:	84 b7       	in	r24, 0x34	; 52
   1e0ba:	87 7f       	andi	r24, 0xF7	; 247
   1e0bc:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
   1e0be:	88 e1       	ldi	r24, 0x18	; 24
   1e0c0:	0f b6       	in	r0, 0x3f	; 63
   1e0c2:	f8 94       	cli
   1e0c4:	80 93 60 00 	sts	0x0060, r24
   1e0c8:	10 92 60 00 	sts	0x0060, r1
   1e0cc:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e0ce:	10 92 80 01 	sts	0x0180, r1
   1e0d2:	10 92 7f 01 	sts	0x017F, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0d6:	e0 e0       	ldi	r30, 0x00	; 0
   1e0d8:	f0 e0       	ldi	r31, 0x00	; 0
   1e0da:	09 95       	icall

0001e0dc <__do_copy_data>:
   1e0dc:	11 e0       	ldi	r17, 0x01	; 1
   1e0de:	a0 e0       	ldi	r26, 0x00	; 0
   1e0e0:	b1 e0       	ldi	r27, 0x01	; 1
   1e0e2:	ea ea       	ldi	r30, 0xAA	; 170
   1e0e4:	fe ee       	ldi	r31, 0xEE	; 238
   1e0e6:	01 e0       	ldi	r16, 0x01	; 1
   1e0e8:	0b bf       	out	0x3b, r16	; 59
   1e0ea:	02 c0       	rjmp	.+4      	; 0x1e0f0 <__do_copy_data+0x14>
   1e0ec:	07 90       	elpm	r0, Z+
   1e0ee:	0d 92       	st	X+, r0
   1e0f0:	a2 36       	cpi	r26, 0x62	; 98
   1e0f2:	b1 07       	cpc	r27, r17
   1e0f4:	d9 f7       	brne	.-10     	; 0x1e0ec <__do_copy_data+0x10>

0001e0f6 <__do_clear_bss>:
   1e0f6:	11 e0       	ldi	r17, 0x01	; 1
   1e0f8:	a2 e6       	ldi	r26, 0x62	; 98
   1e0fa:	b1 e0       	ldi	r27, 0x01	; 1
   1e0fc:	01 c0       	rjmp	.+2      	; 0x1e100 <.do_clear_bss_start>

0001e0fe <.do_clear_bss_loop>:
   1e0fe:	1d 92       	st	X+, r1

0001e100 <.do_clear_bss_start>:
   1e100:	af 37       	cpi	r26, 0x7F	; 127
   1e102:	b1 07       	cpc	r27, r17
   1e104:	e1 f7       	brne	.-8      	; 0x1e0fe <.do_clear_bss_loop>
   1e106:	53 d1       	rcall	.+678    	; 0x1e3ae <main>
   1e108:	ce c6       	rjmp	.+3484   	; 0x1eea6 <_exit>

0001e10a <__bad_interrupt>:
   1e10a:	7a cf       	rjmp	.-268    	; 0x1e000 <__vectors>

0001e10c <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e10c:	88 23       	and	r24, r24
   1e10e:	b9 f0       	breq	.+46     	; 0x1e13e <DiscardFillerBytes+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e110:	20 91 f2 00 	lds	r18, 0x00F2
   1e114:	30 91 f3 00 	lds	r19, 0x00F3
	{
		if (!(Endpoint_BytesInEndpoint()))
   1e118:	23 2b       	or	r18, r19
   1e11a:	69 f4       	brne	.+26     	; 0x1e136 <DiscardFillerBytes+0x2a>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e11c:	90 91 e8 00 	lds	r25, 0x00E8
   1e120:	9b 7f       	andi	r25, 0xFB	; 251
   1e122:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e126:	90 91 e8 00 	lds	r25, 0x00E8
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
   1e12a:	92 fd       	sbrc	r25, 2
   1e12c:	06 c0       	rjmp	.+12     	; 0x1e13a <DiscardFillerBytes+0x2e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e12e:	9e b3       	in	r25, 0x1e	; 30
   1e130:	91 11       	cpse	r25, r1
   1e132:	f9 cf       	rjmp	.-14     	; 0x1e126 <DiscardFillerBytes+0x1a>
   1e134:	04 c0       	rjmp	.+8      	; 0x1e13e <DiscardFillerBytes+0x32>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
   1e136:	90 91 f1 00 	lds	r25, 0x00F1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e13a:	81 50       	subi	r24, 0x01	; 1
   1e13c:	e7 cf       	rjmp	.-50     	; 0x1e10c <DiscardFillerBytes>
   1e13e:	08 95       	ret

0001e140 <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
   1e140:	30 91 6f 01 	lds	r19, 0x016F
   1e144:	20 91 6e 01 	lds	r18, 0x016E
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
   1e148:	90 91 6d 01 	lds	r25, 0x016D
   1e14c:	80 91 6c 01 	lds	r24, 0x016C
   1e150:	90 93 64 01 	sts	0x0164, r25
   1e154:	80 93 65 01 	sts	0x0165, r24
	EndAddr   = Address[1].Word;
   1e158:	c9 01       	movw	r24, r18
   1e15a:	90 93 62 01 	sts	0x0162, r25
   1e15e:	80 93 63 01 	sts	0x0163, r24
   1e162:	08 95       	ret

0001e164 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
   1e164:	1f 93       	push	r17
   1e166:	cf 93       	push	r28
   1e168:	df 93       	push	r29
   1e16a:	cd b7       	in	r28, 0x3d	; 61
   1e16c:	de b7       	in	r29, 0x3e	; 62
   1e16e:	27 97       	sbiw	r28, 0x07	; 7
   1e170:	0f b6       	in	r0, 0x3f	; 63
   1e172:	f8 94       	cli
   1e174:	de bf       	out	0x3e, r29	; 62
   1e176:	0f be       	out	0x3f, r0	; 63
   1e178:	cd bf       	out	0x3d, r28	; 61
	/* Check if device is in secure mode */
	if (IsSecure)
   1e17a:	90 91 74 01 	lds	r25, 0x0174
   1e17e:	80 91 6a 01 	lds	r24, 0x016A
   1e182:	99 23       	and	r25, r25
   1e184:	d1 f0       	breq	.+52     	; 0x1e1ba <ProcessBootloaderCommand+0x56>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e186:	84 30       	cpi	r24, 0x04	; 4
   1e188:	49 f4       	brne	.+18     	; 0x1e19c <ProcessBootloaderCommand+0x38>
   1e18a:	80 91 6b 01 	lds	r24, 0x016B
   1e18e:	81 11       	cpse	r24, r1
   1e190:	08 c0       	rjmp	.+16     	; 0x1e1a2 <ProcessBootloaderCommand+0x3e>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
   1e192:	80 91 6c 01 	lds	r24, 0x016C
   1e196:	8f 3f       	cpi	r24, 0xFF	; 255
   1e198:	21 f4       	brne	.+8      	; 0x1e1a2 <ProcessBootloaderCommand+0x3e>
   1e19a:	68 c0       	rjmp	.+208    	; 0x1e26c <ProcessBootloaderCommand+0x108>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e19c:	85 30       	cpi	r24, 0x05	; 5
   1e19e:	09 f4       	brne	.+2      	; 0x1e1a2 <ProcessBootloaderCommand+0x3e>
   1e1a0:	c6 c0       	rjmp	.+396    	; 0x1e32e <ProcessBootloaderCommand+0x1ca>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
   1e1a2:	8a e0       	ldi	r24, 0x0A	; 10
   1e1a4:	80 93 00 01 	sts	0x0100, r24
			DFU_Status = errWRITE;
   1e1a8:	83 e0       	ldi	r24, 0x03	; 3
   1e1aa:	80 93 72 01 	sts	0x0172, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e1ae:	80 91 eb 00 	lds	r24, 0x00EB
   1e1b2:	80 62       	ori	r24, 0x20	; 32
   1e1b4:	80 93 eb 00 	sts	0x00EB, r24
   1e1b8:	f0 c0       	rjmp	.+480    	; 0x1e39a <ProcessBootloaderCommand+0x236>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
   1e1ba:	84 30       	cpi	r24, 0x04	; 4
   1e1bc:	09 f4       	brne	.+2      	; 0x1e1c0 <ProcessBootloaderCommand+0x5c>
   1e1be:	56 c0       	rjmp	.+172    	; 0x1e26c <ProcessBootloaderCommand+0x108>
   1e1c0:	28 f4       	brcc	.+10     	; 0x1e1cc <ProcessBootloaderCommand+0x68>
   1e1c2:	81 30       	cpi	r24, 0x01	; 1
   1e1c4:	51 f0       	breq	.+20     	; 0x1e1da <ProcessBootloaderCommand+0x76>
   1e1c6:	83 30       	cpi	r24, 0x03	; 3
   1e1c8:	21 f1       	breq	.+72     	; 0x1e212 <ProcessBootloaderCommand+0xae>
   1e1ca:	e7 c0       	rjmp	.+462    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e1cc:	85 30       	cpi	r24, 0x05	; 5
   1e1ce:	09 f4       	brne	.+2      	; 0x1e1d2 <ProcessBootloaderCommand+0x6e>
   1e1d0:	ae c0       	rjmp	.+348    	; 0x1e32e <ProcessBootloaderCommand+0x1ca>
   1e1d2:	86 30       	cpi	r24, 0x06	; 6
   1e1d4:	09 f4       	brne	.+2      	; 0x1e1d8 <ProcessBootloaderCommand+0x74>
   1e1d6:	d5 c0       	rjmp	.+426    	; 0x1e382 <ProcessBootloaderCommand+0x21e>
   1e1d8:	e0 c0       	rjmp	.+448    	; 0x1e39a <ProcessBootloaderCommand+0x236>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
   1e1da:	10 91 6b 01 	lds	r17, 0x016B
   1e1de:	12 30       	cpi	r17, 0x02	; 2
   1e1e0:	08 f0       	brcs	.+2      	; 0x1e1e4 <ProcessBootloaderCommand+0x80>
   1e1e2:	db c0       	rjmp	.+438    	; 0x1e39a <ProcessBootloaderCommand+0x236>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e1e4:	ad df       	rcall	.-166    	; 0x1e140 <LoadStartEndAddresses>
   1e1e6:	11 11       	cpse	r17, r1

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
   1e1e8:	12 c0       	rjmp	.+36     	; 0x1e20e <ProcessBootloaderCommand+0xaa>
   1e1ea:	80 91 64 01 	lds	r24, 0x0164
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e1ee:	90 91 65 01 	lds	r25, 0x0165
   1e1f2:	20 91 66 01 	lds	r18, 0x0166
   1e1f6:	a2 2f       	mov	r26, r18
   1e1f8:	b0 e0       	ldi	r27, 0x00	; 0
   1e1fa:	23 e0       	ldi	r18, 0x03	; 3

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
   1e1fc:	fc 01       	movw	r30, r24
   1e1fe:	a0 93 5b 00 	sts	0x005B, r26
   1e202:	20 93 57 00 	sts	0x0057, r18
   1e206:	e8 95       	spm
   1e208:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e20a:	00 fc       	sbrc	r0, 0
   1e20c:	fd cf       	rjmp	.-6      	; 0x1e208 <ProcessBootloaderCommand+0xa4>
   1e20e:	85 e0       	ldi	r24, 0x05	; 5
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
   1e210:	07 c0       	rjmp	.+14     	; 0x1e220 <ProcessBootloaderCommand+0xbc>
   1e212:	80 91 6b 01 	lds	r24, 0x016B
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
   1e216:	98 2f       	mov	r25, r24
   1e218:	9d 7f       	andi	r25, 0xFD	; 253
   1e21a:	29 f4       	brne	.+10     	; 0x1e226 <ProcessBootloaderCommand+0xc2>
   1e21c:	91 df       	rcall	.-222    	; 0x1e140 <LoadStartEndAddresses>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e21e:	89 e0       	ldi	r24, 0x09	; 9
   1e220:	80 93 00 01 	sts	0x0100, r24

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
   1e224:	ba c0       	rjmp	.+372    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e226:	81 30       	cpi	r24, 0x01	; 1
   1e228:	09 f0       	breq	.+2      	; 0x1e22c <ProcessBootloaderCommand+0xc8>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
   1e22a:	b7 c0       	rjmp	.+366    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e22c:	80 e0       	ldi	r24, 0x00	; 0
   1e22e:	90 e0       	ldi	r25, 0x00	; 0
   1e230:	dc 01       	movw	r26, r24
   1e232:	ab bf       	out	0x3b, r26	; 59
   1e234:	fc 01       	movw	r30, r24

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
   1e236:	27 91       	elpm	r18, Z+
   1e238:	2f 3f       	cpi	r18, 0xFF	; 255
   1e23a:	69 f0       	breq	.+26     	; 0x1e256 <ProcessBootloaderCommand+0xf2>
   1e23c:	a0 93 66 01 	sts	0x0166, r26
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
   1e240:	90 93 65 01 	sts	0x0165, r25
				StartAddr     = CurrFlashAddress;
   1e244:	80 93 64 01 	sts	0x0164, r24
   1e248:	8a e0       	ldi	r24, 0x0A	; 10
   1e24a:	80 93 00 01 	sts	0x0100, r24

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
   1e24e:	85 e0       	ldi	r24, 0x05	; 5
   1e250:	80 93 72 01 	sts	0x0172, r24
				DFU_Status = errCHECK_ERASED;
   1e254:	a2 c0       	rjmp	.+324    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e256:	01 96       	adiw	r24, 0x01	; 1
   1e258:	a1 1d       	adc	r26, r1

				break;
			}

			CurrFlashAddress++;
   1e25a:	b1 1d       	adc	r27, r1
   1e25c:	81 15       	cp	r24, r1
   1e25e:	20 ee       	ldi	r18, 0xE0	; 224
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
   1e260:	92 07       	cpc	r25, r18
   1e262:	21 e0       	ldi	r18, 0x01	; 1
   1e264:	a2 07       	cpc	r26, r18
   1e266:	b1 05       	cpc	r27, r1
   1e268:	21 f7       	brne	.-56     	; 0x1e232 <ProcessBootloaderCommand+0xce>
   1e26a:	97 c0       	rjmp	.+302    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e26c:	80 91 6b 01 	lds	r24, 0x016B
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
   1e270:	83 30       	cpi	r24, 0x03	; 3
   1e272:	71 f5       	brne	.+92     	; 0x1e2d0 <ProcessBootloaderCommand+0x16c>
   1e274:	81 e0       	ldi	r24, 0x01	; 1
   1e276:	80 93 73 01 	sts	0x0173, r24
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
   1e27a:	80 91 70 01 	lds	r24, 0x0170

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
   1e27e:	90 91 71 01 	lds	r25, 0x0171
   1e282:	20 91 6c 01 	lds	r18, 0x016C
   1e286:	89 2b       	or	r24, r25
   1e288:	61 f0       	breq	.+24     	; 0x1e2a2 <ProcessBootloaderCommand+0x13e>
   1e28a:	21 30       	cpi	r18, 0x01	; 1
   1e28c:	09 f0       	breq	.+2      	; 0x1e290 <ProcessBootloaderCommand+0x12c>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
   1e28e:	85 c0       	rjmp	.+266    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e290:	90 91 6f 01 	lds	r25, 0x016F
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
   1e294:	80 91 6e 01 	lds	r24, 0x016E
   1e298:	90 93 67 01 	sts	0x0167, r25

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
   1e29c:	80 93 68 01 	sts	0x0168, r24
   1e2a0:	7c c0       	rjmp	.+248    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e2a2:	21 11       	cpse	r18, r1
   1e2a4:	12 c0       	rjmp	.+36     	; 0x1e2ca <ProcessBootloaderCommand+0x166>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
   1e2a6:	82 e4       	ldi	r24, 0x42	; 66
   1e2a8:	9c ed       	ldi	r25, 0xDC	; 220
			{
				/* Unlock the forced application start mode of the bootloader if it is restarted */
				MagicBootKey = MAGIC_BOOT_KEY;
   1e2aa:	90 93 80 01 	sts	0x0180, r25
   1e2ae:	80 93 7f 01 	sts	0x017F, r24
   1e2b2:	2c e0       	ldi	r18, 0x0C	; 12
   1e2b4:	88 e1       	ldi	r24, 0x18	; 24

				/* Start the watchdog to reset the AVR once the communications are finalized */
				wdt_enable(WDTO_250MS);
   1e2b6:	90 e0       	ldi	r25, 0x00	; 0
   1e2b8:	0f b6       	in	r0, 0x3f	; 63
   1e2ba:	f8 94       	cli
   1e2bc:	a8 95       	wdr
   1e2be:	80 93 60 00 	sts	0x0060, r24
   1e2c2:	0f be       	out	0x3f, r0	; 63
   1e2c4:	20 93 60 00 	sts	0x0060, r18
   1e2c8:	68 c0       	rjmp	.+208    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e2ca:	10 92 01 01 	sts	0x0101, r1
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
   1e2ce:	65 c0       	rjmp	.+202    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e2d0:	81 11       	cpse	r24, r1
   1e2d2:	63 c0       	rjmp	.+198    	; 0x1e39a <ProcessBootloaderCommand+0x236>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
   1e2d4:	80 91 6c 01 	lds	r24, 0x016C
   1e2d8:	8f 3f       	cpi	r24, 0xFF	; 255
   1e2da:	09 f0       	breq	.+2      	; 0x1e2de <ProcessBootloaderCommand+0x17a>
   1e2dc:	5e c0       	rjmp	.+188    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e2de:	80 e0       	ldi	r24, 0x00	; 0
   1e2e0:	90 e0       	ldi	r25, 0x00	; 0
   1e2e2:	dc 01       	movw	r26, r24
   1e2e4:	23 e0       	ldi	r18, 0x03	; 3
   1e2e6:	35 e0       	ldi	r19, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1e2e8:	fc 01       	movw	r30, r24
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1e2ea:	a0 93 5b 00 	sts	0x005B, r26
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1e2ee:	20 93 57 00 	sts	0x0057, r18
   1e2f2:	e8 95       	spm
   1e2f4:	07 b6       	in	r0, 0x37	; 55
   1e2f6:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
   1e2f8:	fd cf       	rjmp	.-6      	; 0x1e2f4 <ProcessBootloaderCommand+0x190>
   1e2fa:	fc 01       	movw	r30, r24
   1e2fc:	a0 93 5b 00 	sts	0x005B, r26
			boot_page_write(CurrFlashAddress);
   1e300:	30 93 57 00 	sts	0x0057, r19
   1e304:	e8 95       	spm
   1e306:	07 b6       	in	r0, 0x37	; 55
   1e308:	00 fc       	sbrc	r0, 0
			boot_spm_busy_wait();
   1e30a:	fd cf       	rjmp	.-6      	; 0x1e306 <ProcessBootloaderCommand+0x1a2>
   1e30c:	9f 5f       	subi	r25, 0xFF	; 255
   1e30e:	af 4f       	sbci	r26, 0xFF	; 255

			CurrFlashAddress += SPM_PAGESIZE;
   1e310:	bf 4f       	sbci	r27, 0xFF	; 255
   1e312:	81 15       	cp	r24, r1
   1e314:	40 ee       	ldi	r20, 0xE0	; 224
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
   1e316:	94 07       	cpc	r25, r20
   1e318:	41 e0       	ldi	r20, 0x01	; 1
   1e31a:	a4 07       	cpc	r26, r20
   1e31c:	b1 05       	cpc	r27, r1
   1e31e:	21 f7       	brne	.-56     	; 0x1e2e8 <ProcessBootloaderCommand+0x184>
   1e320:	81 e1       	ldi	r24, 0x11	; 17
   1e322:	80 93 57 00 	sts	0x0057, r24

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
   1e326:	e8 95       	spm
   1e328:	10 92 74 01 	sts	0x0174, r1

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
   1e32c:	36 c0       	rjmp	.+108    	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e32e:	80 e2       	ldi	r24, 0x20	; 32
   1e330:	8d 83       	std	Y+5, r24	; 0x05
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
   1e332:	8c ed       	ldi	r24, 0xDC	; 220
   1e334:	8e 83       	std	Y+6, r24	; 0x06
   1e336:	8b ef       	ldi	r24, 0xFB	; 251
   1e338:	8f 83       	std	Y+7, r24	; 0x07
   1e33a:	88 e5       	ldi	r24, 0x58	; 88
   1e33c:	89 83       	std	Y+1, r24	; 0x01
	const uint8_t SignatureInfo[4]  = {0x58, AVR_SIGNATURE_1, AVR_SIGNATURE_2, AVR_SIGNATURE_3};
   1e33e:	8e e1       	ldi	r24, 0x1E	; 30
   1e340:	8a 83       	std	Y+2, r24	; 0x02
   1e342:	87 e9       	ldi	r24, 0x97	; 151
   1e344:	8b 83       	std	Y+3, r24	; 0x03
   1e346:	82 e8       	ldi	r24, 0x82	; 130
   1e348:	8c 83       	std	Y+4, r24	; 0x04
   1e34a:	20 91 6c 01 	lds	r18, 0x016C

	uint8_t DataIndexToRead = SentCommand.Data[1];
   1e34e:	80 91 6b 01 	lds	r24, 0x016B

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                        // Read bootloader info
   1e352:	81 11       	cpse	r24, r1
   1e354:	05 c0       	rjmp	.+10     	; 0x1e360 <ProcessBootloaderCommand+0x1fc>
   1e356:	fe 01       	movw	r30, r28
   1e358:	e2 0f       	add	r30, r18
	{
		ResponseByte = BootloaderInfo[DataIndexToRead];
   1e35a:	f1 1d       	adc	r31, r1
   1e35c:	85 81       	ldd	r24, Z+5	; 0x05
   1e35e:	0e c0       	rjmp	.+28     	; 0x1e37c <ProcessBootloaderCommand+0x218>
   1e360:	81 30       	cpi	r24, 0x01	; 1
   1e362:	d9 f4       	brne	.+54     	; 0x1e39a <ProcessBootloaderCommand+0x236>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
   1e364:	82 2f       	mov	r24, r18
   1e366:	90 e0       	ldi	r25, 0x00	; 0
   1e368:	fe 01       	movw	r30, r28
   1e36a:	20 36       	cpi	r18, 0x60	; 96
	{
		if (DataIndexToRead < 0x60)
		  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
   1e36c:	10 f4       	brcc	.+4      	; 0x1e372 <ProcessBootloaderCommand+0x20e>
	{
		ResponseByte = BootloaderInfo[DataIndexToRead];
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
	{
		if (DataIndexToRead < 0x60)
   1e36e:	bf 97       	sbiw	r30, 0x2f	; 47
   1e370:	02 c0       	rjmp	.+4      	; 0x1e376 <ProcessBootloaderCommand+0x212>
		  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
   1e372:	ec 55       	subi	r30, 0x5C	; 92
   1e374:	f1 09       	sbc	r31, r1
		else
		  ResponseByte = SignatureInfo[DataIndexToRead - 0x60 + 3];
   1e376:	e8 0f       	add	r30, r24
   1e378:	f9 1f       	adc	r31, r25
   1e37a:	80 81       	ld	r24, Z
   1e37c:	80 93 69 01 	sts	0x0169, r24
   1e380:	0c c0       	rjmp	.+24     	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e382:	80 91 6b 01 	lds	r24, 0x016B
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
   1e386:	83 30       	cpi	r24, 0x03	; 3
   1e388:	41 f4       	brne	.+16     	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e38a:	80 91 6c 01 	lds	r24, 0x016C
   1e38e:	81 11       	cpse	r24, r1
   1e390:	04 c0       	rjmp	.+8      	; 0x1e39a <ProcessBootloaderCommand+0x236>
   1e392:	80 91 6d 01 	lds	r24, 0x016D
			  Flash64KBPage = SentCommand.Data[2];
   1e396:	80 93 66 01 	sts	0x0166, r24
   1e39a:	27 96       	adiw	r28, 0x07	; 7
   1e39c:	0f b6       	in	r0, 0x3f	; 63

			break;
	}
}
   1e39e:	f8 94       	cli
   1e3a0:	de bf       	out	0x3e, r29	; 62
   1e3a2:	0f be       	out	0x3f, r0	; 63
   1e3a4:	cd bf       	out	0x3d, r28	; 61
   1e3a6:	df 91       	pop	r29
   1e3a8:	cf 91       	pop	r28
   1e3aa:	1f 91       	pop	r17
   1e3ac:	08 95       	ret

0001e3ae <main>:
   1e3ae:	84 b7       	in	r24, 0x34	; 52
   1e3b0:	87 7f       	andi	r24, 0xF7	; 247

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e3b2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e3b4:	88 e1       	ldi	r24, 0x18	; 24
   1e3b6:	0f b6       	in	r0, 0x3f	; 63
   1e3b8:	f8 94       	cli
   1e3ba:	80 93 60 00 	sts	0x0060, r24
   1e3be:	10 92 60 00 	sts	0x0060, r1
   1e3c2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e3c4:	90 e0       	ldi	r25, 0x00	; 0
   1e3c6:	80 e8       	ldi	r24, 0x80	; 128
   1e3c8:	0f b6       	in	r0, 0x3f	; 63
   1e3ca:	f8 94       	cli
   1e3cc:	80 93 61 00 	sts	0x0061, r24
   1e3d0:	90 93 61 00 	sts	0x0061, r25
   1e3d4:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e3d6:	c1 e0       	ldi	r28, 0x01	; 1
   1e3d8:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e3da:	82 e0       	ldi	r24, 0x02	; 2
   1e3dc:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e3de:	bb d3       	rcall	.+1910   	; 0x1eb56 <USB_Init>
   1e3e0:	8a b1       	in	r24, 0x0a	; 10

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1e3e2:	80 6f       	ori	r24, 0xF0	; 240
   1e3e4:	8a b9       	out	0x0a, r24	; 10
   1e3e6:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDS_ALL_LEDS;
   1e3e8:	8f 70       	andi	r24, 0x0F	; 15
   1e3ea:	8b b9       	out	0x0b, r24	; 11
   1e3ec:	c0 93 6f 00 	sts	0x006F, r28
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e3f0:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e3f2:	80 93 81 00 	sts	0x0081, r24
   1e3f6:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1e3f8:	8f 70       	andi	r24, 0x0F	; 15
   1e3fa:	80 61       	ori	r24, 0x10	; 16
   1e3fc:	8b b9       	out	0x0b, r24	; 11
   1e3fe:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e400:	80 91 01 01 	lds	r24, 0x0101

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e404:	88 23       	and	r24, r24
   1e406:	11 f0       	breq	.+4      	; 0x1e40c <main+0x5e>
   1e408:	30 d5       	rcall	.+2656   	; 0x1ee6a <USB_USBTask>
	  USB_USBTask();
   1e40a:	fa cf       	rjmp	.-12     	; 0x1e400 <main+0x52>
   1e40c:	80 91 73 01 	lds	r24, 0x0173

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e410:	81 11       	cpse	r24, r1
   1e412:	fa cf       	rjmp	.-12     	; 0x1e408 <main+0x5a>
   1e414:	48 d3       	rcall	.+1680   	; 0x1eaa6 <USB_Disable>
   1e416:	8a b1       	in	r24, 0x0a	; 10

/** Resets all configured hardware required for the bootloader back to their original states. */
static void ResetHardware(void)
{
	/* Shut down the USB and other board hardware drivers */
	USB_Disable();
   1e418:	8f 70       	andi	r24, 0x0F	; 15
   1e41a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_Disable(void)
			{
				DDRD  &= ~LEDS_ALL_LEDS;
   1e41c:	8b b1       	in	r24, 0x0b	; 11
   1e41e:	8f 70       	andi	r24, 0x0F	; 15
   1e420:	8b b9       	out	0x0b, r24	; 11
				PORTD &= ~LEDS_ALL_LEDS;
   1e422:	10 92 6f 00 	sts	0x006F, r1
   1e426:	10 92 81 00 	sts	0x0081, r1
	LEDs_Disable();

	/* Disable Bootloader active LED toggle timer */
	TIMSK1 = 0;
   1e42a:	81 e0       	ldi	r24, 0x01	; 1
	TCCR1B = 0;
   1e42c:	85 bf       	out	0x35, r24	; 53
   1e42e:	15 be       	out	0x35, r1	; 53

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
   1e430:	e0 91 67 01 	lds	r30, 0x0167
	MCUCR = 0;
   1e434:	f0 91 68 01 	lds	r31, 0x0168

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();

	/* Start the user application */
	AppStartPtr();
   1e438:	09 95       	icall

0001e43a <__vector_20>:
   1e43a:	1f 92       	push	r1
   1e43c:	0f 92       	push	r0
   1e43e:	0f b6       	in	r0, 0x3f	; 63
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e440:	0f 92       	push	r0
   1e442:	11 24       	eor	r1, r1
   1e444:	8f 93       	push	r24
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
   1e446:	80 e3       	ldi	r24, 0x30	; 48
   1e448:	89 b9       	out	0x09, r24	; 9
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e44a:	8f 91       	pop	r24
   1e44c:	0f 90       	pop	r0
   1e44e:	0f be       	out	0x3f, r0	; 63
   1e450:	0f 90       	pop	r0
   1e452:	1f 90       	pop	r1
   1e454:	18 95       	reti

0001e456 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1e456:	cf 92       	push	r12
   1e458:	df 92       	push	r13
   1e45a:	ef 92       	push	r14
   1e45c:	ff 92       	push	r15
   1e45e:	0f 93       	push	r16
   1e460:	1f 93       	push	r17
   1e462:	cf 93       	push	r28
   1e464:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e466:	80 91 77 01 	lds	r24, 0x0177
   1e46a:	8f 77       	andi	r24, 0x7F	; 127
   1e46c:	81 32       	cpi	r24, 0x21	; 33
   1e46e:	09 f0       	breq	.+2      	; 0x1e472 <EVENT_USB_Device_ControlRequest+0x1c>
   1e470:	fb c1       	rjmp	.+1014   	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e472:	80 e3       	ldi	r24, 0x30	; 48
   1e474:	89 b9       	out	0x09, r24	; 9

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
   1e476:	80 91 7d 01 	lds	r24, 0x017D
   1e47a:	90 91 7e 01 	lds	r25, 0x017E
   1e47e:	90 93 71 01 	sts	0x0171, r25
   1e482:	80 93 70 01 	sts	0x0170, r24

	switch (USB_ControlRequest.bRequest)
   1e486:	80 91 78 01 	lds	r24, 0x0178
   1e48a:	83 30       	cpi	r24, 0x03	; 3
   1e48c:	09 f4       	brne	.+2      	; 0x1e490 <EVENT_USB_Device_ControlRequest+0x3a>
   1e48e:	ad c1       	rjmp	.+858    	; 0x1e7ea <EVENT_USB_Device_ControlRequest+0x394>
   1e490:	58 f4       	brcc	.+22     	; 0x1e4a8 <EVENT_USB_Device_ControlRequest+0x52>
   1e492:	81 30       	cpi	r24, 0x01	; 1
   1e494:	d1 f0       	breq	.+52     	; 0x1e4ca <EVENT_USB_Device_ControlRequest+0x74>
   1e496:	82 30       	cpi	r24, 0x02	; 2
   1e498:	09 f0       	breq	.+2      	; 0x1e49c <EVENT_USB_Device_ControlRequest+0x46>
   1e49a:	e6 c1       	rjmp	.+972    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e49c:	80 91 e8 00 	lds	r24, 0x00E8
   1e4a0:	87 7f       	andi	r24, 0xF7	; 247
   1e4a2:	80 93 e8 00 	sts	0x00E8, r24
   1e4a6:	0f c1       	rjmp	.+542    	; 0x1e6c6 <EVENT_USB_Device_ControlRequest+0x270>
   1e4a8:	85 30       	cpi	r24, 0x05	; 5
   1e4aa:	09 f4       	brne	.+2      	; 0x1e4ae <EVENT_USB_Device_ControlRequest+0x58>
   1e4ac:	c4 c1       	rjmp	.+904    	; 0x1e836 <EVENT_USB_Device_ControlRequest+0x3e0>
   1e4ae:	08 f4       	brcc	.+2      	; 0x1e4b2 <EVENT_USB_Device_ControlRequest+0x5c>
   1e4b0:	ba c1       	rjmp	.+884    	; 0x1e826 <EVENT_USB_Device_ControlRequest+0x3d0>
   1e4b2:	86 30       	cpi	r24, 0x06	; 6
   1e4b4:	09 f0       	breq	.+2      	; 0x1e4b8 <EVENT_USB_Device_ControlRequest+0x62>
   1e4b6:	d8 c1       	rjmp	.+944    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e4b8:	80 91 e8 00 	lds	r24, 0x00E8
   1e4bc:	87 7f       	andi	r24, 0xF7	; 247
   1e4be:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
   1e4c2:	82 e0       	ldi	r24, 0x02	; 2
   1e4c4:	80 93 00 01 	sts	0x0100, r24
   1e4c8:	c6 c1       	rjmp	.+908    	; 0x1e856 <EVENT_USB_Device_ControlRequest+0x400>
   1e4ca:	80 91 e8 00 	lds	r24, 0x00E8
   1e4ce:	87 7f       	andi	r24, 0xF7	; 247
   1e4d0:	80 93 e8 00 	sts	0x00E8, r24
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
   1e4d4:	80 91 73 01 	lds	r24, 0x0173
   1e4d8:	88 23       	and	r24, r24
   1e4da:	19 f0       	breq	.+6      	; 0x1e4e2 <EVENT_USB_Device_ControlRequest+0x8c>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
   1e4dc:	43 de       	rcall	.-890    	; 0x1e164 <ProcessBootloaderCommand>
   1e4de:	10 92 73 01 	sts	0x0173, r1

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
   1e4e2:	80 91 70 01 	lds	r24, 0x0170
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
   1e4e6:	90 91 71 01 	lds	r25, 0x0171
   1e4ea:	00 97       	sbiw	r24, 0x00	; 0
   1e4ec:	51 f1       	breq	.+84     	; 0x1e542 <EVENT_USB_Device_ControlRequest+0xec>
   1e4ee:	20 91 e8 00 	lds	r18, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e4f2:	22 fd       	sbrc	r18, 2
			{
				while (!(Endpoint_IsOUTReceived()))
   1e4f4:	04 c0       	rjmp	.+8      	; 0x1e4fe <EVENT_USB_Device_ControlRequest+0xa8>
   1e4f6:	2e b3       	in	r18, 0x1e	; 30
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e4f8:	21 11       	cpse	r18, r1
   1e4fa:	f9 cf       	rjmp	.-14     	; 0x1e4ee <EVENT_USB_Device_ControlRequest+0x98>
   1e4fc:	b5 c1       	rjmp	.+874    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e4fe:	20 91 f1 00 	lds	r18, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e502:	20 93 6a 01 	sts	0x016A, r18
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
   1e506:	01 97       	sbiw	r24, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
   1e508:	90 93 71 01 	sts	0x0171, r25
   1e50c:	80 93 70 01 	sts	0x0170, r24
   1e510:	eb e6       	ldi	r30, 0x6B	; 107
   1e512:	f1 e0       	ldi	r31, 0x01	; 1
   1e514:	80 91 f2 00 	lds	r24, 0x00F2
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e518:	90 91 f3 00 	lds	r25, 0x00F3
   1e51c:	89 2b       	or	r24, r25

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e51e:	81 f0       	breq	.+32     	; 0x1e540 <EVENT_USB_Device_ControlRequest+0xea>
   1e520:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e524:	81 93       	st	Z+, r24
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
   1e526:	80 91 70 01 	lds	r24, 0x0170
					SentCommand.DataSize--;
   1e52a:	90 91 71 01 	lds	r25, 0x0171
   1e52e:	01 97       	sbiw	r24, 0x01	; 1
   1e530:	90 93 71 01 	sts	0x0171, r25
   1e534:	80 93 70 01 	sts	0x0170, r24
   1e538:	81 e0       	ldi	r24, 0x01	; 1

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e53a:	e0 37       	cpi	r30, 0x70	; 112
   1e53c:	f8 07       	cpc	r31, r24
   1e53e:	51 f7       	brne	.-44     	; 0x1e514 <EVENT_USB_Device_ControlRequest+0xbe>
   1e540:	11 de       	rcall	.-990    	; 0x1e164 <ProcessBootloaderCommand>
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
   1e542:	80 91 00 01 	lds	r24, 0x0100
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
   1e546:	85 30       	cpi	r24, 0x05	; 5
   1e548:	09 f0       	breq	.+2      	; 0x1e54c <EVENT_USB_Device_ControlRequest+0xf6>
   1e54a:	b5 c0       	rjmp	.+362    	; 0x1e6b6 <EVENT_USB_Device_ControlRequest+0x260>
   1e54c:	80 91 70 01 	lds	r24, 0x0170
			{
				if (!(SentCommand.DataSize))
   1e550:	90 91 71 01 	lds	r25, 0x0171
   1e554:	89 2b       	or	r24, r25
   1e556:	21 f4       	brne	.+8      	; 0x1e560 <EVENT_USB_Device_ControlRequest+0x10a>
   1e558:	82 e0       	ldi	r24, 0x02	; 2
   1e55a:	80 93 00 01 	sts	0x0100, r24
				{
					DFU_State = dfuIDLE;
   1e55e:	ab c0       	rjmp	.+342    	; 0x1e6b6 <EVENT_USB_Device_ControlRequest+0x260>
   1e560:	8a e1       	ldi	r24, 0x1A	; 26
   1e562:	d4 dd       	rcall	.-1112   	; 0x1e10c <DiscardFillerBytes>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
   1e564:	e0 90 64 01 	lds	r14, 0x0164
   1e568:	f0 90 65 01 	lds	r15, 0x0165

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
   1e56c:	8e 2d       	mov	r24, r14
   1e56e:	8f 71       	andi	r24, 0x1F	; 31
   1e570:	cd dd       	rcall	.-1126   	; 0x1e10c <DiscardFillerBytes>
   1e572:	00 91 62 01 	lds	r16, 0x0162
   1e576:	10 91 63 01 	lds	r17, 0x0163

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e57a:	0f 5f       	subi	r16, 0xFF	; 255
   1e57c:	1f 4f       	sbci	r17, 0xFF	; 255
   1e57e:	0e 19       	sub	r16, r14
   1e580:	1f 09       	sbc	r17, r15
   1e582:	80 91 6b 01 	lds	r24, 0x016B
   1e586:	81 11       	cpse	r24, r1
   1e588:	8c c0       	rjmp	.+280    	; 0x1e6a2 <EVENT_USB_Device_ControlRequest+0x24c>

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
   1e58a:	e8 01       	movw	r28, r16
   1e58c:	d6 95       	lsr	r29
   1e58e:	c7 95       	ror	r28
   1e590:	c7 01       	movw	r24, r14
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
   1e592:	20 91 66 01 	lds	r18, 0x0166
   1e596:	a2 2f       	mov	r26, r18

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
   1e598:	b0 e0       	ldi	r27, 0x00	; 0
   1e59a:	8c 01       	movw	r16, r24
   1e59c:	9d 01       	movw	r18, r26
   1e59e:	f1 2c       	mov	r15, r1
   1e5a0:	ee 24       	eor	r14, r14

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e5a2:	e3 94       	inc	r14
   1e5a4:	65 e0       	ldi	r22, 0x05	; 5
						uint8_t  WordsInFlashPage          = 0;
   1e5a6:	d6 2e       	mov	r13, r22
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1e5a8:	73 e0       	ldi	r23, 0x03	; 3
   1e5aa:	c7 2e       	mov	r12, r23

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1e5ac:	20 97       	sbiw	r28, 0x00	; 0
   1e5ae:	09 f4       	brne	.+2      	; 0x1e5b2 <EVENT_USB_Device_ControlRequest+0x15c>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1e5b0:	4a c0       	rjmp	.+148    	; 0x1e646 <EVENT_USB_Device_ControlRequest+0x1f0>
   1e5b2:	40 91 f2 00 	lds	r20, 0x00F2
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1e5b6:	50 91 f3 00 	lds	r21, 0x00F3
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e5ba:	45 2b       	or	r20, r21
   1e5bc:	e1 f0       	breq	.+56     	; 0x1e5f6 <EVENT_USB_Device_ControlRequest+0x1a0>
   1e5be:	21 97       	sbiw	r28, 0x01	; 1
   1e5c0:	70 91 f1 00 	lds	r23, 0x00F1
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e5c4:	60 91 f1 00 	lds	r22, 0x00F1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e5c8:	47 2f       	mov	r20, r23
   1e5ca:	56 2f       	mov	r21, r22
				Data.Bytes[1] = UEDATX;
   1e5cc:	0a 01       	movw	r0, r20
   1e5ce:	fc 01       	movw	r30, r24

				return Data.Value;
   1e5d0:	a0 93 5b 00 	sts	0x005B, r26
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1e5d4:	e0 92 57 00 	sts	0x0057, r14
   1e5d8:	e8 95       	spm
   1e5da:	11 24       	eor	r1, r1
   1e5dc:	f3 94       	inc	r15
   1e5de:	ac 01       	movw	r20, r24
   1e5e0:	bd 01       	movw	r22, r26
   1e5e2:	4e 5f       	subi	r20, 0xFE	; 254

							/* Adjust counters */
							WordsInFlashPage      += 1;
   1e5e4:	5f 4f       	sbci	r21, 0xFF	; 255
							CurrFlashAddress.Long += 2;
   1e5e6:	6f 4f       	sbci	r22, 0xFF	; 255
   1e5e8:	7f 4f       	sbci	r23, 0xFF	; 255
   1e5ea:	db 01       	movw	r26, r22
   1e5ec:	ca 01       	movw	r24, r20
   1e5ee:	e0 e8       	ldi	r30, 0x80	; 128
   1e5f0:	fe 12       	cpse	r15, r30
   1e5f2:	0e c0       	rjmp	.+28     	; 0x1e610 <EVENT_USB_Device_ControlRequest+0x1ba>
   1e5f4:	0f c0       	rjmp	.+30     	; 0x1e614 <EVENT_USB_Device_ControlRequest+0x1be>

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e5f6:	40 91 e8 00 	lds	r20, 0x00E8
   1e5fa:	4b 7f       	andi	r20, 0xFB	; 251
   1e5fc:	40 93 e8 00 	sts	0x00E8, r20
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e600:	40 91 e8 00 	lds	r20, 0x00E8
   1e604:	42 fd       	sbrc	r20, 2
   1e606:	db cf       	rjmp	.-74     	; 0x1e5be <EVENT_USB_Device_ControlRequest+0x168>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e608:	4e b3       	in	r20, 0x1e	; 30
   1e60a:	41 11       	cpse	r20, r1
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e60c:	f9 cf       	rjmp	.-14     	; 0x1e600 <EVENT_USB_Device_ControlRequest+0x1aa>
   1e60e:	2c c1       	rjmp	.+600    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e610:	20 97       	sbiw	r28, 0x00	; 0
   1e612:	61 f6       	brne	.-104    	; 0x1e5ac <EVENT_USB_Device_ControlRequest+0x156>
   1e614:	f8 01       	movw	r30, r16
   1e616:	20 93 5b 00 	sts	0x005B, r18
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e61a:	d0 92 57 00 	sts	0x0057, r13
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1e61e:	e8 95       	spm
   1e620:	07 b6       	in	r0, 0x37	; 55
   1e622:	00 fc       	sbrc	r0, 0
   1e624:	fd cf       	rjmp	.-6      	; 0x1e620 <EVENT_USB_Device_ControlRequest+0x1ca>
   1e626:	20 97       	sbiw	r28, 0x00	; 0
								boot_spm_busy_wait();
   1e628:	09 f4       	brne	.+2      	; 0x1e62c <EVENT_USB_Device_ControlRequest+0x1d6>
   1e62a:	c0 cf       	rjmp	.-128    	; 0x1e5ac <EVENT_USB_Device_ControlRequest+0x156>
   1e62c:	fa 01       	movw	r30, r20

								/* Check if programming incomplete */
								if (WordsRemaining)
   1e62e:	60 93 5b 00 	sts	0x005B, r22
   1e632:	c0 92 57 00 	sts	0x0057, r12
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1e636:	e8 95       	spm
   1e638:	07 b6       	in	r0, 0x37	; 55
   1e63a:	00 fc       	sbrc	r0, 0
   1e63c:	fd cf       	rjmp	.-6      	; 0x1e638 <EVENT_USB_Device_ControlRequest+0x1e2>
   1e63e:	8a 01       	movw	r16, r20
									boot_spm_busy_wait();
   1e640:	9b 01       	movw	r18, r22
   1e642:	f1 2c       	mov	r15, r1
   1e644:	b3 cf       	rjmp	.-154    	; 0x1e5ac <EVENT_USB_Device_ControlRequest+0x156>
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e646:	80 91 62 01 	lds	r24, 0x0162
									WordsInFlashPage          = 0;
   1e64a:	90 91 63 01 	lds	r25, 0x0163
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
   1e64e:	90 93 65 01 	sts	0x0165, r25
   1e652:	80 93 64 01 	sts	0x0164, r24
   1e656:	81 e1       	ldi	r24, 0x11	; 17
   1e658:	80 93 57 00 	sts	0x0057, r24
   1e65c:	e8 95       	spm

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
   1e65e:	29 c0       	rjmp	.+82     	; 0x1e6b2 <EVENT_USB_Device_ControlRequest+0x25c>
   1e660:	80 91 f2 00 	lds	r24, 0x00F2
   1e664:	90 91 f3 00 	lds	r25, 0x00F3
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e668:	89 2b       	or	r24, r25
   1e66a:	49 f4       	brne	.+18     	; 0x1e67e <EVENT_USB_Device_ControlRequest+0x228>
   1e66c:	80 91 e8 00 	lds	r24, 0x00E8
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e670:	8b 7f       	andi	r24, 0xFB	; 251
   1e672:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e676:	80 91 e8 00 	lds	r24, 0x00E8
   1e67a:	82 ff       	sbrs	r24, 2
   1e67c:	16 c0       	rjmp	.+44     	; 0x1e6aa <EVENT_USB_Device_ControlRequest+0x254>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e67e:	01 50       	subi	r16, 0x01	; 1
   1e680:	11 09       	sbc	r17, r1
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e682:	60 91 f1 00 	lds	r22, 0x00F1
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1e686:	80 91 64 01 	lds	r24, 0x0164
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e68a:	90 91 65 01 	lds	r25, 0x0165
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
   1e68e:	fd d3       	rcall	.+2042   	; 0x1ee8a <__eewr_byte_usb1287>
   1e690:	80 91 64 01 	lds	r24, 0x0164
   1e694:	90 91 65 01 	lds	r25, 0x0165
   1e698:	01 96       	adiw	r24, 0x01	; 1

							/* Adjust counters */
							StartAddr++;
   1e69a:	90 93 65 01 	sts	0x0165, r25
   1e69e:	80 93 64 01 	sts	0x0164, r24
   1e6a2:	01 15       	cp	r16, r1
   1e6a4:	11 05       	cpc	r17, r1
   1e6a6:	e1 f6       	brne	.-72     	; 0x1e660 <EVENT_USB_Device_ControlRequest+0x20a>
   1e6a8:	04 c0       	rjmp	.+8      	; 0x1e6b2 <EVENT_USB_Device_ControlRequest+0x25c>
   1e6aa:	8e b3       	in	r24, 0x1e	; 30
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1e6ac:	81 11       	cpse	r24, r1
   1e6ae:	e3 cf       	rjmp	.-58     	; 0x1e676 <EVENT_USB_Device_ControlRequest+0x220>
   1e6b0:	db c0       	rjmp	.+438    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e6b2:	80 e1       	ldi	r24, 0x10	; 16
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6b4:	2b dd       	rcall	.-1450   	; 0x1e10c <DiscardFillerBytes>
   1e6b6:	80 91 e8 00 	lds	r24, 0x00E8
   1e6ba:	8b 7f       	andi	r24, 0xFB	; 251
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
   1e6bc:	93 c0       	rjmp	.+294    	; 0x1e7e4 <EVENT_USB_Device_ControlRequest+0x38e>
   1e6be:	8e b3       	in	r24, 0x1e	; 30
   1e6c0:	88 23       	and	r24, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e6c2:	09 f4       	brne	.+2      	; 0x1e6c6 <EVENT_USB_Device_ControlRequest+0x270>
   1e6c4:	d1 c0       	rjmp	.+418    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e6c6:	80 91 e8 00 	lds	r24, 0x00E8
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6ca:	80 ff       	sbrs	r24, 0
   1e6cc:	f8 cf       	rjmp	.-16     	; 0x1e6be <EVENT_USB_Device_ControlRequest+0x268>
   1e6ce:	80 91 00 01 	lds	r24, 0x0100
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6d2:	89 30       	cpi	r24, 0x09	; 9
   1e6d4:	91 f0       	breq	.+36     	; 0x1e6fa <EVENT_USB_Device_ControlRequest+0x2a4>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e6d6:	8a 30       	cpi	r24, 0x0A	; 10
   1e6d8:	59 f4       	brne	.+22     	; 0x1e6f0 <EVENT_USB_Device_ControlRequest+0x29a>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
   1e6da:	80 91 6b 01 	lds	r24, 0x016B
   1e6de:	81 30       	cpi	r24, 0x01	; 1
   1e6e0:	39 f4       	brne	.+14     	; 0x1e6f0 <EVENT_USB_Device_ControlRequest+0x29a>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
   1e6e2:	90 91 64 01 	lds	r25, 0x0164
   1e6e6:	80 91 65 01 	lds	r24, 0x0165
   1e6ea:	90 93 f1 00 	sts	0x00F1, r25
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
   1e6ee:	02 c0       	rjmp	.+4      	; 0x1e6f4 <EVENT_USB_Device_ControlRequest+0x29e>
   1e6f0:	80 91 69 01 	lds	r24, 0x0169
   1e6f4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e6f8:	72 c0       	rjmp	.+228    	; 0x1e7de <EVENT_USB_Device_ControlRequest+0x388>
   1e6fa:	40 91 64 01 	lds	r20, 0x0164
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
   1e6fe:	50 91 65 01 	lds	r21, 0x0165
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e702:	20 91 62 01 	lds	r18, 0x0162
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e706:	30 91 63 01 	lds	r19, 0x0163
   1e70a:	2f 5f       	subi	r18, 0xFF	; 255
   1e70c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e70e:	24 1b       	sub	r18, r20
   1e710:	35 0b       	sbc	r19, r21
   1e712:	80 91 6b 01 	lds	r24, 0x016B
   1e716:	81 11       	cpse	r24, r1
   1e718:	35 c0       	rjmp	.+106    	; 0x1e784 <EVENT_USB_Device_ControlRequest+0x32e>
   1e71a:	ca 01       	movw	r24, r20
   1e71c:	40 91 66 01 	lds	r20, 0x0166

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
   1e720:	a4 2f       	mov	r26, r20
   1e722:	b0 e0       	ldi	r27, 0x00	; 0
   1e724:	36 95       	lsr	r19

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e726:	27 95       	ror	r18
   1e728:	21 15       	cp	r18, r1
   1e72a:	31 05       	cpc	r19, r1
   1e72c:	11 f1       	breq	.+68     	; 0x1e772 <EVENT_USB_Device_ControlRequest+0x31c>
   1e72e:	40 91 f2 00 	lds	r20, 0x00F2

					while (WordsRemaining--)
   1e732:	50 91 f3 00 	lds	r21, 0x00F3
   1e736:	40 32       	cpi	r20, 0x20	; 32
   1e738:	51 05       	cpc	r21, r1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e73a:	69 f4       	brne	.+26     	; 0x1e756 <EVENT_USB_Device_ControlRequest+0x300>
   1e73c:	40 91 e8 00 	lds	r20, 0x00E8
   1e740:	4e 7f       	andi	r20, 0xFE	; 254
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e742:	40 93 e8 00 	sts	0x00E8, r20
   1e746:	40 91 e8 00 	lds	r20, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e74a:	40 fd       	sbrc	r20, 0
   1e74c:	04 c0       	rjmp	.+8      	; 0x1e756 <EVENT_USB_Device_ControlRequest+0x300>
   1e74e:	4e b3       	in	r20, 0x1e	; 30
   1e750:	41 11       	cpse	r20, r1
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e752:	f9 cf       	rjmp	.-14     	; 0x1e746 <EVENT_USB_Device_ControlRequest+0x2f0>
   1e754:	89 c0       	rjmp	.+274    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e756:	ab bf       	out	0x3b, r26	; 59
   1e758:	fc 01       	movw	r30, r24
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e75a:	47 91       	elpm	r20, Z+
   1e75c:	56 91       	elpm	r21, Z
   1e75e:	40 93 f1 00 	sts	0x00F1, r20
							}
						}

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
   1e762:	50 93 f1 00 	sts	0x00F1, r21
   1e766:	02 96       	adiw	r24, 0x02	; 2
   1e768:	a1 1d       	adc	r26, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e76a:	b1 1d       	adc	r27, r1
   1e76c:	21 50       	subi	r18, 0x01	; 1
				UEDATX = (Data >> 8);
   1e76e:	31 09       	sbc	r19, r1
   1e770:	db cf       	rjmp	.-74     	; 0x1e728 <EVENT_USB_Device_ControlRequest+0x2d2>
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
   1e772:	80 91 62 01 	lds	r24, 0x0162
   1e776:	90 91 63 01 	lds	r25, 0x0163
   1e77a:	90 93 65 01 	sts	0x0165, r25
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
   1e77e:	80 93 64 01 	sts	0x0164, r24
   1e782:	2a c0       	rjmp	.+84     	; 0x1e7d8 <EVENT_USB_Device_ControlRequest+0x382>
   1e784:	82 30       	cpi	r24, 0x02	; 2
   1e786:	41 f5       	brne	.+80     	; 0x1e7d8 <EVENT_USB_Device_ControlRequest+0x382>
   1e788:	e9 01       	movw	r28, r18
   1e78a:	20 97       	sbiw	r28, 0x00	; 0
   1e78c:	29 f1       	breq	.+74     	; 0x1e7d8 <EVENT_USB_Device_ControlRequest+0x382>
   1e78e:	80 91 f2 00 	lds	r24, 0x00F2
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
   1e792:	90 91 f3 00 	lds	r25, 0x00F3
				{
					while (BytesRemaining--)
   1e796:	80 97       	sbiw	r24, 0x20	; 32
   1e798:	69 f4       	brne	.+26     	; 0x1e7b4 <EVENT_USB_Device_ControlRequest+0x35e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e79a:	80 91 e8 00 	lds	r24, 0x00E8
   1e79e:	8e 7f       	andi	r24, 0xFE	; 254
   1e7a0:	80 93 e8 00 	sts	0x00E8, r24
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e7a4:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e7a8:	80 fd       	sbrc	r24, 0
   1e7aa:	04 c0       	rjmp	.+8      	; 0x1e7b4 <EVENT_USB_Device_ControlRequest+0x35e>
   1e7ac:	8e b3       	in	r24, 0x1e	; 30
   1e7ae:	81 11       	cpse	r24, r1
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e7b0:	f9 cf       	rjmp	.-14     	; 0x1e7a4 <EVENT_USB_Device_ControlRequest+0x34e>
   1e7b2:	5a c0       	rjmp	.+180    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e7b4:	80 91 64 01 	lds	r24, 0x0164
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e7b8:	90 91 65 01 	lds	r25, 0x0165
   1e7bc:	5e d3       	rcall	.+1724   	; 0x1ee7a <__eerd_byte_usb1287>
   1e7be:	80 93 f1 00 	sts	0x00F1, r24
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
   1e7c2:	80 91 64 01 	lds	r24, 0x0164
   1e7c6:	90 91 65 01 	lds	r25, 0x0165
   1e7ca:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e7cc:	90 93 65 01 	sts	0x0165, r25

						/* Adjust counters */
						StartAddr++;
   1e7d0:	80 93 64 01 	sts	0x0164, r24
   1e7d4:	21 97       	sbiw	r28, 0x01	; 1
   1e7d6:	d9 cf       	rjmp	.-78     	; 0x1e78a <EVENT_USB_Device_ControlRequest+0x334>
   1e7d8:	82 e0       	ldi	r24, 0x02	; 2
   1e7da:	80 93 00 01 	sts	0x0100, r24
   1e7de:	80 91 e8 00 	lds	r24, 0x00E8
   1e7e2:	8e 7f       	andi	r24, 0xFE	; 254
   1e7e4:	80 93 e8 00 	sts	0x00E8, r24
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
   1e7e8:	36 c0       	rjmp	.+108    	; 0x1e856 <EVENT_USB_Device_ControlRequest+0x400>
   1e7ea:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e7ee:	87 7f       	andi	r24, 0xF7	; 247
   1e7f0:	80 93 e8 00 	sts	0x00E8, r24
   1e7f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7f8:	80 fd       	sbrc	r24, 0
   1e7fa:	04 c0       	rjmp	.+8      	; 0x1e804 <EVENT_USB_Device_ControlRequest+0x3ae>
   1e7fc:	8e b3       	in	r24, 0x1e	; 30
   1e7fe:	81 11       	cpse	r24, r1
   1e800:	f9 cf       	rjmp	.-14     	; 0x1e7f4 <EVENT_USB_Device_ControlRequest+0x39e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e802:	32 c0       	rjmp	.+100    	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e804:	80 91 72 01 	lds	r24, 0x0172
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e808:	80 93 f1 00 	sts	0x00F1, r24
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e80c:	10 92 f1 00 	sts	0x00F1, r1
   1e810:	10 92 f1 00 	sts	0x00F1, r1
				  return;
			}

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
   1e814:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e818:	80 91 00 01 	lds	r24, 0x0100
   1e81c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e820:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1e824:	dc cf       	rjmp	.-72     	; 0x1e7de <EVENT_USB_Device_ControlRequest+0x388>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
   1e826:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e82a:	87 7f       	andi	r24, 0xF7	; 247
   1e82c:	80 93 e8 00 	sts	0x00E8, r24
   1e830:	10 92 72 01 	sts	0x0172, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e834:	10 c0       	rjmp	.+32     	; 0x1e856 <EVENT_USB_Device_ControlRequest+0x400>
   1e836:	80 91 e8 00 	lds	r24, 0x00E8
   1e83a:	87 7f       	andi	r24, 0xF7	; 247
   1e83c:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
   1e840:	80 91 e8 00 	lds	r24, 0x00E8
   1e844:	80 fd       	sbrc	r24, 0
   1e846:	04 c0       	rjmp	.+8      	; 0x1e850 <EVENT_USB_Device_ControlRequest+0x3fa>
   1e848:	8e b3       	in	r24, 0x1e	; 30
   1e84a:	81 11       	cpse	r24, r1
   1e84c:	f9 cf       	rjmp	.-14     	; 0x1e840 <EVENT_USB_Device_ControlRequest+0x3ea>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e84e:	0c c0       	rjmp	.+24     	; 0x1e868 <EVENT_USB_Device_ControlRequest+0x412>
   1e850:	80 91 00 01 	lds	r24, 0x0100
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e854:	4f cf       	rjmp	.-354    	; 0x1e6f4 <EVENT_USB_Device_ControlRequest+0x29e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e856:	df 91       	pop	r29
   1e858:	cf 91       	pop	r28
   1e85a:	1f 91       	pop	r17
   1e85c:	0f 91       	pop	r16
				  return;
			}

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
   1e85e:	ff 90       	pop	r15
   1e860:	ef 90       	pop	r14
   1e862:	df 90       	pop	r13
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e864:	cf 90       	pop	r12
   1e866:	00 c1       	rjmp	.+512    	; 0x1ea68 <Endpoint_ClearStatusStage>
   1e868:	df 91       	pop	r29
   1e86a:	cf 91       	pop	r28
   1e86c:	1f 91       	pop	r17
   1e86e:	0f 91       	pop	r16
   1e870:	ff 90       	pop	r15
   1e872:	ef 90       	pop	r14
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
   1e874:	df 90       	pop	r13
   1e876:	cf 90       	pop	r12
			break;
	}
}
   1e878:	08 95       	ret

0001e87a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
   1e87a:	29 2f       	mov	r18, r25
   1e87c:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e87e:	22 30       	cpi	r18, 0x02	; 2
   1e880:	31 05       	cpc	r19, r1
   1e882:	39 f0       	breq	.+14     	; 0x1e892 <CALLBACK_USB_GetDescriptor+0x18>
   1e884:	23 30       	cpi	r18, 0x03	; 3
   1e886:	31 05       	cpc	r19, r1
   1e888:	49 f0       	breq	.+18     	; 0x1e89c <CALLBACK_USB_GetDescriptor+0x22>
   1e88a:	21 30       	cpi	r18, 0x01	; 1
   1e88c:	31 05       	cpc	r19, r1
   1e88e:	61 f4       	brne	.+24     	; 0x1e8a8 <CALLBACK_USB_GetDescriptor+0x2e>
   1e890:	10 c0       	rjmp	.+32     	; 0x1e8b2 <CALLBACK_USB_GetDescriptor+0x38>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1e892:	8b e1       	ldi	r24, 0x1B	; 27
   1e894:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1e896:	24 e3       	ldi	r18, 0x34	; 52
   1e898:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1e89a:	1e c0       	rjmp	.+60     	; 0x1e8d8 <CALLBACK_USB_GetDescriptor+0x5e>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
   1e89c:	88 23       	and	r24, r24
   1e89e:	71 f0       	breq	.+28     	; 0x1e8bc <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
   1e8a0:	81 30       	cpi	r24, 0x01	; 1
   1e8a2:	89 f0       	breq	.+34     	; 0x1e8c6 <CALLBACK_USB_GetDescriptor+0x4c>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
   1e8a4:	82 30       	cpi	r24, 0x02	; 2
   1e8a6:	a1 f0       	breq	.+40     	; 0x1e8d0 <CALLBACK_USB_GetDescriptor+0x56>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e8a8:	80 e0       	ldi	r24, 0x00	; 0
   1e8aa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1e8ac:	20 e0       	ldi	r18, 0x00	; 0
   1e8ae:	30 e0       	ldi	r19, 0x00	; 0
   1e8b0:	13 c0       	rjmp	.+38     	; 0x1e8d8 <CALLBACK_USB_GetDescriptor+0x5e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1e8b2:	82 e1       	ldi	r24, 0x12	; 18
   1e8b4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1e8b6:	2f e4       	ldi	r18, 0x4F	; 79
   1e8b8:	31 e0       	ldi	r19, 0x01	; 1
   1e8ba:	0e c0       	rjmp	.+28     	; 0x1e8d8 <CALLBACK_USB_GetDescriptor+0x5e>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1e8bc:	84 e0       	ldi	r24, 0x04	; 4
   1e8be:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
   1e8c0:	20 e3       	ldi	r18, 0x30	; 48
   1e8c2:	31 e0       	ldi	r19, 0x01	; 1
   1e8c4:	09 c0       	rjmp	.+18     	; 0x1e8d8 <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
   1e8c6:	88 e1       	ldi	r24, 0x18	; 24
   1e8c8:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
   1e8ca:	26 e1       	ldi	r18, 0x16	; 22
   1e8cc:	31 e0       	ldi	r19, 0x01	; 1
   1e8ce:	04 c0       	rjmp	.+8      	; 0x1e8d8 <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1e8d0:	82 e1       	ldi	r24, 0x12	; 18
   1e8d2:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
   1e8d4:	22 e0       	ldi	r18, 0x02	; 2
   1e8d6:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1e8d8:	fa 01       	movw	r30, r20
   1e8da:	31 83       	std	Z+1, r19	; 0x01
   1e8dc:	20 83       	st	Z, r18
	return Size;
}
   1e8de:	08 95       	ret

0001e8e0 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e8e0:	07 b6       	in	r0, 0x37	; 55
   1e8e2:	00 fc       	sbrc	r0, 0
   1e8e4:	fd cf       	rjmp	.-6      	; 0x1e8e0 <BootloaderAPI_ErasePage>
   1e8e6:	f9 99       	sbic	0x1f, 1	; 31
   1e8e8:	fe cf       	rjmp	.-4      	; 0x1e8e6 <BootloaderAPI_ErasePage+0x6>
   1e8ea:	23 e0       	ldi	r18, 0x03	; 3
   1e8ec:	fb 01       	movw	r30, r22
   1e8ee:	80 93 5b 00 	sts	0x005B, r24
   1e8f2:	20 93 57 00 	sts	0x0057, r18
   1e8f6:	e8 95       	spm
	boot_spm_busy_wait();
   1e8f8:	07 b6       	in	r0, 0x37	; 55
   1e8fa:	00 fc       	sbrc	r0, 0
   1e8fc:	fd cf       	rjmp	.-6      	; 0x1e8f8 <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e8fe:	81 e1       	ldi	r24, 0x11	; 17
   1e900:	80 93 57 00 	sts	0x0057, r24
   1e904:	e8 95       	spm
   1e906:	08 95       	ret

0001e908 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e908:	07 b6       	in	r0, 0x37	; 55
   1e90a:	00 fc       	sbrc	r0, 0
   1e90c:	fd cf       	rjmp	.-6      	; 0x1e908 <BootloaderAPI_WritePage>
   1e90e:	f9 99       	sbic	0x1f, 1	; 31
   1e910:	fe cf       	rjmp	.-4      	; 0x1e90e <BootloaderAPI_WritePage+0x6>
   1e912:	25 e0       	ldi	r18, 0x05	; 5
   1e914:	fb 01       	movw	r30, r22
   1e916:	80 93 5b 00 	sts	0x005B, r24
   1e91a:	20 93 57 00 	sts	0x0057, r18
   1e91e:	e8 95       	spm
	boot_spm_busy_wait();
   1e920:	07 b6       	in	r0, 0x37	; 55
   1e922:	00 fc       	sbrc	r0, 0
   1e924:	fd cf       	rjmp	.-6      	; 0x1e920 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e926:	81 e1       	ldi	r24, 0x11	; 17
   1e928:	80 93 57 00 	sts	0x0057, r24
   1e92c:	e8 95       	spm
   1e92e:	08 95       	ret

0001e930 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e930:	07 b6       	in	r0, 0x37	; 55
   1e932:	00 fc       	sbrc	r0, 0
   1e934:	fd cf       	rjmp	.-6      	; 0x1e930 <BootloaderAPI_FillWord>
   1e936:	f9 99       	sbic	0x1f, 1	; 31
   1e938:	fe cf       	rjmp	.-4      	; 0x1e936 <BootloaderAPI_FillWord+0x6>
   1e93a:	21 e0       	ldi	r18, 0x01	; 1
   1e93c:	0a 01       	movw	r0, r20
   1e93e:	fb 01       	movw	r30, r22
   1e940:	80 93 5b 00 	sts	0x005B, r24
   1e944:	20 93 57 00 	sts	0x0057, r18
   1e948:	e8 95       	spm
   1e94a:	11 24       	eor	r1, r1
   1e94c:	08 95       	ret

0001e94e <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e94e:	21 e2       	ldi	r18, 0x21	; 33
   1e950:	fc 01       	movw	r30, r24
   1e952:	20 93 57 00 	sts	0x0057, r18
   1e956:	84 91       	lpm	r24, Z
}
   1e958:	08 95       	ret

0001e95a <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e95a:	29 e0       	ldi	r18, 0x09	; 9
   1e95c:	fc 01       	movw	r30, r24
   1e95e:	20 93 57 00 	sts	0x0057, r18
   1e962:	84 91       	lpm	r24, Z
}
   1e964:	08 95       	ret

0001e966 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e966:	e1 e0       	ldi	r30, 0x01	; 1
   1e968:	f0 e0       	ldi	r31, 0x00	; 0
   1e96a:	89 e0       	ldi	r24, 0x09	; 9
   1e96c:	80 93 57 00 	sts	0x0057, r24
   1e970:	84 91       	lpm	r24, Z
}
   1e972:	08 95       	ret

0001e974 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e974:	07 b6       	in	r0, 0x37	; 55
   1e976:	00 fc       	sbrc	r0, 0
   1e978:	fd cf       	rjmp	.-6      	; 0x1e974 <BootloaderAPI_WriteLock>
   1e97a:	f9 99       	sbic	0x1f, 1	; 31
   1e97c:	fe cf       	rjmp	.-4      	; 0x1e97a <BootloaderAPI_WriteLock+0x6>
   1e97e:	80 95       	com	r24
   1e980:	99 e0       	ldi	r25, 0x09	; 9
   1e982:	e1 e0       	ldi	r30, 0x01	; 1
   1e984:	f0 e0       	ldi	r31, 0x00	; 0
   1e986:	08 2e       	mov	r0, r24
   1e988:	90 93 57 00 	sts	0x0057, r25
   1e98c:	e8 95       	spm
   1e98e:	08 95       	ret

0001e990 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e990:	20 91 7d 01 	lds	r18, 0x017D
   1e994:	30 91 7e 01 	lds	r19, 0x017E
   1e998:	26 17       	cp	r18, r22
   1e99a:	37 07       	cpc	r19, r23
   1e99c:	48 f0       	brcs	.+18     	; 0x1e9b0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e99e:	61 15       	cp	r22, r1
   1e9a0:	71 05       	cpc	r23, r1
   1e9a2:	39 f4       	brne	.+14     	; 0x1e9b2 <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e9a4:	20 91 e8 00 	lds	r18, 0x00E8
   1e9a8:	2e 7f       	andi	r18, 0xFE	; 254
   1e9aa:	20 93 e8 00 	sts	0x00E8, r18
   1e9ae:	01 c0       	rjmp	.+2      	; 0x1e9b2 <Endpoint_Write_Control_Stream_LE+0x22>
   1e9b0:	b9 01       	movw	r22, r18
   1e9b2:	fc 01       	movw	r30, r24
   1e9b4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e9b6:	61 15       	cp	r22, r1
   1e9b8:	71 05       	cpc	r23, r1
   1e9ba:	91 f1       	breq	.+100    	; 0x1ea20 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e9bc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e9be:	88 23       	and	r24, r24
   1e9c0:	e1 f1       	breq	.+120    	; 0x1ea3a <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e9c2:	85 30       	cpi	r24, 0x05	; 5
   1e9c4:	e1 f1       	breq	.+120    	; 0x1ea3e <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e9c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e9ca:	83 fd       	sbrc	r24, 3
   1e9cc:	3a c0       	rjmp	.+116    	; 0x1ea42 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e9ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e9d2:	82 ff       	sbrs	r24, 2
   1e9d4:	06 c0       	rjmp	.+12     	; 0x1e9e2 <Endpoint_Write_Control_Stream_LE+0x52>
   1e9d6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e9da:	82 ff       	sbrs	r24, 2
   1e9dc:	24 c0       	rjmp	.+72     	; 0x1ea26 <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e9de:	80 e0       	ldi	r24, 0x00	; 0
   1e9e0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e9e2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
   1e9e6:	80 ff       	sbrs	r24, 0
   1e9e8:	e6 cf       	rjmp	.-52     	; 0x1e9b6 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e9ea:	80 91 f2 00 	lds	r24, 0x00F2
   1e9ee:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e9f2:	61 15       	cp	r22, r1
   1e9f4:	71 05       	cpc	r23, r1
   1e9f6:	51 f0       	breq	.+20     	; 0x1ea0c <Endpoint_Write_Control_Stream_LE+0x7c>
   1e9f8:	80 32       	cpi	r24, 0x20	; 32
   1e9fa:	91 05       	cpc	r25, r1
   1e9fc:	38 f4       	brcc	.+14     	; 0x1ea0c <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e9fe:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ea00:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ea04:	61 50       	subi	r22, 0x01	; 1
   1ea06:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1ea08:	01 96       	adiw	r24, 0x01	; 1
   1ea0a:	f3 cf       	rjmp	.-26     	; 0x1e9f2 <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ea0c:	21 e0       	ldi	r18, 0x01	; 1
   1ea0e:	80 97       	sbiw	r24, 0x20	; 32
   1ea10:	09 f0       	breq	.+2      	; 0x1ea14 <Endpoint_Write_Control_Stream_LE+0x84>
   1ea12:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ea14:	80 91 e8 00 	lds	r24, 0x00E8
   1ea18:	8e 7f       	andi	r24, 0xFE	; 254
   1ea1a:	80 93 e8 00 	sts	0x00E8, r24
   1ea1e:	cb cf       	rjmp	.-106    	; 0x1e9b6 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ea20:	21 11       	cpse	r18, r1
   1ea22:	cc cf       	rjmp	.-104    	; 0x1e9bc <Endpoint_Write_Control_Stream_LE+0x2c>
   1ea24:	d8 cf       	rjmp	.-80     	; 0x1e9d6 <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ea26:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ea28:	88 23       	and	r24, r24
   1ea2a:	39 f0       	breq	.+14     	; 0x1ea3a <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ea2c:	85 30       	cpi	r24, 0x05	; 5
   1ea2e:	39 f0       	breq	.+14     	; 0x1ea3e <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ea30:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ea34:	83 ff       	sbrs	r24, 3
   1ea36:	cf cf       	rjmp	.-98     	; 0x1e9d6 <Endpoint_Write_Control_Stream_LE+0x46>
   1ea38:	04 c0       	rjmp	.+8      	; 0x1ea42 <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ea3a:	82 e0       	ldi	r24, 0x02	; 2
   1ea3c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ea3e:	83 e0       	ldi	r24, 0x03	; 3
   1ea40:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1ea42:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ea44:	08 95       	ret

0001ea46 <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1ea46:	eb ee       	ldi	r30, 0xEB	; 235
   1ea48:	f0 e0       	ldi	r31, 0x00	; 0
   1ea4a:	80 81       	ld	r24, Z
   1ea4c:	81 60       	ori	r24, 0x01	; 1
   1ea4e:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1ea50:	ed ee       	ldi	r30, 0xED	; 237
   1ea52:	f0 e0       	ldi	r31, 0x00	; 0
   1ea54:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1ea56:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1ea5a:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1ea5c:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1ea60:	88 1f       	adc	r24, r24
   1ea62:	88 27       	eor	r24, r24
   1ea64:	88 1f       	adc	r24, r24
   1ea66:	08 95       	ret

0001ea68 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ea68:	80 91 77 01 	lds	r24, 0x0177
   1ea6c:	87 fd       	sbrc	r24, 7
   1ea6e:	05 c0       	rjmp	.+10     	; 0x1ea7a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea70:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ea74:	80 ff       	sbrs	r24, 0
   1ea76:	0d c0       	rjmp	.+26     	; 0x1ea92 <Endpoint_ClearStatusStage+0x2a>
   1ea78:	10 c0       	rjmp	.+32     	; 0x1ea9a <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea7a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ea7e:	82 fd       	sbrc	r24, 2
   1ea80:	04 c0       	rjmp	.+8      	; 0x1ea8a <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea82:	8e b3       	in	r24, 0x1e	; 30
   1ea84:	81 11       	cpse	r24, r1
   1ea86:	f9 cf       	rjmp	.-14     	; 0x1ea7a <Endpoint_ClearStatusStage+0x12>
   1ea88:	08 95       	ret
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1ea8a:	80 91 e8 00 	lds	r24, 0x00E8
   1ea8e:	8b 7f       	andi	r24, 0xFB	; 251
   1ea90:	07 c0       	rjmp	.+14     	; 0x1eaa0 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea92:	8e b3       	in	r24, 0x1e	; 30
   1ea94:	81 11       	cpse	r24, r1
   1ea96:	ec cf       	rjmp	.-40     	; 0x1ea70 <Endpoint_ClearStatusStage+0x8>
   1ea98:	08 95       	ret
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ea9a:	80 91 e8 00 	lds	r24, 0x00E8
   1ea9e:	8e 7f       	andi	r24, 0xFE	; 254
   1eaa0:	80 93 e8 00 	sts	0x00E8, r24
   1eaa4:	08 95       	ret

0001eaa6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
   1eaa6:	65 d0       	rcall	.+202    	; 0x1eb72 <USB_INT_DisableAllInterrupts>
   1eaa8:	6c d0       	rcall	.+216    	; 0x1eb82 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1eaaa:	e0 ee       	ldi	r30, 0xE0	; 224
   1eaac:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1eaae:	80 81       	ld	r24, Z
   1eab0:	81 60       	ori	r24, 0x01	; 1
   1eab2:	80 83       	st	Z, r24
   1eab4:	e8 ed       	ldi	r30, 0xD8	; 216
   1eab6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
   1eab8:	80 81       	ld	r24, Z
   1eaba:	8f 77       	andi	r24, 0x7F	; 127
   1eabc:	80 83       	st	Z, r24
   1eabe:	19 bc       	out	0x29, r1	; 41
   1eac0:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eac2:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
   1eac4:	8c 91       	ld	r24, X
   1eac6:	8e 7f       	andi	r24, 0xFE	; 254
   1eac8:	8c 93       	st	X, r24
   1eaca:	80 81       	ld	r24, Z
   1eacc:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eace:	80 83       	st	Z, r24
   1ead0:	10 92 76 01 	sts	0x0176, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
   1ead4:	08 95       	ret

0001ead6 <USB_ResetInterface>:
   1ead6:	0f 93       	push	r16
   1ead8:	1f 93       	push	r17
}

void USB_ResetInterface(void)
{
   1eada:	cf 93       	push	r28
   1eadc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1eade:	49 d0       	rcall	.+146    	; 0x1eb72 <USB_INT_DisableAllInterrupts>
   1eae0:	50 d0       	rcall	.+160    	; 0x1eb82 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1eae2:	c8 ed       	ldi	r28, 0xD8	; 216
   1eae4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1eae6:	88 81       	ld	r24, Y
   1eae8:	8f 77       	andi	r24, 0x7F	; 127
   1eaea:	88 83       	st	Y, r24
   1eaec:	88 81       	ld	r24, Y
   1eaee:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1eaf0:	88 83       	st	Y, r24
   1eaf2:	88 81       	ld	r24, Y
   1eaf4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1eaf6:	88 83       	st	Y, r24
   1eaf8:	e7 ed       	ldi	r30, 0xD7	; 215
   1eafa:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1eafc:	80 81       	ld	r24, Z
   1eafe:	80 68       	ori	r24, 0x80	; 128
   1eb00:	80 83       	st	Z, r24
   1eb02:	19 bc       	out	0x29, r1	; 41
   1eb04:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb06:	10 92 75 01 	sts	0x0175, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1eb0a:	00 ee       	ldi	r16, 0xE0	; 224
   1eb0c:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1eb0e:	f8 01       	movw	r30, r16
   1eb10:	80 81       	ld	r24, Z
   1eb12:	8b 7f       	andi	r24, 0xFB	; 251
   1eb14:	80 83       	st	Z, r24
   1eb16:	88 81       	ld	r24, Y
   1eb18:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1eb1a:	88 83       	st	Y, r24
   1eb1c:	42 e2       	ldi	r20, 0x22	; 34
   1eb1e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1eb20:	80 e0       	ldi	r24, 0x00	; 0
   1eb22:	91 df       	rcall	.-222    	; 0x1ea46 <Endpoint_ConfigureEndpoint_Prv>
   1eb24:	e1 ee       	ldi	r30, 0xE1	; 225
   1eb26:	f0 e0       	ldi	r31, 0x00	; 0
   1eb28:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1eb2a:	8e 7f       	andi	r24, 0xFE	; 254
   1eb2c:	80 83       	st	Z, r24
   1eb2e:	e2 ee       	ldi	r30, 0xE2	; 226
   1eb30:	f0 e0       	ldi	r31, 0x00	; 0
   1eb32:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1eb34:	81 60       	ori	r24, 0x01	; 1
   1eb36:	80 83       	st	Z, r24
   1eb38:	80 81       	ld	r24, Z
   1eb3a:	88 60       	ori	r24, 0x08	; 8
   1eb3c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1eb3e:	f8 01       	movw	r30, r16
   1eb40:	80 81       	ld	r24, Z
   1eb42:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1eb44:	80 83       	st	Z, r24
   1eb46:	88 81       	ld	r24, Y
   1eb48:	80 61       	ori	r24, 0x10	; 16
   1eb4a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1eb4c:	df 91       	pop	r29
   1eb4e:	cf 91       	pop	r28
   1eb50:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1eb52:	0f 91       	pop	r16
   1eb54:	08 95       	ret

0001eb56 <USB_Init>:
   1eb56:	e8 ed       	ldi	r30, 0xD8	; 216
   1eb58:	f0 e0       	ldi	r31, 0x00	; 0
   1eb5a:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eb5c:	8f 7e       	andi	r24, 0xEF	; 239
   1eb5e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eb60:	e7 ed       	ldi	r30, 0xD7	; 215
   1eb62:	f0 e0       	ldi	r31, 0x00	; 0
   1eb64:	80 81       	ld	r24, Z
   1eb66:	81 60       	ori	r24, 0x01	; 1
   1eb68:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eb6a:	81 e0       	ldi	r24, 0x01	; 1
   1eb6c:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
   1eb70:	b2 cf       	rjmp	.-156    	; 0x1ead6 <USB_ResetInterface>

0001eb72 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1eb72:	e8 ed       	ldi	r30, 0xD8	; 216
   1eb74:	f0 e0       	ldi	r31, 0x00	; 0
   1eb76:	80 81       	ld	r24, Z
   1eb78:	8c 7f       	andi	r24, 0xFC	; 252
   1eb7a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1eb7c:	10 92 e2 00 	sts	0x00E2, r1
   1eb80:	08 95       	ret

0001eb82 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1eb82:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1eb86:	10 92 e1 00 	sts	0x00E1, r1
   1eb8a:	08 95       	ret

0001eb8c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1eb8c:	1f 92       	push	r1
   1eb8e:	0f 92       	push	r0
   1eb90:	0f b6       	in	r0, 0x3f	; 63
   1eb92:	0f 92       	push	r0
   1eb94:	11 24       	eor	r1, r1
   1eb96:	0b b6       	in	r0, 0x3b	; 59
   1eb98:	0f 92       	push	r0
   1eb9a:	2f 93       	push	r18
   1eb9c:	3f 93       	push	r19
   1eb9e:	4f 93       	push	r20
   1eba0:	5f 93       	push	r21
   1eba2:	6f 93       	push	r22
   1eba4:	7f 93       	push	r23
   1eba6:	8f 93       	push	r24
   1eba8:	9f 93       	push	r25
   1ebaa:	af 93       	push	r26
   1ebac:	bf 93       	push	r27
   1ebae:	ef 93       	push	r30
   1ebb0:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1ebb2:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1ebb6:	80 ff       	sbrs	r24, 0
   1ebb8:	1b c0       	rjmp	.+54     	; 0x1ebf0 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1ebba:	80 91 d8 00 	lds	r24, 0x00D8
   1ebbe:	80 ff       	sbrs	r24, 0
   1ebc0:	17 c0       	rjmp	.+46     	; 0x1ebf0 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1ebc2:	80 91 da 00 	lds	r24, 0x00DA
   1ebc6:	8e 7f       	andi	r24, 0xFE	; 254
   1ebc8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1ebcc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1ebd0:	80 ff       	sbrs	r24, 0
   1ebd2:	0b c0       	rjmp	.+22     	; 0x1ebea <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ebd4:	8c e0       	ldi	r24, 0x0C	; 12
   1ebd6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ebd8:	8e e0       	ldi	r24, 0x0E	; 14
   1ebda:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1ebdc:	09 b4       	in	r0, 0x29	; 41
   1ebde:	00 fe       	sbrs	r0, 0
   1ebe0:	fd cf       	rjmp	.-6      	; 0x1ebdc <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1ebe2:	81 e0       	ldi	r24, 0x01	; 1
   1ebe4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1ebe6:	40 d1       	rcall	.+640    	; 0x1ee68 <USB_Event_Stub>
   1ebe8:	03 c0       	rjmp	.+6      	; 0x1ebf0 <__vector_10+0x64>
   1ebea:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ebec:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1ebee:	3c d1       	rcall	.+632    	; 0x1ee68 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1ebf0:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1ebf4:	80 ff       	sbrs	r24, 0
   1ebf6:	17 c0       	rjmp	.+46     	; 0x1ec26 <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1ebf8:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1ebfc:	80 ff       	sbrs	r24, 0
   1ebfe:	13 c0       	rjmp	.+38     	; 0x1ec26 <__vector_10+0x9a>
   1ec00:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec04:	8e 7f       	andi	r24, 0xFE	; 254
   1ec06:	80 93 e2 00 	sts	0x00E2, r24
   1ec0a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec0e:	80 61       	ori	r24, 0x10	; 16
   1ec10:	80 93 e2 00 	sts	0x00E2, r24
   1ec14:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1ec18:	80 62       	ori	r24, 0x20	; 32
   1ec1a:	80 93 d8 00 	sts	0x00D8, r24
   1ec1e:	19 bc       	out	0x29, r1	; 41
   1ec20:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ec22:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1ec24:	21 d1       	rcall	.+578    	; 0x1ee68 <USB_Event_Stub>
   1ec26:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1ec2a:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1ec2c:	2e c0       	rjmp	.+92     	; 0x1ec8a <__vector_10+0xfe>
   1ec2e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1ec32:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1ec34:	2a c0       	rjmp	.+84     	; 0x1ec8a <__vector_10+0xfe>
   1ec36:	8c e0       	ldi	r24, 0x0C	; 12
   1ec38:	89 bd       	out	0x29, r24	; 41
   1ec3a:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ec3c:	89 bd       	out	0x29, r24	; 41
   1ec3e:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ec40:	00 fe       	sbrs	r0, 0
   1ec42:	fd cf       	rjmp	.-6      	; 0x1ec3e <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1ec44:	80 91 d8 00 	lds	r24, 0x00D8
   1ec48:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ec4a:	80 93 d8 00 	sts	0x00D8, r24
   1ec4e:	80 91 e1 00 	lds	r24, 0x00E1
   1ec52:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1ec54:	80 93 e1 00 	sts	0x00E1, r24
   1ec58:	80 91 e2 00 	lds	r24, 0x00E2
   1ec5c:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ec5e:	80 93 e2 00 	sts	0x00E2, r24
   1ec62:	80 91 e2 00 	lds	r24, 0x00E2
   1ec66:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ec68:	80 93 e2 00 	sts	0x00E2, r24
   1ec6c:	80 91 75 01 	lds	r24, 0x0175
   1ec70:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ec72:	11 f0       	breq	.+4      	; 0x1ec78 <__vector_10+0xec>
   1ec74:	84 e0       	ldi	r24, 0x04	; 4
   1ec76:	07 c0       	rjmp	.+14     	; 0x1ec86 <__vector_10+0xfa>
   1ec78:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
   1ec7c:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ec7e:	02 c0       	rjmp	.+4      	; 0x1ec84 <__vector_10+0xf8>
   1ec80:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1ec82:	01 c0       	rjmp	.+2      	; 0x1ec86 <__vector_10+0xfa>
   1ec84:	81 e0       	ldi	r24, 0x01	; 1
   1ec86:	8e bb       	out	0x1e, r24	; 30
   1ec88:	ef d0       	rcall	.+478    	; 0x1ee68 <USB_Event_Stub>
   1ec8a:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ec8e:	83 ff       	sbrs	r24, 3
   1ec90:	21 c0       	rjmp	.+66     	; 0x1ecd4 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ec92:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ec96:	83 ff       	sbrs	r24, 3
   1ec98:	1d c0       	rjmp	.+58     	; 0x1ecd4 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ec9a:	80 91 e1 00 	lds	r24, 0x00E1
   1ec9e:	87 7f       	andi	r24, 0xF7	; 247
   1eca0:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1eca4:	82 e0       	ldi	r24, 0x02	; 2
   1eca6:	8e bb       	out	0x1e, r24	; 30
   1eca8:	10 92 75 01 	sts	0x0175, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ecac:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1ecb0:	8e 7f       	andi	r24, 0xFE	; 254
   1ecb2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ecb6:	80 91 e2 00 	lds	r24, 0x00E2
   1ecba:	8e 7f       	andi	r24, 0xFE	; 254
   1ecbc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ecc0:	80 91 e2 00 	lds	r24, 0x00E2
   1ecc4:	80 61       	ori	r24, 0x10	; 16
   1ecc6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ecca:	42 e2       	ldi	r20, 0x22	; 34
   1eccc:	60 e0       	ldi	r22, 0x00	; 0
   1ecce:	80 e0       	ldi	r24, 0x00	; 0
   1ecd0:	ba de       	rcall	.-652    	; 0x1ea46 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ecd2:	ca d0       	rcall	.+404    	; 0x1ee68 <USB_Event_Stub>
   1ecd4:	ff 91       	pop	r31
   1ecd6:	ef 91       	pop	r30
   1ecd8:	bf 91       	pop	r27
   1ecda:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ecdc:	9f 91       	pop	r25
   1ecde:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ece0:	7f 91       	pop	r23
   1ece2:	6f 91       	pop	r22
   1ece4:	5f 91       	pop	r21
   1ece6:	4f 91       	pop	r20
   1ece8:	3f 91       	pop	r19
   1ecea:	2f 91       	pop	r18
   1ecec:	0f 90       	pop	r0
   1ecee:	0b be       	out	0x3b, r0	; 59
   1ecf0:	0f 90       	pop	r0
   1ecf2:	0f be       	out	0x3f, r0	; 63
   1ecf4:	0f 90       	pop	r0
   1ecf6:	1f 90       	pop	r1
   1ecf8:	18 95       	reti

0001ecfa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ecfa:	1f 93       	push	r17
   1ecfc:	cf 93       	push	r28
   1ecfe:	df 93       	push	r29
   1ed00:	00 d0       	rcall	.+0      	; 0x1ed02 <USB_Device_ProcessControlRequest+0x8>
   1ed02:	cd b7       	in	r28, 0x3d	; 61
   1ed04:	de b7       	in	r29, 0x3e	; 62
   1ed06:	e7 e7       	ldi	r30, 0x77	; 119
   1ed08:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ed0a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ed0e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ed10:	81 e0       	ldi	r24, 0x01	; 1
   1ed12:	ef 37       	cpi	r30, 0x7F	; 127
   1ed14:	f8 07       	cpc	r31, r24
   1ed16:	c9 f7       	brne	.-14     	; 0x1ed0a <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ed18:	9e db       	rcall	.-2244   	; 0x1e456 <EVENT_USB_Device_ControlRequest>
   1ed1a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed1e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1ed20:	8f c0       	rjmp	.+286    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ed22:	90 91 77 01 	lds	r25, 0x0177
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ed26:	80 91 78 01 	lds	r24, 0x0178

		switch (USB_ControlRequest.bRequest)
   1ed2a:	86 30       	cpi	r24, 0x06	; 6
   1ed2c:	e1 f1       	breq	.+120    	; 0x1eda6 <USB_Device_ProcessControlRequest+0xac>
   1ed2e:	28 f4       	brcc	.+10     	; 0x1ed3a <USB_Device_ProcessControlRequest+0x40>
   1ed30:	88 23       	and	r24, r24
   1ed32:	51 f0       	breq	.+20     	; 0x1ed48 <USB_Device_ProcessControlRequest+0x4e>
   1ed34:	85 30       	cpi	r24, 0x05	; 5
   1ed36:	b1 f0       	breq	.+44     	; 0x1ed64 <USB_Device_ProcessControlRequest+0x6a>
   1ed38:	83 c0       	rjmp	.+262    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ed3a:	88 30       	cpi	r24, 0x08	; 8
   1ed3c:	09 f4       	brne	.+2      	; 0x1ed40 <USB_Device_ProcessControlRequest+0x46>
   1ed3e:	53 c0       	rjmp	.+166    	; 0x1ede6 <USB_Device_ProcessControlRequest+0xec>
   1ed40:	89 30       	cpi	r24, 0x09	; 9
   1ed42:	09 f4       	brne	.+2      	; 0x1ed46 <USB_Device_ProcessControlRequest+0x4c>
   1ed44:	62 c0       	rjmp	.+196    	; 0x1ee0a <USB_Device_ProcessControlRequest+0x110>
   1ed46:	7c c0       	rjmp	.+248    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ed48:	9d 7f       	andi	r25, 0xFD	; 253
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ed4a:	90 38       	cpi	r25, 0x80	; 128
   1ed4c:	09 f0       	breq	.+2      	; 0x1ed50 <USB_Device_ProcessControlRequest+0x56>
   1ed4e:	78 c0       	rjmp	.+240    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ed50:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed54:	87 7f       	andi	r24, 0xF7	; 247
   1ed56:	80 93 e8 00 	sts	0x00E8, r24
   1ed5a:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ed5e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1ed62:	4c c0       	rjmp	.+152    	; 0x1edfc <USB_Device_ProcessControlRequest+0x102>
   1ed64:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed66:	6c c0       	rjmp	.+216    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ed68:	10 91 79 01 	lds	r17, 0x0179
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed6c:	1f 77       	andi	r17, 0x7F	; 127
   1ed6e:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed72:	80 78       	andi	r24, 0x80	; 128
   1ed74:	81 2b       	or	r24, r17
   1ed76:	80 93 e3 00 	sts	0x00E3, r24
   1ed7a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed7e:	87 7f       	andi	r24, 0xF7	; 247
   1ed80:	80 93 e8 00 	sts	0x00E8, r24
   1ed84:	71 de       	rcall	.-798    	; 0x1ea68 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ed86:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed8a:	80 ff       	sbrs	r24, 0
   1ed8c:	fc cf       	rjmp	.-8      	; 0x1ed86 <USB_Device_ProcessControlRequest+0x8c>

	while (!(Endpoint_IsINReady()));
   1ed8e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1ed92:	80 68       	ori	r24, 0x80	; 128
   1ed94:	80 93 e3 00 	sts	0x00E3, r24
   1ed98:	11 23       	and	r17, r17
   1ed9a:	11 f0       	breq	.+4      	; 0x1eda0 <USB_Device_ProcessControlRequest+0xa6>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1ed9c:	83 e0       	ldi	r24, 0x03	; 3
   1ed9e:	01 c0       	rjmp	.+2      	; 0x1eda2 <USB_Device_ProcessControlRequest+0xa8>
   1eda0:	82 e0       	ldi	r24, 0x02	; 2
   1eda2:	8e bb       	out	0x1e, r24	; 30
   1eda4:	4d c0       	rjmp	.+154    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1eda6:	90 58       	subi	r25, 0x80	; 128
   1eda8:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1edaa:	08 f0       	brcs	.+2      	; 0x1edae <USB_Device_ProcessControlRequest+0xb4>
   1edac:	49 c0       	rjmp	.+146    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1edae:	ae 01       	movw	r20, r28
   1edb0:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1edb2:	5f 4f       	sbci	r21, 0xFF	; 255
   1edb4:	60 91 7b 01 	lds	r22, 0x017B
   1edb8:	80 91 79 01 	lds	r24, 0x0179
   1edbc:	90 91 7a 01 	lds	r25, 0x017A
   1edc0:	5c dd       	rcall	.-1352   	; 0x1e87a <CALLBACK_USB_GetDescriptor>
   1edc2:	00 97       	sbiw	r24, 0x00	; 0
   1edc4:	09 f4       	brne	.+2      	; 0x1edc8 <USB_Device_ProcessControlRequest+0xce>
   1edc6:	3c c0       	rjmp	.+120    	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1edc8:	20 91 e8 00 	lds	r18, 0x00E8
   1edcc:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edce:	20 93 e8 00 	sts	0x00E8, r18
   1edd2:	bc 01       	movw	r22, r24
   1edd4:	89 81       	ldd	r24, Y+1	; 0x01
   1edd6:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1edd8:	db dd       	rcall	.-1098   	; 0x1e990 <Endpoint_Write_Control_Stream_LE>
   1edda:	80 91 e8 00 	lds	r24, 0x00E8
   1edde:	8b 7f       	andi	r24, 0xFB	; 251
   1ede0:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1ede4:	2d c0       	rjmp	.+90     	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ede6:	90 38       	cpi	r25, 0x80	; 128
   1ede8:	59 f5       	brne	.+86     	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1edea:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1edee:	87 7f       	andi	r24, 0xF7	; 247
   1edf0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edf4:	80 91 75 01 	lds	r24, 0x0175
   1edf8:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1edfc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ee00:	8e 7f       	andi	r24, 0xFE	; 254
   1ee02:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ee06:	30 de       	rcall	.-928    	; 0x1ea68 <Endpoint_ClearStatusStage>
   1ee08:	1b c0       	rjmp	.+54     	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ee0a:	91 11       	cpse	r25, r1
   1ee0c:	19 c0       	rjmp	.+50     	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ee0e:	90 91 79 01 	lds	r25, 0x0179
   1ee12:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee14:	a8 f4       	brcc	.+42     	; 0x1ee40 <USB_Device_ProcessControlRequest+0x146>
   1ee16:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ee1a:	87 7f       	andi	r24, 0xF7	; 247
   1ee1c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee20:	90 93 75 01 	sts	0x0175, r25
   1ee24:	21 de       	rcall	.-958    	; 0x1ea68 <Endpoint_ClearStatusStage>
   1ee26:	80 91 75 01 	lds	r24, 0x0175
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ee2a:	81 11       	cpse	r24, r1
   1ee2c:	04 c0       	rjmp	.+8      	; 0x1ee36 <USB_Device_ProcessControlRequest+0x13c>

	Endpoint_ClearStatusStage();
   1ee2e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1ee32:	87 ff       	sbrs	r24, 7
   1ee34:	02 c0       	rjmp	.+4      	; 0x1ee3a <USB_Device_ProcessControlRequest+0x140>
   1ee36:	84 e0       	ldi	r24, 0x04	; 4
   1ee38:	01 c0       	rjmp	.+2      	; 0x1ee3c <USB_Device_ProcessControlRequest+0x142>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee3a:	81 e0       	ldi	r24, 0x01	; 1
   1ee3c:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ee3e:	14 d0       	rcall	.+40     	; 0x1ee68 <USB_Event_Stub>
   1ee40:	80 91 e8 00 	lds	r24, 0x00E8
   1ee44:	83 ff       	sbrs	r24, 3
   1ee46:	0a c0       	rjmp	.+20     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x162>
   1ee48:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1ee4c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee4e:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ee52:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee56:	80 62       	ori	r24, 0x20	; 32
   1ee58:	80 93 eb 00 	sts	0x00EB, r24
   1ee5c:	0f 90       	pop	r0
   1ee5e:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee60:	df 91       	pop	r29
   1ee62:	cf 91       	pop	r28
   1ee64:	1f 91       	pop	r17
   1ee66:	08 95       	ret

0001ee68 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ee68:	08 95       	ret

0001ee6a <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee6a:	8e b3       	in	r24, 0x1e	; 30
   1ee6c:	88 23       	and	r24, r24
   1ee6e:	21 f0       	breq	.+8      	; 0x1ee78 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee70:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1ee74:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1ee76:	41 cf       	rjmp	.-382    	; 0x1ecfa <USB_Device_ProcessControlRequest>
   1ee78:	08 95       	ret

0001ee7a <__eerd_byte_usb1287>:
   1ee7a:	f9 99       	sbic	0x1f, 1	; 31
   1ee7c:	fe cf       	rjmp	.-4      	; 0x1ee7a <__eerd_byte_usb1287>
   1ee7e:	92 bd       	out	0x22, r25	; 34
   1ee80:	81 bd       	out	0x21, r24	; 33
   1ee82:	f8 9a       	sbi	0x1f, 0	; 31
   1ee84:	99 27       	eor	r25, r25
   1ee86:	80 b5       	in	r24, 0x20	; 32
   1ee88:	08 95       	ret

0001ee8a <__eewr_byte_usb1287>:
   1ee8a:	26 2f       	mov	r18, r22

0001ee8c <__eewr_r18_usb1287>:
   1ee8c:	f9 99       	sbic	0x1f, 1	; 31
   1ee8e:	fe cf       	rjmp	.-4      	; 0x1ee8c <__eewr_r18_usb1287>
   1ee90:	1f ba       	out	0x1f, r1	; 31
   1ee92:	92 bd       	out	0x22, r25	; 34
   1ee94:	81 bd       	out	0x21, r24	; 33
   1ee96:	20 bd       	out	0x20, r18	; 32
   1ee98:	0f b6       	in	r0, 0x3f	; 63
   1ee9a:	f8 94       	cli
   1ee9c:	fa 9a       	sbi	0x1f, 2	; 31
   1ee9e:	f9 9a       	sbi	0x1f, 1	; 31
   1eea0:	0f be       	out	0x3f, r0	; 63
   1eea2:	01 96       	adiw	r24, 0x01	; 1
   1eea4:	08 95       	ret

0001eea6 <_exit>:
   1eea6:	f8 94       	cli

0001eea8 <__stop_program>:
   1eea8:	ff cf       	rjmp	.-2      	; 0x1eea8 <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 70 f4 	jmp	0x1e8e0	; 0x1e8e0 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 84 f4 	jmp	0x1e908	; 0x1e908 <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 98 f4 	jmp	0x1e930	; 0x1e930 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 a7 f4 	jmp	0x1e94e	; 0x1e94e <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 ad f4 	jmp	0x1e95a	; 0x1e95a <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 b3 f4 	jmp	0x1e966	; 0x1e966 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 ba f4 	jmp	0x1e974	; 0x1e974 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	10 df       	rcall	.-480    	; 0x1fe1e <__data_load_end+0xf12>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xaea>


BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0001eec8  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec8  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  0000102e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  0000106c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000e  00800192  00800192  00001074  2**0
                  ALLOC
  6 .noinit       00000002  008001a0  008001a0  00001074  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000003a8  00000000  00000000  00001ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000057bd  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001607  00000000  00000000  00007625  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000244c  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000920  00000000  00000000  0000b078  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029dc  00000000  00000000  0000b998  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003c72  00000000  00000000  0000e374  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005a8  00000000  00000000  00011fe8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	82 c0       	rjmp	.+260    	; 0x1e10a <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	80 c0       	rjmp	.+256    	; 0x1e10a <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	7e c0       	rjmp	.+252    	; 0x1e10a <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	7c c0       	rjmp	.+248    	; 0x1e10a <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	7a c0       	rjmp	.+244    	; 0x1e10a <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	78 c0       	rjmp	.+240    	; 0x1e10a <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	76 c0       	rjmp	.+236    	; 0x1e10a <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	74 c0       	rjmp	.+232    	; 0x1e10a <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	72 c0       	rjmp	.+228    	; 0x1e10a <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	62 c5       	rjmp	.+2756   	; 0x1eaee <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	6e c0       	rjmp	.+220    	; 0x1e10a <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	6c c0       	rjmp	.+216    	; 0x1e10a <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	6a c0       	rjmp	.+212    	; 0x1e10a <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	68 c0       	rjmp	.+208    	; 0x1e10a <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	66 c0       	rjmp	.+204    	; 0x1e10a <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	64 c0       	rjmp	.+200    	; 0x1e10a <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	62 c0       	rjmp	.+196    	; 0x1e10a <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	60 c0       	rjmp	.+192    	; 0x1e10a <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	5e c0       	rjmp	.+188    	; 0x1e10a <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	43 c3       	rjmp	.+1670   	; 0x1e6d8 <__vector_20>
   1e052:	00 00       	nop
   1e054:	5a c0       	rjmp	.+180    	; 0x1e10a <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	58 c0       	rjmp	.+176    	; 0x1e10a <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	56 c0       	rjmp	.+172    	; 0x1e10a <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	54 c0       	rjmp	.+168    	; 0x1e10a <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	52 c0       	rjmp	.+164    	; 0x1e10a <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	50 c0       	rjmp	.+160    	; 0x1e10a <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	4e c0       	rjmp	.+156    	; 0x1e10a <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	4c c0       	rjmp	.+152    	; 0x1e10a <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	4a c0       	rjmp	.+148    	; 0x1e10a <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	48 c0       	rjmp	.+144    	; 0x1e10a <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	46 c0       	rjmp	.+140    	; 0x1e10a <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	44 c0       	rjmp	.+136    	; 0x1e10a <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	42 c0       	rjmp	.+132    	; 0x1e10a <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	40 c0       	rjmp	.+128    	; 0x1e10a <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	3e c0       	rjmp	.+124    	; 0x1e10a <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	3c c0       	rjmp	.+120    	; 0x1e10a <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	3a c0       	rjmp	.+116    	; 0x1e10a <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	19 c0       	rjmp	.+50     	; 0x1e0dc <__do_copy_data>
   1e0aa:	80 91 a0 01 	lds	r24, 0x01A0
   1e0ae:	90 91 a1 01 	lds	r25, 0x01A1
   1e0b2:	82 34       	cpi	r24, 0x42	; 66
   1e0b4:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0b6:	91 f4       	brne	.+36     	; 0x1e0dc <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
   1e0b8:	84 b7       	in	r24, 0x34	; 52
   1e0ba:	87 7f       	andi	r24, 0xF7	; 247
   1e0bc:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
   1e0be:	88 e1       	ldi	r24, 0x18	; 24
   1e0c0:	0f b6       	in	r0, 0x3f	; 63
   1e0c2:	f8 94       	cli
   1e0c4:	80 93 60 00 	sts	0x0060, r24
   1e0c8:	10 92 60 00 	sts	0x0060, r1
   1e0cc:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e0ce:	10 92 a1 01 	sts	0x01A1, r1
   1e0d2:	10 92 a0 01 	sts	0x01A0, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0d6:	e0 e0       	ldi	r30, 0x00	; 0
   1e0d8:	f0 e0       	ldi	r31, 0x00	; 0
   1e0da:	09 95       	icall

0001e0dc <__do_copy_data>:
   1e0dc:	11 e0       	ldi	r17, 0x01	; 1
   1e0de:	a0 e0       	ldi	r26, 0x00	; 0
   1e0e0:	b1 e0       	ldi	r27, 0x01	; 1
   1e0e2:	e8 ec       	ldi	r30, 0xC8	; 200
   1e0e4:	fe ee       	ldi	r31, 0xEE	; 238
   1e0e6:	01 e0       	ldi	r16, 0x01	; 1
   1e0e8:	0b bf       	out	0x3b, r16	; 59
   1e0ea:	02 c0       	rjmp	.+4      	; 0x1e0f0 <__do_copy_data+0x14>
   1e0ec:	07 90       	elpm	r0, Z+
   1e0ee:	0d 92       	st	X+, r0
   1e0f0:	a2 39       	cpi	r26, 0x92	; 146
   1e0f2:	b1 07       	cpc	r27, r17
   1e0f4:	d9 f7       	brne	.-10     	; 0x1e0ec <__do_copy_data+0x10>

0001e0f6 <__do_clear_bss>:
   1e0f6:	11 e0       	ldi	r17, 0x01	; 1
   1e0f8:	a2 e9       	ldi	r26, 0x92	; 146
   1e0fa:	b1 e0       	ldi	r27, 0x01	; 1
   1e0fc:	01 c0       	rjmp	.+2      	; 0x1e100 <.do_clear_bss_start>

0001e0fe <.do_clear_bss_loop>:
   1e0fe:	1d 92       	st	X+, r1

0001e100 <.do_clear_bss_start>:
   1e100:	a0 3a       	cpi	r26, 0xA0	; 160
   1e102:	b1 07       	cpc	r27, r17
   1e104:	e1 f7       	brne	.-8      	; 0x1e0fe <.do_clear_bss_loop>
   1e106:	31 d0       	rcall	.+98     	; 0x1e16a <main>
   1e108:	dd c6       	rjmp	.+3514   	; 0x1eec4 <_exit>

0001e10a <__bad_interrupt>:
   1e10a:	7a cf       	rjmp	.-268    	; 0x1e000 <__vectors>

0001e10c <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e10c:	84 e0       	ldi	r24, 0x04	; 4
   1e10e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e112:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1e116:	85 fd       	sbrc	r24, 5
   1e118:	0e c0       	rjmp	.+28     	; 0x1e136 <FetchNextCommandByte+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e11a:	80 91 e8 00 	lds	r24, 0x00E8
   1e11e:	8b 77       	andi	r24, 0x7B	; 123
   1e120:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e124:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1e128:	82 fd       	sbrc	r24, 2
   1e12a:	f3 cf       	rjmp	.-26     	; 0x1e112 <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e12c:	8e b3       	in	r24, 0x1e	; 30
   1e12e:	81 11       	cpse	r24, r1
   1e130:	f9 cf       	rjmp	.-14     	; 0x1e124 <FetchNextCommandByte+0x18>
			  return 0;
   1e132:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1e134:	08 95       	ret
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e136:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
   1e13a:	08 95       	ret

0001e13c <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e13c:	93 e0       	ldi	r25, 0x03	; 3
   1e13e:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e142:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1e146:	95 ff       	sbrs	r25, 5
   1e148:	03 c0       	rjmp	.+6      	; 0x1e150 <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e14a:	80 93 f1 00 	sts	0x00F1, r24
   1e14e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e150:	90 91 e8 00 	lds	r25, 0x00E8
   1e154:	9e 77       	andi	r25, 0x7E	; 126
   1e156:	90 93 e8 00 	sts	0x00E8, r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e15a:	90 91 e8 00 	lds	r25, 0x00E8
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1e15e:	90 fd       	sbrc	r25, 0
   1e160:	f4 cf       	rjmp	.-24     	; 0x1e14a <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e162:	9e b3       	in	r25, 0x1e	; 30
   1e164:	91 11       	cpse	r25, r1
   1e166:	f9 cf       	rjmp	.-14     	; 0x1e15a <WriteNextResponseByte+0x1e>
   1e168:	08 95       	ret

0001e16a <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
   1e16a:	cf 93       	push	r28
   1e16c:	df 93       	push	r29
   1e16e:	00 d0       	rcall	.+0      	; 0x1e170 <main+0x6>
   1e170:	00 d0       	rcall	.+0      	; 0x1e172 <main+0x8>
   1e172:	00 d0       	rcall	.+0      	; 0x1e174 <main+0xa>
   1e174:	cd b7       	in	r28, 0x3d	; 61
   1e176:	de b7       	in	r29, 0x3e	; 62

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e178:	84 b7       	in	r24, 0x34	; 52
   1e17a:	87 7f       	andi	r24, 0xF7	; 247
   1e17c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e17e:	88 e1       	ldi	r24, 0x18	; 24
   1e180:	0f b6       	in	r0, 0x3f	; 63
   1e182:	f8 94       	cli
   1e184:	80 93 60 00 	sts	0x0060, r24
   1e188:	10 92 60 00 	sts	0x0060, r1
   1e18c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e18e:	90 e0       	ldi	r25, 0x00	; 0
   1e190:	80 e8       	ldi	r24, 0x80	; 128
   1e192:	0f b6       	in	r0, 0x3f	; 63
   1e194:	f8 94       	cli
   1e196:	80 93 61 00 	sts	0x0061, r24
   1e19a:	90 93 61 00 	sts	0x0061, r25
   1e19e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e1a0:	11 e0       	ldi	r17, 0x01	; 1
   1e1a2:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
   1e1a4:	82 e0       	ldi	r24, 0x02	; 2
   1e1a6:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e1a8:	87 d4       	rcall	.+2318   	; 0x1eab8 <USB_Init>
   1e1aa:	8a b1       	in	r24, 0x0a	; 10

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1e1ac:	80 6f       	ori	r24, 0xF0	; 240
   1e1ae:	8a b9       	out	0x0a, r24	; 10
   1e1b0:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDS_ALL_LEDS;
   1e1b2:	8f 70       	andi	r24, 0x0F	; 15
   1e1b4:	8b b9       	out	0x0b, r24	; 11
   1e1b6:	10 93 6f 00 	sts	0x006F, r17
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e1ba:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e1bc:	80 93 81 00 	sts	0x0081, r24
   1e1c0:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1e1c2:	8f 70       	andi	r24, 0x0F	; 15
   1e1c4:	80 61       	ori	r24, 0x10	; 16
   1e1c6:	8b b9       	out	0x0b, r24	; 11
   1e1c8:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e1ca:	f4 e0       	ldi	r31, 0x04	; 4
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e1cc:	8f 2e       	mov	r8, r31
   1e1ce:	a3 e0       	ldi	r26, 0x03	; 3
   1e1d0:	7a 2e       	mov	r7, r26
   1e1d2:	99 24       	eor	r9, r9
   1e1d4:	93 94       	inc	r9
   1e1d6:	b5 e0       	ldi	r27, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e1d8:	6b 2e       	mov	r6, r27
   1e1da:	13 e0       	ldi	r17, 0x03	; 3
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e1dc:	21 2e       	mov	r2, r17
   1e1de:	31 2c       	mov	r3, r1
   1e1e0:	aa 24       	eor	r10, r10
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e1e2:	a3 94       	inc	r10
   1e1e4:	b1 2c       	mov	r11, r1
   1e1e6:	80 91 00 01 	lds	r24, 0x0100
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
   1e1ea:	88 23       	and	r24, r24
   1e1ec:	09 f4       	brne	.+2      	; 0x1e1f0 <main+0x86>
   1e1ee:	5d c2       	rjmp	.+1210   	; 0x1e6aa <main+0x540>
   1e1f0:	80 92 e9 00 	sts	0x00E9, r8
   1e1f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e1f8:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1e1fa:	55 c2       	rjmp	.+1194   	; 0x1e6a6 <main+0x53c>
   1e1fc:	87 df       	rcall	.-242    	; 0x1e10c <FetchNextCommandByte>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1e1fe:	98 2f       	mov	r25, r24
   1e200:	85 34       	cpi	r24, 0x45	; 69
   1e202:	19 f4       	brne	.+6      	; 0x1e20a <main+0xa0>

	if (Command == AVR109_COMMAND_ExitBootloader)
   1e204:	10 92 00 01 	sts	0x0100, r1
	{
		RunBootloader = false;
   1e208:	07 c0       	rjmp	.+14     	; 0x1e218 <main+0xae>
   1e20a:	88 e8       	ldi	r24, 0x88	; 136
   1e20c:	89 0f       	add	r24, r25

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
   1e20e:	82 30       	cpi	r24, 0x02	; 2
   1e210:	10 f0       	brcs	.+4      	; 0x1e216 <main+0xac>
   1e212:	94 35       	cpi	r25, 0x54	; 84
   1e214:	21 f4       	brne	.+8      	; 0x1e21e <main+0xb4>
   1e216:	7a df       	rcall	.-268    	; 0x1e10c <FetchNextCommandByte>
   1e218:	8d e0       	ldi	r24, 0x0D	; 13
	         (Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
   1e21a:	90 df       	rcall	.-224    	; 0x1e13c <WriteNextResponseByte>
   1e21c:	1d c2       	rjmp	.+1082   	; 0x1e658 <main+0x4ee>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1e21e:	90 35       	cpi	r25, 0x50	; 80
   1e220:	d9 f3       	breq	.-10     	; 0x1e218 <main+0xae>
   1e222:	9c 34       	cpi	r25, 0x4C	; 76
   1e224:	c9 f3       	breq	.-14     	; 0x1e218 <main+0xae>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
   1e226:	94 37       	cpi	r25, 0x74	; 116
   1e228:	11 f4       	brne	.+4      	; 0x1e22e <main+0xc4>
   1e22a:	84 e4       	ldi	r24, 0x44	; 68
   1e22c:	83 c0       	rjmp	.+262    	; 0x1e334 <main+0x1ca>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
   1e22e:	91 36       	cpi	r25, 0x61	; 97
   1e230:	11 f4       	brne	.+4      	; 0x1e236 <main+0xcc>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1e232:	89 e5       	ldi	r24, 0x59	; 89
   1e234:	f2 cf       	rjmp	.-28     	; 0x1e21a <main+0xb0>
		WriteNextResponseByte(0x00);
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
   1e236:	91 34       	cpi	r25, 0x41	; 65
   1e238:	91 f4       	brne	.+36     	; 0x1e25e <main+0xf4>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1e23a:	68 df       	rcall	.-304    	; 0x1e10c <FetchNextCommandByte>
   1e23c:	18 2f       	mov	r17, r24
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
   1e23e:	66 df       	rcall	.-308    	; 0x1e10c <FetchNextCommandByte>
   1e240:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e242:	88 0f       	add	r24, r24
   1e244:	99 1f       	adc	r25, r25
   1e246:	21 2f       	mov	r18, r17
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e248:	30 e0       	ldi	r19, 0x00	; 0
   1e24a:	32 2f       	mov	r19, r18
   1e24c:	22 27       	eor	r18, r18
   1e24e:	33 0f       	add	r19, r19
   1e250:	82 2b       	or	r24, r18
		WriteNextResponseByte('Y');
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e252:	93 2b       	or	r25, r19
   1e254:	aa 27       	eor	r26, r26
   1e256:	97 fd       	sbrc	r25, 7
   1e258:	a0 95       	com	r26
   1e25a:	ba 2f       	mov	r27, r26
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e25c:	d1 c1       	rjmp	.+930    	; 0x1e600 <main+0x496>
   1e25e:	90 37       	cpi	r25, 0x70	; 112
   1e260:	11 f4       	brne	.+4      	; 0x1e266 <main+0xfc>
   1e262:	83 e5       	ldi	r24, 0x53	; 83
   1e264:	da cf       	rjmp	.-76     	; 0x1e21a <main+0xb0>
   1e266:	93 35       	cpi	r25, 0x53	; 83
   1e268:	59 f4       	brne	.+22     	; 0x1e280 <main+0x116>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
   1e26a:	0a e8       	ldi	r16, 0x8A	; 138
   1e26c:	11 e0       	ldi	r17, 0x01	; 1
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1e26e:	f8 01       	movw	r30, r16
   1e270:	81 91       	ld	r24, Z+
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
   1e272:	8f 01       	movw	r16, r30
   1e274:	63 df       	rcall	.-314    	; 0x1e13c <WriteNextResponseByte>
   1e276:	f1 e0       	ldi	r31, 0x01	; 1
   1e278:	01 39       	cpi	r16, 0x91	; 145
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1e27a:	1f 07       	cpc	r17, r31
   1e27c:	c1 f7       	brne	.-16     	; 0x1e26e <main+0x104>
   1e27e:	ec c1       	rjmp	.+984    	; 0x1e658 <main+0x4ee>
   1e280:	96 35       	cpi	r25, 0x56	; 86
   1e282:	21 f4       	brne	.+8      	; 0x1e28c <main+0x122>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1e284:	81 e3       	ldi	r24, 0x31	; 49
   1e286:	5a df       	rcall	.-332    	; 0x1e13c <WriteNextResponseByte>
   1e288:	80 e3       	ldi	r24, 0x30	; 48
   1e28a:	c7 cf       	rjmp	.-114    	; 0x1e21a <main+0xb0>
   1e28c:	93 37       	cpi	r25, 0x73	; 115
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
   1e28e:	31 f4       	brne	.+12     	; 0x1e29c <main+0x132>
   1e290:	82 e8       	ldi	r24, 0x82	; 130
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1e292:	54 df       	rcall	.-344    	; 0x1e13c <WriteNextResponseByte>
   1e294:	87 e9       	ldi	r24, 0x97	; 151
   1e296:	52 df       	rcall	.-348    	; 0x1e13c <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1e298:	8e e1       	ldi	r24, 0x1E	; 30
   1e29a:	bf cf       	rjmp	.-130    	; 0x1e21a <main+0xb0>
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
   1e29c:	95 36       	cpi	r25, 0x65	; 101
   1e29e:	01 f5       	brne	.+64     	; 0x1e2e0 <main+0x176>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1e2a0:	80 e0       	ldi	r24, 0x00	; 0
   1e2a2:	90 e0       	ldi	r25, 0x00	; 0
   1e2a4:	dc 01       	movw	r26, r24
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1e2a6:	fc 01       	movw	r30, r24
   1e2a8:	a0 93 5b 00 	sts	0x005B, r26
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1e2ac:	70 92 57 00 	sts	0x0057, r7
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
   1e2b0:	e8 95       	spm
   1e2b2:	07 b6       	in	r0, 0x37	; 55
   1e2b4:	00 fc       	sbrc	r0, 0
   1e2b6:	fd cf       	rjmp	.-6      	; 0x1e2b2 <main+0x148>
   1e2b8:	fc 01       	movw	r30, r24
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e2ba:	a0 93 5b 00 	sts	0x005B, r26
   1e2be:	60 92 57 00 	sts	0x0057, r6
   1e2c2:	e8 95       	spm
   1e2c4:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e2c6:	00 fc       	sbrc	r0, 0
   1e2c8:	fd cf       	rjmp	.-6      	; 0x1e2c4 <main+0x15a>
   1e2ca:	9f 5f       	subi	r25, 0xFF	; 255
			boot_page_write(CurrFlashAddress);
   1e2cc:	af 4f       	sbci	r26, 0xFF	; 255
   1e2ce:	bf 4f       	sbci	r27, 0xFF	; 255
   1e2d0:	81 15       	cp	r24, r1
   1e2d2:	20 ee       	ldi	r18, 0xE0	; 224
   1e2d4:	92 07       	cpc	r25, r18
   1e2d6:	21 e0       	ldi	r18, 0x01	; 1
			boot_spm_busy_wait();
   1e2d8:	a2 07       	cpc	r26, r18
   1e2da:	b1 05       	cpc	r27, r1
   1e2dc:	21 f7       	brne	.-56     	; 0x1e2a6 <main+0x13c>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e2de:	9c cf       	rjmp	.-200    	; 0x1e218 <main+0xae>
   1e2e0:	9c 36       	cpi	r25, 0x6C	; 108
   1e2e2:	51 f4       	brne	.+20     	; 0x1e2f8 <main+0x18e>
   1e2e4:	13 df       	rcall	.-474    	; 0x1e10c <FetchNextCommandByte>
   1e2e6:	80 95       	com	r24
   1e2e8:	99 e0       	ldi	r25, 0x09	; 9
   1e2ea:	e1 e0       	ldi	r30, 0x01	; 1
   1e2ec:	f0 e0       	ldi	r31, 0x00	; 0
   1e2ee:	08 2e       	mov	r0, r24
   1e2f0:	90 93 57 00 	sts	0x0057, r25

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteLockbits)
   1e2f4:	e8 95       	spm
   1e2f6:	90 cf       	rjmp	.-224    	; 0x1e218 <main+0xae>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1e2f8:	92 37       	cpi	r25, 0x72	; 114
   1e2fa:	19 f4       	brne	.+6      	; 0x1e302 <main+0x198>
   1e2fc:	89 e0       	ldi	r24, 0x09	; 9
   1e2fe:	f5 01       	movw	r30, r10
   1e300:	10 c0       	rjmp	.+32     	; 0x1e322 <main+0x1b8>
   1e302:	96 34       	cpi	r25, 0x46	; 70
   1e304:	21 f4       	brne	.+8      	; 0x1e30e <main+0x1a4>
   1e306:	89 e0       	ldi	r24, 0x09	; 9
   1e308:	e0 e0       	ldi	r30, 0x00	; 0
   1e30a:	f0 e0       	ldi	r31, 0x00	; 0
   1e30c:	0a c0       	rjmp	.+20     	; 0x1e322 <main+0x1b8>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
   1e30e:	9e 34       	cpi	r25, 0x4E	; 78
   1e310:	19 f4       	brne	.+6      	; 0x1e318 <main+0x1ae>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e312:	89 e0       	ldi	r24, 0x09	; 9
   1e314:	f1 01       	movw	r30, r2
   1e316:	05 c0       	rjmp	.+10     	; 0x1e322 <main+0x1b8>
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
   1e318:	91 35       	cpi	r25, 0x51	; 81
   1e31a:	39 f4       	brne	.+14     	; 0x1e32a <main+0x1c0>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e31c:	89 e0       	ldi	r24, 0x09	; 9
   1e31e:	e2 e0       	ldi	r30, 0x02	; 2
   1e320:	f0 e0       	ldi	r31, 0x00	; 0
   1e322:	80 93 57 00 	sts	0x0057, r24
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
   1e326:	84 91       	lpm	r24, Z
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e328:	78 cf       	rjmp	.-272    	; 0x1e21a <main+0xb0>
   1e32a:	92 36       	cpi	r25, 0x62	; 98
   1e32c:	31 f4       	brne	.+12     	; 0x1e33a <main+0x1d0>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
   1e32e:	89 e5       	ldi	r24, 0x59	; 89
   1e330:	05 df       	rcall	.-502    	; 0x1e13c <WriteNextResponseByte>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e332:	81 e0       	ldi	r24, 0x01	; 1
   1e334:	03 df       	rcall	.-506    	; 0x1e13c <WriteNextResponseByte>
   1e336:	80 e0       	ldi	r24, 0x00	; 0
   1e338:	70 cf       	rjmp	.-288    	; 0x1e21a <main+0xb0>
   1e33a:	92 34       	cpi	r25, 0x42	; 66
   1e33c:	19 f0       	breq	.+6      	; 0x1e344 <main+0x1da>
   1e33e:	97 36       	cpi	r25, 0x67	; 103
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
   1e340:	09 f0       	breq	.+2      	; 0x1e344 <main+0x1da>
   1e342:	e2 c0       	rjmp	.+452    	; 0x1e508 <main+0x39e>
	{
		WriteNextResponseByte('Y');
   1e344:	99 83       	std	Y+1, r25	; 0x01
   1e346:	e2 de       	rcall	.-572    	; 0x1e10c <FetchNextCommandByte>
   1e348:	48 2e       	mov	r4, r24

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1e34a:	51 2c       	mov	r5, r1
   1e34c:	54 2c       	mov	r5, r4
   1e34e:	44 24       	eor	r4, r4
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1e350:	dd de       	rcall	.-582    	; 0x1e10c <FetchNextCommandByte>
   1e352:	48 2a       	or	r4, r24
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
   1e354:	db de       	rcall	.-586    	; 0x1e10c <FetchNextCommandByte>
   1e356:	18 2f       	mov	r17, r24
   1e358:	8b eb       	ldi	r24, 0xBB	; 187
   1e35a:	81 0f       	add	r24, r17
   1e35c:	99 81       	ldd	r25, Y+1	; 0x01
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e35e:	82 30       	cpi	r24, 0x02	; 2
   1e360:	10 f0       	brcs	.+4      	; 0x1e366 <main+0x1fc>
   1e362:	8f e3       	ldi	r24, 0x3F	; 63
   1e364:	5a cf       	rjmp	.-332    	; 0x1e21a <main+0xb0>
   1e366:	97 36       	cpi	r25, 0x67	; 103
   1e368:	09 f0       	breq	.+2      	; 0x1e36c <main+0x202>
   1e36a:	4a c0       	rjmp	.+148    	; 0x1e400 <main+0x296>
	BlockSize |=  FetchNextCommandByte();
   1e36c:	81 e1       	ldi	r24, 0x11	; 17
   1e36e:	80 93 57 00 	sts	0x0057, r24

	MemoryType =  FetchNextCommandByte();
   1e372:	e8 95       	spm
   1e374:	92 01       	movw	r18, r4
   1e376:	51 2c       	mov	r5, r1

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
   1e378:	21 15       	cp	r18, r1
   1e37a:	31 05       	cpc	r19, r1
   1e37c:	09 f4       	brne	.+2      	; 0x1e380 <main+0x216>
   1e37e:	6c c1       	rjmp	.+728    	; 0x1e658 <main+0x4ee>
   1e380:	c0 90 92 01 	lds	r12, 0x0192
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
   1e384:	d0 90 93 01 	lds	r13, 0x0193

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
   1e388:	e0 90 94 01 	lds	r14, 0x0194
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1e38c:	f0 90 95 01 	lds	r15, 0x0195
   1e390:	d7 01       	movw	r26, r14
   1e392:	c6 01       	movw	r24, r12
   1e394:	16 34       	cpi	r17, 0x46	; 70
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
   1e396:	d1 f4       	brne	.+52     	; 0x1e3cc <main+0x262>
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1e398:	85 29       	or	r24, r5
   1e39a:	ab bf       	out	0x3b, r26	; 59
   1e39c:	fc 01       	movw	r30, r24
   1e39e:	87 91       	elpm	r24, Z+
   1e3a0:	29 83       	std	Y+1, r18	; 0x01
   1e3a2:	3a 83       	std	Y+2, r19	; 0x02
   1e3a4:	cb de       	rcall	.-618    	; 0x1e13c <WriteNextResponseByte>
   1e3a6:	29 81       	ldd	r18, Y+1	; 0x01
   1e3a8:	3a 81       	ldd	r19, Y+2	; 0x02
   1e3aa:	55 20       	and	r5, r5
   1e3ac:	69 f0       	breq	.+26     	; 0x1e3c8 <main+0x25e>
   1e3ae:	f2 e0       	ldi	r31, 0x02	; 2
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e3b0:	cf 0e       	add	r12, r31
   1e3b2:	d1 1c       	adc	r13, r1
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e3b4:	e1 1c       	adc	r14, r1
   1e3b6:	f1 1c       	adc	r15, r1
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e3b8:	c0 92 92 01 	sts	0x0192, r12
   1e3bc:	d0 92 93 01 	sts	0x0193, r13
   1e3c0:	e0 92 94 01 	sts	0x0194, r14
   1e3c4:	f0 92 95 01 	sts	0x0195, r15
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1e3c8:	59 24       	eor	r5, r9
   1e3ca:	17 c0       	rjmp	.+46     	; 0x1e3fa <main+0x290>
   1e3cc:	b6 95       	lsr	r27
   1e3ce:	a7 95       	ror	r26
				  CurrAddress += 2;
   1e3d0:	97 95       	ror	r25
   1e3d2:	87 95       	ror	r24
   1e3d4:	29 83       	std	Y+1, r18	; 0x01
   1e3d6:	3a 83       	std	Y+2, r19	; 0x02
   1e3d8:	5f d5       	rcall	.+2750   	; 0x1ee98 <__eerd_byte_usb1287>
   1e3da:	b0 de       	rcall	.-672    	; 0x1e13c <WriteNextResponseByte>
   1e3dc:	82 e0       	ldi	r24, 0x02	; 2
   1e3de:	c8 0e       	add	r12, r24
   1e3e0:	d1 1c       	adc	r13, r1
   1e3e2:	e1 1c       	adc	r14, r1
   1e3e4:	f1 1c       	adc	r15, r1
   1e3e6:	c0 92 92 01 	sts	0x0192, r12

				HighByte = !HighByte;
   1e3ea:	d0 92 93 01 	sts	0x0193, r13
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1e3ee:	e0 92 94 01 	sts	0x0194, r14
   1e3f2:	f0 92 95 01 	sts	0x0195, r15
   1e3f6:	3a 81       	ldd	r19, Y+2	; 0x02
   1e3f8:	29 81       	ldd	r18, Y+1	; 0x01
   1e3fa:	21 50       	subi	r18, 0x01	; 1
   1e3fc:	31 09       	sbc	r19, r1
   1e3fe:	bc cf       	rjmp	.-136    	; 0x1e378 <main+0x20e>
   1e400:	c0 90 92 01 	lds	r12, 0x0192

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e404:	d0 90 93 01 	lds	r13, 0x0193
   1e408:	e0 90 94 01 	lds	r14, 0x0194
   1e40c:	f0 90 95 01 	lds	r15, 0x0195
   1e410:	16 34       	cpi	r17, 0x46	; 70
   1e412:	29 f0       	breq	.+10     	; 0x1e41e <main+0x2b4>
   1e414:	5e 82       	std	Y+6, r5	; 0x06
   1e416:	4d 82       	std	Y+5, r4	; 0x05
   1e418:	41 2c       	mov	r4, r1
   1e41a:	51 2c       	mov	r5, r1
   1e41c:	3d c0       	rjmp	.+122    	; 0x1e498 <main+0x32e>
   1e41e:	f6 01       	movw	r30, r12
   1e420:	e0 92 5b 00 	sts	0x005B, r14
   1e424:	70 92 57 00 	sts	0x0057, r7
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1e428:	e8 95       	spm
   1e42a:	07 b6       	in	r0, 0x37	; 55
   1e42c:	00 fc       	sbrc	r0, 0
   1e42e:	fd cf       	rjmp	.-6      	; 0x1e42a <main+0x2c0>
   1e430:	f1 cf       	rjmp	.-30     	; 0x1e414 <main+0x2aa>
   1e432:	16 34       	cpi	r17, 0x46	; 70
   1e434:	09 f0       	breq	.+2      	; 0x1e438 <main+0x2ce>

		if (MemoryType == MEMORY_TYPE_FLASH)
   1e436:	38 c0       	rjmp	.+112    	; 0x1e4a8 <main+0x33e>
   1e438:	55 20       	and	r5, r5
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
   1e43a:	99 f1       	breq	.+102    	; 0x1e4a2 <main+0x338>
   1e43c:	40 91 92 01 	lds	r20, 0x0192
   1e440:	50 91 93 01 	lds	r21, 0x0193
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			boot_page_erase(PageStartAddress);
   1e444:	60 91 94 01 	lds	r22, 0x0194
   1e448:	70 91 95 01 	lds	r23, 0x0195
   1e44c:	49 83       	std	Y+1, r20	; 0x01
   1e44e:	5a 83       	std	Y+2, r21	; 0x02
			boot_spm_busy_wait();
   1e450:	6b 83       	std	Y+3, r22	; 0x03
   1e452:	7c 83       	std	Y+4, r23	; 0x04
   1e454:	5b de       	rcall	.-842    	; 0x1e10c <FetchNextCommandByte>
   1e456:	24 2d       	mov	r18, r4
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e458:	30 e0       	ldi	r19, 0x00	; 0
   1e45a:	38 2b       	or	r19, r24
   1e45c:	49 81       	ldd	r20, Y+1	; 0x01
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1e45e:	5a 81       	ldd	r21, Y+2	; 0x02
   1e460:	6b 81       	ldd	r22, Y+3	; 0x03
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1e462:	7c 81       	ldd	r23, Y+4	; 0x04
   1e464:	09 01       	movw	r0, r18
   1e466:	fa 01       	movw	r30, r20
   1e468:	60 93 5b 00 	sts	0x005B, r22
   1e46c:	90 92 57 00 	sts	0x0057, r9
   1e470:	e8 95       	spm
   1e472:	11 24       	eor	r1, r1
   1e474:	4e 5f       	subi	r20, 0xFE	; 254
   1e476:	5f 4f       	sbci	r21, 0xFF	; 255
   1e478:	6f 4f       	sbci	r22, 0xFF	; 255
   1e47a:	7f 4f       	sbci	r23, 0xFF	; 255
   1e47c:	40 93 92 01 	sts	0x0192, r20
   1e480:	50 93 93 01 	sts	0x0193, r21
   1e484:	60 93 94 01 	sts	0x0194, r22
   1e488:	70 93 95 01 	sts	0x0195, r23
   1e48c:	59 24       	eor	r5, r9
   1e48e:	ed 81       	ldd	r30, Y+5	; 0x05
   1e490:	fe 81       	ldd	r31, Y+6	; 0x06
   1e492:	31 97       	sbiw	r30, 0x01	; 1
   1e494:	fe 83       	std	Y+6, r31	; 0x06
   1e496:	ed 83       	std	Y+5, r30	; 0x05
   1e498:	8d 81       	ldd	r24, Y+5	; 0x05
   1e49a:	9e 81       	ldd	r25, Y+6	; 0x06

					/* Increment the address counter after use */
					CurrAddress += 2;
   1e49c:	89 2b       	or	r24, r25
   1e49e:	49 f6       	brne	.-110    	; 0x1e432 <main+0x2c8>
   1e4a0:	26 c0       	rjmp	.+76     	; 0x1e4ee <main+0x384>
   1e4a2:	34 de       	rcall	.-920    	; 0x1e10c <FetchNextCommandByte>
   1e4a4:	48 2e       	mov	r4, r24
   1e4a6:	f2 cf       	rjmp	.-28     	; 0x1e48c <main+0x322>
   1e4a8:	31 de       	rcall	.-926    	; 0x1e10c <FetchNextCommandByte>
   1e4aa:	68 2f       	mov	r22, r24
   1e4ac:	80 91 92 01 	lds	r24, 0x0192
   1e4b0:	90 91 93 01 	lds	r25, 0x0193
				else
				{
					LowByte = FetchNextCommandByte();
				}

				HighByte = !HighByte;
   1e4b4:	a0 91 94 01 	lds	r26, 0x0194
   1e4b8:	b0 91 95 01 	lds	r27, 0x0195
   1e4bc:	b6 95       	lsr	r27
   1e4be:	a7 95       	ror	r26
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1e4c0:	97 95       	ror	r25
   1e4c2:	87 95       	ror	r24
   1e4c4:	f1 d4       	rcall	.+2530   	; 0x1eea8 <__eewr_byte_usb1287>
   1e4c6:	80 91 92 01 	lds	r24, 0x0192
					/* Increment the address counter after use */
					CurrAddress += 2;
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1e4ca:	90 91 93 01 	lds	r25, 0x0193
   1e4ce:	a0 91 94 01 	lds	r26, 0x0194
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e4d2:	b0 91 95 01 	lds	r27, 0x0195
   1e4d6:	02 96       	adiw	r24, 0x02	; 2
   1e4d8:	a1 1d       	adc	r26, r1
   1e4da:	b1 1d       	adc	r27, r1
   1e4dc:	80 93 92 01 	sts	0x0192, r24
   1e4e0:	90 93 93 01 	sts	0x0193, r25
   1e4e4:	a0 93 94 01 	sts	0x0194, r26
   1e4e8:	b0 93 95 01 	sts	0x0195, r27
   1e4ec:	d0 cf       	rjmp	.-96     	; 0x1e48e <main+0x324>
   1e4ee:	16 34       	cpi	r17, 0x46	; 70
   1e4f0:	09 f0       	breq	.+2      	; 0x1e4f4 <main+0x38a>
   1e4f2:	92 ce       	rjmp	.-732    	; 0x1e218 <main+0xae>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e4f4:	f6 01       	movw	r30, r12
   1e4f6:	e0 92 5b 00 	sts	0x005B, r14
   1e4fa:	60 92 57 00 	sts	0x0057, r6
   1e4fe:	e8 95       	spm
   1e500:	07 b6       	in	r0, 0x37	; 55
   1e502:	00 fc       	sbrc	r0, 0
   1e504:	fd cf       	rjmp	.-6      	; 0x1e500 <main+0x396>
   1e506:	88 ce       	rjmp	.-752    	; 0x1e218 <main+0xae>
   1e508:	93 34       	cpi	r25, 0x43	; 67
   1e50a:	99 f4       	brne	.+38     	; 0x1e532 <main+0x3c8>
   1e50c:	c0 90 92 01 	lds	r12, 0x0192
   1e510:	d0 90 93 01 	lds	r13, 0x0193
   1e514:	e0 90 94 01 	lds	r14, 0x0194
   1e518:	f0 90 95 01 	lds	r15, 0x0195
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
   1e51c:	f7 dd       	rcall	.-1042   	; 0x1e10c <FetchNextCommandByte>
   1e51e:	90 e0       	ldi	r25, 0x00	; 0
   1e520:	0c 01       	movw	r0, r24
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e522:	f6 01       	movw	r30, r12
   1e524:	e0 92 5b 00 	sts	0x005B, r14
   1e528:	90 92 57 00 	sts	0x0057, r9
   1e52c:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1e52e:	11 24       	eor	r1, r1
   1e530:	73 ce       	rjmp	.-794    	; 0x1e218 <main+0xae>
   1e532:	93 36       	cpi	r25, 0x63	; 99
   1e534:	19 f5       	brne	.+70     	; 0x1e57c <main+0x412>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
   1e536:	c0 90 92 01 	lds	r12, 0x0192
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1e53a:	d0 90 93 01 	lds	r13, 0x0193
   1e53e:	e0 90 94 01 	lds	r14, 0x0194
   1e542:	f0 90 95 01 	lds	r15, 0x0195
   1e546:	e2 dd       	rcall	.-1084   	; 0x1e10c <FetchNextCommandByte>
   1e548:	b7 01       	movw	r22, r14
   1e54a:	a6 01       	movw	r20, r12
   1e54c:	41 60       	ori	r20, 0x01	; 1
   1e54e:	90 e0       	ldi	r25, 0x00	; 0
   1e550:	0c 01       	movw	r0, r24
   1e552:	fa 01       	movw	r30, r20
   1e554:	60 93 5b 00 	sts	0x005B, r22
   1e558:	90 92 57 00 	sts	0x0057, r9
   1e55c:	e8 95       	spm
   1e55e:	11 24       	eor	r1, r1
   1e560:	92 e0       	ldi	r25, 0x02	; 2

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
   1e562:	c9 0e       	add	r12, r25
   1e564:	d1 1c       	adc	r13, r1
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1e566:	e1 1c       	adc	r14, r1
   1e568:	f1 1c       	adc	r15, r1
   1e56a:	c0 92 92 01 	sts	0x0192, r12
   1e56e:	d0 92 93 01 	sts	0x0193, r13
   1e572:	e0 92 94 01 	sts	0x0194, r14
   1e576:	f0 92 95 01 	sts	0x0195, r15
   1e57a:	4e ce       	rjmp	.-868    	; 0x1e218 <main+0xae>
   1e57c:	9d 36       	cpi	r25, 0x6D	; 109
   1e57e:	91 f4       	brne	.+36     	; 0x1e5a4 <main+0x43a>
   1e580:	80 91 92 01 	lds	r24, 0x0192
   1e584:	90 91 93 01 	lds	r25, 0x0193
   1e588:	a0 91 94 01 	lds	r26, 0x0194
   1e58c:	b0 91 95 01 	lds	r27, 0x0195
   1e590:	fc 01       	movw	r30, r24

		/* Increment the address */
		CurrAddress += 2;
   1e592:	a0 93 5b 00 	sts	0x005B, r26
   1e596:	60 92 57 00 	sts	0x0057, r6
   1e59a:	e8 95       	spm
   1e59c:	07 b6       	in	r0, 0x37	; 55
   1e59e:	00 fc       	sbrc	r0, 0
   1e5a0:	fd cf       	rjmp	.-6      	; 0x1e59c <main+0x432>
   1e5a2:	3a ce       	rjmp	.-908    	; 0x1e218 <main+0xae>
   1e5a4:	92 35       	cpi	r25, 0x52	; 82
   1e5a6:	81 f4       	brne	.+32     	; 0x1e5c8 <main+0x45e>
   1e5a8:	80 91 92 01 	lds	r24, 0x0192
   1e5ac:	90 91 93 01 	lds	r25, 0x0193

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_WriteFlashPage)
   1e5b0:	a0 91 94 01 	lds	r26, 0x0194
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1e5b4:	b0 91 95 01 	lds	r27, 0x0195
   1e5b8:	ab bf       	out	0x3b, r26	; 59
   1e5ba:	fc 01       	movw	r30, r24
   1e5bc:	07 91       	elpm	r16, Z+
   1e5be:	16 91       	elpm	r17, Z
   1e5c0:	81 2f       	mov	r24, r17
   1e5c2:	bc dd       	rcall	.-1160   	; 0x1e13c <WriteNextResponseByte>
   1e5c4:	80 2f       	mov	r24, r16
   1e5c6:	29 ce       	rjmp	.-942    	; 0x1e21a <main+0xb0>
   1e5c8:	94 34       	cpi	r25, 0x44	; 68
   1e5ca:	19 f5       	brne	.+70     	; 0x1e612 <main+0x4a8>
   1e5cc:	9f dd       	rcall	.-1218   	; 0x1e10c <FetchNextCommandByte>

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1e5ce:	68 2f       	mov	r22, r24
   1e5d0:	80 91 92 01 	lds	r24, 0x0192
   1e5d4:	90 91 93 01 	lds	r25, 0x0193

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadFLASHWord)
   1e5d8:	a0 91 94 01 	lds	r26, 0x0194
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1e5dc:	b0 91 95 01 	lds	r27, 0x0195
   1e5e0:	b6 95       	lsr	r27
   1e5e2:	a7 95       	ror	r26
   1e5e4:	97 95       	ror	r25
   1e5e6:	87 95       	ror	r24
   1e5e8:	5f d4       	rcall	.+2238   	; 0x1eea8 <__eewr_byte_usb1287>
   1e5ea:	80 91 92 01 	lds	r24, 0x0192
   1e5ee:	90 91 93 01 	lds	r25, 0x0193
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1e5f2:	a0 91 94 01 	lds	r26, 0x0194
   1e5f6:	b0 91 95 01 	lds	r27, 0x0195
		WriteNextResponseByte(ProgramWord & 0xFF);
   1e5fa:	02 96       	adiw	r24, 0x02	; 2
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteEEPROM)
   1e5fc:	a1 1d       	adc	r26, r1
   1e5fe:	b1 1d       	adc	r27, r1
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e600:	80 93 92 01 	sts	0x0192, r24
   1e604:	90 93 93 01 	sts	0x0193, r25
   1e608:	a0 93 94 01 	sts	0x0194, r26
   1e60c:	b0 93 95 01 	sts	0x0195, r27
   1e610:	03 ce       	rjmp	.-1018   	; 0x1e218 <main+0xae>
   1e612:	94 36       	cpi	r25, 0x64	; 100
   1e614:	f1 f4       	brne	.+60     	; 0x1e652 <main+0x4e8>
   1e616:	c0 90 92 01 	lds	r12, 0x0192
   1e61a:	d0 90 93 01 	lds	r13, 0x0193
   1e61e:	e0 90 94 01 	lds	r14, 0x0194

		/* Increment the address after use */
		CurrAddress += 2;
   1e622:	f0 90 95 01 	lds	r15, 0x0195
   1e626:	d7 01       	movw	r26, r14
   1e628:	c6 01       	movw	r24, r12
   1e62a:	b6 95       	lsr	r27
   1e62c:	a7 95       	ror	r26
   1e62e:	97 95       	ror	r25
   1e630:	87 95       	ror	r24
   1e632:	32 d4       	rcall	.+2148   	; 0x1ee98 <__eerd_byte_usb1287>
   1e634:	83 dd       	rcall	.-1274   	; 0x1e13c <WriteNextResponseByte>
   1e636:	e2 e0       	ldi	r30, 0x02	; 2
   1e638:	ce 0e       	add	r12, r30
   1e63a:	d1 1c       	adc	r13, r1
   1e63c:	e1 1c       	adc	r14, r1
   1e63e:	f1 1c       	adc	r15, r1
   1e640:	c0 92 92 01 	sts	0x0192, r12
   1e644:	d0 92 93 01 	sts	0x0193, r13
   1e648:	e0 92 94 01 	sts	0x0194, r14

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadEEPROM)
   1e64c:	f0 92 95 01 	sts	0x0195, r15
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1e650:	03 c0       	rjmp	.+6      	; 0x1e658 <main+0x4ee>
   1e652:	9b 31       	cpi	r25, 0x1B	; 27
   1e654:	09 f0       	breq	.+2      	; 0x1e658 <main+0x4ee>
   1e656:	85 ce       	rjmp	.-758    	; 0x1e362 <main+0x1f8>
   1e658:	70 92 e9 00 	sts	0x00E9, r7
   1e65c:	90 91 e8 00 	lds	r25, 0x00E8
   1e660:	80 91 e8 00 	lds	r24, 0x00E8
   1e664:	8e 77       	andi	r24, 0x7E	; 126
   1e666:	80 93 e8 00 	sts	0x00E8, r24
   1e66a:	95 fd       	sbrc	r25, 5
   1e66c:	11 c0       	rjmp	.+34     	; 0x1e690 <main+0x526>
   1e66e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Increment the address after use */
		CurrAddress += 2;
   1e672:	80 fd       	sbrc	r24, 0
   1e674:	04 c0       	rjmp	.+8      	; 0x1e67e <main+0x514>
   1e676:	8e b3       	in	r24, 0x1e	; 30
   1e678:	81 11       	cpse	r24, r1
   1e67a:	f9 cf       	rjmp	.-14     	; 0x1e66e <main+0x504>
   1e67c:	14 c0       	rjmp	.+40     	; 0x1e6a6 <main+0x53c>
   1e67e:	80 91 e8 00 	lds	r24, 0x00E8
   1e682:	8e 77       	andi	r24, 0x7E	; 126
   1e684:	80 93 e8 00 	sts	0x00E8, r24
   1e688:	03 c0       	rjmp	.+6      	; 0x1e690 <main+0x526>
   1e68a:	8e b3       	in	r24, 0x1e	; 30
   1e68c:	88 23       	and	r24, r24
	}
	#endif
	else if (Command != AVR109_COMMAND_Sync)
   1e68e:	59 f0       	breq	.+22     	; 0x1e6a6 <main+0x53c>
   1e690:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e694:	80 ff       	sbrs	r24, 0
   1e696:	f9 cf       	rjmp	.-14     	; 0x1e68a <main+0x520>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e698:	80 92 e9 00 	sts	0x00E9, r8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e69c:	80 91 e8 00 	lds	r24, 0x00E8
   1e6a0:	8b 77       	andi	r24, 0x7B	; 123
   1e6a2:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1e6a6:	dd d3       	rcall	.+1978   	; 0x1ee62 <USB_USBTask>
   1e6a8:	9e cd       	rjmp	.-1220   	; 0x1e1e6 <main+0x7c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6aa:	80 91 e0 00 	lds	r24, 0x00E0
	{
		while (!(Endpoint_IsINReady()))
   1e6ae:	81 60       	ori	r24, 0x01	; 1
   1e6b0:	80 93 e0 00 	sts	0x00E0, r24
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6b4:	82 e4       	ldi	r24, 0x42	; 66
   1e6b6:	9c ed       	ldi	r25, 0xDC	; 220
   1e6b8:	90 93 a1 01 	sts	0x01A1, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e6bc:	80 93 a0 01 	sts	0x01A0, r24
   1e6c0:	2c e0       	ldi	r18, 0x0C	; 12
   1e6c2:	88 e1       	ldi	r24, 0x18	; 24
   1e6c4:	90 e0       	ldi	r25, 0x00	; 0
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6c6:	0f b6       	in	r0, 0x3f	; 63
   1e6c8:	f8 94       	cli
   1e6ca:	a8 95       	wdr
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6cc:	80 93 60 00 	sts	0x0060, r24

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1e6d0:	0f be       	out	0x3f, r0	; 63
   1e6d2:	20 93 60 00 	sts	0x0060, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e6d6:	ff cf       	rjmp	.-2      	; 0x1e6d6 <main+0x56c>

0001e6d8 <__vector_20>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e6d8:	1f 92       	push	r1
   1e6da:	0f 92       	push	r0
   1e6dc:	0f b6       	in	r0, 0x3f	; 63
   1e6de:	0f 92       	push	r0
   1e6e0:	11 24       	eor	r1, r1
	GlobalInterruptEnable();

	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
   1e6e2:	8f 93       	push	r24
   1e6e4:	80 e3       	ldi	r24, 0x30	; 48
   1e6e6:	89 b9       	out	0x09, r24	; 9
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e6e8:	8f 91       	pop	r24
   1e6ea:	0f 90       	pop	r0
   1e6ec:	0f be       	out	0x3f, r0	; 63
   1e6ee:	0f 90       	pop	r0
   1e6f0:	1f 90       	pop	r1

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e6f2:	18 95       	reti

0001e6f4 <EVENT_USB_Device_ConfigurationChanged>:
   1e6f4:	42 e0       	ldi	r20, 0x02	; 2
   1e6f6:	61 ec       	ldi	r22, 0xC1	; 193
   1e6f8:	82 e0       	ldi	r24, 0x02	; 2
   1e6fa:	6b d1       	rcall	.+726    	; 0x1e9d2 <Endpoint_ConfigureEndpoint_Prv>
   1e6fc:	42 e1       	ldi	r20, 0x12	; 18

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e6fe:	61 e8       	ldi	r22, 0x81	; 129
   1e700:	83 e0       	ldi	r24, 0x03	; 3
   1e702:	67 d1       	rcall	.+718    	; 0x1e9d2 <Endpoint_ConfigureEndpoint_Prv>
   1e704:	42 e1       	ldi	r20, 0x12	; 18
   1e706:	60 e8       	ldi	r22, 0x80	; 128
   1e708:	84 e0       	ldi	r24, 0x04	; 4
   1e70a:	63 c1       	rjmp	.+710    	; 0x1e9d2 <Endpoint_ConfigureEndpoint_Prv>

0001e70c <EVENT_USB_Device_ControlRequest>:
   1e70c:	80 91 98 01 	lds	r24, 0x0198
   1e710:	8f 77       	andi	r24, 0x7F	; 127
   1e712:	81 32       	cpi	r24, 0x21	; 33
   1e714:	d9 f5       	brne	.+118    	; 0x1e78c <EVENT_USB_Device_ControlRequest+0x80>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
   1e716:	80 e3       	ldi	r24, 0x30	; 48
   1e718:	89 b9       	out	0x09, r24	; 9

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e71a:	80 91 99 01 	lds	r24, 0x0199
   1e71e:	81 32       	cpi	r24, 0x21	; 33
   1e720:	29 f0       	breq	.+10     	; 0x1e72c <EVENT_USB_Device_ControlRequest+0x20>
   1e722:	82 32       	cpi	r24, 0x22	; 34
   1e724:	49 f1       	breq	.+82     	; 0x1e778 <EVENT_USB_Device_ControlRequest+0x6c>
   1e726:	80 32       	cpi	r24, 0x20	; 32
   1e728:	89 f5       	brne	.+98     	; 0x1e78c <EVENT_USB_Device_ControlRequest+0x80>
   1e72a:	12 c0       	rjmp	.+36     	; 0x1e750 <EVENT_USB_Device_ControlRequest+0x44>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e72c:	80 91 98 01 	lds	r24, 0x0198
   1e730:	81 3a       	cpi	r24, 0xA1	; 161
   1e732:	61 f5       	brne	.+88     	; 0x1e78c <EVENT_USB_Device_ControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e734:	80 91 e8 00 	lds	r24, 0x00E8
   1e738:	87 7f       	andi	r24, 0xF7	; 247
   1e73a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e73e:	67 e0       	ldi	r22, 0x07	; 7
   1e740:	70 e0       	ldi	r23, 0x00	; 0
   1e742:	81 e0       	ldi	r24, 0x01	; 1
   1e744:	91 e0       	ldi	r25, 0x01	; 1
   1e746:	ae d0       	rcall	.+348    	; 0x1e8a4 <Endpoint_Write_Control_Stream_LE>
   1e748:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e74c:	8b 77       	andi	r24, 0x7B	; 123
   1e74e:	11 c0       	rjmp	.+34     	; 0x1e772 <EVENT_USB_Device_ControlRequest+0x66>
   1e750:	80 91 98 01 	lds	r24, 0x0198
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e754:	81 32       	cpi	r24, 0x21	; 33
   1e756:	d1 f4       	brne	.+52     	; 0x1e78c <EVENT_USB_Device_ControlRequest+0x80>
   1e758:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e75c:	87 7f       	andi	r24, 0xF7	; 247
   1e75e:	80 93 e8 00 	sts	0x00E8, r24
   1e762:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e764:	70 e0       	ldi	r23, 0x00	; 0
   1e766:	81 e0       	ldi	r24, 0x01	; 1
   1e768:	91 e0       	ldi	r25, 0x01	; 1
   1e76a:	f7 d0       	rcall	.+494    	; 0x1e95a <Endpoint_Read_Control_Stream_LE>
   1e76c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e770:	8e 77       	andi	r24, 0x7E	; 126
   1e772:	80 93 e8 00 	sts	0x00E8, r24
   1e776:	08 95       	ret
   1e778:	80 91 98 01 	lds	r24, 0x0198
				Endpoint_ClearIN();
			}

			break;
        case CDC_REQ_SetControlLineState:
	        if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e77c:	81 32       	cpi	r24, 0x21	; 33
   1e77e:	31 f4       	brne	.+12     	; 0x1e78c <EVENT_USB_Device_ControlRequest+0x80>
   1e780:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e784:	87 7f       	andi	r24, 0xF7	; 247
   1e786:	80 93 e8 00 	sts	0x00E8, r24
   1e78a:	37 c1       	rjmp	.+622    	; 0x1e9fa <Endpoint_ClearStatusStage>
   1e78c:	08 95       	ret

0001e78e <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
   1e78e:	29 2f       	mov	r18, r25
   1e790:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e792:	22 30       	cpi	r18, 0x02	; 2
   1e794:	31 05       	cpc	r19, r1
   1e796:	39 f0       	breq	.+14     	; 0x1e7a6 <CALLBACK_USB_GetDescriptor+0x18>
   1e798:	23 30       	cpi	r18, 0x03	; 3
   1e79a:	31 05       	cpc	r19, r1
   1e79c:	49 f0       	breq	.+18     	; 0x1e7b0 <CALLBACK_USB_GetDescriptor+0x22>
   1e79e:	21 30       	cpi	r18, 0x01	; 1
   1e7a0:	31 05       	cpc	r19, r1
   1e7a2:	61 f4       	brne	.+24     	; 0x1e7bc <CALLBACK_USB_GetDescriptor+0x2e>
   1e7a4:	10 c0       	rjmp	.+32     	; 0x1e7c6 <CALLBACK_USB_GetDescriptor+0x38>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1e7a6:	8e e3       	ldi	r24, 0x3E	; 62
   1e7a8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1e7aa:	2a e3       	ldi	r18, 0x3A	; 58
   1e7ac:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1e7ae:	1e c0       	rjmp	.+60     	; 0x1e7ec <CALLBACK_USB_GetDescriptor+0x5e>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
   1e7b0:	88 23       	and	r24, r24
   1e7b2:	71 f0       	breq	.+28     	; 0x1e7d0 <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
   1e7b4:	81 30       	cpi	r24, 0x01	; 1
   1e7b6:	89 f0       	breq	.+34     	; 0x1e7da <CALLBACK_USB_GetDescriptor+0x4c>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
   1e7b8:	82 30       	cpi	r24, 0x02	; 2
   1e7ba:	a1 f0       	breq	.+40     	; 0x1e7e4 <CALLBACK_USB_GetDescriptor+0x56>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e7bc:	80 e0       	ldi	r24, 0x00	; 0
   1e7be:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1e7c0:	20 e0       	ldi	r18, 0x00	; 0
   1e7c2:	30 e0       	ldi	r19, 0x00	; 0
   1e7c4:	13 c0       	rjmp	.+38     	; 0x1e7ec <CALLBACK_USB_GetDescriptor+0x5e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1e7c6:	82 e1       	ldi	r24, 0x12	; 18
   1e7c8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1e7ca:	28 e7       	ldi	r18, 0x78	; 120
   1e7cc:	31 e0       	ldi	r19, 0x01	; 1
   1e7ce:	0e c0       	rjmp	.+28     	; 0x1e7ec <CALLBACK_USB_GetDescriptor+0x5e>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1e7d0:	84 e0       	ldi	r24, 0x04	; 4
   1e7d2:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
   1e7d4:	26 e3       	ldi	r18, 0x36	; 54
   1e7d6:	31 e0       	ldi	r19, 0x01	; 1
   1e7d8:	09 c0       	rjmp	.+18     	; 0x1e7ec <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
   1e7da:	88 e1       	ldi	r24, 0x18	; 24
   1e7dc:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
   1e7de:	2c e1       	ldi	r18, 0x1C	; 28
   1e7e0:	31 e0       	ldi	r19, 0x01	; 1
   1e7e2:	04 c0       	rjmp	.+8      	; 0x1e7ec <CALLBACK_USB_GetDescriptor+0x5e>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1e7e4:	82 e1       	ldi	r24, 0x12	; 18
   1e7e6:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
   1e7e8:	28 e0       	ldi	r18, 0x08	; 8
   1e7ea:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1e7ec:	fa 01       	movw	r30, r20
   1e7ee:	31 83       	std	Z+1, r19	; 0x01
   1e7f0:	20 83       	st	Z, r18
	return Size;
}
   1e7f2:	08 95       	ret

0001e7f4 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e7f4:	07 b6       	in	r0, 0x37	; 55
   1e7f6:	00 fc       	sbrc	r0, 0
   1e7f8:	fd cf       	rjmp	.-6      	; 0x1e7f4 <BootloaderAPI_ErasePage>
   1e7fa:	f9 99       	sbic	0x1f, 1	; 31
   1e7fc:	fe cf       	rjmp	.-4      	; 0x1e7fa <BootloaderAPI_ErasePage+0x6>
   1e7fe:	23 e0       	ldi	r18, 0x03	; 3
   1e800:	fb 01       	movw	r30, r22
   1e802:	80 93 5b 00 	sts	0x005B, r24
   1e806:	20 93 57 00 	sts	0x0057, r18
   1e80a:	e8 95       	spm
	boot_spm_busy_wait();
   1e80c:	07 b6       	in	r0, 0x37	; 55
   1e80e:	00 fc       	sbrc	r0, 0
   1e810:	fd cf       	rjmp	.-6      	; 0x1e80c <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e812:	81 e1       	ldi	r24, 0x11	; 17
   1e814:	80 93 57 00 	sts	0x0057, r24
   1e818:	e8 95       	spm
   1e81a:	08 95       	ret

0001e81c <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e81c:	07 b6       	in	r0, 0x37	; 55
   1e81e:	00 fc       	sbrc	r0, 0
   1e820:	fd cf       	rjmp	.-6      	; 0x1e81c <BootloaderAPI_WritePage>
   1e822:	f9 99       	sbic	0x1f, 1	; 31
   1e824:	fe cf       	rjmp	.-4      	; 0x1e822 <BootloaderAPI_WritePage+0x6>
   1e826:	25 e0       	ldi	r18, 0x05	; 5
   1e828:	fb 01       	movw	r30, r22
   1e82a:	80 93 5b 00 	sts	0x005B, r24
   1e82e:	20 93 57 00 	sts	0x0057, r18
   1e832:	e8 95       	spm
	boot_spm_busy_wait();
   1e834:	07 b6       	in	r0, 0x37	; 55
   1e836:	00 fc       	sbrc	r0, 0
   1e838:	fd cf       	rjmp	.-6      	; 0x1e834 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e83a:	81 e1       	ldi	r24, 0x11	; 17
   1e83c:	80 93 57 00 	sts	0x0057, r24
   1e840:	e8 95       	spm
   1e842:	08 95       	ret

0001e844 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e844:	07 b6       	in	r0, 0x37	; 55
   1e846:	00 fc       	sbrc	r0, 0
   1e848:	fd cf       	rjmp	.-6      	; 0x1e844 <BootloaderAPI_FillWord>
   1e84a:	f9 99       	sbic	0x1f, 1	; 31
   1e84c:	fe cf       	rjmp	.-4      	; 0x1e84a <BootloaderAPI_FillWord+0x6>
   1e84e:	21 e0       	ldi	r18, 0x01	; 1
   1e850:	0a 01       	movw	r0, r20
   1e852:	fb 01       	movw	r30, r22
   1e854:	80 93 5b 00 	sts	0x005B, r24
   1e858:	20 93 57 00 	sts	0x0057, r18
   1e85c:	e8 95       	spm
   1e85e:	11 24       	eor	r1, r1
   1e860:	08 95       	ret

0001e862 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e862:	21 e2       	ldi	r18, 0x21	; 33
   1e864:	fc 01       	movw	r30, r24
   1e866:	20 93 57 00 	sts	0x0057, r18
   1e86a:	84 91       	lpm	r24, Z
}
   1e86c:	08 95       	ret

0001e86e <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e86e:	29 e0       	ldi	r18, 0x09	; 9
   1e870:	fc 01       	movw	r30, r24
   1e872:	20 93 57 00 	sts	0x0057, r18
   1e876:	84 91       	lpm	r24, Z
}
   1e878:	08 95       	ret

0001e87a <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e87a:	e1 e0       	ldi	r30, 0x01	; 1
   1e87c:	f0 e0       	ldi	r31, 0x00	; 0
   1e87e:	89 e0       	ldi	r24, 0x09	; 9
   1e880:	80 93 57 00 	sts	0x0057, r24
   1e884:	84 91       	lpm	r24, Z
}
   1e886:	08 95       	ret

0001e888 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e888:	07 b6       	in	r0, 0x37	; 55
   1e88a:	00 fc       	sbrc	r0, 0
   1e88c:	fd cf       	rjmp	.-6      	; 0x1e888 <BootloaderAPI_WriteLock>
   1e88e:	f9 99       	sbic	0x1f, 1	; 31
   1e890:	fe cf       	rjmp	.-4      	; 0x1e88e <BootloaderAPI_WriteLock+0x6>
   1e892:	80 95       	com	r24
   1e894:	99 e0       	ldi	r25, 0x09	; 9
   1e896:	e1 e0       	ldi	r30, 0x01	; 1
   1e898:	f0 e0       	ldi	r31, 0x00	; 0
   1e89a:	08 2e       	mov	r0, r24
   1e89c:	90 93 57 00 	sts	0x0057, r25
   1e8a0:	e8 95       	spm
   1e8a2:	08 95       	ret

0001e8a4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e8a4:	20 91 9e 01 	lds	r18, 0x019E
   1e8a8:	30 91 9f 01 	lds	r19, 0x019F
   1e8ac:	26 17       	cp	r18, r22
   1e8ae:	37 07       	cpc	r19, r23
   1e8b0:	48 f0       	brcs	.+18     	; 0x1e8c4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e8b2:	61 15       	cp	r22, r1
   1e8b4:	71 05       	cpc	r23, r1
   1e8b6:	39 f4       	brne	.+14     	; 0x1e8c6 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e8b8:	20 91 e8 00 	lds	r18, 0x00E8
   1e8bc:	2e 77       	andi	r18, 0x7E	; 126
   1e8be:	20 93 e8 00 	sts	0x00E8, r18
   1e8c2:	01 c0       	rjmp	.+2      	; 0x1e8c6 <Endpoint_Write_Control_Stream_LE+0x22>
   1e8c4:	b9 01       	movw	r22, r18
   1e8c6:	fc 01       	movw	r30, r24
   1e8c8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e8ca:	61 15       	cp	r22, r1
   1e8cc:	71 05       	cpc	r23, r1
   1e8ce:	91 f1       	breq	.+100    	; 0x1e934 <Endpoint_Write_Control_Stream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e8d0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e8d2:	88 23       	and	r24, r24
   1e8d4:	e1 f1       	breq	.+120    	; 0x1e94e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e8d6:	85 30       	cpi	r24, 0x05	; 5
   1e8d8:	e1 f1       	breq	.+120    	; 0x1e952 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e8da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e8de:	83 fd       	sbrc	r24, 3
   1e8e0:	3a c0       	rjmp	.+116    	; 0x1e956 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e8e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e8e6:	82 ff       	sbrs	r24, 2
   1e8e8:	06 c0       	rjmp	.+12     	; 0x1e8f6 <Endpoint_Write_Control_Stream_LE+0x52>
   1e8ea:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e8ee:	82 ff       	sbrs	r24, 2
   1e8f0:	24 c0       	rjmp	.+72     	; 0x1e93a <Endpoint_Write_Control_Stream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e8f2:	80 e0       	ldi	r24, 0x00	; 0
   1e8f4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e8f6:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
   1e8fa:	80 ff       	sbrs	r24, 0
   1e8fc:	e6 cf       	rjmp	.-52     	; 0x1e8ca <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e8fe:	80 91 f2 00 	lds	r24, 0x00F2
   1e902:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e906:	61 15       	cp	r22, r1
   1e908:	71 05       	cpc	r23, r1
   1e90a:	51 f0       	breq	.+20     	; 0x1e920 <Endpoint_Write_Control_Stream_LE+0x7c>
   1e90c:	88 30       	cpi	r24, 0x08	; 8
   1e90e:	91 05       	cpc	r25, r1
   1e910:	38 f4       	brcc	.+14     	; 0x1e920 <Endpoint_Write_Control_Stream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e912:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e914:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e918:	61 50       	subi	r22, 0x01	; 1
   1e91a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1e91c:	01 96       	adiw	r24, 0x01	; 1
   1e91e:	f3 cf       	rjmp	.-26     	; 0x1e906 <Endpoint_Write_Control_Stream_LE+0x62>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e920:	21 e0       	ldi	r18, 0x01	; 1
   1e922:	08 97       	sbiw	r24, 0x08	; 8
   1e924:	09 f0       	breq	.+2      	; 0x1e928 <Endpoint_Write_Control_Stream_LE+0x84>
   1e926:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e928:	80 91 e8 00 	lds	r24, 0x00E8
   1e92c:	8e 77       	andi	r24, 0x7E	; 126
   1e92e:	80 93 e8 00 	sts	0x00E8, r24
   1e932:	cb cf       	rjmp	.-106    	; 0x1e8ca <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e934:	21 11       	cpse	r18, r1
   1e936:	cc cf       	rjmp	.-104    	; 0x1e8d0 <Endpoint_Write_Control_Stream_LE+0x2c>
   1e938:	d8 cf       	rjmp	.-80     	; 0x1e8ea <Endpoint_Write_Control_Stream_LE+0x46>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e93a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e93c:	88 23       	and	r24, r24
   1e93e:	39 f0       	breq	.+14     	; 0x1e94e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e940:	85 30       	cpi	r24, 0x05	; 5
   1e942:	39 f0       	breq	.+14     	; 0x1e952 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e944:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e948:	83 ff       	sbrs	r24, 3
   1e94a:	cf cf       	rjmp	.-98     	; 0x1e8ea <Endpoint_Write_Control_Stream_LE+0x46>
   1e94c:	04 c0       	rjmp	.+8      	; 0x1e956 <Endpoint_Write_Control_Stream_LE+0xb2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e94e:	82 e0       	ldi	r24, 0x02	; 2
   1e950:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e952:	83 e0       	ldi	r24, 0x03	; 3
   1e954:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e956:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e958:	08 95       	ret

0001e95a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1e95a:	61 15       	cp	r22, r1
   1e95c:	71 05       	cpc	r23, r1
   1e95e:	29 f4       	brne	.+10     	; 0x1e96a <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e960:	20 91 e8 00 	lds	r18, 0x00E8
   1e964:	2b 77       	andi	r18, 0x7B	; 123
   1e966:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
   1e96a:	61 15       	cp	r22, r1
   1e96c:	71 05       	cpc	r23, r1
   1e96e:	21 f1       	breq	.+72     	; 0x1e9b8 <Endpoint_Read_Control_Stream_LE+0x5e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e970:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e972:	22 23       	and	r18, r18
   1e974:	51 f1       	breq	.+84     	; 0x1e9ca <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e976:	25 30       	cpi	r18, 0x05	; 5
   1e978:	51 f1       	breq	.+84     	; 0x1e9ce <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e97a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e97e:	23 fd       	sbrc	r18, 3
   1e980:	20 c0       	rjmp	.+64     	; 0x1e9c2 <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e982:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1e986:	22 ff       	sbrs	r18, 2
   1e988:	f3 cf       	rjmp	.-26     	; 0x1e970 <Endpoint_Read_Control_Stream_LE+0x16>
   1e98a:	fc 01       	movw	r30, r24
   1e98c:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e98e:	20 91 f2 00 	lds	r18, 0x00F2
   1e992:	30 91 f3 00 	lds	r19, 0x00F3
		{
			while (Length && Endpoint_BytesInEndpoint())
   1e996:	23 2b       	or	r18, r19
   1e998:	19 f3       	breq	.-58     	; 0x1e960 <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e99a:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e99e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
   1e9a0:	cf 01       	movw	r24, r30
				Length--;
   1e9a2:	61 50       	subi	r22, 0x01	; 1
   1e9a4:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1e9a6:	61 15       	cp	r22, r1
   1e9a8:	71 05       	cpc	r23, r1
   1e9aa:	81 f7       	brne	.-32     	; 0x1e98c <Endpoint_Read_Control_Stream_LE+0x32>
   1e9ac:	d9 cf       	rjmp	.-78     	; 0x1e960 <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e9ae:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e9b0:	88 23       	and	r24, r24
   1e9b2:	59 f0       	breq	.+22     	; 0x1e9ca <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e9b4:	85 30       	cpi	r24, 0x05	; 5
   1e9b6:	59 f0       	breq	.+22     	; 0x1e9ce <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e9b8:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1e9bc:	80 ff       	sbrs	r24, 0
   1e9be:	f7 cf       	rjmp	.-18     	; 0x1e9ae <Endpoint_Read_Control_Stream_LE+0x54>
   1e9c0:	02 c0       	rjmp	.+4      	; 0x1e9c6 <Endpoint_Read_Control_Stream_LE+0x6c>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e9c2:	81 e0       	ldi	r24, 0x01	; 1
   1e9c4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e9c6:	80 e0       	ldi	r24, 0x00	; 0
   1e9c8:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e9ca:	82 e0       	ldi	r24, 0x02	; 2
   1e9cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e9ce:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e9d0:	08 95       	ret

0001e9d2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e9d2:	8f 70       	andi	r24, 0x0F	; 15
   1e9d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e9d8:	eb ee       	ldi	r30, 0xEB	; 235
   1e9da:	f0 e0       	ldi	r31, 0x00	; 0
   1e9dc:	80 81       	ld	r24, Z
   1e9de:	81 60       	ori	r24, 0x01	; 1
   1e9e0:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e9e2:	ed ee       	ldi	r30, 0xED	; 237
   1e9e4:	f0 e0       	ldi	r31, 0x00	; 0
   1e9e6:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1e9e8:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e9ec:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e9ee:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1e9f2:	88 1f       	adc	r24, r24
   1e9f4:	88 27       	eor	r24, r24
   1e9f6:	88 1f       	adc	r24, r24
   1e9f8:	08 95       	ret

0001e9fa <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e9fa:	80 91 98 01 	lds	r24, 0x0198
   1e9fe:	87 fd       	sbrc	r24, 7
   1ea00:	05 c0       	rjmp	.+10     	; 0x1ea0c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea02:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ea06:	80 ff       	sbrs	r24, 0
   1ea08:	0d c0       	rjmp	.+26     	; 0x1ea24 <Endpoint_ClearStatusStage+0x2a>
   1ea0a:	10 c0       	rjmp	.+32     	; 0x1ea2c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea0c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ea10:	82 fd       	sbrc	r24, 2
   1ea12:	04 c0       	rjmp	.+8      	; 0x1ea1c <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea14:	8e b3       	in	r24, 0x1e	; 30
   1ea16:	81 11       	cpse	r24, r1
   1ea18:	f9 cf       	rjmp	.-14     	; 0x1ea0c <Endpoint_ClearStatusStage+0x12>
   1ea1a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ea1c:	80 91 e8 00 	lds	r24, 0x00E8
   1ea20:	8b 77       	andi	r24, 0x7B	; 123
   1ea22:	07 c0       	rjmp	.+14     	; 0x1ea32 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea24:	8e b3       	in	r24, 0x1e	; 30
   1ea26:	81 11       	cpse	r24, r1
   1ea28:	ec cf       	rjmp	.-40     	; 0x1ea02 <Endpoint_ClearStatusStage+0x8>
   1ea2a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ea2c:	80 91 e8 00 	lds	r24, 0x00E8
   1ea30:	8e 77       	andi	r24, 0x7E	; 126
   1ea32:	80 93 e8 00 	sts	0x00E8, r24
   1ea36:	08 95       	ret

0001ea38 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1ea38:	0f 93       	push	r16
   1ea3a:	1f 93       	push	r17
   1ea3c:	cf 93       	push	r28
   1ea3e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1ea40:	49 d0       	rcall	.+146    	; 0x1ead4 <USB_INT_DisableAllInterrupts>
   1ea42:	50 d0       	rcall	.+160    	; 0x1eae4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ea44:	c8 ed       	ldi	r28, 0xD8	; 216
   1ea46:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1ea48:	88 81       	ld	r24, Y
   1ea4a:	8f 77       	andi	r24, 0x7F	; 127
   1ea4c:	88 83       	st	Y, r24
   1ea4e:	88 81       	ld	r24, Y
   1ea50:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1ea52:	88 83       	st	Y, r24
   1ea54:	88 81       	ld	r24, Y
   1ea56:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ea58:	88 83       	st	Y, r24
   1ea5a:	e7 ed       	ldi	r30, 0xD7	; 215
   1ea5c:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ea5e:	80 81       	ld	r24, Z
   1ea60:	80 68       	ori	r24, 0x80	; 128
   1ea62:	80 83       	st	Z, r24
   1ea64:	19 bc       	out	0x29, r1	; 41
   1ea66:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ea68:	10 92 96 01 	sts	0x0196, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1ea6c:	00 ee       	ldi	r16, 0xE0	; 224
   1ea6e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ea70:	f8 01       	movw	r30, r16
   1ea72:	80 81       	ld	r24, Z
   1ea74:	8b 7f       	andi	r24, 0xFB	; 251
   1ea76:	80 83       	st	Z, r24
   1ea78:	88 81       	ld	r24, Y
   1ea7a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ea7c:	88 83       	st	Y, r24
   1ea7e:	42 e0       	ldi	r20, 0x02	; 2
   1ea80:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ea82:	80 e0       	ldi	r24, 0x00	; 0
   1ea84:	a6 df       	rcall	.-180    	; 0x1e9d2 <Endpoint_ConfigureEndpoint_Prv>
   1ea86:	e1 ee       	ldi	r30, 0xE1	; 225
   1ea88:	f0 e0       	ldi	r31, 0x00	; 0
   1ea8a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ea8c:	8e 7f       	andi	r24, 0xFE	; 254
   1ea8e:	80 83       	st	Z, r24
   1ea90:	e2 ee       	ldi	r30, 0xE2	; 226
   1ea92:	f0 e0       	ldi	r31, 0x00	; 0
   1ea94:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ea96:	81 60       	ori	r24, 0x01	; 1
   1ea98:	80 83       	st	Z, r24
   1ea9a:	80 81       	ld	r24, Z
   1ea9c:	88 60       	ori	r24, 0x08	; 8
   1ea9e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1eaa0:	f8 01       	movw	r30, r16
   1eaa2:	80 81       	ld	r24, Z
   1eaa4:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1eaa6:	80 83       	st	Z, r24
   1eaa8:	88 81       	ld	r24, Y
   1eaaa:	80 61       	ori	r24, 0x10	; 16
   1eaac:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1eaae:	df 91       	pop	r29
   1eab0:	cf 91       	pop	r28
   1eab2:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1eab4:	0f 91       	pop	r16
   1eab6:	08 95       	ret

0001eab8 <USB_Init>:
   1eab8:	e8 ed       	ldi	r30, 0xD8	; 216
   1eaba:	f0 e0       	ldi	r31, 0x00	; 0
   1eabc:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eabe:	8f 7e       	andi	r24, 0xEF	; 239
   1eac0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eac2:	e7 ed       	ldi	r30, 0xD7	; 215
   1eac4:	f0 e0       	ldi	r31, 0x00	; 0
   1eac6:	80 81       	ld	r24, Z
   1eac8:	81 60       	ori	r24, 0x01	; 1
   1eaca:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eacc:	81 e0       	ldi	r24, 0x01	; 1
   1eace:	80 93 97 01 	sts	0x0197, r24

	USB_ResetInterface();
   1ead2:	b2 cf       	rjmp	.-156    	; 0x1ea38 <USB_ResetInterface>

0001ead4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1ead4:	e8 ed       	ldi	r30, 0xD8	; 216
   1ead6:	f0 e0       	ldi	r31, 0x00	; 0
   1ead8:	80 81       	ld	r24, Z
   1eada:	8c 7f       	andi	r24, 0xFC	; 252
   1eadc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1eade:	10 92 e2 00 	sts	0x00E2, r1
   1eae2:	08 95       	ret

0001eae4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1eae4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1eae8:	10 92 e1 00 	sts	0x00E1, r1
   1eaec:	08 95       	ret

0001eaee <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1eaee:	1f 92       	push	r1
   1eaf0:	0f 92       	push	r0
   1eaf2:	0f b6       	in	r0, 0x3f	; 63
   1eaf4:	0f 92       	push	r0
   1eaf6:	11 24       	eor	r1, r1
   1eaf8:	0b b6       	in	r0, 0x3b	; 59
   1eafa:	0f 92       	push	r0
   1eafc:	2f 93       	push	r18
   1eafe:	3f 93       	push	r19
   1eb00:	4f 93       	push	r20
   1eb02:	5f 93       	push	r21
   1eb04:	6f 93       	push	r22
   1eb06:	7f 93       	push	r23
   1eb08:	8f 93       	push	r24
   1eb0a:	9f 93       	push	r25
   1eb0c:	af 93       	push	r26
   1eb0e:	bf 93       	push	r27
   1eb10:	ef 93       	push	r30
   1eb12:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eb14:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eb18:	80 ff       	sbrs	r24, 0
   1eb1a:	1b c0       	rjmp	.+54     	; 0x1eb52 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eb1c:	80 91 d8 00 	lds	r24, 0x00D8
   1eb20:	80 ff       	sbrs	r24, 0
   1eb22:	17 c0       	rjmp	.+46     	; 0x1eb52 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1eb24:	80 91 da 00 	lds	r24, 0x00DA
   1eb28:	8e 7f       	andi	r24, 0xFE	; 254
   1eb2a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1eb2e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1eb32:	80 ff       	sbrs	r24, 0
   1eb34:	0b c0       	rjmp	.+22     	; 0x1eb4c <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb36:	8c e0       	ldi	r24, 0x0C	; 12
   1eb38:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb3a:	8e e0       	ldi	r24, 0x0E	; 14
   1eb3c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eb3e:	09 b4       	in	r0, 0x29	; 41
   1eb40:	00 fe       	sbrs	r0, 0
   1eb42:	fd cf       	rjmp	.-6      	; 0x1eb3e <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1eb44:	81 e0       	ldi	r24, 0x01	; 1
   1eb46:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1eb48:	8b d1       	rcall	.+790    	; 0x1ee60 <USB_Event_Stub>
   1eb4a:	03 c0       	rjmp	.+6      	; 0x1eb52 <__vector_10+0x64>
   1eb4c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb4e:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1eb50:	87 d1       	rcall	.+782    	; 0x1ee60 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1eb52:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1eb56:	80 ff       	sbrs	r24, 0
   1eb58:	17 c0       	rjmp	.+46     	; 0x1eb88 <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1eb5a:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1eb5e:	80 ff       	sbrs	r24, 0
   1eb60:	13 c0       	rjmp	.+38     	; 0x1eb88 <__vector_10+0x9a>
   1eb62:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eb66:	8e 7f       	andi	r24, 0xFE	; 254
   1eb68:	80 93 e2 00 	sts	0x00E2, r24
   1eb6c:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eb70:	80 61       	ori	r24, 0x10	; 16
   1eb72:	80 93 e2 00 	sts	0x00E2, r24
   1eb76:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1eb7a:	80 62       	ori	r24, 0x20	; 32
   1eb7c:	80 93 d8 00 	sts	0x00D8, r24
   1eb80:	19 bc       	out	0x29, r1	; 41
   1eb82:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb84:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1eb86:	6c d1       	rcall	.+728    	; 0x1ee60 <USB_Event_Stub>
   1eb88:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1eb8c:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1eb8e:	2e c0       	rjmp	.+92     	; 0x1ebec <__vector_10+0xfe>
   1eb90:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1eb94:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1eb96:	2a c0       	rjmp	.+84     	; 0x1ebec <__vector_10+0xfe>
   1eb98:	8c e0       	ldi	r24, 0x0C	; 12
   1eb9a:	89 bd       	out	0x29, r24	; 41
   1eb9c:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb9e:	89 bd       	out	0x29, r24	; 41
   1eba0:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eba2:	00 fe       	sbrs	r0, 0
   1eba4:	fd cf       	rjmp	.-6      	; 0x1eba0 <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1eba6:	80 91 d8 00 	lds	r24, 0x00D8
   1ebaa:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ebac:	80 93 d8 00 	sts	0x00D8, r24
   1ebb0:	80 91 e1 00 	lds	r24, 0x00E1
   1ebb4:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1ebb6:	80 93 e1 00 	sts	0x00E1, r24
   1ebba:	80 91 e2 00 	lds	r24, 0x00E2
   1ebbe:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ebc0:	80 93 e2 00 	sts	0x00E2, r24
   1ebc4:	80 91 e2 00 	lds	r24, 0x00E2
   1ebc8:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ebca:	80 93 e2 00 	sts	0x00E2, r24
   1ebce:	80 91 96 01 	lds	r24, 0x0196
   1ebd2:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ebd4:	11 f0       	breq	.+4      	; 0x1ebda <__vector_10+0xec>
   1ebd6:	84 e0       	ldi	r24, 0x04	; 4
   1ebd8:	07 c0       	rjmp	.+14     	; 0x1ebe8 <__vector_10+0xfa>
   1ebda:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
   1ebde:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ebe0:	02 c0       	rjmp	.+4      	; 0x1ebe6 <__vector_10+0xf8>
   1ebe2:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1ebe4:	01 c0       	rjmp	.+2      	; 0x1ebe8 <__vector_10+0xfa>
   1ebe6:	81 e0       	ldi	r24, 0x01	; 1
   1ebe8:	8e bb       	out	0x1e, r24	; 30
   1ebea:	3a d1       	rcall	.+628    	; 0x1ee60 <USB_Event_Stub>
   1ebec:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ebf0:	83 ff       	sbrs	r24, 3
   1ebf2:	21 c0       	rjmp	.+66     	; 0x1ec36 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ebf4:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ebf8:	83 ff       	sbrs	r24, 3
   1ebfa:	1d c0       	rjmp	.+58     	; 0x1ec36 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ebfc:	80 91 e1 00 	lds	r24, 0x00E1
   1ec00:	87 7f       	andi	r24, 0xF7	; 247
   1ec02:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ec06:	82 e0       	ldi	r24, 0x02	; 2
   1ec08:	8e bb       	out	0x1e, r24	; 30
   1ec0a:	10 92 96 01 	sts	0x0196, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ec0e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1ec12:	8e 7f       	andi	r24, 0xFE	; 254
   1ec14:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ec18:	80 91 e2 00 	lds	r24, 0x00E2
   1ec1c:	8e 7f       	andi	r24, 0xFE	; 254
   1ec1e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec22:	80 91 e2 00 	lds	r24, 0x00E2
   1ec26:	80 61       	ori	r24, 0x10	; 16
   1ec28:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec2c:	42 e0       	ldi	r20, 0x02	; 2
   1ec2e:	60 e0       	ldi	r22, 0x00	; 0
   1ec30:	80 e0       	ldi	r24, 0x00	; 0
   1ec32:	cf de       	rcall	.-610    	; 0x1e9d2 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ec34:	15 d1       	rcall	.+554    	; 0x1ee60 <USB_Event_Stub>
   1ec36:	ff 91       	pop	r31
   1ec38:	ef 91       	pop	r30
   1ec3a:	bf 91       	pop	r27
   1ec3c:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ec3e:	9f 91       	pop	r25
   1ec40:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ec42:	7f 91       	pop	r23
   1ec44:	6f 91       	pop	r22
   1ec46:	5f 91       	pop	r21
   1ec48:	4f 91       	pop	r20
   1ec4a:	3f 91       	pop	r19
   1ec4c:	2f 91       	pop	r18
   1ec4e:	0f 90       	pop	r0
   1ec50:	0b be       	out	0x3b, r0	; 59
   1ec52:	0f 90       	pop	r0
   1ec54:	0f be       	out	0x3f, r0	; 63
   1ec56:	0f 90       	pop	r0
   1ec58:	1f 90       	pop	r1
   1ec5a:	18 95       	reti

0001ec5c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ec5c:	1f 93       	push	r17
   1ec5e:	cf 93       	push	r28
   1ec60:	df 93       	push	r29
   1ec62:	00 d0       	rcall	.+0      	; 0x1ec64 <USB_Device_ProcessControlRequest+0x8>
   1ec64:	cd b7       	in	r28, 0x3d	; 61
   1ec66:	de b7       	in	r29, 0x3e	; 62
   1ec68:	e8 e9       	ldi	r30, 0x98	; 152
   1ec6a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ec6c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ec70:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ec72:	81 e0       	ldi	r24, 0x01	; 1
   1ec74:	e0 3a       	cpi	r30, 0xA0	; 160
   1ec76:	f8 07       	cpc	r31, r24
   1ec78:	c9 f7       	brne	.-14     	; 0x1ec6c <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ec7a:	48 dd       	rcall	.-1392   	; 0x1e70c <EVENT_USB_Device_ControlRequest>
   1ec7c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec80:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1ec82:	da c0       	rjmp	.+436    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ec84:	90 91 98 01 	lds	r25, 0x0198
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ec88:	80 91 99 01 	lds	r24, 0x0199

		switch (USB_ControlRequest.bRequest)
   1ec8c:	85 30       	cpi	r24, 0x05	; 5
   1ec8e:	09 f4       	brne	.+2      	; 0x1ec92 <USB_Device_ProcessControlRequest+0x36>
   1ec90:	65 c0       	rjmp	.+202    	; 0x1ed5c <USB_Device_ProcessControlRequest+0x100>
   1ec92:	30 f4       	brcc	.+12     	; 0x1eca0 <USB_Device_ProcessControlRequest+0x44>
   1ec94:	81 30       	cpi	r24, 0x01	; 1
   1ec96:	59 f1       	breq	.+86     	; 0x1ecee <USB_Device_ProcessControlRequest+0x92>
   1ec98:	68 f0       	brcs	.+26     	; 0x1ecb4 <USB_Device_ProcessControlRequest+0x58>
   1ec9a:	83 30       	cpi	r24, 0x03	; 3
   1ec9c:	41 f1       	breq	.+80     	; 0x1ecee <USB_Device_ProcessControlRequest+0x92>
   1ec9e:	cc c0       	rjmp	.+408    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1eca0:	88 30       	cpi	r24, 0x08	; 8
   1eca2:	09 f4       	brne	.+2      	; 0x1eca6 <USB_Device_ProcessControlRequest+0x4a>
   1eca4:	9c c0       	rjmp	.+312    	; 0x1edde <USB_Device_ProcessControlRequest+0x182>
   1eca6:	89 30       	cpi	r24, 0x09	; 9
   1eca8:	09 f4       	brne	.+2      	; 0x1ecac <USB_Device_ProcessControlRequest+0x50>
   1ecaa:	ab c0       	rjmp	.+342    	; 0x1ee02 <USB_Device_ProcessControlRequest+0x1a6>
   1ecac:	86 30       	cpi	r24, 0x06	; 6
   1ecae:	09 f0       	breq	.+2      	; 0x1ecb2 <USB_Device_ProcessControlRequest+0x56>
   1ecb0:	c3 c0       	rjmp	.+390    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ecb2:	75 c0       	rjmp	.+234    	; 0x1ed9e <USB_Device_ProcessControlRequest+0x142>
   1ecb4:	90 38       	cpi	r25, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ecb6:	81 f0       	breq	.+32     	; 0x1ecd8 <USB_Device_ProcessControlRequest+0x7c>
   1ecb8:	92 38       	cpi	r25, 0x82	; 130
   1ecba:	09 f0       	breq	.+2      	; 0x1ecbe <USB_Device_ProcessControlRequest+0x62>
   1ecbc:	bd c0       	rjmp	.+378    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ecbe:	80 91 9c 01 	lds	r24, 0x019C
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecc2:	8f 70       	andi	r24, 0x0F	; 15
   1ecc4:	80 93 e9 00 	sts	0x00E9, r24
   1ecc8:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1eccc:	95 fb       	bst	r25, 5
   1ecce:	99 27       	eor	r25, r25
   1ecd0:	90 f9       	bld	r25, 0
   1ecd2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecd6:	01 c0       	rjmp	.+2      	; 0x1ecda <USB_Device_ProcessControlRequest+0x7e>
   1ecd8:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1ecda:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ecde:	87 7f       	andi	r24, 0xF7	; 247
   1ece0:	80 93 e8 00 	sts	0x00E8, r24
   1ece4:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ece8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1ecec:	83 c0       	rjmp	.+262    	; 0x1edf4 <USB_Device_ProcessControlRequest+0x198>
   1ecee:	29 2f       	mov	r18, r25
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ecf0:	2d 7f       	andi	r18, 0xFD	; 253
   1ecf2:	09 f0       	breq	.+2      	; 0x1ecf6 <USB_Device_ProcessControlRequest+0x9a>
   1ecf4:	a1 c0       	rjmp	.+322    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ecf6:	92 30       	cpi	r25, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ecf8:	09 f0       	breq	.+2      	; 0x1ecfc <USB_Device_ProcessControlRequest+0xa0>
   1ecfa:	9e c0       	rjmp	.+316    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ecfc:	90 91 9a 01 	lds	r25, 0x019A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ed00:	91 11       	cpse	r25, r1
   1ed02:	26 c0       	rjmp	.+76     	; 0x1ed50 <USB_Device_ProcessControlRequest+0xf4>
   1ed04:	20 91 9c 01 	lds	r18, 0x019C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ed08:	2f 70       	andi	r18, 0x0F	; 15
   1ed0a:	09 f4       	brne	.+2      	; 0x1ed0e <USB_Device_ProcessControlRequest+0xb2>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1ed0c:	95 c0       	rjmp	.+298    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ed0e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed12:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ed16:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ed18:	1b c0       	rjmp	.+54     	; 0x1ed50 <USB_Device_ProcessControlRequest+0xf4>
   1ed1a:	83 30       	cpi	r24, 0x03	; 3
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ed1c:	21 f4       	brne	.+8      	; 0x1ed26 <USB_Device_ProcessControlRequest+0xca>
   1ed1e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ed22:	80 62       	ori	r24, 0x20	; 32
   1ed24:	13 c0       	rjmp	.+38     	; 0x1ed4c <USB_Device_ProcessControlRequest+0xf0>
   1ed26:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ed2a:	80 61       	ori	r24, 0x10	; 16
   1ed2c:	80 93 eb 00 	sts	0x00EB, r24
   1ed30:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ed32:	90 e0       	ldi	r25, 0x00	; 0
   1ed34:	02 2e       	mov	r0, r18
   1ed36:	01 c0       	rjmp	.+2      	; 0x1ed3a <USB_Device_ProcessControlRequest+0xde>
   1ed38:	88 0f       	add	r24, r24
   1ed3a:	0a 94       	dec	r0
   1ed3c:	ea f7       	brpl	.-6      	; 0x1ed38 <USB_Device_ProcessControlRequest+0xdc>
   1ed3e:	80 93 ea 00 	sts	0x00EA, r24
   1ed42:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1ed46:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ed4a:	88 60       	ori	r24, 0x08	; 8
   1ed4c:	80 93 eb 00 	sts	0x00EB, r24
   1ed50:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed54:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed58:	87 7f       	andi	r24, 0xF7	; 247
   1ed5a:	4f c0       	rjmp	.+158    	; 0x1edfa <USB_Device_ProcessControlRequest+0x19e>
   1ed5c:	91 11       	cpse	r25, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed5e:	6c c0       	rjmp	.+216    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ed60:	10 91 9a 01 	lds	r17, 0x019A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed64:	1f 77       	andi	r17, 0x7F	; 127
   1ed66:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed6a:	80 78       	andi	r24, 0x80	; 128
   1ed6c:	81 2b       	or	r24, r17
   1ed6e:	80 93 e3 00 	sts	0x00E3, r24
   1ed72:	80 91 e8 00 	lds	r24, 0x00E8
   1ed76:	87 7f       	andi	r24, 0xF7	; 247
   1ed78:	80 93 e8 00 	sts	0x00E8, r24
   1ed7c:	3e de       	rcall	.-900    	; 0x1e9fa <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ed7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed82:	80 ff       	sbrs	r24, 0
   1ed84:	fc cf       	rjmp	.-8      	; 0x1ed7e <USB_Device_ProcessControlRequest+0x122>

	while (!(Endpoint_IsINReady()));
   1ed86:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1ed8a:	80 68       	ori	r24, 0x80	; 128
   1ed8c:	80 93 e3 00 	sts	0x00E3, r24
   1ed90:	11 23       	and	r17, r17
   1ed92:	11 f0       	breq	.+4      	; 0x1ed98 <USB_Device_ProcessControlRequest+0x13c>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1ed94:	83 e0       	ldi	r24, 0x03	; 3
   1ed96:	01 c0       	rjmp	.+2      	; 0x1ed9a <USB_Device_ProcessControlRequest+0x13e>
   1ed98:	82 e0       	ldi	r24, 0x02	; 2
   1ed9a:	8e bb       	out	0x1e, r24	; 30
   1ed9c:	4d c0       	rjmp	.+154    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ed9e:	90 58       	subi	r25, 0x80	; 128
   1eda0:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eda2:	08 f0       	brcs	.+2      	; 0x1eda6 <USB_Device_ProcessControlRequest+0x14a>
   1eda4:	49 c0       	rjmp	.+146    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1eda6:	ae 01       	movw	r20, r28
   1eda8:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1edaa:	5f 4f       	sbci	r21, 0xFF	; 255
   1edac:	60 91 9c 01 	lds	r22, 0x019C
   1edb0:	80 91 9a 01 	lds	r24, 0x019A
   1edb4:	90 91 9b 01 	lds	r25, 0x019B
   1edb8:	ea dc       	rcall	.-1580   	; 0x1e78e <CALLBACK_USB_GetDescriptor>
   1edba:	00 97       	sbiw	r24, 0x00	; 0
   1edbc:	09 f4       	brne	.+2      	; 0x1edc0 <USB_Device_ProcessControlRequest+0x164>
   1edbe:	3c c0       	rjmp	.+120    	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1edc0:	20 91 e8 00 	lds	r18, 0x00E8
   1edc4:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edc6:	20 93 e8 00 	sts	0x00E8, r18
   1edca:	bc 01       	movw	r22, r24
   1edcc:	89 81       	ldd	r24, Y+1	; 0x01
   1edce:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1edd0:	69 dd       	rcall	.-1326   	; 0x1e8a4 <Endpoint_Write_Control_Stream_LE>
   1edd2:	80 91 e8 00 	lds	r24, 0x00E8
   1edd6:	8b 77       	andi	r24, 0x7B	; 123
   1edd8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1eddc:	2d c0       	rjmp	.+90     	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1edde:	90 38       	cpi	r25, 0x80	; 128
   1ede0:	59 f5       	brne	.+86     	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ede2:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ede6:	87 7f       	andi	r24, 0xF7	; 247
   1ede8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edec:	80 91 96 01 	lds	r24, 0x0196
   1edf0:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1edf4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1edf8:	8e 77       	andi	r24, 0x7E	; 126
   1edfa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1edfe:	fd dd       	rcall	.-1030   	; 0x1e9fa <Endpoint_ClearStatusStage>
   1ee00:	1b c0       	rjmp	.+54     	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ee02:	91 11       	cpse	r25, r1
   1ee04:	19 c0       	rjmp	.+50     	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ee06:	90 91 9a 01 	lds	r25, 0x019A
   1ee0a:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee0c:	a8 f4       	brcc	.+42     	; 0x1ee38 <USB_Device_ProcessControlRequest+0x1dc>
   1ee0e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ee12:	87 7f       	andi	r24, 0xF7	; 247
   1ee14:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee18:	90 93 96 01 	sts	0x0196, r25
   1ee1c:	ee dd       	rcall	.-1060   	; 0x1e9fa <Endpoint_ClearStatusStage>
   1ee1e:	80 91 96 01 	lds	r24, 0x0196
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ee22:	81 11       	cpse	r24, r1
   1ee24:	04 c0       	rjmp	.+8      	; 0x1ee2e <USB_Device_ProcessControlRequest+0x1d2>

	Endpoint_ClearStatusStage();
   1ee26:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1ee2a:	87 ff       	sbrs	r24, 7
   1ee2c:	02 c0       	rjmp	.+4      	; 0x1ee32 <USB_Device_ProcessControlRequest+0x1d6>
   1ee2e:	84 e0       	ldi	r24, 0x04	; 4
   1ee30:	01 c0       	rjmp	.+2      	; 0x1ee34 <USB_Device_ProcessControlRequest+0x1d8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee32:	81 e0       	ldi	r24, 0x01	; 1
   1ee34:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ee36:	5e dc       	rcall	.-1860   	; 0x1e6f4 <EVENT_USB_Device_ConfigurationChanged>
   1ee38:	80 91 e8 00 	lds	r24, 0x00E8
   1ee3c:	83 ff       	sbrs	r24, 3
   1ee3e:	0a c0       	rjmp	.+20     	; 0x1ee54 <USB_Device_ProcessControlRequest+0x1f8>
   1ee40:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1ee44:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee46:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ee4a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee4e:	80 62       	ori	r24, 0x20	; 32
   1ee50:	80 93 eb 00 	sts	0x00EB, r24
   1ee54:	0f 90       	pop	r0
   1ee56:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee58:	df 91       	pop	r29
   1ee5a:	cf 91       	pop	r28
   1ee5c:	1f 91       	pop	r17
   1ee5e:	08 95       	ret

0001ee60 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ee60:	08 95       	ret

0001ee62 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ee62:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee64:	8e b3       	in	r24, 0x1e	; 30
   1ee66:	88 23       	and	r24, r24
   1ee68:	a9 f0       	breq	.+42     	; 0x1ee94 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee6a:	80 91 e9 00 	lds	r24, 0x00E9
   1ee6e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee70:	90 91 ec 00 	lds	r25, 0x00EC
   1ee74:	90 ff       	sbrs	r25, 0
   1ee76:	02 c0       	rjmp	.+4      	; 0x1ee7c <USB_USBTask+0x1a>
   1ee78:	90 e8       	ldi	r25, 0x80	; 128
   1ee7a:	01 c0       	rjmp	.+2      	; 0x1ee7e <USB_USBTask+0x1c>
   1ee7c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee7e:	c9 2f       	mov	r28, r25
   1ee80:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee82:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee86:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1ee8a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1ee8c:	e7 de       	rcall	.-562    	; 0x1ec5c <USB_Device_ProcessControlRequest>
   1ee8e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee90:	c0 93 e9 00 	sts	0x00E9, r28
   1ee94:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1ee96:	08 95       	ret

0001ee98 <__eerd_byte_usb1287>:
   1ee98:	f9 99       	sbic	0x1f, 1	; 31
   1ee9a:	fe cf       	rjmp	.-4      	; 0x1ee98 <__eerd_byte_usb1287>
   1ee9c:	92 bd       	out	0x22, r25	; 34
   1ee9e:	81 bd       	out	0x21, r24	; 33
   1eea0:	f8 9a       	sbi	0x1f, 0	; 31
   1eea2:	99 27       	eor	r25, r25
   1eea4:	80 b5       	in	r24, 0x20	; 32
   1eea6:	08 95       	ret

0001eea8 <__eewr_byte_usb1287>:
   1eea8:	26 2f       	mov	r18, r22

0001eeaa <__eewr_r18_usb1287>:
   1eeaa:	f9 99       	sbic	0x1f, 1	; 31
   1eeac:	fe cf       	rjmp	.-4      	; 0x1eeaa <__eewr_r18_usb1287>
   1eeae:	1f ba       	out	0x1f, r1	; 31
   1eeb0:	92 bd       	out	0x22, r25	; 34
   1eeb2:	81 bd       	out	0x21, r24	; 33
   1eeb4:	20 bd       	out	0x20, r18	; 32
   1eeb6:	0f b6       	in	r0, 0x3f	; 63
   1eeb8:	f8 94       	cli
   1eeba:	fa 9a       	sbi	0x1f, 2	; 31
   1eebc:	f9 9a       	sbi	0x1f, 1	; 31
   1eebe:	0f be       	out	0x3f, r0	; 63
   1eec0:	01 96       	adiw	r24, 0x01	; 1
   1eec2:	08 95       	ret

0001eec4 <_exit>:
   1eec4:	f8 94       	cli

0001eec6 <__stop_program>:
   1eec6:	ff cf       	rjmp	.-2      	; 0x1eec6 <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 fa f3 	jmp	0x1e7f4	; 0x1e7f4 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 0e f4 	jmp	0x1e81c	; 0x1e81c <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 22 f4 	jmp	0x1e844	; 0x1e844 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 31 f4 	jmp	0x1e862	; 0x1e862 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 37 f4 	jmp	0x1e86e	; 0x1e86e <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 3d f4 	jmp	0x1e87a	; 0x1e87a <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 44 f4 	jmp	0x1e888	; 0x1e888 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	00 df       	rcall	.-512    	; 0x1fdfe <__data_load_end+0xea4>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xa9c>
